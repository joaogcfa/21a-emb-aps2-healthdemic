
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028e20  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00428e20  00428e20  00038e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a10  20400000  00428e28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00039920  20400a10  00429838  00040a10  2**2
                  ALLOC
  4 .stack        00002000  2043a330  00463158  00040a10  2**0
                  ALLOC
  5 .heap         00000200  2043c330  00465158  00040a10  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00040a10  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00040a3c  2**0
                  CONTENTS, READONLY
  8 .debug_info   0009c7af  00000000  00000000  00040af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000de71  00000000  00000000  000dd29f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00045ef3  00000000  00000000  000eb110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a68  00000000  00000000  00131003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000053c0  00000000  00000000  00133a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030b79  00000000  00000000  00138e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000399dc  00000000  00000000  001699a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aeb35  00000000  00000000  001a3380  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000087fc  00000000  00000000  00251eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	30 c3 43 20 39 df 41 00 35 df 41 00 35 df 41 00     0.C 9.A.5.A.5.A.
  400010:	35 df 41 00 35 df 41 00 35 df 41 00 00 00 00 00     5.A.5.A.5.A.....
	...
  40002c:	49 15 40 00 35 df 41 00 00 00 00 00 e9 15 40 00     I.@.5.A.......@.
  40003c:	51 16 40 00 35 df 41 00 35 df 41 00 35 df 41 00     Q.@.5.A.5.A.5.A.
  40004c:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40005c:	35 df 41 00 35 df 41 00 00 00 00 00 c1 da 41 00     5.A.5.A.......A.
  40006c:	d5 da 41 00 e9 da 41 00 35 df 41 00 35 df 41 00     ..A...A.5.A.5.A.
  40007c:	35 df 41 00 fd da 41 00 11 db 41 00 35 df 41 00     5.A...A...A.5.A.
  40008c:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40009c:	55 02 40 00 35 df 41 00 35 df 41 00 35 df 41 00     U.@.5.A.5.A.5.A.
  4000ac:	35 df 41 00 35 df 41 00 9d 13 40 00 35 df 41 00     5.A.5.A...@.5.A.
  4000bc:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  4000cc:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  4000dc:	35 df 41 00 b1 13 40 00 35 df 41 00 35 df 41 00     5.A...@.5.A.5.A.
  4000ec:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  4000fc:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40010c:	35 df 41 00 35 df 41 00 00 00 00 00 00 00 00 00     5.A.5.A.........
  40011c:	00 00 00 00 35 df 41 00 35 df 41 00 35 df 41 00     ....5.A.5.A.5.A.
  40012c:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40013c:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40014c:	35 df 41 00 35 df 41 00 35 df 41 00 35 df 41 00     5.A.5.A.5.A.5.A.
  40015c:	35 df 41 00 35 df 41 00 35 df 41 00                 5.A.5.A.5.A.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a10 	.word	0x20400a10
  400184:	00000000 	.word	0x00000000
  400188:	00428e28 	.word	0x00428e28

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00428e28 	.word	0x00428e28
  4001c8:	20400a14 	.word	0x20400a14
  4001cc:	00428e28 	.word	0x00428e28
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);

  tc_start(TC, TC_CHANNEL);
}

void vTimerEcgCallback( TimerHandle_t xTimer ) {
  4001d4:	b508      	push	{r3, lr}
  // delay entre ECGs de [200, 500]
  g_ecgDelayValue = rand() % (500 + 1 - 200) + 200;
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	0041fb55 	.word	0x0041fb55
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a06c 	.word	0x2043a06c

00400204 <config_DAC>:
static void config_DAC(void) {
  400204:	b510      	push	{r4, lr}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  dacc_reset(DACC_BASE);
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  dacc_set_transfer_mode(DACC_BASE, 0);
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  dacc_set_osr(DACC_BASE, DACC_CHANNEL, 5 );
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  dacc_enable_channel(DACC_BASE, DACC_CHANNEL);
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  dacc_set_analog_control(DACC_BASE, DACC_ANALOG_CONTROL);
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	0041dc39 	.word	0x0041dc39
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
void TC0_Handler(void) {
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  ul_dummy = tc_get_status(TC0, 0);
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  if (g_ecgCnt >= g_ecgSize) {
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
    g_ecgCnt = 0;
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
    g_ecgDelayCnt = g_ecgDelayValue;
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  if (g_ecgDelayCnt > 0) {
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
    g_ecgDelayCnt--;
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  dacc_write_conversion_data(DACC_BASE, ecg[g_ecgCnt], DACC_CHANNEL);
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
}
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
    g_ecgCnt++;
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	0040055b 	.word	0x0040055b
  4002b8:	2043a064 	.word	0x2043a064
  4002bc:	004283fc 	.word	0x004283fc
  4002c0:	2043a06c 	.word	0x2043a06c
  4002c4:	2043a068 	.word	0x2043a068
  4002c8:	00426d34 	.word	0x00426d34
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
void TC_init_modificado(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  pmc_enable_periph_clk(ID_TC);
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  tc_init(TC, TC_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK2 | TC_CMR_CPCTRG);
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / 16) / freq);
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  NVIC_SetPriority(ID_TC, 4);
  400312:	b263      	sxtb	r3, r4
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  tc_start(TC, TC_CHANNEL);
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
}
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	0041dc39 	.word	0x0041dc39
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	00400529 	.word	0x00400529
  400364:	011e1a30 	.word	0x011e1a30
  400368:	0040054b 	.word	0x0040054b
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	00400553 	.word	0x00400553
  400378:	00400543 	.word	0x00400543
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	00400563 	.word	0x00400563
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
 // printf("%d \n", g_ecgDelayValue);
}

void task_aps2(void *pvParameters) {
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  
  g_ecgDelayValue = 200;
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  config_DAC();
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  TC_init_modificado(TC0, ID_TC0, 0, DAC_FS);
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  xTimer = xTimerCreate("ECG", pdMS_TO_TICKS(ECG_CHANGE_TIME), pdTRUE, (void *) 0, vTimerEcgCallback);
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  xTimerStart( xTimer, 0 );
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  
  // oxiometria
  char ox;
  float theta = 0;
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
    
    // Oxiometria: sin entre 88 e 100
    if (theta > 2*PI) {
      theta = 0;
    }
    ox = (char) ((arm_sin_f32(theta) + 1.0)*12.0/2.0 + 88.0);
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
    theta = theta + 0.3;
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
    xQueueSend(xQueueOx, &ox, 100);
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4

    vTaskDelay(2000);
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
    if (theta > 2*PI) {
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
      theta = 0;
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a06c 	.word	0x2043a06c
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	004223c8 	.word	0x004223c8
  400470:	00402e2d 	.word	0x00402e2d
  400474:	2043a300 	.word	0x2043a300
  400478:	00402455 	.word	0x00402455
  40047c:	00402e8d 	.word	0x00402e8d
  400480:	00000000 	.word	0x00000000
  400484:	0041e721 	.word	0x0041e721
  400488:	0041ea69 	.word	0x0041ea69
  40048c:	0041e7ad 	.word	0x0041e7ad
  400490:	3ff00000 	.word	0x3ff00000
  400494:	0041eb11 	.word	0x0041eb11
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	0041ef35 	.word	0x0041ef35
  4004a8:	0041ef75 	.word	0x0041ef75
  4004ac:	2043a304 	.word	0x2043a304
  4004b0:	00401b79 	.word	0x00401b79
  4004b4:	004026b5 	.word	0x004026b5
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
 *
 * \param p_dacc Pointer to a DACC instance. 
 */
void dacc_reset(Dacc *p_dacc)
{
	p_dacc->DACC_CR = DACC_CR_SWRST;
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_transfer_mode(Dacc *p_dacc, uint32_t ul_mode)
{
	if (ul_mode) {
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
		p_dacc->DACC_MR &= (~DACC_MR_WORD);
#elif (SAM4S) || (SAM4E)
		p_dacc->DACC_MR |= DACC_MR_ONE;
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#elif (SAMV70 || SAMV71 || SAME70 || SAMS70)
		p_dacc->DACC_MR = ul_mode;
  4004c4:	6041      	str	r1, [r0, #4]
#else
		p_dacc->DACC_MR &= (~DACC_MR_WORD_WORD);
#endif
	}
	return DACC_RC_OK;
}
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
		p_dacc->DACC_MR = ul_mode;
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
 * \param ul_data The data to be transferred to analog value. 
 * \param channel The channel to convert the data ul_data
 */
void dacc_write_conversion_data(Dacc *p_dacc, uint32_t ul_data, uint32_t channel)
{
	p_dacc->DACC_CDR[channel] = ul_data;
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_osr(Dacc *p_dacc, uint32_t channel, uint32_t ul_osr)
{
	uint32_t mr = p_dacc->DACC_TRIGR;
  4004d8:	6883      	ldr	r3, [r0, #8]
	if(channel == 0) {
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
{
  4004dc:	b410      	push	{r4}
		mr &= (~DACC_TRIGR_OSR0_Msk);
		mr |=  DACC_TRIGR_OSR0(ul_osr);
	}else if(channel == 1) {
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
		mr &= (~DACC_TRIGR_OSR1_Msk);
		mr |=  DACC_TRIGR_OSR1(ul_osr);
	}
	p_dacc->DACC_TRIGR = mr;
  4004e2:	6083      	str	r3, [r0, #8]
	return DACC_RC_OK;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR0_Msk);
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
		mr |=  DACC_TRIGR_OSR0(ul_osr);
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
	p_dacc->DACC_TRIGR = mr;
  4004f8:	6083      	str	r3, [r0, #8]
}
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
		mr &= (~DACC_TRIGR_OSR1_Msk);
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
		mr |=  DACC_TRIGR_OSR1(ul_osr);
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_enable_channel(Dacc *p_dacc, uint32_t ul_channel)
{
	if (ul_channel > MAX_CH_NB)
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
		return DACC_RC_INVALID_PARAM;
  400510:	2001      	movs	r0, #1

	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
	return DACC_RC_OK;
}
  400512:	4770      	bx	lr
	p_dacc->DACC_CHER = DACC_CHER_CH0 << ul_channel;
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
	return DACC_RC_OK;
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
 *
 * \return \ref DACC_RC_OK for OK.
 */
uint32_t dacc_set_analog_control(Dacc *p_dacc, uint32_t ul_analog_control)
{
	p_dacc->DACC_ACR = ul_analog_control;
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
	return DACC_RC_OK;
}
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400528:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40052a:	0189      	lsls	r1, r1, #6
  40052c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40052e:	2402      	movs	r4, #2
  400530:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400532:	f04f 31ff 	mov.w	r1, #4294967295
  400536:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400538:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  40053a:	605a      	str	r2, [r3, #4]
}
  40053c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400540:	4770      	bx	lr

00400542 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400542:	0189      	lsls	r1, r1, #6
  400544:	2305      	movs	r3, #5
  400546:	5043      	str	r3, [r0, r1]
  400548:	4770      	bx	lr

0040054a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40054a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40054e:	61ca      	str	r2, [r1, #28]
  400550:	4770      	bx	lr

00400552 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400552:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400556:	624a      	str	r2, [r1, #36]	; 0x24
  400558:	4770      	bx	lr

0040055a <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40055a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40055e:	6a08      	ldr	r0, [r1, #32]
}
  400560:	4770      	bx	lr

00400562 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400562:	b470      	push	{r4, r5, r6}
  400564:	b087      	sub	sp, #28
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400566:	2402      	movs	r4, #2
  400568:	9401      	str	r4, [sp, #4]
  40056a:	2408      	movs	r4, #8
  40056c:	9402      	str	r4, [sp, #8]
  40056e:	2420      	movs	r4, #32
  400570:	9403      	str	r4, [sp, #12]
  400572:	2480      	movs	r4, #128	; 0x80
  400574:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400578:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  40057a:	9405      	str	r4, [sp, #20]
	uint32_t ul_index;
	uint32_t ul_high, ul_low;

	/*  Satisfy frequency bound. */
	for (ul_index = 0;
  40057c:	2500      	movs	r5, #0
  40057e:	2d04      	cmp	r5, #4
  400580:	d80d      	bhi.n	40059e <tc_find_mck_divisor+0x3c>
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
  400582:	ac06      	add	r4, sp, #24
  400584:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  400588:	f854 4c14 	ldr.w	r4, [r4, #-20]
  40058c:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400590:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400592:	4284      	cmp	r4, r0
  400594:	d312      	bcc.n	4005bc <tc_find_mck_divisor+0x5a>
			return 0;
		} else if (ul_freq >= ul_low) {
  400596:	4286      	cmp	r6, r0
  400598:	d901      	bls.n	40059e <tc_find_mck_divisor+0x3c>
			ul_index++) {
  40059a:	3501      	adds	r5, #1
  40059c:	e7ef      	b.n	40057e <tc_find_mck_divisor+0x1c>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
  40059e:	2d04      	cmp	r5, #4
  4005a0:	d80e      	bhi.n	4005c0 <tc_find_mck_divisor+0x5e>
		return 0;
	}

	/*  Store results. */
	if (p_uldiv) {
  4005a2:	b12a      	cbz	r2, 4005b0 <tc_find_mck_divisor+0x4e>
		*p_uldiv = divisors[ul_index];
  4005a4:	a906      	add	r1, sp, #24
  4005a6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4005aa:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4005ae:	6011      	str	r1, [r2, #0]
	}

	if (p_ultcclks) {
  4005b0:	b143      	cbz	r3, 4005c4 <tc_find_mck_divisor+0x62>
		*p_ultcclks = ul_index;
  4005b2:	601d      	str	r5, [r3, #0]
	}

	return 1;
  4005b4:	2001      	movs	r0, #1
}
  4005b6:	b007      	add	sp, #28
  4005b8:	bc70      	pop	{r4, r5, r6}
  4005ba:	4770      	bx	lr
			return 0;
  4005bc:	2000      	movs	r0, #0
  4005be:	e7fa      	b.n	4005b6 <tc_find_mck_divisor+0x54>
		return 0;
  4005c0:	2000      	movs	r0, #0
  4005c2:	e7f8      	b.n	4005b6 <tc_find_mck_divisor+0x54>
	return 1;
  4005c4:	2001      	movs	r0, #1
  4005c6:	e7f6      	b.n	4005b6 <tc_find_mck_divisor+0x54>

004005c8 <insert_sort>:

int readTouchY(void) {
  return (readXm());
}

static void insert_sort(int array[], uint8_t size) {
  4005c8:	b430      	push	{r4, r5}
  uint8_t j;
  int save;

  for (int i = 1; i < size; i++) {
  4005ca:	2501      	movs	r5, #1
  4005cc:	e00e      	b.n	4005ec <insert_sort+0x24>
    save = array[i];
    for (j = i; j >= 1 && save < array[j - 1]; j--)
    array[j] = array[j - 1];
  4005ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4005d2:	3b01      	subs	r3, #1
  4005d4:	b2db      	uxtb	r3, r3
  4005d6:	b133      	cbz	r3, 4005e6 <insert_sort+0x1e>
  4005d8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4005dc:	441a      	add	r2, r3
  4005de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4005e2:	4294      	cmp	r4, r2
  4005e4:	dbf3      	blt.n	4005ce <insert_sort+0x6>
    array[j] = save;
  4005e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  for (int i = 1; i < size; i++) {
  4005ea:	3501      	adds	r5, #1
  4005ec:	428d      	cmp	r5, r1
  4005ee:	da03      	bge.n	4005f8 <insert_sort+0x30>
    save = array[i];
  4005f0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
    for (j = i; j >= 1 && save < array[j - 1]; j--)
  4005f4:	b2eb      	uxtb	r3, r5
  4005f6:	e7ee      	b.n	4005d6 <insert_sort+0xe>
  }
}
  4005f8:	bc30      	pop	{r4, r5}
  4005fa:	4770      	bx	lr

004005fc <config_AFEC_touch>:
static void config_AFEC_touch(Afec *afec, uint32_t afec_id, uint32_t afec_channel, afec_callback_t callback) {
  4005fc:	b530      	push	{r4, r5, lr}
  4005fe:	b089      	sub	sp, #36	; 0x24
  400600:	4604      	mov	r4, r0
  400602:	4615      	mov	r5, r2
  afec_get_config_defaults(&afec_cfg);
  400604:	a802      	add	r0, sp, #8
  400606:	4b13      	ldr	r3, [pc, #76]	; (400654 <config_AFEC_touch+0x58>)
  400608:	4798      	blx	r3
  afec_init(afec, &afec_cfg);
  40060a:	a902      	add	r1, sp, #8
  40060c:	4620      	mov	r0, r4
  40060e:	4b12      	ldr	r3, [pc, #72]	; (400658 <config_AFEC_touch+0x5c>)
  400610:	4798      	blx	r3
static inline void afec_set_trigger(Afec *const afec,
		const enum afec_trigger trigger)
{
	uint32_t reg;

	reg = afec->AFEC_MR;
  400612:	6863      	ldr	r3, [r4, #4]

	if (trigger == AFEC_TRIG_FREERUN) {
		reg |= AFEC_MR_FREERUN_ON;
  400614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	} else {
		reg &= ~(AFEC_MR_TRGSEL_Msk | AFEC_MR_TRGEN | AFEC_MR_FREERUN_ON);
		reg |= trigger;
	}

	afec->AFEC_MR = reg;
  400618:	6063      	str	r3, [r4, #4]
  afec_ch_get_config_defaults(&afec_ch_cfg);
  40061a:	a801      	add	r0, sp, #4
  40061c:	4b0f      	ldr	r3, [pc, #60]	; (40065c <config_AFEC_touch+0x60>)
  40061e:	4798      	blx	r3
  afec_ch_cfg.gain = AFEC_GAINVALUE_0;
  400620:	2300      	movs	r3, #0
  400622:	f88d 3005 	strb.w	r3, [sp, #5]
  afec_ch_set_config(afec, afec_channel, &afec_ch_cfg);
  400626:	b2ad      	uxth	r5, r5
  400628:	aa01      	add	r2, sp, #4
  40062a:	4629      	mov	r1, r5
  40062c:	4620      	mov	r0, r4
  40062e:	4b0c      	ldr	r3, [pc, #48]	; (400660 <config_AFEC_touch+0x64>)
  400630:	4798      	blx	r3
static inline void afec_channel_set_analog_offset(Afec *const afec,
		enum afec_channel_num afec_ch, uint16_t aoffset)
{
	afec_ch_sanity_check(afec, afec_ch);

	afec->AFEC_CSELR = afec_ch;
  400632:	6665      	str	r5, [r4, #100]	; 0x64
	afec->AFEC_COCR = (aoffset & AFEC_COCR_AOFF_Msk);
  400634:	f44f 7300 	mov.w	r3, #512	; 0x200
  400638:	66e3      	str	r3, [r4, #108]	; 0x6c
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40063a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40063e:	429d      	cmp	r5, r3
  400640:	d005      	beq.n	40064e <config_AFEC_touch+0x52>
  400642:	2301      	movs	r3, #1
  400644:	fa03 f505 	lsl.w	r5, r3, r5
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400648:	6165      	str	r5, [r4, #20]
}
  40064a:	b009      	add	sp, #36	; 0x24
  40064c:	bd30      	pop	{r4, r5, pc}
			AFEC_CHANNEL_ALL : 1 << afec_ch;
  40064e:	f640 75ff 	movw	r5, #4095	; 0xfff
  400652:	e7f9      	b.n	400648 <config_AFEC_touch+0x4c>
  400654:	004012f9 	.word	0x004012f9
  400658:	00401335 	.word	0x00401335
  40065c:	00401329 	.word	0x00401329
  400660:	004012c5 	.word	0x004012c5

00400664 <configure_touch>:
void configure_touch(void) {
  400664:	b570      	push	{r4, r5, r6, lr}
  pmc_enable_periph_clk(XM_PIO_ID);
  400666:	200c      	movs	r0, #12
  400668:	4c0d      	ldr	r4, [pc, #52]	; (4006a0 <configure_touch+0x3c>)
  40066a:	47a0      	blx	r4
  pmc_enable_periph_clk(YP_PIO_ID);
  40066c:	2010      	movs	r0, #16
  40066e:	47a0      	blx	r4
  pmc_enable_periph_clk(XP_PIO_ID);
  400670:	200c      	movs	r0, #12
  400672:	47a0      	blx	r4
  pmc_enable_periph_clk(YM_PIO_ID);
  400674:	2010      	movs	r0, #16
  400676:	47a0      	blx	r4
  afec_enable(XM_AFEC);
  400678:	4d0a      	ldr	r5, [pc, #40]	; (4006a4 <configure_touch+0x40>)
  40067a:	4628      	mov	r0, r5
  40067c:	4e0a      	ldr	r6, [pc, #40]	; (4006a8 <configure_touch+0x44>)
  40067e:	47b0      	blx	r6
  afec_enable(YP_AFEC);
  400680:	4c0a      	ldr	r4, [pc, #40]	; (4006ac <configure_touch+0x48>)
  400682:	4620      	mov	r0, r4
  400684:	47b0      	blx	r6
  config_AFEC_touch(YP_AFEC, YP_AFEC_ID, YP_CHANNEL, NULL);
  400686:	2300      	movs	r3, #0
  400688:	461a      	mov	r2, r3
  40068a:	211d      	movs	r1, #29
  40068c:	4620      	mov	r0, r4
  40068e:	4c08      	ldr	r4, [pc, #32]	; (4006b0 <configure_touch+0x4c>)
  400690:	47a0      	blx	r4
  config_AFEC_touch(XM_AFEC, XM_AFEC_ID, XM_CHANNEL, NULL);
  400692:	2300      	movs	r3, #0
  400694:	2201      	movs	r2, #1
  400696:	2128      	movs	r1, #40	; 0x28
  400698:	4628      	mov	r0, r5
  40069a:	47a0      	blx	r4
  40069c:	bd70      	pop	{r4, r5, r6, pc}
  40069e:	bf00      	nop
  4006a0:	0041dc39 	.word	0x0041dc39
  4006a4:	40064000 	.word	0x40064000
  4006a8:	004013c5 	.word	0x004013c5
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	004005fd 	.word	0x004005fd

004006b4 <readYp>:
	afec->AFEC_CSELR = afec_ch;
  4006b4:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <readYp+0xc>)
  4006b6:	2200      	movs	r2, #0
  4006b8:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4006ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	4003c000 	.word	0x4003c000

004006c4 <readXm>:
	afec->AFEC_CSELR = afec_ch;
  4006c4:	4b02      	ldr	r3, [pc, #8]	; (4006d0 <readXm+0xc>)
  4006c6:	2201      	movs	r2, #1
  4006c8:	665a      	str	r2, [r3, #100]	; 0x64
	return afec->AFEC_CDR;
  4006ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4006cc:	4770      	bx	lr
  4006ce:	bf00      	nop
  4006d0:	40064000 	.word	0x40064000

004006d4 <configReadTouchX>:
void configReadTouchX(void){
  4006d4:	b538      	push	{r3, r4, r5, lr}
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  4006d6:	2201      	movs	r2, #1
  4006d8:	4b14      	ldr	r3, [pc, #80]	; (40072c <configReadTouchX+0x58>)
  4006da:	615a      	str	r2, [r3, #20]
	afec->AFEC_CHDR = (afec_ch == AFEC_CHANNEL_ALL) ?
  4006dc:	2202      	movs	r2, #2
  4006de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4006e2:	619a      	str	r2, [r3, #24]
  pio_configure(XP_PIO, PIO_OUTPUT_1, XP_MASK, PIO_DEFAULT);
  4006e4:	4d12      	ldr	r5, [pc, #72]	; (400730 <configReadTouchX+0x5c>)
  4006e6:	2300      	movs	r3, #0
  4006e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006f0:	4628      	mov	r0, r5
  4006f2:	4c10      	ldr	r4, [pc, #64]	; (400734 <configReadTouchX+0x60>)
  4006f4:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_OUTPUT_0, XM_MASK, PIO_DEFAULT);
  4006f6:	2300      	movs	r3, #0
  4006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4006fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400700:	4628      	mov	r0, r5
  400702:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_INPUT, YM_MASK, PIO_DEFAULT);
  400704:	f505 7500 	add.w	r5, r5, #512	; 0x200
  400708:	2300      	movs	r3, #0
  40070a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40070e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400712:	4628      	mov	r0, r5
  400714:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  400716:	2300      	movs	r3, #0
  400718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40071c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400720:	4628      	mov	r0, r5
  400722:	47a0      	blx	r4
  delay_ms(5);
  400724:	4804      	ldr	r0, [pc, #16]	; (400738 <configReadTouchX+0x64>)
  400726:	4b05      	ldr	r3, [pc, #20]	; (40073c <configReadTouchX+0x68>)
  400728:	4798      	blx	r3
  40072a:	bd38      	pop	{r3, r4, r5, pc}
  40072c:	4003c000 	.word	0x4003c000
  400730:	400e1200 	.word	0x400e1200
  400734:	0041d881 	.word	0x0041d881
  400738:	0003dbc2 	.word	0x0003dbc2
  40073c:	20400001 	.word	0x20400001

00400740 <configReadTouchY>:
void configReadTouchY(void) {
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	2201      	movs	r2, #1
  400744:	4b14      	ldr	r3, [pc, #80]	; (400798 <configReadTouchY+0x58>)
  400746:	619a      	str	r2, [r3, #24]
	afec->AFEC_CHER = (afec_ch == AFEC_CHANNEL_ALL) ?
  400748:	2202      	movs	r2, #2
  40074a:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  40074e:	615a      	str	r2, [r3, #20]
  pio_configure(YP_PIO, PIO_OUTPUT_1, YP_MASK, PIO_DEFAULT);
  400750:	4d12      	ldr	r5, [pc, #72]	; (40079c <configReadTouchY+0x5c>)
  400752:	2300      	movs	r3, #0
  400754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400758:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40075c:	4628      	mov	r0, r5
  40075e:	4c10      	ldr	r4, [pc, #64]	; (4007a0 <configReadTouchY+0x60>)
  400760:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_0, YM_MASK, PIO_DEFAULT);
  400762:	2300      	movs	r3, #0
  400764:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400768:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40076c:	4628      	mov	r0, r5
  40076e:	47a0      	blx	r4
  pio_configure(XP_PIO, PIO_INPUT, XP_MASK, PIO_DEFAULT);
  400770:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400774:	2300      	movs	r3, #0
  400776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40077a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40077e:	4628      	mov	r0, r5
  400780:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  400782:	2300      	movs	r3, #0
  400784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400788:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40078c:	4628      	mov	r0, r5
  40078e:	47a0      	blx	r4
  delay_ms(5);
  400790:	4804      	ldr	r0, [pc, #16]	; (4007a4 <configReadTouchY+0x64>)
  400792:	4b05      	ldr	r3, [pc, #20]	; (4007a8 <configReadTouchY+0x68>)
  400794:	4798      	blx	r3
  400796:	bd38      	pop	{r3, r4, r5, pc}
  400798:	4003c000 	.word	0x4003c000
  40079c:	400e1400 	.word	0x400e1400
  4007a0:	0041d881 	.word	0x0041d881
  4007a4:	0003dbc2 	.word	0x0003dbc2
  4007a8:	20400001 	.word	0x20400001

004007ac <readTouchZ>:
int readTouchZ(int rxplate) {
  4007ac:	b570      	push	{r4, r5, r6, lr}
  4007ae:	ed2d 8b04 	vpush	{d8-d9}
  4007b2:	ee08 0a10 	vmov	s16, r0
  pio_configure(XP_PIO, PIO_OUTPUT_0, XP_MASK, PIO_DEFAULT);
  4007b6:	4d2e      	ldr	r5, [pc, #184]	; (400870 <readTouchZ+0xc4>)
  4007b8:	2300      	movs	r3, #0
  4007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4007c2:	4628      	mov	r0, r5
  4007c4:	4c2b      	ldr	r4, [pc, #172]	; (400874 <readTouchZ+0xc8>)
  4007c6:	47a0      	blx	r4
  pio_configure(YM_PIO, PIO_OUTPUT_1, YM_MASK, PIO_DEFAULT);
  4007c8:	4e2b      	ldr	r6, [pc, #172]	; (400878 <readTouchZ+0xcc>)
  4007ca:	2300      	movs	r3, #0
  4007cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4007d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4007d4:	4630      	mov	r0, r6
  4007d6:	47a0      	blx	r4
  pio_configure(YP_PIO, PIO_INPUT, YP_MASK, PIO_DEFAULT);
  4007d8:	2300      	movs	r3, #0
  4007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007de:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007e2:	4630      	mov	r0, r6
  4007e4:	47a0      	blx	r4
  pio_configure(XM_PIO, PIO_INPUT, XM_MASK, PIO_DEFAULT);
  4007e6:	2300      	movs	r3, #0
  4007e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4007ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007f0:	4628      	mov	r0, r5
  4007f2:	47a0      	blx	r4
  4007f4:	2201      	movs	r2, #1
  4007f6:	4b21      	ldr	r3, [pc, #132]	; (40087c <readTouchZ+0xd0>)
  4007f8:	615a      	str	r2, [r3, #20]
  4007fa:	2202      	movs	r2, #2
  4007fc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400800:	615a      	str	r2, [r3, #20]
  delay_ms(5);
  400802:	481f      	ldr	r0, [pc, #124]	; (400880 <readTouchZ+0xd4>)
  400804:	4b1f      	ldr	r3, [pc, #124]	; (400884 <readTouchZ+0xd8>)
  400806:	4798      	blx	r3
  int z1 = readXm();
  400808:	4c1f      	ldr	r4, [pc, #124]	; (400888 <readTouchZ+0xdc>)
  40080a:	47a0      	blx	r4
  40080c:	ee08 0a90 	vmov	s17, r0
  int z2 = readYp();
  400810:	4b1e      	ldr	r3, [pc, #120]	; (40088c <readTouchZ+0xe0>)
  400812:	4798      	blx	r3
  400814:	ee09 0a10 	vmov	s18, r0
  configReadTouchX();
  400818:	4b1d      	ldr	r3, [pc, #116]	; (400890 <readTouchZ+0xe4>)
  40081a:	4798      	blx	r3
  int x  = readXm();
  40081c:	47a0      	blx	r4
  rtouch = z2;
  40081e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  rtouch /= z1;
  400822:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400826:	ee89 7a28 	vdiv.f32	s14, s18, s17
  rtouch -= 1;
  40082a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40082e:	ee37 7a67 	vsub.f32	s14, s14, s15
  rtouch *= x;
  400832:	ee07 0a90 	vmov	s15, r0
  400836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40083a:	ee27 7a87 	vmul.f32	s14, s15, s14
  rtouch *= rxplate;
  40083e:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400842:	ee67 7a87 	vmul.f32	s15, s15, s14
  rtouch /= 1024;
  400846:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400894 <readTouchZ+0xe8>
  40084a:	ee67 7a87 	vmul.f32	s15, s15, s14
  if(rtouch < 100.0)
  40084e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400898 <readTouchZ+0xec>
  400852:	eef4 7ac7 	vcmpe.f32	s15, s14
  400856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40085a:	d501      	bpl.n	400860 <readTouchZ+0xb4>
  rtouch = 1024.0;
  40085c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 40089c <readTouchZ+0xf0>
}
  400860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400864:	ee17 0a90 	vmov	r0, s15
  400868:	ecbd 8b04 	vpop	{d8-d9}
  40086c:	bd70      	pop	{r4, r5, r6, pc}
  40086e:	bf00      	nop
  400870:	400e1200 	.word	0x400e1200
  400874:	0041d881 	.word	0x0041d881
  400878:	400e1400 	.word	0x400e1400
  40087c:	4003c000 	.word	0x4003c000
  400880:	0003dbc2 	.word	0x0003dbc2
  400884:	20400001 	.word	0x20400001
  400888:	004006c5 	.word	0x004006c5
  40088c:	004006b5 	.word	0x004006b5
  400890:	004006d5 	.word	0x004006d5
  400894:	3a800000 	.word	0x3a800000
  400898:	42c80000 	.word	0x42c80000
  40089c:	44800000 	.word	0x44800000

004008a0 <readTouchX>:
int readTouchX(void) {
  4008a0:	b508      	push	{r3, lr}
  return(readYp());
  4008a2:	4b01      	ldr	r3, [pc, #4]	; (4008a8 <readTouchX+0x8>)
  4008a4:	4798      	blx	r3
}
  4008a6:	bd08      	pop	{r3, pc}
  4008a8:	004006b5 	.word	0x004006b5

004008ac <readTouchY>:
int readTouchY(void) {
  4008ac:	b508      	push	{r3, lr}
  return (readXm());
  4008ae:	4b01      	ldr	r3, [pc, #4]	; (4008b4 <readTouchY+0x8>)
  4008b0:	4798      	blx	r3
}
  4008b2:	bd08      	pop	{r3, pc}
  4008b4:	004006c5 	.word	0x004006c5

004008b8 <readRawPoint>:

void readRawPoint(int *x, int *y, int *z) {
  4008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008ba:	b0c1      	sub	sp, #260	; 0x104
  4008bc:	4607      	mov	r7, r0
  4008be:	460e      	mov	r6, r1
  4008c0:	4615      	mov	r5, r2
  int samples[TOUCH_NUMSAMPLES];
  char valid = 0 ;
  
  configReadTouchX();
  4008c2:	4b16      	ldr	r3, [pc, #88]	; (40091c <readRawPoint+0x64>)
  4008c4:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008c6:	2400      	movs	r4, #0
  4008c8:	e007      	b.n	4008da <readRawPoint+0x22>
    delay_us(1);
  4008ca:	2033      	movs	r0, #51	; 0x33
  4008cc:	4b14      	ldr	r3, [pc, #80]	; (400920 <readRawPoint+0x68>)
  4008ce:	4798      	blx	r3
    samples[i] = readTouchX();
  4008d0:	4b14      	ldr	r3, [pc, #80]	; (400924 <readRawPoint+0x6c>)
  4008d2:	4798      	blx	r3
  4008d4:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008d8:	3401      	adds	r4, #1
  4008da:	2c3f      	cmp	r4, #63	; 0x3f
  4008dc:	ddf5      	ble.n	4008ca <readRawPoint+0x12>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  4008de:	2140      	movs	r1, #64	; 0x40
  4008e0:	4668      	mov	r0, sp
  4008e2:	4b11      	ldr	r3, [pc, #68]	; (400928 <readRawPoint+0x70>)
  4008e4:	4798      	blx	r3
  *x = (samples[TOUCH_NUMSAMPLES / 2]);
  4008e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4008e8:	603b      	str	r3, [r7, #0]
  
  configReadTouchY();
  4008ea:	4b10      	ldr	r3, [pc, #64]	; (40092c <readRawPoint+0x74>)
  4008ec:	4798      	blx	r3
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008ee:	2400      	movs	r4, #0
  4008f0:	e004      	b.n	4008fc <readRawPoint+0x44>
    samples[i] = readTouchY();
  4008f2:	4b0f      	ldr	r3, [pc, #60]	; (400930 <readRawPoint+0x78>)
  4008f4:	4798      	blx	r3
  4008f6:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  for (int i=0; i<TOUCH_NUMSAMPLES; i++) {
  4008fa:	3401      	adds	r4, #1
  4008fc:	2c3f      	cmp	r4, #63	; 0x3f
  4008fe:	ddf8      	ble.n	4008f2 <readRawPoint+0x3a>
  }
  insert_sort(samples, TOUCH_NUMSAMPLES);
  400900:	2140      	movs	r1, #64	; 0x40
  400902:	4668      	mov	r0, sp
  400904:	4b08      	ldr	r3, [pc, #32]	; (400928 <readRawPoint+0x70>)
  400906:	4798      	blx	r3
  *y = (samples[TOUCH_NUMSAMPLES / 2]);
  400908:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40090a:	6033      	str	r3, [r6, #0]
  
  *z = readTouchZ(300);
  40090c:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400910:	4b08      	ldr	r3, [pc, #32]	; (400934 <readRawPoint+0x7c>)
  400912:	4798      	blx	r3
  400914:	6028      	str	r0, [r5, #0]
}
  400916:	b041      	add	sp, #260	; 0x104
  400918:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40091a:	bf00      	nop
  40091c:	004006d5 	.word	0x004006d5
  400920:	20400001 	.word	0x20400001
  400924:	004008a1 	.word	0x004008a1
  400928:	004005c9 	.word	0x004005c9
  40092c:	00400741 	.word	0x00400741
  400930:	004008ad 	.word	0x004008ad
  400934:	004007ad 	.word	0x004007ad

00400938 <pointToCoordinate>:

// returns if valid touch
// checks Z pressure!
int pointToCoordinate(int x, int y, int z, int *px, int *py) {
  400938:	b510      	push	{r4, lr}
  int xtemp, ytemp;
  
  xtemp = TOUCH_LCD_WIDTH*(x-TOUCH_X_240)/(TOUCH_X_0-TOUCH_X_240);
  40093a:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  40093e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400942:	0104      	lsls	r4, r0, #4
  400944:	4818      	ldr	r0, [pc, #96]	; (4009a8 <pointToCoordinate+0x70>)
  400946:	fb80 e004 	smull	lr, r0, r0, r4
  40094a:	4420      	add	r0, r4
  40094c:	17e4      	asrs	r4, r4, #31
  40094e:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  if(xtemp > TOUCH_LCD_WIDTH) xtemp=TOUCH_LCD_WIDTH;
  400952:	2cf0      	cmp	r4, #240	; 0xf0
  400954:	dd00      	ble.n	400958 <pointToCoordinate+0x20>
  400956:	24f0      	movs	r4, #240	; 0xf0
  if(xtemp < 0) xtemp=0;
  400958:	2c00      	cmp	r4, #0
  40095a:	db1e      	blt.n	40099a <pointToCoordinate+0x62>
  *py = xtemp;
  40095c:	9802      	ldr	r0, [sp, #8]
  40095e:	6004      	str	r4, [r0, #0]
    
  ytemp = TOUCH_LCD_HEIGHT - TOUCH_LCD_HEIGHT*(y-TOUCH_Y_0)/(TOUCH_Y_320-TOUCH_Y_0);
  400960:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400964:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400968:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  40096c:	0188      	lsls	r0, r1, #6
  40096e:	490f      	ldr	r1, [pc, #60]	; (4009ac <pointToCoordinate+0x74>)
  400970:	fb81 4100 	smull	r4, r1, r1, r0
  400974:	4401      	add	r1, r0
  400976:	17c0      	asrs	r0, r0, #31
  400978:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  40097c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  if(ytemp > TOUCH_LCD_HEIGHT) ytemp=TOUCH_LCD_HEIGHT;
  400980:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400984:	dd01      	ble.n	40098a <pointToCoordinate+0x52>
  400986:	f44f 70a0 	mov.w	r0, #320	; 0x140
  if(ytemp < 0) ytemp=0;
  40098a:	2800      	cmp	r0, #0
  40098c:	db07      	blt.n	40099e <pointToCoordinate+0x66>
  *px = ytemp;
  40098e:	6018      	str	r0, [r3, #0]

  if(z < TOUCH_PRESSURE_DETECT) {
  400990:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400994:	db05      	blt.n	4009a2 <pointToCoordinate+0x6a>
    return 1;
  }  
  return 0;
  400996:	2000      	movs	r0, #0
}
  400998:	bd10      	pop	{r4, pc}
  if(xtemp < 0) xtemp=0;
  40099a:	2400      	movs	r4, #0
  40099c:	e7de      	b.n	40095c <pointToCoordinate+0x24>
  if(ytemp < 0) ytemp=0;
  40099e:	2000      	movs	r0, #0
  4009a0:	e7f5      	b.n	40098e <pointToCoordinate+0x56>
    return 1;
  4009a2:	2001      	movs	r0, #1
  4009a4:	bd10      	pop	{r4, pc}
  4009a6:	bf00      	nop
  4009a8:	cd9a6735 	.word	0xcd9a6735
  4009ac:	bc97c21f 	.word	0xbc97c21f

004009b0 <readPoint>:

int readPoint(int *px, int *py){
  4009b0:	b530      	push	{r4, r5, lr}
  4009b2:	b087      	sub	sp, #28
  4009b4:	4604      	mov	r4, r0
  4009b6:	460d      	mov	r5, r1
  int x, y, z;
  readRawPoint(&x, &y, &z);
  4009b8:	aa03      	add	r2, sp, #12
  4009ba:	a904      	add	r1, sp, #16
  4009bc:	a805      	add	r0, sp, #20
  4009be:	4b05      	ldr	r3, [pc, #20]	; (4009d4 <readPoint+0x24>)
  4009c0:	4798      	blx	r3
  return(pointToCoordinate(x,y,z, px, py));
  4009c2:	9500      	str	r5, [sp, #0]
  4009c4:	4623      	mov	r3, r4
  4009c6:	9a03      	ldr	r2, [sp, #12]
  4009c8:	9904      	ldr	r1, [sp, #16]
  4009ca:	9805      	ldr	r0, [sp, #20]
  4009cc:	4c02      	ldr	r4, [pc, #8]	; (4009d8 <readPoint+0x28>)
  4009ce:	47a0      	blx	r4
}
  4009d0:	b007      	add	sp, #28
  4009d2:	bd30      	pop	{r4, r5, pc}
  4009d4:	004008b9 	.word	0x004008b9
  4009d8:	00400939 	.word	0x00400939

004009dc <ili9341_send_command>:
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4009dc:	2240      	movs	r2, #64	; 0x40
  4009de:	4b10      	ldr	r3, [pc, #64]	; (400a20 <ili9341_send_command+0x44>)
  4009e0:	635a      	str	r2, [r3, #52]	; 0x34
  4009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4009e6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4009ea:	635a      	str	r2, [r3, #52]	; 0x34
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4009ec:	4b0d      	ldr	r3, [pc, #52]	; (400a24 <ili9341_send_command+0x48>)
  4009ee:	691b      	ldr	r3, [r3, #16]
  4009f0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4009f4:	d110      	bne.n	400a18 <ili9341_send_command+0x3c>
		return 1;
	} else {
		return 0;
  4009f6:	2300      	movs	r3, #0
 * \brief Helper function to wait for the last send operation to complete
 */
__always_inline static void ili9341_wait_for_send_done(void)
{
	/* Wait for TX to complete */
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d0f7      	beq.n	4009ec <ili9341_send_command+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4009fc:	4b09      	ldr	r3, [pc, #36]	; (400a24 <ili9341_send_command+0x48>)
  4009fe:	60d8      	str	r0, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <ili9341_send_command+0x48>)
  400a02:	691b      	ldr	r3, [r3, #16]
  400a04:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a08:	d108      	bne.n	400a1c <ili9341_send_command+0x40>
		return 0;
  400a0a:	2300      	movs	r3, #0
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f7      	beq.n	400a00 <ili9341_send_command+0x24>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400a10:	2240      	movs	r2, #64	; 0x40
  400a12:	4b03      	ldr	r3, [pc, #12]	; (400a20 <ili9341_send_command+0x44>)
  400a14:	631a      	str	r2, [r3, #48]	; 0x30
  400a16:	4770      	bx	lr
		return 1;
  400a18:	2301      	movs	r3, #1
  400a1a:	e7ed      	b.n	4009f8 <ili9341_send_command+0x1c>
  400a1c:	2301      	movs	r3, #1
  400a1e:	e7f5      	b.n	400a0c <ili9341_send_command+0x30>
  400a20:	400e0e00 	.word	0x400e0e00
  400a24:	40008000 	.word	0x40008000

00400a28 <ili9341_send_draw_limits>:
 * drawing limits to the display, as set through the various limit functions.
 *
 * \param send_end_limits  True to also send the lower-right drawing limits
 */
static void ili9341_send_draw_limits(const bool send_end_limits)
{
  400a28:	b510      	push	{r4, lr}
  400a2a:	4604      	mov	r4, r0
	ili9341_send_command(ILI9341_CMD_COLUMN_ADDRESS_SET);
  400a2c:	202a      	movs	r0, #42	; 0x2a
  400a2e:	4b4e      	ldr	r3, [pc, #312]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400a30:	4798      	blx	r3
	ili9341_send_byte(limit_start_x >> 8);
  400a32:	4b4e      	ldr	r3, [pc, #312]	; (400b6c <ili9341_send_draw_limits+0x144>)
  400a34:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a38:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a3c:	4b4c      	ldr	r3, [pc, #304]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a3e:	691b      	ldr	r3, [r3, #16]
  400a40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a44:	d17b      	bne.n	400b3e <ili9341_send_draw_limits+0x116>
		return 0;
  400a46:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d0f7      	beq.n	400a3c <ili9341_send_draw_limits+0x14>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a4c:	4b48      	ldr	r3, [pc, #288]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a4e:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_x & 0xFF);
  400a50:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a52:	4b47      	ldr	r3, [pc, #284]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a54:	691b      	ldr	r3, [r3, #16]
  400a56:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a5a:	d172      	bne.n	400b42 <ili9341_send_draw_limits+0x11a>
		return 0;
  400a5c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a5e:	2b00      	cmp	r3, #0
  400a60:	d0f7      	beq.n	400a52 <ili9341_send_draw_limits+0x2a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a62:	4b43      	ldr	r3, [pc, #268]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a64:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400a66:	b1cc      	cbz	r4, 400a9c <ili9341_send_draw_limits+0x74>
		ili9341_send_byte(limit_end_x >> 8);
  400a68:	4b42      	ldr	r3, [pc, #264]	; (400b74 <ili9341_send_draw_limits+0x14c>)
  400a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a6e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a72:	4b3f      	ldr	r3, [pc, #252]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a74:	691b      	ldr	r3, [r3, #16]
  400a76:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a7a:	d164      	bne.n	400b46 <ili9341_send_draw_limits+0x11e>
		return 0;
  400a7c:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d0f7      	beq.n	400a72 <ili9341_send_draw_limits+0x4a>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a82:	4b3b      	ldr	r3, [pc, #236]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a84:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_x & 0xFF);
  400a86:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a88:	4b39      	ldr	r3, [pc, #228]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a8a:	691b      	ldr	r3, [r3, #16]
  400a8c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a90:	d15b      	bne.n	400b4a <ili9341_send_draw_limits+0x122>
		return 0;
  400a92:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400a94:	2b00      	cmp	r3, #0
  400a96:	d0f7      	beq.n	400a88 <ili9341_send_draw_limits+0x60>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400a98:	4b35      	ldr	r3, [pc, #212]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400a9c:	4b34      	ldr	r3, [pc, #208]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9e:	691b      	ldr	r3, [r3, #16]
  400aa0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aa4:	d153      	bne.n	400b4e <ili9341_send_draw_limits+0x126>
		return 0;
  400aa6:	2300      	movs	r3, #0
  400aa8:	2b00      	cmp	r3, #0
  400aaa:	d0f7      	beq.n	400a9c <ili9341_send_draw_limits+0x74>
  400aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ab0:	4b31      	ldr	r3, [pc, #196]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400ab2:	631a      	str	r2, [r3, #48]	; 0x30
	}
	ili9341_wait_for_send_done();
	ili9341_deselect_chip();

	ili9341_send_command(ILI9341_CMD_PAGE_ADDRESS_SET);
  400ab4:	202b      	movs	r0, #43	; 0x2b
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400ab8:	4798      	blx	r3
	ili9341_send_byte(limit_start_y >> 8);
  400aba:	4b30      	ldr	r3, [pc, #192]	; (400b7c <ili9341_send_draw_limits+0x154>)
  400abc:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ac0:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ac4:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ac6:	691b      	ldr	r3, [r3, #16]
  400ac8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400acc:	d141      	bne.n	400b52 <ili9341_send_draw_limits+0x12a>
		return 0;
  400ace:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d0f7      	beq.n	400ac4 <ili9341_send_draw_limits+0x9c>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ad4:	4b26      	ldr	r3, [pc, #152]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ad6:	60d9      	str	r1, [r3, #12]
	ili9341_send_byte(limit_start_y & 0xFF);
  400ad8:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ada:	4b25      	ldr	r3, [pc, #148]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400adc:	691b      	ldr	r3, [r3, #16]
  400ade:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ae2:	d138      	bne.n	400b56 <ili9341_send_draw_limits+0x12e>
		return 0;
  400ae4:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d0f7      	beq.n	400ada <ili9341_send_draw_limits+0xb2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400aea:	4b21      	ldr	r3, [pc, #132]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400aec:	60da      	str	r2, [r3, #12]
	if (send_end_limits) {
  400aee:	b1cc      	cbz	r4, 400b24 <ili9341_send_draw_limits+0xfc>
		ili9341_send_byte(limit_end_y >> 8);
  400af0:	4b23      	ldr	r3, [pc, #140]	; (400b80 <ili9341_send_draw_limits+0x158>)
  400af2:	f9b3 2000 	ldrsh.w	r2, [r3]
  400af6:	f3c2 2107 	ubfx	r1, r2, #8, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400afa:	4b1d      	ldr	r3, [pc, #116]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400afc:	691b      	ldr	r3, [r3, #16]
  400afe:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b02:	d12a      	bne.n	400b5a <ili9341_send_draw_limits+0x132>
		return 0;
  400b04:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b06:	2b00      	cmp	r3, #0
  400b08:	d0f7      	beq.n	400afa <ili9341_send_draw_limits+0xd2>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b0a:	4b19      	ldr	r3, [pc, #100]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b0c:	60d9      	str	r1, [r3, #12]
		ili9341_send_byte(limit_end_y & 0xFF);
  400b0e:	b2d2      	uxtb	r2, r2
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b10:	4b17      	ldr	r3, [pc, #92]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b12:	691b      	ldr	r3, [r3, #16]
  400b14:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b18:	d121      	bne.n	400b5e <ili9341_send_draw_limits+0x136>
		return 0;
  400b1a:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d0f7      	beq.n	400b10 <ili9341_send_draw_limits+0xe8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400b20:	4b13      	ldr	r3, [pc, #76]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b22:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400b24:	4b12      	ldr	r3, [pc, #72]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b26:	691b      	ldr	r3, [r3, #16]
  400b28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b2c:	d119      	bne.n	400b62 <ili9341_send_draw_limits+0x13a>
		return 0;
  400b2e:	2300      	movs	r3, #0
  400b30:	2b00      	cmp	r3, #0
  400b32:	d0f7      	beq.n	400b24 <ili9341_send_draw_limits+0xfc>
  400b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b38:	4b0f      	ldr	r3, [pc, #60]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400b3a:	631a      	str	r2, [r3, #48]	; 0x30
  400b3c:	bd10      	pop	{r4, pc}
		return 1;
  400b3e:	2301      	movs	r3, #1
  400b40:	e782      	b.n	400a48 <ili9341_send_draw_limits+0x20>
  400b42:	2301      	movs	r3, #1
  400b44:	e78b      	b.n	400a5e <ili9341_send_draw_limits+0x36>
  400b46:	2301      	movs	r3, #1
  400b48:	e799      	b.n	400a7e <ili9341_send_draw_limits+0x56>
  400b4a:	2301      	movs	r3, #1
  400b4c:	e7a2      	b.n	400a94 <ili9341_send_draw_limits+0x6c>
  400b4e:	2301      	movs	r3, #1
  400b50:	e7aa      	b.n	400aa8 <ili9341_send_draw_limits+0x80>
  400b52:	2301      	movs	r3, #1
  400b54:	e7bc      	b.n	400ad0 <ili9341_send_draw_limits+0xa8>
  400b56:	2301      	movs	r3, #1
  400b58:	e7c5      	b.n	400ae6 <ili9341_send_draw_limits+0xbe>
  400b5a:	2301      	movs	r3, #1
  400b5c:	e7d3      	b.n	400b06 <ili9341_send_draw_limits+0xde>
  400b5e:	2301      	movs	r3, #1
  400b60:	e7dc      	b.n	400b1c <ili9341_send_draw_limits+0xf4>
  400b62:	2301      	movs	r3, #1
  400b64:	e7e4      	b.n	400b30 <ili9341_send_draw_limits+0x108>
  400b66:	bf00      	nop
  400b68:	004009dd 	.word	0x004009dd
  400b6c:	20400a30 	.word	0x20400a30
  400b70:	40008000 	.word	0x40008000
  400b74:	20400a2c 	.word	0x20400a2c
  400b78:	400e1400 	.word	0x400e1400
  400b7c:	20400a32 	.word	0x20400a32
  400b80:	20400a2e 	.word	0x20400a2e

00400b84 <ili9341_interface_init>:
 * interface through either the SPI module in master mode or the USART in
 * Master SPI mode.  Configuration must be done in the associated
 * conf_ili9341.h file.
 */
static void ili9341_interface_init(void)
{
  400b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b88:	b084      	sub	sp, #16
	#error Interface for ILI9341 has not been selected or interface not\
	supported, please configure component driver using the conf_ili9341.h\
	file!
#endif

	struct spi_device device = { .id = BOARD_ILI9488_SPI_NPCS, };     	// Board specific chip select configuration
  400b8a:	2703      	movs	r7, #3
  400b8c:	ad04      	add	r5, sp, #16
  400b8e:	f845 7d04 	str.w	r7, [r5, #-4]!

	spi_master_init(CONF_ILI9341_SPI);
  400b92:	4c10      	ldr	r4, [pc, #64]	; (400bd4 <ili9341_interface_init+0x50>)
  400b94:	4620      	mov	r0, r4
  400b96:	4b10      	ldr	r3, [pc, #64]	; (400bd8 <ili9341_interface_init+0x54>)
  400b98:	4798      	blx	r3
	spi_master_setup_device(CONF_ILI9341_SPI, &device, spi_flags, CONF_ILI9341_CLOCK_SPEED, spi_select_id);
  400b9a:	2600      	movs	r6, #0
  400b9c:	9600      	str	r6, [sp, #0]
  400b9e:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <ili9341_interface_init+0x58>)
  400ba0:	4632      	mov	r2, r6
  400ba2:	4629      	mov	r1, r5
  400ba4:	4620      	mov	r0, r4
  400ba6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400bf0 <ili9341_interface_init+0x6c>
  400baa:	47c0      	blx	r8
 	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400bac:	4632      	mov	r2, r6
  400bae:	4639      	mov	r1, r7
  400bb0:	4620      	mov	r0, r4
  400bb2:	4b0b      	ldr	r3, [pc, #44]	; (400be0 <ili9341_interface_init+0x5c>)
  400bb4:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400bb6:	2601      	movs	r6, #1
  400bb8:	6026      	str	r6, [r4, #0]
	spi_enable(CONF_ILI9341_SPI);
  spi_select_device(CONF_ILI9341_SPI, &device);
  400bba:	4629      	mov	r1, r5
  400bbc:	4620      	mov	r0, r4
  400bbe:	4b09      	ldr	r3, [pc, #36]	; (400be4 <ili9341_interface_init+0x60>)
  400bc0:	4798      	blx	r3
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400bc2:	23f0      	movs	r3, #240	; 0xf0
  400bc4:	60e3      	str	r3, [r4, #12]
  400bc6:	60e6      	str	r6, [r4, #12]
	/* Send one dummy byte for the spi_is_tx_ok() to work as expected */
	spi_write_single(CONF_ILI9341_SPI, 0xF0);
  
  // from adafruit lib: https://github.com/adafruit/Adafruit_ILI9341/blob/1e4305308aae231bb5c475de9afc671e78caa722/Adafruit_ILI9341.cpp#L194
  spi_write_single(CONF_ILI9341_SPI, ILI9341_CMD_SOFTWARE_RESET); // Engage software reset
  delay_ms(150);
  400bc8:	4807      	ldr	r0, [pc, #28]	; (400be8 <ili9341_interface_init+0x64>)
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <ili9341_interface_init+0x68>)
  400bcc:	4798      	blx	r3
}
  400bce:	b004      	add	sp, #16
  400bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bd4:	40008000 	.word	0x40008000
  400bd8:	0041d331 	.word	0x0041d331
  400bdc:	02625a00 	.word	0x02625a00
  400be0:	0041dcf1 	.word	0x0041dcf1
  400be4:	0041d405 	.word	0x0041d405
  400be8:	0073c0b7 	.word	0x0073c0b7
  400bec:	20400001 	.word	0x20400001
  400bf0:	0041d385 	.word	0x0041d385

00400bf4 <ili9341_reset_display>:
 * \brief Reset the display using the digital control interface
 *
 * Controls the reset pin of the display controller to reset the display.
 */
static void ili9341_reset_display(void)
{
  400bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bf6:	4d07      	ldr	r5, [pc, #28]	; (400c14 <ili9341_reset_display+0x20>)
  400bf8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400bfc:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(10);
  400bfe:	4f06      	ldr	r7, [pc, #24]	; (400c18 <ili9341_reset_display+0x24>)
  400c00:	4638      	mov	r0, r7
  400c02:	4c06      	ldr	r4, [pc, #24]	; (400c1c <ili9341_reset_display+0x28>)
  400c04:	47a0      	blx	r4
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c06:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(LCD_SPI_RESET_PIO, false);
	delay_ms(10);
  400c08:	4638      	mov	r0, r7
  400c0a:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400c0c:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(LCD_SPI_RESET_PIO, true);
	delay_ms(150);
  400c0e:	4804      	ldr	r0, [pc, #16]	; (400c20 <ili9341_reset_display+0x2c>)
  400c10:	47a0      	blx	r4
  400c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	0007b784 	.word	0x0007b784
  400c1c:	20400001 	.word	0x20400001
  400c20:	0073c0b7 	.word	0x0073c0b7

00400c24 <ili9341_exit_standby>:
{
  400c24:	b570      	push	{r4, r5, r6, lr}
	ili9341_send_command(ILI9341_CMD_SLEEP_OUT);
  400c26:	2011      	movs	r0, #17
  400c28:	4e06      	ldr	r6, [pc, #24]	; (400c44 <ili9341_exit_standby+0x20>)
  400c2a:	47b0      	blx	r6
  400c2c:	4c06      	ldr	r4, [pc, #24]	; (400c48 <ili9341_exit_standby+0x24>)
  400c2e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400c32:	6325      	str	r5, [r4, #48]	; 0x30
	delay_ms(150);
  400c34:	4805      	ldr	r0, [pc, #20]	; (400c4c <ili9341_exit_standby+0x28>)
  400c36:	4b06      	ldr	r3, [pc, #24]	; (400c50 <ili9341_exit_standby+0x2c>)
  400c38:	4798      	blx	r3
	ili9341_send_command(ILI9341_CMD_DISPLAY_ON);
  400c3a:	2029      	movs	r0, #41	; 0x29
  400c3c:	47b0      	blx	r6
  400c3e:	6325      	str	r5, [r4, #48]	; 0x30
  400c40:	bd70      	pop	{r4, r5, r6, pc}
  400c42:	bf00      	nop
  400c44:	004009dd 	.word	0x004009dd
  400c48:	400e1400 	.word	0x400e1400
  400c4c:	0073c0b7 	.word	0x0073c0b7
  400c50:	20400001 	.word	0x20400001

00400c54 <ili9341_set_top_left_limit>:
{
  400c54:	b508      	push	{r3, lr}
	limit_start_x = x;
  400c56:	4b04      	ldr	r3, [pc, #16]	; (400c68 <ili9341_set_top_left_limit+0x14>)
  400c58:	8018      	strh	r0, [r3, #0]
	limit_start_y = y;
  400c5a:	4b04      	ldr	r3, [pc, #16]	; (400c6c <ili9341_set_top_left_limit+0x18>)
  400c5c:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(false);
  400c5e:	2000      	movs	r0, #0
  400c60:	4b03      	ldr	r3, [pc, #12]	; (400c70 <ili9341_set_top_left_limit+0x1c>)
  400c62:	4798      	blx	r3
  400c64:	bd08      	pop	{r3, pc}
  400c66:	bf00      	nop
  400c68:	20400a30 	.word	0x20400a30
  400c6c:	20400a32 	.word	0x20400a32
  400c70:	00400a29 	.word	0x00400a29

00400c74 <ili9341_set_bottom_right_limit>:
{
  400c74:	b508      	push	{r3, lr}
	limit_end_x = x;
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <ili9341_set_bottom_right_limit+0x14>)
  400c78:	8018      	strh	r0, [r3, #0]
	limit_end_y = y;
  400c7a:	4b04      	ldr	r3, [pc, #16]	; (400c8c <ili9341_set_bottom_right_limit+0x18>)
  400c7c:	8019      	strh	r1, [r3, #0]
	ili9341_send_draw_limits(true);
  400c7e:	2001      	movs	r0, #1
  400c80:	4b03      	ldr	r3, [pc, #12]	; (400c90 <ili9341_set_bottom_right_limit+0x1c>)
  400c82:	4798      	blx	r3
  400c84:	bd08      	pop	{r3, pc}
  400c86:	bf00      	nop
  400c88:	20400a2c 	.word	0x20400a2c
  400c8c:	20400a2e 	.word	0x20400a2e
  400c90:	00400a29 	.word	0x00400a29

00400c94 <ili9341_set_limits>:
{
  400c94:	b510      	push	{r4, lr}
	limit_start_x = start_x;
  400c96:	4c06      	ldr	r4, [pc, #24]	; (400cb0 <ili9341_set_limits+0x1c>)
  400c98:	8020      	strh	r0, [r4, #0]
	limit_start_y = start_y;
  400c9a:	4806      	ldr	r0, [pc, #24]	; (400cb4 <ili9341_set_limits+0x20>)
  400c9c:	8001      	strh	r1, [r0, #0]
	limit_end_x = end_x;
  400c9e:	4906      	ldr	r1, [pc, #24]	; (400cb8 <ili9341_set_limits+0x24>)
  400ca0:	800a      	strh	r2, [r1, #0]
	limit_end_y = end_y;
  400ca2:	4a06      	ldr	r2, [pc, #24]	; (400cbc <ili9341_set_limits+0x28>)
  400ca4:	8013      	strh	r3, [r2, #0]
	ili9341_send_draw_limits(true);
  400ca6:	2001      	movs	r0, #1
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <ili9341_set_limits+0x2c>)
  400caa:	4798      	blx	r3
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	20400a30 	.word	0x20400a30
  400cb4:	20400a32 	.word	0x20400a32
  400cb8:	20400a2c 	.word	0x20400a2c
  400cbc:	20400a2e 	.word	0x20400a2e
  400cc0:	00400a29 	.word	0x00400a29

00400cc4 <ili9341_copy_pixels_to_screen>:
{
  400cc4:	b538      	push	{r3, r4, r5, lr}
  400cc6:	4605      	mov	r5, r0
  400cc8:	460c      	mov	r4, r1
	ili9341_send_command(ILI9341_CMD_MEMORY_WRITE);
  400cca:	202c      	movs	r0, #44	; 0x2c
  400ccc:	4b18      	ldr	r3, [pc, #96]	; (400d30 <ili9341_copy_pixels_to_screen+0x6c>)
  400cce:	4798      	blx	r3
	while (count--) {
  400cd0:	e018      	b.n	400d04 <ili9341_copy_pixels_to_screen+0x40>
		ili9341_send_byte(*pixel);
  400cd2:	782a      	ldrb	r2, [r5, #0]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cd4:	4b17      	ldr	r3, [pc, #92]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cd6:	691b      	ldr	r3, [r3, #16]
  400cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cdc:	d122      	bne.n	400d24 <ili9341_copy_pixels_to_screen+0x60>
		return 0;
  400cde:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d0f7      	beq.n	400cd4 <ili9341_copy_pixels_to_screen+0x10>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ce4:	4b13      	ldr	r3, [pc, #76]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400ce6:	60da      	str	r2, [r3, #12]
		ili9341_send_byte(*pixel >> 8);
  400ce8:	882a      	ldrh	r2, [r5, #0]
  400cea:	0a12      	lsrs	r2, r2, #8
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400cec:	4b11      	ldr	r3, [pc, #68]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cee:	691b      	ldr	r3, [r3, #16]
  400cf0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cf4:	d118      	bne.n	400d28 <ili9341_copy_pixels_to_screen+0x64>
		return 0;
  400cf6:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400cf8:	2b00      	cmp	r3, #0
  400cfa:	d0f7      	beq.n	400cec <ili9341_copy_pixels_to_screen+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400cfc:	4b0d      	ldr	r3, [pc, #52]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cfe:	60da      	str	r2, [r3, #12]
		pixel++;
  400d00:	3502      	adds	r5, #2
	while (count--) {
  400d02:	460c      	mov	r4, r1
  400d04:	1e61      	subs	r1, r4, #1
  400d06:	2c00      	cmp	r4, #0
  400d08:	d1e3      	bne.n	400cd2 <ili9341_copy_pixels_to_screen+0xe>
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d0a:	4b0a      	ldr	r3, [pc, #40]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400d0c:	691b      	ldr	r3, [r3, #16]
  400d0e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d12:	d10b      	bne.n	400d2c <ili9341_copy_pixels_to_screen+0x68>
		return 0;
  400d14:	4623      	mov	r3, r4
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d16:	2b00      	cmp	r3, #0
  400d18:	d0f7      	beq.n	400d0a <ili9341_copy_pixels_to_screen+0x46>
  400d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ili9341_copy_pixels_to_screen+0x74>)
  400d20:	631a      	str	r2, [r3, #48]	; 0x30
  400d22:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
  400d24:	2301      	movs	r3, #1
  400d26:	e7db      	b.n	400ce0 <ili9341_copy_pixels_to_screen+0x1c>
  400d28:	2301      	movs	r3, #1
  400d2a:	e7e5      	b.n	400cf8 <ili9341_copy_pixels_to_screen+0x34>
  400d2c:	2301      	movs	r3, #1
  400d2e:	e7f2      	b.n	400d16 <ili9341_copy_pixels_to_screen+0x52>
  400d30:	004009dd 	.word	0x004009dd
  400d34:	40008000 	.word	0x40008000
  400d38:	400e1400 	.word	0x400e1400

00400d3c <ili9341_set_orientation>:
 *
 * \param flags Orientation flags to use, see \ref ILI9341_FLIP_X, \ref ILI9341_FLIP_Y
 *        and \ref ILI9341_SWITCH_XY.
 */
void ili9341_set_orientation(uint8_t flags)
{
  400d3c:	b510      	push	{r4, lr}
	uint8_t madctl = 0x48;

	/* Pretend the display is in landscape mode by default to match other display drivers */
	flags ^= ILI9341_SWITCH_XY | ILI9341_FLIP_X;
  400d3e:	f080 0005 	eor.w	r0, r0, #5

	if (flags & ILI9341_FLIP_X) {
  400d42:	f010 0f01 	tst.w	r0, #1
  400d46:	d124      	bne.n	400d92 <ili9341_set_orientation+0x56>
	uint8_t madctl = 0x48;
  400d48:	2448      	movs	r4, #72	; 0x48
		madctl &= ~(1 << 6);
	}

	if (flags & ILI9341_FLIP_Y) {
  400d4a:	f010 0f02 	tst.w	r0, #2
  400d4e:	d001      	beq.n	400d54 <ili9341_set_orientation+0x18>
		madctl |= 1 << 7;
  400d50:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	}

	if (flags & ILI9341_SWITCH_XY) {
  400d54:	f010 0f04 	tst.w	r0, #4
  400d58:	d001      	beq.n	400d5e <ili9341_set_orientation+0x22>
		madctl |= 1 << 5;
  400d5a:	f044 0420 	orr.w	r4, r4, #32
	}

	ili9341_send_command(ILI9341_CMD_MEMORY_ACCESS_CONTROL);
  400d5e:	2036      	movs	r0, #54	; 0x36
  400d60:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <ili9341_set_orientation+0x64>)
  400d62:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <ili9341_set_orientation+0x68>)
  400d66:	691b      	ldr	r3, [r3, #16]
  400d68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d6c:	d113      	bne.n	400d96 <ili9341_set_orientation+0x5a>
		return 0;
  400d6e:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400d70:	2b00      	cmp	r3, #0
  400d72:	d0f7      	beq.n	400d64 <ili9341_set_orientation+0x28>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400d74:	4b0b      	ldr	r3, [pc, #44]	; (400da4 <ili9341_set_orientation+0x68>)
  400d76:	60dc      	str	r4, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400d78:	4b0a      	ldr	r3, [pc, #40]	; (400da4 <ili9341_set_orientation+0x68>)
  400d7a:	691b      	ldr	r3, [r3, #16]
  400d7c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d80:	d10b      	bne.n	400d9a <ili9341_set_orientation+0x5e>
		return 0;
  400d82:	2300      	movs	r3, #0
  400d84:	2b00      	cmp	r3, #0
  400d86:	d0f7      	beq.n	400d78 <ili9341_set_orientation+0x3c>
  400d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d8c:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ili9341_set_orientation+0x6c>)
  400d8e:	631a      	str	r2, [r3, #48]	; 0x30
  400d90:	bd10      	pop	{r4, pc}
		madctl &= ~(1 << 6);
  400d92:	2408      	movs	r4, #8
  400d94:	e7d9      	b.n	400d4a <ili9341_set_orientation+0xe>
		return 1;
  400d96:	2301      	movs	r3, #1
  400d98:	e7ea      	b.n	400d70 <ili9341_set_orientation+0x34>
  400d9a:	2301      	movs	r3, #1
  400d9c:	e7f2      	b.n	400d84 <ili9341_set_orientation+0x48>
  400d9e:	bf00      	nop
  400da0:	004009dd 	.word	0x004009dd
  400da4:	40008000 	.word	0x40008000
  400da8:	400e1400 	.word	0x400e1400

00400dac <ili9341_controller_init_registers>:
{
  400dac:	b510      	push	{r4, lr}
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_A);
  400dae:	20cd      	movs	r0, #205	; 0xcd
  400db0:	4ba9      	ldr	r3, [pc, #676]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400db2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400db4:	4ba9      	ldr	r3, [pc, #676]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400db6:	691b      	ldr	r3, [r3, #16]
  400db8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dbc:	f040 8195 	bne.w	4010ea <ili9341_controller_init_registers+0x33e>
		return 0;
  400dc0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d0f6      	beq.n	400db4 <ili9341_controller_init_registers+0x8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400dc6:	2239      	movs	r2, #57	; 0x39
  400dc8:	4ba4      	ldr	r3, [pc, #656]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dca:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400dcc:	4ba3      	ldr	r3, [pc, #652]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dce:	691b      	ldr	r3, [r3, #16]
  400dd0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dd4:	f040 818b 	bne.w	4010ee <ili9341_controller_init_registers+0x342>
		return 0;
  400dd8:	2300      	movs	r3, #0
  400dda:	2b00      	cmp	r3, #0
  400ddc:	d0f6      	beq.n	400dcc <ili9341_controller_init_registers+0x20>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400dde:	222c      	movs	r2, #44	; 0x2c
  400de0:	4b9e      	ldr	r3, [pc, #632]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400de4:	4b9d      	ldr	r3, [pc, #628]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de6:	691b      	ldr	r3, [r3, #16]
  400de8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dec:	f040 8181 	bne.w	4010f2 <ili9341_controller_init_registers+0x346>
		return 0;
  400df0:	2300      	movs	r3, #0
  400df2:	2b00      	cmp	r3, #0
  400df4:	d0f6      	beq.n	400de4 <ili9341_controller_init_registers+0x38>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400df6:	2200      	movs	r2, #0
  400df8:	4b98      	ldr	r3, [pc, #608]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400dfc:	4b97      	ldr	r3, [pc, #604]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfe:	691b      	ldr	r3, [r3, #16]
  400e00:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e04:	f040 8177 	bne.w	4010f6 <ili9341_controller_init_registers+0x34a>
		return 0;
  400e08:	2300      	movs	r3, #0
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d0f6      	beq.n	400dfc <ili9341_controller_init_registers+0x50>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e0e:	2234      	movs	r2, #52	; 0x34
  400e10:	4b92      	ldr	r3, [pc, #584]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e12:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e14:	4b91      	ldr	r3, [pc, #580]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e16:	691b      	ldr	r3, [r3, #16]
  400e18:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e1c:	f040 816d 	bne.w	4010fa <ili9341_controller_init_registers+0x34e>
		return 0;
  400e20:	2300      	movs	r3, #0
  400e22:	2b00      	cmp	r3, #0
  400e24:	d0f6      	beq.n	400e14 <ili9341_controller_init_registers+0x68>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e26:	2202      	movs	r2, #2
  400e28:	4b8c      	ldr	r3, [pc, #560]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e2c:	4b8b      	ldr	r3, [pc, #556]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2e:	691b      	ldr	r3, [r3, #16]
  400e30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e34:	f040 8163 	bne.w	4010fe <ili9341_controller_init_registers+0x352>
		return 0;
  400e38:	2300      	movs	r3, #0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f6      	beq.n	400e2c <ili9341_controller_init_registers+0x80>
  400e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400e42:	4b87      	ldr	r3, [pc, #540]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400e44:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_B);
  400e46:	20cf      	movs	r0, #207	; 0xcf
  400e48:	4b83      	ldr	r3, [pc, #524]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400e4a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e4c:	4b83      	ldr	r3, [pc, #524]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e4e:	691b      	ldr	r3, [r3, #16]
  400e50:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e54:	f040 8155 	bne.w	401102 <ili9341_controller_init_registers+0x356>
		return 0;
  400e58:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d0f6      	beq.n	400e4c <ili9341_controller_init_registers+0xa0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e5e:	2200      	movs	r2, #0
  400e60:	4b7e      	ldr	r3, [pc, #504]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e62:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e64:	4b7d      	ldr	r3, [pc, #500]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e66:	691b      	ldr	r3, [r3, #16]
  400e68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e6c:	f040 814b 	bne.w	401106 <ili9341_controller_init_registers+0x35a>
		return 0;
  400e70:	2300      	movs	r3, #0
  400e72:	2b00      	cmp	r3, #0
  400e74:	d0f6      	beq.n	400e64 <ili9341_controller_init_registers+0xb8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e76:	22aa      	movs	r2, #170	; 0xaa
  400e78:	4b78      	ldr	r3, [pc, #480]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e7c:	4b77      	ldr	r3, [pc, #476]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7e:	691b      	ldr	r3, [r3, #16]
  400e80:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e84:	f040 8141 	bne.w	40110a <ili9341_controller_init_registers+0x35e>
		return 0;
  400e88:	2300      	movs	r3, #0
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d0f6      	beq.n	400e7c <ili9341_controller_init_registers+0xd0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400e8e:	22b0      	movs	r2, #176	; 0xb0
  400e90:	4b72      	ldr	r3, [pc, #456]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e92:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400e94:	4b71      	ldr	r3, [pc, #452]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e96:	691b      	ldr	r3, [r3, #16]
  400e98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e9c:	f040 8137 	bne.w	40110e <ili9341_controller_init_registers+0x362>
		return 0;
  400ea0:	2300      	movs	r3, #0
  400ea2:	2b00      	cmp	r3, #0
  400ea4:	d0f6      	beq.n	400e94 <ili9341_controller_init_registers+0xe8>
  400ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400eaa:	4b6d      	ldr	r3, [pc, #436]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400eac:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_PUMP_RATIO_CONTROL);
  400eae:	20f7      	movs	r0, #247	; 0xf7
  400eb0:	4b69      	ldr	r3, [pc, #420]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eb2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400eb4:	4b69      	ldr	r3, [pc, #420]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eb6:	691b      	ldr	r3, [r3, #16]
  400eb8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ebc:	f040 8129 	bne.w	401112 <ili9341_controller_init_registers+0x366>
		return 0;
  400ec0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d0f6      	beq.n	400eb4 <ili9341_controller_init_registers+0x108>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ec6:	2230      	movs	r2, #48	; 0x30
  400ec8:	4b64      	ldr	r3, [pc, #400]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eca:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ecc:	4b63      	ldr	r3, [pc, #396]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ece:	691b      	ldr	r3, [r3, #16]
  400ed0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ed4:	f040 811f 	bne.w	401116 <ili9341_controller_init_registers+0x36a>
		return 0;
  400ed8:	2300      	movs	r3, #0
  400eda:	2b00      	cmp	r3, #0
  400edc:	d0f6      	beq.n	400ecc <ili9341_controller_init_registers+0x120>
  400ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ee2:	4b5f      	ldr	r3, [pc, #380]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400ee4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_1);
  400ee6:	20c0      	movs	r0, #192	; 0xc0
  400ee8:	4b5b      	ldr	r3, [pc, #364]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eea:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400eec:	4b5b      	ldr	r3, [pc, #364]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eee:	691b      	ldr	r3, [r3, #16]
  400ef0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ef4:	f040 8111 	bne.w	40111a <ili9341_controller_init_registers+0x36e>
		return 0;
  400ef8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400efa:	2b00      	cmp	r3, #0
  400efc:	d0f6      	beq.n	400eec <ili9341_controller_init_registers+0x140>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400efe:	2225      	movs	r2, #37	; 0x25
  400f00:	4b56      	ldr	r3, [pc, #344]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f02:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f04:	4b55      	ldr	r3, [pc, #340]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f06:	691b      	ldr	r3, [r3, #16]
  400f08:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f0c:	f040 8107 	bne.w	40111e <ili9341_controller_init_registers+0x372>
		return 0;
  400f10:	2300      	movs	r3, #0
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0f6      	beq.n	400f04 <ili9341_controller_init_registers+0x158>
  400f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f1a:	4b51      	ldr	r3, [pc, #324]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f1c:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_POWER_CONTROL_2);
  400f1e:	20c1      	movs	r0, #193	; 0xc1
  400f20:	4b4d      	ldr	r3, [pc, #308]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f22:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f24:	4b4d      	ldr	r3, [pc, #308]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f26:	691b      	ldr	r3, [r3, #16]
  400f28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f2c:	f040 80f9 	bne.w	401122 <ili9341_controller_init_registers+0x376>
		return 0;
  400f30:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f32:	2b00      	cmp	r3, #0
  400f34:	d0f6      	beq.n	400f24 <ili9341_controller_init_registers+0x178>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f36:	2211      	movs	r2, #17
  400f38:	4b48      	ldr	r3, [pc, #288]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f3c:	4b47      	ldr	r3, [pc, #284]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3e:	691b      	ldr	r3, [r3, #16]
  400f40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f44:	f040 80ef 	bne.w	401126 <ili9341_controller_init_registers+0x37a>
		return 0;
  400f48:	2300      	movs	r3, #0
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	d0f6      	beq.n	400f3c <ili9341_controller_init_registers+0x190>
  400f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f52:	4b43      	ldr	r3, [pc, #268]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f54:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_1);
  400f56:	20c5      	movs	r0, #197	; 0xc5
  400f58:	4b3f      	ldr	r3, [pc, #252]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f5a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f5c:	4b3f      	ldr	r3, [pc, #252]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f5e:	691b      	ldr	r3, [r3, #16]
  400f60:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f64:	f040 80e1 	bne.w	40112a <ili9341_controller_init_registers+0x37e>
		return 0;
  400f68:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400f6a:	2b00      	cmp	r3, #0
  400f6c:	d0f6      	beq.n	400f5c <ili9341_controller_init_registers+0x1b0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f6e:	225c      	movs	r2, #92	; 0x5c
  400f70:	4b3a      	ldr	r3, [pc, #232]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f72:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f74:	4b39      	ldr	r3, [pc, #228]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f76:	691b      	ldr	r3, [r3, #16]
  400f78:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f7c:	f040 80d7 	bne.w	40112e <ili9341_controller_init_registers+0x382>
		return 0;
  400f80:	2300      	movs	r3, #0
  400f82:	2b00      	cmp	r3, #0
  400f84:	d0f6      	beq.n	400f74 <ili9341_controller_init_registers+0x1c8>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400f86:	224c      	movs	r2, #76	; 0x4c
  400f88:	4b34      	ldr	r3, [pc, #208]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400f8c:	4b33      	ldr	r3, [pc, #204]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8e:	691b      	ldr	r3, [r3, #16]
  400f90:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f94:	f040 80cd 	bne.w	401132 <ili9341_controller_init_registers+0x386>
		return 0;
  400f98:	2300      	movs	r3, #0
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	d0f6      	beq.n	400f8c <ili9341_controller_init_registers+0x1e0>
  400f9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fa2:	4b2f      	ldr	r3, [pc, #188]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fa4:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_VCOM_CONTROL_2);
  400fa6:	20c7      	movs	r0, #199	; 0xc7
  400fa8:	4b2b      	ldr	r3, [pc, #172]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400faa:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fac:	4b2b      	ldr	r3, [pc, #172]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fae:	691b      	ldr	r3, [r3, #16]
  400fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fb4:	f040 80bf 	bne.w	401136 <ili9341_controller_init_registers+0x38a>
		return 0;
  400fb8:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d0f6      	beq.n	400fac <ili9341_controller_init_registers+0x200>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400fbe:	2294      	movs	r2, #148	; 0x94
  400fc0:	4b26      	ldr	r3, [pc, #152]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc2:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fc4:	4b25      	ldr	r3, [pc, #148]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc6:	691b      	ldr	r3, [r3, #16]
  400fc8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fcc:	f040 80b5 	bne.w	40113a <ili9341_controller_init_registers+0x38e>
		return 0;
  400fd0:	2300      	movs	r3, #0
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d0f6      	beq.n	400fc4 <ili9341_controller_init_registers+0x218>
  400fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fda:	4b21      	ldr	r3, [pc, #132]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fdc:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_A);
  400fde:	20e8      	movs	r0, #232	; 0xe8
  400fe0:	4b1d      	ldr	r3, [pc, #116]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400fe2:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400fe4:	4b1d      	ldr	r3, [pc, #116]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fe6:	691b      	ldr	r3, [r3, #16]
  400fe8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fec:	f040 80a7 	bne.w	40113e <ili9341_controller_init_registers+0x392>
		return 0;
  400ff0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	d0f6      	beq.n	400fe4 <ili9341_controller_init_registers+0x238>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400ff6:	2285      	movs	r2, #133	; 0x85
  400ff8:	4b18      	ldr	r3, [pc, #96]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffa:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400ffc:	4b17      	ldr	r3, [pc, #92]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffe:	691b      	ldr	r3, [r3, #16]
  401000:	f413 7f00 	tst.w	r3, #512	; 0x200
  401004:	f040 809d 	bne.w	401142 <ili9341_controller_init_registers+0x396>
		return 0;
  401008:	2300      	movs	r3, #0
  40100a:	2b00      	cmp	r3, #0
  40100c:	d0f6      	beq.n	400ffc <ili9341_controller_init_registers+0x250>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40100e:	2201      	movs	r2, #1
  401010:	4b12      	ldr	r3, [pc, #72]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401012:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401016:	691b      	ldr	r3, [r3, #16]
  401018:	f413 7f00 	tst.w	r3, #512	; 0x200
  40101c:	f040 8093 	bne.w	401146 <ili9341_controller_init_registers+0x39a>
		return 0;
  401020:	2300      	movs	r3, #0
  401022:	2b00      	cmp	r3, #0
  401024:	d0f6      	beq.n	401014 <ili9341_controller_init_registers+0x268>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401026:	2278      	movs	r2, #120	; 0x78
  401028:	4b0c      	ldr	r3, [pc, #48]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102a:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40102c:	4b0b      	ldr	r3, [pc, #44]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102e:	691b      	ldr	r3, [r3, #16]
  401030:	f413 7f00 	tst.w	r3, #512	; 0x200
  401034:	f040 8089 	bne.w	40114a <ili9341_controller_init_registers+0x39e>
		return 0;
  401038:	2300      	movs	r3, #0
  40103a:	2b00      	cmp	r3, #0
  40103c:	d0f6      	beq.n	40102c <ili9341_controller_init_registers+0x280>
  40103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401042:	4b07      	ldr	r3, [pc, #28]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  401044:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_DRIVER_TIMING_CONTROL_B);
  401046:	20ea      	movs	r0, #234	; 0xea
  401048:	4b03      	ldr	r3, [pc, #12]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  40104a:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  40104c:	4b03      	ldr	r3, [pc, #12]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40104e:	691b      	ldr	r3, [r3, #16]
  401050:	f413 7f00 	tst.w	r3, #512	; 0x200
  401054:	e006      	b.n	401064 <ili9341_controller_init_registers+0x2b8>
  401056:	bf00      	nop
  401058:	004009dd 	.word	0x004009dd
  40105c:	40008000 	.word	0x40008000
  401060:	400e1400 	.word	0x400e1400
  401064:	d173      	bne.n	40114e <ili9341_controller_init_registers+0x3a2>
		return 0;
  401066:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  401068:	2b00      	cmp	r3, #0
  40106a:	d0ef      	beq.n	40104c <ili9341_controller_init_registers+0x2a0>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40106c:	2200      	movs	r2, #0
  40106e:	4b3d      	ldr	r3, [pc, #244]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401070:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401072:	4b3c      	ldr	r3, [pc, #240]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401074:	691b      	ldr	r3, [r3, #16]
  401076:	f413 7f00 	tst.w	r3, #512	; 0x200
  40107a:	d16a      	bne.n	401152 <ili9341_controller_init_registers+0x3a6>
		return 0;
  40107c:	2300      	movs	r3, #0
  40107e:	2b00      	cmp	r3, #0
  401080:	d0f7      	beq.n	401072 <ili9341_controller_init_registers+0x2c6>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  401082:	2200      	movs	r2, #0
  401084:	4b37      	ldr	r3, [pc, #220]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401086:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  401088:	4b36      	ldr	r3, [pc, #216]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  40108a:	691b      	ldr	r3, [r3, #16]
  40108c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401090:	d161      	bne.n	401156 <ili9341_controller_init_registers+0x3aa>
		return 0;
  401092:	2300      	movs	r3, #0
  401094:	2b00      	cmp	r3, #0
  401096:	d0f7      	beq.n	401088 <ili9341_controller_init_registers+0x2dc>
  401098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40109c:	4b32      	ldr	r3, [pc, #200]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  40109e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_send_command(ILI9341_CMD_COLMOD_PIXEL_FORMAT_SET);
  4010a0:	203a      	movs	r0, #58	; 0x3a
  4010a2:	4b32      	ldr	r3, [pc, #200]	; (40116c <ili9341_controller_init_registers+0x3c0>)
  4010a4:	4798      	blx	r3
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010a6:	4b2f      	ldr	r3, [pc, #188]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010a8:	691b      	ldr	r3, [r3, #16]
  4010aa:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010ae:	d154      	bne.n	40115a <ili9341_controller_init_registers+0x3ae>
		return 0;
  4010b0:	2300      	movs	r3, #0
	while (!spi_is_tx_empty(CONF_ILI9341_SPI)) {
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d0f7      	beq.n	4010a6 <ili9341_controller_init_registers+0x2fa>
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4010b6:	2255      	movs	r2, #85	; 0x55
  4010b8:	4b2a      	ldr	r3, [pc, #168]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010ba:	60da      	str	r2, [r3, #12]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  4010bc:	4b29      	ldr	r3, [pc, #164]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010be:	691b      	ldr	r3, [r3, #16]
  4010c0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c4:	d14b      	bne.n	40115e <ili9341_controller_init_registers+0x3b2>
		return 0;
  4010c6:	2300      	movs	r3, #0
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0f7      	beq.n	4010bc <ili9341_controller_init_registers+0x310>
  4010cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d0:	4b25      	ldr	r3, [pc, #148]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  4010d2:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_set_orientation(0);
  4010d4:	2000      	movs	r0, #0
  4010d6:	4b26      	ldr	r3, [pc, #152]	; (401170 <ili9341_controller_init_registers+0x3c4>)
  4010d8:	4798      	blx	r3
	ili9341_set_limits(0, 0, ILI9341_DEFAULT_WIDTH,
  4010da:	23f0      	movs	r3, #240	; 0xf0
  4010dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4010e0:	2100      	movs	r1, #0
  4010e2:	4608      	mov	r0, r1
  4010e4:	4c23      	ldr	r4, [pc, #140]	; (401174 <ili9341_controller_init_registers+0x3c8>)
  4010e6:	47a0      	blx	r4
  4010e8:	bd10      	pop	{r4, pc}
		return 1;
  4010ea:	2301      	movs	r3, #1
  4010ec:	e669      	b.n	400dc2 <ili9341_controller_init_registers+0x16>
  4010ee:	2301      	movs	r3, #1
  4010f0:	e673      	b.n	400dda <ili9341_controller_init_registers+0x2e>
  4010f2:	2301      	movs	r3, #1
  4010f4:	e67d      	b.n	400df2 <ili9341_controller_init_registers+0x46>
  4010f6:	2301      	movs	r3, #1
  4010f8:	e687      	b.n	400e0a <ili9341_controller_init_registers+0x5e>
  4010fa:	2301      	movs	r3, #1
  4010fc:	e691      	b.n	400e22 <ili9341_controller_init_registers+0x76>
  4010fe:	2301      	movs	r3, #1
  401100:	e69b      	b.n	400e3a <ili9341_controller_init_registers+0x8e>
  401102:	2301      	movs	r3, #1
  401104:	e6a9      	b.n	400e5a <ili9341_controller_init_registers+0xae>
  401106:	2301      	movs	r3, #1
  401108:	e6b3      	b.n	400e72 <ili9341_controller_init_registers+0xc6>
  40110a:	2301      	movs	r3, #1
  40110c:	e6bd      	b.n	400e8a <ili9341_controller_init_registers+0xde>
  40110e:	2301      	movs	r3, #1
  401110:	e6c7      	b.n	400ea2 <ili9341_controller_init_registers+0xf6>
  401112:	2301      	movs	r3, #1
  401114:	e6d5      	b.n	400ec2 <ili9341_controller_init_registers+0x116>
  401116:	2301      	movs	r3, #1
  401118:	e6df      	b.n	400eda <ili9341_controller_init_registers+0x12e>
  40111a:	2301      	movs	r3, #1
  40111c:	e6ed      	b.n	400efa <ili9341_controller_init_registers+0x14e>
  40111e:	2301      	movs	r3, #1
  401120:	e6f7      	b.n	400f12 <ili9341_controller_init_registers+0x166>
  401122:	2301      	movs	r3, #1
  401124:	e705      	b.n	400f32 <ili9341_controller_init_registers+0x186>
  401126:	2301      	movs	r3, #1
  401128:	e70f      	b.n	400f4a <ili9341_controller_init_registers+0x19e>
  40112a:	2301      	movs	r3, #1
  40112c:	e71d      	b.n	400f6a <ili9341_controller_init_registers+0x1be>
  40112e:	2301      	movs	r3, #1
  401130:	e727      	b.n	400f82 <ili9341_controller_init_registers+0x1d6>
  401132:	2301      	movs	r3, #1
  401134:	e731      	b.n	400f9a <ili9341_controller_init_registers+0x1ee>
  401136:	2301      	movs	r3, #1
  401138:	e73f      	b.n	400fba <ili9341_controller_init_registers+0x20e>
  40113a:	2301      	movs	r3, #1
  40113c:	e749      	b.n	400fd2 <ili9341_controller_init_registers+0x226>
  40113e:	2301      	movs	r3, #1
  401140:	e757      	b.n	400ff2 <ili9341_controller_init_registers+0x246>
  401142:	2301      	movs	r3, #1
  401144:	e761      	b.n	40100a <ili9341_controller_init_registers+0x25e>
  401146:	2301      	movs	r3, #1
  401148:	e76b      	b.n	401022 <ili9341_controller_init_registers+0x276>
  40114a:	2301      	movs	r3, #1
  40114c:	e775      	b.n	40103a <ili9341_controller_init_registers+0x28e>
  40114e:	2301      	movs	r3, #1
  401150:	e78a      	b.n	401068 <ili9341_controller_init_registers+0x2bc>
  401152:	2301      	movs	r3, #1
  401154:	e793      	b.n	40107e <ili9341_controller_init_registers+0x2d2>
  401156:	2301      	movs	r3, #1
  401158:	e79c      	b.n	401094 <ili9341_controller_init_registers+0x2e8>
  40115a:	2301      	movs	r3, #1
  40115c:	e7a9      	b.n	4010b2 <ili9341_controller_init_registers+0x306>
  40115e:	2301      	movs	r3, #1
  401160:	e7b2      	b.n	4010c8 <ili9341_controller_init_registers+0x31c>
  401162:	bf00      	nop
  401164:	40008000 	.word	0x40008000
  401168:	400e1400 	.word	0x400e1400
  40116c:	004009dd 	.word	0x004009dd
  401170:	00400d3d 	.word	0x00400d3d
  401174:	00400c95 	.word	0x00400c95

00401178 <ili9341_init>:
{
  401178:	b508      	push	{r3, lr}
	ili9341_interface_init();
  40117a:	4b04      	ldr	r3, [pc, #16]	; (40118c <ili9341_init+0x14>)
  40117c:	4798      	blx	r3
	ili9341_reset_display();
  40117e:	4b04      	ldr	r3, [pc, #16]	; (401190 <ili9341_init+0x18>)
  401180:	4798      	blx	r3
	ili9341_exit_standby();
  401182:	4b04      	ldr	r3, [pc, #16]	; (401194 <ili9341_init+0x1c>)
  401184:	4798      	blx	r3
	ili9341_controller_init_registers();
  401186:	4b04      	ldr	r3, [pc, #16]	; (401198 <ili9341_init+0x20>)
  401188:	4798      	blx	r3
  40118a:	bd08      	pop	{r3, pc}
  40118c:	00400b85 	.word	0x00400b85
  401190:	00400bf5 	.word	0x00400bf5
  401194:	00400c25 	.word	0x00400c25
  401198:	00400dad 	.word	0x00400dad

0040119c <afec_find_inst_num>:
 * \return   AFEC instance number
 */
static uint32_t afec_find_inst_num(Afec *const afec)
{
#if defined(AFEC1)
	if (afec == AFEC1) {
  40119c:	4b03      	ldr	r3, [pc, #12]	; (4011ac <afec_find_inst_num+0x10>)
  40119e:	4298      	cmp	r0, r3
  4011a0:	d001      	beq.n	4011a6 <afec_find_inst_num+0xa>
		return 1;
	}
#endif
#if defined(AFEC0)
	if (afec == AFEC0) {
		return 0;
  4011a2:	2000      	movs	r0, #0
	}
#endif
	return 0;
}
  4011a4:	4770      	bx	lr
		return 1;
  4011a6:	2001      	movs	r0, #1
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	40064000 	.word	0x40064000

004011b0 <afec_find_pid>:
 * \return   AFEC Peripheral ID
 */
static uint32_t afec_find_pid(Afec *const afec)
{
#if defined(ID_AFEC1)
	if (afec == AFEC1) {
  4011b0:	4b03      	ldr	r3, [pc, #12]	; (4011c0 <afec_find_pid+0x10>)
  4011b2:	4298      	cmp	r0, r3
  4011b4:	d001      	beq.n	4011ba <afec_find_pid+0xa>
		return ID_AFEC1;
	}
#endif
#if defined(ID_AFEC0)
	if (afec == AFEC0) {
		return ID_AFEC0;
  4011b6:	201d      	movs	r0, #29
	}
#endif
	return ID_AFEC0;
}
  4011b8:	4770      	bx	lr
		return ID_AFEC1;
  4011ba:	2028      	movs	r0, #40	; 0x28
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	40064000 	.word	0x40064000

004011c4 <afec_set_config>:
 *
 * \param afec  Base address of the AFEC
 * \param config   Configuration for the AFEC
 */
static void afec_set_config(Afec *const afec, struct afec_config *config)
{
  4011c4:	b410      	push	{r4}
	uint32_t reg = 0;

	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011c6:	7ccb      	ldrb	r3, [r1, #19]
  4011c8:	b373      	cbz	r3, 401228 <afec_set_config+0x64>
  4011ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
		#if (SAMV71 || SAMV70 || SAME70 || SAMS70)
			AFEC_MR_PRESCAL((config->mck / config->afec_clock )- 1) |
  4011ce:	684a      	ldr	r2, [r1, #4]
  4011d0:	688c      	ldr	r4, [r1, #8]
  4011d2:	fbb2 f2f4 	udiv	r2, r2, r4
  4011d6:	3a01      	subs	r2, #1
  4011d8:	0212      	lsls	r2, r2, #8
  4011da:	b292      	uxth	r2, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011dc:	4313      	orrs	r3, r2
		#else
			(config->anach ? AFEC_MR_ANACH_ALLOWED : 0) |
			AFEC_MR_PRESCAL(config->mck / (2 * config->afec_clock) - 1) |
			(config->settling_time) |		
		#endif
			AFEC_MR_TRACKTIM(config->tracktim) |
  4011de:	7c0a      	ldrb	r2, [r1, #16]
  4011e0:	0612      	lsls	r2, r2, #24
  4011e2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
			AFEC_MR_ONE |
  4011e6:	4313      	orrs	r3, r2
			AFEC_MR_TRANSFER(config->transfer) |
  4011e8:	7c4a      	ldrb	r2, [r1, #17]
  4011ea:	0712      	lsls	r2, r2, #28
  4011ec:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
			AFEC_MR_TRACKTIM(config->tracktim) |
  4011f0:	4313      	orrs	r3, r2
			(config->startup_time);
  4011f2:	68ca      	ldr	r2, [r1, #12]
			AFEC_MR_TRANSFER(config->transfer) |
  4011f4:	4313      	orrs	r3, r2
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  4011f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000

	afec->AFEC_MR = reg;
  4011fa:	6043      	str	r3, [r0, #4]

	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  4011fc:	7d0b      	ldrb	r3, [r1, #20]
  4011fe:	b1ab      	cbz	r3, 40122c <afec_set_config+0x68>
  401200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
			(config->resolution) |
  401204:	680a      	ldr	r2, [r1, #0]
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401206:	431a      	orrs	r2, r3
			(config->stm ? AFEC_EMR_STM : 0);
  401208:	7d4b      	ldrb	r3, [r1, #21]
  40120a:	b98b      	cbnz	r3, 401230 <afec_set_config+0x6c>
  40120c:	2300      	movs	r3, #0
			(config->resolution) |
  40120e:	4313      	orrs	r3, r2
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  401210:	6083      	str	r3, [r0, #8]
  #if (SAMV71 || SAMV70 || SAME70 || SAMS70)
	afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl) | AFEC_ACR_PGA0EN | AFEC_ACR_PGA1EN;
  401212:	7d8b      	ldrb	r3, [r1, #22]
  401214:	021b      	lsls	r3, r3, #8
  401216:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40121a:	f043 030c 	orr.w	r3, r3, #12
  40121e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  #else
    afec->AFEC_ACR = AFEC_ACR_IBCTL(config->ibctl);
  #endif
}
  401222:	f85d 4b04 	ldr.w	r4, [sp], #4
  401226:	4770      	bx	lr
	reg = (config->useq ? AFEC_MR_USEQ_REG_ORDER : 0) |
  401228:	2300      	movs	r3, #0
  40122a:	e7d0      	b.n	4011ce <afec_set_config+0xa>
	afec->AFEC_EMR = (config->tag ? AFEC_EMR_TAG : 0) |
  40122c:	2300      	movs	r3, #0
  40122e:	e7e9      	b.n	401204 <afec_set_config+0x40>
			(config->stm ? AFEC_EMR_STM : 0);
  401230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401234:	e7eb      	b.n	40120e <afec_set_config+0x4a>
	...

00401238 <afec_interrupt>:
 * \param inst_num AFEC instance number to handle interrupt for
 * \param source   Interrupt source number
 */
static void afec_interrupt(uint8_t inst_num,
		enum afec_interrupt_source source)
{
  401238:	b508      	push	{r3, lr}
	if (afec_callback_pointer[inst_num][source]) {
  40123a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  40123e:	4b03      	ldr	r3, [pc, #12]	; (40124c <afec_interrupt+0x14>)
  401240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  401244:	b103      	cbz	r3, 401248 <afec_interrupt+0x10>
		afec_callback_pointer[inst_num][source]();
  401246:	4798      	blx	r3
  401248:	bd08      	pop	{r3, pc}
  40124a:	bf00      	nop
  40124c:	2043a0ac 	.word	0x2043a0ac

00401250 <afec_process_callback>:
 * \brief Call the callback function if the corresponding interrupt is asserted
 *
 * \param afec  Base address of the AFEC.
 */
static void afec_process_callback(Afec *const afec)
{
  401250:	b530      	push	{r4, r5, lr}
  401252:	b083      	sub	sp, #12
 *
 * \return The interrupt status value.
 */
static inline uint32_t afec_get_interrupt_status(Afec *const afec)
{
	return afec->AFEC_ISR;
  401254:	6b01      	ldr	r1, [r0, #48]	; 0x30
 *
 * \return The interrupt mask value.
 */
static inline uint32_t afec_get_interrupt_mask(Afec *const afec)
{
	return afec->AFEC_IMR;
  401256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	volatile uint32_t status;
	uint32_t cnt, inst_num;

	status = afec_get_interrupt_status(afec) & afec_get_interrupt_mask(afec);
  401258:	400b      	ands	r3, r1
  40125a:	9301      	str	r3, [sp, #4]
	inst_num = afec_find_inst_num(afec);
  40125c:	4b17      	ldr	r3, [pc, #92]	; (4012bc <afec_process_callback+0x6c>)
  40125e:	4798      	blx	r3
  401260:	4605      	mov	r5, r0

	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401262:	2400      	movs	r4, #0
  401264:	e009      	b.n	40127a <afec_process_callback+0x2a>
		#elif defined __SAM4E8E__  || defined __SAM4E16E__ || SAMV71 || SAMV70 || SAMS70 || SAME70
			if (status & (1 << cnt)) {
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
			}
		#endif
		} else if (cnt < AFEC_INTERRUPT_TEMP_CHANGE) {
  401266:	2c0e      	cmp	r4, #14
  401268:	d81a      	bhi.n	4012a0 <afec_process_callback+0x50>
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1))) {
  40126a:	f104 020c 	add.w	r2, r4, #12
  40126e:	2301      	movs	r3, #1
  401270:	4093      	lsls	r3, r2
  401272:	9a01      	ldr	r2, [sp, #4]
  401274:	4213      	tst	r3, r2
  401276:	d10e      	bne.n	401296 <afec_process_callback+0x46>
	for (cnt = 0; cnt < _AFEC_NUM_OF_INTERRUPT_SOURCE; cnt++) {
  401278:	3401      	adds	r4, #1
  40127a:	2c0f      	cmp	r4, #15
  40127c:	d81c      	bhi.n	4012b8 <afec_process_callback+0x68>
		if (cnt < AFEC_INTERRUPT_DATA_READY) {
  40127e:	2c0b      	cmp	r4, #11
  401280:	d8f1      	bhi.n	401266 <afec_process_callback+0x16>
			if (status & (1 << cnt)) {
  401282:	2301      	movs	r3, #1
  401284:	40a3      	lsls	r3, r4
  401286:	9a01      	ldr	r2, [sp, #4]
  401288:	4213      	tst	r3, r2
  40128a:	d0f5      	beq.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  40128c:	4621      	mov	r1, r4
  40128e:	b2e8      	uxtb	r0, r5
  401290:	4b0b      	ldr	r3, [pc, #44]	; (4012c0 <afec_process_callback+0x70>)
  401292:	4798      	blx	r3
  401294:	e7f0      	b.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  401296:	4621      	mov	r1, r4
  401298:	b2e8      	uxtb	r0, r5
  40129a:	4b09      	ldr	r3, [pc, #36]	; (4012c0 <afec_process_callback+0x70>)
  40129c:	4798      	blx	r3
  40129e:	e7eb      	b.n	401278 <afec_process_callback+0x28>
			}
		} else {
			if (status & (1 << (cnt + AFEC_INTERRUPT_GAP1 + AFEC_INTERRUPT_GAP2))) {
  4012a0:	f104 020f 	add.w	r2, r4, #15
  4012a4:	2301      	movs	r3, #1
  4012a6:	4093      	lsls	r3, r2
  4012a8:	9a01      	ldr	r2, [sp, #4]
  4012aa:	4213      	tst	r3, r2
  4012ac:	d0e4      	beq.n	401278 <afec_process_callback+0x28>
				afec_interrupt(inst_num, (enum afec_interrupt_source)cnt);
  4012ae:	4621      	mov	r1, r4
  4012b0:	b2e8      	uxtb	r0, r5
  4012b2:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <afec_process_callback+0x70>)
  4012b4:	4798      	blx	r3
  4012b6:	e7df      	b.n	401278 <afec_process_callback+0x28>
			}
		}
	}
}
  4012b8:	b003      	add	sp, #12
  4012ba:	bd30      	pop	{r4, r5, pc}
  4012bc:	0040119d 	.word	0x0040119d
  4012c0:	00401239 	.word	0x00401239

004012c4 <afec_ch_set_config>:
{
  4012c4:	b430      	push	{r4, r5}
	reg = afec->AFEC_DIFFR;
  4012c6:	6e04      	ldr	r4, [r0, #96]	; 0x60
	reg &= ~(0x1u << channel);
  4012c8:	2301      	movs	r3, #1
  4012ca:	408b      	lsls	r3, r1
  4012cc:	ea24 0403 	bic.w	r4, r4, r3
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4012d0:	7815      	ldrb	r5, [r2, #0]
  4012d2:	b175      	cbz	r5, 4012f2 <afec_ch_set_config+0x2e>
  4012d4:	4323      	orrs	r3, r4
	afec->AFEC_DIFFR = reg;
  4012d6:	6603      	str	r3, [r0, #96]	; 0x60
	reg = afec->AFEC_CGR;
  4012d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
	reg &= ~(0x03u << (2 * channel));
  4012da:	004c      	lsls	r4, r1, #1
  4012dc:	2103      	movs	r1, #3
  4012de:	40a1      	lsls	r1, r4
  4012e0:	ea23 0101 	bic.w	r1, r3, r1
	reg |= (config->gain) << (2 * channel);
  4012e4:	7853      	ldrb	r3, [r2, #1]
  4012e6:	fa03 f404 	lsl.w	r4, r3, r4
  4012ea:	4321      	orrs	r1, r4
	afec->AFEC_CGR = reg;
  4012ec:	6541      	str	r1, [r0, #84]	; 0x54
}
  4012ee:	bc30      	pop	{r4, r5}
  4012f0:	4770      	bx	lr
	reg |= (config->diff) ? (0x1u << channel) : 0;
  4012f2:	2300      	movs	r3, #0
  4012f4:	e7ee      	b.n	4012d4 <afec_ch_set_config+0x10>
	...

004012f8 <afec_get_config_defaults>:
	cfg->resolution = AFEC_12_BITS;
  4012f8:	2200      	movs	r2, #0
  4012fa:	6002      	str	r2, [r0, #0]
	cfg->mck = sysclk_get_cpu_hz();
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <afec_get_config_defaults+0x28>)
  4012fe:	6043      	str	r3, [r0, #4]
		cfg->afec_clock = 6000000UL;
  401300:	4b08      	ldr	r3, [pc, #32]	; (401324 <afec_get_config_defaults+0x2c>)
  401302:	6083      	str	r3, [r0, #8]
		cfg->startup_time = AFEC_STARTUP_TIME_4;
  401304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  401308:	60c3      	str	r3, [r0, #12]
		cfg->tracktim = 2;
  40130a:	2302      	movs	r3, #2
  40130c:	7403      	strb	r3, [r0, #16]
		cfg->transfer = 1;
  40130e:	2301      	movs	r3, #1
  401310:	7443      	strb	r3, [r0, #17]
		cfg->anach = true;
  401312:	7483      	strb	r3, [r0, #18]
		cfg->useq = false;
  401314:	74c2      	strb	r2, [r0, #19]
		cfg->tag = true;
  401316:	7503      	strb	r3, [r0, #20]
		cfg->stm = true;
  401318:	7543      	strb	r3, [r0, #21]
		cfg->ibctl = 1;
  40131a:	7583      	strb	r3, [r0, #22]
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	11e1a300 	.word	0x11e1a300
  401324:	005b8d80 	.word	0x005b8d80

00401328 <afec_ch_get_config_defaults>:
	cfg->diff = false;
  401328:	2300      	movs	r3, #0
  40132a:	7003      	strb	r3, [r0, #0]
   	cfg->gain = AFEC_GAINVALUE_1;
  40132c:	2301      	movs	r3, #1
  40132e:	7043      	strb	r3, [r0, #1]
  401330:	4770      	bx	lr
	...

00401334 <afec_init>:
	return afec->AFEC_ISR;
  401334:	6b03      	ldr	r3, [r0, #48]	; 0x30
	if ((afec_get_interrupt_status(afec) & AFEC_ISR_DRDY) == AFEC_ISR_DRDY) {
  401336:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40133a:	d001      	beq.n	401340 <afec_init+0xc>
		return STATUS_ERR_BUSY;
  40133c:	2019      	movs	r0, #25
  40133e:	4770      	bx	lr
{
  401340:	b510      	push	{r4, lr}
  401342:	4604      	mov	r4, r0
	afec->AFEC_CR = AFEC_CR_SWRST;
  401344:	2301      	movs	r3, #1
  401346:	6003      	str	r3, [r0, #0]
	afec_set_config(afec, config);
  401348:	4b10      	ldr	r3, [pc, #64]	; (40138c <afec_init+0x58>)
  40134a:	4798      	blx	r3
	if(afec == AFEC0) {
  40134c:	4b10      	ldr	r3, [pc, #64]	; (401390 <afec_init+0x5c>)
  40134e:	429c      	cmp	r4, r3
  401350:	d00c      	beq.n	40136c <afec_init+0x38>
	if(afec == AFEC1) {
  401352:	4b10      	ldr	r3, [pc, #64]	; (401394 <afec_init+0x60>)
  401354:	429c      	cmp	r4, r3
  401356:	d00b      	beq.n	401370 <afec_init+0x3c>
	return STATUS_OK;
  401358:	2000      	movs	r0, #0
  40135a:	bd10      	pop	{r4, pc}
			afec_callback_pointer[0][i] = 0;
  40135c:	2100      	movs	r1, #0
  40135e:	4a0e      	ldr	r2, [pc, #56]	; (401398 <afec_init+0x64>)
  401360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401364:	3301      	adds	r3, #1
  401366:	2b0f      	cmp	r3, #15
  401368:	d9f8      	bls.n	40135c <afec_init+0x28>
  40136a:	e7f2      	b.n	401352 <afec_init+0x1e>
  40136c:	2300      	movs	r3, #0
  40136e:	e7fa      	b.n	401366 <afec_init+0x32>
  401370:	2300      	movs	r3, #0
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401372:	2b0f      	cmp	r3, #15
  401374:	d807      	bhi.n	401386 <afec_init+0x52>
			afec_callback_pointer[1][i] = 0;
  401376:	f103 0110 	add.w	r1, r3, #16
  40137a:	2000      	movs	r0, #0
  40137c:	4a06      	ldr	r2, [pc, #24]	; (401398 <afec_init+0x64>)
  40137e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
		for (i = 0; i < _AFEC_NUM_OF_INTERRUPT_SOURCE; i++){
  401382:	3301      	adds	r3, #1
  401384:	e7f5      	b.n	401372 <afec_init+0x3e>
	return STATUS_OK;
  401386:	2000      	movs	r0, #0
  401388:	bd10      	pop	{r4, pc}
  40138a:	bf00      	nop
  40138c:	004011c5 	.word	0x004011c5
  401390:	4003c000 	.word	0x4003c000
  401394:	40064000 	.word	0x40064000
  401398:	2043a0ac 	.word	0x2043a0ac

0040139c <AFEC0_Handler>:

/**
 * \brief Interrupt handler for AFEC0.
 */
void AFEC0_Handler(void)
{
  40139c:	b508      	push	{r3, lr}
	afec_process_callback(AFEC0);
  40139e:	4802      	ldr	r0, [pc, #8]	; (4013a8 <AFEC0_Handler+0xc>)
  4013a0:	4b02      	ldr	r3, [pc, #8]	; (4013ac <AFEC0_Handler+0x10>)
  4013a2:	4798      	blx	r3
  4013a4:	bd08      	pop	{r3, pc}
  4013a6:	bf00      	nop
  4013a8:	4003c000 	.word	0x4003c000
  4013ac:	00401251 	.word	0x00401251

004013b0 <AFEC1_Handler>:

/**
 * \brief Interrupt handler for AFEC1.
 */
void AFEC1_Handler(void)
{
  4013b0:	b508      	push	{r3, lr}
	afec_process_callback(AFEC1);
  4013b2:	4802      	ldr	r0, [pc, #8]	; (4013bc <AFEC1_Handler+0xc>)
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <AFEC1_Handler+0x10>)
  4013b6:	4798      	blx	r3
  4013b8:	bd08      	pop	{r3, pc}
  4013ba:	bf00      	nop
  4013bc:	40064000 	.word	0x40064000
  4013c0:	00401251 	.word	0x00401251

004013c4 <afec_enable>:
 * \brief Enable AFEC Module.
 *
 * \param afec  Base address of the AFEC
 */
void afec_enable(Afec *const afec)
{
  4013c4:	b500      	push	{lr}
  4013c6:	b083      	sub	sp, #12
	Assert(afec);
	uint32_t pid;

	pid = afec_find_pid(afec);
  4013c8:	4b11      	ldr	r3, [pc, #68]	; (401410 <afec_enable+0x4c>)
  4013ca:	4798      	blx	r3
	/* Enable peripheral clock. */
	pmc_enable_periph_clk(pid);
  4013cc:	4b11      	ldr	r3, [pc, #68]	; (401414 <afec_enable+0x50>)
  4013ce:	4798      	blx	r3
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
  4013d0:	4b11      	ldr	r3, [pc, #68]	; (401418 <afec_enable+0x54>)
  4013d2:	789b      	ldrb	r3, [r3, #2]
  4013d4:	2bff      	cmp	r3, #255	; 0xff
  4013d6:	d01a      	beq.n	40140e <afec_enable+0x4a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  4013d8:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  4013dc:	fab3 f383 	clz	r3, r3
  4013e0:	095b      	lsrs	r3, r3, #5
  4013e2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4013e4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4013e6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4013ea:	2200      	movs	r2, #0
  4013ec:	4b0b      	ldr	r3, [pc, #44]	; (40141c <afec_enable+0x58>)
  4013ee:	701a      	strb	r2, [r3, #0]
	return flags;
  4013f0:	9901      	ldr	r1, [sp, #4]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
  4013f2:	4a09      	ldr	r2, [pc, #36]	; (401418 <afec_enable+0x54>)
  4013f4:	7893      	ldrb	r3, [r2, #2]
  4013f6:	3301      	adds	r3, #1
  4013f8:	7093      	strb	r3, [r2, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4013fa:	b129      	cbz	r1, 401408 <afec_enable+0x44>
		cpu_irq_enable();
  4013fc:	2201      	movs	r2, #1
  4013fe:	4b07      	ldr	r3, [pc, #28]	; (40141c <afec_enable+0x58>)
  401400:	701a      	strb	r2, [r3, #0]
  401402:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401406:	b662      	cpsie	i
	sleepmgr_lock_mode(SLEEPMGR_SLEEP_WFI);
}
  401408:	b003      	add	sp, #12
  40140a:	f85d fb04 	ldr.w	pc, [sp], #4
  40140e:	e7fe      	b.n	40140e <afec_enable+0x4a>
  401410:	004011b1 	.word	0x004011b1
  401414:	0041dc39 	.word	0x0041dc39
  401418:	2043a0a4 	.word	0x2043a0a4
  40141c:	20400058 	.word	0x20400058

00401420 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401420:	f100 0308 	add.w	r3, r0, #8
  401424:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401426:	f04f 32ff 	mov.w	r2, #4294967295
  40142a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40142c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40142e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401430:	2300      	movs	r3, #0
  401432:	6003      	str	r3, [r0, #0]
  401434:	4770      	bx	lr

00401436 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401436:	2300      	movs	r3, #0
  401438:	6103      	str	r3, [r0, #16]
  40143a:	4770      	bx	lr

0040143c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  40143c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  40143e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401440:	689a      	ldr	r2, [r3, #8]
  401442:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401444:	689a      	ldr	r2, [r3, #8]
  401446:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401448:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40144a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40144c:	6803      	ldr	r3, [r0, #0]
  40144e:	3301      	adds	r3, #1
  401450:	6003      	str	r3, [r0, #0]
  401452:	4770      	bx	lr

00401454 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401454:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401456:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401458:	f1b5 3fff 	cmp.w	r5, #4294967295
  40145c:	d002      	beq.n	401464 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  40145e:	f100 0208 	add.w	r2, r0, #8
  401462:	e002      	b.n	40146a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401464:	6902      	ldr	r2, [r0, #16]
  401466:	e004      	b.n	401472 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401468:	461a      	mov	r2, r3
  40146a:	6853      	ldr	r3, [r2, #4]
  40146c:	681c      	ldr	r4, [r3, #0]
  40146e:	42a5      	cmp	r5, r4
  401470:	d2fa      	bcs.n	401468 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401472:	6853      	ldr	r3, [r2, #4]
  401474:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401476:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401478:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  40147a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  40147c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  40147e:	6803      	ldr	r3, [r0, #0]
  401480:	3301      	adds	r3, #1
  401482:	6003      	str	r3, [r0, #0]
}
  401484:	bc30      	pop	{r4, r5}
  401486:	4770      	bx	lr

00401488 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401488:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  40148a:	6842      	ldr	r2, [r0, #4]
  40148c:	6881      	ldr	r1, [r0, #8]
  40148e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401490:	6882      	ldr	r2, [r0, #8]
  401492:	6841      	ldr	r1, [r0, #4]
  401494:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401496:	685a      	ldr	r2, [r3, #4]
  401498:	4290      	cmp	r0, r2
  40149a:	d005      	beq.n	4014a8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  40149c:	2200      	movs	r2, #0
  40149e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  4014a0:	6818      	ldr	r0, [r3, #0]
  4014a2:	3801      	subs	r0, #1
  4014a4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  4014a6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  4014a8:	6882      	ldr	r2, [r0, #8]
  4014aa:	605a      	str	r2, [r3, #4]
  4014ac:	e7f6      	b.n	40149c <uxListRemove+0x14>
	...

004014b0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  4014b0:	4b0d      	ldr	r3, [pc, #52]	; (4014e8 <prvTaskExitError+0x38>)
  4014b2:	681b      	ldr	r3, [r3, #0]
  4014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014b8:	d00a      	beq.n	4014d0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4014ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014be:	b672      	cpsid	i
  4014c0:	f383 8811 	msr	BASEPRI, r3
  4014c4:	f3bf 8f6f 	isb	sy
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	b662      	cpsie	i
  4014ce:	e7fe      	b.n	4014ce <prvTaskExitError+0x1e>
  4014d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d4:	b672      	cpsid	i
  4014d6:	f383 8811 	msr	BASEPRI, r3
  4014da:	f3bf 8f6f 	isb	sy
  4014de:	f3bf 8f4f 	dsb	sy
  4014e2:	b662      	cpsie	i
  4014e4:	e7fe      	b.n	4014e4 <prvTaskExitError+0x34>
  4014e6:	bf00      	nop
  4014e8:	2040000c 	.word	0x2040000c

004014ec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  4014ec:	4806      	ldr	r0, [pc, #24]	; (401508 <prvPortStartFirstTask+0x1c>)
  4014ee:	6800      	ldr	r0, [r0, #0]
  4014f0:	6800      	ldr	r0, [r0, #0]
  4014f2:	f380 8808 	msr	MSP, r0
  4014f6:	b662      	cpsie	i
  4014f8:	b661      	cpsie	f
  4014fa:	f3bf 8f4f 	dsb	sy
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	df00      	svc	0
  401504:	bf00      	nop
  401506:	0000      	.short	0x0000
  401508:	e000ed08 	.word	0xe000ed08

0040150c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  40150c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40151c <vPortEnableVFP+0x10>
  401510:	6801      	ldr	r1, [r0, #0]
  401512:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401516:	6001      	str	r1, [r0, #0]
  401518:	4770      	bx	lr
  40151a:	0000      	.short	0x0000
  40151c:	e000ed88 	.word	0xe000ed88

00401520 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401524:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401528:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <pxPortInitialiseStack+0x24>)
  40152e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401532:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401536:	f06f 0302 	mvn.w	r3, #2
  40153a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40153e:	3844      	subs	r0, #68	; 0x44
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	004014b1 	.word	0x004014b1

00401548 <SVC_Handler>:
	__asm volatile (
  401548:	4b06      	ldr	r3, [pc, #24]	; (401564 <pxCurrentTCBConst2>)
  40154a:	6819      	ldr	r1, [r3, #0]
  40154c:	6808      	ldr	r0, [r1, #0]
  40154e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401552:	f380 8809 	msr	PSP, r0
  401556:	f3bf 8f6f 	isb	sy
  40155a:	f04f 0000 	mov.w	r0, #0
  40155e:	f380 8811 	msr	BASEPRI, r0
  401562:	4770      	bx	lr

00401564 <pxCurrentTCBConst2>:
  401564:	2040c244 	.word	0x2040c244
  401568:	4770      	bx	lr
  40156a:	bf00      	nop

0040156c <vPortEnterCritical>:
  40156c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401570:	b672      	cpsid	i
  401572:	f383 8811 	msr	BASEPRI, r3
  401576:	f3bf 8f6f 	isb	sy
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	b662      	cpsie	i
	uxCriticalNesting++;
  401580:	4a0b      	ldr	r2, [pc, #44]	; (4015b0 <vPortEnterCritical+0x44>)
  401582:	6813      	ldr	r3, [r2, #0]
  401584:	3301      	adds	r3, #1
  401586:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401588:	2b01      	cmp	r3, #1
  40158a:	d10f      	bne.n	4015ac <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  40158c:	4b09      	ldr	r3, [pc, #36]	; (4015b4 <vPortEnterCritical+0x48>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	f013 0fff 	tst.w	r3, #255	; 0xff
  401594:	d00a      	beq.n	4015ac <vPortEnterCritical+0x40>
  401596:	f04f 0380 	mov.w	r3, #128	; 0x80
  40159a:	b672      	cpsid	i
  40159c:	f383 8811 	msr	BASEPRI, r3
  4015a0:	f3bf 8f6f 	isb	sy
  4015a4:	f3bf 8f4f 	dsb	sy
  4015a8:	b662      	cpsie	i
  4015aa:	e7fe      	b.n	4015aa <vPortEnterCritical+0x3e>
  4015ac:	4770      	bx	lr
  4015ae:	bf00      	nop
  4015b0:	2040000c 	.word	0x2040000c
  4015b4:	e000ed04 	.word	0xe000ed04

004015b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  4015b8:	4b0a      	ldr	r3, [pc, #40]	; (4015e4 <vPortExitCritical+0x2c>)
  4015ba:	681b      	ldr	r3, [r3, #0]
  4015bc:	b953      	cbnz	r3, 4015d4 <vPortExitCritical+0x1c>
  4015be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c2:	b672      	cpsid	i
  4015c4:	f383 8811 	msr	BASEPRI, r3
  4015c8:	f3bf 8f6f 	isb	sy
  4015cc:	f3bf 8f4f 	dsb	sy
  4015d0:	b662      	cpsie	i
  4015d2:	e7fe      	b.n	4015d2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  4015d4:	3b01      	subs	r3, #1
  4015d6:	4a03      	ldr	r2, [pc, #12]	; (4015e4 <vPortExitCritical+0x2c>)
  4015d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  4015da:	b90b      	cbnz	r3, 4015e0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  4015dc:	f383 8811 	msr	BASEPRI, r3
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	2040000c 	.word	0x2040000c

004015e8 <PendSV_Handler>:
	__asm volatile
  4015e8:	f3ef 8009 	mrs	r0, PSP
  4015ec:	f3bf 8f6f 	isb	sy
  4015f0:	4b15      	ldr	r3, [pc, #84]	; (401648 <pxCurrentTCBConst>)
  4015f2:	681a      	ldr	r2, [r3, #0]
  4015f4:	f01e 0f10 	tst.w	lr, #16
  4015f8:	bf08      	it	eq
  4015fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4015fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401602:	6010      	str	r0, [r2, #0]
  401604:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401608:	f04f 0080 	mov.w	r0, #128	; 0x80
  40160c:	b672      	cpsid	i
  40160e:	f380 8811 	msr	BASEPRI, r0
  401612:	f3bf 8f4f 	dsb	sy
  401616:	f3bf 8f6f 	isb	sy
  40161a:	b662      	cpsie	i
  40161c:	f001 f8e6 	bl	4027ec <vTaskSwitchContext>
  401620:	f04f 0000 	mov.w	r0, #0
  401624:	f380 8811 	msr	BASEPRI, r0
  401628:	bc08      	pop	{r3}
  40162a:	6819      	ldr	r1, [r3, #0]
  40162c:	6808      	ldr	r0, [r1, #0]
  40162e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401632:	f01e 0f10 	tst.w	lr, #16
  401636:	bf08      	it	eq
  401638:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40163c:	f380 8809 	msr	PSP, r0
  401640:	f3bf 8f6f 	isb	sy
  401644:	4770      	bx	lr
  401646:	bf00      	nop

00401648 <pxCurrentTCBConst>:
  401648:	2040c244 	.word	0x2040c244
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop

00401650 <SysTick_Handler>:
{
  401650:	b508      	push	{r3, lr}
	__asm volatile
  401652:	f3ef 8311 	mrs	r3, BASEPRI
  401656:	f04f 0280 	mov.w	r2, #128	; 0x80
  40165a:	b672      	cpsid	i
  40165c:	f382 8811 	msr	BASEPRI, r2
  401660:	f3bf 8f6f 	isb	sy
  401664:	f3bf 8f4f 	dsb	sy
  401668:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40166a:	4b05      	ldr	r3, [pc, #20]	; (401680 <SysTick_Handler+0x30>)
  40166c:	4798      	blx	r3
  40166e:	b118      	cbz	r0, 401678 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401674:	4b03      	ldr	r3, [pc, #12]	; (401684 <SysTick_Handler+0x34>)
  401676:	601a      	str	r2, [r3, #0]
	__asm volatile
  401678:	2300      	movs	r3, #0
  40167a:	f383 8811 	msr	BASEPRI, r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	00402461 	.word	0x00402461
  401684:	e000ed04 	.word	0xe000ed04

00401688 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401688:	4a03      	ldr	r2, [pc, #12]	; (401698 <vPortSetupTimerInterrupt+0x10>)
  40168a:	4b04      	ldr	r3, [pc, #16]	; (40169c <vPortSetupTimerInterrupt+0x14>)
  40168c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40168e:	2207      	movs	r2, #7
  401690:	3b04      	subs	r3, #4
  401692:	601a      	str	r2, [r3, #0]
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	0003a97f 	.word	0x0003a97f
  40169c:	e000e014 	.word	0xe000e014

004016a0 <xPortStartScheduler>:
{
  4016a0:	b500      	push	{lr}
  4016a2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4016a4:	4b22      	ldr	r3, [pc, #136]	; (401730 <xPortStartScheduler+0x90>)
  4016a6:	781a      	ldrb	r2, [r3, #0]
  4016a8:	b2d2      	uxtb	r2, r2
  4016aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4016ac:	22ff      	movs	r2, #255	; 0xff
  4016ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4016b0:	781b      	ldrb	r3, [r3, #0]
  4016b2:	b2db      	uxtb	r3, r3
  4016b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4016b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016c0:	4a1c      	ldr	r2, [pc, #112]	; (401734 <xPortStartScheduler+0x94>)
  4016c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4016c4:	2207      	movs	r2, #7
  4016c6:	4b1c      	ldr	r3, [pc, #112]	; (401738 <xPortStartScheduler+0x98>)
  4016c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016ca:	e009      	b.n	4016e0 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
  4016cc:	4a1a      	ldr	r2, [pc, #104]	; (401738 <xPortStartScheduler+0x98>)
  4016ce:	6813      	ldr	r3, [r2, #0]
  4016d0:	3b01      	subs	r3, #1
  4016d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4016d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016d8:	005b      	lsls	r3, r3, #1
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4016e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016e8:	d1f0      	bne.n	4016cc <xPortStartScheduler+0x2c>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4016ea:	4a13      	ldr	r2, [pc, #76]	; (401738 <xPortStartScheduler+0x98>)
  4016ec:	6813      	ldr	r3, [r2, #0]
  4016ee:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4016f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4016f4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  4016f6:	9b01      	ldr	r3, [sp, #4]
  4016f8:	b2db      	uxtb	r3, r3
  4016fa:	4a0d      	ldr	r2, [pc, #52]	; (401730 <xPortStartScheduler+0x90>)
  4016fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4016fe:	4b0f      	ldr	r3, [pc, #60]	; (40173c <xPortStartScheduler+0x9c>)
  401700:	681a      	ldr	r2, [r3, #0]
  401702:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401706:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401708:	681a      	ldr	r2, [r3, #0]
  40170a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40170e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401710:	4b0b      	ldr	r3, [pc, #44]	; (401740 <xPortStartScheduler+0xa0>)
  401712:	4798      	blx	r3
	uxCriticalNesting = 0;
  401714:	2200      	movs	r2, #0
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <xPortStartScheduler+0xa4>)
  401718:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  40171a:	4b0b      	ldr	r3, [pc, #44]	; (401748 <xPortStartScheduler+0xa8>)
  40171c:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40171e:	4a0b      	ldr	r2, [pc, #44]	; (40174c <xPortStartScheduler+0xac>)
  401720:	6813      	ldr	r3, [r2, #0]
  401722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401726:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401728:	4b09      	ldr	r3, [pc, #36]	; (401750 <xPortStartScheduler+0xb0>)
  40172a:	4798      	blx	r3
	prvTaskExitError();
  40172c:	4b09      	ldr	r3, [pc, #36]	; (401754 <xPortStartScheduler+0xb4>)
  40172e:	4798      	blx	r3
  401730:	e000e400 	.word	0xe000e400
  401734:	20400a34 	.word	0x20400a34
  401738:	20400a38 	.word	0x20400a38
  40173c:	e000ed20 	.word	0xe000ed20
  401740:	00401689 	.word	0x00401689
  401744:	2040000c 	.word	0x2040000c
  401748:	0040150d 	.word	0x0040150d
  40174c:	e000ef34 	.word	0xe000ef34
  401750:	004014ed 	.word	0x004014ed
  401754:	004014b1 	.word	0x004014b1

00401758 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401758:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  40175c:	2b0f      	cmp	r3, #15
  40175e:	d911      	bls.n	401784 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  401760:	4a12      	ldr	r2, [pc, #72]	; (4017ac <vPortValidateInterruptPriority+0x54>)
  401762:	5c9b      	ldrb	r3, [r3, r2]
  401764:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401766:	4a12      	ldr	r2, [pc, #72]	; (4017b0 <vPortValidateInterruptPriority+0x58>)
  401768:	7812      	ldrb	r2, [r2, #0]
  40176a:	4293      	cmp	r3, r2
  40176c:	d20a      	bcs.n	401784 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40176e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401772:	b672      	cpsid	i
  401774:	f383 8811 	msr	BASEPRI, r3
  401778:	f3bf 8f6f 	isb	sy
  40177c:	f3bf 8f4f 	dsb	sy
  401780:	b662      	cpsie	i
  401782:	e7fe      	b.n	401782 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401784:	4b0b      	ldr	r3, [pc, #44]	; (4017b4 <vPortValidateInterruptPriority+0x5c>)
  401786:	681b      	ldr	r3, [r3, #0]
  401788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40178c:	4a0a      	ldr	r2, [pc, #40]	; (4017b8 <vPortValidateInterruptPriority+0x60>)
  40178e:	6812      	ldr	r2, [r2, #0]
  401790:	4293      	cmp	r3, r2
  401792:	d90a      	bls.n	4017aa <vPortValidateInterruptPriority+0x52>
  401794:	f04f 0380 	mov.w	r3, #128	; 0x80
  401798:	b672      	cpsid	i
  40179a:	f383 8811 	msr	BASEPRI, r3
  40179e:	f3bf 8f6f 	isb	sy
  4017a2:	f3bf 8f4f 	dsb	sy
  4017a6:	b662      	cpsie	i
  4017a8:	e7fe      	b.n	4017a8 <vPortValidateInterruptPriority+0x50>
  4017aa:	4770      	bx	lr
  4017ac:	e000e3f0 	.word	0xe000e3f0
  4017b0:	20400a34 	.word	0x20400a34
  4017b4:	e000ed0c 	.word	0xe000ed0c
  4017b8:	20400a38 	.word	0x20400a38

004017bc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4017bc:	b538      	push	{r3, r4, r5, lr}
  4017be:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  4017c0:	f010 0f07 	tst.w	r0, #7
  4017c4:	d002      	beq.n	4017cc <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  4017c6:	f020 0407 	bic.w	r4, r0, #7
  4017ca:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  4017cc:	4b12      	ldr	r3, [pc, #72]	; (401818 <pvPortMalloc+0x5c>)
  4017ce:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  4017d0:	4b12      	ldr	r3, [pc, #72]	; (40181c <pvPortMalloc+0x60>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	b193      	cbz	r3, 4017fc <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  4017d6:	4b12      	ldr	r3, [pc, #72]	; (401820 <pvPortMalloc+0x64>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	441c      	add	r4, r3
  4017dc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4017e0:	4294      	cmp	r4, r2
  4017e2:	d811      	bhi.n	401808 <pvPortMalloc+0x4c>
  4017e4:	42a3      	cmp	r3, r4
  4017e6:	d211      	bcs.n	40180c <pvPortMalloc+0x50>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  4017e8:	4a0c      	ldr	r2, [pc, #48]	; (40181c <pvPortMalloc+0x60>)
  4017ea:	6815      	ldr	r5, [r2, #0]
  4017ec:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  4017ee:	4b0c      	ldr	r3, [pc, #48]	; (401820 <pvPortMalloc+0x64>)
  4017f0:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4017f2:	4b0c      	ldr	r3, [pc, #48]	; (401824 <pvPortMalloc+0x68>)
  4017f4:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4017f6:	b15d      	cbz	r5, 401810 <pvPortMalloc+0x54>
		}
	}
	#endif

	return pvReturn;
}
  4017f8:	4628      	mov	r0, r5
  4017fa:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4017fc:	4b0a      	ldr	r3, [pc, #40]	; (401828 <pvPortMalloc+0x6c>)
  4017fe:	f023 0307 	bic.w	r3, r3, #7
  401802:	4a06      	ldr	r2, [pc, #24]	; (40181c <pvPortMalloc+0x60>)
  401804:	6013      	str	r3, [r2, #0]
  401806:	e7e6      	b.n	4017d6 <pvPortMalloc+0x1a>
void *pvReturn = NULL;
  401808:	2500      	movs	r5, #0
  40180a:	e7f2      	b.n	4017f2 <pvPortMalloc+0x36>
  40180c:	2500      	movs	r5, #0
  40180e:	e7f0      	b.n	4017f2 <pvPortMalloc+0x36>
			vApplicationMallocFailedHook();
  401810:	4b06      	ldr	r3, [pc, #24]	; (40182c <pvPortMalloc+0x70>)
  401812:	4798      	blx	r3
	return pvReturn;
  401814:	e7f0      	b.n	4017f8 <pvPortMalloc+0x3c>
  401816:	bf00      	nop
  401818:	00402445 	.word	0x00402445
  40181c:	20400a3c 	.word	0x20400a3c
  401820:	2040c240 	.word	0x2040c240
  401824:	004025a5 	.word	0x004025a5
  401828:	20400a48 	.word	0x20400a48
  40182c:	0041e533 	.word	0x0041e533

00401830 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  401830:	b150      	cbz	r0, 401848 <vPortFree+0x18>
  401832:	f04f 0380 	mov.w	r3, #128	; 0x80
  401836:	b672      	cpsid	i
  401838:	f383 8811 	msr	BASEPRI, r3
  40183c:	f3bf 8f6f 	isb	sy
  401840:	f3bf 8f4f 	dsb	sy
  401844:	b662      	cpsie	i
  401846:	e7fe      	b.n	401846 <vPortFree+0x16>
  401848:	4770      	bx	lr
	...

0040184c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
  40184c:	b510      	push	{r4, lr}
  40184e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401850:	4b06      	ldr	r3, [pc, #24]	; (40186c <prvIsQueueFull+0x20>)
  401852:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401854:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401858:	429a      	cmp	r2, r3
  40185a:	d004      	beq.n	401866 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
  40185c:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
  40185e:	4b04      	ldr	r3, [pc, #16]	; (401870 <prvIsQueueFull+0x24>)
  401860:	4798      	blx	r3

	return xReturn;
}
  401862:	4620      	mov	r0, r4
  401864:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  401866:	2401      	movs	r4, #1
  401868:	e7f9      	b.n	40185e <prvIsQueueFull+0x12>
  40186a:	bf00      	nop
  40186c:	0040156d 	.word	0x0040156d
  401870:	004015b9 	.word	0x004015b9

00401874 <prvIsQueueEmpty>:
{
  401874:	b510      	push	{r4, lr}
  401876:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401878:	4b05      	ldr	r3, [pc, #20]	; (401890 <prvIsQueueEmpty+0x1c>)
  40187a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40187c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40187e:	b123      	cbz	r3, 40188a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
  401880:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  401882:	4b04      	ldr	r3, [pc, #16]	; (401894 <prvIsQueueEmpty+0x20>)
  401884:	4798      	blx	r3
}
  401886:	4620      	mov	r0, r4
  401888:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
  40188a:	2401      	movs	r4, #1
  40188c:	e7f9      	b.n	401882 <prvIsQueueEmpty+0xe>
  40188e:	bf00      	nop
  401890:	0040156d 	.word	0x0040156d
  401894:	004015b9 	.word	0x004015b9

00401898 <prvCopyDataToQueue>:
{
  401898:	b538      	push	{r3, r4, r5, lr}
  40189a:	4604      	mov	r4, r0
  40189c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  40189e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4018a0:	b95a      	cbnz	r2, 4018ba <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4018a2:	6803      	ldr	r3, [r0, #0]
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d12e      	bne.n	401906 <prvCopyDataToQueue+0x6e>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4018a8:	6840      	ldr	r0, [r0, #4]
  4018aa:	4b1b      	ldr	r3, [pc, #108]	; (401918 <prvCopyDataToQueue+0x80>)
  4018ac:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4018ae:	2300      	movs	r3, #0
  4018b0:	6063      	str	r3, [r4, #4]
	++( pxQueue->uxMessagesWaiting );
  4018b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b4:	3301      	adds	r3, #1
  4018b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
  4018b8:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4018ba:	b96d      	cbnz	r5, 4018d8 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4018bc:	6880      	ldr	r0, [r0, #8]
  4018be:	4b17      	ldr	r3, [pc, #92]	; (40191c <prvCopyDataToQueue+0x84>)
  4018c0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4018c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4018c4:	68a3      	ldr	r3, [r4, #8]
  4018c6:	4413      	add	r3, r2
  4018c8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4018ca:	6862      	ldr	r2, [r4, #4]
  4018cc:	4293      	cmp	r3, r2
  4018ce:	d31c      	bcc.n	40190a <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4018d0:	6823      	ldr	r3, [r4, #0]
  4018d2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4018d4:	2000      	movs	r0, #0
  4018d6:	e7ec      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4018d8:	68c0      	ldr	r0, [r0, #12]
  4018da:	4b10      	ldr	r3, [pc, #64]	; (40191c <prvCopyDataToQueue+0x84>)
  4018dc:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4018de:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4018e0:	425b      	negs	r3, r3
  4018e2:	68e2      	ldr	r2, [r4, #12]
  4018e4:	441a      	add	r2, r3
  4018e6:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4018e8:	6821      	ldr	r1, [r4, #0]
  4018ea:	428a      	cmp	r2, r1
  4018ec:	d202      	bcs.n	4018f4 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  4018ee:	6862      	ldr	r2, [r4, #4]
  4018f0:	4413      	add	r3, r2
  4018f2:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  4018f4:	2d02      	cmp	r5, #2
  4018f6:	d10a      	bne.n	40190e <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4018f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fa:	b153      	cbz	r3, 401912 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  4018fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fe:	3b01      	subs	r3, #1
  401900:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401902:	2000      	movs	r0, #0
  401904:	e7d5      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401906:	2000      	movs	r0, #0
  401908:	e7d3      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190a:	2000      	movs	r0, #0
  40190c:	e7d1      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190e:	2000      	movs	r0, #0
  401910:	e7cf      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401912:	2000      	movs	r0, #0
  401914:	e7cd      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401916:	bf00      	nop
  401918:	00402bf9 	.word	0x00402bf9
  40191c:	0041f96d 	.word	0x0041f96d

00401920 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401920:	b530      	push	{r4, r5, lr}
  401922:	b083      	sub	sp, #12
  401924:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401926:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401928:	b174      	cbz	r4, 401948 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40192a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40192c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40192e:	429a      	cmp	r2, r3
  401930:	d315      	bcc.n	40195e <prvNotifyQueueSetContainer+0x3e>
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <prvNotifyQueueSetContainer+0x26>
  401948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40194c:	b672      	cpsid	i
  40194e:	f383 8811 	msr	BASEPRI, r3
  401952:	f3bf 8f6f 	isb	sy
  401956:	f3bf 8f4f 	dsb	sy
  40195a:	b662      	cpsie	i
  40195c:	e7fe      	b.n	40195c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40195e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401960:	4293      	cmp	r3, r2
  401962:	d803      	bhi.n	40196c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401964:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401966:	4628      	mov	r0, r5
  401968:	b003      	add	sp, #12
  40196a:	bd30      	pop	{r4, r5, pc}
  40196c:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  40196e:	a901      	add	r1, sp, #4
  401970:	4620      	mov	r0, r4
  401972:	4b0b      	ldr	r3, [pc, #44]	; (4019a0 <prvNotifyQueueSetContainer+0x80>)
  401974:	4798      	blx	r3
  401976:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  401978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40197a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40197e:	d10a      	bne.n	401996 <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401980:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401982:	2b00      	cmp	r3, #0
  401984:	d0ef      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  401986:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40198a:	4b06      	ldr	r3, [pc, #24]	; (4019a4 <prvNotifyQueueSetContainer+0x84>)
  40198c:	4798      	blx	r3
  40198e:	2800      	cmp	r0, #0
  401990:	d0e9      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
						xReturn = pdTRUE;
  401992:	2501      	movs	r5, #1
		return xReturn;
  401994:	e7e7      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  401996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401998:	3301      	adds	r3, #1
  40199a:	64a3      	str	r3, [r4, #72]	; 0x48
  40199c:	e7e3      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
  40199e:	bf00      	nop
  4019a0:	00401899 	.word	0x00401899
  4019a4:	004029c5 	.word	0x004029c5

004019a8 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4019a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4019aa:	b172      	cbz	r2, 4019ca <prvCopyDataFromQueue+0x22>
{
  4019ac:	b510      	push	{r4, lr}
  4019ae:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4019b0:	68c4      	ldr	r4, [r0, #12]
  4019b2:	4414      	add	r4, r2
  4019b4:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4019b6:	6840      	ldr	r0, [r0, #4]
  4019b8:	4284      	cmp	r4, r0
  4019ba:	d301      	bcc.n	4019c0 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4019bc:	6818      	ldr	r0, [r3, #0]
  4019be:	60d8      	str	r0, [r3, #12]
  4019c0:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4019c2:	68d9      	ldr	r1, [r3, #12]
  4019c4:	4b01      	ldr	r3, [pc, #4]	; (4019cc <prvCopyDataFromQueue+0x24>)
  4019c6:	4798      	blx	r3
  4019c8:	bd10      	pop	{r4, pc}
  4019ca:	4770      	bx	lr
  4019cc:	0041f96d 	.word	0x0041f96d

004019d0 <prvUnlockQueue>:
{
  4019d0:	b510      	push	{r4, lr}
  4019d2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  4019d4:	4b1e      	ldr	r3, [pc, #120]	; (401a50 <prvUnlockQueue+0x80>)
  4019d6:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019d8:	e009      	b.n	4019ee <prvUnlockQueue+0x1e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4019da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019dc:	b1cb      	cbz	r3, 401a12 <prvUnlockQueue+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4019de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019e2:	4b1c      	ldr	r3, [pc, #112]	; (401a54 <prvUnlockQueue+0x84>)
  4019e4:	4798      	blx	r3
  4019e6:	b988      	cbnz	r0, 401a0c <prvUnlockQueue+0x3c>
			--( pxQueue->xTxLock );
  4019e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019ea:	3b01      	subs	r3, #1
  4019ec:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  4019ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	dd0e      	ble.n	401a12 <prvUnlockQueue+0x42>
				if( pxQueue->pxQueueSetContainer != NULL )
  4019f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d0ef      	beq.n	4019da <prvUnlockQueue+0xa>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  4019fa:	2100      	movs	r1, #0
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b16      	ldr	r3, [pc, #88]	; (401a58 <prvUnlockQueue+0x88>)
  401a00:	4798      	blx	r3
  401a02:	2801      	cmp	r0, #1
  401a04:	d1f0      	bne.n	4019e8 <prvUnlockQueue+0x18>
						vTaskMissedYield();
  401a06:	4b15      	ldr	r3, [pc, #84]	; (401a5c <prvUnlockQueue+0x8c>)
  401a08:	4798      	blx	r3
  401a0a:	e7ed      	b.n	4019e8 <prvUnlockQueue+0x18>
							vTaskMissedYield();
  401a0c:	4b13      	ldr	r3, [pc, #76]	; (401a5c <prvUnlockQueue+0x8c>)
  401a0e:	4798      	blx	r3
  401a10:	e7ea      	b.n	4019e8 <prvUnlockQueue+0x18>
		pxQueue->xTxLock = queueUNLOCKED;
  401a12:	f04f 33ff 	mov.w	r3, #4294967295
  401a16:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  401a18:	4b11      	ldr	r3, [pc, #68]	; (401a60 <prvUnlockQueue+0x90>)
  401a1a:	4798      	blx	r3
	taskENTER_CRITICAL();
  401a1c:	4b0c      	ldr	r3, [pc, #48]	; (401a50 <prvUnlockQueue+0x80>)
  401a1e:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401a20:	e002      	b.n	401a28 <prvUnlockQueue+0x58>
				--( pxQueue->xRxLock );
  401a22:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a24:	3b01      	subs	r3, #1
  401a26:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  401a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	dd0a      	ble.n	401a44 <prvUnlockQueue+0x74>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a2e:	6923      	ldr	r3, [r4, #16]
  401a30:	b143      	cbz	r3, 401a44 <prvUnlockQueue+0x74>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401a32:	f104 0010 	add.w	r0, r4, #16
  401a36:	4b07      	ldr	r3, [pc, #28]	; (401a54 <prvUnlockQueue+0x84>)
  401a38:	4798      	blx	r3
  401a3a:	2800      	cmp	r0, #0
  401a3c:	d0f1      	beq.n	401a22 <prvUnlockQueue+0x52>
					vTaskMissedYield();
  401a3e:	4b07      	ldr	r3, [pc, #28]	; (401a5c <prvUnlockQueue+0x8c>)
  401a40:	4798      	blx	r3
  401a42:	e7ee      	b.n	401a22 <prvUnlockQueue+0x52>
		pxQueue->xRxLock = queueUNLOCKED;
  401a44:	f04f 33ff 	mov.w	r3, #4294967295
  401a48:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  401a4a:	4b05      	ldr	r3, [pc, #20]	; (401a60 <prvUnlockQueue+0x90>)
  401a4c:	4798      	blx	r3
  401a4e:	bd10      	pop	{r4, pc}
  401a50:	0040156d 	.word	0x0040156d
  401a54:	004029c5 	.word	0x004029c5
  401a58:	00401921 	.word	0x00401921
  401a5c:	00402b21 	.word	0x00402b21
  401a60:	004015b9 	.word	0x004015b9

00401a64 <xQueueGenericReset>:
{
  401a64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  401a66:	b308      	cbz	r0, 401aac <xQueueGenericReset+0x48>
  401a68:	4604      	mov	r4, r0
  401a6a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401a6c:	4b1d      	ldr	r3, [pc, #116]	; (401ae4 <xQueueGenericReset+0x80>)
  401a6e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401a70:	6821      	ldr	r1, [r4, #0]
  401a72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401a76:	fb03 1002 	mla	r0, r3, r2, r1
  401a7a:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401a7c:	2000      	movs	r0, #0
  401a7e:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401a80:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401a82:	3a01      	subs	r2, #1
  401a84:	fb02 1303 	mla	r3, r2, r3, r1
  401a88:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  401a8a:	f04f 33ff 	mov.w	r3, #4294967295
  401a8e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401a90:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401a92:	b9fd      	cbnz	r5, 401ad4 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401a94:	6923      	ldr	r3, [r4, #16]
  401a96:	b12b      	cbz	r3, 401aa4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401a98:	f104 0010 	add.w	r0, r4, #16
  401a9c:	4b12      	ldr	r3, [pc, #72]	; (401ae8 <xQueueGenericReset+0x84>)
  401a9e:	4798      	blx	r3
  401aa0:	2801      	cmp	r0, #1
  401aa2:	d00e      	beq.n	401ac2 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401aa4:	4b11      	ldr	r3, [pc, #68]	; (401aec <xQueueGenericReset+0x88>)
  401aa6:	4798      	blx	r3
}
  401aa8:	2001      	movs	r0, #1
  401aaa:	bd38      	pop	{r3, r4, r5, pc}
  401aac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab0:	b672      	cpsid	i
  401ab2:	f383 8811 	msr	BASEPRI, r3
  401ab6:	f3bf 8f6f 	isb	sy
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	b662      	cpsie	i
  401ac0:	e7fe      	b.n	401ac0 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ac6:	4b0a      	ldr	r3, [pc, #40]	; (401af0 <xQueueGenericReset+0x8c>)
  401ac8:	601a      	str	r2, [r3, #0]
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	f3bf 8f6f 	isb	sy
  401ad2:	e7e7      	b.n	401aa4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401ad4:	f104 0010 	add.w	r0, r4, #16
  401ad8:	4d06      	ldr	r5, [pc, #24]	; (401af4 <xQueueGenericReset+0x90>)
  401ada:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ae0:	47a8      	blx	r5
  401ae2:	e7df      	b.n	401aa4 <xQueueGenericReset+0x40>
  401ae4:	0040156d 	.word	0x0040156d
  401ae8:	004029c5 	.word	0x004029c5
  401aec:	004015b9 	.word	0x004015b9
  401af0:	e000ed04 	.word	0xe000ed04
  401af4:	00401421 	.word	0x00401421

00401af8 <xQueueGenericCreate>:
{
  401af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401afa:	b950      	cbnz	r0, 401b12 <xQueueGenericCreate+0x1a>
  401afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b00:	b672      	cpsid	i
  401b02:	f383 8811 	msr	BASEPRI, r3
  401b06:	f3bf 8f6f 	isb	sy
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	b662      	cpsie	i
  401b10:	e7fe      	b.n	401b10 <xQueueGenericCreate+0x18>
  401b12:	4606      	mov	r6, r0
	if( uxItemSize == ( UBaseType_t ) 0 )
  401b14:	b119      	cbz	r1, 401b1e <xQueueGenericCreate+0x26>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401b16:	fb01 f000 	mul.w	r0, r1, r0
  401b1a:	3001      	adds	r0, #1
  401b1c:	e000      	b.n	401b20 <xQueueGenericCreate+0x28>
		xQueueSizeInBytes = ( size_t ) 0;
  401b1e:	2000      	movs	r0, #0
  401b20:	4617      	mov	r7, r2
  401b22:	460d      	mov	r5, r1
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401b24:	3058      	adds	r0, #88	; 0x58
  401b26:	4b12      	ldr	r3, [pc, #72]	; (401b70 <xQueueGenericCreate+0x78>)
  401b28:	4798      	blx	r3
	if( pxNewQueue != NULL )
  401b2a:	4604      	mov	r4, r0
  401b2c:	b190      	cbz	r0, 401b54 <xQueueGenericCreate+0x5c>
		if( uxItemSize == ( UBaseType_t ) 0 )
  401b2e:	b96d      	cbnz	r5, 401b4c <xQueueGenericCreate+0x54>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401b30:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  401b32:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  401b34:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  401b36:	2101      	movs	r1, #1
  401b38:	4620      	mov	r0, r4
  401b3a:	4b0e      	ldr	r3, [pc, #56]	; (401b74 <xQueueGenericCreate+0x7c>)
  401b3c:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  401b3e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  401b42:	2300      	movs	r3, #0
  401b44:	6563      	str	r3, [r4, #84]	; 0x54
		xReturn = pxNewQueue;
  401b46:	4620      	mov	r0, r4
	configASSERT( xReturn );
  401b48:	b130      	cbz	r0, 401b58 <xQueueGenericCreate+0x60>
}
  401b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401b4c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b50:	6003      	str	r3, [r0, #0]
  401b52:	e7ee      	b.n	401b32 <xQueueGenericCreate+0x3a>
QueueHandle_t xReturn = NULL;
  401b54:	2000      	movs	r0, #0
  401b56:	e7f7      	b.n	401b48 <xQueueGenericCreate+0x50>
  401b58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5c:	b672      	cpsid	i
  401b5e:	f383 8811 	msr	BASEPRI, r3
  401b62:	f3bf 8f6f 	isb	sy
  401b66:	f3bf 8f4f 	dsb	sy
  401b6a:	b662      	cpsie	i
  401b6c:	e7fe      	b.n	401b6c <xQueueGenericCreate+0x74>
  401b6e:	bf00      	nop
  401b70:	004017bd 	.word	0x004017bd
  401b74:	00401a65 	.word	0x00401a65

00401b78 <xQueueGenericSend>:
{
  401b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b7a:	b085      	sub	sp, #20
  401b7c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401b7e:	b170      	cbz	r0, 401b9e <xQueueGenericSend+0x26>
  401b80:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401b82:	b1b9      	cbz	r1, 401bb4 <xQueueGenericSend+0x3c>
  401b84:	2501      	movs	r5, #1
  401b86:	b9dd      	cbnz	r5, 401bc0 <xQueueGenericSend+0x48>
  401b88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8c:	b672      	cpsid	i
  401b8e:	f383 8811 	msr	BASEPRI, r3
  401b92:	f3bf 8f6f 	isb	sy
  401b96:	f3bf 8f4f 	dsb	sy
  401b9a:	b662      	cpsie	i
  401b9c:	e7fe      	b.n	401b9c <xQueueGenericSend+0x24>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xQueueGenericSend+0x3a>
  401bb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401bb6:	b90a      	cbnz	r2, 401bbc <xQueueGenericSend+0x44>
  401bb8:	2501      	movs	r5, #1
  401bba:	e7e4      	b.n	401b86 <xQueueGenericSend+0xe>
  401bbc:	2500      	movs	r5, #0
  401bbe:	e7e2      	b.n	401b86 <xQueueGenericSend+0xe>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401bc0:	2b02      	cmp	r3, #2
  401bc2:	d00b      	beq.n	401bdc <xQueueGenericSend+0x64>
  401bc4:	b97d      	cbnz	r5, 401be6 <xQueueGenericSend+0x6e>
  401bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bca:	b672      	cpsid	i
  401bcc:	f383 8811 	msr	BASEPRI, r3
  401bd0:	f3bf 8f6f 	isb	sy
  401bd4:	f3bf 8f4f 	dsb	sy
  401bd8:	b662      	cpsie	i
  401bda:	e7fe      	b.n	401bda <xQueueGenericSend+0x62>
  401bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401bde:	2a01      	cmp	r2, #1
  401be0:	d0f0      	beq.n	401bc4 <xQueueGenericSend+0x4c>
  401be2:	2500      	movs	r5, #0
  401be4:	e7ee      	b.n	401bc4 <xQueueGenericSend+0x4c>
  401be6:	461e      	mov	r6, r3
  401be8:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401bea:	4b4e      	ldr	r3, [pc, #312]	; (401d24 <xQueueGenericSend+0x1ac>)
  401bec:	4798      	blx	r3
  401bee:	b910      	cbnz	r0, 401bf6 <xQueueGenericSend+0x7e>
  401bf0:	9b01      	ldr	r3, [sp, #4]
  401bf2:	b103      	cbz	r3, 401bf6 <xQueueGenericSend+0x7e>
  401bf4:	2500      	movs	r5, #0
  401bf6:	b955      	cbnz	r5, 401c0e <xQueueGenericSend+0x96>
  401bf8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bfc:	b672      	cpsid	i
  401bfe:	f383 8811 	msr	BASEPRI, r3
  401c02:	f3bf 8f6f 	isb	sy
  401c06:	f3bf 8f4f 	dsb	sy
  401c0a:	b662      	cpsie	i
  401c0c:	e7fe      	b.n	401c0c <xQueueGenericSend+0x94>
  401c0e:	2500      	movs	r5, #0
  401c10:	e03e      	b.n	401c90 <xQueueGenericSend+0x118>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401c12:	4632      	mov	r2, r6
  401c14:	4639      	mov	r1, r7
  401c16:	4620      	mov	r0, r4
  401c18:	4b43      	ldr	r3, [pc, #268]	; (401d28 <xQueueGenericSend+0x1b0>)
  401c1a:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c1e:	b193      	cbz	r3, 401c46 <xQueueGenericSend+0xce>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401c20:	4631      	mov	r1, r6
  401c22:	4620      	mov	r0, r4
  401c24:	4b41      	ldr	r3, [pc, #260]	; (401d2c <xQueueGenericSend+0x1b4>)
  401c26:	4798      	blx	r3
  401c28:	2801      	cmp	r0, #1
  401c2a:	d107      	bne.n	401c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c30:	4b3f      	ldr	r3, [pc, #252]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c32:	601a      	str	r2, [r3, #0]
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401c3c:	4b3d      	ldr	r3, [pc, #244]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c3e:	4798      	blx	r3
				return pdPASS;
  401c40:	2001      	movs	r0, #1
}
  401c42:	b005      	add	sp, #20
  401c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c48:	b173      	cbz	r3, 401c68 <xQueueGenericSend+0xf0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  401c4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c4e:	4b3a      	ldr	r3, [pc, #232]	; (401d38 <xQueueGenericSend+0x1c0>)
  401c50:	4798      	blx	r3
  401c52:	2801      	cmp	r0, #1
  401c54:	d1f2      	bne.n	401c3c <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  401c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c5a:	4b35      	ldr	r3, [pc, #212]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	f3bf 8f6f 	isb	sy
  401c66:	e7e9      	b.n	401c3c <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  401c68:	2800      	cmp	r0, #0
  401c6a:	d0e7      	beq.n	401c3c <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c70:	4b2f      	ldr	r3, [pc, #188]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c72:	601a      	str	r2, [r3, #0]
  401c74:	f3bf 8f4f 	dsb	sy
  401c78:	f3bf 8f6f 	isb	sy
  401c7c:	e7de      	b.n	401c3c <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401c7e:	4b2d      	ldr	r3, [pc, #180]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c80:	4798      	blx	r3
					return errQUEUE_FULL;
  401c82:	2000      	movs	r0, #0
  401c84:	e7dd      	b.n	401c42 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401c86:	4620      	mov	r0, r4
  401c88:	4b2c      	ldr	r3, [pc, #176]	; (401d3c <xQueueGenericSend+0x1c4>)
  401c8a:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401c8c:	4b2c      	ldr	r3, [pc, #176]	; (401d40 <xQueueGenericSend+0x1c8>)
  401c8e:	4798      	blx	r3
		taskENTER_CRITICAL();
  401c90:	4b2c      	ldr	r3, [pc, #176]	; (401d44 <xQueueGenericSend+0x1cc>)
  401c92:	4798      	blx	r3
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c98:	429a      	cmp	r2, r3
  401c9a:	d3ba      	bcc.n	401c12 <xQueueGenericSend+0x9a>
  401c9c:	2e02      	cmp	r6, #2
  401c9e:	d0b8      	beq.n	401c12 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401ca0:	9b01      	ldr	r3, [sp, #4]
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d0eb      	beq.n	401c7e <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
  401ca6:	b91d      	cbnz	r5, 401cb0 <xQueueGenericSend+0x138>
					vTaskSetTimeOutState( &xTimeOut );
  401ca8:	a802      	add	r0, sp, #8
  401caa:	4b27      	ldr	r3, [pc, #156]	; (401d48 <xQueueGenericSend+0x1d0>)
  401cac:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401cae:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  401cb0:	4b20      	ldr	r3, [pc, #128]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cb2:	4798      	blx	r3
		vTaskSuspendAll();
  401cb4:	4b25      	ldr	r3, [pc, #148]	; (401d4c <xQueueGenericSend+0x1d4>)
  401cb6:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401cb8:	4b22      	ldr	r3, [pc, #136]	; (401d44 <xQueueGenericSend+0x1cc>)
  401cba:	4798      	blx	r3
  401cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cc2:	d101      	bne.n	401cc8 <xQueueGenericSend+0x150>
  401cc4:	2300      	movs	r3, #0
  401cc6:	6463      	str	r3, [r4, #68]	; 0x44
  401cc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cce:	d101      	bne.n	401cd4 <xQueueGenericSend+0x15c>
  401cd0:	2300      	movs	r3, #0
  401cd2:	64a3      	str	r3, [r4, #72]	; 0x48
  401cd4:	4b17      	ldr	r3, [pc, #92]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cd6:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401cd8:	a901      	add	r1, sp, #4
  401cda:	a802      	add	r0, sp, #8
  401cdc:	4b1c      	ldr	r3, [pc, #112]	; (401d50 <xQueueGenericSend+0x1d8>)
  401cde:	4798      	blx	r3
  401ce0:	b9c8      	cbnz	r0, 401d16 <xQueueGenericSend+0x19e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  401ce2:	4620      	mov	r0, r4
  401ce4:	4b1b      	ldr	r3, [pc, #108]	; (401d54 <xQueueGenericSend+0x1dc>)
  401ce6:	4798      	blx	r3
  401ce8:	2800      	cmp	r0, #0
  401cea:	d0cc      	beq.n	401c86 <xQueueGenericSend+0x10e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  401cec:	9901      	ldr	r1, [sp, #4]
  401cee:	f104 0010 	add.w	r0, r4, #16
  401cf2:	4b19      	ldr	r3, [pc, #100]	; (401d58 <xQueueGenericSend+0x1e0>)
  401cf4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401cf6:	4620      	mov	r0, r4
  401cf8:	4b10      	ldr	r3, [pc, #64]	; (401d3c <xQueueGenericSend+0x1c4>)
  401cfa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401cfc:	4b10      	ldr	r3, [pc, #64]	; (401d40 <xQueueGenericSend+0x1c8>)
  401cfe:	4798      	blx	r3
  401d00:	2800      	cmp	r0, #0
  401d02:	d1c5      	bne.n	401c90 <xQueueGenericSend+0x118>
					portYIELD_WITHIN_API();
  401d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d08:	4b09      	ldr	r3, [pc, #36]	; (401d30 <xQueueGenericSend+0x1b8>)
  401d0a:	601a      	str	r2, [r3, #0]
  401d0c:	f3bf 8f4f 	dsb	sy
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	e7bc      	b.n	401c90 <xQueueGenericSend+0x118>
			prvUnlockQueue( pxQueue );
  401d16:	4620      	mov	r0, r4
  401d18:	4b08      	ldr	r3, [pc, #32]	; (401d3c <xQueueGenericSend+0x1c4>)
  401d1a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401d1c:	4b08      	ldr	r3, [pc, #32]	; (401d40 <xQueueGenericSend+0x1c8>)
  401d1e:	4798      	blx	r3
			return errQUEUE_FULL;
  401d20:	2000      	movs	r0, #0
  401d22:	e78e      	b.n	401c42 <xQueueGenericSend+0xca>
  401d24:	00402b2d 	.word	0x00402b2d
  401d28:	00401899 	.word	0x00401899
  401d2c:	00401921 	.word	0x00401921
  401d30:	e000ed04 	.word	0xe000ed04
  401d34:	004015b9 	.word	0x004015b9
  401d38:	004029c5 	.word	0x004029c5
  401d3c:	004019d1 	.word	0x004019d1
  401d40:	004025a5 	.word	0x004025a5
  401d44:	0040156d 	.word	0x0040156d
  401d48:	00402a5d 	.word	0x00402a5d
  401d4c:	00402445 	.word	0x00402445
  401d50:	00402a8d 	.word	0x00402a8d
  401d54:	0040184d 	.word	0x0040184d
  401d58:	004028c1 	.word	0x004028c1

00401d5c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  401d5c:	b180      	cbz	r0, 401d80 <xQueueGenericSendFromISR+0x24>
{
  401d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d62:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401d64:	b1b9      	cbz	r1, 401d96 <xQueueGenericSendFromISR+0x3a>
  401d66:	2001      	movs	r0, #1
  401d68:	b9d8      	cbnz	r0, 401da2 <xQueueGenericSendFromISR+0x46>
  401d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d6e:	b672      	cpsid	i
  401d70:	f383 8811 	msr	BASEPRI, r3
  401d74:	f3bf 8f6f 	isb	sy
  401d78:	f3bf 8f4f 	dsb	sy
  401d7c:	b662      	cpsie	i
  401d7e:	e7fe      	b.n	401d7e <xQueueGenericSendFromISR+0x22>
  401d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d84:	b672      	cpsid	i
  401d86:	f383 8811 	msr	BASEPRI, r3
  401d8a:	f3bf 8f6f 	isb	sy
  401d8e:	f3bf 8f4f 	dsb	sy
  401d92:	b662      	cpsie	i
  401d94:	e7fe      	b.n	401d94 <xQueueGenericSendFromISR+0x38>
  401d96:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d98:	b908      	cbnz	r0, 401d9e <xQueueGenericSendFromISR+0x42>
  401d9a:	2001      	movs	r0, #1
  401d9c:	e7e4      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
  401d9e:	2000      	movs	r0, #0
  401da0:	e7e2      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401da2:	2b02      	cmp	r3, #2
  401da4:	d00b      	beq.n	401dbe <xQueueGenericSendFromISR+0x62>
  401da6:	b978      	cbnz	r0, 401dc8 <xQueueGenericSendFromISR+0x6c>
  401da8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dac:	b672      	cpsid	i
  401dae:	f383 8811 	msr	BASEPRI, r3
  401db2:	f3bf 8f6f 	isb	sy
  401db6:	f3bf 8f4f 	dsb	sy
  401dba:	b662      	cpsie	i
  401dbc:	e7fe      	b.n	401dbc <xQueueGenericSendFromISR+0x60>
  401dbe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  401dc0:	2d01      	cmp	r5, #1
  401dc2:	d0f0      	beq.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc4:	2000      	movs	r0, #0
  401dc6:	e7ee      	b.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc8:	461e      	mov	r6, r3
  401dca:	4615      	mov	r5, r2
  401dcc:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401dce:	4b23      	ldr	r3, [pc, #140]	; (401e5c <xQueueGenericSendFromISR+0x100>)
  401dd0:	4798      	blx	r3
	__asm volatile
  401dd2:	f3ef 8711 	mrs	r7, BASEPRI
  401dd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dda:	b672      	cpsid	i
  401ddc:	f383 8811 	msr	BASEPRI, r3
  401de0:	f3bf 8f6f 	isb	sy
  401de4:	f3bf 8f4f 	dsb	sy
  401de8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401dea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401dee:	429a      	cmp	r2, r3
  401df0:	d301      	bcc.n	401df6 <xQueueGenericSendFromISR+0x9a>
  401df2:	2e02      	cmp	r6, #2
  401df4:	d126      	bne.n	401e44 <xQueueGenericSendFromISR+0xe8>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401df6:	4632      	mov	r2, r6
  401df8:	4641      	mov	r1, r8
  401dfa:	4620      	mov	r0, r4
  401dfc:	4b18      	ldr	r3, [pc, #96]	; (401e60 <xQueueGenericSendFromISR+0x104>)
  401dfe:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401e00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e06:	d118      	bne.n	401e3a <xQueueGenericSendFromISR+0xde>
					if( pxQueue->pxQueueSetContainer != NULL )
  401e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e0a:	b15b      	cbz	r3, 401e24 <xQueueGenericSendFromISR+0xc8>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401e0c:	4631      	mov	r1, r6
  401e0e:	4620      	mov	r0, r4
  401e10:	4b14      	ldr	r3, [pc, #80]	; (401e64 <xQueueGenericSendFromISR+0x108>)
  401e12:	4798      	blx	r3
  401e14:	2801      	cmp	r0, #1
  401e16:	d117      	bne.n	401e48 <xQueueGenericSendFromISR+0xec>
							if( pxHigherPriorityTaskWoken != NULL )
  401e18:	b1c5      	cbz	r5, 401e4c <xQueueGenericSendFromISR+0xf0>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401e1a:	6028      	str	r0, [r5, #0]
	__asm volatile
  401e1c:	f387 8811 	msr	BASEPRI, r7
}
  401e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e26:	b19b      	cbz	r3, 401e50 <xQueueGenericSendFromISR+0xf4>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401e28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e2c:	4b0e      	ldr	r3, [pc, #56]	; (401e68 <xQueueGenericSendFromISR+0x10c>)
  401e2e:	4798      	blx	r3
  401e30:	b180      	cbz	r0, 401e54 <xQueueGenericSendFromISR+0xf8>
								if( pxHigherPriorityTaskWoken != NULL )
  401e32:	b18d      	cbz	r5, 401e58 <xQueueGenericSendFromISR+0xfc>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401e34:	2001      	movs	r0, #1
  401e36:	6028      	str	r0, [r5, #0]
  401e38:	e7f0      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
				++( pxQueue->xTxLock );
  401e3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e3c:	3301      	adds	r3, #1
  401e3e:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  401e40:	2001      	movs	r0, #1
  401e42:	e7eb      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
			xReturn = errQUEUE_FULL;
  401e44:	2000      	movs	r0, #0
  401e46:	e7e9      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
			xReturn = pdPASS;
  401e48:	2001      	movs	r0, #1
  401e4a:	e7e7      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e4c:	2001      	movs	r0, #1
  401e4e:	e7e5      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e50:	2001      	movs	r0, #1
  401e52:	e7e3      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e54:	2001      	movs	r0, #1
  401e56:	e7e1      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e58:	2001      	movs	r0, #1
  401e5a:	e7df      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e5c:	00401759 	.word	0x00401759
  401e60:	00401899 	.word	0x00401899
  401e64:	00401921 	.word	0x00401921
  401e68:	004029c5 	.word	0x004029c5

00401e6c <xQueueGenericReceive>:
{
  401e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e6e:	b085      	sub	sp, #20
  401e70:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401e72:	b170      	cbz	r0, 401e92 <xQueueGenericReceive+0x26>
  401e74:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401e76:	b1b9      	cbz	r1, 401ea8 <xQueueGenericReceive+0x3c>
  401e78:	2501      	movs	r5, #1
  401e7a:	b9dd      	cbnz	r5, 401eb4 <xQueueGenericReceive+0x48>
	__asm volatile
  401e7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e80:	b672      	cpsid	i
  401e82:	f383 8811 	msr	BASEPRI, r3
  401e86:	f3bf 8f6f 	isb	sy
  401e8a:	f3bf 8f4f 	dsb	sy
  401e8e:	b662      	cpsie	i
  401e90:	e7fe      	b.n	401e90 <xQueueGenericReceive+0x24>
  401e92:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e96:	b672      	cpsid	i
  401e98:	f383 8811 	msr	BASEPRI, r3
  401e9c:	f3bf 8f6f 	isb	sy
  401ea0:	f3bf 8f4f 	dsb	sy
  401ea4:	b662      	cpsie	i
  401ea6:	e7fe      	b.n	401ea6 <xQueueGenericReceive+0x3a>
  401ea8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401eaa:	b90a      	cbnz	r2, 401eb0 <xQueueGenericReceive+0x44>
  401eac:	2501      	movs	r5, #1
  401eae:	e7e4      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb0:	2500      	movs	r5, #0
  401eb2:	e7e2      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb4:	461f      	mov	r7, r3
  401eb6:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401eb8:	4b52      	ldr	r3, [pc, #328]	; (402004 <xQueueGenericReceive+0x198>)
  401eba:	4798      	blx	r3
  401ebc:	b910      	cbnz	r0, 401ec4 <xQueueGenericReceive+0x58>
  401ebe:	9b01      	ldr	r3, [sp, #4]
  401ec0:	b103      	cbz	r3, 401ec4 <xQueueGenericReceive+0x58>
  401ec2:	2500      	movs	r5, #0
  401ec4:	b955      	cbnz	r5, 401edc <xQueueGenericReceive+0x70>
  401ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eca:	b672      	cpsid	i
  401ecc:	f383 8811 	msr	BASEPRI, r3
  401ed0:	f3bf 8f6f 	isb	sy
  401ed4:	f3bf 8f4f 	dsb	sy
  401ed8:	b662      	cpsie	i
  401eda:	e7fe      	b.n	401eda <xQueueGenericReceive+0x6e>
  401edc:	2500      	movs	r5, #0
  401ede:	e046      	b.n	401f6e <xQueueGenericReceive+0x102>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401ee0:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401ee2:	4631      	mov	r1, r6
  401ee4:	4620      	mov	r0, r4
  401ee6:	4b48      	ldr	r3, [pc, #288]	; (402008 <xQueueGenericReceive+0x19c>)
  401ee8:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  401eea:	b9e7      	cbnz	r7, 401f26 <xQueueGenericReceive+0xba>
					--( pxQueue->uxMessagesWaiting );
  401eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eee:	3b01      	subs	r3, #1
  401ef0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401ef2:	6823      	ldr	r3, [r4, #0]
  401ef4:	b913      	cbnz	r3, 401efc <xQueueGenericReceive+0x90>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401ef6:	4b45      	ldr	r3, [pc, #276]	; (40200c <xQueueGenericReceive+0x1a0>)
  401ef8:	4798      	blx	r3
  401efa:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401efc:	6923      	ldr	r3, [r4, #16]
  401efe:	b16b      	cbz	r3, 401f1c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401f00:	f104 0010 	add.w	r0, r4, #16
  401f04:	4b42      	ldr	r3, [pc, #264]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f06:	4798      	blx	r3
  401f08:	2801      	cmp	r0, #1
  401f0a:	d107      	bne.n	401f1c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  401f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f10:	4b40      	ldr	r3, [pc, #256]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f12:	601a      	str	r2, [r3, #0]
  401f14:	f3bf 8f4f 	dsb	sy
  401f18:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401f1c:	4b3e      	ldr	r3, [pc, #248]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f1e:	4798      	blx	r3
				return pdPASS;
  401f20:	2001      	movs	r0, #1
}
  401f22:	b005      	add	sp, #20
  401f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  401f26:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d0f6      	beq.n	401f1c <xQueueGenericReceive+0xb0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f32:	4b37      	ldr	r3, [pc, #220]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f34:	4798      	blx	r3
  401f36:	2800      	cmp	r0, #0
  401f38:	d0f0      	beq.n	401f1c <xQueueGenericReceive+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
  401f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f3e:	4b35      	ldr	r3, [pc, #212]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f40:	601a      	str	r2, [r3, #0]
  401f42:	f3bf 8f4f 	dsb	sy
  401f46:	f3bf 8f6f 	isb	sy
  401f4a:	e7e7      	b.n	401f1c <xQueueGenericReceive+0xb0>
					taskEXIT_CRITICAL();
  401f4c:	4b32      	ldr	r3, [pc, #200]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f4e:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401f50:	2000      	movs	r0, #0
  401f52:	e7e6      	b.n	401f22 <xQueueGenericReceive+0xb6>
						taskENTER_CRITICAL();
  401f54:	4b31      	ldr	r3, [pc, #196]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f56:	4798      	blx	r3
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401f58:	6860      	ldr	r0, [r4, #4]
  401f5a:	4b31      	ldr	r3, [pc, #196]	; (402020 <xQueueGenericReceive+0x1b4>)
  401f5c:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401f5e:	4b2e      	ldr	r3, [pc, #184]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f60:	4798      	blx	r3
  401f62:	e032      	b.n	401fca <xQueueGenericReceive+0x15e>
				prvUnlockQueue( pxQueue );
  401f64:	4620      	mov	r0, r4
  401f66:	4b2f      	ldr	r3, [pc, #188]	; (402024 <xQueueGenericReceive+0x1b8>)
  401f68:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401f6a:	4b2f      	ldr	r3, [pc, #188]	; (402028 <xQueueGenericReceive+0x1bc>)
  401f6c:	4798      	blx	r3
		taskENTER_CRITICAL();
  401f6e:	4b2b      	ldr	r3, [pc, #172]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f70:	4798      	blx	r3
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  401f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f74:	2b00      	cmp	r3, #0
  401f76:	d1b3      	bne.n	401ee0 <xQueueGenericReceive+0x74>
				if( xTicksToWait == ( TickType_t ) 0 )
  401f78:	9b01      	ldr	r3, [sp, #4]
  401f7a:	2b00      	cmp	r3, #0
  401f7c:	d0e6      	beq.n	401f4c <xQueueGenericReceive+0xe0>
				else if( xEntryTimeSet == pdFALSE )
  401f7e:	b91d      	cbnz	r5, 401f88 <xQueueGenericReceive+0x11c>
					vTaskSetTimeOutState( &xTimeOut );
  401f80:	a802      	add	r0, sp, #8
  401f82:	4b2a      	ldr	r3, [pc, #168]	; (40202c <xQueueGenericReceive+0x1c0>)
  401f84:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
  401f86:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
  401f88:	4b23      	ldr	r3, [pc, #140]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f8a:	4798      	blx	r3
		vTaskSuspendAll();
  401f8c:	4b28      	ldr	r3, [pc, #160]	; (402030 <xQueueGenericReceive+0x1c4>)
  401f8e:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401f90:	4b22      	ldr	r3, [pc, #136]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f92:	4798      	blx	r3
  401f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f96:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f9a:	d101      	bne.n	401fa0 <xQueueGenericReceive+0x134>
  401f9c:	2300      	movs	r3, #0
  401f9e:	6463      	str	r3, [r4, #68]	; 0x44
  401fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fa6:	d101      	bne.n	401fac <xQueueGenericReceive+0x140>
  401fa8:	2300      	movs	r3, #0
  401faa:	64a3      	str	r3, [r4, #72]	; 0x48
  401fac:	4b1a      	ldr	r3, [pc, #104]	; (402018 <xQueueGenericReceive+0x1ac>)
  401fae:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401fb0:	a901      	add	r1, sp, #4
  401fb2:	a802      	add	r0, sp, #8
  401fb4:	4b1f      	ldr	r3, [pc, #124]	; (402034 <xQueueGenericReceive+0x1c8>)
  401fb6:	4798      	blx	r3
  401fb8:	b9e0      	cbnz	r0, 401ff4 <xQueueGenericReceive+0x188>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401fba:	4620      	mov	r0, r4
  401fbc:	4b1e      	ldr	r3, [pc, #120]	; (402038 <xQueueGenericReceive+0x1cc>)
  401fbe:	4798      	blx	r3
  401fc0:	2800      	cmp	r0, #0
  401fc2:	d0cf      	beq.n	401f64 <xQueueGenericReceive+0xf8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401fc4:	6823      	ldr	r3, [r4, #0]
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	d0c4      	beq.n	401f54 <xQueueGenericReceive+0xe8>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401fca:	9901      	ldr	r1, [sp, #4]
  401fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fd0:	4b1a      	ldr	r3, [pc, #104]	; (40203c <xQueueGenericReceive+0x1d0>)
  401fd2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401fd4:	4620      	mov	r0, r4
  401fd6:	4b13      	ldr	r3, [pc, #76]	; (402024 <xQueueGenericReceive+0x1b8>)
  401fd8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401fda:	4b13      	ldr	r3, [pc, #76]	; (402028 <xQueueGenericReceive+0x1bc>)
  401fdc:	4798      	blx	r3
  401fde:	2800      	cmp	r0, #0
  401fe0:	d1c5      	bne.n	401f6e <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
  401fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fe6:	4b0b      	ldr	r3, [pc, #44]	; (402014 <xQueueGenericReceive+0x1a8>)
  401fe8:	601a      	str	r2, [r3, #0]
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	e7bc      	b.n	401f6e <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
  401ff4:	4620      	mov	r0, r4
  401ff6:	4b0b      	ldr	r3, [pc, #44]	; (402024 <xQueueGenericReceive+0x1b8>)
  401ff8:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401ffa:	4b0b      	ldr	r3, [pc, #44]	; (402028 <xQueueGenericReceive+0x1bc>)
  401ffc:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401ffe:	2000      	movs	r0, #0
  402000:	e78f      	b.n	401f22 <xQueueGenericReceive+0xb6>
  402002:	bf00      	nop
  402004:	00402b2d 	.word	0x00402b2d
  402008:	004019a9 	.word	0x004019a9
  40200c:	00402cbd 	.word	0x00402cbd
  402010:	004029c5 	.word	0x004029c5
  402014:	e000ed04 	.word	0xe000ed04
  402018:	004015b9 	.word	0x004015b9
  40201c:	0040156d 	.word	0x0040156d
  402020:	00402b4d 	.word	0x00402b4d
  402024:	004019d1 	.word	0x004019d1
  402028:	004025a5 	.word	0x004025a5
  40202c:	00402a5d 	.word	0x00402a5d
  402030:	00402445 	.word	0x00402445
  402034:	00402a8d 	.word	0x00402a8d
  402038:	00401875 	.word	0x00401875
  40203c:	004028c1 	.word	0x004028c1

00402040 <vQueueAddToRegistry>:
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  402040:	2300      	movs	r3, #0
  402042:	2b07      	cmp	r3, #7
  402044:	d80c      	bhi.n	402060 <vQueueAddToRegistry+0x20>
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402046:	4a07      	ldr	r2, [pc, #28]	; (402064 <vQueueAddToRegistry+0x24>)
  402048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40204c:	b10a      	cbz	r2, 402052 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  40204e:	3301      	adds	r3, #1
  402050:	e7f7      	b.n	402042 <vQueueAddToRegistry+0x2>
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  402052:	4a04      	ldr	r2, [pc, #16]	; (402064 <vQueueAddToRegistry+0x24>)
  402054:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  402058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40205c:	6058      	str	r0, [r3, #4]
				break;
  40205e:	4770      	bx	lr
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	2043a12c 	.word	0x2043a12c

00402068 <vQueueWaitForMessageRestricted>:
	{
  402068:	b570      	push	{r4, r5, r6, lr}
  40206a:	4604      	mov	r4, r0
  40206c:	460d      	mov	r5, r1
  40206e:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  402070:	4b0f      	ldr	r3, [pc, #60]	; (4020b0 <vQueueWaitForMessageRestricted+0x48>)
  402072:	4798      	blx	r3
  402074:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402076:	f1b3 3fff 	cmp.w	r3, #4294967295
  40207a:	d00b      	beq.n	402094 <vQueueWaitForMessageRestricted+0x2c>
  40207c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40207e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402082:	d00a      	beq.n	40209a <vQueueWaitForMessageRestricted+0x32>
  402084:	4b0b      	ldr	r3, [pc, #44]	; (4020b4 <vQueueWaitForMessageRestricted+0x4c>)
  402086:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  402088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40208a:	b14b      	cbz	r3, 4020a0 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  40208c:	4620      	mov	r0, r4
  40208e:	4b0a      	ldr	r3, [pc, #40]	; (4020b8 <vQueueWaitForMessageRestricted+0x50>)
  402090:	4798      	blx	r3
  402092:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  402094:	2300      	movs	r3, #0
  402096:	6463      	str	r3, [r4, #68]	; 0x44
  402098:	e7f0      	b.n	40207c <vQueueWaitForMessageRestricted+0x14>
  40209a:	2300      	movs	r3, #0
  40209c:	64a3      	str	r3, [r4, #72]	; 0x48
  40209e:	e7f1      	b.n	402084 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4020a0:	4632      	mov	r2, r6
  4020a2:	4629      	mov	r1, r5
  4020a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020a8:	4b04      	ldr	r3, [pc, #16]	; (4020bc <vQueueWaitForMessageRestricted+0x54>)
  4020aa:	4798      	blx	r3
  4020ac:	e7ee      	b.n	40208c <vQueueWaitForMessageRestricted+0x24>
  4020ae:	bf00      	nop
  4020b0:	0040156d 	.word	0x0040156d
  4020b4:	004015b9 	.word	0x004015b9
  4020b8:	004019d1 	.word	0x004019d1
  4020bc:	00402945 	.word	0x00402945

004020c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020c0:	4b0a      	ldr	r3, [pc, #40]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020c2:	681b      	ldr	r3, [r3, #0]
  4020c4:	681b      	ldr	r3, [r3, #0]
  4020c6:	b94b      	cbnz	r3, 4020dc <prvResetNextTaskUnblockTime+0x1c>
  4020c8:	2301      	movs	r3, #1
  4020ca:	b94b      	cbnz	r3, 4020e0 <prvResetNextTaskUnblockTime+0x20>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4020cc:	4b07      	ldr	r3, [pc, #28]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020ce:	681b      	ldr	r3, [r3, #0]
  4020d0:	68db      	ldr	r3, [r3, #12]
  4020d2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  4020d4:	685a      	ldr	r2, [r3, #4]
  4020d6:	4b06      	ldr	r3, [pc, #24]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020d8:	601a      	str	r2, [r3, #0]
  4020da:	4770      	bx	lr
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4020dc:	2300      	movs	r3, #0
  4020de:	e7f4      	b.n	4020ca <prvResetNextTaskUnblockTime+0xa>
		xNextTaskUnblockTime = portMAX_DELAY;
  4020e0:	f04f 32ff 	mov.w	r2, #4294967295
  4020e4:	4b02      	ldr	r3, [pc, #8]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020e6:	601a      	str	r2, [r3, #0]
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	2040c248 	.word	0x2040c248
  4020f0:	2040c2f4 	.word	0x2040c2f4

004020f4 <prvDeleteTCB>:
	{
  4020f4:	b538      	push	{r3, r4, r5, lr}
  4020f6:	4605      	mov	r5, r0
			vPortFreeAligned( pxTCB->pxStack );
  4020f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4020fa:	4c02      	ldr	r4, [pc, #8]	; (402104 <prvDeleteTCB+0x10>)
  4020fc:	47a0      	blx	r4
		vPortFree( pxTCB );
  4020fe:	4628      	mov	r0, r5
  402100:	47a0      	blx	r4
  402102:	bd38      	pop	{r3, r4, r5, pc}
  402104:	00401831 	.word	0x00401831

00402108 <prvAllocateTCBAndStack>:
{
  402108:	b570      	push	{r4, r5, r6, lr}
  40210a:	4606      	mov	r6, r0
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40210c:	460c      	mov	r4, r1
  40210e:	b919      	cbnz	r1, 402118 <prvAllocateTCBAndStack+0x10>
  402110:	0080      	lsls	r0, r0, #2
  402112:	4b0c      	ldr	r3, [pc, #48]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  402114:	4798      	blx	r3
  402116:	4604      	mov	r4, r0
		if( pxStack != NULL )
  402118:	b18c      	cbz	r4, 40213e <prvAllocateTCBAndStack+0x36>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  40211a:	2058      	movs	r0, #88	; 0x58
  40211c:	4b09      	ldr	r3, [pc, #36]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  40211e:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402120:	4605      	mov	r5, r0
  402122:	b140      	cbz	r0, 402136 <prvAllocateTCBAndStack+0x2e>
				pxNewTCB->pxStack = pxStack;
  402124:	6304      	str	r4, [r0, #48]	; 0x30
	if( pxNewTCB != NULL )
  402126:	b125      	cbz	r5, 402132 <prvAllocateTCBAndStack+0x2a>
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402128:	00b2      	lsls	r2, r6, #2
  40212a:	21a5      	movs	r1, #165	; 0xa5
  40212c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40212e:	4b06      	ldr	r3, [pc, #24]	; (402148 <prvAllocateTCBAndStack+0x40>)
  402130:	4798      	blx	r3
}
  402132:	4628      	mov	r0, r5
  402134:	bd70      	pop	{r4, r5, r6, pc}
				vPortFree( pxStack );
  402136:	4620      	mov	r0, r4
  402138:	4b04      	ldr	r3, [pc, #16]	; (40214c <prvAllocateTCBAndStack+0x44>)
  40213a:	4798      	blx	r3
  40213c:	e7f3      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
			pxNewTCB = NULL;
  40213e:	2500      	movs	r5, #0
  402140:	e7f1      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
  402142:	bf00      	nop
  402144:	004017bd 	.word	0x004017bd
  402148:	0041faa1 	.word	0x0041faa1
  40214c:	00401831 	.word	0x00401831

00402150 <prvInitialiseTCBVariables>:
{
  402150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402152:	4604      	mov	r4, r0
  402154:	4615      	mov	r5, r2
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402156:	2300      	movs	r3, #0
  402158:	2b09      	cmp	r3, #9
  40215a:	d918      	bls.n	40218e <prvInitialiseTCBVariables+0x3e>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  40215c:	2300      	movs	r3, #0
  40215e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
  402162:	2d04      	cmp	r5, #4
  402164:	d900      	bls.n	402168 <prvInitialiseTCBVariables+0x18>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
  402166:	2504      	movs	r5, #4
	pxTCB->uxPriority = uxPriority;
  402168:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  40216a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  40216c:	2600      	movs	r6, #0
  40216e:	64e6      	str	r6, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402170:	1d20      	adds	r0, r4, #4
  402172:	4f0b      	ldr	r7, [pc, #44]	; (4021a0 <prvInitialiseTCBVariables+0x50>)
  402174:	47b8      	blx	r7
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402176:	f104 0018 	add.w	r0, r4, #24
  40217a:	47b8      	blx	r7
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  40217c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40217e:	f1c5 0505 	rsb	r5, r5, #5
  402182:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402184:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402186:	6526      	str	r6, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402188:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  40218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  40218e:	5cc8      	ldrb	r0, [r1, r3]
  402190:	18e2      	adds	r2, r4, r3
  402192:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402196:	5cca      	ldrb	r2, [r1, r3]
  402198:	2a00      	cmp	r2, #0
  40219a:	d0df      	beq.n	40215c <prvInitialiseTCBVariables+0xc>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  40219c:	3301      	adds	r3, #1
  40219e:	e7db      	b.n	402158 <prvInitialiseTCBVariables+0x8>
  4021a0:	00401437 	.word	0x00401437

004021a4 <prvInitialiseTaskLists>:
{
  4021a4:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4021a6:	2400      	movs	r4, #0
  4021a8:	2c04      	cmp	r4, #4
  4021aa:	d911      	bls.n	4021d0 <prvInitialiseTaskLists+0x2c>
	vListInitialise( &xDelayedTaskList1 );
  4021ac:	4e0c      	ldr	r6, [pc, #48]	; (4021e0 <prvInitialiseTaskLists+0x3c>)
  4021ae:	4630      	mov	r0, r6
  4021b0:	4c0c      	ldr	r4, [pc, #48]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021b2:	47a0      	blx	r4
	vListInitialise( &xDelayedTaskList2 );
  4021b4:	4d0c      	ldr	r5, [pc, #48]	; (4021e8 <prvInitialiseTaskLists+0x44>)
  4021b6:	4628      	mov	r0, r5
  4021b8:	47a0      	blx	r4
	vListInitialise( &xPendingReadyList );
  4021ba:	480c      	ldr	r0, [pc, #48]	; (4021ec <prvInitialiseTaskLists+0x48>)
  4021bc:	47a0      	blx	r4
		vListInitialise( &xTasksWaitingTermination );
  4021be:	480c      	ldr	r0, [pc, #48]	; (4021f0 <prvInitialiseTaskLists+0x4c>)
  4021c0:	47a0      	blx	r4
		vListInitialise( &xSuspendedTaskList );
  4021c2:	480c      	ldr	r0, [pc, #48]	; (4021f4 <prvInitialiseTaskLists+0x50>)
  4021c4:	47a0      	blx	r4
	pxDelayedTaskList = &xDelayedTaskList1;
  4021c6:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <prvInitialiseTaskLists+0x54>)
  4021c8:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  4021ca:	4b0c      	ldr	r3, [pc, #48]	; (4021fc <prvInitialiseTaskLists+0x58>)
  4021cc:	601d      	str	r5, [r3, #0]
  4021ce:	bd70      	pop	{r4, r5, r6, pc}
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  4021d0:	2014      	movs	r0, #20
  4021d2:	4b0b      	ldr	r3, [pc, #44]	; (402200 <prvInitialiseTaskLists+0x5c>)
  4021d4:	fb00 3004 	mla	r0, r0, r4, r3
  4021d8:	4b02      	ldr	r3, [pc, #8]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021da:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
  4021dc:	3401      	adds	r4, #1
  4021de:	e7e3      	b.n	4021a8 <prvInitialiseTaskLists+0x4>
  4021e0:	2040c2cc 	.word	0x2040c2cc
  4021e4:	00401421 	.word	0x00401421
  4021e8:	2040c2e0 	.word	0x2040c2e0
  4021ec:	2040c2fc 	.word	0x2040c2fc
  4021f0:	2040c328 	.word	0x2040c328
  4021f4:	2040c314 	.word	0x2040c314
  4021f8:	2040c248 	.word	0x2040c248
  4021fc:	2040c24c 	.word	0x2040c24c
  402200:	2040c250 	.word	0x2040c250

00402204 <prvAddCurrentTaskToDelayedList>:
{
  402204:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402206:	4b0f      	ldr	r3, [pc, #60]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  40220c:	4b0e      	ldr	r3, [pc, #56]	; (402248 <prvAddCurrentTaskToDelayedList+0x44>)
  40220e:	681b      	ldr	r3, [r3, #0]
  402210:	4298      	cmp	r0, r3
  402212:	d30e      	bcc.n	402232 <prvAddCurrentTaskToDelayedList+0x2e>
  402214:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402216:	4b0d      	ldr	r3, [pc, #52]	; (40224c <prvAddCurrentTaskToDelayedList+0x48>)
  402218:	6818      	ldr	r0, [r3, #0]
  40221a:	4b0a      	ldr	r3, [pc, #40]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  40221c:	6819      	ldr	r1, [r3, #0]
  40221e:	3104      	adds	r1, #4
  402220:	4b0b      	ldr	r3, [pc, #44]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  402222:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402224:	4b0b      	ldr	r3, [pc, #44]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  402226:	681b      	ldr	r3, [r3, #0]
  402228:	429c      	cmp	r4, r3
  40222a:	d201      	bcs.n	402230 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  40222c:	4b09      	ldr	r3, [pc, #36]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  40222e:	601c      	str	r4, [r3, #0]
  402230:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402232:	4b09      	ldr	r3, [pc, #36]	; (402258 <prvAddCurrentTaskToDelayedList+0x54>)
  402234:	6818      	ldr	r0, [r3, #0]
  402236:	4b03      	ldr	r3, [pc, #12]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402238:	6819      	ldr	r1, [r3, #0]
  40223a:	3104      	adds	r1, #4
  40223c:	4b04      	ldr	r3, [pc, #16]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  40223e:	4798      	blx	r3
  402240:	bd10      	pop	{r4, pc}
  402242:	bf00      	nop
  402244:	2040c244 	.word	0x2040c244
  402248:	2040c33c 	.word	0x2040c33c
  40224c:	2040c248 	.word	0x2040c248
  402250:	00401455 	.word	0x00401455
  402254:	2040c2f4 	.word	0x2040c2f4
  402258:	2040c24c 	.word	0x2040c24c

0040225c <xTaskGenericCreate>:
{
  40225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402260:	b083      	sub	sp, #12
  402262:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402264:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
  402268:	b168      	cbz	r0, 402286 <xTaskGenericCreate+0x2a>
  40226a:	4680      	mov	r8, r0
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  40226c:	2f04      	cmp	r7, #4
  40226e:	d915      	bls.n	40229c <xTaskGenericCreate+0x40>
  402270:	f04f 0380 	mov.w	r3, #128	; 0x80
  402274:	b672      	cpsid	i
  402276:	f383 8811 	msr	BASEPRI, r3
  40227a:	f3bf 8f6f 	isb	sy
  40227e:	f3bf 8f4f 	dsb	sy
  402282:	b662      	cpsie	i
  402284:	e7fe      	b.n	402284 <xTaskGenericCreate+0x28>
  402286:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228a:	b672      	cpsid	i
  40228c:	f383 8811 	msr	BASEPRI, r3
  402290:	f3bf 8f6f 	isb	sy
  402294:	f3bf 8f4f 	dsb	sy
  402298:	b662      	cpsie	i
  40229a:	e7fe      	b.n	40229a <xTaskGenericCreate+0x3e>
  40229c:	4699      	mov	r9, r3
  40229e:	4616      	mov	r6, r2
  4022a0:	468a      	mov	sl, r1
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
  4022a2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4022a4:	4610      	mov	r0, r2
  4022a6:	4b35      	ldr	r3, [pc, #212]	; (40237c <xTaskGenericCreate+0x120>)
  4022a8:	4798      	blx	r3
	if( pxNewTCB != NULL )
  4022aa:	4604      	mov	r4, r0
  4022ac:	2800      	cmp	r0, #0
  4022ae:	d062      	beq.n	402376 <xTaskGenericCreate+0x11a>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  4022b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4022b2:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  4022b6:	4435      	add	r5, r6
  4022b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  4022bc:	f023 0507 	bic.w	r5, r3, #7
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
  4022c0:	9600      	str	r6, [sp, #0]
  4022c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4022c4:	463a      	mov	r2, r7
  4022c6:	4651      	mov	r1, sl
  4022c8:	4e2d      	ldr	r6, [pc, #180]	; (402380 <xTaskGenericCreate+0x124>)
  4022ca:	47b0      	blx	r6
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  4022cc:	464a      	mov	r2, r9
  4022ce:	4641      	mov	r1, r8
  4022d0:	4628      	mov	r0, r5
  4022d2:	4b2c      	ldr	r3, [pc, #176]	; (402384 <xTaskGenericCreate+0x128>)
  4022d4:	4798      	blx	r3
  4022d6:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  4022d8:	f1bb 0f00 	cmp.w	fp, #0
  4022dc:	d001      	beq.n	4022e2 <xTaskGenericCreate+0x86>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  4022de:	f8cb 4000 	str.w	r4, [fp]
		taskENTER_CRITICAL();
  4022e2:	4b29      	ldr	r3, [pc, #164]	; (402388 <xTaskGenericCreate+0x12c>)
  4022e4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  4022e6:	4a29      	ldr	r2, [pc, #164]	; (40238c <xTaskGenericCreate+0x130>)
  4022e8:	6813      	ldr	r3, [r2, #0]
  4022ea:	3301      	adds	r3, #1
  4022ec:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  4022ee:	4b28      	ldr	r3, [pc, #160]	; (402390 <xTaskGenericCreate+0x134>)
  4022f0:	681b      	ldr	r3, [r3, #0]
  4022f2:	2b00      	cmp	r3, #0
  4022f4:	d133      	bne.n	40235e <xTaskGenericCreate+0x102>
				pxCurrentTCB =  pxNewTCB;
  4022f6:	4b26      	ldr	r3, [pc, #152]	; (402390 <xTaskGenericCreate+0x134>)
  4022f8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  4022fa:	6813      	ldr	r3, [r2, #0]
  4022fc:	2b01      	cmp	r3, #1
  4022fe:	d101      	bne.n	402304 <xTaskGenericCreate+0xa8>
					prvInitialiseTaskLists();
  402300:	4b24      	ldr	r3, [pc, #144]	; (402394 <xTaskGenericCreate+0x138>)
  402302:	4798      	blx	r3
			uxTaskNumber++;
  402304:	4a24      	ldr	r2, [pc, #144]	; (402398 <xTaskGenericCreate+0x13c>)
  402306:	6813      	ldr	r3, [r2, #0]
  402308:	3301      	adds	r3, #1
  40230a:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  40230c:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  40230e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402310:	2501      	movs	r5, #1
  402312:	fa05 f203 	lsl.w	r2, r5, r3
  402316:	4921      	ldr	r1, [pc, #132]	; (40239c <xTaskGenericCreate+0x140>)
  402318:	6808      	ldr	r0, [r1, #0]
  40231a:	4302      	orrs	r2, r0
  40231c:	600a      	str	r2, [r1, #0]
  40231e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402322:	009a      	lsls	r2, r3, #2
  402324:	1d21      	adds	r1, r4, #4
  402326:	481e      	ldr	r0, [pc, #120]	; (4023a0 <xTaskGenericCreate+0x144>)
  402328:	4410      	add	r0, r2
  40232a:	4b1e      	ldr	r3, [pc, #120]	; (4023a4 <xTaskGenericCreate+0x148>)
  40232c:	4798      	blx	r3
		taskEXIT_CRITICAL();
  40232e:	4b1e      	ldr	r3, [pc, #120]	; (4023a8 <xTaskGenericCreate+0x14c>)
  402330:	4798      	blx	r3
			xReturn = pdPASS;
  402332:	4628      	mov	r0, r5
	if( xReturn == pdPASS )
  402334:	2801      	cmp	r0, #1
  402336:	d10f      	bne.n	402358 <xTaskGenericCreate+0xfc>
		if( xSchedulerRunning != pdFALSE )
  402338:	4b1c      	ldr	r3, [pc, #112]	; (4023ac <xTaskGenericCreate+0x150>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	b163      	cbz	r3, 402358 <xTaskGenericCreate+0xfc>
			if( pxCurrentTCB->uxPriority < uxPriority )
  40233e:	4b14      	ldr	r3, [pc, #80]	; (402390 <xTaskGenericCreate+0x134>)
  402340:	681b      	ldr	r3, [r3, #0]
  402342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402344:	429f      	cmp	r7, r3
  402346:	d907      	bls.n	402358 <xTaskGenericCreate+0xfc>
				taskYIELD_IF_USING_PREEMPTION();
  402348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40234c:	4b18      	ldr	r3, [pc, #96]	; (4023b0 <xTaskGenericCreate+0x154>)
  40234e:	601a      	str	r2, [r3, #0]
  402350:	f3bf 8f4f 	dsb	sy
  402354:	f3bf 8f6f 	isb	sy
}
  402358:	b003      	add	sp, #12
  40235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( xSchedulerRunning == pdFALSE )
  40235e:	4b13      	ldr	r3, [pc, #76]	; (4023ac <xTaskGenericCreate+0x150>)
  402360:	681b      	ldr	r3, [r3, #0]
  402362:	2b00      	cmp	r3, #0
  402364:	d1ce      	bne.n	402304 <xTaskGenericCreate+0xa8>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402366:	4b0a      	ldr	r3, [pc, #40]	; (402390 <xTaskGenericCreate+0x134>)
  402368:	681b      	ldr	r3, [r3, #0]
  40236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40236c:	429f      	cmp	r7, r3
  40236e:	d3c9      	bcc.n	402304 <xTaskGenericCreate+0xa8>
						pxCurrentTCB = pxNewTCB;
  402370:	4b07      	ldr	r3, [pc, #28]	; (402390 <xTaskGenericCreate+0x134>)
  402372:	601c      	str	r4, [r3, #0]
  402374:	e7c6      	b.n	402304 <xTaskGenericCreate+0xa8>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402376:	f04f 30ff 	mov.w	r0, #4294967295
  40237a:	e7db      	b.n	402334 <xTaskGenericCreate+0xd8>
  40237c:	00402109 	.word	0x00402109
  402380:	00402151 	.word	0x00402151
  402384:	00401521 	.word	0x00401521
  402388:	0040156d 	.word	0x0040156d
  40238c:	2040c2b4 	.word	0x2040c2b4
  402390:	2040c244 	.word	0x2040c244
  402394:	004021a5 	.word	0x004021a5
  402398:	2040c2c0 	.word	0x2040c2c0
  40239c:	2040c2c8 	.word	0x2040c2c8
  4023a0:	2040c250 	.word	0x2040c250
  4023a4:	0040143d 	.word	0x0040143d
  4023a8:	004015b9 	.word	0x004015b9
  4023ac:	2040c310 	.word	0x2040c310
  4023b0:	e000ed04 	.word	0xe000ed04

004023b4 <vTaskStartScheduler>:
{
  4023b4:	b510      	push	{r4, lr}
  4023b6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  4023b8:	2300      	movs	r3, #0
  4023ba:	9303      	str	r3, [sp, #12]
  4023bc:	9302      	str	r3, [sp, #8]
  4023be:	9301      	str	r3, [sp, #4]
  4023c0:	9300      	str	r3, [sp, #0]
  4023c2:	2282      	movs	r2, #130	; 0x82
  4023c4:	4917      	ldr	r1, [pc, #92]	; (402424 <vTaskStartScheduler+0x70>)
  4023c6:	4818      	ldr	r0, [pc, #96]	; (402428 <vTaskStartScheduler+0x74>)
  4023c8:	4c18      	ldr	r4, [pc, #96]	; (40242c <vTaskStartScheduler+0x78>)
  4023ca:	47a0      	blx	r4
		if( xReturn == pdPASS )
  4023cc:	2801      	cmp	r0, #1
  4023ce:	d00d      	beq.n	4023ec <vTaskStartScheduler+0x38>
	if( xReturn == pdPASS )
  4023d0:	2801      	cmp	r0, #1
  4023d2:	d00e      	beq.n	4023f2 <vTaskStartScheduler+0x3e>
		configASSERT( xReturn );
  4023d4:	bb18      	cbnz	r0, 40241e <vTaskStartScheduler+0x6a>
  4023d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023da:	b672      	cpsid	i
  4023dc:	f383 8811 	msr	BASEPRI, r3
  4023e0:	f3bf 8f6f 	isb	sy
  4023e4:	f3bf 8f4f 	dsb	sy
  4023e8:	b662      	cpsie	i
  4023ea:	e7fe      	b.n	4023ea <vTaskStartScheduler+0x36>
			xReturn = xTimerCreateTimerTask();
  4023ec:	4b10      	ldr	r3, [pc, #64]	; (402430 <vTaskStartScheduler+0x7c>)
  4023ee:	4798      	blx	r3
  4023f0:	e7ee      	b.n	4023d0 <vTaskStartScheduler+0x1c>
  4023f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023f6:	b672      	cpsid	i
  4023f8:	f383 8811 	msr	BASEPRI, r3
  4023fc:	f3bf 8f6f 	isb	sy
  402400:	f3bf 8f4f 	dsb	sy
  402404:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402406:	f04f 32ff 	mov.w	r2, #4294967295
  40240a:	4b0a      	ldr	r3, [pc, #40]	; (402434 <vTaskStartScheduler+0x80>)
  40240c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  40240e:	2201      	movs	r2, #1
  402410:	4b09      	ldr	r3, [pc, #36]	; (402438 <vTaskStartScheduler+0x84>)
  402412:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402414:	2200      	movs	r2, #0
  402416:	4b09      	ldr	r3, [pc, #36]	; (40243c <vTaskStartScheduler+0x88>)
  402418:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  40241a:	4b09      	ldr	r3, [pc, #36]	; (402440 <vTaskStartScheduler+0x8c>)
  40241c:	4798      	blx	r3
}
  40241e:	b004      	add	sp, #16
  402420:	bd10      	pop	{r4, pc}
  402422:	bf00      	nop
  402424:	004235d8 	.word	0x004235d8
  402428:	004027c1 	.word	0x004027c1
  40242c:	0040225d 	.word	0x0040225d
  402430:	00402dd1 	.word	0x00402dd1
  402434:	2040c2f4 	.word	0x2040c2f4
  402438:	2040c310 	.word	0x2040c310
  40243c:	2040c33c 	.word	0x2040c33c
  402440:	004016a1 	.word	0x004016a1

00402444 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402444:	4a02      	ldr	r2, [pc, #8]	; (402450 <vTaskSuspendAll+0xc>)
  402446:	6813      	ldr	r3, [r2, #0]
  402448:	3301      	adds	r3, #1
  40244a:	6013      	str	r3, [r2, #0]
  40244c:	4770      	bx	lr
  40244e:	bf00      	nop
  402450:	2040c2bc 	.word	0x2040c2bc

00402454 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402454:	4b01      	ldr	r3, [pc, #4]	; (40245c <xTaskGetTickCount+0x8>)
  402456:	6818      	ldr	r0, [r3, #0]
}
  402458:	4770      	bx	lr
  40245a:	bf00      	nop
  40245c:	2040c33c 	.word	0x2040c33c

00402460 <xTaskIncrementTick>:
{
  402460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402462:	4b41      	ldr	r3, [pc, #260]	; (402568 <xTaskIncrementTick+0x108>)
  402464:	681b      	ldr	r3, [r3, #0]
  402466:	2b00      	cmp	r3, #0
  402468:	d175      	bne.n	402556 <xTaskIncrementTick+0xf6>
		++xTickCount;
  40246a:	4b40      	ldr	r3, [pc, #256]	; (40256c <xTaskIncrementTick+0x10c>)
  40246c:	681a      	ldr	r2, [r3, #0]
  40246e:	3201      	adds	r2, #1
  402470:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402472:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402474:	b9d6      	cbnz	r6, 4024ac <xTaskIncrementTick+0x4c>
				taskSWITCH_DELAYED_LISTS();
  402476:	4b3e      	ldr	r3, [pc, #248]	; (402570 <xTaskIncrementTick+0x110>)
  402478:	681b      	ldr	r3, [r3, #0]
  40247a:	681b      	ldr	r3, [r3, #0]
  40247c:	b153      	cbz	r3, 402494 <xTaskIncrementTick+0x34>
  40247e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402482:	b672      	cpsid	i
  402484:	f383 8811 	msr	BASEPRI, r3
  402488:	f3bf 8f6f 	isb	sy
  40248c:	f3bf 8f4f 	dsb	sy
  402490:	b662      	cpsie	i
  402492:	e7fe      	b.n	402492 <xTaskIncrementTick+0x32>
  402494:	4a36      	ldr	r2, [pc, #216]	; (402570 <xTaskIncrementTick+0x110>)
  402496:	6811      	ldr	r1, [r2, #0]
  402498:	4b36      	ldr	r3, [pc, #216]	; (402574 <xTaskIncrementTick+0x114>)
  40249a:	6818      	ldr	r0, [r3, #0]
  40249c:	6010      	str	r0, [r2, #0]
  40249e:	6019      	str	r1, [r3, #0]
  4024a0:	4a35      	ldr	r2, [pc, #212]	; (402578 <xTaskIncrementTick+0x118>)
  4024a2:	6813      	ldr	r3, [r2, #0]
  4024a4:	3301      	adds	r3, #1
  4024a6:	6013      	str	r3, [r2, #0]
  4024a8:	4b34      	ldr	r3, [pc, #208]	; (40257c <xTaskIncrementTick+0x11c>)
  4024aa:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  4024ac:	4b34      	ldr	r3, [pc, #208]	; (402580 <xTaskIncrementTick+0x120>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	429e      	cmp	r6, r3
  4024b2:	d244      	bcs.n	40253e <xTaskIncrementTick+0xde>
BaseType_t xSwitchRequired = pdFALSE;
  4024b4:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  4024b6:	4b33      	ldr	r3, [pc, #204]	; (402584 <xTaskIncrementTick+0x124>)
  4024b8:	681b      	ldr	r3, [r3, #0]
  4024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024c0:	009a      	lsls	r2, r3, #2
  4024c2:	4b31      	ldr	r3, [pc, #196]	; (402588 <xTaskIncrementTick+0x128>)
  4024c4:	589b      	ldr	r3, [r3, r2]
  4024c6:	2b01      	cmp	r3, #1
  4024c8:	d900      	bls.n	4024cc <xTaskIncrementTick+0x6c>
				xSwitchRequired = pdTRUE;
  4024ca:	2401      	movs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  4024cc:	4b2f      	ldr	r3, [pc, #188]	; (40258c <xTaskIncrementTick+0x12c>)
  4024ce:	681b      	ldr	r3, [r3, #0]
  4024d0:	b90b      	cbnz	r3, 4024d6 <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  4024d2:	4b2f      	ldr	r3, [pc, #188]	; (402590 <xTaskIncrementTick+0x130>)
  4024d4:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  4024d6:	4b2f      	ldr	r3, [pc, #188]	; (402594 <xTaskIncrementTick+0x134>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	b103      	cbz	r3, 4024de <xTaskIncrementTick+0x7e>
			xSwitchRequired = pdTRUE;
  4024dc:	2401      	movs	r4, #1
}
  4024de:	4620      	mov	r0, r4
  4024e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
								xSwitchRequired = pdTRUE;
  4024e2:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4024e4:	4b22      	ldr	r3, [pc, #136]	; (402570 <xTaskIncrementTick+0x110>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	681b      	ldr	r3, [r3, #0]
  4024ea:	b353      	cbz	r3, 402542 <xTaskIncrementTick+0xe2>
  4024ec:	2300      	movs	r3, #0
  4024ee:	bb53      	cbnz	r3, 402546 <xTaskIncrementTick+0xe6>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4024f0:	4b1f      	ldr	r3, [pc, #124]	; (402570 <xTaskIncrementTick+0x110>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	68db      	ldr	r3, [r3, #12]
  4024f6:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  4024f8:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  4024fa:	429e      	cmp	r6, r3
  4024fc:	d328      	bcc.n	402550 <xTaskIncrementTick+0xf0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4024fe:	1d2f      	adds	r7, r5, #4
  402500:	4638      	mov	r0, r7
  402502:	4b25      	ldr	r3, [pc, #148]	; (402598 <xTaskIncrementTick+0x138>)
  402504:	4798      	blx	r3
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402506:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402508:	b11b      	cbz	r3, 402512 <xTaskIncrementTick+0xb2>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40250a:	f105 0018 	add.w	r0, r5, #24
  40250e:	4b22      	ldr	r3, [pc, #136]	; (402598 <xTaskIncrementTick+0x138>)
  402510:	4798      	blx	r3
						prvAddTaskToReadyList( pxTCB );
  402512:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402514:	2201      	movs	r2, #1
  402516:	409a      	lsls	r2, r3
  402518:	4920      	ldr	r1, [pc, #128]	; (40259c <xTaskIncrementTick+0x13c>)
  40251a:	6808      	ldr	r0, [r1, #0]
  40251c:	4302      	orrs	r2, r0
  40251e:	600a      	str	r2, [r1, #0]
  402520:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402524:	009a      	lsls	r2, r3, #2
  402526:	4639      	mov	r1, r7
  402528:	4817      	ldr	r0, [pc, #92]	; (402588 <xTaskIncrementTick+0x128>)
  40252a:	4410      	add	r0, r2
  40252c:	4b1c      	ldr	r3, [pc, #112]	; (4025a0 <xTaskIncrementTick+0x140>)
  40252e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402530:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402532:	4b14      	ldr	r3, [pc, #80]	; (402584 <xTaskIncrementTick+0x124>)
  402534:	681b      	ldr	r3, [r3, #0]
  402536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402538:	429a      	cmp	r2, r3
  40253a:	d2d2      	bcs.n	4024e2 <xTaskIncrementTick+0x82>
  40253c:	e7d2      	b.n	4024e4 <xTaskIncrementTick+0x84>
  40253e:	2400      	movs	r4, #0
  402540:	e7d0      	b.n	4024e4 <xTaskIncrementTick+0x84>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402542:	2301      	movs	r3, #1
  402544:	e7d3      	b.n	4024ee <xTaskIncrementTick+0x8e>
						xNextTaskUnblockTime = portMAX_DELAY;
  402546:	f04f 32ff 	mov.w	r2, #4294967295
  40254a:	4b0d      	ldr	r3, [pc, #52]	; (402580 <xTaskIncrementTick+0x120>)
  40254c:	601a      	str	r2, [r3, #0]
						break;
  40254e:	e7b2      	b.n	4024b6 <xTaskIncrementTick+0x56>
							xNextTaskUnblockTime = xItemValue;
  402550:	4a0b      	ldr	r2, [pc, #44]	; (402580 <xTaskIncrementTick+0x120>)
  402552:	6013      	str	r3, [r2, #0]
							break;
  402554:	e7af      	b.n	4024b6 <xTaskIncrementTick+0x56>
		++uxPendedTicks;
  402556:	4a0d      	ldr	r2, [pc, #52]	; (40258c <xTaskIncrementTick+0x12c>)
  402558:	6813      	ldr	r3, [r2, #0]
  40255a:	3301      	adds	r3, #1
  40255c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40255e:	4b0c      	ldr	r3, [pc, #48]	; (402590 <xTaskIncrementTick+0x130>)
  402560:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402562:	2400      	movs	r4, #0
  402564:	e7b7      	b.n	4024d6 <xTaskIncrementTick+0x76>
  402566:	bf00      	nop
  402568:	2040c2bc 	.word	0x2040c2bc
  40256c:	2040c33c 	.word	0x2040c33c
  402570:	2040c248 	.word	0x2040c248
  402574:	2040c24c 	.word	0x2040c24c
  402578:	2040c2f8 	.word	0x2040c2f8
  40257c:	004020c1 	.word	0x004020c1
  402580:	2040c2f4 	.word	0x2040c2f4
  402584:	2040c244 	.word	0x2040c244
  402588:	2040c250 	.word	0x2040c250
  40258c:	2040c2b8 	.word	0x2040c2b8
  402590:	0041e531 	.word	0x0041e531
  402594:	2040c340 	.word	0x2040c340
  402598:	00401489 	.word	0x00401489
  40259c:	2040c2c8 	.word	0x2040c2c8
  4025a0:	0040143d 	.word	0x0040143d

004025a4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  4025a4:	4b35      	ldr	r3, [pc, #212]	; (40267c <xTaskResumeAll+0xd8>)
  4025a6:	681b      	ldr	r3, [r3, #0]
  4025a8:	b953      	cbnz	r3, 4025c0 <xTaskResumeAll+0x1c>
  4025aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ae:	b672      	cpsid	i
  4025b0:	f383 8811 	msr	BASEPRI, r3
  4025b4:	f3bf 8f6f 	isb	sy
  4025b8:	f3bf 8f4f 	dsb	sy
  4025bc:	b662      	cpsie	i
  4025be:	e7fe      	b.n	4025be <xTaskResumeAll+0x1a>
{
  4025c0:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
  4025c2:	4b2f      	ldr	r3, [pc, #188]	; (402680 <xTaskResumeAll+0xdc>)
  4025c4:	4798      	blx	r3
		--uxSchedulerSuspended;
  4025c6:	4b2d      	ldr	r3, [pc, #180]	; (40267c <xTaskResumeAll+0xd8>)
  4025c8:	681a      	ldr	r2, [r3, #0]
  4025ca:	3a01      	subs	r2, #1
  4025cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d14f      	bne.n	402674 <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  4025d4:	4b2b      	ldr	r3, [pc, #172]	; (402684 <xTaskResumeAll+0xe0>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	bb1b      	cbnz	r3, 402622 <xTaskResumeAll+0x7e>
BaseType_t xAlreadyYielded = pdFALSE;
  4025da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  4025dc:	4b2a      	ldr	r3, [pc, #168]	; (402688 <xTaskResumeAll+0xe4>)
  4025de:	4798      	blx	r3
}
  4025e0:	4620      	mov	r0, r4
  4025e2:	bd70      	pop	{r4, r5, r6, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4025e4:	4b29      	ldr	r3, [pc, #164]	; (40268c <xTaskResumeAll+0xe8>)
  4025e6:	68db      	ldr	r3, [r3, #12]
  4025e8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4025ea:	f104 0018 	add.w	r0, r4, #24
  4025ee:	4e28      	ldr	r6, [pc, #160]	; (402690 <xTaskResumeAll+0xec>)
  4025f0:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4025f2:	1d25      	adds	r5, r4, #4
  4025f4:	4628      	mov	r0, r5
  4025f6:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4025f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4025fa:	2201      	movs	r2, #1
  4025fc:	409a      	lsls	r2, r3
  4025fe:	4925      	ldr	r1, [pc, #148]	; (402694 <xTaskResumeAll+0xf0>)
  402600:	6808      	ldr	r0, [r1, #0]
  402602:	4302      	orrs	r2, r0
  402604:	600a      	str	r2, [r1, #0]
  402606:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40260a:	009a      	lsls	r2, r3, #2
  40260c:	4629      	mov	r1, r5
  40260e:	4822      	ldr	r0, [pc, #136]	; (402698 <xTaskResumeAll+0xf4>)
  402610:	4410      	add	r0, r2
  402612:	4b22      	ldr	r3, [pc, #136]	; (40269c <xTaskResumeAll+0xf8>)
  402614:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402618:	4b21      	ldr	r3, [pc, #132]	; (4026a0 <xTaskResumeAll+0xfc>)
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40261e:	429a      	cmp	r2, r3
  402620:	d214      	bcs.n	40264c <xTaskResumeAll+0xa8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402622:	4b1a      	ldr	r3, [pc, #104]	; (40268c <xTaskResumeAll+0xe8>)
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	2b00      	cmp	r3, #0
  402628:	d1dc      	bne.n	4025e4 <xTaskResumeAll+0x40>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  40262a:	4b1e      	ldr	r3, [pc, #120]	; (4026a4 <xTaskResumeAll+0x100>)
  40262c:	681b      	ldr	r3, [r3, #0]
  40262e:	b9ab      	cbnz	r3, 40265c <xTaskResumeAll+0xb8>
				if( xYieldPending == pdTRUE )
  402630:	4b1d      	ldr	r3, [pc, #116]	; (4026a8 <xTaskResumeAll+0x104>)
  402632:	681b      	ldr	r3, [r3, #0]
  402634:	2b01      	cmp	r3, #1
  402636:	d11f      	bne.n	402678 <xTaskResumeAll+0xd4>
					taskYIELD_IF_USING_PREEMPTION();
  402638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40263c:	4b1b      	ldr	r3, [pc, #108]	; (4026ac <xTaskResumeAll+0x108>)
  40263e:	601a      	str	r2, [r3, #0]
  402640:	f3bf 8f4f 	dsb	sy
  402644:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402648:	2401      	movs	r4, #1
  40264a:	e7c7      	b.n	4025dc <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
  40264c:	2201      	movs	r2, #1
  40264e:	4b16      	ldr	r3, [pc, #88]	; (4026a8 <xTaskResumeAll+0x104>)
  402650:	601a      	str	r2, [r3, #0]
  402652:	e7e6      	b.n	402622 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402654:	4a13      	ldr	r2, [pc, #76]	; (4026a4 <xTaskResumeAll+0x100>)
  402656:	6813      	ldr	r3, [r2, #0]
  402658:	3b01      	subs	r3, #1
  40265a:	6013      	str	r3, [r2, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40265c:	4b11      	ldr	r3, [pc, #68]	; (4026a4 <xTaskResumeAll+0x100>)
  40265e:	681b      	ldr	r3, [r3, #0]
  402660:	2b00      	cmp	r3, #0
  402662:	d0e5      	beq.n	402630 <xTaskResumeAll+0x8c>
						if( xTaskIncrementTick() != pdFALSE )
  402664:	4b12      	ldr	r3, [pc, #72]	; (4026b0 <xTaskResumeAll+0x10c>)
  402666:	4798      	blx	r3
  402668:	2800      	cmp	r0, #0
  40266a:	d0f3      	beq.n	402654 <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
  40266c:	2201      	movs	r2, #1
  40266e:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <xTaskResumeAll+0x104>)
  402670:	601a      	str	r2, [r3, #0]
  402672:	e7ef      	b.n	402654 <xTaskResumeAll+0xb0>
BaseType_t xAlreadyYielded = pdFALSE;
  402674:	2400      	movs	r4, #0
  402676:	e7b1      	b.n	4025dc <xTaskResumeAll+0x38>
  402678:	2400      	movs	r4, #0
  40267a:	e7af      	b.n	4025dc <xTaskResumeAll+0x38>
  40267c:	2040c2bc 	.word	0x2040c2bc
  402680:	0040156d 	.word	0x0040156d
  402684:	2040c2b4 	.word	0x2040c2b4
  402688:	004015b9 	.word	0x004015b9
  40268c:	2040c2fc 	.word	0x2040c2fc
  402690:	00401489 	.word	0x00401489
  402694:	2040c2c8 	.word	0x2040c2c8
  402698:	2040c250 	.word	0x2040c250
  40269c:	0040143d 	.word	0x0040143d
  4026a0:	2040c244 	.word	0x2040c244
  4026a4:	2040c2b8 	.word	0x2040c2b8
  4026a8:	2040c340 	.word	0x2040c340
  4026ac:	e000ed04 	.word	0xe000ed04
  4026b0:	00402461 	.word	0x00402461

004026b4 <vTaskDelay>:
	{
  4026b4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d02a      	beq.n	402710 <vTaskDelay+0x5c>
  4026ba:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  4026bc:	4b1a      	ldr	r3, [pc, #104]	; (402728 <vTaskDelay+0x74>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	b153      	cbz	r3, 4026d8 <vTaskDelay+0x24>
  4026c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c6:	b672      	cpsid	i
  4026c8:	f383 8811 	msr	BASEPRI, r3
  4026cc:	f3bf 8f6f 	isb	sy
  4026d0:	f3bf 8f4f 	dsb	sy
  4026d4:	b662      	cpsie	i
  4026d6:	e7fe      	b.n	4026d6 <vTaskDelay+0x22>
			vTaskSuspendAll();
  4026d8:	4b14      	ldr	r3, [pc, #80]	; (40272c <vTaskDelay+0x78>)
  4026da:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  4026dc:	4b14      	ldr	r3, [pc, #80]	; (402730 <vTaskDelay+0x7c>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4026e2:	4b14      	ldr	r3, [pc, #80]	; (402734 <vTaskDelay+0x80>)
  4026e4:	6818      	ldr	r0, [r3, #0]
  4026e6:	3004      	adds	r0, #4
  4026e8:	4b13      	ldr	r3, [pc, #76]	; (402738 <vTaskDelay+0x84>)
  4026ea:	4798      	blx	r3
  4026ec:	b950      	cbnz	r0, 402704 <vTaskDelay+0x50>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4026ee:	4b11      	ldr	r3, [pc, #68]	; (402734 <vTaskDelay+0x80>)
  4026f0:	681b      	ldr	r3, [r3, #0]
  4026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026f4:	2301      	movs	r3, #1
  4026f6:	fa03 f202 	lsl.w	r2, r3, r2
  4026fa:	4910      	ldr	r1, [pc, #64]	; (40273c <vTaskDelay+0x88>)
  4026fc:	680b      	ldr	r3, [r1, #0]
  4026fe:	ea23 0302 	bic.w	r3, r3, r2
  402702:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402704:	4620      	mov	r0, r4
  402706:	4b0e      	ldr	r3, [pc, #56]	; (402740 <vTaskDelay+0x8c>)
  402708:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40270a:	4b0e      	ldr	r3, [pc, #56]	; (402744 <vTaskDelay+0x90>)
  40270c:	4798      	blx	r3
  40270e:	e000      	b.n	402712 <vTaskDelay+0x5e>
	BaseType_t xAlreadyYielded = pdFALSE;
  402710:	2000      	movs	r0, #0
		if( xAlreadyYielded == pdFALSE )
  402712:	b938      	cbnz	r0, 402724 <vTaskDelay+0x70>
			portYIELD_WITHIN_API();
  402714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <vTaskDelay+0x94>)
  40271a:	601a      	str	r2, [r3, #0]
  40271c:	f3bf 8f4f 	dsb	sy
  402720:	f3bf 8f6f 	isb	sy
  402724:	bd10      	pop	{r4, pc}
  402726:	bf00      	nop
  402728:	2040c2bc 	.word	0x2040c2bc
  40272c:	00402445 	.word	0x00402445
  402730:	2040c33c 	.word	0x2040c33c
  402734:	2040c244 	.word	0x2040c244
  402738:	00401489 	.word	0x00401489
  40273c:	2040c2c8 	.word	0x2040c2c8
  402740:	00402205 	.word	0x00402205
  402744:	004025a5 	.word	0x004025a5
  402748:	e000ed04 	.word	0xe000ed04

0040274c <prvCheckTasksWaitingTermination>:
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40274c:	4b13      	ldr	r3, [pc, #76]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  40274e:	681b      	ldr	r3, [r3, #0]
  402750:	b313      	cbz	r3, 402798 <prvCheckTasksWaitingTermination+0x4c>
{
  402752:	b510      	push	{r4, lr}
			vTaskSuspendAll();
  402754:	4b12      	ldr	r3, [pc, #72]	; (4027a0 <prvCheckTasksWaitingTermination+0x54>)
  402756:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402758:	4b12      	ldr	r3, [pc, #72]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  40275a:	681c      	ldr	r4, [r3, #0]
			( void ) xTaskResumeAll();
  40275c:	4b12      	ldr	r3, [pc, #72]	; (4027a8 <prvCheckTasksWaitingTermination+0x5c>)
  40275e:	4798      	blx	r3
			if( xListIsEmpty == pdFALSE )
  402760:	b924      	cbnz	r4, 40276c <prvCheckTasksWaitingTermination+0x20>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402762:	4b0e      	ldr	r3, [pc, #56]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402764:	681b      	ldr	r3, [r3, #0]
  402766:	2b00      	cmp	r3, #0
  402768:	d1f4      	bne.n	402754 <prvCheckTasksWaitingTermination+0x8>
}
  40276a:	bd10      	pop	{r4, pc}
				taskENTER_CRITICAL();
  40276c:	4b0f      	ldr	r3, [pc, #60]	; (4027ac <prvCheckTasksWaitingTermination+0x60>)
  40276e:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  402770:	4b0c      	ldr	r3, [pc, #48]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  402772:	68db      	ldr	r3, [r3, #12]
  402774:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402776:	1d20      	adds	r0, r4, #4
  402778:	4b0d      	ldr	r3, [pc, #52]	; (4027b0 <prvCheckTasksWaitingTermination+0x64>)
  40277a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  40277c:	4a0d      	ldr	r2, [pc, #52]	; (4027b4 <prvCheckTasksWaitingTermination+0x68>)
  40277e:	6813      	ldr	r3, [r2, #0]
  402780:	3b01      	subs	r3, #1
  402782:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402784:	4a05      	ldr	r2, [pc, #20]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402786:	6813      	ldr	r3, [r2, #0]
  402788:	3b01      	subs	r3, #1
  40278a:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
  40278c:	4b0a      	ldr	r3, [pc, #40]	; (4027b8 <prvCheckTasksWaitingTermination+0x6c>)
  40278e:	4798      	blx	r3
				prvDeleteTCB( pxTCB );
  402790:	4620      	mov	r0, r4
  402792:	4b0a      	ldr	r3, [pc, #40]	; (4027bc <prvCheckTasksWaitingTermination+0x70>)
  402794:	4798      	blx	r3
  402796:	e7e4      	b.n	402762 <prvCheckTasksWaitingTermination+0x16>
  402798:	4770      	bx	lr
  40279a:	bf00      	nop
  40279c:	2040c2c4 	.word	0x2040c2c4
  4027a0:	00402445 	.word	0x00402445
  4027a4:	2040c328 	.word	0x2040c328
  4027a8:	004025a5 	.word	0x004025a5
  4027ac:	0040156d 	.word	0x0040156d
  4027b0:	00401489 	.word	0x00401489
  4027b4:	2040c2b4 	.word	0x2040c2b4
  4027b8:	004015b9 	.word	0x004015b9
  4027bc:	004020f5 	.word	0x004020f5

004027c0 <prvIdleTask>:
{
  4027c0:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
  4027c2:	4b07      	ldr	r3, [pc, #28]	; (4027e0 <prvIdleTask+0x20>)
  4027c4:	4798      	blx	r3
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  4027c6:	4b07      	ldr	r3, [pc, #28]	; (4027e4 <prvIdleTask+0x24>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	2b01      	cmp	r3, #1
  4027cc:	d9f9      	bls.n	4027c2 <prvIdleTask+0x2>
				taskYIELD();
  4027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027d2:	4b05      	ldr	r3, [pc, #20]	; (4027e8 <prvIdleTask+0x28>)
  4027d4:	601a      	str	r2, [r3, #0]
  4027d6:	f3bf 8f4f 	dsb	sy
  4027da:	f3bf 8f6f 	isb	sy
  4027de:	e7f0      	b.n	4027c2 <prvIdleTask+0x2>
  4027e0:	0040274d 	.word	0x0040274d
  4027e4:	2040c250 	.word	0x2040c250
  4027e8:	e000ed04 	.word	0xe000ed04

004027ec <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4027ec:	4b2e      	ldr	r3, [pc, #184]	; (4028a8 <vTaskSwitchContext+0xbc>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d12c      	bne.n	40284e <vTaskSwitchContext+0x62>
{
  4027f4:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4027f6:	2200      	movs	r2, #0
  4027f8:	4b2c      	ldr	r3, [pc, #176]	; (4028ac <vTaskSwitchContext+0xc0>)
  4027fa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4027fc:	4b2c      	ldr	r3, [pc, #176]	; (4028b0 <vTaskSwitchContext+0xc4>)
  4027fe:	681b      	ldr	r3, [r3, #0]
  402800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402802:	681a      	ldr	r2, [r3, #0]
  402804:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402808:	d103      	bne.n	402812 <vTaskSwitchContext+0x26>
  40280a:	685a      	ldr	r2, [r3, #4]
  40280c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402810:	d021      	beq.n	402856 <vTaskSwitchContext+0x6a>
  402812:	4b27      	ldr	r3, [pc, #156]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402814:	6818      	ldr	r0, [r3, #0]
  402816:	6819      	ldr	r1, [r3, #0]
  402818:	3134      	adds	r1, #52	; 0x34
  40281a:	4b26      	ldr	r3, [pc, #152]	; (4028b4 <vTaskSwitchContext+0xc8>)
  40281c:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40281e:	4b26      	ldr	r3, [pc, #152]	; (4028b8 <vTaskSwitchContext+0xcc>)
  402820:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  402822:	fab3 f383 	clz	r3, r3
  402826:	b2db      	uxtb	r3, r3
  402828:	f1c3 031f 	rsb	r3, r3, #31
  40282c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402830:	008a      	lsls	r2, r1, #2
  402832:	4922      	ldr	r1, [pc, #136]	; (4028bc <vTaskSwitchContext+0xd0>)
  402834:	588a      	ldr	r2, [r1, r2]
  402836:	b9ba      	cbnz	r2, 402868 <vTaskSwitchContext+0x7c>
	__asm volatile
  402838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283c:	b672      	cpsid	i
  40283e:	f383 8811 	msr	BASEPRI, r3
  402842:	f3bf 8f6f 	isb	sy
  402846:	f3bf 8f4f 	dsb	sy
  40284a:	b662      	cpsie	i
  40284c:	e7fe      	b.n	40284c <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  40284e:	2201      	movs	r2, #1
  402850:	4b16      	ldr	r3, [pc, #88]	; (4028ac <vTaskSwitchContext+0xc0>)
  402852:	601a      	str	r2, [r3, #0]
  402854:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  402856:	689a      	ldr	r2, [r3, #8]
  402858:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40285c:	d1d9      	bne.n	402812 <vTaskSwitchContext+0x26>
  40285e:	68db      	ldr	r3, [r3, #12]
  402860:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402864:	d1d5      	bne.n	402812 <vTaskSwitchContext+0x26>
  402866:	e7da      	b.n	40281e <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402868:	4814      	ldr	r0, [pc, #80]	; (4028bc <vTaskSwitchContext+0xd0>)
  40286a:	009a      	lsls	r2, r3, #2
  40286c:	18d4      	adds	r4, r2, r3
  40286e:	00a1      	lsls	r1, r4, #2
  402870:	4401      	add	r1, r0
  402872:	684c      	ldr	r4, [r1, #4]
  402874:	6864      	ldr	r4, [r4, #4]
  402876:	604c      	str	r4, [r1, #4]
  402878:	441a      	add	r2, r3
  40287a:	0091      	lsls	r1, r2, #2
  40287c:	3108      	adds	r1, #8
  40287e:	4408      	add	r0, r1
  402880:	4284      	cmp	r4, r0
  402882:	d009      	beq.n	402898 <vTaskSwitchContext+0xac>
  402884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402888:	009a      	lsls	r2, r3, #2
  40288a:	4b0c      	ldr	r3, [pc, #48]	; (4028bc <vTaskSwitchContext+0xd0>)
  40288c:	4413      	add	r3, r2
  40288e:	685b      	ldr	r3, [r3, #4]
  402890:	68da      	ldr	r2, [r3, #12]
  402892:	4b07      	ldr	r3, [pc, #28]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402894:	601a      	str	r2, [r3, #0]
  402896:	bd10      	pop	{r4, pc}
  402898:	6860      	ldr	r0, [r4, #4]
  40289a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40289e:	0091      	lsls	r1, r2, #2
  4028a0:	4a06      	ldr	r2, [pc, #24]	; (4028bc <vTaskSwitchContext+0xd0>)
  4028a2:	440a      	add	r2, r1
  4028a4:	6050      	str	r0, [r2, #4]
  4028a6:	e7ed      	b.n	402884 <vTaskSwitchContext+0x98>
  4028a8:	2040c2bc 	.word	0x2040c2bc
  4028ac:	2040c340 	.word	0x2040c340
  4028b0:	2040c244 	.word	0x2040c244
  4028b4:	0041e519 	.word	0x0041e519
  4028b8:	2040c2c8 	.word	0x2040c2c8
  4028bc:	2040c250 	.word	0x2040c250

004028c0 <vTaskPlaceOnEventList>:
{
  4028c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4028c2:	b1e8      	cbz	r0, 402900 <vTaskPlaceOnEventList+0x40>
  4028c4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4028c6:	4d17      	ldr	r5, [pc, #92]	; (402924 <vTaskPlaceOnEventList+0x64>)
  4028c8:	6829      	ldr	r1, [r5, #0]
  4028ca:	3118      	adds	r1, #24
  4028cc:	4b16      	ldr	r3, [pc, #88]	; (402928 <vTaskPlaceOnEventList+0x68>)
  4028ce:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4028d0:	6828      	ldr	r0, [r5, #0]
  4028d2:	3004      	adds	r0, #4
  4028d4:	4b15      	ldr	r3, [pc, #84]	; (40292c <vTaskPlaceOnEventList+0x6c>)
  4028d6:	4798      	blx	r3
  4028d8:	b948      	cbnz	r0, 4028ee <vTaskPlaceOnEventList+0x2e>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4028da:	682b      	ldr	r3, [r5, #0]
  4028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4028de:	2301      	movs	r3, #1
  4028e0:	fa03 f202 	lsl.w	r2, r3, r2
  4028e4:	4912      	ldr	r1, [pc, #72]	; (402930 <vTaskPlaceOnEventList+0x70>)
  4028e6:	680b      	ldr	r3, [r1, #0]
  4028e8:	ea23 0302 	bic.w	r3, r3, r2
  4028ec:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  4028ee:	f1b4 3fff 	cmp.w	r4, #4294967295
  4028f2:	d010      	beq.n	402916 <vTaskPlaceOnEventList+0x56>
			xTimeToWake = xTickCount + xTicksToWait;
  4028f4:	4b0f      	ldr	r3, [pc, #60]	; (402934 <vTaskPlaceOnEventList+0x74>)
  4028f6:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  4028f8:	4420      	add	r0, r4
  4028fa:	4b0f      	ldr	r3, [pc, #60]	; (402938 <vTaskPlaceOnEventList+0x78>)
  4028fc:	4798      	blx	r3
  4028fe:	bd38      	pop	{r3, r4, r5, pc}
  402900:	f04f 0380 	mov.w	r3, #128	; 0x80
  402904:	b672      	cpsid	i
  402906:	f383 8811 	msr	BASEPRI, r3
  40290a:	f3bf 8f6f 	isb	sy
  40290e:	f3bf 8f4f 	dsb	sy
  402912:	b662      	cpsie	i
  402914:	e7fe      	b.n	402914 <vTaskPlaceOnEventList+0x54>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402916:	4b03      	ldr	r3, [pc, #12]	; (402924 <vTaskPlaceOnEventList+0x64>)
  402918:	6819      	ldr	r1, [r3, #0]
  40291a:	3104      	adds	r1, #4
  40291c:	4807      	ldr	r0, [pc, #28]	; (40293c <vTaskPlaceOnEventList+0x7c>)
  40291e:	4b08      	ldr	r3, [pc, #32]	; (402940 <vTaskPlaceOnEventList+0x80>)
  402920:	4798      	blx	r3
  402922:	bd38      	pop	{r3, r4, r5, pc}
  402924:	2040c244 	.word	0x2040c244
  402928:	00401455 	.word	0x00401455
  40292c:	00401489 	.word	0x00401489
  402930:	2040c2c8 	.word	0x2040c2c8
  402934:	2040c33c 	.word	0x2040c33c
  402938:	00402205 	.word	0x00402205
  40293c:	2040c314 	.word	0x2040c314
  402940:	0040143d 	.word	0x0040143d

00402944 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  402944:	b1f0      	cbz	r0, 402984 <vTaskPlaceOnEventListRestricted+0x40>
	{
  402946:	b570      	push	{r4, r5, r6, lr}
  402948:	4615      	mov	r5, r2
  40294a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40294c:	4e16      	ldr	r6, [pc, #88]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40294e:	6831      	ldr	r1, [r6, #0]
  402950:	3118      	adds	r1, #24
  402952:	4b16      	ldr	r3, [pc, #88]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  402954:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402956:	6830      	ldr	r0, [r6, #0]
  402958:	3004      	adds	r0, #4
  40295a:	4b15      	ldr	r3, [pc, #84]	; (4029b0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40295c:	4798      	blx	r3
  40295e:	b948      	cbnz	r0, 402974 <vTaskPlaceOnEventListRestricted+0x30>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402960:	6833      	ldr	r3, [r6, #0]
  402962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402964:	2301      	movs	r3, #1
  402966:	fa03 f202 	lsl.w	r2, r3, r2
  40296a:	4912      	ldr	r1, [pc, #72]	; (4029b4 <vTaskPlaceOnEventListRestricted+0x70>)
  40296c:	680b      	ldr	r3, [r1, #0]
  40296e:	ea23 0302 	bic.w	r3, r3, r2
  402972:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  402974:	2d01      	cmp	r5, #1
  402976:	d010      	beq.n	40299a <vTaskPlaceOnEventListRestricted+0x56>
				xTimeToWake = xTickCount + xTicksToWait;
  402978:	4b0f      	ldr	r3, [pc, #60]	; (4029b8 <vTaskPlaceOnEventListRestricted+0x74>)
  40297a:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40297c:	4420      	add	r0, r4
  40297e:	4b0f      	ldr	r3, [pc, #60]	; (4029bc <vTaskPlaceOnEventListRestricted+0x78>)
  402980:	4798      	blx	r3
  402982:	bd70      	pop	{r4, r5, r6, pc}
  402984:	f04f 0380 	mov.w	r3, #128	; 0x80
  402988:	b672      	cpsid	i
  40298a:	f383 8811 	msr	BASEPRI, r3
  40298e:	f3bf 8f6f 	isb	sy
  402992:	f3bf 8f4f 	dsb	sy
  402996:	b662      	cpsie	i
  402998:	e7fe      	b.n	402998 <vTaskPlaceOnEventListRestricted+0x54>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  40299a:	4b03      	ldr	r3, [pc, #12]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40299c:	6819      	ldr	r1, [r3, #0]
  40299e:	3104      	adds	r1, #4
  4029a0:	4807      	ldr	r0, [pc, #28]	; (4029c0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4029a2:	4b02      	ldr	r3, [pc, #8]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  4029a4:	4798      	blx	r3
  4029a6:	bd70      	pop	{r4, r5, r6, pc}
  4029a8:	2040c244 	.word	0x2040c244
  4029ac:	0040143d 	.word	0x0040143d
  4029b0:	00401489 	.word	0x00401489
  4029b4:	2040c2c8 	.word	0x2040c2c8
  4029b8:	2040c33c 	.word	0x2040c33c
  4029bc:	00402205 	.word	0x00402205
  4029c0:	2040c314 	.word	0x2040c314

004029c4 <xTaskRemoveFromEventList>:
{
  4029c4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4029c6:	68c3      	ldr	r3, [r0, #12]
  4029c8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4029ca:	b324      	cbz	r4, 402a16 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4029cc:	f104 0518 	add.w	r5, r4, #24
  4029d0:	4628      	mov	r0, r5
  4029d2:	4b1a      	ldr	r3, [pc, #104]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029d4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4029d6:	4b1a      	ldr	r3, [pc, #104]	; (402a40 <xTaskRemoveFromEventList+0x7c>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	bb3b      	cbnz	r3, 402a2c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4029dc:	1d25      	adds	r5, r4, #4
  4029de:	4628      	mov	r0, r5
  4029e0:	4b16      	ldr	r3, [pc, #88]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029e2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  4029e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029e6:	2201      	movs	r2, #1
  4029e8:	409a      	lsls	r2, r3
  4029ea:	4916      	ldr	r1, [pc, #88]	; (402a44 <xTaskRemoveFromEventList+0x80>)
  4029ec:	6808      	ldr	r0, [r1, #0]
  4029ee:	4302      	orrs	r2, r0
  4029f0:	600a      	str	r2, [r1, #0]
  4029f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4029f6:	009a      	lsls	r2, r3, #2
  4029f8:	4629      	mov	r1, r5
  4029fa:	4813      	ldr	r0, [pc, #76]	; (402a48 <xTaskRemoveFromEventList+0x84>)
  4029fc:	4410      	add	r0, r2
  4029fe:	4b13      	ldr	r3, [pc, #76]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a00:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a04:	4b12      	ldr	r3, [pc, #72]	; (402a50 <xTaskRemoveFromEventList+0x8c>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a0a:	429a      	cmp	r2, r3
  402a0c:	d913      	bls.n	402a36 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402a0e:	2001      	movs	r0, #1
  402a10:	4b10      	ldr	r3, [pc, #64]	; (402a54 <xTaskRemoveFromEventList+0x90>)
  402a12:	6018      	str	r0, [r3, #0]
  402a14:	bd38      	pop	{r3, r4, r5, pc}
  402a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a1a:	b672      	cpsid	i
  402a1c:	f383 8811 	msr	BASEPRI, r3
  402a20:	f3bf 8f6f 	isb	sy
  402a24:	f3bf 8f4f 	dsb	sy
  402a28:	b662      	cpsie	i
  402a2a:	e7fe      	b.n	402a2a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402a2c:	4629      	mov	r1, r5
  402a2e:	480a      	ldr	r0, [pc, #40]	; (402a58 <xTaskRemoveFromEventList+0x94>)
  402a30:	4b06      	ldr	r3, [pc, #24]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a32:	4798      	blx	r3
  402a34:	e7e5      	b.n	402a02 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  402a36:	2000      	movs	r0, #0
}
  402a38:	bd38      	pop	{r3, r4, r5, pc}
  402a3a:	bf00      	nop
  402a3c:	00401489 	.word	0x00401489
  402a40:	2040c2bc 	.word	0x2040c2bc
  402a44:	2040c2c8 	.word	0x2040c2c8
  402a48:	2040c250 	.word	0x2040c250
  402a4c:	0040143d 	.word	0x0040143d
  402a50:	2040c244 	.word	0x2040c244
  402a54:	2040c340 	.word	0x2040c340
  402a58:	2040c2fc 	.word	0x2040c2fc

00402a5c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  402a5c:	b130      	cbz	r0, 402a6c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  402a5e:	4a09      	ldr	r2, [pc, #36]	; (402a84 <vTaskSetTimeOutState+0x28>)
  402a60:	6812      	ldr	r2, [r2, #0]
  402a62:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402a64:	4a08      	ldr	r2, [pc, #32]	; (402a88 <vTaskSetTimeOutState+0x2c>)
  402a66:	6812      	ldr	r2, [r2, #0]
  402a68:	6042      	str	r2, [r0, #4]
  402a6a:	4770      	bx	lr
  402a6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a70:	b672      	cpsid	i
  402a72:	f383 8811 	msr	BASEPRI, r3
  402a76:	f3bf 8f6f 	isb	sy
  402a7a:	f3bf 8f4f 	dsb	sy
  402a7e:	b662      	cpsie	i
  402a80:	e7fe      	b.n	402a80 <vTaskSetTimeOutState+0x24>
  402a82:	bf00      	nop
  402a84:	2040c2f8 	.word	0x2040c2f8
  402a88:	2040c33c 	.word	0x2040c33c

00402a8c <xTaskCheckForTimeOut>:
{
  402a8c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  402a8e:	b1c0      	cbz	r0, 402ac2 <xTaskCheckForTimeOut+0x36>
  402a90:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  402a92:	b309      	cbz	r1, 402ad8 <xTaskCheckForTimeOut+0x4c>
  402a94:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402a96:	4b1d      	ldr	r3, [pc, #116]	; (402b0c <xTaskCheckForTimeOut+0x80>)
  402a98:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402a9a:	4b1d      	ldr	r3, [pc, #116]	; (402b10 <xTaskCheckForTimeOut+0x84>)
  402a9c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  402a9e:	682b      	ldr	r3, [r5, #0]
  402aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402aa4:	d02e      	beq.n	402b04 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402aa6:	6820      	ldr	r0, [r4, #0]
  402aa8:	4a1a      	ldr	r2, [pc, #104]	; (402b14 <xTaskCheckForTimeOut+0x88>)
  402aaa:	6812      	ldr	r2, [r2, #0]
  402aac:	4290      	cmp	r0, r2
  402aae:	d002      	beq.n	402ab6 <xTaskCheckForTimeOut+0x2a>
  402ab0:	6862      	ldr	r2, [r4, #4]
  402ab2:	4291      	cmp	r1, r2
  402ab4:	d228      	bcs.n	402b08 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402ab6:	6862      	ldr	r2, [r4, #4]
  402ab8:	1a88      	subs	r0, r1, r2
  402aba:	4283      	cmp	r3, r0
  402abc:	d817      	bhi.n	402aee <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  402abe:	2401      	movs	r4, #1
  402ac0:	e01c      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac6:	b672      	cpsid	i
  402ac8:	f383 8811 	msr	BASEPRI, r3
  402acc:	f3bf 8f6f 	isb	sy
  402ad0:	f3bf 8f4f 	dsb	sy
  402ad4:	b662      	cpsie	i
  402ad6:	e7fe      	b.n	402ad6 <xTaskCheckForTimeOut+0x4a>
  402ad8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402adc:	b672      	cpsid	i
  402ade:	f383 8811 	msr	BASEPRI, r3
  402ae2:	f3bf 8f6f 	isb	sy
  402ae6:	f3bf 8f4f 	dsb	sy
  402aea:	b662      	cpsie	i
  402aec:	e7fe      	b.n	402aec <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  402aee:	1a52      	subs	r2, r2, r1
  402af0:	4413      	add	r3, r2
  402af2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402af4:	4620      	mov	r0, r4
  402af6:	4b08      	ldr	r3, [pc, #32]	; (402b18 <xTaskCheckForTimeOut+0x8c>)
  402af8:	4798      	blx	r3
			xReturn = pdFALSE;
  402afa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402afc:	4b07      	ldr	r3, [pc, #28]	; (402b1c <xTaskCheckForTimeOut+0x90>)
  402afe:	4798      	blx	r3
}
  402b00:	4620      	mov	r0, r4
  402b02:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  402b04:	2400      	movs	r4, #0
  402b06:	e7f9      	b.n	402afc <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  402b08:	2401      	movs	r4, #1
  402b0a:	e7f7      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402b0c:	0040156d 	.word	0x0040156d
  402b10:	2040c33c 	.word	0x2040c33c
  402b14:	2040c2f8 	.word	0x2040c2f8
  402b18:	00402a5d 	.word	0x00402a5d
  402b1c:	004015b9 	.word	0x004015b9

00402b20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  402b20:	2201      	movs	r2, #1
  402b22:	4b01      	ldr	r3, [pc, #4]	; (402b28 <vTaskMissedYield+0x8>)
  402b24:	601a      	str	r2, [r3, #0]
  402b26:	4770      	bx	lr
  402b28:	2040c340 	.word	0x2040c340

00402b2c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  402b2c:	4b05      	ldr	r3, [pc, #20]	; (402b44 <xTaskGetSchedulerState+0x18>)
  402b2e:	681b      	ldr	r3, [r3, #0]
  402b30:	b123      	cbz	r3, 402b3c <xTaskGetSchedulerState+0x10>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402b32:	4b05      	ldr	r3, [pc, #20]	; (402b48 <xTaskGetSchedulerState+0x1c>)
  402b34:	681b      	ldr	r3, [r3, #0]
  402b36:	b91b      	cbnz	r3, 402b40 <xTaskGetSchedulerState+0x14>
			{
				xReturn = taskSCHEDULER_RUNNING;
  402b38:	2002      	movs	r0, #2
  402b3a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402b3c:	2001      	movs	r0, #1
  402b3e:	4770      	bx	lr
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  402b40:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
  402b42:	4770      	bx	lr
  402b44:	2040c310 	.word	0x2040c310
  402b48:	2040c2bc 	.word	0x2040c2bc

00402b4c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d047      	beq.n	402be0 <vTaskPriorityInherit+0x94>
	{
  402b50:	b538      	push	{r3, r4, r5, lr}
  402b52:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  402b54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402b56:	4923      	ldr	r1, [pc, #140]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b58:	6809      	ldr	r1, [r1, #0]
  402b5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b5c:	428b      	cmp	r3, r1
  402b5e:	d216      	bcs.n	402b8e <vTaskPriorityInherit+0x42>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402b60:	6981      	ldr	r1, [r0, #24]
  402b62:	2900      	cmp	r1, #0
  402b64:	db05      	blt.n	402b72 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b66:	491f      	ldr	r1, [pc, #124]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b68:	6809      	ldr	r1, [r1, #0]
  402b6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b6c:	f1c1 0105 	rsb	r1, r1, #5
  402b70:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402b72:	6960      	ldr	r0, [r4, #20]
  402b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b78:	0099      	lsls	r1, r3, #2
  402b7a:	4b1b      	ldr	r3, [pc, #108]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402b7c:	440b      	add	r3, r1
  402b7e:	4298      	cmp	r0, r3
  402b80:	d006      	beq.n	402b90 <vTaskPriorityInherit+0x44>
  402b82:	2300      	movs	r3, #0
  402b84:	b933      	cbnz	r3, 402b94 <vTaskPriorityInherit+0x48>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402b86:	4b17      	ldr	r3, [pc, #92]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b88:	681b      	ldr	r3, [r3, #0]
  402b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  402b8e:	bd38      	pop	{r3, r4, r5, pc}
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  402b90:	2301      	movs	r3, #1
  402b92:	e7f7      	b.n	402b84 <vTaskPriorityInherit+0x38>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402b94:	1d25      	adds	r5, r4, #4
  402b96:	4628      	mov	r0, r5
  402b98:	4b14      	ldr	r3, [pc, #80]	; (402bec <vTaskPriorityInherit+0xa0>)
  402b9a:	4798      	blx	r3
  402b9c:	b968      	cbnz	r0, 402bba <vTaskPriorityInherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402ba0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402ba4:	008a      	lsls	r2, r1, #2
  402ba6:	4910      	ldr	r1, [pc, #64]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402ba8:	588a      	ldr	r2, [r1, r2]
  402baa:	b932      	cbnz	r2, 402bba <vTaskPriorityInherit+0x6e>
  402bac:	2201      	movs	r2, #1
  402bae:	409a      	lsls	r2, r3
  402bb0:	490f      	ldr	r1, [pc, #60]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bb2:	680b      	ldr	r3, [r1, #0]
  402bb4:	ea23 0302 	bic.w	r3, r3, r2
  402bb8:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402bba:	4b0a      	ldr	r3, [pc, #40]	; (402be4 <vTaskPriorityInherit+0x98>)
  402bbc:	681b      	ldr	r3, [r3, #0]
  402bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402bc2:	2201      	movs	r2, #1
  402bc4:	409a      	lsls	r2, r3
  402bc6:	490a      	ldr	r1, [pc, #40]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bc8:	6808      	ldr	r0, [r1, #0]
  402bca:	4302      	orrs	r2, r0
  402bcc:	600a      	str	r2, [r1, #0]
  402bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402bd2:	009a      	lsls	r2, r3, #2
  402bd4:	4629      	mov	r1, r5
  402bd6:	4804      	ldr	r0, [pc, #16]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402bd8:	4410      	add	r0, r2
  402bda:	4b06      	ldr	r3, [pc, #24]	; (402bf4 <vTaskPriorityInherit+0xa8>)
  402bdc:	4798      	blx	r3
  402bde:	bd38      	pop	{r3, r4, r5, pc}
  402be0:	4770      	bx	lr
  402be2:	bf00      	nop
  402be4:	2040c244 	.word	0x2040c244
  402be8:	2040c250 	.word	0x2040c250
  402bec:	00401489 	.word	0x00401489
  402bf0:	2040c2c8 	.word	0x2040c2c8
  402bf4:	0040143d 	.word	0x0040143d

00402bf8 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  402bf8:	2800      	cmp	r0, #0
  402bfa:	d04f      	beq.n	402c9c <xTaskPriorityDisinherit+0xa4>
	{
  402bfc:	b538      	push	{r3, r4, r5, lr}
  402bfe:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402c00:	4a29      	ldr	r2, [pc, #164]	; (402ca8 <xTaskPriorityDisinherit+0xb0>)
  402c02:	6812      	ldr	r2, [r2, #0]
  402c04:	4290      	cmp	r0, r2
  402c06:	d00a      	beq.n	402c1e <xTaskPriorityDisinherit+0x26>
  402c08:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c0c:	b672      	cpsid	i
  402c0e:	f383 8811 	msr	BASEPRI, r3
  402c12:	f3bf 8f6f 	isb	sy
  402c16:	f3bf 8f4f 	dsb	sy
  402c1a:	b662      	cpsie	i
  402c1c:	e7fe      	b.n	402c1c <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  402c1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c20:	b952      	cbnz	r2, 402c38 <xTaskPriorityDisinherit+0x40>
  402c22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c26:	b672      	cpsid	i
  402c28:	f383 8811 	msr	BASEPRI, r3
  402c2c:	f3bf 8f6f 	isb	sy
  402c30:	f3bf 8f4f 	dsb	sy
  402c34:	b662      	cpsie	i
  402c36:	e7fe      	b.n	402c36 <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402c38:	3a01      	subs	r2, #1
  402c3a:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402c3c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  402c40:	4288      	cmp	r0, r1
  402c42:	d02d      	beq.n	402ca0 <xTaskPriorityDisinherit+0xa8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402c44:	2a00      	cmp	r2, #0
  402c46:	d12d      	bne.n	402ca4 <xTaskPriorityDisinherit+0xac>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402c48:	1d25      	adds	r5, r4, #4
  402c4a:	4628      	mov	r0, r5
  402c4c:	4b17      	ldr	r3, [pc, #92]	; (402cac <xTaskPriorityDisinherit+0xb4>)
  402c4e:	4798      	blx	r3
  402c50:	b970      	cbnz	r0, 402c70 <xTaskPriorityDisinherit+0x78>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402c54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402c58:	008b      	lsls	r3, r1, #2
  402c5a:	4915      	ldr	r1, [pc, #84]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c5c:	58cb      	ldr	r3, [r1, r3]
  402c5e:	b93b      	cbnz	r3, 402c70 <xTaskPriorityDisinherit+0x78>
  402c60:	2301      	movs	r3, #1
  402c62:	fa03 f202 	lsl.w	r2, r3, r2
  402c66:	4913      	ldr	r1, [pc, #76]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c68:	680b      	ldr	r3, [r1, #0]
  402c6a:	ea23 0302 	bic.w	r3, r3, r2
  402c6e:	600b      	str	r3, [r1, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c72:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c74:	f1c3 0205 	rsb	r2, r3, #5
  402c78:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402c7a:	2401      	movs	r4, #1
  402c7c:	fa04 f203 	lsl.w	r2, r4, r3
  402c80:	490c      	ldr	r1, [pc, #48]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c82:	6808      	ldr	r0, [r1, #0]
  402c84:	4302      	orrs	r2, r0
  402c86:	600a      	str	r2, [r1, #0]
  402c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402c8c:	009a      	lsls	r2, r3, #2
  402c8e:	4629      	mov	r1, r5
  402c90:	4807      	ldr	r0, [pc, #28]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c92:	4410      	add	r0, r2
  402c94:	4b08      	ldr	r3, [pc, #32]	; (402cb8 <xTaskPriorityDisinherit+0xc0>)
  402c96:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402c98:	4620      	mov	r0, r4
  402c9a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402c9c:	2000      	movs	r0, #0
  402c9e:	4770      	bx	lr
  402ca0:	2000      	movs	r0, #0
  402ca2:	bd38      	pop	{r3, r4, r5, pc}
  402ca4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402ca6:	bd38      	pop	{r3, r4, r5, pc}
  402ca8:	2040c244 	.word	0x2040c244
  402cac:	00401489 	.word	0x00401489
  402cb0:	2040c250 	.word	0x2040c250
  402cb4:	2040c2c8 	.word	0x2040c2c8
  402cb8:	0040143d 	.word	0x0040143d

00402cbc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402cbc:	4b05      	ldr	r3, [pc, #20]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cbe:	681b      	ldr	r3, [r3, #0]
  402cc0:	b123      	cbz	r3, 402ccc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  402cc2:	4b04      	ldr	r3, [pc, #16]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cc4:	681a      	ldr	r2, [r3, #0]
  402cc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402cc8:	3301      	adds	r3, #1
  402cca:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402ccc:	4b01      	ldr	r3, [pc, #4]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cce:	6818      	ldr	r0, [r3, #0]
	}
  402cd0:	4770      	bx	lr
  402cd2:	bf00      	nop
  402cd4:	2040c244 	.word	0x2040c244

00402cd8 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  402cd8:	4b06      	ldr	r3, [pc, #24]	; (402cf4 <prvGetNextExpireTime+0x1c>)
  402cda:	681a      	ldr	r2, [r3, #0]
  402cdc:	6813      	ldr	r3, [r2, #0]
  402cde:	fab3 f383 	clz	r3, r3
  402ce2:	095b      	lsrs	r3, r3, #5
  402ce4:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
  402ce6:	b913      	cbnz	r3, 402cee <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402ce8:	68d3      	ldr	r3, [r2, #12]
  402cea:	6818      	ldr	r0, [r3, #0]
  402cec:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
  402cee:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop
  402cf4:	2040c344 	.word	0x2040c344

00402cf8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402cf8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402cfa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402cfc:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402cfe:	4291      	cmp	r1, r2
  402d00:	d80c      	bhi.n	402d1c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  402d02:	1ad2      	subs	r2, r2, r3
  402d04:	6983      	ldr	r3, [r0, #24]
  402d06:	429a      	cmp	r2, r3
  402d08:	d301      	bcc.n	402d0e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402d0a:	2001      	movs	r0, #1
  402d0c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402d0e:	1d01      	adds	r1, r0, #4
  402d10:	4b0b      	ldr	r3, [pc, #44]	; (402d40 <prvInsertTimerInActiveList+0x48>)
  402d12:	6818      	ldr	r0, [r3, #0]
  402d14:	4b0b      	ldr	r3, [pc, #44]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d16:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d18:	2000      	movs	r0, #0
  402d1a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402d1c:	429a      	cmp	r2, r3
  402d1e:	bf2c      	ite	cs
  402d20:	2200      	movcs	r2, #0
  402d22:	2201      	movcc	r2, #1
  402d24:	4299      	cmp	r1, r3
  402d26:	bf38      	it	cc
  402d28:	2200      	movcc	r2, #0
  402d2a:	b10a      	cbz	r2, 402d30 <prvInsertTimerInActiveList+0x38>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402d2c:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402d2e:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402d30:	1d01      	adds	r1, r0, #4
  402d32:	4b05      	ldr	r3, [pc, #20]	; (402d48 <prvInsertTimerInActiveList+0x50>)
  402d34:	6818      	ldr	r0, [r3, #0]
  402d36:	4b03      	ldr	r3, [pc, #12]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d38:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402d3a:	2000      	movs	r0, #0
  402d3c:	bd08      	pop	{r3, pc}
  402d3e:	bf00      	nop
  402d40:	2040c348 	.word	0x2040c348
  402d44:	00401455 	.word	0x00401455
  402d48:	2040c344 	.word	0x2040c344

00402d4c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402d4c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402d4e:	4b15      	ldr	r3, [pc, #84]	; (402da4 <prvCheckForValidListAndQueue+0x58>)
  402d50:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402d52:	4b15      	ldr	r3, [pc, #84]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d54:	681b      	ldr	r3, [r3, #0]
  402d56:	b113      	cbz	r3, 402d5e <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402d58:	4b14      	ldr	r3, [pc, #80]	; (402dac <prvCheckForValidListAndQueue+0x60>)
  402d5a:	4798      	blx	r3
  402d5c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402d5e:	4d14      	ldr	r5, [pc, #80]	; (402db0 <prvCheckForValidListAndQueue+0x64>)
  402d60:	4628      	mov	r0, r5
  402d62:	4e14      	ldr	r6, [pc, #80]	; (402db4 <prvCheckForValidListAndQueue+0x68>)
  402d64:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402d66:	4c14      	ldr	r4, [pc, #80]	; (402db8 <prvCheckForValidListAndQueue+0x6c>)
  402d68:	4620      	mov	r0, r4
  402d6a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402d6c:	4b13      	ldr	r3, [pc, #76]	; (402dbc <prvCheckForValidListAndQueue+0x70>)
  402d6e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402d70:	4b13      	ldr	r3, [pc, #76]	; (402dc0 <prvCheckForValidListAndQueue+0x74>)
  402d72:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402d74:	2200      	movs	r2, #0
  402d76:	2110      	movs	r1, #16
  402d78:	2005      	movs	r0, #5
  402d7a:	4b12      	ldr	r3, [pc, #72]	; (402dc4 <prvCheckForValidListAndQueue+0x78>)
  402d7c:	4798      	blx	r3
  402d7e:	4b0a      	ldr	r3, [pc, #40]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d80:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  402d82:	b118      	cbz	r0, 402d8c <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402d84:	4910      	ldr	r1, [pc, #64]	; (402dc8 <prvCheckForValidListAndQueue+0x7c>)
  402d86:	4b11      	ldr	r3, [pc, #68]	; (402dcc <prvCheckForValidListAndQueue+0x80>)
  402d88:	4798      	blx	r3
  402d8a:	e7e5      	b.n	402d58 <prvCheckForValidListAndQueue+0xc>
  402d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d90:	b672      	cpsid	i
  402d92:	f383 8811 	msr	BASEPRI, r3
  402d96:	f3bf 8f6f 	isb	sy
  402d9a:	f3bf 8f4f 	dsb	sy
  402d9e:	b662      	cpsie	i
  402da0:	e7fe      	b.n	402da0 <prvCheckForValidListAndQueue+0x54>
  402da2:	bf00      	nop
  402da4:	0040156d 	.word	0x0040156d
  402da8:	2040c378 	.word	0x2040c378
  402dac:	004015b9 	.word	0x004015b9
  402db0:	2040c34c 	.word	0x2040c34c
  402db4:	00401421 	.word	0x00401421
  402db8:	2040c360 	.word	0x2040c360
  402dbc:	2040c344 	.word	0x2040c344
  402dc0:	2040c348 	.word	0x2040c348
  402dc4:	00401af9 	.word	0x00401af9
  402dc8:	004235e0 	.word	0x004235e0
  402dcc:	00402041 	.word	0x00402041

00402dd0 <xTimerCreateTimerTask>:
{
  402dd0:	b510      	push	{r4, lr}
  402dd2:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402dd4:	4b10      	ldr	r3, [pc, #64]	; (402e18 <xTimerCreateTimerTask+0x48>)
  402dd6:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402dd8:	4b10      	ldr	r3, [pc, #64]	; (402e1c <xTimerCreateTimerTask+0x4c>)
  402dda:	681b      	ldr	r3, [r3, #0]
  402ddc:	b1bb      	cbz	r3, 402e0e <xTimerCreateTimerTask+0x3e>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402dde:	2300      	movs	r3, #0
  402de0:	9303      	str	r3, [sp, #12]
  402de2:	9302      	str	r3, [sp, #8]
  402de4:	9301      	str	r3, [sp, #4]
  402de6:	2204      	movs	r2, #4
  402de8:	9200      	str	r2, [sp, #0]
  402dea:	f44f 7282 	mov.w	r2, #260	; 0x104
  402dee:	490c      	ldr	r1, [pc, #48]	; (402e20 <xTimerCreateTimerTask+0x50>)
  402df0:	480c      	ldr	r0, [pc, #48]	; (402e24 <xTimerCreateTimerTask+0x54>)
  402df2:	4c0d      	ldr	r4, [pc, #52]	; (402e28 <xTimerCreateTimerTask+0x58>)
  402df4:	47a0      	blx	r4
	configASSERT( xReturn );
  402df6:	b960      	cbnz	r0, 402e12 <xTimerCreateTimerTask+0x42>
  402df8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dfc:	b672      	cpsid	i
  402dfe:	f383 8811 	msr	BASEPRI, r3
  402e02:	f3bf 8f6f 	isb	sy
  402e06:	f3bf 8f4f 	dsb	sy
  402e0a:	b662      	cpsie	i
  402e0c:	e7fe      	b.n	402e0c <xTimerCreateTimerTask+0x3c>
BaseType_t xReturn = pdFAIL;
  402e0e:	2000      	movs	r0, #0
  402e10:	e7f1      	b.n	402df6 <xTimerCreateTimerTask+0x26>
}
  402e12:	b004      	add	sp, #16
  402e14:	bd10      	pop	{r4, pc}
  402e16:	bf00      	nop
  402e18:	00402d4d 	.word	0x00402d4d
  402e1c:	2040c378 	.word	0x2040c378
  402e20:	004235e8 	.word	0x004235e8
  402e24:	004031d5 	.word	0x004031d5
  402e28:	0040225d 	.word	0x0040225d

00402e2c <xTimerCreate>:
{
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
  402e30:	460d      	mov	r5, r1
  402e32:	b1f9      	cbz	r1, 402e74 <xTimerCreate+0x48>
  402e34:	4680      	mov	r8, r0
  402e36:	4617      	mov	r7, r2
  402e38:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
  402e3a:	202c      	movs	r0, #44	; 0x2c
  402e3c:	4b10      	ldr	r3, [pc, #64]	; (402e80 <xTimerCreate+0x54>)
  402e3e:	4798      	blx	r3
		if( pxNewTimer != NULL )
  402e40:	4604      	mov	r4, r0
  402e42:	b158      	cbz	r0, 402e5c <xTimerCreate+0x30>
			prvCheckForValidListAndQueue();
  402e44:	4b0f      	ldr	r3, [pc, #60]	; (402e84 <xTimerCreate+0x58>)
  402e46:	4798      	blx	r3
			pxNewTimer->pcTimerName = pcTimerName;
  402e48:	f8c4 8000 	str.w	r8, [r4]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
  402e4c:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
  402e4e:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
  402e50:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
  402e52:	9b06      	ldr	r3, [sp, #24]
  402e54:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
  402e56:	1d20      	adds	r0, r4, #4
  402e58:	4b0b      	ldr	r3, [pc, #44]	; (402e88 <xTimerCreate+0x5c>)
  402e5a:	4798      	blx	r3
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
  402e5c:	b965      	cbnz	r5, 402e78 <xTimerCreate+0x4c>
  402e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e62:	b672      	cpsid	i
  402e64:	f383 8811 	msr	BASEPRI, r3
  402e68:	f3bf 8f6f 	isb	sy
  402e6c:	f3bf 8f4f 	dsb	sy
  402e70:	b662      	cpsie	i
  402e72:	e7fe      	b.n	402e72 <xTimerCreate+0x46>
		pxNewTimer = NULL;
  402e74:	2400      	movs	r4, #0
  402e76:	e7f1      	b.n	402e5c <xTimerCreate+0x30>
}
  402e78:	4620      	mov	r0, r4
  402e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e7e:	bf00      	nop
  402e80:	004017bd 	.word	0x004017bd
  402e84:	00402d4d 	.word	0x00402d4d
  402e88:	00401437 	.word	0x00401437

00402e8c <xTimerGenericCommand>:
	configASSERT( xTimer );
  402e8c:	b1c8      	cbz	r0, 402ec2 <xTimerGenericCommand+0x36>
{
  402e8e:	b530      	push	{r4, r5, lr}
  402e90:	b085      	sub	sp, #20
  402e92:	4615      	mov	r5, r2
  402e94:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402e96:	4a18      	ldr	r2, [pc, #96]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402e98:	6810      	ldr	r0, [r2, #0]
  402e9a:	2800      	cmp	r0, #0
  402e9c:	d02a      	beq.n	402ef4 <xTimerGenericCommand+0x68>
  402e9e:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402ea0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402ea2:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402ea4:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402ea6:	2905      	cmp	r1, #5
  402ea8:	dc1e      	bgt.n	402ee8 <xTimerGenericCommand+0x5c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402eaa:	4b14      	ldr	r3, [pc, #80]	; (402efc <xTimerGenericCommand+0x70>)
  402eac:	4798      	blx	r3
  402eae:	2802      	cmp	r0, #2
  402eb0:	d012      	beq.n	402ed8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402eb2:	2300      	movs	r3, #0
  402eb4:	461a      	mov	r2, r3
  402eb6:	4669      	mov	r1, sp
  402eb8:	480f      	ldr	r0, [pc, #60]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402eba:	6800      	ldr	r0, [r0, #0]
  402ebc:	4c10      	ldr	r4, [pc, #64]	; (402f00 <xTimerGenericCommand+0x74>)
  402ebe:	47a0      	blx	r4
  402ec0:	e016      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ec6:	b672      	cpsid	i
  402ec8:	f383 8811 	msr	BASEPRI, r3
  402ecc:	f3bf 8f6f 	isb	sy
  402ed0:	f3bf 8f4f 	dsb	sy
  402ed4:	b662      	cpsie	i
  402ed6:	e7fe      	b.n	402ed6 <xTimerGenericCommand+0x4a>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402ed8:	2300      	movs	r3, #0
  402eda:	9a08      	ldr	r2, [sp, #32]
  402edc:	4669      	mov	r1, sp
  402ede:	4806      	ldr	r0, [pc, #24]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402ee0:	6800      	ldr	r0, [r0, #0]
  402ee2:	4c07      	ldr	r4, [pc, #28]	; (402f00 <xTimerGenericCommand+0x74>)
  402ee4:	47a0      	blx	r4
  402ee6:	e003      	b.n	402ef0 <xTimerGenericCommand+0x64>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402ee8:	2300      	movs	r3, #0
  402eea:	4669      	mov	r1, sp
  402eec:	4c05      	ldr	r4, [pc, #20]	; (402f04 <xTimerGenericCommand+0x78>)
  402eee:	47a0      	blx	r4
}
  402ef0:	b005      	add	sp, #20
  402ef2:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
  402ef4:	2000      	movs	r0, #0
	return xReturn;
  402ef6:	e7fb      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ef8:	2040c378 	.word	0x2040c378
  402efc:	00402b2d 	.word	0x00402b2d
  402f00:	00401b79 	.word	0x00401b79
  402f04:	00401d5d 	.word	0x00401d5d

00402f08 <prvSwitchTimerLists>:
{
  402f08:	b570      	push	{r4, r5, r6, lr}
  402f0a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402f0c:	4b1c      	ldr	r3, [pc, #112]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f0e:	681b      	ldr	r3, [r3, #0]
  402f10:	681a      	ldr	r2, [r3, #0]
  402f12:	2a00      	cmp	r2, #0
  402f14:	d02c      	beq.n	402f70 <prvSwitchTimerLists+0x68>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f16:	68db      	ldr	r3, [r3, #12]
  402f18:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402f1a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402f1c:	1d25      	adds	r5, r4, #4
  402f1e:	4628      	mov	r0, r5
  402f20:	4b18      	ldr	r3, [pc, #96]	; (402f84 <prvSwitchTimerLists+0x7c>)
  402f22:	4798      	blx	r3
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f26:	4620      	mov	r0, r4
  402f28:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402f2a:	69e3      	ldr	r3, [r4, #28]
  402f2c:	2b01      	cmp	r3, #1
  402f2e:	d1ed      	bne.n	402f0c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402f30:	69a3      	ldr	r3, [r4, #24]
  402f32:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
  402f34:	429e      	cmp	r6, r3
  402f36:	d207      	bcs.n	402f48 <prvSwitchTimerLists+0x40>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402f38:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402f3a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402f3c:	4629      	mov	r1, r5
  402f3e:	4b10      	ldr	r3, [pc, #64]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f40:	6818      	ldr	r0, [r3, #0]
  402f42:	4b11      	ldr	r3, [pc, #68]	; (402f88 <prvSwitchTimerLists+0x80>)
  402f44:	4798      	blx	r3
  402f46:	e7e1      	b.n	402f0c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402f48:	2100      	movs	r1, #0
  402f4a:	9100      	str	r1, [sp, #0]
  402f4c:	460b      	mov	r3, r1
  402f4e:	4632      	mov	r2, r6
  402f50:	4620      	mov	r0, r4
  402f52:	4c0e      	ldr	r4, [pc, #56]	; (402f8c <prvSwitchTimerLists+0x84>)
  402f54:	47a0      	blx	r4
				configASSERT( xResult );
  402f56:	2800      	cmp	r0, #0
  402f58:	d1d8      	bne.n	402f0c <prvSwitchTimerLists+0x4>
  402f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f5e:	b672      	cpsid	i
  402f60:	f383 8811 	msr	BASEPRI, r3
  402f64:	f3bf 8f6f 	isb	sy
  402f68:	f3bf 8f4f 	dsb	sy
  402f6c:	b662      	cpsie	i
  402f6e:	e7fe      	b.n	402f6e <prvSwitchTimerLists+0x66>
	pxCurrentTimerList = pxOverflowTimerList;
  402f70:	4a07      	ldr	r2, [pc, #28]	; (402f90 <prvSwitchTimerLists+0x88>)
  402f72:	6810      	ldr	r0, [r2, #0]
  402f74:	4902      	ldr	r1, [pc, #8]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f76:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402f78:	6013      	str	r3, [r2, #0]
}
  402f7a:	b002      	add	sp, #8
  402f7c:	bd70      	pop	{r4, r5, r6, pc}
  402f7e:	bf00      	nop
  402f80:	2040c344 	.word	0x2040c344
  402f84:	00401489 	.word	0x00401489
  402f88:	00401455 	.word	0x00401455
  402f8c:	00402e8d 	.word	0x00402e8d
  402f90:	2040c348 	.word	0x2040c348

00402f94 <prvSampleTimeNow>:
{
  402f94:	b538      	push	{r3, r4, r5, lr}
  402f96:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
  402f98:	4b08      	ldr	r3, [pc, #32]	; (402fbc <prvSampleTimeNow+0x28>)
  402f9a:	4798      	blx	r3
  402f9c:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
  402f9e:	4b08      	ldr	r3, [pc, #32]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fa0:	681b      	ldr	r3, [r3, #0]
  402fa2:	4298      	cmp	r0, r3
  402fa4:	d305      	bcc.n	402fb2 <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
  402fa6:	2300      	movs	r3, #0
  402fa8:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
  402faa:	4b05      	ldr	r3, [pc, #20]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fac:	601c      	str	r4, [r3, #0]
}
  402fae:	4620      	mov	r0, r4
  402fb0:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
  402fb2:	4b04      	ldr	r3, [pc, #16]	; (402fc4 <prvSampleTimeNow+0x30>)
  402fb4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
  402fb6:	2301      	movs	r3, #1
  402fb8:	602b      	str	r3, [r5, #0]
  402fba:	e7f6      	b.n	402faa <prvSampleTimeNow+0x16>
  402fbc:	00402455 	.word	0x00402455
  402fc0:	2040c374 	.word	0x2040c374
  402fc4:	00402f09 	.word	0x00402f09

00402fc8 <prvProcessExpiredTimer>:
{
  402fc8:	b570      	push	{r4, r5, r6, lr}
  402fca:	b082      	sub	sp, #8
  402fcc:	4605      	mov	r5, r0
  402fce:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fd0:	4b15      	ldr	r3, [pc, #84]	; (403028 <prvProcessExpiredTimer+0x60>)
  402fd2:	681b      	ldr	r3, [r3, #0]
  402fd4:	68db      	ldr	r3, [r3, #12]
  402fd6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fd8:	1d20      	adds	r0, r4, #4
  402fda:	4b14      	ldr	r3, [pc, #80]	; (40302c <prvProcessExpiredTimer+0x64>)
  402fdc:	4798      	blx	r3
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fde:	69e3      	ldr	r3, [r4, #28]
  402fe0:	2b01      	cmp	r3, #1
  402fe2:	d004      	beq.n	402fee <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402fe6:	4620      	mov	r0, r4
  402fe8:	4798      	blx	r3
}
  402fea:	b002      	add	sp, #8
  402fec:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402fee:	69a1      	ldr	r1, [r4, #24]
  402ff0:	462b      	mov	r3, r5
  402ff2:	4632      	mov	r2, r6
  402ff4:	4429      	add	r1, r5
  402ff6:	4620      	mov	r0, r4
  402ff8:	4e0d      	ldr	r6, [pc, #52]	; (403030 <prvProcessExpiredTimer+0x68>)
  402ffa:	47b0      	blx	r6
  402ffc:	2801      	cmp	r0, #1
  402ffe:	d1f1      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  403000:	2100      	movs	r1, #0
  403002:	9100      	str	r1, [sp, #0]
  403004:	460b      	mov	r3, r1
  403006:	462a      	mov	r2, r5
  403008:	4620      	mov	r0, r4
  40300a:	4d0a      	ldr	r5, [pc, #40]	; (403034 <prvProcessExpiredTimer+0x6c>)
  40300c:	47a8      	blx	r5
			configASSERT( xResult );
  40300e:	2800      	cmp	r0, #0
  403010:	d1e8      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
  403012:	f04f 0380 	mov.w	r3, #128	; 0x80
  403016:	b672      	cpsid	i
  403018:	f383 8811 	msr	BASEPRI, r3
  40301c:	f3bf 8f6f 	isb	sy
  403020:	f3bf 8f4f 	dsb	sy
  403024:	b662      	cpsie	i
  403026:	e7fe      	b.n	403026 <prvProcessExpiredTimer+0x5e>
  403028:	2040c344 	.word	0x2040c344
  40302c:	00401489 	.word	0x00401489
  403030:	00402cf9 	.word	0x00402cf9
  403034:	00402e8d 	.word	0x00402e8d

00403038 <prvProcessTimerOrBlockTask>:
{
  403038:	b570      	push	{r4, r5, r6, lr}
  40303a:	b082      	sub	sp, #8
  40303c:	4606      	mov	r6, r0
  40303e:	460c      	mov	r4, r1
	vTaskSuspendAll();
  403040:	4b17      	ldr	r3, [pc, #92]	; (4030a0 <prvProcessTimerOrBlockTask+0x68>)
  403042:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403044:	a801      	add	r0, sp, #4
  403046:	4b17      	ldr	r3, [pc, #92]	; (4030a4 <prvProcessTimerOrBlockTask+0x6c>)
  403048:	4798      	blx	r3
		if( xTimerListsWereSwitched == pdFALSE )
  40304a:	9b01      	ldr	r3, [sp, #4]
  40304c:	bb23      	cbnz	r3, 403098 <prvProcessTimerOrBlockTask+0x60>
  40304e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403050:	42b0      	cmp	r0, r6
  403052:	bf28      	it	cs
  403054:	2c00      	cmpcs	r4, #0
  403056:	d018      	beq.n	40308a <prvProcessTimerOrBlockTask+0x52>
				if( xListWasEmpty != pdFALSE )
  403058:	b12c      	cbz	r4, 403066 <prvProcessTimerOrBlockTask+0x2e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  40305a:	4b13      	ldr	r3, [pc, #76]	; (4030a8 <prvProcessTimerOrBlockTask+0x70>)
  40305c:	681b      	ldr	r3, [r3, #0]
  40305e:	681c      	ldr	r4, [r3, #0]
  403060:	fab4 f484 	clz	r4, r4
  403064:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  403066:	4622      	mov	r2, r4
  403068:	1b71      	subs	r1, r6, r5
  40306a:	4b10      	ldr	r3, [pc, #64]	; (4030ac <prvProcessTimerOrBlockTask+0x74>)
  40306c:	6818      	ldr	r0, [r3, #0]
  40306e:	4b10      	ldr	r3, [pc, #64]	; (4030b0 <prvProcessTimerOrBlockTask+0x78>)
  403070:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403072:	4b10      	ldr	r3, [pc, #64]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  403074:	4798      	blx	r3
  403076:	b988      	cbnz	r0, 40309c <prvProcessTimerOrBlockTask+0x64>
					portYIELD_WITHIN_API();
  403078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40307c:	4b0e      	ldr	r3, [pc, #56]	; (4030b8 <prvProcessTimerOrBlockTask+0x80>)
  40307e:	601a      	str	r2, [r3, #0]
  403080:	f3bf 8f4f 	dsb	sy
  403084:	f3bf 8f6f 	isb	sy
  403088:	e008      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
				( void ) xTaskResumeAll();
  40308a:	4b0a      	ldr	r3, [pc, #40]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40308c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
  40308e:	4629      	mov	r1, r5
  403090:	4630      	mov	r0, r6
  403092:	4b0a      	ldr	r3, [pc, #40]	; (4030bc <prvProcessTimerOrBlockTask+0x84>)
  403094:	4798      	blx	r3
  403096:	e001      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
			( void ) xTaskResumeAll();
  403098:	4b06      	ldr	r3, [pc, #24]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40309a:	4798      	blx	r3
}
  40309c:	b002      	add	sp, #8
  40309e:	bd70      	pop	{r4, r5, r6, pc}
  4030a0:	00402445 	.word	0x00402445
  4030a4:	00402f95 	.word	0x00402f95
  4030a8:	2040c348 	.word	0x2040c348
  4030ac:	2040c378 	.word	0x2040c378
  4030b0:	00402069 	.word	0x00402069
  4030b4:	004025a5 	.word	0x004025a5
  4030b8:	e000ed04 	.word	0xe000ed04
  4030bc:	00402fc9 	.word	0x00402fc9

004030c0 <prvProcessReceivedCommands>:
{
  4030c0:	b530      	push	{r4, r5, lr}
  4030c2:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030c4:	e002      	b.n	4030cc <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4030c6:	9b04      	ldr	r3, [sp, #16]
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	da10      	bge.n	4030ee <prvProcessReceivedCommands+0x2e>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030cc:	2300      	movs	r3, #0
  4030ce:	461a      	mov	r2, r3
  4030d0:	a904      	add	r1, sp, #16
  4030d2:	4839      	ldr	r0, [pc, #228]	; (4031b8 <prvProcessReceivedCommands+0xf8>)
  4030d4:	6800      	ldr	r0, [r0, #0]
  4030d6:	4c39      	ldr	r4, [pc, #228]	; (4031bc <prvProcessReceivedCommands+0xfc>)
  4030d8:	47a0      	blx	r4
  4030da:	2800      	cmp	r0, #0
  4030dc:	d069      	beq.n	4031b2 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  4030de:	9b04      	ldr	r3, [sp, #16]
  4030e0:	2b00      	cmp	r3, #0
  4030e2:	daf0      	bge.n	4030c6 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4030e4:	9907      	ldr	r1, [sp, #28]
  4030e6:	9806      	ldr	r0, [sp, #24]
  4030e8:	9b05      	ldr	r3, [sp, #20]
  4030ea:	4798      	blx	r3
  4030ec:	e7eb      	b.n	4030c6 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  4030ee:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  4030f0:	6963      	ldr	r3, [r4, #20]
  4030f2:	b113      	cbz	r3, 4030fa <prvProcessReceivedCommands+0x3a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4030f4:	1d20      	adds	r0, r4, #4
  4030f6:	4b32      	ldr	r3, [pc, #200]	; (4031c0 <prvProcessReceivedCommands+0x100>)
  4030f8:	4798      	blx	r3
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4030fa:	a803      	add	r0, sp, #12
  4030fc:	4b31      	ldr	r3, [pc, #196]	; (4031c4 <prvProcessReceivedCommands+0x104>)
  4030fe:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403100:	9b04      	ldr	r3, [sp, #16]
  403102:	2b09      	cmp	r3, #9
  403104:	d8e2      	bhi.n	4030cc <prvProcessReceivedCommands+0xc>
  403106:	a201      	add	r2, pc, #4	; (adr r2, 40310c <prvProcessReceivedCommands+0x4c>)
  403108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40310c:	00403135 	.word	0x00403135
  403110:	00403135 	.word	0x00403135
  403114:	00403135 	.word	0x00403135
  403118:	004030cd 	.word	0x004030cd
  40311c:	00403181 	.word	0x00403181
  403120:	004031ab 	.word	0x004031ab
  403124:	00403135 	.word	0x00403135
  403128:	00403135 	.word	0x00403135
  40312c:	004030cd 	.word	0x004030cd
  403130:	00403181 	.word	0x00403181
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403134:	9905      	ldr	r1, [sp, #20]
  403136:	69a5      	ldr	r5, [r4, #24]
  403138:	460b      	mov	r3, r1
  40313a:	4602      	mov	r2, r0
  40313c:	4429      	add	r1, r5
  40313e:	4620      	mov	r0, r4
  403140:	4d21      	ldr	r5, [pc, #132]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403142:	47a8      	blx	r5
  403144:	2801      	cmp	r0, #1
  403146:	d1c1      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403148:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40314a:	4620      	mov	r0, r4
  40314c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40314e:	69e3      	ldr	r3, [r4, #28]
  403150:	2b01      	cmp	r3, #1
  403152:	d1bb      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  403154:	69a2      	ldr	r2, [r4, #24]
  403156:	2100      	movs	r1, #0
  403158:	9100      	str	r1, [sp, #0]
  40315a:	460b      	mov	r3, r1
  40315c:	9805      	ldr	r0, [sp, #20]
  40315e:	4402      	add	r2, r0
  403160:	4620      	mov	r0, r4
  403162:	4c1a      	ldr	r4, [pc, #104]	; (4031cc <prvProcessReceivedCommands+0x10c>)
  403164:	47a0      	blx	r4
							configASSERT( xResult );
  403166:	2800      	cmp	r0, #0
  403168:	d1b0      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
  40316a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40316e:	b672      	cpsid	i
  403170:	f383 8811 	msr	BASEPRI, r3
  403174:	f3bf 8f6f 	isb	sy
  403178:	f3bf 8f4f 	dsb	sy
  40317c:	b662      	cpsie	i
  40317e:	e7fe      	b.n	40317e <prvProcessReceivedCommands+0xbe>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  403180:	9905      	ldr	r1, [sp, #20]
  403182:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  403184:	b131      	cbz	r1, 403194 <prvProcessReceivedCommands+0xd4>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  403186:	4603      	mov	r3, r0
  403188:	4602      	mov	r2, r0
  40318a:	4401      	add	r1, r0
  40318c:	4620      	mov	r0, r4
  40318e:	4c0e      	ldr	r4, [pc, #56]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403190:	47a0      	blx	r4
					break;
  403192:	e79b      	b.n	4030cc <prvProcessReceivedCommands+0xc>
  403194:	f04f 0380 	mov.w	r3, #128	; 0x80
  403198:	b672      	cpsid	i
  40319a:	f383 8811 	msr	BASEPRI, r3
  40319e:	f3bf 8f6f 	isb	sy
  4031a2:	f3bf 8f4f 	dsb	sy
  4031a6:	b662      	cpsie	i
  4031a8:	e7fe      	b.n	4031a8 <prvProcessReceivedCommands+0xe8>
					vPortFree( pxTimer );
  4031aa:	4620      	mov	r0, r4
  4031ac:	4b08      	ldr	r3, [pc, #32]	; (4031d0 <prvProcessReceivedCommands+0x110>)
  4031ae:	4798      	blx	r3
					break;
  4031b0:	e78c      	b.n	4030cc <prvProcessReceivedCommands+0xc>
}
  4031b2:	b009      	add	sp, #36	; 0x24
  4031b4:	bd30      	pop	{r4, r5, pc}
  4031b6:	bf00      	nop
  4031b8:	2040c378 	.word	0x2040c378
  4031bc:	00401e6d 	.word	0x00401e6d
  4031c0:	00401489 	.word	0x00401489
  4031c4:	00402f95 	.word	0x00402f95
  4031c8:	00402cf9 	.word	0x00402cf9
  4031cc:	00402e8d 	.word	0x00402e8d
  4031d0:	00401831 	.word	0x00401831

004031d4 <prvTimerTask>:
{
  4031d4:	b500      	push	{lr}
  4031d6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
  4031d8:	a801      	add	r0, sp, #4
  4031da:	4b04      	ldr	r3, [pc, #16]	; (4031ec <prvTimerTask+0x18>)
  4031dc:	4798      	blx	r3
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
  4031de:	9901      	ldr	r1, [sp, #4]
  4031e0:	4b03      	ldr	r3, [pc, #12]	; (4031f0 <prvTimerTask+0x1c>)
  4031e2:	4798      	blx	r3
		prvProcessReceivedCommands();
  4031e4:	4b03      	ldr	r3, [pc, #12]	; (4031f4 <prvTimerTask+0x20>)
  4031e6:	4798      	blx	r3
  4031e8:	e7f6      	b.n	4031d8 <prvTimerTask+0x4>
  4031ea:	bf00      	nop
  4031ec:	00402cd9 	.word	0x00402cd9
  4031f0:	00403039 	.word	0x00403039
  4031f4:	004030c1 	.word	0x004030c1

004031f8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  4031f8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4031fa:	4603      	mov	r3, r0
  4031fc:	b110      	cbz	r0, 403204 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  4031fe:	b12b      	cbz	r3, 40320c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403200:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403202:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403204:	4b02      	ldr	r3, [pc, #8]	; (403210 <lv_disp_get_scr_act+0x18>)
  403206:	4798      	blx	r3
  403208:	4603      	mov	r3, r0
  40320a:	e7f8      	b.n	4031fe <lv_disp_get_scr_act+0x6>
        return NULL;
  40320c:	2000      	movs	r0, #0
}
  40320e:	bd08      	pop	{r3, pc}
  403210:	004143f5 	.word	0x004143f5

00403214 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403214:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403216:	4603      	mov	r3, r0
  403218:	b110      	cbz	r0, 403220 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40321a:	b12b      	cbz	r3, 403228 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40321c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40321e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403220:	4b02      	ldr	r3, [pc, #8]	; (40322c <lv_disp_get_scr_prev+0x18>)
  403222:	4798      	blx	r3
  403224:	4603      	mov	r3, r0
  403226:	e7f8      	b.n	40321a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403228:	2000      	movs	r0, #0
}
  40322a:	bd08      	pop	{r3, pc}
  40322c:	004143f5 	.word	0x004143f5

00403230 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403230:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403232:	4603      	mov	r3, r0
  403234:	b110      	cbz	r0, 40323c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403236:	b12b      	cbz	r3, 403244 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403238:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40323a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40323c:	4b02      	ldr	r3, [pc, #8]	; (403248 <lv_disp_get_layer_top+0x18>)
  40323e:	4798      	blx	r3
  403240:	4603      	mov	r3, r0
  403242:	e7f8      	b.n	403236 <lv_disp_get_layer_top+0x6>
        return NULL;
  403244:	2000      	movs	r0, #0
}
  403246:	bd08      	pop	{r3, pc}
  403248:	004143f5 	.word	0x004143f5

0040324c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  40324c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40324e:	4603      	mov	r3, r0
  403250:	b110      	cbz	r0, 403258 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  403252:	b12b      	cbz	r3, 403260 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  403254:	6d58      	ldr	r0, [r3, #84]	; 0x54
  403256:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403258:	4b02      	ldr	r3, [pc, #8]	; (403264 <lv_disp_get_layer_sys+0x18>)
  40325a:	4798      	blx	r3
  40325c:	4603      	mov	r3, r0
  40325e:	e7f8      	b.n	403252 <lv_disp_get_layer_sys+0x6>
        return NULL;
  403260:	2000      	movs	r0, #0
}
  403262:	bd08      	pop	{r3, pc}
  403264:	004143f5 	.word	0x004143f5

00403268 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  403268:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  40326a:	2400      	movs	r4, #0
    while(i != NULL) {
  40326c:	e001      	b.n	403272 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  40326e:	4b07      	ldr	r3, [pc, #28]	; (40328c <obj_to_foreground+0x24>)
  403270:	4798      	blx	r3
    while(i != NULL) {
  403272:	b130      	cbz	r0, 403282 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  403274:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403278:	f013 0f20 	tst.w	r3, #32
  40327c:	d0f7      	beq.n	40326e <obj_to_foreground+0x6>
  40327e:	4604      	mov	r4, r0
  403280:	e7f5      	b.n	40326e <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  403282:	b114      	cbz	r4, 40328a <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  403284:	4620      	mov	r0, r4
  403286:	4b02      	ldr	r3, [pc, #8]	; (403290 <obj_to_foreground+0x28>)
  403288:	4798      	blx	r3
  40328a:	bd10      	pop	{r4, pc}
  40328c:	00405449 	.word	0x00405449
  403290:	00405a45 	.word	0x00405a45

00403294 <focus_next_core>:
{
  403294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  403298:	7d03      	ldrb	r3, [r0, #20]
  40329a:	f013 0f01 	tst.w	r3, #1
  40329e:	d15f      	bne.n	403360 <focus_next_core+0xcc>
  4032a0:	4690      	mov	r8, r2
  4032a2:	4689      	mov	r9, r1
  4032a4:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  4032a6:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  4032a8:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  4032aa:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  4032ac:	2c00      	cmp	r4, #0
  4032ae:	d042      	beq.n	403336 <focus_next_core+0xa2>
  4032b0:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  4032b2:	2d00      	cmp	r5, #0
  4032b4:	d04b      	beq.n	40334e <focus_next_core+0xba>
        if(can_move) {
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d14c      	bne.n	403354 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  4032ba:	2c00      	cmp	r4, #0
  4032bc:	d0f6      	beq.n	4032ac <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  4032be:	2100      	movs	r1, #0
  4032c0:	6820      	ldr	r0, [r4, #0]
  4032c2:	4b28      	ldr	r3, [pc, #160]	; (403364 <focus_next_core+0xd0>)
  4032c4:	4798      	blx	r3
  4032c6:	f010 0f20 	tst.w	r0, #32
  4032ca:	d1ef      	bne.n	4032ac <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  4032cc:	6820      	ldr	r0, [r4, #0]
  4032ce:	4b26      	ldr	r3, [pc, #152]	; (403368 <focus_next_core+0xd4>)
  4032d0:	4798      	blx	r3
  4032d2:	2800      	cmp	r0, #0
  4032d4:	d1ea      	bne.n	4032ac <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  4032d6:	68f3      	ldr	r3, [r6, #12]
  4032d8:	429c      	cmp	r4, r3
  4032da:	d041      	beq.n	403360 <focus_next_core+0xcc>
    if(group->obj_focus) {
  4032dc:	b183      	cbz	r3, 403300 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4032de:	6818      	ldr	r0, [r3, #0]
  4032e0:	69c3      	ldr	r3, [r0, #28]
  4032e2:	2200      	movs	r2, #0
  4032e4:	2117      	movs	r1, #23
  4032e6:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  4032e8:	68f3      	ldr	r3, [r6, #12]
  4032ea:	2200      	movs	r2, #0
  4032ec:	210e      	movs	r1, #14
  4032ee:	6818      	ldr	r0, [r3, #0]
  4032f0:	4b1e      	ldr	r3, [pc, #120]	; (40336c <focus_next_core+0xd8>)
  4032f2:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4032f4:	2801      	cmp	r0, #1
  4032f6:	d133      	bne.n	403360 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  4032f8:	68f3      	ldr	r3, [r6, #12]
  4032fa:	6818      	ldr	r0, [r3, #0]
  4032fc:	4b1c      	ldr	r3, [pc, #112]	; (403370 <focus_next_core+0xdc>)
  4032fe:	4798      	blx	r3
    group->obj_focus = obj_next;
  403300:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403302:	6820      	ldr	r0, [r4, #0]
  403304:	69c3      	ldr	r3, [r0, #28]
  403306:	2200      	movs	r2, #0
  403308:	2116      	movs	r1, #22
  40330a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40330c:	68f3      	ldr	r3, [r6, #12]
  40330e:	2200      	movs	r2, #0
  403310:	210d      	movs	r1, #13
  403312:	6818      	ldr	r0, [r3, #0]
  403314:	4b15      	ldr	r3, [pc, #84]	; (40336c <focus_next_core+0xd8>)
  403316:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403318:	2801      	cmp	r0, #1
  40331a:	d121      	bne.n	403360 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40331c:	68f3      	ldr	r3, [r6, #12]
  40331e:	6818      	ldr	r0, [r3, #0]
  403320:	4b14      	ldr	r3, [pc, #80]	; (403374 <focus_next_core+0xe0>)
  403322:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403324:	68f3      	ldr	r3, [r6, #12]
  403326:	6818      	ldr	r0, [r3, #0]
  403328:	4b11      	ldr	r3, [pc, #68]	; (403370 <focus_next_core+0xdc>)
  40332a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40332c:	6933      	ldr	r3, [r6, #16]
  40332e:	b1bb      	cbz	r3, 403360 <focus_next_core+0xcc>
  403330:	4630      	mov	r0, r6
  403332:	4798      	blx	r3
  403334:	e014      	b.n	403360 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403336:	7d33      	ldrb	r3, [r6, #20]
  403338:	f013 0f10 	tst.w	r3, #16
  40333c:	d100      	bne.n	403340 <focus_next_core+0xac>
  40333e:	b97d      	cbnz	r5, 403360 <focus_next_core+0xcc>
                if(!can_begin) return;
  403340:	b177      	cbz	r7, 403360 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  403342:	4630      	mov	r0, r6
  403344:	47c8      	blx	r9
  403346:	4604      	mov	r4, r0
                can_begin = false;
  403348:	2700      	movs	r7, #0
                can_move  = false;
  40334a:	463b      	mov	r3, r7
                can_begin = false;
  40334c:	e7b1      	b.n	4032b2 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  40334e:	b13c      	cbz	r4, 403360 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  403350:	4625      	mov	r5, r4
  403352:	e7b0      	b.n	4032b6 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  403354:	4621      	mov	r1, r4
  403356:	4630      	mov	r0, r6
  403358:	47c0      	blx	r8
  40335a:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  40335c:	4285      	cmp	r5, r0
  40335e:	d1ac      	bne.n	4032ba <focus_next_core+0x26>
  403360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403364:	004067d1 	.word	0x004067d1
  403368:	00405839 	.word	0x00405839
  40336c:	00405339 	.word	0x00405339
  403370:	004059c9 	.word	0x004059c9
  403374:	00403269 	.word	0x00403269

00403378 <_lv_group_init>:
{
  403378:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  40337a:	2118      	movs	r1, #24
  40337c:	4801      	ldr	r0, [pc, #4]	; (403384 <_lv_group_init+0xc>)
  40337e:	4b02      	ldr	r3, [pc, #8]	; (403388 <_lv_group_init+0x10>)
  403380:	4798      	blx	r3
  403382:	bd08      	pop	{r3, pc}
  403384:	2043a2dc 	.word	0x2043a2dc
  403388:	00415793 	.word	0x00415793

0040338c <lv_group_focus_next>:
{
  40338c:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  40338e:	4a02      	ldr	r2, [pc, #8]	; (403398 <lv_group_focus_next+0xc>)
  403390:	4902      	ldr	r1, [pc, #8]	; (40339c <lv_group_focus_next+0x10>)
  403392:	4b03      	ldr	r3, [pc, #12]	; (4033a0 <lv_group_focus_next+0x14>)
  403394:	4798      	blx	r3
  403396:	bd08      	pop	{r3, pc}
  403398:	00415851 	.word	0x00415851
  40339c:	0041583d 	.word	0x0041583d
  4033a0:	00403295 	.word	0x00403295

004033a4 <lv_group_focus_prev>:
{
  4033a4:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  4033a6:	4a02      	ldr	r2, [pc, #8]	; (4033b0 <lv_group_focus_prev+0xc>)
  4033a8:	4902      	ldr	r1, [pc, #8]	; (4033b4 <lv_group_focus_prev+0x10>)
  4033aa:	4b03      	ldr	r3, [pc, #12]	; (4033b8 <lv_group_focus_prev+0x14>)
  4033ac:	4798      	blx	r3
  4033ae:	bd08      	pop	{r3, pc}
  4033b0:	0041585f 	.word	0x0041585f
  4033b4:	00415847 	.word	0x00415847
  4033b8:	00403295 	.word	0x00403295

004033bc <lv_group_refocus>:
{
  4033bc:	b538      	push	{r3, r4, r5, lr}
  4033be:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  4033c0:	7d03      	ldrb	r3, [r0, #20]
  4033c2:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  4033c6:	f043 0310 	orr.w	r3, r3, #16
  4033ca:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  4033cc:	f013 0f08 	tst.w	r3, #8
  4033d0:	d006      	beq.n	4033e0 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  4033d2:	4b05      	ldr	r3, [pc, #20]	; (4033e8 <lv_group_refocus+0x2c>)
  4033d4:	4798      	blx	r3
    g->wrap = temp_wrap;
  4033d6:	7d23      	ldrb	r3, [r4, #20]
  4033d8:	f365 1304 	bfi	r3, r5, #4, #1
  4033dc:	7523      	strb	r3, [r4, #20]
  4033de:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  4033e0:	4b02      	ldr	r3, [pc, #8]	; (4033ec <lv_group_refocus+0x30>)
  4033e2:	4798      	blx	r3
  4033e4:	e7f7      	b.n	4033d6 <lv_group_refocus+0x1a>
  4033e6:	bf00      	nop
  4033e8:	004033a5 	.word	0x004033a5
  4033ec:	0040338d 	.word	0x0040338d

004033f0 <lv_group_add_obj>:
    if(group == NULL) return;
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d031      	beq.n	403458 <lv_group_add_obj+0x68>
{
  4033f4:	b570      	push	{r4, r5, r6, lr}
  4033f6:	4605      	mov	r5, r0
  4033f8:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  4033fa:	4606      	mov	r6, r0
  4033fc:	4b17      	ldr	r3, [pc, #92]	; (40345c <lv_group_add_obj+0x6c>)
  4033fe:	4798      	blx	r3
  403400:	b138      	cbz	r0, 403412 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403402:	6803      	ldr	r3, [r0, #0]
  403404:	42a3      	cmp	r3, r4
  403406:	d01c      	beq.n	403442 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403408:	4601      	mov	r1, r0
  40340a:	4630      	mov	r0, r6
  40340c:	4b14      	ldr	r3, [pc, #80]	; (403460 <lv_group_add_obj+0x70>)
  40340e:	4798      	blx	r3
  403410:	e7f6      	b.n	403400 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403414:	b133      	cbz	r3, 403424 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403416:	4620      	mov	r0, r4
  403418:	4b12      	ldr	r3, [pc, #72]	; (403464 <lv_group_add_obj+0x74>)
  40341a:	4798      	blx	r3
  40341c:	b110      	cbz	r0, 403424 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40341e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403420:	4b11      	ldr	r3, [pc, #68]	; (403468 <lv_group_add_obj+0x78>)
  403422:	4798      	blx	r3
    obj->group_p     = group;
  403424:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403426:	4628      	mov	r0, r5
  403428:	4b10      	ldr	r3, [pc, #64]	; (40346c <lv_group_add_obj+0x7c>)
  40342a:	4798      	blx	r3
  40342c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40342e:	4b10      	ldr	r3, [pc, #64]	; (403470 <lv_group_add_obj+0x80>)
  403430:	4798      	blx	r3
  403432:	b138      	cbz	r0, 403444 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403434:	b12e      	cbz	r6, 403442 <lv_group_add_obj+0x52>
    *next = obj;
  403436:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403438:	4628      	mov	r0, r5
  40343a:	4b08      	ldr	r3, [pc, #32]	; (40345c <lv_group_add_obj+0x6c>)
  40343c:	4798      	blx	r3
  40343e:	4286      	cmp	r6, r0
  403440:	d006      	beq.n	403450 <lv_group_add_obj+0x60>
  403442:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  403444:	4632      	mov	r2, r6
  403446:	2300      	movs	r3, #0
  403448:	480a      	ldr	r0, [pc, #40]	; (403474 <lv_group_add_obj+0x84>)
  40344a:	490b      	ldr	r1, [pc, #44]	; (403478 <lv_group_add_obj+0x88>)
  40344c:	4788      	blx	r1
  40344e:	e7fe      	b.n	40344e <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  403450:	4628      	mov	r0, r5
  403452:	4b05      	ldr	r3, [pc, #20]	; (403468 <lv_group_add_obj+0x78>)
  403454:	4798      	blx	r3
  403456:	e7f4      	b.n	403442 <lv_group_add_obj+0x52>
  403458:	4770      	bx	lr
  40345a:	bf00      	nop
  40345c:	0041583d 	.word	0x0041583d
  403460:	00415851 	.word	0x00415851
  403464:	00407b25 	.word	0x00407b25
  403468:	004033bd 	.word	0x004033bd
  40346c:	004157f1 	.word	0x004157f1
  403470:	0041552d 	.word	0x0041552d
  403474:	004235f0 	.word	0x004235f0
  403478:	00415539 	.word	0x00415539

0040347c <lv_group_remove_obj>:
{
  40347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  40347e:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  403480:	2f00      	cmp	r7, #0
  403482:	d043      	beq.n	40350c <lv_group_remove_obj+0x90>
  403484:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  403486:	68fb      	ldr	r3, [r7, #12]
  403488:	681b      	ldr	r3, [r3, #0]
  40348a:	4298      	cmp	r0, r3
  40348c:	d013      	beq.n	4034b6 <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  40348e:	68fb      	ldr	r3, [r7, #12]
  403490:	681b      	ldr	r3, [r3, #0]
  403492:	429d      	cmp	r5, r3
  403494:	d02d      	beq.n	4034f2 <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  403496:	463e      	mov	r6, r7
  403498:	4638      	mov	r0, r7
  40349a:	4b1d      	ldr	r3, [pc, #116]	; (403510 <lv_group_remove_obj+0x94>)
  40349c:	4798      	blx	r3
  40349e:	4604      	mov	r4, r0
  4034a0:	2c00      	cmp	r4, #0
  4034a2:	d033      	beq.n	40350c <lv_group_remove_obj+0x90>
        if(*i == obj) {
  4034a4:	6823      	ldr	r3, [r4, #0]
  4034a6:	429d      	cmp	r5, r3
  4034a8:	d026      	beq.n	4034f8 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  4034aa:	4621      	mov	r1, r4
  4034ac:	4630      	mov	r0, r6
  4034ae:	4b19      	ldr	r3, [pc, #100]	; (403514 <lv_group_remove_obj+0x98>)
  4034b0:	4798      	blx	r3
  4034b2:	4604      	mov	r4, r0
  4034b4:	e7f4      	b.n	4034a0 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  4034b6:	7d3b      	ldrb	r3, [r7, #20]
  4034b8:	f013 0f01 	tst.w	r3, #1
  4034bc:	d003      	beq.n	4034c6 <lv_group_remove_obj+0x4a>
  4034be:	7d3b      	ldrb	r3, [r7, #20]
  4034c0:	f36f 0300 	bfc	r3, #0, #1
  4034c4:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4034c6:	4638      	mov	r0, r7
  4034c8:	4b11      	ldr	r3, [pc, #68]	; (403510 <lv_group_remove_obj+0x94>)
  4034ca:	4798      	blx	r3
  4034cc:	68fb      	ldr	r3, [r7, #12]
  4034ce:	4283      	cmp	r3, r0
  4034d0:	d003      	beq.n	4034da <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  4034d2:	4638      	mov	r0, r7
  4034d4:	4b10      	ldr	r3, [pc, #64]	; (403518 <lv_group_remove_obj+0x9c>)
  4034d6:	4798      	blx	r3
  4034d8:	e7d9      	b.n	40348e <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4034da:	4638      	mov	r0, r7
  4034dc:	4b0f      	ldr	r3, [pc, #60]	; (40351c <lv_group_remove_obj+0xa0>)
  4034de:	4798      	blx	r3
  4034e0:	68fb      	ldr	r3, [r7, #12]
  4034e2:	4283      	cmp	r3, r0
  4034e4:	d1f5      	bne.n	4034d2 <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4034e6:	6818      	ldr	r0, [r3, #0]
  4034e8:	69c3      	ldr	r3, [r0, #28]
  4034ea:	2200      	movs	r2, #0
  4034ec:	2117      	movs	r1, #23
  4034ee:	4798      	blx	r3
  4034f0:	e7cd      	b.n	40348e <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  4034f2:	2300      	movs	r3, #0
  4034f4:	60fb      	str	r3, [r7, #12]
  4034f6:	e7ce      	b.n	403496 <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  4034f8:	4621      	mov	r1, r4
  4034fa:	4638      	mov	r0, r7
  4034fc:	4b08      	ldr	r3, [pc, #32]	; (403520 <lv_group_remove_obj+0xa4>)
  4034fe:	4798      	blx	r3
            lv_mem_free(i);
  403500:	4620      	mov	r0, r4
  403502:	4b08      	ldr	r3, [pc, #32]	; (403524 <lv_group_remove_obj+0xa8>)
  403504:	4798      	blx	r3
            obj->group_p = NULL;
  403506:	2300      	movs	r3, #0
  403508:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  40350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40350c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40350e:	bf00      	nop
  403510:	0041583d 	.word	0x0041583d
  403514:	00415851 	.word	0x00415851
  403518:	004033bd 	.word	0x004033bd
  40351c:	00415847 	.word	0x00415847
  403520:	004158f9 	.word	0x004158f9
  403524:	00415cf9 	.word	0x00415cf9

00403528 <lv_group_get_focused>:
    if(!group) return NULL;
  403528:	b118      	cbz	r0, 403532 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40352a:	68c3      	ldr	r3, [r0, #12]
  40352c:	b11b      	cbz	r3, 403536 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40352e:	6818      	ldr	r0, [r3, #0]
  403530:	4770      	bx	lr
    if(!group) return NULL;
  403532:	2000      	movs	r0, #0
  403534:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403536:	2000      	movs	r0, #0
}
  403538:	4770      	bx	lr
	...

0040353c <lv_group_send_data>:
{
  40353c:	b510      	push	{r4, lr}
  40353e:	b082      	sub	sp, #8
  403540:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  403542:	4b0a      	ldr	r3, [pc, #40]	; (40356c <lv_group_send_data+0x30>)
  403544:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  403546:	b170      	cbz	r0, 403566 <lv_group_send_data+0x2a>
  403548:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  40354a:	69c3      	ldr	r3, [r0, #28]
  40354c:	aa01      	add	r2, sp, #4
  40354e:	2118      	movs	r1, #24
  403550:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  403552:	2801      	cmp	r0, #1
  403554:	d001      	beq.n	40355a <lv_group_send_data+0x1e>
}
  403556:	b002      	add	sp, #8
  403558:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  40355a:	aa01      	add	r2, sp, #4
  40355c:	210c      	movs	r1, #12
  40355e:	4620      	mov	r0, r4
  403560:	4b03      	ldr	r3, [pc, #12]	; (403570 <lv_group_send_data+0x34>)
  403562:	4798      	blx	r3
  403564:	e7f7      	b.n	403556 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  403566:	2001      	movs	r0, #1
  403568:	e7f5      	b.n	403556 <lv_group_send_data+0x1a>
  40356a:	bf00      	nop
  40356c:	00403529 	.word	0x00403529
  403570:	00405339 	.word	0x00405339

00403574 <lv_group_set_editing>:
    if(group == NULL) return;
  403574:	b1f8      	cbz	r0, 4035b6 <lv_group_set_editing+0x42>
{
  403576:	b538      	push	{r3, r4, r5, lr}
  403578:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  40357a:	7d03      	ldrb	r3, [r0, #20]
  40357c:	f3c3 0340 	ubfx	r3, r3, #1, #1
  403580:	4299      	cmp	r1, r3
  403582:	d013      	beq.n	4035ac <lv_group_set_editing+0x38>
    group->editing     = en_val;
  403584:	7d03      	ldrb	r3, [r0, #20]
  403586:	f361 0341 	bfi	r3, r1, #1, #1
  40358a:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  40358c:	4b0a      	ldr	r3, [pc, #40]	; (4035b8 <lv_group_set_editing+0x44>)
  40358e:	4798      	blx	r3
    if(focused) {
  403590:	4605      	mov	r5, r0
  403592:	b158      	cbz	r0, 4035ac <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  403594:	69c3      	ldr	r3, [r0, #28]
  403596:	2200      	movs	r2, #0
  403598:	2116      	movs	r1, #22
  40359a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40359c:	68e3      	ldr	r3, [r4, #12]
  40359e:	2200      	movs	r2, #0
  4035a0:	210d      	movs	r1, #13
  4035a2:	6818      	ldr	r0, [r3, #0]
  4035a4:	4b05      	ldr	r3, [pc, #20]	; (4035bc <lv_group_set_editing+0x48>)
  4035a6:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4035a8:	2801      	cmp	r0, #1
  4035aa:	d000      	beq.n	4035ae <lv_group_set_editing+0x3a>
  4035ac:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  4035ae:	4628      	mov	r0, r5
  4035b0:	4b03      	ldr	r3, [pc, #12]	; (4035c0 <lv_group_set_editing+0x4c>)
  4035b2:	4798      	blx	r3
  4035b4:	e7fa      	b.n	4035ac <lv_group_set_editing+0x38>
  4035b6:	4770      	bx	lr
  4035b8:	00403529 	.word	0x00403529
  4035bc:	00405339 	.word	0x00405339
  4035c0:	004059c9 	.word	0x004059c9

004035c4 <lv_group_focus_obj>:
    if(obj == NULL) return;
  4035c4:	2800      	cmp	r0, #0
  4035c6:	d04e      	beq.n	403666 <lv_group_focus_obj+0xa2>
{
  4035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035ca:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  4035cc:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  4035ce:	b356      	cbz	r6, 403626 <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  4035d0:	7d33      	ldrb	r3, [r6, #20]
  4035d2:	f013 0f01 	tst.w	r3, #1
  4035d6:	d126      	bne.n	403626 <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  4035d8:	68f3      	ldr	r3, [r6, #12]
  4035da:	b113      	cbz	r3, 4035e2 <lv_group_focus_obj+0x1e>
  4035dc:	681b      	ldr	r3, [r3, #0]
  4035de:	4298      	cmp	r0, r3
  4035e0:	d021      	beq.n	403626 <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  4035e2:	2100      	movs	r1, #0
  4035e4:	4630      	mov	r0, r6
  4035e6:	4b20      	ldr	r3, [pc, #128]	; (403668 <lv_group_focus_obj+0xa4>)
  4035e8:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  4035ea:	4637      	mov	r7, r6
  4035ec:	4630      	mov	r0, r6
  4035ee:	4b1f      	ldr	r3, [pc, #124]	; (40366c <lv_group_focus_obj+0xa8>)
  4035f0:	4798      	blx	r3
  4035f2:	4604      	mov	r4, r0
  4035f4:	b1bc      	cbz	r4, 403626 <lv_group_focus_obj+0x62>
        if(*i == obj) {
  4035f6:	6823      	ldr	r3, [r4, #0]
  4035f8:	429d      	cmp	r5, r3
  4035fa:	d005      	beq.n	403608 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  4035fc:	4621      	mov	r1, r4
  4035fe:	4638      	mov	r0, r7
  403600:	4b1b      	ldr	r3, [pc, #108]	; (403670 <lv_group_focus_obj+0xac>)
  403602:	4798      	blx	r3
  403604:	4604      	mov	r4, r0
  403606:	e7f5      	b.n	4035f4 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  403608:	68f3      	ldr	r3, [r6, #12]
  40360a:	b18b      	cbz	r3, 403630 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  40360c:	6818      	ldr	r0, [r3, #0]
  40360e:	69c3      	ldr	r3, [r0, #28]
  403610:	2200      	movs	r2, #0
  403612:	2117      	movs	r1, #23
  403614:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403616:	68f3      	ldr	r3, [r6, #12]
  403618:	2200      	movs	r2, #0
  40361a:	210e      	movs	r1, #14
  40361c:	6818      	ldr	r0, [r3, #0]
  40361e:	4b15      	ldr	r3, [pc, #84]	; (403674 <lv_group_focus_obj+0xb0>)
  403620:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403622:	2801      	cmp	r0, #1
  403624:	d000      	beq.n	403628 <lv_group_focus_obj+0x64>
  403626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  403628:	68f3      	ldr	r3, [r6, #12]
  40362a:	6818      	ldr	r0, [r3, #0]
  40362c:	4b12      	ldr	r3, [pc, #72]	; (403678 <lv_group_focus_obj+0xb4>)
  40362e:	4798      	blx	r3
            g->obj_focus = i;
  403630:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403632:	6820      	ldr	r0, [r4, #0]
  403634:	69c3      	ldr	r3, [r0, #28]
  403636:	2200      	movs	r2, #0
  403638:	2116      	movs	r1, #22
  40363a:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  40363c:	6933      	ldr	r3, [r6, #16]
  40363e:	b10b      	cbz	r3, 403644 <lv_group_focus_obj+0x80>
  403640:	4630      	mov	r0, r6
  403642:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403644:	68f3      	ldr	r3, [r6, #12]
  403646:	2200      	movs	r2, #0
  403648:	210d      	movs	r1, #13
  40364a:	6818      	ldr	r0, [r3, #0]
  40364c:	4b09      	ldr	r3, [pc, #36]	; (403674 <lv_group_focus_obj+0xb0>)
  40364e:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403650:	2801      	cmp	r0, #1
  403652:	d1e8      	bne.n	403626 <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  403654:	68f3      	ldr	r3, [r6, #12]
  403656:	6818      	ldr	r0, [r3, #0]
  403658:	4b07      	ldr	r3, [pc, #28]	; (403678 <lv_group_focus_obj+0xb4>)
  40365a:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  40365c:	68f3      	ldr	r3, [r6, #12]
  40365e:	6818      	ldr	r0, [r3, #0]
  403660:	4b06      	ldr	r3, [pc, #24]	; (40367c <lv_group_focus_obj+0xb8>)
  403662:	4798      	blx	r3
  403664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403666:	4770      	bx	lr
  403668:	00403575 	.word	0x00403575
  40366c:	0041583d 	.word	0x0041583d
  403670:	00415851 	.word	0x00415851
  403674:	00405339 	.word	0x00405339
  403678:	004059c9 	.word	0x004059c9
  40367c:	00403269 	.word	0x00403269

00403680 <lv_group_get_editing>:
    if(!group) return false;
  403680:	b118      	cbz	r0, 40368a <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  403682:	7d00      	ldrb	r0, [r0, #20]
  403684:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403688:	4770      	bx	lr
    if(!group) return false;
  40368a:	2000      	movs	r0, #0
}
  40368c:	4770      	bx	lr
	...

00403690 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403690:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403694:	f013 0f02 	tst.w	r3, #2
  403698:	d022      	beq.n	4036e0 <indev_proc_reset_query_handler+0x50>
{
  40369a:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  40369c:	2300      	movs	r3, #0
  40369e:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  4036a0:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  4036a2:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  4036a6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  4036aa:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  4036ac:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  4036ae:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  4036b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  4036b2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  4036b6:	2403      	movs	r4, #3
  4036b8:	f364 0184 	bfi	r1, r4, #2, #3
  4036bc:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  4036c0:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  4036c2:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  4036c4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  4036c8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  4036cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  4036d0:	f363 0241 	bfi	r2, r3, #1, #1
  4036d4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  4036d8:	4a02      	ldr	r2, [pc, #8]	; (4036e4 <indev_proc_reset_query_handler+0x54>)
  4036da:	6013      	str	r3, [r2, #0]
    }
}
  4036dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036e0:	4770      	bx	lr
  4036e2:	bf00      	nop
  4036e4:	2040c380 	.word	0x2040c380

004036e8 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  4036e8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  4036ec:	f010 0002 	ands.w	r0, r0, #2
  4036f0:	d002      	beq.n	4036f8 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  4036f2:	2200      	movs	r2, #0
  4036f4:	4b02      	ldr	r3, [pc, #8]	; (403700 <indev_reset_check+0x18>)
  4036f6:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  4036f8:	3000      	adds	r0, #0
  4036fa:	bf18      	it	ne
  4036fc:	2001      	movne	r0, #1
  4036fe:	4770      	bx	lr
  403700:	2040c380 	.word	0x2040c380

00403704 <get_dragged_obj>:
{
  403704:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  403706:	4604      	mov	r4, r0
  403708:	b920      	cbnz	r0, 403714 <get_dragged_obj+0x10>
  40370a:	e009      	b.n	403720 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  40370c:	4620      	mov	r0, r4
  40370e:	4b05      	ldr	r3, [pc, #20]	; (403724 <get_dragged_obj+0x20>)
  403710:	4798      	blx	r3
  403712:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403714:	4620      	mov	r0, r4
  403716:	4b04      	ldr	r3, [pc, #16]	; (403728 <get_dragged_obj+0x24>)
  403718:	4798      	blx	r3
  40371a:	b108      	cbz	r0, 403720 <get_dragged_obj+0x1c>
  40371c:	2c00      	cmp	r4, #0
  40371e:	d1f5      	bne.n	40370c <get_dragged_obj+0x8>
}
  403720:	4620      	mov	r0, r4
  403722:	bd10      	pop	{r4, pc}
  403724:	00405449 	.word	0x00405449
  403728:	0040623d 	.word	0x0040623d

0040372c <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  40372c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403730:	f013 0f02 	tst.w	r3, #2
  403734:	d100      	bne.n	403738 <indev_drag_throw+0xc>
  403736:	4770      	bx	lr
{
  403738:	b5f0      	push	{r4, r5, r6, r7, lr}
  40373a:	b085      	sub	sp, #20
  40373c:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  40373e:	69c0      	ldr	r0, [r0, #28]
  403740:	4b64      	ldr	r3, [pc, #400]	; (4038d4 <indev_drag_throw+0x1a8>)
  403742:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403744:	4605      	mov	r5, r0
  403746:	b190      	cbz	r0, 40376e <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403748:	4b63      	ldr	r3, [pc, #396]	; (4038d8 <indev_drag_throw+0x1ac>)
  40374a:	4798      	blx	r3
  40374c:	b9b8      	cbnz	r0, 40377e <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  40374e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403752:	f36f 0341 	bfc	r3, #1, #1
  403756:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  40375a:	69eb      	ldr	r3, [r5, #28]
  40375c:	4a5f      	ldr	r2, [pc, #380]	; (4038dc <indev_drag_throw+0x1b0>)
  40375e:	6812      	ldr	r2, [r2, #0]
  403760:	2113      	movs	r1, #19
  403762:	4628      	mov	r0, r5
  403764:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403766:	4620      	mov	r0, r4
  403768:	4b5d      	ldr	r3, [pc, #372]	; (4038e0 <indev_drag_throw+0x1b4>)
  40376a:	4798      	blx	r3
  40376c:	b108      	cbz	r0, 403772 <indev_drag_throw+0x46>
}
  40376e:	b005      	add	sp, #20
  403770:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403772:	2200      	movs	r2, #0
  403774:	2109      	movs	r1, #9
  403776:	4628      	mov	r0, r5
  403778:	4b5a      	ldr	r3, [pc, #360]	; (4038e4 <indev_drag_throw+0x1b8>)
  40377a:	4798      	blx	r3
        return;
  40377c:	e7f7      	b.n	40376e <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  40377e:	4628      	mov	r0, r5
  403780:	4b59      	ldr	r3, [pc, #356]	; (4038e8 <indev_drag_throw+0x1bc>)
  403782:	4798      	blx	r3
  403784:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403786:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  40378a:	4a54      	ldr	r2, [pc, #336]	; (4038dc <indev_drag_throw+0x1b0>)
  40378c:	6812      	ldr	r2, [r2, #0]
  40378e:	7d51      	ldrb	r1, [r2, #21]
  403790:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403794:	fb01 f103 	mul.w	r1, r1, r3
  403798:	4854      	ldr	r0, [pc, #336]	; (4038ec <indev_drag_throw+0x1c0>)
  40379a:	fb80 7301 	smull	r7, r3, r0, r1
  40379e:	17c9      	asrs	r1, r1, #31
  4037a0:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  4037a4:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  4037a6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  4037aa:	7d53      	ldrb	r3, [r2, #21]
  4037ac:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  4037b0:	fb03 f301 	mul.w	r3, r3, r1
  4037b4:	fb80 1003 	smull	r1, r0, r0, r3
  4037b8:	17db      	asrs	r3, r3, #31
  4037ba:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  4037be:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  4037c0:	6963      	ldr	r3, [r4, #20]
  4037c2:	2b00      	cmp	r3, #0
  4037c4:	d06c      	beq.n	4038a0 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  4037c6:	4669      	mov	r1, sp
  4037c8:	4628      	mov	r0, r5
  4037ca:	4b49      	ldr	r3, [pc, #292]	; (4038f0 <indev_drag_throw+0x1c4>)
  4037cc:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  4037ce:	4628      	mov	r0, r5
  4037d0:	4b48      	ldr	r3, [pc, #288]	; (4038f4 <indev_drag_throw+0x1c8>)
  4037d2:	4798      	blx	r3
  4037d4:	8aa3      	ldrh	r3, [r4, #20]
  4037d6:	fa13 f080 	uxtah	r0, r3, r0
  4037da:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  4037dc:	4628      	mov	r0, r5
  4037de:	4b46      	ldr	r3, [pc, #280]	; (4038f8 <indev_drag_throw+0x1cc>)
  4037e0:	4798      	blx	r3
  4037e2:	8ae2      	ldrh	r2, [r4, #22]
  4037e4:	fa12 f280 	uxtah	r2, r2, r0
  4037e8:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  4037ea:	2e03      	cmp	r6, #3
  4037ec:	d03c      	beq.n	403868 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  4037ee:	2e01      	cmp	r6, #1
  4037f0:	d03f      	beq.n	403872 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  4037f2:	2e02      	cmp	r6, #2
  4037f4:	d042      	beq.n	40387c <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4037f6:	2e04      	cmp	r6, #4
  4037f8:	d045      	beq.n	403886 <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  4037fa:	a902      	add	r1, sp, #8
  4037fc:	4628      	mov	r0, r5
  4037fe:	4b3c      	ldr	r3, [pc, #240]	; (4038f0 <indev_drag_throw+0x1c4>)
  403800:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403802:	f9bd 2000 	ldrsh.w	r2, [sp]
  403806:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  40380a:	429a      	cmp	r2, r3
  40380c:	d003      	beq.n	403816 <indev_drag_throw+0xea>
  40380e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403812:	2b00      	cmp	r3, #0
  403814:	d1ab      	bne.n	40376e <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403816:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  40381a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  40381e:	429a      	cmp	r2, r3
  403820:	d003      	beq.n	40382a <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403822:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403826:	2b00      	cmp	r3, #0
  403828:	d1a1      	bne.n	40376e <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  40382a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40382e:	f36f 0341 	bfc	r3, #1, #1
  403832:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403836:	2300      	movs	r3, #0
  403838:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  40383a:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  40383c:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  40383e:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403840:	69eb      	ldr	r3, [r5, #28]
  403842:	4a26      	ldr	r2, [pc, #152]	; (4038dc <indev_drag_throw+0x1b0>)
  403844:	6812      	ldr	r2, [r2, #0]
  403846:	2113      	movs	r1, #19
  403848:	4628      	mov	r0, r5
  40384a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  40384c:	4620      	mov	r0, r4
  40384e:	4b24      	ldr	r3, [pc, #144]	; (4038e0 <indev_drag_throw+0x1b4>)
  403850:	4798      	blx	r3
  403852:	2800      	cmp	r0, #0
  403854:	d18b      	bne.n	40376e <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403856:	2200      	movs	r2, #0
  403858:	2109      	movs	r1, #9
  40385a:	4628      	mov	r0, r5
  40385c:	4b21      	ldr	r3, [pc, #132]	; (4038e4 <indev_drag_throw+0x1b8>)
  40385e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403860:	4620      	mov	r0, r4
  403862:	4b1f      	ldr	r3, [pc, #124]	; (4038e0 <indev_drag_throw+0x1b4>)
  403864:	4798      	blx	r3
  403866:	e782      	b.n	40376e <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403868:	4639      	mov	r1, r7
  40386a:	4628      	mov	r0, r5
  40386c:	4b23      	ldr	r3, [pc, #140]	; (4038fc <indev_drag_throw+0x1d0>)
  40386e:	4798      	blx	r3
  403870:	e7c3      	b.n	4037fa <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403872:	4639      	mov	r1, r7
  403874:	4628      	mov	r0, r5
  403876:	4b22      	ldr	r3, [pc, #136]	; (403900 <indev_drag_throw+0x1d4>)
  403878:	4798      	blx	r3
  40387a:	e7be      	b.n	4037fa <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  40387c:	4611      	mov	r1, r2
  40387e:	4628      	mov	r0, r5
  403880:	4b20      	ldr	r3, [pc, #128]	; (403904 <indev_drag_throw+0x1d8>)
  403882:	4798      	blx	r3
  403884:	e7b9      	b.n	4037fa <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403886:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  40388a:	b123      	cbz	r3, 403896 <indev_drag_throw+0x16a>
  40388c:	4639      	mov	r1, r7
  40388e:	4628      	mov	r0, r5
  403890:	4b1b      	ldr	r3, [pc, #108]	; (403900 <indev_drag_throw+0x1d4>)
  403892:	4798      	blx	r3
  403894:	e7b1      	b.n	4037fa <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403896:	4611      	mov	r1, r2
  403898:	4628      	mov	r0, r5
  40389a:	4b1a      	ldr	r3, [pc, #104]	; (403904 <indev_drag_throw+0x1d8>)
  40389c:	4798      	blx	r3
  40389e:	e7ac      	b.n	4037fa <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  4038a0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4038a4:	f36f 0341 	bfc	r3, #1, #1
  4038a8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  4038ac:	69eb      	ldr	r3, [r5, #28]
  4038ae:	2113      	movs	r1, #19
  4038b0:	4628      	mov	r0, r5
  4038b2:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4038b4:	4620      	mov	r0, r4
  4038b6:	4b0a      	ldr	r3, [pc, #40]	; (4038e0 <indev_drag_throw+0x1b4>)
  4038b8:	4798      	blx	r3
  4038ba:	2800      	cmp	r0, #0
  4038bc:	f47f af57 	bne.w	40376e <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  4038c0:	2200      	movs	r2, #0
  4038c2:	2109      	movs	r1, #9
  4038c4:	4628      	mov	r0, r5
  4038c6:	4b07      	ldr	r3, [pc, #28]	; (4038e4 <indev_drag_throw+0x1b8>)
  4038c8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4038ca:	4620      	mov	r0, r4
  4038cc:	4b04      	ldr	r3, [pc, #16]	; (4038e0 <indev_drag_throw+0x1b4>)
  4038ce:	4798      	blx	r3
  4038d0:	e74d      	b.n	40376e <indev_drag_throw+0x42>
  4038d2:	bf00      	nop
  4038d4:	00403705 	.word	0x00403705
  4038d8:	00406211 	.word	0x00406211
  4038dc:	2040c37c 	.word	0x2040c37c
  4038e0:	004036e9 	.word	0x004036e9
  4038e4:	00405339 	.word	0x00405339
  4038e8:	004061e5 	.word	0x004061e5
  4038ec:	51eb851f 	.word	0x51eb851f
  4038f0:	0040555d 	.word	0x0040555d
  4038f4:	0040559d 	.word	0x0040559d
  4038f8:	004055dd 	.word	0x004055dd
  4038fc:	00405aad 	.word	0x00405aad
  403900:	00405b65 	.word	0x00405b65
  403904:	00405ba5 	.word	0x00405ba5

00403908 <indev_proc_release>:
{
  403908:	b538      	push	{r3, r4, r5, lr}
  40390a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  40390c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403910:	f013 0f08 	tst.w	r3, #8
  403914:	d00a      	beq.n	40392c <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403916:	2300      	movs	r3, #0
  403918:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  40391a:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  40391c:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  40391e:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403920:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403924:	f363 02c3 	bfi	r2, r3, #3, #1
  403928:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  40392c:	69a0      	ldr	r0, [r4, #24]
  40392e:	4b59      	ldr	r3, [pc, #356]	; (403a94 <indev_proc_release+0x18c>)
  403930:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403932:	2800      	cmp	r0, #0
  403934:	f000 8093 	beq.w	403a5e <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403938:	2110      	movs	r1, #16
  40393a:	4b57      	ldr	r3, [pc, #348]	; (403a98 <indev_proc_release+0x190>)
  40393c:	4798      	blx	r3
  40393e:	2800      	cmp	r0, #0
  403940:	d038      	beq.n	4039b4 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403942:	4b54      	ldr	r3, [pc, #336]	; (403a94 <indev_proc_release+0x18c>)
  403944:	6818      	ldr	r0, [r3, #0]
  403946:	69c3      	ldr	r3, [r0, #28]
  403948:	4a54      	ldr	r2, [pc, #336]	; (403a9c <indev_proc_release+0x194>)
  40394a:	6812      	ldr	r2, [r2, #0]
  40394c:	210e      	movs	r1, #14
  40394e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403950:	4620      	mov	r0, r4
  403952:	4b53      	ldr	r3, [pc, #332]	; (403aa0 <indev_proc_release+0x198>)
  403954:	4798      	blx	r3
  403956:	2800      	cmp	r0, #0
  403958:	f040 8088 	bne.w	403a6c <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  40395c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403960:	f013 0f02 	tst.w	r3, #2
  403964:	d11a      	bne.n	40399c <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403966:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40396a:	f013 0f01 	tst.w	r3, #1
  40396e:	d10a      	bne.n	403986 <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403970:	2200      	movs	r2, #0
  403972:	2103      	movs	r1, #3
  403974:	4b47      	ldr	r3, [pc, #284]	; (403a94 <indev_proc_release+0x18c>)
  403976:	6818      	ldr	r0, [r3, #0]
  403978:	4b4a      	ldr	r3, [pc, #296]	; (403aa4 <indev_proc_release+0x19c>)
  40397a:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  40397c:	4620      	mov	r0, r4
  40397e:	4b48      	ldr	r3, [pc, #288]	; (403aa0 <indev_proc_release+0x198>)
  403980:	4798      	blx	r3
  403982:	2800      	cmp	r0, #0
  403984:	d172      	bne.n	403a6c <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403986:	2200      	movs	r2, #0
  403988:	2106      	movs	r1, #6
  40398a:	4b42      	ldr	r3, [pc, #264]	; (403a94 <indev_proc_release+0x18c>)
  40398c:	6818      	ldr	r0, [r3, #0]
  40398e:	4b45      	ldr	r3, [pc, #276]	; (403aa4 <indev_proc_release+0x19c>)
  403990:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403992:	4620      	mov	r0, r4
  403994:	4b42      	ldr	r3, [pc, #264]	; (403aa0 <indev_proc_release+0x198>)
  403996:	4798      	blx	r3
  403998:	2800      	cmp	r0, #0
  40399a:	d167      	bne.n	403a6c <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40399c:	2200      	movs	r2, #0
  40399e:	2107      	movs	r1, #7
  4039a0:	4b3c      	ldr	r3, [pc, #240]	; (403a94 <indev_proc_release+0x18c>)
  4039a2:	6818      	ldr	r0, [r3, #0]
  4039a4:	4b3f      	ldr	r3, [pc, #252]	; (403aa4 <indev_proc_release+0x19c>)
  4039a6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4039a8:	4620      	mov	r0, r4
  4039aa:	4b3d      	ldr	r3, [pc, #244]	; (403aa0 <indev_proc_release+0x198>)
  4039ac:	4798      	blx	r3
  4039ae:	2800      	cmp	r0, #0
  4039b0:	d030      	beq.n	403a14 <indev_proc_release+0x10c>
  4039b2:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  4039b4:	4b37      	ldr	r3, [pc, #220]	; (403a94 <indev_proc_release+0x18c>)
  4039b6:	6818      	ldr	r0, [r3, #0]
  4039b8:	69c3      	ldr	r3, [r0, #28]
  4039ba:	4a38      	ldr	r2, [pc, #224]	; (403a9c <indev_proc_release+0x194>)
  4039bc:	6812      	ldr	r2, [r2, #0]
  4039be:	210e      	movs	r1, #14
  4039c0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4039c2:	4620      	mov	r0, r4
  4039c4:	4b36      	ldr	r3, [pc, #216]	; (403aa0 <indev_proc_release+0x198>)
  4039c6:	4798      	blx	r3
  4039c8:	2800      	cmp	r0, #0
  4039ca:	d14f      	bne.n	403a6c <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  4039cc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4039d0:	f013 0f01 	tst.w	r3, #1
  4039d4:	d104      	bne.n	4039e0 <indev_proc_release+0xd8>
  4039d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039da:	f013 0f02 	tst.w	r3, #2
  4039de:	d046      	beq.n	403a6e <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  4039e0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039e4:	f013 0f02 	tst.w	r3, #2
  4039e8:	d10a      	bne.n	403a00 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4039ea:	2200      	movs	r2, #0
  4039ec:	2106      	movs	r1, #6
  4039ee:	4b29      	ldr	r3, [pc, #164]	; (403a94 <indev_proc_release+0x18c>)
  4039f0:	6818      	ldr	r0, [r3, #0]
  4039f2:	4b2c      	ldr	r3, [pc, #176]	; (403aa4 <indev_proc_release+0x19c>)
  4039f4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4039f6:	4620      	mov	r0, r4
  4039f8:	4b29      	ldr	r3, [pc, #164]	; (403aa0 <indev_proc_release+0x198>)
  4039fa:	4798      	blx	r3
  4039fc:	2800      	cmp	r0, #0
  4039fe:	d135      	bne.n	403a6c <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403a00:	2200      	movs	r2, #0
  403a02:	2107      	movs	r1, #7
  403a04:	4b23      	ldr	r3, [pc, #140]	; (403a94 <indev_proc_release+0x18c>)
  403a06:	6818      	ldr	r0, [r3, #0]
  403a08:	4b26      	ldr	r3, [pc, #152]	; (403aa4 <indev_proc_release+0x19c>)
  403a0a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403a0c:	4620      	mov	r0, r4
  403a0e:	4b24      	ldr	r3, [pc, #144]	; (403aa0 <indev_proc_release+0x198>)
  403a10:	4798      	blx	r3
  403a12:	bb58      	cbnz	r0, 403a6c <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403a14:	4b1f      	ldr	r3, [pc, #124]	; (403a94 <indev_proc_release+0x18c>)
  403a16:	6818      	ldr	r0, [r3, #0]
  403a18:	4b23      	ldr	r3, [pc, #140]	; (403aa8 <indev_proc_release+0x1a0>)
  403a1a:	4798      	blx	r3
        if(drag_obj) {
  403a1c:	4605      	mov	r5, r0
  403a1e:	b1d0      	cbz	r0, 403a56 <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403a20:	4b22      	ldr	r3, [pc, #136]	; (403aac <indev_proc_release+0x1a4>)
  403a22:	4798      	blx	r3
  403a24:	b1b8      	cbz	r0, 403a56 <indev_proc_release+0x14e>
  403a26:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403a2a:	f013 0f02 	tst.w	r3, #2
  403a2e:	d012      	beq.n	403a56 <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403a30:	69eb      	ldr	r3, [r5, #28]
  403a32:	b11b      	cbz	r3, 403a3c <indev_proc_release+0x134>
  403a34:	2200      	movs	r2, #0
  403a36:	2112      	movs	r1, #18
  403a38:	4628      	mov	r0, r5
  403a3a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a3c:	4620      	mov	r0, r4
  403a3e:	4b18      	ldr	r3, [pc, #96]	; (403aa0 <indev_proc_release+0x198>)
  403a40:	4798      	blx	r3
  403a42:	b998      	cbnz	r0, 403a6c <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403a44:	2200      	movs	r2, #0
  403a46:	210a      	movs	r1, #10
  403a48:	4628      	mov	r0, r5
  403a4a:	4b16      	ldr	r3, [pc, #88]	; (403aa4 <indev_proc_release+0x19c>)
  403a4c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a4e:	4620      	mov	r0, r4
  403a50:	4b13      	ldr	r3, [pc, #76]	; (403aa0 <indev_proc_release+0x198>)
  403a52:	4798      	blx	r3
  403a54:	b950      	cbnz	r0, 403a6c <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403a56:	2300      	movs	r3, #0
  403a58:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403a5c:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403a5e:	69e3      	ldr	r3, [r4, #28]
  403a60:	b123      	cbz	r3, 403a6c <indev_proc_release+0x164>
  403a62:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403a66:	f013 0f02 	tst.w	r3, #2
  403a6a:	d00c      	beq.n	403a86 <indev_proc_release+0x17e>
  403a6c:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403a6e:	2200      	movs	r2, #0
  403a70:	2103      	movs	r1, #3
  403a72:	4b08      	ldr	r3, [pc, #32]	; (403a94 <indev_proc_release+0x18c>)
  403a74:	6818      	ldr	r0, [r3, #0]
  403a76:	4b0b      	ldr	r3, [pc, #44]	; (403aa4 <indev_proc_release+0x19c>)
  403a78:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a7a:	4620      	mov	r0, r4
  403a7c:	4b08      	ldr	r3, [pc, #32]	; (403aa0 <indev_proc_release+0x198>)
  403a7e:	4798      	blx	r3
  403a80:	2800      	cmp	r0, #0
  403a82:	d0ad      	beq.n	4039e0 <indev_proc_release+0xd8>
  403a84:	e7f2      	b.n	403a6c <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403a86:	4620      	mov	r0, r4
  403a88:	4b09      	ldr	r3, [pc, #36]	; (403ab0 <indev_proc_release+0x1a8>)
  403a8a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403a8c:	4620      	mov	r0, r4
  403a8e:	4b04      	ldr	r3, [pc, #16]	; (403aa0 <indev_proc_release+0x198>)
  403a90:	4798      	blx	r3
  403a92:	e7eb      	b.n	403a6c <indev_proc_release+0x164>
  403a94:	2040c380 	.word	0x2040c380
  403a98:	0040679d 	.word	0x0040679d
  403a9c:	2040c37c 	.word	0x2040c37c
  403aa0:	004036e9 	.word	0x004036e9
  403aa4:	00405339 	.word	0x00405339
  403aa8:	00403705 	.word	0x00403705
  403aac:	00406211 	.word	0x00406211
  403ab0:	0040372d 	.word	0x0040372d

00403ab4 <indev_click_focus>:
{
  403ab4:	b570      	push	{r4, r5, r6, lr}
  403ab6:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403ab8:	4d58      	ldr	r5, [pc, #352]	; (403c1c <indev_click_focus+0x168>)
  403aba:	6828      	ldr	r0, [r5, #0]
  403abc:	4b58      	ldr	r3, [pc, #352]	; (403c20 <indev_click_focus+0x16c>)
  403abe:	4798      	blx	r3
  403ac0:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403ac2:	2120      	movs	r1, #32
  403ac4:	6828      	ldr	r0, [r5, #0]
  403ac6:	4b57      	ldr	r3, [pc, #348]	; (403c24 <indev_click_focus+0x170>)
  403ac8:	4798      	blx	r3
  403aca:	b9e8      	cbnz	r0, 403b08 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403acc:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403ace:	429e      	cmp	r6, r3
  403ad0:	d01a      	beq.n	403b08 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403ad2:	4630      	mov	r0, r6
  403ad4:	4b54      	ldr	r3, [pc, #336]	; (403c28 <indev_click_focus+0x174>)
  403ad6:	4798      	blx	r3
  403ad8:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403ada:	6a20      	ldr	r0, [r4, #32]
  403adc:	b1a8      	cbz	r0, 403b0a <indev_click_focus+0x56>
  403ade:	4b52      	ldr	r3, [pc, #328]	; (403c28 <indev_click_focus+0x174>)
  403ae0:	4798      	blx	r3
  403ae2:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403ae4:	42ab      	cmp	r3, r5
  403ae6:	d012      	beq.n	403b0e <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403ae8:	2b00      	cmp	r3, #0
  403aea:	d044      	beq.n	403b76 <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403aec:	6a20      	ldr	r0, [r4, #32]
  403aee:	2800      	cmp	r0, #0
  403af0:	d074      	beq.n	403bdc <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403af2:	2b00      	cmp	r3, #0
  403af4:	d055      	beq.n	403ba2 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403af6:	2200      	movs	r2, #0
  403af8:	2115      	movs	r1, #21
  403afa:	4b4c      	ldr	r3, [pc, #304]	; (403c2c <indev_click_focus+0x178>)
  403afc:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403afe:	4620      	mov	r0, r4
  403b00:	4b4b      	ldr	r3, [pc, #300]	; (403c30 <indev_click_focus+0x17c>)
  403b02:	4798      	blx	r3
  403b04:	2800      	cmp	r0, #0
  403b06:	d05f      	beq.n	403bc8 <indev_click_focus+0x114>
  403b08:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403b0a:	2300      	movs	r3, #0
  403b0c:	e7ea      	b.n	403ae4 <indev_click_focus+0x30>
            if(g_act) {
  403b0e:	b145      	cbz	r5, 403b22 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403b10:	4630      	mov	r0, r6
  403b12:	4b48      	ldr	r3, [pc, #288]	; (403c34 <indev_click_focus+0x180>)
  403b14:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b16:	4620      	mov	r0, r4
  403b18:	4b45      	ldr	r3, [pc, #276]	; (403c30 <indev_click_focus+0x17c>)
  403b1a:	4798      	blx	r3
  403b1c:	2800      	cmp	r0, #0
  403b1e:	d065      	beq.n	403bec <indev_click_focus+0x138>
  403b20:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403b22:	6a20      	ldr	r0, [r4, #32]
  403b24:	b190      	cbz	r0, 403b4c <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403b26:	2200      	movs	r2, #0
  403b28:	2117      	movs	r1, #23
  403b2a:	4b40      	ldr	r3, [pc, #256]	; (403c2c <indev_click_focus+0x178>)
  403b2c:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403b2e:	4620      	mov	r0, r4
  403b30:	4b3f      	ldr	r3, [pc, #252]	; (403c30 <indev_click_focus+0x17c>)
  403b32:	4798      	blx	r3
  403b34:	2800      	cmp	r0, #0
  403b36:	d1e7      	bne.n	403b08 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403b38:	2200      	movs	r2, #0
  403b3a:	210e      	movs	r1, #14
  403b3c:	6a20      	ldr	r0, [r4, #32]
  403b3e:	4b3e      	ldr	r3, [pc, #248]	; (403c38 <indev_click_focus+0x184>)
  403b40:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403b42:	4620      	mov	r0, r4
  403b44:	4b3a      	ldr	r3, [pc, #232]	; (403c30 <indev_click_focus+0x17c>)
  403b46:	4798      	blx	r3
  403b48:	2800      	cmp	r0, #0
  403b4a:	d1dd      	bne.n	403b08 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403b4c:	2200      	movs	r2, #0
  403b4e:	2116      	movs	r1, #22
  403b50:	4630      	mov	r0, r6
  403b52:	4b36      	ldr	r3, [pc, #216]	; (403c2c <indev_click_focus+0x178>)
  403b54:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b56:	4620      	mov	r0, r4
  403b58:	4b35      	ldr	r3, [pc, #212]	; (403c30 <indev_click_focus+0x17c>)
  403b5a:	4798      	blx	r3
  403b5c:	2800      	cmp	r0, #0
  403b5e:	d1d3      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403b60:	2200      	movs	r2, #0
  403b62:	210d      	movs	r1, #13
  403b64:	4630      	mov	r0, r6
  403b66:	4b34      	ldr	r3, [pc, #208]	; (403c38 <indev_click_focus+0x184>)
  403b68:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b6a:	4620      	mov	r0, r4
  403b6c:	4b30      	ldr	r3, [pc, #192]	; (403c30 <indev_click_focus+0x17c>)
  403b6e:	4798      	blx	r3
  403b70:	2800      	cmp	r0, #0
  403b72:	d03b      	beq.n	403bec <indev_click_focus+0x138>
  403b74:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403b76:	6a20      	ldr	r0, [r4, #32]
  403b78:	2800      	cmp	r0, #0
  403b7a:	d0b7      	beq.n	403aec <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403b7c:	2200      	movs	r2, #0
  403b7e:	2117      	movs	r1, #23
  403b80:	4b2a      	ldr	r3, [pc, #168]	; (403c2c <indev_click_focus+0x178>)
  403b82:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b84:	4620      	mov	r0, r4
  403b86:	4b2a      	ldr	r3, [pc, #168]	; (403c30 <indev_click_focus+0x17c>)
  403b88:	4798      	blx	r3
  403b8a:	2800      	cmp	r0, #0
  403b8c:	d1bc      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403b8e:	2200      	movs	r2, #0
  403b90:	210e      	movs	r1, #14
  403b92:	6a20      	ldr	r0, [r4, #32]
  403b94:	4b28      	ldr	r3, [pc, #160]	; (403c38 <indev_click_focus+0x184>)
  403b96:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b98:	4620      	mov	r0, r4
  403b9a:	4b25      	ldr	r3, [pc, #148]	; (403c30 <indev_click_focus+0x17c>)
  403b9c:	4798      	blx	r3
  403b9e:	b1e8      	cbz	r0, 403bdc <indev_click_focus+0x128>
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403ba2:	2200      	movs	r2, #0
  403ba4:	2117      	movs	r1, #23
  403ba6:	4b21      	ldr	r3, [pc, #132]	; (403c2c <indev_click_focus+0x178>)
  403ba8:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403baa:	4620      	mov	r0, r4
  403bac:	4b20      	ldr	r3, [pc, #128]	; (403c30 <indev_click_focus+0x17c>)
  403bae:	4798      	blx	r3
  403bb0:	2800      	cmp	r0, #0
  403bb2:	d1a9      	bne.n	403b08 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403bb4:	2200      	movs	r2, #0
  403bb6:	210e      	movs	r1, #14
  403bb8:	6a20      	ldr	r0, [r4, #32]
  403bba:	4b1f      	ldr	r3, [pc, #124]	; (403c38 <indev_click_focus+0x184>)
  403bbc:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403bbe:	4620      	mov	r0, r4
  403bc0:	4b1b      	ldr	r3, [pc, #108]	; (403c30 <indev_click_focus+0x17c>)
  403bc2:	4798      	blx	r3
  403bc4:	b150      	cbz	r0, 403bdc <indev_click_focus+0x128>
  403bc6:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  403bc8:	2200      	movs	r2, #0
  403bca:	210f      	movs	r1, #15
  403bcc:	6a20      	ldr	r0, [r4, #32]
  403bce:	4b1a      	ldr	r3, [pc, #104]	; (403c38 <indev_click_focus+0x184>)
  403bd0:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403bd2:	4620      	mov	r0, r4
  403bd4:	4b16      	ldr	r3, [pc, #88]	; (403c30 <indev_click_focus+0x17c>)
  403bd6:	4798      	blx	r3
  403bd8:	2800      	cmp	r0, #0
  403bda:	d195      	bne.n	403b08 <indev_click_focus+0x54>
            if(g_act) {
  403bdc:	b14d      	cbz	r5, 403bf2 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  403bde:	4630      	mov	r0, r6
  403be0:	4b14      	ldr	r3, [pc, #80]	; (403c34 <indev_click_focus+0x180>)
  403be2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403be4:	4620      	mov	r0, r4
  403be6:	4b12      	ldr	r3, [pc, #72]	; (403c30 <indev_click_focus+0x17c>)
  403be8:	4798      	blx	r3
  403bea:	b908      	cbnz	r0, 403bf0 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  403bec:	6226      	str	r6, [r4, #32]
  403bee:	e78b      	b.n	403b08 <indev_click_focus+0x54>
  403bf0:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403bf2:	2200      	movs	r2, #0
  403bf4:	2116      	movs	r1, #22
  403bf6:	4630      	mov	r0, r6
  403bf8:	4b0c      	ldr	r3, [pc, #48]	; (403c2c <indev_click_focus+0x178>)
  403bfa:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403bfc:	4620      	mov	r0, r4
  403bfe:	4b0c      	ldr	r3, [pc, #48]	; (403c30 <indev_click_focus+0x17c>)
  403c00:	4798      	blx	r3
  403c02:	2800      	cmp	r0, #0
  403c04:	d180      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403c06:	2200      	movs	r2, #0
  403c08:	210d      	movs	r1, #13
  403c0a:	4630      	mov	r0, r6
  403c0c:	4b0a      	ldr	r3, [pc, #40]	; (403c38 <indev_click_focus+0x184>)
  403c0e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403c10:	4620      	mov	r0, r4
  403c12:	4b07      	ldr	r3, [pc, #28]	; (403c30 <indev_click_focus+0x17c>)
  403c14:	4798      	blx	r3
  403c16:	2800      	cmp	r0, #0
  403c18:	d0e8      	beq.n	403bec <indev_click_focus+0x138>
  403c1a:	e775      	b.n	403b08 <indev_click_focus+0x54>
  403c1c:	2040c380 	.word	0x2040c380
  403c20:	00408ae5 	.word	0x00408ae5
  403c24:	0040679d 	.word	0x0040679d
  403c28:	00407971 	.word	0x00407971
  403c2c:	004053a1 	.word	0x004053a1
  403c30:	004036e9 	.word	0x004036e9
  403c34:	004035c5 	.word	0x004035c5
  403c38:	00405339 	.word	0x00405339

00403c3c <indev_drag>:
{
  403c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c40:	b083      	sub	sp, #12
  403c42:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  403c44:	6980      	ldr	r0, [r0, #24]
  403c46:	4bb3      	ldr	r3, [pc, #716]	; (403f14 <indev_drag+0x2d8>)
  403c48:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403c4a:	b120      	cbz	r0, 403c56 <indev_drag+0x1a>
  403c4c:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  403c4e:	4bb2      	ldr	r3, [pc, #712]	; (403f18 <indev_drag+0x2dc>)
  403c50:	4798      	blx	r3
  403c52:	4680      	mov	r8, r0
  403c54:	b910      	cbnz	r0, 403c5c <indev_drag+0x20>
}
  403c56:	b003      	add	sp, #12
  403c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403c5c:	4628      	mov	r0, r5
  403c5e:	4baf      	ldr	r3, [pc, #700]	; (403f1c <indev_drag+0x2e0>)
  403c60:	4798      	blx	r3
  403c62:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  403c64:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c68:	f013 0f01 	tst.w	r3, #1
  403c6c:	d142      	bne.n	403cf4 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  403c6e:	89a3      	ldrh	r3, [r4, #12]
  403c70:	8a22      	ldrh	r2, [r4, #16]
  403c72:	4413      	add	r3, r2
  403c74:	b21b      	sxth	r3, r3
  403c76:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  403c78:	89e2      	ldrh	r2, [r4, #14]
  403c7a:	8a61      	ldrh	r1, [r4, #18]
  403c7c:	440a      	add	r2, r1
  403c7e:	b211      	sxth	r1, r2
  403c80:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403c82:	2803      	cmp	r0, #3
  403c84:	bf18      	it	ne
  403c86:	2801      	cmpne	r0, #1
  403c88:	bf0c      	ite	eq
  403c8a:	2001      	moveq	r0, #1
  403c8c:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403c8e:	1eb2      	subs	r2, r6, #2
  403c90:	b2d2      	uxtb	r2, r2
  403c92:	2a01      	cmp	r2, #1
  403c94:	d91e      	bls.n	403cd4 <indev_drag+0x98>
        bool ver_en = false;
  403c96:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c98:	2e04      	cmp	r6, #4
  403c9a:	d01d      	beq.n	403cd8 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  403c9c:	b138      	cbz	r0, 403cae <indev_drag+0x72>
  403c9e:	2b00      	cmp	r3, #0
  403ca0:	bfb8      	it	lt
  403ca2:	425b      	neglt	r3, r3
  403ca4:	4a9e      	ldr	r2, [pc, #632]	; (403f20 <indev_drag+0x2e4>)
  403ca6:	6812      	ldr	r2, [r2, #0]
  403ca8:	7d12      	ldrb	r2, [r2, #20]
  403caa:	4293      	cmp	r3, r2
  403cac:	da0a      	bge.n	403cc4 <indev_drag+0x88>
  403cae:	b317      	cbz	r7, 403cf6 <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  403cb0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403cb4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403cb8:	4b99      	ldr	r3, [pc, #612]	; (403f20 <indev_drag+0x2e4>)
  403cba:	681b      	ldr	r3, [r3, #0]
  403cbc:	7d1b      	ldrb	r3, [r3, #20]
  403cbe:	429a      	cmp	r2, r3
  403cc0:	f2c0 808d 	blt.w	403dde <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  403cc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cc8:	f043 0301 	orr.w	r3, r3, #1
  403ccc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  403cd0:	4647      	mov	r7, r8
  403cd2:	e010      	b.n	403cf6 <indev_drag+0xba>
            ver_en = true;
  403cd4:	4647      	mov	r7, r8
  403cd6:	e7df      	b.n	403c98 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403cd8:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  403cdc:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  403ce0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403ce4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403ce8:	4596      	cmp	lr, r2
  403cea:	dd01      	ble.n	403cf0 <indev_drag+0xb4>
                hor_en = true;
  403cec:	4640      	mov	r0, r8
  403cee:	e7d5      	b.n	403c9c <indev_drag+0x60>
                ver_en = true;
  403cf0:	4647      	mov	r7, r8
  403cf2:	e7d3      	b.n	403c9c <indev_drag+0x60>
    bool drag_just_started = false;
  403cf4:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  403cf6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cfa:	f013 0f01 	tst.w	r3, #1
  403cfe:	d0aa      	beq.n	403c56 <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  403d00:	68e3      	ldr	r3, [r4, #12]
  403d02:	2b00      	cmp	r3, #0
  403d04:	d0a7      	beq.n	403c56 <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  403d06:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  403d0a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403d0e:	4628      	mov	r0, r5
  403d10:	f8df 8234 	ldr.w	r8, [pc, #564]	; 403f48 <indev_drag+0x30c>
  403d14:	47c0      	blx	r8
  403d16:	4b83      	ldr	r3, [pc, #524]	; (403f24 <indev_drag+0x2e8>)
  403d18:	4798      	blx	r3
  403d1a:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403d1c:	4628      	mov	r0, r5
  403d1e:	47c0      	blx	r8
  403d20:	4b81      	ldr	r3, [pc, #516]	; (403f28 <indev_drag+0x2ec>)
  403d22:	4798      	blx	r3
  403d24:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  403d26:	4628      	mov	r0, r5
  403d28:	4b80      	ldr	r3, [pc, #512]	; (403f2c <indev_drag+0x2f0>)
  403d2a:	4798      	blx	r3
  403d2c:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  403d2e:	4628      	mov	r0, r5
  403d30:	4b7f      	ldr	r3, [pc, #508]	; (403f30 <indev_drag+0x2f4>)
  403d32:	4798      	blx	r3
  403d34:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  403d36:	2e03      	cmp	r6, #3
  403d38:	d053      	beq.n	403de2 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  403d3a:	2e01      	cmp	r6, #1
  403d3c:	d063      	beq.n	403e06 <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  403d3e:	2e02      	cmp	r6, #2
  403d40:	d071      	beq.n	403e26 <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403d42:	2e04      	cmp	r6, #4
  403d44:	d07f      	beq.n	403e46 <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  403d46:	2e03      	cmp	r6, #3
  403d48:	bf18      	it	ne
  403d4a:	2e01      	cmpne	r6, #1
  403d4c:	d00d      	beq.n	403d6a <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403d4e:	2e04      	cmp	r6, #4
  403d50:	d10f      	bne.n	403d72 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403d52:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403d56:	2a00      	cmp	r2, #0
  403d58:	bfb8      	it	lt
  403d5a:	4252      	neglt	r2, r2
  403d5c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403d60:	2b00      	cmp	r3, #0
  403d62:	bfb8      	it	lt
  403d64:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403d66:	429a      	cmp	r2, r3
  403d68:	dd03      	ble.n	403d72 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  403d6a:	89a3      	ldrh	r3, [r4, #12]
  403d6c:	4498      	add	r8, r3
  403d6e:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  403d72:	1eb3      	subs	r3, r6, #2
  403d74:	b2db      	uxtb	r3, r3
  403d76:	2b01      	cmp	r3, #1
  403d78:	f240 809f 	bls.w	403eba <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403d7c:	2e04      	cmp	r6, #4
  403d7e:	f000 808f 	beq.w	403ea0 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  403d82:	4b67      	ldr	r3, [pc, #412]	; (403f20 <indev_drag+0x2e4>)
  403d84:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  403d86:	68d8      	ldr	r0, [r3, #12]
  403d88:	4b6a      	ldr	r3, [pc, #424]	; (403f34 <indev_drag+0x2f8>)
  403d8a:	4798      	blx	r3
  403d8c:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  403d8e:	464a      	mov	r2, r9
  403d90:	4641      	mov	r1, r8
  403d92:	4628      	mov	r0, r5
  403d94:	4b68      	ldr	r3, [pc, #416]	; (403f38 <indev_drag+0x2fc>)
  403d96:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  403d98:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d9c:	f043 0302 	orr.w	r3, r3, #2
  403da0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403da4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  403da8:	459a      	cmp	sl, r3
  403daa:	f000 808b 	beq.w	403ec4 <indev_drag+0x288>
            if(drag_just_started) {
  403dae:	2f00      	cmp	r7, #0
  403db0:	f43f af51 	beq.w	403c56 <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  403db4:	69eb      	ldr	r3, [r5, #28]
  403db6:	4a5a      	ldr	r2, [pc, #360]	; (403f20 <indev_drag+0x2e4>)
  403db8:	6812      	ldr	r2, [r2, #0]
  403dba:	2111      	movs	r1, #17
  403dbc:	4628      	mov	r0, r5
  403dbe:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403dc0:	4620      	mov	r0, r4
  403dc2:	4b5e      	ldr	r3, [pc, #376]	; (403f3c <indev_drag+0x300>)
  403dc4:	4798      	blx	r3
  403dc6:	2800      	cmp	r0, #0
  403dc8:	f47f af45 	bne.w	403c56 <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  403dcc:	2200      	movs	r2, #0
  403dce:	2108      	movs	r1, #8
  403dd0:	4628      	mov	r0, r5
  403dd2:	4b5b      	ldr	r3, [pc, #364]	; (403f40 <indev_drag+0x304>)
  403dd4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403dd6:	4620      	mov	r0, r4
  403dd8:	4b58      	ldr	r3, [pc, #352]	; (403f3c <indev_drag+0x300>)
  403dda:	4798      	blx	r3
  403ddc:	e73b      	b.n	403c56 <indev_drag+0x1a>
    bool drag_just_started = false;
  403dde:	2700      	movs	r7, #0
  403de0:	e789      	b.n	403cf6 <indev_drag+0xba>
                if(drag_just_started) {
  403de2:	2f00      	cmp	r7, #0
  403de4:	d0af      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403de6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dea:	2203      	movs	r2, #3
  403dec:	f362 0384 	bfi	r3, r2, #2, #3
  403df0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  403df4:	8a23      	ldrh	r3, [r4, #16]
  403df6:	4498      	add	r8, r3
  403df8:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  403dfc:	8a63      	ldrh	r3, [r4, #18]
  403dfe:	4499      	add	r9, r3
  403e00:	fa0f f989 	sxth.w	r9, r9
  403e04:	e79f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e06:	2f00      	cmp	r7, #0
  403e08:	d09d      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403e0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e0e:	2201      	movs	r2, #1
  403e10:	f362 0384 	bfi	r3, r2, #2, #3
  403e14:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  403e18:	2300      	movs	r3, #0
  403e1a:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  403e1c:	8a23      	ldrh	r3, [r4, #16]
  403e1e:	4498      	add	r8, r3
  403e20:	fa0f f888 	sxth.w	r8, r8
  403e24:	e78f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e26:	2f00      	cmp	r7, #0
  403e28:	d08d      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403e2a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e2e:	2202      	movs	r2, #2
  403e30:	f362 0384 	bfi	r3, r2, #2, #3
  403e34:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  403e38:	2300      	movs	r3, #0
  403e3a:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  403e3c:	8a63      	ldrh	r3, [r4, #18]
  403e3e:	4499      	add	r9, r3
  403e40:	fa0f f989 	sxth.w	r9, r9
  403e44:	e77f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e46:	2f00      	cmp	r7, #0
  403e48:	f43f af7d 	beq.w	403d46 <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403e4c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403e50:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  403e54:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  403e58:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403e5c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  403e60:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  403e64:	4288      	cmp	r0, r1
  403e66:	dd0d      	ble.n	403e84 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403e68:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e6c:	2101      	movs	r1, #1
  403e6e:	f361 0384 	bfi	r3, r1, #2, #3
  403e72:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  403e76:	2300      	movs	r3, #0
  403e78:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  403e7a:	fa18 f882 	uxtah	r8, r8, r2
  403e7e:	fa0f f888 	sxth.w	r8, r8
  403e82:	e760      	b.n	403d46 <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403e84:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  403e88:	2102      	movs	r1, #2
  403e8a:	f361 0284 	bfi	r2, r1, #2, #3
  403e8e:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  403e92:	2200      	movs	r2, #0
  403e94:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  403e96:	fa19 f983 	uxtah	r9, r9, r3
  403e9a:	fa0f f989 	sxth.w	r9, r9
  403e9e:	e752      	b.n	403d46 <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403ea0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403ea4:	2a00      	cmp	r2, #0
  403ea6:	bfb8      	it	lt
  403ea8:	4252      	neglt	r2, r2
  403eaa:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403eae:	2b00      	cmp	r3, #0
  403eb0:	bfb8      	it	lt
  403eb2:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403eb4:	429a      	cmp	r2, r3
  403eb6:	f6bf af64 	bge.w	403d82 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  403eba:	89e3      	ldrh	r3, [r4, #14]
  403ebc:	4499      	add	r9, r3
  403ebe:	fa0f f989 	sxth.w	r9, r9
  403ec2:	e75e      	b.n	403d82 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403ec4:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  403ec8:	459b      	cmp	fp, r3
  403eca:	f47f af70 	bne.w	403dae <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403ece:	4628      	mov	r0, r5
  403ed0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403f48 <indev_drag+0x30c>
  403ed4:	47c0      	blx	r8
  403ed6:	4b13      	ldr	r3, [pc, #76]	; (403f24 <indev_drag+0x2e8>)
  403ed8:	4798      	blx	r3
  403eda:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403edc:	4628      	mov	r0, r5
  403ede:	47c0      	blx	r8
  403ee0:	4b11      	ldr	r3, [pc, #68]	; (403f28 <indev_drag+0x2ec>)
  403ee2:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  403ee4:	9b00      	ldr	r3, [sp, #0]
  403ee6:	461a      	mov	r2, r3
  403ee8:	9b01      	ldr	r3, [sp, #4]
  403eea:	454a      	cmp	r2, r9
  403eec:	bf08      	it	eq
  403eee:	4283      	cmpeq	r3, r0
  403ef0:	f47f af5d 	bne.w	403dae <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  403ef4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 403f20 <indev_drag+0x2e4>
  403ef8:	f8d8 3000 	ldr.w	r3, [r8]
  403efc:	68d8      	ldr	r0, [r3, #12]
  403efe:	4b0d      	ldr	r3, [pc, #52]	; (403f34 <indev_drag+0x2f8>)
  403f00:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  403f02:	f8d8 3000 	ldr.w	r3, [r8]
  403f06:	1b81      	subs	r1, r0, r6
  403f08:	b289      	uxth	r1, r1
  403f0a:	68d8      	ldr	r0, [r3, #12]
  403f0c:	4b0d      	ldr	r3, [pc, #52]	; (403f44 <indev_drag+0x308>)
  403f0e:	4798      	blx	r3
  403f10:	e74d      	b.n	403dae <indev_drag+0x172>
  403f12:	bf00      	nop
  403f14:	00403705 	.word	0x00403705
  403f18:	004061b9 	.word	0x004061b9
  403f1c:	004061e5 	.word	0x004061e5
  403f20:	2040c37c 	.word	0x2040c37c
  403f24:	0040561d 	.word	0x0040561d
  403f28:	0040564d 	.word	0x0040564d
  403f2c:	0040559d 	.word	0x0040559d
  403f30:	004055dd 	.word	0x004055dd
  403f34:	00414509 	.word	0x00414509
  403f38:	00405aad 	.word	0x00405aad
  403f3c:	004036e9 	.word	0x004036e9
  403f40:	00405339 	.word	0x00405339
  403f44:	00414513 	.word	0x00414513
  403f48:	00405449 	.word	0x00405449

00403f4c <indev_gesture>:
{
  403f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  403f4e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403f52:	f013 0f20 	tst.w	r3, #32
  403f56:	d153      	bne.n	404000 <indev_gesture+0xb4>
  403f58:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  403f5a:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403f5c:	e003      	b.n	403f66 <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  403f5e:	4620      	mov	r0, r4
  403f60:	4b33      	ldr	r3, [pc, #204]	; (404030 <indev_gesture+0xe4>)
  403f62:	4798      	blx	r3
  403f64:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403f66:	b124      	cbz	r4, 403f72 <indev_gesture+0x26>
  403f68:	4620      	mov	r0, r4
  403f6a:	4b32      	ldr	r3, [pc, #200]	; (404034 <indev_gesture+0xe8>)
  403f6c:	4798      	blx	r3
  403f6e:	2800      	cmp	r0, #0
  403f70:	d1f5      	bne.n	403f5e <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  403f72:	2c00      	cmp	r4, #0
  403f74:	d044      	beq.n	404000 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403f76:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403f7a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  403f7e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  403f82:	4a2d      	ldr	r2, [pc, #180]	; (404038 <indev_gesture+0xec>)
  403f84:	6812      	ldr	r2, [r2, #0]
  403f86:	7d91      	ldrb	r1, [r2, #22]
  403f88:	4288      	cmp	r0, r1
  403f8a:	da09      	bge.n	403fa0 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  403f8c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  403f90:	2800      	cmp	r0, #0
  403f92:	bfb8      	it	lt
  403f94:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403f96:	4281      	cmp	r1, r0
  403f98:	dd02      	ble.n	403fa0 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  403f9a:	2100      	movs	r1, #0
  403f9c:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  403f9e:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  403fa0:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  403fa2:	fa11 f383 	uxtah	r3, r1, r3
  403fa6:	b21b      	sxth	r3, r3
  403fa8:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  403faa:	89e9      	ldrh	r1, [r5, #14]
  403fac:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  403fae:	4401      	add	r1, r0
  403fb0:	b209      	sxth	r1, r1
  403fb2:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403fb4:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  403fb8:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  403fbc:	7dd0      	ldrb	r0, [r2, #23]
  403fbe:	4286      	cmp	r6, r0
  403fc0:	dc05      	bgt.n	403fce <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  403fc2:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  403fc6:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403fca:	42b8      	cmp	r0, r7
  403fcc:	da18      	bge.n	404000 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  403fce:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  403fd2:	f040 0020 	orr.w	r0, r0, #32
  403fd6:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  403fda:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  403fde:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  403fe2:	4286      	cmp	r6, r0
  403fe4:	dd11      	ble.n	40400a <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  403fe6:	2b00      	cmp	r3, #0
  403fe8:	dd0b      	ble.n	404002 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  403fea:	2303      	movs	r3, #3
  403fec:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  403ff0:	69e3      	ldr	r3, [r4, #28]
  403ff2:	2114      	movs	r1, #20
  403ff4:	4620      	mov	r0, r4
  403ff6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403ff8:	4628      	mov	r0, r5
  403ffa:	4b10      	ldr	r3, [pc, #64]	; (40403c <indev_gesture+0xf0>)
  403ffc:	4798      	blx	r3
  403ffe:	b170      	cbz	r0, 40401e <indev_gesture+0xd2>
  404000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  404002:	2302      	movs	r3, #2
  404004:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404008:	e7f2      	b.n	403ff0 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  40400a:	2900      	cmp	r1, #0
  40400c:	dd03      	ble.n	404016 <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  40400e:	2301      	movs	r3, #1
  404010:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404014:	e7ec      	b.n	403ff0 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  404016:	2300      	movs	r3, #0
  404018:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  40401c:	e7e8      	b.n	403ff0 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  40401e:	2200      	movs	r2, #0
  404020:	210b      	movs	r1, #11
  404022:	4620      	mov	r0, r4
  404024:	4b06      	ldr	r3, [pc, #24]	; (404040 <indev_gesture+0xf4>)
  404026:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404028:	4628      	mov	r0, r5
  40402a:	4b04      	ldr	r3, [pc, #16]	; (40403c <indev_gesture+0xf0>)
  40402c:	4798      	blx	r3
  40402e:	e7e7      	b.n	404000 <indev_gesture+0xb4>
  404030:	00405449 	.word	0x00405449
  404034:	00406247 	.word	0x00406247
  404038:	2040c37c 	.word	0x2040c37c
  40403c:	004036e9 	.word	0x004036e9
  404040:	00405339 	.word	0x00405339

00404044 <indev_keypad_proc>:
{
  404044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404046:	7b8b      	ldrb	r3, [r1, #14]
  404048:	2b01      	cmp	r3, #1
  40404a:	d02f      	beq.n	4040ac <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  40404c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404050:	f013 0f08 	tst.w	r3, #8
  404054:	d00b      	beq.n	40406e <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  404056:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  40405a:	2200      	movs	r2, #0
  40405c:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  40405e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404062:	f362 0300 	bfi	r3, r2, #0, #1
  404066:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  40406a:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  40406e:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  404070:	b1de      	cbz	r6, 4040aa <indev_keypad_proc+0x66>
  404072:	460d      	mov	r5, r1
  404074:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  404076:	4630      	mov	r0, r6
  404078:	4b95      	ldr	r3, [pc, #596]	; (4042d0 <indev_keypad_proc+0x28c>)
  40407a:	4798      	blx	r3
  40407c:	4b95      	ldr	r3, [pc, #596]	; (4042d4 <indev_keypad_proc+0x290>)
  40407e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404080:	b198      	cbz	r0, 4040aa <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  404082:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  404084:	686b      	ldr	r3, [r5, #4]
  404086:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  404088:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  40408c:	7bab      	ldrb	r3, [r5, #14]
  40408e:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404092:	7bab      	ldrb	r3, [r5, #14]
  404094:	2b01      	cmp	r3, #1
  404096:	d00f      	beq.n	4040b8 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  404098:	2b01      	cmp	r3, #1
  40409a:	d066      	beq.n	40416a <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  40409c:	b913      	cbnz	r3, 4040a4 <indev_keypad_proc+0x60>
  40409e:	2a01      	cmp	r2, #1
  4040a0:	f000 810a 	beq.w	4042b8 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  4040a4:	2200      	movs	r2, #0
  4040a6:	4b8b      	ldr	r3, [pc, #556]	; (4042d4 <indev_keypad_proc+0x290>)
  4040a8:	601a      	str	r2, [r3, #0]
  4040aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4040ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4040b0:	f013 0f08 	tst.w	r3, #8
  4040b4:	d0ca      	beq.n	40404c <indev_keypad_proc+0x8>
  4040b6:	e7f8      	b.n	4040aa <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  4040b8:	2a00      	cmp	r2, #0
  4040ba:	d1ed      	bne.n	404098 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  4040bc:	4b86      	ldr	r3, [pc, #536]	; (4042d8 <indev_keypad_proc+0x294>)
  4040be:	4798      	blx	r3
  4040c0:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  4040c2:	6869      	ldr	r1, [r5, #4]
  4040c4:	290a      	cmp	r1, #10
  4040c6:	d009      	beq.n	4040dc <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  4040c8:	291b      	cmp	r1, #27
  4040ca:	d022      	beq.n	404112 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  4040cc:	2909      	cmp	r1, #9
  4040ce:	d030      	beq.n	404132 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  4040d0:	290b      	cmp	r1, #11
  4040d2:	d03c      	beq.n	40414e <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  4040d4:	4630      	mov	r0, r6
  4040d6:	4b81      	ldr	r3, [pc, #516]	; (4042dc <indev_keypad_proc+0x298>)
  4040d8:	4798      	blx	r3
  4040da:	e7e3      	b.n	4040a4 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  4040dc:	4630      	mov	r0, r6
  4040de:	4b7f      	ldr	r3, [pc, #508]	; (4042dc <indev_keypad_proc+0x298>)
  4040e0:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4040e2:	4b7c      	ldr	r3, [pc, #496]	; (4042d4 <indev_keypad_proc+0x290>)
  4040e4:	6818      	ldr	r0, [r3, #0]
  4040e6:	69c3      	ldr	r3, [r0, #28]
  4040e8:	2200      	movs	r2, #0
  4040ea:	210b      	movs	r1, #11
  4040ec:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4040ee:	341c      	adds	r4, #28
  4040f0:	4620      	mov	r0, r4
  4040f2:	4b7b      	ldr	r3, [pc, #492]	; (4042e0 <indev_keypad_proc+0x29c>)
  4040f4:	4798      	blx	r3
  4040f6:	2800      	cmp	r0, #0
  4040f8:	d1d7      	bne.n	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4040fa:	2200      	movs	r2, #0
  4040fc:	4611      	mov	r1, r2
  4040fe:	4b75      	ldr	r3, [pc, #468]	; (4042d4 <indev_keypad_proc+0x290>)
  404100:	6818      	ldr	r0, [r3, #0]
  404102:	4b78      	ldr	r3, [pc, #480]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404104:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404106:	4620      	mov	r0, r4
  404108:	4b75      	ldr	r3, [pc, #468]	; (4042e0 <indev_keypad_proc+0x29c>)
  40410a:	4798      	blx	r3
  40410c:	2800      	cmp	r0, #0
  40410e:	d0c9      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404112:	4630      	mov	r0, r6
  404114:	4b71      	ldr	r3, [pc, #452]	; (4042dc <indev_keypad_proc+0x298>)
  404116:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404118:	2200      	movs	r2, #0
  40411a:	2114      	movs	r1, #20
  40411c:	4b6d      	ldr	r3, [pc, #436]	; (4042d4 <indev_keypad_proc+0x290>)
  40411e:	6818      	ldr	r0, [r3, #0]
  404120:	4b70      	ldr	r3, [pc, #448]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404122:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404124:	f104 001c 	add.w	r0, r4, #28
  404128:	4b6d      	ldr	r3, [pc, #436]	; (4042e0 <indev_keypad_proc+0x29c>)
  40412a:	4798      	blx	r3
  40412c:	2800      	cmp	r0, #0
  40412e:	d0b9      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404132:	2100      	movs	r1, #0
  404134:	4630      	mov	r0, r6
  404136:	4b6c      	ldr	r3, [pc, #432]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404138:	4798      	blx	r3
            lv_group_focus_next(g);
  40413a:	4630      	mov	r0, r6
  40413c:	4b6b      	ldr	r3, [pc, #428]	; (4042ec <indev_keypad_proc+0x2a8>)
  40413e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404140:	f104 001c 	add.w	r0, r4, #28
  404144:	4b66      	ldr	r3, [pc, #408]	; (4042e0 <indev_keypad_proc+0x29c>)
  404146:	4798      	blx	r3
  404148:	2800      	cmp	r0, #0
  40414a:	d0ab      	beq.n	4040a4 <indev_keypad_proc+0x60>
  40414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40414e:	2100      	movs	r1, #0
  404150:	4630      	mov	r0, r6
  404152:	4b65      	ldr	r3, [pc, #404]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404154:	4798      	blx	r3
            lv_group_focus_prev(g);
  404156:	4630      	mov	r0, r6
  404158:	4b65      	ldr	r3, [pc, #404]	; (4042f0 <indev_keypad_proc+0x2ac>)
  40415a:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40415c:	f104 001c 	add.w	r0, r4, #28
  404160:	4b5f      	ldr	r3, [pc, #380]	; (4042e0 <indev_keypad_proc+0x29c>)
  404162:	4798      	blx	r3
  404164:	2800      	cmp	r0, #0
  404166:	d09d      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  40416a:	2a01      	cmp	r2, #1
  40416c:	d196      	bne.n	40409c <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  40416e:	686b      	ldr	r3, [r5, #4]
  404170:	2b0a      	cmp	r3, #10
  404172:	d024      	beq.n	4041be <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404174:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404178:	f013 0f01 	tst.w	r3, #1
  40417c:	d037      	beq.n	4041ee <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  40417e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404182:	f013 0f01 	tst.w	r3, #1
  404186:	d08d      	beq.n	4040a4 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404188:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  40418a:	4b5a      	ldr	r3, [pc, #360]	; (4042f4 <indev_keypad_proc+0x2b0>)
  40418c:	4798      	blx	r3
  40418e:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  404190:	4298      	cmp	r0, r3
  404192:	d987      	bls.n	4040a4 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404194:	4b50      	ldr	r3, [pc, #320]	; (4042d8 <indev_keypad_proc+0x294>)
  404196:	4798      	blx	r3
  404198:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40419a:	6869      	ldr	r1, [r5, #4]
  40419c:	290a      	cmp	r1, #10
  40419e:	d053      	beq.n	404248 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  4041a0:	2909      	cmp	r1, #9
  4041a2:	d06b      	beq.n	40427c <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  4041a4:	290b      	cmp	r1, #11
  4041a6:	d078      	beq.n	40429a <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  4041a8:	4630      	mov	r0, r6
  4041aa:	4b4c      	ldr	r3, [pc, #304]	; (4042dc <indev_keypad_proc+0x298>)
  4041ac:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041ae:	f104 001c 	add.w	r0, r4, #28
  4041b2:	4b4b      	ldr	r3, [pc, #300]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041b4:	4798      	blx	r3
  4041b6:	2800      	cmp	r0, #0
  4041b8:	f43f af74 	beq.w	4040a4 <indev_keypad_proc+0x60>
  4041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  4041be:	69c3      	ldr	r3, [r0, #28]
  4041c0:	2200      	movs	r2, #0
  4041c2:	210c      	movs	r1, #12
  4041c4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4041c6:	f104 071c 	add.w	r7, r4, #28
  4041ca:	4638      	mov	r0, r7
  4041cc:	4b44      	ldr	r3, [pc, #272]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041ce:	4798      	blx	r3
  4041d0:	2800      	cmp	r0, #0
  4041d2:	f47f af6a 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  4041d6:	2200      	movs	r2, #0
  4041d8:	2101      	movs	r1, #1
  4041da:	4b3e      	ldr	r3, [pc, #248]	; (4042d4 <indev_keypad_proc+0x290>)
  4041dc:	6818      	ldr	r0, [r3, #0]
  4041de:	4b41      	ldr	r3, [pc, #260]	; (4042e4 <indev_keypad_proc+0x2a0>)
  4041e0:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4041e2:	4638      	mov	r0, r7
  4041e4:	4b3e      	ldr	r3, [pc, #248]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041e6:	4798      	blx	r3
  4041e8:	2800      	cmp	r0, #0
  4041ea:	d0c3      	beq.n	404174 <indev_keypad_proc+0x130>
  4041ec:	e75d      	b.n	4040aa <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4041ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4041f0:	4b40      	ldr	r3, [pc, #256]	; (4042f4 <indev_keypad_proc+0x2b0>)
  4041f2:	4798      	blx	r3
  4041f4:	8b23      	ldrh	r3, [r4, #24]
  4041f6:	4298      	cmp	r0, r3
  4041f8:	d9c1      	bls.n	40417e <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  4041fa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4041fe:	f043 0301 	orr.w	r3, r3, #1
  404202:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  404206:	686b      	ldr	r3, [r5, #4]
  404208:	2b0a      	cmp	r3, #10
  40420a:	f47f af4b 	bne.w	4040a4 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  40420e:	4b32      	ldr	r3, [pc, #200]	; (4042d8 <indev_keypad_proc+0x294>)
  404210:	4798      	blx	r3
  404212:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404214:	4b2f      	ldr	r3, [pc, #188]	; (4042d4 <indev_keypad_proc+0x290>)
  404216:	6818      	ldr	r0, [r3, #0]
  404218:	69c3      	ldr	r3, [r0, #28]
  40421a:	2200      	movs	r2, #0
  40421c:	210f      	movs	r1, #15
  40421e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404220:	341c      	adds	r4, #28
  404222:	4620      	mov	r0, r4
  404224:	4b2e      	ldr	r3, [pc, #184]	; (4042e0 <indev_keypad_proc+0x29c>)
  404226:	4798      	blx	r3
  404228:	2800      	cmp	r0, #0
  40422a:	f47f af3e 	bne.w	4040aa <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40422e:	2200      	movs	r2, #0
  404230:	2104      	movs	r1, #4
  404232:	4b28      	ldr	r3, [pc, #160]	; (4042d4 <indev_keypad_proc+0x290>)
  404234:	6818      	ldr	r0, [r3, #0]
  404236:	4b2b      	ldr	r3, [pc, #172]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404238:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40423a:	4620      	mov	r0, r4
  40423c:	4b28      	ldr	r3, [pc, #160]	; (4042e0 <indev_keypad_proc+0x29c>)
  40423e:	4798      	blx	r3
  404240:	2800      	cmp	r0, #0
  404242:	f43f af2f 	beq.w	4040a4 <indev_keypad_proc+0x60>
  404246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404248:	4b22      	ldr	r3, [pc, #136]	; (4042d4 <indev_keypad_proc+0x290>)
  40424a:	6818      	ldr	r0, [r3, #0]
  40424c:	69c3      	ldr	r3, [r0, #28]
  40424e:	2200      	movs	r2, #0
  404250:	2110      	movs	r1, #16
  404252:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404254:	341c      	adds	r4, #28
  404256:	4620      	mov	r0, r4
  404258:	4b21      	ldr	r3, [pc, #132]	; (4042e0 <indev_keypad_proc+0x29c>)
  40425a:	4798      	blx	r3
  40425c:	2800      	cmp	r0, #0
  40425e:	f47f af24 	bne.w	4040aa <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404262:	2200      	movs	r2, #0
  404264:	2105      	movs	r1, #5
  404266:	4b1b      	ldr	r3, [pc, #108]	; (4042d4 <indev_keypad_proc+0x290>)
  404268:	6818      	ldr	r0, [r3, #0]
  40426a:	4b1e      	ldr	r3, [pc, #120]	; (4042e4 <indev_keypad_proc+0x2a0>)
  40426c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40426e:	4620      	mov	r0, r4
  404270:	4b1b      	ldr	r3, [pc, #108]	; (4042e0 <indev_keypad_proc+0x29c>)
  404272:	4798      	blx	r3
  404274:	2800      	cmp	r0, #0
  404276:	f43f af15 	beq.w	4040a4 <indev_keypad_proc+0x60>
  40427a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40427c:	2100      	movs	r1, #0
  40427e:	4630      	mov	r0, r6
  404280:	4b19      	ldr	r3, [pc, #100]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404282:	4798      	blx	r3
                lv_group_focus_next(g);
  404284:	4630      	mov	r0, r6
  404286:	4b19      	ldr	r3, [pc, #100]	; (4042ec <indev_keypad_proc+0x2a8>)
  404288:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40428a:	f104 001c 	add.w	r0, r4, #28
  40428e:	4b14      	ldr	r3, [pc, #80]	; (4042e0 <indev_keypad_proc+0x29c>)
  404290:	4798      	blx	r3
  404292:	2800      	cmp	r0, #0
  404294:	f43f af06 	beq.w	4040a4 <indev_keypad_proc+0x60>
  404298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40429a:	2100      	movs	r1, #0
  40429c:	4630      	mov	r0, r6
  40429e:	4b12      	ldr	r3, [pc, #72]	; (4042e8 <indev_keypad_proc+0x2a4>)
  4042a0:	4798      	blx	r3
                lv_group_focus_prev(g);
  4042a2:	4630      	mov	r0, r6
  4042a4:	4b12      	ldr	r3, [pc, #72]	; (4042f0 <indev_keypad_proc+0x2ac>)
  4042a6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4042a8:	f104 001c 	add.w	r0, r4, #28
  4042ac:	4b0c      	ldr	r3, [pc, #48]	; (4042e0 <indev_keypad_proc+0x29c>)
  4042ae:	4798      	blx	r3
  4042b0:	2800      	cmp	r0, #0
  4042b2:	f43f aef7 	beq.w	4040a4 <indev_keypad_proc+0x60>
  4042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  4042b8:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  4042ba:	290a      	cmp	r1, #10
  4042bc:	d01c      	beq.n	4042f8 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  4042be:	2200      	movs	r2, #0
  4042c0:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  4042c2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4042c6:	f362 0300 	bfi	r3, r2, #0, #1
  4042ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  4042ce:	e6e9      	b.n	4040a4 <indev_keypad_proc+0x60>
  4042d0:	00403529 	.word	0x00403529
  4042d4:	2040c380 	.word	0x2040c380
  4042d8:	0041480d 	.word	0x0041480d
  4042dc:	0040353d 	.word	0x0040353d
  4042e0:	004036e9 	.word	0x004036e9
  4042e4:	00405339 	.word	0x00405339
  4042e8:	00403575 	.word	0x00403575
  4042ec:	0040338d 	.word	0x0040338d
  4042f0:	004033a5 	.word	0x004033a5
  4042f4:	00414829 	.word	0x00414829
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4042f8:	69c3      	ldr	r3, [r0, #28]
  4042fa:	2200      	movs	r2, #0
  4042fc:	210e      	movs	r1, #14
  4042fe:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404300:	f104 051c 	add.w	r5, r4, #28
  404304:	4628      	mov	r0, r5
  404306:	4b17      	ldr	r3, [pc, #92]	; (404364 <indev_keypad_proc+0x320>)
  404308:	4798      	blx	r3
  40430a:	2800      	cmp	r0, #0
  40430c:	f47f aecd 	bne.w	4040aa <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404310:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404314:	f013 0f01 	tst.w	r3, #1
  404318:	d10b      	bne.n	404332 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40431a:	2200      	movs	r2, #0
  40431c:	2103      	movs	r1, #3
  40431e:	4b12      	ldr	r3, [pc, #72]	; (404368 <indev_keypad_proc+0x324>)
  404320:	6818      	ldr	r0, [r3, #0]
  404322:	4b12      	ldr	r3, [pc, #72]	; (40436c <indev_keypad_proc+0x328>)
  404324:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404326:	4628      	mov	r0, r5
  404328:	4b0e      	ldr	r3, [pc, #56]	; (404364 <indev_keypad_proc+0x320>)
  40432a:	4798      	blx	r3
  40432c:	2800      	cmp	r0, #0
  40432e:	f47f aebc 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404332:	2200      	movs	r2, #0
  404334:	2106      	movs	r1, #6
  404336:	4b0c      	ldr	r3, [pc, #48]	; (404368 <indev_keypad_proc+0x324>)
  404338:	6818      	ldr	r0, [r3, #0]
  40433a:	4b0c      	ldr	r3, [pc, #48]	; (40436c <indev_keypad_proc+0x328>)
  40433c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40433e:	4628      	mov	r0, r5
  404340:	4b08      	ldr	r3, [pc, #32]	; (404364 <indev_keypad_proc+0x320>)
  404342:	4798      	blx	r3
  404344:	2800      	cmp	r0, #0
  404346:	f47f aeb0 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40434a:	2200      	movs	r2, #0
  40434c:	2107      	movs	r1, #7
  40434e:	4b06      	ldr	r3, [pc, #24]	; (404368 <indev_keypad_proc+0x324>)
  404350:	6818      	ldr	r0, [r3, #0]
  404352:	4b06      	ldr	r3, [pc, #24]	; (40436c <indev_keypad_proc+0x328>)
  404354:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404356:	4628      	mov	r0, r5
  404358:	4b02      	ldr	r3, [pc, #8]	; (404364 <indev_keypad_proc+0x320>)
  40435a:	4798      	blx	r3
  40435c:	2800      	cmp	r0, #0
  40435e:	d0ae      	beq.n	4042be <indev_keypad_proc+0x27a>
  404360:	e6a3      	b.n	4040aa <indev_keypad_proc+0x66>
  404362:	bf00      	nop
  404364:	004036e9 	.word	0x004036e9
  404368:	2040c380 	.word	0x2040c380
  40436c:	00405339 	.word	0x00405339

00404370 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404370:	7b8b      	ldrb	r3, [r1, #14]
  404372:	2b01      	cmp	r3, #1
  404374:	d040      	beq.n	4043f8 <indev_encoder_proc+0x88>
{
  404376:	b5f0      	push	{r4, r5, r6, r7, lr}
  404378:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  40437a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40437e:	f013 0f08 	tst.w	r3, #8
  404382:	d00b      	beq.n	40439c <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  404384:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  404388:	2200      	movs	r2, #0
  40438a:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  40438c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404390:	f362 0300 	bfi	r3, r2, #0, #1
  404394:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  404398:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  40439c:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  4043a0:	7b8b      	ldrb	r3, [r1, #14]
  4043a2:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  4043a6:	684b      	ldr	r3, [r1, #4]
  4043a8:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  4043aa:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  4043ac:	b316      	cbz	r6, 4043f4 <indev_encoder_proc+0x84>
  4043ae:	460c      	mov	r4, r1
  4043b0:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  4043b2:	4630      	mov	r0, r6
  4043b4:	4b90      	ldr	r3, [pc, #576]	; (4045f8 <indev_encoder_proc+0x288>)
  4043b6:	4798      	blx	r3
  4043b8:	4b90      	ldr	r3, [pc, #576]	; (4045fc <indev_encoder_proc+0x28c>)
  4043ba:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4043bc:	b1d0      	cbz	r0, 4043f4 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  4043be:	7ba3      	ldrb	r3, [r4, #14]
  4043c0:	b10b      	cbz	r3, 4043c6 <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  4043c2:	2300      	movs	r3, #0
  4043c4:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  4043c6:	4630      	mov	r0, r6
  4043c8:	4b8b      	ldr	r3, [pc, #556]	; (4045f8 <indev_encoder_proc+0x288>)
  4043ca:	4798      	blx	r3
  4043cc:	4b8b      	ldr	r3, [pc, #556]	; (4045fc <indev_encoder_proc+0x28c>)
  4043ce:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4043d0:	b180      	cbz	r0, 4043f4 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  4043d2:	7ba3      	ldrb	r3, [r4, #14]
  4043d4:	2b01      	cmp	r3, #1
  4043d6:	d015      	beq.n	404404 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  4043d8:	2b01      	cmp	r3, #1
  4043da:	d068      	beq.n	4044ae <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  4043dc:	b913      	cbnz	r3, 4043e4 <indev_encoder_proc+0x74>
  4043de:	2f01      	cmp	r7, #1
  4043e0:	f000 80fe 	beq.w	4045e0 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  4043e4:	2200      	movs	r2, #0
  4043e6:	4b85      	ldr	r3, [pc, #532]	; (4045fc <indev_encoder_proc+0x28c>)
  4043e8:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  4043ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ee:	2b00      	cmp	r3, #0
  4043f0:	f040 81aa 	bne.w	404748 <indev_encoder_proc+0x3d8>
}
  4043f4:	b003      	add	sp, #12
  4043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4043f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4043fc:	f013 0f08 	tst.w	r3, #8
  404400:	d0b9      	beq.n	404376 <indev_encoder_proc+0x6>
  404402:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404404:	2f00      	cmp	r7, #0
  404406:	d1e7      	bne.n	4043d8 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  404408:	4b7d      	ldr	r3, [pc, #500]	; (404600 <indev_encoder_proc+0x290>)
  40440a:	4798      	blx	r3
  40440c:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40440e:	6861      	ldr	r1, [r4, #4]
  404410:	290a      	cmp	r1, #10
  404412:	d009      	beq.n	404428 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404414:	2914      	cmp	r1, #20
  404416:	d030      	beq.n	40447a <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  404418:	2913      	cmp	r1, #19
  40441a:	d033      	beq.n	404484 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  40441c:	291b      	cmp	r1, #27
  40441e:	d036      	beq.n	40448e <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404420:	4630      	mov	r0, r6
  404422:	4b78      	ldr	r3, [pc, #480]	; (404604 <indev_encoder_proc+0x294>)
  404424:	4798      	blx	r3
  404426:	e7dd      	b.n	4043e4 <indev_encoder_proc+0x74>
            bool editable = false;
  404428:	aa02      	add	r2, sp, #8
  40442a:	2300      	movs	r3, #0
  40442c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404430:	4b72      	ldr	r3, [pc, #456]	; (4045fc <indev_encoder_proc+0x28c>)
  404432:	6818      	ldr	r0, [r3, #0]
  404434:	69c3      	ldr	r3, [r0, #28]
  404436:	2119      	movs	r1, #25
  404438:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40443a:	4630      	mov	r0, r6
  40443c:	4b72      	ldr	r3, [pc, #456]	; (404608 <indev_encoder_proc+0x298>)
  40443e:	4798      	blx	r3
  404440:	b918      	cbnz	r0, 40444a <indev_encoder_proc+0xda>
  404442:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404446:	2b00      	cmp	r3, #0
  404448:	d1cc      	bne.n	4043e4 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  40444a:	4b6c      	ldr	r3, [pc, #432]	; (4045fc <indev_encoder_proc+0x28c>)
  40444c:	6818      	ldr	r0, [r3, #0]
  40444e:	69c3      	ldr	r3, [r0, #28]
  404450:	2200      	movs	r2, #0
  404452:	210b      	movs	r1, #11
  404454:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404456:	351c      	adds	r5, #28
  404458:	4628      	mov	r0, r5
  40445a:	4b6c      	ldr	r3, [pc, #432]	; (40460c <indev_encoder_proc+0x29c>)
  40445c:	4798      	blx	r3
  40445e:	2800      	cmp	r0, #0
  404460:	d1c8      	bne.n	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404462:	2200      	movs	r2, #0
  404464:	4611      	mov	r1, r2
  404466:	4b65      	ldr	r3, [pc, #404]	; (4045fc <indev_encoder_proc+0x28c>)
  404468:	6818      	ldr	r0, [r3, #0]
  40446a:	4b69      	ldr	r3, [pc, #420]	; (404610 <indev_encoder_proc+0x2a0>)
  40446c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40446e:	4628      	mov	r0, r5
  404470:	4b66      	ldr	r3, [pc, #408]	; (40460c <indev_encoder_proc+0x29c>)
  404472:	4798      	blx	r3
  404474:	2800      	cmp	r0, #0
  404476:	d0b5      	beq.n	4043e4 <indev_encoder_proc+0x74>
  404478:	e7bc      	b.n	4043f4 <indev_encoder_proc+0x84>
            data->enc_diff--;
  40447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40447e:	3b01      	subs	r3, #1
  404480:	81a3      	strh	r3, [r4, #12]
  404482:	e7af      	b.n	4043e4 <indev_encoder_proc+0x74>
            data->enc_diff++;
  404484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404488:	3301      	adds	r3, #1
  40448a:	81a3      	strh	r3, [r4, #12]
  40448c:	e7aa      	b.n	4043e4 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  40448e:	4630      	mov	r0, r6
  404490:	4b5c      	ldr	r3, [pc, #368]	; (404604 <indev_encoder_proc+0x294>)
  404492:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404494:	2200      	movs	r2, #0
  404496:	2114      	movs	r1, #20
  404498:	4b58      	ldr	r3, [pc, #352]	; (4045fc <indev_encoder_proc+0x28c>)
  40449a:	6818      	ldr	r0, [r3, #0]
  40449c:	4b5c      	ldr	r3, [pc, #368]	; (404610 <indev_encoder_proc+0x2a0>)
  40449e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044a0:	f105 001c 	add.w	r0, r5, #28
  4044a4:	4b59      	ldr	r3, [pc, #356]	; (40460c <indev_encoder_proc+0x29c>)
  4044a6:	4798      	blx	r3
  4044a8:	2800      	cmp	r0, #0
  4044aa:	d09b      	beq.n	4043e4 <indev_encoder_proc+0x74>
  4044ac:	e7a2      	b.n	4043f4 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  4044ae:	2f01      	cmp	r7, #1
  4044b0:	d194      	bne.n	4043dc <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4044b2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4044b6:	f013 0f01 	tst.w	r3, #1
  4044ba:	d01f      	beq.n	4044fc <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4044bc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4044c0:	f013 0f01 	tst.w	r3, #1
  4044c4:	d08e      	beq.n	4043e4 <indev_encoder_proc+0x74>
  4044c6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  4044c8:	4b52      	ldr	r3, [pc, #328]	; (404614 <indev_encoder_proc+0x2a4>)
  4044ca:	4798      	blx	r3
  4044cc:	8b6b      	ldrh	r3, [r5, #26]
  4044ce:	4298      	cmp	r0, r3
  4044d0:	d988      	bls.n	4043e4 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4044d2:	4b4b      	ldr	r3, [pc, #300]	; (404600 <indev_encoder_proc+0x290>)
  4044d4:	4798      	blx	r3
  4044d6:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4044d8:	6861      	ldr	r1, [r4, #4]
  4044da:	290a      	cmp	r1, #10
  4044dc:	d05c      	beq.n	404598 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  4044de:	2914      	cmp	r1, #20
  4044e0:	d074      	beq.n	4045cc <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  4044e2:	2913      	cmp	r1, #19
  4044e4:	d077      	beq.n	4045d6 <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  4044e6:	4630      	mov	r0, r6
  4044e8:	4b46      	ldr	r3, [pc, #280]	; (404604 <indev_encoder_proc+0x294>)
  4044ea:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4044ec:	f105 001c 	add.w	r0, r5, #28
  4044f0:	4b46      	ldr	r3, [pc, #280]	; (40460c <indev_encoder_proc+0x29c>)
  4044f2:	4798      	blx	r3
  4044f4:	2800      	cmp	r0, #0
  4044f6:	f43f af75 	beq.w	4043e4 <indev_encoder_proc+0x74>
  4044fa:	e77b      	b.n	4043f4 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4044fc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  4044fe:	4b45      	ldr	r3, [pc, #276]	; (404614 <indev_encoder_proc+0x2a4>)
  404500:	4798      	blx	r3
  404502:	8b2b      	ldrh	r3, [r5, #24]
  404504:	4298      	cmp	r0, r3
  404506:	d9d9      	bls.n	4044bc <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  404508:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40450c:	f043 0301 	orr.w	r3, r3, #1
  404510:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404514:	4b3a      	ldr	r3, [pc, #232]	; (404600 <indev_encoder_proc+0x290>)
  404516:	4798      	blx	r3
  404518:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40451a:	6863      	ldr	r3, [r4, #4]
  40451c:	2b0a      	cmp	r3, #10
  40451e:	d006      	beq.n	40452e <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404520:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404524:	f043 0301 	orr.w	r3, r3, #1
  404528:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40452c:	e75a      	b.n	4043e4 <indev_encoder_proc+0x74>
                bool editable = false;
  40452e:	aa02      	add	r2, sp, #8
  404530:	2300      	movs	r3, #0
  404532:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404536:	4b31      	ldr	r3, [pc, #196]	; (4045fc <indev_encoder_proc+0x28c>)
  404538:	6818      	ldr	r0, [r3, #0]
  40453a:	69c3      	ldr	r3, [r0, #28]
  40453c:	2119      	movs	r1, #25
  40453e:	4798      	blx	r3
                if(editable) {
  404540:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404544:	b173      	cbz	r3, 404564 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  404546:	4630      	mov	r0, r6
  404548:	4b33      	ldr	r3, [pc, #204]	; (404618 <indev_encoder_proc+0x2a8>)
  40454a:	4798      	blx	r3
  40454c:	2801      	cmp	r0, #1
  40454e:	d9e7      	bls.n	404520 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  404550:	4630      	mov	r0, r6
  404552:	4b2d      	ldr	r3, [pc, #180]	; (404608 <indev_encoder_proc+0x298>)
  404554:	4798      	blx	r3
  404556:	f080 0101 	eor.w	r1, r0, #1
  40455a:	b2c9      	uxtb	r1, r1
  40455c:	4630      	mov	r0, r6
  40455e:	4b2f      	ldr	r3, [pc, #188]	; (40461c <indev_encoder_proc+0x2ac>)
  404560:	4798      	blx	r3
  404562:	e7dd      	b.n	404520 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404564:	4b25      	ldr	r3, [pc, #148]	; (4045fc <indev_encoder_proc+0x28c>)
  404566:	6818      	ldr	r0, [r3, #0]
  404568:	69c3      	ldr	r3, [r0, #28]
  40456a:	2200      	movs	r2, #0
  40456c:	210f      	movs	r1, #15
  40456e:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404570:	f105 071c 	add.w	r7, r5, #28
  404574:	4638      	mov	r0, r7
  404576:	4b25      	ldr	r3, [pc, #148]	; (40460c <indev_encoder_proc+0x29c>)
  404578:	4798      	blx	r3
  40457a:	2800      	cmp	r0, #0
  40457c:	f47f af3a 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404580:	2200      	movs	r2, #0
  404582:	2104      	movs	r1, #4
  404584:	4b1d      	ldr	r3, [pc, #116]	; (4045fc <indev_encoder_proc+0x28c>)
  404586:	6818      	ldr	r0, [r3, #0]
  404588:	4b21      	ldr	r3, [pc, #132]	; (404610 <indev_encoder_proc+0x2a0>)
  40458a:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40458c:	4638      	mov	r0, r7
  40458e:	4b1f      	ldr	r3, [pc, #124]	; (40460c <indev_encoder_proc+0x29c>)
  404590:	4798      	blx	r3
  404592:	2800      	cmp	r0, #0
  404594:	d0c4      	beq.n	404520 <indev_encoder_proc+0x1b0>
  404596:	e72d      	b.n	4043f4 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404598:	4b18      	ldr	r3, [pc, #96]	; (4045fc <indev_encoder_proc+0x28c>)
  40459a:	6818      	ldr	r0, [r3, #0]
  40459c:	69c3      	ldr	r3, [r0, #28]
  40459e:	2200      	movs	r2, #0
  4045a0:	2110      	movs	r1, #16
  4045a2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045a4:	351c      	adds	r5, #28
  4045a6:	4628      	mov	r0, r5
  4045a8:	4b18      	ldr	r3, [pc, #96]	; (40460c <indev_encoder_proc+0x29c>)
  4045aa:	4798      	blx	r3
  4045ac:	2800      	cmp	r0, #0
  4045ae:	f47f af21 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4045b2:	2200      	movs	r2, #0
  4045b4:	2105      	movs	r1, #5
  4045b6:	4b11      	ldr	r3, [pc, #68]	; (4045fc <indev_encoder_proc+0x28c>)
  4045b8:	6818      	ldr	r0, [r3, #0]
  4045ba:	4b15      	ldr	r3, [pc, #84]	; (404610 <indev_encoder_proc+0x2a0>)
  4045bc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045be:	4628      	mov	r0, r5
  4045c0:	4b12      	ldr	r3, [pc, #72]	; (40460c <indev_encoder_proc+0x29c>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	f43f af0d 	beq.w	4043e4 <indev_encoder_proc+0x74>
  4045ca:	e713      	b.n	4043f4 <indev_encoder_proc+0x84>
                data->enc_diff--;
  4045cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045d0:	3b01      	subs	r3, #1
  4045d2:	81a3      	strh	r3, [r4, #12]
  4045d4:	e706      	b.n	4043e4 <indev_encoder_proc+0x74>
                data->enc_diff++;
  4045d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045da:	3301      	adds	r3, #1
  4045dc:	81a3      	strh	r3, [r4, #12]
  4045de:	e701      	b.n	4043e4 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  4045e0:	6863      	ldr	r3, [r4, #4]
  4045e2:	2b0a      	cmp	r3, #10
  4045e4:	d01c      	beq.n	404620 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  4045e6:	2200      	movs	r2, #0
  4045e8:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  4045ea:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4045ee:	f362 0300 	bfi	r3, r2, #0, #1
  4045f2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  4045f6:	e6f5      	b.n	4043e4 <indev_encoder_proc+0x74>
  4045f8:	00403529 	.word	0x00403529
  4045fc:	2040c380 	.word	0x2040c380
  404600:	0041480d 	.word	0x0041480d
  404604:	0040353d 	.word	0x0040353d
  404608:	00403681 	.word	0x00403681
  40460c:	004036e9 	.word	0x004036e9
  404610:	00405339 	.word	0x00405339
  404614:	00414829 	.word	0x00414829
  404618:	00415a05 	.word	0x00415a05
  40461c:	00403575 	.word	0x00403575
            bool editable = false;
  404620:	aa02      	add	r2, sp, #8
  404622:	2300      	movs	r3, #0
  404624:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404628:	69c3      	ldr	r3, [r0, #28]
  40462a:	2119      	movs	r1, #25
  40462c:	4798      	blx	r3
            if(editable == false) {
  40462e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404632:	2b00      	cmp	r3, #0
  404634:	d044      	beq.n	4046c0 <indev_encoder_proc+0x350>
            else if(g->editing) {
  404636:	7d33      	ldrb	r3, [r6, #20]
  404638:	f013 0f02 	tst.w	r3, #2
  40463c:	d079      	beq.n	404732 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  40463e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404642:	f013 0f01 	tst.w	r3, #1
  404646:	d004      	beq.n	404652 <indev_encoder_proc+0x2e2>
  404648:	4630      	mov	r0, r6
  40464a:	4b60      	ldr	r3, [pc, #384]	; (4047cc <indev_encoder_proc+0x45c>)
  40464c:	4798      	blx	r3
  40464e:	2801      	cmp	r0, #1
  404650:	d8c9      	bhi.n	4045e6 <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404652:	4b5f      	ldr	r3, [pc, #380]	; (4047d0 <indev_encoder_proc+0x460>)
  404654:	6818      	ldr	r0, [r3, #0]
  404656:	69c3      	ldr	r3, [r0, #28]
  404658:	2200      	movs	r2, #0
  40465a:	210e      	movs	r1, #14
  40465c:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40465e:	f105 071c 	add.w	r7, r5, #28
  404662:	4638      	mov	r0, r7
  404664:	4b5b      	ldr	r3, [pc, #364]	; (4047d4 <indev_encoder_proc+0x464>)
  404666:	4798      	blx	r3
  404668:	2800      	cmp	r0, #0
  40466a:	f47f aec3 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40466e:	2200      	movs	r2, #0
  404670:	2103      	movs	r1, #3
  404672:	4b57      	ldr	r3, [pc, #348]	; (4047d0 <indev_encoder_proc+0x460>)
  404674:	6818      	ldr	r0, [r3, #0]
  404676:	4b58      	ldr	r3, [pc, #352]	; (4047d8 <indev_encoder_proc+0x468>)
  404678:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40467a:	4638      	mov	r0, r7
  40467c:	4b55      	ldr	r3, [pc, #340]	; (4047d4 <indev_encoder_proc+0x464>)
  40467e:	4798      	blx	r3
  404680:	2800      	cmp	r0, #0
  404682:	f47f aeb7 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404686:	2200      	movs	r2, #0
  404688:	2106      	movs	r1, #6
  40468a:	4b51      	ldr	r3, [pc, #324]	; (4047d0 <indev_encoder_proc+0x460>)
  40468c:	6818      	ldr	r0, [r3, #0]
  40468e:	4b52      	ldr	r3, [pc, #328]	; (4047d8 <indev_encoder_proc+0x468>)
  404690:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404692:	4638      	mov	r0, r7
  404694:	4b4f      	ldr	r3, [pc, #316]	; (4047d4 <indev_encoder_proc+0x464>)
  404696:	4798      	blx	r3
  404698:	2800      	cmp	r0, #0
  40469a:	f47f aeab 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40469e:	2200      	movs	r2, #0
  4046a0:	2107      	movs	r1, #7
  4046a2:	4b4b      	ldr	r3, [pc, #300]	; (4047d0 <indev_encoder_proc+0x460>)
  4046a4:	6818      	ldr	r0, [r3, #0]
  4046a6:	4b4c      	ldr	r3, [pc, #304]	; (4047d8 <indev_encoder_proc+0x468>)
  4046a8:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4046aa:	4638      	mov	r0, r7
  4046ac:	4b49      	ldr	r3, [pc, #292]	; (4047d4 <indev_encoder_proc+0x464>)
  4046ae:	4798      	blx	r3
  4046b0:	2800      	cmp	r0, #0
  4046b2:	f47f ae9f 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  4046b6:	210a      	movs	r1, #10
  4046b8:	4630      	mov	r0, r6
  4046ba:	4b48      	ldr	r3, [pc, #288]	; (4047dc <indev_encoder_proc+0x46c>)
  4046bc:	4798      	blx	r3
  4046be:	e792      	b.n	4045e6 <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4046c0:	4b43      	ldr	r3, [pc, #268]	; (4047d0 <indev_encoder_proc+0x460>)
  4046c2:	6818      	ldr	r0, [r3, #0]
  4046c4:	69c3      	ldr	r3, [r0, #28]
  4046c6:	2200      	movs	r2, #0
  4046c8:	210e      	movs	r1, #14
  4046ca:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046cc:	f105 071c 	add.w	r7, r5, #28
  4046d0:	4638      	mov	r0, r7
  4046d2:	4b40      	ldr	r3, [pc, #256]	; (4047d4 <indev_encoder_proc+0x464>)
  4046d4:	4798      	blx	r3
  4046d6:	2800      	cmp	r0, #0
  4046d8:	f47f ae8c 	bne.w	4043f4 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4046dc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4046e0:	f013 0f01 	tst.w	r3, #1
  4046e4:	d01e      	beq.n	404724 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  4046e6:	4638      	mov	r0, r7
  4046e8:	4b3a      	ldr	r3, [pc, #232]	; (4047d4 <indev_encoder_proc+0x464>)
  4046ea:	4798      	blx	r3
  4046ec:	2800      	cmp	r0, #0
  4046ee:	f47f ae81 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4046f2:	2200      	movs	r2, #0
  4046f4:	2106      	movs	r1, #6
  4046f6:	4b36      	ldr	r3, [pc, #216]	; (4047d0 <indev_encoder_proc+0x460>)
  4046f8:	6818      	ldr	r0, [r3, #0]
  4046fa:	4b37      	ldr	r3, [pc, #220]	; (4047d8 <indev_encoder_proc+0x468>)
  4046fc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046fe:	4638      	mov	r0, r7
  404700:	4b34      	ldr	r3, [pc, #208]	; (4047d4 <indev_encoder_proc+0x464>)
  404702:	4798      	blx	r3
  404704:	2800      	cmp	r0, #0
  404706:	f47f ae75 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40470a:	2200      	movs	r2, #0
  40470c:	2107      	movs	r1, #7
  40470e:	4b30      	ldr	r3, [pc, #192]	; (4047d0 <indev_encoder_proc+0x460>)
  404710:	6818      	ldr	r0, [r3, #0]
  404712:	4b31      	ldr	r3, [pc, #196]	; (4047d8 <indev_encoder_proc+0x468>)
  404714:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404716:	4638      	mov	r0, r7
  404718:	4b2e      	ldr	r3, [pc, #184]	; (4047d4 <indev_encoder_proc+0x464>)
  40471a:	4798      	blx	r3
  40471c:	2800      	cmp	r0, #0
  40471e:	f43f af62 	beq.w	4045e6 <indev_encoder_proc+0x276>
  404722:	e667      	b.n	4043f4 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404724:	2200      	movs	r2, #0
  404726:	2103      	movs	r1, #3
  404728:	4b29      	ldr	r3, [pc, #164]	; (4047d0 <indev_encoder_proc+0x460>)
  40472a:	6818      	ldr	r0, [r3, #0]
  40472c:	4b2a      	ldr	r3, [pc, #168]	; (4047d8 <indev_encoder_proc+0x468>)
  40472e:	4798      	blx	r3
  404730:	e7d9      	b.n	4046e6 <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404732:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404736:	f013 0f01 	tst.w	r3, #1
  40473a:	f47f af54 	bne.w	4045e6 <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  40473e:	2101      	movs	r1, #1
  404740:	4630      	mov	r0, r6
  404742:	4b27      	ldr	r3, [pc, #156]	; (4047e0 <indev_encoder_proc+0x470>)
  404744:	4798      	blx	r3
  404746:	e74e      	b.n	4045e6 <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404748:	4630      	mov	r0, r6
  40474a:	4b26      	ldr	r3, [pc, #152]	; (4047e4 <indev_encoder_proc+0x474>)
  40474c:	4798      	blx	r3
  40474e:	b1f8      	cbz	r0, 404790 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404754:	2b00      	cmp	r3, #0
  404756:	db0f      	blt.n	404778 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404758:	2b00      	cmp	r3, #0
  40475a:	f77f ae4b 	ble.w	4043f4 <indev_encoder_proc+0x84>
  40475e:	2500      	movs	r5, #0
  404760:	e011      	b.n	404786 <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404762:	2114      	movs	r1, #20
  404764:	4630      	mov	r0, r6
  404766:	4b1d      	ldr	r3, [pc, #116]	; (4047dc <indev_encoder_proc+0x46c>)
  404768:	4798      	blx	r3
  40476a:	3501      	adds	r5, #1
  40476c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404770:	425b      	negs	r3, r3
  404772:	429d      	cmp	r5, r3
  404774:	dbf5      	blt.n	404762 <indev_encoder_proc+0x3f2>
  404776:	e63d      	b.n	4043f4 <indev_encoder_proc+0x84>
  404778:	2500      	movs	r5, #0
  40477a:	e7f7      	b.n	40476c <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  40477c:	2113      	movs	r1, #19
  40477e:	4630      	mov	r0, r6
  404780:	4b16      	ldr	r3, [pc, #88]	; (4047dc <indev_encoder_proc+0x46c>)
  404782:	4798      	blx	r3
  404784:	3501      	adds	r5, #1
  404786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40478a:	429d      	cmp	r5, r3
  40478c:	dbf6      	blt.n	40477c <indev_encoder_proc+0x40c>
  40478e:	e631      	b.n	4043f4 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404794:	2b00      	cmp	r3, #0
  404796:	db0e      	blt.n	4047b6 <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404798:	2b00      	cmp	r3, #0
  40479a:	f77f ae2b 	ble.w	4043f4 <indev_encoder_proc+0x84>
  40479e:	2500      	movs	r5, #0
  4047a0:	e00f      	b.n	4047c2 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  4047a2:	4630      	mov	r0, r6
  4047a4:	4b10      	ldr	r3, [pc, #64]	; (4047e8 <indev_encoder_proc+0x478>)
  4047a6:	4798      	blx	r3
  4047a8:	3501      	adds	r5, #1
  4047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ae:	425b      	negs	r3, r3
  4047b0:	429d      	cmp	r5, r3
  4047b2:	dbf6      	blt.n	4047a2 <indev_encoder_proc+0x432>
  4047b4:	e61e      	b.n	4043f4 <indev_encoder_proc+0x84>
  4047b6:	2500      	movs	r5, #0
  4047b8:	e7f7      	b.n	4047aa <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  4047ba:	4630      	mov	r0, r6
  4047bc:	4b0b      	ldr	r3, [pc, #44]	; (4047ec <indev_encoder_proc+0x47c>)
  4047be:	4798      	blx	r3
  4047c0:	3501      	adds	r5, #1
  4047c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047c6:	429d      	cmp	r5, r3
  4047c8:	dbf7      	blt.n	4047ba <indev_encoder_proc+0x44a>
  4047ca:	e613      	b.n	4043f4 <indev_encoder_proc+0x84>
  4047cc:	00415a05 	.word	0x00415a05
  4047d0:	2040c380 	.word	0x2040c380
  4047d4:	004036e9 	.word	0x004036e9
  4047d8:	00405339 	.word	0x00405339
  4047dc:	0040353d 	.word	0x0040353d
  4047e0:	00403575 	.word	0x00403575
  4047e4:	00403681 	.word	0x00403681
  4047e8:	004033a5 	.word	0x004033a5
  4047ec:	0040338d 	.word	0x0040338d

004047f0 <lv_indev_get_act>:
}
  4047f0:	4b01      	ldr	r3, [pc, #4]	; (4047f8 <lv_indev_get_act+0x8>)
  4047f2:	6818      	ldr	r0, [r3, #0]
  4047f4:	4770      	bx	lr
  4047f6:	bf00      	nop
  4047f8:	2040c37c 	.word	0x2040c37c

004047fc <lv_indev_reset>:
    if(indev) {
  4047fc:	b1b0      	cbz	r0, 40482c <lv_indev_reset+0x30>
  4047fe:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404800:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404804:	f042 0202 	orr.w	r2, r2, #2
  404808:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  40480c:	4a17      	ldr	r2, [pc, #92]	; (40486c <lv_indev_reset+0x70>)
  40480e:	6812      	ldr	r2, [r2, #0]
  404810:	4290      	cmp	r0, r2
  404812:	d004      	beq.n	40481e <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404814:	b139      	cbz	r1, 404826 <lv_indev_reset+0x2a>
  404816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404818:	4291      	cmp	r1, r2
  40481a:	d004      	beq.n	404826 <lv_indev_reset+0x2a>
  40481c:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  40481e:	2000      	movs	r0, #0
  404820:	4a13      	ldr	r2, [pc, #76]	; (404870 <lv_indev_reset+0x74>)
  404822:	6010      	str	r0, [r2, #0]
  404824:	e7f6      	b.n	404814 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404826:	2200      	movs	r2, #0
  404828:	63da      	str	r2, [r3, #60]	; 0x3c
  40482a:	4770      	bx	lr
{
  40482c:	b510      	push	{r4, lr}
  40482e:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404830:	2000      	movs	r0, #0
  404832:	4b10      	ldr	r3, [pc, #64]	; (404874 <lv_indev_reset+0x78>)
  404834:	4798      	blx	r3
        while(i) {
  404836:	e007      	b.n	404848 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404838:	2200      	movs	r2, #0
  40483a:	4b0d      	ldr	r3, [pc, #52]	; (404870 <lv_indev_reset+0x74>)
  40483c:	601a      	str	r2, [r3, #0]
  40483e:	e00e      	b.n	40485e <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404840:	2300      	movs	r3, #0
  404842:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404844:	4b0b      	ldr	r3, [pc, #44]	; (404874 <lv_indev_reset+0x78>)
  404846:	4798      	blx	r3
        while(i) {
  404848:	b178      	cbz	r0, 40486a <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  40484a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40484e:	f043 0302 	orr.w	r3, r3, #2
  404852:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404856:	4b05      	ldr	r3, [pc, #20]	; (40486c <lv_indev_reset+0x70>)
  404858:	681b      	ldr	r3, [r3, #0]
  40485a:	4298      	cmp	r0, r3
  40485c:	d0ec      	beq.n	404838 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  40485e:	2c00      	cmp	r4, #0
  404860:	d0ee      	beq.n	404840 <lv_indev_reset+0x44>
  404862:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404864:	429c      	cmp	r4, r3
  404866:	d1ed      	bne.n	404844 <lv_indev_reset+0x48>
  404868:	e7ea      	b.n	404840 <lv_indev_reset+0x44>
  40486a:	bd10      	pop	{r4, pc}
  40486c:	2040c37c 	.word	0x2040c37c
  404870:	2040c380 	.word	0x2040c380
  404874:	00414781 	.word	0x00414781

00404878 <_lv_indev_init>:
{
  404878:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  40487a:	2100      	movs	r1, #0
  40487c:	4608      	mov	r0, r1
  40487e:	4b01      	ldr	r3, [pc, #4]	; (404884 <_lv_indev_init+0xc>)
  404880:	4798      	blx	r3
  404882:	bd08      	pop	{r3, pc}
  404884:	004047fd 	.word	0x004047fd

00404888 <lv_indev_get_obj_act>:
}
  404888:	4b01      	ldr	r3, [pc, #4]	; (404890 <lv_indev_get_obj_act+0x8>)
  40488a:	6818      	ldr	r0, [r3, #0]
  40488c:	4770      	bx	lr
  40488e:	bf00      	nop
  404890:	2040c380 	.word	0x2040c380

00404894 <lv_indev_search_obj>:
{
  404894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404898:	4680      	mov	r8, r0
  40489a:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  40489c:	4b21      	ldr	r3, [pc, #132]	; (404924 <lv_indev_search_obj+0x90>)
  40489e:	4798      	blx	r3
  4048a0:	2800      	cmp	r0, #0
  4048a2:	d03c      	beq.n	40491e <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  4048a4:	f108 0604 	add.w	r6, r8, #4
  4048a8:	4630      	mov	r0, r6
  4048aa:	4b1f      	ldr	r3, [pc, #124]	; (404928 <lv_indev_search_obj+0x94>)
  4048ac:	4798      	blx	r3
  4048ae:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  4048b0:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  4048b2:	b15c      	cbz	r4, 4048cc <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  4048b4:	4639      	mov	r1, r7
  4048b6:	4620      	mov	r0, r4
  4048b8:	f7ff ffec 	bl	404894 <lv_indev_search_obj>
            if(found_p != NULL) {
  4048bc:	4605      	mov	r5, r0
  4048be:	b928      	cbnz	r0, 4048cc <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  4048c0:	4621      	mov	r1, r4
  4048c2:	4630      	mov	r0, r6
  4048c4:	4b19      	ldr	r3, [pc, #100]	; (40492c <lv_indev_search_obj+0x98>)
  4048c6:	4798      	blx	r3
  4048c8:	4604      	mov	r4, r0
  4048ca:	e7f2      	b.n	4048b2 <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  4048cc:	b115      	cbz	r5, 4048d4 <lv_indev_search_obj+0x40>
}
  4048ce:	4628      	mov	r0, r5
  4048d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  4048d4:	4640      	mov	r0, r8
  4048d6:	4b16      	ldr	r3, [pc, #88]	; (404930 <lv_indev_search_obj+0x9c>)
  4048d8:	4798      	blx	r3
  4048da:	2800      	cmp	r0, #0
  4048dc:	d0f7      	beq.n	4048ce <lv_indev_search_obj+0x3a>
  4048de:	4644      	mov	r4, r8
  4048e0:	e003      	b.n	4048ea <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  4048e2:	4620      	mov	r0, r4
  4048e4:	4b13      	ldr	r3, [pc, #76]	; (404934 <lv_indev_search_obj+0xa0>)
  4048e6:	4798      	blx	r3
  4048e8:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  4048ea:	b124      	cbz	r4, 4048f6 <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  4048ec:	4620      	mov	r0, r4
  4048ee:	4b12      	ldr	r3, [pc, #72]	; (404938 <lv_indev_search_obj+0xa4>)
  4048f0:	4798      	blx	r3
  4048f2:	2800      	cmp	r0, #0
  4048f4:	d0f5      	beq.n	4048e2 <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  4048f6:	2140      	movs	r1, #64	; 0x40
  4048f8:	4640      	mov	r0, r8
  4048fa:	4b10      	ldr	r3, [pc, #64]	; (40493c <lv_indev_search_obj+0xa8>)
  4048fc:	4798      	blx	r3
  4048fe:	b950      	cbnz	r0, 404916 <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404900:	2c00      	cmp	r4, #0
  404902:	d1e4      	bne.n	4048ce <lv_indev_search_obj+0x3a>
  404904:	2100      	movs	r1, #0
  404906:	4640      	mov	r0, r8
  404908:	4b0d      	ldr	r3, [pc, #52]	; (404940 <lv_indev_search_obj+0xac>)
  40490a:	4798      	blx	r3
  40490c:	f010 0f20 	tst.w	r0, #32
  404910:	d1dd      	bne.n	4048ce <lv_indev_search_obj+0x3a>
  404912:	4645      	mov	r5, r8
  404914:	e7db      	b.n	4048ce <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404916:	2c00      	cmp	r4, #0
  404918:	d1d9      	bne.n	4048ce <lv_indev_search_obj+0x3a>
  40491a:	4645      	mov	r5, r8
    return found_p;
  40491c:	e7d7      	b.n	4048ce <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  40491e:	2500      	movs	r5, #0
  404920:	e7d5      	b.n	4048ce <lv_indev_search_obj+0x3a>
  404922:	bf00      	nop
  404924:	00407ba5 	.word	0x00407ba5
  404928:	0041583d 	.word	0x0041583d
  40492c:	00415851 	.word	0x00415851
  404930:	0040618d 	.word	0x0040618d
  404934:	00405449 	.word	0x00405449
  404938:	00405839 	.word	0x00405839
  40493c:	0040679d 	.word	0x0040679d
  404940:	004067d1 	.word	0x004067d1

00404944 <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404944:	6983      	ldr	r3, [r0, #24]
  404946:	4a5d      	ldr	r2, [pc, #372]	; (404abc <indev_proc_press+0x178>)
  404948:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  40494a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  40494e:	f012 0f08 	tst.w	r2, #8
  404952:	f040 81bc 	bne.w	404cce <indev_proc_press+0x38a>
{
  404956:	b570      	push	{r4, r5, r6, lr}
  404958:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  40495a:	4a59      	ldr	r2, [pc, #356]	; (404ac0 <indev_proc_press+0x17c>)
  40495c:	6812      	ldr	r2, [r2, #0]
  40495e:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404960:	b343      	cbz	r3, 4049b4 <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404962:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404966:	f012 0f02 	tst.w	r2, #2
  40496a:	d045      	beq.n	4049f8 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  40496c:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  40496e:	b13b      	cbz	r3, 404980 <indev_proc_press+0x3c>
  404970:	69e3      	ldr	r3, [r4, #28]
  404972:	b12b      	cbz	r3, 404980 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404974:	2300      	movs	r3, #0
  404976:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404978:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  40497a:	4620      	mov	r0, r4
  40497c:	4b51      	ldr	r3, [pc, #324]	; (404ac4 <indev_proc_press+0x180>)
  40497e:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  404980:	69a5      	ldr	r5, [r4, #24]
  404982:	4b4e      	ldr	r3, [pc, #312]	; (404abc <indev_proc_press+0x178>)
  404984:	681b      	ldr	r3, [r3, #0]
  404986:	429d      	cmp	r5, r3
  404988:	f000 80de 	beq.w	404b48 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  40498c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  404990:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  404992:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  404996:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  404998:	2d00      	cmp	r5, #0
  40499a:	d060      	beq.n	404a5e <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  40499c:	69eb      	ldr	r3, [r5, #28]
  40499e:	4a48      	ldr	r2, [pc, #288]	; (404ac0 <indev_proc_press+0x17c>)
  4049a0:	6812      	ldr	r2, [r2, #0]
  4049a2:	210d      	movs	r1, #13
  4049a4:	4628      	mov	r0, r5
  4049a6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4049a8:	4620      	mov	r0, r4
  4049aa:	4b47      	ldr	r3, [pc, #284]	; (404ac8 <indev_proc_press+0x184>)
  4049ac:	4798      	blx	r3
  4049ae:	2800      	cmp	r0, #0
  4049b0:	d04b      	beq.n	404a4a <indev_proc_press+0x106>
  4049b2:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  4049b4:	4628      	mov	r0, r5
  4049b6:	4b45      	ldr	r3, [pc, #276]	; (404acc <indev_proc_press+0x188>)
  4049b8:	4798      	blx	r3
  4049ba:	1d26      	adds	r6, r4, #4
  4049bc:	4631      	mov	r1, r6
  4049be:	4b44      	ldr	r3, [pc, #272]	; (404ad0 <indev_proc_press+0x18c>)
  4049c0:	4798      	blx	r3
  4049c2:	4b3e      	ldr	r3, [pc, #248]	; (404abc <indev_proc_press+0x178>)
  4049c4:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  4049c6:	b120      	cbz	r0, 4049d2 <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  4049c8:	4b3c      	ldr	r3, [pc, #240]	; (404abc <indev_proc_press+0x178>)
  4049ca:	681b      	ldr	r3, [r3, #0]
  4049cc:	b153      	cbz	r3, 4049e4 <indev_proc_press+0xa0>
        new_obj_searched = true;
  4049ce:	2301      	movs	r3, #1
  4049d0:	e7cd      	b.n	40496e <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  4049d2:	4628      	mov	r0, r5
  4049d4:	4b3f      	ldr	r3, [pc, #252]	; (404ad4 <indev_proc_press+0x190>)
  4049d6:	4798      	blx	r3
  4049d8:	4631      	mov	r1, r6
  4049da:	4b3d      	ldr	r3, [pc, #244]	; (404ad0 <indev_proc_press+0x18c>)
  4049dc:	4798      	blx	r3
  4049de:	4b37      	ldr	r3, [pc, #220]	; (404abc <indev_proc_press+0x178>)
  4049e0:	6018      	str	r0, [r3, #0]
  4049e2:	e7f1      	b.n	4049c8 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  4049e4:	4628      	mov	r0, r5
  4049e6:	4b3c      	ldr	r3, [pc, #240]	; (404ad8 <indev_proc_press+0x194>)
  4049e8:	4798      	blx	r3
  4049ea:	4631      	mov	r1, r6
  4049ec:	4b38      	ldr	r3, [pc, #224]	; (404ad0 <indev_proc_press+0x18c>)
  4049ee:	4798      	blx	r3
  4049f0:	4b32      	ldr	r3, [pc, #200]	; (404abc <indev_proc_press+0x178>)
  4049f2:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  4049f4:	2301      	movs	r3, #1
  4049f6:	e7ba      	b.n	40496e <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  4049f8:	2110      	movs	r1, #16
  4049fa:	4618      	mov	r0, r3
  4049fc:	4b37      	ldr	r3, [pc, #220]	; (404adc <indev_proc_press+0x198>)
  4049fe:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404a00:	b108      	cbz	r0, 404a06 <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404a02:	2300      	movs	r3, #0
  404a04:	e7b3      	b.n	40496e <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404a06:	4628      	mov	r0, r5
  404a08:	4b30      	ldr	r3, [pc, #192]	; (404acc <indev_proc_press+0x188>)
  404a0a:	4798      	blx	r3
  404a0c:	1d26      	adds	r6, r4, #4
  404a0e:	4631      	mov	r1, r6
  404a10:	4b2f      	ldr	r3, [pc, #188]	; (404ad0 <indev_proc_press+0x18c>)
  404a12:	4798      	blx	r3
  404a14:	4b29      	ldr	r3, [pc, #164]	; (404abc <indev_proc_press+0x178>)
  404a16:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404a18:	b120      	cbz	r0, 404a24 <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404a1a:	4b28      	ldr	r3, [pc, #160]	; (404abc <indev_proc_press+0x178>)
  404a1c:	681b      	ldr	r3, [r3, #0]
  404a1e:	b153      	cbz	r3, 404a36 <indev_proc_press+0xf2>
        new_obj_searched = true;
  404a20:	2301      	movs	r3, #1
  404a22:	e7a4      	b.n	40496e <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404a24:	4628      	mov	r0, r5
  404a26:	4b2b      	ldr	r3, [pc, #172]	; (404ad4 <indev_proc_press+0x190>)
  404a28:	4798      	blx	r3
  404a2a:	4631      	mov	r1, r6
  404a2c:	4b28      	ldr	r3, [pc, #160]	; (404ad0 <indev_proc_press+0x18c>)
  404a2e:	4798      	blx	r3
  404a30:	4b22      	ldr	r3, [pc, #136]	; (404abc <indev_proc_press+0x178>)
  404a32:	6018      	str	r0, [r3, #0]
  404a34:	e7f1      	b.n	404a1a <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404a36:	4628      	mov	r0, r5
  404a38:	4b27      	ldr	r3, [pc, #156]	; (404ad8 <indev_proc_press+0x194>)
  404a3a:	4798      	blx	r3
  404a3c:	4631      	mov	r1, r6
  404a3e:	4b24      	ldr	r3, [pc, #144]	; (404ad0 <indev_proc_press+0x18c>)
  404a40:	4798      	blx	r3
  404a42:	4b1e      	ldr	r3, [pc, #120]	; (404abc <indev_proc_press+0x178>)
  404a44:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404a46:	2301      	movs	r3, #1
  404a48:	e791      	b.n	40496e <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404a4a:	2200      	movs	r2, #0
  404a4c:	2102      	movs	r1, #2
  404a4e:	4628      	mov	r0, r5
  404a50:	4b23      	ldr	r3, [pc, #140]	; (404ae0 <indev_proc_press+0x19c>)
  404a52:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404a54:	4620      	mov	r0, r4
  404a56:	4b1c      	ldr	r3, [pc, #112]	; (404ac8 <indev_proc_press+0x184>)
  404a58:	4798      	blx	r3
  404a5a:	2800      	cmp	r0, #0
  404a5c:	d1a9      	bne.n	4049b2 <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404a5e:	4b17      	ldr	r3, [pc, #92]	; (404abc <indev_proc_press+0x178>)
  404a60:	681b      	ldr	r3, [r3, #0]
  404a62:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404a64:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404a66:	2b00      	cmp	r3, #0
  404a68:	d06e      	beq.n	404b48 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404a6a:	4b1e      	ldr	r3, [pc, #120]	; (404ae4 <indev_proc_press+0x1a0>)
  404a6c:	4798      	blx	r3
  404a6e:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404a70:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404a74:	f36f 0300 	bfc	r3, #0, #1
  404a78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404a7c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404a80:	2300      	movs	r3, #0
  404a82:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404a84:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404a86:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404a8a:	2103      	movs	r1, #3
  404a8c:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404a90:	f363 1245 	bfi	r2, r3, #5, #1
  404a94:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404a98:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404a9a:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404a9c:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404a9e:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404aa0:	4a06      	ldr	r2, [pc, #24]	; (404abc <indev_proc_press+0x178>)
  404aa2:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404aa4:	461d      	mov	r5, r3
            while(i != NULL) {
  404aa6:	e001      	b.n	404aac <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404aa8:	4b0f      	ldr	r3, [pc, #60]	; (404ae8 <indev_proc_press+0x1a4>)
  404aaa:	4798      	blx	r3
            while(i != NULL) {
  404aac:	b1f0      	cbz	r0, 404aec <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404aae:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404ab2:	f013 0f20 	tst.w	r3, #32
  404ab6:	d0f7      	beq.n	404aa8 <indev_proc_press+0x164>
  404ab8:	4605      	mov	r5, r0
  404aba:	e7f5      	b.n	404aa8 <indev_proc_press+0x164>
  404abc:	2040c380 	.word	0x2040c380
  404ac0:	2040c37c 	.word	0x2040c37c
  404ac4:	0040372d 	.word	0x0040372d
  404ac8:	004036e9 	.word	0x004036e9
  404acc:	0040324d 	.word	0x0040324d
  404ad0:	00404895 	.word	0x00404895
  404ad4:	00403231 	.word	0x00403231
  404ad8:	004031f9 	.word	0x004031f9
  404adc:	0040679d 	.word	0x0040679d
  404ae0:	00405339 	.word	0x00405339
  404ae4:	0041480d 	.word	0x0041480d
  404ae8:	00405449 	.word	0x00405449
            if(last_top != NULL) {
  404aec:	b115      	cbz	r5, 404af4 <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404aee:	4628      	mov	r0, r5
  404af0:	4b77      	ldr	r3, [pc, #476]	; (404cd0 <indev_proc_press+0x38c>)
  404af2:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404af4:	4b77      	ldr	r3, [pc, #476]	; (404cd4 <indev_proc_press+0x390>)
  404af6:	6818      	ldr	r0, [r3, #0]
  404af8:	69c3      	ldr	r3, [r0, #28]
  404afa:	4a77      	ldr	r2, [pc, #476]	; (404cd8 <indev_proc_press+0x394>)
  404afc:	6812      	ldr	r2, [r2, #0]
  404afe:	210b      	movs	r1, #11
  404b00:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b02:	4620      	mov	r0, r4
  404b04:	4b75      	ldr	r3, [pc, #468]	; (404cdc <indev_proc_press+0x398>)
  404b06:	4798      	blx	r3
  404b08:	2800      	cmp	r0, #0
  404b0a:	f47f af52 	bne.w	4049b2 <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404b0e:	2200      	movs	r2, #0
  404b10:	4611      	mov	r1, r2
  404b12:	4b70      	ldr	r3, [pc, #448]	; (404cd4 <indev_proc_press+0x390>)
  404b14:	6818      	ldr	r0, [r3, #0]
  404b16:	4b72      	ldr	r3, [pc, #456]	; (404ce0 <indev_proc_press+0x39c>)
  404b18:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b1a:	4620      	mov	r0, r4
  404b1c:	4b6f      	ldr	r3, [pc, #444]	; (404cdc <indev_proc_press+0x398>)
  404b1e:	4798      	blx	r3
  404b20:	2800      	cmp	r0, #0
  404b22:	f47f af46 	bne.w	4049b2 <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404b26:	4b6c      	ldr	r3, [pc, #432]	; (404cd8 <indev_proc_press+0x394>)
  404b28:	6818      	ldr	r0, [r3, #0]
  404b2a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404b2e:	f013 0f08 	tst.w	r3, #8
  404b32:	f47f af3e 	bne.w	4049b2 <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  404b36:	301c      	adds	r0, #28
  404b38:	4b6a      	ldr	r3, [pc, #424]	; (404ce4 <indev_proc_press+0x3a0>)
  404b3a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b3c:	4620      	mov	r0, r4
  404b3e:	4b67      	ldr	r3, [pc, #412]	; (404cdc <indev_proc_press+0x398>)
  404b40:	4798      	blx	r3
  404b42:	2800      	cmp	r0, #0
  404b44:	f47f af35 	bne.w	4049b2 <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  404b48:	88a0      	ldrh	r0, [r4, #4]
  404b4a:	8923      	ldrh	r3, [r4, #8]
  404b4c:	1ac0      	subs	r0, r0, r3
  404b4e:	b200      	sxth	r0, r0
  404b50:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  404b52:	88e1      	ldrh	r1, [r4, #6]
  404b54:	8963      	ldrh	r3, [r4, #10]
  404b56:	1ac9      	subs	r1, r1, r3
  404b58:	b209      	sxth	r1, r1
  404b5a:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  404b5c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404b60:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404b64:	10d2      	asrs	r2, r2, #3
  404b66:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  404b68:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404b6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404b70:	10db      	asrs	r3, r3, #3
  404b72:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  404b74:	2a00      	cmp	r2, #0
  404b76:	db7b      	blt.n	404c70 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  404b78:	2a00      	cmp	r2, #0
  404b7a:	dd01      	ble.n	404b80 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  404b7c:	3a01      	subs	r2, #1
  404b7e:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  404b80:	2b00      	cmp	r3, #0
  404b82:	db78      	blt.n	404c76 <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  404b84:	2b00      	cmp	r3, #0
  404b86:	dd01      	ble.n	404b8c <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  404b88:	3b01      	subs	r3, #1
  404b8a:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  404b8c:	8aa3      	ldrh	r3, [r4, #20]
  404b8e:	eb03 0060 	add.w	r0, r3, r0, asr #1
  404b92:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  404b94:	8ae3      	ldrh	r3, [r4, #22]
  404b96:	eb03 0161 	add.w	r1, r3, r1, asr #1
  404b9a:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  404b9c:	4b4d      	ldr	r3, [pc, #308]	; (404cd4 <indev_proc_press+0x390>)
  404b9e:	6818      	ldr	r0, [r3, #0]
  404ba0:	2800      	cmp	r0, #0
  404ba2:	f43f af06 	beq.w	4049b2 <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  404ba6:	69c3      	ldr	r3, [r0, #28]
  404ba8:	4a4b      	ldr	r2, [pc, #300]	; (404cd8 <indev_proc_press+0x394>)
  404baa:	6812      	ldr	r2, [r2, #0]
  404bac:	210c      	movs	r1, #12
  404bae:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404bb0:	4620      	mov	r0, r4
  404bb2:	4b4a      	ldr	r3, [pc, #296]	; (404cdc <indev_proc_press+0x398>)
  404bb4:	4798      	blx	r3
  404bb6:	2800      	cmp	r0, #0
  404bb8:	f47f aefb 	bne.w	4049b2 <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404bbc:	2200      	movs	r2, #0
  404bbe:	2101      	movs	r1, #1
  404bc0:	4b44      	ldr	r3, [pc, #272]	; (404cd4 <indev_proc_press+0x390>)
  404bc2:	6818      	ldr	r0, [r3, #0]
  404bc4:	4b46      	ldr	r3, [pc, #280]	; (404ce0 <indev_proc_press+0x39c>)
  404bc6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404bc8:	4620      	mov	r0, r4
  404bca:	4b44      	ldr	r3, [pc, #272]	; (404cdc <indev_proc_press+0x398>)
  404bcc:	4798      	blx	r3
  404bce:	2800      	cmp	r0, #0
  404bd0:	f47f aeef 	bne.w	4049b2 <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  404bd4:	4b40      	ldr	r3, [pc, #256]	; (404cd8 <indev_proc_press+0x394>)
  404bd6:	681b      	ldr	r3, [r3, #0]
  404bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404bdc:	f013 0f08 	tst.w	r3, #8
  404be0:	f47f aee7 	bne.w	4049b2 <indev_proc_press+0x6e>
        indev_drag(proc);
  404be4:	4620      	mov	r0, r4
  404be6:	4b40      	ldr	r3, [pc, #256]	; (404ce8 <indev_proc_press+0x3a4>)
  404be8:	4798      	blx	r3
        indev_gesture(proc);
  404bea:	4620      	mov	r0, r4
  404bec:	4b3f      	ldr	r3, [pc, #252]	; (404cec <indev_proc_press+0x3a8>)
  404bee:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404bf0:	4620      	mov	r0, r4
  404bf2:	4b3a      	ldr	r3, [pc, #232]	; (404cdc <indev_proc_press+0x398>)
  404bf4:	4798      	blx	r3
  404bf6:	2800      	cmp	r0, #0
  404bf8:	f47f aedb 	bne.w	4049b2 <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  404bfc:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404c00:	f013 0f02 	tst.w	r3, #2
  404c04:	d104      	bne.n	404c10 <indev_proc_press+0x2cc>
  404c06:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404c0a:	f013 0f01 	tst.w	r3, #1
  404c0e:	d035      	beq.n	404c7c <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  404c10:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404c14:	f013 0f02 	tst.w	r3, #2
  404c18:	f47f aecb 	bne.w	4049b2 <indev_proc_press+0x6e>
  404c1c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404c20:	f013 0f01 	tst.w	r3, #1
  404c24:	f43f aec5 	beq.w	4049b2 <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  404c28:	6b20      	ldr	r0, [r4, #48]	; 0x30
  404c2a:	4b31      	ldr	r3, [pc, #196]	; (404cf0 <indev_proc_press+0x3ac>)
  404c2c:	4798      	blx	r3
  404c2e:	4b2a      	ldr	r3, [pc, #168]	; (404cd8 <indev_proc_press+0x394>)
  404c30:	681a      	ldr	r2, [r3, #0]
  404c32:	8b53      	ldrh	r3, [r2, #26]
  404c34:	4298      	cmp	r0, r3
  404c36:	f67f aebc 	bls.w	4049b2 <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  404c3a:	4b26      	ldr	r3, [pc, #152]	; (404cd4 <indev_proc_press+0x390>)
  404c3c:	6818      	ldr	r0, [r3, #0]
  404c3e:	69c3      	ldr	r3, [r0, #28]
  404c40:	2110      	movs	r1, #16
  404c42:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404c44:	4620      	mov	r0, r4
  404c46:	4b25      	ldr	r3, [pc, #148]	; (404cdc <indev_proc_press+0x398>)
  404c48:	4798      	blx	r3
  404c4a:	2800      	cmp	r0, #0
  404c4c:	f47f aeb1 	bne.w	4049b2 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404c50:	2200      	movs	r2, #0
  404c52:	2105      	movs	r1, #5
  404c54:	4b1f      	ldr	r3, [pc, #124]	; (404cd4 <indev_proc_press+0x390>)
  404c56:	6818      	ldr	r0, [r3, #0]
  404c58:	4b21      	ldr	r3, [pc, #132]	; (404ce0 <indev_proc_press+0x39c>)
  404c5a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404c5c:	4620      	mov	r0, r4
  404c5e:	4b1f      	ldr	r3, [pc, #124]	; (404cdc <indev_proc_press+0x398>)
  404c60:	4798      	blx	r3
  404c62:	2800      	cmp	r0, #0
  404c64:	f47f aea5 	bne.w	4049b2 <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  404c68:	4b22      	ldr	r3, [pc, #136]	; (404cf4 <indev_proc_press+0x3b0>)
  404c6a:	4798      	blx	r3
  404c6c:	6320      	str	r0, [r4, #48]	; 0x30
  404c6e:	e6a0      	b.n	4049b2 <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  404c70:	3201      	adds	r2, #1
  404c72:	82a2      	strh	r2, [r4, #20]
  404c74:	e784      	b.n	404b80 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  404c76:	3301      	adds	r3, #1
  404c78:	82e3      	strh	r3, [r4, #22]
  404c7a:	e787      	b.n	404b8c <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  404c7c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404c7e:	4b1c      	ldr	r3, [pc, #112]	; (404cf0 <indev_proc_press+0x3ac>)
  404c80:	4798      	blx	r3
  404c82:	4b15      	ldr	r3, [pc, #84]	; (404cd8 <indev_proc_press+0x394>)
  404c84:	681a      	ldr	r2, [r3, #0]
  404c86:	8b13      	ldrh	r3, [r2, #24]
  404c88:	4298      	cmp	r0, r3
  404c8a:	d9c1      	bls.n	404c10 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  404c8c:	4b11      	ldr	r3, [pc, #68]	; (404cd4 <indev_proc_press+0x390>)
  404c8e:	6818      	ldr	r0, [r3, #0]
  404c90:	69c3      	ldr	r3, [r0, #28]
  404c92:	210f      	movs	r1, #15
  404c94:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404c96:	4620      	mov	r0, r4
  404c98:	4b10      	ldr	r3, [pc, #64]	; (404cdc <indev_proc_press+0x398>)
  404c9a:	4798      	blx	r3
  404c9c:	2800      	cmp	r0, #0
  404c9e:	f47f ae88 	bne.w	4049b2 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404ca2:	2200      	movs	r2, #0
  404ca4:	2104      	movs	r1, #4
  404ca6:	4b0b      	ldr	r3, [pc, #44]	; (404cd4 <indev_proc_press+0x390>)
  404ca8:	6818      	ldr	r0, [r3, #0]
  404caa:	4b0d      	ldr	r3, [pc, #52]	; (404ce0 <indev_proc_press+0x39c>)
  404cac:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404cae:	4620      	mov	r0, r4
  404cb0:	4b0a      	ldr	r3, [pc, #40]	; (404cdc <indev_proc_press+0x398>)
  404cb2:	4798      	blx	r3
  404cb4:	2800      	cmp	r0, #0
  404cb6:	f47f ae7c 	bne.w	4049b2 <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  404cba:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404cbe:	f043 0301 	orr.w	r3, r3, #1
  404cc2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  404cc6:	4b0b      	ldr	r3, [pc, #44]	; (404cf4 <indev_proc_press+0x3b0>)
  404cc8:	4798      	blx	r3
  404cca:	6320      	str	r0, [r4, #48]	; 0x30
  404ccc:	e7a0      	b.n	404c10 <indev_proc_press+0x2cc>
  404cce:	4770      	bx	lr
  404cd0:	00405a45 	.word	0x00405a45
  404cd4:	2040c380 	.word	0x2040c380
  404cd8:	2040c37c 	.word	0x2040c37c
  404cdc:	004036e9 	.word	0x004036e9
  404ce0:	00405339 	.word	0x00405339
  404ce4:	00403ab5 	.word	0x00403ab5
  404ce8:	00403c3d 	.word	0x00403c3d
  404cec:	00403f4d 	.word	0x00403f4d
  404cf0:	00414829 	.word	0x00414829
  404cf4:	0041480d 	.word	0x0041480d

00404cf8 <indev_pointer_proc>:
{
  404cf8:	b538      	push	{r3, r4, r5, lr}
  404cfa:	4604      	mov	r4, r0
  404cfc:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  404cfe:	6d40      	ldr	r0, [r0, #84]	; 0x54
  404d00:	b148      	cbz	r0, 404d16 <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  404d02:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404d04:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  404d06:	429a      	cmp	r2, r3
  404d08:	d005      	beq.n	404d16 <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  404d0a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  404d0e:	f9b1 1000 	ldrsh.w	r1, [r1]
  404d12:	4b0d      	ldr	r3, [pc, #52]	; (404d48 <indev_pointer_proc+0x50>)
  404d14:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  404d16:	f9b5 3000 	ldrsh.w	r3, [r5]
  404d1a:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  404d1c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  404d20:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  404d22:	7f23      	ldrb	r3, [r4, #28]
  404d24:	2b01      	cmp	r3, #1
  404d26:	d00a      	beq.n	404d3e <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  404d28:	f104 001c 	add.w	r0, r4, #28
  404d2c:	4b07      	ldr	r3, [pc, #28]	; (404d4c <indev_pointer_proc+0x54>)
  404d2e:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404d30:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404d34:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404d36:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404d3a:	84e3      	strh	r3, [r4, #38]	; 0x26
  404d3c:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  404d3e:	f104 001c 	add.w	r0, r4, #28
  404d42:	4b03      	ldr	r3, [pc, #12]	; (404d50 <indev_pointer_proc+0x58>)
  404d44:	4798      	blx	r3
  404d46:	e7f3      	b.n	404d30 <indev_pointer_proc+0x38>
  404d48:	00405aad 	.word	0x00405aad
  404d4c:	00403909 	.word	0x00403909
  404d50:	00404945 	.word	0x00404945

00404d54 <indev_button_proc>:
    if(i->btn_points == NULL) {
  404d54:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  404d56:	2b00      	cmp	r3, #0
  404d58:	d03a      	beq.n	404dd0 <indev_button_proc+0x7c>
{
  404d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d5e:	460d      	mov	r5, r1
  404d60:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  404d62:	688a      	ldr	r2, [r1, #8]
  404d64:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404d68:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  404d6c:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  404d70:	7bab      	ldrb	r3, [r5, #14]
  404d72:	2b01      	cmp	r3, #1
  404d74:	d01a      	beq.n	404dac <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  404d76:	f104 061c 	add.w	r6, r4, #28
  404d7a:	4630      	mov	r0, r6
  404d7c:	4b15      	ldr	r3, [pc, #84]	; (404dd4 <indev_button_proc+0x80>)
  404d7e:	4798      	blx	r3
  404d80:	b990      	cbnz	r0, 404da8 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  404d82:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  404d84:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404d88:	7bab      	ldrb	r3, [r5, #14]
  404d8a:	2b01      	cmp	r3, #1
  404d8c:	d01c      	beq.n	404dc8 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  404d8e:	4630      	mov	r0, r6
  404d90:	4b11      	ldr	r3, [pc, #68]	; (404dd8 <indev_button_proc+0x84>)
  404d92:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  404d94:	4630      	mov	r0, r6
  404d96:	4b0f      	ldr	r3, [pc, #60]	; (404dd4 <indev_button_proc+0x80>)
  404d98:	4798      	blx	r3
  404d9a:	b928      	cbnz	r0, 404da8 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404d9c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404da0:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404da2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404da6:	84e3      	strh	r3, [r4, #38]	; 0x26
  404da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  404dac:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  404db0:	429f      	cmp	r7, r3
  404db2:	d004      	beq.n	404dbe <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  404db4:	f104 001c 	add.w	r0, r4, #28
  404db8:	4b07      	ldr	r3, [pc, #28]	; (404dd8 <indev_button_proc+0x84>)
  404dba:	4798      	blx	r3
  404dbc:	e7db      	b.n	404d76 <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  404dbe:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  404dc2:	4598      	cmp	r8, r3
  404dc4:	d1f6      	bne.n	404db4 <indev_button_proc+0x60>
  404dc6:	e7d6      	b.n	404d76 <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404dc8:	4630      	mov	r0, r6
  404dca:	4b04      	ldr	r3, [pc, #16]	; (404ddc <indev_button_proc+0x88>)
  404dcc:	4798      	blx	r3
  404dce:	e7e1      	b.n	404d94 <indev_button_proc+0x40>
  404dd0:	4770      	bx	lr
  404dd2:	bf00      	nop
  404dd4:	004036e9 	.word	0x004036e9
  404dd8:	00403909 	.word	0x00403909
  404ddc:	00404945 	.word	0x00404945

00404de0 <_lv_indev_read_task>:
    indev_act = task->user_data;
  404de0:	68c0      	ldr	r0, [r0, #12]
  404de2:	4b2e      	ldr	r3, [pc, #184]	; (404e9c <_lv_indev_read_task+0xbc>)
  404de4:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  404de6:	68c3      	ldr	r3, [r0, #12]
  404de8:	2b00      	cmp	r3, #0
  404dea:	d055      	beq.n	404e98 <_lv_indev_read_task+0xb8>
{
  404dec:	b530      	push	{r4, r5, lr}
  404dee:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  404df0:	4b2b      	ldr	r3, [pc, #172]	; (404ea0 <_lv_indev_read_task+0xc0>)
  404df2:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  404df4:	4b29      	ldr	r3, [pc, #164]	; (404e9c <_lv_indev_read_task+0xbc>)
  404df6:	681b      	ldr	r3, [r3, #0]
  404df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404dfc:	f013 0f04 	tst.w	r3, #4
  404e00:	d018      	beq.n	404e34 <_lv_indev_read_task+0x54>
}
  404e02:	b005      	add	sp, #20
  404e04:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404e06:	68dc      	ldr	r4, [r3, #12]
  404e08:	4b26      	ldr	r3, [pc, #152]	; (404ea4 <_lv_indev_read_task+0xc4>)
  404e0a:	4798      	blx	r3
  404e0c:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404e10:	e025      	b.n	404e5e <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404e12:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  404e16:	b312      	cbz	r2, 404e5e <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404e18:	68dc      	ldr	r4, [r3, #12]
  404e1a:	4b22      	ldr	r3, [pc, #136]	; (404ea4 <_lv_indev_read_task+0xc4>)
  404e1c:	4798      	blx	r3
  404e1e:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404e22:	e01c      	b.n	404e5e <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  404e24:	4669      	mov	r1, sp
  404e26:	4b20      	ldr	r3, [pc, #128]	; (404ea8 <_lv_indev_read_task+0xc8>)
  404e28:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  404e2a:	4b1c      	ldr	r3, [pc, #112]	; (404e9c <_lv_indev_read_task+0xbc>)
  404e2c:	6818      	ldr	r0, [r3, #0]
  404e2e:	4b1c      	ldr	r3, [pc, #112]	; (404ea0 <_lv_indev_read_task+0xc0>)
  404e30:	4798      	blx	r3
    } while(more_to_read);
  404e32:	b35d      	cbz	r5, 404e8c <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  404e34:	4c19      	ldr	r4, [pc, #100]	; (404e9c <_lv_indev_read_task+0xbc>)
  404e36:	4669      	mov	r1, sp
  404e38:	6820      	ldr	r0, [r4, #0]
  404e3a:	4b1c      	ldr	r3, [pc, #112]	; (404eac <_lv_indev_read_task+0xcc>)
  404e3c:	4798      	blx	r3
  404e3e:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  404e40:	6820      	ldr	r0, [r4, #0]
  404e42:	4b17      	ldr	r3, [pc, #92]	; (404ea0 <_lv_indev_read_task+0xc0>)
  404e44:	4798      	blx	r3
        indev_obj_act = NULL;
  404e46:	2200      	movs	r2, #0
  404e48:	4b19      	ldr	r3, [pc, #100]	; (404eb0 <_lv_indev_read_task+0xd0>)
  404e4a:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  404e4c:	6823      	ldr	r3, [r4, #0]
  404e4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
  404e52:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  404e54:	2a01      	cmp	r2, #1
  404e56:	d0d6      	beq.n	404e06 <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404e58:	781a      	ldrb	r2, [r3, #0]
  404e5a:	2a04      	cmp	r2, #4
  404e5c:	d0d9      	beq.n	404e12 <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  404e5e:	4b0f      	ldr	r3, [pc, #60]	; (404e9c <_lv_indev_read_task+0xbc>)
  404e60:	6818      	ldr	r0, [r3, #0]
  404e62:	7803      	ldrb	r3, [r0, #0]
  404e64:	2b01      	cmp	r3, #1
  404e66:	d0dd      	beq.n	404e24 <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  404e68:	2b02      	cmp	r3, #2
  404e6a:	d007      	beq.n	404e7c <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  404e6c:	2b04      	cmp	r3, #4
  404e6e:	d009      	beq.n	404e84 <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  404e70:	2b03      	cmp	r3, #3
  404e72:	d1da      	bne.n	404e2a <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  404e74:	4669      	mov	r1, sp
  404e76:	4b0f      	ldr	r3, [pc, #60]	; (404eb4 <_lv_indev_read_task+0xd4>)
  404e78:	4798      	blx	r3
  404e7a:	e7d6      	b.n	404e2a <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  404e7c:	4669      	mov	r1, sp
  404e7e:	4b0e      	ldr	r3, [pc, #56]	; (404eb8 <_lv_indev_read_task+0xd8>)
  404e80:	4798      	blx	r3
  404e82:	e7d2      	b.n	404e2a <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  404e84:	4669      	mov	r1, sp
  404e86:	4b0d      	ldr	r3, [pc, #52]	; (404ebc <_lv_indev_read_task+0xdc>)
  404e88:	4798      	blx	r3
  404e8a:	e7ce      	b.n	404e2a <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  404e8c:	2300      	movs	r3, #0
  404e8e:	4a03      	ldr	r2, [pc, #12]	; (404e9c <_lv_indev_read_task+0xbc>)
  404e90:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  404e92:	4a07      	ldr	r2, [pc, #28]	; (404eb0 <_lv_indev_read_task+0xd0>)
  404e94:	6013      	str	r3, [r2, #0]
  404e96:	e7b4      	b.n	404e02 <_lv_indev_read_task+0x22>
  404e98:	4770      	bx	lr
  404e9a:	bf00      	nop
  404e9c:	2040c37c 	.word	0x2040c37c
  404ea0:	00403691 	.word	0x00403691
  404ea4:	0041480d 	.word	0x0041480d
  404ea8:	00404cf9 	.word	0x00404cf9
  404eac:	004147a5 	.word	0x004147a5
  404eb0:	2040c380 	.word	0x2040c380
  404eb4:	00404d55 	.word	0x00404d55
  404eb8:	00404045 	.word	0x00404045
  404ebc:	00404371 	.word	0x00404371

00404ec0 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  404ec0:	4b05      	ldr	r3, [pc, #20]	; (404ed8 <lv_event_mark_deleted+0x18>)
  404ec2:	681b      	ldr	r3, [r3, #0]

    while(t) {
  404ec4:	e000      	b.n	404ec8 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  404ec6:	689b      	ldr	r3, [r3, #8]
    while(t) {
  404ec8:	b12b      	cbz	r3, 404ed6 <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  404eca:	681a      	ldr	r2, [r3, #0]
  404ecc:	4282      	cmp	r2, r0
  404ece:	d1fa      	bne.n	404ec6 <lv_event_mark_deleted+0x6>
  404ed0:	2201      	movs	r2, #1
  404ed2:	711a      	strb	r2, [r3, #4]
  404ed4:	e7f7      	b.n	404ec6 <lv_event_mark_deleted+0x6>
    }
}
  404ed6:	4770      	bx	lr
  404ed8:	2040c388 	.word	0x2040c388

00404edc <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  404edc:	2850      	cmp	r0, #80	; 0x50
  404ede:	d017      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404ee0:	d90c      	bls.n	404efc <style_prop_is_cacheble+0x20>
  404ee2:	28ff      	cmp	r0, #255	; 0xff
  404ee4:	d014      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404ee6:	d82e      	bhi.n	404f46 <style_prop_is_cacheble+0x6a>
  404ee8:	286e      	cmp	r0, #110	; 0x6e
  404eea:	d011      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404eec:	d926      	bls.n	404f3c <style_prop_is_cacheble+0x60>
  404eee:	287f      	cmp	r0, #127	; 0x7f
  404ef0:	d00e      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404ef2:	2891      	cmp	r0, #145	; 0x91
  404ef4:	d00c      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404ef6:	2872      	cmp	r0, #114	; 0x72
  404ef8:	d115      	bne.n	404f26 <style_prop_is_cacheble+0x4a>
  404efa:	e009      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404efc:	2818      	cmp	r0, #24
  404efe:	d909      	bls.n	404f14 <style_prop_is_cacheble+0x38>
  404f00:	2833      	cmp	r0, #51	; 0x33
  404f02:	d816      	bhi.n	404f32 <style_prop_is_cacheble+0x56>
  404f04:	2830      	cmp	r0, #48	; 0x30
  404f06:	d203      	bcs.n	404f10 <style_prop_is_cacheble+0x34>
  404f08:	2820      	cmp	r0, #32
  404f0a:	d001      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f0c:	282c      	cmp	r0, #44	; 0x2c
  404f0e:	d10a      	bne.n	404f26 <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  404f10:	2001      	movs	r0, #1
  404f12:	4770      	bx	lr
    switch(prop) {
  404f14:	2815      	cmp	r0, #21
  404f16:	d2fb      	bcs.n	404f10 <style_prop_is_cacheble+0x34>
  404f18:	2807      	cmp	r0, #7
  404f1a:	d806      	bhi.n	404f2a <style_prop_is_cacheble+0x4e>
  404f1c:	2804      	cmp	r0, #4
  404f1e:	d2f7      	bcs.n	404f10 <style_prop_is_cacheble+0x34>
  404f20:	3801      	subs	r0, #1
  404f22:	2801      	cmp	r0, #1
  404f24:	d9f4      	bls.n	404f10 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  404f26:	2000      	movs	r0, #0
    }
}
  404f28:	4770      	bx	lr
    switch(prop) {
  404f2a:	3810      	subs	r0, #16
  404f2c:	2803      	cmp	r0, #3
  404f2e:	d8fa      	bhi.n	404f26 <style_prop_is_cacheble+0x4a>
  404f30:	e7ee      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404f32:	2840      	cmp	r0, #64	; 0x40
  404f34:	d0ec      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f36:	2842      	cmp	r0, #66	; 0x42
  404f38:	d1f5      	bne.n	404f26 <style_prop_is_cacheble+0x4a>
  404f3a:	e7e9      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404f3c:	2854      	cmp	r0, #84	; 0x54
  404f3e:	d0e7      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f40:	2860      	cmp	r0, #96	; 0x60
  404f42:	d1f0      	bne.n	404f26 <style_prop_is_cacheble+0x4a>
  404f44:	e7e4      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404f46:	f248 0383 	movw	r3, #32899	; 0x8083
  404f4a:	4298      	cmp	r0, r3
  404f4c:	d0e0      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f4e:	d90c      	bls.n	404f6a <style_prop_is_cacheble+0x8e>
  404f50:	f248 03a0 	movw	r3, #32928	; 0x80a0
  404f54:	4298      	cmp	r0, r3
  404f56:	d0db      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f58:	f248 03ad 	movw	r3, #32941	; 0x80ad
  404f5c:	4298      	cmp	r0, r3
  404f5e:	d0d7      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f60:	f248 038e 	movw	r3, #32910	; 0x808e
  404f64:	4298      	cmp	r0, r3
  404f66:	d1de      	bne.n	404f26 <style_prop_is_cacheble+0x4a>
  404f68:	e7d2      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404f6a:	f248 030c 	movw	r3, #32780	; 0x800c
  404f6e:	4298      	cmp	r0, r3
  404f70:	d0ce      	beq.n	404f10 <style_prop_is_cacheble+0x34>
  404f72:	d3d8      	bcc.n	404f26 <style_prop_is_cacheble+0x4a>
  404f74:	4b02      	ldr	r3, [pc, #8]	; (404f80 <style_prop_is_cacheble+0xa4>)
  404f76:	4403      	add	r3, r0
  404f78:	2b01      	cmp	r3, #1
  404f7a:	d8d4      	bhi.n	404f26 <style_prop_is_cacheble+0x4a>
  404f7c:	e7c8      	b.n	404f10 <style_prop_is_cacheble+0x34>
  404f7e:	bf00      	nop
  404f80:	ffff7f80 	.word	0xffff7f80

00404f84 <refresh_children_position>:
{
  404f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404f86:	460e      	mov	r6, r1
  404f88:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  404f8a:	1d07      	adds	r7, r0, #4
  404f8c:	4638      	mov	r0, r7
  404f8e:	4b0f      	ldr	r3, [pc, #60]	; (404fcc <refresh_children_position+0x48>)
  404f90:	4798      	blx	r3
  404f92:	4604      	mov	r4, r0
  404f94:	e017      	b.n	404fc6 <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  404f96:	b2b2      	uxth	r2, r6
  404f98:	8a23      	ldrh	r3, [r4, #16]
  404f9a:	4413      	add	r3, r2
  404f9c:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  404f9e:	b2ab      	uxth	r3, r5
  404fa0:	8a61      	ldrh	r1, [r4, #18]
  404fa2:	4419      	add	r1, r3
  404fa4:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  404fa6:	8aa1      	ldrh	r1, [r4, #20]
  404fa8:	440a      	add	r2, r1
  404faa:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  404fac:	8ae2      	ldrh	r2, [r4, #22]
  404fae:	4413      	add	r3, r2
  404fb0:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  404fb2:	462a      	mov	r2, r5
  404fb4:	4631      	mov	r1, r6
  404fb6:	4620      	mov	r0, r4
  404fb8:	f7ff ffe4 	bl	404f84 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  404fbc:	4621      	mov	r1, r4
  404fbe:	4638      	mov	r0, r7
  404fc0:	4b03      	ldr	r3, [pc, #12]	; (404fd0 <refresh_children_position+0x4c>)
  404fc2:	4798      	blx	r3
  404fc4:	4604      	mov	r4, r0
  404fc6:	2c00      	cmp	r4, #0
  404fc8:	d1e5      	bne.n	404f96 <refresh_children_position+0x12>
}
  404fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fcc:	0041583d 	.word	0x0041583d
  404fd0:	00415851 	.word	0x00415851

00404fd4 <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  404fd4:	b538      	push	{r3, r4, r5, lr}
  404fd6:	4604      	mov	r4, r0
  404fd8:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  404fda:	22bc      	movs	r2, #188	; 0xbc
  404fdc:	4b55      	ldr	r3, [pc, #340]	; (405134 <style_snapshot_compare+0x160>)
  404fde:	4798      	blx	r3
  404fe0:	2800      	cmp	r0, #0
  404fe2:	f000 8086 	beq.w	4050f2 <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  404fe6:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  404fea:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  404fee:	429a      	cmp	r2, r3
  404ff0:	d001      	beq.n	404ff6 <style_snapshot_compare+0x22>
  404ff2:	2002      	movs	r0, #2
  404ff4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  404ff6:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  404ffa:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  404ffe:	429a      	cmp	r2, r3
  405000:	d001      	beq.n	405006 <style_snapshot_compare+0x32>
  405002:	2002      	movs	r0, #2
  405004:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405006:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  40500a:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  40500e:	429a      	cmp	r2, r3
  405010:	d001      	beq.n	405016 <style_snapshot_compare+0x42>
  405012:	2002      	movs	r0, #2
  405014:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405016:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  40501a:	4293      	cmp	r3, r2
  40501c:	d001      	beq.n	405022 <style_snapshot_compare+0x4e>
  40501e:	2002      	movs	r0, #2
  405020:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  405022:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  405026:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  40502a:	429a      	cmp	r2, r3
  40502c:	d001      	beq.n	405032 <style_snapshot_compare+0x5e>
  40502e:	2002      	movs	r0, #2
  405030:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  405032:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  405036:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  40503a:	429a      	cmp	r2, r3
  40503c:	d001      	beq.n	405042 <style_snapshot_compare+0x6e>
  40503e:	2002      	movs	r0, #2
  405040:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  405042:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  405046:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  40504a:	429a      	cmp	r2, r3
  40504c:	d153      	bne.n	4050f6 <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40504e:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  405052:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  405056:	429a      	cmp	r2, r3
  405058:	d14f      	bne.n	4050fa <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40505a:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  40505e:	4293      	cmp	r3, r2
  405060:	d14d      	bne.n	4050fe <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  405062:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  405066:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  40506a:	429a      	cmp	r2, r3
  40506c:	d149      	bne.n	405102 <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  40506e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  405072:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  405076:	429a      	cmp	r2, r3
  405078:	d145      	bne.n	405106 <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40507a:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  40507e:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  405082:	429a      	cmp	r2, r3
  405084:	d141      	bne.n	40510a <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  405086:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  40508a:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  40508e:	429a      	cmp	r2, r3
  405090:	d13d      	bne.n	40510e <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  405092:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  405096:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  40509a:	429a      	cmp	r2, r3
  40509c:	d139      	bne.n	405112 <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  40509e:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  4050a2:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  4050a6:	429a      	cmp	r2, r3
  4050a8:	d135      	bne.n	405116 <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  4050aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4050ac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  4050ae:	429a      	cmp	r2, r3
  4050b0:	d133      	bne.n	40511a <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  4050b2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  4050b6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4050ba:	429a      	cmp	r2, r3
  4050bc:	d12f      	bne.n	40511e <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4050be:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  4050c2:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  4050c6:	429a      	cmp	r2, r3
  4050c8:	d12b      	bne.n	405122 <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4050ca:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  4050ce:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  4050d2:	429a      	cmp	r2, r3
  4050d4:	d127      	bne.n	405126 <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4050d6:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  4050da:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  4050de:	429a      	cmp	r2, r3
  4050e0:	d123      	bne.n	40512a <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  4050e2:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  4050e6:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  4050ea:	429a      	cmp	r2, r3
  4050ec:	d01f      	beq.n	40512e <style_snapshot_compare+0x15a>
  4050ee:	2002      	movs	r0, #2
  4050f0:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  4050f2:	2000      	movs	r0, #0
  4050f4:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  4050f6:	2002      	movs	r0, #2
  4050f8:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4050fa:	2002      	movs	r0, #2
  4050fc:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  4050fe:	2002      	movs	r0, #2
  405100:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  405102:	2002      	movs	r0, #2
  405104:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405106:	2002      	movs	r0, #2
  405108:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40510a:	2002      	movs	r0, #2
  40510c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40510e:	2002      	movs	r0, #2
  405110:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  405112:	2002      	movs	r0, #2
  405114:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405116:	2002      	movs	r0, #2
  405118:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  40511a:	2002      	movs	r0, #2
  40511c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40511e:	2002      	movs	r0, #2
  405120:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  405122:	2002      	movs	r0, #2
  405124:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  405126:	2002      	movs	r0, #2
  405128:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  40512a:	2002      	movs	r0, #2
  40512c:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  40512e:	2001      	movs	r0, #1
}
  405130:	bd38      	pop	{r3, r4, r5, pc}
  405132:	bf00      	nop
  405134:	0041f90d 	.word	0x0041f90d

00405138 <lv_init>:
    if(lv_initialized) {
  405138:	4b22      	ldr	r3, [pc, #136]	; (4051c4 <lv_init+0x8c>)
  40513a:	781b      	ldrb	r3, [r3, #0]
  40513c:	b103      	cbz	r3, 405140 <lv_init+0x8>
  40513e:	4770      	bx	lr
{
  405140:	b510      	push	{r4, lr}
  405142:	b084      	sub	sp, #16
    _lv_mem_init();
  405144:	4b20      	ldr	r3, [pc, #128]	; (4051c8 <lv_init+0x90>)
  405146:	4798      	blx	r3
    _lv_task_core_init();
  405148:	4b20      	ldr	r3, [pc, #128]	; (4051cc <lv_init+0x94>)
  40514a:	4798      	blx	r3
    _lv_fs_init();
  40514c:	4b20      	ldr	r3, [pc, #128]	; (4051d0 <lv_init+0x98>)
  40514e:	4798      	blx	r3
    _lv_anim_core_init();
  405150:	4b20      	ldr	r3, [pc, #128]	; (4051d4 <lv_init+0x9c>)
  405152:	4798      	blx	r3
    _lv_group_init();
  405154:	4b20      	ldr	r3, [pc, #128]	; (4051d8 <lv_init+0xa0>)
  405156:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405158:	2110      	movs	r1, #16
  40515a:	4820      	ldr	r0, [pc, #128]	; (4051dc <lv_init+0xa4>)
  40515c:	4c20      	ldr	r4, [pc, #128]	; (4051e0 <lv_init+0xa8>)
  40515e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  405160:	f44f 71c4 	mov.w	r1, #392	; 0x188
  405164:	481f      	ldr	r0, [pc, #124]	; (4051e4 <lv_init+0xac>)
  405166:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405168:	2160      	movs	r1, #96	; 0x60
  40516a:	481f      	ldr	r0, [pc, #124]	; (4051e8 <lv_init+0xb0>)
  40516c:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40516e:	f04f 0000 	mov.w	r0, #0
  405172:	2316      	movs	r3, #22
  405174:	f363 00c7 	bfi	r0, r3, #3, #5
  405178:	2214      	movs	r2, #20
  40517a:	f362 200c 	bfi	r0, r2, #8, #5
  40517e:	f36f 304f 	bfc	r0, #13, #3
  405182:	f04f 0100 	mov.w	r1, #0
  405186:	220d      	movs	r2, #13
  405188:	f362 01c7 	bfi	r1, r2, #3, #5
  40518c:	f363 210c 	bfi	r1, r3, #8, #5
  405190:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  405194:	4b15      	ldr	r3, [pc, #84]	; (4051ec <lv_init+0xb4>)
  405196:	9302      	str	r3, [sp, #8]
  405198:	9301      	str	r3, [sp, #4]
  40519a:	9300      	str	r3, [sp, #0]
  40519c:	2202      	movs	r2, #2
  40519e:	4c14      	ldr	r4, [pc, #80]	; (4051f0 <lv_init+0xb8>)
  4051a0:	47a0      	blx	r4
    lv_theme_set_act(th);
  4051a2:	4b14      	ldr	r3, [pc, #80]	; (4051f4 <lv_init+0xbc>)
  4051a4:	4798      	blx	r3
    _lv_refr_init();
  4051a6:	4b14      	ldr	r3, [pc, #80]	; (4051f8 <lv_init+0xc0>)
  4051a8:	4798      	blx	r3
    _lv_indev_init();
  4051aa:	4b14      	ldr	r3, [pc, #80]	; (4051fc <lv_init+0xc4>)
  4051ac:	4798      	blx	r3
    _lv_img_decoder_init();
  4051ae:	4b14      	ldr	r3, [pc, #80]	; (405200 <lv_init+0xc8>)
  4051b0:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  4051b2:	2001      	movs	r0, #1
  4051b4:	4b13      	ldr	r3, [pc, #76]	; (405204 <lv_init+0xcc>)
  4051b6:	4798      	blx	r3
    lv_initialized = true;
  4051b8:	2201      	movs	r2, #1
  4051ba:	4b02      	ldr	r3, [pc, #8]	; (4051c4 <lv_init+0x8c>)
  4051bc:	701a      	strb	r2, [r3, #0]
}
  4051be:	b004      	add	sp, #16
  4051c0:	bd10      	pop	{r4, pc}
  4051c2:	bf00      	nop
  4051c4:	2040c38c 	.word	0x2040c38c
  4051c8:	00415c11 	.word	0x00415c11
  4051cc:	00416625 	.word	0x00416625
  4051d0:	004155bd 	.word	0x004155bd
  4051d4:	00414a49 	.word	0x00414a49
  4051d8:	00403379 	.word	0x00403379
  4051dc:	2043a22c 	.word	0x2043a22c
  4051e0:	00415793 	.word	0x00415793
  4051e4:	2043a188 	.word	0x2043a188
  4051e8:	2043a17c 	.word	0x2043a17c
  4051ec:	2040002c 	.word	0x2040002c
  4051f0:	0041c4e9 	.word	0x0041c4e9
  4051f4:	00416eb1 	.word	0x00416eb1
  4051f8:	00408f45 	.word	0x00408f45
  4051fc:	00404879 	.word	0x00404879
  405200:	004131bd 	.word	0x004131bd
  405204:	004127ad 	.word	0x004127ad

00405208 <lv_obj_set_adv_hittest>:
{
  405208:	b538      	push	{r3, r4, r5, lr}
  40520a:	4604      	mov	r4, r0
  40520c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40520e:	4b0a      	ldr	r3, [pc, #40]	; (405238 <lv_obj_set_adv_hittest+0x30>)
  405210:	4798      	blx	r3
  405212:	b140      	cbz	r0, 405226 <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  405214:	b96d      	cbnz	r5, 405232 <lv_obj_set_adv_hittest+0x2a>
  405216:	2200      	movs	r2, #0
  405218:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40521c:	f362 13c7 	bfi	r3, r2, #7, #1
  405220:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405224:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405226:	4622      	mov	r2, r4
  405228:	2300      	movs	r3, #0
  40522a:	4804      	ldr	r0, [pc, #16]	; (40523c <lv_obj_set_adv_hittest+0x34>)
  40522c:	4904      	ldr	r1, [pc, #16]	; (405240 <lv_obj_set_adv_hittest+0x38>)
  40522e:	4788      	blx	r1
  405230:	e7fe      	b.n	405230 <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  405232:	2201      	movs	r2, #1
  405234:	e7f0      	b.n	405218 <lv_obj_set_adv_hittest+0x10>
  405236:	bf00      	nop
  405238:	0041552d 	.word	0x0041552d
  40523c:	00423604 	.word	0x00423604
  405240:	00415539 	.word	0x00415539

00405244 <lv_obj_set_click>:
{
  405244:	b538      	push	{r3, r4, r5, lr}
  405246:	4604      	mov	r4, r0
  405248:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40524a:	4b08      	ldr	r3, [pc, #32]	; (40526c <lv_obj_set_click+0x28>)
  40524c:	4798      	blx	r3
  40524e:	b130      	cbz	r0, 40525e <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  405250:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405254:	f365 0300 	bfi	r3, r5, #0, #1
  405258:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40525c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40525e:	4622      	mov	r2, r4
  405260:	2300      	movs	r3, #0
  405262:	4803      	ldr	r0, [pc, #12]	; (405270 <lv_obj_set_click+0x2c>)
  405264:	4903      	ldr	r1, [pc, #12]	; (405274 <lv_obj_set_click+0x30>)
  405266:	4788      	blx	r1
  405268:	e7fe      	b.n	405268 <lv_obj_set_click+0x24>
  40526a:	bf00      	nop
  40526c:	0041552d 	.word	0x0041552d
  405270:	00423604 	.word	0x00423604
  405274:	00415539 	.word	0x00415539

00405278 <lv_event_send_func>:
{
  405278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40527c:	b084      	sub	sp, #16
  40527e:	4607      	mov	r7, r0
  405280:	4615      	mov	r5, r2
  405282:	461e      	mov	r6, r3
    if(obj != NULL) {
  405284:	460c      	mov	r4, r1
  405286:	b121      	cbz	r1, 405292 <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405288:	4608      	mov	r0, r1
  40528a:	4b24      	ldr	r3, [pc, #144]	; (40531c <lv_event_send_func+0xa4>)
  40528c:	4798      	blx	r3
  40528e:	2800      	cmp	r0, #0
  405290:	d034      	beq.n	4052fc <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  405292:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  405294:	2300      	movs	r3, #0
  405296:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  40529a:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  40529c:	4b20      	ldr	r3, [pc, #128]	; (405320 <lv_event_send_func+0xa8>)
  40529e:	681b      	ldr	r3, [r3, #0]
  4052a0:	b103      	cbz	r3, 4052a4 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  4052a2:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  4052a4:	aa01      	add	r2, sp, #4
  4052a6:	4b1e      	ldr	r3, [pc, #120]	; (405320 <lv_event_send_func+0xa8>)
  4052a8:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  4052aa:	4b1e      	ldr	r3, [pc, #120]	; (405324 <lv_event_send_func+0xac>)
  4052ac:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  4052b0:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  4052b2:	4b1d      	ldr	r3, [pc, #116]	; (405328 <lv_event_send_func+0xb0>)
  4052b4:	4798      	blx	r3
    if(indev_act) {
  4052b6:	b118      	cbz	r0, 4052c0 <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  4052b8:	6883      	ldr	r3, [r0, #8]
  4052ba:	b10b      	cbz	r3, 4052c0 <lv_event_send_func+0x48>
  4052bc:	4629      	mov	r1, r5
  4052be:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  4052c0:	b117      	cbz	r7, 4052c8 <lv_event_send_func+0x50>
  4052c2:	4629      	mov	r1, r5
  4052c4:	4620      	mov	r0, r4
  4052c6:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  4052c8:	4b16      	ldr	r3, [pc, #88]	; (405324 <lv_event_send_func+0xac>)
  4052ca:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  4052ce:	4b14      	ldr	r3, [pc, #80]	; (405320 <lv_event_send_func+0xa8>)
  4052d0:	681a      	ldr	r2, [r3, #0]
  4052d2:	6892      	ldr	r2, [r2, #8]
  4052d4:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  4052d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
  4052da:	b9ab      	cbnz	r3, 405308 <lv_event_send_func+0x90>
    if(obj) {
  4052dc:	b1c4      	cbz	r4, 405310 <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  4052de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4052e2:	f013 0f40 	tst.w	r3, #64	; 0x40
  4052e6:	d015      	beq.n	405314 <lv_event_send_func+0x9c>
  4052e8:	6820      	ldr	r0, [r4, #0]
  4052ea:	b1a8      	cbz	r0, 405318 <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  4052ec:	4632      	mov	r2, r6
  4052ee:	4629      	mov	r1, r5
  4052f0:	4b0e      	ldr	r3, [pc, #56]	; (40532c <lv_event_send_func+0xb4>)
  4052f2:	4798      	blx	r3
            if(res != LV_RES_OK) {
  4052f4:	2801      	cmp	r0, #1
  4052f6:	d008      	beq.n	40530a <lv_event_send_func+0x92>
                return LV_RES_INV;
  4052f8:	2000      	movs	r0, #0
  4052fa:	e006      	b.n	40530a <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052fc:	4622      	mov	r2, r4
  4052fe:	2300      	movs	r3, #0
  405300:	480b      	ldr	r0, [pc, #44]	; (405330 <lv_event_send_func+0xb8>)
  405302:	490c      	ldr	r1, [pc, #48]	; (405334 <lv_event_send_func+0xbc>)
  405304:	4788      	blx	r1
  405306:	e7fe      	b.n	405306 <lv_event_send_func+0x8e>
        return LV_RES_INV;
  405308:	2000      	movs	r0, #0
}
  40530a:	b004      	add	sp, #16
  40530c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  405310:	2001      	movs	r0, #1
  405312:	e7fa      	b.n	40530a <lv_event_send_func+0x92>
  405314:	2001      	movs	r0, #1
  405316:	e7f8      	b.n	40530a <lv_event_send_func+0x92>
  405318:	2001      	movs	r0, #1
  40531a:	e7f6      	b.n	40530a <lv_event_send_func+0x92>
  40531c:	0041552d 	.word	0x0041552d
  405320:	2040c388 	.word	0x2040c388
  405324:	2040c384 	.word	0x2040c384
  405328:	004047f1 	.word	0x004047f1
  40532c:	00405339 	.word	0x00405339
  405330:	00423604 	.word	0x00423604
  405334:	00415539 	.word	0x00415539

00405338 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  405338:	b198      	cbz	r0, 405362 <lv_event_send+0x2a>
{
  40533a:	b570      	push	{r4, r5, r6, lr}
  40533c:	4604      	mov	r4, r0
  40533e:	4616      	mov	r6, r2
  405340:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405342:	4b09      	ldr	r3, [pc, #36]	; (405368 <lv_event_send+0x30>)
  405344:	4798      	blx	r3
  405346:	b928      	cbnz	r0, 405354 <lv_event_send+0x1c>
  405348:	4622      	mov	r2, r4
  40534a:	2300      	movs	r3, #0
  40534c:	4807      	ldr	r0, [pc, #28]	; (40536c <lv_event_send+0x34>)
  40534e:	4908      	ldr	r1, [pc, #32]	; (405370 <lv_event_send+0x38>)
  405350:	4788      	blx	r1
  405352:	e7fe      	b.n	405352 <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  405354:	4633      	mov	r3, r6
  405356:	462a      	mov	r2, r5
  405358:	4621      	mov	r1, r4
  40535a:	69a0      	ldr	r0, [r4, #24]
  40535c:	4c05      	ldr	r4, [pc, #20]	; (405374 <lv_event_send+0x3c>)
  40535e:	47a0      	blx	r4
    return res;
  405360:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  405362:	2001      	movs	r0, #1
  405364:	4770      	bx	lr
  405366:	bf00      	nop
  405368:	0041552d 	.word	0x0041552d
  40536c:	00423604 	.word	0x00423604
  405370:	00415539 	.word	0x00415539
  405374:	00405279 	.word	0x00405279

00405378 <lv_obj_set_signal_cb>:
{
  405378:	b538      	push	{r3, r4, r5, lr}
  40537a:	4604      	mov	r4, r0
  40537c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40537e:	4b05      	ldr	r3, [pc, #20]	; (405394 <lv_obj_set_signal_cb+0x1c>)
  405380:	4798      	blx	r3
  405382:	b108      	cbz	r0, 405388 <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  405384:	61e5      	str	r5, [r4, #28]
  405386:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405388:	4622      	mov	r2, r4
  40538a:	2300      	movs	r3, #0
  40538c:	4802      	ldr	r0, [pc, #8]	; (405398 <lv_obj_set_signal_cb+0x20>)
  40538e:	4903      	ldr	r1, [pc, #12]	; (40539c <lv_obj_set_signal_cb+0x24>)
  405390:	4788      	blx	r1
  405392:	e7fe      	b.n	405392 <lv_obj_set_signal_cb+0x1a>
  405394:	0041552d 	.word	0x0041552d
  405398:	00423604 	.word	0x00423604
  40539c:	00415539 	.word	0x00415539

004053a0 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  4053a0:	b120      	cbz	r0, 4053ac <lv_signal_send+0xc>
{
  4053a2:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  4053a4:	69c4      	ldr	r4, [r0, #28]
  4053a6:	b11c      	cbz	r4, 4053b0 <lv_signal_send+0x10>
  4053a8:	47a0      	blx	r4
  4053aa:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  4053ac:	2001      	movs	r0, #1
  4053ae:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  4053b0:	2001      	movs	r0, #1
}
  4053b2:	bd10      	pop	{r4, pc}

004053b4 <lv_obj_set_design_cb>:
{
  4053b4:	b538      	push	{r3, r4, r5, lr}
  4053b6:	4604      	mov	r4, r0
  4053b8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053ba:	4b05      	ldr	r3, [pc, #20]	; (4053d0 <lv_obj_set_design_cb+0x1c>)
  4053bc:	4798      	blx	r3
  4053be:	b108      	cbz	r0, 4053c4 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  4053c0:	6225      	str	r5, [r4, #32]
  4053c2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053c4:	4622      	mov	r2, r4
  4053c6:	2300      	movs	r3, #0
  4053c8:	4802      	ldr	r0, [pc, #8]	; (4053d4 <lv_obj_set_design_cb+0x20>)
  4053ca:	4903      	ldr	r1, [pc, #12]	; (4053d8 <lv_obj_set_design_cb+0x24>)
  4053cc:	4788      	blx	r1
  4053ce:	e7fe      	b.n	4053ce <lv_obj_set_design_cb+0x1a>
  4053d0:	0041552d 	.word	0x0041552d
  4053d4:	00423604 	.word	0x00423604
  4053d8:	00415539 	.word	0x00415539

004053dc <lv_obj_allocate_ext_attr>:
{
  4053dc:	b538      	push	{r3, r4, r5, lr}
  4053de:	4604      	mov	r4, r0
  4053e0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053e2:	4b09      	ldr	r3, [pc, #36]	; (405408 <lv_obj_allocate_ext_attr+0x2c>)
  4053e4:	4798      	blx	r3
  4053e6:	b928      	cbnz	r0, 4053f4 <lv_obj_allocate_ext_attr+0x18>
  4053e8:	4622      	mov	r2, r4
  4053ea:	2300      	movs	r3, #0
  4053ec:	4807      	ldr	r0, [pc, #28]	; (40540c <lv_obj_allocate_ext_attr+0x30>)
  4053ee:	4908      	ldr	r1, [pc, #32]	; (405410 <lv_obj_allocate_ext_attr+0x34>)
  4053f0:	4788      	blx	r1
  4053f2:	e7fe      	b.n	4053f2 <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  4053f4:	4629      	mov	r1, r5
  4053f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4053f8:	4b06      	ldr	r3, [pc, #24]	; (405414 <lv_obj_allocate_ext_attr+0x38>)
  4053fa:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  4053fc:	4603      	mov	r3, r0
  4053fe:	b100      	cbz	r0, 405402 <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  405400:	6260      	str	r0, [r4, #36]	; 0x24
}
  405402:	4618      	mov	r0, r3
  405404:	bd38      	pop	{r3, r4, r5, pc}
  405406:	bf00      	nop
  405408:	0041552d 	.word	0x0041552d
  40540c:	00423604 	.word	0x00423604
  405410:	00415539 	.word	0x00415539
  405414:	00415f65 	.word	0x00415f65

00405418 <lv_obj_refresh_ext_draw_pad>:
{
  405418:	b510      	push	{r4, lr}
  40541a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40541c:	4b07      	ldr	r3, [pc, #28]	; (40543c <lv_obj_refresh_ext_draw_pad+0x24>)
  40541e:	4798      	blx	r3
  405420:	b928      	cbnz	r0, 40542e <lv_obj_refresh_ext_draw_pad+0x16>
  405422:	4622      	mov	r2, r4
  405424:	2300      	movs	r3, #0
  405426:	4806      	ldr	r0, [pc, #24]	; (405440 <lv_obj_refresh_ext_draw_pad+0x28>)
  405428:	4906      	ldr	r1, [pc, #24]	; (405444 <lv_obj_refresh_ext_draw_pad+0x2c>)
  40542a:	4788      	blx	r1
  40542c:	e7fe      	b.n	40542c <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  40542e:	2200      	movs	r2, #0
  405430:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  405432:	69e3      	ldr	r3, [r4, #28]
  405434:	2106      	movs	r1, #6
  405436:	4620      	mov	r0, r4
  405438:	4798      	blx	r3
  40543a:	bd10      	pop	{r4, pc}
  40543c:	0041552d 	.word	0x0041552d
  405440:	00423604 	.word	0x00423604
  405444:	00415539 	.word	0x00415539

00405448 <lv_obj_get_parent>:
{
  405448:	b510      	push	{r4, lr}
  40544a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40544c:	4b05      	ldr	r3, [pc, #20]	; (405464 <lv_obj_get_parent+0x1c>)
  40544e:	4798      	blx	r3
  405450:	b108      	cbz	r0, 405456 <lv_obj_get_parent+0xe>
}
  405452:	6820      	ldr	r0, [r4, #0]
  405454:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405456:	4622      	mov	r2, r4
  405458:	2300      	movs	r3, #0
  40545a:	4803      	ldr	r0, [pc, #12]	; (405468 <lv_obj_get_parent+0x20>)
  40545c:	4903      	ldr	r1, [pc, #12]	; (40546c <lv_obj_get_parent+0x24>)
  40545e:	4788      	blx	r1
  405460:	e7fe      	b.n	405460 <lv_obj_get_parent+0x18>
  405462:	bf00      	nop
  405464:	0041552d 	.word	0x0041552d
  405468:	00423604 	.word	0x00423604
  40546c:	00415539 	.word	0x00415539

00405470 <lv_obj_get_screen>:
{
  405470:	b510      	push	{r4, lr}
  405472:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405474:	4b08      	ldr	r3, [pc, #32]	; (405498 <lv_obj_get_screen+0x28>)
  405476:	4798      	blx	r3
  405478:	b930      	cbnz	r0, 405488 <lv_obj_get_screen+0x18>
  40547a:	4622      	mov	r2, r4
  40547c:	2300      	movs	r3, #0
  40547e:	4807      	ldr	r0, [pc, #28]	; (40549c <lv_obj_get_screen+0x2c>)
  405480:	4907      	ldr	r1, [pc, #28]	; (4054a0 <lv_obj_get_screen+0x30>)
  405482:	4788      	blx	r1
  405484:	e7fe      	b.n	405484 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  405486:	461c      	mov	r4, r3
  405488:	4620      	mov	r0, r4
  40548a:	4b06      	ldr	r3, [pc, #24]	; (4054a4 <lv_obj_get_screen+0x34>)
  40548c:	4798      	blx	r3
    } while(par != NULL);
  40548e:	4603      	mov	r3, r0
  405490:	2800      	cmp	r0, #0
  405492:	d1f8      	bne.n	405486 <lv_obj_get_screen+0x16>
}
  405494:	4620      	mov	r0, r4
  405496:	bd10      	pop	{r4, pc}
  405498:	0041552d 	.word	0x0041552d
  40549c:	00423604 	.word	0x00423604
  4054a0:	00415539 	.word	0x00415539
  4054a4:	00405449 	.word	0x00405449

004054a8 <lv_obj_get_disp>:
{
  4054a8:	b570      	push	{r4, r5, r6, lr}
  4054aa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054ac:	4b14      	ldr	r3, [pc, #80]	; (405500 <lv_obj_get_disp+0x58>)
  4054ae:	4798      	blx	r3
  4054b0:	b1b8      	cbz	r0, 4054e2 <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  4054b2:	6823      	ldr	r3, [r4, #0]
  4054b4:	b11b      	cbz	r3, 4054be <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  4054b6:	4620      	mov	r0, r4
  4054b8:	4b12      	ldr	r3, [pc, #72]	; (405504 <lv_obj_get_disp+0x5c>)
  4054ba:	4798      	blx	r3
  4054bc:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  4054be:	4812      	ldr	r0, [pc, #72]	; (405508 <lv_obj_get_disp+0x60>)
  4054c0:	4b12      	ldr	r3, [pc, #72]	; (40550c <lv_obj_get_disp+0x64>)
  4054c2:	4798      	blx	r3
  4054c4:	4605      	mov	r5, r0
  4054c6:	b1c5      	cbz	r5, 4054fa <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  4054c8:	f105 0638 	add.w	r6, r5, #56	; 0x38
  4054cc:	4630      	mov	r0, r6
  4054ce:	4b0f      	ldr	r3, [pc, #60]	; (40550c <lv_obj_get_disp+0x64>)
  4054d0:	4798      	blx	r3
  4054d2:	b160      	cbz	r0, 4054ee <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  4054d4:	4284      	cmp	r4, r0
  4054d6:	d010      	beq.n	4054fa <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  4054d8:	4601      	mov	r1, r0
  4054da:	4630      	mov	r0, r6
  4054dc:	4b0c      	ldr	r3, [pc, #48]	; (405510 <lv_obj_get_disp+0x68>)
  4054de:	4798      	blx	r3
  4054e0:	e7f7      	b.n	4054d2 <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054e2:	4622      	mov	r2, r4
  4054e4:	2300      	movs	r3, #0
  4054e6:	480b      	ldr	r0, [pc, #44]	; (405514 <lv_obj_get_disp+0x6c>)
  4054e8:	490b      	ldr	r1, [pc, #44]	; (405518 <lv_obj_get_disp+0x70>)
  4054ea:	4788      	blx	r1
  4054ec:	e7fe      	b.n	4054ec <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  4054ee:	4629      	mov	r1, r5
  4054f0:	4805      	ldr	r0, [pc, #20]	; (405508 <lv_obj_get_disp+0x60>)
  4054f2:	4b07      	ldr	r3, [pc, #28]	; (405510 <lv_obj_get_disp+0x68>)
  4054f4:	4798      	blx	r3
  4054f6:	4605      	mov	r5, r0
  4054f8:	e7e5      	b.n	4054c6 <lv_obj_get_disp+0x1e>
}
  4054fa:	4628      	mov	r0, r5
  4054fc:	bd70      	pop	{r4, r5, r6, pc}
  4054fe:	bf00      	nop
  405500:	0041552d 	.word	0x0041552d
  405504:	00405471 	.word	0x00405471
  405508:	2043a188 	.word	0x2043a188
  40550c:	0041583d 	.word	0x0041583d
  405510:	00415851 	.word	0x00415851
  405514:	00423604 	.word	0x00423604
  405518:	00415539 	.word	0x00415539

0040551c <lv_obj_get_child>:
{
  40551c:	b538      	push	{r3, r4, r5, lr}
  40551e:	4604      	mov	r4, r0
  405520:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405522:	4b09      	ldr	r3, [pc, #36]	; (405548 <lv_obj_get_child+0x2c>)
  405524:	4798      	blx	r3
  405526:	b128      	cbz	r0, 405534 <lv_obj_get_child+0x18>
    if(child == NULL) {
  405528:	b155      	cbz	r5, 405540 <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  40552a:	4629      	mov	r1, r5
  40552c:	1d20      	adds	r0, r4, #4
  40552e:	4b07      	ldr	r3, [pc, #28]	; (40554c <lv_obj_get_child+0x30>)
  405530:	4798      	blx	r3
}
  405532:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405534:	4622      	mov	r2, r4
  405536:	2300      	movs	r3, #0
  405538:	4805      	ldr	r0, [pc, #20]	; (405550 <lv_obj_get_child+0x34>)
  40553a:	4906      	ldr	r1, [pc, #24]	; (405554 <lv_obj_get_child+0x38>)
  40553c:	4788      	blx	r1
  40553e:	e7fe      	b.n	40553e <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  405540:	1d20      	adds	r0, r4, #4
  405542:	4b05      	ldr	r3, [pc, #20]	; (405558 <lv_obj_get_child+0x3c>)
  405544:	4798      	blx	r3
  405546:	bd38      	pop	{r3, r4, r5, pc}
  405548:	0041552d 	.word	0x0041552d
  40554c:	00415851 	.word	0x00415851
  405550:	00423604 	.word	0x00423604
  405554:	00415539 	.word	0x00415539
  405558:	0041583d 	.word	0x0041583d

0040555c <lv_obj_get_coords>:
{
  40555c:	b538      	push	{r3, r4, r5, lr}
  40555e:	4604      	mov	r4, r0
  405560:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405562:	4b0b      	ldr	r3, [pc, #44]	; (405590 <lv_obj_get_coords+0x34>)
  405564:	4798      	blx	r3
  405566:	b120      	cbz	r0, 405572 <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  405568:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40556c:	4629      	mov	r1, r5
  40556e:	2208      	movs	r2, #8
  405570:	e00a      	b.n	405588 <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405572:	4622      	mov	r2, r4
  405574:	2300      	movs	r3, #0
  405576:	4807      	ldr	r0, [pc, #28]	; (405594 <lv_obj_get_coords+0x38>)
  405578:	4907      	ldr	r1, [pc, #28]	; (405598 <lv_obj_get_coords+0x3c>)
  40557a:	4788      	blx	r1
  40557c:	e7fe      	b.n	40557c <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40557e:	f813 0b01 	ldrb.w	r0, [r3], #1
  405582:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  405586:	3a01      	subs	r2, #1
    while(len) {
  405588:	2a00      	cmp	r2, #0
  40558a:	d1f8      	bne.n	40557e <lv_obj_get_coords+0x22>
}
  40558c:	bd38      	pop	{r3, r4, r5, pc}
  40558e:	bf00      	nop
  405590:	0041552d 	.word	0x0041552d
  405594:	00423604 	.word	0x00423604
  405598:	00415539 	.word	0x00415539

0040559c <lv_obj_get_x>:
{
  40559c:	b510      	push	{r4, lr}
  40559e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055a0:	4b0a      	ldr	r3, [pc, #40]	; (4055cc <lv_obj_get_x+0x30>)
  4055a2:	4798      	blx	r3
  4055a4:	b928      	cbnz	r0, 4055b2 <lv_obj_get_x+0x16>
  4055a6:	4622      	mov	r2, r4
  4055a8:	2300      	movs	r3, #0
  4055aa:	4809      	ldr	r0, [pc, #36]	; (4055d0 <lv_obj_get_x+0x34>)
  4055ac:	4909      	ldr	r1, [pc, #36]	; (4055d4 <lv_obj_get_x+0x38>)
  4055ae:	4788      	blx	r1
  4055b0:	e7fe      	b.n	4055b0 <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4055b2:	4620      	mov	r0, r4
  4055b4:	4b08      	ldr	r3, [pc, #32]	; (4055d8 <lv_obj_get_x+0x3c>)
  4055b6:	4798      	blx	r3
    if(parent) {
  4055b8:	4603      	mov	r3, r0
  4055ba:	b120      	cbz	r0, 4055c6 <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  4055bc:	8a20      	ldrh	r0, [r4, #16]
  4055be:	8a1b      	ldrh	r3, [r3, #16]
  4055c0:	1ac0      	subs	r0, r0, r3
  4055c2:	b200      	sxth	r0, r0
  4055c4:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  4055c6:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  4055ca:	bd10      	pop	{r4, pc}
  4055cc:	0041552d 	.word	0x0041552d
  4055d0:	00423604 	.word	0x00423604
  4055d4:	00415539 	.word	0x00415539
  4055d8:	00405449 	.word	0x00405449

004055dc <lv_obj_get_y>:
{
  4055dc:	b510      	push	{r4, lr}
  4055de:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055e0:	4b0a      	ldr	r3, [pc, #40]	; (40560c <lv_obj_get_y+0x30>)
  4055e2:	4798      	blx	r3
  4055e4:	b928      	cbnz	r0, 4055f2 <lv_obj_get_y+0x16>
  4055e6:	4622      	mov	r2, r4
  4055e8:	2300      	movs	r3, #0
  4055ea:	4809      	ldr	r0, [pc, #36]	; (405610 <lv_obj_get_y+0x34>)
  4055ec:	4909      	ldr	r1, [pc, #36]	; (405614 <lv_obj_get_y+0x38>)
  4055ee:	4788      	blx	r1
  4055f0:	e7fe      	b.n	4055f0 <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  4055f2:	4620      	mov	r0, r4
  4055f4:	4b08      	ldr	r3, [pc, #32]	; (405618 <lv_obj_get_y+0x3c>)
  4055f6:	4798      	blx	r3
    if(parent) {
  4055f8:	4603      	mov	r3, r0
  4055fa:	b120      	cbz	r0, 405606 <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  4055fc:	8a60      	ldrh	r0, [r4, #18]
  4055fe:	8a5b      	ldrh	r3, [r3, #18]
  405600:	1ac0      	subs	r0, r0, r3
  405602:	b200      	sxth	r0, r0
  405604:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  405606:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  40560a:	bd10      	pop	{r4, pc}
  40560c:	0041552d 	.word	0x0041552d
  405610:	00423604 	.word	0x00423604
  405614:	00415539 	.word	0x00415539
  405618:	00405449 	.word	0x00405449

0040561c <lv_obj_get_width>:
{
  40561c:	b510      	push	{r4, lr}
  40561e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405620:	4b07      	ldr	r3, [pc, #28]	; (405640 <lv_obj_get_width+0x24>)
  405622:	4798      	blx	r3
  405624:	b130      	cbz	r0, 405634 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  405626:	8aa0      	ldrh	r0, [r4, #20]
  405628:	8a23      	ldrh	r3, [r4, #16]
  40562a:	1ac0      	subs	r0, r0, r3
  40562c:	b280      	uxth	r0, r0
  40562e:	3001      	adds	r0, #1
}
  405630:	b200      	sxth	r0, r0
  405632:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405634:	4622      	mov	r2, r4
  405636:	2300      	movs	r3, #0
  405638:	4802      	ldr	r0, [pc, #8]	; (405644 <lv_obj_get_width+0x28>)
  40563a:	4903      	ldr	r1, [pc, #12]	; (405648 <lv_obj_get_width+0x2c>)
  40563c:	4788      	blx	r1
  40563e:	e7fe      	b.n	40563e <lv_obj_get_width+0x22>
  405640:	0041552d 	.word	0x0041552d
  405644:	00423604 	.word	0x00423604
  405648:	00415539 	.word	0x00415539

0040564c <lv_obj_get_height>:
{
  40564c:	b510      	push	{r4, lr}
  40564e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405650:	4b07      	ldr	r3, [pc, #28]	; (405670 <lv_obj_get_height+0x24>)
  405652:	4798      	blx	r3
  405654:	b130      	cbz	r0, 405664 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  405656:	8ae0      	ldrh	r0, [r4, #22]
  405658:	8a63      	ldrh	r3, [r4, #18]
  40565a:	1ac0      	subs	r0, r0, r3
  40565c:	b280      	uxth	r0, r0
  40565e:	3001      	adds	r0, #1
}
  405660:	b200      	sxth	r0, r0
  405662:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405664:	4622      	mov	r2, r4
  405666:	2300      	movs	r3, #0
  405668:	4802      	ldr	r0, [pc, #8]	; (405674 <lv_obj_get_height+0x28>)
  40566a:	4903      	ldr	r1, [pc, #12]	; (405678 <lv_obj_get_height+0x2c>)
  40566c:	4788      	blx	r1
  40566e:	e7fe      	b.n	40566e <lv_obj_get_height+0x22>
  405670:	0041552d 	.word	0x0041552d
  405674:	00423604 	.word	0x00423604
  405678:	00415539 	.word	0x00415539

0040567c <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  40567c:	b909      	cbnz	r1, 405682 <lv_obj_get_style_list+0x6>
  40567e:	3028      	adds	r0, #40	; 0x28
  405680:	4770      	bx	lr
{
  405682:	b500      	push	{lr}
  405684:	b083      	sub	sp, #12
    info.part = part;
  405686:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  40568a:	2300      	movs	r3, #0
  40568c:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  40568e:	466a      	mov	r2, sp
  405690:	2108      	movs	r1, #8
  405692:	4b05      	ldr	r3, [pc, #20]	; (4056a8 <lv_obj_get_style_list+0x2c>)
  405694:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  405696:	2801      	cmp	r0, #1
  405698:	d103      	bne.n	4056a2 <lv_obj_get_style_list+0x26>
    return info.result;
  40569a:	9801      	ldr	r0, [sp, #4]
}
  40569c:	b003      	add	sp, #12
  40569e:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  4056a2:	2000      	movs	r0, #0
  4056a4:	e7fa      	b.n	40569c <lv_obj_get_style_list+0x20>
  4056a6:	bf00      	nop
  4056a8:	004053a1 	.word	0x004053a1

004056ac <trans_del>:
{
  4056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4056b0:	4607      	mov	r7, r0
  4056b2:	4688      	mov	r8, r1
  4056b4:	4691      	mov	r9, r2
  4056b6:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4056b8:	4819      	ldr	r0, [pc, #100]	; (405720 <trans_del+0x74>)
  4056ba:	4b1a      	ldr	r3, [pc, #104]	; (405724 <trans_del+0x78>)
  4056bc:	4798      	blx	r3
  4056be:	4604      	mov	r4, r0
    while(tr != NULL) {
  4056c0:	e006      	b.n	4056d0 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  4056c2:	88a3      	ldrh	r3, [r4, #4]
  4056c4:	454b      	cmp	r3, r9
  4056c6:	d015      	beq.n	4056f4 <trans_del+0x48>
  4056c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  4056cc:	d012      	beq.n	4056f4 <trans_del+0x48>
{
  4056ce:	462c      	mov	r4, r5
    while(tr != NULL) {
  4056d0:	b31c      	cbz	r4, 40571a <trans_del+0x6e>
        if(tr == tr_limit) break;
  4056d2:	42b4      	cmp	r4, r6
  4056d4:	d021      	beq.n	40571a <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4056d6:	4621      	mov	r1, r4
  4056d8:	4811      	ldr	r0, [pc, #68]	; (405720 <trans_del+0x74>)
  4056da:	4b13      	ldr	r3, [pc, #76]	; (405728 <trans_del+0x7c>)
  4056dc:	4798      	blx	r3
  4056de:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  4056e0:	6820      	ldr	r0, [r4, #0]
  4056e2:	42b8      	cmp	r0, r7
  4056e4:	d1f3      	bne.n	4056ce <trans_del+0x22>
  4056e6:	79a1      	ldrb	r1, [r4, #6]
  4056e8:	4541      	cmp	r1, r8
  4056ea:	d0ea      	beq.n	4056c2 <trans_del+0x16>
  4056ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4056f0:	d1ed      	bne.n	4056ce <trans_del+0x22>
  4056f2:	e7e6      	b.n	4056c2 <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  4056f4:	4b0d      	ldr	r3, [pc, #52]	; (40572c <trans_del+0x80>)
  4056f6:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  4056f8:	4b0d      	ldr	r3, [pc, #52]	; (405730 <trans_del+0x84>)
  4056fa:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  4056fc:	88a1      	ldrh	r1, [r4, #4]
  4056fe:	4b0d      	ldr	r3, [pc, #52]	; (405734 <trans_del+0x88>)
  405700:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  405702:	2100      	movs	r1, #0
  405704:	4620      	mov	r0, r4
  405706:	4b0c      	ldr	r3, [pc, #48]	; (405738 <trans_del+0x8c>)
  405708:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  40570a:	4621      	mov	r1, r4
  40570c:	4804      	ldr	r0, [pc, #16]	; (405720 <trans_del+0x74>)
  40570e:	4b0b      	ldr	r3, [pc, #44]	; (40573c <trans_del+0x90>)
  405710:	4798      	blx	r3
            lv_mem_free(tr);
  405712:	4620      	mov	r0, r4
  405714:	4b0a      	ldr	r3, [pc, #40]	; (405740 <trans_del+0x94>)
  405716:	4798      	blx	r3
  405718:	e7d9      	b.n	4056ce <trans_del+0x22>
  40571a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40571e:	bf00      	nop
  405720:	2043a22c 	.word	0x2043a22c
  405724:	00415847 	.word	0x00415847
  405728:	0041585f 	.word	0x0041585f
  40572c:	0040567d 	.word	0x0040567d
  405730:	0040a4e1 	.word	0x0040a4e1
  405734:	0040993d 	.word	0x0040993d
  405738:	00414ae9 	.word	0x00414ae9
  40573c:	004158f9 	.word	0x004158f9
  405740:	00415cf9 	.word	0x00415cf9

00405744 <lv_obj_clean_style_list>:
{
  405744:	b538      	push	{r3, r4, r5, lr}
  405746:	4604      	mov	r4, r0
  405748:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  40574a:	4b06      	ldr	r3, [pc, #24]	; (405764 <lv_obj_clean_style_list+0x20>)
  40574c:	4798      	blx	r3
    if(style_dsc == NULL) {
  40574e:	b138      	cbz	r0, 405760 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405750:	4b05      	ldr	r3, [pc, #20]	; (405768 <lv_obj_clean_style_list+0x24>)
  405752:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  405754:	2300      	movs	r3, #0
  405756:	22ff      	movs	r2, #255	; 0xff
  405758:	4629      	mov	r1, r5
  40575a:	4620      	mov	r0, r4
  40575c:	4c03      	ldr	r4, [pc, #12]	; (40576c <lv_obj_clean_style_list+0x28>)
  40575e:	47a0      	blx	r4
  405760:	bd38      	pop	{r3, r4, r5, pc}
  405762:	bf00      	nop
  405764:	0040567d 	.word	0x0040567d
  405768:	0040a4f5 	.word	0x0040a4f5
  40576c:	004056ad 	.word	0x004056ad

00405770 <_lv_obj_disable_style_caching>:
{
  405770:	b570      	push	{r4, r5, r6, lr}
  405772:	4605      	mov	r5, r0
  405774:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405776:	2400      	movs	r4, #0
  405778:	2c3f      	cmp	r4, #63	; 0x3f
  40577a:	d80b      	bhi.n	405794 <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40577c:	4621      	mov	r1, r4
  40577e:	4628      	mov	r0, r5
  405780:	4b0c      	ldr	r3, [pc, #48]	; (4057b4 <_lv_obj_disable_style_caching+0x44>)
  405782:	4798      	blx	r3
        if(list == NULL) break;
  405784:	b130      	cbz	r0, 405794 <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  405786:	7942      	ldrb	r2, [r0, #5]
  405788:	f366 02c3 	bfi	r2, r6, #3, #1
  40578c:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40578e:	3401      	adds	r4, #1
  405790:	b2e4      	uxtb	r4, r4
  405792:	e7f1      	b.n	405778 <_lv_obj_disable_style_caching+0x8>
  405794:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405796:	2cff      	cmp	r4, #255	; 0xff
  405798:	d00b      	beq.n	4057b2 <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40579a:	4621      	mov	r1, r4
  40579c:	4628      	mov	r0, r5
  40579e:	4b05      	ldr	r3, [pc, #20]	; (4057b4 <_lv_obj_disable_style_caching+0x44>)
  4057a0:	4798      	blx	r3
        if(list == NULL) break;
  4057a2:	b130      	cbz	r0, 4057b2 <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  4057a4:	7942      	ldrb	r2, [r0, #5]
  4057a6:	f366 02c3 	bfi	r2, r6, #3, #1
  4057aa:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4057ac:	3401      	adds	r4, #1
  4057ae:	b2e4      	uxtb	r4, r4
  4057b0:	e7f1      	b.n	405796 <_lv_obj_disable_style_caching+0x26>
  4057b2:	bd70      	pop	{r4, r5, r6, pc}
  4057b4:	0040567d 	.word	0x0040567d

004057b8 <trans_anim_ready_cb>:
{
  4057b8:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  4057ba:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  4057bc:	4816      	ldr	r0, [pc, #88]	; (405818 <trans_anim_ready_cb+0x60>)
  4057be:	4b17      	ldr	r3, [pc, #92]	; (40581c <trans_anim_ready_cb+0x64>)
  4057c0:	4798      	blx	r3
    bool running = false;
  4057c2:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  4057c4:	e003      	b.n	4057ce <trans_anim_ready_cb+0x16>
  4057c6:	4601      	mov	r1, r0
  4057c8:	4813      	ldr	r0, [pc, #76]	; (405818 <trans_anim_ready_cb+0x60>)
  4057ca:	4b15      	ldr	r3, [pc, #84]	; (405820 <trans_anim_ready_cb+0x68>)
  4057cc:	4798      	blx	r3
  4057ce:	b178      	cbz	r0, 4057f0 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  4057d0:	42a0      	cmp	r0, r4
  4057d2:	d0f8      	beq.n	4057c6 <trans_anim_ready_cb+0xe>
  4057d4:	6802      	ldr	r2, [r0, #0]
  4057d6:	6823      	ldr	r3, [r4, #0]
  4057d8:	429a      	cmp	r2, r3
  4057da:	d1f4      	bne.n	4057c6 <trans_anim_ready_cb+0xe>
  4057dc:	6843      	ldr	r3, [r0, #4]
  4057de:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4057e2:	6863      	ldr	r3, [r4, #4]
  4057e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4057e8:	429a      	cmp	r2, r3
  4057ea:	d1ec      	bne.n	4057c6 <trans_anim_ready_cb+0xe>
            running = true;
  4057ec:	2501      	movs	r5, #1
  4057ee:	e7ea      	b.n	4057c6 <trans_anim_ready_cb+0xe>
    if(!running) {
  4057f0:	b13d      	cbz	r5, 405802 <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4057f2:	4621      	mov	r1, r4
  4057f4:	4808      	ldr	r0, [pc, #32]	; (405818 <trans_anim_ready_cb+0x60>)
  4057f6:	4b0b      	ldr	r3, [pc, #44]	; (405824 <trans_anim_ready_cb+0x6c>)
  4057f8:	4798      	blx	r3
    lv_mem_free(tr);
  4057fa:	4620      	mov	r0, r4
  4057fc:	4b0a      	ldr	r3, [pc, #40]	; (405828 <trans_anim_ready_cb+0x70>)
  4057fe:	4798      	blx	r3
  405800:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  405802:	79a1      	ldrb	r1, [r4, #6]
  405804:	6820      	ldr	r0, [r4, #0]
  405806:	4b09      	ldr	r3, [pc, #36]	; (40582c <trans_anim_ready_cb+0x74>)
  405808:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  40580a:	4b09      	ldr	r3, [pc, #36]	; (405830 <trans_anim_ready_cb+0x78>)
  40580c:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  40580e:	88a1      	ldrh	r1, [r4, #4]
  405810:	4b08      	ldr	r3, [pc, #32]	; (405834 <trans_anim_ready_cb+0x7c>)
  405812:	4798      	blx	r3
  405814:	e7ed      	b.n	4057f2 <trans_anim_ready_cb+0x3a>
  405816:	bf00      	nop
  405818:	2043a22c 	.word	0x2043a22c
  40581c:	0041583d 	.word	0x0041583d
  405820:	00415851 	.word	0x00415851
  405824:	004158f9 	.word	0x004158f9
  405828:	00415cf9 	.word	0x00415cf9
  40582c:	0040567d 	.word	0x0040567d
  405830:	0040a4e1 	.word	0x0040a4e1
  405834:	0040993d 	.word	0x0040993d

00405838 <lv_obj_get_hidden>:
{
  405838:	b510      	push	{r4, lr}
  40583a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40583c:	4b06      	ldr	r3, [pc, #24]	; (405858 <lv_obj_get_hidden+0x20>)
  40583e:	4798      	blx	r3
  405840:	b120      	cbz	r0, 40584c <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  405842:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  405846:	f3c0 1000 	ubfx	r0, r0, #4, #1
  40584a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40584c:	4622      	mov	r2, r4
  40584e:	2300      	movs	r3, #0
  405850:	4802      	ldr	r0, [pc, #8]	; (40585c <lv_obj_get_hidden+0x24>)
  405852:	4903      	ldr	r1, [pc, #12]	; (405860 <lv_obj_get_hidden+0x28>)
  405854:	4788      	blx	r1
  405856:	e7fe      	b.n	405856 <lv_obj_get_hidden+0x1e>
  405858:	0041552d 	.word	0x0041552d
  40585c:	00423604 	.word	0x00423604
  405860:	00415539 	.word	0x00415539

00405864 <lv_obj_area_is_visible>:
{
  405864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405868:	b082      	sub	sp, #8
  40586a:	4604      	mov	r4, r0
  40586c:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  40586e:	4b34      	ldr	r3, [pc, #208]	; (405940 <lv_obj_area_is_visible+0xdc>)
  405870:	4798      	blx	r3
  405872:	b120      	cbz	r0, 40587e <lv_obj_area_is_visible+0x1a>
  405874:	2600      	movs	r6, #0
}
  405876:	4630      	mov	r0, r6
  405878:	b002      	add	sp, #8
  40587a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40587e:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405880:	4620      	mov	r0, r4
  405882:	4b30      	ldr	r3, [pc, #192]	; (405944 <lv_obj_area_is_visible+0xe0>)
  405884:	4798      	blx	r3
  405886:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405888:	4b2f      	ldr	r3, [pc, #188]	; (405948 <lv_obj_area_is_visible+0xe4>)
  40588a:	4798      	blx	r3
  40588c:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  40588e:	4b2f      	ldr	r3, [pc, #188]	; (40594c <lv_obj_area_is_visible+0xe8>)
  405890:	4798      	blx	r3
  405892:	4287      	cmp	r7, r0
  405894:	d010      	beq.n	4058b8 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  405896:	4640      	mov	r0, r8
  405898:	4b2d      	ldr	r3, [pc, #180]	; (405950 <lv_obj_area_is_visible+0xec>)
  40589a:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  40589c:	4287      	cmp	r7, r0
  40589e:	d00b      	beq.n	4058b8 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  4058a0:	4640      	mov	r0, r8
  4058a2:	4b2c      	ldr	r3, [pc, #176]	; (405954 <lv_obj_area_is_visible+0xf0>)
  4058a4:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  4058a6:	4287      	cmp	r7, r0
  4058a8:	d006      	beq.n	4058b8 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  4058aa:	4640      	mov	r0, r8
  4058ac:	4b2a      	ldr	r3, [pc, #168]	; (405958 <lv_obj_area_is_visible+0xf4>)
  4058ae:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  4058b0:	4287      	cmp	r7, r0
  4058b2:	d001      	beq.n	4058b8 <lv_obj_area_is_visible+0x54>
    return true;
  4058b4:	2601      	movs	r6, #1
  4058b6:	e7de      	b.n	405876 <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  4058b8:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  4058bc:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4058c0:	466a      	mov	r2, sp
  4058c2:	2308      	movs	r3, #8
  4058c4:	e004      	b.n	4058d0 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  4058c6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4058ca:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4058ce:	3b01      	subs	r3, #1
    while(len) {
  4058d0:	2b00      	cmp	r3, #0
  4058d2:	d1f8      	bne.n	4058c6 <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  4058d4:	b2bb      	uxth	r3, r7
  4058d6:	f8bd 2000 	ldrh.w	r2, [sp]
  4058da:	1ad2      	subs	r2, r2, r3
  4058dc:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  4058e0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  4058e4:	1ad2      	subs	r2, r2, r3
  4058e6:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  4058ea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4058ee:	441a      	add	r2, r3
  4058f0:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  4058f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4058f8:	4413      	add	r3, r2
  4058fa:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  4058fe:	466a      	mov	r2, sp
  405900:	4629      	mov	r1, r5
  405902:	4628      	mov	r0, r5
  405904:	4b15      	ldr	r3, [pc, #84]	; (40595c <lv_obj_area_is_visible+0xf8>)
  405906:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  405908:	4607      	mov	r7, r0
  40590a:	2800      	cmp	r0, #0
  40590c:	d0b3      	beq.n	405876 <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  40590e:	4620      	mov	r0, r4
  405910:	4b13      	ldr	r3, [pc, #76]	; (405960 <lv_obj_area_is_visible+0xfc>)
  405912:	4798      	blx	r3
  405914:	4604      	mov	r4, r0
        while(par != NULL) {
  405916:	b18c      	cbz	r4, 40593c <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  405918:	f104 0210 	add.w	r2, r4, #16
  40591c:	4629      	mov	r1, r5
  40591e:	4628      	mov	r0, r5
  405920:	4b0e      	ldr	r3, [pc, #56]	; (40595c <lv_obj_area_is_visible+0xf8>)
  405922:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  405924:	2800      	cmp	r0, #0
  405926:	d0a6      	beq.n	405876 <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405928:	4620      	mov	r0, r4
  40592a:	4b05      	ldr	r3, [pc, #20]	; (405940 <lv_obj_area_is_visible+0xdc>)
  40592c:	4798      	blx	r3
  40592e:	2800      	cmp	r0, #0
  405930:	d1a1      	bne.n	405876 <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405932:	4620      	mov	r0, r4
  405934:	4b0a      	ldr	r3, [pc, #40]	; (405960 <lv_obj_area_is_visible+0xfc>)
  405936:	4798      	blx	r3
  405938:	4604      	mov	r4, r0
  40593a:	e7ec      	b.n	405916 <lv_obj_area_is_visible+0xb2>
    return true;
  40593c:	463e      	mov	r6, r7
  40593e:	e79a      	b.n	405876 <lv_obj_area_is_visible+0x12>
  405940:	00405839 	.word	0x00405839
  405944:	00405471 	.word	0x00405471
  405948:	004054a9 	.word	0x004054a9
  40594c:	004031f9 	.word	0x004031f9
  405950:	00403215 	.word	0x00403215
  405954:	00403231 	.word	0x00403231
  405958:	0040324d 	.word	0x0040324d
  40595c:	00414c69 	.word	0x00414c69
  405960:	00405449 	.word	0x00405449

00405964 <lv_obj_invalidate_area>:
{
  405964:	b530      	push	{r4, r5, lr}
  405966:	b083      	sub	sp, #12
  405968:	4605      	mov	r5, r0
  40596a:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40596c:	4b10      	ldr	r3, [pc, #64]	; (4059b0 <lv_obj_invalidate_area+0x4c>)
  40596e:	4798      	blx	r3
  405970:	b118      	cbz	r0, 40597a <lv_obj_invalidate_area+0x16>
  405972:	4622      	mov	r2, r4
  405974:	4669      	mov	r1, sp
  405976:	2308      	movs	r3, #8
  405978:	e00a      	b.n	405990 <lv_obj_invalidate_area+0x2c>
  40597a:	462a      	mov	r2, r5
  40597c:	2300      	movs	r3, #0
  40597e:	480d      	ldr	r0, [pc, #52]	; (4059b4 <lv_obj_invalidate_area+0x50>)
  405980:	490d      	ldr	r1, [pc, #52]	; (4059b8 <lv_obj_invalidate_area+0x54>)
  405982:	4788      	blx	r1
  405984:	e7fe      	b.n	405984 <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405986:	f812 0b01 	ldrb.w	r0, [r2], #1
  40598a:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  40598e:	3b01      	subs	r3, #1
    while(len) {
  405990:	2b00      	cmp	r3, #0
  405992:	d1f8      	bne.n	405986 <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405994:	4669      	mov	r1, sp
  405996:	4628      	mov	r0, r5
  405998:	4b08      	ldr	r3, [pc, #32]	; (4059bc <lv_obj_invalidate_area+0x58>)
  40599a:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  40599c:	b128      	cbz	r0, 4059aa <lv_obj_invalidate_area+0x46>
  40599e:	4628      	mov	r0, r5
  4059a0:	4b07      	ldr	r3, [pc, #28]	; (4059c0 <lv_obj_invalidate_area+0x5c>)
  4059a2:	4798      	blx	r3
  4059a4:	4669      	mov	r1, sp
  4059a6:	4b07      	ldr	r3, [pc, #28]	; (4059c4 <lv_obj_invalidate_area+0x60>)
  4059a8:	4798      	blx	r3
}
  4059aa:	b003      	add	sp, #12
  4059ac:	bd30      	pop	{r4, r5, pc}
  4059ae:	bf00      	nop
  4059b0:	0041552d 	.word	0x0041552d
  4059b4:	00423604 	.word	0x00423604
  4059b8:	00415539 	.word	0x00415539
  4059bc:	00405865 	.word	0x00405865
  4059c0:	004054a9 	.word	0x004054a9
  4059c4:	00408f49 	.word	0x00408f49

004059c8 <lv_obj_invalidate>:
{
  4059c8:	b530      	push	{r4, r5, lr}
  4059ca:	b083      	sub	sp, #12
  4059cc:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059ce:	4b19      	ldr	r3, [pc, #100]	; (405a34 <lv_obj_invalidate+0x6c>)
  4059d0:	4798      	blx	r3
  4059d2:	b130      	cbz	r0, 4059e2 <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  4059d4:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  4059d8:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4059dc:	4669      	mov	r1, sp
  4059de:	2208      	movs	r2, #8
  4059e0:	e00a      	b.n	4059f8 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4059e2:	4622      	mov	r2, r4
  4059e4:	2300      	movs	r3, #0
  4059e6:	4814      	ldr	r0, [pc, #80]	; (405a38 <lv_obj_invalidate+0x70>)
  4059e8:	4914      	ldr	r1, [pc, #80]	; (405a3c <lv_obj_invalidate+0x74>)
  4059ea:	4788      	blx	r1
  4059ec:	e7fe      	b.n	4059ec <lv_obj_invalidate+0x24>
        *d8 = *s8;
  4059ee:	f810 5b01 	ldrb.w	r5, [r0], #1
  4059f2:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  4059f6:	3a01      	subs	r2, #1
    while(len) {
  4059f8:	2a00      	cmp	r2, #0
  4059fa:	d1f8      	bne.n	4059ee <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  4059fc:	b29b      	uxth	r3, r3
  4059fe:	f8bd 2000 	ldrh.w	r2, [sp]
  405a02:	1ad2      	subs	r2, r2, r3
  405a04:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405a08:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405a0c:	1ad2      	subs	r2, r2, r3
  405a0e:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405a12:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405a16:	441a      	add	r2, r3
  405a18:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405a1c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405a20:	4413      	add	r3, r2
  405a22:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405a26:	4669      	mov	r1, sp
  405a28:	4620      	mov	r0, r4
  405a2a:	4b05      	ldr	r3, [pc, #20]	; (405a40 <lv_obj_invalidate+0x78>)
  405a2c:	4798      	blx	r3
}
  405a2e:	b003      	add	sp, #12
  405a30:	bd30      	pop	{r4, r5, pc}
  405a32:	bf00      	nop
  405a34:	0041552d 	.word	0x0041552d
  405a38:	00423604 	.word	0x00423604
  405a3c:	00415539 	.word	0x00415539
  405a40:	00405965 	.word	0x00405965

00405a44 <lv_obj_move_foreground>:
{
  405a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405a46:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a48:	4b11      	ldr	r3, [pc, #68]	; (405a90 <lv_obj_move_foreground+0x4c>)
  405a4a:	4798      	blx	r3
  405a4c:	b928      	cbnz	r0, 405a5a <lv_obj_move_foreground+0x16>
  405a4e:	462a      	mov	r2, r5
  405a50:	2300      	movs	r3, #0
  405a52:	4810      	ldr	r0, [pc, #64]	; (405a94 <lv_obj_move_foreground+0x50>)
  405a54:	4910      	ldr	r1, [pc, #64]	; (405a98 <lv_obj_move_foreground+0x54>)
  405a56:	4788      	blx	r1
  405a58:	e7fe      	b.n	405a58 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405a5a:	4628      	mov	r0, r5
  405a5c:	4b0f      	ldr	r3, [pc, #60]	; (405a9c <lv_obj_move_foreground+0x58>)
  405a5e:	4798      	blx	r3
  405a60:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  405a62:	1d06      	adds	r6, r0, #4
  405a64:	4630      	mov	r0, r6
  405a66:	4b0e      	ldr	r3, [pc, #56]	; (405aa0 <lv_obj_move_foreground+0x5c>)
  405a68:	4798      	blx	r3
  405a6a:	4285      	cmp	r5, r0
  405a6c:	d00f      	beq.n	405a8e <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405a6e:	4620      	mov	r0, r4
  405a70:	4f0c      	ldr	r7, [pc, #48]	; (405aa4 <lv_obj_move_foreground+0x60>)
  405a72:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  405a74:	2301      	movs	r3, #1
  405a76:	462a      	mov	r2, r5
  405a78:	4631      	mov	r1, r6
  405a7a:	4630      	mov	r0, r6
  405a7c:	4e0a      	ldr	r6, [pc, #40]	; (405aa8 <lv_obj_move_foreground+0x64>)
  405a7e:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  405a80:	69e3      	ldr	r3, [r4, #28]
  405a82:	462a      	mov	r2, r5
  405a84:	2101      	movs	r1, #1
  405a86:	4620      	mov	r0, r4
  405a88:	4798      	blx	r3
    lv_obj_invalidate(parent);
  405a8a:	4620      	mov	r0, r4
  405a8c:	47b8      	blx	r7
  405a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a90:	0041552d 	.word	0x0041552d
  405a94:	00423604 	.word	0x00423604
  405a98:	00415539 	.word	0x00415539
  405a9c:	00405449 	.word	0x00405449
  405aa0:	0041583d 	.word	0x0041583d
  405aa4:	004059c9 	.word	0x004059c9
  405aa8:	00415991 	.word	0x00415991

00405aac <lv_obj_set_pos>:
{
  405aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405ab0:	b083      	sub	sp, #12
  405ab2:	4604      	mov	r4, r0
  405ab4:	460f      	mov	r7, r1
  405ab6:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405ab8:	4b24      	ldr	r3, [pc, #144]	; (405b4c <lv_obj_set_pos+0xa0>)
  405aba:	4798      	blx	r3
  405abc:	2800      	cmp	r0, #0
  405abe:	d03f      	beq.n	405b40 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405ac0:	6826      	ldr	r6, [r4, #0]
    if(par) {
  405ac2:	b12e      	cbz	r6, 405ad0 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  405ac4:	8a33      	ldrh	r3, [r6, #16]
  405ac6:	441f      	add	r7, r3
  405ac8:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  405aca:	8a73      	ldrh	r3, [r6, #18]
  405acc:	441d      	add	r5, r3
  405ace:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  405ad0:	8a23      	ldrh	r3, [r4, #16]
  405ad2:	1afb      	subs	r3, r7, r3
  405ad4:	fa1f f883 	uxth.w	r8, r3
  405ad8:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  405adc:	8a63      	ldrh	r3, [r4, #18]
  405ade:	1aed      	subs	r5, r5, r3
  405ae0:	b2ad      	uxth	r5, r5
  405ae2:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  405ae6:	b917      	cbnz	r7, 405aee <lv_obj_set_pos+0x42>
  405ae8:	f1b9 0f00 	cmp.w	r9, #0
  405aec:	d025      	beq.n	405b3a <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  405aee:	4620      	mov	r0, r4
  405af0:	4b17      	ldr	r3, [pc, #92]	; (405b50 <lv_obj_set_pos+0xa4>)
  405af2:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  405af4:	4669      	mov	r1, sp
  405af6:	4620      	mov	r0, r4
  405af8:	4b16      	ldr	r3, [pc, #88]	; (405b54 <lv_obj_set_pos+0xa8>)
  405afa:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  405afc:	8a23      	ldrh	r3, [r4, #16]
  405afe:	4443      	add	r3, r8
  405b00:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  405b02:	8a63      	ldrh	r3, [r4, #18]
  405b04:	442b      	add	r3, r5
  405b06:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  405b08:	8aa3      	ldrh	r3, [r4, #20]
  405b0a:	4443      	add	r3, r8
  405b0c:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  405b0e:	8ae3      	ldrh	r3, [r4, #22]
  405b10:	441d      	add	r5, r3
  405b12:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  405b14:	464a      	mov	r2, r9
  405b16:	4639      	mov	r1, r7
  405b18:	4620      	mov	r0, r4
  405b1a:	4b0f      	ldr	r3, [pc, #60]	; (405b58 <lv_obj_set_pos+0xac>)
  405b1c:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  405b1e:	69e3      	ldr	r3, [r4, #28]
  405b20:	466a      	mov	r2, sp
  405b22:	2102      	movs	r1, #2
  405b24:	4620      	mov	r0, r4
  405b26:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  405b28:	b126      	cbz	r6, 405b34 <lv_obj_set_pos+0x88>
  405b2a:	69f3      	ldr	r3, [r6, #28]
  405b2c:	4622      	mov	r2, r4
  405b2e:	2101      	movs	r1, #1
  405b30:	4630      	mov	r0, r6
  405b32:	4798      	blx	r3
    lv_obj_invalidate(obj);
  405b34:	4620      	mov	r0, r4
  405b36:	4b06      	ldr	r3, [pc, #24]	; (405b50 <lv_obj_set_pos+0xa4>)
  405b38:	4798      	blx	r3
}
  405b3a:	b003      	add	sp, #12
  405b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b40:	4622      	mov	r2, r4
  405b42:	2300      	movs	r3, #0
  405b44:	4805      	ldr	r0, [pc, #20]	; (405b5c <lv_obj_set_pos+0xb0>)
  405b46:	4906      	ldr	r1, [pc, #24]	; (405b60 <lv_obj_set_pos+0xb4>)
  405b48:	4788      	blx	r1
  405b4a:	e7fe      	b.n	405b4a <lv_obj_set_pos+0x9e>
  405b4c:	0041552d 	.word	0x0041552d
  405b50:	004059c9 	.word	0x004059c9
  405b54:	0040555d 	.word	0x0040555d
  405b58:	00404f85 	.word	0x00404f85
  405b5c:	00423604 	.word	0x00423604
  405b60:	00415539 	.word	0x00415539

00405b64 <lv_obj_set_x>:
{
  405b64:	b538      	push	{r3, r4, r5, lr}
  405b66:	4604      	mov	r4, r0
  405b68:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b6a:	4b09      	ldr	r3, [pc, #36]	; (405b90 <lv_obj_set_x+0x2c>)
  405b6c:	4798      	blx	r3
  405b6e:	b928      	cbnz	r0, 405b7c <lv_obj_set_x+0x18>
  405b70:	4622      	mov	r2, r4
  405b72:	2300      	movs	r3, #0
  405b74:	4807      	ldr	r0, [pc, #28]	; (405b94 <lv_obj_set_x+0x30>)
  405b76:	4908      	ldr	r1, [pc, #32]	; (405b98 <lv_obj_set_x+0x34>)
  405b78:	4788      	blx	r1
  405b7a:	e7fe      	b.n	405b7a <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  405b7c:	4620      	mov	r0, r4
  405b7e:	4b07      	ldr	r3, [pc, #28]	; (405b9c <lv_obj_set_x+0x38>)
  405b80:	4798      	blx	r3
  405b82:	4602      	mov	r2, r0
  405b84:	4629      	mov	r1, r5
  405b86:	4620      	mov	r0, r4
  405b88:	4b05      	ldr	r3, [pc, #20]	; (405ba0 <lv_obj_set_x+0x3c>)
  405b8a:	4798      	blx	r3
  405b8c:	bd38      	pop	{r3, r4, r5, pc}
  405b8e:	bf00      	nop
  405b90:	0041552d 	.word	0x0041552d
  405b94:	00423604 	.word	0x00423604
  405b98:	00415539 	.word	0x00415539
  405b9c:	004055dd 	.word	0x004055dd
  405ba0:	00405aad 	.word	0x00405aad

00405ba4 <lv_obj_set_y>:
{
  405ba4:	b538      	push	{r3, r4, r5, lr}
  405ba6:	4604      	mov	r4, r0
  405ba8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405baa:	4b09      	ldr	r3, [pc, #36]	; (405bd0 <lv_obj_set_y+0x2c>)
  405bac:	4798      	blx	r3
  405bae:	b928      	cbnz	r0, 405bbc <lv_obj_set_y+0x18>
  405bb0:	4622      	mov	r2, r4
  405bb2:	2300      	movs	r3, #0
  405bb4:	4807      	ldr	r0, [pc, #28]	; (405bd4 <lv_obj_set_y+0x30>)
  405bb6:	4908      	ldr	r1, [pc, #32]	; (405bd8 <lv_obj_set_y+0x34>)
  405bb8:	4788      	blx	r1
  405bba:	e7fe      	b.n	405bba <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  405bbc:	4620      	mov	r0, r4
  405bbe:	4b07      	ldr	r3, [pc, #28]	; (405bdc <lv_obj_set_y+0x38>)
  405bc0:	4798      	blx	r3
  405bc2:	462a      	mov	r2, r5
  405bc4:	4601      	mov	r1, r0
  405bc6:	4620      	mov	r0, r4
  405bc8:	4b05      	ldr	r3, [pc, #20]	; (405be0 <lv_obj_set_y+0x3c>)
  405bca:	4798      	blx	r3
  405bcc:	bd38      	pop	{r3, r4, r5, pc}
  405bce:	bf00      	nop
  405bd0:	0041552d 	.word	0x0041552d
  405bd4:	00423604 	.word	0x00423604
  405bd8:	00415539 	.word	0x00415539
  405bdc:	0040559d 	.word	0x0040559d
  405be0:	00405aad 	.word	0x00405aad

00405be4 <obj_align_core>:
{
  405be4:	b5f0      	push	{r4, r5, r6, r7, lr}
  405be6:	b083      	sub	sp, #12
  405be8:	4604      	mov	r4, r0
  405bea:	461d      	mov	r5, r3
  405bec:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  405bf0:	f101 0010 	add.w	r0, r1, #16
  405bf4:	ab01      	add	r3, sp, #4
  405bf6:	f104 0110 	add.w	r1, r4, #16
  405bfa:	4f18      	ldr	r7, [pc, #96]	; (405c5c <obj_align_core+0x78>)
  405bfc:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405bfe:	4620      	mov	r0, r4
  405c00:	4b17      	ldr	r3, [pc, #92]	; (405c60 <obj_align_core+0x7c>)
  405c02:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  405c04:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405c08:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  405c0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405c10:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  405c14:	4411      	add	r1, r2
  405c16:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  405c18:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  405c1c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  405c20:	4402      	add	r2, r0
  405c22:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  405c24:	1bc9      	subs	r1, r1, r7
  405c26:	b209      	sxth	r1, r1
  405c28:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  405c2c:	1ad2      	subs	r2, r2, r3
  405c2e:	b212      	sxth	r2, r2
  405c30:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405c34:	4235      	tst	r5, r6
  405c36:	d103      	bne.n	405c40 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405c38:	b935      	cbnz	r5, 405c48 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405c3a:	b94e      	cbnz	r6, 405c50 <obj_align_core+0x6c>
}
  405c3c:	b003      	add	sp, #12
  405c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405c40:	4620      	mov	r0, r4
  405c42:	4b08      	ldr	r3, [pc, #32]	; (405c64 <obj_align_core+0x80>)
  405c44:	4798      	blx	r3
  405c46:	e7f9      	b.n	405c3c <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405c48:	4620      	mov	r0, r4
  405c4a:	4b07      	ldr	r3, [pc, #28]	; (405c68 <obj_align_core+0x84>)
  405c4c:	4798      	blx	r3
  405c4e:	e7f5      	b.n	405c3c <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405c50:	4611      	mov	r1, r2
  405c52:	4620      	mov	r0, r4
  405c54:	4b05      	ldr	r3, [pc, #20]	; (405c6c <obj_align_core+0x88>)
  405c56:	4798      	blx	r3
}
  405c58:	e7f0      	b.n	405c3c <obj_align_core+0x58>
  405c5a:	bf00      	nop
  405c5c:	00414fa5 	.word	0x00414fa5
  405c60:	00405449 	.word	0x00405449
  405c64:	00405aad 	.word	0x00405aad
  405c68:	00405b65 	.word	0x00405b65
  405c6c:	00405ba5 	.word	0x00405ba5

00405c70 <lv_obj_align>:
{
  405c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405c74:	b085      	sub	sp, #20
  405c76:	4604      	mov	r4, r0
  405c78:	460d      	mov	r5, r1
  405c7a:	4690      	mov	r8, r2
  405c7c:	461f      	mov	r7, r3
  405c7e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c82:	4b19      	ldr	r3, [pc, #100]	; (405ce8 <lv_obj_align+0x78>)
  405c84:	4798      	blx	r3
  405c86:	b928      	cbnz	r0, 405c94 <lv_obj_align+0x24>
  405c88:	4622      	mov	r2, r4
  405c8a:	2300      	movs	r3, #0
  405c8c:	4817      	ldr	r0, [pc, #92]	; (405cec <lv_obj_align+0x7c>)
  405c8e:	4918      	ldr	r1, [pc, #96]	; (405cf0 <lv_obj_align+0x80>)
  405c90:	4788      	blx	r1
  405c92:	e7fe      	b.n	405c92 <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405c94:	b14d      	cbz	r5, 405caa <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405c96:	4628      	mov	r0, r5
  405c98:	4b13      	ldr	r3, [pc, #76]	; (405ce8 <lv_obj_align+0x78>)
  405c9a:	4798      	blx	r3
  405c9c:	b950      	cbnz	r0, 405cb4 <lv_obj_align+0x44>
  405c9e:	462a      	mov	r2, r5
  405ca0:	2300      	movs	r3, #0
  405ca2:	4812      	ldr	r0, [pc, #72]	; (405cec <lv_obj_align+0x7c>)
  405ca4:	4912      	ldr	r1, [pc, #72]	; (405cf0 <lv_obj_align+0x80>)
  405ca6:	4788      	blx	r1
  405ca8:	e7fe      	b.n	405ca8 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405caa:	4620      	mov	r0, r4
  405cac:	4b11      	ldr	r3, [pc, #68]	; (405cf4 <lv_obj_align+0x84>)
  405cae:	4798      	blx	r3
  405cb0:	4605      	mov	r5, r0
  405cb2:	e7f0      	b.n	405c96 <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  405cb4:	9602      	str	r6, [sp, #8]
  405cb6:	9701      	str	r7, [sp, #4]
  405cb8:	2301      	movs	r3, #1
  405cba:	9300      	str	r3, [sp, #0]
  405cbc:	4642      	mov	r2, r8
  405cbe:	4629      	mov	r1, r5
  405cc0:	4620      	mov	r0, r4
  405cc2:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405cf8 <lv_obj_align+0x88>
  405cc6:	47c8      	blx	r9
    obj->realign.align       = align;
  405cc8:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  405ccc:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405cd0:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405cd4:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  405cd6:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405cda:	f36f 0341 	bfc	r3, #1, #1
  405cde:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405ce2:	b005      	add	sp, #20
  405ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405ce8:	0041552d 	.word	0x0041552d
  405cec:	00423604 	.word	0x00423604
  405cf0:	00415539 	.word	0x00415539
  405cf4:	00405449 	.word	0x00405449
  405cf8:	00405be5 	.word	0x00405be5

00405cfc <obj_align_mid_core>:
{
  405cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d00:	b083      	sub	sp, #12
  405d02:	4680      	mov	r8, r0
  405d04:	9001      	str	r0, [sp, #4]
  405d06:	460f      	mov	r7, r1
  405d08:	4616      	mov	r6, r2
  405d0a:	469a      	mov	sl, r3
  405d0c:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  405d10:	4ba4      	ldr	r3, [pc, #656]	; (405fa4 <obj_align_mid_core+0x2a8>)
  405d12:	4798      	blx	r3
  405d14:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  405d16:	4640      	mov	r0, r8
  405d18:	4ba3      	ldr	r3, [pc, #652]	; (405fa8 <obj_align_mid_core+0x2ac>)
  405d1a:	4798      	blx	r3
  405d1c:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405d1e:	4640      	mov	r0, r8
  405d20:	4ba2      	ldr	r3, [pc, #648]	; (405fac <obj_align_mid_core+0x2b0>)
  405d22:	4798      	blx	r3
  405d24:	4681      	mov	r9, r0
  405d26:	2800      	cmp	r0, #0
  405d28:	db22      	blt.n	405d70 <obj_align_mid_core+0x74>
  405d2a:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405d2e:	9801      	ldr	r0, [sp, #4]
  405d30:	4b9f      	ldr	r3, [pc, #636]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405d32:	4798      	blx	r3
  405d34:	4680      	mov	r8, r0
  405d36:	2800      	cmp	r0, #0
  405d38:	db1d      	blt.n	405d76 <obj_align_mid_core+0x7a>
  405d3a:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  405d3e:	2e14      	cmp	r6, #20
  405d40:	d82e      	bhi.n	405da0 <obj_align_mid_core+0xa4>
  405d42:	e8df f016 	tbh	[pc, r6, lsl #1]
  405d46:	001b      	.short	0x001b
  405d48:	0062005b 	.word	0x0062005b
  405d4c:	007c0071 	.word	0x007c0071
  405d50:	009a0087 	.word	0x009a0087
  405d54:	00b800a9 	.word	0x00b800a9
  405d58:	00d200cb 	.word	0x00d200cb
  405d5c:	00ec00e1 	.word	0x00ec00e1
  405d60:	010a00f7 	.word	0x010a00f7
  405d64:	01200119 	.word	0x01200119
  405d68:	01440139 	.word	0x01440139
  405d6c:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405d70:	f100 0901 	add.w	r9, r0, #1
  405d74:	e7d9      	b.n	405d2a <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405d76:	f100 0801 	add.w	r8, r0, #1
  405d7a:	e7de      	b.n	405d3a <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405d7c:	4638      	mov	r0, r7
  405d7e:	4b8b      	ldr	r3, [pc, #556]	; (405fac <obj_align_mid_core+0x2b0>)
  405d80:	4798      	blx	r3
  405d82:	4605      	mov	r5, r0
  405d84:	2800      	cmp	r0, #0
  405d86:	db35      	blt.n	405df4 <obj_align_mid_core+0xf8>
  405d88:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405d8c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405d8e:	4638      	mov	r0, r7
  405d90:	4b87      	ldr	r3, [pc, #540]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405d92:	4798      	blx	r3
  405d94:	4604      	mov	r4, r0
  405d96:	2800      	cmp	r0, #0
  405d98:	db2e      	blt.n	405df8 <obj_align_mid_core+0xfc>
  405d9a:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405d9e:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405da0:	9801      	ldr	r0, [sp, #4]
  405da2:	4b84      	ldr	r3, [pc, #528]	; (405fb4 <obj_align_mid_core+0x2b8>)
  405da4:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  405da6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  405daa:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  405dae:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405db2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  405db6:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  405dba:	4411      	add	r1, r2
  405dbc:	fa15 f181 	uxtah	r1, r5, r1
  405dc0:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  405dc2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  405dc6:	4472      	add	r2, lr
  405dc8:	fa14 f282 	uxtah	r2, r4, r2
  405dcc:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  405dce:	1bc9      	subs	r1, r1, r7
  405dd0:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  405dd2:	1ad2      	subs	r2, r2, r3
  405dd4:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405dd6:	ea1a 0f0b 	tst.w	sl, fp
  405dda:	f040 8125 	bne.w	406028 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405dde:	f1ba 0f00 	cmp.w	sl, #0
  405de2:	f040 8125 	bne.w	406030 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  405de6:	f1bb 0f00 	cmp.w	fp, #0
  405dea:	f040 8125 	bne.w	406038 <obj_align_mid_core+0x33c>
}
  405dee:	b003      	add	sp, #12
  405df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405df4:	1c45      	adds	r5, r0, #1
  405df6:	e7c7      	b.n	405d88 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405df8:	1c44      	adds	r4, r0, #1
  405dfa:	e7ce      	b.n	405d9a <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  405dfc:	f1c9 0500 	rsb	r5, r9, #0
  405e00:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405e02:	f1c8 0400 	rsb	r4, r8, #0
  405e06:	b224      	sxth	r4, r4
            break;
  405e08:	e7ca      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405e0a:	4638      	mov	r0, r7
  405e0c:	4b67      	ldr	r3, [pc, #412]	; (405fac <obj_align_mid_core+0x2b0>)
  405e0e:	4798      	blx	r3
  405e10:	4605      	mov	r5, r0
  405e12:	2800      	cmp	r0, #0
  405e14:	db06      	blt.n	405e24 <obj_align_mid_core+0x128>
  405e16:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405e1a:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405e1c:	f1c8 0400 	rsb	r4, r8, #0
  405e20:	b224      	sxth	r4, r4
            break;
  405e22:	e7bd      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405e24:	1c45      	adds	r5, r0, #1
  405e26:	e7f6      	b.n	405e16 <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405e28:	4638      	mov	r0, r7
  405e2a:	4b60      	ldr	r3, [pc, #384]	; (405fac <obj_align_mid_core+0x2b0>)
  405e2c:	4798      	blx	r3
  405e2e:	b285      	uxth	r5, r0
  405e30:	eba5 0509 	sub.w	r5, r5, r9
  405e34:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405e36:	f1c8 0400 	rsb	r4, r8, #0
  405e3a:	b224      	sxth	r4, r4
            break;
  405e3c:	e7b0      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405e3e:	f1c9 0500 	rsb	r5, r9, #0
  405e42:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405e44:	4638      	mov	r0, r7
  405e46:	4b5a      	ldr	r3, [pc, #360]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405e48:	4798      	blx	r3
  405e4a:	b284      	uxth	r4, r0
  405e4c:	eba4 0408 	sub.w	r4, r4, r8
  405e50:	b224      	sxth	r4, r4
            break;
  405e52:	e7a5      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405e54:	4638      	mov	r0, r7
  405e56:	4b55      	ldr	r3, [pc, #340]	; (405fac <obj_align_mid_core+0x2b0>)
  405e58:	4798      	blx	r3
  405e5a:	4605      	mov	r5, r0
  405e5c:	2800      	cmp	r0, #0
  405e5e:	db0a      	blt.n	405e76 <obj_align_mid_core+0x17a>
  405e60:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405e64:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405e66:	4638      	mov	r0, r7
  405e68:	4b51      	ldr	r3, [pc, #324]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405e6a:	4798      	blx	r3
  405e6c:	b284      	uxth	r4, r0
  405e6e:	eba4 0408 	sub.w	r4, r4, r8
  405e72:	b224      	sxth	r4, r4
            break;
  405e74:	e794      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405e76:	1c45      	adds	r5, r0, #1
  405e78:	e7f2      	b.n	405e60 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405e7a:	4638      	mov	r0, r7
  405e7c:	4b4b      	ldr	r3, [pc, #300]	; (405fac <obj_align_mid_core+0x2b0>)
  405e7e:	4798      	blx	r3
  405e80:	b285      	uxth	r5, r0
  405e82:	eba5 0509 	sub.w	r5, r5, r9
  405e86:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405e88:	4638      	mov	r0, r7
  405e8a:	4b49      	ldr	r3, [pc, #292]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405e8c:	4798      	blx	r3
  405e8e:	b284      	uxth	r4, r0
  405e90:	eba4 0408 	sub.w	r4, r4, r8
  405e94:	b224      	sxth	r4, r4
            break;
  405e96:	e783      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405e98:	f1c9 0500 	rsb	r5, r9, #0
  405e9c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405e9e:	4638      	mov	r0, r7
  405ea0:	4b43      	ldr	r3, [pc, #268]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405ea2:	4798      	blx	r3
  405ea4:	4604      	mov	r4, r0
  405ea6:	2800      	cmp	r0, #0
  405ea8:	db03      	blt.n	405eb2 <obj_align_mid_core+0x1b6>
  405eaa:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405eae:	b224      	sxth	r4, r4
            break;
  405eb0:	e776      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405eb2:	1c44      	adds	r4, r0, #1
  405eb4:	e7f9      	b.n	405eaa <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405eb6:	4638      	mov	r0, r7
  405eb8:	4b3c      	ldr	r3, [pc, #240]	; (405fac <obj_align_mid_core+0x2b0>)
  405eba:	4798      	blx	r3
  405ebc:	b285      	uxth	r5, r0
  405ebe:	eba5 0509 	sub.w	r5, r5, r9
  405ec2:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405ec4:	4638      	mov	r0, r7
  405ec6:	4b3a      	ldr	r3, [pc, #232]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405ec8:	4798      	blx	r3
  405eca:	4604      	mov	r4, r0
  405ecc:	2800      	cmp	r0, #0
  405ece:	db03      	blt.n	405ed8 <obj_align_mid_core+0x1dc>
  405ed0:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405ed4:	b224      	sxth	r4, r4
            break;
  405ed6:	e763      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405ed8:	1c44      	adds	r4, r0, #1
  405eda:	e7f9      	b.n	405ed0 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  405edc:	f1c9 0500 	rsb	r5, r9, #0
  405ee0:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405ee2:	f1c8 0400 	rsb	r4, r8, #0
  405ee6:	b224      	sxth	r4, r4
            break;
  405ee8:	e75a      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405eea:	4638      	mov	r0, r7
  405eec:	4b2f      	ldr	r3, [pc, #188]	; (405fac <obj_align_mid_core+0x2b0>)
  405eee:	4798      	blx	r3
  405ef0:	4605      	mov	r5, r0
  405ef2:	2800      	cmp	r0, #0
  405ef4:	db06      	blt.n	405f04 <obj_align_mid_core+0x208>
  405ef6:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405efa:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405efc:	f1c8 0400 	rsb	r4, r8, #0
  405f00:	b224      	sxth	r4, r4
            break;
  405f02:	e74d      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405f04:	1c45      	adds	r5, r0, #1
  405f06:	e7f6      	b.n	405ef6 <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405f08:	4638      	mov	r0, r7
  405f0a:	4b28      	ldr	r3, [pc, #160]	; (405fac <obj_align_mid_core+0x2b0>)
  405f0c:	4798      	blx	r3
  405f0e:	b285      	uxth	r5, r0
  405f10:	eba5 0509 	sub.w	r5, r5, r9
  405f14:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405f16:	f1c8 0400 	rsb	r4, r8, #0
  405f1a:	b224      	sxth	r4, r4
            break;
  405f1c:	e740      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405f1e:	f1c9 0500 	rsb	r5, r9, #0
  405f22:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f24:	4638      	mov	r0, r7
  405f26:	4b22      	ldr	r3, [pc, #136]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405f28:	4798      	blx	r3
  405f2a:	b284      	uxth	r4, r0
  405f2c:	eba4 0408 	sub.w	r4, r4, r8
  405f30:	b224      	sxth	r4, r4
            break;
  405f32:	e735      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405f34:	4638      	mov	r0, r7
  405f36:	4b1d      	ldr	r3, [pc, #116]	; (405fac <obj_align_mid_core+0x2b0>)
  405f38:	4798      	blx	r3
  405f3a:	4605      	mov	r5, r0
  405f3c:	2800      	cmp	r0, #0
  405f3e:	db0a      	blt.n	405f56 <obj_align_mid_core+0x25a>
  405f40:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405f44:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f46:	4638      	mov	r0, r7
  405f48:	4b19      	ldr	r3, [pc, #100]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405f4a:	4798      	blx	r3
  405f4c:	b284      	uxth	r4, r0
  405f4e:	eba4 0408 	sub.w	r4, r4, r8
  405f52:	b224      	sxth	r4, r4
            break;
  405f54:	e724      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405f56:	1c45      	adds	r5, r0, #1
  405f58:	e7f2      	b.n	405f40 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405f5a:	4638      	mov	r0, r7
  405f5c:	4b13      	ldr	r3, [pc, #76]	; (405fac <obj_align_mid_core+0x2b0>)
  405f5e:	4798      	blx	r3
  405f60:	b285      	uxth	r5, r0
  405f62:	eba5 0509 	sub.w	r5, r5, r9
  405f66:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f68:	4638      	mov	r0, r7
  405f6a:	4b11      	ldr	r3, [pc, #68]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405f6c:	4798      	blx	r3
  405f6e:	b284      	uxth	r4, r0
  405f70:	eba4 0408 	sub.w	r4, r4, r8
  405f74:	b224      	sxth	r4, r4
            break;
  405f76:	e713      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405f78:	f1c9 0500 	rsb	r5, r9, #0
  405f7c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405f7e:	f1c8 0400 	rsb	r4, r8, #0
  405f82:	b224      	sxth	r4, r4
            break;
  405f84:	e70c      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405f86:	f1c9 0500 	rsb	r5, r9, #0
  405f8a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405f8c:	4638      	mov	r0, r7
  405f8e:	4b08      	ldr	r3, [pc, #32]	; (405fb0 <obj_align_mid_core+0x2b4>)
  405f90:	4798      	blx	r3
  405f92:	4604      	mov	r4, r0
  405f94:	2800      	cmp	r0, #0
  405f96:	db03      	blt.n	405fa0 <obj_align_mid_core+0x2a4>
  405f98:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405f9c:	b224      	sxth	r4, r4
            break;
  405f9e:	e6ff      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405fa0:	1c44      	adds	r4, r0, #1
  405fa2:	e7f9      	b.n	405f98 <obj_align_mid_core+0x29c>
  405fa4:	0040559d 	.word	0x0040559d
  405fa8:	004055dd 	.word	0x004055dd
  405fac:	0040561d 	.word	0x0040561d
  405fb0:	0040564d 	.word	0x0040564d
  405fb4:	00405449 	.word	0x00405449
            new_x = -obj_w_half;
  405fb8:	f1c9 0500 	rsb	r5, r9, #0
  405fbc:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405fbe:	4638      	mov	r0, r7
  405fc0:	4b20      	ldr	r3, [pc, #128]	; (406044 <obj_align_mid_core+0x348>)
  405fc2:	4798      	blx	r3
  405fc4:	b284      	uxth	r4, r0
  405fc6:	eba4 0408 	sub.w	r4, r4, r8
  405fca:	b224      	sxth	r4, r4
            break;
  405fcc:	e6e8      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405fce:	4638      	mov	r0, r7
  405fd0:	4b1d      	ldr	r3, [pc, #116]	; (406048 <obj_align_mid_core+0x34c>)
  405fd2:	4798      	blx	r3
  405fd4:	b285      	uxth	r5, r0
  405fd6:	eba5 0509 	sub.w	r5, r5, r9
  405fda:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405fdc:	f1c8 0400 	rsb	r4, r8, #0
  405fe0:	b224      	sxth	r4, r4
            break;
  405fe2:	e6dd      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405fe4:	4638      	mov	r0, r7
  405fe6:	4b18      	ldr	r3, [pc, #96]	; (406048 <obj_align_mid_core+0x34c>)
  405fe8:	4798      	blx	r3
  405fea:	b285      	uxth	r5, r0
  405fec:	eba5 0509 	sub.w	r5, r5, r9
  405ff0:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405ff2:	4638      	mov	r0, r7
  405ff4:	4b13      	ldr	r3, [pc, #76]	; (406044 <obj_align_mid_core+0x348>)
  405ff6:	4798      	blx	r3
  405ff8:	4604      	mov	r4, r0
  405ffa:	2800      	cmp	r0, #0
  405ffc:	db03      	blt.n	406006 <obj_align_mid_core+0x30a>
  405ffe:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  406002:	b224      	sxth	r4, r4
            break;
  406004:	e6cc      	b.n	405da0 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406006:	1c44      	adds	r4, r0, #1
  406008:	e7f9      	b.n	405ffe <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  40600a:	4638      	mov	r0, r7
  40600c:	4b0e      	ldr	r3, [pc, #56]	; (406048 <obj_align_mid_core+0x34c>)
  40600e:	4798      	blx	r3
  406010:	b285      	uxth	r5, r0
  406012:	eba5 0509 	sub.w	r5, r5, r9
  406016:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406018:	4638      	mov	r0, r7
  40601a:	4b0a      	ldr	r3, [pc, #40]	; (406044 <obj_align_mid_core+0x348>)
  40601c:	4798      	blx	r3
  40601e:	b284      	uxth	r4, r0
  406020:	eba4 0408 	sub.w	r4, r4, r8
  406024:	b224      	sxth	r4, r4
            break;
  406026:	e6bb      	b.n	405da0 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  406028:	9801      	ldr	r0, [sp, #4]
  40602a:	4b08      	ldr	r3, [pc, #32]	; (40604c <obj_align_mid_core+0x350>)
  40602c:	4798      	blx	r3
  40602e:	e6de      	b.n	405dee <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  406030:	9801      	ldr	r0, [sp, #4]
  406032:	4b07      	ldr	r3, [pc, #28]	; (406050 <obj_align_mid_core+0x354>)
  406034:	4798      	blx	r3
  406036:	e6da      	b.n	405dee <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406038:	4611      	mov	r1, r2
  40603a:	9801      	ldr	r0, [sp, #4]
  40603c:	4b05      	ldr	r3, [pc, #20]	; (406054 <obj_align_mid_core+0x358>)
  40603e:	4798      	blx	r3
}
  406040:	e6d5      	b.n	405dee <obj_align_mid_core+0xf2>
  406042:	bf00      	nop
  406044:	0040564d 	.word	0x0040564d
  406048:	0040561d 	.word	0x0040561d
  40604c:	00405aad 	.word	0x00405aad
  406050:	00405b65 	.word	0x00405b65
  406054:	00405ba5 	.word	0x00405ba5

00406058 <lv_obj_align_mid>:
{
  406058:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40605c:	b085      	sub	sp, #20
  40605e:	4604      	mov	r4, r0
  406060:	460d      	mov	r5, r1
  406062:	4690      	mov	r8, r2
  406064:	461f      	mov	r7, r3
  406066:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40606a:	4b19      	ldr	r3, [pc, #100]	; (4060d0 <lv_obj_align_mid+0x78>)
  40606c:	4798      	blx	r3
  40606e:	b928      	cbnz	r0, 40607c <lv_obj_align_mid+0x24>
  406070:	4622      	mov	r2, r4
  406072:	2300      	movs	r3, #0
  406074:	4817      	ldr	r0, [pc, #92]	; (4060d4 <lv_obj_align_mid+0x7c>)
  406076:	4918      	ldr	r1, [pc, #96]	; (4060d8 <lv_obj_align_mid+0x80>)
  406078:	4788      	blx	r1
  40607a:	e7fe      	b.n	40607a <lv_obj_align_mid+0x22>
    if(base == NULL) {
  40607c:	b14d      	cbz	r5, 406092 <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  40607e:	4628      	mov	r0, r5
  406080:	4b13      	ldr	r3, [pc, #76]	; (4060d0 <lv_obj_align_mid+0x78>)
  406082:	4798      	blx	r3
  406084:	b950      	cbnz	r0, 40609c <lv_obj_align_mid+0x44>
  406086:	462a      	mov	r2, r5
  406088:	2300      	movs	r3, #0
  40608a:	4812      	ldr	r0, [pc, #72]	; (4060d4 <lv_obj_align_mid+0x7c>)
  40608c:	4912      	ldr	r1, [pc, #72]	; (4060d8 <lv_obj_align_mid+0x80>)
  40608e:	4788      	blx	r1
  406090:	e7fe      	b.n	406090 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  406092:	4620      	mov	r0, r4
  406094:	4b11      	ldr	r3, [pc, #68]	; (4060dc <lv_obj_align_mid+0x84>)
  406096:	4798      	blx	r3
  406098:	4605      	mov	r5, r0
  40609a:	e7f0      	b.n	40607e <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  40609c:	9602      	str	r6, [sp, #8]
  40609e:	9701      	str	r7, [sp, #4]
  4060a0:	2301      	movs	r3, #1
  4060a2:	9300      	str	r3, [sp, #0]
  4060a4:	4642      	mov	r2, r8
  4060a6:	4629      	mov	r1, r5
  4060a8:	4620      	mov	r0, r4
  4060aa:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4060e0 <lv_obj_align_mid+0x88>
  4060ae:	47c8      	blx	r9
    obj->realign.align       = align;
  4060b0:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  4060b4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  4060b8:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  4060bc:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  4060be:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4060c2:	f043 0302 	orr.w	r3, r3, #2
  4060c6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  4060ca:	b005      	add	sp, #20
  4060cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4060d0:	0041552d 	.word	0x0041552d
  4060d4:	00423604 	.word	0x00423604
  4060d8:	00415539 	.word	0x00415539
  4060dc:	00405449 	.word	0x00405449
  4060e0:	00405cfd 	.word	0x00405cfd

004060e4 <lv_obj_realign>:
{
  4060e4:	b510      	push	{r4, lr}
  4060e6:	b082      	sub	sp, #8
  4060e8:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4060ea:	4b13      	ldr	r3, [pc, #76]	; (406138 <lv_obj_realign+0x54>)
  4060ec:	4798      	blx	r3
  4060ee:	b188      	cbz	r0, 406114 <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  4060f0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4060f4:	f013 0f02 	tst.w	r3, #2
  4060f8:	d012      	beq.n	406120 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4060fa:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4060fe:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  406102:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  406106:	9100      	str	r1, [sp, #0]
  406108:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40610a:	4620      	mov	r0, r4
  40610c:	4c0b      	ldr	r4, [pc, #44]	; (40613c <lv_obj_realign+0x58>)
  40610e:	47a0      	blx	r4
}
  406110:	b002      	add	sp, #8
  406112:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406114:	4622      	mov	r2, r4
  406116:	2300      	movs	r3, #0
  406118:	4809      	ldr	r0, [pc, #36]	; (406140 <lv_obj_realign+0x5c>)
  40611a:	490a      	ldr	r1, [pc, #40]	; (406144 <lv_obj_realign+0x60>)
  40611c:	4788      	blx	r1
  40611e:	e7fe      	b.n	40611e <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  406120:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  406124:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  406128:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  40612c:	9100      	str	r1, [sp, #0]
  40612e:	6c21      	ldr	r1, [r4, #64]	; 0x40
  406130:	4620      	mov	r0, r4
  406132:	4c05      	ldr	r4, [pc, #20]	; (406148 <lv_obj_realign+0x64>)
  406134:	47a0      	blx	r4
}
  406136:	e7eb      	b.n	406110 <lv_obj_realign+0x2c>
  406138:	0041552d 	.word	0x0041552d
  40613c:	00406059 	.word	0x00406059
  406140:	00423604 	.word	0x00423604
  406144:	00415539 	.word	0x00415539
  406148:	00405c71 	.word	0x00405c71

0040614c <refresh_children_style>:
{
  40614c:	b570      	push	{r4, r5, r6, lr}
  40614e:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406150:	2100      	movs	r1, #0
  406152:	4b0c      	ldr	r3, [pc, #48]	; (406184 <refresh_children_style+0x38>)
  406154:	4798      	blx	r3
  406156:	4604      	mov	r4, r0
    while(child != NULL) {
  406158:	e011      	b.n	40617e <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  40615a:	4620      	mov	r0, r4
  40615c:	4d0a      	ldr	r5, [pc, #40]	; (406188 <refresh_children_style+0x3c>)
  40615e:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  406160:	69e3      	ldr	r3, [r4, #28]
  406162:	2200      	movs	r2, #0
  406164:	2104      	movs	r1, #4
  406166:	4620      	mov	r0, r4
  406168:	4798      	blx	r3
        lv_obj_invalidate(child);
  40616a:	4620      	mov	r0, r4
  40616c:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  40616e:	4620      	mov	r0, r4
  406170:	f7ff ffec 	bl	40614c <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  406174:	4621      	mov	r1, r4
  406176:	4630      	mov	r0, r6
  406178:	4b02      	ldr	r3, [pc, #8]	; (406184 <refresh_children_style+0x38>)
  40617a:	4798      	blx	r3
  40617c:	4604      	mov	r4, r0
    while(child != NULL) {
  40617e:	2c00      	cmp	r4, #0
  406180:	d1eb      	bne.n	40615a <refresh_children_style+0xe>
}
  406182:	bd70      	pop	{r4, r5, r6, pc}
  406184:	0040551d 	.word	0x0040551d
  406188:	004059c9 	.word	0x004059c9

0040618c <lv_obj_get_click>:
{
  40618c:	b510      	push	{r4, lr}
  40618e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406190:	4b06      	ldr	r3, [pc, #24]	; (4061ac <lv_obj_get_click+0x20>)
  406192:	4798      	blx	r3
  406194:	b120      	cbz	r0, 4061a0 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  406196:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40619a:	f000 0001 	and.w	r0, r0, #1
  40619e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061a0:	4622      	mov	r2, r4
  4061a2:	2300      	movs	r3, #0
  4061a4:	4802      	ldr	r0, [pc, #8]	; (4061b0 <lv_obj_get_click+0x24>)
  4061a6:	4903      	ldr	r1, [pc, #12]	; (4061b4 <lv_obj_get_click+0x28>)
  4061a8:	4788      	blx	r1
  4061aa:	e7fe      	b.n	4061aa <lv_obj_get_click+0x1e>
  4061ac:	0041552d 	.word	0x0041552d
  4061b0:	00423604 	.word	0x00423604
  4061b4:	00415539 	.word	0x00415539

004061b8 <lv_obj_get_drag>:
{
  4061b8:	b510      	push	{r4, lr}
  4061ba:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061bc:	4b06      	ldr	r3, [pc, #24]	; (4061d8 <lv_obj_get_drag+0x20>)
  4061be:	4798      	blx	r3
  4061c0:	b120      	cbz	r0, 4061cc <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  4061c2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4061c6:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4061ca:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061cc:	4622      	mov	r2, r4
  4061ce:	2300      	movs	r3, #0
  4061d0:	4802      	ldr	r0, [pc, #8]	; (4061dc <lv_obj_get_drag+0x24>)
  4061d2:	4903      	ldr	r1, [pc, #12]	; (4061e0 <lv_obj_get_drag+0x28>)
  4061d4:	4788      	blx	r1
  4061d6:	e7fe      	b.n	4061d6 <lv_obj_get_drag+0x1e>
  4061d8:	0041552d 	.word	0x0041552d
  4061dc:	00423604 	.word	0x00423604
  4061e0:	00415539 	.word	0x00415539

004061e4 <lv_obj_get_drag_dir>:
{
  4061e4:	b510      	push	{r4, lr}
  4061e6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061e8:	4b06      	ldr	r3, [pc, #24]	; (406204 <lv_obj_get_drag_dir+0x20>)
  4061ea:	4798      	blx	r3
  4061ec:	b120      	cbz	r0, 4061f8 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  4061ee:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  4061f2:	f3c0 0082 	ubfx	r0, r0, #2, #3
  4061f6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061f8:	4622      	mov	r2, r4
  4061fa:	2300      	movs	r3, #0
  4061fc:	4802      	ldr	r0, [pc, #8]	; (406208 <lv_obj_get_drag_dir+0x24>)
  4061fe:	4903      	ldr	r1, [pc, #12]	; (40620c <lv_obj_get_drag_dir+0x28>)
  406200:	4788      	blx	r1
  406202:	e7fe      	b.n	406202 <lv_obj_get_drag_dir+0x1e>
  406204:	0041552d 	.word	0x0041552d
  406208:	00423604 	.word	0x00423604
  40620c:	00415539 	.word	0x00415539

00406210 <lv_obj_get_drag_throw>:
{
  406210:	b510      	push	{r4, lr}
  406212:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406214:	4b06      	ldr	r3, [pc, #24]	; (406230 <lv_obj_get_drag_throw+0x20>)
  406216:	4798      	blx	r3
  406218:	b120      	cbz	r0, 406224 <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  40621a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40621e:	f3c0 0080 	ubfx	r0, r0, #2, #1
  406222:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406224:	4622      	mov	r2, r4
  406226:	2300      	movs	r3, #0
  406228:	4802      	ldr	r0, [pc, #8]	; (406234 <lv_obj_get_drag_throw+0x24>)
  40622a:	4903      	ldr	r1, [pc, #12]	; (406238 <lv_obj_get_drag_throw+0x28>)
  40622c:	4788      	blx	r1
  40622e:	e7fe      	b.n	40622e <lv_obj_get_drag_throw+0x1e>
  406230:	0041552d 	.word	0x0041552d
  406234:	00423604 	.word	0x00423604
  406238:	00415539 	.word	0x00415539

0040623c <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  40623c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  406240:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  406244:	4770      	bx	lr

00406246 <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  406246:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  40624a:	f000 0001 	and.w	r0, r0, #1
  40624e:	4770      	bx	lr

00406250 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  406250:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  406254:	f3c0 0040 	ubfx	r0, r0, #1, #1
  406258:	4770      	bx	lr
	...

0040625c <lv_obj_get_base_dir>:
{
  40625c:	b510      	push	{r4, lr}
  40625e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406260:	4b05      	ldr	r3, [pc, #20]	; (406278 <lv_obj_get_base_dir+0x1c>)
  406262:	4798      	blx	r3
  406264:	b108      	cbz	r0, 40626a <lv_obj_get_base_dir+0xe>
}
  406266:	2000      	movs	r0, #0
  406268:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40626a:	4622      	mov	r2, r4
  40626c:	2300      	movs	r3, #0
  40626e:	4803      	ldr	r0, [pc, #12]	; (40627c <lv_obj_get_base_dir+0x20>)
  406270:	4903      	ldr	r1, [pc, #12]	; (406280 <lv_obj_get_base_dir+0x24>)
  406272:	4788      	blx	r1
  406274:	e7fe      	b.n	406274 <lv_obj_get_base_dir+0x18>
  406276:	bf00      	nop
  406278:	0041552d 	.word	0x0041552d
  40627c:	00423604 	.word	0x00423604
  406280:	00415539 	.word	0x00415539

00406284 <lv_obj_create>:
{
  406284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406286:	460d      	mov	r5, r1
    if(parent == NULL) {
  406288:	4606      	mov	r6, r0
  40628a:	b150      	cbz	r0, 4062a2 <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  40628c:	4b8e      	ldr	r3, [pc, #568]	; (4064c8 <lv_obj_create+0x244>)
  40628e:	4798      	blx	r3
  406290:	2800      	cmp	r0, #0
  406292:	f040 8086 	bne.w	4063a2 <lv_obj_create+0x11e>
  406296:	4632      	mov	r2, r6
  406298:	2300      	movs	r3, #0
  40629a:	488c      	ldr	r0, [pc, #560]	; (4064cc <lv_obj_create+0x248>)
  40629c:	498c      	ldr	r1, [pc, #560]	; (4064d0 <lv_obj_create+0x24c>)
  40629e:	4788      	blx	r1
  4062a0:	e7fe      	b.n	4062a0 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  4062a2:	4b8c      	ldr	r3, [pc, #560]	; (4064d4 <lv_obj_create+0x250>)
  4062a4:	4798      	blx	r3
        if(!disp) {
  4062a6:	2800      	cmp	r0, #0
  4062a8:	f000 81f0 	beq.w	40668c <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  4062ac:	3038      	adds	r0, #56	; 0x38
  4062ae:	4b8a      	ldr	r3, [pc, #552]	; (4064d8 <lv_obj_create+0x254>)
  4062b0:	4798      	blx	r3
  4062b2:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  4062b4:	4b84      	ldr	r3, [pc, #528]	; (4064c8 <lv_obj_create+0x244>)
  4062b6:	4798      	blx	r3
  4062b8:	b928      	cbnz	r0, 4062c6 <lv_obj_create+0x42>
  4062ba:	4622      	mov	r2, r4
  4062bc:	2300      	movs	r3, #0
  4062be:	4887      	ldr	r0, [pc, #540]	; (4064dc <lv_obj_create+0x258>)
  4062c0:	4983      	ldr	r1, [pc, #524]	; (4064d0 <lv_obj_create+0x24c>)
  4062c2:	4788      	blx	r1
  4062c4:	e7fe      	b.n	4062c4 <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  4062c6:	2c00      	cmp	r4, #0
  4062c8:	f000 81de 	beq.w	406688 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  4062cc:	214c      	movs	r1, #76	; 0x4c
  4062ce:	4620      	mov	r0, r4
  4062d0:	4b83      	ldr	r3, [pc, #524]	; (4064e0 <lv_obj_create+0x25c>)
  4062d2:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  4062d4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4062d8:	f36f 1346 	bfc	r3, #5, #2
  4062dc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4062e0:	4b80      	ldr	r3, [pc, #512]	; (4064e4 <lv_obj_create+0x260>)
  4062e2:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4062e4:	4b80      	ldr	r3, [pc, #512]	; (4064e8 <lv_obj_create+0x264>)
  4062e6:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4062e8:	2700      	movs	r7, #0
  4062ea:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  4062ec:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  4062ee:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  4062f0:	4638      	mov	r0, r7
  4062f2:	4b7e      	ldr	r3, [pc, #504]	; (4064ec <lv_obj_create+0x268>)
  4062f4:	4798      	blx	r3
  4062f6:	b283      	uxth	r3, r0
  4062f8:	3b01      	subs	r3, #1
  4062fa:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  4062fc:	4638      	mov	r0, r7
  4062fe:	4b7c      	ldr	r3, [pc, #496]	; (4064f0 <lv_obj_create+0x26c>)
  406300:	4798      	blx	r3
  406302:	b283      	uxth	r3, r0
  406304:	3b01      	subs	r3, #1
  406306:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  406308:	214c      	movs	r1, #76	; 0x4c
  40630a:	1d20      	adds	r0, r4, #4
  40630c:	4b79      	ldr	r3, [pc, #484]	; (4064f4 <lv_obj_create+0x270>)
  40630e:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  406310:	2300      	movs	r3, #0
  406312:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  406314:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  406318:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  40631c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  406320:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  406324:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  406328:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  40632a:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  40632e:	f363 0200 	bfi	r2, r3, #0, #1
  406332:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  406336:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  406338:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  40633c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  406340:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  406344:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406348:	2003      	movs	r0, #3
  40634a:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  40634e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  406352:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  406356:	f363 1186 	bfi	r1, r3, #6, #1
  40635a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  40635e:	1af1      	subs	r1, r6, r3
  406360:	bf18      	it	ne
  406362:	2101      	movne	r1, #1
  406364:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  406368:	f363 0241 	bfi	r2, r3, #1, #1
  40636c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  406370:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  406374:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  406376:	f104 0728 	add.w	r7, r4, #40	; 0x28
  40637a:	4638      	mov	r0, r7
  40637c:	4b5e      	ldr	r3, [pc, #376]	; (4064f8 <lv_obj_create+0x274>)
  40637e:	4798      	blx	r3
    if(copy == NULL) {
  406380:	2d00      	cmp	r5, #0
  406382:	f000 8096 	beq.w	4064b2 <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  406386:	f105 0128 	add.w	r1, r5, #40	; 0x28
  40638a:	4638      	mov	r0, r7
  40638c:	4b5b      	ldr	r3, [pc, #364]	; (4064fc <lv_obj_create+0x278>)
  40638e:	4798      	blx	r3
    if(copy != NULL) {
  406390:	2d00      	cmp	r5, #0
  406392:	f000 8170 	beq.w	406676 <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  406396:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  40639a:	f104 0210 	add.w	r2, r4, #16
  40639e:	2308      	movs	r3, #8
  4063a0:	e0bb      	b.n	40651a <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  4063a2:	1d30      	adds	r0, r6, #4
  4063a4:	4b4c      	ldr	r3, [pc, #304]	; (4064d8 <lv_obj_create+0x254>)
  4063a6:	4798      	blx	r3
  4063a8:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  4063aa:	4b47      	ldr	r3, [pc, #284]	; (4064c8 <lv_obj_create+0x244>)
  4063ac:	4798      	blx	r3
  4063ae:	2800      	cmp	r0, #0
  4063b0:	d047      	beq.n	406442 <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  4063b2:	2c00      	cmp	r4, #0
  4063b4:	f000 8168 	beq.w	406688 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  4063b8:	214c      	movs	r1, #76	; 0x4c
  4063ba:	4620      	mov	r0, r4
  4063bc:	4b48      	ldr	r3, [pc, #288]	; (4064e0 <lv_obj_create+0x25c>)
  4063be:	4798      	blx	r3
        new_obj->parent = parent;
  4063c0:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  4063c2:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4063c6:	f36f 1346 	bfc	r3, #5, #2
  4063ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4063ce:	4b45      	ldr	r3, [pc, #276]	; (4064e4 <lv_obj_create+0x260>)
  4063d0:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4063d2:	4b45      	ldr	r3, [pc, #276]	; (4064e8 <lv_obj_create+0x264>)
  4063d4:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4063d6:	2000      	movs	r0, #0
  4063d8:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  4063da:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4063de:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4063e0:	8a77      	ldrh	r7, [r6, #18]
  4063e2:	4b47      	ldr	r3, [pc, #284]	; (406500 <lv_obj_create+0x27c>)
  4063e4:	4798      	blx	r3
  4063e6:	2332      	movs	r3, #50	; 0x32
  4063e8:	fb03 f300 	mul.w	r3, r3, r0
  4063ec:	3350      	adds	r3, #80	; 0x50
  4063ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4063f2:	da2c      	bge.n	40644e <lv_obj_create+0x1ca>
  4063f4:	2301      	movs	r3, #1
  4063f6:	443b      	add	r3, r7
  4063f8:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  4063fa:	4620      	mov	r0, r4
  4063fc:	4b41      	ldr	r3, [pc, #260]	; (406504 <lv_obj_create+0x280>)
  4063fe:	4798      	blx	r3
  406400:	2801      	cmp	r0, #1
  406402:	d033      	beq.n	40646c <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  406404:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  406408:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  40640a:	8a37      	ldrh	r7, [r6, #16]
  40640c:	2000      	movs	r0, #0
  40640e:	4b3c      	ldr	r3, [pc, #240]	; (406500 <lv_obj_create+0x27c>)
  406410:	4798      	blx	r3
  406412:	2364      	movs	r3, #100	; 0x64
  406414:	fb03 f300 	mul.w	r3, r3, r0
  406418:	3350      	adds	r3, #80	; 0x50
  40641a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40641e:	db46      	blt.n	4064ae <lv_obj_create+0x22a>
  406420:	2000      	movs	r0, #0
  406422:	4b37      	ldr	r3, [pc, #220]	; (406500 <lv_obj_create+0x27c>)
  406424:	4798      	blx	r3
  406426:	2364      	movs	r3, #100	; 0x64
  406428:	fb03 f300 	mul.w	r3, r3, r0
  40642c:	3350      	adds	r3, #80	; 0x50
  40642e:	4a36      	ldr	r2, [pc, #216]	; (406508 <lv_obj_create+0x284>)
  406430:	fb82 1203 	smull	r1, r2, r2, r3
  406434:	17db      	asrs	r3, r3, #31
  406436:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40643a:	b29b      	uxth	r3, r3
  40643c:	443b      	add	r3, r7
  40643e:	82a3      	strh	r3, [r4, #20]
  406440:	e762      	b.n	406308 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  406442:	4622      	mov	r2, r4
  406444:	2300      	movs	r3, #0
  406446:	4825      	ldr	r0, [pc, #148]	; (4064dc <lv_obj_create+0x258>)
  406448:	4921      	ldr	r1, [pc, #132]	; (4064d0 <lv_obj_create+0x24c>)
  40644a:	4788      	blx	r1
  40644c:	e7fe      	b.n	40644c <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  40644e:	2000      	movs	r0, #0
  406450:	4b2b      	ldr	r3, [pc, #172]	; (406500 <lv_obj_create+0x27c>)
  406452:	4798      	blx	r3
  406454:	2332      	movs	r3, #50	; 0x32
  406456:	fb03 f300 	mul.w	r3, r3, r0
  40645a:	3350      	adds	r3, #80	; 0x50
  40645c:	4a2a      	ldr	r2, [pc, #168]	; (406508 <lv_obj_create+0x284>)
  40645e:	fb82 1203 	smull	r1, r2, r2, r3
  406462:	17db      	asrs	r3, r3, #31
  406464:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406468:	b29b      	uxth	r3, r3
  40646a:	e7c4      	b.n	4063f6 <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  40646c:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406470:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  406472:	8ab7      	ldrh	r7, [r6, #20]
  406474:	2000      	movs	r0, #0
  406476:	4b22      	ldr	r3, [pc, #136]	; (406500 <lv_obj_create+0x27c>)
  406478:	4798      	blx	r3
  40647a:	2364      	movs	r3, #100	; 0x64
  40647c:	fb03 f300 	mul.w	r3, r3, r0
  406480:	3350      	adds	r3, #80	; 0x50
  406482:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  406486:	db10      	blt.n	4064aa <lv_obj_create+0x226>
  406488:	2000      	movs	r0, #0
  40648a:	4b1d      	ldr	r3, [pc, #116]	; (406500 <lv_obj_create+0x27c>)
  40648c:	4798      	blx	r3
  40648e:	2364      	movs	r3, #100	; 0x64
  406490:	fb03 f300 	mul.w	r3, r3, r0
  406494:	3350      	adds	r3, #80	; 0x50
  406496:	4a1c      	ldr	r2, [pc, #112]	; (406508 <lv_obj_create+0x284>)
  406498:	fb82 1203 	smull	r1, r2, r2, r3
  40649c:	17db      	asrs	r3, r3, #31
  40649e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  4064a2:	b29b      	uxth	r3, r3
  4064a4:	1afb      	subs	r3, r7, r3
  4064a6:	8223      	strh	r3, [r4, #16]
  4064a8:	e72e      	b.n	406308 <lv_obj_create+0x84>
  4064aa:	2301      	movs	r3, #1
  4064ac:	e7fa      	b.n	4064a4 <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4064ae:	2301      	movs	r3, #1
  4064b0:	e7c4      	b.n	40643c <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  4064b2:	b126      	cbz	r6, 4064be <lv_obj_create+0x23a>
  4064b4:	2102      	movs	r1, #2
  4064b6:	4620      	mov	r0, r4
  4064b8:	4b14      	ldr	r3, [pc, #80]	; (40650c <lv_obj_create+0x288>)
  4064ba:	4798      	blx	r3
  4064bc:	e768      	b.n	406390 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  4064be:	2101      	movs	r1, #1
  4064c0:	4620      	mov	r0, r4
  4064c2:	4b12      	ldr	r3, [pc, #72]	; (40650c <lv_obj_create+0x288>)
  4064c4:	4798      	blx	r3
  4064c6:	e763      	b.n	406390 <lv_obj_create+0x10c>
  4064c8:	0041552d 	.word	0x0041552d
  4064cc:	00423604 	.word	0x00423604
  4064d0:	00415539 	.word	0x00415539
  4064d4:	004143f5 	.word	0x004143f5
  4064d8:	004157a5 	.word	0x004157a5
  4064dc:	004235f0 	.word	0x004235f0
  4064e0:	00416169 	.word	0x00416169
  4064e4:	00408b15 	.word	0x00408b15
  4064e8:	00407f45 	.word	0x00407f45
  4064ec:	00414401 	.word	0x00414401
  4064f0:	00414431 	.word	0x00414431
  4064f4:	00415793 	.word	0x00415793
  4064f8:	00409695 	.word	0x00409695
  4064fc:	0040a571 	.word	0x0040a571
  406500:	0041445d 	.word	0x0041445d
  406504:	0040625d 	.word	0x0040625d
  406508:	66666667 	.word	0x66666667
  40650c:	00416ebd 	.word	0x00416ebd
        *d8 = *s8;
  406510:	f811 0b01 	ldrb.w	r0, [r1], #1
  406514:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  406518:	3b01      	subs	r3, #1
    while(len) {
  40651a:	2b00      	cmp	r3, #0
  40651c:	d1f8      	bne.n	406510 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  40651e:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  406522:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  406524:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  406528:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  40652c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406530:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  406534:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406538:	f3c3 1341 	ubfx	r3, r3, #5, #2
  40653c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406540:	f363 1246 	bfi	r2, r3, #5, #2
  406544:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  406548:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  40654c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  406550:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  406554:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  406558:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  40655c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406560:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  406562:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  406564:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406568:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40656c:	f362 0300 	bfi	r3, r2, #0, #1
  406570:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  406574:	69ab      	ldr	r3, [r5, #24]
  406576:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406578:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40657c:	09db      	lsrs	r3, r3, #7
  40657e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  406582:	f363 12c7 	bfi	r2, r3, #7, #1
  406586:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  40658a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  40658e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  406592:	f362 0300 	bfi	r3, r2, #0, #1
  406596:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  40659a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40659e:	f3c3 0340 	ubfx	r3, r3, #1, #1
  4065a2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  4065a6:	f363 0241 	bfi	r2, r3, #1, #1
  4065aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  4065ae:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  4065b2:	f3c3 0382 	ubfx	r3, r3, #2, #3
  4065b6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  4065ba:	f363 0284 	bfi	r2, r3, #2, #3
  4065be:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  4065c2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4065c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4065ca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  4065ce:	f363 0282 	bfi	r2, r3, #2, #1
  4065d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  4065d6:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4065da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  4065de:	b2d2      	uxtb	r2, r2
  4065e0:	f363 02c3 	bfi	r2, r3, #3, #1
  4065e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  4065e8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4065ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4065f0:	b2d2      	uxtb	r2, r2
  4065f2:	f363 1204 	bfi	r2, r3, #4, #1
  4065f6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  4065fa:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4065fe:	f3c3 1340 	ubfx	r3, r3, #5, #1
  406602:	b2d2      	uxtb	r2, r2
  406604:	f363 1245 	bfi	r2, r3, #5, #1
  406608:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  40660c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406610:	f3c3 1380 	ubfx	r3, r3, #6, #1
  406614:	b2d2      	uxtb	r2, r2
  406616:	f363 1286 	bfi	r2, r3, #6, #1
  40661a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  40661e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  406622:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  406626:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  40662a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  40662e:	f362 0300 	bfi	r3, r2, #0, #1
  406632:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  406636:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  40663a:	f3c3 0340 	ubfx	r3, r3, #1, #1
  40663e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406642:	f363 0241 	bfi	r2, r3, #1, #1
  406646:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  40664a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  40664c:	b110      	cbz	r0, 406654 <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  40664e:	4621      	mov	r1, r4
  406650:	4b0f      	ldr	r3, [pc, #60]	; (406690 <lv_obj_create+0x40c>)
  406652:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  406654:	4628      	mov	r0, r5
  406656:	4b0f      	ldr	r3, [pc, #60]	; (406694 <lv_obj_create+0x410>)
  406658:	4798      	blx	r3
  40665a:	b160      	cbz	r0, 406676 <lv_obj_create+0x3f2>
  40665c:	b15e      	cbz	r6, 406676 <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  40665e:	4628      	mov	r0, r5
  406660:	4b0d      	ldr	r3, [pc, #52]	; (406698 <lv_obj_create+0x414>)
  406662:	4798      	blx	r3
  406664:	4607      	mov	r7, r0
  406666:	4628      	mov	r0, r5
  406668:	4b0c      	ldr	r3, [pc, #48]	; (40669c <lv_obj_create+0x418>)
  40666a:	4798      	blx	r3
  40666c:	4602      	mov	r2, r0
  40666e:	4639      	mov	r1, r7
  406670:	4620      	mov	r0, r4
  406672:	4b0b      	ldr	r3, [pc, #44]	; (4066a0 <lv_obj_create+0x41c>)
  406674:	4798      	blx	r3
    if(parent != NULL) {
  406676:	b13e      	cbz	r6, 406688 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406678:	69f3      	ldr	r3, [r6, #28]
  40667a:	4622      	mov	r2, r4
  40667c:	2101      	movs	r1, #1
  40667e:	4630      	mov	r0, r6
  406680:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  406682:	4620      	mov	r0, r4
  406684:	4b07      	ldr	r3, [pc, #28]	; (4066a4 <lv_obj_create+0x420>)
  406686:	4798      	blx	r3
}
  406688:	4620      	mov	r0, r4
  40668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  40668c:	4634      	mov	r4, r6
  40668e:	e7fb      	b.n	406688 <lv_obj_create+0x404>
  406690:	004033f1 	.word	0x004033f1
  406694:	00405449 	.word	0x00405449
  406698:	0040559d 	.word	0x0040559d
  40669c:	004055dd 	.word	0x004055dd
  4066a0:	00405aad 	.word	0x00405aad
  4066a4:	004059c9 	.word	0x004059c9

004066a8 <lv_obj_set_size>:
{
  4066a8:	b570      	push	{r4, r5, r6, lr}
  4066aa:	b082      	sub	sp, #8
  4066ac:	4604      	mov	r4, r0
  4066ae:	460d      	mov	r5, r1
  4066b0:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4066b2:	4b2e      	ldr	r3, [pc, #184]	; (40676c <lv_obj_set_size+0xc4>)
  4066b4:	4798      	blx	r3
  4066b6:	b928      	cbnz	r0, 4066c4 <lv_obj_set_size+0x1c>
  4066b8:	4622      	mov	r2, r4
  4066ba:	2300      	movs	r3, #0
  4066bc:	482c      	ldr	r0, [pc, #176]	; (406770 <lv_obj_set_size+0xc8>)
  4066be:	492d      	ldr	r1, [pc, #180]	; (406774 <lv_obj_set_size+0xcc>)
  4066c0:	4788      	blx	r1
  4066c2:	e7fe      	b.n	4066c2 <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  4066c4:	4620      	mov	r0, r4
  4066c6:	4b2c      	ldr	r3, [pc, #176]	; (406778 <lv_obj_set_size+0xd0>)
  4066c8:	4798      	blx	r3
  4066ca:	42a8      	cmp	r0, r5
  4066cc:	d028      	beq.n	406720 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  4066ce:	4620      	mov	r0, r4
  4066d0:	4b2a      	ldr	r3, [pc, #168]	; (40677c <lv_obj_set_size+0xd4>)
  4066d2:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  4066d4:	4669      	mov	r1, sp
  4066d6:	4620      	mov	r0, r4
  4066d8:	4b29      	ldr	r3, [pc, #164]	; (406780 <lv_obj_set_size+0xd8>)
  4066da:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  4066dc:	8a63      	ldrh	r3, [r4, #18]
  4066de:	4433      	add	r3, r6
  4066e0:	b29b      	uxth	r3, r3
  4066e2:	3b01      	subs	r3, #1
  4066e4:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  4066e6:	4620      	mov	r0, r4
  4066e8:	4b26      	ldr	r3, [pc, #152]	; (406784 <lv_obj_set_size+0xdc>)
  4066ea:	4798      	blx	r3
  4066ec:	2801      	cmp	r0, #1
  4066ee:	d01d      	beq.n	40672c <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  4066f0:	8a23      	ldrh	r3, [r4, #16]
  4066f2:	442b      	add	r3, r5
  4066f4:	b29b      	uxth	r3, r3
  4066f6:	3b01      	subs	r3, #1
  4066f8:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  4066fa:	69e3      	ldr	r3, [r4, #28]
  4066fc:	466a      	mov	r2, sp
  4066fe:	2102      	movs	r1, #2
  406700:	4620      	mov	r0, r4
  406702:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  406704:	4620      	mov	r0, r4
  406706:	4b20      	ldr	r3, [pc, #128]	; (406788 <lv_obj_set_size+0xe0>)
  406708:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  40670a:	b118      	cbz	r0, 406714 <lv_obj_set_size+0x6c>
  40670c:	69c5      	ldr	r5, [r0, #28]
  40670e:	4622      	mov	r2, r4
  406710:	2101      	movs	r1, #1
  406712:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  406714:	1d26      	adds	r6, r4, #4
  406716:	4630      	mov	r0, r6
  406718:	4b1c      	ldr	r3, [pc, #112]	; (40678c <lv_obj_set_size+0xe4>)
  40671a:	4798      	blx	r3
  40671c:	4605      	mov	r5, r0
  40671e:	e015      	b.n	40674c <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  406720:	4620      	mov	r0, r4
  406722:	4b1b      	ldr	r3, [pc, #108]	; (406790 <lv_obj_set_size+0xe8>)
  406724:	4798      	blx	r3
  406726:	42b0      	cmp	r0, r6
  406728:	d1d1      	bne.n	4066ce <lv_obj_set_size+0x26>
  40672a:	e019      	b.n	406760 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  40672c:	8aa3      	ldrh	r3, [r4, #20]
  40672e:	1b5b      	subs	r3, r3, r5
  406730:	b29b      	uxth	r3, r3
  406732:	3301      	adds	r3, #1
  406734:	8223      	strh	r3, [r4, #16]
  406736:	e7e0      	b.n	4066fa <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406738:	69eb      	ldr	r3, [r5, #28]
  40673a:	466a      	mov	r2, sp
  40673c:	2103      	movs	r1, #3
  40673e:	4628      	mov	r0, r5
  406740:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  406742:	4629      	mov	r1, r5
  406744:	4630      	mov	r0, r6
  406746:	4b13      	ldr	r3, [pc, #76]	; (406794 <lv_obj_set_size+0xec>)
  406748:	4798      	blx	r3
  40674a:	4605      	mov	r5, r0
  40674c:	2d00      	cmp	r5, #0
  40674e:	d1f3      	bne.n	406738 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406750:	4620      	mov	r0, r4
  406752:	4b0a      	ldr	r3, [pc, #40]	; (40677c <lv_obj_set_size+0xd4>)
  406754:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406756:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40675a:	f013 0f01 	tst.w	r3, #1
  40675e:	d101      	bne.n	406764 <lv_obj_set_size+0xbc>
}
  406760:	b002      	add	sp, #8
  406762:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  406764:	4620      	mov	r0, r4
  406766:	4b0c      	ldr	r3, [pc, #48]	; (406798 <lv_obj_set_size+0xf0>)
  406768:	4798      	blx	r3
  40676a:	e7f9      	b.n	406760 <lv_obj_set_size+0xb8>
  40676c:	0041552d 	.word	0x0041552d
  406770:	00423604 	.word	0x00423604
  406774:	00415539 	.word	0x00415539
  406778:	0040561d 	.word	0x0040561d
  40677c:	004059c9 	.word	0x004059c9
  406780:	0040555d 	.word	0x0040555d
  406784:	0040625d 	.word	0x0040625d
  406788:	00405449 	.word	0x00405449
  40678c:	0041583d 	.word	0x0041583d
  406790:	0040564d 	.word	0x0040564d
  406794:	00415851 	.word	0x00415851
  406798:	004060e5 	.word	0x004060e5

0040679c <lv_obj_is_protected>:
{
  40679c:	b538      	push	{r3, r4, r5, lr}
  40679e:	4604      	mov	r4, r0
  4067a0:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067a2:	4b08      	ldr	r3, [pc, #32]	; (4067c4 <lv_obj_is_protected+0x28>)
  4067a4:	4798      	blx	r3
  4067a6:	b130      	cbz	r0, 4067b6 <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  4067a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  4067ac:	422b      	tst	r3, r5
}
  4067ae:	bf14      	ite	ne
  4067b0:	2001      	movne	r0, #1
  4067b2:	2000      	moveq	r0, #0
  4067b4:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067b6:	4622      	mov	r2, r4
  4067b8:	2300      	movs	r3, #0
  4067ba:	4803      	ldr	r0, [pc, #12]	; (4067c8 <lv_obj_is_protected+0x2c>)
  4067bc:	4903      	ldr	r1, [pc, #12]	; (4067cc <lv_obj_is_protected+0x30>)
  4067be:	4788      	blx	r1
  4067c0:	e7fe      	b.n	4067c0 <lv_obj_is_protected+0x24>
  4067c2:	bf00      	nop
  4067c4:	0041552d 	.word	0x0041552d
  4067c8:	00423604 	.word	0x00423604
  4067cc:	00415539 	.word	0x00415539

004067d0 <lv_obj_get_state>:
{
  4067d0:	b530      	push	{r4, r5, lr}
  4067d2:	b083      	sub	sp, #12
  4067d4:	4604      	mov	r4, r0
  4067d6:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067d8:	4b0d      	ldr	r3, [pc, #52]	; (406810 <lv_obj_get_state+0x40>)
  4067da:	4798      	blx	r3
  4067dc:	b128      	cbz	r0, 4067ea <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  4067de:	2d3f      	cmp	r5, #63	; 0x3f
  4067e0:	d809      	bhi.n	4067f6 <lv_obj_get_state+0x26>
  4067e2:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  4067e6:	b003      	add	sp, #12
  4067e8:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4067ea:	4622      	mov	r2, r4
  4067ec:	2300      	movs	r3, #0
  4067ee:	4809      	ldr	r0, [pc, #36]	; (406814 <lv_obj_get_state+0x44>)
  4067f0:	4909      	ldr	r1, [pc, #36]	; (406818 <lv_obj_get_state+0x48>)
  4067f2:	4788      	blx	r1
  4067f4:	e7fe      	b.n	4067f4 <lv_obj_get_state+0x24>
    info.part = part;
  4067f6:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  4067fa:	2300      	movs	r3, #0
  4067fc:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406800:	aa01      	add	r2, sp, #4
  406802:	2109      	movs	r1, #9
  406804:	4620      	mov	r0, r4
  406806:	4b05      	ldr	r3, [pc, #20]	; (40681c <lv_obj_get_state+0x4c>)
  406808:	4798      	blx	r3
    return info.result;
  40680a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  40680e:	e7ea      	b.n	4067e6 <lv_obj_get_state+0x16>
  406810:	0041552d 	.word	0x0041552d
  406814:	00423604 	.word	0x00423604
  406818:	00415539 	.word	0x00415539
  40681c:	004053a1 	.word	0x004053a1

00406820 <_lv_obj_get_style_color>:
{
  406820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406824:	b083      	sub	sp, #12
  406826:	4606      	mov	r6, r0
  406828:	460d      	mov	r5, r1
  40682a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  40682c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406830:	4614      	mov	r4, r2
  406832:	e006      	b.n	406842 <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  406834:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406838:	e026      	b.n	406888 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  40683a:	4630      	mov	r0, r6
  40683c:	4b15      	ldr	r3, [pc, #84]	; (406894 <_lv_obj_get_style_color+0x74>)
  40683e:	4798      	blx	r3
  406840:	4606      	mov	r6, r0
    while(parent) {
  406842:	b1d6      	cbz	r6, 40687a <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406844:	4629      	mov	r1, r5
  406846:	4630      	mov	r0, r6
  406848:	4b13      	ldr	r3, [pc, #76]	; (406898 <_lv_obj_get_style_color+0x78>)
  40684a:	4798      	blx	r3
  40684c:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  40684e:	4629      	mov	r1, r5
  406850:	4630      	mov	r0, r6
  406852:	4b12      	ldr	r3, [pc, #72]	; (40689c <_lv_obj_get_style_color+0x7c>)
  406854:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406856:	0204      	lsls	r4, r0, #8
  406858:	b2a4      	uxth	r4, r4
  40685a:	4444      	add	r4, r8
  40685c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  40685e:	aa01      	add	r2, sp, #4
  406860:	4621      	mov	r1, r4
  406862:	4638      	mov	r0, r7
  406864:	4b0e      	ldr	r3, [pc, #56]	; (4068a0 <_lv_obj_get_style_color+0x80>)
  406866:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406868:	2801      	cmp	r0, #1
  40686a:	d0e3      	beq.n	406834 <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  40686c:	f019 0f80 	tst.w	r9, #128	; 0x80
  406870:	d003      	beq.n	40687a <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  406872:	2d00      	cmp	r5, #0
  406874:	d0e1      	beq.n	40683a <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  406876:	2500      	movs	r5, #0
  406878:	e7e3      	b.n	406842 <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  40687a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  40687e:	3c29      	subs	r4, #41	; 0x29
  406880:	2c01      	cmp	r4, #1
  406882:	d904      	bls.n	40688e <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  406884:	f04f 0000 	mov.w	r0, #0
}
  406888:	b003      	add	sp, #12
  40688a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  40688e:	4b05      	ldr	r3, [pc, #20]	; (4068a4 <_lv_obj_get_style_color+0x84>)
  406890:	8818      	ldrh	r0, [r3, #0]
  406892:	e7f9      	b.n	406888 <_lv_obj_get_style_color+0x68>
  406894:	00405449 	.word	0x00405449
  406898:	0040567d 	.word	0x0040567d
  40689c:	004067d1 	.word	0x004067d1
  4068a0:	0040a7e9 	.word	0x0040a7e9
  4068a4:	00423600 	.word	0x00423600

004068a8 <_lv_obj_get_style_opa>:
{
  4068a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4068ac:	b083      	sub	sp, #12
  4068ae:	4607      	mov	r7, r0
  4068b0:	460e      	mov	r6, r1
  4068b2:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  4068b4:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  4068b8:	4614      	mov	r4, r2
  4068ba:	e023      	b.n	406904 <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4068bc:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4068c0:	4631      	mov	r1, r6
  4068c2:	4638      	mov	r0, r7
  4068c4:	4b37      	ldr	r3, [pc, #220]	; (4069a4 <_lv_obj_get_style_opa+0xfc>)
  4068c6:	4798      	blx	r3
  4068c8:	e02e      	b.n	406928 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  4068ca:	796b      	ldrb	r3, [r5, #5]
  4068cc:	f013 0f20 	tst.w	r3, #32
  4068d0:	d147      	bne.n	406962 <_lv_obj_get_style_opa+0xba>
            bool def = false;
  4068d2:	2300      	movs	r3, #0
            if(def) {
  4068d4:	2b00      	cmp	r3, #0
  4068d6:	d152      	bne.n	40697e <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  4068d8:	4631      	mov	r1, r6
  4068da:	4638      	mov	r0, r7
  4068dc:	4b32      	ldr	r3, [pc, #200]	; (4069a8 <_lv_obj_get_style_opa+0x100>)
  4068de:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4068e0:	0204      	lsls	r4, r0, #8
  4068e2:	b2a4      	uxth	r4, r4
  4068e4:	4444      	add	r4, r8
  4068e6:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  4068e8:	f10d 0207 	add.w	r2, sp, #7
  4068ec:	4621      	mov	r1, r4
  4068ee:	4628      	mov	r0, r5
  4068f0:	4b2e      	ldr	r3, [pc, #184]	; (4069ac <_lv_obj_get_style_opa+0x104>)
  4068f2:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  4068f4:	2801      	cmp	r0, #1
  4068f6:	d03a      	beq.n	40696e <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4068f8:	f019 0f80 	tst.w	r9, #128	; 0x80
  4068fc:	d03f      	beq.n	40697e <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  4068fe:	2e00      	cmp	r6, #0
  406900:	d038      	beq.n	406974 <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406902:	2600      	movs	r6, #0
    while(parent) {
  406904:	2f00      	cmp	r7, #0
  406906:	d03a      	beq.n	40697e <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406908:	4631      	mov	r1, r6
  40690a:	4638      	mov	r0, r7
  40690c:	4b28      	ldr	r3, [pc, #160]	; (4069b0 <_lv_obj_get_style_opa+0x108>)
  40690e:	4798      	blx	r3
  406910:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406912:	7943      	ldrb	r3, [r0, #5]
  406914:	f013 0f08 	tst.w	r3, #8
  406918:	d1de      	bne.n	4068d8 <_lv_obj_get_style_opa+0x30>
  40691a:	7902      	ldrb	r2, [r0, #4]
  40691c:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406920:	d0da      	beq.n	4068d8 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406922:	f013 0f04 	tst.w	r3, #4
  406926:	d0c9      	beq.n	4068bc <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406928:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  40692c:	f248 020c 	movw	r2, #32780	; 0x800c
  406930:	4293      	cmp	r3, r2
  406932:	d0ca      	beq.n	4068ca <_lv_obj_get_style_opa+0x22>
  406934:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406938:	4293      	cmp	r3, r2
  40693a:	d00c      	beq.n	406956 <_lv_obj_get_style_opa+0xae>
  40693c:	2b2c      	cmp	r3, #44	; 0x2c
  40693e:	d001      	beq.n	406944 <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406940:	2300      	movs	r3, #0
  406942:	e7c7      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406944:	79ab      	ldrb	r3, [r5, #6]
  406946:	f013 0f10 	tst.w	r3, #16
  40694a:	d127      	bne.n	40699c <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  40694c:	f013 0f08 	tst.w	r3, #8
  406950:	d109      	bne.n	406966 <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406952:	2300      	movs	r3, #0
  406954:	e7be      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406956:	79eb      	ldrb	r3, [r5, #7]
  406958:	f013 0f10 	tst.w	r3, #16
  40695c:	d105      	bne.n	40696a <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  40695e:	2300      	movs	r3, #0
  406960:	e7b8      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406962:	2301      	movs	r3, #1
  406964:	e7b6      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406966:	2301      	movs	r3, #1
  406968:	e7b4      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  40696a:	2301      	movs	r3, #1
  40696c:	e7b2      	b.n	4068d4 <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  40696e:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406972:	e014      	b.n	40699e <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406974:	4638      	mov	r0, r7
  406976:	4b0f      	ldr	r3, [pc, #60]	; (4069b4 <_lv_obj_get_style_opa+0x10c>)
  406978:	4798      	blx	r3
  40697a:	4607      	mov	r7, r0
  40697c:	e7c2      	b.n	406904 <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  40697e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406982:	b2a4      	uxth	r4, r4
    switch(prop) {
  406984:	2c6d      	cmp	r4, #109	; 0x6d
  406986:	d007      	beq.n	406998 <_lv_obj_get_style_opa+0xf0>
  406988:	f248 03ad 	movw	r3, #32941	; 0x80ad
  40698c:	429c      	cmp	r4, r3
  40698e:	d003      	beq.n	406998 <_lv_obj_get_style_opa+0xf0>
  406990:	2c2c      	cmp	r4, #44	; 0x2c
  406992:	d001      	beq.n	406998 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406994:	20ff      	movs	r0, #255	; 0xff
  406996:	e002      	b.n	40699e <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406998:	2000      	movs	r0, #0
  40699a:	e000      	b.n	40699e <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  40699c:	20ff      	movs	r0, #255	; 0xff
}
  40699e:	b003      	add	sp, #12
  4069a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4069a4:	004069b9 	.word	0x004069b9
  4069a8:	004067d1 	.word	0x004067d1
  4069ac:	0040a8b9 	.word	0x0040a8b9
  4069b0:	0040567d 	.word	0x0040567d
  4069b4:	00405449 	.word	0x00405449

004069b8 <update_style_cache>:
{
  4069b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4069bc:	4605      	mov	r5, r0
  4069be:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  4069c0:	4610      	mov	r0, r2
  4069c2:	4baf      	ldr	r3, [pc, #700]	; (406c80 <update_style_cache+0x2c8>)
  4069c4:	4798      	blx	r3
  4069c6:	b908      	cbnz	r0, 4069cc <update_style_cache+0x14>
  4069c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4069cc:	4631      	mov	r1, r6
  4069ce:	4628      	mov	r0, r5
  4069d0:	4bac      	ldr	r3, [pc, #688]	; (406c84 <update_style_cache+0x2cc>)
  4069d2:	4798      	blx	r3
  4069d4:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  4069d6:	7943      	ldrb	r3, [r0, #5]
  4069d8:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  4069dc:	f043 0308 	orr.w	r3, r3, #8
  4069e0:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4069e2:	f248 020c 	movw	r2, #32780	; 0x800c
  4069e6:	4631      	mov	r1, r6
  4069e8:	4628      	mov	r0, r5
  4069ea:	4ba7      	ldr	r3, [pc, #668]	; (406c88 <update_style_cache+0x2d0>)
  4069ec:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  4069ee:	28ff      	cmp	r0, #255	; 0xff
  4069f0:	bf14      	ite	ne
  4069f2:	2000      	movne	r0, #0
  4069f4:	2001      	moveq	r0, #1
  4069f6:	7963      	ldrb	r3, [r4, #5]
  4069f8:	f360 1345 	bfi	r3, r0, #5, #1
  4069fc:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  4069fe:	f248 0282 	movw	r2, #32898	; 0x8082
  406a02:	4631      	mov	r1, r6
  406a04:	4628      	mov	r0, r5
  406a06:	4fa1      	ldr	r7, [pc, #644]	; (406c8c <update_style_cache+0x2d4>)
  406a08:	47b8      	blx	r7
  406a0a:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406a0c:	fab0 f080 	clz	r0, r0
  406a10:	0940      	lsrs	r0, r0, #5
  406a12:	79e3      	ldrb	r3, [r4, #7]
  406a14:	f360 1386 	bfi	r3, r0, #6, #1
  406a18:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406a1a:	f248 028e 	movw	r2, #32910	; 0x808e
  406a1e:	4631      	mov	r1, r6
  406a20:	4628      	mov	r0, r5
  406a22:	4b9b      	ldr	r3, [pc, #620]	; (406c90 <update_style_cache+0x2d8>)
  406a24:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  406a26:	4b9b      	ldr	r3, [pc, #620]	; (406c94 <update_style_cache+0x2dc>)
  406a28:	4283      	cmp	r3, r0
  406a2a:	bf14      	ite	ne
  406a2c:	2000      	movne	r0, #0
  406a2e:	2001      	moveq	r0, #1
  406a30:	79e3      	ldrb	r3, [r4, #7]
  406a32:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  406a36:	b2db      	uxtb	r3, r3
  406a38:	f043 0320 	orr.w	r3, r3, #32
  406a3c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406a3e:	f248 0280 	movw	r2, #32896	; 0x8080
  406a42:	4631      	mov	r1, r6
  406a44:	4628      	mov	r0, r5
  406a46:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406a48:	2800      	cmp	r0, #0
  406a4a:	f000 80cf 	beq.w	406bec <update_style_cache+0x234>
        list->text_space_zero = 0;
  406a4e:	79e3      	ldrb	r3, [r4, #7]
  406a50:	f36f 1345 	bfc	r3, #5, #1
  406a54:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  406a56:	222c      	movs	r2, #44	; 0x2c
  406a58:	4631      	mov	r1, r6
  406a5a:	4628      	mov	r0, r5
  406a5c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 406c88 <update_style_cache+0x2d0>
  406a60:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  406a62:	fab0 f280 	clz	r2, r0
  406a66:	0952      	lsrs	r2, r2, #5
  406a68:	79a3      	ldrb	r3, [r4, #6]
  406a6a:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  406a6e:	28ff      	cmp	r0, #255	; 0xff
  406a70:	bf14      	ite	ne
  406a72:	2000      	movne	r0, #0
  406a74:	2001      	moveq	r0, #1
  406a76:	f360 1304 	bfi	r3, r0, #4, #1
  406a7a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  406a7c:	2230      	movs	r2, #48	; 0x30
  406a7e:	4631      	mov	r1, r6
  406a80:	4628      	mov	r0, r5
  406a82:	4f82      	ldr	r7, [pc, #520]	; (406c8c <update_style_cache+0x2d4>)
  406a84:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  406a86:	fab0 f080 	clz	r0, r0
  406a8a:	0940      	lsrs	r0, r0, #5
  406a8c:	79a3      	ldrb	r3, [r4, #6]
  406a8e:	f360 1345 	bfi	r3, r0, #5, #1
  406a92:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  406a94:	2231      	movs	r2, #49	; 0x31
  406a96:	4631      	mov	r1, r6
  406a98:	4628      	mov	r0, r5
  406a9a:	47b8      	blx	r7
  406a9c:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  406a9e:	280f      	cmp	r0, #15
  406aa0:	bf14      	ite	ne
  406aa2:	2000      	movne	r0, #0
  406aa4:	2001      	moveq	r0, #1
  406aa6:	79a3      	ldrb	r3, [r4, #6]
  406aa8:	f360 1386 	bfi	r3, r0, #6, #1
  406aac:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  406aae:	2233      	movs	r2, #51	; 0x33
  406ab0:	4631      	mov	r1, r6
  406ab2:	4628      	mov	r0, r5
  406ab4:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  406ab6:	fab0 f080 	clz	r0, r0
  406aba:	0940      	lsrs	r0, r0, #5
  406abc:	79a3      	ldrb	r3, [r4, #6]
  406abe:	f360 13c7 	bfi	r3, r0, #7, #1
  406ac2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  406ac4:	2202      	movs	r2, #2
  406ac6:	4631      	mov	r1, r6
  406ac8:	4628      	mov	r0, r5
  406aca:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  406acc:	fab0 f080 	clz	r0, r0
  406ad0:	0940      	lsrs	r0, r0, #5
  406ad2:	7963      	ldrb	r3, [r4, #5]
  406ad4:	f360 1386 	bfi	r3, r0, #6, #1
  406ad8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406ada:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406ade:	4631      	mov	r1, r6
  406ae0:	4628      	mov	r0, r5
  406ae2:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406ae4:	fab0 f080 	clz	r0, r0
  406ae8:	0940      	lsrs	r0, r0, #5
  406aea:	79e3      	ldrb	r3, [r4, #7]
  406aec:	f360 1304 	bfi	r3, r0, #4, #1
  406af0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  406af2:	2240      	movs	r2, #64	; 0x40
  406af4:	4631      	mov	r1, r6
  406af6:	4628      	mov	r0, r5
  406af8:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  406afa:	fab0 f080 	clz	r0, r0
  406afe:	0940      	lsrs	r0, r0, #5
  406b00:	79e3      	ldrb	r3, [r4, #7]
  406b02:	f360 0300 	bfi	r3, r0, #0, #1
  406b06:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  406b08:	226e      	movs	r2, #110	; 0x6e
  406b0a:	4631      	mov	r1, r6
  406b0c:	4628      	mov	r0, r5
  406b0e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 406c90 <update_style_cache+0x2d8>
  406b12:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  406b14:	fab0 f080 	clz	r0, r0
  406b18:	0940      	lsrs	r0, r0, #5
  406b1a:	79e3      	ldrb	r3, [r4, #7]
  406b1c:	f360 0341 	bfi	r3, r0, #1, #1
  406b20:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  406b22:	2201      	movs	r2, #1
  406b24:	4631      	mov	r1, r6
  406b26:	4628      	mov	r0, r5
  406b28:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  406b2a:	fab0 f080 	clz	r0, r0
  406b2e:	0940      	lsrs	r0, r0, #5
  406b30:	7963      	ldrb	r3, [r4, #5]
  406b32:	f360 1304 	bfi	r3, r0, #4, #1
  406b36:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  406b38:	2250      	movs	r2, #80	; 0x50
  406b3a:	4631      	mov	r1, r6
  406b3c:	4628      	mov	r0, r5
  406b3e:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  406b40:	fab0 f080 	clz	r0, r0
  406b44:	0940      	lsrs	r0, r0, #5
  406b46:	79e3      	ldrb	r3, [r4, #7]
  406b48:	f360 0382 	bfi	r3, r0, #2, #1
  406b4c:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  406b4e:	227f      	movs	r2, #127	; 0x7f
  406b50:	4631      	mov	r1, r6
  406b52:	4628      	mov	r0, r5
  406b54:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  406b56:	fab0 f080 	clz	r0, r0
  406b5a:	0940      	lsrs	r0, r0, #5
  406b5c:	79e3      	ldrb	r3, [r4, #7]
  406b5e:	f360 03c3 	bfi	r3, r0, #3, #1
  406b62:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  406b64:	7963      	ldrb	r3, [r4, #5]
  406b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406b6a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  406b6c:	2206      	movs	r2, #6
  406b6e:	4631      	mov	r1, r6
  406b70:	4628      	mov	r0, r5
  406b72:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406b74:	2800      	cmp	r0, #0
  406b76:	d042      	beq.n	406bfe <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  406b78:	7963      	ldrb	r3, [r4, #5]
  406b7a:	f36f 13c7 	bfc	r3, #7, #1
  406b7e:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  406b80:	79a3      	ldrb	r3, [r4, #6]
  406b82:	f043 0301 	orr.w	r3, r3, #1
  406b86:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  406b88:	2210      	movs	r2, #16
  406b8a:	4631      	mov	r1, r6
  406b8c:	4628      	mov	r0, r5
  406b8e:	4b3f      	ldr	r3, [pc, #252]	; (406c8c <update_style_cache+0x2d4>)
  406b90:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406b92:	2800      	cmp	r0, #0
  406b94:	d047      	beq.n	406c26 <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  406b96:	79a3      	ldrb	r3, [r4, #6]
  406b98:	f36f 0300 	bfc	r3, #0, #1
  406b9c:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  406b9e:	79a3      	ldrb	r3, [r4, #6]
  406ba0:	f043 0302 	orr.w	r3, r3, #2
  406ba4:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  406ba6:	2215      	movs	r2, #21
  406ba8:	4631      	mov	r1, r6
  406baa:	4628      	mov	r0, r5
  406bac:	4b37      	ldr	r3, [pc, #220]	; (406c8c <update_style_cache+0x2d4>)
  406bae:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406bb0:	2800      	cmp	r0, #0
  406bb2:	d04e      	beq.n	406c52 <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  406bb4:	79a3      	ldrb	r3, [r4, #6]
  406bb6:	f36f 0341 	bfc	r3, #1, #1
  406bba:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  406bbc:	79a3      	ldrb	r3, [r4, #6]
  406bbe:	f043 0304 	orr.w	r3, r3, #4
  406bc2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  406bc4:	2220      	movs	r2, #32
  406bc6:	4631      	mov	r1, r6
  406bc8:	4628      	mov	r0, r5
  406bca:	4b30      	ldr	r3, [pc, #192]	; (406c8c <update_style_cache+0x2d4>)
  406bcc:	4798      	blx	r3
  406bce:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406bd0:	2800      	cmp	r0, #0
  406bd2:	d061      	beq.n	406c98 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  406bd4:	79a3      	ldrb	r3, [r4, #6]
  406bd6:	f36f 0382 	bfc	r3, #2, #1
  406bda:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  406bdc:	7963      	ldrb	r3, [r4, #5]
  406bde:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  406be2:	b2db      	uxtb	r3, r3
  406be4:	f043 0304 	orr.w	r3, r3, #4
  406be8:	7163      	strb	r3, [r4, #5]
  406bea:	e6ed      	b.n	4069c8 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  406bec:	f248 0281 	movw	r2, #32897	; 0x8081
  406bf0:	4631      	mov	r1, r6
  406bf2:	4628      	mov	r0, r5
  406bf4:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406bf6:	2800      	cmp	r0, #0
  406bf8:	f43f af2d 	beq.w	406a56 <update_style_cache+0x9e>
  406bfc:	e727      	b.n	406a4e <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  406bfe:	2204      	movs	r2, #4
  406c00:	4631      	mov	r1, r6
  406c02:	4628      	mov	r0, r5
  406c04:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406c06:	2800      	cmp	r0, #0
  406c08:	d1b6      	bne.n	406b78 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  406c0a:	2205      	movs	r2, #5
  406c0c:	4631      	mov	r1, r6
  406c0e:	4628      	mov	r0, r5
  406c10:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  406c12:	2800      	cmp	r0, #0
  406c14:	d1b0      	bne.n	406b78 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  406c16:	2207      	movs	r2, #7
  406c18:	4631      	mov	r1, r6
  406c1a:	4628      	mov	r0, r5
  406c1c:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  406c1e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  406c22:	d1a9      	bne.n	406b78 <update_style_cache+0x1c0>
  406c24:	e7ac      	b.n	406b80 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  406c26:	2211      	movs	r2, #17
  406c28:	4631      	mov	r1, r6
  406c2a:	4628      	mov	r0, r5
  406c2c:	4b17      	ldr	r3, [pc, #92]	; (406c8c <update_style_cache+0x2d4>)
  406c2e:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406c30:	2800      	cmp	r0, #0
  406c32:	d1b0      	bne.n	406b96 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  406c34:	2212      	movs	r2, #18
  406c36:	4631      	mov	r1, r6
  406c38:	4628      	mov	r0, r5
  406c3a:	4b14      	ldr	r3, [pc, #80]	; (406c8c <update_style_cache+0x2d4>)
  406c3c:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  406c3e:	2800      	cmp	r0, #0
  406c40:	d1a9      	bne.n	406b96 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  406c42:	2213      	movs	r2, #19
  406c44:	4631      	mov	r1, r6
  406c46:	4628      	mov	r0, r5
  406c48:	4b10      	ldr	r3, [pc, #64]	; (406c8c <update_style_cache+0x2d4>)
  406c4a:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  406c4c:	2800      	cmp	r0, #0
  406c4e:	d0a6      	beq.n	406b9e <update_style_cache+0x1e6>
  406c50:	e7a1      	b.n	406b96 <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  406c52:	2216      	movs	r2, #22
  406c54:	4631      	mov	r1, r6
  406c56:	4628      	mov	r0, r5
  406c58:	4b0c      	ldr	r3, [pc, #48]	; (406c8c <update_style_cache+0x2d4>)
  406c5a:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406c5c:	2800      	cmp	r0, #0
  406c5e:	d1a9      	bne.n	406bb4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  406c60:	2217      	movs	r2, #23
  406c62:	4631      	mov	r1, r6
  406c64:	4628      	mov	r0, r5
  406c66:	4b09      	ldr	r3, [pc, #36]	; (406c8c <update_style_cache+0x2d4>)
  406c68:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  406c6a:	2800      	cmp	r0, #0
  406c6c:	d1a2      	bne.n	406bb4 <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  406c6e:	2218      	movs	r2, #24
  406c70:	4631      	mov	r1, r6
  406c72:	4628      	mov	r0, r5
  406c74:	4b05      	ldr	r3, [pc, #20]	; (406c8c <update_style_cache+0x2d4>)
  406c76:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  406c78:	2800      	cmp	r0, #0
  406c7a:	d09f      	beq.n	406bbc <update_style_cache+0x204>
  406c7c:	e79a      	b.n	406bb4 <update_style_cache+0x1fc>
  406c7e:	bf00      	nop
  406c80:	00404edd 	.word	0x00404edd
  406c84:	0040567d 	.word	0x0040567d
  406c88:	004068a9 	.word	0x004068a9
  406c8c:	00406e35 	.word	0x00406e35
  406c90:	00406d2d 	.word	0x00406d2d
  406c94:	2040002c 	.word	0x2040002c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  406c98:	2232      	movs	r2, #50	; 0x32
  406c9a:	4631      	mov	r1, r6
  406c9c:	4628      	mov	r0, r5
  406c9e:	4b22      	ldr	r3, [pc, #136]	; (406d28 <update_style_cache+0x370>)
  406ca0:	4798      	blx	r3
  406ca2:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406ca4:	2800      	cmp	r0, #0
  406ca6:	d195      	bne.n	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  406ca8:	2260      	movs	r2, #96	; 0x60
  406caa:	4631      	mov	r1, r6
  406cac:	4628      	mov	r0, r5
  406cae:	4b1e      	ldr	r3, [pc, #120]	; (406d28 <update_style_cache+0x370>)
  406cb0:	4798      	blx	r3
  406cb2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406cb4:	2800      	cmp	r0, #0
  406cb6:	d18d      	bne.n	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  406cb8:	2242      	movs	r2, #66	; 0x42
  406cba:	4631      	mov	r1, r6
  406cbc:	4628      	mov	r0, r5
  406cbe:	4b1a      	ldr	r3, [pc, #104]	; (406d28 <update_style_cache+0x370>)
  406cc0:	4798      	blx	r3
  406cc2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406cc4:	2800      	cmp	r0, #0
  406cc6:	d185      	bne.n	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  406cc8:	2272      	movs	r2, #114	; 0x72
  406cca:	4631      	mov	r1, r6
  406ccc:	4628      	mov	r0, r5
  406cce:	4b16      	ldr	r3, [pc, #88]	; (406d28 <update_style_cache+0x370>)
  406cd0:	4798      	blx	r3
  406cd2:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406cd4:	2800      	cmp	r0, #0
  406cd6:	f47f af7d 	bne.w	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  406cda:	f248 0283 	movw	r2, #32899	; 0x8083
  406cde:	4631      	mov	r1, r6
  406ce0:	4628      	mov	r0, r5
  406ce2:	4b11      	ldr	r3, [pc, #68]	; (406d28 <update_style_cache+0x370>)
  406ce4:	4798      	blx	r3
  406ce6:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406ce8:	2800      	cmp	r0, #0
  406cea:	f47f af73 	bne.w	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  406cee:	2291      	movs	r2, #145	; 0x91
  406cf0:	4631      	mov	r1, r6
  406cf2:	4628      	mov	r0, r5
  406cf4:	4b0c      	ldr	r3, [pc, #48]	; (406d28 <update_style_cache+0x370>)
  406cf6:	4798      	blx	r3
  406cf8:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406cfa:	2800      	cmp	r0, #0
  406cfc:	f47f af6a 	bne.w	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  406d00:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406d04:	4631      	mov	r1, r6
  406d06:	4628      	mov	r0, r5
  406d08:	4b07      	ldr	r3, [pc, #28]	; (406d28 <update_style_cache+0x370>)
  406d0a:	4798      	blx	r3
  406d0c:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406d0e:	2800      	cmp	r0, #0
  406d10:	f47f af60 	bne.w	406bd4 <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  406d14:	2254      	movs	r2, #84	; 0x54
  406d16:	4631      	mov	r1, r6
  406d18:	4628      	mov	r0, r5
  406d1a:	4b03      	ldr	r3, [pc, #12]	; (406d28 <update_style_cache+0x370>)
  406d1c:	4798      	blx	r3
  406d1e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406d20:	2800      	cmp	r0, #0
  406d22:	f43f af5b 	beq.w	406bdc <update_style_cache+0x224>
  406d26:	e755      	b.n	406bd4 <update_style_cache+0x21c>
  406d28:	00406e35 	.word	0x00406e35

00406d2c <_lv_obj_get_style_ptr>:
{
  406d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406d30:	b083      	sub	sp, #12
  406d32:	4607      	mov	r7, r0
  406d34:	460e      	mov	r6, r1
  406d36:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406d38:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406d3c:	4614      	mov	r4, r2
  406d3e:	e02d      	b.n	406d9c <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406d40:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406d44:	4631      	mov	r1, r6
  406d46:	4638      	mov	r0, r7
  406d48:	4b33      	ldr	r3, [pc, #204]	; (406e18 <_lv_obj_get_style_ptr+0xec>)
  406d4a:	4798      	blx	r3
  406d4c:	e037      	b.n	406dbe <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  406d4e:	79eb      	ldrb	r3, [r5, #7]
  406d50:	f013 0f08 	tst.w	r3, #8
  406d54:	d13f      	bne.n	406dd6 <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  406d56:	2300      	movs	r3, #0
  406d58:	e00a      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406d5a:	79eb      	ldrb	r3, [r5, #7]
  406d5c:	f013 0f02 	tst.w	r3, #2
  406d60:	d13b      	bne.n	406dda <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  406d62:	2300      	movs	r3, #0
  406d64:	e004      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406d66:	f995 3007 	ldrsb.w	r3, [r5, #7]
  406d6a:	2b00      	cmp	r3, #0
  406d6c:	db37      	blt.n	406dde <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  406d6e:	2300      	movs	r3, #0
            if(def) {
  406d70:	2b00      	cmp	r3, #0
  406d72:	d13f      	bne.n	406df4 <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  406d74:	4631      	mov	r1, r6
  406d76:	4638      	mov	r0, r7
  406d78:	4b28      	ldr	r3, [pc, #160]	; (406e1c <_lv_obj_get_style_ptr+0xf0>)
  406d7a:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406d7c:	0204      	lsls	r4, r0, #8
  406d7e:	b2a4      	uxth	r4, r4
  406d80:	4444      	add	r4, r8
  406d82:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  406d84:	aa01      	add	r2, sp, #4
  406d86:	4621      	mov	r1, r4
  406d88:	4628      	mov	r0, r5
  406d8a:	4b25      	ldr	r3, [pc, #148]	; (406e20 <_lv_obj_get_style_ptr+0xf4>)
  406d8c:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  406d8e:	2801      	cmp	r0, #1
  406d90:	d027      	beq.n	406de2 <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406d92:	f019 0f80 	tst.w	r9, #128	; 0x80
  406d96:	d02d      	beq.n	406df4 <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  406d98:	b33e      	cbz	r6, 406dea <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  406d9a:	2600      	movs	r6, #0
    while(parent) {
  406d9c:	b357      	cbz	r7, 406df4 <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406d9e:	4631      	mov	r1, r6
  406da0:	4638      	mov	r0, r7
  406da2:	4b20      	ldr	r3, [pc, #128]	; (406e24 <_lv_obj_get_style_ptr+0xf8>)
  406da4:	4798      	blx	r3
  406da6:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406da8:	7943      	ldrb	r3, [r0, #5]
  406daa:	f013 0f08 	tst.w	r3, #8
  406dae:	d1e1      	bne.n	406d74 <_lv_obj_get_style_ptr+0x48>
  406db0:	7902      	ldrb	r2, [r0, #4]
  406db2:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406db6:	d0dd      	beq.n	406d74 <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406db8:	f013 0f04 	tst.w	r3, #4
  406dbc:	d0c0      	beq.n	406d40 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406dbe:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406dc2:	2b7f      	cmp	r3, #127	; 0x7f
  406dc4:	d0c3      	beq.n	406d4e <_lv_obj_get_style_ptr+0x22>
  406dc6:	f248 028e 	movw	r2, #32910	; 0x808e
  406dca:	4293      	cmp	r3, r2
  406dcc:	d0cb      	beq.n	406d66 <_lv_obj_get_style_ptr+0x3a>
  406dce:	2b6e      	cmp	r3, #110	; 0x6e
  406dd0:	d0c3      	beq.n	406d5a <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  406dd2:	2300      	movs	r3, #0
  406dd4:	e7cc      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  406dd6:	2301      	movs	r3, #1
  406dd8:	e7ca      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406dda:	2301      	movs	r3, #1
  406ddc:	e7c8      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406dde:	2301      	movs	r3, #1
  406de0:	e7c6      	b.n	406d70 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  406de2:	9801      	ldr	r0, [sp, #4]
}
  406de4:	b003      	add	sp, #12
  406de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  406dea:	4638      	mov	r0, r7
  406dec:	4b0e      	ldr	r3, [pc, #56]	; (406e28 <_lv_obj_get_style_ptr+0xfc>)
  406dee:	4798      	blx	r3
  406df0:	4607      	mov	r7, r0
  406df2:	e7d3      	b.n	406d9c <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406df4:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406df8:	b2a4      	uxth	r4, r4
    switch(prop) {
  406dfa:	2cbe      	cmp	r4, #190	; 0xbe
  406dfc:	d007      	beq.n	406e0e <_lv_obj_get_style_ptr+0xe2>
  406dfe:	f248 038e 	movw	r3, #32910	; 0x808e
  406e02:	429c      	cmp	r4, r3
  406e04:	d005      	beq.n	406e12 <_lv_obj_get_style_ptr+0xe6>
  406e06:	2c7e      	cmp	r4, #126	; 0x7e
  406e08:	d003      	beq.n	406e12 <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  406e0a:	2000      	movs	r0, #0
  406e0c:	e7ea      	b.n	406de4 <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  406e0e:	4807      	ldr	r0, [pc, #28]	; (406e2c <_lv_obj_get_style_ptr+0x100>)
  406e10:	e7e8      	b.n	406de4 <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  406e12:	4b07      	ldr	r3, [pc, #28]	; (406e30 <_lv_obj_get_style_ptr+0x104>)
  406e14:	4798      	blx	r3
  406e16:	e7e5      	b.n	406de4 <_lv_obj_get_style_ptr+0xb8>
  406e18:	004069b9 	.word	0x004069b9
  406e1c:	004067d1 	.word	0x004067d1
  406e20:	0040a98d 	.word	0x0040a98d
  406e24:	0040567d 	.word	0x0040567d
  406e28:	00405449 	.word	0x00405449
  406e2c:	00426ba4 	.word	0x00426ba4
  406e30:	00416ee1 	.word	0x00416ee1

00406e34 <_lv_obj_get_style_int>:
{
  406e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e38:	b083      	sub	sp, #12
  406e3a:	4607      	mov	r7, r0
  406e3c:	460e      	mov	r6, r1
  406e3e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406e40:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406e44:	4614      	mov	r4, r2
  406e46:	e078      	b.n	406f3a <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406e48:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406e4c:	4631      	mov	r1, r6
  406e4e:	4638      	mov	r0, r7
  406e50:	4b82      	ldr	r3, [pc, #520]	; (40705c <_lv_obj_get_style_int+0x228>)
  406e52:	4798      	blx	r3
  406e54:	e084      	b.n	406f60 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406e56:	3b04      	subs	r3, #4
  406e58:	2b03      	cmp	r3, #3
  406e5a:	d854      	bhi.n	406f06 <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  406e5c:	f995 3005 	ldrsb.w	r3, [r5, #5]
  406e60:	2b00      	cmp	r3, #0
  406e62:	f2c0 80c0 	blt.w	406fe6 <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  406e66:	2300      	movs	r3, #0
  406e68:	e04e      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406e6a:	2b20      	cmp	r3, #32
  406e6c:	d029      	beq.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406e6e:	dd0c      	ble.n	406e8a <_lv_obj_get_style_int+0x56>
  406e70:	2b31      	cmp	r3, #49	; 0x31
  406e72:	f000 809c 	beq.w	406fae <_lv_obj_get_style_int+0x17a>
  406e76:	dc24      	bgt.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406e78:	2b30      	cmp	r3, #48	; 0x30
  406e7a:	d144      	bne.n	406f06 <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  406e7c:	79ab      	ldrb	r3, [r5, #6]
  406e7e:	f013 0f20 	tst.w	r3, #32
  406e82:	f040 80b2 	bne.w	406fea <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  406e86:	2300      	movs	r3, #0
  406e88:	e03e      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406e8a:	3b15      	subs	r3, #21
  406e8c:	2b03      	cmp	r3, #3
  406e8e:	d83a      	bhi.n	406f06 <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  406e90:	79ab      	ldrb	r3, [r5, #6]
  406e92:	f013 0f02 	tst.w	r3, #2
  406e96:	f040 80b6 	bne.w	407006 <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  406e9a:	2300      	movs	r3, #0
  406e9c:	e034      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406e9e:	2b72      	cmp	r3, #114	; 0x72
  406ea0:	d00f      	beq.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406ea2:	dc1a      	bgt.n	406eda <_lv_obj_get_style_int+0xa6>
  406ea4:	2b50      	cmp	r3, #80	; 0x50
  406ea6:	f000 808e 	beq.w	406fc6 <_lv_obj_get_style_int+0x192>
  406eaa:	dc11      	bgt.n	406ed0 <_lv_obj_get_style_int+0x9c>
  406eac:	2b40      	cmp	r3, #64	; 0x40
  406eae:	d106      	bne.n	406ebe <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  406eb0:	79eb      	ldrb	r3, [r5, #7]
  406eb2:	f013 0f01 	tst.w	r3, #1
  406eb6:	f040 809e 	bne.w	406ff6 <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  406eba:	2300      	movs	r3, #0
  406ebc:	e024      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406ebe:	2b42      	cmp	r3, #66	; 0x42
  406ec0:	d121      	bne.n	406f06 <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  406ec2:	79ab      	ldrb	r3, [r5, #6]
  406ec4:	f013 0f04 	tst.w	r3, #4
  406ec8:	f040 809f 	bne.w	40700a <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  406ecc:	2300      	movs	r3, #0
  406ece:	e01b      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406ed0:	2b54      	cmp	r3, #84	; 0x54
  406ed2:	d0f6      	beq.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406ed4:	2b60      	cmp	r3, #96	; 0x60
  406ed6:	d116      	bne.n	406f06 <_lv_obj_get_style_int+0xd2>
  406ed8:	e7f3      	b.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406eda:	f248 0281 	movw	r2, #32897	; 0x8081
  406ede:	4293      	cmp	r3, r2
  406ee0:	dd0b      	ble.n	406efa <_lv_obj_get_style_int+0xc6>
  406ee2:	f248 0283 	movw	r2, #32899	; 0x8083
  406ee6:	4293      	cmp	r3, r2
  406ee8:	d0eb      	beq.n	406ec2 <_lv_obj_get_style_int+0x8e>
  406eea:	da4f      	bge.n	406f8c <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  406eec:	79eb      	ldrb	r3, [r5, #7]
  406eee:	f013 0f40 	tst.w	r3, #64	; 0x40
  406ef2:	f040 808c 	bne.w	40700e <_lv_obj_get_style_int+0x1da>
            bool def = false;
  406ef6:	2300      	movs	r3, #0
  406ef8:	e006      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406efa:	f248 0280 	movw	r2, #32896	; 0x8080
  406efe:	4293      	cmp	r3, r2
  406f00:	da4f      	bge.n	406fa2 <_lv_obj_get_style_int+0x16e>
  406f02:	2b91      	cmp	r3, #145	; 0x91
  406f04:	d0dd      	beq.n	406ec2 <_lv_obj_get_style_int+0x8e>
            bool def = false;
  406f06:	2300      	movs	r3, #0
            if(def) {
  406f08:	2b00      	cmp	r3, #0
  406f0a:	f040 808c 	bne.w	407026 <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  406f0e:	4631      	mov	r1, r6
  406f10:	4638      	mov	r0, r7
  406f12:	4b53      	ldr	r3, [pc, #332]	; (407060 <_lv_obj_get_style_int+0x22c>)
  406f14:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406f16:	0204      	lsls	r4, r0, #8
  406f18:	b2a4      	uxth	r4, r4
  406f1a:	4444      	add	r4, r8
  406f1c:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  406f1e:	f10d 0206 	add.w	r2, sp, #6
  406f22:	4621      	mov	r1, r4
  406f24:	4628      	mov	r0, r5
  406f26:	4b4f      	ldr	r3, [pc, #316]	; (407064 <_lv_obj_get_style_int+0x230>)
  406f28:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406f2a:	2801      	cmp	r0, #1
  406f2c:	d071      	beq.n	407012 <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406f2e:	f019 0f80 	tst.w	r9, #128	; 0x80
  406f32:	d078      	beq.n	407026 <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  406f34:	2e00      	cmp	r6, #0
  406f36:	d071      	beq.n	40701c <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  406f38:	2600      	movs	r6, #0
    while(parent) {
  406f3a:	2f00      	cmp	r7, #0
  406f3c:	d073      	beq.n	407026 <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406f3e:	4631      	mov	r1, r6
  406f40:	4638      	mov	r0, r7
  406f42:	4b49      	ldr	r3, [pc, #292]	; (407068 <_lv_obj_get_style_int+0x234>)
  406f44:	4798      	blx	r3
  406f46:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406f48:	7943      	ldrb	r3, [r0, #5]
  406f4a:	f013 0f08 	tst.w	r3, #8
  406f4e:	d1de      	bne.n	406f0e <_lv_obj_get_style_int+0xda>
  406f50:	7902      	ldrb	r2, [r0, #4]
  406f52:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406f56:	d0da      	beq.n	406f0e <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406f58:	f013 0f04 	tst.w	r3, #4
  406f5c:	f43f af74 	beq.w	406e48 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406f60:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406f64:	2b33      	cmp	r3, #51	; 0x33
  406f66:	d028      	beq.n	406fba <_lv_obj_get_style_int+0x186>
  406f68:	dc99      	bgt.n	406e9e <_lv_obj_get_style_int+0x6a>
  406f6a:	2b13      	cmp	r3, #19
  406f6c:	f73f af7d 	bgt.w	406e6a <_lv_obj_get_style_int+0x36>
  406f70:	2b10      	cmp	r3, #16
  406f72:	da2e      	bge.n	406fd2 <_lv_obj_get_style_int+0x19e>
  406f74:	2b02      	cmp	r3, #2
  406f76:	d00e      	beq.n	406f96 <_lv_obj_get_style_int+0x162>
  406f78:	f73f af6d 	bgt.w	406e56 <_lv_obj_get_style_int+0x22>
  406f7c:	2b01      	cmp	r3, #1
  406f7e:	d1c2      	bne.n	406f06 <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  406f80:	796b      	ldrb	r3, [r5, #5]
  406f82:	f013 0f10 	tst.w	r3, #16
  406f86:	d138      	bne.n	406ffa <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  406f88:	2300      	movs	r3, #0
  406f8a:	e7bd      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406f8c:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406f90:	4293      	cmp	r3, r2
  406f92:	d1b8      	bne.n	406f06 <_lv_obj_get_style_int+0xd2>
  406f94:	e795      	b.n	406ec2 <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  406f96:	796b      	ldrb	r3, [r5, #5]
  406f98:	f013 0f40 	tst.w	r3, #64	; 0x40
  406f9c:	d11f      	bne.n	406fde <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  406f9e:	2300      	movs	r3, #0
  406fa0:	e7b2      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  406fa2:	79eb      	ldrb	r3, [r5, #7]
  406fa4:	f013 0f20 	tst.w	r3, #32
  406fa8:	d11b      	bne.n	406fe2 <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  406faa:	2300      	movs	r3, #0
  406fac:	e7ac      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  406fae:	79ab      	ldrb	r3, [r5, #6]
  406fb0:	f013 0f40 	tst.w	r3, #64	; 0x40
  406fb4:	d11b      	bne.n	406fee <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  406fb6:	2300      	movs	r3, #0
  406fb8:	e7a6      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  406fba:	f995 3006 	ldrsb.w	r3, [r5, #6]
  406fbe:	2b00      	cmp	r3, #0
  406fc0:	db17      	blt.n	406ff2 <_lv_obj_get_style_int+0x1be>
            bool def = false;
  406fc2:	2300      	movs	r3, #0
  406fc4:	e7a0      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  406fc6:	79eb      	ldrb	r3, [r5, #7]
  406fc8:	f013 0f04 	tst.w	r3, #4
  406fcc:	d117      	bne.n	406ffe <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  406fce:	2300      	movs	r3, #0
  406fd0:	e79a      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  406fd2:	79ab      	ldrb	r3, [r5, #6]
  406fd4:	f013 0f01 	tst.w	r3, #1
  406fd8:	d113      	bne.n	407002 <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  406fda:	2300      	movs	r3, #0
  406fdc:	e794      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  406fde:	2301      	movs	r3, #1
  406fe0:	e792      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  406fe2:	2301      	movs	r3, #1
  406fe4:	e790      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  406fe6:	2301      	movs	r3, #1
  406fe8:	e78e      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  406fea:	2301      	movs	r3, #1
  406fec:	e78c      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  406fee:	2301      	movs	r3, #1
  406ff0:	e78a      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  406ff2:	2301      	movs	r3, #1
  406ff4:	e788      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  406ff6:	2301      	movs	r3, #1
  406ff8:	e786      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  406ffa:	2301      	movs	r3, #1
  406ffc:	e784      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  406ffe:	2301      	movs	r3, #1
  407000:	e782      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  407002:	2301      	movs	r3, #1
  407004:	e780      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  407006:	2301      	movs	r3, #1
  407008:	e77e      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  40700a:	2301      	movs	r3, #1
  40700c:	e77c      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  40700e:	2301      	movs	r3, #1
  407010:	e77a      	b.n	406f08 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  407012:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  407016:	b003      	add	sp, #12
  407018:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  40701c:	4638      	mov	r0, r7
  40701e:	4b13      	ldr	r3, [pc, #76]	; (40706c <_lv_obj_get_style_int+0x238>)
  407020:	4798      	blx	r3
  407022:	4607      	mov	r7, r0
  407024:	e789      	b.n	406f3a <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  407026:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  40702a:	b2a4      	uxth	r4, r4
    switch(prop) {
  40702c:	2c22      	cmp	r4, #34	; 0x22
  40702e:	d00f      	beq.n	407050 <_lv_obj_get_style_int+0x21c>
  407030:	d806      	bhi.n	407040 <_lv_obj_get_style_int+0x20c>
  407032:	2c03      	cmp	r4, #3
  407034:	d010      	beq.n	407058 <_lv_obj_get_style_int+0x224>
  407036:	2c07      	cmp	r4, #7
  407038:	d10c      	bne.n	407054 <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  40703a:	f44f 7080 	mov.w	r0, #256	; 0x100
  40703e:	e7ea      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  407040:	2c31      	cmp	r4, #49	; 0x31
  407042:	d003      	beq.n	40704c <_lv_obj_get_style_int+0x218>
  407044:	2cc0      	cmp	r4, #192	; 0xc0
  407046:	d105      	bne.n	407054 <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  407048:	2012      	movs	r0, #18
  40704a:	e7e4      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  40704c:	200f      	movs	r0, #15
  40704e:	e7e2      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
            return 255;
  407050:	20ff      	movs	r0, #255	; 0xff
  407052:	e7e0      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
    return 0;
  407054:	2000      	movs	r0, #0
  407056:	e7de      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  407058:	2007      	movs	r0, #7
  40705a:	e7dc      	b.n	407016 <_lv_obj_get_style_int+0x1e2>
  40705c:	004069b9 	.word	0x004069b9
  407060:	004067d1 	.word	0x004067d1
  407064:	0040a715 	.word	0x0040a715
  407068:	0040567d 	.word	0x0040567d
  40706c:	00405449 	.word	0x00405449

00407070 <update_style_cache_children>:
{
  407070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407074:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407076:	2500      	movs	r5, #0
  407078:	e009      	b.n	40708e <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  40707a:	79e3      	ldrb	r3, [r4, #7]
  40707c:	f36f 1345 	bfc	r3, #5, #1
  407080:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  407082:	7963      	ldrb	r3, [r4, #5]
  407084:	f368 03c3 	bfi	r3, r8, #3, #1
  407088:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  40708a:	3501      	adds	r5, #1
  40708c:	b2ed      	uxtb	r5, r5
  40708e:	2d40      	cmp	r5, #64	; 0x40
  407090:	d058      	beq.n	407144 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407092:	4629      	mov	r1, r5
  407094:	4630      	mov	r0, r6
  407096:	4b34      	ldr	r3, [pc, #208]	; (407168 <update_style_cache_children+0xf8>)
  407098:	4798      	blx	r3
        if(list == NULL) break;
  40709a:	4604      	mov	r4, r0
  40709c:	2800      	cmp	r0, #0
  40709e:	d051      	beq.n	407144 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  4070a0:	7943      	ldrb	r3, [r0, #5]
  4070a2:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  4070a6:	f043 0308 	orr.w	r3, r3, #8
  4070aa:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4070ac:	f248 020c 	movw	r2, #32780	; 0x800c
  4070b0:	4629      	mov	r1, r5
  4070b2:	4630      	mov	r0, r6
  4070b4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 40717c <update_style_cache_children+0x10c>
  4070b8:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  4070ba:	28ff      	cmp	r0, #255	; 0xff
  4070bc:	bf14      	ite	ne
  4070be:	2000      	movne	r0, #0
  4070c0:	2001      	moveq	r0, #1
  4070c2:	7963      	ldrb	r3, [r4, #5]
  4070c4:	f360 1345 	bfi	r3, r0, #5, #1
  4070c8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  4070ca:	f248 0282 	movw	r2, #32898	; 0x8082
  4070ce:	4629      	mov	r1, r5
  4070d0:	4630      	mov	r0, r6
  4070d2:	4f26      	ldr	r7, [pc, #152]	; (40716c <update_style_cache_children+0xfc>)
  4070d4:	47b8      	blx	r7
  4070d6:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  4070d8:	fab0 f080 	clz	r0, r0
  4070dc:	0940      	lsrs	r0, r0, #5
  4070de:	79e3      	ldrb	r3, [r4, #7]
  4070e0:	f360 1386 	bfi	r3, r0, #6, #1
  4070e4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4070e6:	f248 028e 	movw	r2, #32910	; 0x808e
  4070ea:	4629      	mov	r1, r5
  4070ec:	4630      	mov	r0, r6
  4070ee:	4b20      	ldr	r3, [pc, #128]	; (407170 <update_style_cache_children+0x100>)
  4070f0:	4798      	blx	r3
  4070f2:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  4070f4:	4b1f      	ldr	r3, [pc, #124]	; (407174 <update_style_cache_children+0x104>)
  4070f6:	4798      	blx	r3
  4070f8:	4582      	cmp	sl, r0
  4070fa:	bf14      	ite	ne
  4070fc:	2000      	movne	r0, #0
  4070fe:	2001      	moveq	r0, #1
  407100:	79e3      	ldrb	r3, [r4, #7]
  407102:	f360 13c7 	bfi	r3, r0, #7, #1
  407106:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  407108:	f248 02ad 	movw	r2, #32941	; 0x80ad
  40710c:	4629      	mov	r1, r5
  40710e:	4630      	mov	r0, r6
  407110:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  407112:	fab0 f080 	clz	r0, r0
  407116:	0940      	lsrs	r0, r0, #5
  407118:	79e3      	ldrb	r3, [r4, #7]
  40711a:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  40711e:	b2db      	uxtb	r3, r3
  407120:	f043 0320 	orr.w	r3, r3, #32
  407124:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  407126:	f248 0280 	movw	r2, #32896	; 0x8080
  40712a:	4629      	mov	r1, r5
  40712c:	4630      	mov	r0, r6
  40712e:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  407130:	2800      	cmp	r0, #0
  407132:	d1a2      	bne.n	40707a <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  407134:	f248 0281 	movw	r2, #32897	; 0x8081
  407138:	4629      	mov	r1, r5
  40713a:	4630      	mov	r0, r6
  40713c:	47b8      	blx	r7
  40713e:	2800      	cmp	r0, #0
  407140:	d09f      	beq.n	407082 <update_style_cache_children+0x12>
  407142:	e79a      	b.n	40707a <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407144:	2100      	movs	r1, #0
  407146:	4630      	mov	r0, r6
  407148:	4b0b      	ldr	r3, [pc, #44]	; (407178 <update_style_cache_children+0x108>)
  40714a:	4798      	blx	r3
  40714c:	4604      	mov	r4, r0
    while(child) {
  40714e:	e007      	b.n	407160 <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  407150:	4620      	mov	r0, r4
  407152:	f7ff ff8d 	bl	407070 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  407156:	4621      	mov	r1, r4
  407158:	4630      	mov	r0, r6
  40715a:	4b07      	ldr	r3, [pc, #28]	; (407178 <update_style_cache_children+0x108>)
  40715c:	4798      	blx	r3
  40715e:	4604      	mov	r4, r0
    while(child) {
  407160:	2c00      	cmp	r4, #0
  407162:	d1f5      	bne.n	407150 <update_style_cache_children+0xe0>
}
  407164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407168:	0040567d 	.word	0x0040567d
  40716c:	00406e35 	.word	0x00406e35
  407170:	00406d2d 	.word	0x00406d2d
  407174:	00416ee1 	.word	0x00416ee1
  407178:	0040551d 	.word	0x0040551d
  40717c:	004068a9 	.word	0x004068a9

00407180 <invalidate_style_cache>:
{
  407180:	b538      	push	{r3, r4, r5, lr}
  407182:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  407184:	4610      	mov	r0, r2
  407186:	4b19      	ldr	r3, [pc, #100]	; (4071ec <invalidate_style_cache+0x6c>)
  407188:	4798      	blx	r3
  40718a:	b170      	cbz	r0, 4071aa <invalidate_style_cache+0x2a>
  40718c:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40718e:	2c3f      	cmp	r4, #63	; 0x3f
  407190:	d80c      	bhi.n	4071ac <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  407192:	4621      	mov	r1, r4
  407194:	4628      	mov	r0, r5
  407196:	4b16      	ldr	r3, [pc, #88]	; (4071f0 <invalidate_style_cache+0x70>)
  407198:	4798      	blx	r3
        if(list == NULL) break;
  40719a:	b138      	cbz	r0, 4071ac <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  40719c:	7942      	ldrb	r2, [r0, #5]
  40719e:	f36f 0282 	bfc	r2, #2, #1
  4071a2:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  4071a4:	3401      	adds	r4, #1
  4071a6:	b2e4      	uxtb	r4, r4
  4071a8:	e7f1      	b.n	40718e <invalidate_style_cache+0xe>
  4071aa:	bd38      	pop	{r3, r4, r5, pc}
  4071ac:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4071ae:	2cff      	cmp	r4, #255	; 0xff
  4071b0:	d00b      	beq.n	4071ca <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4071b2:	4621      	mov	r1, r4
  4071b4:	4628      	mov	r0, r5
  4071b6:	4b0e      	ldr	r3, [pc, #56]	; (4071f0 <invalidate_style_cache+0x70>)
  4071b8:	4798      	blx	r3
        if(list == NULL) break;
  4071ba:	b130      	cbz	r0, 4071ca <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  4071bc:	7942      	ldrb	r2, [r0, #5]
  4071be:	f36f 0282 	bfc	r2, #2, #1
  4071c2:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  4071c4:	3401      	adds	r4, #1
  4071c6:	b2e4      	uxtb	r4, r4
  4071c8:	e7f1      	b.n	4071ae <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4071ca:	2100      	movs	r1, #0
  4071cc:	4628      	mov	r0, r5
  4071ce:	4b09      	ldr	r3, [pc, #36]	; (4071f4 <invalidate_style_cache+0x74>)
  4071d0:	4798      	blx	r3
  4071d2:	4604      	mov	r4, r0
    while(child) {
  4071d4:	e007      	b.n	4071e6 <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  4071d6:	4620      	mov	r0, r4
  4071d8:	4b07      	ldr	r3, [pc, #28]	; (4071f8 <invalidate_style_cache+0x78>)
  4071da:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  4071dc:	4621      	mov	r1, r4
  4071de:	4628      	mov	r0, r5
  4071e0:	4b04      	ldr	r3, [pc, #16]	; (4071f4 <invalidate_style_cache+0x74>)
  4071e2:	4798      	blx	r3
  4071e4:	4604      	mov	r4, r0
    while(child) {
  4071e6:	2c00      	cmp	r4, #0
  4071e8:	d1f5      	bne.n	4071d6 <invalidate_style_cache+0x56>
  4071ea:	bd38      	pop	{r3, r4, r5, pc}
  4071ec:	00404edd 	.word	0x00404edd
  4071f0:	0040567d 	.word	0x0040567d
  4071f4:	0040551d 	.word	0x0040551d
  4071f8:	00407071 	.word	0x00407071

004071fc <lv_obj_refresh_style>:
{
  4071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4071fe:	4605      	mov	r5, r0
  407200:	460f      	mov	r7, r1
  407202:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407204:	4b37      	ldr	r3, [pc, #220]	; (4072e4 <lv_obj_refresh_style+0xe8>)
  407206:	4798      	blx	r3
  407208:	b928      	cbnz	r0, 407216 <lv_obj_refresh_style+0x1a>
  40720a:	462a      	mov	r2, r5
  40720c:	2300      	movs	r3, #0
  40720e:	4836      	ldr	r0, [pc, #216]	; (4072e8 <lv_obj_refresh_style+0xec>)
  407210:	4936      	ldr	r1, [pc, #216]	; (4072ec <lv_obj_refresh_style+0xf0>)
  407212:	4788      	blx	r1
  407214:	e7fe      	b.n	407214 <lv_obj_refresh_style+0x18>
  407216:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  407218:	4622      	mov	r2, r4
  40721a:	4639      	mov	r1, r7
  40721c:	4628      	mov	r0, r5
  40721e:	4b34      	ldr	r3, [pc, #208]	; (4072f0 <lv_obj_refresh_style+0xf4>)
  407220:	4798      	blx	r3
    switch(prop) {
  407222:	2c71      	cmp	r4, #113	; 0x71
  407224:	d83c      	bhi.n	4072a0 <lv_obj_refresh_style+0xa4>
  407226:	2c70      	cmp	r4, #112	; 0x70
  407228:	d20c      	bcs.n	407244 <lv_obj_refresh_style+0x48>
  40722a:	2c41      	cmp	r4, #65	; 0x41
  40722c:	d82e      	bhi.n	40728c <lv_obj_refresh_style+0x90>
  40722e:	2c40      	cmp	r4, #64	; 0x40
  407230:	d208      	bcs.n	407244 <lv_obj_refresh_style+0x48>
  407232:	2c02      	cmp	r4, #2
  407234:	d305      	bcc.n	407242 <lv_obj_refresh_style+0x46>
  407236:	2c07      	cmp	r4, #7
  407238:	d904      	bls.n	407244 <lv_obj_refresh_style+0x48>
  40723a:	f1a4 0310 	sub.w	r3, r4, #16
  40723e:	2b08      	cmp	r3, #8
  407240:	d900      	bls.n	407244 <lv_obj_refresh_style+0x48>
            real_refr = false;
  407242:	2600      	movs	r6, #0
    if(real_refr) {
  407244:	2e00      	cmp	r6, #0
  407246:	d048      	beq.n	4072da <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  407248:	4628      	mov	r0, r5
  40724a:	4b2a      	ldr	r3, [pc, #168]	; (4072f4 <lv_obj_refresh_style+0xf8>)
  40724c:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  40724e:	69eb      	ldr	r3, [r5, #28]
  407250:	2200      	movs	r2, #0
  407252:	2104      	movs	r1, #4
  407254:	4628      	mov	r0, r5
  407256:	4798      	blx	r3
        switch(prop) {
  407258:	2c15      	cmp	r4, #21
  40725a:	d309      	bcc.n	407270 <lv_obj_refresh_style+0x74>
  40725c:	2c18      	cmp	r4, #24
  40725e:	d901      	bls.n	407264 <lv_obj_refresh_style+0x68>
  407260:	2cff      	cmp	r4, #255	; 0xff
  407262:	d105      	bne.n	407270 <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  407264:	6828      	ldr	r0, [r5, #0]
  407266:	b118      	cbz	r0, 407270 <lv_obj_refresh_style+0x74>
  407268:	69c3      	ldr	r3, [r0, #28]
  40726a:	2200      	movs	r2, #0
  40726c:	2101      	movs	r1, #1
  40726e:	4798      	blx	r3
        lv_obj_invalidate(obj);
  407270:	4628      	mov	r0, r5
  407272:	4b20      	ldr	r3, [pc, #128]	; (4072f4 <lv_obj_refresh_style+0xf8>)
  407274:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  407276:	0be3      	lsrs	r3, r4, #15
  407278:	2cff      	cmp	r4, #255	; 0xff
  40727a:	bf14      	ite	ne
  40727c:	461c      	movne	r4, r3
  40727e:	f043 0401 	orreq.w	r4, r3, #1
  407282:	b36c      	cbz	r4, 4072e0 <lv_obj_refresh_style+0xe4>
  407284:	4628      	mov	r0, r5
  407286:	4b1c      	ldr	r3, [pc, #112]	; (4072f8 <lv_obj_refresh_style+0xfc>)
  407288:	4798      	blx	r3
  40728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  40728c:	2c53      	cmp	r4, #83	; 0x53
  40728e:	d804      	bhi.n	40729a <lv_obj_refresh_style+0x9e>
  407290:	2c50      	cmp	r4, #80	; 0x50
  407292:	d2d7      	bcs.n	407244 <lv_obj_refresh_style+0x48>
  407294:	2c4c      	cmp	r4, #76	; 0x4c
  407296:	d1d4      	bne.n	407242 <lv_obj_refresh_style+0x46>
  407298:	e7d4      	b.n	407244 <lv_obj_refresh_style+0x48>
  40729a:	2c5c      	cmp	r4, #92	; 0x5c
  40729c:	d1d1      	bne.n	407242 <lv_obj_refresh_style+0x46>
  40729e:	e7d1      	b.n	407244 <lv_obj_refresh_style+0x48>
  4072a0:	2c7f      	cmp	r4, #127	; 0x7f
  4072a2:	d90c      	bls.n	4072be <lv_obj_refresh_style+0xc2>
  4072a4:	f248 0381 	movw	r3, #32897	; 0x8081
  4072a8:	429c      	cmp	r4, r3
  4072aa:	d811      	bhi.n	4072d0 <lv_obj_refresh_style+0xd4>
  4072ac:	f248 0380 	movw	r3, #32896	; 0x8080
  4072b0:	429c      	cmp	r4, r3
  4072b2:	d2c7      	bcs.n	407244 <lv_obj_refresh_style+0x48>
  4072b4:	2c90      	cmp	r4, #144	; 0x90
  4072b6:	d0c5      	beq.n	407244 <lv_obj_refresh_style+0x48>
  4072b8:	2cff      	cmp	r4, #255	; 0xff
  4072ba:	d1c2      	bne.n	407242 <lv_obj_refresh_style+0x46>
  4072bc:	e7c2      	b.n	407244 <lv_obj_refresh_style+0x48>
  4072be:	2c7e      	cmp	r4, #126	; 0x7e
  4072c0:	d2c0      	bcs.n	407244 <lv_obj_refresh_style+0x48>
  4072c2:	2c73      	cmp	r4, #115	; 0x73
  4072c4:	d3bd      	bcc.n	407242 <lv_obj_refresh_style+0x46>
  4072c6:	2c75      	cmp	r4, #117	; 0x75
  4072c8:	d9bc      	bls.n	407244 <lv_obj_refresh_style+0x48>
  4072ca:	2c7c      	cmp	r4, #124	; 0x7c
  4072cc:	d1b9      	bne.n	407242 <lv_obj_refresh_style+0x46>
  4072ce:	e7b9      	b.n	407244 <lv_obj_refresh_style+0x48>
  4072d0:	f248 038e 	movw	r3, #32910	; 0x808e
  4072d4:	429c      	cmp	r4, r3
  4072d6:	d1b4      	bne.n	407242 <lv_obj_refresh_style+0x46>
  4072d8:	e7b4      	b.n	407244 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  4072da:	4628      	mov	r0, r5
  4072dc:	4b05      	ldr	r3, [pc, #20]	; (4072f4 <lv_obj_refresh_style+0xf8>)
  4072de:	4798      	blx	r3
  4072e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4072e2:	bf00      	nop
  4072e4:	0041552d 	.word	0x0041552d
  4072e8:	00423604 	.word	0x00423604
  4072ec:	00415539 	.word	0x00415539
  4072f0:	00407181 	.word	0x00407181
  4072f4:	004059c9 	.word	0x004059c9
  4072f8:	0040614d 	.word	0x0040614d

004072fc <lv_obj_reset_style_list>:
{
  4072fc:	b538      	push	{r3, r4, r5, lr}
  4072fe:	4604      	mov	r4, r0
  407300:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  407302:	4b04      	ldr	r3, [pc, #16]	; (407314 <lv_obj_reset_style_list+0x18>)
  407304:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407306:	22ff      	movs	r2, #255	; 0xff
  407308:	4629      	mov	r1, r5
  40730a:	4620      	mov	r0, r4
  40730c:	4b02      	ldr	r3, [pc, #8]	; (407318 <lv_obj_reset_style_list+0x1c>)
  40730e:	4798      	blx	r3
  407310:	bd38      	pop	{r3, r4, r5, pc}
  407312:	bf00      	nop
  407314:	00405745 	.word	0x00405745
  407318:	004071fd 	.word	0x004071fd

0040731c <_lv_obj_set_style_local_color>:
{
  40731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40731e:	4605      	mov	r5, r0
  407320:	460e      	mov	r6, r1
  407322:	4614      	mov	r4, r2
  407324:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407326:	4b09      	ldr	r3, [pc, #36]	; (40734c <_lv_obj_set_style_local_color+0x30>)
  407328:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  40732a:	463a      	mov	r2, r7
  40732c:	4621      	mov	r1, r4
  40732e:	4b08      	ldr	r3, [pc, #32]	; (407350 <_lv_obj_set_style_local_color+0x34>)
  407330:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  407332:	2300      	movs	r3, #0
  407334:	4622      	mov	r2, r4
  407336:	4631      	mov	r1, r6
  407338:	4628      	mov	r0, r5
  40733a:	4f06      	ldr	r7, [pc, #24]	; (407354 <_lv_obj_set_style_local_color+0x38>)
  40733c:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  40733e:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  407342:	4631      	mov	r1, r6
  407344:	4628      	mov	r0, r5
  407346:	4b04      	ldr	r3, [pc, #16]	; (407358 <_lv_obj_set_style_local_color+0x3c>)
  407348:	4798      	blx	r3
  40734a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40734c:	0040567d 	.word	0x0040567d
  407350:	0040a6f9 	.word	0x0040a6f9
  407354:	004056ad 	.word	0x004056ad
  407358:	004071fd 	.word	0x004071fd

0040735c <report_style_mod_core>:
{
  40735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40735e:	4604      	mov	r4, r0
  407360:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407362:	2500      	movs	r5, #0
  407364:	e028      	b.n	4073b8 <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  407366:	1c59      	adds	r1, r3, #1
  407368:	b2c9      	uxtb	r1, r1
  40736a:	e012      	b.n	407392 <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40736c:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  40736e:	2c00      	cmp	r4, #0
  407370:	bf18      	it	ne
  407372:	4294      	cmpne	r4, r2
  407374:	d019      	beq.n	4073aa <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  407376:	3301      	adds	r3, #1
  407378:	b2db      	uxtb	r3, r3
  40737a:	793a      	ldrb	r2, [r7, #4]
  40737c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  407380:	4293      	cmp	r3, r2
  407382:	da17      	bge.n	4073b4 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407384:	88b9      	ldrh	r1, [r7, #4]
  407386:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40738a:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  40738e:	d0ea      	beq.n	407366 <report_style_mod_core+0xa>
  407390:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407392:	7938      	ldrb	r0, [r7, #4]
  407394:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  407398:	d0e8      	beq.n	40736c <report_style_mod_core+0x10>
  40739a:	428a      	cmp	r2, r1
  40739c:	dd03      	ble.n	4073a6 <report_style_mod_core+0x4a>
    return list->style_list[id];
  40739e:	683a      	ldr	r2, [r7, #0]
  4073a0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4073a4:	e7e3      	b.n	40736e <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  4073a6:	2200      	movs	r2, #0
  4073a8:	e7e1      	b.n	40736e <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4073aa:	22ff      	movs	r2, #255	; 0xff
  4073ac:	4629      	mov	r1, r5
  4073ae:	4630      	mov	r0, r6
  4073b0:	4b0f      	ldr	r3, [pc, #60]	; (4073f0 <report_style_mod_core+0x94>)
  4073b2:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4073b4:	3501      	adds	r5, #1
  4073b6:	b2ed      	uxtb	r5, r5
  4073b8:	2d40      	cmp	r5, #64	; 0x40
  4073ba:	d007      	beq.n	4073cc <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4073bc:	4629      	mov	r1, r5
  4073be:	4630      	mov	r0, r6
  4073c0:	4b0c      	ldr	r3, [pc, #48]	; (4073f4 <report_style_mod_core+0x98>)
  4073c2:	4798      	blx	r3
        if(list == NULL) break;
  4073c4:	4607      	mov	r7, r0
  4073c6:	b108      	cbz	r0, 4073cc <report_style_mod_core+0x70>
  4073c8:	2300      	movs	r3, #0
  4073ca:	e7d6      	b.n	40737a <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4073cc:	2100      	movs	r1, #0
  4073ce:	4630      	mov	r0, r6
  4073d0:	4b09      	ldr	r3, [pc, #36]	; (4073f8 <report_style_mod_core+0x9c>)
  4073d2:	4798      	blx	r3
  4073d4:	4605      	mov	r5, r0
    while(child) {
  4073d6:	e008      	b.n	4073ea <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  4073d8:	4629      	mov	r1, r5
  4073da:	4620      	mov	r0, r4
  4073dc:	f7ff ffbe 	bl	40735c <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  4073e0:	4629      	mov	r1, r5
  4073e2:	4630      	mov	r0, r6
  4073e4:	4b04      	ldr	r3, [pc, #16]	; (4073f8 <report_style_mod_core+0x9c>)
  4073e6:	4798      	blx	r3
  4073e8:	4605      	mov	r5, r0
    while(child) {
  4073ea:	2d00      	cmp	r5, #0
  4073ec:	d1f4      	bne.n	4073d8 <report_style_mod_core+0x7c>
}
  4073ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4073f0:	004071fd 	.word	0x004071fd
  4073f4:	0040567d 	.word	0x0040567d
  4073f8:	0040551d 	.word	0x0040551d

004073fc <lv_obj_report_style_mod>:
{
  4073fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073fe:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  407400:	2000      	movs	r0, #0
  407402:	4b0e      	ldr	r3, [pc, #56]	; (40743c <lv_obj_report_style_mod+0x40>)
  407404:	4798      	blx	r3
  407406:	4607      	mov	r7, r0
    while(d) {
  407408:	e00e      	b.n	407428 <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  40740a:	4621      	mov	r1, r4
  40740c:	4630      	mov	r0, r6
  40740e:	4b0c      	ldr	r3, [pc, #48]	; (407440 <lv_obj_report_style_mod+0x44>)
  407410:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  407412:	4621      	mov	r1, r4
  407414:	4628      	mov	r0, r5
  407416:	4b0b      	ldr	r3, [pc, #44]	; (407444 <lv_obj_report_style_mod+0x48>)
  407418:	4798      	blx	r3
  40741a:	4604      	mov	r4, r0
  40741c:	2c00      	cmp	r4, #0
  40741e:	d1f4      	bne.n	40740a <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  407420:	4638      	mov	r0, r7
  407422:	4b06      	ldr	r3, [pc, #24]	; (40743c <lv_obj_report_style_mod+0x40>)
  407424:	4798      	blx	r3
  407426:	4607      	mov	r7, r0
    while(d) {
  407428:	b137      	cbz	r7, 407438 <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  40742a:	f107 0538 	add.w	r5, r7, #56	; 0x38
  40742e:	4628      	mov	r0, r5
  407430:	4b05      	ldr	r3, [pc, #20]	; (407448 <lv_obj_report_style_mod+0x4c>)
  407432:	4798      	blx	r3
  407434:	4604      	mov	r4, r0
  407436:	e7f1      	b.n	40741c <lv_obj_report_style_mod+0x20>
}
  407438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40743a:	bf00      	nop
  40743c:	004144e1 	.word	0x004144e1
  407440:	0040735d 	.word	0x0040735d
  407444:	00415851 	.word	0x00415851
  407448:	0041583d 	.word	0x0041583d

0040744c <trans_anim_cb>:
{
  40744c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407450:	4604      	mov	r4, r0
  407452:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407454:	7981      	ldrb	r1, [r0, #6]
  407456:	6800      	ldr	r0, [r0, #0]
  407458:	4b4b      	ldr	r3, [pc, #300]	; (407588 <trans_anim_cb+0x13c>)
  40745a:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  40745c:	4b4b      	ldr	r3, [pc, #300]	; (40758c <trans_anim_cb+0x140>)
  40745e:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  407460:	88a1      	ldrh	r1, [r4, #4]
  407462:	f001 030f 	and.w	r3, r1, #15
  407466:	2b08      	cmp	r3, #8
  407468:	dc1c      	bgt.n	4074a4 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  40746a:	b955      	cbnz	r5, 407482 <trans_anim_cb+0x36>
  40746c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  407470:	4b47      	ldr	r3, [pc, #284]	; (407590 <trans_anim_cb+0x144>)
  407472:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407474:	88a2      	ldrh	r2, [r4, #4]
  407476:	79a1      	ldrb	r1, [r4, #6]
  407478:	6820      	ldr	r0, [r4, #0]
  40747a:	4b46      	ldr	r3, [pc, #280]	; (407594 <trans_anim_cb+0x148>)
  40747c:	4798      	blx	r3
  40747e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  407482:	2dff      	cmp	r5, #255	; 0xff
  407484:	d00b      	beq.n	40749e <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  407486:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  40748a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40748e:	1a9b      	subs	r3, r3, r2
  407490:	fb03 f505 	mul.w	r5, r3, r5
  407494:	122d      	asrs	r5, r5, #8
  407496:	fa15 f282 	uxtah	r2, r5, r2
  40749a:	b212      	sxth	r2, r2
  40749c:	e7e8      	b.n	407470 <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  40749e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4074a2:	e7e5      	b.n	407470 <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4074a4:	2b0b      	cmp	r3, #11
  4074a6:	dc50      	bgt.n	40754a <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  4074a8:	2d00      	cmp	r5, #0
  4074aa:	dd05      	ble.n	4074b8 <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  4074ac:	2dfe      	cmp	r5, #254	; 0xfe
  4074ae:	dd05      	ble.n	4074bc <trans_anim_cb+0x70>
  4074b0:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  4074b2:	4b39      	ldr	r3, [pc, #228]	; (407598 <trans_anim_cb+0x14c>)
  4074b4:	4798      	blx	r3
  4074b6:	e7dd      	b.n	407474 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  4074b8:	8922      	ldrh	r2, [r4, #8]
  4074ba:	e7fa      	b.n	4074b2 <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  4074bc:	b2ed      	uxtb	r5, r5
  4074be:	89a7      	ldrh	r7, [r4, #12]
  4074c0:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4074c2:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  4074c6:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  4074ca:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  4074ce:	fb0e f202 	mul.w	r2, lr, r2
  4074d2:	fb05 2303 	mla	r3, r5, r3, r2
  4074d6:	3380      	adds	r3, #128	; 0x80
  4074d8:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4074dc:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4074e0:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4074e4:	f04f 0200 	mov.w	r2, #0
  4074e8:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4074ec:	f007 0c07 	and.w	ip, r7, #7
  4074f0:	f3c7 3342 	ubfx	r3, r7, #13, #3
  4074f4:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4074f8:	f006 0807 	and.w	r8, r6, #7
  4074fc:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  407500:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  407504:	fb0c fc0e 	mul.w	ip, ip, lr
  407508:	fb03 c305 	mla	r3, r3, r5, ip
  40750c:	3380      	adds	r3, #128	; 0x80
  40750e:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  407512:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407516:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  40751a:	f36c 0202 	bfi	r2, ip, #0, #3
  40751e:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  407522:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407526:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40752a:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40752e:	fb06 fe0e 	mul.w	lr, r6, lr
  407532:	fb07 e505 	mla	r5, r7, r5, lr
  407536:	3580      	adds	r5, #128	; 0x80
  407538:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  40753c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  407540:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407544:	f365 220c 	bfi	r2, r5, #8, #5
  407548:	e7b3      	b.n	4074b2 <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  40754a:	2b0d      	cmp	r3, #13
  40754c:	dc13      	bgt.n	407576 <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  40754e:	2d00      	cmp	r5, #0
  407550:	dd05      	ble.n	40755e <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  407552:	2dfe      	cmp	r5, #254	; 0xfe
  407554:	dd05      	ble.n	407562 <trans_anim_cb+0x116>
  407556:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407558:	4b10      	ldr	r3, [pc, #64]	; (40759c <trans_anim_cb+0x150>)
  40755a:	4798      	blx	r3
  40755c:	e78a      	b.n	407474 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  40755e:	7a22      	ldrb	r2, [r4, #8]
  407560:	e7fa      	b.n	407558 <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  407562:	7a22      	ldrb	r2, [r4, #8]
  407564:	7b23      	ldrb	r3, [r4, #12]
  407566:	1a9b      	subs	r3, r3, r2
  407568:	fb03 f505 	mul.w	r5, r3, r5
  40756c:	f3c5 2507 	ubfx	r5, r5, #8, #8
  407570:	442a      	add	r2, r5
  407572:	b2d2      	uxtb	r2, r2
  407574:	e7f0      	b.n	407558 <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407576:	2d7f      	cmp	r5, #127	; 0x7f
  407578:	dc03      	bgt.n	407582 <trans_anim_cb+0x136>
  40757a:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  40757c:	4b08      	ldr	r3, [pc, #32]	; (4075a0 <trans_anim_cb+0x154>)
  40757e:	4798      	blx	r3
  407580:	e778      	b.n	407474 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  407582:	68e2      	ldr	r2, [r4, #12]
  407584:	e7fa      	b.n	40757c <trans_anim_cb+0x130>
  407586:	bf00      	nop
  407588:	0040567d 	.word	0x0040567d
  40758c:	0040a4e1 	.word	0x0040a4e1
  407590:	00409a6d 	.word	0x00409a6d
  407594:	004071fd 	.word	0x004071fd
  407598:	00409bfd 	.word	0x00409bfd
  40759c:	00409d8d 	.word	0x00409d8d
  4075a0:	00409f1d 	.word	0x00409f1d

004075a4 <trans_anim_start_cb>:
{
  4075a4:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  4075a6:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  4075a8:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  4075aa:	f005 030f 	and.w	r3, r5, #15
  4075ae:	2b08      	cmp	r3, #8
  4075b0:	dd13      	ble.n	4075da <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  4075b2:	2b0b      	cmp	r3, #11
  4075b4:	dd18      	ble.n	4075e8 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4075b6:	2b0d      	cmp	r3, #13
  4075b8:	dd1d      	ble.n	4075f6 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  4075ba:	462a      	mov	r2, r5
  4075bc:	79a1      	ldrb	r1, [r4, #6]
  4075be:	6820      	ldr	r0, [r4, #0]
  4075c0:	4b10      	ldr	r3, [pc, #64]	; (407604 <trans_anim_start_cb+0x60>)
  4075c2:	4798      	blx	r3
  4075c4:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  4075c6:	2300      	movs	r3, #0
  4075c8:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  4075ca:	4623      	mov	r3, r4
  4075cc:	462a      	mov	r2, r5
  4075ce:	79a1      	ldrb	r1, [r4, #6]
  4075d0:	6820      	ldr	r0, [r4, #0]
  4075d2:	4e0d      	ldr	r6, [pc, #52]	; (407608 <trans_anim_start_cb+0x64>)
  4075d4:	47b0      	blx	r6
    tr->prop = prop_tmp;
  4075d6:	80a5      	strh	r5, [r4, #4]
  4075d8:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  4075da:	462a      	mov	r2, r5
  4075dc:	79a1      	ldrb	r1, [r4, #6]
  4075de:	6820      	ldr	r0, [r4, #0]
  4075e0:	4b0a      	ldr	r3, [pc, #40]	; (40760c <trans_anim_start_cb+0x68>)
  4075e2:	4798      	blx	r3
  4075e4:	8120      	strh	r0, [r4, #8]
  4075e6:	e7ee      	b.n	4075c6 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  4075e8:	462a      	mov	r2, r5
  4075ea:	79a1      	ldrb	r1, [r4, #6]
  4075ec:	6820      	ldr	r0, [r4, #0]
  4075ee:	4b08      	ldr	r3, [pc, #32]	; (407610 <trans_anim_start_cb+0x6c>)
  4075f0:	4798      	blx	r3
  4075f2:	8120      	strh	r0, [r4, #8]
  4075f4:	e7e7      	b.n	4075c6 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  4075f6:	462a      	mov	r2, r5
  4075f8:	79a1      	ldrb	r1, [r4, #6]
  4075fa:	6820      	ldr	r0, [r4, #0]
  4075fc:	4b05      	ldr	r3, [pc, #20]	; (407614 <trans_anim_start_cb+0x70>)
  4075fe:	4798      	blx	r3
  407600:	7220      	strb	r0, [r4, #8]
  407602:	e7e0      	b.n	4075c6 <trans_anim_start_cb+0x22>
  407604:	00406d2d 	.word	0x00406d2d
  407608:	004056ad 	.word	0x004056ad
  40760c:	00406e35 	.word	0x00406e35
  407610:	00406821 	.word	0x00406821
  407614:	004068a9 	.word	0x004068a9

00407618 <trans_create>:
{
  407618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40761c:	b085      	sub	sp, #20
  40761e:	4604      	mov	r4, r0
  407620:	460d      	mov	r5, r1
  407622:	4617      	mov	r7, r2
  407624:	4699      	mov	r9, r3
  407626:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  40762a:	4611      	mov	r1, r2
  40762c:	4bab      	ldr	r3, [pc, #684]	; (4078dc <trans_create+0x2c4>)
  40762e:	4798      	blx	r3
  407630:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  407632:	4bab      	ldr	r3, [pc, #684]	; (4078e0 <trans_create+0x2c8>)
  407634:	4798      	blx	r3
  407636:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407638:	f896 a005 	ldrb.w	sl, [r6, #5]
  40763c:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407640:	f005 030f 	and.w	r3, r5, #15
  407644:	2b08      	cmp	r3, #8
  407646:	dd41      	ble.n	4076cc <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407648:	2b0b      	cmp	r3, #11
  40764a:	f340 80b2 	ble.w	4077b2 <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  40764e:	2b0d      	cmp	r3, #13
  407650:	f300 80fb 	bgt.w	40784a <trans_create+0x232>
        style_list->skip_trans = 1;
  407654:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407656:	f043 0309 	orr.w	r3, r3, #9
  40765a:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  40765c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  407660:	462a      	mov	r2, r5
  407662:	4639      	mov	r1, r7
  407664:	4620      	mov	r0, r4
  407666:	f8df b27c 	ldr.w	fp, [pc, #636]	; 4078e4 <trans_create+0x2cc>
  40766a:	47d8      	blx	fp
  40766c:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  40766e:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  407672:	462a      	mov	r2, r5
  407674:	4639      	mov	r1, r7
  407676:	4620      	mov	r0, r4
  407678:	47d8      	blx	fp
  40767a:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  40767c:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  40767e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407682:	f36a 03c3 	bfi	r3, sl, #3, #1
  407686:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407688:	9b01      	ldr	r3, [sp, #4]
  40768a:	4283      	cmp	r3, r0
  40768c:	f000 8123 	beq.w	4078d6 <trans_create+0x2be>
        obj->state = prev_state;
  407690:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407694:	462a      	mov	r2, r5
  407696:	4639      	mov	r1, r7
  407698:	4620      	mov	r0, r4
  40769a:	4b92      	ldr	r3, [pc, #584]	; (4078e4 <trans_create+0x2cc>)
  40769c:	4798      	blx	r3
  40769e:	4606      	mov	r6, r0
        obj->state = new_state;
  4076a0:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  4076a4:	4602      	mov	r2, r0
  4076a6:	4629      	mov	r1, r5
  4076a8:	9800      	ldr	r0, [sp, #0]
  4076aa:	4b8f      	ldr	r3, [pc, #572]	; (4078e8 <trans_create+0x2d0>)
  4076ac:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4076ae:	488f      	ldr	r0, [pc, #572]	; (4078ec <trans_create+0x2d4>)
  4076b0:	4b8f      	ldr	r3, [pc, #572]	; (4078f0 <trans_create+0x2d8>)
  4076b2:	4798      	blx	r3
  4076b4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  4076b6:	4b8f      	ldr	r3, [pc, #572]	; (4078f4 <trans_create+0x2dc>)
  4076b8:	4798      	blx	r3
  4076ba:	2800      	cmp	r0, #0
  4076bc:	f000 80bf 	beq.w	40783e <trans_create+0x226>
        if(tr == NULL) return NULL;
  4076c0:	2c00      	cmp	r4, #0
  4076c2:	d03d      	beq.n	407740 <trans_create+0x128>
        tr->start_value._opa = o1;
  4076c4:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  4076c6:	f884 b00c 	strb.w	fp, [r4, #12]
  4076ca:	e039      	b.n	407740 <trans_create+0x128>
        style_list->skip_trans = 1;
  4076cc:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4076ce:	f043 0309 	orr.w	r3, r3, #9
  4076d2:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  4076d4:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  4076d8:	462a      	mov	r2, r5
  4076da:	4639      	mov	r1, r7
  4076dc:	4620      	mov	r0, r4
  4076de:	f8df b218 	ldr.w	fp, [pc, #536]	; 4078f8 <trans_create+0x2e0>
  4076e2:	47d8      	blx	fp
  4076e4:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  4076e6:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  4076ea:	462a      	mov	r2, r5
  4076ec:	4639      	mov	r1, r7
  4076ee:	4620      	mov	r0, r4
  4076f0:	47d8      	blx	fp
  4076f2:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  4076f4:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4076f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4076fa:	f36a 03c3 	bfi	r3, sl, #3, #1
  4076fe:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  407700:	9b01      	ldr	r3, [sp, #4]
  407702:	4283      	cmp	r3, r0
  407704:	f000 80e5 	beq.w	4078d2 <trans_create+0x2ba>
        obj->state = prev_state;
  407708:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  40770c:	462a      	mov	r2, r5
  40770e:	4639      	mov	r1, r7
  407710:	4620      	mov	r0, r4
  407712:	4b79      	ldr	r3, [pc, #484]	; (4078f8 <trans_create+0x2e0>)
  407714:	4798      	blx	r3
  407716:	4606      	mov	r6, r0
        obj->state = new_state;
  407718:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  40771c:	4602      	mov	r2, r0
  40771e:	4629      	mov	r1, r5
  407720:	9800      	ldr	r0, [sp, #0]
  407722:	4b76      	ldr	r3, [pc, #472]	; (4078fc <trans_create+0x2e4>)
  407724:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407726:	2d01      	cmp	r5, #1
  407728:	d00e      	beq.n	407748 <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40772a:	4870      	ldr	r0, [pc, #448]	; (4078ec <trans_create+0x2d4>)
  40772c:	4b70      	ldr	r3, [pc, #448]	; (4078f0 <trans_create+0x2d8>)
  40772e:	4798      	blx	r3
  407730:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407732:	4b70      	ldr	r3, [pc, #448]	; (4078f4 <trans_create+0x2dc>)
  407734:	4798      	blx	r3
  407736:	b3b0      	cbz	r0, 4077a6 <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407738:	b114      	cbz	r4, 407740 <trans_create+0x128>
        tr->start_value._int = int1;
  40773a:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  40773c:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  407740:	4620      	mov	r0, r4
  407742:	b005      	add	sp, #20
  407744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407748:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40774c:	459b      	cmp	fp, r3
  40774e:	bf18      	it	ne
  407750:	429e      	cmpne	r6, r3
  407752:	d1ea      	bne.n	40772a <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407754:	4620      	mov	r0, r4
  407756:	4b6a      	ldr	r3, [pc, #424]	; (407900 <trans_create+0x2e8>)
  407758:	4798      	blx	r3
  40775a:	4605      	mov	r5, r0
  40775c:	2800      	cmp	r0, #0
  40775e:	da00      	bge.n	407762 <trans_create+0x14a>
  407760:	1c45      	adds	r5, r0, #1
  407762:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407766:	4620      	mov	r0, r4
  407768:	4b65      	ldr	r3, [pc, #404]	; (407900 <trans_create+0x2e8>)
  40776a:	4798      	blx	r3
  40776c:	4603      	mov	r3, r0
  40776e:	2800      	cmp	r0, #0
  407770:	da00      	bge.n	407774 <trans_create+0x15c>
  407772:	1c43      	adds	r3, r0, #1
  407774:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407778:	f647 72ff 	movw	r2, #32767	; 0x7fff
  40777c:	4296      	cmp	r6, r2
  40777e:	d105      	bne.n	40778c <trans_create+0x174>
  407780:	1c5e      	adds	r6, r3, #1
  407782:	1c6a      	adds	r2, r5, #1
  407784:	4296      	cmp	r6, r2
  407786:	bfa8      	it	ge
  407788:	4616      	movge	r6, r2
  40778a:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  40778c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407790:	4593      	cmp	fp, r2
  407792:	d1ca      	bne.n	40772a <trans_create+0x112>
  407794:	f103 0b01 	add.w	fp, r3, #1
  407798:	3501      	adds	r5, #1
  40779a:	45ab      	cmp	fp, r5
  40779c:	bfa8      	it	ge
  40779e:	46ab      	movge	fp, r5
  4077a0:	fa0f fb8b 	sxth.w	fp, fp
  4077a4:	e7c1      	b.n	40772a <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  4077a6:	4622      	mov	r2, r4
  4077a8:	2300      	movs	r3, #0
  4077aa:	4856      	ldr	r0, [pc, #344]	; (407904 <trans_create+0x2ec>)
  4077ac:	4956      	ldr	r1, [pc, #344]	; (407908 <trans_create+0x2f0>)
  4077ae:	4788      	blx	r1
  4077b0:	e7fe      	b.n	4077b0 <trans_create+0x198>
        style_list->skip_trans = 1;
  4077b2:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4077b4:	f043 0309 	orr.w	r3, r3, #9
  4077b8:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  4077ba:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  4077be:	462a      	mov	r2, r5
  4077c0:	4639      	mov	r1, r7
  4077c2:	4620      	mov	r0, r4
  4077c4:	f8df b144 	ldr.w	fp, [pc, #324]	; 40790c <trans_create+0x2f4>
  4077c8:	47d8      	blx	fp
  4077ca:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  4077ce:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  4077d2:	462a      	mov	r2, r5
  4077d4:	4639      	mov	r1, r7
  4077d6:	4620      	mov	r0, r4
  4077d8:	47d8      	blx	fp
  4077da:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  4077dc:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4077de:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4077e2:	f36a 03c3 	bfi	r3, sl, #3, #1
  4077e6:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  4077e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4077ec:	b283      	uxth	r3, r0
  4077ee:	429a      	cmp	r2, r3
  4077f0:	d023      	beq.n	40783a <trans_create+0x222>
        obj->state = prev_state;
  4077f2:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  4077f6:	462a      	mov	r2, r5
  4077f8:	4639      	mov	r1, r7
  4077fa:	4620      	mov	r0, r4
  4077fc:	4b43      	ldr	r3, [pc, #268]	; (40790c <trans_create+0x2f4>)
  4077fe:	4798      	blx	r3
  407800:	4602      	mov	r2, r0
  407802:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  407806:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  40780a:	4629      	mov	r1, r5
  40780c:	9800      	ldr	r0, [sp, #0]
  40780e:	4b40      	ldr	r3, [pc, #256]	; (407910 <trans_create+0x2f8>)
  407810:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407812:	4836      	ldr	r0, [pc, #216]	; (4078ec <trans_create+0x2d4>)
  407814:	4b36      	ldr	r3, [pc, #216]	; (4078f0 <trans_create+0x2d8>)
  407816:	4798      	blx	r3
  407818:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  40781a:	4b36      	ldr	r3, [pc, #216]	; (4078f4 <trans_create+0x2dc>)
  40781c:	4798      	blx	r3
  40781e:	b928      	cbnz	r0, 40782c <trans_create+0x214>
  407820:	4622      	mov	r2, r4
  407822:	2300      	movs	r3, #0
  407824:	4837      	ldr	r0, [pc, #220]	; (407904 <trans_create+0x2ec>)
  407826:	4938      	ldr	r1, [pc, #224]	; (407908 <trans_create+0x2f0>)
  407828:	4788      	blx	r1
  40782a:	e7fe      	b.n	40782a <trans_create+0x212>
        if(tr == NULL) return NULL;
  40782c:	b12c      	cbz	r4, 40783a <trans_create+0x222>
        tr->start_value._color = c1;
  40782e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407832:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407834:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407838:	e782      	b.n	407740 <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  40783a:	2400      	movs	r4, #0
  40783c:	e780      	b.n	407740 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  40783e:	4622      	mov	r2, r4
  407840:	2300      	movs	r3, #0
  407842:	4830      	ldr	r0, [pc, #192]	; (407904 <trans_create+0x2ec>)
  407844:	4930      	ldr	r1, [pc, #192]	; (407908 <trans_create+0x2f0>)
  407846:	4788      	blx	r1
  407848:	e7fe      	b.n	407848 <trans_create+0x230>
        obj->state = prev_state;
  40784a:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  40784e:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407850:	f043 0309 	orr.w	r3, r3, #9
  407854:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407856:	462a      	mov	r2, r5
  407858:	4639      	mov	r1, r7
  40785a:	4620      	mov	r0, r4
  40785c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 40791c <trans_create+0x304>
  407860:	47d8      	blx	fp
  407862:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407864:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407868:	462a      	mov	r2, r5
  40786a:	4639      	mov	r1, r7
  40786c:	4620      	mov	r0, r4
  40786e:	47d8      	blx	fp
  407870:	a904      	add	r1, sp, #16
  407872:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  407876:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407878:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40787c:	f36a 03c3 	bfi	r3, sl, #3, #1
  407880:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407882:	2204      	movs	r2, #4
  407884:	a802      	add	r0, sp, #8
  407886:	4b23      	ldr	r3, [pc, #140]	; (407914 <trans_create+0x2fc>)
  407888:	4798      	blx	r3
  40788a:	b300      	cbz	r0, 4078ce <trans_create+0x2b6>
        obj->state = prev_state;
  40788c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407890:	462a      	mov	r2, r5
  407892:	4639      	mov	r1, r7
  407894:	4620      	mov	r0, r4
  407896:	47d8      	blx	fp
  407898:	4602      	mov	r2, r0
  40789a:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  40789c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  4078a0:	4629      	mov	r1, r5
  4078a2:	9800      	ldr	r0, [sp, #0]
  4078a4:	4b1c      	ldr	r3, [pc, #112]	; (407918 <trans_create+0x300>)
  4078a6:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4078a8:	4810      	ldr	r0, [pc, #64]	; (4078ec <trans_create+0x2d4>)
  4078aa:	4b11      	ldr	r3, [pc, #68]	; (4078f0 <trans_create+0x2d8>)
  4078ac:	4798      	blx	r3
  4078ae:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  4078b0:	4b10      	ldr	r3, [pc, #64]	; (4078f4 <trans_create+0x2dc>)
  4078b2:	4798      	blx	r3
  4078b4:	b128      	cbz	r0, 4078c2 <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  4078b6:	b154      	cbz	r4, 4078ce <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  4078b8:	9b02      	ldr	r3, [sp, #8]
  4078ba:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  4078bc:	9b03      	ldr	r3, [sp, #12]
  4078be:	60e3      	str	r3, [r4, #12]
  4078c0:	e73e      	b.n	407740 <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  4078c2:	4622      	mov	r2, r4
  4078c4:	2300      	movs	r3, #0
  4078c6:	480f      	ldr	r0, [pc, #60]	; (407904 <trans_create+0x2ec>)
  4078c8:	490f      	ldr	r1, [pc, #60]	; (407908 <trans_create+0x2f0>)
  4078ca:	4788      	blx	r1
  4078cc:	e7fe      	b.n	4078cc <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  4078ce:	2400      	movs	r4, #0
  4078d0:	e736      	b.n	407740 <trans_create+0x128>
        if(int1 == int2)  return NULL;
  4078d2:	2400      	movs	r4, #0
  4078d4:	e734      	b.n	407740 <trans_create+0x128>
        if(o1 == o2) return NULL;
  4078d6:	2400      	movs	r4, #0
  4078d8:	e732      	b.n	407740 <trans_create+0x128>
  4078da:	bf00      	nop
  4078dc:	0040567d 	.word	0x0040567d
  4078e0:	0040a4e1 	.word	0x0040a4e1
  4078e4:	004068a9 	.word	0x004068a9
  4078e8:	00409d8d 	.word	0x00409d8d
  4078ec:	2043a22c 	.word	0x2043a22c
  4078f0:	004157a5 	.word	0x004157a5
  4078f4:	0041552d 	.word	0x0041552d
  4078f8:	00406e35 	.word	0x00406e35
  4078fc:	00409a6d 	.word	0x00409a6d
  407900:	0040561d 	.word	0x0040561d
  407904:	004235f0 	.word	0x004235f0
  407908:	00415539 	.word	0x00415539
  40790c:	00406821 	.word	0x00406821
  407910:	00409bfd 	.word	0x00409bfd
  407914:	0041f90d 	.word	0x0041f90d
  407918:	00409f1d 	.word	0x00409f1d
  40791c:	00406d2d 	.word	0x00406d2d

00407920 <lv_obj_get_signal_cb>:
{
  407920:	b510      	push	{r4, lr}
  407922:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407924:	4b05      	ldr	r3, [pc, #20]	; (40793c <lv_obj_get_signal_cb+0x1c>)
  407926:	4798      	blx	r3
  407928:	b108      	cbz	r0, 40792e <lv_obj_get_signal_cb+0xe>
}
  40792a:	69e0      	ldr	r0, [r4, #28]
  40792c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40792e:	4622      	mov	r2, r4
  407930:	2300      	movs	r3, #0
  407932:	4803      	ldr	r0, [pc, #12]	; (407940 <lv_obj_get_signal_cb+0x20>)
  407934:	4903      	ldr	r1, [pc, #12]	; (407944 <lv_obj_get_signal_cb+0x24>)
  407936:	4788      	blx	r1
  407938:	e7fe      	b.n	407938 <lv_obj_get_signal_cb+0x18>
  40793a:	bf00      	nop
  40793c:	0041552d 	.word	0x0041552d
  407940:	00423604 	.word	0x00423604
  407944:	00415539 	.word	0x00415539

00407948 <lv_obj_get_ext_attr>:
{
  407948:	b510      	push	{r4, lr}
  40794a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40794c:	4b05      	ldr	r3, [pc, #20]	; (407964 <lv_obj_get_ext_attr+0x1c>)
  40794e:	4798      	blx	r3
  407950:	b108      	cbz	r0, 407956 <lv_obj_get_ext_attr+0xe>
}
  407952:	6a60      	ldr	r0, [r4, #36]	; 0x24
  407954:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407956:	4622      	mov	r2, r4
  407958:	2300      	movs	r3, #0
  40795a:	4803      	ldr	r0, [pc, #12]	; (407968 <lv_obj_get_ext_attr+0x20>)
  40795c:	4903      	ldr	r1, [pc, #12]	; (40796c <lv_obj_get_ext_attr+0x24>)
  40795e:	4788      	blx	r1
  407960:	e7fe      	b.n	407960 <lv_obj_get_ext_attr+0x18>
  407962:	bf00      	nop
  407964:	0041552d 	.word	0x0041552d
  407968:	00423604 	.word	0x00423604
  40796c:	00415539 	.word	0x00415539

00407970 <lv_obj_get_group>:
{
  407970:	b510      	push	{r4, lr}
  407972:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407974:	4b05      	ldr	r3, [pc, #20]	; (40798c <lv_obj_get_group+0x1c>)
  407976:	4798      	blx	r3
  407978:	b108      	cbz	r0, 40797e <lv_obj_get_group+0xe>
}
  40797a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  40797c:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40797e:	4622      	mov	r2, r4
  407980:	2300      	movs	r3, #0
  407982:	4803      	ldr	r0, [pc, #12]	; (407990 <lv_obj_get_group+0x20>)
  407984:	4903      	ldr	r1, [pc, #12]	; (407994 <lv_obj_get_group+0x24>)
  407986:	4788      	blx	r1
  407988:	e7fe      	b.n	407988 <lv_obj_get_group+0x18>
  40798a:	bf00      	nop
  40798c:	0041552d 	.word	0x0041552d
  407990:	00423604 	.word	0x00423604
  407994:	00415539 	.word	0x00415539

00407998 <obj_del_core>:
{
  407998:	b570      	push	{r4, r5, r6, lr}
  40799a:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  40799c:	2200      	movs	r2, #0
  40799e:	2115      	movs	r1, #21
  4079a0:	4b33      	ldr	r3, [pc, #204]	; (407a70 <obj_del_core+0xd8>)
  4079a2:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  4079a4:	4628      	mov	r0, r5
  4079a6:	4b33      	ldr	r3, [pc, #204]	; (407a74 <obj_del_core+0xdc>)
  4079a8:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  4079aa:	4606      	mov	r6, r0
  4079ac:	b110      	cbz	r0, 4079b4 <obj_del_core+0x1c>
  4079ae:	4628      	mov	r0, r5
  4079b0:	4b31      	ldr	r3, [pc, #196]	; (407a78 <obj_del_core+0xe0>)
  4079b2:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  4079b4:	2100      	movs	r1, #0
  4079b6:	4628      	mov	r0, r5
  4079b8:	4b30      	ldr	r3, [pc, #192]	; (407a7c <obj_del_core+0xe4>)
  4079ba:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  4079bc:	2300      	movs	r3, #0
  4079be:	22ff      	movs	r2, #255	; 0xff
  4079c0:	4611      	mov	r1, r2
  4079c2:	4628      	mov	r0, r5
  4079c4:	4c2e      	ldr	r4, [pc, #184]	; (407a80 <obj_del_core+0xe8>)
  4079c6:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  4079c8:	1d2c      	adds	r4, r5, #4
  4079ca:	4620      	mov	r0, r4
  4079cc:	4b2d      	ldr	r3, [pc, #180]	; (407a84 <obj_del_core+0xec>)
  4079ce:	4798      	blx	r3
    while(i != NULL) {
  4079d0:	e004      	b.n	4079dc <obj_del_core+0x44>
        obj_del_core(i);
  4079d2:	f7ff ffe1 	bl	407998 <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  4079d6:	4620      	mov	r0, r4
  4079d8:	4b2a      	ldr	r3, [pc, #168]	; (407a84 <obj_del_core+0xec>)
  4079da:	4798      	blx	r3
    while(i != NULL) {
  4079dc:	2800      	cmp	r0, #0
  4079de:	d1f8      	bne.n	4079d2 <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  4079e0:	4628      	mov	r0, r5
  4079e2:	4b29      	ldr	r3, [pc, #164]	; (407a88 <obj_del_core+0xf0>)
  4079e4:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  4079e6:	2000      	movs	r0, #0
  4079e8:	4b28      	ldr	r3, [pc, #160]	; (407a8c <obj_del_core+0xf4>)
  4079ea:	4798      	blx	r3
  4079ec:	4604      	mov	r4, r0
    while(indev) {
  4079ee:	e00d      	b.n	407a0c <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  4079f0:	4629      	mov	r1, r5
  4079f2:	4620      	mov	r0, r4
  4079f4:	4b26      	ldr	r3, [pc, #152]	; (407a90 <obj_del_core+0xf8>)
  4079f6:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  4079f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4079fa:	429d      	cmp	r5, r3
  4079fc:	d00e      	beq.n	407a1c <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  4079fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
  407a00:	429e      	cmp	r6, r3
  407a02:	d00e      	beq.n	407a22 <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  407a04:	4620      	mov	r0, r4
  407a06:	4b21      	ldr	r3, [pc, #132]	; (407a8c <obj_del_core+0xf4>)
  407a08:	4798      	blx	r3
  407a0a:	4604      	mov	r4, r0
    while(indev) {
  407a0c:	b194      	cbz	r4, 407a34 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  407a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
  407a10:	429d      	cmp	r5, r3
  407a12:	d0ed      	beq.n	4079f0 <obj_del_core+0x58>
  407a14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407a16:	429d      	cmp	r5, r3
  407a18:	d1ee      	bne.n	4079f8 <obj_del_core+0x60>
  407a1a:	e7e9      	b.n	4079f0 <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  407a1c:	2300      	movs	r3, #0
  407a1e:	63e3      	str	r3, [r4, #60]	; 0x3c
  407a20:	e7ed      	b.n	4079fe <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407a22:	4b1c      	ldr	r3, [pc, #112]	; (407a94 <obj_del_core+0xfc>)
  407a24:	4798      	blx	r3
  407a26:	4285      	cmp	r5, r0
  407a28:	d1ec      	bne.n	407a04 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  407a2a:	4629      	mov	r1, r5
  407a2c:	4620      	mov	r0, r4
  407a2e:	4b18      	ldr	r3, [pc, #96]	; (407a90 <obj_del_core+0xf8>)
  407a30:	4798      	blx	r3
  407a32:	e7e7      	b.n	407a04 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  407a34:	69eb      	ldr	r3, [r5, #28]
  407a36:	2200      	movs	r2, #0
  407a38:	4611      	mov	r1, r2
  407a3a:	4628      	mov	r0, r5
  407a3c:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407a3e:	4628      	mov	r0, r5
  407a40:	4b15      	ldr	r3, [pc, #84]	; (407a98 <obj_del_core+0x100>)
  407a42:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  407a44:	b158      	cbz	r0, 407a5e <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  407a46:	4629      	mov	r1, r5
  407a48:	3004      	adds	r0, #4
  407a4a:	4b14      	ldr	r3, [pc, #80]	; (407a9c <obj_del_core+0x104>)
  407a4c:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  407a4e:	6a68      	ldr	r0, [r5, #36]	; 0x24
  407a50:	b108      	cbz	r0, 407a56 <obj_del_core+0xbe>
  407a52:	4b13      	ldr	r3, [pc, #76]	; (407aa0 <obj_del_core+0x108>)
  407a54:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  407a56:	4628      	mov	r0, r5
  407a58:	4b11      	ldr	r3, [pc, #68]	; (407aa0 <obj_del_core+0x108>)
  407a5a:	4798      	blx	r3
  407a5c:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  407a5e:	4628      	mov	r0, r5
  407a60:	4b10      	ldr	r3, [pc, #64]	; (407aa4 <obj_del_core+0x10c>)
  407a62:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  407a64:	4629      	mov	r1, r5
  407a66:	3038      	adds	r0, #56	; 0x38
  407a68:	4b0c      	ldr	r3, [pc, #48]	; (407a9c <obj_del_core+0x104>)
  407a6a:	4798      	blx	r3
  407a6c:	e7ef      	b.n	407a4e <obj_del_core+0xb6>
  407a6e:	bf00      	nop
  407a70:	00405339 	.word	0x00405339
  407a74:	00407971 	.word	0x00407971
  407a78:	0040347d 	.word	0x0040347d
  407a7c:	00414ae9 	.word	0x00414ae9
  407a80:	004056ad 	.word	0x004056ad
  407a84:	0041583d 	.word	0x0041583d
  407a88:	00404ec1 	.word	0x00404ec1
  407a8c:	00414781 	.word	0x00414781
  407a90:	004047fd 	.word	0x004047fd
  407a94:	00404889 	.word	0x00404889
  407a98:	00405449 	.word	0x00405449
  407a9c:	004158f9 	.word	0x004158f9
  407aa0:	00415cf9 	.word	0x00415cf9
  407aa4:	004054a9 	.word	0x004054a9

00407aa8 <lv_obj_del>:
{
  407aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407aaa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407aac:	4b16      	ldr	r3, [pc, #88]	; (407b08 <lv_obj_del+0x60>)
  407aae:	4798      	blx	r3
  407ab0:	b928      	cbnz	r0, 407abe <lv_obj_del+0x16>
  407ab2:	4622      	mov	r2, r4
  407ab4:	2300      	movs	r3, #0
  407ab6:	4815      	ldr	r0, [pc, #84]	; (407b0c <lv_obj_del+0x64>)
  407ab8:	4915      	ldr	r1, [pc, #84]	; (407b10 <lv_obj_del+0x68>)
  407aba:	4788      	blx	r1
  407abc:	e7fe      	b.n	407abc <lv_obj_del+0x14>
  407abe:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  407ac0:	4620      	mov	r0, r4
  407ac2:	4b14      	ldr	r3, [pc, #80]	; (407b14 <lv_obj_del+0x6c>)
  407ac4:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407ac6:	4620      	mov	r0, r4
  407ac8:	4b13      	ldr	r3, [pc, #76]	; (407b18 <lv_obj_del+0x70>)
  407aca:	4798      	blx	r3
    if(par == NULL) {
  407acc:	4607      	mov	r7, r0
  407ace:	b178      	cbz	r0, 407af0 <lv_obj_del+0x48>
    bool act_scr_del = false;
  407ad0:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  407ad2:	462e      	mov	r6, r5
    obj_del_core(obj);
  407ad4:	4620      	mov	r0, r4
  407ad6:	4b11      	ldr	r3, [pc, #68]	; (407b1c <lv_obj_del+0x74>)
  407ad8:	4798      	blx	r3
    if(par) {
  407ada:	b127      	cbz	r7, 407ae6 <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  407adc:	69fb      	ldr	r3, [r7, #28]
  407ade:	2200      	movs	r2, #0
  407ae0:	2101      	movs	r1, #1
  407ae2:	4638      	mov	r0, r7
  407ae4:	4798      	blx	r3
    if(act_scr_del)  {
  407ae6:	b10d      	cbz	r5, 407aec <lv_obj_del+0x44>
        disp->act_scr = NULL;
  407ae8:	2300      	movs	r3, #0
  407aea:	6473      	str	r3, [r6, #68]	; 0x44
}
  407aec:	2000      	movs	r0, #0
  407aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  407af0:	4620      	mov	r0, r4
  407af2:	4b0b      	ldr	r3, [pc, #44]	; (407b20 <lv_obj_del+0x78>)
  407af4:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  407af6:	4606      	mov	r6, r0
  407af8:	2800      	cmp	r0, #0
  407afa:	d0f7      	beq.n	407aec <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  407afc:	6c43      	ldr	r3, [r0, #68]	; 0x44
  407afe:	429c      	cmp	r4, r3
  407b00:	d0e8      	beq.n	407ad4 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  407b02:	2500      	movs	r5, #0
  407b04:	e7e6      	b.n	407ad4 <lv_obj_del+0x2c>
  407b06:	bf00      	nop
  407b08:	0041552d 	.word	0x0041552d
  407b0c:	00423604 	.word	0x00423604
  407b10:	00415539 	.word	0x00415539
  407b14:	004059c9 	.word	0x004059c9
  407b18:	00405449 	.word	0x00405449
  407b1c:	00407999 	.word	0x00407999
  407b20:	004054a9 	.word	0x004054a9

00407b24 <lv_obj_is_focused>:
{
  407b24:	b538      	push	{r3, r4, r5, lr}
  407b26:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b28:	4b0a      	ldr	r3, [pc, #40]	; (407b54 <lv_obj_is_focused+0x30>)
  407b2a:	4798      	blx	r3
  407b2c:	b148      	cbz	r0, 407b42 <lv_obj_is_focused+0x1e>
  407b2e:	4604      	mov	r4, r0
    if(obj->group_p) {
  407b30:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  407b32:	b160      	cbz	r0, 407b4e <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  407b34:	4b08      	ldr	r3, [pc, #32]	; (407b58 <lv_obj_is_focused+0x34>)
  407b36:	4798      	blx	r3
  407b38:	4285      	cmp	r5, r0
  407b3a:	d000      	beq.n	407b3e <lv_obj_is_focused+0x1a>
    return false;
  407b3c:	2400      	movs	r4, #0
}
  407b3e:	4620      	mov	r0, r4
  407b40:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b42:	462a      	mov	r2, r5
  407b44:	2300      	movs	r3, #0
  407b46:	4805      	ldr	r0, [pc, #20]	; (407b5c <lv_obj_is_focused+0x38>)
  407b48:	4905      	ldr	r1, [pc, #20]	; (407b60 <lv_obj_is_focused+0x3c>)
  407b4a:	4788      	blx	r1
  407b4c:	e7fe      	b.n	407b4c <lv_obj_is_focused+0x28>
    return false;
  407b4e:	2400      	movs	r4, #0
  407b50:	e7f5      	b.n	407b3e <lv_obj_is_focused+0x1a>
  407b52:	bf00      	nop
  407b54:	0041552d 	.word	0x0041552d
  407b58:	00403529 	.word	0x00403529
  407b5c:	00423604 	.word	0x00423604
  407b60:	00415539 	.word	0x00415539

00407b64 <lv_obj_is_point_on_coords>:
{
  407b64:	b500      	push	{lr}
  407b66:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  407b68:	8a02      	ldrh	r2, [r0, #16]
  407b6a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  407b6e:	1ad2      	subs	r2, r2, r3
  407b70:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  407b74:	8a82      	ldrh	r2, [r0, #20]
  407b76:	4413      	add	r3, r2
  407b78:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  407b7c:	8a42      	ldrh	r2, [r0, #18]
  407b7e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  407b82:	1ad2      	subs	r2, r2, r3
  407b84:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  407b88:	8ac2      	ldrh	r2, [r0, #22]
  407b8a:	4413      	add	r3, r2
  407b8c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  407b90:	2200      	movs	r2, #0
  407b92:	4668      	mov	r0, sp
  407b94:	4b02      	ldr	r3, [pc, #8]	; (407ba0 <lv_obj_is_point_on_coords+0x3c>)
  407b96:	4798      	blx	r3
}
  407b98:	b003      	add	sp, #12
  407b9a:	f85d fb04 	ldr.w	pc, [sp], #4
  407b9e:	bf00      	nop
  407ba0:	00414d09 	.word	0x00414d09

00407ba4 <lv_obj_hittest>:
{
  407ba4:	b500      	push	{lr}
  407ba6:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  407ba8:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  407bac:	2b00      	cmp	r3, #0
  407bae:	db04      	blt.n	407bba <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  407bb0:	4b07      	ldr	r3, [pc, #28]	; (407bd0 <lv_obj_hittest+0x2c>)
  407bb2:	4798      	blx	r3
}
  407bb4:	b003      	add	sp, #12
  407bb6:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  407bba:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  407bbc:	2301      	movs	r3, #1
  407bbe:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  407bc2:	69c3      	ldr	r3, [r0, #28]
  407bc4:	466a      	mov	r2, sp
  407bc6:	210a      	movs	r1, #10
  407bc8:	4798      	blx	r3
        return hit_info.result;
  407bca:	f89d 0004 	ldrb.w	r0, [sp, #4]
  407bce:	e7f1      	b.n	407bb4 <lv_obj_hittest+0x10>
  407bd0:	00407b65 	.word	0x00407b65

00407bd4 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407bd4:	2300      	movs	r3, #0
  407bd6:	2b06      	cmp	r3, #6
  407bd8:	d805      	bhi.n	407be6 <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  407bda:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  407bde:	b112      	cbz	r2, 407be6 <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407be0:	3301      	adds	r3, #1
  407be2:	b2db      	uxtb	r3, r3
  407be4:	e7f7      	b.n	407bd6 <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  407be6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  407bea:	2001      	movs	r0, #1
  407bec:	4770      	bx	lr
	...

00407bf0 <lv_obj_init_draw_rect_dsc>:
{
  407bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407bf4:	4605      	mov	r5, r0
  407bf6:	460e      	mov	r6, r1
  407bf8:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407bfa:	2201      	movs	r2, #1
  407bfc:	4ba9      	ldr	r3, [pc, #676]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407bfe:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  407c00:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407c02:	f248 020c 	movw	r2, #32780	; 0x800c
  407c06:	4631      	mov	r1, r6
  407c08:	4628      	mov	r0, r5
  407c0a:	4ba7      	ldr	r3, [pc, #668]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407c0c:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  407c0e:	2802      	cmp	r0, #2
  407c10:	d966      	bls.n	407ce0 <lv_obj_init_draw_rect_dsc+0xf0>
  407c12:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  407c14:	7b23      	ldrb	r3, [r4, #12]
  407c16:	2b00      	cmp	r3, #0
  407c18:	d16d      	bne.n	407cf6 <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  407c1a:	2230      	movs	r2, #48	; 0x30
  407c1c:	4631      	mov	r1, r6
  407c1e:	4628      	mov	r0, r5
  407c20:	4ba0      	ldr	r3, [pc, #640]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407c22:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  407c24:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  407c26:	b118      	cbz	r0, 407c30 <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  407c28:	7d23      	ldrb	r3, [r4, #20]
  407c2a:	2b00      	cmp	r3, #0
  407c2c:	f040 8093 	bne.w	407d56 <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  407c30:	2240      	movs	r2, #64	; 0x40
  407c32:	4631      	mov	r1, r6
  407c34:	4628      	mov	r0, r5
  407c36:	4b9b      	ldr	r3, [pc, #620]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407c38:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  407c3a:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  407c3c:	b118      	cbz	r0, 407c46 <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  407c3e:	7fa3      	ldrb	r3, [r4, #30]
  407c40:	2b00      	cmp	r3, #0
  407c42:	f040 80a5 	bne.w	407d90 <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  407c46:	226e      	movs	r2, #110	; 0x6e
  407c48:	4631      	mov	r1, r6
  407c4a:	4628      	mov	r0, r5
  407c4c:	4b97      	ldr	r3, [pc, #604]	; (407eac <lv_obj_init_draw_rect_dsc+0x2bc>)
  407c4e:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  407c50:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  407c52:	b120      	cbz	r0, 407c5e <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  407c54:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  407c58:	2b00      	cmp	r3, #0
  407c5a:	f040 80b5 	bne.w	407dc8 <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  407c5e:	2250      	movs	r2, #80	; 0x50
  407c60:	4631      	mov	r1, r6
  407c62:	4628      	mov	r0, r5
  407c64:	4b8f      	ldr	r3, [pc, #572]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407c66:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  407c68:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  407c6a:	b120      	cbz	r0, 407c76 <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  407c6c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407c70:	2b02      	cmp	r3, #2
  407c72:	f200 80ee 	bhi.w	407e52 <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  407c76:	227f      	movs	r2, #127	; 0x7f
  407c78:	4631      	mov	r1, r6
  407c7a:	4628      	mov	r0, r5
  407c7c:	4b8b      	ldr	r3, [pc, #556]	; (407eac <lv_obj_init_draw_rect_dsc+0x2bc>)
  407c7e:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  407c80:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  407c82:	b120      	cbz	r0, 407c8e <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  407c84:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407c88:	2b02      	cmp	r3, #2
  407c8a:	f200 8115 	bhi.w	407eb8 <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  407c8e:	2ffc      	cmp	r7, #252	; 0xfc
  407c90:	d824      	bhi.n	407cdc <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  407c92:	7b23      	ldrb	r3, [r4, #12]
  407c94:	b2bf      	uxth	r7, r7
  407c96:	fb13 f307 	smulbb	r3, r3, r7
  407c9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407c9e:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  407ca0:	7d23      	ldrb	r3, [r4, #20]
  407ca2:	fb17 f303 	smulbb	r3, r7, r3
  407ca6:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407caa:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  407cac:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407cb0:	fb17 f303 	smulbb	r3, r7, r3
  407cb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407cb8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  407cbc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  407cc0:	fb17 f303 	smulbb	r3, r7, r3
  407cc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407cc8:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  407ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407cd0:	fb17 f703 	smulbb	r7, r7, r3
  407cd4:	f3c7 2707 	ubfx	r7, r7, #8, #8
  407cd8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  407cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  407ce0:	2300      	movs	r3, #0
  407ce2:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  407ce4:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  407ce6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  407cea:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  407cee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  407cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407cf6:	222c      	movs	r2, #44	; 0x2c
  407cf8:	4631      	mov	r1, r6
  407cfa:	4628      	mov	r0, r5
  407cfc:	4b6a      	ldr	r3, [pc, #424]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407cfe:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  407d00:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  407d02:	2802      	cmp	r0, #2
  407d04:	d989      	bls.n	407c1a <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  407d06:	2229      	movs	r2, #41	; 0x29
  407d08:	4631      	mov	r1, r6
  407d0a:	4628      	mov	r0, r5
  407d0c:	4b68      	ldr	r3, [pc, #416]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407d0e:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  407d10:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  407d12:	2223      	movs	r2, #35	; 0x23
  407d14:	4631      	mov	r1, r6
  407d16:	4628      	mov	r0, r5
  407d18:	4b62      	ldr	r3, [pc, #392]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407d1a:	4798      	blx	r3
  407d1c:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  407d1e:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  407d20:	b930      	cbnz	r0, 407d30 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407d22:	2220      	movs	r2, #32
  407d24:	4631      	mov	r1, r6
  407d26:	4628      	mov	r0, r5
  407d28:	4b5e      	ldr	r3, [pc, #376]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407d2a:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  407d2c:	7360      	strb	r0, [r4, #13]
  407d2e:	e774      	b.n	407c1a <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  407d30:	222a      	movs	r2, #42	; 0x2a
  407d32:	4631      	mov	r1, r6
  407d34:	4628      	mov	r0, r5
  407d36:	4b5e      	ldr	r3, [pc, #376]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407d38:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  407d3a:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  407d3c:	2221      	movs	r2, #33	; 0x21
  407d3e:	4631      	mov	r1, r6
  407d40:	4628      	mov	r0, r5
  407d42:	f8df 8160 	ldr.w	r8, [pc, #352]	; 407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>
  407d46:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  407d48:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  407d4a:	2222      	movs	r2, #34	; 0x22
  407d4c:	4631      	mov	r1, r6
  407d4e:	4628      	mov	r0, r5
  407d50:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  407d52:	8160      	strh	r0, [r4, #10]
  407d54:	e7e5      	b.n	407d22 <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  407d56:	223c      	movs	r2, #60	; 0x3c
  407d58:	4631      	mov	r1, r6
  407d5a:	4628      	mov	r0, r5
  407d5c:	4b52      	ldr	r3, [pc, #328]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407d5e:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  407d60:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  407d62:	2802      	cmp	r0, #2
  407d64:	d806      	bhi.n	407d74 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  407d66:	2232      	movs	r2, #50	; 0x32
  407d68:	4631      	mov	r1, r6
  407d6a:	4628      	mov	r0, r5
  407d6c:	4b4d      	ldr	r3, [pc, #308]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407d6e:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  407d70:	7560      	strb	r0, [r4, #21]
  407d72:	e75d      	b.n	407c30 <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  407d74:	2231      	movs	r2, #49	; 0x31
  407d76:	4631      	mov	r1, r6
  407d78:	4628      	mov	r0, r5
  407d7a:	4b4a      	ldr	r3, [pc, #296]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407d7c:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  407d7e:	b2c0      	uxtb	r0, r0
  407d80:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  407d82:	2239      	movs	r2, #57	; 0x39
  407d84:	4631      	mov	r1, r6
  407d86:	4628      	mov	r0, r5
  407d88:	4b49      	ldr	r3, [pc, #292]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407d8a:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  407d8c:	81e0      	strh	r0, [r4, #14]
  407d8e:	e7ea      	b.n	407d66 <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  407d90:	224c      	movs	r2, #76	; 0x4c
  407d92:	4631      	mov	r1, r6
  407d94:	4628      	mov	r0, r5
  407d96:	4b44      	ldr	r3, [pc, #272]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407d98:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  407d9a:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  407d9c:	2802      	cmp	r0, #2
  407d9e:	d806      	bhi.n	407dae <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  407da0:	2242      	movs	r2, #66	; 0x42
  407da2:	4631      	mov	r1, r6
  407da4:	4628      	mov	r0, r5
  407da6:	4b3f      	ldr	r3, [pc, #252]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407da8:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  407daa:	77e0      	strb	r0, [r4, #31]
  407dac:	e74b      	b.n	407c46 <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  407dae:	2241      	movs	r2, #65	; 0x41
  407db0:	4631      	mov	r1, r6
  407db2:	4628      	mov	r0, r5
  407db4:	4b3b      	ldr	r3, [pc, #236]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407db6:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  407db8:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  407dba:	2249      	movs	r2, #73	; 0x49
  407dbc:	4631      	mov	r1, r6
  407dbe:	4628      	mov	r0, r5
  407dc0:	4b3b      	ldr	r3, [pc, #236]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407dc2:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  407dc4:	8320      	strh	r0, [r4, #24]
  407dc6:	e7eb      	b.n	407da0 <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  407dc8:	226c      	movs	r2, #108	; 0x6c
  407dca:	4631      	mov	r1, r6
  407dcc:	4628      	mov	r0, r5
  407dce:	4b36      	ldr	r3, [pc, #216]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407dd0:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  407dd2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  407dd6:	2802      	cmp	r0, #2
  407dd8:	f67f af41 	bls.w	407c5e <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  407ddc:	226d      	movs	r2, #109	; 0x6d
  407dde:	4631      	mov	r1, r6
  407de0:	4628      	mov	r0, r5
  407de2:	4b31      	ldr	r3, [pc, #196]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407de4:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  407de6:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  407dea:	2261      	movs	r2, #97	; 0x61
  407dec:	4631      	mov	r1, r6
  407dee:	4628      	mov	r0, r5
  407df0:	4b2c      	ldr	r3, [pc, #176]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407df2:	4798      	blx	r3
  407df4:	3000      	adds	r0, #0
  407df6:	bf18      	it	ne
  407df8:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  407dfa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  407dfe:	f360 0300 	bfi	r3, r0, #0, #1
  407e02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  407e06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  407e08:	4b2a      	ldr	r3, [pc, #168]	; (407eb4 <lv_obj_init_draw_rect_dsc+0x2c4>)
  407e0a:	4798      	blx	r3
  407e0c:	2802      	cmp	r0, #2
  407e0e:	d00b      	beq.n	407e28 <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  407e10:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  407e14:	2b02      	cmp	r3, #2
  407e16:	d815      	bhi.n	407e44 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  407e18:	2260      	movs	r2, #96	; 0x60
  407e1a:	4631      	mov	r1, r6
  407e1c:	4628      	mov	r0, r5
  407e1e:	4b21      	ldr	r3, [pc, #132]	; (407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407e20:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  407e22:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  407e26:	e71a      	b.n	407c5e <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  407e28:	2269      	movs	r2, #105	; 0x69
  407e2a:	4631      	mov	r1, r6
  407e2c:	4628      	mov	r0, r5
  407e2e:	4b20      	ldr	r3, [pc, #128]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407e30:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  407e32:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407e34:	f248 028e 	movw	r2, #32910	; 0x808e
  407e38:	4631      	mov	r1, r6
  407e3a:	4628      	mov	r0, r5
  407e3c:	4b1b      	ldr	r3, [pc, #108]	; (407eac <lv_obj_init_draw_rect_dsc+0x2bc>)
  407e3e:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  407e40:	6320      	str	r0, [r4, #48]	; 0x30
  407e42:	e7e9      	b.n	407e18 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  407e44:	2269      	movs	r2, #105	; 0x69
  407e46:	4631      	mov	r1, r6
  407e48:	4628      	mov	r0, r5
  407e4a:	4b19      	ldr	r3, [pc, #100]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407e4c:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  407e4e:	86a0      	strh	r0, [r4, #52]	; 0x34
  407e50:	e7e2      	b.n	407e18 <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  407e52:	225c      	movs	r2, #92	; 0x5c
  407e54:	4631      	mov	r1, r6
  407e56:	4628      	mov	r0, r5
  407e58:	4b13      	ldr	r3, [pc, #76]	; (407ea8 <lv_obj_init_draw_rect_dsc+0x2b8>)
  407e5a:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  407e5c:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  407e60:	2802      	cmp	r0, #2
  407e62:	f67f af08 	bls.w	407c76 <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  407e66:	2251      	movs	r2, #81	; 0x51
  407e68:	4631      	mov	r1, r6
  407e6a:	4628      	mov	r0, r5
  407e6c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 407ea4 <lv_obj_init_draw_rect_dsc+0x2b4>
  407e70:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  407e72:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  407e74:	2252      	movs	r2, #82	; 0x52
  407e76:	4631      	mov	r1, r6
  407e78:	4628      	mov	r0, r5
  407e7a:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  407e7c:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  407e7e:	2253      	movs	r2, #83	; 0x53
  407e80:	4631      	mov	r1, r6
  407e82:	4628      	mov	r0, r5
  407e84:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  407e86:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  407e88:	2259      	movs	r2, #89	; 0x59
  407e8a:	4631      	mov	r1, r6
  407e8c:	4628      	mov	r0, r5
  407e8e:	4b08      	ldr	r3, [pc, #32]	; (407eb0 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407e90:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  407e92:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  407e94:	2254      	movs	r2, #84	; 0x54
  407e96:	4631      	mov	r1, r6
  407e98:	4628      	mov	r0, r5
  407e9a:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  407e9c:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  407ea0:	e6e9      	b.n	407c76 <lv_obj_init_draw_rect_dsc+0x86>
  407ea2:	bf00      	nop
  407ea4:	00406e35 	.word	0x00406e35
  407ea8:	004068a9 	.word	0x004068a9
  407eac:	00406d2d 	.word	0x00406d2d
  407eb0:	00406821 	.word	0x00406821
  407eb4:	0040ce8d 	.word	0x0040ce8d
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  407eb8:	227c      	movs	r2, #124	; 0x7c
  407eba:	4631      	mov	r1, r6
  407ebc:	4628      	mov	r0, r5
  407ebe:	4b1d      	ldr	r3, [pc, #116]	; (407f34 <lv_obj_init_draw_rect_dsc+0x344>)
  407ec0:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  407ec2:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  407ec6:	2802      	cmp	r0, #2
  407ec8:	f67f aee1 	bls.w	407c8e <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  407ecc:	2273      	movs	r2, #115	; 0x73
  407ece:	4631      	mov	r1, r6
  407ed0:	4628      	mov	r0, r5
  407ed2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 407f40 <lv_obj_init_draw_rect_dsc+0x350>
  407ed6:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  407ed8:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  407edc:	2274      	movs	r2, #116	; 0x74
  407ede:	4631      	mov	r1, r6
  407ee0:	4628      	mov	r0, r5
  407ee2:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  407ee4:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  407ee8:	2279      	movs	r2, #121	; 0x79
  407eea:	4631      	mov	r1, r6
  407eec:	4628      	mov	r0, r5
  407eee:	4b12      	ldr	r3, [pc, #72]	; (407f38 <lv_obj_init_draw_rect_dsc+0x348>)
  407ef0:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  407ef2:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  407ef6:	227e      	movs	r2, #126	; 0x7e
  407ef8:	4631      	mov	r1, r6
  407efa:	4628      	mov	r0, r5
  407efc:	4b0f      	ldr	r3, [pc, #60]	; (407f3c <lv_obj_init_draw_rect_dsc+0x34c>)
  407efe:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  407f00:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  407f02:	2270      	movs	r2, #112	; 0x70
  407f04:	4631      	mov	r1, r6
  407f06:	4628      	mov	r0, r5
  407f08:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  407f0a:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  407f0e:	2271      	movs	r2, #113	; 0x71
  407f10:	4631      	mov	r1, r6
  407f12:	4628      	mov	r0, r5
  407f14:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  407f16:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  407f1a:	2275      	movs	r2, #117	; 0x75
  407f1c:	4631      	mov	r1, r6
  407f1e:	4628      	mov	r0, r5
  407f20:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  407f22:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  407f26:	2272      	movs	r2, #114	; 0x72
  407f28:	4631      	mov	r1, r6
  407f2a:	4628      	mov	r0, r5
  407f2c:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  407f2e:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  407f32:	e6ac      	b.n	407c8e <lv_obj_init_draw_rect_dsc+0x9e>
  407f34:	004068a9 	.word	0x004068a9
  407f38:	00406821 	.word	0x00406821
  407f3c:	00406d2d 	.word	0x00406d2d
  407f40:	00406e35 	.word	0x00406e35

00407f44 <lv_obj_design>:
{
  407f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407f48:	b09a      	sub	sp, #104	; 0x68
  407f4a:	4604      	mov	r4, r0
  407f4c:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  407f4e:	2a02      	cmp	r2, #2
  407f50:	d008      	beq.n	407f64 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  407f52:	2a00      	cmp	r2, #0
  407f54:	d06d      	beq.n	408032 <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  407f56:	2a01      	cmp	r2, #1
  407f58:	f000 80f4 	beq.w	408144 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  407f5c:	2000      	movs	r0, #0
}
  407f5e:	b01a      	add	sp, #104	; 0x68
  407f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  407f64:	2100      	movs	r1, #0
  407f66:	4ba3      	ldr	r3, [pc, #652]	; (4081f4 <lv_obj_design+0x2b0>)
  407f68:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  407f6a:	b108      	cbz	r0, 407f70 <lv_obj_design+0x2c>
  407f6c:	2003      	movs	r0, #3
  407f6e:	e7f6      	b.n	407f5e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407f70:	2201      	movs	r2, #1
  407f72:	2100      	movs	r1, #0
  407f74:	4620      	mov	r0, r4
  407f76:	4d9f      	ldr	r5, [pc, #636]	; (4081f4 <lv_obj_design+0x2b0>)
  407f78:	47a8      	blx	r5
  407f7a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  407f7c:	2204      	movs	r2, #4
  407f7e:	2100      	movs	r1, #0
  407f80:	4620      	mov	r0, r4
  407f82:	47a8      	blx	r5
  407f84:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  407f86:	2205      	movs	r2, #5
  407f88:	2100      	movs	r1, #0
  407f8a:	4620      	mov	r0, r4
  407f8c:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  407f8e:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  407f92:	aa05      	add	r2, sp, #20
  407f94:	2308      	movs	r3, #8
    while(len) {
  407f96:	b12b      	cbz	r3, 407fa4 <lv_obj_design+0x60>
        *d8 = *s8;
  407f98:	f811 5b01 	ldrb.w	r5, [r1], #1
  407f9c:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  407fa0:	3b01      	subs	r3, #1
  407fa2:	e7f8      	b.n	407f96 <lv_obj_design+0x52>
        coords.x1 -= w;
  407fa4:	fa1f f888 	uxth.w	r8, r8
  407fa8:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  407fac:	eba3 0308 	sub.w	r3, r3, r8
  407fb0:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  407fb4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  407fb8:	4498      	add	r8, r3
  407fba:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  407fbe:	b280      	uxth	r0, r0
  407fc0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  407fc4:	1a1b      	subs	r3, r3, r0
  407fc6:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  407fca:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  407fce:	4418      	add	r0, r3
  407fd0:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  407fd4:	463a      	mov	r2, r7
  407fd6:	a905      	add	r1, sp, #20
  407fd8:	4630      	mov	r0, r6
  407fda:	4b87      	ldr	r3, [pc, #540]	; (4081f8 <lv_obj_design+0x2b4>)
  407fdc:	4798      	blx	r3
  407fde:	b908      	cbnz	r0, 407fe4 <lv_obj_design+0xa0>
  407fe0:	2002      	movs	r0, #2
  407fe2:	e7bc      	b.n	407f5e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407fe4:	222c      	movs	r2, #44	; 0x2c
  407fe6:	2100      	movs	r1, #0
  407fe8:	4620      	mov	r0, r4
  407fea:	4b84      	ldr	r3, [pc, #528]	; (4081fc <lv_obj_design+0x2b8>)
  407fec:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  407fee:	28fc      	cmp	r0, #252	; 0xfc
  407ff0:	d801      	bhi.n	407ff6 <lv_obj_design+0xb2>
  407ff2:	2002      	movs	r0, #2
  407ff4:	e7b3      	b.n	407f5e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407ff6:	2220      	movs	r2, #32
  407ff8:	2100      	movs	r1, #0
  407ffa:	4620      	mov	r0, r4
  407ffc:	4b7d      	ldr	r3, [pc, #500]	; (4081f4 <lv_obj_design+0x2b0>)
  407ffe:	4798      	blx	r3
  408000:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408002:	b108      	cbz	r0, 408008 <lv_obj_design+0xc4>
  408004:	2002      	movs	r0, #2
  408006:	e7aa      	b.n	407f5e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  408008:	2232      	movs	r2, #50	; 0x32
  40800a:	2100      	movs	r1, #0
  40800c:	4620      	mov	r0, r4
  40800e:	4b79      	ldr	r3, [pc, #484]	; (4081f4 <lv_obj_design+0x2b0>)
  408010:	4798      	blx	r3
  408012:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408014:	b108      	cbz	r0, 40801a <lv_obj_design+0xd6>
  408016:	2002      	movs	r0, #2
  408018:	e7a1      	b.n	407f5e <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40801a:	f248 020c 	movw	r2, #32780	; 0x800c
  40801e:	2100      	movs	r1, #0
  408020:	4620      	mov	r0, r4
  408022:	4b76      	ldr	r3, [pc, #472]	; (4081fc <lv_obj_design+0x2b8>)
  408024:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408026:	28fc      	cmp	r0, #252	; 0xfc
  408028:	d901      	bls.n	40802e <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  40802a:	2001      	movs	r0, #1
  40802c:	e797      	b.n	407f5e <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40802e:	2002      	movs	r0, #2
  408030:	e795      	b.n	407f5e <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  408032:	a805      	add	r0, sp, #20
  408034:	4b72      	ldr	r3, [pc, #456]	; (408200 <lv_obj_design+0x2bc>)
  408036:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408038:	2233      	movs	r2, #51	; 0x33
  40803a:	2100      	movs	r1, #0
  40803c:	4620      	mov	r0, r4
  40803e:	4b6d      	ldr	r3, [pc, #436]	; (4081f4 <lv_obj_design+0x2b0>)
  408040:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  408042:	b128      	cbz	r0, 408050 <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  408044:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  408048:	f043 0301 	orr.w	r3, r3, #1
  40804c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408050:	aa05      	add	r2, sp, #20
  408052:	2100      	movs	r1, #0
  408054:	4620      	mov	r0, r4
  408056:	4b6b      	ldr	r3, [pc, #428]	; (408204 <lv_obj_design+0x2c0>)
  408058:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40805a:	2204      	movs	r2, #4
  40805c:	2100      	movs	r1, #0
  40805e:	4620      	mov	r0, r4
  408060:	4d64      	ldr	r5, [pc, #400]	; (4081f4 <lv_obj_design+0x2b0>)
  408062:	47a8      	blx	r5
  408064:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408066:	2205      	movs	r2, #5
  408068:	2100      	movs	r1, #0
  40806a:	4620      	mov	r0, r4
  40806c:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  40806e:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  408072:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  408074:	aa01      	add	r2, sp, #4
  408076:	2308      	movs	r3, #8
  408078:	e004      	b.n	408084 <lv_obj_design+0x140>
        *d8 = *s8;
  40807a:	f811 5b01 	ldrb.w	r5, [r1], #1
  40807e:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  408082:	3b01      	subs	r3, #1
    while(len) {
  408084:	2b00      	cmp	r3, #0
  408086:	d1f8      	bne.n	40807a <lv_obj_design+0x136>
        coords.x1 -= w;
  408088:	fa1f f888 	uxth.w	r8, r8
  40808c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  408090:	eba3 0308 	sub.w	r3, r3, r8
  408094:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  408098:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  40809c:	4498      	add	r8, r3
  40809e:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  4080a2:	b280      	uxth	r0, r0
  4080a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4080a8:	1a1b      	subs	r3, r3, r0
  4080aa:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  4080ae:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4080b2:	4418      	add	r0, r3
  4080b4:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  4080b8:	aa05      	add	r2, sp, #20
  4080ba:	4631      	mov	r1, r6
  4080bc:	a801      	add	r0, sp, #4
  4080be:	4b52      	ldr	r3, [pc, #328]	; (408208 <lv_obj_design+0x2c4>)
  4080c0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4080c2:	2202      	movs	r2, #2
  4080c4:	2100      	movs	r1, #0
  4080c6:	4620      	mov	r0, r4
  4080c8:	4b4a      	ldr	r3, [pc, #296]	; (4081f4 <lv_obj_design+0x2b0>)
  4080ca:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  4080cc:	b908      	cbnz	r0, 4080d2 <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  4080ce:	2000      	movs	r0, #0
  4080d0:	e745      	b.n	407f5e <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4080d2:	201c      	movs	r0, #28
  4080d4:	4b4d      	ldr	r3, [pc, #308]	; (40820c <lv_obj_design+0x2c8>)
  4080d6:	4798      	blx	r3
  4080d8:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4080da:	2201      	movs	r2, #1
  4080dc:	2100      	movs	r1, #0
  4080de:	4620      	mov	r0, r4
  4080e0:	4b44      	ldr	r3, [pc, #272]	; (4081f4 <lv_obj_design+0x2b0>)
  4080e2:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  4080e4:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4080e8:	f013 0f01 	tst.w	r3, #1
  4080ec:	d01e      	beq.n	40812c <lv_obj_design+0x1e8>
  4080ee:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  4080f2:	2b01      	cmp	r3, #1
  4080f4:	d91a      	bls.n	40812c <lv_obj_design+0x1e8>
  4080f6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  4080fa:	2b00      	cmp	r3, #0
  4080fc:	dd16      	ble.n	40812c <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  4080fe:	8a23      	ldrh	r3, [r4, #16]
  408100:	3301      	adds	r3, #1
  408102:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  408106:	8a63      	ldrh	r3, [r4, #18]
  408108:	3301      	adds	r3, #1
  40810a:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  40810e:	8aa3      	ldrh	r3, [r4, #20]
  408110:	3b01      	subs	r3, #1
  408112:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  408116:	8ae3      	ldrh	r3, [r4, #22]
  408118:	3b01      	subs	r3, #1
  40811a:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  40811e:	2300      	movs	r3, #0
  408120:	4602      	mov	r2, r0
  408122:	a903      	add	r1, sp, #12
  408124:	4628      	mov	r0, r5
  408126:	4e3a      	ldr	r6, [pc, #232]	; (408210 <lv_obj_design+0x2cc>)
  408128:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  40812a:	e005      	b.n	408138 <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  40812c:	2300      	movs	r3, #0
  40812e:	4602      	mov	r2, r0
  408130:	4639      	mov	r1, r7
  408132:	4628      	mov	r0, r5
  408134:	4e36      	ldr	r6, [pc, #216]	; (408210 <lv_obj_design+0x2cc>)
  408136:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  408138:	f504 7118 	add.w	r1, r4, #608	; 0x260
  40813c:	4628      	mov	r0, r5
  40813e:	4b35      	ldr	r3, [pc, #212]	; (408214 <lv_obj_design+0x2d0>)
  408140:	4798      	blx	r3
  408142:	e7c4      	b.n	4080ce <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408144:	2202      	movs	r2, #2
  408146:	2100      	movs	r1, #0
  408148:	4b2a      	ldr	r3, [pc, #168]	; (4081f4 <lv_obj_design+0x2b0>)
  40814a:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  40814c:	b938      	cbnz	r0, 40815e <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40814e:	2233      	movs	r2, #51	; 0x33
  408150:	2100      	movs	r1, #0
  408152:	4620      	mov	r0, r4
  408154:	4b27      	ldr	r3, [pc, #156]	; (4081f4 <lv_obj_design+0x2b0>)
  408156:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  408158:	b940      	cbnz	r0, 40816c <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  40815a:	2000      	movs	r0, #0
  40815c:	e6ff      	b.n	407f5e <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  40815e:	f504 7018 	add.w	r0, r4, #608	; 0x260
  408162:	4b2d      	ldr	r3, [pc, #180]	; (408218 <lv_obj_design+0x2d4>)
  408164:	4798      	blx	r3
            _lv_mem_buf_release(param);
  408166:	4b2d      	ldr	r3, [pc, #180]	; (40821c <lv_obj_design+0x2d8>)
  408168:	4798      	blx	r3
  40816a:	e7f0      	b.n	40814e <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  40816c:	a805      	add	r0, sp, #20
  40816e:	4b24      	ldr	r3, [pc, #144]	; (408200 <lv_obj_design+0x2bc>)
  408170:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  408172:	2500      	movs	r5, #0
  408174:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  408178:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  40817c:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  408180:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408184:	aa05      	add	r2, sp, #20
  408186:	4629      	mov	r1, r5
  408188:	4620      	mov	r0, r4
  40818a:	4b1e      	ldr	r3, [pc, #120]	; (408204 <lv_obj_design+0x2c0>)
  40818c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40818e:	2204      	movs	r2, #4
  408190:	4629      	mov	r1, r5
  408192:	4620      	mov	r0, r4
  408194:	4f17      	ldr	r7, [pc, #92]	; (4081f4 <lv_obj_design+0x2b0>)
  408196:	47b8      	blx	r7
  408198:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40819a:	2205      	movs	r2, #5
  40819c:	4629      	mov	r1, r5
  40819e:	4620      	mov	r0, r4
  4081a0:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  4081a2:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4081a4:	aa03      	add	r2, sp, #12
  4081a6:	2308      	movs	r3, #8
  4081a8:	e004      	b.n	4081b4 <lv_obj_design+0x270>
        *d8 = *s8;
  4081aa:	f814 1b01 	ldrb.w	r1, [r4], #1
  4081ae:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4081b2:	3b01      	subs	r3, #1
    while(len) {
  4081b4:	2b00      	cmp	r3, #0
  4081b6:	d1f8      	bne.n	4081aa <lv_obj_design+0x266>
            coords.x1 -= w;
  4081b8:	fa1f f788 	uxth.w	r7, r8
  4081bc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4081c0:	1bdb      	subs	r3, r3, r7
  4081c2:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  4081c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4081ca:	441f      	add	r7, r3
  4081cc:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  4081d0:	b280      	uxth	r0, r0
  4081d2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4081d6:	1a1b      	subs	r3, r3, r0
  4081d8:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  4081dc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4081e0:	4418      	add	r0, r3
  4081e2:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  4081e6:	aa05      	add	r2, sp, #20
  4081e8:	4631      	mov	r1, r6
  4081ea:	a803      	add	r0, sp, #12
  4081ec:	4b06      	ldr	r3, [pc, #24]	; (408208 <lv_obj_design+0x2c4>)
  4081ee:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  4081f0:	2000      	movs	r0, #0
  4081f2:	e6b4      	b.n	407f5e <lv_obj_design+0x1a>
  4081f4:	00406e35 	.word	0x00406e35
  4081f8:	00414edd 	.word	0x00414edd
  4081fc:	004068a9 	.word	0x004068a9
  408200:	00411b6d 	.word	0x00411b6d
  408204:	00407bf1 	.word	0x00407bf1
  408208:	00411bb9 	.word	0x00411bb9
  40820c:	00415fdd 	.word	0x00415fdd
  408210:	0040f575 	.word	0x0040f575
  408214:	0040f2f9 	.word	0x0040f2f9
  408218:	0040f3a1 	.word	0x0040f3a1
  40821c:	00415d8d 	.word	0x00415d8d

00408220 <lv_obj_init_draw_label_dsc>:
{
  408220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408222:	4605      	mov	r5, r0
  408224:	460e      	mov	r6, r1
  408226:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  408228:	f248 028c 	movw	r2, #32908	; 0x808c
  40822c:	4b2a      	ldr	r3, [pc, #168]	; (4082d8 <lv_obj_init_draw_label_dsc+0xb8>)
  40822e:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  408230:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408232:	2802      	cmp	r0, #2
  408234:	d800      	bhi.n	408238 <lv_obj_init_draw_label_dsc+0x18>
  408236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408238:	f248 020c 	movw	r2, #32780	; 0x800c
  40823c:	4631      	mov	r1, r6
  40823e:	4628      	mov	r0, r5
  408240:	4b25      	ldr	r3, [pc, #148]	; (4082d8 <lv_obj_init_draw_label_dsc+0xb8>)
  408242:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408244:	28fc      	cmp	r0, #252	; 0xfc
  408246:	d805      	bhi.n	408254 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408248:	7b23      	ldrb	r3, [r4, #12]
  40824a:	fb10 f003 	smulbb	r0, r0, r3
  40824e:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408252:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408254:	7b23      	ldrb	r3, [r4, #12]
  408256:	2b02      	cmp	r3, #2
  408258:	d9ed      	bls.n	408236 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  40825a:	f248 0289 	movw	r2, #32905	; 0x8089
  40825e:	4631      	mov	r1, r6
  408260:	4628      	mov	r0, r5
  408262:	4b1e      	ldr	r3, [pc, #120]	; (4082dc <lv_obj_init_draw_label_dsc+0xbc>)
  408264:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  408266:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  408268:	f248 0280 	movw	r2, #32896	; 0x8080
  40826c:	4631      	mov	r1, r6
  40826e:	4628      	mov	r0, r5
  408270:	4f1b      	ldr	r7, [pc, #108]	; (4082e0 <lv_obj_init_draw_label_dsc+0xc0>)
  408272:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  408274:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  408276:	f248 0281 	movw	r2, #32897	; 0x8081
  40827a:	4631      	mov	r1, r6
  40827c:	4628      	mov	r0, r5
  40827e:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  408280:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  408282:	f248 0282 	movw	r2, #32898	; 0x8082
  408286:	4631      	mov	r1, r6
  408288:	4628      	mov	r0, r5
  40828a:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  40828c:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  408290:	f248 0283 	movw	r2, #32899	; 0x8083
  408294:	4631      	mov	r1, r6
  408296:	4628      	mov	r0, r5
  408298:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  40829a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  40829e:	f248 028e 	movw	r2, #32910	; 0x808e
  4082a2:	4631      	mov	r1, r6
  4082a4:	4628      	mov	r0, r5
  4082a6:	4b0f      	ldr	r3, [pc, #60]	; (4082e4 <lv_obj_init_draw_label_dsc+0xc4>)
  4082a8:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  4082aa:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  4082ac:	6962      	ldr	r2, [r4, #20]
  4082ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4082b2:	429a      	cmp	r2, r3
  4082b4:	d0bf      	beq.n	408236 <lv_obj_init_draw_label_dsc+0x16>
  4082b6:	69a2      	ldr	r2, [r4, #24]
  4082b8:	429a      	cmp	r2, r3
  4082ba:	d0bc      	beq.n	408236 <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  4082bc:	f248 028a 	movw	r2, #32906	; 0x808a
  4082c0:	4631      	mov	r1, r6
  4082c2:	4628      	mov	r0, r5
  4082c4:	4f05      	ldr	r7, [pc, #20]	; (4082dc <lv_obj_init_draw_label_dsc+0xbc>)
  4082c6:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  4082c8:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  4082ca:	f248 028b 	movw	r2, #32907	; 0x808b
  4082ce:	4631      	mov	r1, r6
  4082d0:	4628      	mov	r0, r5
  4082d2:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  4082d4:	80a0      	strh	r0, [r4, #4]
  4082d6:	e7ae      	b.n	408236 <lv_obj_init_draw_label_dsc+0x16>
  4082d8:	004068a9 	.word	0x004068a9
  4082dc:	00406821 	.word	0x00406821
  4082e0:	00406e35 	.word	0x00406e35
  4082e4:	00406d2d 	.word	0x00406d2d

004082e8 <lv_obj_init_draw_img_dsc>:
{
  4082e8:	b570      	push	{r4, r5, r6, lr}
  4082ea:	4605      	mov	r5, r0
  4082ec:	460e      	mov	r6, r1
  4082ee:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  4082f0:	f248 02ac 	movw	r2, #32940	; 0x80ac
  4082f4:	4b25      	ldr	r3, [pc, #148]	; (40838c <lv_obj_init_draw_img_dsc+0xa4>)
  4082f6:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  4082f8:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4082fa:	2802      	cmp	r0, #2
  4082fc:	d800      	bhi.n	408300 <lv_obj_init_draw_img_dsc+0x18>
  4082fe:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408300:	f248 020c 	movw	r2, #32780	; 0x800c
  408304:	4631      	mov	r1, r6
  408306:	4628      	mov	r0, r5
  408308:	4b20      	ldr	r3, [pc, #128]	; (40838c <lv_obj_init_draw_img_dsc+0xa4>)
  40830a:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  40830c:	28fc      	cmp	r0, #252	; 0xfc
  40830e:	d805      	bhi.n	40831c <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408310:	7823      	ldrb	r3, [r4, #0]
  408312:	fb10 f003 	smulbb	r0, r0, r3
  408316:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40831a:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  40831c:	7823      	ldrb	r3, [r4, #0]
  40831e:	2b02      	cmp	r3, #2
  408320:	d9ed      	bls.n	4082fe <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  408322:	2300      	movs	r3, #0
  408324:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  408326:	f44f 7380 	mov.w	r3, #256	; 0x100
  40832a:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40832c:	8aab      	ldrh	r3, [r5, #20]
  40832e:	8a2a      	ldrh	r2, [r5, #16]
  408330:	1a9b      	subs	r3, r3, r2
  408332:	b29b      	uxth	r3, r3
  408334:	3301      	adds	r3, #1
  408336:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408338:	2b00      	cmp	r3, #0
  40833a:	db1b      	blt.n	408374 <lv_obj_init_draw_img_dsc+0x8c>
  40833c:	105b      	asrs	r3, r3, #1
  40833e:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  408340:	8aeb      	ldrh	r3, [r5, #22]
  408342:	8a6a      	ldrh	r2, [r5, #18]
  408344:	1a9b      	subs	r3, r3, r2
  408346:	b29b      	uxth	r3, r3
  408348:	3301      	adds	r3, #1
  40834a:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  40834c:	2b00      	cmp	r3, #0
  40834e:	db13      	blt.n	408378 <lv_obj_init_draw_img_dsc+0x90>
  408350:	105b      	asrs	r3, r3, #1
  408352:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408354:	f248 02ad 	movw	r2, #32941	; 0x80ad
  408358:	4631      	mov	r1, r6
  40835a:	4628      	mov	r0, r5
  40835c:	4b0b      	ldr	r3, [pc, #44]	; (40838c <lv_obj_init_draw_img_dsc+0xa4>)
  40835e:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  408360:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  408362:	b958      	cbnz	r0, 40837c <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408364:	f248 02a0 	movw	r2, #32928	; 0x80a0
  408368:	4631      	mov	r1, r6
  40836a:	4628      	mov	r0, r5
  40836c:	4b08      	ldr	r3, [pc, #32]	; (408390 <lv_obj_init_draw_img_dsc+0xa8>)
  40836e:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  408370:	73a0      	strb	r0, [r4, #14]
  408372:	e7c4      	b.n	4082fe <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408374:	3301      	adds	r3, #1
  408376:	e7e1      	b.n	40833c <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408378:	3301      	adds	r3, #1
  40837a:	e7e9      	b.n	408350 <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  40837c:	f248 02a9 	movw	r2, #32937	; 0x80a9
  408380:	4631      	mov	r1, r6
  408382:	4628      	mov	r0, r5
  408384:	4b03      	ldr	r3, [pc, #12]	; (408394 <lv_obj_init_draw_img_dsc+0xac>)
  408386:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  408388:	81a0      	strh	r0, [r4, #12]
  40838a:	e7eb      	b.n	408364 <lv_obj_init_draw_img_dsc+0x7c>
  40838c:	004068a9 	.word	0x004068a9
  408390:	00406e35 	.word	0x00406e35
  408394:	00406821 	.word	0x00406821

00408398 <lv_obj_init_draw_line_dsc>:
{
  408398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40839a:	4605      	mov	r5, r0
  40839c:	460e      	mov	r6, r1
  40839e:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4083a0:	2290      	movs	r2, #144	; 0x90
  4083a2:	4b24      	ldr	r3, [pc, #144]	; (408434 <lv_obj_init_draw_line_dsc+0x9c>)
  4083a4:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  4083a6:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  4083a8:	b900      	cbnz	r0, 4083ac <lv_obj_init_draw_line_dsc+0x14>
  4083aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  4083ac:	229c      	movs	r2, #156	; 0x9c
  4083ae:	4631      	mov	r1, r6
  4083b0:	4628      	mov	r0, r5
  4083b2:	4b21      	ldr	r3, [pc, #132]	; (408438 <lv_obj_init_draw_line_dsc+0xa0>)
  4083b4:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  4083b6:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4083b8:	2802      	cmp	r0, #2
  4083ba:	d9f6      	bls.n	4083aa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4083bc:	f248 020c 	movw	r2, #32780	; 0x800c
  4083c0:	4631      	mov	r1, r6
  4083c2:	4628      	mov	r0, r5
  4083c4:	4b1c      	ldr	r3, [pc, #112]	; (408438 <lv_obj_init_draw_line_dsc+0xa0>)
  4083c6:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4083c8:	28fc      	cmp	r0, #252	; 0xfc
  4083ca:	d805      	bhi.n	4083d8 <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4083cc:	7a23      	ldrb	r3, [r4, #8]
  4083ce:	fb10 f003 	smulbb	r0, r0, r3
  4083d2:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4083d6:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4083d8:	7a23      	ldrb	r3, [r4, #8]
  4083da:	2b02      	cmp	r3, #2
  4083dc:	d9e5      	bls.n	4083aa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4083de:	2299      	movs	r2, #153	; 0x99
  4083e0:	4631      	mov	r1, r6
  4083e2:	4628      	mov	r0, r5
  4083e4:	4b15      	ldr	r3, [pc, #84]	; (40843c <lv_obj_init_draw_line_dsc+0xa4>)
  4083e6:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  4083e8:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  4083ea:	2292      	movs	r2, #146	; 0x92
  4083ec:	4631      	mov	r1, r6
  4083ee:	4628      	mov	r0, r5
  4083f0:	4b10      	ldr	r3, [pc, #64]	; (408434 <lv_obj_init_draw_line_dsc+0x9c>)
  4083f2:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  4083f4:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  4083f6:	b9b0      	cbnz	r0, 408426 <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  4083f8:	2294      	movs	r2, #148	; 0x94
  4083fa:	4631      	mov	r1, r6
  4083fc:	4628      	mov	r0, r5
  4083fe:	4f0d      	ldr	r7, [pc, #52]	; (408434 <lv_obj_init_draw_line_dsc+0x9c>)
  408400:	47b8      	blx	r7
  408402:	3000      	adds	r0, #0
  408404:	bf18      	it	ne
  408406:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  408408:	7a63      	ldrb	r3, [r4, #9]
  40840a:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  40840e:	f360 03c3 	bfi	r3, r0, #3, #1
  408412:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  408414:	2291      	movs	r2, #145	; 0x91
  408416:	4631      	mov	r1, r6
  408418:	4628      	mov	r0, r5
  40841a:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  40841c:	7a63      	ldrb	r3, [r4, #9]
  40841e:	f360 0301 	bfi	r3, r0, #0, #2
  408422:	7263      	strb	r3, [r4, #9]
  408424:	e7c1      	b.n	4083aa <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  408426:	2293      	movs	r2, #147	; 0x93
  408428:	4631      	mov	r1, r6
  40842a:	4628      	mov	r0, r5
  40842c:	4b01      	ldr	r3, [pc, #4]	; (408434 <lv_obj_init_draw_line_dsc+0x9c>)
  40842e:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  408430:	80e0      	strh	r0, [r4, #6]
  408432:	e7e1      	b.n	4083f8 <lv_obj_init_draw_line_dsc+0x60>
  408434:	00406e35 	.word	0x00406e35
  408438:	004068a9 	.word	0x004068a9
  40843c:	00406821 	.word	0x00406821

00408440 <style_snapshot>:
{
  408440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408444:	b083      	sub	sp, #12
  408446:	4605      	mov	r5, r0
  408448:	4689      	mov	r9, r1
  40844a:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  40844c:	2101      	movs	r1, #1
  40844e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408640 <style_snapshot+0x200>
  408452:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408454:	21bc      	movs	r1, #188	; 0xbc
  408456:	4620      	mov	r0, r4
  408458:	4b6d      	ldr	r3, [pc, #436]	; (408610 <style_snapshot+0x1d0>)
  40845a:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  40845c:	4620      	mov	r0, r4
  40845e:	4b6d      	ldr	r3, [pc, #436]	; (408614 <style_snapshot+0x1d4>)
  408460:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  408462:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  408466:	4650      	mov	r0, sl
  408468:	4b6b      	ldr	r3, [pc, #428]	; (408618 <style_snapshot+0x1d8>)
  40846a:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  40846c:	f104 0382 	add.w	r3, r4, #130	; 0x82
  408470:	9301      	str	r3, [sp, #4]
  408472:	4618      	mov	r0, r3
  408474:	4b69      	ldr	r3, [pc, #420]	; (40861c <style_snapshot+0x1dc>)
  408476:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  408478:	f104 0678 	add.w	r6, r4, #120	; 0x78
  40847c:	4630      	mov	r0, r6
  40847e:	4b68      	ldr	r3, [pc, #416]	; (408620 <style_snapshot+0x1e0>)
  408480:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  408482:	4649      	mov	r1, r9
  408484:	4628      	mov	r0, r5
  408486:	4b67      	ldr	r3, [pc, #412]	; (408624 <style_snapshot+0x1e4>)
  408488:	4798      	blx	r3
  40848a:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  40848c:	7943      	ldrb	r3, [r0, #5]
  40848e:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  408492:	f043 0301 	orr.w	r3, r3, #1
  408496:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  408498:	4622      	mov	r2, r4
  40849a:	4649      	mov	r1, r9
  40849c:	4628      	mov	r0, r5
  40849e:	4b62      	ldr	r3, [pc, #392]	; (408628 <style_snapshot+0x1e8>)
  4084a0:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  4084a2:	4652      	mov	r2, sl
  4084a4:	4649      	mov	r1, r9
  4084a6:	4628      	mov	r0, r5
  4084a8:	4b60      	ldr	r3, [pc, #384]	; (40862c <style_snapshot+0x1ec>)
  4084aa:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  4084ac:	9a01      	ldr	r2, [sp, #4]
  4084ae:	4649      	mov	r1, r9
  4084b0:	4628      	mov	r0, r5
  4084b2:	4b5f      	ldr	r3, [pc, #380]	; (408630 <style_snapshot+0x1f0>)
  4084b4:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  4084b6:	4632      	mov	r2, r6
  4084b8:	4649      	mov	r1, r9
  4084ba:	4628      	mov	r0, r5
  4084bc:	4b5d      	ldr	r3, [pc, #372]	; (408634 <style_snapshot+0x1f4>)
  4084be:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4084c0:	2210      	movs	r2, #16
  4084c2:	4649      	mov	r1, r9
  4084c4:	4628      	mov	r0, r5
  4084c6:	4e5c      	ldr	r6, [pc, #368]	; (408638 <style_snapshot+0x1f8>)
  4084c8:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  4084ca:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4084ce:	2211      	movs	r2, #17
  4084d0:	4649      	mov	r1, r9
  4084d2:	4628      	mov	r0, r5
  4084d4:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  4084d6:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4084da:	2213      	movs	r2, #19
  4084dc:	4649      	mov	r1, r9
  4084de:	4628      	mov	r0, r5
  4084e0:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  4084e2:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4084e6:	2212      	movs	r2, #18
  4084e8:	4649      	mov	r1, r9
  4084ea:	4628      	mov	r0, r5
  4084ec:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  4084ee:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4084f2:	2214      	movs	r2, #20
  4084f4:	4649      	mov	r1, r9
  4084f6:	4628      	mov	r0, r5
  4084f8:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  4084fa:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  4084fe:	2215      	movs	r2, #21
  408500:	4649      	mov	r1, r9
  408502:	4628      	mov	r0, r5
  408504:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  408506:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  40850a:	2216      	movs	r2, #22
  40850c:	4649      	mov	r1, r9
  40850e:	4628      	mov	r0, r5
  408510:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408512:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  408516:	2217      	movs	r2, #23
  408518:	4649      	mov	r1, r9
  40851a:	4628      	mov	r0, r5
  40851c:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  40851e:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408522:	2218      	movs	r2, #24
  408524:	4649      	mov	r1, r9
  408526:	4628      	mov	r0, r5
  408528:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  40852a:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  40852e:	2203      	movs	r2, #3
  408530:	4649      	mov	r1, r9
  408532:	4628      	mov	r0, r5
  408534:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  408536:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40853a:	2204      	movs	r2, #4
  40853c:	4649      	mov	r1, r9
  40853e:	4628      	mov	r0, r5
  408540:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408542:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408546:	2205      	movs	r2, #5
  408548:	4649      	mov	r1, r9
  40854a:	4628      	mov	r0, r5
  40854c:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  40854e:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408552:	2206      	movs	r2, #6
  408554:	4649      	mov	r1, r9
  408556:	4628      	mov	r0, r5
  408558:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  40855a:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  40855e:	2207      	movs	r2, #7
  408560:	4649      	mov	r1, r9
  408562:	4628      	mov	r0, r5
  408564:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  408566:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  40856a:	22c0      	movs	r2, #192	; 0xc0
  40856c:	4649      	mov	r1, r9
  40856e:	4628      	mov	r0, r5
  408570:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408572:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  408576:	22c1      	movs	r2, #193	; 0xc1
  408578:	4649      	mov	r1, r9
  40857a:	4628      	mov	r0, r5
  40857c:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  40857e:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408582:	22c2      	movs	r2, #194	; 0xc2
  408584:	4649      	mov	r1, r9
  408586:	4628      	mov	r0, r5
  408588:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  40858a:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  40858e:	22c3      	movs	r2, #195	; 0xc3
  408590:	4649      	mov	r1, r9
  408592:	4628      	mov	r0, r5
  408594:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  408596:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  40859a:	22c9      	movs	r2, #201	; 0xc9
  40859c:	4649      	mov	r1, r9
  40859e:	4628      	mov	r0, r5
  4085a0:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408644 <style_snapshot+0x204>
  4085a4:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  4085a6:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4085aa:	22ca      	movs	r2, #202	; 0xca
  4085ac:	4649      	mov	r1, r9
  4085ae:	4628      	mov	r0, r5
  4085b0:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  4085b2:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4085b6:	f248 020c 	movw	r2, #32780	; 0x800c
  4085ba:	4649      	mov	r1, r9
  4085bc:	4628      	mov	r0, r5
  4085be:	4b1f      	ldr	r3, [pc, #124]	; (40863c <style_snapshot+0x1fc>)
  4085c0:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  4085c2:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4085c6:	2202      	movs	r2, #2
  4085c8:	4649      	mov	r1, r9
  4085ca:	4628      	mov	r0, r5
  4085cc:	47b0      	blx	r6
  4085ce:	3000      	adds	r0, #0
  4085d0:	bf18      	it	ne
  4085d2:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  4085d4:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  4085d8:	f360 0300 	bfi	r3, r0, #0, #1
  4085dc:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4085e0:	2233      	movs	r2, #51	; 0x33
  4085e2:	4649      	mov	r1, r9
  4085e4:	4628      	mov	r0, r5
  4085e6:	47b0      	blx	r6
  4085e8:	3000      	adds	r0, #0
  4085ea:	bf18      	it	ne
  4085ec:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  4085ee:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  4085f2:	f360 0341 	bfi	r3, r0, #1, #1
  4085f6:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  4085fa:	2100      	movs	r1, #0
  4085fc:	4628      	mov	r0, r5
  4085fe:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408600:	797b      	ldrb	r3, [r7, #5]
  408602:	f36b 0300 	bfi	r3, fp, #0, #1
  408606:	717b      	strb	r3, [r7, #5]
}
  408608:	b003      	add	sp, #12
  40860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40860e:	bf00      	nop
  408610:	00416169 	.word	0x00416169
  408614:	00411b6d 	.word	0x00411b6d
  408618:	0040d735 	.word	0x0040d735
  40861c:	0040cba1 	.word	0x0040cba1
  408620:	0040e585 	.word	0x0040e585
  408624:	0040567d 	.word	0x0040567d
  408628:	00407bf1 	.word	0x00407bf1
  40862c:	00408221 	.word	0x00408221
  408630:	004082e9 	.word	0x004082e9
  408634:	00408399 	.word	0x00408399
  408638:	00406e35 	.word	0x00406e35
  40863c:	004068a9 	.word	0x004068a9
  408640:	00405771 	.word	0x00405771
  408644:	00406821 	.word	0x00406821

00408648 <lv_obj_set_state>:
    if(obj->state == new_state) return;
  408648:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  40864c:	428b      	cmp	r3, r1
  40864e:	f000 80e4 	beq.w	40881a <lv_obj_set_state+0x1d2>
{
  408652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408656:	b0e5      	sub	sp, #404	; 0x194
  408658:	4688      	mov	r8, r1
  40865a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40865c:	4b6f      	ldr	r3, [pc, #444]	; (40881c <lv_obj_set_state+0x1d4>)
  40865e:	4798      	blx	r3
  408660:	b120      	cbz	r0, 40866c <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408662:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408666:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  408668:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40866a:	e007      	b.n	40867c <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40866c:	4622      	mov	r2, r4
  40866e:	2300      	movs	r3, #0
  408670:	486b      	ldr	r0, [pc, #428]	; (408820 <lv_obj_set_state+0x1d8>)
  408672:	496c      	ldr	r1, [pc, #432]	; (408824 <lv_obj_set_state+0x1dc>)
  408674:	4788      	blx	r1
  408676:	e7fe      	b.n	408676 <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  408678:	3501      	adds	r5, #1
  40867a:	b2ed      	uxtb	r5, r5
  40867c:	2d3f      	cmp	r5, #63	; 0x3f
  40867e:	d81c      	bhi.n	4086ba <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408680:	4629      	mov	r1, r5
  408682:	4620      	mov	r0, r4
  408684:	4b68      	ldr	r3, [pc, #416]	; (408828 <lv_obj_set_state+0x1e0>)
  408686:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408688:	b1b8      	cbz	r0, 4086ba <lv_obj_set_state+0x72>
        obj->state = prev_state;
  40868a:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  40868e:	aa06      	add	r2, sp, #24
  408690:	4629      	mov	r1, r5
  408692:	4620      	mov	r0, r4
  408694:	4e65      	ldr	r6, [pc, #404]	; (40882c <lv_obj_set_state+0x1e4>)
  408696:	47b0      	blx	r6
        obj->state = new_state;
  408698:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  40869c:	aa35      	add	r2, sp, #212	; 0xd4
  40869e:	4629      	mov	r1, r5
  4086a0:	4620      	mov	r0, r4
  4086a2:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  4086a4:	a935      	add	r1, sp, #212	; 0xd4
  4086a6:	a806      	add	r0, sp, #24
  4086a8:	4b61      	ldr	r3, [pc, #388]	; (408830 <lv_obj_set_state+0x1e8>)
  4086aa:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  4086ac:	2802      	cmp	r0, #2
  4086ae:	d003      	beq.n	4086b8 <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  4086b0:	2801      	cmp	r0, #1
  4086b2:	d1e1      	bne.n	408678 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  4086b4:	4683      	mov	fp, r0
  4086b6:	e7df      	b.n	408678 <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  4086b8:	4683      	mov	fp, r0
    obj->state = new_state;
  4086ba:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  4086be:	f1bb 0f00 	cmp.w	fp, #0
  4086c2:	f000 80a3 	beq.w	40880c <lv_obj_set_state+0x1c4>
  4086c6:	2500      	movs	r5, #0
  4086c8:	f8cd a014 	str.w	sl, [sp, #20]
  4086cc:	e04b      	b.n	408766 <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  4086ce:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  4086d2:	f36f 0300 	bfc	r3, #0, #1
  4086d6:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  4086da:	a835      	add	r0, sp, #212	; 0xd4
  4086dc:	4b55      	ldr	r3, [pc, #340]	; (408834 <lv_obj_set_state+0x1ec>)
  4086de:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  4086e0:	3601      	adds	r6, #1
  4086e2:	b2f6      	uxtb	r6, r6
  4086e4:	2e05      	cmp	r6, #5
  4086e6:	d836      	bhi.n	408756 <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  4086e8:	ab06      	add	r3, sp, #24
  4086ea:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  4086ee:	2f00      	cmp	r7, #0
  4086f0:	d0f6      	beq.n	4086e0 <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  4086f2:	4650      	mov	r0, sl
  4086f4:	4b50      	ldr	r3, [pc, #320]	; (408838 <lv_obj_set_state+0x1f0>)
  4086f6:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  4086f8:	f8cd 8000 	str.w	r8, [sp]
  4086fc:	9b05      	ldr	r3, [sp, #20]
  4086fe:	462a      	mov	r2, r5
  408700:	4639      	mov	r1, r7
  408702:	4620      	mov	r0, r4
  408704:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408860 <lv_obj_set_state+0x218>
  408708:	47c8      	blx	r9
                if(tr) {
  40870a:	4681      	mov	r9, r0
  40870c:	2800      	cmp	r0, #0
  40870e:	d0e7      	beq.n	4086e0 <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408710:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408712:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408714:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  408716:	a835      	add	r0, sp, #212	; 0xd4
  408718:	4b48      	ldr	r3, [pc, #288]	; (40883c <lv_obj_set_state+0x1f4>)
  40871a:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  40871c:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408720:	4b47      	ldr	r3, [pc, #284]	; (408840 <lv_obj_set_state+0x1f8>)
  408722:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408724:	4b47      	ldr	r3, [pc, #284]	; (408844 <lv_obj_set_state+0x1fc>)
  408726:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  408728:	4b47      	ldr	r3, [pc, #284]	; (408848 <lv_obj_set_state+0x200>)
  40872a:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  40872c:	2300      	movs	r3, #0
  40872e:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408730:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408732:	23ff      	movs	r3, #255	; 0xff
  408734:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  408736:	9b04      	ldr	r3, [sp, #16]
  408738:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  40873a:	9b03      	ldr	r3, [sp, #12]
  40873c:	425b      	negs	r3, r3
  40873e:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408740:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408742:	aa39      	add	r2, sp, #228	; 0xe4
  408744:	2308      	movs	r3, #8
    while(len) {
  408746:	2b00      	cmp	r3, #0
  408748:	d0c1      	beq.n	4086ce <lv_obj_set_state+0x86>
        *d8 = *s8;
  40874a:	f811 0b01 	ldrb.w	r0, [r1], #1
  40874e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408752:	3b01      	subs	r3, #1
  408754:	e7f7      	b.n	408746 <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408756:	f1bb 0f02 	cmp.w	fp, #2
  40875a:	d048      	beq.n	4087ee <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  40875c:	f1bb 0f01 	cmp.w	fp, #1
  408760:	d04b      	beq.n	4087fa <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408762:	3501      	adds	r5, #1
  408764:	b2ed      	uxtb	r5, r5
  408766:	2d3f      	cmp	r5, #63	; 0x3f
  408768:	d84d      	bhi.n	408806 <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  40876a:	4629      	mov	r1, r5
  40876c:	4620      	mov	r0, r4
  40876e:	4b2e      	ldr	r3, [pc, #184]	; (408828 <lv_obj_set_state+0x1e0>)
  408770:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408772:	4682      	mov	sl, r0
  408774:	2800      	cmp	r0, #0
  408776:	d046      	beq.n	408806 <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  408778:	7943      	ldrb	r3, [r0, #5]
  40877a:	f013 0f02 	tst.w	r3, #2
  40877e:	d1f0      	bne.n	408762 <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408780:	22b0      	movs	r2, #176	; 0xb0
  408782:	4629      	mov	r1, r5
  408784:	4620      	mov	r0, r4
  408786:	4e31      	ldr	r6, [pc, #196]	; (40884c <lv_obj_set_state+0x204>)
  408788:	47b0      	blx	r6
  40878a:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  40878c:	22b1      	movs	r2, #177	; 0xb1
  40878e:	4629      	mov	r1, r5
  408790:	4620      	mov	r0, r4
  408792:	47b0      	blx	r6
  408794:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  408796:	22be      	movs	r2, #190	; 0xbe
  408798:	4629      	mov	r1, r5
  40879a:	4620      	mov	r0, r4
  40879c:	4b2c      	ldr	r3, [pc, #176]	; (408850 <lv_obj_set_state+0x208>)
  40879e:	4798      	blx	r3
  4087a0:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  4087a2:	22b2      	movs	r2, #178	; 0xb2
  4087a4:	4629      	mov	r1, r5
  4087a6:	4620      	mov	r0, r4
  4087a8:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  4087aa:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  4087ae:	22b3      	movs	r2, #179	; 0xb3
  4087b0:	4629      	mov	r1, r5
  4087b2:	4620      	mov	r0, r4
  4087b4:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  4087b6:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  4087ba:	22b4      	movs	r2, #180	; 0xb4
  4087bc:	4629      	mov	r1, r5
  4087be:	4620      	mov	r0, r4
  4087c0:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  4087c2:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  4087c6:	22b5      	movs	r2, #181	; 0xb5
  4087c8:	4629      	mov	r1, r5
  4087ca:	4620      	mov	r0, r4
  4087cc:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  4087ce:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  4087d2:	22b6      	movs	r2, #182	; 0xb6
  4087d4:	4629      	mov	r1, r5
  4087d6:	4620      	mov	r0, r4
  4087d8:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  4087da:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4087de:	22b7      	movs	r2, #183	; 0xb7
  4087e0:	4629      	mov	r1, r5
  4087e2:	4620      	mov	r0, r4
  4087e4:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  4087e6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  4087ea:	2600      	movs	r6, #0
  4087ec:	e77a      	b.n	4086e4 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4087ee:	22ff      	movs	r2, #255	; 0xff
  4087f0:	4629      	mov	r1, r5
  4087f2:	4620      	mov	r0, r4
  4087f4:	4b17      	ldr	r3, [pc, #92]	; (408854 <lv_obj_set_state+0x20c>)
  4087f6:	4798      	blx	r3
  4087f8:	e7b0      	b.n	40875c <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  4087fa:	22ff      	movs	r2, #255	; 0xff
  4087fc:	4629      	mov	r1, r5
  4087fe:	4620      	mov	r0, r4
  408800:	4b15      	ldr	r3, [pc, #84]	; (408858 <lv_obj_set_state+0x210>)
  408802:	4798      	blx	r3
  408804:	e7ad      	b.n	408762 <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408806:	f1bb 0f01 	cmp.w	fp, #1
  40880a:	d002      	beq.n	408812 <lv_obj_set_state+0x1ca>
}
  40880c:	b065      	add	sp, #404	; 0x194
  40880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408812:	4620      	mov	r0, r4
  408814:	4b11      	ldr	r3, [pc, #68]	; (40885c <lv_obj_set_state+0x214>)
  408816:	4798      	blx	r3
  408818:	e7f8      	b.n	40880c <lv_obj_set_state+0x1c4>
  40881a:	4770      	bx	lr
  40881c:	0041552d 	.word	0x0041552d
  408820:	00423604 	.word	0x00423604
  408824:	00415539 	.word	0x00415539
  408828:	0040567d 	.word	0x0040567d
  40882c:	00408441 	.word	0x00408441
  408830:	00404fd5 	.word	0x00404fd5
  408834:	00414b55 	.word	0x00414b55
  408838:	0040a681 	.word	0x0040a681
  40883c:	00414a9d 	.word	0x00414a9d
  408840:	0040744d 	.word	0x0040744d
  408844:	004075a5 	.word	0x004075a5
  408848:	004057b9 	.word	0x004057b9
  40884c:	00406e35 	.word	0x00406e35
  408850:	00406d2d 	.word	0x00406d2d
  408854:	004071fd 	.word	0x004071fd
  408858:	00407181 	.word	0x00407181
  40885c:	004059c9 	.word	0x004059c9
  408860:	00407619 	.word	0x00407619

00408864 <lv_obj_add_state>:
{
  408864:	b538      	push	{r3, r4, r5, lr}
  408866:	4605      	mov	r5, r0
  408868:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40886a:	4b09      	ldr	r3, [pc, #36]	; (408890 <lv_obj_add_state+0x2c>)
  40886c:	4798      	blx	r3
  40886e:	b148      	cbz	r0, 408884 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408870:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408874:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  408878:	428b      	cmp	r3, r1
  40887a:	d002      	beq.n	408882 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  40887c:	4628      	mov	r0, r5
  40887e:	4b05      	ldr	r3, [pc, #20]	; (408894 <lv_obj_add_state+0x30>)
  408880:	4798      	blx	r3
  408882:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408884:	462a      	mov	r2, r5
  408886:	2300      	movs	r3, #0
  408888:	4803      	ldr	r0, [pc, #12]	; (408898 <lv_obj_add_state+0x34>)
  40888a:	4904      	ldr	r1, [pc, #16]	; (40889c <lv_obj_add_state+0x38>)
  40888c:	4788      	blx	r1
  40888e:	e7fe      	b.n	40888e <lv_obj_add_state+0x2a>
  408890:	0041552d 	.word	0x0041552d
  408894:	00408649 	.word	0x00408649
  408898:	00423604 	.word	0x00423604
  40889c:	00415539 	.word	0x00415539

004088a0 <lv_obj_clear_state>:
{
  4088a0:	b538      	push	{r3, r4, r5, lr}
  4088a2:	4604      	mov	r4, r0
  4088a4:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4088a6:	4b0a      	ldr	r3, [pc, #40]	; (4088d0 <lv_obj_clear_state+0x30>)
  4088a8:	4798      	blx	r3
  4088aa:	b158      	cbz	r0, 4088c4 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  4088ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  4088b0:	b259      	sxtb	r1, r3
  4088b2:	ea21 0105 	bic.w	r1, r1, r5
  4088b6:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  4088b8:	428b      	cmp	r3, r1
  4088ba:	d002      	beq.n	4088c2 <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  4088bc:	4620      	mov	r0, r4
  4088be:	4b05      	ldr	r3, [pc, #20]	; (4088d4 <lv_obj_clear_state+0x34>)
  4088c0:	4798      	blx	r3
  4088c2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4088c4:	4622      	mov	r2, r4
  4088c6:	2300      	movs	r3, #0
  4088c8:	4803      	ldr	r0, [pc, #12]	; (4088d8 <lv_obj_clear_state+0x38>)
  4088ca:	4904      	ldr	r1, [pc, #16]	; (4088dc <lv_obj_clear_state+0x3c>)
  4088cc:	4788      	blx	r1
  4088ce:	e7fe      	b.n	4088ce <lv_obj_clear_state+0x2e>
  4088d0:	0041552d 	.word	0x0041552d
  4088d4:	00408649 	.word	0x00408649
  4088d8:	00423604 	.word	0x00423604
  4088dc:	00415539 	.word	0x00415539

004088e0 <lv_obj_get_draw_rect_ext_pad_size>:
{
  4088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4088e4:	b089      	sub	sp, #36	; 0x24
  4088e6:	4604      	mov	r4, r0
  4088e8:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4088ea:	2250      	movs	r2, #80	; 0x50
  4088ec:	4b78      	ldr	r3, [pc, #480]	; (408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  4088ee:	4798      	blx	r3
    if(sh_width) {
  4088f0:	4607      	mov	r7, r0
  4088f2:	bb68      	cbnz	r0, 408950 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  4088f4:	227f      	movs	r2, #127	; 0x7f
  4088f6:	4631      	mov	r1, r6
  4088f8:	4620      	mov	r0, r4
  4088fa:	4b76      	ldr	r3, [pc, #472]	; (408ad4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  4088fc:	4798      	blx	r3
    if(value_str) {
  4088fe:	4605      	mov	r5, r0
  408900:	b130      	cbz	r0, 408910 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408902:	227c      	movs	r2, #124	; 0x7c
  408904:	4631      	mov	r1, r6
  408906:	4620      	mov	r0, r4
  408908:	4b73      	ldr	r3, [pc, #460]	; (408ad8 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  40890a:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  40890c:	2802      	cmp	r0, #2
  40890e:	d851      	bhi.n	4089b4 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  408910:	2240      	movs	r2, #64	; 0x40
  408912:	4631      	mov	r1, r6
  408914:	4620      	mov	r0, r4
  408916:	4b6e      	ldr	r3, [pc, #440]	; (408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408918:	4798      	blx	r3
    if(outline_width) {
  40891a:	4605      	mov	r5, r0
  40891c:	2800      	cmp	r0, #0
  40891e:	f040 80c4 	bne.w	408aaa <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408922:	2204      	movs	r2, #4
  408924:	4631      	mov	r1, r6
  408926:	4620      	mov	r0, r4
  408928:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  40892c:	47c0      	blx	r8
  40892e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408930:	2205      	movs	r2, #5
  408932:	4631      	mov	r1, r6
  408934:	4620      	mov	r0, r4
  408936:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  408938:	42a8      	cmp	r0, r5
  40893a:	bfb8      	it	lt
  40893c:	4628      	movlt	r0, r5
  40893e:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408940:	2800      	cmp	r0, #0
  408942:	dd01      	ble.n	408948 <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408944:	4438      	add	r0, r7
  408946:	b207      	sxth	r7, r0
}
  408948:	4638      	mov	r0, r7
  40894a:	b009      	add	sp, #36	; 0x24
  40894c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408950:	225c      	movs	r2, #92	; 0x5c
  408952:	4631      	mov	r1, r6
  408954:	4620      	mov	r0, r4
  408956:	4b60      	ldr	r3, [pc, #384]	; (408ad8 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408958:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  40895a:	2802      	cmp	r0, #2
  40895c:	d801      	bhi.n	408962 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  40895e:	2700      	movs	r7, #0
  408960:	e7c8      	b.n	4088f4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408962:	463b      	mov	r3, r7
  408964:	2f00      	cmp	r7, #0
  408966:	db23      	blt.n	4089b0 <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  408968:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  40896c:	3701      	adds	r7, #1
  40896e:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408970:	2253      	movs	r2, #83	; 0x53
  408972:	4631      	mov	r1, r6
  408974:	4620      	mov	r0, r4
  408976:	f8df 8158 	ldr.w	r8, [pc, #344]	; 408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  40897a:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  40897c:	fa17 f780 	uxtah	r7, r7, r0
  408980:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  408982:	2251      	movs	r2, #81	; 0x51
  408984:	4631      	mov	r1, r6
  408986:	4620      	mov	r0, r4
  408988:	47c0      	blx	r8
  40898a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  40898c:	2252      	movs	r2, #82	; 0x52
  40898e:	4631      	mov	r1, r6
  408990:	4620      	mov	r0, r4
  408992:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  408994:	2800      	cmp	r0, #0
  408996:	bfb8      	it	lt
  408998:	4240      	neglt	r0, r0
  40899a:	2d00      	cmp	r5, #0
  40899c:	bfb8      	it	lt
  40899e:	426d      	neglt	r5, r5
  4089a0:	42a8      	cmp	r0, r5
  4089a2:	bfac      	ite	ge
  4089a4:	183f      	addge	r7, r7, r0
  4089a6:	197f      	addlt	r7, r7, r5
  4089a8:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  4089aa:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  4089ae:	e7a1      	b.n	4088f4 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  4089b0:	1c7b      	adds	r3, r7, #1
  4089b2:	e7d9      	b.n	408968 <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  4089b4:	2270      	movs	r2, #112	; 0x70
  4089b6:	4631      	mov	r1, r6
  4089b8:	4620      	mov	r0, r4
  4089ba:	f8df 8114 	ldr.w	r8, [pc, #276]	; 408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  4089be:	47c0      	blx	r8
  4089c0:	4682      	mov	sl, r0
  4089c2:	2270      	movs	r2, #112	; 0x70
  4089c4:	4631      	mov	r1, r6
  4089c6:	4620      	mov	r0, r4
  4089c8:	47c0      	blx	r8
  4089ca:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  4089cc:	227e      	movs	r2, #126	; 0x7e
  4089ce:	4631      	mov	r1, r6
  4089d0:	4620      	mov	r0, r4
  4089d2:	4b40      	ldr	r3, [pc, #256]	; (408ad4 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  4089d4:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  4089d6:	f04f 0900 	mov.w	r9, #0
  4089da:	f8cd 9008 	str.w	r9, [sp, #8]
  4089de:	f647 4318 	movw	r3, #31768	; 0x7c18
  4089e2:	9301      	str	r3, [sp, #4]
  4089e4:	f8cd b000 	str.w	fp, [sp]
  4089e8:	4653      	mov	r3, sl
  4089ea:	4602      	mov	r2, r0
  4089ec:	4629      	mov	r1, r5
  4089ee:	a804      	add	r0, sp, #16
  4089f0:	4d3a      	ldr	r5, [pc, #232]	; (408adc <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  4089f2:	47a8      	blx	r5
            value_area.x1 = 0;
  4089f4:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  4089f8:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  4089fc:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408a00:	3b01      	subs	r3, #1
  408a02:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  408a06:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  408a0a:	3b01      	subs	r3, #1
  408a0c:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408a10:	2275      	movs	r2, #117	; 0x75
  408a12:	4631      	mov	r1, r6
  408a14:	4620      	mov	r0, r4
  408a16:	47c0      	blx	r8
  408a18:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408a1c:	2273      	movs	r2, #115	; 0x73
  408a1e:	4631      	mov	r1, r6
  408a20:	4620      	mov	r0, r4
  408a22:	47c0      	blx	r8
  408a24:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  408a26:	2274      	movs	r2, #116	; 0x74
  408a28:	4631      	mov	r1, r6
  408a2a:	4620      	mov	r0, r4
  408a2c:	47c0      	blx	r8
  408a2e:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  408a30:	ab05      	add	r3, sp, #20
  408a32:	464a      	mov	r2, r9
  408a34:	a906      	add	r1, sp, #24
  408a36:	f104 0010 	add.w	r0, r4, #16
  408a3a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408ae0 <lv_obj_get_draw_rect_ext_pad_size+0x200>
  408a3e:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  408a40:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408a44:	442a      	add	r2, r5
  408a46:	b292      	uxth	r2, r2
  408a48:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  408a4c:	4410      	add	r0, r2
  408a4e:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  408a50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  408a54:	4443      	add	r3, r8
  408a56:	b29b      	uxth	r3, r3
  408a58:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  408a5c:	4419      	add	r1, r3
  408a5e:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  408a60:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  408a64:	4402      	add	r2, r0
  408a66:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  408a68:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  408a6c:	4403      	add	r3, r0
  408a6e:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  408a70:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  408a74:	1b40      	subs	r0, r0, r5
  408a76:	42b8      	cmp	r0, r7
  408a78:	bfb8      	it	lt
  408a7a:	4638      	movlt	r0, r7
  408a7c:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  408a7e:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  408a82:	1a69      	subs	r1, r5, r1
  408a84:	4288      	cmp	r0, r1
  408a86:	bfb8      	it	lt
  408a88:	4608      	movlt	r0, r1
  408a8a:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  408a8c:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  408a90:	1a52      	subs	r2, r2, r1
  408a92:	4290      	cmp	r0, r2
  408a94:	bfb8      	it	lt
  408a96:	4610      	movlt	r0, r2
  408a98:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  408a9a:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  408a9e:	1bdf      	subs	r7, r3, r7
  408aa0:	42b8      	cmp	r0, r7
  408aa2:	bfb8      	it	lt
  408aa4:	4638      	movlt	r0, r7
  408aa6:	b207      	sxth	r7, r0
  408aa8:	e732      	b.n	408910 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  408aaa:	224c      	movs	r2, #76	; 0x4c
  408aac:	4631      	mov	r1, r6
  408aae:	4620      	mov	r0, r4
  408ab0:	4b09      	ldr	r3, [pc, #36]	; (408ad8 <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408ab2:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  408ab4:	2802      	cmp	r0, #2
  408ab6:	f67f af34 	bls.w	408922 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  408aba:	2241      	movs	r2, #65	; 0x41
  408abc:	4631      	mov	r1, r6
  408abe:	4620      	mov	r0, r4
  408ac0:	4b03      	ldr	r3, [pc, #12]	; (408ad0 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408ac2:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  408ac4:	4428      	add	r0, r5
  408ac6:	42b8      	cmp	r0, r7
  408ac8:	bfb8      	it	lt
  408aca:	4638      	movlt	r0, r7
  408acc:	b207      	sxth	r7, r0
  408ace:	e728      	b.n	408922 <lv_obj_get_draw_rect_ext_pad_size+0x42>
  408ad0:	00406e35 	.word	0x00406e35
  408ad4:	00406d2d 	.word	0x00406d2d
  408ad8:	004068a9 	.word	0x004068a9
  408adc:	00416ab1 	.word	0x00416ab1
  408ae0:	00414fa5 	.word	0x00414fa5

00408ae4 <lv_obj_get_focused_obj>:
{
  408ae4:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  408ae6:	4604      	mov	r4, r0
  408ae8:	b928      	cbnz	r0, 408af6 <lv_obj_get_focused_obj+0x12>
  408aea:	2000      	movs	r0, #0
  408aec:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  408aee:	4620      	mov	r0, r4
  408af0:	4b06      	ldr	r3, [pc, #24]	; (408b0c <lv_obj_get_focused_obj+0x28>)
  408af2:	4798      	blx	r3
  408af4:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  408af6:	4620      	mov	r0, r4
  408af8:	4b05      	ldr	r3, [pc, #20]	; (408b10 <lv_obj_get_focused_obj+0x2c>)
  408afa:	4798      	blx	r3
  408afc:	b118      	cbz	r0, 408b06 <lv_obj_get_focused_obj+0x22>
  408afe:	2c00      	cmp	r4, #0
  408b00:	d1f5      	bne.n	408aee <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  408b02:	4620      	mov	r0, r4
  408b04:	bd10      	pop	{r4, pc}
  408b06:	4620      	mov	r0, r4
}
  408b08:	bd10      	pop	{r4, pc}
  408b0a:	bf00      	nop
  408b0c:	00405449 	.word	0x00405449
  408b10:	00406251 	.word	0x00406251

00408b14 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  408b14:	2908      	cmp	r1, #8
  408b16:	d01a      	beq.n	408b4e <lv_obj_signal+0x3a>
{
  408b18:	b510      	push	{r4, lr}
  408b1a:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408b1c:	2907      	cmp	r1, #7
  408b1e:	d020      	beq.n	408b62 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  408b20:	2901      	cmp	r1, #1
  408b22:	d023      	beq.n	408b6c <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  408b24:	2906      	cmp	r1, #6
  408b26:	d027      	beq.n	408b78 <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  408b28:	2903      	cmp	r1, #3
  408b2a:	d030      	beq.n	408b8e <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  408b2c:	2904      	cmp	r1, #4
  408b2e:	d039      	beq.n	408ba4 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  408b30:	290b      	cmp	r1, #11
  408b32:	d03b      	beq.n	408bac <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  408b34:	f1a1 030d 	sub.w	r3, r1, #13
  408b38:	b2db      	uxtb	r3, r3
  408b3a:	2b01      	cmp	r3, #1
  408b3c:	d93b      	bls.n	408bb6 <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  408b3e:	2916      	cmp	r1, #22
  408b40:	d03e      	beq.n	408bc0 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  408b42:	2917      	cmp	r1, #23
  408b44:	d056      	beq.n	408bf4 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  408b46:	2900      	cmp	r1, #0
  408b48:	d05b      	beq.n	408c02 <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  408b4a:	2001      	movs	r0, #1
}
  408b4c:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  408b4e:	7813      	ldrb	r3, [r2, #0]
  408b50:	b91b      	cbnz	r3, 408b5a <lv_obj_signal+0x46>
  408b52:	3028      	adds	r0, #40	; 0x28
  408b54:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  408b56:	2001      	movs	r0, #1
  408b58:	4770      	bx	lr
        else info->result = NULL;
  408b5a:	2300      	movs	r3, #0
  408b5c:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  408b5e:	2001      	movs	r0, #1
  408b60:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408b62:	492b      	ldr	r1, [pc, #172]	; (408c10 <lv_obj_signal+0xfc>)
  408b64:	4610      	mov	r0, r2
  408b66:	4b2b      	ldr	r3, [pc, #172]	; (408c14 <lv_obj_signal+0x100>)
  408b68:	4798      	blx	r3
  408b6a:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  408b6c:	4b2a      	ldr	r3, [pc, #168]	; (408c18 <lv_obj_signal+0x104>)
  408b6e:	4798      	blx	r3
  408b70:	2800      	cmp	r0, #0
  408b72:	d14a      	bne.n	408c0a <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  408b74:	2001      	movs	r0, #1
  408b76:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  408b78:	2100      	movs	r1, #0
  408b7a:	4b28      	ldr	r3, [pc, #160]	; (408c1c <lv_obj_signal+0x108>)
  408b7c:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  408b7e:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  408b82:	4298      	cmp	r0, r3
  408b84:	bfb8      	it	lt
  408b86:	4618      	movlt	r0, r3
  408b88:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  408b8a:	2001      	movs	r0, #1
  408b8c:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  408b8e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  408b92:	f013 0f01 	tst.w	r3, #1
  408b96:	d101      	bne.n	408b9c <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  408b98:	2001      	movs	r0, #1
  408b9a:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  408b9c:	4b20      	ldr	r3, [pc, #128]	; (408c20 <lv_obj_signal+0x10c>)
  408b9e:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408ba0:	2001      	movs	r0, #1
  408ba2:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  408ba4:	4b1f      	ldr	r3, [pc, #124]	; (408c24 <lv_obj_signal+0x110>)
  408ba6:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408ba8:	2001      	movs	r0, #1
  408baa:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  408bac:	2110      	movs	r1, #16
  408bae:	4b1e      	ldr	r3, [pc, #120]	; (408c28 <lv_obj_signal+0x114>)
  408bb0:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408bb2:	2001      	movs	r0, #1
  408bb4:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  408bb6:	2110      	movs	r1, #16
  408bb8:	4b1c      	ldr	r3, [pc, #112]	; (408c2c <lv_obj_signal+0x118>)
  408bba:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408bbc:	2001      	movs	r0, #1
  408bbe:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  408bc0:	4b1b      	ldr	r3, [pc, #108]	; (408c30 <lv_obj_signal+0x11c>)
  408bc2:	4798      	blx	r3
  408bc4:	4b1b      	ldr	r3, [pc, #108]	; (408c34 <lv_obj_signal+0x120>)
  408bc6:	4798      	blx	r3
        if(editing) {
  408bc8:	b138      	cbz	r0, 408bda <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  408bca:	4620      	mov	r0, r4
  408bcc:	4b1a      	ldr	r3, [pc, #104]	; (408c38 <lv_obj_signal+0x124>)
  408bce:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  408bd0:	2106      	movs	r1, #6
  408bd2:	4b15      	ldr	r3, [pc, #84]	; (408c28 <lv_obj_signal+0x114>)
  408bd4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408bd6:	2001      	movs	r0, #1
  408bd8:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  408bda:	4620      	mov	r0, r4
  408bdc:	4b16      	ldr	r3, [pc, #88]	; (408c38 <lv_obj_signal+0x124>)
  408bde:	4798      	blx	r3
  408be0:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  408be2:	2102      	movs	r1, #2
  408be4:	4b10      	ldr	r3, [pc, #64]	; (408c28 <lv_obj_signal+0x114>)
  408be6:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  408be8:	2104      	movs	r1, #4
  408bea:	4620      	mov	r0, r4
  408bec:	4b0f      	ldr	r3, [pc, #60]	; (408c2c <lv_obj_signal+0x118>)
  408bee:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408bf0:	2001      	movs	r0, #1
  408bf2:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  408bf4:	4b10      	ldr	r3, [pc, #64]	; (408c38 <lv_obj_signal+0x124>)
  408bf6:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  408bf8:	2106      	movs	r1, #6
  408bfa:	4b0c      	ldr	r3, [pc, #48]	; (408c2c <lv_obj_signal+0x118>)
  408bfc:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408bfe:	2001      	movs	r0, #1
  408c00:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  408c02:	4b0e      	ldr	r3, [pc, #56]	; (408c3c <lv_obj_signal+0x128>)
  408c04:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408c06:	2001      	movs	r0, #1
  408c08:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  408c0a:	2000      	movs	r0, #0
  408c0c:	bd10      	pop	{r4, pc}
  408c0e:	bf00      	nop
  408c10:	00423614 	.word	0x00423614
  408c14:	00407bd5 	.word	0x00407bd5
  408c18:	0040679d 	.word	0x0040679d
  408c1c:	004088e1 	.word	0x004088e1
  408c20:	004060e5 	.word	0x004060e5
  408c24:	00405419 	.word	0x00405419
  408c28:	00408865 	.word	0x00408865
  408c2c:	004088a1 	.word	0x004088a1
  408c30:	00407971 	.word	0x00407971
  408c34:	00403681 	.word	0x00403681
  408c38:	00408ae5 	.word	0x00408ae5
  408c3c:	00405745 	.word	0x00405745

00408c40 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  408c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408c44:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  408c46:	2500      	movs	r5, #0
  408c48:	e057      	b.n	408cfa <lv_refr_join_area+0xba>
        *d8 = *s8;
  408c4a:	f811 0b01 	ldrb.w	r0, [r1], #1
  408c4e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408c52:	3b01      	subs	r3, #1
    while(len) {
  408c54:	2b00      	cmp	r3, #0
  408c56:	d1f8      	bne.n	408c4a <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  408c58:	4426      	add	r6, r4
  408c5a:	2301      	movs	r3, #1
  408c5c:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  408c60:	3401      	adds	r4, #1
  408c62:	4b2f      	ldr	r3, [pc, #188]	; (408d20 <lv_refr_join_area+0xe0>)
  408c64:	6819      	ldr	r1, [r3, #0]
  408c66:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  408c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408c6e:	429c      	cmp	r4, r3
  408c70:	d242      	bcs.n	408cf8 <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  408c72:	190b      	adds	r3, r1, r4
  408c74:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408c78:	2b00      	cmp	r3, #0
  408c7a:	d1f1      	bne.n	408c60 <lv_refr_join_area+0x20>
  408c7c:	42ac      	cmp	r4, r5
  408c7e:	d0ef      	beq.n	408c60 <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  408c80:	f105 000c 	add.w	r0, r5, #12
  408c84:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  408c88:	f104 030c 	add.w	r3, r4, #12
  408c8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408c90:	3102      	adds	r1, #2
  408c92:	3002      	adds	r0, #2
  408c94:	4b23      	ldr	r3, [pc, #140]	; (408d24 <lv_refr_join_area+0xe4>)
  408c96:	4798      	blx	r3
  408c98:	2800      	cmp	r0, #0
  408c9a:	d0e1      	beq.n	408c60 <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  408c9c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 408d20 <lv_refr_join_area+0xe0>
  408ca0:	f8d8 2000 	ldr.w	r2, [r8]
  408ca4:	f105 070c 	add.w	r7, r5, #12
  408ca8:	00ff      	lsls	r7, r7, #3
  408caa:	19d1      	adds	r1, r2, r7
  408cac:	f104 060c 	add.w	r6, r4, #12
  408cb0:	00f6      	lsls	r6, r6, #3
  408cb2:	4432      	add	r2, r6
  408cb4:	3202      	adds	r2, #2
  408cb6:	3102      	adds	r1, #2
  408cb8:	4668      	mov	r0, sp
  408cba:	4b1b      	ldr	r3, [pc, #108]	; (408d28 <lv_refr_join_area+0xe8>)
  408cbc:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408cbe:	4668      	mov	r0, sp
  408cc0:	f8df a068 	ldr.w	sl, [pc, #104]	; 408d2c <lv_refr_join_area+0xec>
  408cc4:	47d0      	blx	sl
  408cc6:	4681      	mov	r9, r0
  408cc8:	f8d8 0000 	ldr.w	r0, [r8]
  408ccc:	4438      	add	r0, r7
  408cce:	3002      	adds	r0, #2
  408cd0:	47d0      	blx	sl
  408cd2:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  408cd4:	f8d8 0000 	ldr.w	r0, [r8]
  408cd8:	4430      	add	r0, r6
  408cda:	3002      	adds	r0, #2
  408cdc:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408cde:	4438      	add	r0, r7
  408ce0:	4581      	cmp	r9, r0
  408ce2:	d2bd      	bcs.n	408c60 <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  408ce4:	f8d8 6000 	ldr.w	r6, [r8]
  408ce8:	f105 020c 	add.w	r2, r5, #12
  408cec:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  408cf0:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  408cf2:	4669      	mov	r1, sp
  408cf4:	2308      	movs	r3, #8
  408cf6:	e7ad      	b.n	408c54 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  408cf8:	3501      	adds	r5, #1
  408cfa:	4b09      	ldr	r3, [pc, #36]	; (408d20 <lv_refr_join_area+0xe0>)
  408cfc:	681b      	ldr	r3, [r3, #0]
  408cfe:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  408d02:	f3c2 0209 	ubfx	r2, r2, #0, #10
  408d06:	4295      	cmp	r5, r2
  408d08:	d206      	bcs.n	408d18 <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  408d0a:	442b      	add	r3, r5
  408d0c:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408d10:	2b00      	cmp	r3, #0
  408d12:	d1f1      	bne.n	408cf8 <lv_refr_join_area+0xb8>
  408d14:	2400      	movs	r4, #0
  408d16:	e7a4      	b.n	408c62 <lv_refr_join_area+0x22>
            }
        }
    }
}
  408d18:	b002      	add	sp, #8
  408d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408d1e:	bf00      	nop
  408d20:	2040c390 	.word	0x2040c390
  408d24:	00414e99 	.word	0x00414e99
  408d28:	00414cc1 	.word	0x00414cc1
  408d2c:	00414c4d 	.word	0x00414c4d

00408d30 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  408d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408d34:	4606      	mov	r6, r0
  408d36:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  408d38:	2200      	movs	r2, #0
  408d3a:	3110      	adds	r1, #16
  408d3c:	4b20      	ldr	r3, [pc, #128]	; (408dc0 <lv_refr_get_top_obj+0x90>)
  408d3e:	4798      	blx	r3
  408d40:	b3b8      	cbz	r0, 408db2 <lv_refr_get_top_obj+0x82>
  408d42:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  408d46:	f013 0f10 	tst.w	r3, #16
  408d4a:	d134      	bne.n	408db6 <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  408d4c:	f8d8 3020 	ldr.w	r3, [r8, #32]
  408d50:	2202      	movs	r2, #2
  408d52:	4631      	mov	r1, r6
  408d54:	4640      	mov	r0, r8
  408d56:	4798      	blx	r3
  408d58:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408d5a:	2803      	cmp	r0, #3
  408d5c:	d02d      	beq.n	408dba <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408d5e:	2801      	cmp	r0, #1
  408d60:	d013      	beq.n	408d8a <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  408d62:	f108 0704 	add.w	r7, r8, #4
  408d66:	4638      	mov	r0, r7
  408d68:	4b16      	ldr	r3, [pc, #88]	; (408dc4 <lv_refr_get_top_obj+0x94>)
  408d6a:	4798      	blx	r3
  408d6c:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  408d6e:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  408d70:	b1b4      	cbz	r4, 408da0 <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  408d72:	4621      	mov	r1, r4
  408d74:	4630      	mov	r0, r6
  408d76:	f7ff ffdb 	bl	408d30 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  408d7a:	4605      	mov	r5, r0
  408d7c:	b980      	cbnz	r0, 408da0 <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  408d7e:	4621      	mov	r1, r4
  408d80:	4638      	mov	r0, r7
  408d82:	4b11      	ldr	r3, [pc, #68]	; (408dc8 <lv_refr_get_top_obj+0x98>)
  408d84:	4798      	blx	r3
  408d86:	4604      	mov	r4, r0
  408d88:	e7f2      	b.n	408d70 <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408d8a:	f248 020c 	movw	r2, #32780	; 0x800c
  408d8e:	2100      	movs	r1, #0
  408d90:	4640      	mov	r0, r8
  408d92:	4b0e      	ldr	r3, [pc, #56]	; (408dcc <lv_refr_get_top_obj+0x9c>)
  408d94:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408d96:	28ff      	cmp	r0, #255	; 0xff
  408d98:	d0e3      	beq.n	408d62 <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  408d9a:	f04f 0902 	mov.w	r9, #2
  408d9e:	e7e0      	b.n	408d62 <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  408da0:	b115      	cbz	r5, 408da8 <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  408da2:	4628      	mov	r0, r5
  408da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  408da8:	f1b9 0f01 	cmp.w	r9, #1
  408dac:	d1f9      	bne.n	408da2 <lv_refr_get_top_obj+0x72>
                found_p = obj;
  408dae:	4645      	mov	r5, r8
  408db0:	e7f7      	b.n	408da2 <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  408db2:	2500      	movs	r5, #0
  408db4:	e7f5      	b.n	408da2 <lv_refr_get_top_obj+0x72>
  408db6:	2500      	movs	r5, #0
  408db8:	e7f3      	b.n	408da2 <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408dba:	2500      	movs	r5, #0
  408dbc:	e7f1      	b.n	408da2 <lv_refr_get_top_obj+0x72>
  408dbe:	bf00      	nop
  408dc0:	00414edd 	.word	0x00414edd
  408dc4:	0041583d 	.word	0x0041583d
  408dc8:	00415851 	.word	0x00415851
  408dcc:	004068a9 	.word	0x004068a9

00408dd0 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  408dd0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  408dd4:	f013 0f10 	tst.w	r3, #16
  408dd8:	d000      	beq.n	408ddc <lv_refr_obj+0xc>
  408dda:	4770      	bx	lr
{
  408ddc:	b570      	push	{r4, r5, r6, lr}
  408dde:	b08a      	sub	sp, #40	; 0x28
  408de0:	460e      	mov	r6, r1
  408de2:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  408de4:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  408de8:	a904      	add	r1, sp, #16
  408dea:	4b33      	ldr	r3, [pc, #204]	; (408eb8 <lv_refr_obj+0xe8>)
  408dec:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  408dee:	b2a3      	uxth	r3, r4
  408df0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  408df4:	1ad2      	subs	r2, r2, r3
  408df6:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  408dfa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  408dfe:	1ad2      	subs	r2, r2, r3
  408e00:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  408e04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408e08:	441a      	add	r2, r3
  408e0a:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  408e0e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  408e12:	4413      	add	r3, r2
  408e14:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  408e18:	aa04      	add	r2, sp, #16
  408e1a:	4631      	mov	r1, r6
  408e1c:	a806      	add	r0, sp, #24
  408e1e:	4b27      	ldr	r3, [pc, #156]	; (408ebc <lv_refr_obj+0xec>)
  408e20:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  408e22:	b1a8      	cbz	r0, 408e50 <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  408e24:	6a2b      	ldr	r3, [r5, #32]
  408e26:	b11b      	cbz	r3, 408e30 <lv_refr_obj+0x60>
  408e28:	2200      	movs	r2, #0
  408e2a:	a906      	add	r1, sp, #24
  408e2c:	4628      	mov	r0, r5
  408e2e:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  408e30:	a904      	add	r1, sp, #16
  408e32:	4628      	mov	r0, r5
  408e34:	4b20      	ldr	r3, [pc, #128]	; (408eb8 <lv_refr_obj+0xe8>)
  408e36:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  408e38:	aa04      	add	r2, sp, #16
  408e3a:	4631      	mov	r1, r6
  408e3c:	a808      	add	r0, sp, #32
  408e3e:	4b1f      	ldr	r3, [pc, #124]	; (408ebc <lv_refr_obj+0xec>)
  408e40:	4798      	blx	r3
        if(union_ok != false) {
  408e42:	b938      	cbnz	r0, 408e54 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  408e44:	6a2b      	ldr	r3, [r5, #32]
  408e46:	b11b      	cbz	r3, 408e50 <lv_refr_obj+0x80>
  408e48:	2201      	movs	r2, #1
  408e4a:	a906      	add	r1, sp, #24
  408e4c:	4628      	mov	r0, r5
  408e4e:	4798      	blx	r3
    }
}
  408e50:	b00a      	add	sp, #40	; 0x28
  408e52:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  408e54:	1d2e      	adds	r6, r5, #4
  408e56:	4630      	mov	r0, r6
  408e58:	4b19      	ldr	r3, [pc, #100]	; (408ec0 <lv_refr_obj+0xf0>)
  408e5a:	4798      	blx	r3
  408e5c:	4604      	mov	r4, r0
  408e5e:	e004      	b.n	408e6a <lv_refr_obj+0x9a>
  408e60:	4621      	mov	r1, r4
  408e62:	4630      	mov	r0, r6
  408e64:	4b17      	ldr	r3, [pc, #92]	; (408ec4 <lv_refr_obj+0xf4>)
  408e66:	4798      	blx	r3
  408e68:	4604      	mov	r4, r0
  408e6a:	2c00      	cmp	r4, #0
  408e6c:	d0ea      	beq.n	408e44 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  408e6e:	a902      	add	r1, sp, #8
  408e70:	4620      	mov	r0, r4
  408e72:	4b11      	ldr	r3, [pc, #68]	; (408eb8 <lv_refr_obj+0xe8>)
  408e74:	4798      	blx	r3
                child_area.x1 -= ext_size;
  408e76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  408e78:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  408e7c:	1ad2      	subs	r2, r2, r3
  408e7e:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  408e82:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  408e86:	1ad2      	subs	r2, r2, r3
  408e88:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  408e8c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  408e90:	441a      	add	r2, r3
  408e92:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  408e96:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  408e9a:	4413      	add	r3, r2
  408e9c:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  408ea0:	aa02      	add	r2, sp, #8
  408ea2:	a908      	add	r1, sp, #32
  408ea4:	4668      	mov	r0, sp
  408ea6:	4b05      	ldr	r3, [pc, #20]	; (408ebc <lv_refr_obj+0xec>)
  408ea8:	4798      	blx	r3
                if(union_ok) {
  408eaa:	2800      	cmp	r0, #0
  408eac:	d0d8      	beq.n	408e60 <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  408eae:	4669      	mov	r1, sp
  408eb0:	4620      	mov	r0, r4
  408eb2:	f7ff ff8d 	bl	408dd0 <lv_refr_obj>
  408eb6:	e7d3      	b.n	408e60 <lv_refr_obj+0x90>
  408eb8:	0040555d 	.word	0x0040555d
  408ebc:	00414c69 	.word	0x00414c69
  408ec0:	00415847 	.word	0x00415847
  408ec4:	0041585f 	.word	0x0041585f

00408ec8 <lv_refr_obj_and_children>:
{
  408ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408eca:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408ecc:	4604      	mov	r4, r0
  408ece:	b150      	cbz	r0, 408ee6 <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  408ed0:	2c00      	cmp	r4, #0
  408ed2:	d02c      	beq.n	408f2e <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  408ed4:	4631      	mov	r1, r6
  408ed6:	4620      	mov	r0, r4
  408ed8:	4b15      	ldr	r3, [pc, #84]	; (408f30 <lv_refr_obj_and_children+0x68>)
  408eda:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  408edc:	4620      	mov	r0, r4
  408ede:	4b15      	ldr	r3, [pc, #84]	; (408f34 <lv_refr_obj_and_children+0x6c>)
  408ee0:	4798      	blx	r3
  408ee2:	4607      	mov	r7, r0
    while(par != NULL) {
  408ee4:	e01b      	b.n	408f1e <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  408ee6:	4b14      	ldr	r3, [pc, #80]	; (408f38 <lv_refr_obj_and_children+0x70>)
  408ee8:	6818      	ldr	r0, [r3, #0]
  408eea:	4b14      	ldr	r3, [pc, #80]	; (408f3c <lv_refr_obj_and_children+0x74>)
  408eec:	4798      	blx	r3
  408eee:	4604      	mov	r4, r0
  408ef0:	e7ee      	b.n	408ed0 <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  408ef2:	4631      	mov	r1, r6
  408ef4:	4620      	mov	r0, r4
  408ef6:	4b0e      	ldr	r3, [pc, #56]	; (408f30 <lv_refr_obj_and_children+0x68>)
  408ef8:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  408efa:	4621      	mov	r1, r4
  408efc:	4628      	mov	r0, r5
  408efe:	4b10      	ldr	r3, [pc, #64]	; (408f40 <lv_refr_obj_and_children+0x78>)
  408f00:	4798      	blx	r3
  408f02:	4604      	mov	r4, r0
        while(i != NULL) {
  408f04:	2c00      	cmp	r4, #0
  408f06:	d1f4      	bne.n	408ef2 <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  408f08:	6a3b      	ldr	r3, [r7, #32]
  408f0a:	b11b      	cbz	r3, 408f14 <lv_refr_obj_and_children+0x4c>
  408f0c:	2201      	movs	r2, #1
  408f0e:	4631      	mov	r1, r6
  408f10:	4638      	mov	r0, r7
  408f12:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  408f14:	4638      	mov	r0, r7
  408f16:	4b07      	ldr	r3, [pc, #28]	; (408f34 <lv_refr_obj_and_children+0x6c>)
  408f18:	4798      	blx	r3
        border_p = par;
  408f1a:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  408f1c:	4607      	mov	r7, r0
    while(par != NULL) {
  408f1e:	b137      	cbz	r7, 408f2e <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  408f20:	1d3d      	adds	r5, r7, #4
  408f22:	4621      	mov	r1, r4
  408f24:	4628      	mov	r0, r5
  408f26:	4b06      	ldr	r3, [pc, #24]	; (408f40 <lv_refr_obj_and_children+0x78>)
  408f28:	4798      	blx	r3
  408f2a:	4604      	mov	r4, r0
        while(i != NULL) {
  408f2c:	e7ea      	b.n	408f04 <lv_refr_obj_and_children+0x3c>
  408f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  408f30:	00408dd1 	.word	0x00408dd1
  408f34:	00405449 	.word	0x00405449
  408f38:	2040c390 	.word	0x2040c390
  408f3c:	004031f9 	.word	0x004031f9
  408f40:	0041585f 	.word	0x0041585f

00408f44 <_lv_refr_init>:
{
  408f44:	4770      	bx	lr
	...

00408f48 <_lv_inv_area>:
{
  408f48:	b530      	push	{r4, r5, lr}
  408f4a:	b085      	sub	sp, #20
  408f4c:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  408f4e:	4605      	mov	r5, r0
  408f50:	2800      	cmp	r0, #0
  408f52:	d035      	beq.n	408fc0 <_lv_inv_area+0x78>
    if(!disp) return;
  408f54:	2d00      	cmp	r5, #0
  408f56:	d03d      	beq.n	408fd4 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  408f58:	2c00      	cmp	r4, #0
  408f5a:	d035      	beq.n	408fc8 <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  408f5c:	2300      	movs	r3, #0
  408f5e:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  408f62:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  408f66:	4628      	mov	r0, r5
  408f68:	4b34      	ldr	r3, [pc, #208]	; (40903c <_lv_inv_area+0xf4>)
  408f6a:	4798      	blx	r3
  408f6c:	b280      	uxth	r0, r0
  408f6e:	3801      	subs	r0, #1
  408f70:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  408f74:	4628      	mov	r0, r5
  408f76:	4b32      	ldr	r3, [pc, #200]	; (409040 <_lv_inv_area+0xf8>)
  408f78:	4798      	blx	r3
  408f7a:	b280      	uxth	r0, r0
  408f7c:	3801      	subs	r0, #1
  408f7e:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  408f82:	aa02      	add	r2, sp, #8
  408f84:	4621      	mov	r1, r4
  408f86:	4668      	mov	r0, sp
  408f88:	4b2e      	ldr	r3, [pc, #184]	; (409044 <_lv_inv_area+0xfc>)
  408f8a:	4798      	blx	r3
    if(suc != false) {
  408f8c:	b310      	cbz	r0, 408fd4 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  408f8e:	692b      	ldr	r3, [r5, #16]
  408f90:	b113      	cbz	r3, 408f98 <_lv_inv_area+0x50>
  408f92:	4669      	mov	r1, sp
  408f94:	4628      	mov	r0, r5
  408f96:	4798      	blx	r3
{
  408f98:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  408f9a:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408fa2:	429c      	cmp	r4, r3
  408fa4:	da18      	bge.n	408fd8 <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  408fa6:	f104 010c 	add.w	r1, r4, #12
  408faa:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  408fae:	2200      	movs	r2, #0
  408fb0:	3102      	adds	r1, #2
  408fb2:	4668      	mov	r0, sp
  408fb4:	4b24      	ldr	r3, [pc, #144]	; (409048 <_lv_inv_area+0x100>)
  408fb6:	4798      	blx	r3
  408fb8:	b960      	cbnz	r0, 408fd4 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  408fba:	3401      	adds	r4, #1
  408fbc:	b2a4      	uxth	r4, r4
  408fbe:	e7ec      	b.n	408f9a <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  408fc0:	4b22      	ldr	r3, [pc, #136]	; (40904c <_lv_inv_area+0x104>)
  408fc2:	4798      	blx	r3
  408fc4:	4605      	mov	r5, r0
  408fc6:	e7c5      	b.n	408f54 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  408fc8:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408fcc:	f36f 0309 	bfc	r3, #0, #10
  408fd0:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  408fd4:	b005      	add	sp, #20
  408fd6:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  408fd8:	2b1f      	cmp	r3, #31
  408fda:	dc1b      	bgt.n	409014 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  408fdc:	330c      	adds	r3, #12
  408fde:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  408fe2:	3302      	adds	r3, #2
  408fe4:	4669      	mov	r1, sp
  408fe6:	2208      	movs	r2, #8
  408fe8:	e004      	b.n	408ff4 <_lv_inv_area+0xac>
        *d8 = *s8;
  408fea:	f811 0b01 	ldrb.w	r0, [r1], #1
  408fee:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  408ff2:	3a01      	subs	r2, #1
    while(len) {
  408ff4:	2a00      	cmp	r2, #0
  408ff6:	d1f8      	bne.n	408fea <_lv_inv_area+0xa2>
        disp->inv_p++;
  408ff8:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  408ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
  409000:	3201      	adds	r2, #1
  409002:	f362 0309 	bfi	r3, r2, #0, #10
  409006:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  40900a:	2103      	movs	r1, #3
  40900c:	6b68      	ldr	r0, [r5, #52]	; 0x34
  40900e:	4b10      	ldr	r3, [pc, #64]	; (409050 <_lv_inv_area+0x108>)
  409010:	4798      	blx	r3
  409012:	e7df      	b.n	408fd4 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  409014:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409018:	f36f 0309 	bfc	r3, #0, #10
  40901c:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  409020:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  409024:	aa02      	add	r2, sp, #8
  409026:	2308      	movs	r3, #8
  409028:	e004      	b.n	409034 <_lv_inv_area+0xec>
        *d8 = *s8;
  40902a:	f812 0b01 	ldrb.w	r0, [r2], #1
  40902e:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  409032:	3b01      	subs	r3, #1
    while(len) {
  409034:	2b00      	cmp	r3, #0
  409036:	d1f8      	bne.n	40902a <_lv_inv_area+0xe2>
  409038:	e7de      	b.n	408ff8 <_lv_inv_area+0xb0>
  40903a:	bf00      	nop
  40903c:	00414401 	.word	0x00414401
  409040:	00414431 	.word	0x00414431
  409044:	00414c69 	.word	0x00414c69
  409048:	00414edd 	.word	0x00414edd
  40904c:	004143f5 	.word	0x004143f5
  409050:	0041658d 	.word	0x0041658d

00409054 <_lv_refr_get_disp_refreshing>:
}
  409054:	4b01      	ldr	r3, [pc, #4]	; (40905c <_lv_refr_get_disp_refreshing+0x8>)
  409056:	6818      	ldr	r0, [r3, #0]
  409058:	4770      	bx	lr
  40905a:	bf00      	nop
  40905c:	2040c390 	.word	0x2040c390

00409060 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  409060:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409062:	4d1e      	ldr	r5, [pc, #120]	; (4090dc <lv_refr_vdb_flush+0x7c>)
  409064:	6828      	ldr	r0, [r5, #0]
  409066:	4b1e      	ldr	r3, [pc, #120]	; (4090e0 <lv_refr_vdb_flush+0x80>)
  409068:	4798      	blx	r3
  40906a:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  40906c:	6828      	ldr	r0, [r5, #0]
  40906e:	4b1d      	ldr	r3, [pc, #116]	; (4090e4 <lv_refr_vdb_flush+0x84>)
  409070:	4798      	blx	r3
  409072:	b978      	cbnz	r0, 409094 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  409074:	2301      	movs	r3, #1
  409076:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  409078:	4b18      	ldr	r3, [pc, #96]	; (4090dc <lv_refr_vdb_flush+0x7c>)
  40907a:	681b      	ldr	r3, [r3, #0]
  40907c:	685b      	ldr	r3, [r3, #4]
  40907e:	6a1a      	ldr	r2, [r3, #32]
  409080:	f012 0f01 	tst.w	r2, #1
  409084:	d010      	beq.n	4090a8 <lv_refr_vdb_flush+0x48>
  409086:	6a1b      	ldr	r3, [r3, #32]
  409088:	f013 0f02 	tst.w	r3, #2
  40908c:	d00c      	beq.n	4090a8 <lv_refr_vdb_flush+0x48>
  40908e:	2301      	movs	r3, #1
  409090:	61e3      	str	r3, [r4, #28]
  409092:	e00b      	b.n	4090ac <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  409094:	69a3      	ldr	r3, [r4, #24]
  409096:	2b00      	cmp	r3, #0
  409098:	d0ec      	beq.n	409074 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  40909a:	4b10      	ldr	r3, [pc, #64]	; (4090dc <lv_refr_vdb_flush+0x7c>)
  40909c:	6818      	ldr	r0, [r3, #0]
  40909e:	69c3      	ldr	r3, [r0, #28]
  4090a0:	2b00      	cmp	r3, #0
  4090a2:	d0f7      	beq.n	409094 <lv_refr_vdb_flush+0x34>
  4090a4:	4798      	blx	r3
  4090a6:	e7f5      	b.n	409094 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  4090a8:	2300      	movs	r3, #0
  4090aa:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4090ac:	4b0e      	ldr	r3, [pc, #56]	; (4090e8 <lv_refr_vdb_flush+0x88>)
  4090ae:	4798      	blx	r3
  4090b0:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  4090b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4090b4:	b103      	cbz	r3, 4090b8 <lv_refr_vdb_flush+0x58>
  4090b6:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  4090b8:	68eb      	ldr	r3, [r5, #12]
  4090ba:	b123      	cbz	r3, 4090c6 <lv_refr_vdb_flush+0x66>
  4090bc:	68a2      	ldr	r2, [r4, #8]
  4090be:	f104 0110 	add.w	r1, r4, #16
  4090c2:	4628      	mov	r0, r5
  4090c4:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  4090c6:	6823      	ldr	r3, [r4, #0]
  4090c8:	b12b      	cbz	r3, 4090d6 <lv_refr_vdb_flush+0x76>
  4090ca:	6862      	ldr	r2, [r4, #4]
  4090cc:	b11a      	cbz	r2, 4090d6 <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  4090ce:	68a1      	ldr	r1, [r4, #8]
  4090d0:	428b      	cmp	r3, r1
  4090d2:	d001      	beq.n	4090d8 <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  4090d4:	60a3      	str	r3, [r4, #8]
  4090d6:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  4090d8:	60a2      	str	r2, [r4, #8]
  4090da:	bd38      	pop	{r3, r4, r5, pc}
  4090dc:	2040c390 	.word	0x2040c390
  4090e0:	00414505 	.word	0x00414505
  4090e4:	0041453d 	.word	0x0041453d
  4090e8:	00409055 	.word	0x00409055

004090ec <lv_refr_area_part>:
{
  4090ec:	b570      	push	{r4, r5, r6, lr}
  4090ee:	b09c      	sub	sp, #112	; 0x70
  4090f0:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  4090f2:	4d4c      	ldr	r5, [pc, #304]	; (409224 <lv_refr_area_part+0x138>)
  4090f4:	6828      	ldr	r0, [r5, #0]
  4090f6:	4b4c      	ldr	r3, [pc, #304]	; (409228 <lv_refr_area_part+0x13c>)
  4090f8:	4798      	blx	r3
  4090fa:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  4090fc:	6828      	ldr	r0, [r5, #0]
  4090fe:	4b4b      	ldr	r3, [pc, #300]	; (40922c <lv_refr_area_part+0x140>)
  409100:	4798      	blx	r3
  409102:	b940      	cbnz	r0, 409116 <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  409104:	69a3      	ldr	r3, [r4, #24]
  409106:	b133      	cbz	r3, 409116 <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  409108:	4b46      	ldr	r3, [pc, #280]	; (409224 <lv_refr_area_part+0x138>)
  40910a:	6818      	ldr	r0, [r3, #0]
  40910c:	69c3      	ldr	r3, [r0, #28]
  40910e:	2b00      	cmp	r3, #0
  409110:	d0f8      	beq.n	409104 <lv_refr_area_part+0x18>
  409112:	4798      	blx	r3
  409114:	e7f6      	b.n	409104 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  409116:	f104 0210 	add.w	r2, r4, #16
  40911a:	4631      	mov	r1, r6
  40911c:	a81a      	add	r0, sp, #104	; 0x68
  40911e:	4b44      	ldr	r3, [pc, #272]	; (409230 <lv_refr_area_part+0x144>)
  409120:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  409122:	4d40      	ldr	r5, [pc, #256]	; (409224 <lv_refr_area_part+0x138>)
  409124:	6828      	ldr	r0, [r5, #0]
  409126:	4b43      	ldr	r3, [pc, #268]	; (409234 <lv_refr_area_part+0x148>)
  409128:	4798      	blx	r3
  40912a:	4601      	mov	r1, r0
  40912c:	a81a      	add	r0, sp, #104	; 0x68
  40912e:	4b42      	ldr	r3, [pc, #264]	; (409238 <lv_refr_area_part+0x14c>)
  409130:	4798      	blx	r3
  409132:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  409134:	682b      	ldr	r3, [r5, #0]
  409136:	6c99      	ldr	r1, [r3, #72]	; 0x48
  409138:	2900      	cmp	r1, #0
  40913a:	d03d      	beq.n	4091b8 <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  40913c:	a81a      	add	r0, sp, #104	; 0x68
  40913e:	4b3e      	ldr	r3, [pc, #248]	; (409238 <lv_refr_area_part+0x14c>)
  409140:	4798      	blx	r3
  409142:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  409144:	2c00      	cmp	r4, #0
  409146:	bf08      	it	eq
  409148:	2d00      	cmpeq	r5, #0
  40914a:	d113      	bne.n	409174 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  40914c:	4b35      	ldr	r3, [pc, #212]	; (409224 <lv_refr_area_part+0x138>)
  40914e:	681b      	ldr	r3, [r3, #0]
  409150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  409152:	2b00      	cmp	r3, #0
  409154:	d04a      	beq.n	4091ec <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  409156:	a805      	add	r0, sp, #20
  409158:	4b38      	ldr	r3, [pc, #224]	; (40923c <lv_refr_area_part+0x150>)
  40915a:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  40915c:	4b31      	ldr	r3, [pc, #196]	; (409224 <lv_refr_area_part+0x138>)
  40915e:	681b      	ldr	r3, [r3, #0]
  409160:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  409164:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  409168:	a902      	add	r1, sp, #8
  40916a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  40916c:	4b34      	ldr	r3, [pc, #208]	; (409240 <lv_refr_area_part+0x154>)
  40916e:	4798      	blx	r3
            if(res == LV_RES_OK) {
  409170:	2801      	cmp	r0, #1
  409172:	d023      	beq.n	4091bc <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  409174:	4b2b      	ldr	r3, [pc, #172]	; (409224 <lv_refr_area_part+0x138>)
  409176:	681b      	ldr	r3, [r3, #0]
  409178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40917a:	b12b      	cbz	r3, 409188 <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  40917c:	2d00      	cmp	r5, #0
  40917e:	d048      	beq.n	409212 <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  409180:	a91a      	add	r1, sp, #104	; 0x68
  409182:	4628      	mov	r0, r5
  409184:	4b2f      	ldr	r3, [pc, #188]	; (409244 <lv_refr_area_part+0x158>)
  409186:	4798      	blx	r3
    if(top_act_scr == NULL) {
  409188:	2c00      	cmp	r4, #0
  40918a:	d044      	beq.n	409216 <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  40918c:	a91a      	add	r1, sp, #104	; 0x68
  40918e:	4620      	mov	r0, r4
  409190:	4d2c      	ldr	r5, [pc, #176]	; (409244 <lv_refr_area_part+0x158>)
  409192:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  409194:	4c23      	ldr	r4, [pc, #140]	; (409224 <lv_refr_area_part+0x138>)
  409196:	6820      	ldr	r0, [r4, #0]
  409198:	4b2b      	ldr	r3, [pc, #172]	; (409248 <lv_refr_area_part+0x15c>)
  40919a:	4798      	blx	r3
  40919c:	a91a      	add	r1, sp, #104	; 0x68
  40919e:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  4091a0:	6820      	ldr	r0, [r4, #0]
  4091a2:	4b2a      	ldr	r3, [pc, #168]	; (40924c <lv_refr_area_part+0x160>)
  4091a4:	4798      	blx	r3
  4091a6:	a91a      	add	r1, sp, #104	; 0x68
  4091a8:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  4091aa:	6820      	ldr	r0, [r4, #0]
  4091ac:	4b28      	ldr	r3, [pc, #160]	; (409250 <lv_refr_area_part+0x164>)
  4091ae:	4798      	blx	r3
  4091b0:	2800      	cmp	r0, #0
  4091b2:	d034      	beq.n	40921e <lv_refr_area_part+0x132>
}
  4091b4:	b01c      	add	sp, #112	; 0x70
  4091b6:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  4091b8:	2500      	movs	r5, #0
  4091ba:	e7c3      	b.n	409144 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  4091bc:	9b02      	ldr	r3, [sp, #8]
  4091be:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4091c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4091c6:	f3c2 124a 	ubfx	r2, r2, #5, #11
  4091ca:	3a01      	subs	r2, #1
  4091cc:	9200      	str	r2, [sp, #0]
  4091ce:	3b01      	subs	r3, #1
  4091d0:	2200      	movs	r2, #0
  4091d2:	4611      	mov	r1, r2
  4091d4:	a803      	add	r0, sp, #12
  4091d6:	4e1f      	ldr	r6, [pc, #124]	; (409254 <lv_refr_area_part+0x168>)
  4091d8:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  4091da:	4b12      	ldr	r3, [pc, #72]	; (409224 <lv_refr_area_part+0x138>)
  4091dc:	681a      	ldr	r2, [r3, #0]
  4091de:	ab05      	add	r3, sp, #20
  4091e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  4091e2:	a91a      	add	r1, sp, #104	; 0x68
  4091e4:	a803      	add	r0, sp, #12
  4091e6:	4e1c      	ldr	r6, [pc, #112]	; (409258 <lv_refr_area_part+0x16c>)
  4091e8:	47b0      	blx	r6
  4091ea:	e7c3      	b.n	409174 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  4091ec:	a805      	add	r0, sp, #20
  4091ee:	4b1b      	ldr	r3, [pc, #108]	; (40925c <lv_refr_area_part+0x170>)
  4091f0:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  4091f2:	4b0c      	ldr	r3, [pc, #48]	; (409224 <lv_refr_area_part+0x138>)
  4091f4:	681b      	ldr	r3, [r3, #0]
  4091f6:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  4091fa:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  4091fe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  409202:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  409206:	aa05      	add	r2, sp, #20
  409208:	a91a      	add	r1, sp, #104	; 0x68
  40920a:	4608      	mov	r0, r1
  40920c:	4b14      	ldr	r3, [pc, #80]	; (409260 <lv_refr_area_part+0x174>)
  40920e:	4798      	blx	r3
  409210:	e7b0      	b.n	409174 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  409212:	461d      	mov	r5, r3
  409214:	e7b4      	b.n	409180 <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  409216:	4b03      	ldr	r3, [pc, #12]	; (409224 <lv_refr_area_part+0x138>)
  409218:	681b      	ldr	r3, [r3, #0]
  40921a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  40921c:	e7b6      	b.n	40918c <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  40921e:	4b11      	ldr	r3, [pc, #68]	; (409264 <lv_refr_area_part+0x178>)
  409220:	4798      	blx	r3
}
  409222:	e7c7      	b.n	4091b4 <lv_refr_area_part+0xc8>
  409224:	2040c390 	.word	0x2040c390
  409228:	00414505 	.word	0x00414505
  40922c:	0041453d 	.word	0x0041453d
  409230:	00414c69 	.word	0x00414c69
  409234:	004031f9 	.word	0x004031f9
  409238:	00408d31 	.word	0x00408d31
  40923c:	0040cba1 	.word	0x0040cba1
  409240:	00413019 	.word	0x00413019
  409244:	00408ec9 	.word	0x00408ec9
  409248:	00403231 	.word	0x00403231
  40924c:	0040324d 	.word	0x0040324d
  409250:	00414555 	.word	0x00414555
  409254:	00414c33 	.word	0x00414c33
  409258:	0040ce4d 	.word	0x0040ce4d
  40925c:	00411b6d 	.word	0x00411b6d
  409260:	00411bb9 	.word	0x00411bb9
  409264:	00409061 	.word	0x00409061

00409268 <lv_refr_area>:
{
  409268:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40926c:	b083      	sub	sp, #12
  40926e:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  409270:	4b62      	ldr	r3, [pc, #392]	; (4093fc <lv_refr_area+0x194>)
  409272:	6818      	ldr	r0, [r3, #0]
  409274:	4b62      	ldr	r3, [pc, #392]	; (409400 <lv_refr_area+0x198>)
  409276:	4798      	blx	r3
  409278:	2800      	cmp	r0, #0
  40927a:	d157      	bne.n	40932c <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40927c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 4093fc <lv_refr_area+0x194>
  409280:	f8d9 0000 	ldr.w	r0, [r9]
  409284:	4b5f      	ldr	r3, [pc, #380]	; (409404 <lv_refr_area+0x19c>)
  409286:	4798      	blx	r3
  409288:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40928a:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  40928e:	8833      	ldrh	r3, [r6, #0]
  409290:	eba8 0803 	sub.w	r8, r8, r3
  409294:	fa1f f888 	uxth.w	r8, r8
  409298:	f108 0801 	add.w	r8, r8, #1
  40929c:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4092a0:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  4092a4:	b2bc      	uxth	r4, r7
  4092a6:	8873      	ldrh	r3, [r6, #2]
  4092a8:	1ae4      	subs	r4, r4, r3
  4092aa:	b2a4      	uxth	r4, r4
  4092ac:	3401      	adds	r4, #1
  4092ae:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  4092b0:	f8d9 0000 	ldr.w	r0, [r9]
  4092b4:	4b54      	ldr	r3, [pc, #336]	; (409408 <lv_refr_area+0x1a0>)
  4092b6:	4798      	blx	r3
        lv_coord_t y2 =
  4092b8:	42b8      	cmp	r0, r7
  4092ba:	dd59      	ble.n	409370 <lv_refr_area+0x108>
  4092bc:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  4092c0:	68eb      	ldr	r3, [r5, #12]
  4092c2:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  4092c6:	46a0      	mov	r8, r4
  4092c8:	42a3      	cmp	r3, r4
  4092ca:	dc00      	bgt.n	4092ce <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  4092cc:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  4092ce:	4b4b      	ldr	r3, [pc, #300]	; (4093fc <lv_refr_area+0x194>)
  4092d0:	681b      	ldr	r3, [r3, #0]
  4092d2:	691b      	ldr	r3, [r3, #16]
  4092d4:	b32b      	cbz	r3, 409322 <lv_refr_area+0xba>
            tmp.x1 = 0;
  4092d6:	2300      	movs	r3, #0
  4092d8:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  4092dc:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  4092e0:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  4092e4:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  4092e8:	f109 34ff 	add.w	r4, r9, #4294967295
  4092ec:	b224      	sxth	r4, r4
  4092ee:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  4092f2:	4b42      	ldr	r3, [pc, #264]	; (4093fc <lv_refr_area+0x194>)
  4092f4:	6818      	ldr	r0, [r3, #0]
  4092f6:	6903      	ldr	r3, [r0, #16]
  4092f8:	4669      	mov	r1, sp
  4092fa:	4798      	blx	r3
  4092fc:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  409300:	b293      	uxth	r3, r2
  409302:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  409306:	1a5b      	subs	r3, r3, r1
  409308:	b29b      	uxth	r3, r3
  40930a:	3301      	adds	r3, #1
  40930c:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  40930e:	4598      	cmp	r8, r3
  409310:	da02      	bge.n	409318 <lv_refr_area+0xb0>
                h_tmp--;
  409312:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  409314:	2c00      	cmp	r4, #0
  409316:	dce7      	bgt.n	4092e8 <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  409318:	f1b9 0f00 	cmp.w	r9, #0
  40931c:	dd25      	ble.n	40936a <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  40931e:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409322:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  409326:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  40932a:	e031      	b.n	409390 <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40932c:	4c33      	ldr	r4, [pc, #204]	; (4093fc <lv_refr_area+0x194>)
  40932e:	6820      	ldr	r0, [r4, #0]
  409330:	4b34      	ldr	r3, [pc, #208]	; (409404 <lv_refr_area+0x19c>)
  409332:	4798      	blx	r3
  409334:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  409336:	2700      	movs	r7, #0
  409338:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  40933a:	6820      	ldr	r0, [r4, #0]
  40933c:	4b33      	ldr	r3, [pc, #204]	; (40940c <lv_refr_area+0x1a4>)
  40933e:	4798      	blx	r3
  409340:	b280      	uxth	r0, r0
  409342:	3801      	subs	r0, #1
  409344:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  409346:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  409348:	6820      	ldr	r0, [r4, #0]
  40934a:	4b2f      	ldr	r3, [pc, #188]	; (409408 <lv_refr_area+0x1a0>)
  40934c:	4798      	blx	r3
  40934e:	b280      	uxth	r0, r0
  409350:	3801      	subs	r0, #1
  409352:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409354:	6823      	ldr	r3, [r4, #0]
  409356:	685a      	ldr	r2, [r3, #4]
  409358:	f892 3020 	ldrb.w	r3, [r2, #32]
  40935c:	f043 0302 	orr.w	r3, r3, #2
  409360:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409364:	4630      	mov	r0, r6
  409366:	4b2a      	ldr	r3, [pc, #168]	; (409410 <lv_refr_area+0x1a8>)
  409368:	4798      	blx	r3
}
  40936a:	b003      	add	sp, #12
  40936c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409370:	f8d9 0000 	ldr.w	r0, [r9]
  409374:	4b24      	ldr	r3, [pc, #144]	; (409408 <lv_refr_area+0x1a0>)
  409376:	4798      	blx	r3
  409378:	b287      	uxth	r7, r0
  40937a:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  40937c:	b23f      	sxth	r7, r7
  40937e:	e79f      	b.n	4092c0 <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  409380:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409384:	454f      	cmp	r7, r9
  409386:	d018      	beq.n	4093ba <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  409388:	4630      	mov	r0, r6
  40938a:	4b21      	ldr	r3, [pc, #132]	; (409410 <lv_refr_area+0x1a8>)
  40938c:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  40938e:	b223      	sxth	r3, r4
  409390:	eb03 0208 	add.w	r2, r3, r8
  409394:	3a01      	subs	r2, #1
  409396:	42ba      	cmp	r2, r7
  409398:	dc19      	bgt.n	4093ce <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  40939a:	f9b6 2000 	ldrsh.w	r2, [r6]
  40939e:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  4093a0:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  4093a4:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  4093a6:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  4093a8:	4443      	add	r3, r8
  4093aa:	b29c      	uxth	r4, r3
  4093ac:	1e63      	subs	r3, r4, #1
  4093ae:	b21b      	sxth	r3, r3
  4093b0:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  4093b2:	429f      	cmp	r7, r3
  4093b4:	dae4      	bge.n	409380 <lv_refr_area+0x118>
  4093b6:	82ef      	strh	r7, [r5, #22]
  4093b8:	e7e2      	b.n	409380 <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  4093ba:	4b10      	ldr	r3, [pc, #64]	; (4093fc <lv_refr_area+0x194>)
  4093bc:	681b      	ldr	r3, [r3, #0]
  4093be:	685a      	ldr	r2, [r3, #4]
  4093c0:	f892 3020 	ldrb.w	r3, [r2, #32]
  4093c4:	f043 0302 	orr.w	r3, r3, #2
  4093c8:	f882 3020 	strb.w	r3, [r2, #32]
  4093cc:	e7dc      	b.n	409388 <lv_refr_area+0x120>
        if(y2 != row_last) {
  4093ce:	45b9      	cmp	r9, r7
  4093d0:	d0cb      	beq.n	40936a <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  4093d2:	f9b6 2000 	ldrsh.w	r2, [r6]
  4093d6:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  4093d8:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  4093dc:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  4093de:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  4093e0:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  4093e2:	4b06      	ldr	r3, [pc, #24]	; (4093fc <lv_refr_area+0x194>)
  4093e4:	681b      	ldr	r3, [r3, #0]
  4093e6:	685a      	ldr	r2, [r3, #4]
  4093e8:	f892 3020 	ldrb.w	r3, [r2, #32]
  4093ec:	f043 0302 	orr.w	r3, r3, #2
  4093f0:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  4093f4:	4630      	mov	r0, r6
  4093f6:	4b06      	ldr	r3, [pc, #24]	; (409410 <lv_refr_area+0x1a8>)
  4093f8:	4798      	blx	r3
  4093fa:	e7b6      	b.n	40936a <lv_refr_area+0x102>
  4093fc:	2040c390 	.word	0x2040c390
  409400:	00414555 	.word	0x00414555
  409404:	00414505 	.word	0x00414505
  409408:	00414431 	.word	0x00414431
  40940c:	00414401 	.word	0x00414401
  409410:	004090ed 	.word	0x004090ed

00409414 <lv_refr_areas>:
    px_num = 0;
  409414:	2200      	movs	r2, #0
  409416:	4b2b      	ldr	r3, [pc, #172]	; (4094c4 <lv_refr_areas+0xb0>)
  409418:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  40941a:	4b2b      	ldr	r3, [pc, #172]	; (4094c8 <lv_refr_areas+0xb4>)
  40941c:	681a      	ldr	r2, [r3, #0]
  40941e:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  409422:	f3c3 0309 	ubfx	r3, r3, #0, #10
  409426:	2b00      	cmp	r3, #0
  409428:	d04b      	beq.n	4094c2 <lv_refr_areas+0xae>
{
  40942a:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  40942c:	1e5e      	subs	r6, r3, #1
  40942e:	2e00      	cmp	r6, #0
  409430:	db05      	blt.n	40943e <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  409432:	1993      	adds	r3, r2, r6
  409434:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  409438:	b113      	cbz	r3, 409440 <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  40943a:	3e01      	subs	r6, #1
  40943c:	e7f7      	b.n	40942e <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  40943e:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  409440:	6851      	ldr	r1, [r2, #4]
  409442:	f891 3020 	ldrb.w	r3, [r1, #32]
  409446:	f36f 0300 	bfc	r3, #0, #1
  40944a:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  40944e:	6852      	ldr	r2, [r2, #4]
  409450:	f892 3020 	ldrb.w	r3, [r2, #32]
  409454:	f36f 0341 	bfc	r3, #1, #1
  409458:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  40945c:	2400      	movs	r4, #0
  40945e:	e01f      	b.n	4094a0 <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409460:	6842      	ldr	r2, [r0, #4]
  409462:	f892 3020 	ldrb.w	r3, [r2, #32]
  409466:	f043 0301 	orr.w	r3, r3, #1
  40946a:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  40946e:	6842      	ldr	r2, [r0, #4]
  409470:	f892 3020 	ldrb.w	r3, [r2, #32]
  409474:	f36f 0341 	bfc	r3, #1, #1
  409478:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  40947c:	f104 050c 	add.w	r5, r4, #12
  409480:	00ed      	lsls	r5, r5, #3
  409482:	4428      	add	r0, r5
  409484:	3002      	adds	r0, #2
  409486:	4b11      	ldr	r3, [pc, #68]	; (4094cc <lv_refr_areas+0xb8>)
  409488:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  40948a:	4b0f      	ldr	r3, [pc, #60]	; (4094c8 <lv_refr_areas+0xb4>)
  40948c:	6818      	ldr	r0, [r3, #0]
  40948e:	4428      	add	r0, r5
  409490:	3002      	adds	r0, #2
  409492:	4b0f      	ldr	r3, [pc, #60]	; (4094d0 <lv_refr_areas+0xbc>)
  409494:	4798      	blx	r3
  409496:	4a0b      	ldr	r2, [pc, #44]	; (4094c4 <lv_refr_areas+0xb0>)
  409498:	6813      	ldr	r3, [r2, #0]
  40949a:	4418      	add	r0, r3
  40949c:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  40949e:	3401      	adds	r4, #1
  4094a0:	4b09      	ldr	r3, [pc, #36]	; (4094c8 <lv_refr_areas+0xb4>)
  4094a2:	6818      	ldr	r0, [r3, #0]
  4094a4:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4094a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4094ac:	429c      	cmp	r4, r3
  4094ae:	da07      	bge.n	4094c0 <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  4094b0:	1903      	adds	r3, r0, r4
  4094b2:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4094b6:	2b00      	cmp	r3, #0
  4094b8:	d1f1      	bne.n	40949e <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  4094ba:	42b4      	cmp	r4, r6
  4094bc:	d1d7      	bne.n	40946e <lv_refr_areas+0x5a>
  4094be:	e7cf      	b.n	409460 <lv_refr_areas+0x4c>
  4094c0:	bd70      	pop	{r4, r5, r6, pc}
  4094c2:	4770      	bx	lr
  4094c4:	2040c394 	.word	0x2040c394
  4094c8:	2040c390 	.word	0x2040c390
  4094cc:	00409269 	.word	0x00409269
  4094d0:	00414c4d 	.word	0x00414c4d

004094d4 <_lv_disp_refr_task>:
{
  4094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4094d8:	b085      	sub	sp, #20
  4094da:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  4094dc:	4b58      	ldr	r3, [pc, #352]	; (409640 <_lv_disp_refr_task+0x16c>)
  4094de:	4798      	blx	r3
  4094e0:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  4094e2:	68eb      	ldr	r3, [r5, #12]
  4094e4:	4c57      	ldr	r4, [pc, #348]	; (409644 <_lv_disp_refr_task+0x170>)
  4094e6:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  4094e8:	2100      	movs	r1, #0
  4094ea:	4628      	mov	r0, r5
  4094ec:	4b56      	ldr	r3, [pc, #344]	; (409648 <_lv_disp_refr_task+0x174>)
  4094ee:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  4094f0:	6823      	ldr	r3, [r4, #0]
  4094f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  4094f4:	b18a      	cbz	r2, 40951a <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  4094f6:	4b55      	ldr	r3, [pc, #340]	; (40964c <_lv_disp_refr_task+0x178>)
  4094f8:	4798      	blx	r3
    lv_refr_areas();
  4094fa:	4b55      	ldr	r3, [pc, #340]	; (409650 <_lv_disp_refr_task+0x17c>)
  4094fc:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  4094fe:	4b51      	ldr	r3, [pc, #324]	; (409644 <_lv_disp_refr_task+0x170>)
  409500:	6818      	ldr	r0, [r3, #0]
  409502:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  409506:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40950a:	b96b      	cbnz	r3, 409528 <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  40950c:	4b51      	ldr	r3, [pc, #324]	; (409654 <_lv_disp_refr_task+0x180>)
  40950e:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409510:	4b51      	ldr	r3, [pc, #324]	; (409658 <_lv_disp_refr_task+0x184>)
  409512:	4798      	blx	r3
}
  409514:	b005      	add	sp, #20
  409516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  40951a:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  40951e:	f36f 0209 	bfc	r2, #0, #10
  409522:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  409526:	e7f5      	b.n	409514 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  409528:	4b4c      	ldr	r3, [pc, #304]	; (40965c <_lv_disp_refr_task+0x188>)
  40952a:	4798      	blx	r3
  40952c:	b118      	cbz	r0, 409536 <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  40952e:	4b45      	ldr	r3, [pc, #276]	; (409644 <_lv_disp_refr_task+0x170>)
  409530:	6818      	ldr	r0, [r3, #0]
  409532:	6943      	ldr	r3, [r0, #20]
  409534:	b1fb      	cbz	r3, 409576 <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  409536:	4c43      	ldr	r4, [pc, #268]	; (409644 <_lv_disp_refr_task+0x170>)
  409538:	6820      	ldr	r0, [r4, #0]
  40953a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40953e:	3062      	adds	r0, #98	; 0x62
  409540:	4d47      	ldr	r5, [pc, #284]	; (409660 <_lv_disp_refr_task+0x18c>)
  409542:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409544:	6820      	ldr	r0, [r4, #0]
  409546:	2120      	movs	r1, #32
  409548:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  40954c:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  40954e:	6823      	ldr	r3, [r4, #0]
  409550:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409554:	f36f 0209 	bfc	r2, #0, #10
  409558:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  40955c:	9801      	ldr	r0, [sp, #4]
  40955e:	4b41      	ldr	r3, [pc, #260]	; (409664 <_lv_disp_refr_task+0x190>)
  409560:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409562:	6824      	ldr	r4, [r4, #0]
  409564:	69a3      	ldr	r3, [r4, #24]
  409566:	2b00      	cmp	r3, #0
  409568:	d0d0      	beq.n	40950c <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  40956a:	4a3f      	ldr	r2, [pc, #252]	; (409668 <_lv_disp_refr_task+0x194>)
  40956c:	6812      	ldr	r2, [r2, #0]
  40956e:	4601      	mov	r1, r0
  409570:	4620      	mov	r0, r4
  409572:	4798      	blx	r3
  409574:	e7ca      	b.n	40950c <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409576:	4b3d      	ldr	r3, [pc, #244]	; (40966c <_lv_disp_refr_task+0x198>)
  409578:	4798      	blx	r3
  40957a:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  40957c:	4b3c      	ldr	r3, [pc, #240]	; (409670 <_lv_disp_refr_task+0x19c>)
  40957e:	4798      	blx	r3
                while(vdb->flushing);
  409580:	69a3      	ldr	r3, [r4, #24]
  409582:	2b00      	cmp	r3, #0
  409584:	d1fc      	bne.n	409580 <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  409586:	4b2f      	ldr	r3, [pc, #188]	; (409644 <_lv_disp_refr_task+0x170>)
  409588:	681b      	ldr	r3, [r3, #0]
  40958a:	f9b3 0000 	ldrsh.w	r0, [r3]
  40958e:	0040      	lsls	r0, r0, #1
  409590:	4b38      	ldr	r3, [pc, #224]	; (409674 <_lv_disp_refr_task+0x1a0>)
  409592:	4798      	blx	r3
  409594:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  409596:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  40959a:	f8d4 a000 	ldr.w	sl, [r4]
  40959e:	45d3      	cmp	fp, sl
  4095a0:	d006      	beq.n	4095b0 <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  4095a2:	4b28      	ldr	r3, [pc, #160]	; (409644 <_lv_disp_refr_task+0x170>)
  4095a4:	6818      	ldr	r0, [r3, #0]
  4095a6:	4b34      	ldr	r3, [pc, #208]	; (409678 <_lv_disp_refr_task+0x1a4>)
  4095a8:	4798      	blx	r3
  4095aa:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  4095ac:	2600      	movs	r6, #0
  4095ae:	e01d      	b.n	4095ec <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  4095b0:	f8d4 a004 	ldr.w	sl, [r4, #4]
  4095b4:	e7f5      	b.n	4095a2 <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  4095b6:	9a02      	ldr	r2, [sp, #8]
  4095b8:	eb0a 0105 	add.w	r1, sl, r5
  4095bc:	9803      	ldr	r0, [sp, #12]
  4095be:	4f2f      	ldr	r7, [pc, #188]	; (40967c <_lv_disp_refr_task+0x1a8>)
  4095c0:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  4095c2:	9a02      	ldr	r2, [sp, #8]
  4095c4:	9903      	ldr	r1, [sp, #12]
  4095c6:	eb0b 0005 	add.w	r0, fp, r5
  4095ca:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  4095cc:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  4095d0:	3401      	adds	r4, #1
  4095d2:	b224      	sxth	r4, r4
  4095d4:	4b1b      	ldr	r3, [pc, #108]	; (409644 <_lv_disp_refr_task+0x170>)
  4095d6:	681b      	ldr	r3, [r3, #0]
  4095d8:	f108 020c 	add.w	r2, r8, #12
  4095dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4095e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  4095e4:	429c      	cmp	r4, r3
  4095e6:	dde6      	ble.n	4095b6 <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  4095e8:	3601      	adds	r6, #1
  4095ea:	b2b6      	uxth	r6, r6
  4095ec:	46b0      	mov	r8, r6
  4095ee:	4b15      	ldr	r3, [pc, #84]	; (409644 <_lv_disp_refr_task+0x170>)
  4095f0:	681b      	ldr	r3, [r3, #0]
  4095f2:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  4095f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
  4095fa:	4296      	cmp	r6, r2
  4095fc:	da18      	bge.n	409630 <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  4095fe:	199a      	adds	r2, r3, r6
  409600:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409604:	2a00      	cmp	r2, #0
  409606:	d1ef      	bne.n	4095e8 <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  409608:	f108 020c 	add.w	r2, r8, #12
  40960c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409610:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409614:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  409618:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  40961c:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40961e:	88db      	ldrh	r3, [r3, #6]
  409620:	b292      	uxth	r2, r2
  409622:	1a9b      	subs	r3, r3, r2
  409624:	b29b      	uxth	r3, r3
  409626:	3301      	adds	r3, #1
  409628:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  40962a:	005b      	lsls	r3, r3, #1
  40962c:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  40962e:	e7d1      	b.n	4095d4 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409630:	9b03      	ldr	r3, [sp, #12]
  409632:	2b00      	cmp	r3, #0
  409634:	f43f af7f 	beq.w	409536 <_lv_disp_refr_task+0x62>
  409638:	4618      	mov	r0, r3
  40963a:	4b11      	ldr	r3, [pc, #68]	; (409680 <_lv_disp_refr_task+0x1ac>)
  40963c:	4798      	blx	r3
  40963e:	e77a      	b.n	409536 <_lv_disp_refr_task+0x62>
  409640:	0041480d 	.word	0x0041480d
  409644:	2040c390 	.word	0x2040c390
  409648:	0041658d 	.word	0x0041658d
  40964c:	00408c41 	.word	0x00408c41
  409650:	00409415 	.word	0x00409415
  409654:	00415de9 	.word	0x00415de9
  409658:	00414361 	.word	0x00414361
  40965c:	00414555 	.word	0x00414555
  409660:	00416169 	.word	0x00416169
  409664:	00414829 	.word	0x00414829
  409668:	2040c394 	.word	0x2040c394
  40966c:	00414505 	.word	0x00414505
  409670:	00409061 	.word	0x00409061
  409674:	00415fdd 	.word	0x00415fdd
  409678:	00414401 	.word	0x00414401
  40967c:	00415e45 	.word	0x00415e45
  409680:	00415d8d 	.word	0x00415d8d

00409684 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409684:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  409686:	2104      	movs	r1, #4
  409688:	4b01      	ldr	r3, [pc, #4]	; (409690 <lv_style_init+0xc>)
  40968a:	4798      	blx	r3
  40968c:	bd08      	pop	{r3, pc}
  40968e:	bf00      	nop
  409690:	00416169 	.word	0x00416169

00409694 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  409694:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  409696:	2108      	movs	r1, #8
  409698:	4b01      	ldr	r3, [pc, #4]	; (4096a0 <lv_style_list_init+0xc>)
  40969a:	4798      	blx	r3
  40969c:	bd08      	pop	{r3, pc}
  40969e:	bf00      	nop
  4096a0:	00416169 	.word	0x00416169

004096a4 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  4096a4:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  4096a6:	7903      	ldrb	r3, [r0, #4]
  4096a8:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  4096ac:	d051      	beq.n	409752 <_lv_style_list_remove_style+0xae>
  4096ae:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  4096b0:	7902      	ldrb	r2, [r0, #4]
  4096b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4096b6:	4293      	cmp	r3, r2
  4096b8:	da07      	bge.n	4096ca <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  4096ba:	6804      	ldr	r4, [r0, #0]
  4096bc:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  4096c0:	428c      	cmp	r4, r1
  4096c2:	d016      	beq.n	4096f2 <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  4096c4:	3301      	adds	r3, #1
  4096c6:	b2db      	uxtb	r3, r3
  4096c8:	e7f2      	b.n	4096b0 <_lv_style_list_remove_style+0xc>
    bool found = false;
  4096ca:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  4096cc:	2b00      	cmp	r3, #0
  4096ce:	d040      	beq.n	409752 <_lv_style_list_remove_style+0xae>
  4096d0:	460d      	mov	r5, r1
  4096d2:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  4096d4:	2e01      	cmp	r6, #1
  4096d6:	d00e      	beq.n	4096f6 <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  4096d8:	3a01      	subs	r2, #1
  4096da:	0090      	lsls	r0, r2, #2
  4096dc:	4b1d      	ldr	r3, [pc, #116]	; (409754 <_lv_style_list_remove_style+0xb0>)
  4096de:	4798      	blx	r3
  4096e0:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  4096e2:	4b1d      	ldr	r3, [pc, #116]	; (409758 <_lv_style_list_remove_style+0xb4>)
  4096e4:	4798      	blx	r3
  4096e6:	b190      	cbz	r0, 40970e <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  4096e8:	2e00      	cmp	r6, #0
  4096ea:	d032      	beq.n	409752 <_lv_style_list_remove_style+0xae>
  4096ec:	2100      	movs	r1, #0
  4096ee:	460b      	mov	r3, r1
  4096f0:	e015      	b.n	40971e <_lv_style_list_remove_style+0x7a>
            found = true;
  4096f2:	2301      	movs	r3, #1
  4096f4:	e7ea      	b.n	4096cc <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  4096f6:	6800      	ldr	r0, [r0, #0]
  4096f8:	4b18      	ldr	r3, [pc, #96]	; (40975c <_lv_style_list_remove_style+0xb8>)
  4096fa:	4798      	blx	r3
        list->style_list = NULL;
  4096fc:	2200      	movs	r2, #0
  4096fe:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409700:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409702:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  409706:	f362 1386 	bfi	r3, r2, #6, #1
  40970a:	7123      	strb	r3, [r4, #4]
        return;
  40970c:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  40970e:	4632      	mov	r2, r6
  409710:	2300      	movs	r3, #0
  409712:	4813      	ldr	r0, [pc, #76]	; (409760 <_lv_style_list_remove_style+0xbc>)
  409714:	4913      	ldr	r1, [pc, #76]	; (409764 <_lv_style_list_remove_style+0xc0>)
  409716:	4788      	blx	r1
  409718:	e7fe      	b.n	409718 <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  40971a:	3301      	adds	r3, #1
  40971c:	b2db      	uxtb	r3, r3
  40971e:	7922      	ldrb	r2, [r4, #4]
  409720:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409724:	4293      	cmp	r3, r2
  409726:	da09      	bge.n	40973c <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  409728:	6822      	ldr	r2, [r4, #0]
  40972a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  40972e:	4295      	cmp	r5, r2
  409730:	d0f3      	beq.n	40971a <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409732:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  409736:	3101      	adds	r1, #1
  409738:	b2c9      	uxtb	r1, r1
  40973a:	e7ee      	b.n	40971a <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  40973c:	6820      	ldr	r0, [r4, #0]
  40973e:	4b07      	ldr	r3, [pc, #28]	; (40975c <_lv_style_list_remove_style+0xb8>)
  409740:	4798      	blx	r3

    list->style_cnt--;
  409742:	7923      	ldrb	r3, [r4, #4]
  409744:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409748:	323f      	adds	r2, #63	; 0x3f
  40974a:	f362 0305 	bfi	r3, r2, #0, #6
  40974e:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409750:	6026      	str	r6, [r4, #0]
  409752:	bd70      	pop	{r4, r5, r6, pc}
  409754:	00415c35 	.word	0x00415c35
  409758:	0041552d 	.word	0x0041552d
  40975c:	00415cf9 	.word	0x00415cf9
  409760:	004235f0 	.word	0x004235f0
  409764:	00415539 	.word	0x00415539

00409768 <_lv_style_list_add_style>:
    if(list == NULL) return;
  409768:	2800      	cmp	r0, #0
  40976a:	d048      	beq.n	4097fe <_lv_style_list_add_style+0x96>
{
  40976c:	b570      	push	{r4, r5, r6, lr}
  40976e:	4604      	mov	r4, r0
  409770:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409772:	4b23      	ldr	r3, [pc, #140]	; (409800 <_lv_style_list_add_style+0x98>)
  409774:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  409776:	7923      	ldrb	r3, [r4, #4]
  409778:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40977c:	d117      	bne.n	4097ae <_lv_style_list_add_style+0x46>
  40977e:	2004      	movs	r0, #4
  409780:	4b20      	ldr	r3, [pc, #128]	; (409804 <_lv_style_list_add_style+0x9c>)
  409782:	4798      	blx	r3
  409784:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  409786:	4628      	mov	r0, r5
  409788:	4b1f      	ldr	r3, [pc, #124]	; (409808 <_lv_style_list_add_style+0xa0>)
  40978a:	4798      	blx	r3
  40978c:	b1c8      	cbz	r0, 4097c2 <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  40978e:	2d00      	cmp	r5, #0
  409790:	d034      	beq.n	4097fc <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  409792:	7923      	ldrb	r3, [r4, #4]
  409794:	f013 0f80 	tst.w	r3, #128	; 0x80
  409798:	d119      	bne.n	4097ce <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  40979a:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  40979c:	f013 0f40 	tst.w	r3, #64	; 0x40
  4097a0:	d001      	beq.n	4097a6 <_lv_style_list_add_style+0x3e>
  4097a2:	3201      	adds	r2, #1
  4097a4:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  4097a6:	7923      	ldrb	r3, [r4, #4]
  4097a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4097ac:	e01a      	b.n	4097e4 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  4097ae:	7921      	ldrb	r1, [r4, #4]
  4097b0:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4097b4:	3101      	adds	r1, #1
  4097b6:	0089      	lsls	r1, r1, #2
  4097b8:	6820      	ldr	r0, [r4, #0]
  4097ba:	4b14      	ldr	r3, [pc, #80]	; (40980c <_lv_style_list_add_style+0xa4>)
  4097bc:	4798      	blx	r3
  4097be:	4605      	mov	r5, r0
  4097c0:	e7e1      	b.n	409786 <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  4097c2:	462a      	mov	r2, r5
  4097c4:	2300      	movs	r3, #0
  4097c6:	4812      	ldr	r0, [pc, #72]	; (409810 <_lv_style_list_add_style+0xa8>)
  4097c8:	4912      	ldr	r1, [pc, #72]	; (409814 <_lv_style_list_add_style+0xac>)
  4097ca:	4788      	blx	r1
  4097cc:	e7fe      	b.n	4097cc <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  4097ce:	2201      	movs	r2, #1
  4097d0:	e7e4      	b.n	40979c <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  4097d2:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  4097d6:	4419      	add	r1, r3
  4097d8:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  4097dc:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  4097e0:	3b01      	subs	r3, #1
  4097e2:	b2db      	uxtb	r3, r3
  4097e4:	4293      	cmp	r3, r2
  4097e6:	d8f4      	bhi.n	4097d2 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  4097e8:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  4097ec:	7923      	ldrb	r3, [r4, #4]
  4097ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  4097f2:	3201      	adds	r2, #1
  4097f4:	f362 0305 	bfi	r3, r2, #0, #6
  4097f8:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  4097fa:	6025      	str	r5, [r4, #0]
  4097fc:	bd70      	pop	{r4, r5, r6, pc}
  4097fe:	4770      	bx	lr
  409800:	004096a5 	.word	0x004096a5
  409804:	00415c35 	.word	0x00415c35
  409808:	0041552d 	.word	0x0041552d
  40980c:	00415f65 	.word	0x00415f65
  409810:	004235f0 	.word	0x004235f0
  409814:	00415539 	.word	0x00415539

00409818 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409818:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  40981a:	7902      	ldrb	r2, [r0, #4]
  40981c:	f012 0f40 	tst.w	r2, #64	; 0x40
  409820:	d015      	beq.n	40984e <get_alloc_local_style+0x36>
  409822:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409824:	8881      	ldrh	r1, [r0, #4]
  409826:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  40982a:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  40982e:	d00c      	beq.n	40984a <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409830:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409834:	d027      	beq.n	409886 <get_alloc_local_style+0x6e>
  409836:	7902      	ldrb	r2, [r0, #4]
  409838:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40983c:	4293      	cmp	r3, r2
  40983e:	da24      	bge.n	40988a <get_alloc_local_style+0x72>
    return list->style_list[id];
  409840:	6802      	ldr	r2, [r0, #0]
  409842:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  409846:	4628      	mov	r0, r5
  409848:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  40984a:	3301      	adds	r3, #1
  40984c:	e7f0      	b.n	409830 <get_alloc_local_style+0x18>
  40984e:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  409850:	2004      	movs	r0, #4
  409852:	4b0f      	ldr	r3, [pc, #60]	; (409890 <get_alloc_local_style+0x78>)
  409854:	4798      	blx	r3
  409856:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  409858:	4b0e      	ldr	r3, [pc, #56]	; (409894 <get_alloc_local_style+0x7c>)
  40985a:	4798      	blx	r3
  40985c:	b168      	cbz	r0, 40987a <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  40985e:	2d00      	cmp	r5, #0
  409860:	d0f1      	beq.n	409846 <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  409862:	4628      	mov	r0, r5
  409864:	4b0c      	ldr	r3, [pc, #48]	; (409898 <get_alloc_local_style+0x80>)
  409866:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  409868:	4629      	mov	r1, r5
  40986a:	4620      	mov	r0, r4
  40986c:	4b0b      	ldr	r3, [pc, #44]	; (40989c <get_alloc_local_style+0x84>)
  40986e:	4798      	blx	r3
    list->has_local = 1;
  409870:	7923      	ldrb	r3, [r4, #4]
  409872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409876:	7123      	strb	r3, [r4, #4]
    return local_style;
  409878:	e7e5      	b.n	409846 <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  40987a:	462a      	mov	r2, r5
  40987c:	2300      	movs	r3, #0
  40987e:	4808      	ldr	r0, [pc, #32]	; (4098a0 <get_alloc_local_style+0x88>)
  409880:	4908      	ldr	r1, [pc, #32]	; (4098a4 <get_alloc_local_style+0x8c>)
  409882:	4788      	blx	r1
  409884:	e7fe      	b.n	409884 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409886:	2500      	movs	r5, #0
  409888:	e7dd      	b.n	409846 <get_alloc_local_style+0x2e>
  40988a:	2500      	movs	r5, #0
  40988c:	e7db      	b.n	409846 <get_alloc_local_style+0x2e>
  40988e:	bf00      	nop
  409890:	00415c35 	.word	0x00415c35
  409894:	0041552d 	.word	0x0041552d
  409898:	00409685 	.word	0x00409685
  40989c:	00409769 	.word	0x00409769
  4098a0:	004235f0 	.word	0x004235f0
  4098a4:	00415539 	.word	0x00415539

004098a8 <lv_style_reset>:
{
  4098a8:	b510      	push	{r4, lr}
  4098aa:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  4098ac:	6800      	ldr	r0, [r0, #0]
  4098ae:	4b02      	ldr	r3, [pc, #8]	; (4098b8 <lv_style_reset+0x10>)
  4098b0:	4798      	blx	r3
    style->map = NULL;
  4098b2:	2300      	movs	r3, #0
  4098b4:	6023      	str	r3, [r4, #0]
  4098b6:	bd10      	pop	{r4, pc}
  4098b8:	00415cf9 	.word	0x00415cf9

004098bc <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  4098bc:	6803      	ldr	r3, [r0, #0]
  4098be:	b30b      	cbz	r3, 409904 <_lv_style_get_mem_size+0x48>
{
  4098c0:	b082      	sub	sp, #8
  4098c2:	2200      	movs	r2, #0
  4098c4:	e001      	b.n	4098ca <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4098c6:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  4098c8:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  4098ca:	6803      	ldr	r3, [r0, #0]
  4098cc:	5c99      	ldrb	r1, [r3, r2]
  4098ce:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4098d2:	4413      	add	r3, r2
  4098d4:	785b      	ldrb	r3, [r3, #1]
  4098d6:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  4098da:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  4098dc:	2bff      	cmp	r3, #255	; 0xff
  4098de:	d00d      	beq.n	4098fc <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  4098e0:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4098e4:	2b08      	cmp	r3, #8
  4098e6:	d9ee      	bls.n	4098c6 <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4098e8:	2b0b      	cmp	r3, #11
  4098ea:	d903      	bls.n	4098f4 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  4098ec:	2b0d      	cmp	r3, #13
  4098ee:	d803      	bhi.n	4098f8 <_lv_style_get_mem_size+0x3c>
  4098f0:	2303      	movs	r3, #3
  4098f2:	e7e9      	b.n	4098c8 <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4098f4:	2304      	movs	r3, #4
  4098f6:	e7e7      	b.n	4098c8 <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  4098f8:	2306      	movs	r3, #6
  4098fa:	e7e5      	b.n	4098c8 <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  4098fc:	1c90      	adds	r0, r2, #2
  4098fe:	b280      	uxth	r0, r0
}
  409900:	b002      	add	sp, #8
  409902:	4770      	bx	lr
    if(style->map == NULL) return 0;
  409904:	2000      	movs	r0, #0
  409906:	4770      	bx	lr

00409908 <lv_style_copy>:
    if(style_src == NULL) return;
  409908:	b181      	cbz	r1, 40992c <lv_style_copy+0x24>
{
  40990a:	b570      	push	{r4, r5, r6, lr}
  40990c:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  40990e:	680a      	ldr	r2, [r1, #0]
  409910:	b15a      	cbz	r2, 40992a <lv_style_copy+0x22>
  409912:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409914:	4608      	mov	r0, r1
  409916:	4b06      	ldr	r3, [pc, #24]	; (409930 <lv_style_copy+0x28>)
  409918:	4798      	blx	r3
  40991a:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  40991c:	4b05      	ldr	r3, [pc, #20]	; (409934 <lv_style_copy+0x2c>)
  40991e:	4798      	blx	r3
  409920:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  409922:	4632      	mov	r2, r6
  409924:	6821      	ldr	r1, [r4, #0]
  409926:	4b04      	ldr	r3, [pc, #16]	; (409938 <lv_style_copy+0x30>)
  409928:	4798      	blx	r3
  40992a:	bd70      	pop	{r4, r5, r6, pc}
  40992c:	4770      	bx	lr
  40992e:	bf00      	nop
  409930:	004098bd 	.word	0x004098bd
  409934:	00415c35 	.word	0x00415c35
  409938:	00415e45 	.word	0x00415e45

0040993c <lv_style_remove_prop>:
    if(style == NULL) return false;
  40993c:	2800      	cmp	r0, #0
  40993e:	f000 808d 	beq.w	409a5c <lv_style_remove_prop+0x120>
{
  409942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409946:	b082      	sub	sp, #8
  409948:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  40994a:	6803      	ldr	r3, [r0, #0]
  40994c:	2b00      	cmp	r3, #0
  40994e:	d05e      	beq.n	409a0e <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  409950:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  409952:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  409954:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409956:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  40995a:	46be      	mov	lr, r7
  40995c:	e03b      	b.n	4099d6 <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  40995e:	f8d4 c000 	ldr.w	ip, [r4]
  409962:	f81c 8002 	ldrb.w	r8, [ip, r2]
  409966:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40996a:	f81c 0000 	ldrb.w	r0, [ip, r0]
  40996e:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  409972:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409976:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  40997a:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40997e:	ea86 0800 	eor.w	r8, r6, r0
  409982:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  409986:	d00c      	beq.n	4099a2 <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409988:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40998c:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  409990:	ea30 0808 	bics.w	r8, r0, r8
  409994:	d12d      	bne.n	4099f2 <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409996:	4570      	cmp	r0, lr
  409998:	dd2b      	ble.n	4099f2 <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40999a:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  40999e:	b217      	sxth	r7, r2
  4099a0:	e027      	b.n	4099f2 <lv_style_remove_prop+0xb6>
                return i;
  4099a2:	4617      	mov	r7, r2
    if(id >= 0) {
  4099a4:	2f00      	cmp	r7, #0
  4099a6:	db5b      	blt.n	409a60 <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  4099a8:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  4099aa:	6823      	ldr	r3, [r4, #0]
  4099ac:	5dda      	ldrb	r2, [r3, r7]
  4099ae:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4099b2:	441f      	add	r7, r3
  4099b4:	787b      	ldrb	r3, [r7, #1]
  4099b6:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  4099ba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  4099be:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  4099c0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  4099c4:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  4099c8:	d024      	beq.n	409a14 <lv_style_remove_prop+0xd8>
    return false;
  4099ca:	2000      	movs	r0, #0
}
  4099cc:	b002      	add	sp, #8
  4099ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4099d2:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  4099d4:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  4099d6:	6823      	ldr	r3, [r4, #0]
  4099d8:	5c98      	ldrb	r0, [r3, r2]
  4099da:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  4099de:	1c50      	adds	r0, r2, #1
  4099e0:	5c1b      	ldrb	r3, [r3, r0]
  4099e2:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  4099e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  4099ea:	2bff      	cmp	r3, #255	; 0xff
  4099ec:	d0da      	beq.n	4099a4 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  4099ee:	429d      	cmp	r5, r3
  4099f0:	d0b5      	beq.n	40995e <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  4099f2:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  4099f6:	2b08      	cmp	r3, #8
  4099f8:	d9eb      	bls.n	4099d2 <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  4099fa:	2b0b      	cmp	r3, #11
  4099fc:	d903      	bls.n	409a06 <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  4099fe:	2b0d      	cmp	r3, #13
  409a00:	d803      	bhi.n	409a0a <lv_style_remove_prop+0xce>
  409a02:	2303      	movs	r3, #3
  409a04:	e7e6      	b.n	4099d4 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409a06:	2304      	movs	r3, #4
  409a08:	e7e4      	b.n	4099d4 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  409a0a:	2306      	movs	r3, #6
  409a0c:	e7e2      	b.n	4099d4 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  409a0e:	f04f 37ff 	mov.w	r7, #4294967295
  409a12:	e7c7      	b.n	4099a4 <lv_style_remove_prop+0x68>
  409a14:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  409a16:	4620      	mov	r0, r4
  409a18:	4b12      	ldr	r3, [pc, #72]	; (409a64 <lv_style_remove_prop+0x128>)
  409a1a:	4798      	blx	r3
    prop_id &= 0xF;
  409a1c:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409a20:	2908      	cmp	r1, #8
  409a22:	d905      	bls.n	409a30 <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409a24:	290b      	cmp	r1, #11
  409a26:	d90f      	bls.n	409a48 <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409a28:	290d      	cmp	r1, #13
  409a2a:	d80f      	bhi.n	409a4c <lv_style_remove_prop+0x110>
  409a2c:	2603      	movs	r6, #3
  409a2e:	e000      	b.n	409a32 <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409a30:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  409a32:	462b      	mov	r3, r5
  409a34:	b2f2      	uxtb	r2, r6
  409a36:	1a81      	subs	r1, r0, r2
  409a38:	428b      	cmp	r3, r1
  409a3a:	d209      	bcs.n	409a50 <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  409a3c:	6821      	ldr	r1, [r4, #0]
  409a3e:	441a      	add	r2, r3
  409a40:	5c8a      	ldrb	r2, [r1, r2]
  409a42:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  409a44:	3301      	adds	r3, #1
  409a46:	e7f5      	b.n	409a34 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409a48:	2604      	movs	r6, #4
  409a4a:	e7f2      	b.n	409a32 <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  409a4c:	2606      	movs	r6, #6
  409a4e:	e7f0      	b.n	409a32 <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  409a50:	6820      	ldr	r0, [r4, #0]
  409a52:	4b05      	ldr	r3, [pc, #20]	; (409a68 <lv_style_remove_prop+0x12c>)
  409a54:	4798      	blx	r3
  409a56:	6020      	str	r0, [r4, #0]
            return true;
  409a58:	2001      	movs	r0, #1
  409a5a:	e7b7      	b.n	4099cc <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  409a5c:	2000      	movs	r0, #0
  409a5e:	4770      	bx	lr
    return false;
  409a60:	2000      	movs	r0, #0
  409a62:	e7b3      	b.n	4099cc <lv_style_remove_prop+0x90>
  409a64:	004098bd 	.word	0x004098bd
  409a68:	00415f65 	.word	0x00415f65

00409a6c <_lv_style_set_int>:
{
  409a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409a6e:	b085      	sub	sp, #20
  409a70:	f8ad 1006 	strh.w	r1, [sp, #6]
  409a74:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  409a78:	6803      	ldr	r3, [r0, #0]
  409a7a:	2b00      	cmp	r3, #0
  409a7c:	d061      	beq.n	409b42 <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409a7e:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409a80:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409a82:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409a84:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409a88:	4627      	mov	r7, r4
  409a8a:	e023      	b.n	409ad4 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  409a8c:	f8d0 e000 	ldr.w	lr, [r0]
  409a90:	f81e c002 	ldrb.w	ip, [lr, r2]
  409a94:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409a98:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409a9c:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409aa0:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409aa4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409aa8:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409aac:	ea85 0c01 	eor.w	ip, r5, r1
  409ab0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409ab4:	d02b      	beq.n	409b0e <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409ab6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409aba:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409abe:	ea31 0c0c 	bics.w	ip, r1, ip
  409ac2:	d115      	bne.n	409af0 <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409ac4:	42b9      	cmp	r1, r7
  409ac6:	dd13      	ble.n	409af0 <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409ac8:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409acc:	b214      	sxth	r4, r2
  409ace:	e00f      	b.n	409af0 <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ad0:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409ad2:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409ad4:	6803      	ldr	r3, [r0, #0]
  409ad6:	5c99      	ldrb	r1, [r3, r2]
  409ad8:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409adc:	1c51      	adds	r1, r2, #1
  409ade:	5c5b      	ldrb	r3, [r3, r1]
  409ae0:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409ae4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409ae8:	2bff      	cmp	r3, #255	; 0xff
  409aea:	d00f      	beq.n	409b0c <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  409aec:	429e      	cmp	r6, r3
  409aee:	d0cd      	beq.n	409a8c <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  409af0:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409af4:	2b08      	cmp	r3, #8
  409af6:	d9eb      	bls.n	409ad0 <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409af8:	2b0b      	cmp	r3, #11
  409afa:	d903      	bls.n	409b04 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409afc:	2b0d      	cmp	r3, #13
  409afe:	d803      	bhi.n	409b08 <_lv_style_set_int+0x9c>
  409b00:	2303      	movs	r3, #3
  409b02:	e7e6      	b.n	409ad2 <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409b04:	2304      	movs	r3, #4
  409b06:	e7e4      	b.n	409ad2 <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  409b08:	2306      	movs	r3, #6
  409b0a:	e7e2      	b.n	409ad2 <_lv_style_set_int+0x66>
    return id_guess;
  409b0c:	4622      	mov	r2, r4
    if(id >= 0) {
  409b0e:	2a00      	cmp	r2, #0
  409b10:	db23      	blt.n	409b5a <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  409b12:	6803      	ldr	r3, [r0, #0]
  409b14:	5c99      	ldrb	r1, [r3, r2]
  409b16:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409b1a:	4413      	add	r3, r2
  409b1c:	785b      	ldrb	r3, [r3, #1]
  409b1e:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409b22:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409b26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409b2a:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409b2c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409b30:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409b34:	d111      	bne.n	409b5a <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  409b36:	6803      	ldr	r3, [r0, #0]
  409b38:	3202      	adds	r2, #2
  409b3a:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409b3c:	a901      	add	r1, sp, #4
  409b3e:	2302      	movs	r3, #2
  409b40:	e007      	b.n	409b52 <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  409b42:	f04f 32ff 	mov.w	r2, #4294967295
  409b46:	e7e2      	b.n	409b0e <_lv_style_set_int+0xa2>
        *d8 = *s8;
  409b48:	f811 0b01 	ldrb.w	r0, [r1], #1
  409b4c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409b50:	3b01      	subs	r3, #1
    while(len) {
  409b52:	2b00      	cmp	r3, #0
  409b54:	d1f8      	bne.n	409b48 <_lv_style_set_int+0xdc>
}
  409b56:	b005      	add	sp, #20
  409b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409b5a:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409b5c:	23ff      	movs	r3, #255	; 0xff
  409b5e:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409b62:	4b21      	ldr	r3, [pc, #132]	; (409be8 <_lv_style_set_int+0x17c>)
  409b64:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409b66:	4603      	mov	r3, r0
  409b68:	b908      	cbnz	r0, 409b6e <_lv_style_set_int+0x102>
  409b6a:	3302      	adds	r3, #2
  409b6c:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  409b6e:	3304      	adds	r3, #4
  409b70:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409b72:	4621      	mov	r1, r4
  409b74:	6828      	ldr	r0, [r5, #0]
  409b76:	4b1d      	ldr	r3, [pc, #116]	; (409bec <_lv_style_set_int+0x180>)
  409b78:	4798      	blx	r3
  409b7a:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409b7c:	4b1c      	ldr	r3, [pc, #112]	; (409bf0 <_lv_style_set_int+0x184>)
  409b7e:	4798      	blx	r3
  409b80:	b148      	cbz	r0, 409b96 <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  409b82:	2d00      	cmp	r5, #0
  409b84:	d0e7      	beq.n	409b56 <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409b86:	682b      	ldr	r3, [r5, #0]
  409b88:	1f20      	subs	r0, r4, #4
  409b8a:	1fa2      	subs	r2, r4, #6
  409b8c:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409b8e:	f10d 0106 	add.w	r1, sp, #6
  409b92:	2202      	movs	r2, #2
  409b94:	e00a      	b.n	409bac <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  409b96:	682a      	ldr	r2, [r5, #0]
  409b98:	2300      	movs	r3, #0
  409b9a:	4816      	ldr	r0, [pc, #88]	; (409bf4 <_lv_style_set_int+0x188>)
  409b9c:	4916      	ldr	r1, [pc, #88]	; (409bf8 <_lv_style_set_int+0x18c>)
  409b9e:	4788      	blx	r1
  409ba0:	e7fe      	b.n	409ba0 <_lv_style_set_int+0x134>
        *d8 = *s8;
  409ba2:	f811 6b01 	ldrb.w	r6, [r1], #1
  409ba6:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409baa:	3a01      	subs	r2, #1
    while(len) {
  409bac:	2a00      	cmp	r2, #0
  409bae:	d1f8      	bne.n	409ba2 <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  409bb0:	682b      	ldr	r3, [r5, #0]
  409bb2:	3c02      	subs	r4, #2
  409bb4:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409bb6:	a901      	add	r1, sp, #4
  409bb8:	2202      	movs	r2, #2
  409bba:	e004      	b.n	409bc6 <_lv_style_set_int+0x15a>
        *d8 = *s8;
  409bbc:	f811 0b01 	ldrb.w	r0, [r1], #1
  409bc0:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409bc4:	3a01      	subs	r2, #1
    while(len) {
  409bc6:	2a00      	cmp	r2, #0
  409bc8:	d1f8      	bne.n	409bbc <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409bca:	682b      	ldr	r3, [r5, #0]
  409bcc:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409bce:	f10d 020e 	add.w	r2, sp, #14
  409bd2:	2302      	movs	r3, #2
  409bd4:	e004      	b.n	409be0 <_lv_style_set_int+0x174>
        *d8 = *s8;
  409bd6:	f812 1b01 	ldrb.w	r1, [r2], #1
  409bda:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409bde:	3b01      	subs	r3, #1
    while(len) {
  409be0:	2b00      	cmp	r3, #0
  409be2:	d1f8      	bne.n	409bd6 <_lv_style_set_int+0x16a>
  409be4:	e7b7      	b.n	409b56 <_lv_style_set_int+0xea>
  409be6:	bf00      	nop
  409be8:	004098bd 	.word	0x004098bd
  409bec:	00415f65 	.word	0x00415f65
  409bf0:	0041552d 	.word	0x0041552d
  409bf4:	004235f0 	.word	0x004235f0
  409bf8:	00415539 	.word	0x00415539

00409bfc <_lv_style_set_color>:
{
  409bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  409bfe:	b085      	sub	sp, #20
  409c00:	f8ad 2004 	strh.w	r2, [sp, #4]
  409c04:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409c08:	6803      	ldr	r3, [r0, #0]
  409c0a:	2b00      	cmp	r3, #0
  409c0c:	d061      	beq.n	409cd2 <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409c0e:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409c10:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409c12:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409c14:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409c18:	4627      	mov	r7, r4
  409c1a:	e023      	b.n	409c64 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  409c1c:	f8d0 e000 	ldr.w	lr, [r0]
  409c20:	f81e c002 	ldrb.w	ip, [lr, r2]
  409c24:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409c28:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409c2c:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409c30:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409c34:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409c38:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409c3c:	ea85 0c01 	eor.w	ip, r5, r1
  409c40:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409c44:	d02b      	beq.n	409c9e <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409c46:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409c4a:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409c4e:	ea31 0c0c 	bics.w	ip, r1, ip
  409c52:	d115      	bne.n	409c80 <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409c54:	42b9      	cmp	r1, r7
  409c56:	dd13      	ble.n	409c80 <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409c58:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409c5c:	b214      	sxth	r4, r2
  409c5e:	e00f      	b.n	409c80 <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c60:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409c62:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409c64:	6803      	ldr	r3, [r0, #0]
  409c66:	5c99      	ldrb	r1, [r3, r2]
  409c68:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409c6c:	1c51      	adds	r1, r2, #1
  409c6e:	5c5b      	ldrb	r3, [r3, r1]
  409c70:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409c74:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409c78:	2bff      	cmp	r3, #255	; 0xff
  409c7a:	d00f      	beq.n	409c9c <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  409c7c:	429e      	cmp	r6, r3
  409c7e:	d0cd      	beq.n	409c1c <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  409c80:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c84:	2b08      	cmp	r3, #8
  409c86:	d9eb      	bls.n	409c60 <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c88:	2b0b      	cmp	r3, #11
  409c8a:	d903      	bls.n	409c94 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409c8c:	2b0d      	cmp	r3, #13
  409c8e:	d803      	bhi.n	409c98 <_lv_style_set_color+0x9c>
  409c90:	2303      	movs	r3, #3
  409c92:	e7e6      	b.n	409c62 <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c94:	2304      	movs	r3, #4
  409c96:	e7e4      	b.n	409c62 <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  409c98:	2306      	movs	r3, #6
  409c9a:	e7e2      	b.n	409c62 <_lv_style_set_color+0x66>
    return id_guess;
  409c9c:	4622      	mov	r2, r4
    if(id >= 0) {
  409c9e:	2a00      	cmp	r2, #0
  409ca0:	db23      	blt.n	409cea <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  409ca2:	6803      	ldr	r3, [r0, #0]
  409ca4:	5c99      	ldrb	r1, [r3, r2]
  409ca6:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409caa:	4413      	add	r3, r2
  409cac:	785b      	ldrb	r3, [r3, #1]
  409cae:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409cb2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409cb6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409cba:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409cbc:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409cc0:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409cc4:	d111      	bne.n	409cea <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  409cc6:	6803      	ldr	r3, [r0, #0]
  409cc8:	3202      	adds	r2, #2
  409cca:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409ccc:	a901      	add	r1, sp, #4
  409cce:	2302      	movs	r3, #2
  409cd0:	e007      	b.n	409ce2 <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  409cd2:	f04f 32ff 	mov.w	r2, #4294967295
  409cd6:	e7e2      	b.n	409c9e <_lv_style_set_color+0xa2>
        *d8 = *s8;
  409cd8:	f811 0b01 	ldrb.w	r0, [r1], #1
  409cdc:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409ce0:	3b01      	subs	r3, #1
    while(len) {
  409ce2:	2b00      	cmp	r3, #0
  409ce4:	d1f8      	bne.n	409cd8 <_lv_style_set_color+0xdc>
}
  409ce6:	b005      	add	sp, #20
  409ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409cea:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409cec:	23ff      	movs	r3, #255	; 0xff
  409cee:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409cf2:	4b21      	ldr	r3, [pc, #132]	; (409d78 <_lv_style_set_color+0x17c>)
  409cf4:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409cf6:	4603      	mov	r3, r0
  409cf8:	b908      	cbnz	r0, 409cfe <_lv_style_set_color+0x102>
  409cfa:	3302      	adds	r3, #2
  409cfc:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  409cfe:	3304      	adds	r3, #4
  409d00:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409d02:	4621      	mov	r1, r4
  409d04:	6828      	ldr	r0, [r5, #0]
  409d06:	4b1d      	ldr	r3, [pc, #116]	; (409d7c <_lv_style_set_color+0x180>)
  409d08:	4798      	blx	r3
  409d0a:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409d0c:	4b1c      	ldr	r3, [pc, #112]	; (409d80 <_lv_style_set_color+0x184>)
  409d0e:	4798      	blx	r3
  409d10:	b148      	cbz	r0, 409d26 <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  409d12:	2d00      	cmp	r5, #0
  409d14:	d0e7      	beq.n	409ce6 <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409d16:	682b      	ldr	r3, [r5, #0]
  409d18:	1f20      	subs	r0, r4, #4
  409d1a:	1fa2      	subs	r2, r4, #6
  409d1c:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409d1e:	f10d 0106 	add.w	r1, sp, #6
  409d22:	2202      	movs	r2, #2
  409d24:	e00a      	b.n	409d3c <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  409d26:	682a      	ldr	r2, [r5, #0]
  409d28:	2300      	movs	r3, #0
  409d2a:	4816      	ldr	r0, [pc, #88]	; (409d84 <_lv_style_set_color+0x188>)
  409d2c:	4916      	ldr	r1, [pc, #88]	; (409d88 <_lv_style_set_color+0x18c>)
  409d2e:	4788      	blx	r1
  409d30:	e7fe      	b.n	409d30 <_lv_style_set_color+0x134>
        *d8 = *s8;
  409d32:	f811 6b01 	ldrb.w	r6, [r1], #1
  409d36:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409d3a:	3a01      	subs	r2, #1
    while(len) {
  409d3c:	2a00      	cmp	r2, #0
  409d3e:	d1f8      	bne.n	409d32 <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  409d40:	682b      	ldr	r3, [r5, #0]
  409d42:	3c02      	subs	r4, #2
  409d44:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409d46:	a901      	add	r1, sp, #4
  409d48:	2202      	movs	r2, #2
  409d4a:	e004      	b.n	409d56 <_lv_style_set_color+0x15a>
        *d8 = *s8;
  409d4c:	f811 0b01 	ldrb.w	r0, [r1], #1
  409d50:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409d54:	3a01      	subs	r2, #1
    while(len) {
  409d56:	2a00      	cmp	r2, #0
  409d58:	d1f8      	bne.n	409d4c <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409d5a:	682b      	ldr	r3, [r5, #0]
  409d5c:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409d5e:	f10d 020e 	add.w	r2, sp, #14
  409d62:	2302      	movs	r3, #2
  409d64:	e004      	b.n	409d70 <_lv_style_set_color+0x174>
        *d8 = *s8;
  409d66:	f812 1b01 	ldrb.w	r1, [r2], #1
  409d6a:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409d6e:	3b01      	subs	r3, #1
    while(len) {
  409d70:	2b00      	cmp	r3, #0
  409d72:	d1f8      	bne.n	409d66 <_lv_style_set_color+0x16a>
  409d74:	e7b7      	b.n	409ce6 <_lv_style_set_color+0xea>
  409d76:	bf00      	nop
  409d78:	004098bd 	.word	0x004098bd
  409d7c:	00415f65 	.word	0x00415f65
  409d80:	0041552d 	.word	0x0041552d
  409d84:	004235f0 	.word	0x004235f0
  409d88:	00415539 	.word	0x00415539

00409d8c <_lv_style_set_opa>:
{
  409d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409d8e:	b085      	sub	sp, #20
  409d90:	f8ad 1006 	strh.w	r1, [sp, #6]
  409d94:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  409d98:	6803      	ldr	r3, [r0, #0]
  409d9a:	2b00      	cmp	r3, #0
  409d9c:	d064      	beq.n	409e68 <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  409d9e:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409da0:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409da2:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409da4:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409da8:	4627      	mov	r7, r4
  409daa:	e023      	b.n	409df4 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  409dac:	f8d0 e000 	ldr.w	lr, [r0]
  409db0:	f81e c002 	ldrb.w	ip, [lr, r2]
  409db4:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409db8:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409dbc:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409dc0:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409dc4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409dc8:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409dcc:	ea85 0c01 	eor.w	ip, r5, r1
  409dd0:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409dd4:	d02b      	beq.n	409e2e <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409dd6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409dda:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409dde:	ea31 0c0c 	bics.w	ip, r1, ip
  409de2:	d115      	bne.n	409e10 <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409de4:	42b9      	cmp	r1, r7
  409de6:	dd13      	ble.n	409e10 <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409de8:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409dec:	b214      	sxth	r4, r2
  409dee:	e00f      	b.n	409e10 <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409df0:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409df2:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409df4:	6803      	ldr	r3, [r0, #0]
  409df6:	5c99      	ldrb	r1, [r3, r2]
  409df8:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409dfc:	1c51      	adds	r1, r2, #1
  409dfe:	5c5b      	ldrb	r3, [r3, r1]
  409e00:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409e04:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409e08:	2bff      	cmp	r3, #255	; 0xff
  409e0a:	d00f      	beq.n	409e2c <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  409e0c:	429e      	cmp	r6, r3
  409e0e:	d0cd      	beq.n	409dac <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  409e10:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409e14:	2b08      	cmp	r3, #8
  409e16:	d9eb      	bls.n	409df0 <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409e18:	2b0b      	cmp	r3, #11
  409e1a:	d903      	bls.n	409e24 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409e1c:	2b0d      	cmp	r3, #13
  409e1e:	d803      	bhi.n	409e28 <_lv_style_set_opa+0x9c>
  409e20:	2303      	movs	r3, #3
  409e22:	e7e6      	b.n	409df2 <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409e24:	2304      	movs	r3, #4
  409e26:	e7e4      	b.n	409df2 <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  409e28:	2306      	movs	r3, #6
  409e2a:	e7e2      	b.n	409df2 <_lv_style_set_opa+0x66>
    return id_guess;
  409e2c:	4622      	mov	r2, r4
    if(id >= 0) {
  409e2e:	2a00      	cmp	r2, #0
  409e30:	db23      	blt.n	409e7a <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  409e32:	6803      	ldr	r3, [r0, #0]
  409e34:	5c99      	ldrb	r1, [r3, r2]
  409e36:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409e3a:	4413      	add	r3, r2
  409e3c:	785b      	ldrb	r3, [r3, #1]
  409e3e:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409e42:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409e46:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409e4a:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409e4c:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409e50:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409e54:	d111      	bne.n	409e7a <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  409e56:	6803      	ldr	r3, [r0, #0]
  409e58:	3202      	adds	r2, #2
  409e5a:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409e5c:	f10d 0105 	add.w	r1, sp, #5
  409e60:	2301      	movs	r3, #1
    while(len) {
  409e62:	b923      	cbnz	r3, 409e6e <_lv_style_set_opa+0xe2>
}
  409e64:	b005      	add	sp, #20
  409e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  409e68:	f04f 32ff 	mov.w	r2, #4294967295
  409e6c:	e7df      	b.n	409e2e <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  409e6e:	f811 0b01 	ldrb.w	r0, [r1], #1
  409e72:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409e76:	3b01      	subs	r3, #1
  409e78:	e7f3      	b.n	409e62 <_lv_style_set_opa+0xd6>
  409e7a:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409e7c:	23ff      	movs	r3, #255	; 0xff
  409e7e:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409e82:	4b21      	ldr	r3, [pc, #132]	; (409f08 <_lv_style_set_opa+0x17c>)
  409e84:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409e86:	4603      	mov	r3, r0
  409e88:	b908      	cbnz	r0, 409e8e <_lv_style_set_opa+0x102>
  409e8a:	3302      	adds	r3, #2
  409e8c:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  409e8e:	3303      	adds	r3, #3
  409e90:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409e92:	4621      	mov	r1, r4
  409e94:	6828      	ldr	r0, [r5, #0]
  409e96:	4b1d      	ldr	r3, [pc, #116]	; (409f0c <_lv_style_set_opa+0x180>)
  409e98:	4798      	blx	r3
  409e9a:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409e9c:	4b1c      	ldr	r3, [pc, #112]	; (409f10 <_lv_style_set_opa+0x184>)
  409e9e:	4798      	blx	r3
  409ea0:	b148      	cbz	r0, 409eb6 <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  409ea2:	2d00      	cmp	r5, #0
  409ea4:	d0de      	beq.n	409e64 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409ea6:	682b      	ldr	r3, [r5, #0]
  409ea8:	1ee0      	subs	r0, r4, #3
  409eaa:	1f62      	subs	r2, r4, #5
  409eac:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409eae:	f10d 0106 	add.w	r1, sp, #6
  409eb2:	2202      	movs	r2, #2
  409eb4:	e00a      	b.n	409ecc <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  409eb6:	682a      	ldr	r2, [r5, #0]
  409eb8:	2300      	movs	r3, #0
  409eba:	4816      	ldr	r0, [pc, #88]	; (409f14 <_lv_style_set_opa+0x188>)
  409ebc:	4916      	ldr	r1, [pc, #88]	; (409f18 <_lv_style_set_opa+0x18c>)
  409ebe:	4788      	blx	r1
  409ec0:	e7fe      	b.n	409ec0 <_lv_style_set_opa+0x134>
        *d8 = *s8;
  409ec2:	f811 6b01 	ldrb.w	r6, [r1], #1
  409ec6:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409eca:	3a01      	subs	r2, #1
    while(len) {
  409ecc:	2a00      	cmp	r2, #0
  409ece:	d1f8      	bne.n	409ec2 <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  409ed0:	682b      	ldr	r3, [r5, #0]
  409ed2:	3c02      	subs	r4, #2
  409ed4:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409ed6:	f10d 0105 	add.w	r1, sp, #5
  409eda:	2201      	movs	r2, #1
    while(len) {
  409edc:	b92a      	cbnz	r2, 409eea <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409ede:	682b      	ldr	r3, [r5, #0]
  409ee0:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409ee2:	f10d 020e 	add.w	r2, sp, #14
  409ee6:	2302      	movs	r3, #2
  409ee8:	e00a      	b.n	409f00 <_lv_style_set_opa+0x174>
        *d8 = *s8;
  409eea:	f811 0b01 	ldrb.w	r0, [r1], #1
  409eee:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409ef2:	3a01      	subs	r2, #1
  409ef4:	e7f2      	b.n	409edc <_lv_style_set_opa+0x150>
        *d8 = *s8;
  409ef6:	f812 1b01 	ldrb.w	r1, [r2], #1
  409efa:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409efe:	3b01      	subs	r3, #1
    while(len) {
  409f00:	2b00      	cmp	r3, #0
  409f02:	d1f8      	bne.n	409ef6 <_lv_style_set_opa+0x16a>
  409f04:	e7ae      	b.n	409e64 <_lv_style_set_opa+0xd8>
  409f06:	bf00      	nop
  409f08:	004098bd 	.word	0x004098bd
  409f0c:	00415f65 	.word	0x00415f65
  409f10:	0041552d 	.word	0x0041552d
  409f14:	004235f0 	.word	0x004235f0
  409f18:	00415539 	.word	0x00415539

00409f1c <_lv_style_set_ptr>:
{
  409f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  409f1e:	b085      	sub	sp, #20
  409f20:	9200      	str	r2, [sp, #0]
  409f22:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409f26:	6803      	ldr	r3, [r0, #0]
  409f28:	2b00      	cmp	r3, #0
  409f2a:	d061      	beq.n	409ff0 <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  409f2c:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409f2e:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409f30:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409f32:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409f36:	4627      	mov	r7, r4
  409f38:	e023      	b.n	409f82 <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  409f3a:	f8d0 e000 	ldr.w	lr, [r0]
  409f3e:	f81e c002 	ldrb.w	ip, [lr, r2]
  409f42:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409f46:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409f4a:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409f4e:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409f52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409f56:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409f5a:	ea85 0c01 	eor.w	ip, r5, r1
  409f5e:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409f62:	d02b      	beq.n	409fbc <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409f64:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409f68:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409f6c:	ea31 0c0c 	bics.w	ip, r1, ip
  409f70:	d115      	bne.n	409f9e <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409f72:	42b9      	cmp	r1, r7
  409f74:	dd13      	ble.n	409f9e <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409f76:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409f7a:	b214      	sxth	r4, r2
  409f7c:	e00f      	b.n	409f9e <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409f7e:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409f80:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409f82:	6803      	ldr	r3, [r0, #0]
  409f84:	5c99      	ldrb	r1, [r3, r2]
  409f86:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409f8a:	1c51      	adds	r1, r2, #1
  409f8c:	5c5b      	ldrb	r3, [r3, r1]
  409f8e:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409f92:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409f96:	2bff      	cmp	r3, #255	; 0xff
  409f98:	d00f      	beq.n	409fba <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  409f9a:	429e      	cmp	r6, r3
  409f9c:	d0cd      	beq.n	409f3a <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  409f9e:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409fa2:	2b08      	cmp	r3, #8
  409fa4:	d9eb      	bls.n	409f7e <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fa6:	2b0b      	cmp	r3, #11
  409fa8:	d903      	bls.n	409fb2 <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409faa:	2b0d      	cmp	r3, #13
  409fac:	d803      	bhi.n	409fb6 <_lv_style_set_ptr+0x9a>
  409fae:	2303      	movs	r3, #3
  409fb0:	e7e6      	b.n	409f80 <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409fb2:	2304      	movs	r3, #4
  409fb4:	e7e4      	b.n	409f80 <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  409fb6:	2306      	movs	r3, #6
  409fb8:	e7e2      	b.n	409f80 <_lv_style_set_ptr+0x64>
    return id_guess;
  409fba:	4622      	mov	r2, r4
    if(id >= 0) {
  409fbc:	2a00      	cmp	r2, #0
  409fbe:	db23      	blt.n	40a008 <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  409fc0:	6803      	ldr	r3, [r0, #0]
  409fc2:	5c99      	ldrb	r1, [r3, r2]
  409fc4:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409fc8:	4413      	add	r3, r2
  409fca:	785b      	ldrb	r3, [r3, #1]
  409fcc:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409fd0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409fd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409fd8:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409fda:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409fde:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409fe2:	d111      	bne.n	40a008 <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  409fe4:	6803      	ldr	r3, [r0, #0]
  409fe6:	3202      	adds	r2, #2
  409fe8:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409fea:	4669      	mov	r1, sp
  409fec:	2304      	movs	r3, #4
  409fee:	e007      	b.n	40a000 <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  409ff0:	f04f 32ff 	mov.w	r2, #4294967295
  409ff4:	e7e2      	b.n	409fbc <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  409ff6:	f811 0b01 	ldrb.w	r0, [r1], #1
  409ffa:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409ffe:	3b01      	subs	r3, #1
    while(len) {
  40a000:	2b00      	cmp	r3, #0
  40a002:	d1f8      	bne.n	409ff6 <_lv_style_set_ptr+0xda>
}
  40a004:	b005      	add	sp, #20
  40a006:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a008:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a00a:	23ff      	movs	r3, #255	; 0xff
  40a00c:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a010:	4b21      	ldr	r3, [pc, #132]	; (40a098 <_lv_style_set_ptr+0x17c>)
  40a012:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a014:	4603      	mov	r3, r0
  40a016:	b908      	cbnz	r0, 40a01c <_lv_style_set_ptr+0x100>
  40a018:	3302      	adds	r3, #2
  40a01a:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a01c:	3306      	adds	r3, #6
  40a01e:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a020:	4621      	mov	r1, r4
  40a022:	6828      	ldr	r0, [r5, #0]
  40a024:	4b1d      	ldr	r3, [pc, #116]	; (40a09c <_lv_style_set_ptr+0x180>)
  40a026:	4798      	blx	r3
  40a028:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a02a:	4b1d      	ldr	r3, [pc, #116]	; (40a0a0 <_lv_style_set_ptr+0x184>)
  40a02c:	4798      	blx	r3
  40a02e:	b150      	cbz	r0, 40a046 <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a030:	2d00      	cmp	r5, #0
  40a032:	d0e7      	beq.n	40a004 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a034:	682b      	ldr	r3, [r5, #0]
  40a036:	1fa0      	subs	r0, r4, #6
  40a038:	f1a4 0208 	sub.w	r2, r4, #8
  40a03c:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a03e:	f10d 0106 	add.w	r1, sp, #6
  40a042:	2202      	movs	r2, #2
  40a044:	e00a      	b.n	40a05c <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a046:	682a      	ldr	r2, [r5, #0]
  40a048:	2300      	movs	r3, #0
  40a04a:	4816      	ldr	r0, [pc, #88]	; (40a0a4 <_lv_style_set_ptr+0x188>)
  40a04c:	4916      	ldr	r1, [pc, #88]	; (40a0a8 <_lv_style_set_ptr+0x18c>)
  40a04e:	4788      	blx	r1
  40a050:	e7fe      	b.n	40a050 <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a052:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a056:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a05a:	3a01      	subs	r2, #1
    while(len) {
  40a05c:	2a00      	cmp	r2, #0
  40a05e:	d1f8      	bne.n	40a052 <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a060:	682b      	ldr	r3, [r5, #0]
  40a062:	3c02      	subs	r4, #2
  40a064:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a066:	4669      	mov	r1, sp
  40a068:	2204      	movs	r2, #4
  40a06a:	e004      	b.n	40a076 <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a06c:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a070:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a074:	3a01      	subs	r2, #1
    while(len) {
  40a076:	2a00      	cmp	r2, #0
  40a078:	d1f8      	bne.n	40a06c <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a07a:	682b      	ldr	r3, [r5, #0]
  40a07c:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a07e:	f10d 020e 	add.w	r2, sp, #14
  40a082:	2302      	movs	r3, #2
  40a084:	e004      	b.n	40a090 <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a086:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a08a:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a08e:	3b01      	subs	r3, #1
    while(len) {
  40a090:	2b00      	cmp	r3, #0
  40a092:	d1f8      	bne.n	40a086 <_lv_style_set_ptr+0x16a>
  40a094:	e7b6      	b.n	40a004 <_lv_style_set_ptr+0xe8>
  40a096:	bf00      	nop
  40a098:	004098bd 	.word	0x004098bd
  40a09c:	00415f65 	.word	0x00415f65
  40a0a0:	0041552d 	.word	0x0041552d
  40a0a4:	004235f0 	.word	0x004235f0
  40a0a8:	00415539 	.word	0x00415539

0040a0ac <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a0ac:	2800      	cmp	r0, #0
  40a0ae:	d077      	beq.n	40a1a0 <_lv_style_get_int+0xf4>
{
  40a0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a0b4:	b082      	sub	sp, #8
  40a0b6:	4692      	mov	sl, r2
  40a0b8:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a0ba:	6803      	ldr	r3, [r0, #0]
  40a0bc:	2b00      	cmp	r3, #0
  40a0be:	d072      	beq.n	40a1a6 <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a0c0:	2b00      	cmp	r3, #0
  40a0c2:	d051      	beq.n	40a168 <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a0c4:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a0c6:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a0c8:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a0ca:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a0ce:	46f4      	mov	ip, lr
  40a0d0:	e02e      	b.n	40a130 <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a0d2:	682a      	ldr	r2, [r5, #0]
  40a0d4:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a0d8:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a0dc:	5d14      	ldrb	r4, [r2, r4]
  40a0de:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a0e2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a0e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a0ea:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a0ee:	ea87 0904 	eor.w	r9, r7, r4
  40a0f2:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a0f6:	d00d      	beq.n	40a114 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a0f8:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a0fc:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a100:	ea34 0209 	bics.w	r2, r4, r9
  40a104:	d122      	bne.n	40a14c <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a106:	4564      	cmp	r4, ip
  40a108:	dd20      	ble.n	40a14c <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a10a:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a10e:	fa0f fe80 	sxth.w	lr, r0
  40a112:	e01b      	b.n	40a14c <_lv_style_get_int+0xa0>
                return i;
  40a114:	4686      	mov	lr, r0
    if(id < 0) {
  40a116:	f1be 0f00 	cmp.w	lr, #0
  40a11a:	db47      	blt.n	40a1ac <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a11c:	682b      	ldr	r3, [r5, #0]
  40a11e:	4674      	mov	r4, lr
  40a120:	f10e 0e02 	add.w	lr, lr, #2
  40a124:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a126:	4652      	mov	r2, sl
  40a128:	2302      	movs	r3, #2
  40a12a:	e025      	b.n	40a178 <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a12c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a12e:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a130:	682b      	ldr	r3, [r5, #0]
  40a132:	5c1c      	ldrb	r4, [r3, r0]
  40a134:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a138:	1c44      	adds	r4, r0, #1
  40a13a:	5d1b      	ldrb	r3, [r3, r4]
  40a13c:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a140:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a144:	2bff      	cmp	r3, #255	; 0xff
  40a146:	d0e6      	beq.n	40a116 <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a148:	429e      	cmp	r6, r3
  40a14a:	d0c2      	beq.n	40a0d2 <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a14c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a150:	2b08      	cmp	r3, #8
  40a152:	d9eb      	bls.n	40a12c <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a154:	2b0b      	cmp	r3, #11
  40a156:	d903      	bls.n	40a160 <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a158:	2b0d      	cmp	r3, #13
  40a15a:	d803      	bhi.n	40a164 <_lv_style_get_int+0xb8>
  40a15c:	2303      	movs	r3, #3
  40a15e:	e7e6      	b.n	40a12e <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a160:	2304      	movs	r3, #4
  40a162:	e7e4      	b.n	40a12e <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a164:	2306      	movs	r3, #6
  40a166:	e7e2      	b.n	40a12e <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a168:	f04f 3eff 	mov.w	lr, #4294967295
  40a16c:	e7d3      	b.n	40a116 <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a16e:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a172:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a176:	3b01      	subs	r3, #1
    while(len) {
  40a178:	2b00      	cmp	r3, #0
  40a17a:	d1f8      	bne.n	40a16e <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a17c:	682b      	ldr	r3, [r5, #0]
  40a17e:	5d1a      	ldrb	r2, [r3, r4]
  40a180:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a184:	4423      	add	r3, r4
  40a186:	785b      	ldrb	r3, [r3, #1]
  40a188:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a18c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a190:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a192:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a196:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a19a:	b002      	add	sp, #8
  40a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a1a0:	f04f 30ff 	mov.w	r0, #4294967295
  40a1a4:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a1a6:	f04f 30ff 	mov.w	r0, #4294967295
  40a1aa:	e7f6      	b.n	40a19a <_lv_style_get_int+0xee>
        return -1;
  40a1ac:	f04f 30ff 	mov.w	r0, #4294967295
  40a1b0:	e7f3      	b.n	40a19a <_lv_style_get_int+0xee>

0040a1b2 <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a1b2:	2800      	cmp	r0, #0
  40a1b4:	d076      	beq.n	40a2a4 <_lv_style_get_opa+0xf2>
{
  40a1b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a1ba:	b082      	sub	sp, #8
  40a1bc:	4692      	mov	sl, r2
  40a1be:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a1c0:	6803      	ldr	r3, [r0, #0]
  40a1c2:	2b00      	cmp	r3, #0
  40a1c4:	d071      	beq.n	40a2aa <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a1c6:	2b00      	cmp	r3, #0
  40a1c8:	d063      	beq.n	40a292 <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a1ca:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a1cc:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a1ce:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a1d0:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a1d4:	46f4      	mov	ip, lr
  40a1d6:	e040      	b.n	40a25a <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a1d8:	682a      	ldr	r2, [r5, #0]
  40a1da:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a1de:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a1e2:	5d14      	ldrb	r4, [r2, r4]
  40a1e4:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a1e8:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a1ec:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a1f0:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a1f4:	ea87 0904 	eor.w	r9, r7, r4
  40a1f8:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a1fc:	d00d      	beq.n	40a21a <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a1fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a202:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a206:	ea34 0209 	bics.w	r2, r4, r9
  40a20a:	d134      	bne.n	40a276 <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a20c:	4564      	cmp	r4, ip
  40a20e:	dd32      	ble.n	40a276 <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a210:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a214:	fa0f fe80 	sxth.w	lr, r0
  40a218:	e02d      	b.n	40a276 <_lv_style_get_opa+0xc4>
                return i;
  40a21a:	4686      	mov	lr, r0
    if(id < 0) {
  40a21c:	f1be 0f00 	cmp.w	lr, #0
  40a220:	db46      	blt.n	40a2b0 <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40a222:	6828      	ldr	r0, [r5, #0]
  40a224:	4674      	mov	r4, lr
  40a226:	f10e 0e02 	add.w	lr, lr, #2
  40a22a:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40a22c:	4652      	mov	r2, sl
  40a22e:	2301      	movs	r3, #1
    while(len) {
  40a230:	bb93      	cbnz	r3, 40a298 <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40a232:	682b      	ldr	r3, [r5, #0]
  40a234:	5d1a      	ldrb	r2, [r3, r4]
  40a236:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a23a:	4423      	add	r3, r4
  40a23c:	785b      	ldrb	r3, [r3, #1]
  40a23e:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a242:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a246:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a248:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a24c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a250:	b002      	add	sp, #8
  40a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a256:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a258:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a25a:	682b      	ldr	r3, [r5, #0]
  40a25c:	5c1c      	ldrb	r4, [r3, r0]
  40a25e:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a262:	1c44      	adds	r4, r0, #1
  40a264:	5d1b      	ldrb	r3, [r3, r4]
  40a266:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a26a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a26e:	2bff      	cmp	r3, #255	; 0xff
  40a270:	d0d4      	beq.n	40a21c <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40a272:	429e      	cmp	r6, r3
  40a274:	d0b0      	beq.n	40a1d8 <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40a276:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a27a:	2b08      	cmp	r3, #8
  40a27c:	d9eb      	bls.n	40a256 <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a27e:	2b0b      	cmp	r3, #11
  40a280:	d903      	bls.n	40a28a <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a282:	2b0d      	cmp	r3, #13
  40a284:	d803      	bhi.n	40a28e <_lv_style_get_opa+0xdc>
  40a286:	2303      	movs	r3, #3
  40a288:	e7e6      	b.n	40a258 <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a28a:	2304      	movs	r3, #4
  40a28c:	e7e4      	b.n	40a258 <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a28e:	2306      	movs	r3, #6
  40a290:	e7e2      	b.n	40a258 <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40a292:	f04f 3eff 	mov.w	lr, #4294967295
  40a296:	e7c1      	b.n	40a21c <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40a298:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a29c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a2a0:	3b01      	subs	r3, #1
  40a2a2:	e7c5      	b.n	40a230 <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40a2a4:	f04f 30ff 	mov.w	r0, #4294967295
  40a2a8:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a2aa:	f04f 30ff 	mov.w	r0, #4294967295
  40a2ae:	e7cf      	b.n	40a250 <_lv_style_get_opa+0x9e>
        return -1;
  40a2b0:	f04f 30ff 	mov.w	r0, #4294967295
  40a2b4:	e7cc      	b.n	40a250 <_lv_style_get_opa+0x9e>

0040a2b6 <_lv_style_get_color>:
    if(style == NULL) return -1;
  40a2b6:	2800      	cmp	r0, #0
  40a2b8:	d077      	beq.n	40a3aa <_lv_style_get_color+0xf4>
{
  40a2ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a2be:	b082      	sub	sp, #8
  40a2c0:	4692      	mov	sl, r2
  40a2c2:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a2c4:	6803      	ldr	r3, [r0, #0]
  40a2c6:	2b00      	cmp	r3, #0
  40a2c8:	d072      	beq.n	40a3b0 <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40a2ca:	2b00      	cmp	r3, #0
  40a2cc:	d051      	beq.n	40a372 <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a2ce:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a2d0:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a2d2:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a2d4:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a2d8:	46f4      	mov	ip, lr
  40a2da:	e02e      	b.n	40a33a <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40a2dc:	682a      	ldr	r2, [r5, #0]
  40a2de:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a2e2:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a2e6:	5d14      	ldrb	r4, [r2, r4]
  40a2e8:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a2ec:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a2f0:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a2f4:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a2f8:	ea87 0904 	eor.w	r9, r7, r4
  40a2fc:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a300:	d00d      	beq.n	40a31e <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a302:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a306:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a30a:	ea34 0209 	bics.w	r2, r4, r9
  40a30e:	d122      	bne.n	40a356 <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a310:	4564      	cmp	r4, ip
  40a312:	dd20      	ble.n	40a356 <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a314:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a318:	fa0f fe80 	sxth.w	lr, r0
  40a31c:	e01b      	b.n	40a356 <_lv_style_get_color+0xa0>
                return i;
  40a31e:	4686      	mov	lr, r0
    if(id < 0) {
  40a320:	f1be 0f00 	cmp.w	lr, #0
  40a324:	db47      	blt.n	40a3b6 <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40a326:	682b      	ldr	r3, [r5, #0]
  40a328:	4674      	mov	r4, lr
  40a32a:	f10e 0e02 	add.w	lr, lr, #2
  40a32e:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a330:	4652      	mov	r2, sl
  40a332:	2302      	movs	r3, #2
  40a334:	e025      	b.n	40a382 <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a336:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a338:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a33a:	682b      	ldr	r3, [r5, #0]
  40a33c:	5c1c      	ldrb	r4, [r3, r0]
  40a33e:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a342:	1c44      	adds	r4, r0, #1
  40a344:	5d1b      	ldrb	r3, [r3, r4]
  40a346:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a34a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a34e:	2bff      	cmp	r3, #255	; 0xff
  40a350:	d0e6      	beq.n	40a320 <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40a352:	429e      	cmp	r6, r3
  40a354:	d0c2      	beq.n	40a2dc <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40a356:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a35a:	2b08      	cmp	r3, #8
  40a35c:	d9eb      	bls.n	40a336 <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a35e:	2b0b      	cmp	r3, #11
  40a360:	d903      	bls.n	40a36a <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a362:	2b0d      	cmp	r3, #13
  40a364:	d803      	bhi.n	40a36e <_lv_style_get_color+0xb8>
  40a366:	2303      	movs	r3, #3
  40a368:	e7e6      	b.n	40a338 <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a36a:	2304      	movs	r3, #4
  40a36c:	e7e4      	b.n	40a338 <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40a36e:	2306      	movs	r3, #6
  40a370:	e7e2      	b.n	40a338 <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40a372:	f04f 3eff 	mov.w	lr, #4294967295
  40a376:	e7d3      	b.n	40a320 <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40a378:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a37c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a380:	3b01      	subs	r3, #1
    while(len) {
  40a382:	2b00      	cmp	r3, #0
  40a384:	d1f8      	bne.n	40a378 <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40a386:	682b      	ldr	r3, [r5, #0]
  40a388:	5d1a      	ldrb	r2, [r3, r4]
  40a38a:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a38e:	4423      	add	r3, r4
  40a390:	785b      	ldrb	r3, [r3, #1]
  40a392:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a396:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a39a:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a39c:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a3a0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a3a4:	b002      	add	sp, #8
  40a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a3aa:	f04f 30ff 	mov.w	r0, #4294967295
  40a3ae:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a3b0:	f04f 30ff 	mov.w	r0, #4294967295
  40a3b4:	e7f6      	b.n	40a3a4 <_lv_style_get_color+0xee>
        return -1;
  40a3b6:	f04f 30ff 	mov.w	r0, #4294967295
  40a3ba:	e7f3      	b.n	40a3a4 <_lv_style_get_color+0xee>

0040a3bc <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40a3bc:	2800      	cmp	r0, #0
  40a3be:	d077      	beq.n	40a4b0 <_lv_style_get_ptr+0xf4>
{
  40a3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a3c4:	b082      	sub	sp, #8
  40a3c6:	4692      	mov	sl, r2
  40a3c8:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a3ca:	6803      	ldr	r3, [r0, #0]
  40a3cc:	2b00      	cmp	r3, #0
  40a3ce:	d072      	beq.n	40a4b6 <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40a3d0:	2b00      	cmp	r3, #0
  40a3d2:	d051      	beq.n	40a478 <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a3d4:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a3d6:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a3d8:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a3da:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a3de:	46f4      	mov	ip, lr
  40a3e0:	e02e      	b.n	40a440 <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40a3e2:	682a      	ldr	r2, [r5, #0]
  40a3e4:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a3e8:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a3ec:	5d14      	ldrb	r4, [r2, r4]
  40a3ee:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a3f2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a3f6:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a3fa:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a3fe:	ea87 0904 	eor.w	r9, r7, r4
  40a402:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a406:	d00d      	beq.n	40a424 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a408:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a40c:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a410:	ea34 0209 	bics.w	r2, r4, r9
  40a414:	d122      	bne.n	40a45c <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a416:	4564      	cmp	r4, ip
  40a418:	dd20      	ble.n	40a45c <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a41a:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a41e:	fa0f fe80 	sxth.w	lr, r0
  40a422:	e01b      	b.n	40a45c <_lv_style_get_ptr+0xa0>
                return i;
  40a424:	4686      	mov	lr, r0
    if(id < 0) {
  40a426:	f1be 0f00 	cmp.w	lr, #0
  40a42a:	db47      	blt.n	40a4bc <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40a42c:	682b      	ldr	r3, [r5, #0]
  40a42e:	4676      	mov	r6, lr
  40a430:	f10e 0002 	add.w	r0, lr, #2
  40a434:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a436:	4652      	mov	r2, sl
  40a438:	2304      	movs	r3, #4
  40a43a:	e025      	b.n	40a488 <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a43c:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a43e:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a440:	682b      	ldr	r3, [r5, #0]
  40a442:	5c1c      	ldrb	r4, [r3, r0]
  40a444:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a448:	1c44      	adds	r4, r0, #1
  40a44a:	5d1b      	ldrb	r3, [r3, r4]
  40a44c:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a450:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a454:	2bff      	cmp	r3, #255	; 0xff
  40a456:	d0e6      	beq.n	40a426 <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40a458:	429e      	cmp	r6, r3
  40a45a:	d0c2      	beq.n	40a3e2 <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40a45c:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a460:	2b08      	cmp	r3, #8
  40a462:	d9eb      	bls.n	40a43c <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a464:	2b0b      	cmp	r3, #11
  40a466:	d903      	bls.n	40a470 <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a468:	2b0d      	cmp	r3, #13
  40a46a:	d803      	bhi.n	40a474 <_lv_style_get_ptr+0xb8>
  40a46c:	2303      	movs	r3, #3
  40a46e:	e7e6      	b.n	40a43e <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a470:	2304      	movs	r3, #4
  40a472:	e7e4      	b.n	40a43e <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40a474:	2306      	movs	r3, #6
  40a476:	e7e2      	b.n	40a43e <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40a478:	f04f 3eff 	mov.w	lr, #4294967295
  40a47c:	e7d3      	b.n	40a426 <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40a47e:	f810 4b01 	ldrb.w	r4, [r0], #1
  40a482:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40a486:	3b01      	subs	r3, #1
    while(len) {
  40a488:	2b00      	cmp	r3, #0
  40a48a:	d1f8      	bne.n	40a47e <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40a48c:	682b      	ldr	r3, [r5, #0]
  40a48e:	5d9a      	ldrb	r2, [r3, r6]
  40a490:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a494:	4433      	add	r3, r6
  40a496:	785b      	ldrb	r3, [r3, #1]
  40a498:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a49c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a4a0:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a4a2:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a4a6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a4aa:	b002      	add	sp, #8
  40a4ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a4b0:	f04f 30ff 	mov.w	r0, #4294967295
  40a4b4:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a4b6:	f04f 30ff 	mov.w	r0, #4294967295
  40a4ba:	e7f6      	b.n	40a4aa <_lv_style_get_ptr+0xee>
        return -1;
  40a4bc:	f04f 30ff 	mov.w	r0, #4294967295
  40a4c0:	e7f3      	b.n	40a4aa <_lv_style_get_ptr+0xee>

0040a4c2 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40a4c2:	7903      	ldrb	r3, [r0, #4]
  40a4c4:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a4c8:	d008      	beq.n	40a4dc <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40a4ca:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a4ce:	d102      	bne.n	40a4d6 <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40a4d0:	6803      	ldr	r3, [r0, #0]
  40a4d2:	6818      	ldr	r0, [r3, #0]
  40a4d4:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40a4d6:	6803      	ldr	r3, [r0, #0]
  40a4d8:	6858      	ldr	r0, [r3, #4]
  40a4da:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40a4dc:	2000      	movs	r0, #0
}
  40a4de:	4770      	bx	lr

0040a4e0 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40a4e0:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a4e4:	2b00      	cmp	r3, #0
  40a4e6:	da02      	bge.n	40a4ee <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40a4e8:	6803      	ldr	r3, [r0, #0]
  40a4ea:	6818      	ldr	r0, [r3, #0]
  40a4ec:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40a4ee:	2000      	movs	r0, #0
}
  40a4f0:	4770      	bx	lr
	...

0040a4f4 <_lv_style_list_reset>:
    if(list == NULL) return;
  40a4f4:	2800      	cmp	r0, #0
  40a4f6:	d032      	beq.n	40a55e <_lv_style_list_reset+0x6a>
{
  40a4f8:	b538      	push	{r3, r4, r5, lr}
  40a4fa:	4604      	mov	r4, r0
    if(list->has_local) {
  40a4fc:	7903      	ldrb	r3, [r0, #4]
  40a4fe:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a502:	d008      	beq.n	40a516 <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40a504:	4b16      	ldr	r3, [pc, #88]	; (40a560 <_lv_style_list_reset+0x6c>)
  40a506:	4798      	blx	r3
        if(local) {
  40a508:	4605      	mov	r5, r0
  40a50a:	b120      	cbz	r0, 40a516 <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40a50c:	4b15      	ldr	r3, [pc, #84]	; (40a564 <_lv_style_list_reset+0x70>)
  40a50e:	4798      	blx	r3
            lv_mem_free(local);
  40a510:	4628      	mov	r0, r5
  40a512:	4b15      	ldr	r3, [pc, #84]	; (40a568 <_lv_style_list_reset+0x74>)
  40a514:	4798      	blx	r3
    if(list->has_trans) {
  40a516:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40a51a:	2b00      	cmp	r3, #0
  40a51c:	db13      	blt.n	40a546 <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40a51e:	7923      	ldrb	r3, [r4, #4]
  40a520:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40a524:	d002      	beq.n	40a52c <_lv_style_list_reset+0x38>
  40a526:	6820      	ldr	r0, [r4, #0]
  40a528:	4b0f      	ldr	r3, [pc, #60]	; (40a568 <_lv_style_list_reset+0x74>)
  40a52a:	4798      	blx	r3
    list->style_list = NULL;
  40a52c:	2200      	movs	r2, #0
  40a52e:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40a530:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40a532:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40a536:	f362 13c7 	bfi	r3, r2, #7, #1
  40a53a:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40a53c:	7963      	ldrb	r3, [r4, #5]
  40a53e:	f362 0300 	bfi	r3, r2, #0, #1
  40a542:	7163      	strb	r3, [r4, #5]
  40a544:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40a546:	4620      	mov	r0, r4
  40a548:	4b08      	ldr	r3, [pc, #32]	; (40a56c <_lv_style_list_reset+0x78>)
  40a54a:	4798      	blx	r3
        if(trans) {
  40a54c:	4605      	mov	r5, r0
  40a54e:	2800      	cmp	r0, #0
  40a550:	d0e5      	beq.n	40a51e <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40a552:	4b04      	ldr	r3, [pc, #16]	; (40a564 <_lv_style_list_reset+0x70>)
  40a554:	4798      	blx	r3
            lv_mem_free(trans);
  40a556:	4628      	mov	r0, r5
  40a558:	4b03      	ldr	r3, [pc, #12]	; (40a568 <_lv_style_list_reset+0x74>)
  40a55a:	4798      	blx	r3
  40a55c:	e7df      	b.n	40a51e <_lv_style_list_reset+0x2a>
  40a55e:	4770      	bx	lr
  40a560:	0040a4c3 	.word	0x0040a4c3
  40a564:	004098a9 	.word	0x004098a9
  40a568:	00415cf9 	.word	0x00415cf9
  40a56c:	0040a4e1 	.word	0x0040a4e1

0040a570 <lv_style_list_copy>:
{
  40a570:	b570      	push	{r4, r5, r6, lr}
  40a572:	4605      	mov	r5, r0
  40a574:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40a576:	4b3d      	ldr	r3, [pc, #244]	; (40a66c <lv_style_list_copy+0xfc>)
  40a578:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40a57a:	6823      	ldr	r3, [r4, #0]
  40a57c:	2b00      	cmp	r3, #0
  40a57e:	d059      	beq.n	40a634 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40a580:	7923      	ldrb	r3, [r4, #4]
  40a582:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a586:	d12f      	bne.n	40a5e8 <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40a588:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a58c:	d113      	bne.n	40a5b6 <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40a58e:	7920      	ldrb	r0, [r4, #4]
  40a590:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a594:	0080      	lsls	r0, r0, #2
  40a596:	4b36      	ldr	r3, [pc, #216]	; (40a670 <lv_style_list_copy+0x100>)
  40a598:	4798      	blx	r3
  40a59a:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40a59c:	7922      	ldrb	r2, [r4, #4]
  40a59e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a5a2:	0092      	lsls	r2, r2, #2
  40a5a4:	6821      	ldr	r1, [r4, #0]
  40a5a6:	4b33      	ldr	r3, [pc, #204]	; (40a674 <lv_style_list_copy+0x104>)
  40a5a8:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40a5aa:	7922      	ldrb	r2, [r4, #4]
  40a5ac:	792b      	ldrb	r3, [r5, #4]
  40a5ae:	f362 0305 	bfi	r3, r2, #0, #6
  40a5b2:	712b      	strb	r3, [r5, #4]
  40a5b4:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a5b6:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40a5ba:	3801      	subs	r0, #1
  40a5bc:	0080      	lsls	r0, r0, #2
  40a5be:	4b2c      	ldr	r3, [pc, #176]	; (40a670 <lv_style_list_copy+0x100>)
  40a5c0:	4798      	blx	r3
  40a5c2:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a5c4:	6821      	ldr	r1, [r4, #0]
  40a5c6:	7922      	ldrb	r2, [r4, #4]
  40a5c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a5cc:	3a01      	subs	r2, #1
  40a5ce:	0092      	lsls	r2, r2, #2
  40a5d0:	3104      	adds	r1, #4
  40a5d2:	4b28      	ldr	r3, [pc, #160]	; (40a674 <lv_style_list_copy+0x104>)
  40a5d4:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a5d6:	7923      	ldrb	r3, [r4, #4]
  40a5d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a5dc:	3b01      	subs	r3, #1
  40a5de:	792a      	ldrb	r2, [r5, #4]
  40a5e0:	f363 0205 	bfi	r2, r3, #0, #6
  40a5e4:	712a      	strb	r2, [r5, #4]
  40a5e6:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40a5e8:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a5ec:	d123      	bne.n	40a636 <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a5ee:	7920      	ldrb	r0, [r4, #4]
  40a5f0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a5f4:	3801      	subs	r0, #1
  40a5f6:	0080      	lsls	r0, r0, #2
  40a5f8:	4b1d      	ldr	r3, [pc, #116]	; (40a670 <lv_style_list_copy+0x100>)
  40a5fa:	4798      	blx	r3
  40a5fc:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a5fe:	6821      	ldr	r1, [r4, #0]
  40a600:	7922      	ldrb	r2, [r4, #4]
  40a602:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a606:	3a01      	subs	r2, #1
  40a608:	0092      	lsls	r2, r2, #2
  40a60a:	3104      	adds	r1, #4
  40a60c:	4b19      	ldr	r3, [pc, #100]	; (40a674 <lv_style_list_copy+0x104>)
  40a60e:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a610:	7923      	ldrb	r3, [r4, #4]
  40a612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a616:	3b01      	subs	r3, #1
  40a618:	792a      	ldrb	r2, [r5, #4]
  40a61a:	f363 0205 	bfi	r2, r3, #0, #6
  40a61e:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40a620:	4628      	mov	r0, r5
  40a622:	4d15      	ldr	r5, [pc, #84]	; (40a678 <lv_style_list_copy+0x108>)
  40a624:	47a8      	blx	r5
  40a626:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40a628:	4620      	mov	r0, r4
  40a62a:	47a8      	blx	r5
  40a62c:	4601      	mov	r1, r0
  40a62e:	4630      	mov	r0, r6
  40a630:	4b12      	ldr	r3, [pc, #72]	; (40a67c <lv_style_list_copy+0x10c>)
  40a632:	4798      	blx	r3
  40a634:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a636:	7920      	ldrb	r0, [r4, #4]
  40a638:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a63c:	3802      	subs	r0, #2
  40a63e:	0080      	lsls	r0, r0, #2
  40a640:	4b0b      	ldr	r3, [pc, #44]	; (40a670 <lv_style_list_copy+0x100>)
  40a642:	4798      	blx	r3
  40a644:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a646:	6821      	ldr	r1, [r4, #0]
  40a648:	7922      	ldrb	r2, [r4, #4]
  40a64a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a64e:	3a02      	subs	r2, #2
  40a650:	0092      	lsls	r2, r2, #2
  40a652:	3108      	adds	r1, #8
  40a654:	4b07      	ldr	r3, [pc, #28]	; (40a674 <lv_style_list_copy+0x104>)
  40a656:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40a658:	7923      	ldrb	r3, [r4, #4]
  40a65a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a65e:	3b02      	subs	r3, #2
  40a660:	792a      	ldrb	r2, [r5, #4]
  40a662:	f363 0205 	bfi	r2, r3, #0, #6
  40a666:	712a      	strb	r2, [r5, #4]
  40a668:	e7da      	b.n	40a620 <lv_style_list_copy+0xb0>
  40a66a:	bf00      	nop
  40a66c:	0040a4f5 	.word	0x0040a4f5
  40a670:	00415c35 	.word	0x00415c35
  40a674:	00415e45 	.word	0x00415e45
  40a678:	00409819 	.word	0x00409819
  40a67c:	00409909 	.word	0x00409909

0040a680 <_lv_style_list_add_trans_style>:
{
  40a680:	b538      	push	{r3, r4, r5, lr}
  40a682:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a684:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a688:	2b00      	cmp	r3, #0
  40a68a:	db1c      	blt.n	40a6c6 <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40a68c:	2004      	movs	r0, #4
  40a68e:	4b13      	ldr	r3, [pc, #76]	; (40a6dc <_lv_style_list_add_trans_style+0x5c>)
  40a690:	4798      	blx	r3
  40a692:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40a694:	4b12      	ldr	r3, [pc, #72]	; (40a6e0 <_lv_style_list_add_trans_style+0x60>)
  40a696:	4798      	blx	r3
  40a698:	b1d0      	cbz	r0, 40a6d0 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40a69a:	b1bd      	cbz	r5, 40a6cc <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40a69c:	4628      	mov	r0, r5
  40a69e:	4b11      	ldr	r3, [pc, #68]	; (40a6e4 <_lv_style_list_add_trans_style+0x64>)
  40a6a0:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40a6a2:	4629      	mov	r1, r5
  40a6a4:	4620      	mov	r0, r4
  40a6a6:	4b10      	ldr	r3, [pc, #64]	; (40a6e8 <_lv_style_list_add_trans_style+0x68>)
  40a6a8:	4798      	blx	r3
    list->has_trans = 1;
  40a6aa:	7923      	ldrb	r3, [r4, #4]
  40a6ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a6b0:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40a6b2:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a6b6:	d009      	beq.n	40a6cc <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40a6b8:	6823      	ldr	r3, [r4, #0]
  40a6ba:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40a6bc:	6859      	ldr	r1, [r3, #4]
  40a6be:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40a6c0:	6823      	ldr	r3, [r4, #0]
  40a6c2:	605a      	str	r2, [r3, #4]
  40a6c4:	e002      	b.n	40a6cc <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a6c6:	4b09      	ldr	r3, [pc, #36]	; (40a6ec <_lv_style_list_add_trans_style+0x6c>)
  40a6c8:	4798      	blx	r3
  40a6ca:	4605      	mov	r5, r0
}
  40a6cc:	4628      	mov	r0, r5
  40a6ce:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40a6d0:	462a      	mov	r2, r5
  40a6d2:	2300      	movs	r3, #0
  40a6d4:	4806      	ldr	r0, [pc, #24]	; (40a6f0 <_lv_style_list_add_trans_style+0x70>)
  40a6d6:	4907      	ldr	r1, [pc, #28]	; (40a6f4 <_lv_style_list_add_trans_style+0x74>)
  40a6d8:	4788      	blx	r1
  40a6da:	e7fe      	b.n	40a6da <_lv_style_list_add_trans_style+0x5a>
  40a6dc:	00415c35 	.word	0x00415c35
  40a6e0:	0041552d 	.word	0x0041552d
  40a6e4:	00409685 	.word	0x00409685
  40a6e8:	00409769 	.word	0x00409769
  40a6ec:	0040a4e1 	.word	0x0040a4e1
  40a6f0:	004235f0 	.word	0x004235f0
  40a6f4:	00415539 	.word	0x00415539

0040a6f8 <_lv_style_list_set_local_color>:
{
  40a6f8:	b538      	push	{r3, r4, r5, lr}
  40a6fa:	460c      	mov	r4, r1
  40a6fc:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a6fe:	4b03      	ldr	r3, [pc, #12]	; (40a70c <_lv_style_list_set_local_color+0x14>)
  40a700:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40a702:	462a      	mov	r2, r5
  40a704:	4621      	mov	r1, r4
  40a706:	4b02      	ldr	r3, [pc, #8]	; (40a710 <_lv_style_list_set_local_color+0x18>)
  40a708:	4798      	blx	r3
  40a70a:	bd38      	pop	{r3, r4, r5, pc}
  40a70c:	00409819 	.word	0x00409819
  40a710:	00409bfd 	.word	0x00409bfd

0040a714 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40a714:	2800      	cmp	r0, #0
  40a716:	d05e      	beq.n	40a7d6 <_lv_style_list_get_int+0xc2>
{
  40a718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a71c:	b083      	sub	sp, #12
  40a71e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a720:	6803      	ldr	r3, [r0, #0]
  40a722:	2b00      	cmp	r3, #0
  40a724:	d059      	beq.n	40a7da <_lv_style_list_get_int+0xc6>
  40a726:	4691      	mov	r9, r2
  40a728:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a72a:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40a72e:	2400      	movs	r4, #0
  40a730:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40a734:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a738:	e017      	b.n	40a76a <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40a73a:	3101      	adds	r1, #1
  40a73c:	b2c9      	uxtb	r1, r1
  40a73e:	e020      	b.n	40a782 <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a740:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40a742:	f10d 0206 	add.w	r2, sp, #6
  40a746:	4639      	mov	r1, r7
  40a748:	4b26      	ldr	r3, [pc, #152]	; (40a7e4 <_lv_style_list_get_int+0xd0>)
  40a74a:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a74c:	4580      	cmp	r8, r0
  40a74e:	d024      	beq.n	40a79a <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a750:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a754:	2b00      	cmp	r3, #0
  40a756:	db28      	blt.n	40a7aa <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40a758:	4286      	cmp	r6, r0
  40a75a:	da04      	bge.n	40a766 <_lv_style_list_get_int+0x52>
            *res = value_act;
  40a75c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a760:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40a764:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a766:	3401      	adds	r4, #1
  40a768:	b224      	sxth	r4, r4
  40a76a:	792b      	ldrb	r3, [r5, #4]
  40a76c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a770:	429c      	cmp	r4, r3
  40a772:	da2c      	bge.n	40a7ce <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a774:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a776:	88aa      	ldrh	r2, [r5, #4]
  40a778:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a77c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a780:	d0db      	beq.n	40a73a <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a782:	792a      	ldrb	r2, [r5, #4]
  40a784:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a788:	d0da      	beq.n	40a740 <_lv_style_list_get_int+0x2c>
  40a78a:	428b      	cmp	r3, r1
  40a78c:	dd03      	ble.n	40a796 <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40a78e:	682b      	ldr	r3, [r5, #0]
  40a790:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a794:	e7d5      	b.n	40a742 <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a796:	2000      	movs	r0, #0
  40a798:	e7d3      	b.n	40a742 <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40a79a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a79e:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a7a2:	2001      	movs	r0, #1
}
  40a7a4:	b003      	add	sp, #12
  40a7a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a7aa:	fab4 f384 	clz	r3, r4
  40a7ae:	095b      	lsrs	r3, r3, #5
  40a7b0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a7b4:	d1d0      	bne.n	40a758 <_lv_style_list_get_int+0x44>
  40a7b6:	2b00      	cmp	r3, #0
  40a7b8:	d0ce      	beq.n	40a758 <_lv_style_list_get_int+0x44>
  40a7ba:	796b      	ldrb	r3, [r5, #5]
  40a7bc:	f013 0f01 	tst.w	r3, #1
  40a7c0:	d1ca      	bne.n	40a758 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40a7c2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a7c6:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a7ca:	2001      	movs	r0, #1
  40a7cc:	e7ea      	b.n	40a7a4 <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40a7ce:	2e00      	cmp	r6, #0
  40a7d0:	db05      	blt.n	40a7de <_lv_style_list_get_int+0xca>
  40a7d2:	2001      	movs	r0, #1
  40a7d4:	e7e6      	b.n	40a7a4 <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40a7d6:	2000      	movs	r0, #0
  40a7d8:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a7da:	2000      	movs	r0, #0
  40a7dc:	e7e2      	b.n	40a7a4 <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40a7de:	2000      	movs	r0, #0
  40a7e0:	e7e0      	b.n	40a7a4 <_lv_style_list_get_int+0x90>
  40a7e2:	bf00      	nop
  40a7e4:	0040a0ad 	.word	0x0040a0ad

0040a7e8 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40a7e8:	2800      	cmp	r0, #0
  40a7ea:	d05d      	beq.n	40a8a8 <_lv_style_list_get_color+0xc0>
{
  40a7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a7f0:	b083      	sub	sp, #12
  40a7f2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a7f4:	6803      	ldr	r3, [r0, #0]
  40a7f6:	2b00      	cmp	r3, #0
  40a7f8:	d058      	beq.n	40a8ac <_lv_style_list_get_color+0xc4>
  40a7fa:	4691      	mov	r9, r2
  40a7fc:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a7fe:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40a802:	2400      	movs	r4, #0
  40a804:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40a808:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a80c:	e016      	b.n	40a83c <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40a80e:	3101      	adds	r1, #1
  40a810:	b2c9      	uxtb	r1, r1
  40a812:	e01f      	b.n	40a854 <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a814:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40a816:	aa01      	add	r2, sp, #4
  40a818:	4639      	mov	r1, r7
  40a81a:	4b26      	ldr	r3, [pc, #152]	; (40a8b4 <_lv_style_list_get_color+0xcc>)
  40a81c:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a81e:	4580      	cmp	r8, r0
  40a820:	d024      	beq.n	40a86c <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a822:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a826:	2b00      	cmp	r3, #0
  40a828:	db28      	blt.n	40a87c <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40a82a:	4286      	cmp	r6, r0
  40a82c:	da04      	bge.n	40a838 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40a82e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a832:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40a836:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a838:	3401      	adds	r4, #1
  40a83a:	b224      	sxth	r4, r4
  40a83c:	792b      	ldrb	r3, [r5, #4]
  40a83e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a842:	429c      	cmp	r4, r3
  40a844:	da2c      	bge.n	40a8a0 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a846:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a848:	88aa      	ldrh	r2, [r5, #4]
  40a84a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a84e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a852:	d0dc      	beq.n	40a80e <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a854:	792a      	ldrb	r2, [r5, #4]
  40a856:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a85a:	d0db      	beq.n	40a814 <_lv_style_list_get_color+0x2c>
  40a85c:	428b      	cmp	r3, r1
  40a85e:	dd03      	ble.n	40a868 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40a860:	682b      	ldr	r3, [r5, #0]
  40a862:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a866:	e7d6      	b.n	40a816 <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a868:	2000      	movs	r0, #0
  40a86a:	e7d4      	b.n	40a816 <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40a86c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a870:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a874:	2001      	movs	r0, #1
}
  40a876:	b003      	add	sp, #12
  40a878:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a87c:	fab4 f384 	clz	r3, r4
  40a880:	095b      	lsrs	r3, r3, #5
  40a882:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a886:	d1d0      	bne.n	40a82a <_lv_style_list_get_color+0x42>
  40a888:	2b00      	cmp	r3, #0
  40a88a:	d0ce      	beq.n	40a82a <_lv_style_list_get_color+0x42>
  40a88c:	796b      	ldrb	r3, [r5, #5]
  40a88e:	f013 0f01 	tst.w	r3, #1
  40a892:	d1ca      	bne.n	40a82a <_lv_style_list_get_color+0x42>
            *res = value_act;
  40a894:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40a898:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a89c:	2001      	movs	r0, #1
  40a89e:	e7ea      	b.n	40a876 <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40a8a0:	2e00      	cmp	r6, #0
  40a8a2:	db05      	blt.n	40a8b0 <_lv_style_list_get_color+0xc8>
  40a8a4:	2001      	movs	r0, #1
  40a8a6:	e7e6      	b.n	40a876 <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40a8a8:	2000      	movs	r0, #0
  40a8aa:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a8ac:	2000      	movs	r0, #0
  40a8ae:	e7e2      	b.n	40a876 <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40a8b0:	2000      	movs	r0, #0
  40a8b2:	e7e0      	b.n	40a876 <_lv_style_list_get_color+0x8e>
  40a8b4:	0040a2b7 	.word	0x0040a2b7

0040a8b8 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40a8b8:	2800      	cmp	r0, #0
  40a8ba:	d05e      	beq.n	40a97a <_lv_style_list_get_opa+0xc2>
{
  40a8bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a8c0:	b083      	sub	sp, #12
  40a8c2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a8c4:	6803      	ldr	r3, [r0, #0]
  40a8c6:	2b00      	cmp	r3, #0
  40a8c8:	d059      	beq.n	40a97e <_lv_style_list_get_opa+0xc6>
  40a8ca:	4691      	mov	r9, r2
  40a8cc:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a8ce:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40a8d2:	2400      	movs	r4, #0
  40a8d4:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40a8d8:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a8dc:	e017      	b.n	40a90e <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40a8de:	3101      	adds	r1, #1
  40a8e0:	b2c9      	uxtb	r1, r1
  40a8e2:	e020      	b.n	40a926 <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a8e4:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40a8e6:	f10d 0207 	add.w	r2, sp, #7
  40a8ea:	4639      	mov	r1, r7
  40a8ec:	4b26      	ldr	r3, [pc, #152]	; (40a988 <_lv_style_list_get_opa+0xd0>)
  40a8ee:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a8f0:	4580      	cmp	r8, r0
  40a8f2:	d024      	beq.n	40a93e <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a8f4:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a8f8:	2b00      	cmp	r3, #0
  40a8fa:	db28      	blt.n	40a94e <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40a8fc:	4286      	cmp	r6, r0
  40a8fe:	da04      	bge.n	40a90a <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40a900:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a904:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40a908:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a90a:	3401      	adds	r4, #1
  40a90c:	b224      	sxth	r4, r4
  40a90e:	792b      	ldrb	r3, [r5, #4]
  40a910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a914:	429c      	cmp	r4, r3
  40a916:	da2c      	bge.n	40a972 <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a918:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a91a:	88aa      	ldrh	r2, [r5, #4]
  40a91c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a920:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a924:	d0db      	beq.n	40a8de <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a926:	792a      	ldrb	r2, [r5, #4]
  40a928:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a92c:	d0da      	beq.n	40a8e4 <_lv_style_list_get_opa+0x2c>
  40a92e:	428b      	cmp	r3, r1
  40a930:	dd03      	ble.n	40a93a <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40a932:	682b      	ldr	r3, [r5, #0]
  40a934:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a938:	e7d5      	b.n	40a8e6 <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a93a:	2000      	movs	r0, #0
  40a93c:	e7d3      	b.n	40a8e6 <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40a93e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a942:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40a946:	2001      	movs	r0, #1
}
  40a948:	b003      	add	sp, #12
  40a94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a94e:	fab4 f384 	clz	r3, r4
  40a952:	095b      	lsrs	r3, r3, #5
  40a954:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a958:	d1d0      	bne.n	40a8fc <_lv_style_list_get_opa+0x44>
  40a95a:	2b00      	cmp	r3, #0
  40a95c:	d0ce      	beq.n	40a8fc <_lv_style_list_get_opa+0x44>
  40a95e:	796b      	ldrb	r3, [r5, #5]
  40a960:	f013 0f01 	tst.w	r3, #1
  40a964:	d1ca      	bne.n	40a8fc <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40a966:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40a96a:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40a96e:	2001      	movs	r0, #1
  40a970:	e7ea      	b.n	40a948 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40a972:	2e00      	cmp	r6, #0
  40a974:	db05      	blt.n	40a982 <_lv_style_list_get_opa+0xca>
  40a976:	2001      	movs	r0, #1
  40a978:	e7e6      	b.n	40a948 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40a97a:	2000      	movs	r0, #0
  40a97c:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40a97e:	2000      	movs	r0, #0
  40a980:	e7e2      	b.n	40a948 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40a982:	2000      	movs	r0, #0
  40a984:	e7e0      	b.n	40a948 <_lv_style_list_get_opa+0x90>
  40a986:	bf00      	nop
  40a988:	0040a1b3 	.word	0x0040a1b3

0040a98c <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40a98c:	2800      	cmp	r0, #0
  40a98e:	d058      	beq.n	40aa42 <_lv_style_list_get_ptr+0xb6>
{
  40a990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a994:	b083      	sub	sp, #12
  40a996:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a998:	6803      	ldr	r3, [r0, #0]
  40a99a:	2b00      	cmp	r3, #0
  40a99c:	d053      	beq.n	40aa46 <_lv_style_list_get_ptr+0xba>
  40a99e:	4691      	mov	r9, r2
  40a9a0:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a9a2:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a9a6:	2400      	movs	r4, #0
    int16_t weight = -1;
  40a9a8:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a9ac:	e015      	b.n	40a9da <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40a9ae:	3101      	adds	r1, #1
  40a9b0:	b2c9      	uxtb	r1, r1
  40a9b2:	e01e      	b.n	40a9f2 <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a9b4:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40a9b6:	aa01      	add	r2, sp, #4
  40a9b8:	4639      	mov	r1, r7
  40a9ba:	4b25      	ldr	r3, [pc, #148]	; (40aa50 <_lv_style_list_get_ptr+0xc4>)
  40a9bc:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a9be:	4580      	cmp	r8, r0
  40a9c0:	d023      	beq.n	40aa0a <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a9c2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a9c6:	2b00      	cmp	r3, #0
  40a9c8:	db26      	blt.n	40aa18 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40a9ca:	4286      	cmp	r6, r0
  40a9cc:	da03      	bge.n	40a9d6 <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40a9ce:	9b01      	ldr	r3, [sp, #4]
  40a9d0:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40a9d4:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a9d6:	3401      	adds	r4, #1
  40a9d8:	b224      	sxth	r4, r4
  40a9da:	792b      	ldrb	r3, [r5, #4]
  40a9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a9e0:	429c      	cmp	r4, r3
  40a9e2:	da2a      	bge.n	40aa3a <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a9e4:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a9e6:	88aa      	ldrh	r2, [r5, #4]
  40a9e8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a9ec:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a9f0:	d0dd      	beq.n	40a9ae <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a9f2:	792a      	ldrb	r2, [r5, #4]
  40a9f4:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a9f8:	d0dc      	beq.n	40a9b4 <_lv_style_list_get_ptr+0x28>
  40a9fa:	428b      	cmp	r3, r1
  40a9fc:	dd03      	ble.n	40aa06 <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40a9fe:	682b      	ldr	r3, [r5, #0]
  40aa00:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40aa04:	e7d7      	b.n	40a9b6 <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aa06:	2000      	movs	r0, #0
  40aa08:	e7d5      	b.n	40a9b6 <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40aa0a:	9b01      	ldr	r3, [sp, #4]
  40aa0c:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40aa10:	2001      	movs	r0, #1
}
  40aa12:	b003      	add	sp, #12
  40aa14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aa18:	fab4 f384 	clz	r3, r4
  40aa1c:	095b      	lsrs	r3, r3, #5
  40aa1e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40aa22:	d1d2      	bne.n	40a9ca <_lv_style_list_get_ptr+0x3e>
  40aa24:	2b00      	cmp	r3, #0
  40aa26:	d0d0      	beq.n	40a9ca <_lv_style_list_get_ptr+0x3e>
  40aa28:	796b      	ldrb	r3, [r5, #5]
  40aa2a:	f013 0f01 	tst.w	r3, #1
  40aa2e:	d1cc      	bne.n	40a9ca <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40aa30:	9b01      	ldr	r3, [sp, #4]
  40aa32:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40aa36:	2001      	movs	r0, #1
  40aa38:	e7eb      	b.n	40aa12 <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40aa3a:	2e00      	cmp	r6, #0
  40aa3c:	db05      	blt.n	40aa4a <_lv_style_list_get_ptr+0xbe>
  40aa3e:	2001      	movs	r0, #1
  40aa40:	e7e7      	b.n	40aa12 <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40aa42:	2000      	movs	r0, #0
  40aa44:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40aa46:	2000      	movs	r0, #0
  40aa48:	e7e3      	b.n	40aa12 <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40aa4a:	2000      	movs	r0, #0
  40aa4c:	e7e1      	b.n	40aa12 <_lv_style_list_get_ptr+0x86>
  40aa4e:	bf00      	nop
  40aa50:	0040a3bd 	.word	0x0040a3bd

0040aa54 <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40aa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aa58:	b085      	sub	sp, #20
  40aa5a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40aa5e:	9400      	str	r4, [sp, #0]
  40aa60:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40aa64:	8884      	ldrh	r4, [r0, #4]
  40aa66:	f9b0 c000 	ldrsh.w	ip, [r0]
  40aa6a:	fa1f f58c 	uxth.w	r5, ip
  40aa6e:	1b64      	subs	r4, r4, r5
  40aa70:	b2a4      	uxth	r4, r4
  40aa72:	3401      	adds	r4, #1
  40aa74:	b224      	sxth	r4, r4
  40aa76:	9402      	str	r4, [sp, #8]
  40aa78:	8895      	ldrh	r5, [r2, #4]
  40aa7a:	f9b2 4000 	ldrsh.w	r4, [r2]
  40aa7e:	b2a6      	uxth	r6, r4
  40aa80:	1bad      	subs	r5, r5, r6
  40aa82:	b2ad      	uxth	r5, r5
  40aa84:	3501      	adds	r5, #1
  40aa86:	b22e      	sxth	r6, r5
  40aa88:	9603      	str	r6, [sp, #12]
  40aa8a:	889d      	ldrh	r5, [r3, #4]
  40aa8c:	f9b3 e000 	ldrsh.w	lr, [r3]
  40aa90:	fa1f f68e 	uxth.w	r6, lr
  40aa94:	1bad      	subs	r5, r5, r6
  40aa96:	b2ad      	uxth	r5, r5
  40aa98:	3501      	adds	r5, #1
  40aa9a:	b22e      	sxth	r6, r5
  40aa9c:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40aa9e:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40aaa2:	9d02      	ldr	r5, [sp, #8]
  40aaa4:	fb0b f605 	mul.w	r6, fp, r5
  40aaa8:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40aaac:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40aab0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40aab4:	1aed      	subs	r5, r5, r3
  40aab6:	ebab 0505 	sub.w	r5, fp, r5
  40aaba:	9b01      	ldr	r3, [sp, #4]
  40aabc:	fb05 f503 	mul.w	r5, r5, r3
  40aac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40aac2:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40aac6:	2f01      	cmp	r7, #1
  40aac8:	d004      	beq.n	40aad4 <map_blended+0x80>
  40aaca:	2f02      	cmp	r7, #2
  40aacc:	d00f      	beq.n	40aaee <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40aace:	b005      	add	sp, #20
  40aad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40aad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40ab98 <map_blended+0x144>
  40aad8:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40aada:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40aade:	2b01      	cmp	r3, #1
  40aae0:	d008      	beq.n	40aaf4 <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40aae2:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40aae4:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40aae8:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40aaec:	e04d      	b.n	40ab8a <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40aaee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40ab9c <map_blended+0x148>
  40aaf2:	e7f1      	b.n	40aad8 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40aaf4:	ebae 030c 	sub.w	r3, lr, ip
  40aaf8:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40aafa:	0064      	lsls	r4, r4, #1
  40aafc:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40ab00:	441d      	add	r5, r3
  40ab02:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40ab06:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ab0a:	e013      	b.n	40ab34 <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40ab0c:	4642      	mov	r2, r8
  40ab0e:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40ab12:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40ab16:	47d0      	blx	sl
  40ab18:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab1c:	3401      	adds	r4, #1
  40ab1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40ab22:	429c      	cmp	r4, r3
  40ab24:	ddf2      	ble.n	40ab0c <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40ab26:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40ab2a:	9b01      	ldr	r3, [sp, #4]
  40ab2c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ab30:	f10b 0b01 	add.w	fp, fp, #1
  40ab34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40ab38:	459b      	cmp	fp, r3
  40ab3a:	dcc8      	bgt.n	40aace <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab3c:	f9b7 4000 	ldrsh.w	r4, [r7]
  40ab40:	e7ed      	b.n	40ab1e <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40ab42:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40ab44:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40ab48:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40ab4c:	47d0      	blx	sl
  40ab4e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab52:	3401      	adds	r4, #1
  40ab54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40ab58:	429c      	cmp	r4, r3
  40ab5a:	dc0c      	bgt.n	40ab76 <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40ab5c:	4625      	mov	r5, r4
  40ab5e:	f819 2004 	ldrb.w	r2, [r9, r4]
  40ab62:	2a00      	cmp	r2, #0
  40ab64:	d0f5      	beq.n	40ab52 <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40ab66:	2afc      	cmp	r2, #252	; 0xfc
  40ab68:	d8eb      	bhi.n	40ab42 <map_blended+0xee>
  40ab6a:	9b00      	ldr	r3, [sp, #0]
  40ab6c:	fb02 f203 	mul.w	r2, r2, r3
  40ab70:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40ab74:	e7e6      	b.n	40ab44 <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40ab76:	9b02      	ldr	r3, [sp, #8]
  40ab78:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40ab7c:	9b03      	ldr	r3, [sp, #12]
  40ab7e:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40ab80:	9b01      	ldr	r3, [sp, #4]
  40ab82:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ab86:	f10b 0b01 	add.w	fp, fp, #1
  40ab8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40ab8e:	459b      	cmp	fp, r3
  40ab90:	dc9d      	bgt.n	40aace <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ab92:	f9b7 4000 	ldrsh.w	r4, [r7]
  40ab96:	e7dd      	b.n	40ab54 <map_blended+0x100>
  40ab98:	0040bd61 	.word	0x0040bd61
  40ab9c:	0040be4f 	.word	0x0040be4f

0040aba0 <fill_set_px>:
{
  40aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aba4:	b089      	sub	sp, #36	; 0x24
  40aba6:	4604      	mov	r4, r0
  40aba8:	9106      	str	r1, [sp, #24]
  40abaa:	4615      	mov	r5, r2
  40abac:	4698      	mov	r8, r3
  40abae:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40abb2:	4b33      	ldr	r3, [pc, #204]	; (40ac80 <fill_set_px+0xe0>)
  40abb4:	4798      	blx	r3
  40abb6:	4606      	mov	r6, r0
  40abb8:	88a3      	ldrh	r3, [r4, #4]
  40abba:	8822      	ldrh	r2, [r4, #0]
  40abbc:	1a9b      	subs	r3, r3, r2
  40abbe:	b29b      	uxth	r3, r3
  40abc0:	3301      	adds	r3, #1
  40abc2:	b21b      	sxth	r3, r3
  40abc4:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40abc6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40abca:	2b01      	cmp	r3, #1
  40abcc:	d00d      	beq.n	40abea <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40abce:	f9b5 2000 	ldrsh.w	r2, [r5]
  40abd2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40abd4:	1abf      	subs	r7, r7, r2
  40abd6:	88ab      	ldrh	r3, [r5, #4]
  40abd8:	b292      	uxth	r2, r2
  40abda:	1a9b      	subs	r3, r3, r2
  40abdc:	b29b      	uxth	r3, r3
  40abde:	3301      	adds	r3, #1
  40abe0:	b21b      	sxth	r3, r3
  40abe2:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40abe4:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40abe8:	e03f      	b.n	40ac6a <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40abea:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40abee:	f8dd b018 	ldr.w	fp, [sp, #24]
  40abf2:	e014      	b.n	40ac1e <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40abf4:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40abf8:	9702      	str	r7, [sp, #8]
  40abfa:	f8ad 8004 	strh.w	r8, [sp, #4]
  40abfe:	fa0f f38a 	sxth.w	r3, sl
  40ac02:	9300      	str	r3, [sp, #0]
  40ac04:	b223      	sxth	r3, r4
  40ac06:	9a05      	ldr	r2, [sp, #20]
  40ac08:	4659      	mov	r1, fp
  40ac0a:	4630      	mov	r0, r6
  40ac0c:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ac0e:	3401      	adds	r4, #1
  40ac10:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ac14:	429c      	cmp	r4, r3
  40ac16:	dded      	ble.n	40abf4 <fill_set_px+0x54>
  40ac18:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ac1a:	f10a 0a01 	add.w	sl, sl, #1
  40ac1e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ac22:	459a      	cmp	sl, r3
  40ac24:	dc28      	bgt.n	40ac78 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ac26:	f9b5 4000 	ldrsh.w	r4, [r5]
  40ac2a:	464f      	mov	r7, r9
  40ac2c:	e7f0      	b.n	40ac10 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ac2e:	3401      	adds	r4, #1
  40ac30:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ac34:	429c      	cmp	r4, r3
  40ac36:	dc14      	bgt.n	40ac62 <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40ac38:	5d3b      	ldrb	r3, [r7, r4]
  40ac3a:	2b00      	cmp	r3, #0
  40ac3c:	d0f7      	beq.n	40ac2e <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40ac3e:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40ac42:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40ac46:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ac4a:	9302      	str	r3, [sp, #8]
  40ac4c:	f8ad 8004 	strh.w	r8, [sp, #4]
  40ac50:	fa0f f38a 	sxth.w	r3, sl
  40ac54:	9300      	str	r3, [sp, #0]
  40ac56:	b223      	sxth	r3, r4
  40ac58:	9a05      	ldr	r2, [sp, #20]
  40ac5a:	9906      	ldr	r1, [sp, #24]
  40ac5c:	4630      	mov	r0, r6
  40ac5e:	47d8      	blx	fp
  40ac60:	e7e5      	b.n	40ac2e <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40ac62:	9b07      	ldr	r3, [sp, #28]
  40ac64:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ac66:	f10a 0a01 	add.w	sl, sl, #1
  40ac6a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ac6e:	459a      	cmp	sl, r3
  40ac70:	dc02      	bgt.n	40ac78 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ac72:	f9b5 4000 	ldrsh.w	r4, [r5]
  40ac76:	e7db      	b.n	40ac30 <fill_set_px+0x90>
}
  40ac78:	b009      	add	sp, #36	; 0x24
  40ac7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ac7e:	bf00      	nop
  40ac80:	00409055 	.word	0x00409055

0040ac84 <map_set_px>:
{
  40ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ac88:	b089      	sub	sp, #36	; 0x24
  40ac8a:	4604      	mov	r4, r0
  40ac8c:	9105      	str	r1, [sp, #20]
  40ac8e:	4615      	mov	r5, r2
  40ac90:	461f      	mov	r7, r3
  40ac92:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40ac96:	4b48      	ldr	r3, [pc, #288]	; (40adb8 <map_set_px+0x134>)
  40ac98:	4798      	blx	r3
  40ac9a:	4606      	mov	r6, r0
  40ac9c:	88a3      	ldrh	r3, [r4, #4]
  40ac9e:	f9b4 9000 	ldrsh.w	r9, [r4]
  40aca2:	fa1f f289 	uxth.w	r2, r9
  40aca6:	1a9b      	subs	r3, r3, r2
  40aca8:	b29b      	uxth	r3, r3
  40acaa:	3301      	adds	r3, #1
  40acac:	b21b      	sxth	r3, r3
  40acae:	9304      	str	r3, [sp, #16]
  40acb0:	88ab      	ldrh	r3, [r5, #4]
  40acb2:	f9b5 2000 	ldrsh.w	r2, [r5]
  40acb6:	b291      	uxth	r1, r2
  40acb8:	1a5b      	subs	r3, r3, r1
  40acba:	b29b      	uxth	r3, r3
  40acbc:	3301      	adds	r3, #1
  40acbe:	b21b      	sxth	r3, r3
  40acc0:	9307      	str	r3, [sp, #28]
  40acc2:	88b9      	ldrh	r1, [r7, #4]
  40acc4:	f9b7 3000 	ldrsh.w	r3, [r7]
  40acc8:	b298      	uxth	r0, r3
  40acca:	1a09      	subs	r1, r1, r0
  40accc:	b289      	uxth	r1, r1
  40acce:	3101      	adds	r1, #1
  40acd0:	b209      	sxth	r1, r1
  40acd2:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40acd4:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40acd8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40acdc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40ace0:	1a09      	subs	r1, r1, r0
  40ace2:	eba8 0101 	sub.w	r1, r8, r1
  40ace6:	9806      	ldr	r0, [sp, #24]
  40ace8:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40acec:	eba3 0909 	sub.w	r9, r3, r9
  40acf0:	eba2 0909 	sub.w	r9, r2, r9
  40acf4:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40acf8:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40acfc:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40ad00:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40ad02:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40ad04:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40ad08:	2b01      	cmp	r3, #1
  40ad0a:	d024      	beq.n	40ad56 <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40ad0c:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40ad0e:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad10:	e047      	b.n	40ada2 <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40ad12:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40ad16:	9702      	str	r7, [sp, #8]
  40ad18:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40ad1c:	f8ad 3004 	strh.w	r3, [sp, #4]
  40ad20:	fa0f f388 	sxth.w	r3, r8
  40ad24:	9300      	str	r3, [sp, #0]
  40ad26:	b223      	sxth	r3, r4
  40ad28:	9a04      	ldr	r2, [sp, #16]
  40ad2a:	4659      	mov	r1, fp
  40ad2c:	4630      	mov	r0, r6
  40ad2e:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad30:	3401      	adds	r4, #1
  40ad32:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ad36:	429c      	cmp	r4, r3
  40ad38:	ddeb      	ble.n	40ad12 <map_set_px+0x8e>
  40ad3a:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40ad3c:	9b06      	ldr	r3, [sp, #24]
  40ad3e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad42:	f108 0801 	add.w	r8, r8, #1
  40ad46:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ad4a:	4598      	cmp	r8, r3
  40ad4c:	dc30      	bgt.n	40adb0 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad4e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40ad52:	4657      	mov	r7, sl
  40ad54:	e7ed      	b.n	40ad32 <map_set_px+0xae>
  40ad56:	f8dd b014 	ldr.w	fp, [sp, #20]
  40ad5a:	e7f4      	b.n	40ad46 <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad5c:	3401      	adds	r4, #1
  40ad5e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ad62:	429c      	cmp	r4, r3
  40ad64:	dc16      	bgt.n	40ad94 <map_set_px+0x110>
                if(mask_tmp[x]) {
  40ad66:	5d3b      	ldrb	r3, [r7, r4]
  40ad68:	2b00      	cmp	r3, #0
  40ad6a:	d0f7      	beq.n	40ad5c <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40ad6c:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40ad70:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40ad74:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ad78:	9302      	str	r3, [sp, #8]
  40ad7a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40ad7e:	f8ad 3004 	strh.w	r3, [sp, #4]
  40ad82:	fa0f f388 	sxth.w	r3, r8
  40ad86:	9300      	str	r3, [sp, #0]
  40ad88:	b223      	sxth	r3, r4
  40ad8a:	9a04      	ldr	r2, [sp, #16]
  40ad8c:	9905      	ldr	r1, [sp, #20]
  40ad8e:	4630      	mov	r0, r6
  40ad90:	47d8      	blx	fp
  40ad92:	e7e3      	b.n	40ad5c <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40ad94:	9b07      	ldr	r3, [sp, #28]
  40ad96:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40ad98:	9b06      	ldr	r3, [sp, #24]
  40ad9a:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad9e:	f108 0801 	add.w	r8, r8, #1
  40ada2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ada6:	4598      	cmp	r8, r3
  40ada8:	dc02      	bgt.n	40adb0 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40adaa:	f9b5 4000 	ldrsh.w	r4, [r5]
  40adae:	e7d6      	b.n	40ad5e <map_set_px+0xda>
}
  40adb0:	b009      	add	sp, #36	; 0x24
  40adb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40adb6:	bf00      	nop
  40adb8:	00409055 	.word	0x00409055

0040adbc <map_normal>:
{
  40adbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40adc0:	b08f      	sub	sp, #60	; 0x3c
  40adc2:	4686      	mov	lr, r0
  40adc4:	4614      	mov	r4, r2
  40adc6:	9206      	str	r2, [sp, #24]
  40adc8:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40adcc:	8882      	ldrh	r2, [r0, #4]
  40adce:	f9b0 0000 	ldrsh.w	r0, [r0]
  40add2:	9003      	str	r0, [sp, #12]
  40add4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40add8:	1a12      	subs	r2, r2, r0
  40adda:	b292      	uxth	r2, r2
  40addc:	3201      	adds	r2, #1
  40adde:	b212      	sxth	r2, r2
  40ade0:	9208      	str	r2, [sp, #32]
  40ade2:	88a2      	ldrh	r2, [r4, #4]
  40ade4:	f9b4 c000 	ldrsh.w	ip, [r4]
  40ade8:	fa1f f08c 	uxth.w	r0, ip
  40adec:	1a12      	subs	r2, r2, r0
  40adee:	b292      	uxth	r2, r2
  40adf0:	3201      	adds	r2, #1
  40adf2:	b212      	sxth	r2, r2
  40adf4:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40adf6:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40adf8:	88e0      	ldrh	r0, [r4, #6]
  40adfa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40adfe:	b294      	uxth	r4, r2
  40ae00:	1b00      	subs	r0, r0, r4
  40ae02:	b280      	uxth	r0, r0
  40ae04:	3001      	adds	r0, #1
  40ae06:	b204      	sxth	r4, r0
  40ae08:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ae0a:	8898      	ldrh	r0, [r3, #4]
  40ae0c:	f9b3 5000 	ldrsh.w	r5, [r3]
  40ae10:	b2ac      	uxth	r4, r5
  40ae12:	1b00      	subs	r0, r0, r4
  40ae14:	b280      	uxth	r0, r0
  40ae16:	3001      	adds	r0, #1
  40ae18:	b204      	sxth	r4, r0
  40ae1a:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40ae1c:	9808      	ldr	r0, [sp, #32]
  40ae1e:	fb02 c400 	mla	r4, r2, r0, ip
  40ae22:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40ae26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40ae2a:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40ae2e:	1a5b      	subs	r3, r3, r1
  40ae30:	1ad3      	subs	r3, r2, r3
  40ae32:	9a07      	ldr	r2, [sp, #28]
  40ae34:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40ae38:	9803      	ldr	r0, [sp, #12]
  40ae3a:	1a2d      	subs	r5, r5, r0
  40ae3c:	ebac 0505 	sub.w	r5, ip, r5
  40ae40:	006d      	lsls	r5, r5, #1
  40ae42:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40ae46:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40ae48:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40ae4a:	4b8a      	ldr	r3, [pc, #552]	; (40b074 <map_normal+0x2b8>)
  40ae4c:	4798      	blx	r3
  40ae4e:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40ae50:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40ae54:	2b01      	cmp	r3, #1
  40ae56:	d008      	beq.n	40ae6a <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40ae58:	2ffd      	cmp	r7, #253	; 0xfd
  40ae5a:	f240 8383 	bls.w	40b564 <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40ae5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ae60:	3b04      	subs	r3, #4
  40ae62:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40ae64:	2300      	movs	r3, #0
  40ae66:	9306      	str	r3, [sp, #24]
  40ae68:	e308      	b.n	40b47c <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40ae6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40ae6c:	b32b      	cbz	r3, 40aeba <map_normal+0xfe>
  40ae6e:	9e06      	ldr	r6, [sp, #24]
  40ae70:	4630      	mov	r0, r6
  40ae72:	4b81      	ldr	r3, [pc, #516]	; (40b078 <map_normal+0x2bc>)
  40ae74:	4798      	blx	r3
  40ae76:	28f0      	cmp	r0, #240	; 0xf0
  40ae78:	d91f      	bls.n	40aeba <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ae7a:	4631      	mov	r1, r6
  40ae7c:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40ae80:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40ae84:	f8dd a020 	ldr.w	sl, [sp, #32]
  40ae88:	4689      	mov	r9, r1
  40ae8a:	46bb      	mov	fp, r7
  40ae8c:	e00e      	b.n	40aeac <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40ae8e:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40ae92:	f8cd b000 	str.w	fp, [sp]
  40ae96:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40ae98:	462a      	mov	r2, r5
  40ae9a:	4621      	mov	r1, r4
  40ae9c:	4640      	mov	r0, r8
  40ae9e:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40aea0:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40aea4:	9b07      	ldr	r3, [sp, #28]
  40aea6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40aeaa:	3601      	adds	r6, #1
  40aeac:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40aeb0:	429e      	cmp	r6, r3
  40aeb2:	ddec      	ble.n	40ae8e <map_normal+0xd2>
}
  40aeb4:	b00f      	add	sp, #60	; 0x3c
  40aeb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40aeba:	2ffd      	cmp	r7, #253	; 0xfd
  40aebc:	d812      	bhi.n	40aee4 <map_normal+0x128>
  40aebe:	f04f 0800 	mov.w	r8, #0
  40aec2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40aec6:	e069      	b.n	40af9c <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40aec8:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40aecc:	4629      	mov	r1, r5
  40aece:	4620      	mov	r0, r4
  40aed0:	4b6a      	ldr	r3, [pc, #424]	; (40b07c <map_normal+0x2c0>)
  40aed2:	4798      	blx	r3
                disp_buf_first += disp_w;
  40aed4:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40aed8:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40aedc:	3601      	adds	r6, #1
  40aede:	42be      	cmp	r6, r7
  40aee0:	dbf2      	blt.n	40aec8 <map_normal+0x10c>
  40aee2:	e7e7      	b.n	40aeb4 <map_normal+0xf8>
  40aee4:	2600      	movs	r6, #0
  40aee6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40aee8:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40aeec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40aef0:	f8dd a020 	ldr.w	sl, [sp, #32]
  40aef4:	e7f3      	b.n	40aede <map_normal+0x122>
  40aef6:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40aefa:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40aefe:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40af02:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40af06:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40af0a:	fb00 f606 	mul.w	r6, r0, r6
  40af0e:	fb07 6202 	mla	r2, r7, r2, r6
  40af12:	3280      	adds	r2, #128	; 0x80
  40af14:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40af18:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40af1c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40af20:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40af24:	f003 0607 	and.w	r6, r3, #7
  40af28:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40af2c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40af30:	f001 0e07 	and.w	lr, r1, #7
  40af34:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40af38:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40af3c:	fb06 f600 	mul.w	r6, r6, r0
  40af40:	fb02 6207 	mla	r2, r2, r7, r6
  40af44:	3280      	adds	r2, #128	; 0x80
  40af46:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40af4a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40af4e:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40af52:	f366 0a02 	bfi	sl, r6, #0, #3
  40af56:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40af5a:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40af5e:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40af62:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40af66:	fb01 f000 	mul.w	r0, r1, r0
  40af6a:	fb03 0307 	mla	r3, r3, r7, r0
  40af6e:	3380      	adds	r3, #128	; 0x80
  40af70:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40af74:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40af78:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40af7c:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40af80:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40af84:	f10c 0c01 	add.w	ip, ip, #1
  40af88:	45dc      	cmp	ip, fp
  40af8a:	dbb4      	blt.n	40aef6 <map_normal+0x13a>
                disp_buf_first += disp_w;
  40af8c:	9b08      	ldr	r3, [sp, #32]
  40af8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40af92:	9b07      	ldr	r3, [sp, #28]
  40af94:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40af98:	f108 0801 	add.w	r8, r8, #1
  40af9c:	45c8      	cmp	r8, r9
  40af9e:	da89      	bge.n	40aeb4 <map_normal+0xf8>
  40afa0:	f04f 0c00 	mov.w	ip, #0
  40afa4:	e7f0      	b.n	40af88 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40afa6:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40afaa:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40afae:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40afb0:	3301      	adds	r3, #1
  40afb2:	455b      	cmp	r3, fp
  40afb4:	f280 81e6 	bge.w	40b384 <map_normal+0x5c8>
  40afb8:	f012 0f03 	tst.w	r2, #3
  40afbc:	d04c      	beq.n	40b058 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40afbe:	7811      	ldrb	r1, [r2, #0]
  40afc0:	2900      	cmp	r1, #0
  40afc2:	d0f4      	beq.n	40afae <map_normal+0x1f2>
  40afc4:	29ff      	cmp	r1, #255	; 0xff
  40afc6:	d0ee      	beq.n	40afa6 <map_normal+0x1ea>
  40afc8:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40afcc:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40afd0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40afd4:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40afd8:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40afdc:	fb0e fc0c 	mul.w	ip, lr, ip
  40afe0:	fb01 c000 	mla	r0, r1, r0, ip
  40afe4:	3080      	adds	r0, #128	; 0x80
  40afe6:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40afea:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40afee:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40aff2:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40aff6:	f007 0c07 	and.w	ip, r7, #7
  40affa:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40affe:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b002:	f006 0a07 	and.w	sl, r6, #7
  40b006:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b00a:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b00e:	fb0c fc0e 	mul.w	ip, ip, lr
  40b012:	fb00 c001 	mla	r0, r0, r1, ip
  40b016:	3080      	adds	r0, #128	; 0x80
  40b018:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b01c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b020:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b024:	f36c 0802 	bfi	r8, ip, #0, #3
  40b028:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b02c:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b030:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b034:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b038:	fb06 fe0e 	mul.w	lr, r6, lr
  40b03c:	fb07 e101 	mla	r1, r7, r1, lr
  40b040:	3180      	adds	r1, #128	; 0x80
  40b042:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b046:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b04a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b04e:	f361 280c 	bfi	r8, r1, #8, #5
  40b052:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40b056:	e7aa      	b.n	40afae <map_normal+0x1f2>
  40b058:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b05c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b060:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b064:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b068:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b06c:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b070:	e01b      	b.n	40b0aa <map_normal+0x2ee>
  40b072:	bf00      	nop
  40b074:	00409055 	.word	0x00409055
  40b078:	00414c4d 	.word	0x00414c4d
  40b07c:	00415e45 	.word	0x00415e45
                            disp_buf_first[x] = map_buf_first[x];
  40b080:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b084:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40b088:	1c59      	adds	r1, r3, #1
  40b08a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b08e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40b092:	1c99      	adds	r1, r3, #2
  40b094:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b098:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40b09c:	1cd9      	adds	r1, r3, #3
  40b09e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b0a2:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40b0a6:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40b0a8:	3304      	adds	r3, #4
  40b0aa:	9903      	ldr	r1, [sp, #12]
  40b0ac:	428b      	cmp	r3, r1
  40b0ae:	f280 8176 	bge.w	40b39e <map_normal+0x5e2>
                    if(*mask32) {
  40b0b2:	6811      	ldr	r1, [r2, #0]
  40b0b4:	2900      	cmp	r1, #0
  40b0b6:	d0f6      	beq.n	40b0a6 <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40b0b8:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b0bc:	d0e0      	beq.n	40b080 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40b0be:	7811      	ldrb	r1, [r2, #0]
  40b0c0:	2900      	cmp	r1, #0
  40b0c2:	d049      	beq.n	40b158 <map_normal+0x39c>
  40b0c4:	29ff      	cmp	r1, #255	; 0xff
  40b0c6:	f000 8146 	beq.w	40b356 <map_normal+0x59a>
  40b0ca:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40b0ce:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b0d2:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b0d6:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b0da:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40b0de:	fb09 f808 	mul.w	r8, r9, r8
  40b0e2:	fb01 8000 	mla	r0, r1, r0, r8
  40b0e6:	3080      	adds	r0, #128	; 0x80
  40b0e8:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b0ec:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b0f0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b0f4:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b0f8:	f00c 0807 	and.w	r8, ip, #7
  40b0fc:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b100:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b104:	f006 0707 	and.w	r7, r6, #7
  40b108:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b10c:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b110:	fb08 f809 	mul.w	r8, r8, r9
  40b114:	fb00 8001 	mla	r0, r0, r1, r8
  40b118:	3080      	adds	r0, #128	; 0x80
  40b11a:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b11e:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b122:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b126:	f368 0e02 	bfi	lr, r8, #0, #3
  40b12a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b12e:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b132:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b136:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b13a:	fb06 f609 	mul.w	r6, r6, r9
  40b13e:	fb0c 6601 	mla	r6, ip, r1, r6
  40b142:	3680      	adds	r6, #128	; 0x80
  40b144:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b148:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b14c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b150:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b154:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40b158:	7851      	ldrb	r1, [r2, #1]
  40b15a:	2900      	cmp	r1, #0
  40b15c:	d056      	beq.n	40b20c <map_normal+0x450>
  40b15e:	29ff      	cmp	r1, #255	; 0xff
  40b160:	f000 80fe 	beq.w	40b360 <map_normal+0x5a4>
  40b164:	f103 0901 	add.w	r9, r3, #1
  40b168:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b16c:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b170:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b174:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b178:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b17c:	9705      	str	r7, [sp, #20]
  40b17e:	fb07 f808 	mul.w	r8, r7, r8
  40b182:	fb01 8000 	mla	r0, r1, r0, r8
  40b186:	3080      	adds	r0, #128	; 0x80
  40b188:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b18c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b190:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b194:	9f04      	ldr	r7, [sp, #16]
  40b196:	f360 07c7 	bfi	r7, r0, #3, #5
  40b19a:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b19c:	f00c 0807 	and.w	r8, ip, #7
  40b1a0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b1a4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b1a8:	f006 0807 	and.w	r8, r6, #7
  40b1ac:	4647      	mov	r7, r8
  40b1ae:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b1b2:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b1b6:	9f05      	ldr	r7, [sp, #20]
  40b1b8:	fb08 f807 	mul.w	r8, r8, r7
  40b1bc:	fb00 8001 	mla	r0, r0, r1, r8
  40b1c0:	3080      	adds	r0, #128	; 0x80
  40b1c2:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b1c6:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b1ca:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b1ce:	9f04      	ldr	r7, [sp, #16]
  40b1d0:	f368 0702 	bfi	r7, r8, #0, #3
  40b1d4:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b1d8:	f360 374f 	bfi	r7, r0, #13, #3
  40b1dc:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b1de:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b1e2:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b1e6:	9f05      	ldr	r7, [sp, #20]
  40b1e8:	fb06 f607 	mul.w	r6, r6, r7
  40b1ec:	fb0c 6601 	mla	r6, ip, r1, r6
  40b1f0:	3680      	adds	r6, #128	; 0x80
  40b1f2:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b1f6:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b1fa:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b1fe:	4601      	mov	r1, r0
  40b200:	f366 210c 	bfi	r1, r6, #8, #5
  40b204:	f8ad 1010 	strh.w	r1, [sp, #16]
  40b208:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40b20c:	7891      	ldrb	r1, [r2, #2]
  40b20e:	2900      	cmp	r1, #0
  40b210:	d04e      	beq.n	40b2b0 <map_normal+0x4f4>
  40b212:	29ff      	cmp	r1, #255	; 0xff
  40b214:	f000 80aa 	beq.w	40b36c <map_normal+0x5b0>
  40b218:	f103 0902 	add.w	r9, r3, #2
  40b21c:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b220:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b224:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b228:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b22c:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b230:	9705      	str	r7, [sp, #20]
  40b232:	fb07 f808 	mul.w	r8, r7, r8
  40b236:	fb01 8000 	mla	r0, r1, r0, r8
  40b23a:	3080      	adds	r0, #128	; 0x80
  40b23c:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b240:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b244:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b248:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b24c:	f00c 0807 	and.w	r8, ip, #7
  40b250:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b254:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b258:	f006 0807 	and.w	r8, r6, #7
  40b25c:	4647      	mov	r7, r8
  40b25e:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b262:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b266:	9f05      	ldr	r7, [sp, #20]
  40b268:	fb08 f807 	mul.w	r8, r8, r7
  40b26c:	fb00 8001 	mla	r0, r0, r1, r8
  40b270:	3080      	adds	r0, #128	; 0x80
  40b272:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b276:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b27a:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b27e:	f368 0a02 	bfi	sl, r8, #0, #3
  40b282:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b286:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b28a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b28e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b292:	fb06 f607 	mul.w	r6, r6, r7
  40b296:	fb0c 6601 	mla	r6, ip, r1, r6
  40b29a:	3680      	adds	r6, #128	; 0x80
  40b29c:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b2a0:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b2a4:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b2a8:	f366 2a0c 	bfi	sl, r6, #8, #5
  40b2ac:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40b2b0:	78d1      	ldrb	r1, [r2, #3]
  40b2b2:	2900      	cmp	r1, #0
  40b2b4:	f43f aef7 	beq.w	40b0a6 <map_normal+0x2ea>
  40b2b8:	29ff      	cmp	r1, #255	; 0xff
  40b2ba:	d05d      	beq.n	40b378 <map_normal+0x5bc>
  40b2bc:	f103 0903 	add.w	r9, r3, #3
  40b2c0:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b2c4:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b2c8:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b2cc:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b2d0:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b2d4:	9705      	str	r7, [sp, #20]
  40b2d6:	fb07 f808 	mul.w	r8, r7, r8
  40b2da:	fb01 8000 	mla	r0, r1, r0, r8
  40b2de:	3080      	adds	r0, #128	; 0x80
  40b2e0:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b2e4:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b2e8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b2ec:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b2f0:	f00c 0807 	and.w	r8, ip, #7
  40b2f4:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b2f8:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b2fc:	f006 0807 	and.w	r8, r6, #7
  40b300:	4647      	mov	r7, r8
  40b302:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b306:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b30a:	9f05      	ldr	r7, [sp, #20]
  40b30c:	fb08 f807 	mul.w	r8, r8, r7
  40b310:	fb00 8001 	mla	r0, r0, r1, r8
  40b314:	3080      	adds	r0, #128	; 0x80
  40b316:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b31a:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b31e:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b322:	f368 0b02 	bfi	fp, r8, #0, #3
  40b326:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b32a:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b32e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b332:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b336:	fb06 f607 	mul.w	r6, r6, r7
  40b33a:	fb0c 6601 	mla	r6, ip, r1, r6
  40b33e:	3680      	adds	r6, #128	; 0x80
  40b340:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b344:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b348:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b34c:	f366 2b0c 	bfi	fp, r6, #8, #5
  40b350:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40b354:	e6a7      	b.n	40b0a6 <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40b356:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b35a:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b35e:	e6fb      	b.n	40b158 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40b360:	1c59      	adds	r1, r3, #1
  40b362:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b366:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b36a:	e74f      	b.n	40b20c <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40b36c:	1c99      	adds	r1, r3, #2
  40b36e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b372:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b376:	e79b      	b.n	40b2b0 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40b378:	1cd9      	adds	r1, r3, #3
  40b37a:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b37e:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b382:	e690      	b.n	40b0a6 <map_normal+0x2ea>
  40b384:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b388:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b38c:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b390:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b394:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b398:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b39c:	e685      	b.n	40b0aa <map_normal+0x2ee>
  40b39e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40b3a2:	f8ad b014 	strh.w	fp, [sp, #20]
  40b3a6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b3aa:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40b3ae:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40b3b2:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40b3b6:	e005      	b.n	40b3c4 <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40b3b8:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b3bc:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b3c0:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40b3c2:	3301      	adds	r3, #1
  40b3c4:	455b      	cmp	r3, fp
  40b3c6:	da4c      	bge.n	40b462 <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40b3c8:	7811      	ldrb	r1, [r2, #0]
  40b3ca:	2900      	cmp	r1, #0
  40b3cc:	d0f8      	beq.n	40b3c0 <map_normal+0x604>
  40b3ce:	29ff      	cmp	r1, #255	; 0xff
  40b3d0:	d0f2      	beq.n	40b3b8 <map_normal+0x5fc>
  40b3d2:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b3d6:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b3da:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b3de:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b3e2:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b3e6:	fb0e fc0c 	mul.w	ip, lr, ip
  40b3ea:	fb01 c000 	mla	r0, r1, r0, ip
  40b3ee:	3080      	adds	r0, #128	; 0x80
  40b3f0:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b3f4:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b3f8:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b3fc:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b400:	f007 0c07 	and.w	ip, r7, #7
  40b404:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b408:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b40c:	f006 0a07 	and.w	sl, r6, #7
  40b410:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b414:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b418:	fb0c fc0e 	mul.w	ip, ip, lr
  40b41c:	fb00 c001 	mla	r0, r0, r1, ip
  40b420:	3080      	adds	r0, #128	; 0x80
  40b422:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b426:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b42a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b42e:	f36c 0902 	bfi	r9, ip, #0, #3
  40b432:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b436:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b43a:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b43e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b442:	fb06 fe0e 	mul.w	lr, r6, lr
  40b446:	fb07 e101 	mla	r1, r7, r1, lr
  40b44a:	3180      	adds	r1, #128	; 0x80
  40b44c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b450:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b454:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b458:	f361 290c 	bfi	r9, r1, #8, #5
  40b45c:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40b460:	e7ae      	b.n	40b3c0 <map_normal+0x604>
                disp_buf_first += disp_w;
  40b462:	9b08      	ldr	r3, [sp, #32]
  40b464:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b468:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40b46a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b46c:	4413      	add	r3, r2
  40b46e:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40b470:	9b07      	ldr	r3, [sp, #28]
  40b472:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b476:	9b06      	ldr	r3, [sp, #24]
  40b478:	3301      	adds	r3, #1
  40b47a:	9306      	str	r3, [sp, #24]
  40b47c:	9b06      	ldr	r3, [sp, #24]
  40b47e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b480:	4293      	cmp	r3, r2
  40b482:	f6bf ad17 	bge.w	40aeb4 <map_normal+0xf8>
  40b486:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40b488:	2300      	movs	r3, #0
  40b48a:	e592      	b.n	40afb2 <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b48c:	9b03      	ldr	r3, [sp, #12]
  40b48e:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40b492:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b496:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40b49a:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40b49e:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40b4a2:	fb0c f707 	mul.w	r7, ip, r7
  40b4a6:	fb03 7202 	mla	r2, r3, r2, r7
  40b4aa:	3280      	adds	r2, #128	; 0x80
  40b4ac:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b4b0:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b4b4:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b4b8:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b4bc:	f000 0707 	and.w	r7, r0, #7
  40b4c0:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40b4c4:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40b4c8:	f001 0907 	and.w	r9, r1, #7
  40b4cc:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40b4d0:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40b4d4:	fb07 f70c 	mul.w	r7, r7, ip
  40b4d8:	fb02 7203 	mla	r2, r2, r3, r7
  40b4dc:	3280      	adds	r2, #128	; 0x80
  40b4de:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b4e2:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b4e6:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40b4ea:	f367 0602 	bfi	r6, r7, #0, #3
  40b4ee:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b4f2:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b4f6:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40b4fa:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b4fe:	fb01 fc0c 	mul.w	ip, r1, ip
  40b502:	fb00 c303 	mla	r3, r0, r3, ip
  40b506:	3380      	adds	r3, #128	; 0x80
  40b508:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40b50c:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40b510:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b514:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40b518:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b51c:	f108 0801 	add.w	r8, r8, #1
  40b520:	45d8      	cmp	r8, fp
  40b522:	da0c      	bge.n	40b53e <map_normal+0x782>
                    if(mask[x]) {
  40b524:	46c6      	mov	lr, r8
  40b526:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40b52a:	2b00      	cmp	r3, #0
  40b52c:	d0f6      	beq.n	40b51c <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b52e:	2bfc      	cmp	r3, #252	; 0xfc
  40b530:	d8ac      	bhi.n	40b48c <map_normal+0x6d0>
  40b532:	9a03      	ldr	r2, [sp, #12]
  40b534:	fb03 f302 	mul.w	r3, r3, r2
  40b538:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b53c:	e7a7      	b.n	40b48e <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40b53e:	9b08      	ldr	r3, [sp, #32]
  40b540:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b544:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b546:	449a      	add	sl, r3
                map_buf_first += map_w;
  40b548:	9b07      	ldr	r3, [sp, #28]
  40b54a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b54e:	9b04      	ldr	r3, [sp, #16]
  40b550:	3301      	adds	r3, #1
  40b552:	9304      	str	r3, [sp, #16]
  40b554:	9b04      	ldr	r3, [sp, #16]
  40b556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b558:	4293      	cmp	r3, r2
  40b55a:	f6bf acab 	bge.w	40aeb4 <map_normal+0xf8>
  40b55e:	f04f 0800 	mov.w	r8, #0
  40b562:	e7dd      	b.n	40b520 <map_normal+0x764>
  40b564:	2300      	movs	r3, #0
  40b566:	9304      	str	r3, [sp, #16]
  40b568:	9703      	str	r7, [sp, #12]
  40b56a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40b56e:	e7f1      	b.n	40b554 <map_normal+0x798>

0040b570 <fill_normal>:
{
  40b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b574:	b091      	sub	sp, #68	; 0x44
  40b576:	4605      	mov	r5, r0
  40b578:	9103      	str	r1, [sp, #12]
  40b57a:	4616      	mov	r6, r2
  40b57c:	920a      	str	r2, [sp, #40]	; 0x28
  40b57e:	461c      	mov	r4, r3
  40b580:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40b584:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b586:	4bc5      	ldr	r3, [pc, #788]	; (40b89c <fill_normal+0x32c>)
  40b588:	4798      	blx	r3
  40b58a:	900b      	str	r0, [sp, #44]	; 0x2c
  40b58c:	88ab      	ldrh	r3, [r5, #4]
  40b58e:	882a      	ldrh	r2, [r5, #0]
  40b590:	1a9b      	subs	r3, r3, r2
  40b592:	b29b      	uxth	r3, r3
  40b594:	3301      	adds	r3, #1
  40b596:	b218      	sxth	r0, r3
  40b598:	4605      	mov	r5, r0
  40b59a:	9008      	str	r0, [sp, #32]
  40b59c:	88b3      	ldrh	r3, [r6, #4]
  40b59e:	4630      	mov	r0, r6
  40b5a0:	f9b6 1000 	ldrsh.w	r1, [r6]
  40b5a4:	b28a      	uxth	r2, r1
  40b5a6:	1a9b      	subs	r3, r3, r2
  40b5a8:	b29b      	uxth	r3, r3
  40b5aa:	3301      	adds	r3, #1
  40b5ac:	b21b      	sxth	r3, r3
  40b5ae:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b5b0:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b5b2:	88c3      	ldrh	r3, [r0, #6]
  40b5b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40b5b8:	b290      	uxth	r0, r2
  40b5ba:	1a1b      	subs	r3, r3, r0
  40b5bc:	b29b      	uxth	r3, r3
  40b5be:	3301      	adds	r3, #1
  40b5c0:	b21b      	sxth	r3, r3
  40b5c2:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b5c4:	4696      	mov	lr, r2
  40b5c6:	fb02 1205 	mla	r2, r2, r5, r1
  40b5ca:	9b03      	ldr	r3, [sp, #12]
  40b5cc:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b5d0:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40b5d4:	2b01      	cmp	r3, #1
  40b5d6:	d00f      	beq.n	40b5f8 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40b5d8:	9b03      	ldr	r3, [sp, #12]
  40b5da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40b5de:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40b5e0:	9907      	ldr	r1, [sp, #28]
  40b5e2:	3904      	subs	r1, #4
  40b5e4:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40b5e6:	9906      	ldr	r1, [sp, #24]
  40b5e8:	29fd      	cmp	r1, #253	; 0xfd
  40b5ea:	f200 8335 	bhi.w	40bc58 <fill_normal+0x6e8>
  40b5ee:	f04f 0800 	mov.w	r8, #0
  40b5f2:	4641      	mov	r1, r8
  40b5f4:	46a3      	mov	fp, r4
  40b5f6:	e3a7      	b.n	40bd48 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40b5f8:	9b06      	ldr	r3, [sp, #24]
  40b5fa:	2bfd      	cmp	r3, #253	; 0xfd
  40b5fc:	d922      	bls.n	40b644 <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b602:	b123      	cbz	r3, 40b60e <fill_normal+0x9e>
  40b604:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b606:	4ba6      	ldr	r3, [pc, #664]	; (40b8a0 <fill_normal+0x330>)
  40b608:	4798      	blx	r3
  40b60a:	28f0      	cmp	r0, #240	; 0xf0
  40b60c:	d804      	bhi.n	40b618 <fill_normal+0xa8>
{
  40b60e:	2600      	movs	r6, #0
  40b610:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40b612:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40b616:	e010      	b.n	40b63a <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40b618:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40b61a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40b61c:	f8ad 4000 	strh.w	r4, [sp]
  40b620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b622:	9a08      	ldr	r2, [sp, #32]
  40b624:	9903      	ldr	r1, [sp, #12]
  40b626:	47a8      	blx	r5
                return;
  40b628:	e009      	b.n	40b63e <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40b62a:	9a07      	ldr	r2, [sp, #28]
  40b62c:	4621      	mov	r1, r4
  40b62e:	4628      	mov	r0, r5
  40b630:	4b9c      	ldr	r3, [pc, #624]	; (40b8a4 <fill_normal+0x334>)
  40b632:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b634:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b638:	3601      	adds	r6, #1
  40b63a:	42be      	cmp	r6, r7
  40b63c:	dbf5      	blt.n	40b62a <fill_normal+0xba>
}
  40b63e:	b011      	add	sp, #68	; 0x44
  40b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40b648:	b123      	cbz	r3, 40b654 <fill_normal+0xe4>
  40b64a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b64c:	4b94      	ldr	r3, [pc, #592]	; (40b8a0 <fill_normal+0x330>)
  40b64e:	4798      	blx	r3
  40b650:	28f0      	cmp	r0, #240	; 0xf0
  40b652:	d864      	bhi.n	40b71e <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40b654:	f04f 0e00 	mov.w	lr, #0
  40b658:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b65a:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40b65e:	9f06      	ldr	r7, [sp, #24]
  40b660:	fb07 f303 	mul.w	r3, r7, r3
  40b664:	3380      	adds	r3, #128	; 0x80
  40b666:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b66a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b66e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b672:	f04f 0200 	mov.w	r2, #0
  40b676:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b67a:	f004 0107 	and.w	r1, r4, #7
  40b67e:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40b682:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40b686:	fb03 f307 	mul.w	r3, r3, r7
  40b68a:	3380      	adds	r3, #128	; 0x80
  40b68c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b690:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b694:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40b698:	f361 0202 	bfi	r2, r1, #0, #3
  40b69c:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b6a0:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b6a4:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40b6a8:	fb03 f307 	mul.w	r3, r3, r7
  40b6ac:	3380      	adds	r3, #128	; 0x80
  40b6ae:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b6b2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b6b6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b6ba:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40b6be:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40b6c2:	46bc      	mov	ip, r7
  40b6c4:	b2bb      	uxth	r3, r7
  40b6c6:	fb01 f103 	mul.w	r1, r1, r3
  40b6ca:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40b6ce:	f004 0707 	and.w	r7, r4, #7
  40b6d2:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40b6d6:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40b6da:	fb13 f101 	smulbb	r1, r3, r1
  40b6de:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40b6e2:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40b6e6:	fb03 f304 	mul.w	r3, r3, r4
  40b6ea:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40b6ee:	4661      	mov	r1, ip
  40b6f0:	43cc      	mvns	r4, r1
  40b6f2:	b2e4      	uxtb	r4, r4
  40b6f4:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40b6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40b6fc:	e069      	b.n	40b7d2 <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40b6fe:	4a6a      	ldr	r2, [pc, #424]	; (40b8a8 <fill_normal+0x338>)
  40b700:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40b704:	3301      	adds	r3, #1
  40b706:	42b3      	cmp	r3, r6
  40b708:	dbf9      	blt.n	40b6fe <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b70c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40b710:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b712:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40b716:	4690      	mov	r8, r2
  40b718:	f8dd a018 	ldr.w	sl, [sp, #24]
  40b71c:	e00c      	b.n	40b738 <fill_normal+0x1c8>
  40b71e:	2300      	movs	r3, #0
  40b720:	e7f1      	b.n	40b706 <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40b722:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40b724:	f8cd a000 	str.w	sl, [sp]
  40b728:	9b07      	ldr	r3, [sp, #28]
  40b72a:	4a5f      	ldr	r2, [pc, #380]	; (40b8a8 <fill_normal+0x338>)
  40b72c:	4629      	mov	r1, r5
  40b72e:	4630      	mov	r0, r6
  40b730:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40b732:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b736:	3401      	adds	r4, #1
  40b738:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40b73c:	429c      	cmp	r4, r3
  40b73e:	ddf0      	ble.n	40b722 <fill_normal+0x1b2>
  40b740:	e77d      	b.n	40b63e <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40b742:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40b744:	3101      	adds	r1, #1
  40b746:	42b1      	cmp	r1, r6
  40b748:	da3f      	bge.n	40b7ca <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40b74a:	b283      	uxth	r3, r0
  40b74c:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40b750:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40b754:	454b      	cmp	r3, r9
  40b756:	d0f4      	beq.n	40b742 <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40b758:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b75c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40b760:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40b764:	fb04 2303 	mla	r3, r4, r3, r2
  40b768:	3380      	adds	r3, #128	; 0x80
  40b76a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b76e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b772:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b776:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b77a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40b77e:	f000 0907 	and.w	r9, r0, #7
  40b782:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40b786:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40b78a:	fb03 2304 	mla	r3, r3, r4, r2
  40b78e:	3380      	adds	r3, #128	; 0x80
  40b790:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b794:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b798:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40b79c:	f362 0a02 	bfi	sl, r2, #0, #3
  40b7a0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b7a4:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b7a8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40b7ac:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40b7b0:	fb03 2304 	mla	r3, r3, r4, r2
  40b7b4:	3380      	adds	r3, #128	; 0x80
  40b7b6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b7ba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b7be:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b7c2:	f363 2a0c 	bfi	sl, r3, #8, #5
  40b7c6:	4652      	mov	r2, sl
  40b7c8:	e7bb      	b.n	40b742 <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40b7ca:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b7ce:	f10e 0e01 	add.w	lr, lr, #1
  40b7d2:	45e6      	cmp	lr, ip
  40b7d4:	f6bf af33 	bge.w	40b63e <fill_normal+0xce>
  40b7d8:	2100      	movs	r1, #0
  40b7da:	e7b4      	b.n	40b746 <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40b7dc:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40b7e0:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b7e2:	3301      	adds	r3, #1
  40b7e4:	42b3      	cmp	r3, r6
  40b7e6:	f280 81c0 	bge.w	40bb6a <fill_normal+0x5fa>
  40b7ea:	f012 0f03 	tst.w	r2, #3
  40b7ee:	d04a      	beq.n	40b886 <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40b7f0:	7811      	ldrb	r1, [r2, #0]
  40b7f2:	2900      	cmp	r1, #0
  40b7f4:	d0f4      	beq.n	40b7e0 <fill_normal+0x270>
  40b7f6:	29ff      	cmp	r1, #255	; 0xff
  40b7f8:	d0f0      	beq.n	40b7dc <fill_normal+0x26c>
  40b7fa:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b7fe:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b802:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40b806:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40b80a:	fb0c f909 	mul.w	r9, ip, r9
  40b80e:	fb01 9000 	mla	r0, r1, r0, r9
  40b812:	3080      	adds	r0, #128	; 0x80
  40b814:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b818:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b81c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b820:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b824:	f004 0007 	and.w	r0, r4, #7
  40b828:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40b82c:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40b830:	f00e 0a07 	and.w	sl, lr, #7
  40b834:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40b838:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40b83c:	fb09 f90c 	mul.w	r9, r9, ip
  40b840:	fb00 9001 	mla	r0, r0, r1, r9
  40b844:	3080      	adds	r0, #128	; 0x80
  40b846:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40b84a:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40b84e:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40b852:	f369 0702 	bfi	r7, r9, #0, #3
  40b856:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b85a:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b85e:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b862:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40b866:	fb0e fc0c 	mul.w	ip, lr, ip
  40b86a:	fb00 c101 	mla	r1, r0, r1, ip
  40b86e:	3180      	adds	r1, #128	; 0x80
  40b870:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b874:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b878:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b87c:	f361 270c 	bfi	r7, r1, #8, #5
  40b880:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40b884:	e7ac      	b.n	40b7e0 <fill_normal+0x270>
  40b886:	960a      	str	r6, [sp, #40]	; 0x28
  40b888:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40b88c:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40b890:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40b894:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40b898:	e015      	b.n	40b8c6 <fill_normal+0x356>
  40b89a:	bf00      	nop
  40b89c:	00409055 	.word	0x00409055
  40b8a0:	00414c4d 	.word	0x00414c4d
  40b8a4:	004153eb 	.word	0x004153eb
  40b8a8:	2040c398 	.word	0x2040c398
                            disp_buf_first[x] = color;
  40b8ac:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40b8b0:	1c59      	adds	r1, r3, #1
  40b8b2:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40b8b6:	1c99      	adds	r1, r3, #2
  40b8b8:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40b8bc:	1cd9      	adds	r1, r3, #3
  40b8be:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40b8c2:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40b8c4:	3304      	adds	r3, #4
  40b8c6:	9903      	ldr	r1, [sp, #12]
  40b8c8:	428b      	cmp	r3, r1
  40b8ca:	f300 8158 	bgt.w	40bb7e <fill_normal+0x60e>
                    if(*mask32) {
  40b8ce:	6811      	ldr	r1, [r2, #0]
  40b8d0:	2900      	cmp	r1, #0
  40b8d2:	d0f6      	beq.n	40b8c2 <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40b8d4:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b8d8:	d0e8      	beq.n	40b8ac <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40b8da:	7811      	ldrb	r1, [r2, #0]
  40b8dc:	2900      	cmp	r1, #0
  40b8de:	d047      	beq.n	40b970 <fill_normal+0x400>
  40b8e0:	29ff      	cmp	r1, #255	; 0xff
  40b8e2:	f000 8133 	beq.w	40bb4c <fill_normal+0x5dc>
  40b8e6:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b8ea:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b8ee:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b8f2:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b8f6:	fb08 fc0c 	mul.w	ip, r8, ip
  40b8fa:	fb01 c000 	mla	r0, r1, r0, ip
  40b8fe:	3080      	adds	r0, #128	; 0x80
  40b900:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b904:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b908:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b90c:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b910:	f004 0007 	and.w	r0, r4, #7
  40b914:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b918:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b91c:	f006 0907 	and.w	r9, r6, #7
  40b920:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b924:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40b928:	fb0c fc08 	mul.w	ip, ip, r8
  40b92c:	fb00 c001 	mla	r0, r0, r1, ip
  40b930:	3080      	adds	r0, #128	; 0x80
  40b932:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b936:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b93a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b93e:	f36c 0e02 	bfi	lr, ip, #0, #3
  40b942:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b946:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b94a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b94e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b952:	fb06 f608 	mul.w	r6, r6, r8
  40b956:	fb00 6601 	mla	r6, r0, r1, r6
  40b95a:	3680      	adds	r6, #128	; 0x80
  40b95c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40b960:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40b964:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b968:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b96c:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40b970:	7851      	ldrb	r1, [r2, #1]
  40b972:	2900      	cmp	r1, #0
  40b974:	d04f      	beq.n	40ba16 <fill_normal+0x4a6>
  40b976:	29ff      	cmp	r1, #255	; 0xff
  40b978:	f000 80eb 	beq.w	40bb52 <fill_normal+0x5e2>
  40b97c:	f103 0901 	add.w	r9, r3, #1
  40b980:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b984:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40b988:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b98c:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40b990:	fb08 fc0c 	mul.w	ip, r8, ip
  40b994:	fb01 c000 	mla	r0, r1, r0, ip
  40b998:	3080      	adds	r0, #128	; 0x80
  40b99a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b99e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b9a2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b9a6:	9f04      	ldr	r7, [sp, #16]
  40b9a8:	f360 07c7 	bfi	r7, r0, #3, #5
  40b9ac:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b9ae:	f004 0007 	and.w	r0, r4, #7
  40b9b2:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40b9b6:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40b9ba:	f006 0707 	and.w	r7, r6, #7
  40b9be:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b9c2:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40b9c6:	fb0c fc08 	mul.w	ip, ip, r8
  40b9ca:	fb00 c001 	mla	r0, r0, r1, ip
  40b9ce:	3080      	adds	r0, #128	; 0x80
  40b9d0:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b9d4:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b9d8:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b9dc:	9f04      	ldr	r7, [sp, #16]
  40b9de:	f36c 0702 	bfi	r7, ip, #0, #3
  40b9e2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b9e6:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b9ea:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40b9ee:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b9f2:	fb06 f608 	mul.w	r6, r6, r8
  40b9f6:	fb00 6601 	mla	r6, r0, r1, r6
  40b9fa:	3680      	adds	r6, #128	; 0x80
  40b9fc:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40ba00:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40ba04:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ba08:	4639      	mov	r1, r7
  40ba0a:	f360 210c 	bfi	r1, r0, #8, #5
  40ba0e:	f8ad 1010 	strh.w	r1, [sp, #16]
  40ba12:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40ba16:	7891      	ldrb	r1, [r2, #2]
  40ba18:	2900      	cmp	r1, #0
  40ba1a:	d049      	beq.n	40bab0 <fill_normal+0x540>
  40ba1c:	29ff      	cmp	r1, #255	; 0xff
  40ba1e:	f000 809c 	beq.w	40bb5a <fill_normal+0x5ea>
  40ba22:	f103 0902 	add.w	r9, r3, #2
  40ba26:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ba2a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40ba2e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40ba32:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40ba36:	fb08 fc0c 	mul.w	ip, r8, ip
  40ba3a:	fb01 c000 	mla	r0, r1, r0, ip
  40ba3e:	3080      	adds	r0, #128	; 0x80
  40ba40:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ba44:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ba48:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ba4c:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba50:	f004 0007 	and.w	r0, r4, #7
  40ba54:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40ba58:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40ba5c:	f006 0707 	and.w	r7, r6, #7
  40ba60:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40ba64:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40ba68:	fb0c fc08 	mul.w	ip, ip, r8
  40ba6c:	fb00 c001 	mla	r0, r0, r1, ip
  40ba70:	3080      	adds	r0, #128	; 0x80
  40ba72:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40ba76:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40ba7a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40ba7e:	f36c 0a02 	bfi	sl, ip, #0, #3
  40ba82:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ba86:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ba8a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40ba8e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40ba92:	fb06 f608 	mul.w	r6, r6, r8
  40ba96:	fb00 6601 	mla	r6, r0, r1, r6
  40ba9a:	3680      	adds	r6, #128	; 0x80
  40ba9c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40baa0:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40baa4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40baa8:	f360 2a0c 	bfi	sl, r0, #8, #5
  40baac:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40bab0:	78d1      	ldrb	r1, [r2, #3]
  40bab2:	2900      	cmp	r1, #0
  40bab4:	f43f af05 	beq.w	40b8c2 <fill_normal+0x352>
  40bab8:	29ff      	cmp	r1, #255	; 0xff
  40baba:	d052      	beq.n	40bb62 <fill_normal+0x5f2>
  40babc:	f103 0903 	add.w	r9, r3, #3
  40bac0:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bac4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bac8:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bacc:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bad0:	fb08 fc0c 	mul.w	ip, r8, ip
  40bad4:	fb01 c000 	mla	r0, r1, r0, ip
  40bad8:	3080      	adds	r0, #128	; 0x80
  40bada:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bade:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bae2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bae6:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40baea:	f004 0007 	and.w	r0, r4, #7
  40baee:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40baf2:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40baf6:	f006 0707 	and.w	r7, r6, #7
  40bafa:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bafe:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bb02:	fb0c fc08 	mul.w	ip, ip, r8
  40bb06:	fb00 c001 	mla	r0, r0, r1, ip
  40bb0a:	3080      	adds	r0, #128	; 0x80
  40bb0c:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bb10:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bb14:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bb18:	f36c 0b02 	bfi	fp, ip, #0, #3
  40bb1c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bb20:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb24:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bb28:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bb2c:	fb06 f608 	mul.w	r6, r6, r8
  40bb30:	fb00 6601 	mla	r6, r0, r1, r6
  40bb34:	3680      	adds	r6, #128	; 0x80
  40bb36:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bb3a:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40bb3e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bb42:	f360 2b0c 	bfi	fp, r0, #8, #5
  40bb46:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40bb4a:	e6ba      	b.n	40b8c2 <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40bb4c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bb50:	e70e      	b.n	40b970 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40bb52:	1c59      	adds	r1, r3, #1
  40bb54:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bb58:	e75d      	b.n	40ba16 <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40bb5a:	1c99      	adds	r1, r3, #2
  40bb5c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bb60:	e7a6      	b.n	40bab0 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40bb62:	1cd9      	adds	r1, r3, #3
  40bb64:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bb68:	e6ab      	b.n	40b8c2 <fill_normal+0x352>
  40bb6a:	960a      	str	r6, [sp, #40]	; 0x28
  40bb6c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40bb70:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40bb74:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40bb78:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40bb7c:	e6a3      	b.n	40b8c6 <fill_normal+0x356>
  40bb7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40bb80:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40bb84:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40bb88:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40bb8c:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40bb90:	e003      	b.n	40bb9a <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40bb92:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bb96:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40bb98:	3301      	adds	r3, #1
  40bb9a:	42b3      	cmp	r3, r6
  40bb9c:	da4a      	bge.n	40bc34 <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40bb9e:	7811      	ldrb	r1, [r2, #0]
  40bba0:	2900      	cmp	r1, #0
  40bba2:	d0f8      	beq.n	40bb96 <fill_normal+0x626>
  40bba4:	29ff      	cmp	r1, #255	; 0xff
  40bba6:	d0f4      	beq.n	40bb92 <fill_normal+0x622>
  40bba8:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bbac:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bbb0:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40bbb4:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40bbb8:	fb0c f909 	mul.w	r9, ip, r9
  40bbbc:	fb01 9000 	mla	r0, r1, r0, r9
  40bbc0:	3080      	adds	r0, #128	; 0x80
  40bbc2:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bbc6:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bbca:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bbce:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bbd2:	f004 0007 	and.w	r0, r4, #7
  40bbd6:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40bbda:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40bbde:	f00e 0a07 	and.w	sl, lr, #7
  40bbe2:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40bbe6:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40bbea:	fb09 f90c 	mul.w	r9, r9, ip
  40bbee:	fb00 9001 	mla	r0, r0, r1, r9
  40bbf2:	3080      	adds	r0, #128	; 0x80
  40bbf4:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bbf8:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bbfc:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40bc00:	f369 0802 	bfi	r8, r9, #0, #3
  40bc04:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bc08:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bc0c:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bc10:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40bc14:	fb0e fc0c 	mul.w	ip, lr, ip
  40bc18:	fb00 c101 	mla	r1, r0, r1, ip
  40bc1c:	3180      	adds	r1, #128	; 0x80
  40bc1e:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40bc22:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40bc26:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40bc2a:	f361 280c 	bfi	r8, r1, #8, #5
  40bc2e:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40bc32:	e7b0      	b.n	40bb96 <fill_normal+0x626>
                disp_buf_first += disp_w;
  40bc34:	9b08      	ldr	r3, [sp, #32]
  40bc36:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40bc3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40bc3c:	9a07      	ldr	r2, [sp, #28]
  40bc3e:	4413      	add	r3, r2
  40bc40:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40bc42:	9b06      	ldr	r3, [sp, #24]
  40bc44:	3301      	adds	r3, #1
  40bc46:	9306      	str	r3, [sp, #24]
  40bc48:	9b06      	ldr	r3, [sp, #24]
  40bc4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40bc4c:	4293      	cmp	r3, r2
  40bc4e:	f6bf acf6 	bge.w	40b63e <fill_normal+0xce>
  40bc52:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40bc54:	2300      	movs	r3, #0
  40bc56:	e5c5      	b.n	40b7e4 <fill_normal+0x274>
  40bc58:	2300      	movs	r3, #0
  40bc5a:	9306      	str	r3, [sp, #24]
  40bc5c:	e7f4      	b.n	40bc48 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40bc5e:	9c06      	ldr	r4, [sp, #24]
  40bc60:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40bc64:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40bc68:	4281      	cmp	r1, r0
  40bc6a:	d05c      	beq.n	40bd26 <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40bc6c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40bc70:	d05f      	beq.n	40bd32 <fill_normal+0x7c2>
  40bc72:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bc76:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40bc7a:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40bc7e:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40bc82:	fb04 f101 	mul.w	r1, r4, r1
  40bc86:	fb08 1303 	mla	r3, r8, r3, r1
  40bc8a:	3380      	adds	r3, #128	; 0x80
  40bc8c:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bc90:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bc94:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bc98:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc9c:	f00b 0307 	and.w	r3, fp, #7
  40bca0:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40bca4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40bca8:	f002 0707 	and.w	r7, r2, #7
  40bcac:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40bcb0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40bcb4:	fb01 f104 	mul.w	r1, r1, r4
  40bcb8:	fb03 1308 	mla	r3, r3, r8, r1
  40bcbc:	3380      	adds	r3, #128	; 0x80
  40bcbe:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bcc2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bcc6:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40bcca:	f361 0902 	bfi	r9, r1, #0, #3
  40bcce:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bcd2:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bcd6:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40bcda:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40bcde:	fb02 f204 	mul.w	r2, r2, r4
  40bce2:	fb03 2408 	mla	r4, r3, r8, r2
  40bce6:	3480      	adds	r4, #128	; 0x80
  40bce8:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40bcec:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40bcf0:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40bcf4:	f364 290c 	bfi	r9, r4, #8, #5
  40bcf8:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40bcfa:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40bcfe:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40bd00:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40bd04:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40bd08:	f10c 0c01 	add.w	ip, ip, #1
  40bd0c:	45b4      	cmp	ip, r6
  40bd0e:	da12      	bge.n	40bd36 <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40bd10:	f89a 0000 	ldrb.w	r0, [sl]
  40bd14:	2800      	cmp	r0, #0
  40bd16:	d0f5      	beq.n	40bd04 <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40bd18:	4281      	cmp	r1, r0
  40bd1a:	d0a5      	beq.n	40bc68 <fill_normal+0x6f8>
  40bd1c:	28ff      	cmp	r0, #255	; 0xff
  40bd1e:	d19e      	bne.n	40bc5e <fill_normal+0x6ee>
  40bd20:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40bd24:	e7a0      	b.n	40bc68 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40bd26:	b294      	uxth	r4, r2
  40bd28:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40bd2c:	42bc      	cmp	r4, r7
  40bd2e:	d19d      	bne.n	40bc6c <fill_normal+0x6fc>
  40bd30:	e7e6      	b.n	40bd00 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40bd32:	465b      	mov	r3, fp
  40bd34:	e7e1      	b.n	40bcfa <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40bd36:	9808      	ldr	r0, [sp, #32]
  40bd38:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40bd3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bd3e:	9c07      	ldr	r4, [sp, #28]
  40bd40:	4420      	add	r0, r4
  40bd42:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bd44:	f10e 0e01 	add.w	lr, lr, #1
  40bd48:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bd4a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40bd4e:	4586      	cmp	lr, r0
  40bd50:	f73f ac75 	bgt.w	40b63e <fill_normal+0xce>
  40bd54:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40bd58:	f04f 0c00 	mov.w	ip, #0
  40bd5c:	e7d6      	b.n	40bd0c <fill_normal+0x79c>
  40bd5e:	bf00      	nop

0040bd60 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40bd60:	2a02      	cmp	r2, #2
  40bd62:	d972      	bls.n	40be4a <color_blend_true_color_additive+0xea>
{
  40bd64:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40bd66:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40bd6a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40bd6e:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40bd70:	2b1f      	cmp	r3, #31
  40bd72:	bf28      	it	cs
  40bd74:	231f      	movcs	r3, #31
  40bd76:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40bd7a:	f001 0307 	and.w	r3, r1, #7
  40bd7e:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40bd82:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40bd86:	f000 0407 	and.w	r4, r0, #7
  40bd8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40bd8e:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40bd92:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40bd94:	2b3f      	cmp	r3, #63	; 0x3f
  40bd96:	bf28      	it	cs
  40bd98:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40bd9a:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40bd9e:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40bda2:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40bda6:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40bdaa:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40bdae:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40bdb0:	2b1f      	cmp	r3, #31
  40bdb2:	bf28      	it	cs
  40bdb4:	231f      	movcs	r3, #31
  40bdb6:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40bdba:	2aff      	cmp	r2, #255	; 0xff
  40bdbc:	d043      	beq.n	40be46 <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bdbe:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40bdc2:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40bdc6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40bdca:	fb06 f404 	mul.w	r4, r6, r4
  40bdce:	fb02 4303 	mla	r3, r2, r3, r4
  40bdd2:	3380      	adds	r3, #128	; 0x80
  40bdd4:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40bdd8:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40bddc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bde0:	f04f 0500 	mov.w	r5, #0
  40bde4:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bde8:	f000 0407 	and.w	r4, r0, #7
  40bdec:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40bdf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40bdf4:	f001 0707 	and.w	r7, r1, #7
  40bdf8:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40bdfc:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40be00:	fb04 f406 	mul.w	r4, r4, r6
  40be04:	fb03 4302 	mla	r3, r3, r2, r4
  40be08:	3380      	adds	r3, #128	; 0x80
  40be0a:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40be0e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40be12:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40be16:	f364 0502 	bfi	r5, r4, #0, #3
  40be1a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40be1e:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40be22:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40be26:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40be2a:	fb04 f406 	mul.w	r4, r4, r6
  40be2e:	fb03 4202 	mla	r2, r3, r2, r4
  40be32:	3280      	adds	r2, #128	; 0x80
  40be34:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40be38:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40be3c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40be40:	f362 250c 	bfi	r5, r2, #8, #5
  40be44:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40be46:	bcf0      	pop	{r4, r5, r6, r7}
  40be48:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40be4a:	4608      	mov	r0, r1
  40be4c:	4770      	bx	lr

0040be4e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40be4e:	2a02      	cmp	r2, #2
  40be50:	d96f      	bls.n	40bf32 <color_blend_true_color_subtractive+0xe4>
{
  40be52:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40be54:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40be58:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40be5c:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40be5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40be62:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40be66:	f001 0307 	and.w	r3, r1, #7
  40be6a:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40be6e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40be72:	f000 0407 	and.w	r4, r0, #7
  40be76:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40be7a:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40be7e:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40be80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40be84:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40be88:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40be8c:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40be90:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40be94:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40be98:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40be9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40be9e:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40bea2:	2aff      	cmp	r2, #255	; 0xff
  40bea4:	d043      	beq.n	40bf2e <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bea6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40beaa:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40beae:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40beb2:	fb06 f404 	mul.w	r4, r6, r4
  40beb6:	fb02 4303 	mla	r3, r2, r3, r4
  40beba:	3380      	adds	r3, #128	; 0x80
  40bebc:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40bec0:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40bec4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bec8:	f04f 0500 	mov.w	r5, #0
  40becc:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bed0:	f000 0407 	and.w	r4, r0, #7
  40bed4:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40bed8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40bedc:	f001 0707 	and.w	r7, r1, #7
  40bee0:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40bee4:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40bee8:	fb04 f406 	mul.w	r4, r4, r6
  40beec:	fb03 4302 	mla	r3, r3, r2, r4
  40bef0:	3380      	adds	r3, #128	; 0x80
  40bef2:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40bef6:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40befa:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40befe:	f364 0502 	bfi	r5, r4, #0, #3
  40bf02:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bf06:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bf0a:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40bf0e:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40bf12:	fb04 f406 	mul.w	r4, r4, r6
  40bf16:	fb03 4202 	mla	r2, r3, r2, r4
  40bf1a:	3280      	adds	r2, #128	; 0x80
  40bf1c:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40bf20:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40bf24:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40bf28:	f362 250c 	bfi	r5, r2, #8, #5
  40bf2c:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40bf2e:	bcf0      	pop	{r4, r5, r6, r7}
  40bf30:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40bf32:	4608      	mov	r0, r1
  40bf34:	4770      	bx	lr
	...

0040bf38 <fill_blended>:
{
  40bf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40bf3c:	b085      	sub	sp, #20
  40bf3e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40bf42:	9400      	str	r4, [sp, #0]
  40bf44:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40bf48:	8884      	ldrh	r4, [r0, #4]
  40bf4a:	8800      	ldrh	r0, [r0, #0]
  40bf4c:	1a20      	subs	r0, r4, r0
  40bf4e:	b280      	uxth	r0, r0
  40bf50:	3001      	adds	r0, #1
  40bf52:	b200      	sxth	r0, r0
  40bf54:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40bf56:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40bf5a:	fb0b f000 	mul.w	r0, fp, r0
  40bf5e:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40bf62:	2e01      	cmp	r6, #1
  40bf64:	d004      	beq.n	40bf70 <fill_blended+0x38>
  40bf66:	2e02      	cmp	r6, #2
  40bf68:	d01b      	beq.n	40bfa2 <fill_blended+0x6a>
}
  40bf6a:	b005      	add	sp, #20
  40bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40bf70:	f8df a154 	ldr.w	sl, [pc, #340]	; 40c0c8 <fill_blended+0x190>
  40bf74:	f8ad 3006 	strh.w	r3, [sp, #6]
  40bf78:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40bf7a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40bf7e:	2b01      	cmp	r3, #1
  40bf80:	d012      	beq.n	40bfa8 <fill_blended+0x70>
  40bf82:	8893      	ldrh	r3, [r2, #4]
  40bf84:	f9b2 2000 	ldrsh.w	r2, [r2]
  40bf88:	b294      	uxth	r4, r2
  40bf8a:	1b1b      	subs	r3, r3, r4
  40bf8c:	b29b      	uxth	r3, r3
  40bf8e:	3301      	adds	r3, #1
  40bf90:	b21b      	sxth	r3, r3
  40bf92:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40bf94:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40bf96:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40bf98:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40bf9c:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40bf9e:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bfa0:	e089      	b.n	40c0b6 <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40bfa2:	f8df a128 	ldr.w	sl, [pc, #296]	; 40c0cc <fill_blended+0x194>
  40bfa6:	e7e5      	b.n	40bf74 <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40bfa8:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bfac:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40bfb0:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40bfb4:	9900      	ldr	r1, [sp, #0]
  40bfb6:	fb01 f303 	mul.w	r3, r1, r3
  40bfba:	3380      	adds	r3, #128	; 0x80
  40bfbc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bfc0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bfc4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bfc8:	4630      	mov	r0, r6
  40bfca:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bfce:	f004 0207 	and.w	r2, r4, #7
  40bfd2:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40bfd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40bfda:	fb03 f301 	mul.w	r3, r3, r1
  40bfde:	3380      	adds	r3, #128	; 0x80
  40bfe0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40bfe4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40bfe8:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40bfec:	f362 0002 	bfi	r0, r2, #0, #3
  40bff0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bff4:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bff8:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40bffc:	fb03 f301 	mul.w	r3, r3, r1
  40c000:	3380      	adds	r3, #128	; 0x80
  40c002:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c006:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c00a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c00e:	f363 200c 	bfi	r0, r3, #8, #5
  40c012:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40c016:	e018      	b.n	40c04a <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40c018:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c01a:	3401      	adds	r4, #1
  40c01c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c020:	429c      	cmp	r4, r3
  40c022:	dc0e      	bgt.n	40c042 <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40c024:	b2b3      	uxth	r3, r6
  40c026:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40c02a:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40c02e:	4293      	cmp	r3, r2
  40c030:	d0f2      	beq.n	40c018 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40c032:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40c036:	9a00      	ldr	r2, [sp, #0]
  40c038:	4631      	mov	r1, r6
  40c03a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c03e:	47d0      	blx	sl
  40c040:	e7ea      	b.n	40c018 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40c042:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c046:	f10b 0b01 	add.w	fp, fp, #1
  40c04a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c04e:	459b      	cmp	fp, r3
  40c050:	dc8b      	bgt.n	40bf6a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c052:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c056:	e7e1      	b.n	40c01c <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c058:	fa1f f38e 	uxth.w	r3, lr
  40c05c:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40c060:	4563      	cmp	r3, ip
  40c062:	d119      	bne.n	40c098 <fill_blended+0x160>
  40c064:	e009      	b.n	40c07a <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c066:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40c068:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40c06c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c070:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40c072:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40c076:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40c07a:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c07e:	3401      	adds	r4, #1
  40c080:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c084:	429c      	cmp	r4, r3
  40c086:	dc0f      	bgt.n	40c0a8 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40c088:	4626      	mov	r6, r4
  40c08a:	eb07 0904 	add.w	r9, r7, r4
  40c08e:	5d3a      	ldrb	r2, [r7, r4]
  40c090:	2a00      	cmp	r2, #0
  40c092:	d0f4      	beq.n	40c07e <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c094:	4291      	cmp	r1, r2
  40c096:	d0df      	beq.n	40c058 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c098:	2afc      	cmp	r2, #252	; 0xfc
  40c09a:	d8e4      	bhi.n	40c066 <fill_blended+0x12e>
  40c09c:	9b00      	ldr	r3, [sp, #0]
  40c09e:	fb02 f203 	mul.w	r2, r2, r3
  40c0a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40c0a6:	e7df      	b.n	40c068 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40c0a8:	9b02      	ldr	r3, [sp, #8]
  40c0aa:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40c0ae:	9b03      	ldr	r3, [sp, #12]
  40c0b0:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c0b2:	f10b 0b01 	add.w	fp, fp, #1
  40c0b6:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c0ba:	459b      	cmp	fp, r3
  40c0bc:	f73f af55 	bgt.w	40bf6a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c0c0:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c0c4:	e7dc      	b.n	40c080 <fill_blended+0x148>
  40c0c6:	bf00      	nop
  40c0c8:	0040bd61 	.word	0x0040bd61
  40c0cc:	0040be4f 	.word	0x0040be4f

0040c0d0 <_lv_blend_fill>:
{
  40c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c0d4:	b08b      	sub	sp, #44	; 0x2c
  40c0d6:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c0da:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c0de:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c0e2:	2d01      	cmp	r5, #1
  40c0e4:	d900      	bls.n	40c0e8 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c0e6:	b916      	cbnz	r6, 40c0ee <_lv_blend_fill+0x1e>
}
  40c0e8:	b00b      	add	sp, #44	; 0x2c
  40c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c0ee:	461c      	mov	r4, r3
  40c0f0:	f8ad 201e 	strh.w	r2, [sp, #30]
  40c0f4:	9106      	str	r1, [sp, #24]
  40c0f6:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c0f8:	4b37      	ldr	r3, [pc, #220]	; (40c1d8 <_lv_blend_fill+0x108>)
  40c0fa:	4798      	blx	r3
  40c0fc:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c0fe:	4b37      	ldr	r3, [pc, #220]	; (40c1dc <_lv_blend_fill+0x10c>)
  40c100:	4798      	blx	r3
  40c102:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40c104:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c108:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c10c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40c110:	b10b      	cbz	r3, 40c116 <_lv_blend_fill+0x46>
  40c112:	4648      	mov	r0, r9
  40c114:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40c116:	9a06      	ldr	r2, [sp, #24]
  40c118:	9905      	ldr	r1, [sp, #20]
  40c11a:	a808      	add	r0, sp, #32
  40c11c:	4b30      	ldr	r3, [pc, #192]	; (40c1e0 <_lv_blend_fill+0x110>)
  40c11e:	4798      	blx	r3
    if(!is_common) return;
  40c120:	2800      	cmp	r0, #0
  40c122:	d0e1      	beq.n	40c0e8 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40c124:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40c128:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c12c:	eba2 020e 	sub.w	r2, r2, lr
  40c130:	b292      	uxth	r2, r2
  40c132:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c136:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40c13a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c13e:	1a09      	subs	r1, r1, r0
  40c140:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c144:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c148:	eba3 030e 	sub.w	r3, r3, lr
  40c14c:	b29b      	uxth	r3, r3
  40c14e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c152:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c156:	1a09      	subs	r1, r1, r0
  40c158:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c15c:	b1ac      	cbz	r4, 40c18a <_lv_blend_fill+0xba>
  40c15e:	f899 1008 	ldrb.w	r1, [r9, #8]
  40c162:	f011 0f01 	tst.w	r1, #1
  40c166:	d110      	bne.n	40c18a <_lv_blend_fill+0xba>
  40c168:	1a9a      	subs	r2, r3, r2
  40c16a:	b292      	uxth	r2, r2
  40c16c:	3201      	adds	r2, #1
  40c16e:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c170:	2300      	movs	r3, #0
  40c172:	e002      	b.n	40c17a <_lv_blend_fill+0xaa>
  40c174:	2000      	movs	r0, #0
  40c176:	7008      	strb	r0, [r1, #0]
  40c178:	3301      	adds	r3, #1
  40c17a:	4293      	cmp	r3, r2
  40c17c:	da05      	bge.n	40c18a <_lv_blend_fill+0xba>
  40c17e:	18e1      	adds	r1, r4, r3
  40c180:	5ce0      	ldrb	r0, [r4, r3]
  40c182:	2880      	cmp	r0, #128	; 0x80
  40c184:	d9f6      	bls.n	40c174 <_lv_blend_fill+0xa4>
  40c186:	20ff      	movs	r0, #255	; 0xff
  40c188:	e7f5      	b.n	40c176 <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40c18a:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40c18e:	b153      	cbz	r3, 40c1a6 <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c190:	9602      	str	r6, [sp, #8]
  40c192:	9401      	str	r4, [sp, #4]
  40c194:	9500      	str	r5, [sp, #0]
  40c196:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c19a:	aa08      	add	r2, sp, #32
  40c19c:	4659      	mov	r1, fp
  40c19e:	4650      	mov	r0, sl
  40c1a0:	4c10      	ldr	r4, [pc, #64]	; (40c1e4 <_lv_blend_fill+0x114>)
  40c1a2:	47a0      	blx	r4
  40c1a4:	e7a0      	b.n	40c0e8 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c1a6:	b957      	cbnz	r7, 40c1be <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c1a8:	9602      	str	r6, [sp, #8]
  40c1aa:	9401      	str	r4, [sp, #4]
  40c1ac:	9500      	str	r5, [sp, #0]
  40c1ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c1b2:	aa08      	add	r2, sp, #32
  40c1b4:	4659      	mov	r1, fp
  40c1b6:	4650      	mov	r0, sl
  40c1b8:	4c0b      	ldr	r4, [pc, #44]	; (40c1e8 <_lv_blend_fill+0x118>)
  40c1ba:	47a0      	blx	r4
  40c1bc:	e794      	b.n	40c0e8 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40c1be:	9703      	str	r7, [sp, #12]
  40c1c0:	9602      	str	r6, [sp, #8]
  40c1c2:	9401      	str	r4, [sp, #4]
  40c1c4:	9500      	str	r5, [sp, #0]
  40c1c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c1ca:	aa08      	add	r2, sp, #32
  40c1cc:	4659      	mov	r1, fp
  40c1ce:	4650      	mov	r0, sl
  40c1d0:	4c06      	ldr	r4, [pc, #24]	; (40c1ec <_lv_blend_fill+0x11c>)
  40c1d2:	47a0      	blx	r4
  40c1d4:	e788      	b.n	40c0e8 <_lv_blend_fill+0x18>
  40c1d6:	bf00      	nop
  40c1d8:	00409055 	.word	0x00409055
  40c1dc:	00414505 	.word	0x00414505
  40c1e0:	00414c69 	.word	0x00414c69
  40c1e4:	0040aba1 	.word	0x0040aba1
  40c1e8:	0040b571 	.word	0x0040b571
  40c1ec:	0040bf39 	.word	0x0040bf39

0040c1f0 <_lv_blend_map>:
{
  40c1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c1f4:	b08b      	sub	sp, #44	; 0x2c
  40c1f6:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c1fa:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c1fe:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c202:	2d01      	cmp	r5, #1
  40c204:	d900      	bls.n	40c208 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c206:	b916      	cbnz	r6, 40c20e <_lv_blend_map+0x1e>
}
  40c208:	b00b      	add	sp, #44	; 0x2c
  40c20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c20e:	461c      	mov	r4, r3
  40c210:	4617      	mov	r7, r2
  40c212:	460a      	mov	r2, r1
  40c214:	9106      	str	r1, [sp, #24]
  40c216:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40c218:	a808      	add	r0, sp, #32
  40c21a:	4b37      	ldr	r3, [pc, #220]	; (40c2f8 <_lv_blend_map+0x108>)
  40c21c:	4798      	blx	r3
    if(!is_common) return;
  40c21e:	2800      	cmp	r0, #0
  40c220:	d0f2      	beq.n	40c208 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c222:	4b36      	ldr	r3, [pc, #216]	; (40c2fc <_lv_blend_map+0x10c>)
  40c224:	4798      	blx	r3
  40c226:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c228:	4b35      	ldr	r3, [pc, #212]	; (40c300 <_lv_blend_map+0x110>)
  40c22a:	4798      	blx	r3
  40c22c:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40c22e:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c232:	6883      	ldr	r3, [r0, #8]
  40c234:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c236:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40c23a:	b10b      	cbz	r3, 40c240 <_lv_blend_map+0x50>
  40c23c:	4650      	mov	r0, sl
  40c23e:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40c240:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40c244:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c248:	eba2 020e 	sub.w	r2, r2, lr
  40c24c:	b292      	uxth	r2, r2
  40c24e:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c252:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40c256:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c25a:	1a09      	subs	r1, r1, r0
  40c25c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c260:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c264:	eba3 030e 	sub.w	r3, r3, lr
  40c268:	b29b      	uxth	r3, r3
  40c26a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c26e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c272:	1a09      	subs	r1, r1, r0
  40c274:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c278:	b1ac      	cbz	r4, 40c2a6 <_lv_blend_map+0xb6>
  40c27a:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40c27e:	f011 0f01 	tst.w	r1, #1
  40c282:	d110      	bne.n	40c2a6 <_lv_blend_map+0xb6>
  40c284:	1a9a      	subs	r2, r3, r2
  40c286:	b292      	uxth	r2, r2
  40c288:	3201      	adds	r2, #1
  40c28a:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c28c:	2300      	movs	r3, #0
  40c28e:	e002      	b.n	40c296 <_lv_blend_map+0xa6>
  40c290:	2000      	movs	r0, #0
  40c292:	7008      	strb	r0, [r1, #0]
  40c294:	3301      	adds	r3, #1
  40c296:	4293      	cmp	r3, r2
  40c298:	da05      	bge.n	40c2a6 <_lv_blend_map+0xb6>
  40c29a:	18e1      	adds	r1, r4, r3
  40c29c:	5ce0      	ldrb	r0, [r4, r3]
  40c29e:	2880      	cmp	r0, #128	; 0x80
  40c2a0:	d9f6      	bls.n	40c290 <_lv_blend_map+0xa0>
  40c2a2:	20ff      	movs	r0, #255	; 0xff
  40c2a4:	e7f5      	b.n	40c292 <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40c2a6:	f8da 3014 	ldr.w	r3, [sl, #20]
  40c2aa:	b153      	cbz	r3, 40c2c2 <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c2ac:	9603      	str	r6, [sp, #12]
  40c2ae:	9402      	str	r4, [sp, #8]
  40c2b0:	9501      	str	r5, [sp, #4]
  40c2b2:	9700      	str	r7, [sp, #0]
  40c2b4:	9b06      	ldr	r3, [sp, #24]
  40c2b6:	aa08      	add	r2, sp, #32
  40c2b8:	9907      	ldr	r1, [sp, #28]
  40c2ba:	4658      	mov	r0, fp
  40c2bc:	4c11      	ldr	r4, [pc, #68]	; (40c304 <_lv_blend_map+0x114>)
  40c2be:	47a0      	blx	r4
  40c2c0:	e7a2      	b.n	40c208 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c2c2:	f1b8 0f00 	cmp.w	r8, #0
  40c2c6:	d10a      	bne.n	40c2de <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c2c8:	9603      	str	r6, [sp, #12]
  40c2ca:	9402      	str	r4, [sp, #8]
  40c2cc:	9501      	str	r5, [sp, #4]
  40c2ce:	9700      	str	r7, [sp, #0]
  40c2d0:	9b06      	ldr	r3, [sp, #24]
  40c2d2:	aa08      	add	r2, sp, #32
  40c2d4:	9907      	ldr	r1, [sp, #28]
  40c2d6:	4658      	mov	r0, fp
  40c2d8:	4c0b      	ldr	r4, [pc, #44]	; (40c308 <_lv_blend_map+0x118>)
  40c2da:	47a0      	blx	r4
  40c2dc:	e794      	b.n	40c208 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40c2de:	f8cd 8010 	str.w	r8, [sp, #16]
  40c2e2:	9603      	str	r6, [sp, #12]
  40c2e4:	9402      	str	r4, [sp, #8]
  40c2e6:	9501      	str	r5, [sp, #4]
  40c2e8:	9700      	str	r7, [sp, #0]
  40c2ea:	9b06      	ldr	r3, [sp, #24]
  40c2ec:	aa08      	add	r2, sp, #32
  40c2ee:	9907      	ldr	r1, [sp, #28]
  40c2f0:	4658      	mov	r0, fp
  40c2f2:	4c06      	ldr	r4, [pc, #24]	; (40c30c <_lv_blend_map+0x11c>)
  40c2f4:	47a0      	blx	r4
  40c2f6:	e787      	b.n	40c208 <_lv_blend_map+0x18>
  40c2f8:	00414c69 	.word	0x00414c69
  40c2fc:	00409055 	.word	0x00409055
  40c300:	00414505 	.word	0x00414505
  40c304:	0040ac85 	.word	0x0040ac85
  40c308:	0040adbd 	.word	0x0040adbd
  40c30c:	0040aa55 	.word	0x0040aa55

0040c310 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c314:	b0bd      	sub	sp, #244	; 0xf4
  40c316:	9016      	str	r0, [sp, #88]	; 0x58
  40c318:	911f      	str	r1, [sp, #124]	; 0x7c
  40c31a:	4616      	mov	r6, r2
  40c31c:	930a      	str	r3, [sp, #40]	; 0x28
  40c31e:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40c322:	930d      	str	r3, [sp, #52]	; 0x34
  40c324:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40c328:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40c32a:	aa3a      	add	r2, sp, #232	; 0xe8
  40c32c:	2308      	movs	r3, #8
  40c32e:	e004      	b.n	40c33a <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40c330:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c334:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40c338:	3b01      	subs	r3, #1
    while(len) {
  40c33a:	2b00      	cmp	r3, #0
  40c33c:	d1f8      	bne.n	40c330 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40c33e:	4ba6      	ldr	r3, [pc, #664]	; (40c5d8 <lv_draw_map+0x2c8>)
  40c340:	4798      	blx	r3
  40c342:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c344:	4ba5      	ldr	r3, [pc, #660]	; (40c5dc <lv_draw_map+0x2cc>)
  40c346:	4798      	blx	r3
  40c348:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40c34a:	8a01      	ldrh	r1, [r0, #16]
  40c34c:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40c350:	1a5b      	subs	r3, r3, r1
  40c352:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40c356:	8a42      	ldrh	r2, [r0, #18]
  40c358:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40c35c:	1a9b      	subs	r3, r3, r2
  40c35e:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40c362:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c366:	1a5b      	subs	r3, r3, r1
  40c368:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40c36c:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c370:	1a9b      	subs	r3, r3, r2
  40c372:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40c376:	4b9a      	ldr	r3, [pc, #616]	; (40c5e0 <lv_draw_map+0x2d0>)
  40c378:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40c37a:	9015      	str	r0, [sp, #84]	; 0x54
  40c37c:	b930      	cbnz	r0, 40c38c <lv_draw_map+0x7c>
  40c37e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c380:	8853      	ldrh	r3, [r2, #2]
  40c382:	b91b      	cbnz	r3, 40c38c <lv_draw_map+0x7c>
  40c384:	8913      	ldrh	r3, [r2, #8]
  40c386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c38a:	d055      	beq.n	40c438 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c38c:	9b08      	ldr	r3, [sp, #32]
  40c38e:	2b00      	cmp	r3, #0
  40c390:	d068      	beq.n	40c464 <lv_draw_map+0x154>
  40c392:	2303      	movs	r3, #3
  40c394:	9307      	str	r3, [sp, #28]
  40c396:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c398:	888d      	ldrh	r5, [r1, #4]
  40c39a:	f9b1 2000 	ldrsh.w	r2, [r1]
  40c39e:	b293      	uxth	r3, r2
  40c3a0:	1aed      	subs	r5, r5, r3
  40c3a2:	b2ad      	uxth	r5, r5
  40c3a4:	3501      	adds	r5, #1
  40c3a6:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40c3a8:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40c3aa:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40c3ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40c3b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c3b4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40c3b8:	1a5b      	subs	r3, r3, r1
  40c3ba:	1ac3      	subs	r3, r0, r3
  40c3bc:	fb03 f305 	mul.w	r3, r3, r5
  40c3c0:	9f07      	ldr	r7, [sp, #28]
  40c3c2:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40c3c4:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40c3c8:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40c3cc:	eba2 020e 	sub.w	r2, r2, lr
  40c3d0:	ebac 0202 	sub.w	r2, ip, r2
  40c3d4:	fb02 f207 	mul.w	r2, r2, r7
  40c3d8:	fb07 2303 	mla	r3, r7, r3, r2
  40c3dc:	18f3      	adds	r3, r6, r3
  40c3de:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40c3e0:	fa1f f78c 	uxth.w	r7, ip
  40c3e4:	fa17 f38e 	uxtah	r3, r7, lr
  40c3e8:	b29b      	uxth	r3, r3
  40c3ea:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40c3ee:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40c3f2:	1bd2      	subs	r2, r2, r7
  40c3f4:	b292      	uxth	r2, r2
  40c3f6:	3201      	adds	r2, #1
  40c3f8:	b292      	uxth	r2, r2
  40c3fa:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40c3fe:	4413      	add	r3, r2
  40c400:	b29b      	uxth	r3, r3
  40c402:	3b01      	subs	r3, #1
  40c404:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40c408:	b280      	uxth	r0, r0
  40c40a:	fa10 f381 	uxtah	r3, r0, r1
  40c40e:	b21b      	sxth	r3, r3
  40c410:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40c414:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c418:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c41c:	1a1b      	subs	r3, r3, r0
  40c41e:	b29b      	uxth	r3, r3
  40c420:	3301      	adds	r3, #1
  40c422:	b21b      	sxth	r3, r3
  40c424:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c428:	8853      	ldrh	r3, [r2, #2]
  40c42a:	b9f3      	cbnz	r3, 40c46a <lv_draw_map+0x15a>
  40c42c:	8913      	ldrh	r3, [r2, #8]
  40c42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c432:	d051      	beq.n	40c4d8 <lv_draw_map+0x1c8>
  40c434:	2301      	movs	r3, #1
  40c436:	e019      	b.n	40c46c <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40c438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c43a:	2b00      	cmp	r3, #0
  40c43c:	d1a6      	bne.n	40c38c <lv_draw_map+0x7c>
  40c43e:	9b08      	ldr	r3, [sp, #32]
  40c440:	2b00      	cmp	r3, #0
  40c442:	d1a3      	bne.n	40c38c <lv_draw_map+0x7c>
  40c444:	7a93      	ldrb	r3, [r2, #10]
  40c446:	2b00      	cmp	r3, #0
  40c448:	d1a0      	bne.n	40c38c <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40c44a:	7b93      	ldrb	r3, [r2, #14]
  40c44c:	9302      	str	r3, [sp, #8]
  40c44e:	7813      	ldrb	r3, [r2, #0]
  40c450:	9301      	str	r3, [sp, #4]
  40c452:	2301      	movs	r3, #1
  40c454:	9300      	str	r3, [sp, #0]
  40c456:	2300      	movs	r3, #0
  40c458:	4632      	mov	r2, r6
  40c45a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c45c:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c45e:	4c61      	ldr	r4, [pc, #388]	; (40c5e4 <lv_draw_map+0x2d4>)
  40c460:	47a0      	blx	r4
  40c462:	e368      	b.n	40cb36 <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c464:	2302      	movs	r3, #2
  40c466:	9307      	str	r3, [sp, #28]
  40c468:	e795      	b.n	40c396 <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c46a:	2301      	movs	r3, #1
  40c46c:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c46e:	f083 0301 	eor.w	r3, r3, #1
  40c472:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c474:	2a00      	cmp	r2, #0
  40c476:	bf14      	ite	ne
  40c478:	2300      	movne	r3, #0
  40c47a:	f003 0301 	andeq.w	r3, r3, #1
  40c47e:	b133      	cbz	r3, 40c48e <lv_draw_map+0x17e>
  40c480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c482:	b923      	cbnz	r3, 40c48e <lv_draw_map+0x17e>
  40c484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c486:	7a9b      	ldrb	r3, [r3, #10]
  40c488:	b90b      	cbnz	r3, 40c48e <lv_draw_map+0x17e>
  40c48a:	9b08      	ldr	r3, [sp, #32]
  40c48c:	bb33      	cbnz	r3, 40c4dc <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c48e:	4640      	mov	r0, r8
  40c490:	4b55      	ldr	r3, [pc, #340]	; (40c5e8 <lv_draw_map+0x2d8>)
  40c492:	4798      	blx	r3
  40c494:	4604      	mov	r4, r0
  40c496:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c498:	a83a      	add	r0, sp, #232	; 0xe8
  40c49a:	4b54      	ldr	r3, [pc, #336]	; (40c5ec <lv_draw_map+0x2dc>)
  40c49c:	4798      	blx	r3
  40c49e:	4284      	cmp	r4, r0
  40c4a0:	f080 80ac 	bcs.w	40c5fc <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c4a4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40c4a6:	0078      	lsls	r0, r7, #1
  40c4a8:	4c51      	ldr	r4, [pc, #324]	; (40c5f0 <lv_draw_map+0x2e0>)
  40c4aa:	47a0      	blx	r4
  40c4ac:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c4ae:	4638      	mov	r0, r7
  40c4b0:	47a0      	blx	r4
  40c4b2:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40c4b4:	214c      	movs	r1, #76	; 0x4c
  40c4b6:	a827      	add	r0, sp, #156	; 0x9c
  40c4b8:	4b4e      	ldr	r3, [pc, #312]	; (40c5f4 <lv_draw_map+0x2e4>)
  40c4ba:	4798      	blx	r3
            if(transform) {
  40c4bc:	9b06      	ldr	r3, [sp, #24]
  40c4be:	2b00      	cmp	r3, #0
  40c4c0:	f000 80ca 	beq.w	40c658 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c4c4:	9b08      	ldr	r3, [sp, #32]
  40c4c6:	2b00      	cmp	r3, #0
  40c4c8:	f040 809d 	bne.w	40c606 <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c4cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c4ce:	2b00      	cmp	r3, #0
  40c4d0:	f040 80f3 	bne.w	40c6ba <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40c4d4:	2204      	movs	r2, #4
  40c4d6:	e097      	b.n	40c608 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c4d8:	2300      	movs	r3, #0
  40c4da:	e7c7      	b.n	40c46c <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c4dc:	4640      	mov	r0, r8
  40c4de:	4b42      	ldr	r3, [pc, #264]	; (40c5e8 <lv_draw_map+0x2d8>)
  40c4e0:	4798      	blx	r3
  40c4e2:	4604      	mov	r4, r0
  40c4e4:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c4e6:	a83a      	add	r0, sp, #232	; 0xe8
  40c4e8:	4b40      	ldr	r3, [pc, #256]	; (40c5ec <lv_draw_map+0x2dc>)
  40c4ea:	4798      	blx	r3
  40c4ec:	4284      	cmp	r4, r0
  40c4ee:	d20e      	bcs.n	40c50e <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c4f0:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40c4f4:	4c3e      	ldr	r4, [pc, #248]	; (40c5f0 <lv_draw_map+0x2e0>)
  40c4f6:	47a0      	blx	r4
  40c4f8:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c4fa:	4640      	mov	r0, r8
  40c4fc:	47a0      	blx	r4
  40c4fe:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40c500:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40c502:	4632      	mov	r2, r6
  40c504:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40c508:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40c50c:	e02b      	b.n	40c566 <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c50e:	a83a      	add	r0, sp, #232	; 0xe8
  40c510:	4b36      	ldr	r3, [pc, #216]	; (40c5ec <lv_draw_map+0x2dc>)
  40c512:	4798      	blx	r3
  40c514:	4680      	mov	r8, r0
  40c516:	e7eb      	b.n	40c4f0 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c518:	3101      	adds	r1, #1
  40c51a:	443b      	add	r3, r7
  40c51c:	3201      	adds	r2, #1
  40c51e:	4549      	cmp	r1, r9
  40c520:	da0b      	bge.n	40c53a <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c522:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40c524:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40c526:	2800      	cmp	r0, #0
  40c528:	d0f6      	beq.n	40c518 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40c52a:	7818      	ldrb	r0, [r3, #0]
  40c52c:	f893 e001 	ldrb.w	lr, [r3, #1]
  40c530:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40c534:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40c538:	e7ee      	b.n	40c518 <lv_draw_map+0x208>
  40c53a:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40c53c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c53e:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c540:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c544:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c548:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40c54c:	1a5b      	subs	r3, r3, r1
  40c54e:	b29b      	uxth	r3, r3
  40c550:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c552:	fa02 f383 	sxtah	r3, r2, r3
  40c556:	4598      	cmp	r8, r3
  40c558:	d90b      	bls.n	40c572 <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40c55a:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c55e:	3301      	adds	r3, #1
  40c560:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40c564:	3601      	adds	r6, #1
  40c566:	455e      	cmp	r6, fp
  40c568:	da1a      	bge.n	40c5a0 <lv_draw_map+0x290>
  40c56a:	4653      	mov	r3, sl
  40c56c:	2100      	movs	r1, #0
  40c56e:	9f07      	ldr	r7, [sp, #28]
  40c570:	e7d5      	b.n	40c51e <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c572:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c574:	7b93      	ldrb	r3, [r2, #14]
  40c576:	9302      	str	r3, [sp, #8]
  40c578:	7813      	ldrb	r3, [r2, #0]
  40c57a:	9301      	str	r3, [sp, #4]
  40c57c:	2302      	movs	r3, #2
  40c57e:	9300      	str	r3, [sp, #0]
  40c580:	4623      	mov	r3, r4
  40c582:	462a      	mov	r2, r5
  40c584:	a925      	add	r1, sp, #148	; 0x94
  40c586:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c588:	4f16      	ldr	r7, [pc, #88]	; (40c5e4 <lv_draw_map+0x2d4>)
  40c58a:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40c58c:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40c590:	3301      	adds	r3, #1
  40c592:	b21b      	sxth	r3, r3
  40c594:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40c598:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40c59c:	2200      	movs	r2, #0
  40c59e:	e7e1      	b.n	40c564 <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40c5a0:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40c5a4:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c5a8:	429a      	cmp	r2, r3
  40c5aa:	d00f      	beq.n	40c5cc <lv_draw_map+0x2bc>
                blend_area.y2--;
  40c5ac:	3b01      	subs	r3, #1
  40c5ae:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c5b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c5b4:	7b93      	ldrb	r3, [r2, #14]
  40c5b6:	9302      	str	r3, [sp, #8]
  40c5b8:	7813      	ldrb	r3, [r2, #0]
  40c5ba:	9301      	str	r3, [sp, #4]
  40c5bc:	2302      	movs	r3, #2
  40c5be:	9300      	str	r3, [sp, #0]
  40c5c0:	4623      	mov	r3, r4
  40c5c2:	462a      	mov	r2, r5
  40c5c4:	a925      	add	r1, sp, #148	; 0x94
  40c5c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c5c8:	4e06      	ldr	r6, [pc, #24]	; (40c5e4 <lv_draw_map+0x2d4>)
  40c5ca:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40c5cc:	4620      	mov	r0, r4
  40c5ce:	4c0a      	ldr	r4, [pc, #40]	; (40c5f8 <lv_draw_map+0x2e8>)
  40c5d0:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c5d2:	4628      	mov	r0, r5
  40c5d4:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c5d6:	e2ae      	b.n	40cb36 <lv_draw_map+0x826>
  40c5d8:	00409055 	.word	0x00409055
  40c5dc:	00414505 	.word	0x00414505
  40c5e0:	0040f3f5 	.word	0x0040f3f5
  40c5e4:	0040c1f1 	.word	0x0040c1f1
  40c5e8:	00414401 	.word	0x00414401
  40c5ec:	00414c4d 	.word	0x00414c4d
  40c5f0:	00415fdd 	.word	0x00415fdd
  40c5f4:	00416169 	.word	0x00416169
  40c5f8:	00415d8d 	.word	0x00415d8d
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c5fc:	a83a      	add	r0, sp, #232	; 0xe8
  40c5fe:	4bb6      	ldr	r3, [pc, #728]	; (40c8d8 <lv_draw_map+0x5c8>)
  40c600:	4798      	blx	r3
  40c602:	9017      	str	r0, [sp, #92]	; 0x5c
  40c604:	e74e      	b.n	40c4a4 <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c606:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40c608:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c60a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40c60e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40c612:	8903      	ldrh	r3, [r0, #8]
  40c614:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40c618:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40c61a:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c61e:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c620:	88cb      	ldrh	r3, [r1, #6]
  40c622:	8849      	ldrh	r1, [r1, #2]
  40c624:	1a5b      	subs	r3, r3, r1
  40c626:	b29b      	uxth	r3, r3
  40c628:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40c62a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40c62e:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40c632:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40c636:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40c63a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40c63e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40c642:	8983      	ldrh	r3, [r0, #12]
  40c644:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40c648:	7bc3      	ldrb	r3, [r0, #15]
  40c64a:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40c64e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40c652:	a827      	add	r0, sp, #156	; 0x9c
  40c654:	4ba1      	ldr	r3, [pc, #644]	; (40c8dc <lv_draw_map+0x5cc>)
  40c656:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40c658:	2300      	movs	r3, #0
  40c65a:	9323      	str	r3, [sp, #140]	; 0x8c
  40c65c:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40c660:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c662:	7a8a      	ldrb	r2, [r1, #10]
  40c664:	43d3      	mvns	r3, r2
  40c666:	b2db      	uxtb	r3, r3
  40c668:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40c66a:	b1ba      	cbz	r2, 40c69c <lv_draw_map+0x38c>
  40c66c:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40c66e:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40c672:	b292      	uxth	r2, r2
  40c674:	fb01 f102 	mul.w	r1, r1, r2
  40c678:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40c67c:	f003 0007 	and.w	r0, r3, #7
  40c680:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40c684:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40c688:	fb12 f101 	smulbb	r1, r2, r1
  40c68c:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40c690:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c694:	fb02 f203 	mul.w	r2, r2, r3
  40c698:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c69c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c69e:	9a08      	ldr	r2, [sp, #32]
  40c6a0:	4313      	orrs	r3, r2
  40c6a2:	9321      	str	r3, [sp, #132]	; 0x84
  40c6a4:	d10b      	bne.n	40c6be <lv_draw_map+0x3ae>
  40c6a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c6a8:	8853      	ldrh	r3, [r2, #2]
  40c6aa:	b9f3      	cbnz	r3, 40c6ea <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40c6ac:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c6ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c6b2:	d01d      	beq.n	40c6f0 <lv_draw_map+0x3e0>
  40c6b4:	2302      	movs	r3, #2
  40c6b6:	931b      	str	r3, [sp, #108]	; 0x6c
  40c6b8:	e003      	b.n	40c6c2 <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c6ba:	2206      	movs	r2, #6
  40c6bc:	e7a4      	b.n	40c608 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c6be:	2302      	movs	r3, #2
  40c6c0:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40c6c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c6c4:	b9bb      	cbnz	r3, 40c6f6 <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40c6c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c6c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40c6cc:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40c6d0:	4413      	add	r3, r2
  40c6d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c6d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40c6d8:	1a9b      	subs	r3, r3, r2
  40c6da:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40c6dc:	2300      	movs	r3, #0
  40c6de:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40c6e0:	9313      	str	r3, [sp, #76]	; 0x4c
  40c6e2:	4657      	mov	r7, sl
  40c6e4:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40c6e8:	e192      	b.n	40ca10 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c6ea:	2302      	movs	r3, #2
  40c6ec:	931b      	str	r3, [sp, #108]	; 0x6c
  40c6ee:	e7e8      	b.n	40c6c2 <lv_draw_map+0x3b2>
  40c6f0:	2301      	movs	r3, #1
  40c6f2:	931b      	str	r3, [sp, #108]	; 0x6c
  40c6f4:	e7e5      	b.n	40c6c2 <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40c6f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40c6f8:	4650      	mov	r0, sl
  40c6fa:	4b79      	ldr	r3, [pc, #484]	; (40c8e0 <lv_draw_map+0x5d0>)
  40c6fc:	4798      	blx	r3
  40c6fe:	e7e2      	b.n	40c6c6 <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40c700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c702:	4443      	add	r3, r8
  40c704:	b21b      	sxth	r3, r3
  40c706:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c708:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c70a:	440a      	add	r2, r1
  40c70c:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40c70e:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40c710:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40c714:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40c716:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40c71a:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40c71c:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40c720:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40c724:	d035      	beq.n	40c792 <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40c726:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40c72a:	2800      	cmp	r0, #0
  40c72c:	d143      	bne.n	40c7b6 <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c72e:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40c730:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c734:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40c738:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c73a:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40c73e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40c740:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40c744:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40c746:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40c748:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c74a:	121b      	asrs	r3, r3, #8
  40c74c:	461c      	mov	r4, r3
  40c74e:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40c750:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40c754:	429d      	cmp	r5, r3
  40c756:	f280 80b3 	bge.w	40c8c0 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40c75a:	2d00      	cmp	r5, #0
  40c75c:	f2c0 80b6 	blt.w	40c8cc <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40c760:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40c764:	4294      	cmp	r4, r2
  40c766:	f280 80b3 	bge.w	40c8d0 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40c76a:	2c00      	cmp	r4, #0
  40c76c:	f2c0 80b2 	blt.w	40c8d4 <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40c770:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40c774:	f012 0f04 	tst.w	r2, #4
  40c778:	d075      	beq.n	40c866 <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40c77a:	f012 0f02 	tst.w	r2, #2
  40c77e:	d157      	bne.n	40c830 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c780:	fb03 5304 	mla	r3, r3, r4, r5
  40c784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40c788:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40c78a:	aa2c      	add	r2, sp, #176	; 0xb0
  40c78c:	2302      	movs	r3, #2
  40c78e:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c790:	e02f      	b.n	40c7f2 <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40c792:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40c794:	fb05 f603 	mul.w	r6, r5, r3
  40c798:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c79a:	fb04 6612 	mls	r6, r4, r2, r6
  40c79e:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c7a0:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40c7a4:	fb05 f202 	mul.w	r2, r5, r2
  40c7a8:	fb04 2403 	mla	r4, r4, r3, r2
  40c7ac:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40c7ae:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40c7b2:	9309      	str	r3, [sp, #36]	; 0x24
  40c7b4:	e7c7      	b.n	40c746 <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c7b6:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40c7b8:	fb03 f304 	mul.w	r3, r3, r4
  40c7bc:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c7be:	fb02 f204 	mul.w	r2, r2, r4
  40c7c2:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40c7c4:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40c7c6:	fb04 f603 	mul.w	r6, r4, r3
  40c7ca:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40c7cc:	fb05 6612 	mls	r6, r5, r2, r6
  40c7d0:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c7d2:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40c7d6:	fb04 f402 	mul.w	r4, r4, r2
  40c7da:	fb05 4303 	mla	r3, r5, r3, r4
  40c7de:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40c7e0:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40c7e4:	9309      	str	r3, [sp, #36]	; 0x24
  40c7e6:	e7ae      	b.n	40c746 <lv_draw_map+0x436>
        *d8 = *s8;
  40c7e8:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c7ec:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40c7f0:	3b01      	subs	r3, #1
    while(len) {
  40c7f2:	2b00      	cmp	r3, #0
  40c7f4:	d1f8      	bne.n	40c7e8 <lv_draw_map+0x4d8>
  40c7f6:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40c7f8:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40c7fa:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40c7fe:	f013 0f01 	tst.w	r3, #1
  40c802:	d00f      	beq.n	40c824 <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40c804:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40c806:	f043 0307 	orr.w	r3, r3, #7
  40c80a:	f36f 03c7 	bfc	r3, #3, #5
  40c80e:	f36f 230c 	bfc	r3, #8, #5
  40c812:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40c816:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40c81a:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40c81e:	b29b      	uxth	r3, r3
  40c820:	4299      	cmp	r1, r3
  40c822:	d037      	beq.n	40c894 <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40c824:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40c828:	2b00      	cmp	r3, #0
  40c82a:	d135      	bne.n	40c898 <lv_draw_map+0x588>
  40c82c:	9806      	ldr	r0, [sp, #24]
  40c82e:	e048      	b.n	40c8c2 <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40c832:	fb03 5302 	mla	r3, r3, r2, r5
  40c836:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40c83a:	931e      	str	r3, [sp, #120]	; 0x78
  40c83c:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40c83e:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40c840:	a82c      	add	r0, sp, #176	; 0xb0
  40c842:	2202      	movs	r2, #2
  40c844:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c846:	e004      	b.n	40c852 <lv_draw_map+0x542>
        *d8 = *s8;
  40c848:	f813 eb01 	ldrb.w	lr, [r3], #1
  40c84c:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40c850:	3a01      	subs	r2, #1
    while(len) {
  40c852:	2a00      	cmp	r2, #0
  40c854:	d1f8      	bne.n	40c848 <lv_draw_map+0x538>
  40c856:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40c858:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40c85a:	4419      	add	r1, r3
  40c85c:	788b      	ldrb	r3, [r1, #2]
  40c85e:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40c862:	2203      	movs	r2, #3
  40c864:	e7c9      	b.n	40c7fa <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40c866:	b229      	sxth	r1, r5
  40c868:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40c86c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40c870:	9220      	str	r2, [sp, #128]	; 0x80
  40c872:	911e      	str	r1, [sp, #120]	; 0x78
  40c874:	a82d      	add	r0, sp, #180	; 0xb4
  40c876:	4c1b      	ldr	r4, [pc, #108]	; (40c8e4 <lv_draw_map+0x5d4>)
  40c878:	47a0      	blx	r4
  40c87a:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40c87e:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40c880:	991e      	ldr	r1, [sp, #120]	; 0x78
  40c882:	a82d      	add	r0, sp, #180	; 0xb4
  40c884:	4b18      	ldr	r3, [pc, #96]	; (40c8e8 <lv_draw_map+0x5d8>)
  40c886:	4798      	blx	r3
  40c888:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40c88c:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40c890:	4662      	mov	r2, ip
  40c892:	e7b2      	b.n	40c7fa <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40c894:	2000      	movs	r0, #0
  40c896:	e014      	b.n	40c8c2 <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40c898:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40c89c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c8a0:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40c8a4:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40c8a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40c8ac:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40c8b0:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40c8b4:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40c8b8:	a827      	add	r0, sp, #156	; 0x9c
  40c8ba:	4b0c      	ldr	r3, [pc, #48]	; (40c8ec <lv_draw_map+0x5dc>)
  40c8bc:	4798      	blx	r3
  40c8be:	e000      	b.n	40c8c2 <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40c8c0:	2000      	movs	r0, #0
                        if(ret == false) {
  40c8c2:	b9b8      	cbnz	r0, 40c8f4 <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40c8c4:	2300      	movs	r3, #0
  40c8c6:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40c8ca:	e068      	b.n	40c99e <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40c8cc:	2000      	movs	r0, #0
  40c8ce:	e7f8      	b.n	40c8c2 <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40c8d0:	2000      	movs	r0, #0
  40c8d2:	e7f6      	b.n	40c8c2 <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40c8d4:	2000      	movs	r0, #0
  40c8d6:	e7f4      	b.n	40c8c2 <lv_draw_map+0x5b2>
  40c8d8:	00414c4d 	.word	0x00414c4d
  40c8dc:	00411e51 	.word	0x00411e51
  40c8e0:	004161c1 	.word	0x004161c1
  40c8e4:	00411c31 	.word	0x00411c31
  40c8e8:	00411d55 	.word	0x00411d55
  40c8ec:	00412165 	.word	0x00412165
  40c8f0:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40c8f4:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40c8f8:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40c8fc:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40c900:	e010      	b.n	40c924 <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40c902:	23ff      	movs	r3, #255	; 0xff
  40c904:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40c908:	f89a 2000 	ldrb.w	r2, [sl]
  40c90c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40c910:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40c914:	b292      	uxth	r2, r2
  40c916:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40c918:	990d      	ldr	r1, [sp, #52]	; 0x34
  40c91a:	b119      	cbz	r1, 40c924 <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40c91c:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40c8f0 <lv_draw_map+0x5e0>
  40c920:	428a      	cmp	r2, r1
  40c922:	d053      	beq.n	40c9cc <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40c924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c926:	7a92      	ldrb	r2, [r2, #10]
  40c928:	b3b2      	cbz	r2, 40c998 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c92a:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40c92e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40c932:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40c934:	fb04 1202 	mla	r2, r4, r2, r1
  40c938:	3280      	adds	r2, #128	; 0x80
  40c93a:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c93e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c942:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c946:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c94a:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40c94e:	f003 0007 	and.w	r0, r3, #7
  40c952:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40c956:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40c95a:	fb02 1204 	mla	r2, r2, r4, r1
  40c95e:	3280      	adds	r2, #128	; 0x80
  40c960:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40c964:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40c968:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40c96c:	f361 0b02 	bfi	fp, r1, #0, #3
  40c970:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40c974:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40c978:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40c97c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c980:	fb03 2304 	mla	r3, r3, r4, r2
  40c984:	3380      	adds	r3, #128	; 0x80
  40c986:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c98a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c98e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c992:	f363 2b0c 	bfi	fp, r3, #8, #5
  40c996:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40c998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40c99a:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c99e:	f108 0801 	add.w	r8, r8, #1
  40c9a2:	9b07      	ldr	r3, [sp, #28]
  40c9a4:	449a      	add	sl, r3
  40c9a6:	f109 0901 	add.w	r9, r9, #1
  40c9aa:	9b05      	ldr	r3, [sp, #20]
  40c9ac:	4598      	cmp	r8, r3
  40c9ae:	da11      	bge.n	40c9d4 <lv_draw_map+0x6c4>
                    if(transform) {
  40c9b0:	9b06      	ldr	r3, [sp, #24]
  40c9b2:	2b00      	cmp	r3, #0
  40c9b4:	f47f aea4 	bne.w	40c700 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40c9b8:	9b08      	ldr	r3, [sp, #32]
  40c9ba:	2b00      	cmp	r3, #0
  40c9bc:	d0a1      	beq.n	40c902 <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c9be:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40c9c2:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40c9c6:	2b00      	cmp	r3, #0
  40c9c8:	d0e9      	beq.n	40c99e <lv_draw_map+0x68e>
  40c9ca:	e79d      	b.n	40c908 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40c9cc:	2300      	movs	r3, #0
  40c9ce:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40c9d2:	e7e4      	b.n	40c99e <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40c9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c9d6:	bb8b      	cbnz	r3, 40ca3c <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40c9d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c9da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40c9dc:	9911      	ldr	r1, [sp, #68]	; 0x44
  40c9de:	fb02 1303 	mla	r3, r2, r3, r1
  40c9e2:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c9e4:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c9e8:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40c9ec:	1a9b      	subs	r3, r3, r2
  40c9ee:	b29b      	uxth	r3, r3
  40c9f0:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c9f2:	fa09 f383 	sxtah	r3, r9, r3
  40c9f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40c9f8:	429a      	cmp	r2, r3
  40c9fa:	d94c      	bls.n	40ca96 <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40c9fc:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40ca00:	3301      	adds	r3, #1
  40ca02:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40ca06:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40ca0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ca0c:	3301      	adds	r3, #1
  40ca0e:	930c      	str	r3, [sp, #48]	; 0x30
  40ca10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ca12:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40ca14:	4293      	cmp	r3, r2
  40ca16:	da72      	bge.n	40cafe <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40ca18:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40ca1a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40ca1e:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40ca22:	4413      	add	r3, r2
  40ca24:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40ca26:	f9b2 2000 	ldrsh.w	r2, [r2]
  40ca2a:	1a9b      	subs	r3, r3, r2
  40ca2c:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40ca2e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40ca32:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40ca36:	f04f 0800 	mov.w	r8, #0
  40ca3a:	e7b6      	b.n	40c9aa <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40ca3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40ca3e:	443b      	add	r3, r7
  40ca40:	461d      	mov	r5, r3
  40ca42:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40ca46:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40ca48:	8a21      	ldrh	r1, [r4, #16]
  40ca4a:	4401      	add	r1, r0
  40ca4c:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40ca50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40ca52:	441a      	add	r2, r3
  40ca54:	8a63      	ldrh	r3, [r4, #18]
  40ca56:	fa13 f282 	uxtah	r2, r3, r2
  40ca5a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40ca5e:	1a1b      	subs	r3, r3, r0
  40ca60:	b29b      	uxth	r3, r3
  40ca62:	3301      	adds	r3, #1
  40ca64:	b21b      	sxth	r3, r3
  40ca66:	b212      	sxth	r2, r2
  40ca68:	b209      	sxth	r1, r1
  40ca6a:	4628      	mov	r0, r5
  40ca6c:	4c33      	ldr	r4, [pc, #204]	; (40cb3c <lv_draw_map+0x82c>)
  40ca6e:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40ca70:	b118      	cbz	r0, 40ca7a <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40ca72:	2802      	cmp	r0, #2
  40ca74:	d1b0      	bne.n	40c9d8 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ca76:	901b      	str	r0, [sp, #108]	; 0x6c
  40ca78:	e7ae      	b.n	40c9d8 <lv_draw_map+0x6c8>
  40ca7a:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40ca7e:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40ca82:	1ac9      	subs	r1, r1, r3
  40ca84:	b289      	uxth	r1, r1
  40ca86:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40ca88:	b209      	sxth	r1, r1
  40ca8a:	4628      	mov	r0, r5
  40ca8c:	4b2c      	ldr	r3, [pc, #176]	; (40cb40 <lv_draw_map+0x830>)
  40ca8e:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ca90:	2302      	movs	r3, #2
  40ca92:	931b      	str	r3, [sp, #108]	; 0x6c
  40ca94:	e7a0      	b.n	40c9d8 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40ca96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ca98:	7bab      	ldrb	r3, [r5, #14]
  40ca9a:	9302      	str	r3, [sp, #8]
  40ca9c:	782b      	ldrb	r3, [r5, #0]
  40ca9e:	9301      	str	r3, [sp, #4]
  40caa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40caa2:	9300      	str	r3, [sp, #0]
  40caa4:	463b      	mov	r3, r7
  40caa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40caa8:	a925      	add	r1, sp, #148	; 0x94
  40caaa:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40caac:	4c25      	ldr	r4, [pc, #148]	; (40cb44 <lv_draw_map+0x834>)
  40caae:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40cab0:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40cab4:	3301      	adds	r3, #1
  40cab6:	b21b      	sxth	r3, r3
  40cab8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40cabc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40cac2:	b943      	cbnz	r3, 40cad6 <lv_draw_map+0x7c6>
  40cac4:	886b      	ldrh	r3, [r5, #2]
  40cac6:	b96b      	cbnz	r3, 40cae4 <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40cac8:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40caca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40cace:	d00c      	beq.n	40caea <lv_draw_map+0x7da>
  40cad0:	2302      	movs	r3, #2
  40cad2:	931b      	str	r3, [sp, #108]	; 0x6c
  40cad4:	e001      	b.n	40cada <lv_draw_map+0x7ca>
  40cad6:	2302      	movs	r3, #2
  40cad8:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40cada:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cadc:	b943      	cbnz	r3, 40caf0 <lv_draw_map+0x7e0>
                    px_i = 0;
  40cade:	2300      	movs	r3, #0
  40cae0:	9313      	str	r3, [sp, #76]	; 0x4c
  40cae2:	e792      	b.n	40ca0a <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cae4:	2302      	movs	r3, #2
  40cae6:	931b      	str	r3, [sp, #108]	; 0x6c
  40cae8:	e7f7      	b.n	40cada <lv_draw_map+0x7ca>
  40caea:	2301      	movs	r3, #1
  40caec:	931b      	str	r3, [sp, #108]	; 0x6c
  40caee:	e7f4      	b.n	40cada <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40caf0:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40caf2:	4638      	mov	r0, r7
  40caf4:	4b14      	ldr	r3, [pc, #80]	; (40cb48 <lv_draw_map+0x838>)
  40caf6:	4798      	blx	r3
                    px_i = 0;
  40caf8:	2300      	movs	r3, #0
  40cafa:	9313      	str	r3, [sp, #76]	; 0x4c
  40cafc:	e785      	b.n	40ca0a <lv_draw_map+0x6fa>
  40cafe:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40cb00:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40cb04:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cb08:	429a      	cmp	r2, r3
  40cb0a:	d00f      	beq.n	40cb2c <lv_draw_map+0x81c>
                blend_area.y2--;
  40cb0c:	3b01      	subs	r3, #1
  40cb0e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40cb12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cb14:	7b93      	ldrb	r3, [r2, #14]
  40cb16:	9302      	str	r3, [sp, #8]
  40cb18:	7813      	ldrb	r3, [r2, #0]
  40cb1a:	9301      	str	r3, [sp, #4]
  40cb1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cb1e:	9300      	str	r3, [sp, #0]
  40cb20:	463b      	mov	r3, r7
  40cb22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cb24:	a925      	add	r1, sp, #148	; 0x94
  40cb26:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cb28:	4c06      	ldr	r4, [pc, #24]	; (40cb44 <lv_draw_map+0x834>)
  40cb2a:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40cb2c:	4650      	mov	r0, sl
  40cb2e:	4c07      	ldr	r4, [pc, #28]	; (40cb4c <lv_draw_map+0x83c>)
  40cb30:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40cb32:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40cb34:	47a0      	blx	r4
        }
    }
}
  40cb36:	b03d      	add	sp, #244	; 0xf4
  40cb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cb3c:	0040f32d 	.word	0x0040f32d
  40cb40:	00416169 	.word	0x00416169
  40cb44:	0040c1f1 	.word	0x0040c1f1
  40cb48:	004161c1 	.word	0x004161c1
  40cb4c:	00415d8d 	.word	0x00415d8d

0040cb50 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40cb50:	b570      	push	{r4, r5, r6, lr}
  40cb52:	b0a0      	sub	sp, #128	; 0x80
  40cb54:	4604      	mov	r4, r0
  40cb56:	460d      	mov	r5, r1
  40cb58:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40cb5a:	a80b      	add	r0, sp, #44	; 0x2c
  40cb5c:	4b0b      	ldr	r3, [pc, #44]	; (40cb8c <show_error+0x3c>)
  40cb5e:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40cb60:	4b0b      	ldr	r3, [pc, #44]	; (40cb90 <show_error+0x40>)
  40cb62:	881b      	ldrh	r3, [r3, #0]
  40cb64:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40cb68:	aa0b      	add	r2, sp, #44	; 0x2c
  40cb6a:	4629      	mov	r1, r5
  40cb6c:	4620      	mov	r0, r4
  40cb6e:	4b09      	ldr	r3, [pc, #36]	; (40cb94 <show_error+0x44>)
  40cb70:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40cb72:	a802      	add	r0, sp, #8
  40cb74:	4b08      	ldr	r3, [pc, #32]	; (40cb98 <show_error+0x48>)
  40cb76:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40cb78:	2300      	movs	r3, #0
  40cb7a:	9300      	str	r3, [sp, #0]
  40cb7c:	4633      	mov	r3, r6
  40cb7e:	aa02      	add	r2, sp, #8
  40cb80:	4629      	mov	r1, r5
  40cb82:	4620      	mov	r0, r4
  40cb84:	4c05      	ldr	r4, [pc, #20]	; (40cb9c <show_error+0x4c>)
  40cb86:	47a0      	blx	r4
}
  40cb88:	b020      	add	sp, #128	; 0x80
  40cb8a:	bd70      	pop	{r4, r5, r6, pc}
  40cb8c:	00411b6d 	.word	0x00411b6d
  40cb90:	0042361c 	.word	0x0042361c
  40cb94:	00411bb9 	.word	0x00411bb9
  40cb98:	0040d735 	.word	0x0040d735
  40cb9c:	0040d77d 	.word	0x0040d77d

0040cba0 <lv_draw_img_dsc_init>:
{
  40cba0:	b510      	push	{r4, lr}
  40cba2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40cba4:	2110      	movs	r1, #16
  40cba6:	4b07      	ldr	r3, [pc, #28]	; (40cbc4 <lv_draw_img_dsc_init+0x24>)
  40cba8:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40cbaa:	2300      	movs	r3, #0
  40cbac:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40cbae:	23ff      	movs	r3, #255	; 0xff
  40cbb0:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40cbb2:	f44f 7380 	mov.w	r3, #256	; 0x100
  40cbb6:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40cbb8:	7be3      	ldrb	r3, [r4, #15]
  40cbba:	f043 0301 	orr.w	r3, r3, #1
  40cbbe:	73e3      	strb	r3, [r4, #15]
  40cbc0:	bd10      	pop	{r4, pc}
  40cbc2:	bf00      	nop
  40cbc4:	00416169 	.word	0x00416169

0040cbc8 <lv_img_cf_get_px_size>:
    switch(cf) {
  40cbc8:	3804      	subs	r0, #4
  40cbca:	280a      	cmp	r0, #10
  40cbcc:	d807      	bhi.n	40cbde <lv_img_cf_get_px_size+0x16>
  40cbce:	e8df f000 	tbb	[pc, r0]
  40cbd2:	0812      	.short	0x0812
  40cbd4:	0e0c0a12 	.word	0x0e0c0a12
  40cbd8:	0e0c0a10 	.word	0x0e0c0a10
  40cbdc:	10          	.byte	0x10
  40cbdd:	00          	.byte	0x00
            px_size = 0;
  40cbde:	2000      	movs	r0, #0
  40cbe0:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40cbe2:	2018      	movs	r0, #24
            break;
  40cbe4:	4770      	bx	lr
            px_size = 1;
  40cbe6:	2001      	movs	r0, #1
            break;
  40cbe8:	4770      	bx	lr
            px_size = 2;
  40cbea:	2002      	movs	r0, #2
            break;
  40cbec:	4770      	bx	lr
            px_size = 4;
  40cbee:	2004      	movs	r0, #4
            break;
  40cbf0:	4770      	bx	lr
            px_size = 8;
  40cbf2:	2008      	movs	r0, #8
            break;
  40cbf4:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40cbf6:	2010      	movs	r0, #16
}
  40cbf8:	4770      	bx	lr

0040cbfa <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40cbfa:	2803      	cmp	r0, #3
  40cbfc:	d005      	beq.n	40cc0a <lv_img_cf_is_chroma_keyed+0x10>
  40cbfe:	d302      	bcc.n	40cc06 <lv_img_cf_is_chroma_keyed+0xc>
  40cc00:	3806      	subs	r0, #6
  40cc02:	2804      	cmp	r0, #4
  40cc04:	d901      	bls.n	40cc0a <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40cc06:	2000      	movs	r0, #0
}
  40cc08:	4770      	bx	lr
            is_chroma_keyed = true;
  40cc0a:	2001      	movs	r0, #1
  40cc0c:	4770      	bx	lr

0040cc0e <lv_img_cf_has_alpha>:
    switch(cf) {
  40cc0e:	3802      	subs	r0, #2
  40cc10:	280c      	cmp	r0, #12
  40cc12:	d80a      	bhi.n	40cc2a <lv_img_cf_has_alpha+0x1c>
  40cc14:	e8df f000 	tbb	[pc, r0]
  40cc18:	07090907 	.word	0x07090907
  40cc1c:	07070709 	.word	0x07070709
  40cc20:	07070707 	.word	0x07070707
  40cc24:	07          	.byte	0x07
  40cc25:	00          	.byte	0x00
            has_alpha = true;
  40cc26:	2001      	movs	r0, #1
  40cc28:	4770      	bx	lr
            has_alpha = false;
  40cc2a:	2000      	movs	r0, #0
}
  40cc2c:	4770      	bx	lr
	...

0040cc30 <lv_img_draw_core>:
{
  40cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cc34:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40cc36:	781c      	ldrb	r4, [r3, #0]
  40cc38:	2c02      	cmp	r4, #2
  40cc3a:	d803      	bhi.n	40cc44 <lv_img_draw_core+0x14>
  40cc3c:	2001      	movs	r0, #1
}
  40cc3e:	b00f      	add	sp, #60	; 0x3c
  40cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cc44:	461c      	mov	r4, r3
  40cc46:	460d      	mov	r5, r1
  40cc48:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40cc4a:	8999      	ldrh	r1, [r3, #12]
  40cc4c:	4610      	mov	r0, r2
  40cc4e:	4b73      	ldr	r3, [pc, #460]	; (40ce1c <lv_img_draw_core+0x1ec>)
  40cc50:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40cc52:	4606      	mov	r6, r0
  40cc54:	2800      	cmp	r0, #0
  40cc56:	f000 80de 	beq.w	40ce16 <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40cc5a:	f890 800c 	ldrb.w	r8, [r0, #12]
  40cc5e:	f008 081f 	and.w	r8, r8, #31
  40cc62:	4640      	mov	r0, r8
  40cc64:	4b6e      	ldr	r3, [pc, #440]	; (40ce20 <lv_img_draw_core+0x1f0>)
  40cc66:	4798      	blx	r3
  40cc68:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40cc6a:	4640      	mov	r0, r8
  40cc6c:	4b6d      	ldr	r3, [pc, #436]	; (40ce24 <lv_img_draw_core+0x1f4>)
  40cc6e:	4798      	blx	r3
  40cc70:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40cc72:	69b2      	ldr	r2, [r6, #24]
  40cc74:	b12a      	cbz	r2, 40cc82 <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40cc76:	4629      	mov	r1, r5
  40cc78:	4650      	mov	r0, sl
  40cc7a:	4b6b      	ldr	r3, [pc, #428]	; (40ce28 <lv_img_draw_core+0x1f8>)
  40cc7c:	4798      	blx	r3
    return LV_RES_OK;
  40cc7e:	2001      	movs	r0, #1
  40cc80:	e7dd      	b.n	40cc3e <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40cc82:	6933      	ldr	r3, [r6, #16]
  40cc84:	2b00      	cmp	r3, #0
  40cc86:	d053      	beq.n	40cd30 <lv_img_draw_core+0x100>
  40cc88:	4651      	mov	r1, sl
  40cc8a:	aa0a      	add	r2, sp, #40	; 0x28
  40cc8c:	2308      	movs	r3, #8
  40cc8e:	e004      	b.n	40cc9a <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40cc90:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cc94:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40cc98:	3b01      	subs	r3, #1
    while(len) {
  40cc9a:	2b00      	cmp	r3, #0
  40cc9c:	d1f8      	bne.n	40cc90 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40cc9e:	8863      	ldrh	r3, [r4, #2]
  40cca0:	b91b      	cbnz	r3, 40ccaa <lv_img_draw_core+0x7a>
  40cca2:	8922      	ldrh	r2, [r4, #8]
  40cca4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40cca8:	d030      	beq.n	40cd0c <lv_img_draw_core+0xdc>
  40ccaa:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40ccae:	f8ba 2000 	ldrh.w	r2, [sl]
  40ccb2:	1a89      	subs	r1, r1, r2
  40ccb4:	b289      	uxth	r1, r1
  40ccb6:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ccb8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40ccbc:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40ccc0:	1a12      	subs	r2, r2, r0
  40ccc2:	b292      	uxth	r2, r2
  40ccc4:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40ccc6:	1d20      	adds	r0, r4, #4
  40ccc8:	9001      	str	r0, [sp, #4]
  40ccca:	8920      	ldrh	r0, [r4, #8]
  40cccc:	9000      	str	r0, [sp, #0]
  40ccce:	b21b      	sxth	r3, r3
  40ccd0:	b212      	sxth	r2, r2
  40ccd2:	b209      	sxth	r1, r1
  40ccd4:	a80a      	add	r0, sp, #40	; 0x28
  40ccd6:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40ce48 <lv_img_draw_core+0x218>
  40ccda:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40ccdc:	f8ba 2000 	ldrh.w	r2, [sl]
  40cce0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40cce4:	4413      	add	r3, r2
  40cce6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40ccea:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40ccee:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40ccf2:	4419      	add	r1, r3
  40ccf4:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40ccf8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40ccfc:	440a      	add	r2, r1
  40ccfe:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40cd02:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40cd06:	4413      	add	r3, r2
  40cd08:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40cd0c:	aa0a      	add	r2, sp, #40	; 0x28
  40cd0e:	4629      	mov	r1, r5
  40cd10:	a80c      	add	r0, sp, #48	; 0x30
  40cd12:	4b46      	ldr	r3, [pc, #280]	; (40ce2c <lv_img_draw_core+0x1fc>)
  40cd14:	4798      	blx	r3
        if(union_ok == false) {
  40cd16:	b908      	cbnz	r0, 40cd1c <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40cd18:	2001      	movs	r0, #1
  40cd1a:	e790      	b.n	40cc3e <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40cd1c:	6932      	ldr	r2, [r6, #16]
  40cd1e:	f8cd 8004 	str.w	r8, [sp, #4]
  40cd22:	9700      	str	r7, [sp, #0]
  40cd24:	4623      	mov	r3, r4
  40cd26:	a90c      	add	r1, sp, #48	; 0x30
  40cd28:	4650      	mov	r0, sl
  40cd2a:	4c41      	ldr	r4, [pc, #260]	; (40ce30 <lv_img_draw_core+0x200>)
  40cd2c:	47a0      	blx	r4
  40cd2e:	e7a6      	b.n	40cc7e <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40cd30:	4652      	mov	r2, sl
  40cd32:	4629      	mov	r1, r5
  40cd34:	a808      	add	r0, sp, #32
  40cd36:	4b3d      	ldr	r3, [pc, #244]	; (40ce2c <lv_img_draw_core+0x1fc>)
  40cd38:	4798      	blx	r3
        if(union_ok == false) {
  40cd3a:	b908      	cbnz	r0, 40cd40 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40cd3c:	2001      	movs	r0, #1
  40cd3e:	e77e      	b.n	40cc3e <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cd40:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40cd44:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40cd48:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40cd4c:	1a9b      	subs	r3, r3, r2
  40cd4e:	b29b      	uxth	r3, r3
  40cd50:	3301      	adds	r3, #1
  40cd52:	b21b      	sxth	r3, r3
  40cd54:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40cd56:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40cd5a:	4b36      	ldr	r3, [pc, #216]	; (40ce34 <lv_img_draw_core+0x204>)
  40cd5c:	4798      	blx	r3
  40cd5e:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40cd60:	aa0a      	add	r2, sp, #40	; 0x28
  40cd62:	2308      	movs	r3, #8
  40cd64:	e004      	b.n	40cd70 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40cd66:	f819 1b01 	ldrb.w	r1, [r9], #1
  40cd6a:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40cd6e:	3b01      	subs	r3, #1
    while(len) {
  40cd70:	2b00      	cmp	r3, #0
  40cd72:	d1f8      	bne.n	40cd66 <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40cd74:	2101      	movs	r1, #1
  40cd76:	a80a      	add	r0, sp, #40	; 0x28
  40cd78:	4b2f      	ldr	r3, [pc, #188]	; (40ce38 <lv_img_draw_core+0x208>)
  40cd7a:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40cd7c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40cd80:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40cd84:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40cd88:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40cd8c:	eba9 0a0a 	sub.w	sl, r9, sl
  40cd90:	9604      	str	r6, [sp, #16]
  40cd92:	9e07      	ldr	r6, [sp, #28]
  40cd94:	469b      	mov	fp, r3
  40cd96:	9502      	str	r5, [sp, #8]
  40cd98:	4615      	mov	r5, r2
  40cd9a:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cd9c:	e009      	b.n	40cdb2 <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40cd9e:	9805      	ldr	r0, [sp, #20]
  40cda0:	4b26      	ldr	r3, [pc, #152]	; (40ce3c <lv_img_draw_core+0x20c>)
  40cda2:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40cda4:	9807      	ldr	r0, [sp, #28]
  40cda6:	4b26      	ldr	r3, [pc, #152]	; (40ce40 <lv_img_draw_core+0x210>)
  40cda8:	4798      	blx	r3
                return LV_RES_INV;
  40cdaa:	2000      	movs	r0, #0
  40cdac:	e747      	b.n	40cc3e <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cdae:	f109 0901 	add.w	r9, r9, #1
  40cdb2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40cdb6:	4599      	cmp	r9, r3
  40cdb8:	dc29      	bgt.n	40ce0e <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40cdba:	aa0a      	add	r2, sp, #40	; 0x28
  40cdbc:	9902      	ldr	r1, [sp, #8]
  40cdbe:	a80c      	add	r0, sp, #48	; 0x30
  40cdc0:	4b1a      	ldr	r3, [pc, #104]	; (40ce2c <lv_img_draw_core+0x1fc>)
  40cdc2:	4798      	blx	r3
            if(union_ok == false) continue;
  40cdc4:	2800      	cmp	r0, #0
  40cdc6:	d0f2      	beq.n	40cdae <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40cdc8:	9804      	ldr	r0, [sp, #16]
  40cdca:	9005      	str	r0, [sp, #20]
  40cdcc:	ebab 0105 	sub.w	r1, fp, r5
  40cdd0:	9600      	str	r6, [sp, #0]
  40cdd2:	9b03      	ldr	r3, [sp, #12]
  40cdd4:	fa0f f28a 	sxth.w	r2, sl
  40cdd8:	b209      	sxth	r1, r1
  40cdda:	4c1a      	ldr	r4, [pc, #104]	; (40ce44 <lv_img_draw_core+0x214>)
  40cddc:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40cdde:	2801      	cmp	r0, #1
  40cde0:	d1dd      	bne.n	40cd9e <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40cde2:	f8cd 8004 	str.w	r8, [sp, #4]
  40cde6:	9700      	str	r7, [sp, #0]
  40cde8:	9b06      	ldr	r3, [sp, #24]
  40cdea:	4632      	mov	r2, r6
  40cdec:	a90c      	add	r1, sp, #48	; 0x30
  40cdee:	a80a      	add	r0, sp, #40	; 0x28
  40cdf0:	4c0f      	ldr	r4, [pc, #60]	; (40ce30 <lv_img_draw_core+0x200>)
  40cdf2:	47a0      	blx	r4
            line.y1++;
  40cdf4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40cdf8:	3301      	adds	r3, #1
  40cdfa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40cdfe:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40ce02:	3301      	adds	r3, #1
  40ce04:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40ce08:	f10a 0a01 	add.w	sl, sl, #1
  40ce0c:	e7cf      	b.n	40cdae <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40ce0e:	9807      	ldr	r0, [sp, #28]
  40ce10:	4b0b      	ldr	r3, [pc, #44]	; (40ce40 <lv_img_draw_core+0x210>)
  40ce12:	4798      	blx	r3
  40ce14:	e733      	b.n	40cc7e <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40ce16:	2000      	movs	r0, #0
  40ce18:	e711      	b.n	40cc3e <lv_img_draw_core+0xe>
  40ce1a:	bf00      	nop
  40ce1c:	004125f1 	.word	0x004125f1
  40ce20:	0040cbfb 	.word	0x0040cbfb
  40ce24:	0040cc0f 	.word	0x0040cc0f
  40ce28:	0040cb51 	.word	0x0040cb51
  40ce2c:	00414c69 	.word	0x00414c69
  40ce30:	0040c311 	.word	0x0040c311
  40ce34:	00415fdd 	.word	0x00415fdd
  40ce38:	00414c41 	.word	0x00414c41
  40ce3c:	0041313d 	.word	0x0041313d
  40ce40:	00415d8d 	.word	0x00415d8d
  40ce44:	00413119 	.word	0x00413119
  40ce48:	00411f79 	.word	0x00411f79

0040ce4c <lv_draw_img>:
{
  40ce4c:	b570      	push	{r4, r5, r6, lr}
  40ce4e:	4604      	mov	r4, r0
  40ce50:	460d      	mov	r5, r1
    if(src == NULL) {
  40ce52:	b122      	cbz	r2, 40ce5e <lv_draw_img+0x12>
  40ce54:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40ce56:	781a      	ldrb	r2, [r3, #0]
  40ce58:	2a02      	cmp	r2, #2
  40ce5a:	d804      	bhi.n	40ce66 <lv_draw_img+0x1a>
  40ce5c:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40ce5e:	4a08      	ldr	r2, [pc, #32]	; (40ce80 <lv_draw_img+0x34>)
  40ce60:	4b08      	ldr	r3, [pc, #32]	; (40ce84 <lv_draw_img+0x38>)
  40ce62:	4798      	blx	r3
        return;
  40ce64:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40ce66:	460a      	mov	r2, r1
  40ce68:	4629      	mov	r1, r5
  40ce6a:	4e07      	ldr	r6, [pc, #28]	; (40ce88 <lv_draw_img+0x3c>)
  40ce6c:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40ce6e:	2800      	cmp	r0, #0
  40ce70:	d1f4      	bne.n	40ce5c <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40ce72:	4a03      	ldr	r2, [pc, #12]	; (40ce80 <lv_draw_img+0x34>)
  40ce74:	4629      	mov	r1, r5
  40ce76:	4620      	mov	r0, r4
  40ce78:	4b02      	ldr	r3, [pc, #8]	; (40ce84 <lv_draw_img+0x38>)
  40ce7a:	4798      	blx	r3
        return;
  40ce7c:	e7ee      	b.n	40ce5c <lv_draw_img+0x10>
  40ce7e:	bf00      	nop
  40ce80:	00423620 	.word	0x00423620
  40ce84:	0040cb51 	.word	0x0040cb51
  40ce88:	0040cc31 	.word	0x0040cc31

0040ce8c <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40ce8c:	b160      	cbz	r0, 40cea8 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40ce8e:	7802      	ldrb	r2, [r0, #0]
  40ce90:	f1a2 0320 	sub.w	r3, r2, #32
  40ce94:	b2db      	uxtb	r3, r3
  40ce96:	2b5f      	cmp	r3, #95	; 0x5f
  40ce98:	d908      	bls.n	40ceac <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40ce9a:	f012 0f80 	tst.w	r2, #128	; 0x80
  40ce9e:	d101      	bne.n	40cea4 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40cea0:	2000      	movs	r0, #0
}
  40cea2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40cea4:	2002      	movs	r0, #2
  40cea6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40cea8:	2003      	movs	r0, #3
  40ceaa:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40ceac:	2001      	movs	r0, #1
  40ceae:	4770      	bx	lr

0040ceb0 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40ceb0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40ceb4:	b2db      	uxtb	r3, r3
  40ceb6:	2b09      	cmp	r3, #9
  40ceb8:	d917      	bls.n	40ceea <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40ceba:	2860      	cmp	r0, #96	; 0x60
  40cebc:	d901      	bls.n	40cec2 <hex_char_to_num+0x12>
  40cebe:	3820      	subs	r0, #32
  40cec0:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40cec2:	3841      	subs	r0, #65	; 0x41
  40cec4:	2805      	cmp	r0, #5
  40cec6:	d80e      	bhi.n	40cee6 <hex_char_to_num+0x36>
  40cec8:	e8df f000 	tbb	[pc, r0]
  40cecc:	07051103 	.word	0x07051103
  40ced0:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40ced2:	200a      	movs	r0, #10
  40ced4:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40ced6:	200c      	movs	r0, #12
                break;
  40ced8:	4770      	bx	lr
            case 'D':
                result = 13;
  40ceda:	200d      	movs	r0, #13
                break;
  40cedc:	4770      	bx	lr
            case 'E':
                result = 14;
  40cede:	200e      	movs	r0, #14
                break;
  40cee0:	4770      	bx	lr
            case 'F':
                result = 15;
  40cee2:	200f      	movs	r0, #15
                break;
  40cee4:	4770      	bx	lr
            default:
                result = 0;
  40cee6:	2000      	movs	r0, #0
                break;
  40cee8:	4770      	bx	lr
        result = hex - '0';
  40ceea:	4618      	mov	r0, r3
  40ceec:	4770      	bx	lr
                result = 11;
  40ceee:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40cef0:	4770      	bx	lr
	...

0040cef4 <draw_letter_subpx>:
{
  40cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40cef8:	b09d      	sub	sp, #116	; 0x74
  40cefa:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40cefe:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40cf02:	9409      	str	r4, [sp, #36]	; 0x24
  40cf04:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40cf08:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40cf0a:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40cf0c:	2d03      	cmp	r5, #3
  40cf0e:	d00d      	beq.n	40cf2c <draw_letter_subpx+0x38>
    switch(bpp) {
  40cf10:	1e6c      	subs	r4, r5, #1
  40cf12:	2c07      	cmp	r4, #7
  40cf14:	f200 820e 	bhi.w	40d334 <draw_letter_subpx+0x440>
  40cf18:	e8df f014 	tbh	[pc, r4, lsl #1]
  40cf1c:	0019000a 	.word	0x0019000a
  40cf20:	000f020c 	.word	0x000f020c
  40cf24:	020c020c 	.word	0x020c020c
  40cf28:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40cf2c:	2504      	movs	r5, #4
  40cf2e:	e7ef      	b.n	40cf10 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40cf30:	2480      	movs	r4, #128	; 0x80
  40cf32:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40cf34:	4caf      	ldr	r4, [pc, #700]	; (40d1f4 <draw_letter_subpx+0x300>)
  40cf36:	940b      	str	r4, [sp, #44]	; 0x2c
  40cf38:	e00d      	b.n	40cf56 <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40cf3a:	24f0      	movs	r4, #240	; 0xf0
  40cf3c:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40cf3e:	4cae      	ldr	r4, [pc, #696]	; (40d1f8 <draw_letter_subpx+0x304>)
  40cf40:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40cf42:	e008      	b.n	40cf56 <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40cf44:	24ff      	movs	r4, #255	; 0xff
  40cf46:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40cf48:	4cac      	ldr	r4, [pc, #688]	; (40d1fc <draw_letter_subpx+0x308>)
  40cf4a:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40cf4c:	e003      	b.n	40cf56 <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40cf4e:	24c0      	movs	r4, #192	; 0xc0
  40cf50:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40cf52:	4cab      	ldr	r4, [pc, #684]	; (40d200 <draw_letter_subpx+0x30c>)
  40cf54:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40cf56:	8854      	ldrh	r4, [r2, #2]
  40cf58:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40cf5a:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40cf5e:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40cf62:	f9b3 2000 	ldrsh.w	r2, [r3]
  40cf66:	4282      	cmp	r2, r0
  40cf68:	f340 8097 	ble.w	40d09a <draw_letter_subpx+0x1a6>
  40cf6c:	1a12      	subs	r2, r2, r0
  40cf6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40cf72:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40cf74:	4aa3      	ldr	r2, [pc, #652]	; (40d204 <draw_letter_subpx+0x310>)
  40cf76:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40cf78:	fb82 4204 	smull	r4, r2, r2, r4
  40cf7c:	4402      	add	r2, r0
  40cf7e:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40cf82:	42a2      	cmp	r2, r4
  40cf84:	f340 808c 	ble.w	40d0a0 <draw_letter_subpx+0x1ac>
  40cf88:	1a22      	subs	r2, r4, r0
  40cf8a:	3201      	adds	r2, #1
  40cf8c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40cf90:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40cf92:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40cf96:	428a      	cmp	r2, r1
  40cf98:	f340 8085 	ble.w	40d0a6 <draw_letter_subpx+0x1b2>
  40cf9c:	1a52      	subs	r2, r2, r1
  40cf9e:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40cfa0:	eb0e 0201 	add.w	r2, lr, r1
  40cfa4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40cfa8:	42a2      	cmp	r2, r4
  40cfaa:	dd7f      	ble.n	40d0ac <draw_letter_subpx+0x1b8>
  40cfac:	1a64      	subs	r4, r4, r1
  40cfae:	1c62      	adds	r2, r4, #1
  40cfb0:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40cfb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40cfb4:	fb05 f402 	mul.w	r4, r5, r2
  40cfb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40cfba:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40cfbe:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40cfc0:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40cfc4:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40cfc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40cfca:	fb0e f202 	mul.w	r2, lr, r2
  40cfce:	9212      	str	r2, [sp, #72]	; 0x48
  40cfd0:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40cfd4:	dd02      	ble.n	40cfdc <draw_letter_subpx+0xe8>
  40cfd6:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40cfda:	9212      	str	r2, [sp, #72]	; 0x48
  40cfdc:	9317      	str	r3, [sp, #92]	; 0x5c
  40cfde:	468a      	mov	sl, r1
  40cfe0:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40cfe2:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40cfe4:	4638      	mov	r0, r7
  40cfe6:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40d214 <draw_letter_subpx+0x320>
  40cfea:	47c0      	blx	r8
  40cfec:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40cfee:	0078      	lsls	r0, r7, #1
  40cff0:	47c0      	blx	r8
  40cff2:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40cff4:	4b84      	ldr	r3, [pc, #528]	; (40d208 <draw_letter_subpx+0x314>)
  40cff6:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40cff8:	4b84      	ldr	r3, [pc, #528]	; (40d20c <draw_letter_subpx+0x318>)
  40cffa:	4798      	blx	r3
  40cffc:	8a83      	ldrh	r3, [r0, #20]
  40cffe:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40d002:	b291      	uxth	r1, r2
  40d004:	1a5b      	subs	r3, r3, r1
  40d006:	b29b      	uxth	r3, r3
  40d008:	3301      	adds	r3, #1
  40d00a:	b21b      	sxth	r3, r3
  40d00c:	4619      	mov	r1, r3
  40d00e:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d010:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d014:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d018:	ebaa 0303 	sub.w	r3, sl, r3
  40d01c:	4608      	mov	r0, r1
  40d01e:	fb03 b301 	mla	r3, r3, r1, fp
  40d022:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d024:	4a77      	ldr	r2, [pc, #476]	; (40d204 <draw_letter_subpx+0x310>)
  40d026:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d028:	fb82 e107 	smull	lr, r1, r2, r7
  40d02c:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40d030:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40d032:	fb00 1007 	mla	r0, r0, r7, r1
  40d036:	0040      	lsls	r0, r0, #1
  40d038:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40d03c:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40d03e:	fa1f f08b 	uxth.w	r0, fp
  40d042:	4401      	add	r1, r0
  40d044:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d048:	9908      	ldr	r1, [sp, #32]
  40d04a:	fb82 2301 	smull	r2, r3, r2, r1
  40d04e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40d052:	4403      	add	r3, r0
  40d054:	b29b      	uxth	r3, r3
  40d056:	3b01      	subs	r3, #1
  40d058:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40d05c:	eb07 030a 	add.w	r3, r7, sl
  40d060:	b21b      	sxth	r3, r3
  40d062:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40d066:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d06a:	4b69      	ldr	r3, [pc, #420]	; (40d210 <draw_letter_subpx+0x31c>)
  40d06c:	4798      	blx	r3
  40d06e:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d070:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40d074:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40d078:	f009 0207 	and.w	r2, r9, #7
  40d07c:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40d080:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d084:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40d088:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40d08c:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40d090:	2300      	movs	r3, #0
  40d092:	9310      	str	r3, [sp, #64]	; 0x40
  40d094:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40d098:	e0eb      	b.n	40d272 <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d09a:	2200      	movs	r2, #0
  40d09c:	920f      	str	r2, [sp, #60]	; 0x3c
  40d09e:	e769      	b.n	40cf74 <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d0a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d0a2:	9208      	str	r2, [sp, #32]
  40d0a4:	e775      	b.n	40cf92 <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d0a6:	2200      	movs	r2, #0
  40d0a8:	920d      	str	r2, [sp, #52]	; 0x34
  40d0aa:	e779      	b.n	40cfa0 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d0ac:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40d0b0:	e77f      	b.n	40cfb2 <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d0b2:	2d08      	cmp	r5, #8
  40d0b4:	d00b      	beq.n	40d0ce <draw_letter_subpx+0x1da>
  40d0b6:	b2db      	uxtb	r3, r3
  40d0b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d0ba:	5cd2      	ldrb	r2, [r2, r3]
  40d0bc:	e007      	b.n	40d0ce <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d0be:	b2da      	uxtb	r2, r3
  40d0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d0c2:	fb03 f202 	mul.w	r2, r3, r2
  40d0c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d0ca:	e000      	b.n	40d0ce <draw_letter_subpx+0x1da>
                px_opa = 0;
  40d0cc:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40d0ce:	ab1c      	add	r3, sp, #112	; 0x70
  40d0d0:	440b      	add	r3, r1
  40d0d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40d0d6:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40d0d8:	2903      	cmp	r1, #3
  40d0da:	d028      	beq.n	40d12e <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d0dc:	f1c5 0308 	rsb	r3, r5, #8
  40d0e0:	429c      	cmp	r4, r3
  40d0e2:	f280 8081 	bge.w	40d1e8 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40d0e6:	9b05      	ldr	r3, [sp, #20]
  40d0e8:	442b      	add	r3, r5
  40d0ea:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d0ec:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40d0f0:	3001      	adds	r0, #1
  40d0f2:	9b08      	ldr	r3, [sp, #32]
  40d0f4:	4298      	cmp	r0, r3
  40d0f6:	f280 808f 	bge.w	40d218 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d0fa:	7833      	ldrb	r3, [r6, #0]
  40d0fc:	ea0e 0203 	and.w	r2, lr, r3
  40d100:	9405      	str	r4, [sp, #20]
  40d102:	426b      	negs	r3, r5
  40d104:	1b1b      	subs	r3, r3, r4
  40d106:	3308      	adds	r3, #8
  40d108:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d10c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d110:	d0dc      	beq.n	40d0cc <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40d112:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d114:	2fff      	cmp	r7, #255	; 0xff
  40d116:	d0cc      	beq.n	40d0b2 <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d118:	2d08      	cmp	r5, #8
  40d11a:	d0d0      	beq.n	40d0be <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d11c:	b2db      	uxtb	r3, r3
  40d11e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d120:	5cd2      	ldrb	r2, [r2, r3]
  40d122:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d124:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d128:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d12c:	e7cf      	b.n	40d0ce <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d12e:	f898 9000 	ldrb.w	r9, [r8]
  40d132:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d136:	f009 0107 	and.w	r1, r9, #7
  40d13a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d13e:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40d142:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40d146:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d14a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40d14e:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40d152:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40d156:	fb0a fa0b 	mul.w	sl, sl, fp
  40d15a:	fb01 aa03 	mla	sl, r1, r3, sl
  40d15e:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40d162:	9b06      	ldr	r3, [sp, #24]
  40d164:	f36a 03c7 	bfi	r3, sl, #3, #5
  40d168:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d16a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40d16e:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40d172:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40d176:	fb0b f202 	mul.w	r2, fp, r2
  40d17a:	fb0a 2203 	mla	r2, sl, r3, r2
  40d17e:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40d182:	463b      	mov	r3, r7
  40d184:	f362 230c 	bfi	r3, r2, #8, #5
  40d188:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d18a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40d18e:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40d192:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40d196:	fb02 f909 	mul.w	r9, r2, r9
  40d19a:	fb0b 9303 	mla	r3, fp, r3, r9
  40d19e:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d1a2:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40d1a6:	f362 0702 	bfi	r7, r2, #0, #3
  40d1aa:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40d1ac:	f363 324f 	bfi	r2, r3, #13, #3
  40d1b0:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40d1b2:	b951      	cbnz	r1, 40d1ca <draw_letter_subpx+0x2d6>
  40d1b4:	f1bb 0f00 	cmp.w	fp, #0
  40d1b8:	d107      	bne.n	40d1ca <draw_letter_subpx+0x2d6>
  40d1ba:	f1ba 0f00 	cmp.w	sl, #0
  40d1be:	d104      	bne.n	40d1ca <draw_letter_subpx+0x2d6>
  40d1c0:	2300      	movs	r3, #0
  40d1c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d1c4:	f802 300c 	strb.w	r3, [r2, ip]
  40d1c8:	e003      	b.n	40d1d2 <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d1ca:	23ff      	movs	r3, #255	; 0xff
  40d1cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d1ce:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40d1d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d1d4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40d1d8:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40d1dc:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40d1e0:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40d1e4:	2100      	movs	r1, #0
  40d1e6:	e779      	b.n	40d0dc <draw_letter_subpx+0x1e8>
                map_p++;
  40d1e8:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d1ea:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40d1ee:	2400      	movs	r4, #0
  40d1f0:	e77e      	b.n	40d0f0 <draw_letter_subpx+0x1fc>
  40d1f2:	bf00      	nop
  40d1f4:	00423628 	.word	0x00423628
  40d1f8:	00423630 	.word	0x00423630
  40d1fc:	00423640 	.word	0x00423640
  40d200:	0042362c 	.word	0x0042362c
  40d204:	55555556 	.word	0x55555556
  40d208:	00409055 	.word	0x00409055
  40d20c:	00414505 	.word	0x00414505
  40d210:	0040f3f5 	.word	0x0040f3f5
  40d214:	00415fdd 	.word	0x00415fdd
  40d218:	46e3      	mov	fp, ip
  40d21a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40d21e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d220:	2b00      	cmp	r3, #0
  40d222:	d134      	bne.n	40d28e <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d224:	9b08      	ldr	r3, [sp, #32]
  40d226:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d228:	eba3 0902 	sub.w	r9, r3, r2
  40d22c:	465b      	mov	r3, fp
  40d22e:	444b      	add	r3, r9
  40d230:	9912      	ldr	r1, [sp, #72]	; 0x48
  40d232:	4299      	cmp	r1, r3
  40d234:	dd4c      	ble.n	40d2d0 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40d236:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d23a:	3301      	adds	r3, #1
  40d23c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40d240:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d244:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d246:	9a08      	ldr	r2, [sp, #32]
  40d248:	1a9b      	subs	r3, r3, r2
  40d24a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d24c:	4413      	add	r3, r2
  40d24e:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40d252:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40d256:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d25a:	4b38      	ldr	r3, [pc, #224]	; (40d33c <draw_letter_subpx+0x448>)
  40d25c:	fb83 2309 	smull	r2, r3, r3, r9
  40d260:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40d264:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d266:	4499      	add	r9, r3
  40d268:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40d26c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d26e:	3301      	adds	r3, #1
  40d270:	930d      	str	r3, [sp, #52]	; 0x34
  40d272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d274:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d276:	4293      	cmp	r3, r2
  40d278:	da42      	bge.n	40d300 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40d27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d27c:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d280:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d282:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40d284:	2100      	movs	r1, #0
  40d286:	469c      	mov	ip, r3
  40d288:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40d28c:	e731      	b.n	40d0f2 <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40d28e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d292:	4413      	add	r3, r2
  40d294:	469a      	mov	sl, r3
  40d296:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40d29a:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40d29e:	b28a      	uxth	r2, r1
  40d2a0:	1a9b      	subs	r3, r3, r2
  40d2a2:	b29b      	uxth	r3, r3
  40d2a4:	3301      	adds	r3, #1
  40d2a6:	b21b      	sxth	r3, r3
  40d2a8:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40d2ac:	4650      	mov	r0, sl
  40d2ae:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40d34c <draw_letter_subpx+0x458>
  40d2b2:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d2b4:	2800      	cmp	r0, #0
  40d2b6:	d1b5      	bne.n	40d224 <draw_letter_subpx+0x330>
  40d2b8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40d2bc:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40d2c0:	1ac9      	subs	r1, r1, r3
  40d2c2:	b289      	uxth	r1, r1
  40d2c4:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40d2c6:	b209      	sxth	r1, r1
  40d2c8:	4650      	mov	r0, sl
  40d2ca:	4b1d      	ldr	r3, [pc, #116]	; (40d340 <draw_letter_subpx+0x44c>)
  40d2cc:	4798      	blx	r3
  40d2ce:	e7a9      	b.n	40d224 <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d2d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d2d2:	9302      	str	r3, [sp, #8]
  40d2d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d2d6:	9301      	str	r3, [sp, #4]
  40d2d8:	2302      	movs	r3, #2
  40d2da:	9300      	str	r3, [sp, #0]
  40d2dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d2e0:	a91a      	add	r1, sp, #104	; 0x68
  40d2e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d2e4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40d344 <draw_letter_subpx+0x450>
  40d2e8:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40d2ea:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40d2ee:	3301      	adds	r3, #1
  40d2f0:	b21b      	sxth	r3, r3
  40d2f2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40d2f6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40d2fa:	2300      	movs	r3, #0
  40d2fc:	9310      	str	r3, [sp, #64]	; 0x40
  40d2fe:	e7a1      	b.n	40d244 <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40d300:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40d304:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d308:	429a      	cmp	r2, r3
  40d30a:	d00e      	beq.n	40d32a <draw_letter_subpx+0x436>
        map_area.y2--;
  40d30c:	3b01      	subs	r3, #1
  40d30e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d312:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d314:	9302      	str	r3, [sp, #8]
  40d316:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d318:	9301      	str	r3, [sp, #4]
  40d31a:	2302      	movs	r3, #2
  40d31c:	9300      	str	r3, [sp, #0]
  40d31e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d322:	a91a      	add	r1, sp, #104	; 0x68
  40d324:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d326:	4c07      	ldr	r4, [pc, #28]	; (40d344 <draw_letter_subpx+0x450>)
  40d328:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d32a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d32c:	4c06      	ldr	r4, [pc, #24]	; (40d348 <draw_letter_subpx+0x454>)
  40d32e:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40d330:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d332:	47a0      	blx	r4
}
  40d334:	b01d      	add	sp, #116	; 0x74
  40d336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d33a:	bf00      	nop
  40d33c:	55555556 	.word	0x55555556
  40d340:	00416169 	.word	0x00416169
  40d344:	0040c1f1 	.word	0x0040c1f1
  40d348:	00415d8d 	.word	0x00415d8d
  40d34c:	0040f32d 	.word	0x0040f32d

0040d350 <draw_letter_normal>:
{
  40d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d354:	b093      	sub	sp, #76	; 0x4c
  40d356:	468e      	mov	lr, r1
  40d358:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40d35c:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40d360:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40d362:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d366:	f1ba 0f03 	cmp.w	sl, #3
  40d36a:	d00e      	beq.n	40d38a <draw_letter_normal+0x3a>
    switch(bpp) {
  40d36c:	f10a 34ff 	add.w	r4, sl, #4294967295
  40d370:	2c07      	cmp	r4, #7
  40d372:	f200 8147 	bhi.w	40d604 <draw_letter_normal+0x2b4>
  40d376:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d37a:	000b      	.short	0x000b
  40d37c:	0145001e 	.word	0x0145001e
  40d380:	01450011 	.word	0x01450011
  40d384:	01450145 	.word	0x01450145
  40d388:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40d38a:	f04f 0a04 	mov.w	sl, #4
  40d38e:	e7ed      	b.n	40d36c <draw_letter_normal+0x1c>
            shades = 2;
  40d390:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40d392:	2180      	movs	r1, #128	; 0x80
  40d394:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40d396:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40d638 <draw_letter_normal+0x2e8>
  40d39a:	e011      	b.n	40d3c0 <draw_letter_normal+0x70>
            shades = 16;
  40d39c:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40d39e:	21f0      	movs	r1, #240	; 0xf0
  40d3a0:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40d3a2:	f8df b298 	ldr.w	fp, [pc, #664]	; 40d63c <draw_letter_normal+0x2ec>
            break;
  40d3a6:	e00b      	b.n	40d3c0 <draw_letter_normal+0x70>
            shades = 256;
  40d3a8:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40d3ac:	21ff      	movs	r1, #255	; 0xff
  40d3ae:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40d3b0:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40d640 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40d3b4:	e004      	b.n	40d3c0 <draw_letter_normal+0x70>
            shades = 4;
  40d3b6:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40d3b8:	21c0      	movs	r1, #192	; 0xc0
  40d3ba:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40d3bc:	f8df b284 	ldr.w	fp, [pc, #644]	; 40d644 <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40d3c0:	2efc      	cmp	r6, #252	; 0xfc
  40d3c2:	d821      	bhi.n	40d408 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40d3c4:	4c91      	ldr	r4, [pc, #580]	; (40d60c <draw_letter_normal+0x2bc>)
  40d3c6:	7824      	ldrb	r4, [r4, #0]
  40d3c8:	42a6      	cmp	r6, r4
  40d3ca:	d001      	beq.n	40d3d0 <draw_letter_normal+0x80>
  40d3cc:	2500      	movs	r5, #0
  40d3ce:	e009      	b.n	40d3e4 <draw_letter_normal+0x94>
  40d3d0:	4c8f      	ldr	r4, [pc, #572]	; (40d610 <draw_letter_normal+0x2c0>)
  40d3d2:	6824      	ldr	r4, [r4, #0]
  40d3d4:	45a2      	cmp	sl, r4
  40d3d6:	d010      	beq.n	40d3fa <draw_letter_normal+0xaa>
  40d3d8:	2500      	movs	r5, #0
  40d3da:	e003      	b.n	40d3e4 <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d3dc:	4631      	mov	r1, r6
  40d3de:	4c8d      	ldr	r4, [pc, #564]	; (40d614 <draw_letter_normal+0x2c4>)
  40d3e0:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40d3e2:	3501      	adds	r5, #1
  40d3e4:	42af      	cmp	r7, r5
  40d3e6:	d908      	bls.n	40d3fa <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d3e8:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40d3ec:	29ff      	cmp	r1, #255	; 0xff
  40d3ee:	d0f5      	beq.n	40d3dc <draw_letter_normal+0x8c>
  40d3f0:	fb01 f106 	mul.w	r1, r1, r6
  40d3f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40d3f8:	e7f1      	b.n	40d3de <draw_letter_normal+0x8e>
        prev_opa = opa;
  40d3fa:	4c84      	ldr	r4, [pc, #528]	; (40d60c <draw_letter_normal+0x2bc>)
  40d3fc:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40d3fe:	4c84      	ldr	r4, [pc, #528]	; (40d610 <draw_letter_normal+0x2c0>)
  40d400:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40d404:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40d614 <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40d408:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40d40a:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d40c:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d410:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d414:	4282      	cmp	r2, r0
  40d416:	dd5a      	ble.n	40d4ce <draw_letter_normal+0x17e>
  40d418:	1a12      	subs	r2, r2, r0
  40d41a:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d41c:	182a      	adds	r2, r5, r0
  40d41e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40d422:	42b2      	cmp	r2, r6
  40d424:	dd56      	ble.n	40d4d4 <draw_letter_normal+0x184>
  40d426:	1a36      	subs	r6, r6, r0
  40d428:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d42c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d430:	4572      	cmp	r2, lr
  40d432:	dd51      	ble.n	40d4d8 <draw_letter_normal+0x188>
  40d434:	eba2 020e 	sub.w	r2, r2, lr
  40d438:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d43a:	eb07 020e 	add.w	r2, r7, lr
  40d43e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40d442:	42b2      	cmp	r2, r6
  40d444:	dd4b      	ble.n	40d4de <draw_letter_normal+0x18e>
  40d446:	eba6 060e 	sub.w	r6, r6, lr
  40d44a:	1c72      	adds	r2, r6, #1
  40d44c:	9209      	str	r2, [sp, #36]	; 0x24
  40d44e:	930e      	str	r3, [sp, #56]	; 0x38
  40d450:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40d454:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d456:	9b07      	ldr	r3, [sp, #28]
  40d458:	fb0a f303 	mul.w	r3, sl, r3
  40d45c:	9a06      	ldr	r2, [sp, #24]
  40d45e:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40d462:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40d464:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d468:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40d46c:	4b6a      	ldr	r3, [pc, #424]	; (40d618 <draw_letter_normal+0x2c8>)
  40d46e:	4798      	blx	r3
  40d470:	4b6a      	ldr	r3, [pc, #424]	; (40d61c <draw_letter_normal+0x2cc>)
  40d472:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40d474:	fb07 f705 	mul.w	r7, r7, r5
  40d478:	42b8      	cmp	r0, r7
  40d47a:	bfa8      	it	ge
  40d47c:	4638      	movge	r0, r7
  40d47e:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d480:	4b67      	ldr	r3, [pc, #412]	; (40d620 <draw_letter_normal+0x2d0>)
  40d482:	4798      	blx	r3
  40d484:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40d486:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40d48a:	9b07      	ldr	r3, [sp, #28]
  40d48c:	18d3      	adds	r3, r2, r3
  40d48e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40d492:	eb02 0308 	add.w	r3, r2, r8
  40d496:	b29b      	uxth	r3, r3
  40d498:	3b01      	subs	r3, #1
  40d49a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40d49e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d4a0:	9a06      	ldr	r2, [sp, #24]
  40d4a2:	4411      	add	r1, r2
  40d4a4:	b20b      	sxth	r3, r1
  40d4a6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40d4aa:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d4ae:	4b5d      	ldr	r3, [pc, #372]	; (40d624 <draw_letter_normal+0x2d4>)
  40d4b0:	4798      	blx	r3
  40d4b2:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40d4b4:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40d4b8:	9b07      	ldr	r3, [sp, #28]
  40d4ba:	442b      	add	r3, r5
  40d4bc:	eba3 0308 	sub.w	r3, r3, r8
  40d4c0:	fb03 f30a 	mul.w	r3, r3, sl
  40d4c4:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40d4c6:	f04f 0e00 	mov.w	lr, #0
  40d4ca:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40d4cc:	e03f      	b.n	40d54e <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d4ce:	2200      	movs	r2, #0
  40d4d0:	9207      	str	r2, [sp, #28]
  40d4d2:	e7a3      	b.n	40d41c <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d4d4:	46a8      	mov	r8, r5
  40d4d6:	e7a9      	b.n	40d42c <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d4d8:	2200      	movs	r2, #0
  40d4da:	9206      	str	r2, [sp, #24]
  40d4dc:	e7ad      	b.n	40d43a <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d4de:	9709      	str	r7, [sp, #36]	; 0x24
  40d4e0:	e7b5      	b.n	40d44e <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40d4e2:	2300      	movs	r3, #0
  40d4e4:	f809 3005 	strb.w	r3, [r9, r5]
  40d4e8:	e012      	b.n	40d510 <draw_letter_normal+0x1c0>
                map_p++;
  40d4ea:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d4ec:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40d4ee:	2400      	movs	r4, #0
            mask_p++;
  40d4f0:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40d4f2:	3101      	adds	r1, #1
  40d4f4:	4541      	cmp	r1, r8
  40d4f6:	da11      	bge.n	40d51c <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40d4f8:	7833      	ldrb	r3, [r6, #0]
  40d4fa:	4003      	ands	r3, r0
  40d4fc:	1b3a      	subs	r2, r7, r4
  40d4fe:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40d500:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d504:	d0ed      	beq.n	40d4e2 <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40d506:	b2db      	uxtb	r3, r3
  40d508:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40d50c:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40d510:	42bc      	cmp	r4, r7
  40d512:	d2ea      	bcs.n	40d4ea <draw_letter_normal+0x19a>
                col_bit += bpp;
  40d514:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40d516:	fa20 f00a 	lsr.w	r0, r0, sl
  40d51a:	e7e9      	b.n	40d4f0 <draw_letter_normal+0x1a0>
  40d51c:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40d51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d520:	bb03      	cbnz	r3, 40d564 <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d522:	9b07      	ldr	r3, [sp, #28]
  40d524:	eba8 0303 	sub.w	r3, r8, r3
  40d528:	442b      	add	r3, r5
  40d52a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d52c:	429a      	cmp	r2, r3
  40d52e:	d938      	bls.n	40d5a2 <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40d530:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d534:	3301      	adds	r3, #1
  40d536:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40d53a:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40d53c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d53e:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40d540:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40d544:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40d548:	9b06      	ldr	r3, [sp, #24]
  40d54a:	3301      	adds	r3, #1
  40d54c:	9306      	str	r3, [sp, #24]
  40d54e:	9b06      	ldr	r3, [sp, #24]
  40d550:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d552:	4293      	cmp	r3, r2
  40d554:	da3d      	bge.n	40d5d2 <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40d556:	9b05      	ldr	r3, [sp, #20]
  40d558:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d55c:	4675      	mov	r5, lr
  40d55e:	9907      	ldr	r1, [sp, #28]
  40d560:	9f08      	ldr	r7, [sp, #32]
  40d562:	e7c7      	b.n	40d4f4 <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40d564:	eb09 030e 	add.w	r3, r9, lr
  40d568:	4618      	mov	r0, r3
  40d56a:	930f      	str	r3, [sp, #60]	; 0x3c
  40d56c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40d570:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40d574:	b28a      	uxth	r2, r1
  40d576:	1a9b      	subs	r3, r3, r2
  40d578:	b29b      	uxth	r3, r3
  40d57a:	3301      	adds	r3, #1
  40d57c:	b21b      	sxth	r3, r3
  40d57e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40d582:	4f29      	ldr	r7, [pc, #164]	; (40d628 <draw_letter_normal+0x2d8>)
  40d584:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d586:	2800      	cmp	r0, #0
  40d588:	d1cb      	bne.n	40d522 <draw_letter_normal+0x1d2>
  40d58a:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40d58e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40d592:	1ac9      	subs	r1, r1, r3
  40d594:	b289      	uxth	r1, r1
  40d596:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40d598:	b209      	sxth	r1, r1
  40d59a:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40d59c:	4b23      	ldr	r3, [pc, #140]	; (40d62c <draw_letter_normal+0x2dc>)
  40d59e:	4798      	blx	r3
  40d5a0:	e7bf      	b.n	40d522 <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40d5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d5a4:	9302      	str	r3, [sp, #8]
  40d5a6:	23ff      	movs	r3, #255	; 0xff
  40d5a8:	9301      	str	r3, [sp, #4]
  40d5aa:	2302      	movs	r3, #2
  40d5ac:	9300      	str	r3, [sp, #0]
  40d5ae:	464b      	mov	r3, r9
  40d5b0:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d5b4:	a910      	add	r1, sp, #64	; 0x40
  40d5b6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d5b8:	4d1d      	ldr	r5, [pc, #116]	; (40d630 <draw_letter_normal+0x2e0>)
  40d5ba:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40d5bc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40d5c0:	3301      	adds	r3, #1
  40d5c2:	b21b      	sxth	r3, r3
  40d5c4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40d5c8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40d5cc:	f04f 0e00 	mov.w	lr, #0
  40d5d0:	e7b4      	b.n	40d53c <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40d5d2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40d5d6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d5da:	429a      	cmp	r2, r3
  40d5dc:	d00f      	beq.n	40d5fe <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40d5de:	3b01      	subs	r3, #1
  40d5e0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40d5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d5e6:	9302      	str	r3, [sp, #8]
  40d5e8:	23ff      	movs	r3, #255	; 0xff
  40d5ea:	9301      	str	r3, [sp, #4]
  40d5ec:	2302      	movs	r3, #2
  40d5ee:	9300      	str	r3, [sp, #0]
  40d5f0:	464b      	mov	r3, r9
  40d5f2:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d5f6:	a910      	add	r1, sp, #64	; 0x40
  40d5f8:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d5fa:	4c0d      	ldr	r4, [pc, #52]	; (40d630 <draw_letter_normal+0x2e0>)
  40d5fc:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d5fe:	4648      	mov	r0, r9
  40d600:	4b0c      	ldr	r3, [pc, #48]	; (40d634 <draw_letter_normal+0x2e4>)
  40d602:	4798      	blx	r3
}
  40d604:	b013      	add	sp, #76	; 0x4c
  40d606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d60a:	bf00      	nop
  40d60c:	2040c71c 	.word	0x2040c71c
  40d610:	2040c718 	.word	0x2040c718
  40d614:	2040c618 	.word	0x2040c618
  40d618:	00409055 	.word	0x00409055
  40d61c:	00414401 	.word	0x00414401
  40d620:	00415fdd 	.word	0x00415fdd
  40d624:	0040f3f5 	.word	0x0040f3f5
  40d628:	0040f32d 	.word	0x0040f32d
  40d62c:	00416169 	.word	0x00416169
  40d630:	0040c0d1 	.word	0x0040c0d1
  40d634:	00415d8d 	.word	0x00415d8d
  40d638:	00423628 	.word	0x00423628
  40d63c:	00423630 	.word	0x00423630
  40d640:	00423640 	.word	0x00423640
  40d644:	0042362c 	.word	0x0042362c

0040d648 <lv_draw_letter>:
{
  40d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d64c:	b089      	sub	sp, #36	; 0x24
  40d64e:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40d652:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40d656:	2d01      	cmp	r5, #1
  40d658:	d937      	bls.n	40d6ca <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40d65a:	2dfd      	cmp	r5, #253	; 0xfd
  40d65c:	d900      	bls.n	40d660 <lv_draw_letter+0x18>
  40d65e:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40d660:	b39a      	cbz	r2, 40d6ca <lv_draw_letter+0x82>
  40d662:	469b      	mov	fp, r3
  40d664:	4614      	mov	r4, r2
  40d666:	4689      	mov	r9, r1
  40d668:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40d66a:	2300      	movs	r3, #0
  40d66c:	465a      	mov	r2, fp
  40d66e:	a905      	add	r1, sp, #20
  40d670:	4620      	mov	r0, r4
  40d672:	4e2c      	ldr	r6, [pc, #176]	; (40d724 <lv_draw_letter+0xdc>)
  40d674:	47b0      	blx	r6
    if(g_ret == false)  {
  40d676:	b340      	cbz	r0, 40d6ca <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40d678:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40d67c:	b32b      	cbz	r3, 40d6ca <lv_draw_letter+0x82>
  40d67e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40d682:	b312      	cbz	r2, 40d6ca <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40d684:	f9b7 a000 	ldrsh.w	sl, [r7]
  40d688:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40d68c:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40d68e:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40d692:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40d696:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40d69a:	1a09      	subs	r1, r1, r0
  40d69c:	440f      	add	r7, r1
  40d69e:	1aff      	subs	r7, r7, r3
  40d6a0:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40d6a4:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40d6a6:	4452      	add	r2, sl
  40d6a8:	f9b9 1000 	ldrsh.w	r1, [r9]
  40d6ac:	428a      	cmp	r2, r1
  40d6ae:	db0c      	blt.n	40d6ca <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40d6b0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40d6b4:	4592      	cmp	sl, r2
  40d6b6:	dc08      	bgt.n	40d6ca <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40d6b8:	443b      	add	r3, r7
  40d6ba:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40d6be:	4293      	cmp	r3, r2
  40d6c0:	db03      	blt.n	40d6ca <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40d6c2:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40d6c6:	429f      	cmp	r7, r3
  40d6c8:	dd02      	ble.n	40d6d0 <lv_draw_letter+0x88>
}
  40d6ca:	b009      	add	sp, #36	; 0x24
  40d6cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40d6d0:	4659      	mov	r1, fp
  40d6d2:	4620      	mov	r0, r4
  40d6d4:	4b14      	ldr	r3, [pc, #80]	; (40d728 <lv_draw_letter+0xe0>)
  40d6d6:	4798      	blx	r3
    if(map_p == NULL) {
  40d6d8:	2800      	cmp	r0, #0
  40d6da:	d0f6      	beq.n	40d6ca <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40d6dc:	7b22      	ldrb	r2, [r4, #12]
  40d6de:	f012 0f03 	tst.w	r2, #3
  40d6e2:	d00f      	beq.n	40d704 <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d6e4:	f8cd 800c 	str.w	r8, [sp, #12]
  40d6e8:	9502      	str	r5, [sp, #8]
  40d6ea:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d6ee:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d6f2:	9000      	str	r0, [sp, #0]
  40d6f4:	464b      	mov	r3, r9
  40d6f6:	aa05      	add	r2, sp, #20
  40d6f8:	b239      	sxth	r1, r7
  40d6fa:	fa0f f08a 	sxth.w	r0, sl
  40d6fe:	4c0b      	ldr	r4, [pc, #44]	; (40d72c <lv_draw_letter+0xe4>)
  40d700:	47a0      	blx	r4
  40d702:	e7e2      	b.n	40d6ca <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d704:	f8cd 800c 	str.w	r8, [sp, #12]
  40d708:	9502      	str	r5, [sp, #8]
  40d70a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d70e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d712:	9000      	str	r0, [sp, #0]
  40d714:	464b      	mov	r3, r9
  40d716:	aa05      	add	r2, sp, #20
  40d718:	b239      	sxth	r1, r7
  40d71a:	fa0f f08a 	sxth.w	r0, sl
  40d71e:	4c04      	ldr	r4, [pc, #16]	; (40d730 <lv_draw_letter+0xe8>)
  40d720:	47a0      	blx	r4
  40d722:	e7d2      	b.n	40d6ca <lv_draw_letter+0x82>
  40d724:	00413245 	.word	0x00413245
  40d728:	0041323d 	.word	0x0041323d
  40d72c:	0040cef5 	.word	0x0040cef5
  40d730:	0040d351 	.word	0x0040d351

0040d734 <lv_draw_label_dsc_init>:
{
  40d734:	b510      	push	{r4, lr}
  40d736:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40d738:	2124      	movs	r1, #36	; 0x24
  40d73a:	4b0e      	ldr	r3, [pc, #56]	; (40d774 <lv_draw_label_dsc_init+0x40>)
  40d73c:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40d73e:	23ff      	movs	r3, #255	; 0xff
  40d740:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40d742:	2300      	movs	r3, #0
  40d744:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40d746:	4a0c      	ldr	r2, [pc, #48]	; (40d778 <lv_draw_label_dsc_init+0x44>)
  40d748:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40d74a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40d74e:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40d750:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40d752:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40d754:	7922      	ldrb	r2, [r4, #4]
  40d756:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40d75a:	f363 02c7 	bfi	r2, r3, #3, #5
  40d75e:	7122      	strb	r2, [r4, #4]
  40d760:	7962      	ldrb	r2, [r4, #5]
  40d762:	f042 021f 	orr.w	r2, r2, #31
  40d766:	f363 1247 	bfi	r2, r3, #5, #3
  40d76a:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40d76c:	f884 3020 	strb.w	r3, [r4, #32]
  40d770:	bd10      	pop	{r4, pc}
  40d772:	bf00      	nop
  40d774:	00416169 	.word	0x00416169
  40d778:	2040002c 	.word	0x2040002c

0040d77c <lv_draw_label>:
{
  40d77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d780:	b0b7      	sub	sp, #220	; 0xdc
  40d782:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40d784:	7b15      	ldrb	r5, [r2, #12]
  40d786:	2d02      	cmp	r5, #2
  40d788:	d903      	bls.n	40d792 <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40d78a:	6895      	ldr	r5, [r2, #8]
  40d78c:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40d78e:	781d      	ldrb	r5, [r3, #0]
  40d790:	b915      	cbnz	r5, 40d798 <lv_draw_label+0x1c>
}
  40d792:	b037      	add	sp, #220	; 0xdc
  40d794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d798:	930c      	str	r3, [sp, #48]	; 0x30
  40d79a:	4616      	mov	r6, r2
  40d79c:	460a      	mov	r2, r1
  40d79e:	9109      	str	r1, [sp, #36]	; 0x24
  40d7a0:	4605      	mov	r5, r0
  40d7a2:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40d7a4:	4601      	mov	r1, r0
  40d7a6:	a834      	add	r0, sp, #208	; 0xd0
  40d7a8:	4ba8      	ldr	r3, [pc, #672]	; (40da4c <lv_draw_label+0x2d0>)
  40d7aa:	4798      	blx	r3
    if(!clip_ok) return;
  40d7ac:	2800      	cmp	r0, #0
  40d7ae:	d0f0      	beq.n	40d792 <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40d7b0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d7b4:	f012 0f02 	tst.w	r2, #2
  40d7b8:	d12b      	bne.n	40d812 <lv_draw_label+0x96>
  40d7ba:	88ab      	ldrh	r3, [r5, #4]
  40d7bc:	882a      	ldrh	r2, [r5, #0]
  40d7be:	1a9b      	subs	r3, r3, r2
  40d7c0:	b29b      	uxth	r3, r3
  40d7c2:	3301      	adds	r3, #1
  40d7c4:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40d7c6:	9a06      	ldr	r2, [sp, #24]
  40d7c8:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40d7cc:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40d7d0:	4442      	add	r2, r8
  40d7d2:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40d7d4:	9810      	ldr	r0, [sp, #64]	; 0x40
  40d7d6:	f9b0 2000 	ldrsh.w	r2, [r0]
  40d7da:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40d7de:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40d7e2:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40d7e6:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40d7e8:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40d7ec:	440a      	add	r2, r1
  40d7ee:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40d7f2:	1c22      	adds	r2, r4, #0
  40d7f4:	bf18      	it	ne
  40d7f6:	2201      	movne	r2, #1
  40d7f8:	2900      	cmp	r1, #0
  40d7fa:	bf14      	ite	ne
  40d7fc:	2100      	movne	r1, #0
  40d7fe:	f002 0101 	andeq.w	r1, r2, #1
  40d802:	b341      	cbz	r1, 40d856 <lv_draw_label+0xda>
  40d804:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40d808:	2900      	cmp	r1, #0
  40d80a:	db13      	blt.n	40d834 <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40d80c:	f04f 37ff 	mov.w	r7, #4294967295
  40d810:	e023      	b.n	40d85a <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40d812:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d816:	9202      	str	r2, [sp, #8]
  40d818:	f647 4218 	movw	r2, #31768	; 0x7c18
  40d81c:	9201      	str	r2, [sp, #4]
  40d81e:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40d822:	9200      	str	r2, [sp, #0]
  40d824:	68b2      	ldr	r2, [r6, #8]
  40d826:	990c      	ldr	r1, [sp, #48]	; 0x30
  40d828:	a818      	add	r0, sp, #96	; 0x60
  40d82a:	4d89      	ldr	r5, [pc, #548]	; (40da50 <lv_draw_label+0x2d4>)
  40d82c:	47a8      	blx	r5
        w = p.x;
  40d82e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40d832:	e7c8      	b.n	40d7c6 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40d834:	68a0      	ldr	r0, [r4, #8]
  40d836:	1a40      	subs	r0, r0, r1
  40d838:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40d83c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40d840:	980d      	ldr	r0, [sp, #52]	; 0x34
  40d842:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40d846:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40d84a:	dd02      	ble.n	40d852 <lv_draw_label+0xd6>
            hint->line_start = -1;
  40d84c:	f04f 31ff 	mov.w	r1, #4294967295
  40d850:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40d852:	6827      	ldr	r7, [r4, #0]
  40d854:	e001      	b.n	40d85a <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40d856:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40d85a:	2f00      	cmp	r7, #0
  40d85c:	bfb4      	ite	lt
  40d85e:	2200      	movlt	r2, #0
  40d860:	f002 0201 	andge.w	r2, r2, #1
  40d864:	b1d2      	cbz	r2, 40d89c <lv_draw_label+0x120>
        pos.y += hint->y;
  40d866:	6862      	ldr	r2, [r4, #4]
  40d868:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40d86c:	440a      	add	r2, r1
  40d86e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d872:	b21b      	sxth	r3, r3
  40d874:	4619      	mov	r1, r3
  40d876:	930e      	str	r3, [sp, #56]	; 0x38
  40d878:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40d87c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d880:	9300      	str	r3, [sp, #0]
  40d882:	460b      	mov	r3, r1
  40d884:	9906      	ldr	r1, [sp, #24]
  40d886:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d888:	4438      	add	r0, r7
  40d88a:	4d72      	ldr	r5, [pc, #456]	; (40da54 <lv_draw_label+0x2d8>)
  40d88c:	47a8      	blx	r5
  40d88e:	eb07 0b00 	add.w	fp, r7, r0
  40d892:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40d896:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40d89a:	e007      	b.n	40d8ac <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40d89c:	2700      	movs	r7, #0
  40d89e:	e7e8      	b.n	40d872 <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40d8a0:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40d8a2:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40d8a4:	2b00      	cmp	r3, #0
  40d8a6:	f43f af74 	beq.w	40d792 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d8aa:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40d8ac:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40d8b0:	4443      	add	r3, r8
  40d8b2:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40d8b6:	4293      	cmp	r3, r2
  40d8b8:	da28      	bge.n	40d90c <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40d8ba:	eb0a 050b 	add.w	r5, sl, fp
  40d8be:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40d8c2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40d8c6:	9300      	str	r3, [sp, #0]
  40d8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d8ca:	9906      	ldr	r1, [sp, #24]
  40d8cc:	4628      	mov	r0, r5
  40d8ce:	4f61      	ldr	r7, [pc, #388]	; (40da54 <lv_draw_label+0x2d8>)
  40d8d0:	47b8      	blx	r7
  40d8d2:	4458      	add	r0, fp
        pos.y += line_height;
  40d8d4:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40d8d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d8da:	4413      	add	r3, r2
  40d8dc:	b21b      	sxth	r3, r3
  40d8de:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40d8e2:	2c00      	cmp	r4, #0
  40d8e4:	d0dc      	beq.n	40d8a0 <lv_draw_label+0x124>
  40d8e6:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40d8ea:	dbd9      	blt.n	40d8a0 <lv_draw_label+0x124>
  40d8ec:	6823      	ldr	r3, [r4, #0]
  40d8ee:	2b00      	cmp	r3, #0
  40d8f0:	dad6      	bge.n	40d8a0 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40d8f2:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40d8f6:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40d8fa:	9910      	ldr	r1, [sp, #64]	; 0x40
  40d8fc:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40d900:	1a9b      	subs	r3, r3, r2
  40d902:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40d904:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40d908:	60a3      	str	r3, [r4, #8]
  40d90a:	e7c9      	b.n	40d8a0 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40d90c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d910:	f012 0f04 	tst.w	r2, #4
  40d914:	d124      	bne.n	40d960 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40d916:	f012 0f08 	tst.w	r2, #8
  40d91a:	d13d      	bne.n	40d998 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40d91c:	7b33      	ldrb	r3, [r6, #12]
  40d91e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40d920:	6973      	ldr	r3, [r6, #20]
  40d922:	4619      	mov	r1, r3
  40d924:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40d926:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40d92a:	4543      	cmp	r3, r8
  40d92c:	d802      	bhi.n	40d934 <lv_draw_label+0x1b8>
  40d92e:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40d930:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40d932:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40d934:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40d938:	f013 0f03 	tst.w	r3, #3
  40d93c:	d144      	bne.n	40d9c8 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40d93e:	a81a      	add	r0, sp, #104	; 0x68
  40d940:	4b45      	ldr	r3, [pc, #276]	; (40da58 <lv_draw_label+0x2dc>)
  40d942:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40d944:	88b3      	ldrh	r3, [r6, #4]
  40d946:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40d94a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40d94e:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40d950:	2300      	movs	r3, #0
  40d952:	9311      	str	r3, [sp, #68]	; 0x44
  40d954:	f8cd b01c 	str.w	fp, [sp, #28]
  40d958:	46bb      	mov	fp, r7
  40d95a:	46c2      	mov	sl, r8
  40d95c:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40d95e:	e170      	b.n	40dc42 <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d960:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d964:	9200      	str	r2, [sp, #0]
  40d966:	9a06      	ldr	r2, [sp, #24]
  40d968:	ebab 0107 	sub.w	r1, fp, r7
  40d96c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d96e:	4438      	add	r0, r7
  40d970:	4c3a      	ldr	r4, [pc, #232]	; (40da5c <lv_draw_label+0x2e0>)
  40d972:	47a0      	blx	r4
  40d974:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d976:	8893      	ldrh	r3, [r2, #4]
  40d978:	8812      	ldrh	r2, [r2, #0]
  40d97a:	1a9b      	subs	r3, r3, r2
  40d97c:	b29b      	uxth	r3, r3
  40d97e:	3301      	adds	r3, #1
  40d980:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40d982:	1a1b      	subs	r3, r3, r0
  40d984:	d406      	bmi.n	40d994 <lv_draw_label+0x218>
  40d986:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40d98a:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40d98e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d992:	e7c3      	b.n	40d91c <lv_draw_label+0x1a0>
  40d994:	3301      	adds	r3, #1
  40d996:	e7f6      	b.n	40d986 <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40d998:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40d99c:	9200      	str	r2, [sp, #0]
  40d99e:	9a06      	ldr	r2, [sp, #24]
  40d9a0:	ebab 0107 	sub.w	r1, fp, r7
  40d9a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d9a6:	4438      	add	r0, r7
  40d9a8:	4c2c      	ldr	r4, [pc, #176]	; (40da5c <lv_draw_label+0x2e0>)
  40d9aa:	47a0      	blx	r4
  40d9ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40d9ae:	8893      	ldrh	r3, [r2, #4]
  40d9b0:	8812      	ldrh	r2, [r2, #0]
  40d9b2:	1a9b      	subs	r3, r3, r2
  40d9b4:	b29b      	uxth	r3, r3
  40d9b6:	3301      	adds	r3, #1
  40d9b8:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40d9ba:	1a1b      	subs	r3, r3, r0
  40d9bc:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40d9c0:	4413      	add	r3, r2
  40d9c2:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40d9c6:	e7a9      	b.n	40d91c <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40d9c8:	a830      	add	r0, sp, #192	; 0xc0
  40d9ca:	4b25      	ldr	r3, [pc, #148]	; (40da60 <lv_draw_label+0x2e4>)
  40d9cc:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40d9ce:	8833      	ldrh	r3, [r6, #0]
  40d9d0:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40d9d4:	9b06      	ldr	r3, [sp, #24]
  40d9d6:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40d9da:	b173      	cbz	r3, 40d9fa <lv_draw_label+0x27e>
  40d9dc:	b21b      	sxth	r3, r3
  40d9de:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40d9e2:	7b33      	ldrb	r3, [r6, #12]
  40d9e4:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40d9e8:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40d9ec:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40d9f0:	f362 0301 	bfi	r3, r2, #0, #2
  40d9f4:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40d9f8:	e7a1      	b.n	40d93e <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40d9fa:	2301      	movs	r3, #1
  40d9fc:	e7ef      	b.n	40d9de <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40d9fe:	4b19      	ldr	r3, [pc, #100]	; (40da64 <lv_draw_label+0x2e8>)
  40da00:	681b      	ldr	r3, [r3, #0]
  40da02:	4459      	add	r1, fp
  40da04:	980c      	ldr	r0, [sp, #48]	; 0x30
  40da06:	4798      	blx	r3
  40da08:	9008      	str	r0, [sp, #32]
  40da0a:	e093      	b.n	40db34 <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40da0c:	b91f      	cbnz	r7, 40da16 <lv_draw_label+0x29a>
                        par_start = i;
  40da0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40da10:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40da12:	2701      	movs	r7, #1
                        continue;
  40da14:	e07c      	b.n	40db10 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40da16:	2f01      	cmp	r7, #1
  40da18:	d004      	beq.n	40da24 <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40da1a:	2f02      	cmp	r7, #2
  40da1c:	f040 80a0 	bne.w	40db60 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40da20:	2700      	movs	r7, #0
  40da22:	e075      	b.n	40db10 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40da24:	2700      	movs	r7, #0
  40da26:	e09b      	b.n	40db60 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40da28:	9b05      	ldr	r3, [sp, #20]
  40da2a:	2b20      	cmp	r3, #32
  40da2c:	d170      	bne.n	40db10 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40da2e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40da30:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40da32:	1a9b      	subs	r3, r3, r2
  40da34:	2b07      	cmp	r3, #7
  40da36:	d004      	beq.n	40da42 <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40da38:	8833      	ldrh	r3, [r6, #0]
  40da3a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40da3e:	2702      	movs	r7, #2
                    continue;
  40da40:	e066      	b.n	40db10 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40da42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40da44:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40da46:	aa18      	add	r2, sp, #96	; 0x60
  40da48:	2306      	movs	r3, #6
  40da4a:	e012      	b.n	40da72 <lv_draw_label+0x2f6>
  40da4c:	00414c69 	.word	0x00414c69
  40da50:	00416ab1 	.word	0x00416ab1
  40da54:	00416925 	.word	0x00416925
  40da58:	00411b6d 	.word	0x00411b6d
  40da5c:	00416a05 	.word	0x00416a05
  40da60:	0040e585 	.word	0x0040e585
  40da64:	20400050 	.word	0x20400050
        *d8 = *s8;
  40da68:	f811 0b01 	ldrb.w	r0, [r1], #1
  40da6c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40da70:	3b01      	subs	r3, #1
    while(len) {
  40da72:	2b00      	cmp	r3, #0
  40da74:	d1f8      	bne.n	40da68 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40da76:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40da7a:	4db8      	ldr	r5, [pc, #736]	; (40dd5c <lv_draw_label+0x5e0>)
  40da7c:	47a8      	blx	r5
  40da7e:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40da82:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40da86:	47a8      	blx	r5
  40da88:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40da8a:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40da8e:	47a8      	blx	r5
  40da90:	0104      	lsls	r4, r0, #4
  40da92:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40da96:	47a8      	blx	r5
  40da98:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40da9a:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40da9e:	47a8      	blx	r5
  40daa0:	0107      	lsls	r7, r0, #4
  40daa2:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40daa6:	47a8      	blx	r5
  40daa8:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40daaa:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40daac:	0962      	lsrs	r2, r4, #5
  40daae:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40dab2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40dab6:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40daba:	9914      	ldr	r1, [sp, #80]	; 0x50
  40dabc:	f362 0102 	bfi	r1, r2, #0, #3
  40dac0:	460a      	mov	r2, r1
  40dac2:	f368 02c7 	bfi	r2, r8, #3, #5
  40dac6:	f363 220c 	bfi	r2, r3, #8, #5
  40daca:	4613      	mov	r3, r2
  40dacc:	f364 334f 	bfi	r3, r4, #13, #3
  40dad0:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40dad4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40dad8:	2702      	movs	r7, #2
  40dada:	e019      	b.n	40db10 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40dadc:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40dae0:	e045      	b.n	40db6e <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40dae2:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40dae6:	9302      	str	r3, [sp, #8]
  40dae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40daea:	9301      	str	r3, [sp, #4]
  40daec:	f8ad 8000 	strh.w	r8, [sp]
  40daf0:	9b05      	ldr	r3, [sp, #20]
  40daf2:	9a06      	ldr	r2, [sp, #24]
  40daf4:	9909      	ldr	r1, [sp, #36]	; 0x24
  40daf6:	a833      	add	r0, sp, #204	; 0xcc
  40daf8:	4c99      	ldr	r4, [pc, #612]	; (40dd60 <lv_draw_label+0x5e4>)
  40dafa:	47a0      	blx	r4
            if(letter_w > 0) {
  40dafc:	2d00      	cmp	r5, #0
  40dafe:	dd07      	ble.n	40db10 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40db00:	8a33      	ldrh	r3, [r6, #16]
  40db02:	441d      	add	r5, r3
  40db04:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40db08:	fa13 f585 	uxtah	r5, r3, r5
  40db0c:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40db10:	9b07      	ldr	r3, [sp, #28]
  40db12:	eba3 030b 	sub.w	r3, r3, fp
  40db16:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40db18:	428b      	cmp	r3, r1
  40db1a:	d95b      	bls.n	40dbd4 <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40db1c:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40db20:	45a2      	cmp	sl, r4
  40db22:	bf18      	it	ne
  40db24:	45a1      	cmpne	r9, r4
  40db26:	bf14      	ite	ne
  40db28:	2401      	movne	r4, #1
  40db2a:	2400      	moveq	r4, #0
  40db2c:	f47f af67 	bne.w	40d9fe <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40db30:	2300      	movs	r3, #0
  40db32:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40db34:	4d8b      	ldr	r5, [pc, #556]	; (40dd64 <lv_draw_label+0x5e8>)
  40db36:	682b      	ldr	r3, [r5, #0]
  40db38:	a92f      	add	r1, sp, #188	; 0xbc
  40db3a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40db3e:	4640      	mov	r0, r8
  40db40:	4798      	blx	r3
  40db42:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40db44:	682b      	ldr	r3, [r5, #0]
  40db46:	2100      	movs	r1, #0
  40db48:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40db4a:	4440      	add	r0, r8
  40db4c:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40db4e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40db52:	f013 0f01 	tst.w	r3, #1
  40db56:	d006      	beq.n	40db66 <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40db58:	9b05      	ldr	r3, [sp, #20]
  40db5a:	2b23      	cmp	r3, #35	; 0x23
  40db5c:	f43f af56 	beq.w	40da0c <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40db60:	2f01      	cmp	r7, #1
  40db62:	f43f af61 	beq.w	40da28 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40db66:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40db6a:	2f02      	cmp	r7, #2
  40db6c:	d0b6      	beq.n	40dadc <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40db6e:	4602      	mov	r2, r0
  40db70:	9905      	ldr	r1, [sp, #20]
  40db72:	9806      	ldr	r0, [sp, #24]
  40db74:	4b7c      	ldr	r3, [pc, #496]	; (40dd68 <lv_draw_label+0x5ec>)
  40db76:	4798      	blx	r3
  40db78:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40db7a:	2c00      	cmp	r4, #0
  40db7c:	d0b1      	beq.n	40dae2 <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40db7e:	9a08      	ldr	r2, [sp, #32]
  40db80:	4613      	mov	r3, r2
  40db82:	4592      	cmp	sl, r2
  40db84:	bf8c      	ite	hi
  40db86:	2300      	movhi	r3, #0
  40db88:	2301      	movls	r3, #1
  40db8a:	4591      	cmp	r9, r2
  40db8c:	bf98      	it	ls
  40db8e:	2300      	movls	r3, #0
  40db90:	2b00      	cmp	r3, #0
  40db92:	d0a6      	beq.n	40dae2 <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40db94:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40db98:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40db9c:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40dba0:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40dba4:	fa10 f383 	uxtah	r3, r0, r3
  40dba8:	8a31      	ldrh	r1, [r6, #16]
  40dbaa:	fa11 f383 	uxtah	r3, r1, r3
  40dbae:	b29b      	uxth	r3, r3
  40dbb0:	3b01      	subs	r3, #1
  40dbb2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40dbb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dbb8:	fa13 f282 	uxtah	r2, r3, r2
  40dbbc:	b292      	uxth	r2, r2
  40dbbe:	3a01      	subs	r2, #1
  40dbc0:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40dbc4:	aa1a      	add	r2, sp, #104	; 0x68
  40dbc6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dbc8:	a818      	add	r0, sp, #96	; 0x60
  40dbca:	4b68      	ldr	r3, [pc, #416]	; (40dd6c <lv_draw_label+0x5f0>)
  40dbcc:	4798      	blx	r3
                    color = dsc->sel_color;
  40dbce:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40dbd2:	e786      	b.n	40dae2 <lv_draw_label+0x366>
  40dbd4:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40dbd6:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40dbda:	f013 0f02 	tst.w	r3, #2
  40dbde:	d143      	bne.n	40dc68 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40dbe0:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40dbe4:	f013 0f01 	tst.w	r3, #1
  40dbe8:	d166      	bne.n	40dcb8 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dbea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40dbec:	9f07      	ldr	r7, [sp, #28]
  40dbee:	19d5      	adds	r5, r2, r7
  40dbf0:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40dbf4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40dbf8:	9300      	str	r3, [sp, #0]
  40dbfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40dbfc:	9906      	ldr	r1, [sp, #24]
  40dbfe:	4628      	mov	r0, r5
  40dc00:	4c5b      	ldr	r4, [pc, #364]	; (40dd70 <lv_draw_label+0x5f4>)
  40dc02:	47a0      	blx	r4
  40dc04:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40dc06:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40dc08:	f9b3 3000 	ldrsh.w	r3, [r3]
  40dc0c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40dc10:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40dc14:	f012 0f04 	tst.w	r2, #4
  40dc18:	d170      	bne.n	40dcfc <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40dc1a:	f012 0f08 	tst.w	r2, #8
  40dc1e:	f040 8087 	bne.w	40dd30 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40dc22:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40dc26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40dc28:	4413      	add	r3, r2
  40dc2a:	b21b      	sxth	r3, r3
  40dc2c:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40dc30:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dc32:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40dc36:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40dc3a:	4293      	cmp	r3, r2
  40dc3c:	f73f ada9 	bgt.w	40d792 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dc40:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40dc42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40dc44:	4613      	mov	r3, r2
  40dc46:	445b      	add	r3, fp
  40dc48:	930a      	str	r3, [sp, #40]	; 0x28
  40dc4a:	f812 300b 	ldrb.w	r3, [r2, fp]
  40dc4e:	2b00      	cmp	r3, #0
  40dc50:	f43f ad9f 	beq.w	40d792 <lv_draw_label+0x16>
        pos.x += x_ofs;
  40dc54:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40dc58:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40dc5a:	4413      	add	r3, r2
  40dc5c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40dc60:	2700      	movs	r7, #0
  40dc62:	972f      	str	r7, [sp, #188]	; 0xbc
  40dc64:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40dc66:	e753      	b.n	40db10 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40dc68:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40dc6c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40dc70:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40dc74:	68b2      	ldr	r2, [r6, #8]
  40dc76:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40dc7a:	2a00      	cmp	r2, #0
  40dc7c:	db18      	blt.n	40dcb0 <lv_draw_label+0x534>
  40dc7e:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40dc82:	b29b      	uxth	r3, r3
  40dc84:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40dc88:	2a00      	cmp	r2, #0
  40dc8a:	db13      	blt.n	40dcb4 <lv_draw_label+0x538>
  40dc8c:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40dc90:	b21b      	sxth	r3, r3
  40dc92:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40dc96:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40dc9a:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40dc9e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40dca2:	ab30      	add	r3, sp, #192	; 0xc0
  40dca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dca6:	a918      	add	r1, sp, #96	; 0x60
  40dca8:	a817      	add	r0, sp, #92	; 0x5c
  40dcaa:	4c32      	ldr	r4, [pc, #200]	; (40dd74 <lv_draw_label+0x5f8>)
  40dcac:	47a0      	blx	r4
  40dcae:	e797      	b.n	40dbe0 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40dcb0:	3201      	adds	r2, #1
  40dcb2:	e7e4      	b.n	40dc7e <lv_draw_label+0x502>
  40dcb4:	3201      	adds	r2, #1
  40dcb6:	e7e9      	b.n	40dc8c <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40dcb8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40dcbc:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40dcc0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40dcc4:	68b2      	ldr	r2, [r6, #8]
  40dcc6:	8911      	ldrh	r1, [r2, #8]
  40dcc8:	440b      	add	r3, r1
  40dcca:	b29b      	uxth	r3, r3
  40dccc:	8952      	ldrh	r2, [r2, #10]
  40dcce:	1a9b      	subs	r3, r3, r2
  40dcd0:	b29b      	uxth	r3, r3
  40dcd2:	9a06      	ldr	r2, [sp, #24]
  40dcd4:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40dcd8:	b292      	uxth	r2, r2
  40dcda:	1a9b      	subs	r3, r3, r2
  40dcdc:	b21b      	sxth	r3, r3
  40dcde:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40dce2:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40dce6:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40dcea:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40dcee:	ab30      	add	r3, sp, #192	; 0xc0
  40dcf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40dcf2:	a918      	add	r1, sp, #96	; 0x60
  40dcf4:	a817      	add	r0, sp, #92	; 0x5c
  40dcf6:	4c1f      	ldr	r4, [pc, #124]	; (40dd74 <lv_draw_label+0x5f8>)
  40dcf8:	47a0      	blx	r4
  40dcfa:	e776      	b.n	40dbea <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40dcfc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40dd00:	9200      	str	r2, [sp, #0]
  40dd02:	9a06      	ldr	r2, [sp, #24]
  40dd04:	4601      	mov	r1, r0
  40dd06:	4628      	mov	r0, r5
  40dd08:	4d1b      	ldr	r5, [pc, #108]	; (40dd78 <lv_draw_label+0x5fc>)
  40dd0a:	47a8      	blx	r5
  40dd0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dd0e:	8893      	ldrh	r3, [r2, #4]
  40dd10:	8812      	ldrh	r2, [r2, #0]
  40dd12:	1a9b      	subs	r3, r3, r2
  40dd14:	b29b      	uxth	r3, r3
  40dd16:	3301      	adds	r3, #1
  40dd18:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40dd1a:	1a18      	subs	r0, r3, r0
  40dd1c:	d406      	bmi.n	40dd2c <lv_draw_label+0x5b0>
  40dd1e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40dd22:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40dd26:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40dd2a:	e77a      	b.n	40dc22 <lv_draw_label+0x4a6>
  40dd2c:	3001      	adds	r0, #1
  40dd2e:	e7f6      	b.n	40dd1e <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40dd30:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40dd34:	9200      	str	r2, [sp, #0]
  40dd36:	9a06      	ldr	r2, [sp, #24]
  40dd38:	4601      	mov	r1, r0
  40dd3a:	4628      	mov	r0, r5
  40dd3c:	4d0e      	ldr	r5, [pc, #56]	; (40dd78 <lv_draw_label+0x5fc>)
  40dd3e:	47a8      	blx	r5
  40dd40:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dd42:	8893      	ldrh	r3, [r2, #4]
  40dd44:	8812      	ldrh	r2, [r2, #0]
  40dd46:	1a9b      	subs	r3, r3, r2
  40dd48:	b29b      	uxth	r3, r3
  40dd4a:	3301      	adds	r3, #1
  40dd4c:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40dd4e:	1a1b      	subs	r3, r3, r0
  40dd50:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40dd54:	4403      	add	r3, r0
  40dd56:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40dd5a:	e762      	b.n	40dc22 <lv_draw_label+0x4a6>
  40dd5c:	0040ceb1 	.word	0x0040ceb1
  40dd60:	0040d649 	.word	0x0040d649
  40dd64:	20400054 	.word	0x20400054
  40dd68:	0041324d 	.word	0x0041324d
  40dd6c:	00411bb9 	.word	0x00411bb9
  40dd70:	00416925 	.word	0x00416925
  40dd74:	0040e5a1 	.word	0x0040e5a1
  40dd78:	00416a05 	.word	0x00416a05

0040dd7c <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40dd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dd80:	b08b      	sub	sp, #44	; 0x2c
  40dd82:	4681      	mov	r9, r0
  40dd84:	468a      	mov	sl, r1
  40dd86:	9204      	str	r2, [sp, #16]
  40dd88:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40dd8a:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40dd8e:	4b76      	ldr	r3, [pc, #472]	; (40df68 <draw_line_hor+0x1ec>)
  40dd90:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40dd92:	4b76      	ldr	r3, [pc, #472]	; (40df6c <draw_line_hor+0x1f0>)
  40dd94:	4798      	blx	r3
  40dd96:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40dd98:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40dd9c:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40dd9e:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dda2:	f005 0501 	and.w	r5, r5, #1
  40dda6:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dda8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40ddac:	b123      	cbz	r3, 40ddb8 <draw_line_hor+0x3c>
  40ddae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40ddb2:	b943      	cbnz	r3, 40ddc6 <draw_line_hor+0x4a>
  40ddb4:	2700      	movs	r7, #0
  40ddb6:	e000      	b.n	40ddba <draw_line_hor+0x3e>
  40ddb8:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40ddba:	4b6d      	ldr	r3, [pc, #436]	; (40df70 <draw_line_hor+0x1f4>)
  40ddbc:	4798      	blx	r3
  40ddbe:	b920      	cbnz	r0, 40ddca <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40ddc0:	bb7f      	cbnz	r7, 40de22 <draw_line_hor+0xa6>
    bool simple_mode = true;
  40ddc2:	2201      	movs	r2, #1
  40ddc4:	e002      	b.n	40ddcc <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40ddc6:	2701      	movs	r7, #1
  40ddc8:	e7f7      	b.n	40ddba <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40ddca:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40ddcc:	f9ba 3000 	ldrsh.w	r3, [sl]
  40ddd0:	f9b9 1000 	ldrsh.w	r1, [r9]
  40ddd4:	4618      	mov	r0, r3
  40ddd6:	428b      	cmp	r3, r1
  40ddd8:	bfa8      	it	ge
  40ddda:	4608      	movge	r0, r1
  40dddc:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40dde0:	428b      	cmp	r3, r1
  40dde2:	bfb8      	it	lt
  40dde4:	460b      	movlt	r3, r1
  40dde6:	b29b      	uxth	r3, r3
  40dde8:	3b01      	subs	r3, #1
  40ddea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40ddee:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40ddf2:	1b5d      	subs	r5, r3, r5
  40ddf4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40ddf8:	4498      	add	r8, r3
  40ddfa:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40ddfe:	b192      	cbz	r2, 40de26 <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40de00:	7a63      	ldrb	r3, [r4, #9]
  40de02:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40de06:	8822      	ldrh	r2, [r4, #0]
  40de08:	9302      	str	r3, [sp, #8]
  40de0a:	f8cd b004 	str.w	fp, [sp, #4]
  40de0e:	2301      	movs	r3, #1
  40de10:	9300      	str	r3, [sp, #0]
  40de12:	2300      	movs	r3, #0
  40de14:	a908      	add	r1, sp, #32
  40de16:	9804      	ldr	r0, [sp, #16]
  40de18:	4c56      	ldr	r4, [pc, #344]	; (40df74 <draw_line_hor+0x1f8>)
  40de1a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40de1c:	b00b      	add	sp, #44	; 0x2c
  40de1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40de22:	2200      	movs	r2, #0
  40de24:	e7d2      	b.n	40ddcc <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40de26:	aa08      	add	r2, sp, #32
  40de28:	9904      	ldr	r1, [sp, #16]
  40de2a:	4610      	mov	r0, r2
  40de2c:	4b52      	ldr	r3, [pc, #328]	; (40df78 <draw_line_hor+0x1fc>)
  40de2e:	4798      	blx	r3
        if(!is_common) return;
  40de30:	2800      	cmp	r0, #0
  40de32:	d0f3      	beq.n	40de1c <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40de34:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40de38:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40de3c:	b28b      	uxth	r3, r1
  40de3e:	ebae 0503 	sub.w	r5, lr, r3
  40de42:	b2ad      	uxth	r5, r5
  40de44:	fa0f fc85 	sxth.w	ip, r5
  40de48:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40de4c:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40de50:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40de54:	eba2 0008 	sub.w	r0, r2, r8
  40de58:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40de5c:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40de60:	1ac3      	subs	r3, r0, r3
  40de62:	b29b      	uxth	r3, r3
  40de64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40de68:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40de6c:	eba9 0808 	sub.w	r8, r9, r8
  40de70:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40de74:	1b5d      	subs	r5, r3, r5
  40de76:	b2ad      	uxth	r5, r5
  40de78:	3501      	adds	r5, #1
  40de7a:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40de7c:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40de80:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40de84:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40de88:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40de8c:	b1a7      	cbz	r7, 40deb8 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40de8e:	4461      	add	r1, ip
  40de90:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40de94:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40de98:	4413      	add	r3, r2
  40de9a:	fb91 fcf3 	sdiv	ip, r1, r3
  40de9e:	fb03 111c 	mls	r1, r3, ip, r1
  40dea2:	b20b      	sxth	r3, r1
  40dea4:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40dea6:	46ab      	mov	fp, r5
  40dea8:	4628      	mov	r0, r5
  40deaa:	4b34      	ldr	r3, [pc, #208]	; (40df7c <draw_line_hor+0x200>)
  40deac:	4798      	blx	r3
  40deae:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40deb0:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40deb4:	46ba      	mov	sl, r7
  40deb6:	e037      	b.n	40df28 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40deb8:	2300      	movs	r3, #0
  40deba:	9305      	str	r3, [sp, #20]
  40debc:	e7f3      	b.n	40dea6 <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40debe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40dec2:	440b      	add	r3, r1
  40dec4:	429a      	cmp	r2, r3
  40dec6:	da13      	bge.n	40def0 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40dec8:	2300      	movs	r3, #0
  40deca:	f809 3000 	strb.w	r3, [r9, r0]
  40dece:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40ded0:	3001      	adds	r0, #1
  40ded2:	b200      	sxth	r0, r0
  40ded4:	3301      	adds	r3, #1
  40ded6:	b21a      	sxth	r2, r3
  40ded8:	42a8      	cmp	r0, r5
  40deda:	da0b      	bge.n	40def4 <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40dedc:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40dee0:	429a      	cmp	r2, r3
  40dee2:	dcec      	bgt.n	40debe <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40dee4:	b299      	uxth	r1, r3
  40dee6:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40dee8:	fa10 f082 	uxtah	r0, r0, r2
  40deec:	b200      	sxth	r0, r0
  40deee:	e7ef      	b.n	40ded0 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40def0:	2300      	movs	r3, #0
  40def2:	e7ed      	b.n	40ded0 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40def4:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40def6:	7a63      	ldrb	r3, [r4, #9]
  40def8:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40defc:	9302      	str	r3, [sp, #8]
  40defe:	7a23      	ldrb	r3, [r4, #8]
  40df00:	9301      	str	r3, [sp, #4]
  40df02:	9000      	str	r0, [sp, #0]
  40df04:	464b      	mov	r3, r9
  40df06:	8822      	ldrh	r2, [r4, #0]
  40df08:	a906      	add	r1, sp, #24
  40df0a:	9804      	ldr	r0, [sp, #16]
  40df0c:	4f19      	ldr	r7, [pc, #100]	; (40df74 <draw_line_hor+0x1f8>)
  40df0e:	47b8      	blx	r7
            fill_area.y1++;
  40df10:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40df14:	3301      	adds	r3, #1
  40df16:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40df1a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40df1e:	3301      	adds	r3, #1
  40df20:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40df24:	f108 0801 	add.w	r8, r8, #1
  40df28:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40df2c:	4598      	cmp	r8, r3
  40df2e:	dc17      	bgt.n	40df60 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40df30:	4659      	mov	r1, fp
  40df32:	4648      	mov	r0, r9
  40df34:	4b12      	ldr	r3, [pc, #72]	; (40df80 <draw_line_hor+0x204>)
  40df36:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40df38:	8a31      	ldrh	r1, [r6, #16]
  40df3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40df3e:	4419      	add	r1, r3
  40df40:	8a72      	ldrh	r2, [r6, #18]
  40df42:	4442      	add	r2, r8
  40df44:	462b      	mov	r3, r5
  40df46:	b212      	sxth	r2, r2
  40df48:	b209      	sxth	r1, r1
  40df4a:	4648      	mov	r0, r9
  40df4c:	4f0d      	ldr	r7, [pc, #52]	; (40df84 <draw_line_hor+0x208>)
  40df4e:	47b8      	blx	r7
            if(dashed) {
  40df50:	f1ba 0f00 	cmp.w	sl, #0
  40df54:	d0cf      	beq.n	40def6 <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40df56:	2800      	cmp	r0, #0
  40df58:	d0cd      	beq.n	40def6 <draw_line_hor+0x17a>
  40df5a:	9a05      	ldr	r2, [sp, #20]
  40df5c:	2000      	movs	r0, #0
  40df5e:	e7bb      	b.n	40ded8 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40df60:	4648      	mov	r0, r9
  40df62:	4b09      	ldr	r3, [pc, #36]	; (40df88 <draw_line_hor+0x20c>)
  40df64:	4798      	blx	r3
  40df66:	e759      	b.n	40de1c <draw_line_hor+0xa0>
  40df68:	00409055 	.word	0x00409055
  40df6c:	00414505 	.word	0x00414505
  40df70:	0040f3f5 	.word	0x0040f3f5
  40df74:	0040c0d1 	.word	0x0040c0d1
  40df78:	00414c69 	.word	0x00414c69
  40df7c:	00415fdd 	.word	0x00415fdd
  40df80:	004161c1 	.word	0x004161c1
  40df84:	0040f32d 	.word	0x0040f32d
  40df88:	00415d8d 	.word	0x00415d8d

0040df8c <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40df8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40df90:	b08b      	sub	sp, #44	; 0x2c
  40df92:	4680      	mov	r8, r0
  40df94:	468a      	mov	sl, r1
  40df96:	9204      	str	r2, [sp, #16]
  40df98:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40df9a:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40df9e:	4b71      	ldr	r3, [pc, #452]	; (40e164 <draw_line_ver+0x1d8>)
  40dfa0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40dfa2:	4b71      	ldr	r3, [pc, #452]	; (40e168 <draw_line_ver+0x1dc>)
  40dfa4:	4798      	blx	r3
  40dfa6:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40dfa8:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40dfac:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40dfae:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dfb2:	f004 0401 	and.w	r4, r4, #1
  40dfb6:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dfb8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40dfbc:	b123      	cbz	r3, 40dfc8 <draw_line_ver+0x3c>
  40dfbe:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40dfc2:	b943      	cbnz	r3, 40dfd6 <draw_line_ver+0x4a>
  40dfc4:	2600      	movs	r6, #0
  40dfc6:	e000      	b.n	40dfca <draw_line_ver+0x3e>
  40dfc8:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40dfca:	4b68      	ldr	r3, [pc, #416]	; (40e16c <draw_line_ver+0x1e0>)
  40dfcc:	4798      	blx	r3
  40dfce:	b920      	cbnz	r0, 40dfda <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40dfd0:	bb7e      	cbnz	r6, 40e032 <draw_line_ver+0xa6>
    bool simple_mode = true;
  40dfd2:	2201      	movs	r2, #1
  40dfd4:	e002      	b.n	40dfdc <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dfd6:	2601      	movs	r6, #1
  40dfd8:	e7f7      	b.n	40dfca <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40dfda:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40dfdc:	f8b8 3000 	ldrh.w	r3, [r8]
  40dfe0:	1b1c      	subs	r4, r3, r4
  40dfe2:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40dfe6:	4499      	add	r9, r3
  40dfe8:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40dfec:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40dff0:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40dff4:	4618      	mov	r0, r3
  40dff6:	428b      	cmp	r3, r1
  40dff8:	bfa8      	it	ge
  40dffa:	4608      	movge	r0, r1
  40dffc:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e000:	428b      	cmp	r3, r1
  40e002:	bfb8      	it	lt
  40e004:	460b      	movlt	r3, r1
  40e006:	b29b      	uxth	r3, r3
  40e008:	3b01      	subs	r3, #1
  40e00a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e00e:	b192      	cbz	r2, 40e036 <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e010:	7a6b      	ldrb	r3, [r5, #9]
  40e012:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e016:	882a      	ldrh	r2, [r5, #0]
  40e018:	9302      	str	r3, [sp, #8]
  40e01a:	f8cd b004 	str.w	fp, [sp, #4]
  40e01e:	2301      	movs	r3, #1
  40e020:	9300      	str	r3, [sp, #0]
  40e022:	2300      	movs	r3, #0
  40e024:	a908      	add	r1, sp, #32
  40e026:	9804      	ldr	r0, [sp, #16]
  40e028:	4c51      	ldr	r4, [pc, #324]	; (40e170 <draw_line_ver+0x1e4>)
  40e02a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e02c:	b00b      	add	sp, #44	; 0x2c
  40e02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e032:	2200      	movs	r2, #0
  40e034:	e7d2      	b.n	40dfdc <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e036:	aa08      	add	r2, sp, #32
  40e038:	9904      	ldr	r1, [sp, #16]
  40e03a:	4610      	mov	r0, r2
  40e03c:	4b4d      	ldr	r3, [pc, #308]	; (40e174 <draw_line_ver+0x1e8>)
  40e03e:	4798      	blx	r3
        if(!is_common) return;
  40e040:	2800      	cmp	r0, #0
  40e042:	d0f3      	beq.n	40e02c <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40e044:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40e048:	8a3b      	ldrh	r3, [r7, #16]
  40e04a:	eba0 0b03 	sub.w	fp, r0, r3
  40e04e:	fa1f fb8b 	uxth.w	fp, fp
  40e052:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40e056:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e05a:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40e05e:	eba2 010e 	sub.w	r1, r2, lr
  40e062:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40e066:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e06a:	1acb      	subs	r3, r1, r3
  40e06c:	b29b      	uxth	r3, r3
  40e06e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40e072:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40e076:	eba4 040e 	sub.w	r4, r4, lr
  40e07a:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40e07e:	eba3 0b0b 	sub.w	fp, r3, fp
  40e082:	fa1f fb8b 	uxth.w	fp, fp
  40e086:	f10b 0b01 	add.w	fp, fp, #1
  40e08a:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e08e:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e092:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e096:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e09a:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e09e:	f8cd b014 	str.w	fp, [sp, #20]
  40e0a2:	4658      	mov	r0, fp
  40e0a4:	4b34      	ldr	r3, [pc, #208]	; (40e178 <draw_line_ver+0x1ec>)
  40e0a6:	4798      	blx	r3
  40e0a8:	4680      	mov	r8, r0
        if(dashed) {
  40e0aa:	b19e      	cbz	r6, 40e0d4 <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e0ac:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40e0b0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40e0b4:	441a      	add	r2, r3
  40e0b6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e0ba:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40e0be:	444b      	add	r3, r9
  40e0c0:	fb92 f9f3 	sdiv	r9, r2, r3
  40e0c4:	fb03 2919 	mls	r9, r3, r9, r2
  40e0c8:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e0cc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e0d0:	46b2      	mov	sl, r6
  40e0d2:	e01c      	b.n	40e10e <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40e0d4:	f04f 0900 	mov.w	r9, #0
  40e0d8:	e7f8      	b.n	40e0cc <draw_line_ver+0x140>
                dash_cnt ++;
  40e0da:	f109 0901 	add.w	r9, r9, #1
  40e0de:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40e0e2:	2300      	movs	r3, #0
  40e0e4:	9302      	str	r3, [sp, #8]
  40e0e6:	7a2b      	ldrb	r3, [r5, #8]
  40e0e8:	9301      	str	r3, [sp, #4]
  40e0ea:	9000      	str	r0, [sp, #0]
  40e0ec:	4643      	mov	r3, r8
  40e0ee:	882a      	ldrh	r2, [r5, #0]
  40e0f0:	a906      	add	r1, sp, #24
  40e0f2:	9804      	ldr	r0, [sp, #16]
  40e0f4:	4e1e      	ldr	r6, [pc, #120]	; (40e170 <draw_line_ver+0x1e4>)
  40e0f6:	47b0      	blx	r6
            fill_area.y1++;
  40e0f8:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e0fc:	3301      	adds	r3, #1
  40e0fe:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e102:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e106:	3301      	adds	r3, #1
  40e108:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e10c:	3401      	adds	r4, #1
  40e10e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e112:	429c      	cmp	r4, r3
  40e114:	dc21      	bgt.n	40e15a <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e116:	9905      	ldr	r1, [sp, #20]
  40e118:	4640      	mov	r0, r8
  40e11a:	4b18      	ldr	r3, [pc, #96]	; (40e17c <draw_line_ver+0x1f0>)
  40e11c:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e11e:	8a39      	ldrh	r1, [r7, #16]
  40e120:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e124:	4419      	add	r1, r3
  40e126:	8a7a      	ldrh	r2, [r7, #18]
  40e128:	4422      	add	r2, r4
  40e12a:	465b      	mov	r3, fp
  40e12c:	b212      	sxth	r2, r2
  40e12e:	b209      	sxth	r1, r1
  40e130:	4640      	mov	r0, r8
  40e132:	4e13      	ldr	r6, [pc, #76]	; (40e180 <draw_line_ver+0x1f4>)
  40e134:	47b0      	blx	r6
            if(dashed) {
  40e136:	f1ba 0f00 	cmp.w	sl, #0
  40e13a:	d0d2      	beq.n	40e0e2 <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e13c:	2800      	cmp	r0, #0
  40e13e:	d0cc      	beq.n	40e0da <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40e140:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40e144:	4591      	cmp	r9, r2
  40e146:	dd00      	ble.n	40e14a <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e148:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e14a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e14e:	4413      	add	r3, r2
  40e150:	4599      	cmp	r9, r3
  40e152:	dbc2      	blt.n	40e0da <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40e154:	f04f 0900 	mov.w	r9, #0
  40e158:	e7bf      	b.n	40e0da <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40e15a:	4640      	mov	r0, r8
  40e15c:	4b09      	ldr	r3, [pc, #36]	; (40e184 <draw_line_ver+0x1f8>)
  40e15e:	4798      	blx	r3
  40e160:	e764      	b.n	40e02c <draw_line_ver+0xa0>
  40e162:	bf00      	nop
  40e164:	00409055 	.word	0x00409055
  40e168:	00414505 	.word	0x00414505
  40e16c:	0040f3f5 	.word	0x0040f3f5
  40e170:	0040c0d1 	.word	0x0040c0d1
  40e174:	00414c69 	.word	0x00414c69
  40e178:	00415fdd 	.word	0x00415fdd
  40e17c:	004161c1 	.word	0x004161c1
  40e180:	0040f32d 	.word	0x0040f32d
  40e184:	00415d8d 	.word	0x00415d8d

0040e188 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e18c:	b0bf      	sub	sp, #252	; 0xfc
  40e18e:	9206      	str	r2, [sp, #24]
  40e190:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40e192:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40e196:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e19a:	4293      	cmp	r3, r2
  40e19c:	f280 80e7 	bge.w	40e36e <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40e1a0:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40e1a4:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40e1a8:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e1ac:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40e1b0:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e1b4:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40e1b8:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40e1bc:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40e1c0:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40e1c4:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40e1c8:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40e1cc:	1bab      	subs	r3, r5, r6
  40e1ce:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40e1d0:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40e1d4:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40e1d8:	2b00      	cmp	r3, #0
  40e1da:	bfb8      	it	lt
  40e1dc:	425b      	neglt	r3, r3
  40e1de:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40e1e0:	9b05      	ldr	r3, [sp, #20]
  40e1e2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40e1e6:	45d3      	cmp	fp, sl
  40e1e8:	f340 80ce 	ble.w	40e388 <draw_line_skew+0x200>
  40e1ec:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40e1f0:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40e1f4:	49a1      	ldr	r1, [pc, #644]	; (40e47c <draw_line_skew+0x2f4>)
  40e1f6:	5ccc      	ldrb	r4, [r1, r3]
  40e1f8:	fb04 f402 	mul.w	r4, r4, r2
  40e1fc:	343f      	adds	r4, #63	; 0x3f
  40e1fe:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40e200:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e202:	f003 0201 	and.w	r2, r3, #1
  40e206:	18a2      	adds	r2, r4, r2
  40e208:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40e20a:	4642      	mov	r2, r8
  40e20c:	45b8      	cmp	r8, r7
  40e20e:	bfa8      	it	ge
  40e210:	463a      	movge	r2, r7
  40e212:	b292      	uxth	r2, r2
  40e214:	b29b      	uxth	r3, r3
  40e216:	1ad2      	subs	r2, r2, r3
  40e218:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40e21c:	4642      	mov	r2, r8
  40e21e:	45b8      	cmp	r8, r7
  40e220:	bfb8      	it	lt
  40e222:	463a      	movlt	r2, r7
  40e224:	fa13 f282 	uxtah	r2, r3, r2
  40e228:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40e22c:	462a      	mov	r2, r5
  40e22e:	42b5      	cmp	r5, r6
  40e230:	bfa8      	it	ge
  40e232:	4632      	movge	r2, r6
  40e234:	b292      	uxth	r2, r2
  40e236:	1ad2      	subs	r2, r2, r3
  40e238:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40e23c:	462a      	mov	r2, r5
  40e23e:	42b5      	cmp	r5, r6
  40e240:	bfb8      	it	lt
  40e242:	4632      	movlt	r2, r6
  40e244:	fa13 f382 	uxtah	r3, r3, r2
  40e248:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40e24c:	9a06      	ldr	r2, [sp, #24]
  40e24e:	a93a      	add	r1, sp, #232	; 0xe8
  40e250:	4608      	mov	r0, r1
  40e252:	4b8b      	ldr	r3, [pc, #556]	; (40e480 <draw_line_skew+0x2f8>)
  40e254:	4798      	blx	r3
    if(is_common == false) return;
  40e256:	2800      	cmp	r0, #0
  40e258:	f000 8187 	beq.w	40e56a <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40e25c:	45d3      	cmp	fp, sl
  40e25e:	f340 80b6 	ble.w	40e3ce <draw_line_skew+0x246>
        if(xdiff > 0) {
  40e262:	f1b9 0f00 	cmp.w	r9, #0
  40e266:	f340 8094 	ble.w	40e392 <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e26a:	b2b6      	uxth	r6, r6
  40e26c:	b2a4      	uxth	r4, r4
  40e26e:	1b32      	subs	r2, r6, r4
  40e270:	b2ad      	uxth	r5, r5
  40e272:	1b2c      	subs	r4, r5, r4
  40e274:	2300      	movs	r3, #0
  40e276:	9301      	str	r3, [sp, #4]
  40e278:	b224      	sxth	r4, r4
  40e27a:	9400      	str	r4, [sp, #0]
  40e27c:	4643      	mov	r3, r8
  40e27e:	b212      	sxth	r2, r2
  40e280:	4639      	mov	r1, r7
  40e282:	a82f      	add	r0, sp, #188	; 0xbc
  40e284:	4c7f      	ldr	r4, [pc, #508]	; (40e484 <draw_line_skew+0x2fc>)
  40e286:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e288:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e28c:	441e      	add	r6, r3
  40e28e:	441d      	add	r5, r3
  40e290:	2301      	movs	r3, #1
  40e292:	9301      	str	r3, [sp, #4]
  40e294:	b22d      	sxth	r5, r5
  40e296:	9500      	str	r5, [sp, #0]
  40e298:	4643      	mov	r3, r8
  40e29a:	b232      	sxth	r2, r6
  40e29c:	4639      	mov	r1, r7
  40e29e:	a824      	add	r0, sp, #144	; 0x90
  40e2a0:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40e2a2:	2100      	movs	r1, #0
  40e2a4:	a82f      	add	r0, sp, #188	; 0xbc
  40e2a6:	4c78      	ldr	r4, [pc, #480]	; (40e488 <draw_line_skew+0x300>)
  40e2a8:	47a0      	blx	r4
  40e2aa:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40e2ac:	2100      	movs	r1, #0
  40e2ae:	a824      	add	r0, sp, #144	; 0x90
  40e2b0:	47a0      	blx	r4
  40e2b2:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40e2b4:	9b05      	ldr	r3, [sp, #20]
  40e2b6:	7a5b      	ldrb	r3, [r3, #9]
  40e2b8:	f013 0f10 	tst.w	r3, #16
  40e2bc:	f000 80a6 	beq.w	40e40c <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40e2c0:	f04f 33ff 	mov.w	r3, #4294967295
  40e2c4:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40e2c6:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e2c8:	4b70      	ldr	r3, [pc, #448]	; (40e48c <draw_line_skew+0x304>)
  40e2ca:	4798      	blx	r3
  40e2cc:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e2ce:	4b70      	ldr	r3, [pc, #448]	; (40e490 <draw_line_skew+0x308>)
  40e2d0:	4798      	blx	r3
  40e2d2:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40e2d4:	8a00      	ldrh	r0, [r0, #16]
  40e2d6:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40e2da:	1a24      	subs	r4, r4, r0
  40e2dc:	b2a4      	uxth	r4, r4
  40e2de:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40e2e2:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40e2e6:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40e2ea:	1a52      	subs	r2, r2, r1
  40e2ec:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40e2f0:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40e2f4:	1a1b      	subs	r3, r3, r0
  40e2f6:	b29b      	uxth	r3, r3
  40e2f8:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40e2fc:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40e300:	1a52      	subs	r2, r2, r1
  40e302:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40e306:	1b1c      	subs	r4, r3, r4
  40e308:	b2a4      	uxth	r4, r4
  40e30a:	3401      	adds	r4, #1
  40e30c:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40e30e:	4628      	mov	r0, r5
  40e310:	4b60      	ldr	r3, [pc, #384]	; (40e494 <draw_line_skew+0x30c>)
  40e312:	4798      	blx	r3
  40e314:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e316:	a83a      	add	r0, sp, #232	; 0xe8
  40e318:	4b5f      	ldr	r3, [pc, #380]	; (40e498 <draw_line_skew+0x310>)
  40e31a:	4798      	blx	r3
  40e31c:	4583      	cmp	fp, r0
  40e31e:	f200 80a3 	bhi.w	40e468 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40e322:	4658      	mov	r0, fp
  40e324:	4b5d      	ldr	r3, [pc, #372]	; (40e49c <draw_line_skew+0x314>)
  40e326:	4798      	blx	r3
  40e328:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e32a:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40e32e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40e332:	441a      	add	r2, r3
  40e334:	b212      	sxth	r2, r2
  40e336:	9204      	str	r2, [sp, #16]
  40e338:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e33c:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40e340:	4413      	add	r3, r2
  40e342:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e346:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40e34a:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40e34e:	4413      	add	r3, r2
  40e350:	b21b      	sxth	r3, r3
  40e352:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40e356:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40e35a:	4659      	mov	r1, fp
  40e35c:	4b50      	ldr	r3, [pc, #320]	; (40e4a0 <draw_line_skew+0x318>)
  40e35e:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e360:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40e364:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40e368:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40e36a:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e36c:	e0bd      	b.n	40e4ea <draw_line_skew+0x362>
        p1.y = point2->y;
  40e36e:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40e372:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40e376:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e37a:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40e37e:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e382:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40e386:	e717      	b.n	40e1b8 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40e388:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40e38c:	fb93 f3fa 	sdiv	r3, r3, sl
  40e390:	e730      	b.n	40e1f4 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e392:	b2b6      	uxth	r6, r6
  40e394:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e398:	18f2      	adds	r2, r6, r3
  40e39a:	b2ad      	uxth	r5, r5
  40e39c:	442b      	add	r3, r5
  40e39e:	2100      	movs	r1, #0
  40e3a0:	9101      	str	r1, [sp, #4]
  40e3a2:	b21b      	sxth	r3, r3
  40e3a4:	9300      	str	r3, [sp, #0]
  40e3a6:	4643      	mov	r3, r8
  40e3a8:	b212      	sxth	r2, r2
  40e3aa:	4639      	mov	r1, r7
  40e3ac:	a82f      	add	r0, sp, #188	; 0xbc
  40e3ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40e484 <draw_line_skew+0x2fc>
  40e3b2:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e3b4:	b2a4      	uxth	r4, r4
  40e3b6:	1b36      	subs	r6, r6, r4
  40e3b8:	1b2d      	subs	r5, r5, r4
  40e3ba:	2301      	movs	r3, #1
  40e3bc:	9301      	str	r3, [sp, #4]
  40e3be:	b22d      	sxth	r5, r5
  40e3c0:	9500      	str	r5, [sp, #0]
  40e3c2:	4643      	mov	r3, r8
  40e3c4:	b232      	sxth	r2, r6
  40e3c6:	4639      	mov	r1, r7
  40e3c8:	a824      	add	r0, sp, #144	; 0x90
  40e3ca:	47d0      	blx	sl
  40e3cc:	e769      	b.n	40e2a2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40e3ce:	b2bf      	uxth	r7, r7
  40e3d0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e3d4:	18f9      	adds	r1, r7, r3
  40e3d6:	fa1f f888 	uxth.w	r8, r8
  40e3da:	4443      	add	r3, r8
  40e3dc:	2200      	movs	r2, #0
  40e3de:	9201      	str	r2, [sp, #4]
  40e3e0:	9500      	str	r5, [sp, #0]
  40e3e2:	b21b      	sxth	r3, r3
  40e3e4:	4632      	mov	r2, r6
  40e3e6:	b209      	sxth	r1, r1
  40e3e8:	a82f      	add	r0, sp, #188	; 0xbc
  40e3ea:	f8df a098 	ldr.w	sl, [pc, #152]	; 40e484 <draw_line_skew+0x2fc>
  40e3ee:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40e3f0:	b2a4      	uxth	r4, r4
  40e3f2:	1b3f      	subs	r7, r7, r4
  40e3f4:	eba8 0804 	sub.w	r8, r8, r4
  40e3f8:	2301      	movs	r3, #1
  40e3fa:	9301      	str	r3, [sp, #4]
  40e3fc:	9500      	str	r5, [sp, #0]
  40e3fe:	fa0f f388 	sxth.w	r3, r8
  40e402:	4632      	mov	r2, r6
  40e404:	b239      	sxth	r1, r7
  40e406:	a824      	add	r0, sp, #144	; 0x90
  40e408:	47d0      	blx	sl
  40e40a:	e74a      	b.n	40e2a2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40e40c:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40e410:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40e414:	b28b      	uxth	r3, r1
  40e416:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40e41a:	1b5b      	subs	r3, r3, r5
  40e41c:	fa1f f989 	uxth.w	r9, r9
  40e420:	fa19 f082 	uxtah	r0, r9, r2
  40e424:	2403      	movs	r4, #3
  40e426:	9401      	str	r4, [sp, #4]
  40e428:	b200      	sxth	r0, r0
  40e42a:	9000      	str	r0, [sp, #0]
  40e42c:	b21b      	sxth	r3, r3
  40e42e:	a819      	add	r0, sp, #100	; 0x64
  40e430:	4c14      	ldr	r4, [pc, #80]	; (40e484 <draw_line_skew+0x2fc>)
  40e432:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40e434:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40e438:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40e43c:	b28b      	uxth	r3, r1
  40e43e:	1b5b      	subs	r3, r3, r5
  40e440:	fa19 f982 	uxtah	r9, r9, r2
  40e444:	2002      	movs	r0, #2
  40e446:	9001      	str	r0, [sp, #4]
  40e448:	fa0f f089 	sxth.w	r0, r9
  40e44c:	9000      	str	r0, [sp, #0]
  40e44e:	b21b      	sxth	r3, r3
  40e450:	a80e      	add	r0, sp, #56	; 0x38
  40e452:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40e454:	2100      	movs	r1, #0
  40e456:	a819      	add	r0, sp, #100	; 0x64
  40e458:	4c0b      	ldr	r4, [pc, #44]	; (40e488 <draw_line_skew+0x300>)
  40e45a:	47a0      	blx	r4
  40e45c:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40e45e:	2100      	movs	r1, #0
  40e460:	a80e      	add	r0, sp, #56	; 0x38
  40e462:	47a0      	blx	r4
  40e464:	900b      	str	r0, [sp, #44]	; 0x2c
  40e466:	e72f      	b.n	40e2c8 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e468:	a83a      	add	r0, sp, #232	; 0xe8
  40e46a:	4b0b      	ldr	r3, [pc, #44]	; (40e498 <draw_line_skew+0x310>)
  40e46c:	4798      	blx	r3
  40e46e:	4683      	mov	fp, r0
  40e470:	e757      	b.n	40e322 <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40e472:	4621      	mov	r1, r4
  40e474:	4638      	mov	r0, r7
  40e476:	4b0b      	ldr	r3, [pc, #44]	; (40e4a4 <draw_line_skew+0x31c>)
  40e478:	4798      	blx	r3
  40e47a:	e048      	b.n	40e50e <draw_line_skew+0x386>
  40e47c:	00423740 	.word	0x00423740
  40e480:	00414c69 	.word	0x00414c69
  40e484:	0040f419 	.word	0x0040f419
  40e488:	0040f2f9 	.word	0x0040f2f9
  40e48c:	00409055 	.word	0x00409055
  40e490:	00414505 	.word	0x00414505
  40e494:	00414401 	.word	0x00414401
  40e498:	00414c4d 	.word	0x00414c4d
  40e49c:	00415fdd 	.word	0x00415fdd
  40e4a0:	004161c1 	.word	0x004161c1
  40e4a4:	00416169 	.word	0x00416169
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40e4a8:	9905      	ldr	r1, [sp, #20]
  40e4aa:	7a4b      	ldrb	r3, [r1, #9]
  40e4ac:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40e4b0:	880a      	ldrh	r2, [r1, #0]
  40e4b2:	f8ad 201c 	strh.w	r2, [sp, #28]
  40e4b6:	9302      	str	r3, [sp, #8]
  40e4b8:	7a0b      	ldrb	r3, [r1, #8]
  40e4ba:	9301      	str	r3, [sp, #4]
  40e4bc:	2302      	movs	r3, #2
  40e4be:	9300      	str	r3, [sp, #0]
  40e4c0:	464b      	mov	r3, r9
  40e4c2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40e4c6:	9906      	ldr	r1, [sp, #24]
  40e4c8:	a80c      	add	r0, sp, #48	; 0x30
  40e4ca:	4e29      	ldr	r6, [pc, #164]	; (40e570 <draw_line_skew+0x3e8>)
  40e4cc:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40e4ce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40e4d2:	3301      	adds	r3, #1
  40e4d4:	b21b      	sxth	r3, r3
  40e4d6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40e4da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40e4de:	4659      	mov	r1, fp
  40e4e0:	4648      	mov	r0, r9
  40e4e2:	4b24      	ldr	r3, [pc, #144]	; (40e574 <draw_line_skew+0x3ec>)
  40e4e4:	4798      	blx	r3
            mask_p = 0;
  40e4e6:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e4e8:	3501      	adds	r5, #1
  40e4ea:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40e4ee:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40e4f2:	4413      	add	r3, r2
  40e4f4:	429d      	cmp	r5, r3
  40e4f6:	dc14      	bgt.n	40e522 <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40e4f8:	eb09 0706 	add.w	r7, r9, r6
  40e4fc:	4623      	mov	r3, r4
  40e4fe:	b22a      	sxth	r2, r5
  40e500:	9904      	ldr	r1, [sp, #16]
  40e502:	4638      	mov	r0, r7
  40e504:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40e580 <draw_line_skew+0x3f8>
  40e508:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e50a:	2800      	cmp	r0, #0
  40e50c:	d0b1      	beq.n	40e472 <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40e50e:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40e510:	19a3      	adds	r3, r4, r6
  40e512:	459b      	cmp	fp, r3
  40e514:	d9c8      	bls.n	40e4a8 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40e516:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e51a:	3301      	adds	r3, #1
  40e51c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40e520:	e7e2      	b.n	40e4e8 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40e522:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40e526:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e52a:	429a      	cmp	r2, r3
  40e52c:	d011      	beq.n	40e552 <draw_line_skew+0x3ca>
        fill_area.y2--;
  40e52e:	3b01      	subs	r3, #1
  40e530:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40e534:	9905      	ldr	r1, [sp, #20]
  40e536:	7a4b      	ldrb	r3, [r1, #9]
  40e538:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40e53c:	880a      	ldrh	r2, [r1, #0]
  40e53e:	9302      	str	r3, [sp, #8]
  40e540:	7a0b      	ldrb	r3, [r1, #8]
  40e542:	9301      	str	r3, [sp, #4]
  40e544:	2302      	movs	r3, #2
  40e546:	9300      	str	r3, [sp, #0]
  40e548:	464b      	mov	r3, r9
  40e54a:	9906      	ldr	r1, [sp, #24]
  40e54c:	a80c      	add	r0, sp, #48	; 0x30
  40e54e:	4c08      	ldr	r4, [pc, #32]	; (40e570 <draw_line_skew+0x3e8>)
  40e550:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40e552:	4648      	mov	r0, r9
  40e554:	4b08      	ldr	r3, [pc, #32]	; (40e578 <draw_line_skew+0x3f0>)
  40e556:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40e558:	9808      	ldr	r0, [sp, #32]
  40e55a:	4c08      	ldr	r4, [pc, #32]	; (40e57c <draw_line_skew+0x3f4>)
  40e55c:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40e55e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e560:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40e562:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e564:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40e566:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e568:	47a0      	blx	r4
}
  40e56a:	b03f      	add	sp, #252	; 0xfc
  40e56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e570:	0040c0d1 	.word	0x0040c0d1
  40e574:	004161c1 	.word	0x004161c1
  40e578:	00415d8d 	.word	0x00415d8d
  40e57c:	0040f37d 	.word	0x0040f37d
  40e580:	0040f32d 	.word	0x0040f32d

0040e584 <lv_draw_line_dsc_init>:
{
  40e584:	b510      	push	{r4, lr}
  40e586:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40e588:	210a      	movs	r1, #10
  40e58a:	4b04      	ldr	r3, [pc, #16]	; (40e59c <lv_draw_line_dsc_init+0x18>)
  40e58c:	4798      	blx	r3
    dsc->width = 1;
  40e58e:	2301      	movs	r3, #1
  40e590:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40e592:	23ff      	movs	r3, #255	; 0xff
  40e594:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40e596:	2300      	movs	r3, #0
  40e598:	8023      	strh	r3, [r4, #0]
  40e59a:	bd10      	pop	{r4, pc}
  40e59c:	00416169 	.word	0x00416169

0040e5a0 <lv_draw_line>:
{
  40e5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40e5a4:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40e5a6:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40e5aa:	2c00      	cmp	r4, #0
  40e5ac:	d05e      	beq.n	40e66c <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40e5ae:	7a1d      	ldrb	r5, [r3, #8]
  40e5b0:	2d02      	cmp	r5, #2
  40e5b2:	d95b      	bls.n	40e66c <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e5b4:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e5b8:	f9b1 6000 	ldrsh.w	r6, [r1]
  40e5bc:	42b5      	cmp	r5, r6
  40e5be:	d058      	beq.n	40e672 <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e5c0:	42b5      	cmp	r5, r6
  40e5c2:	bfa8      	it	ge
  40e5c4:	4635      	movge	r5, r6
  40e5c6:	b2ad      	uxth	r5, r5
  40e5c8:	4626      	mov	r6, r4
  40e5ca:	2c00      	cmp	r4, #0
  40e5cc:	db58      	blt.n	40e680 <lv_draw_line+0xe0>
  40e5ce:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40e5d2:	1bad      	subs	r5, r5, r6
  40e5d4:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40e5d8:	f9b1 4000 	ldrsh.w	r4, [r1]
  40e5dc:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e5e0:	42ac      	cmp	r4, r5
  40e5e2:	bfb8      	it	lt
  40e5e4:	462c      	movlt	r4, r5
  40e5e6:	fa16 f484 	uxtah	r4, r6, r4
  40e5ea:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e5ee:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e5f2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e5f6:	42ac      	cmp	r4, r5
  40e5f8:	bfa8      	it	ge
  40e5fa:	462c      	movge	r4, r5
  40e5fc:	b2a4      	uxth	r4, r4
  40e5fe:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e602:	2d00      	cmp	r5, #0
  40e604:	db3e      	blt.n	40e684 <lv_draw_line+0xe4>
  40e606:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40e60a:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e60e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e612:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e616:	42ac      	cmp	r4, r5
  40e618:	bfb8      	it	lt
  40e61a:	462c      	movlt	r4, r5
  40e61c:	b2a4      	uxth	r4, r4
  40e61e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e622:	2d00      	cmp	r5, #0
  40e624:	db30      	blt.n	40e688 <lv_draw_line+0xe8>
  40e626:	461e      	mov	r6, r3
  40e628:	4690      	mov	r8, r2
  40e62a:	460f      	mov	r7, r1
  40e62c:	4681      	mov	r9, r0
  40e62e:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40e632:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40e636:	a918      	add	r1, sp, #96	; 0x60
  40e638:	4608      	mov	r0, r1
  40e63a:	4b45      	ldr	r3, [pc, #276]	; (40e750 <lv_draw_line+0x1b0>)
  40e63c:	4798      	blx	r3
    if(!is_common) return;
  40e63e:	b1a8      	cbz	r0, 40e66c <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e640:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40e644:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40e648:	429a      	cmp	r2, r3
  40e64a:	d01f      	beq.n	40e68c <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e64c:	f9b9 2000 	ldrsh.w	r2, [r9]
  40e650:	f9b7 3000 	ldrsh.w	r3, [r7]
  40e654:	429a      	cmp	r2, r3
  40e656:	d020      	beq.n	40e69a <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40e658:	4633      	mov	r3, r6
  40e65a:	aa18      	add	r2, sp, #96	; 0x60
  40e65c:	4639      	mov	r1, r7
  40e65e:	4648      	mov	r0, r9
  40e660:	4c3c      	ldr	r4, [pc, #240]	; (40e754 <lv_draw_line+0x1b4>)
  40e662:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40e664:	7a73      	ldrb	r3, [r6, #9]
  40e666:	f013 0f0c 	tst.w	r3, #12
  40e66a:	d11d      	bne.n	40e6a8 <lv_draw_line+0x108>
}
  40e66c:	b01b      	add	sp, #108	; 0x6c
  40e66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e672:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40e676:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40e67a:	45be      	cmp	lr, r7
  40e67c:	d1a0      	bne.n	40e5c0 <lv_draw_line+0x20>
  40e67e:	e7f5      	b.n	40e66c <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e680:	1c66      	adds	r6, r4, #1
  40e682:	e7a4      	b.n	40e5ce <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e684:	3501      	adds	r5, #1
  40e686:	e7be      	b.n	40e606 <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e688:	3501      	adds	r5, #1
  40e68a:	e7cc      	b.n	40e626 <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e68c:	4633      	mov	r3, r6
  40e68e:	aa18      	add	r2, sp, #96	; 0x60
  40e690:	4639      	mov	r1, r7
  40e692:	4648      	mov	r0, r9
  40e694:	4c30      	ldr	r4, [pc, #192]	; (40e758 <lv_draw_line+0x1b8>)
  40e696:	47a0      	blx	r4
  40e698:	e7e4      	b.n	40e664 <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e69a:	4633      	mov	r3, r6
  40e69c:	aa18      	add	r2, sp, #96	; 0x60
  40e69e:	4639      	mov	r1, r7
  40e6a0:	4648      	mov	r0, r9
  40e6a2:	4c2e      	ldr	r4, [pc, #184]	; (40e75c <lv_draw_line+0x1bc>)
  40e6a4:	47a0      	blx	r4
  40e6a6:	e7dd      	b.n	40e664 <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40e6a8:	a803      	add	r0, sp, #12
  40e6aa:	4b2d      	ldr	r3, [pc, #180]	; (40e760 <lv_draw_line+0x1c0>)
  40e6ac:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40e6ae:	8833      	ldrh	r3, [r6, #0]
  40e6b0:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40e6b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40e6b8:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40e6bc:	7a33      	ldrb	r3, [r6, #8]
  40e6be:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40e6c2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40e6c6:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40e6c8:	b29b      	uxth	r3, r3
  40e6ca:	f083 0301 	eor.w	r3, r3, #1
  40e6ce:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40e6d2:	7a73      	ldrb	r3, [r6, #9]
  40e6d4:	f013 0f04 	tst.w	r3, #4
  40e6d8:	d11d      	bne.n	40e716 <lv_draw_line+0x176>
        if(dsc->round_end) {
  40e6da:	7a73      	ldrb	r3, [r6, #9]
  40e6dc:	f013 0f08 	tst.w	r3, #8
  40e6e0:	d0c4      	beq.n	40e66c <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40e6e2:	883b      	ldrh	r3, [r7, #0]
  40e6e4:	b2a4      	uxth	r4, r4
  40e6e6:	1b1a      	subs	r2, r3, r4
  40e6e8:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40e6ec:	8879      	ldrh	r1, [r7, #2]
  40e6ee:	1b0a      	subs	r2, r1, r4
  40e6f0:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40e6f4:	18e2      	adds	r2, r4, r3
  40e6f6:	b292      	uxth	r2, r2
  40e6f8:	b2ad      	uxth	r5, r5
  40e6fa:	1b52      	subs	r2, r2, r5
  40e6fc:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40e700:	440c      	add	r4, r1
  40e702:	b2a3      	uxth	r3, r4
  40e704:	1b5b      	subs	r3, r3, r5
  40e706:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e70a:	aa03      	add	r2, sp, #12
  40e70c:	4641      	mov	r1, r8
  40e70e:	a801      	add	r0, sp, #4
  40e710:	4b14      	ldr	r3, [pc, #80]	; (40e764 <lv_draw_line+0x1c4>)
  40e712:	4798      	blx	r3
  40e714:	e7aa      	b.n	40e66c <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40e716:	f8b9 2000 	ldrh.w	r2, [r9]
  40e71a:	b2a3      	uxth	r3, r4
  40e71c:	1ad1      	subs	r1, r2, r3
  40e71e:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40e722:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40e726:	1ac1      	subs	r1, r0, r3
  40e728:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40e72c:	441a      	add	r2, r3
  40e72e:	b292      	uxth	r2, r2
  40e730:	b2a9      	uxth	r1, r5
  40e732:	1a52      	subs	r2, r2, r1
  40e734:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40e738:	4403      	add	r3, r0
  40e73a:	b29b      	uxth	r3, r3
  40e73c:	1a5b      	subs	r3, r3, r1
  40e73e:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e742:	aa03      	add	r2, sp, #12
  40e744:	4641      	mov	r1, r8
  40e746:	a801      	add	r0, sp, #4
  40e748:	4b06      	ldr	r3, [pc, #24]	; (40e764 <lv_draw_line+0x1c4>)
  40e74a:	4798      	blx	r3
  40e74c:	e7c5      	b.n	40e6da <lv_draw_line+0x13a>
  40e74e:	bf00      	nop
  40e750:	00414c69 	.word	0x00414c69
  40e754:	0040e189 	.word	0x0040e189
  40e758:	0040dd7d 	.word	0x0040dd7d
  40e75c:	0040df8d 	.word	0x0040df8d
  40e760:	00411b6d 	.word	0x00411b6d
  40e764:	00411bb9 	.word	0x00411bb9

0040e768 <line_mask_flat>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
  40e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e76a:	9e06      	ldr	r6, [sp, #24]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40e76c:	69f4      	ldr	r4, [r6, #28]
  40e76e:	fb01 f504 	mul.w	r5, r1, r4
  40e772:	12ad      	asrs	r5, r5, #10

    if(p->yx_steep > 0) {
  40e774:	2c00      	cmp	r4, #0
  40e776:	dd09      	ble.n	40e78c <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40e778:	4295      	cmp	r5, r2
  40e77a:	dd11      	ble.n	40e7a0 <line_mask_flat+0x38>
            if(p->inv) {
  40e77c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e780:	f013 0f02 	tst.w	r3, #2
  40e784:	f000 80e2 	beq.w	40e94c <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e788:	2001      	movs	r0, #1
  40e78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
  40e78c:	4295      	cmp	r5, r2
  40e78e:	da07      	bge.n	40e7a0 <line_mask_flat+0x38>
            if(p->inv) {
  40e790:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e794:	f013 0f02 	tst.w	r3, #2
  40e798:	f000 80da 	beq.w	40e950 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e79c:	2001      	movs	r0, #1
  40e79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40e7a0:	461f      	mov	r7, r3
  40e7a2:	18cd      	adds	r5, r1, r3
  40e7a4:	fb05 f504 	mul.w	r5, r5, r4
  40e7a8:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40e7aa:	2c00      	cmp	r4, #0
  40e7ac:	dd09      	ble.n	40e7c2 <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40e7ae:	4295      	cmp	r5, r2
  40e7b0:	da11      	bge.n	40e7d6 <line_mask_flat+0x6e>
            if(p->inv) {
  40e7b2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e7b6:	f013 0f02 	tst.w	r3, #2
  40e7ba:	f000 80cb 	beq.w	40e954 <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40e7be:	2000      	movs	r0, #0
  40e7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
  40e7c2:	4295      	cmp	r5, r2
  40e7c4:	dd07      	ble.n	40e7d6 <line_mask_flat+0x6e>
            if(p->inv) {
  40e7c6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e7ca:	f013 0f02 	tst.w	r3, #2
  40e7ce:	f000 80c3 	beq.w	40e958 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40e7d2:	2000      	movs	r0, #0
  40e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40e7d6:	2c00      	cmp	r4, #0
  40e7d8:	dd39      	ble.n	40e84e <line_mask_flat+0xe6>
  40e7da:	0212      	lsls	r2, r2, #8
  40e7dc:	69b4      	ldr	r4, [r6, #24]
  40e7de:	fb04 f202 	mul.w	r2, r4, r2
  40e7e2:	1292      	asrs	r2, r2, #10
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;

    int32_t xei = xe >> 8;
  40e7e4:	ea4f 2e22 	mov.w	lr, r2, asr #8
    int32_t xef = xe & 0xFF;

    int32_t px_h;
    if(xef == 0) px_h = 255;
  40e7e8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40e7ec:	d036      	beq.n	40e85c <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40e7ee:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40e7f2:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40e7f4:	fb04 f505 	mul.w	r5, r4, r5
  40e7f8:	122d      	asrs	r5, r5, #8
  40e7fa:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40e7fe:	ebae 0101 	sub.w	r1, lr, r1
    lv_opa_t m;

    if(xef) {
  40e802:	2a00      	cmp	r2, #0
  40e804:	d05d      	beq.n	40e8c2 <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40e806:	2900      	cmp	r1, #0
  40e808:	db1f      	blt.n	40e84a <line_mask_flat+0xe2>
  40e80a:	428b      	cmp	r3, r1
  40e80c:	dd1d      	ble.n	40e84a <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40e80e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40e812:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40e816:	fb04 f202 	mul.w	r2, r4, r2
  40e81a:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40e81e:	43d4      	mvns	r4, r2
  40e820:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40e822:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40e826:	f01e 0f02 	tst.w	lr, #2
  40e82a:	d100      	bne.n	40e82e <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40e82c:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e82e:	5c44      	ldrb	r4, [r0, r1]
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e830:	2afc      	cmp	r2, #252	; 0xfc
  40e832:	d809      	bhi.n	40e848 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e834:	2a02      	cmp	r2, #2
  40e836:	d913      	bls.n	40e860 <line_mask_flat+0xf8>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e838:	fb04 f202 	mul.w	r2, r4, r2
  40e83c:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40e840:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40e844:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e848:	5444      	strb	r4, [r0, r1]
        k++;
  40e84a:	1c4a      	adds	r2, r1, #1
  40e84c:	e013      	b.n	40e876 <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40e84e:	3201      	adds	r2, #1
  40e850:	0212      	lsls	r2, r2, #8
  40e852:	69b4      	ldr	r4, [r6, #24]
  40e854:	fb04 f202 	mul.w	r2, r4, r2
  40e858:	1292      	asrs	r2, r2, #10
  40e85a:	e7c3      	b.n	40e7e4 <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40e85c:	25ff      	movs	r5, #255	; 0xff
  40e85e:	e7ce      	b.n	40e7fe <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e860:	2400      	movs	r4, #0
  40e862:	e7f1      	b.n	40e848 <line_mask_flat+0xe0>
  40e864:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e868:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40e86c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40e86e:	1b2d      	subs	r5, r5, r4
        k++;
  40e870:	3201      	adds	r2, #1
        if(k >= len) break;
  40e872:	4297      	cmp	r7, r2
  40e874:	dd27      	ble.n	40e8c6 <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40e876:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40e87a:	4575      	cmp	r5, lr
  40e87c:	dd23      	ble.n	40e8c6 <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40e87e:	2a00      	cmp	r2, #0
  40e880:	dbf4      	blt.n	40e86c <line_mask_flat+0x104>
  40e882:	42ba      	cmp	r2, r7
  40e884:	daf2      	bge.n	40e86c <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40e886:	b2ec      	uxtb	r4, r5
  40e888:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40e88c:	eba4 040e 	sub.w	r4, r4, lr
  40e890:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40e892:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40e896:	f01e 0f02 	tst.w	lr, #2
  40e89a:	d001      	beq.n	40e8a0 <line_mask_flat+0x138>
  40e89c:	43e4      	mvns	r4, r4
  40e89e:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40e8a0:	eb00 0c02 	add.w	ip, r0, r2
  40e8a4:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e8a8:	2cfc      	cmp	r4, #252	; 0xfc
  40e8aa:	d8dd      	bhi.n	40e868 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e8ac:	2c02      	cmp	r4, #2
  40e8ae:	d9d9      	bls.n	40e864 <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e8b0:	fb04 f40e 	mul.w	r4, r4, lr
  40e8b4:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40e8b8:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40e8bc:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40e8c0:	e7d2      	b.n	40e868 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40e8c2:	460a      	mov	r2, r1
  40e8c4:	e7d7      	b.n	40e876 <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40e8c6:	429a      	cmp	r2, r3
  40e8c8:	da27      	bge.n	40e91a <line_mask_flat+0x1b2>
  40e8ca:	2a00      	cmp	r2, #0
  40e8cc:	db25      	blt.n	40e91a <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40e8ce:	69b4      	ldr	r4, [r6, #24]
  40e8d0:	fb04 f405 	mul.w	r4, r4, r5
  40e8d4:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40e8d6:	fb04 f505 	mul.w	r5, r4, r5
  40e8da:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40e8de:	69f4      	ldr	r4, [r6, #28]
  40e8e0:	2c00      	cmp	r4, #0
  40e8e2:	db15      	blt.n	40e910 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40e8e4:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40e8e8:	f014 0f02 	tst.w	r4, #2
  40e8ec:	d001      	beq.n	40e8f2 <line_mask_flat+0x18a>
  40e8ee:	43ed      	mvns	r5, r5
  40e8f0:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e8f2:	1887      	adds	r7, r0, r2
  40e8f4:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40e8f6:	2dfc      	cmp	r5, #252	; 0xfc
  40e8f8:	d80e      	bhi.n	40e918 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e8fa:	2d02      	cmp	r5, #2
  40e8fc:	d90b      	bls.n	40e916 <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40e8fe:	fb05 f504 	mul.w	r5, r5, r4
  40e902:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40e906:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40e90a:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40e90e:	e003      	b.n	40e918 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40e910:	43ed      	mvns	r5, r5
  40e912:	b2ed      	uxtb	r5, r5
  40e914:	e7e6      	b.n	40e8e4 <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40e916:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40e918:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40e91a:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40e91e:	f014 0f02 	tst.w	r4, #2
  40e922:	d007      	beq.n	40e934 <line_mask_flat+0x1cc>
        if(k > len) {
  40e924:	428b      	cmp	r3, r1
  40e926:	db19      	blt.n	40e95c <line_mask_flat+0x1f4>
        if(k >= 0) {
  40e928:	2900      	cmp	r1, #0
  40e92a:	db19      	blt.n	40e960 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40e92c:	4b0e      	ldr	r3, [pc, #56]	; (40e968 <line_mask_flat+0x200>)
  40e92e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e930:	2002      	movs	r0, #2
  40e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40e934:	3201      	adds	r2, #1
  40e936:	d415      	bmi.n	40e964 <line_mask_flat+0x1fc>
        if(k <= len) {
  40e938:	4293      	cmp	r3, r2
  40e93a:	da01      	bge.n	40e940 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40e93c:	2002      	movs	r0, #2
}
  40e93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40e940:	1a99      	subs	r1, r3, r2
  40e942:	4410      	add	r0, r2
  40e944:	4b08      	ldr	r3, [pc, #32]	; (40e968 <line_mask_flat+0x200>)
  40e946:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40e948:	2002      	movs	r0, #2
  40e94a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40e94c:	2000      	movs	r0, #0
  40e94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40e950:	2000      	movs	r0, #0
  40e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e954:	2001      	movs	r0, #1
  40e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e958:	2001      	movs	r0, #1
  40e95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e95c:	2000      	movs	r0, #0
  40e95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40e960:	2002      	movs	r0, #2
  40e962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40e964:	2000      	movs	r0, #0
  40e966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40e968:	00416169 	.word	0x00416169

0040e96c <line_mask_steep>:
{
  40e96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e96e:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e970:	69b5      	ldr	r5, [r6, #24]
  40e972:	fb02 f405 	mul.w	r4, r2, r5
  40e976:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40e978:	2d00      	cmp	r5, #0
  40e97a:	dd0a      	ble.n	40e992 <line_mask_steep+0x26>
  40e97c:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40e97e:	428f      	cmp	r7, r1
  40e980:	da09      	bge.n	40e996 <line_mask_steep+0x2a>
        if(p->inv) {
  40e982:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e986:	f013 0f02 	tst.w	r3, #2
  40e98a:	f000 8156 	beq.w	40ec3a <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40e98e:	2001      	movs	r0, #1
  40e990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40e992:	4627      	mov	r7, r4
  40e994:	e7f3      	b.n	40e97e <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40e996:	18cf      	adds	r7, r1, r3
  40e998:	42bc      	cmp	r4, r7
  40e99a:	dd07      	ble.n	40e9ac <line_mask_steep+0x40>
        if(p->inv) {
  40e99c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e9a0:	f013 0f02 	tst.w	r3, #2
  40e9a4:	f000 814b 	beq.w	40ec3e <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40e9a8:	2000      	movs	r0, #0
  40e9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40e9ac:	0217      	lsls	r7, r2, #8
  40e9ae:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40e9b2:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40e9b4:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40e9b8:	3201      	adds	r2, #1
  40e9ba:	0212      	lsls	r2, r2, #8
  40e9bc:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40e9c0:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40e9c4:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40e9c8:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40e9ca:	4564      	cmp	r4, ip
  40e9cc:	d001      	beq.n	40e9d2 <line_mask_steep+0x66>
  40e9ce:	2d00      	cmp	r5, #0
  40e9d0:	db68      	blt.n	40eaa4 <line_mask_steep+0x138>
    if(xsi == xei) {
  40e9d2:	4564      	cmp	r4, ip
  40e9d4:	d06e      	beq.n	40eab4 <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40e9d6:	2d00      	cmp	r5, #0
  40e9d8:	f2c0 80ad 	blt.w	40eb36 <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40e9dc:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40e9e0:	69f5      	ldr	r5, [r6, #28]
  40e9e2:	fb05 f502 	mul.w	r5, r5, r2
  40e9e6:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40e9e8:	2f00      	cmp	r7, #0
  40e9ea:	db22      	blt.n	40ea32 <line_mask_steep+0xc6>
  40e9ec:	429f      	cmp	r7, r3
  40e9ee:	da20      	bge.n	40ea32 <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40e9f0:	fb05 f202 	mul.w	r2, r5, r2
  40e9f4:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40e9f8:	ea6f 0e02 	mvn.w	lr, r2
  40e9fc:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40ea00:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40ea04:	f01c 0f02 	tst.w	ip, #2
  40ea08:	d100      	bne.n	40ea0c <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40ea0a:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea0c:	eb00 0c07 	add.w	ip, r0, r7
  40ea10:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ea14:	2afc      	cmp	r2, #252	; 0xfc
  40ea16:	d80a      	bhi.n	40ea2e <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ea18:	2a02      	cmp	r2, #2
  40ea1a:	f240 80fd 	bls.w	40ec18 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ea1e:	fb02 f20e 	mul.w	r2, r2, lr
  40ea22:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40ea26:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40ea2a:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea2e:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40ea32:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40ea36:	69b2      	ldr	r2, [r6, #24]
  40ea38:	fb02 f205 	mul.w	r2, r2, r5
  40ea3c:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40ea3e:	f117 0e01 	adds.w	lr, r7, #1
  40ea42:	d41d      	bmi.n	40ea80 <line_mask_steep+0x114>
  40ea44:	4573      	cmp	r3, lr
  40ea46:	dd1b      	ble.n	40ea80 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40ea48:	fb02 f205 	mul.w	r2, r2, r5
  40ea4c:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40ea50:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40ea54:	f015 0f02 	tst.w	r5, #2
  40ea58:	d001      	beq.n	40ea5e <line_mask_steep+0xf2>
  40ea5a:	43d2      	mvns	r2, r2
  40ea5c:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea5e:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ea62:	2afc      	cmp	r2, #252	; 0xfc
  40ea64:	d80a      	bhi.n	40ea7c <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ea66:	2a02      	cmp	r2, #2
  40ea68:	f240 80d9 	bls.w	40ec1e <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ea6c:	fb02 f205 	mul.w	r2, r2, r5
  40ea70:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40ea74:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40ea78:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea7c:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40ea80:	3702      	adds	r7, #2
            if(p->inv) {
  40ea82:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ea86:	f012 0f02 	tst.w	r2, #2
  40ea8a:	f000 80ca 	beq.w	40ec22 <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40ea8e:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ea90:	428b      	cmp	r3, r1
  40ea92:	f2c0 80e4 	blt.w	40ec5e <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40ea96:	2900      	cmp	r1, #0
  40ea98:	f2c0 80e3 	blt.w	40ec62 <line_mask_steep+0x2f6>
  40ea9c:	4b74      	ldr	r3, [pc, #464]	; (40ec70 <line_mask_steep+0x304>)
  40ea9e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40eaa0:	2002      	movs	r0, #2
  40eaa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40eaa4:	f1be 0f00 	cmp.w	lr, #0
  40eaa8:	d193      	bne.n	40e9d2 <line_mask_steep+0x66>
        k--;
  40eaaa:	3f01      	subs	r7, #1
        xsi = xei;
  40eaac:	4664      	mov	r4, ip
        xsf = 0xFF;
  40eaae:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40eab2:	e78e      	b.n	40e9d2 <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40eab4:	2f00      	cmp	r7, #0
  40eab6:	db1c      	blt.n	40eaf2 <line_mask_steep+0x186>
  40eab8:	429f      	cmp	r7, r3
  40eaba:	da1a      	bge.n	40eaf2 <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40eabc:	4472      	add	r2, lr
  40eabe:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40eac2:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40eac6:	f015 0f02 	tst.w	r5, #2
  40eaca:	d001      	beq.n	40ead0 <line_mask_steep+0x164>
  40eacc:	43d2      	mvns	r2, r2
  40eace:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ead0:	eb00 0e07 	add.w	lr, r0, r7
  40ead4:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ead6:	2afc      	cmp	r2, #252	; 0xfc
  40ead8:	d809      	bhi.n	40eaee <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eada:	2a02      	cmp	r2, #2
  40eadc:	d91a      	bls.n	40eb14 <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eade:	fb05 f202 	mul.w	r2, r5, r2
  40eae2:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40eae6:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40eaea:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40eaee:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40eaf2:	3701      	adds	r7, #1
        if(p->inv) {
  40eaf4:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40eaf8:	f012 0f02 	tst.w	r2, #2
  40eafc:	d00c      	beq.n	40eb18 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40eafe:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40eb00:	428b      	cmp	r3, r1
  40eb02:	f340 809e 	ble.w	40ec42 <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40eb06:	2900      	cmp	r1, #0
  40eb08:	f2c0 809d 	blt.w	40ec46 <line_mask_steep+0x2da>
  40eb0c:	4b58      	ldr	r3, [pc, #352]	; (40ec70 <line_mask_steep+0x304>)
  40eb0e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40eb10:	2002      	movs	r0, #2
  40eb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb14:	2500      	movs	r5, #0
  40eb16:	e7ea      	b.n	40eaee <line_mask_steep+0x182>
            if(k > len) k = len;
  40eb18:	42bb      	cmp	r3, r7
  40eb1a:	da00      	bge.n	40eb1e <line_mask_steep+0x1b2>
  40eb1c:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40eb1e:	2f00      	cmp	r7, #0
  40eb20:	f000 8093 	beq.w	40ec4a <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40eb24:	2f00      	cmp	r7, #0
  40eb26:	f340 8092 	ble.w	40ec4e <line_mask_steep+0x2e2>
  40eb2a:	1bd9      	subs	r1, r3, r7
  40eb2c:	4438      	add	r0, r7
  40eb2e:	4b50      	ldr	r3, [pc, #320]	; (40ec70 <line_mask_steep+0x304>)
  40eb30:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40eb32:	2002      	movs	r0, #2
  40eb34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40eb36:	69f2      	ldr	r2, [r6, #28]
  40eb38:	4252      	negs	r2, r2
  40eb3a:	fb02 f20e 	mul.w	r2, r2, lr
  40eb3e:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40eb40:	2f00      	cmp	r7, #0
  40eb42:	db23      	blt.n	40eb8c <line_mask_steep+0x220>
  40eb44:	429f      	cmp	r7, r3
  40eb46:	da21      	bge.n	40eb8c <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40eb48:	fb02 fe0e 	mul.w	lr, r2, lr
  40eb4c:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40eb50:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40eb54:	f015 0f02 	tst.w	r5, #2
  40eb58:	d003      	beq.n	40eb62 <line_mask_steep+0x1f6>
  40eb5a:	ea6f 0e0e 	mvn.w	lr, lr
  40eb5e:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40eb62:	eb00 0c07 	add.w	ip, r0, r7
  40eb66:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eb68:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40eb6c:	d80c      	bhi.n	40eb88 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb6e:	f1be 0f02 	cmp.w	lr, #2
  40eb72:	d908      	bls.n	40eb86 <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eb74:	fb0e fe05 	mul.w	lr, lr, r5
  40eb78:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40eb7c:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40eb80:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40eb84:	e000      	b.n	40eb88 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb86:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40eb88:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40eb8c:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40eb90:	69b2      	ldr	r2, [r6, #24]
  40eb92:	4252      	negs	r2, r2
  40eb94:	fb02 f205 	mul.w	r2, r2, r5
  40eb98:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40eb9a:	f1b7 0e01 	subs.w	lr, r7, #1
  40eb9e:	d41f      	bmi.n	40ebe0 <line_mask_steep+0x274>
  40eba0:	4573      	cmp	r3, lr
  40eba2:	dd1d      	ble.n	40ebe0 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40eba4:	fb02 f205 	mul.w	r2, r2, r5
  40eba8:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40ebac:	43d5      	mvns	r5, r2
  40ebae:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40ebb0:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40ebb4:	f01c 0f02 	tst.w	ip, #2
  40ebb8:	d100      	bne.n	40ebbc <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40ebba:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ebbc:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ebc0:	2afc      	cmp	r2, #252	; 0xfc
  40ebc2:	d80b      	bhi.n	40ebdc <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ebc4:	2a02      	cmp	r2, #2
  40ebc6:	d908      	bls.n	40ebda <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ebc8:	fb02 f205 	mul.w	r2, r2, r5
  40ebcc:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40ebd0:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40ebd4:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40ebd8:	e000      	b.n	40ebdc <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ebda:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ebdc:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40ebe0:	3701      	adds	r7, #1
            if(p->inv) {
  40ebe2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ebe6:	f012 0f02 	tst.w	r2, #2
  40ebea:	d00b      	beq.n	40ec04 <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40ebec:	1a61      	subs	r1, r4, r1
  40ebee:	3901      	subs	r1, #1
                if(k > len) k = len;
  40ebf0:	428b      	cmp	r3, r1
  40ebf2:	da01      	bge.n	40ebf8 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40ebf4:	2002      	movs	r0, #2
  40ebf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40ebf8:	2900      	cmp	r1, #0
  40ebfa:	dd2a      	ble.n	40ec52 <line_mask_steep+0x2e6>
  40ebfc:	4b1c      	ldr	r3, [pc, #112]	; (40ec70 <line_mask_steep+0x304>)
  40ebfe:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ec00:	2002      	movs	r0, #2
  40ec02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ec04:	42bb      	cmp	r3, r7
  40ec06:	db26      	blt.n	40ec56 <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ec08:	2f00      	cmp	r7, #0
  40ec0a:	db26      	blt.n	40ec5a <line_mask_steep+0x2ee>
  40ec0c:	1bd9      	subs	r1, r3, r7
  40ec0e:	4438      	add	r0, r7
  40ec10:	4b17      	ldr	r3, [pc, #92]	; (40ec70 <line_mask_steep+0x304>)
  40ec12:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ec14:	2002      	movs	r0, #2
  40ec16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40ec18:	f04f 0e00 	mov.w	lr, #0
  40ec1c:	e707      	b.n	40ea2e <line_mask_steep+0xc2>
  40ec1e:	2500      	movs	r5, #0
  40ec20:	e72c      	b.n	40ea7c <line_mask_steep+0x110>
                if(k > len) k = len;
  40ec22:	42bb      	cmp	r3, r7
  40ec24:	da00      	bge.n	40ec28 <line_mask_steep+0x2bc>
  40ec26:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ec28:	b1ef      	cbz	r7, 40ec66 <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ec2a:	2f00      	cmp	r7, #0
  40ec2c:	dd1d      	ble.n	40ec6a <line_mask_steep+0x2fe>
  40ec2e:	1bd9      	subs	r1, r3, r7
  40ec30:	4438      	add	r0, r7
  40ec32:	4b0f      	ldr	r3, [pc, #60]	; (40ec70 <line_mask_steep+0x304>)
  40ec34:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ec36:	2002      	movs	r0, #2
  40ec38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ec3a:	2000      	movs	r0, #0
  40ec3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ec3e:	2001      	movs	r0, #1
  40ec40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ec42:	2000      	movs	r0, #0
  40ec44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ec46:	2002      	movs	r0, #2
  40ec48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ec4a:	2000      	movs	r0, #0
  40ec4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ec4e:	2002      	movs	r0, #2
  40ec50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ec52:	2002      	movs	r0, #2
  40ec54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ec56:	2001      	movs	r0, #1
  40ec58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ec5a:	2002      	movs	r0, #2
  40ec5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ec5e:	2000      	movs	r0, #0
  40ec60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ec62:	2002      	movs	r0, #2
  40ec64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ec66:	2000      	movs	r0, #0
  40ec68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ec6a:	2002      	movs	r0, #2
}
  40ec6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ec6e:	bf00      	nop
  40ec70:	00416169 	.word	0x00416169

0040ec74 <lv_draw_mask_line>:
{
  40ec74:	b570      	push	{r4, r5, r6, lr}
  40ec76:	b082      	sub	sp, #8
  40ec78:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40ec7a:	8aa5      	ldrh	r5, [r4, #20]
  40ec7c:	1b52      	subs	r2, r2, r5
  40ec7e:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40ec80:	8a65      	ldrh	r5, [r4, #18]
  40ec82:	1b49      	subs	r1, r1, r5
  40ec84:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40ec86:	6a26      	ldr	r6, [r4, #32]
  40ec88:	2e00      	cmp	r6, #0
  40ec8a:	d146      	bne.n	40ed1a <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40ec8c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40ec90:	f015 0f01 	tst.w	r5, #1
  40ec94:	d015      	beq.n	40ecc2 <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40ec96:	7c23      	ldrb	r3, [r4, #16]
  40ec98:	f003 0303 	and.w	r3, r3, #3
  40ec9c:	2b01      	cmp	r3, #1
  40ec9e:	d94a      	bls.n	40ed36 <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eca0:	2b02      	cmp	r3, #2
  40eca2:	d003      	beq.n	40ecac <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eca4:	2b03      	cmp	r3, #3
  40eca6:	d006      	beq.n	40ecb6 <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40eca8:	2000      	movs	r0, #0
  40ecaa:	e03e      	b.n	40ed2a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ecac:	f112 0f01 	cmn.w	r2, #1
  40ecb0:	d5f8      	bpl.n	40eca4 <lv_draw_mask_line+0x30>
  40ecb2:	2001      	movs	r0, #1
  40ecb4:	e039      	b.n	40ed2a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ecb6:	2a00      	cmp	r2, #0
  40ecb8:	dd01      	ble.n	40ecbe <lv_draw_mask_line+0x4a>
  40ecba:	2001      	movs	r0, #1
  40ecbc:	e035      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40ecbe:	2000      	movs	r0, #0
  40ecc0:	e033      	b.n	40ed2a <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40ecc2:	7c22      	ldrb	r2, [r4, #16]
  40ecc4:	f002 0203 	and.w	r2, r2, #3
  40ecc8:	1e94      	subs	r4, r2, #2
  40ecca:	b2e4      	uxtb	r4, r4
  40eccc:	2c01      	cmp	r4, #1
  40ecce:	d934      	bls.n	40ed3a <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ecd0:	2a01      	cmp	r2, #1
  40ecd2:	d009      	beq.n	40ece8 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40ecd4:	b992      	cbnz	r2, 40ecfc <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ecd6:	18ca      	adds	r2, r1, r3
  40ecd8:	d431      	bmi.n	40ed3e <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40ecda:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ecdc:	2d00      	cmp	r5, #0
  40ecde:	db30      	blt.n	40ed42 <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ece0:	42ab      	cmp	r3, r5
  40ece2:	dc05      	bgt.n	40ecf0 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40ece4:	2002      	movs	r0, #2
  40ece6:	e020      	b.n	40ed2a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ece8:	2900      	cmp	r1, #0
  40ecea:	ddf3      	ble.n	40ecd4 <lv_draw_mask_line+0x60>
  40ecec:	2001      	movs	r0, #1
  40ecee:	e01c      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ecf0:	4611      	mov	r1, r2
  40ecf2:	4428      	add	r0, r5
  40ecf4:	4b17      	ldr	r3, [pc, #92]	; (40ed54 <lv_draw_mask_line+0xe0>)
  40ecf6:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40ecf8:	2002      	movs	r0, #2
  40ecfa:	e016      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ecfc:	42d9      	cmn	r1, r3
  40ecfe:	d422      	bmi.n	40ed46 <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40ed00:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40ed02:	2900      	cmp	r1, #0
  40ed04:	db07      	blt.n	40ed16 <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40ed06:	4299      	cmp	r1, r3
  40ed08:	da1f      	bge.n	40ed4a <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40ed0a:	2900      	cmp	r1, #0
  40ed0c:	db1f      	blt.n	40ed4e <lv_draw_mask_line+0xda>
  40ed0e:	4b11      	ldr	r3, [pc, #68]	; (40ed54 <lv_draw_mask_line+0xe0>)
  40ed10:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40ed12:	2002      	movs	r0, #2
  40ed14:	e009      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40ed16:	4631      	mov	r1, r6
  40ed18:	e7f5      	b.n	40ed06 <lv_draw_mask_line+0x92>
    if(p->flat) {
  40ed1a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40ed1e:	f015 0f01 	tst.w	r5, #1
  40ed22:	d104      	bne.n	40ed2e <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40ed24:	9400      	str	r4, [sp, #0]
  40ed26:	4c0c      	ldr	r4, [pc, #48]	; (40ed58 <lv_draw_mask_line+0xe4>)
  40ed28:	47a0      	blx	r4
}
  40ed2a:	b002      	add	sp, #8
  40ed2c:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40ed2e:	9400      	str	r4, [sp, #0]
  40ed30:	4c0a      	ldr	r4, [pc, #40]	; (40ed5c <lv_draw_mask_line+0xe8>)
  40ed32:	47a0      	blx	r4
  40ed34:	e7f9      	b.n	40ed2a <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40ed36:	2001      	movs	r0, #1
  40ed38:	e7f7      	b.n	40ed2a <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40ed3a:	2001      	movs	r0, #1
  40ed3c:	e7f5      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ed3e:	2001      	movs	r0, #1
  40ed40:	e7f3      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ed42:	2000      	movs	r0, #0
  40ed44:	e7f1      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ed46:	2000      	movs	r0, #0
  40ed48:	e7ef      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40ed4a:	2000      	movs	r0, #0
  40ed4c:	e7ed      	b.n	40ed2a <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40ed4e:	2002      	movs	r0, #2
  40ed50:	e7eb      	b.n	40ed2a <lv_draw_mask_line+0xb6>
  40ed52:	bf00      	nop
  40ed54:	00416169 	.word	0x00416169
  40ed58:	0040e96d 	.word	0x0040e96d
  40ed5c:	0040e769 	.word	0x0040e769

0040ed60 <lv_draw_mask_radius>:
{
  40ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ed64:	b08b      	sub	sp, #44	; 0x2c
  40ed66:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40ed68:	7cb5      	ldrb	r5, [r6, #18]
  40ed6a:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40ed6e:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40ed72:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40ed76:	f10d 0e20 	add.w	lr, sp, #32
  40ed7a:	2408      	movs	r4, #8
  40ed7c:	e004      	b.n	40ed88 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40ed7e:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40ed82:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40ed86:	3c01      	subs	r4, #1
    while(len) {
  40ed88:	2c00      	cmp	r4, #0
  40ed8a:	d1f8      	bne.n	40ed7e <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40ed8c:	2d00      	cmp	r5, #0
  40ed8e:	d13f      	bne.n	40ee10 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40ed90:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40ed94:	4294      	cmp	r4, r2
  40ed96:	f300 829d 	bgt.w	40f2d4 <lv_draw_mask_radius+0x574>
  40ed9a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40ed9e:	42a2      	cmp	r2, r4
  40eda0:	f300 829c 	bgt.w	40f2dc <lv_draw_mask_radius+0x57c>
  40eda4:	461f      	mov	r7, r3
  40eda6:	468b      	mov	fp, r1
  40eda8:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40edaa:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40edae:	eb09 0103 	add.w	r1, r9, r3
  40edb2:	458b      	cmp	fp, r1
  40edb4:	db07      	blt.n	40edc6 <lv_draw_mask_radius+0x66>
  40edb6:	eb07 000b 	add.w	r0, r7, fp
  40edba:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40edbe:	eba1 0109 	sub.w	r1, r1, r9
  40edc2:	4288      	cmp	r0, r1
  40edc4:	dd0b      	ble.n	40edde <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40edc6:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40edca:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40edce:	4282      	cmp	r2, r0
  40edd0:	db50      	blt.n	40ee74 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40edd2:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40edd6:	eba0 0009 	sub.w	r0, r0, r9
  40edda:	4282      	cmp	r2, r0
  40eddc:	dc4a      	bgt.n	40ee74 <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40edde:	bb6d      	cbnz	r5, 40ee3c <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40ede0:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40ede4:	42bd      	cmp	r5, r7
  40ede6:	f300 827d 	bgt.w	40f2e4 <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40edea:	2d00      	cmp	r5, #0
  40edec:	db03      	blt.n	40edf6 <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40edee:	4629      	mov	r1, r5
  40edf0:	4640      	mov	r0, r8
  40edf2:	4ba7      	ldr	r3, [pc, #668]	; (40f090 <lv_draw_mask_radius+0x330>)
  40edf4:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40edf6:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40edfa:	eba3 040b 	sub.w	r4, r3, fp
  40edfe:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40ee00:	2c00      	cmp	r4, #0
  40ee02:	f340 8271 	ble.w	40f2e8 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40ee06:	42a7      	cmp	r7, r4
  40ee08:	dc0d      	bgt.n	40ee26 <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ee0a:	b195      	cbz	r5, 40ee32 <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40ee0c:	2002      	movs	r0, #2
  40ee0e:	e262      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40ee10:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40ee14:	42a2      	cmp	r2, r4
  40ee16:	f2c0 8263 	blt.w	40f2e0 <lv_draw_mask_radius+0x580>
  40ee1a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40ee1e:	42a2      	cmp	r2, r4
  40ee20:	ddc0      	ble.n	40eda4 <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ee22:	2001      	movs	r0, #1
  40ee24:	e257      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40ee26:	1b39      	subs	r1, r7, r4
  40ee28:	eb08 0004 	add.w	r0, r8, r4
  40ee2c:	4b98      	ldr	r3, [pc, #608]	; (40f090 <lv_draw_mask_radius+0x330>)
  40ee2e:	4798      	blx	r3
  40ee30:	e7eb      	b.n	40ee0a <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ee32:	42a7      	cmp	r7, r4
  40ee34:	f000 825a 	beq.w	40f2ec <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40ee38:	2002      	movs	r0, #2
  40ee3a:	e24c      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40ee3c:	ebb3 030b 	subs.w	r3, r3, fp
  40ee40:	d403      	bmi.n	40ee4a <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40ee42:	42bb      	cmp	r3, r7
  40ee44:	dd03      	ble.n	40ee4e <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40ee46:	2002      	movs	r0, #2
  40ee48:	e245      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40ee4a:	2300      	movs	r3, #0
  40ee4c:	e7f9      	b.n	40ee42 <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40ee4e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40ee52:	eba1 010b 	sub.w	r1, r1, fp
  40ee56:	1ac9      	subs	r1, r1, r3
  40ee58:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40ee5a:	185a      	adds	r2, r3, r1
  40ee5c:	4297      	cmp	r7, r2
  40ee5e:	da00      	bge.n	40ee62 <lv_draw_mask_radius+0x102>
  40ee60:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40ee62:	2900      	cmp	r1, #0
  40ee64:	f2c0 8244 	blt.w	40f2f0 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40ee68:	eb08 0003 	add.w	r0, r8, r3
  40ee6c:	4b88      	ldr	r3, [pc, #544]	; (40f090 <lv_draw_mask_radius+0x330>)
  40ee6e:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40ee70:	2002      	movs	r0, #2
  40ee72:	e230      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40ee74:	eba3 0b0b 	sub.w	fp, r3, fp
  40ee78:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40ee7c:	b29b      	uxth	r3, r3
  40ee7e:	1ac3      	subs	r3, r0, r3
  40ee80:	b29b      	uxth	r3, r3
  40ee82:	3301      	adds	r3, #1
  40ee84:	b21b      	sxth	r3, r3
  40ee86:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ee88:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40ee8c:	b28c      	uxth	r4, r1
  40ee8e:	1b1b      	subs	r3, r3, r4
  40ee90:	b29b      	uxth	r3, r3
  40ee92:	3301      	adds	r3, #1
  40ee94:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40ee96:	1b14      	subs	r4, r2, r4
  40ee98:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40ee9a:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40ee9e:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40eea2:	45a1      	cmp	r9, r4
  40eea4:	dc06      	bgt.n	40eeb4 <lv_draw_mask_radius+0x154>
  40eea6:	eba3 0209 	sub.w	r2, r3, r9
  40eeaa:	3a01      	subs	r2, #1
  40eeac:	4294      	cmp	r4, r2
  40eeae:	dc01      	bgt.n	40eeb4 <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40eeb0:	2002      	movs	r0, #2
  40eeb2:	e210      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40eeb4:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40eeb8:	f300 80b1 	bgt.w	40f01e <lv_draw_mask_radius+0x2be>
  40eebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40eec0:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40eec2:	45a1      	cmp	r9, r4
  40eec4:	f340 80b6 	ble.w	40f034 <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40eec8:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40eecc:	6973      	ldr	r3, [r6, #20]
  40eece:	429c      	cmp	r4, r3
  40eed0:	f000 80a9 	beq.w	40f026 <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40eed4:	9a01      	ldr	r2, [sp, #4]
  40eed6:	a904      	add	r1, sp, #16
  40eed8:	fb04 a014 	mls	r0, r4, r4, sl
  40eedc:	4b6d      	ldr	r3, [pc, #436]	; (40f094 <lv_draw_mask_radius+0x334>)
  40eede:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40eee0:	1e63      	subs	r3, r4, #1
  40eee2:	9a01      	ldr	r2, [sp, #4]
  40eee4:	a905      	add	r1, sp, #20
  40eee6:	9303      	str	r3, [sp, #12]
  40eee8:	fb03 a013 	mls	r0, r3, r3, sl
  40eeec:	4b69      	ldr	r3, [pc, #420]	; (40f094 <lv_draw_mask_radius+0x334>)
  40eeee:	4798      	blx	r3
            p->y_prev = y - 1;
  40eef0:	9b03      	ldr	r3, [sp, #12]
  40eef2:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40eef4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40eef8:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40eefa:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40eefe:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40ef00:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40ef04:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40ef08:	1e51      	subs	r1, r2, #1
  40ef0a:	428b      	cmp	r3, r1
  40ef0c:	f000 80b4 	beq.w	40f078 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40ef10:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40ef14:	4293      	cmp	r3, r2
  40ef16:	f000 80bf 	beq.w	40f098 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40ef1a:	3301      	adds	r3, #1
  40ef1c:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40ef20:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40ef24:	9b02      	ldr	r3, [sp, #8]
  40ef26:	eba3 0909 	sub.w	r9, r3, r9
  40ef2a:	f109 39ff 	add.w	r9, r9, #4294967295
  40ef2e:	44d9      	add	r9, fp
            if(outer) {
  40ef30:	b175      	cbz	r5, 40ef50 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40ef32:	1c70      	adds	r0, r6, #1
  40ef34:	f100 8116 	bmi.w	40f164 <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40ef38:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40ef3c:	45b9      	cmp	r9, r7
  40ef3e:	dd00      	ble.n	40ef42 <lv_draw_mask_radius+0x1e2>
  40ef40:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40ef42:	42b8      	cmp	r0, r7
  40ef44:	da04      	bge.n	40ef50 <lv_draw_mask_radius+0x1f0>
  40ef46:	2900      	cmp	r1, #0
  40ef48:	db02      	blt.n	40ef50 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40ef4a:	4440      	add	r0, r8
  40ef4c:	4b50      	ldr	r3, [pc, #320]	; (40f090 <lv_draw_mask_radius+0x330>)
  40ef4e:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40ef50:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40ef54:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40ef58:	9a01      	ldr	r2, [sp, #4]
  40ef5a:	a906      	add	r1, sp, #24
  40ef5c:	fb00 a010 	mls	r0, r0, r0, sl
  40ef60:	4b4c      	ldr	r3, [pc, #304]	; (40f094 <lv_draw_mask_radius+0x334>)
  40ef62:	4798      	blx	r3
            if(y_prev.f == 0) {
  40ef64:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40ef68:	b93b      	cbnz	r3, 40ef7a <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40ef6a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40ef6e:	3b01      	subs	r3, #1
  40ef70:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40ef74:	23ff      	movs	r3, #255	; 0xff
  40ef76:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40ef7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40ef7e:	429c      	cmp	r4, r3
  40ef80:	f300 8103 	bgt.w	40f18a <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40ef84:	9a01      	ldr	r2, [sp, #4]
  40ef86:	a907      	add	r1, sp, #28
  40ef88:	fb0b a01b 	mls	r0, fp, fp, sl
  40ef8c:	4b41      	ldr	r3, [pc, #260]	; (40f094 <lv_draw_mask_radius+0x334>)
  40ef8e:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40ef90:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40ef94:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40ef98:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40ef9c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40efa0:	fb03 f302 	mul.w	r3, r3, r2
  40efa4:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40efa8:	43da      	mvns	r2, r3
  40efaa:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40efac:	b905      	cbnz	r5, 40efb0 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40efae:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40efb0:	2e00      	cmp	r6, #0
  40efb2:	db13      	blt.n	40efdc <lv_draw_mask_radius+0x27c>
  40efb4:	42be      	cmp	r6, r7
  40efb6:	da11      	bge.n	40efdc <lv_draw_mask_radius+0x27c>
  40efb8:	eb08 0106 	add.w	r1, r8, r6
  40efbc:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40efc0:	2bfc      	cmp	r3, #252	; 0xfc
  40efc2:	d80a      	bhi.n	40efda <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40efc4:	2b02      	cmp	r3, #2
  40efc6:	f240 80cf 	bls.w	40f168 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40efca:	fb03 f202 	mul.w	r2, r3, r2
  40efce:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40efd2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40efd6:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40efda:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40efdc:	f1b9 0f00 	cmp.w	r9, #0
  40efe0:	db13      	blt.n	40f00a <lv_draw_mask_radius+0x2aa>
  40efe2:	45b9      	cmp	r9, r7
  40efe4:	da11      	bge.n	40f00a <lv_draw_mask_radius+0x2aa>
  40efe6:	eb08 0109 	add.w	r1, r8, r9
  40efea:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40efee:	2bfc      	cmp	r3, #252	; 0xfc
  40eff0:	d80a      	bhi.n	40f008 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eff2:	2b02      	cmp	r3, #2
  40eff4:	f240 80ba 	bls.w	40f16c <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eff8:	fb03 f302 	mul.w	r3, r3, r2
  40effc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f000:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f004:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f008:	700a      	strb	r2, [r1, #0]
                kl--;
  40f00a:	3e01      	subs	r6, #1
                kr++;
  40f00c:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f010:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f014:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40f018:	f10b 0b01 	add.w	fp, fp, #1
  40f01c:	e0b5      	b.n	40f18a <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40f01e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40f022:	9201      	str	r2, [sp, #4]
  40f024:	e74d      	b.n	40eec2 <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40f026:	8b73      	ldrh	r3, [r6, #26]
  40f028:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40f02c:	8b33      	ldrh	r3, [r6, #24]
  40f02e:	f8ad 3010 	strh.w	r3, [sp, #16]
  40f032:	e755      	b.n	40eee0 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40f034:	1b1b      	subs	r3, r3, r4
  40f036:	eba9 0003 	sub.w	r0, r9, r3
  40f03a:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40f03c:	6973      	ldr	r3, [r6, #20]
  40f03e:	4298      	cmp	r0, r3
  40f040:	d013      	beq.n	40f06a <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f042:	9a01      	ldr	r2, [sp, #4]
  40f044:	a905      	add	r1, sp, #20
  40f046:	fb00 a010 	mls	r0, r0, r0, sl
  40f04a:	4b12      	ldr	r3, [pc, #72]	; (40f094 <lv_draw_mask_radius+0x334>)
  40f04c:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f04e:	9a01      	ldr	r2, [sp, #4]
  40f050:	a904      	add	r1, sp, #16
  40f052:	fb04 a014 	mls	r0, r4, r4, sl
  40f056:	4b0f      	ldr	r3, [pc, #60]	; (40f094 <lv_draw_mask_radius+0x334>)
  40f058:	4798      	blx	r3
            p->y_prev = y;
  40f05a:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40f05c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f060:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40f062:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f066:	8333      	strh	r3, [r6, #24]
  40f068:	e74a      	b.n	40ef00 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40f06a:	8b73      	ldrh	r3, [r6, #26]
  40f06c:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40f070:	8b33      	ldrh	r3, [r6, #24]
  40f072:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f076:	e7ea      	b.n	40f04e <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f078:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f07c:	2900      	cmp	r1, #0
  40f07e:	f47f af47 	bne.w	40ef10 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40f082:	3a01      	subs	r2, #1
  40f084:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40f088:	22ff      	movs	r2, #255	; 0xff
  40f08a:	f8ad 2016 	strh.w	r2, [sp, #22]
  40f08e:	e73f      	b.n	40ef10 <lv_draw_mask_radius+0x1b0>
  40f090:	00416169 	.word	0x00416169
  40f094:	00415b41 	.word	0x00415b41
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40f098:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40f09c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f0a0:	440a      	add	r2, r1
  40f0a2:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40f0a6:	b10d      	cbz	r5, 40f0ac <lv_draw_mask_radius+0x34c>
  40f0a8:	43d2      	mvns	r2, r2
  40f0aa:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40f0ac:	eba9 0303 	sub.w	r3, r9, r3
  40f0b0:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40f0b2:	eb1b 0103 	adds.w	r1, fp, r3
  40f0b6:	d411      	bmi.n	40f0dc <lv_draw_mask_radius+0x37c>
  40f0b8:	42b9      	cmp	r1, r7
  40f0ba:	da0f      	bge.n	40f0dc <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f0bc:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f0c0:	2afc      	cmp	r2, #252	; 0xfc
  40f0c2:	d809      	bhi.n	40f0d8 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0c4:	2a02      	cmp	r2, #2
  40f0c6:	d932      	bls.n	40f12e <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f0c8:	fb02 f000 	mul.w	r0, r2, r0
  40f0cc:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40f0d0:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40f0d4:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f0d8:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40f0dc:	9802      	ldr	r0, [sp, #8]
  40f0de:	1ac3      	subs	r3, r0, r3
  40f0e0:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40f0e2:	eb1b 0303 	adds.w	r3, fp, r3
  40f0e6:	d411      	bmi.n	40f10c <lv_draw_mask_radius+0x3ac>
  40f0e8:	42bb      	cmp	r3, r7
  40f0ea:	da0f      	bge.n	40f10c <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f0ec:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f0f0:	2afc      	cmp	r2, #252	; 0xfc
  40f0f2:	d809      	bhi.n	40f108 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f0f4:	2a02      	cmp	r2, #2
  40f0f6:	d91c      	bls.n	40f132 <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f0f8:	fb02 f200 	mul.w	r2, r2, r0
  40f0fc:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f100:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f104:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f108:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40f10c:	b19d      	cbz	r5, 40f136 <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40f10e:	1c48      	adds	r0, r1, #1
  40f110:	d426      	bmi.n	40f160 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40f112:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f114:	42bb      	cmp	r3, r7
  40f116:	dd00      	ble.n	40f11a <lv_draw_mask_radius+0x3ba>
  40f118:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f11a:	42b8      	cmp	r0, r7
  40f11c:	f280 80be 	bge.w	40f29c <lv_draw_mask_radius+0x53c>
  40f120:	2900      	cmp	r1, #0
  40f122:	f2c0 80bb 	blt.w	40f29c <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f126:	4440      	add	r0, r8
  40f128:	4b72      	ldr	r3, [pc, #456]	; (40f2f4 <lv_draw_mask_radius+0x594>)
  40f12a:	4798      	blx	r3
  40f12c:	e0b6      	b.n	40f29c <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f12e:	2000      	movs	r0, #0
  40f130:	e7d2      	b.n	40f0d8 <lv_draw_mask_radius+0x378>
  40f132:	2000      	movs	r0, #0
  40f134:	e7e8      	b.n	40f108 <lv_draw_mask_radius+0x3a8>
                kr++;
  40f136:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40f138:	42b9      	cmp	r1, r7
  40f13a:	f300 80c9 	bgt.w	40f2d0 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40f13e:	2900      	cmp	r1, #0
  40f140:	db02      	blt.n	40f148 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40f142:	4640      	mov	r0, r8
  40f144:	4b6b      	ldr	r3, [pc, #428]	; (40f2f4 <lv_draw_mask_radius+0x594>)
  40f146:	4798      	blx	r3
                if(kr < 0) {
  40f148:	2c00      	cmp	r4, #0
  40f14a:	f2c0 80c1 	blt.w	40f2d0 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40f14e:	42bc      	cmp	r4, r7
  40f150:	f300 80a4 	bgt.w	40f29c <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40f154:	1b39      	subs	r1, r7, r4
  40f156:	eb08 0004 	add.w	r0, r8, r4
  40f15a:	4b66      	ldr	r3, [pc, #408]	; (40f2f4 <lv_draw_mask_radius+0x594>)
  40f15c:	4798      	blx	r3
  40f15e:	e09d      	b.n	40f29c <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40f160:	2000      	movs	r0, #0
  40f162:	e7d6      	b.n	40f112 <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40f164:	2000      	movs	r0, #0
  40f166:	e6e7      	b.n	40ef38 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f168:	2200      	movs	r2, #0
  40f16a:	e736      	b.n	40efda <lv_draw_mask_radius+0x27a>
  40f16c:	2200      	movs	r2, #0
  40f16e:	e74b      	b.n	40f008 <lv_draw_mask_radius+0x2a8>
  40f170:	2200      	movs	r2, #0
  40f172:	e041      	b.n	40f1f8 <lv_draw_mask_radius+0x498>
  40f174:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f176:	700a      	strb	r2, [r1, #0]
                kl--;
  40f178:	3e01      	subs	r6, #1
                kr++;
  40f17a:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f17e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f182:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40f186:	f10b 0b01 	add.w	fp, fp, #1
  40f18a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f18e:	459b      	cmp	fp, r3
  40f190:	d849      	bhi.n	40f226 <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40f192:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40f196:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40f19a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f19e:	0913      	lsrs	r3, r2, #4
  40f1a0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40f1a4:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40f1a8:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40f1ac:	0058      	lsls	r0, r3, #1
  40f1ae:	fb91 f1f0 	sdiv	r1, r1, r0
  40f1b2:	440b      	add	r3, r1

    q->i = d >> 4;
  40f1b4:	1119      	asrs	r1, r3, #4
  40f1b6:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40f1ba:	011b      	lsls	r3, r3, #4
  40f1bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40f1c0:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40f1c4:	4413      	add	r3, r2
  40f1c6:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40f1ca:	b10d      	cbz	r5, 40f1d0 <lv_draw_mask_radius+0x470>
  40f1cc:	43db      	mvns	r3, r3
  40f1ce:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f1d0:	2e00      	cmp	r6, #0
  40f1d2:	db12      	blt.n	40f1fa <lv_draw_mask_radius+0x49a>
  40f1d4:	42be      	cmp	r6, r7
  40f1d6:	da10      	bge.n	40f1fa <lv_draw_mask_radius+0x49a>
  40f1d8:	eb08 0106 	add.w	r1, r8, r6
  40f1dc:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f1e0:	2bfc      	cmp	r3, #252	; 0xfc
  40f1e2:	d809      	bhi.n	40f1f8 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f1e4:	2b02      	cmp	r3, #2
  40f1e6:	d9c3      	bls.n	40f170 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f1e8:	fb03 f202 	mul.w	r2, r3, r2
  40f1ec:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f1f0:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f1f4:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f1f8:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f1fa:	f1b9 0f00 	cmp.w	r9, #0
  40f1fe:	dbbb      	blt.n	40f178 <lv_draw_mask_radius+0x418>
  40f200:	45b9      	cmp	r9, r7
  40f202:	dab9      	bge.n	40f178 <lv_draw_mask_radius+0x418>
  40f204:	eb08 0109 	add.w	r1, r8, r9
  40f208:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f20c:	2bfc      	cmp	r3, #252	; 0xfc
  40f20e:	d8b2      	bhi.n	40f176 <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f210:	2b02      	cmp	r3, #2
  40f212:	d9af      	bls.n	40f174 <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f214:	fb03 f302 	mul.w	r3, r3, r2
  40f218:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f21c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f220:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40f224:	e7a7      	b.n	40f176 <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40f226:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f22a:	b3b2      	cbz	r2, 40f29a <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40f22c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f230:	fb03 f302 	mul.w	r3, r3, r2
  40f234:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40f238:	b10d      	cbz	r5, 40f23e <lv_draw_mask_radius+0x4de>
  40f23a:	43db      	mvns	r3, r3
  40f23c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f23e:	2e00      	cmp	r6, #0
  40f240:	db12      	blt.n	40f268 <lv_draw_mask_radius+0x508>
  40f242:	42be      	cmp	r6, r7
  40f244:	da10      	bge.n	40f268 <lv_draw_mask_radius+0x508>
  40f246:	eb08 0106 	add.w	r1, r8, r6
  40f24a:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f24e:	2bfc      	cmp	r3, #252	; 0xfc
  40f250:	d809      	bhi.n	40f266 <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f252:	2b02      	cmp	r3, #2
  40f254:	d924      	bls.n	40f2a0 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f256:	fb03 f202 	mul.w	r2, r3, r2
  40f25a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f25e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f262:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f266:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f268:	f1b9 0f00 	cmp.w	r9, #0
  40f26c:	db12      	blt.n	40f294 <lv_draw_mask_radius+0x534>
  40f26e:	45b9      	cmp	r9, r7
  40f270:	da10      	bge.n	40f294 <lv_draw_mask_radius+0x534>
  40f272:	eb08 0109 	add.w	r1, r8, r9
  40f276:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f27a:	2bfc      	cmp	r3, #252	; 0xfc
  40f27c:	d809      	bhi.n	40f292 <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f27e:	2b02      	cmp	r3, #2
  40f280:	d910      	bls.n	40f2a4 <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f282:	fb03 f302 	mul.w	r3, r3, r2
  40f286:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f28a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f28e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f292:	700a      	strb	r2, [r1, #0]
                kl--;
  40f294:	3e01      	subs	r6, #1
                kr++;
  40f296:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40f29a:	b12d      	cbz	r5, 40f2a8 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40f29c:	2002      	movs	r0, #2
  40f29e:	e01a      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f2a0:	2200      	movs	r2, #0
  40f2a2:	e7e0      	b.n	40f266 <lv_draw_mask_radius+0x506>
  40f2a4:	2200      	movs	r2, #0
  40f2a6:	e7f4      	b.n	40f292 <lv_draw_mask_radius+0x532>
                kl++;
  40f2a8:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40f2aa:	42b9      	cmp	r1, r7
  40f2ac:	dc10      	bgt.n	40f2d0 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40f2ae:	2900      	cmp	r1, #0
  40f2b0:	db02      	blt.n	40f2b8 <lv_draw_mask_radius+0x558>
  40f2b2:	4640      	mov	r0, r8
  40f2b4:	4b0f      	ldr	r3, [pc, #60]	; (40f2f4 <lv_draw_mask_radius+0x594>)
  40f2b6:	4798      	blx	r3
                if(kr < 0) {
  40f2b8:	f1b9 0f00 	cmp.w	r9, #0
  40f2bc:	db08      	blt.n	40f2d0 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40f2be:	45b9      	cmp	r9, r7
  40f2c0:	daec      	bge.n	40f29c <lv_draw_mask_radius+0x53c>
  40f2c2:	eba7 0109 	sub.w	r1, r7, r9
  40f2c6:	eb08 0009 	add.w	r0, r8, r9
  40f2ca:	4b0a      	ldr	r3, [pc, #40]	; (40f2f4 <lv_draw_mask_radius+0x594>)
  40f2cc:	4798      	blx	r3
  40f2ce:	e7e5      	b.n	40f29c <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40f2d0:	2000      	movs	r0, #0
  40f2d2:	e000      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40f2d4:	2000      	movs	r0, #0
}
  40f2d6:	b00b      	add	sp, #44	; 0x2c
  40f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f2dc:	2000      	movs	r0, #0
  40f2de:	e7fa      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f2e0:	2001      	movs	r0, #1
  40f2e2:	e7f8      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f2e4:	2000      	movs	r0, #0
  40f2e6:	e7f6      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f2e8:	2000      	movs	r0, #0
  40f2ea:	e7f4      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f2ec:	2001      	movs	r0, #1
  40f2ee:	e7f2      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40f2f0:	2002      	movs	r0, #2
  40f2f2:	e7f0      	b.n	40f2d6 <lv_draw_mask_radius+0x576>
  40f2f4:	00416169 	.word	0x00416169

0040f2f8 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f2f8:	2300      	movs	r3, #0
  40f2fa:	2b0f      	cmp	r3, #15
  40f2fc:	d806      	bhi.n	40f30c <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40f2fe:	4a0a      	ldr	r2, [pc, #40]	; (40f328 <lv_draw_mask_add+0x30>)
  40f300:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f304:	b112      	cbz	r2, 40f30c <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f306:	3301      	adds	r3, #1
  40f308:	b2db      	uxtb	r3, r3
  40f30a:	e7f6      	b.n	40f2fa <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40f30c:	2b0f      	cmp	r3, #15
  40f30e:	d807      	bhi.n	40f320 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40f310:	4a05      	ldr	r2, [pc, #20]	; (40f328 <lv_draw_mask_add+0x30>)
  40f312:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40f316:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f31a:	6051      	str	r1, [r2, #4]
    return i;
  40f31c:	b218      	sxth	r0, r3
  40f31e:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40f320:	f04f 30ff 	mov.w	r0, #4294967295
}
  40f324:	4770      	bx	lr
  40f326:	bf00      	nop
  40f328:	2043a25c 	.word	0x2043a25c

0040f32c <lv_draw_mask_apply>:
{
  40f32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f330:	b082      	sub	sp, #8
  40f332:	4680      	mov	r8, r0
  40f334:	460f      	mov	r7, r1
  40f336:	4616      	mov	r6, r2
  40f338:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40f33a:	4c0f      	ldr	r4, [pc, #60]	; (40f378 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40f33c:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40f340:	e000      	b.n	40f344 <lv_draw_mask_apply+0x18>
        m++;
  40f342:	3408      	adds	r4, #8
    while(m->param) {
  40f344:	6823      	ldr	r3, [r4, #0]
  40f346:	b16b      	cbz	r3, 40f364 <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40f348:	681d      	ldr	r5, [r3, #0]
  40f34a:	9300      	str	r3, [sp, #0]
  40f34c:	4653      	mov	r3, sl
  40f34e:	4632      	mov	r2, r6
  40f350:	4639      	mov	r1, r7
  40f352:	4640      	mov	r0, r8
  40f354:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40f356:	4603      	mov	r3, r0
  40f358:	b140      	cbz	r0, 40f36c <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40f35a:	2802      	cmp	r0, #2
  40f35c:	d1f1      	bne.n	40f342 <lv_draw_mask_apply+0x16>
  40f35e:	f04f 0901 	mov.w	r9, #1
  40f362:	e7ee      	b.n	40f342 <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f364:	f1b9 0f00 	cmp.w	r9, #0
  40f368:	d004      	beq.n	40f374 <lv_draw_mask_apply+0x48>
  40f36a:	2302      	movs	r3, #2
}
  40f36c:	4618      	mov	r0, r3
  40f36e:	b002      	add	sp, #8
  40f370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f374:	2301      	movs	r3, #1
  40f376:	e7f9      	b.n	40f36c <lv_draw_mask_apply+0x40>
  40f378:	2043a25c 	.word	0x2043a25c

0040f37c <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40f37c:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f380:	d00a      	beq.n	40f398 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40f382:	4b06      	ldr	r3, [pc, #24]	; (40f39c <lv_draw_mask_remove_id+0x20>)
  40f384:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40f388:	2200      	movs	r2, #0
  40f38a:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40f38e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40f392:	605a      	str	r2, [r3, #4]
}
  40f394:	4608      	mov	r0, r1
  40f396:	4770      	bx	lr
    void * p = NULL;
  40f398:	2100      	movs	r1, #0
    return p;
  40f39a:	e7fb      	b.n	40f394 <lv_draw_mask_remove_id+0x18>
  40f39c:	2043a25c 	.word	0x2043a25c

0040f3a0 <lv_draw_mask_remove_custom>:
{
  40f3a0:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3a2:	2300      	movs	r3, #0
    void * p = NULL;
  40f3a4:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3a6:	e004      	b.n	40f3b2 <lv_draw_mask_remove_custom+0x12>
}
  40f3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  40f3ac:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3ae:	3301      	adds	r3, #1
  40f3b0:	b2db      	uxtb	r3, r3
  40f3b2:	2b0f      	cmp	r3, #15
  40f3b4:	d81a      	bhi.n	40f3ec <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f3b6:	4a0e      	ldr	r2, [pc, #56]	; (40f3f0 <lv_draw_mask_remove_custom+0x50>)
  40f3b8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f3bc:	6852      	ldr	r2, [r2, #4]
  40f3be:	428a      	cmp	r2, r1
  40f3c0:	d1f5      	bne.n	40f3ae <lv_draw_mask_remove_custom+0xe>
{
  40f3c2:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40f3c4:	4a0a      	ldr	r2, [pc, #40]	; (40f3f0 <lv_draw_mask_remove_custom+0x50>)
  40f3c6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40f3ca:	2400      	movs	r4, #0
  40f3cc:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40f3d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f3d4:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3d6:	3301      	adds	r3, #1
  40f3d8:	b2db      	uxtb	r3, r3
  40f3da:	2b0f      	cmp	r3, #15
  40f3dc:	d8e4      	bhi.n	40f3a8 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f3de:	4a04      	ldr	r2, [pc, #16]	; (40f3f0 <lv_draw_mask_remove_custom+0x50>)
  40f3e0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f3e4:	6852      	ldr	r2, [r2, #4]
  40f3e6:	428a      	cmp	r2, r1
  40f3e8:	d1f5      	bne.n	40f3d6 <lv_draw_mask_remove_custom+0x36>
  40f3ea:	e7eb      	b.n	40f3c4 <lv_draw_mask_remove_custom+0x24>
  40f3ec:	4770      	bx	lr
  40f3ee:	bf00      	nop
  40f3f0:	2043a25c 	.word	0x2043a25c

0040f3f4 <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3f4:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40f3f6:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f3f8:	e001      	b.n	40f3fe <lv_draw_mask_get_cnt+0xa>
  40f3fa:	3301      	adds	r3, #1
  40f3fc:	b2db      	uxtb	r3, r3
  40f3fe:	2b0f      	cmp	r3, #15
  40f400:	d807      	bhi.n	40f412 <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40f402:	4a04      	ldr	r2, [pc, #16]	; (40f414 <lv_draw_mask_get_cnt+0x20>)
  40f404:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f408:	2a00      	cmp	r2, #0
  40f40a:	d0f6      	beq.n	40f3fa <lv_draw_mask_get_cnt+0x6>
  40f40c:	3001      	adds	r0, #1
  40f40e:	b2c0      	uxtb	r0, r0
  40f410:	e7f3      	b.n	40f3fa <lv_draw_mask_get_cnt+0x6>
}
  40f412:	4770      	bx	lr
  40f414:	2043a25c 	.word	0x2043a25c

0040f418 <lv_draw_mask_line_points_init>:
{
  40f418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f41c:	4604      	mov	r4, r0
  40f41e:	4688      	mov	r8, r1
  40f420:	4616      	mov	r6, r2
  40f422:	461f      	mov	r7, r3
  40f424:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40f428:	212c      	movs	r1, #44	; 0x2c
  40f42a:	4b50      	ldr	r3, [pc, #320]	; (40f56c <lv_draw_mask_line_points_init+0x154>)
  40f42c:	4798      	blx	r3
    if(p1y > p2y) {
  40f42e:	42ae      	cmp	r6, r5
  40f430:	dc05      	bgt.n	40f43e <lv_draw_mask_line_points_init+0x26>
  40f432:	462b      	mov	r3, r5
  40f434:	4635      	mov	r5, r6
  40f436:	461e      	mov	r6, r3
  40f438:	463b      	mov	r3, r7
  40f43a:	4647      	mov	r7, r8
  40f43c:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40f43e:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40f440:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40f442:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40f446:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40f448:	7c23      	ldrb	r3, [r4, #16]
  40f44a:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40f44e:	f362 0301 	bfi	r3, r2, #0, #2
  40f452:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40f454:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40f456:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40f458:	eba8 0707 	sub.w	r7, r8, r7
  40f45c:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40f460:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40f464:	1b75      	subs	r5, r6, r5
  40f466:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40f46a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40f46e:	429a      	cmp	r2, r3
  40f470:	bfd4      	ite	le
  40f472:	2200      	movle	r2, #0
  40f474:	2201      	movgt	r2, #1
  40f476:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f47a:	f362 0300 	bfi	r3, r2, #0, #1
  40f47e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40f482:	2200      	movs	r2, #0
  40f484:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40f486:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40f488:	4939      	ldr	r1, [pc, #228]	; (40f570 <lv_draw_mask_line_points_init+0x158>)
  40f48a:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40f48c:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40f48e:	f013 0f01 	tst.w	r3, #1
  40f492:	d024      	beq.n	40f4de <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40f494:	b13f      	cbz	r7, 40f4a6 <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40f496:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f49a:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40f49e:	fb03 f305 	mul.w	r3, r3, r5
  40f4a2:	129b      	asrs	r3, r3, #10
  40f4a4:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40f4a6:	b13d      	cbz	r5, 40f4b8 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f4a8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40f4ac:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40f4b0:	fb05 f707 	mul.w	r7, r5, r7
  40f4b4:	12bf      	asrs	r7, r7, #10
  40f4b6:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40f4b8:	69e3      	ldr	r3, [r4, #28]
  40f4ba:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40f4bc:	7c23      	ldrb	r3, [r4, #16]
  40f4be:	f013 0303 	ands.w	r3, r3, #3
  40f4c2:	d121      	bne.n	40f508 <lv_draw_mask_line_points_init+0xf0>
  40f4c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f4c8:	f36f 0341 	bfc	r3, #1, #1
  40f4cc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40f4d0:	6a22      	ldr	r2, [r4, #32]
  40f4d2:	1093      	asrs	r3, r2, #2
  40f4d4:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40f4d6:	2a00      	cmp	r2, #0
  40f4d8:	db45      	blt.n	40f566 <lv_draw_mask_line_points_init+0x14e>
  40f4da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40f4de:	b13d      	cbz	r5, 40f4f0 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f4e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f4e4:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40f4e8:	fb03 f307 	mul.w	r3, r3, r7
  40f4ec:	129b      	asrs	r3, r3, #10
  40f4ee:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40f4f0:	b13f      	cbz	r7, 40f502 <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f4f2:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40f4f6:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40f4fa:	fb07 f505 	mul.w	r5, r7, r5
  40f4fe:	12ad      	asrs	r5, r5, #10
  40f500:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40f502:	69a3      	ldr	r3, [r4, #24]
  40f504:	6223      	str	r3, [r4, #32]
  40f506:	e7d9      	b.n	40f4bc <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f508:	2b01      	cmp	r3, #1
  40f50a:	d00d      	beq.n	40f528 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40f50c:	2b02      	cmp	r3, #2
  40f50e:	d012      	beq.n	40f536 <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40f510:	2b03      	cmp	r3, #3
  40f512:	d1dd      	bne.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40f514:	6a23      	ldr	r3, [r4, #32]
  40f516:	2b00      	cmp	r3, #0
  40f518:	dd1e      	ble.n	40f558 <lv_draw_mask_line_points_init+0x140>
  40f51a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f51e:	f36f 0341 	bfc	r3, #1, #1
  40f522:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f526:	e7d3      	b.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f528:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f52c:	f043 0302 	orr.w	r3, r3, #2
  40f530:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f534:	e7cc      	b.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40f536:	6a23      	ldr	r3, [r4, #32]
  40f538:	2b00      	cmp	r3, #0
  40f53a:	dd06      	ble.n	40f54a <lv_draw_mask_line_points_init+0x132>
  40f53c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f540:	f043 0302 	orr.w	r3, r3, #2
  40f544:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f548:	e7c2      	b.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40f54a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f54e:	f36f 0341 	bfc	r3, #1, #1
  40f552:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f556:	e7bb      	b.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40f558:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f55c:	f043 0302 	orr.w	r3, r3, #2
  40f560:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f564:	e7b4      	b.n	40f4d0 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40f566:	425b      	negs	r3, r3
  40f568:	6263      	str	r3, [r4, #36]	; 0x24
}
  40f56a:	e7b6      	b.n	40f4da <lv_draw_mask_line_points_init+0xc2>
  40f56c:	00416169 	.word	0x00416169
  40f570:	0040ec75 	.word	0x0040ec75

0040f574 <lv_draw_mask_radius_init>:
{
  40f574:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f576:	888c      	ldrh	r4, [r1, #4]
  40f578:	880e      	ldrh	r6, [r1, #0]
  40f57a:	1ba4      	subs	r4, r4, r6
  40f57c:	b2a4      	uxth	r4, r4
  40f57e:	3401      	adds	r4, #1
  40f580:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f582:	88cd      	ldrh	r5, [r1, #6]
  40f584:	884c      	ldrh	r4, [r1, #2]
  40f586:	1b2d      	subs	r5, r5, r4
  40f588:	b2ad      	uxth	r5, r5
  40f58a:	3501      	adds	r5, #1
  40f58c:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40f58e:	42b4      	cmp	r4, r6
  40f590:	bfa8      	it	ge
  40f592:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40f594:	1064      	asrs	r4, r4, #1
  40f596:	42a2      	cmp	r2, r4
  40f598:	dd00      	ble.n	40f59c <lv_draw_mask_radius_init+0x28>
  40f59a:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40f59c:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40f5a0:	2408      	movs	r4, #8
  40f5a2:	e004      	b.n	40f5ae <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40f5a4:	f811 6b01 	ldrb.w	r6, [r1], #1
  40f5a8:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40f5ac:	3c01      	subs	r4, #1
    while(len) {
  40f5ae:	2c00      	cmp	r4, #0
  40f5b0:	d1f8      	bne.n	40f5a4 <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40f5b2:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40f5b4:	7c82      	ldrb	r2, [r0, #18]
  40f5b6:	f363 0200 	bfi	r2, r3, #0, #1
  40f5ba:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40f5bc:	4b05      	ldr	r3, [pc, #20]	; (40f5d4 <lv_draw_mask_radius_init+0x60>)
  40f5be:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40f5c0:	2302      	movs	r3, #2
  40f5c2:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40f5c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40f5c8:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40f5ca:	2300      	movs	r3, #0
  40f5cc:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40f5ce:	8303      	strh	r3, [r0, #24]
}
  40f5d0:	bc70      	pop	{r4, r5, r6}
  40f5d2:	4770      	bx	lr
  40f5d4:	0040ed61 	.word	0x0040ed61

0040f5d8 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40f5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f5dc:	b085      	sub	sp, #20
  40f5de:	9002      	str	r0, [sp, #8]
  40f5e0:	9101      	str	r1, [sp, #4]
  40f5e2:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40f5e4:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40f5e6:	f011 0f01 	tst.w	r1, #1
  40f5ea:	d10e      	bne.n	40f60a <shadow_blur_corner+0x32>
  40f5ec:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40f5f0:	9b02      	ldr	r3, [sp, #8]
  40f5f2:	469a      	mov	sl, r3
  40f5f4:	005e      	lsls	r6, r3, #1
  40f5f6:	4630      	mov	r0, r6
  40f5f8:	4b50      	ldr	r3, [pc, #320]	; (40f73c <shadow_blur_corner+0x164>)
  40f5fa:	4798      	blx	r3
  40f5fc:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40f5fe:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40f600:	f04f 0b00 	mov.w	fp, #0
  40f604:	9503      	str	r5, [sp, #12]
  40f606:	9d02      	ldr	r5, [sp, #8]
  40f608:	e024      	b.n	40f654 <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40f60a:	46b8      	mov	r8, r7
  40f60c:	e7f0      	b.n	40f5f0 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40f60e:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40f610:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f612:	eba0 0e08 	sub.w	lr, r0, r8
  40f616:	f1be 0f01 	cmp.w	lr, #1
  40f61a:	d410      	bmi.n	40f63e <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40f61c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f620:	4472      	add	r2, lr
  40f622:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40f626:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40f628:	3801      	subs	r0, #1
  40f62a:	2800      	cmp	r0, #0
  40f62c:	db0a      	blt.n	40f644 <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40f62e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40f632:	19c2      	adds	r2, r0, r7
  40f634:	4291      	cmp	r1, r2
  40f636:	ddea      	ble.n	40f60e <shadow_blur_corner+0x36>
  40f638:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40f63c:	e7e8      	b.n	40f610 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f63e:	f8b9 2000 	ldrh.w	r2, [r9]
  40f642:	e7f0      	b.n	40f626 <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40f644:	4632      	mov	r2, r6
  40f646:	4621      	mov	r1, r4
  40f648:	4648      	mov	r0, r9
  40f64a:	4b3d      	ldr	r3, [pc, #244]	; (40f740 <shadow_blur_corner+0x168>)
  40f64c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f64e:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40f650:	f10b 0b01 	add.w	fp, fp, #1
  40f654:	4629      	mov	r1, r5
  40f656:	45ab      	cmp	fp, r5
  40f658:	da09      	bge.n	40f66e <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40f65a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40f65e:	4453      	add	r3, sl
  40f660:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  40f664:	9a01      	ldr	r2, [sp, #4]
  40f666:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  40f66a:	1e68      	subs	r0, r5, #1
  40f66c:	e7dd      	b.n	40f62a <shadow_blur_corner+0x52>
  40f66e:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40f670:	882b      	ldrh	r3, [r5, #0]
  40f672:	9a01      	ldr	r2, [sp, #4]
  40f674:	4694      	mov	ip, r2
  40f676:	fb93 f3f2 	sdiv	r3, r3, r2
  40f67a:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f67c:	2301      	movs	r3, #1
  40f67e:	e002      	b.n	40f686 <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f680:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f684:	3301      	adds	r3, #1
  40f686:	fb0a f20a 	mul.w	r2, sl, sl
  40f68a:	4293      	cmp	r3, r2
  40f68c:	d20d      	bcs.n	40f6aa <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f68e:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40f692:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40f696:	4418      	add	r0, r3
  40f698:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f69c:	4282      	cmp	r2, r0
  40f69e:	d0ef      	beq.n	40f680 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40f6a0:	fb92 f2fc 	sdiv	r2, r2, ip
  40f6a4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  40f6a8:	e7ec      	b.n	40f684 <shadow_blur_corner+0xac>
  40f6aa:	f04f 0a00 	mov.w	sl, #0
  40f6ae:	e034      	b.n	40f71a <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f6b0:	f04f 0b00 	mov.w	fp, #0
  40f6b4:	e011      	b.n	40f6da <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f6b6:	f8b9 0000 	ldrh.w	r0, [r9]
  40f6ba:	e017      	b.n	40f6ec <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40f6bc:	1e48      	subs	r0, r1, #1
  40f6be:	fb00 a001 	mla	r0, r0, r1, sl
  40f6c2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  40f6c6:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f6c8:	3301      	adds	r3, #1
  40f6ca:	44b1      	add	r9, r6
  40f6cc:	428b      	cmp	r3, r1
  40f6ce:	da18      	bge.n	40f702 <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f6d0:	0058      	lsls	r0, r3, #1
  40f6d2:	2a00      	cmp	r2, #0
  40f6d4:	dbec      	blt.n	40f6b0 <shadow_blur_corner+0xd8>
  40f6d6:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  40f6da:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f6de:	1bd8      	subs	r0, r3, r7
  40f6e0:	2800      	cmp	r0, #0
  40f6e2:	dde8      	ble.n	40f6b6 <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40f6e4:	fb00 a001 	mla	r0, r0, r1, sl
  40f6e8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  40f6ec:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40f6ee:	eb08 0003 	add.w	r0, r8, r3
  40f6f2:	3001      	adds	r0, #1
  40f6f4:	4281      	cmp	r1, r0
  40f6f6:	dde1      	ble.n	40f6bc <shadow_blur_corner+0xe4>
  40f6f8:	fb00 a001 	mla	r0, r0, r1, sl
  40f6fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f700:	e7e1      	b.n	40f6c6 <shadow_blur_corner+0xee>
  40f702:	2300      	movs	r3, #0
  40f704:	e005      	b.n	40f712 <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40f706:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  40f70a:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40f70e:	3301      	adds	r3, #1
  40f710:	44b6      	add	lr, r6
  40f712:	428b      	cmp	r3, r1
  40f714:	dbf7      	blt.n	40f706 <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  40f716:	f10a 0a01 	add.w	sl, sl, #1
  40f71a:	458a      	cmp	sl, r1
  40f71c:	da08      	bge.n	40f730 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f71e:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40f722:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  40f726:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f72a:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f72c:	2300      	movs	r3, #0
  40f72e:	e7cd      	b.n	40f6cc <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  40f730:	4620      	mov	r0, r4
  40f732:	4b04      	ldr	r3, [pc, #16]	; (40f744 <shadow_blur_corner+0x16c>)
  40f734:	4798      	blx	r3
}
  40f736:	b005      	add	sp, #20
  40f738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f73c:	00415fdd 	.word	0x00415fdd
  40f740:	00415e45 	.word	0x00415e45
  40f744:	00415d8d 	.word	0x00415d8d

0040f748 <shadow_draw_corner_buf>:
{
  40f748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f74c:	b08f      	sub	sp, #60	; 0x3c
  40f74e:	4688      	mov	r8, r1
  40f750:	4692      	mov	sl, r2
  40f752:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  40f754:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  40f758:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  40f75a:	a90c      	add	r1, sp, #48	; 0x30
  40f75c:	2308      	movs	r3, #8
  40f75e:	e004      	b.n	40f76a <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  40f760:	f814 6b01 	ldrb.w	r6, [r4], #1
  40f764:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  40f768:	3b01      	subs	r3, #1
    while(len) {
  40f76a:	2b00      	cmp	r3, #0
  40f76c:	d1f8      	bne.n	40f760 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40f76e:	4651      	mov	r1, sl
  40f770:	f1ba 0f00 	cmp.w	sl, #0
  40f774:	db36      	blt.n	40f7e4 <shadow_draw_corner_buf+0x9c>
  40f776:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40f77a:	188b      	adds	r3, r1, r2
  40f77c:	b29b      	uxth	r3, r3
  40f77e:	f01a 0401 	ands.w	r4, sl, #1
  40f782:	9403      	str	r4, [sp, #12]
  40f784:	bf0c      	ite	eq
  40f786:	2401      	moveq	r4, #1
  40f788:	2400      	movne	r4, #0
  40f78a:	1b1b      	subs	r3, r3, r4
  40f78c:	3b01      	subs	r3, #1
  40f78e:	b29b      	uxth	r3, r3
  40f790:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  40f794:	3101      	adds	r1, #1
  40f796:	b289      	uxth	r1, r1
  40f798:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f79c:	8884      	ldrh	r4, [r0, #4]
  40f79e:	8806      	ldrh	r6, [r0, #0]
  40f7a0:	1ba4      	subs	r4, r4, r6
  40f7a2:	b2a4      	uxth	r4, r4
  40f7a4:	3401      	adds	r4, #1
  40f7a6:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40f7a8:	1b1b      	subs	r3, r3, r4
  40f7aa:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f7ae:	88c3      	ldrh	r3, [r0, #6]
  40f7b0:	8840      	ldrh	r0, [r0, #2]
  40f7b2:	1a1b      	subs	r3, r3, r0
  40f7b4:	b29b      	uxth	r3, r3
  40f7b6:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40f7b8:	fa11 f183 	uxtah	r1, r1, r3
  40f7bc:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40f7c0:	2300      	movs	r3, #0
  40f7c2:	a90c      	add	r1, sp, #48	; 0x30
  40f7c4:	a805      	add	r0, sp, #20
  40f7c6:	4c4d      	ldr	r4, [pc, #308]	; (40f8fc <shadow_draw_corner_buf+0x1b4>)
  40f7c8:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  40f7ca:	f1ba 0f01 	cmp.w	sl, #1
  40f7ce:	d00c      	beq.n	40f7ea <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  40f7d0:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  40f7d4:	46a9      	mov	r9, r5
  40f7d6:	4628      	mov	r0, r5
  40f7d8:	4b49      	ldr	r3, [pc, #292]	; (40f900 <shadow_draw_corner_buf+0x1b8>)
  40f7da:	4798      	blx	r3
  40f7dc:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  40f7de:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  40f7e0:	2700      	movs	r7, #0
  40f7e2:	e00d      	b.n	40f800 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40f7e4:	f10a 0101 	add.w	r1, sl, #1
  40f7e8:	e7c5      	b.n	40f776 <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  40f7ea:	f04f 0a01 	mov.w	sl, #1
  40f7ee:	e7f1      	b.n	40f7d4 <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40f7f0:	ea4f 0149 	mov.w	r1, r9, lsl #1
  40f7f4:	4630      	mov	r0, r6
  40f7f6:	4b43      	ldr	r3, [pc, #268]	; (40f904 <shadow_draw_corner_buf+0x1bc>)
  40f7f8:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f7fa:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  40f7fe:	3701      	adds	r7, #1
  40f800:	42af      	cmp	r7, r5
  40f802:	da2c      	bge.n	40f85e <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  40f804:	4649      	mov	r1, r9
  40f806:	4620      	mov	r0, r4
  40f808:	4b3f      	ldr	r3, [pc, #252]	; (40f908 <shadow_draw_corner_buf+0x1c0>)
  40f80a:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40f80c:	ab0e      	add	r3, sp, #56	; 0x38
  40f80e:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  40f812:	9300      	str	r3, [sp, #0]
  40f814:	b22b      	sxth	r3, r5
  40f816:	b23a      	sxth	r2, r7
  40f818:	2100      	movs	r1, #0
  40f81a:	4620      	mov	r0, r4
  40f81c:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40f81e:	2800      	cmp	r0, #0
  40f820:	d0e6      	beq.n	40f7f0 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40f822:	7823      	ldrb	r3, [r4, #0]
  40f824:	019b      	lsls	r3, r3, #6
  40f826:	4650      	mov	r0, sl
  40f828:	fb93 f3fa 	sdiv	r3, r3, sl
  40f82c:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  40f82e:	2301      	movs	r3, #1
  40f830:	e007      	b.n	40f842 <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40f832:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f836:	441a      	add	r2, r3
  40f838:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  40f83c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  40f840:	3301      	adds	r3, #1
  40f842:	42ab      	cmp	r3, r5
  40f844:	dad9      	bge.n	40f7fa <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40f846:	5ce2      	ldrb	r2, [r4, r3]
  40f848:	18e1      	adds	r1, r4, r3
  40f84a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  40f84e:	428a      	cmp	r2, r1
  40f850:	d0ef      	beq.n	40f832 <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40f852:	0192      	lsls	r2, r2, #6
  40f854:	fb92 f2f0 	sdiv	r2, r2, r0
  40f858:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  40f85c:	e7f0      	b.n	40f840 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  40f85e:	4620      	mov	r0, r4
  40f860:	4b2a      	ldr	r3, [pc, #168]	; (40f90c <shadow_draw_corner_buf+0x1c4>)
  40f862:	4798      	blx	r3
    if(sw == 1) {
  40f864:	f1ba 0f01 	cmp.w	sl, #1
  40f868:	d021      	beq.n	40f8ae <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  40f86a:	b22c      	sxth	r4, r5
  40f86c:	4642      	mov	r2, r8
  40f86e:	4651      	mov	r1, sl
  40f870:	4620      	mov	r0, r4
  40f872:	4b27      	ldr	r3, [pc, #156]	; (40f910 <shadow_draw_corner_buf+0x1c8>)
  40f874:	4798      	blx	r3
    sw += sw_ori & 1;
  40f876:	9b03      	ldr	r3, [sp, #12]
  40f878:	4453      	add	r3, sl
  40f87a:	b219      	sxth	r1, r3
    if(sw > 1) {
  40f87c:	2901      	cmp	r1, #1
  40f87e:	dd32      	ble.n	40f8e6 <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40f880:	f8b8 3000 	ldrh.w	r3, [r8]
  40f884:	019b      	lsls	r3, r3, #6
  40f886:	460e      	mov	r6, r1
  40f888:	fb93 f3f1 	sdiv	r3, r3, r1
  40f88c:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f890:	2301      	movs	r3, #1
  40f892:	e011      	b.n	40f8b8 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  40f894:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f898:	0992      	lsrs	r2, r2, #6
  40f89a:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  40f89e:	3301      	adds	r3, #1
  40f8a0:	fb05 f205 	mul.w	r2, r5, r5
  40f8a4:	4293      	cmp	r3, r2
  40f8a6:	dbf5      	blt.n	40f894 <shadow_draw_corner_buf+0x14c>
}
  40f8a8:	b00f      	add	sp, #60	; 0x3c
  40f8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f8ae:	2300      	movs	r3, #0
  40f8b0:	e7f6      	b.n	40f8a0 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40f8b2:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f8b6:	3301      	adds	r3, #1
  40f8b8:	fb09 f209 	mul.w	r2, r9, r9
  40f8bc:	4293      	cmp	r3, r2
  40f8be:	d20e      	bcs.n	40f8de <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40f8c0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f8c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40f8c8:	4418      	add	r0, r3
  40f8ca:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  40f8ce:	4282      	cmp	r2, r0
  40f8d0:	d0ef      	beq.n	40f8b2 <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40f8d2:	0192      	lsls	r2, r2, #6
  40f8d4:	fb92 f2f6 	sdiv	r2, r2, r6
  40f8d8:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  40f8dc:	e7eb      	b.n	40f8b6 <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  40f8de:	4642      	mov	r2, r8
  40f8e0:	4620      	mov	r0, r4
  40f8e2:	4b0b      	ldr	r3, [pc, #44]	; (40f910 <shadow_draw_corner_buf+0x1c8>)
  40f8e4:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  40f8e6:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  40f8e8:	fb05 f205 	mul.w	r2, r5, r5
  40f8ec:	4293      	cmp	r3, r2
  40f8ee:	dadb      	bge.n	40f8a8 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  40f8f0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40f8f4:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  40f8f8:	3301      	adds	r3, #1
  40f8fa:	e7f5      	b.n	40f8e8 <shadow_draw_corner_buf+0x1a0>
  40f8fc:	0040f575 	.word	0x0040f575
  40f900:	00415fdd 	.word	0x00415fdd
  40f904:	00416169 	.word	0x00416169
  40f908:	004161c1 	.word	0x004161c1
  40f90c:	00415d8d 	.word	0x00415d8d
  40f910:	0040f5d9 	.word	0x0040f5d9

0040f914 <draw_shadow>:
{
  40f914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f918:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  40f91a:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  40f91e:	2c00      	cmp	r4, #0
  40f920:	f000 83f0 	beq.w	410104 <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40f924:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  40f928:	2f02      	cmp	r7, #2
  40f92a:	f240 83eb 	bls.w	410104 <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40f92e:	2c01      	cmp	r4, #1
  40f930:	d07b      	beq.n	40fa2a <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40f932:	8806      	ldrh	r6, [r0, #0]
  40f934:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  40f936:	441e      	add	r6, r3
  40f938:	b2b6      	uxth	r6, r6
  40f93a:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  40f93e:	eba6 060e 	sub.w	r6, r6, lr
  40f942:	b2b6      	uxth	r6, r6
  40f944:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40f948:	8885      	ldrh	r5, [r0, #4]
  40f94a:	441d      	add	r5, r3
  40f94c:	fa1e f585 	uxtah	r5, lr, r5
  40f950:	b2ad      	uxth	r5, r5
  40f952:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40f956:	8843      	ldrh	r3, [r0, #2]
  40f958:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  40f95c:	4463      	add	r3, ip
  40f95e:	b29b      	uxth	r3, r3
  40f960:	eba3 030e 	sub.w	r3, r3, lr
  40f964:	b29b      	uxth	r3, r3
  40f966:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40f96a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  40f96e:	44c4      	add	ip, r8
  40f970:	fa1e fe8c 	uxtah	lr, lr, ip
  40f974:	fa1f fe8e 	uxth.w	lr, lr
  40f978:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40f97c:	46a0      	mov	r8, r4
  40f97e:	2c00      	cmp	r4, #0
  40f980:	db5c      	blt.n	40fa3c <draw_shadow+0x128>
  40f982:	ea4f 0868 	mov.w	r8, r8, asr #1
  40f986:	f1c8 0800 	rsb	r8, r8, #0
  40f98a:	fa1f f888 	uxth.w	r8, r8
  40f98e:	eb06 0c08 	add.w	ip, r6, r8
  40f992:	fa1f fc8c 	uxth.w	ip, ip
  40f996:	f10c 3cff 	add.w	ip, ip, #4294967295
  40f99a:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40f99e:	46a4      	mov	ip, r4
  40f9a0:	2c00      	cmp	r4, #0
  40f9a2:	db4e      	blt.n	40fa42 <draw_shadow+0x12e>
  40f9a4:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  40f9a8:	4465      	add	r5, ip
  40f9aa:	b2ad      	uxth	r5, r5
  40f9ac:	3501      	adds	r5, #1
  40f9ae:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  40f9b2:	eb03 0608 	add.w	r6, r3, r8
  40f9b6:	b2b6      	uxth	r6, r6
  40f9b8:	3e01      	subs	r6, #1
  40f9ba:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  40f9be:	eb0e 030c 	add.w	r3, lr, ip
  40f9c2:	b29b      	uxth	r3, r3
  40f9c4:	3301      	adds	r3, #1
  40f9c6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40f9ca:	2ffd      	cmp	r7, #253	; 0xfd
  40f9cc:	d900      	bls.n	40f9d0 <draw_shadow+0xbc>
  40f9ce:	27ff      	movs	r7, #255	; 0xff
  40f9d0:	4615      	mov	r5, r2
  40f9d2:	4688      	mov	r8, r1
  40f9d4:	9104      	str	r1, [sp, #16]
  40f9d6:	4681      	mov	r9, r0
  40f9d8:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40f9da:	4b9a      	ldr	r3, [pc, #616]	; (40fc44 <draw_shadow+0x330>)
  40f9dc:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40f9de:	4b9a      	ldr	r3, [pc, #616]	; (40fc48 <draw_shadow+0x334>)
  40f9e0:	4798      	blx	r3
  40f9e2:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  40f9e4:	4642      	mov	r2, r8
  40f9e6:	a922      	add	r1, sp, #136	; 0x88
  40f9e8:	a820      	add	r0, sp, #128	; 0x80
  40f9ea:	4b98      	ldr	r3, [pc, #608]	; (40fc4c <draw_shadow+0x338>)
  40f9ec:	4798      	blx	r3
    if(is_common == false) return;
  40f9ee:	9006      	str	r0, [sp, #24]
  40f9f0:	2800      	cmp	r0, #0
  40f9f2:	f000 8387 	beq.w	410104 <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  40f9f6:	8a31      	ldrh	r1, [r6, #16]
  40f9f8:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40f9fc:	1a5b      	subs	r3, r3, r1
  40f9fe:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  40fa02:	8a72      	ldrh	r2, [r6, #18]
  40fa04:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  40fa08:	1a9b      	subs	r3, r3, r2
  40fa0a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  40fa0e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40fa12:	1a5b      	subs	r3, r3, r1
  40fa14:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  40fa18:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  40fa1c:	1a9b      	subs	r3, r3, r2
  40fa1e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  40fa22:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  40fa24:	aa1e      	add	r2, sp, #120	; 0x78
  40fa26:	2308      	movs	r3, #8
  40fa28:	e013      	b.n	40fa52 <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fa2a:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40fa2c:	2b00      	cmp	r3, #0
  40fa2e:	d180      	bne.n	40f932 <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  40fa30:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  40fa34:	2b00      	cmp	r3, #0
  40fa36:	f73f af7c 	bgt.w	40f932 <draw_shadow+0x1e>
  40fa3a:	e363      	b.n	410104 <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40fa3c:	f104 0801 	add.w	r8, r4, #1
  40fa40:	e79f      	b.n	40f982 <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40fa42:	f104 0c01 	add.w	ip, r4, #1
  40fa46:	e7ad      	b.n	40f9a4 <draw_shadow+0x90>
        *d8 = *s8;
  40fa48:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fa4c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fa50:	3b01      	subs	r3, #1
    while(len) {
  40fa52:	2b00      	cmp	r3, #0
  40fa54:	d1f8      	bne.n	40fa48 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  40fa56:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  40fa5a:	3201      	adds	r2, #1
  40fa5c:	b296      	uxth	r6, r2
  40fa5e:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  40fa62:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  40fa66:	3001      	adds	r0, #1
  40fa68:	b280      	uxth	r0, r0
  40fa6a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  40fa6e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  40fa72:	3a01      	subs	r2, #1
  40fa74:	b292      	uxth	r2, r2
  40fa76:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  40fa7a:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  40fa7e:	3b01      	subs	r3, #1
  40fa80:	b29b      	uxth	r3, r3
  40fa82:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  40fa86:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fa8a:	1b92      	subs	r2, r2, r6
  40fa8c:	b292      	uxth	r2, r2
  40fa8e:	3201      	adds	r2, #1
  40fa90:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fa92:	1a1e      	subs	r6, r3, r0
  40fa94:	b2b6      	uxth	r6, r6
  40fa96:	3601      	adds	r6, #1
  40fa98:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  40fa9a:	42b2      	cmp	r2, r6
  40fa9c:	da00      	bge.n	40faa0 <draw_shadow+0x18c>
  40fa9e:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40faa0:	1076      	asrs	r6, r6, #1
  40faa2:	42b1      	cmp	r1, r6
  40faa4:	dc00      	bgt.n	40faa8 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  40faa6:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40faa8:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  40faac:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  40fab0:	1ad2      	subs	r2, r2, r3
  40fab2:	b292      	uxth	r2, r2
  40fab4:	3201      	adds	r2, #1
  40fab6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fab8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  40fabc:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  40fac0:	1a1b      	subs	r3, r3, r0
  40fac2:	b29b      	uxth	r3, r3
  40fac4:	3301      	adds	r3, #1
  40fac6:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  40faca:	4590      	cmp	r8, r2
  40facc:	dd00      	ble.n	40fad0 <draw_shadow+0x1bc>
  40face:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40fad0:	ea4f 0868 	mov.w	r8, r8, asr #1
  40fad4:	4541      	cmp	r1, r8
  40fad6:	dc00      	bgt.n	40fada <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  40fad8:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  40fada:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40fadc:	fb04 f004 	mul.w	r0, r4, r4
  40fae0:	0040      	lsls	r0, r0, #1
  40fae2:	4b5b      	ldr	r3, [pc, #364]	; (40fc50 <draw_shadow+0x33c>)
  40fae4:	4798      	blx	r3
  40fae6:	4601      	mov	r1, r0
  40fae8:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40faea:	fa0f f388 	sxth.w	r3, r8
  40faee:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  40faf2:	a824      	add	r0, sp, #144	; 0x90
  40faf4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 40fc60 <draw_shadow+0x34c>
  40faf8:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fafa:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  40fafe:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fb02:	1a9b      	subs	r3, r3, r2
  40fb04:	b29b      	uxth	r3, r3
  40fb06:	3301      	adds	r3, #1
  40fb08:	b21b      	sxth	r3, r3
  40fb0a:	2b00      	cmp	r3, #0
  40fb0c:	db21      	blt.n	40fb52 <draw_shadow+0x23e>
  40fb0e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fb12:	b29b      	uxth	r3, r3
  40fb14:	930d      	str	r3, [sp, #52]	; 0x34
  40fb16:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40fb1a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fb1e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40fb22:	1a9b      	subs	r3, r3, r2
  40fb24:	b29b      	uxth	r3, r3
  40fb26:	3301      	adds	r3, #1
  40fb28:	b21b      	sxth	r3, r3
  40fb2a:	2b00      	cmp	r3, #0
  40fb2c:	db13      	blt.n	40fb56 <draw_shadow+0x242>
  40fb2e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fb32:	b29b      	uxth	r3, r3
  40fb34:	930e      	str	r3, [sp, #56]	; 0x38
  40fb36:	b21b      	sxth	r3, r3
  40fb38:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fb3a:	4b46      	ldr	r3, [pc, #280]	; (40fc54 <draw_shadow+0x340>)
  40fb3c:	4798      	blx	r3
  40fb3e:	b960      	cbnz	r0, 40fb5a <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40fb40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40fb42:	2b00      	cmp	r3, #0
  40fb44:	d17a      	bne.n	40fc3c <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  40fb46:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  40fb4a:	b143      	cbz	r3, 40fb5e <draw_shadow+0x24a>
  40fb4c:	2300      	movs	r3, #0
  40fb4e:	9306      	str	r3, [sp, #24]
  40fb50:	e005      	b.n	40fb5e <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fb52:	3301      	adds	r3, #1
  40fb54:	e7db      	b.n	40fb0e <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40fb56:	3301      	adds	r3, #1
  40fb58:	e7e9      	b.n	40fb2e <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fb5a:	2300      	movs	r3, #0
  40fb5c:	9306      	str	r3, [sp, #24]
  40fb5e:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  40fb62:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fb66:	1ac0      	subs	r0, r0, r3
  40fb68:	b280      	uxth	r0, r0
  40fb6a:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  40fb6c:	b200      	sxth	r0, r0
  40fb6e:	4b38      	ldr	r3, [pc, #224]	; (40fc50 <draw_shadow+0x33c>)
  40fb70:	4798      	blx	r3
  40fb72:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  40fb74:	b233      	sxth	r3, r6
  40fb76:	461a      	mov	r2, r3
  40fb78:	9308      	str	r3, [sp, #32]
  40fb7a:	2301      	movs	r3, #1
  40fb7c:	a91e      	add	r1, sp, #120	; 0x78
  40fb7e:	a817      	add	r0, sp, #92	; 0x5c
  40fb80:	4e35      	ldr	r6, [pc, #212]	; (40fc58 <draw_shadow+0x344>)
  40fb82:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40fb84:	2100      	movs	r1, #0
  40fb86:	a817      	add	r0, sp, #92	; 0x5c
  40fb88:	4b34      	ldr	r3, [pc, #208]	; (40fc5c <draw_shadow+0x348>)
  40fb8a:	4798      	blx	r3
  40fb8c:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  40fb8e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fb92:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fb96:	b29b      	uxth	r3, r3
  40fb98:	b2a6      	uxth	r6, r4
  40fb9a:	1b9b      	subs	r3, r3, r6
  40fb9c:	b29b      	uxth	r3, r3
  40fb9e:	3301      	adds	r3, #1
  40fba0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  40fba4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40fba8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  40fbac:	fa16 f383 	uxtah	r3, r6, r3
  40fbb0:	b29b      	uxth	r3, r3
  40fbb2:	3b01      	subs	r3, #1
  40fbb4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  40fbb8:	9a04      	ldr	r2, [sp, #16]
  40fbba:	a915      	add	r1, sp, #84	; 0x54
  40fbbc:	a813      	add	r0, sp, #76	; 0x4c
  40fbbe:	4b23      	ldr	r3, [pc, #140]	; (40fc4c <draw_shadow+0x338>)
  40fbc0:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fbc2:	2800      	cmp	r0, #0
  40fbc4:	d14e      	bne.n	40fc64 <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  40fbc6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fbca:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fbce:	b29b      	uxth	r3, r3
  40fbd0:	1b9b      	subs	r3, r3, r6
  40fbd2:	b29b      	uxth	r3, r3
  40fbd4:	3301      	adds	r3, #1
  40fbd6:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  40fbda:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40fbde:	b293      	uxth	r3, r2
  40fbe0:	1b9b      	subs	r3, r3, r6
  40fbe2:	b29b      	uxth	r3, r3
  40fbe4:	3301      	adds	r3, #1
  40fbe6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40fbea:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fbee:	9a04      	ldr	r2, [sp, #16]
  40fbf0:	a915      	add	r1, sp, #84	; 0x54
  40fbf2:	a813      	add	r0, sp, #76	; 0x4c
  40fbf4:	4b15      	ldr	r3, [pc, #84]	; (40fc4c <draw_shadow+0x338>)
  40fbf6:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fbf8:	2800      	cmp	r0, #0
  40fbfa:	f040 80b0 	bne.w	40fd5e <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  40fbfe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fc02:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fc06:	b29b      	uxth	r3, r3
  40fc08:	1b9b      	subs	r3, r3, r6
  40fc0a:	b29b      	uxth	r3, r3
  40fc0c:	3301      	adds	r3, #1
  40fc0e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  40fc12:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  40fc16:	4433      	add	r3, r6
  40fc18:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  40fc1c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fc20:	1b9b      	subs	r3, r3, r6
  40fc22:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fc26:	9a04      	ldr	r2, [sp, #16]
  40fc28:	a915      	add	r1, sp, #84	; 0x54
  40fc2a:	a813      	add	r0, sp, #76	; 0x4c
  40fc2c:	4b07      	ldr	r3, [pc, #28]	; (40fc4c <draw_shadow+0x338>)
  40fc2e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fc30:	2800      	cmp	r0, #0
  40fc32:	f040 8115 	bne.w	40fe60 <draw_shadow+0x54c>
  40fc36:	9907      	ldr	r1, [sp, #28]
  40fc38:	2000      	movs	r0, #0
  40fc3a:	e1ab      	b.n	40ff94 <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40fc3c:	2300      	movs	r3, #0
  40fc3e:	9306      	str	r3, [sp, #24]
  40fc40:	e78d      	b.n	40fb5e <draw_shadow+0x24a>
  40fc42:	bf00      	nop
  40fc44:	00409055 	.word	0x00409055
  40fc48:	00414505 	.word	0x00414505
  40fc4c:	00414c69 	.word	0x00414c69
  40fc50:	00415fdd 	.word	0x00415fdd
  40fc54:	0040f3f5 	.word	0x0040f3f5
  40fc58:	0040f575 	.word	0x0040f575
  40fc5c:	0040f2f9 	.word	0x0040f2f9
  40fc60:	0040f749 	.word	0x0040f749
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fc64:	9a08      	ldr	r2, [sp, #32]
  40fc66:	a91e      	add	r1, sp, #120	; 0x78
  40fc68:	a815      	add	r0, sp, #84	; 0x54
  40fc6a:	4ba2      	ldr	r3, [pc, #648]	; (40fef4 <draw_shadow+0x5e0>)
  40fc6c:	4798      	blx	r3
  40fc6e:	2800      	cmp	r0, #0
  40fc70:	d1a9      	bne.n	40fbc6 <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  40fc72:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  40fc76:	459b      	cmp	fp, r3
  40fc78:	da01      	bge.n	40fc7e <draw_shadow+0x36a>
  40fc7a:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40fc7e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40fc82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40fc84:	429a      	cmp	r2, r3
  40fc86:	db03      	blt.n	40fc90 <draw_shadow+0x37c>
  40fc88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40fc8a:	3301      	adds	r3, #1
  40fc8c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fc90:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  40fc94:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  40fc98:	b291      	uxth	r1, r2
  40fc9a:	1a5b      	subs	r3, r3, r1
  40fc9c:	b29b      	uxth	r3, r3
  40fc9e:	3301      	adds	r3, #1
  40fca0:	b21b      	sxth	r3, r3
  40fca2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fca4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fca8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40fcac:	b288      	uxth	r0, r1
  40fcae:	1a1b      	subs	r3, r3, r0
  40fcb0:	b29b      	uxth	r3, r3
  40fcb2:	3301      	adds	r3, #1
  40fcb4:	b21b      	sxth	r3, r3
  40fcb6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fcb8:	2b00      	cmp	r3, #0
  40fcba:	dd84      	ble.n	40fbc6 <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40fcbc:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fcc0:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  40fcc4:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  40fcc8:	eba2 0808 	sub.w	r8, r2, r8
  40fccc:	fb08 1804 	mla	r8, r8, r4, r1
  40fcd0:	9b07      	ldr	r3, [sp, #28]
  40fcd2:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40fcd4:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fcd6:	aa11      	add	r2, sp, #68	; 0x44
  40fcd8:	2308      	movs	r3, #8
    while(len) {
  40fcda:	b12b      	cbz	r3, 40fce8 <draw_shadow+0x3d4>
        *d8 = *s8;
  40fcdc:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fce0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fce4:	3b01      	subs	r3, #1
  40fce6:	e7f8      	b.n	40fcda <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  40fce8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fcec:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fcf0:	f04f 0900 	mov.w	r9, #0
  40fcf4:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40fcf8:	46a3      	mov	fp, r4
  40fcfa:	46f2      	mov	sl, lr
  40fcfc:	e017      	b.n	40fd2e <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40fcfe:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fd02:	9302      	str	r3, [sp, #8]
  40fd04:	9701      	str	r7, [sp, #4]
  40fd06:	9000      	str	r0, [sp, #0]
  40fd08:	9b05      	ldr	r3, [sp, #20]
  40fd0a:	8c2a      	ldrh	r2, [r5, #32]
  40fd0c:	a911      	add	r1, sp, #68	; 0x44
  40fd0e:	9804      	ldr	r0, [sp, #16]
  40fd10:	4c79      	ldr	r4, [pc, #484]	; (40fef8 <draw_shadow+0x5e4>)
  40fd12:	47a0      	blx	r4
                fa.y1++;
  40fd14:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fd18:	3301      	adds	r3, #1
  40fd1a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40fd1e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fd22:	3301      	adds	r3, #1
  40fd24:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40fd28:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40fd2a:	f109 0901 	add.w	r9, r9, #1
  40fd2e:	45d1      	cmp	r9, sl
  40fd30:	da11      	bge.n	40fd56 <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40fd32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fd34:	4641      	mov	r1, r8
  40fd36:	9c05      	ldr	r4, [sp, #20]
  40fd38:	4620      	mov	r0, r4
  40fd3a:	4b70      	ldr	r3, [pc, #448]	; (40fefc <draw_shadow+0x5e8>)
  40fd3c:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fd40:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fd44:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fd48:	4620      	mov	r0, r4
  40fd4a:	4c6d      	ldr	r4, [pc, #436]	; (40ff00 <draw_shadow+0x5ec>)
  40fd4c:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fd4e:	2801      	cmp	r0, #1
  40fd50:	d1d5      	bne.n	40fcfe <draw_shadow+0x3ea>
  40fd52:	2002      	movs	r0, #2
  40fd54:	e7d3      	b.n	40fcfe <draw_shadow+0x3ea>
  40fd56:	465c      	mov	r4, fp
  40fd58:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  40fd5c:	e733      	b.n	40fbc6 <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fd5e:	9a08      	ldr	r2, [sp, #32]
  40fd60:	a91e      	add	r1, sp, #120	; 0x78
  40fd62:	a815      	add	r0, sp, #84	; 0x54
  40fd64:	4b63      	ldr	r3, [pc, #396]	; (40fef4 <draw_shadow+0x5e0>)
  40fd66:	4798      	blx	r3
  40fd68:	2800      	cmp	r0, #0
  40fd6a:	f47f af48 	bne.w	40fbfe <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  40fd6e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40fd72:	459b      	cmp	fp, r3
  40fd74:	db03      	blt.n	40fd7e <draw_shadow+0x46a>
  40fd76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40fd78:	3301      	adds	r3, #1
  40fd7a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40fd7e:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40fd82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40fd84:	429a      	cmp	r2, r3
  40fd86:	db03      	blt.n	40fd90 <draw_shadow+0x47c>
  40fd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40fd8a:	3301      	adds	r3, #1
  40fd8c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fd90:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40fd94:	b293      	uxth	r3, r2
  40fd96:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  40fd9a:	1a5b      	subs	r3, r3, r1
  40fd9c:	b29b      	uxth	r3, r3
  40fd9e:	3301      	adds	r3, #1
  40fda0:	b21b      	sxth	r3, r3
  40fda2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fda4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fda8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40fdac:	b288      	uxth	r0, r1
  40fdae:	1a1b      	subs	r3, r3, r0
  40fdb0:	b29b      	uxth	r3, r3
  40fdb2:	3301      	adds	r3, #1
  40fdb4:	b21b      	sxth	r3, r3
  40fdb6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fdb8:	2b00      	cmp	r3, #0
  40fdba:	f77f af20 	ble.w	40fbfe <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40fdbe:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fdc2:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  40fdc6:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  40fdca:	eba8 0802 	sub.w	r8, r8, r2
  40fdce:	fb08 1804 	mla	r8, r8, r4, r1
  40fdd2:	9b07      	ldr	r3, [sp, #28]
  40fdd4:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40fdd6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fdd8:	aa11      	add	r2, sp, #68	; 0x44
  40fdda:	2308      	movs	r3, #8
    while(len) {
  40fddc:	b12b      	cbz	r3, 40fdea <draw_shadow+0x4d6>
        *d8 = *s8;
  40fdde:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fde2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fde6:	3b01      	subs	r3, #1
  40fde8:	e7f8      	b.n	40fddc <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  40fdea:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fdee:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  40fdf2:	f04f 0900 	mov.w	r9, #0
  40fdf6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  40fdfa:	46a3      	mov	fp, r4
  40fdfc:	46f2      	mov	sl, lr
  40fdfe:	e017      	b.n	40fe30 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40fe00:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40fe04:	9302      	str	r3, [sp, #8]
  40fe06:	9701      	str	r7, [sp, #4]
  40fe08:	9000      	str	r0, [sp, #0]
  40fe0a:	9b05      	ldr	r3, [sp, #20]
  40fe0c:	8c2a      	ldrh	r2, [r5, #32]
  40fe0e:	a911      	add	r1, sp, #68	; 0x44
  40fe10:	9804      	ldr	r0, [sp, #16]
  40fe12:	4c39      	ldr	r4, [pc, #228]	; (40fef8 <draw_shadow+0x5e4>)
  40fe14:	47a0      	blx	r4
                fa.y1--;
  40fe16:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fe1a:	3b01      	subs	r3, #1
  40fe1c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  40fe20:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40fe24:	3b01      	subs	r3, #1
  40fe26:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40fe2a:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40fe2c:	f109 0901 	add.w	r9, r9, #1
  40fe30:	45d1      	cmp	r9, sl
  40fe32:	da11      	bge.n	40fe58 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40fe34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40fe36:	4641      	mov	r1, r8
  40fe38:	9c05      	ldr	r4, [sp, #20]
  40fe3a:	4620      	mov	r0, r4
  40fe3c:	4b2f      	ldr	r3, [pc, #188]	; (40fefc <draw_shadow+0x5e8>)
  40fe3e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40fe40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40fe42:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40fe46:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40fe4a:	4620      	mov	r0, r4
  40fe4c:	4c2c      	ldr	r4, [pc, #176]	; (40ff00 <draw_shadow+0x5ec>)
  40fe4e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40fe50:	2801      	cmp	r0, #1
  40fe52:	d1d5      	bne.n	40fe00 <draw_shadow+0x4ec>
  40fe54:	2002      	movs	r0, #2
  40fe56:	e7d3      	b.n	40fe00 <draw_shadow+0x4ec>
  40fe58:	465c      	mov	r4, fp
  40fe5a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  40fe5e:	e6ce      	b.n	40fbfe <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fe60:	9a08      	ldr	r2, [sp, #32]
  40fe62:	a91e      	add	r1, sp, #120	; 0x78
  40fe64:	a815      	add	r0, sp, #84	; 0x54
  40fe66:	4b23      	ldr	r3, [pc, #140]	; (40fef4 <draw_shadow+0x5e0>)
  40fe68:	4798      	blx	r3
  40fe6a:	2800      	cmp	r0, #0
  40fe6c:	f47f aee3 	bne.w	40fc36 <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  40fe70:	9b06      	ldr	r3, [sp, #24]
  40fe72:	b14b      	cbz	r3, 40fe88 <draw_shadow+0x574>
  40fe74:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40fe76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  40fe7a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  40fe7e:	4293      	cmp	r3, r2
  40fe80:	bfb8      	it	lt
  40fe82:	4613      	movlt	r3, r2
  40fe84:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  40fe88:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fe8c:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  40fe90:	b291      	uxth	r1, r2
  40fe92:	1a5b      	subs	r3, r3, r1
  40fe94:	b29b      	uxth	r3, r3
  40fe96:	3301      	adds	r3, #1
  40fe98:	b21b      	sxth	r3, r3
  40fe9a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fe9c:	2b00      	cmp	r3, #0
  40fe9e:	f77f aeca 	ble.w	40fc36 <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fea2:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  40fea6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  40feaa:	ebaa 0a03 	sub.w	sl, sl, r3
  40feae:	fa1f fa8a 	uxth.w	sl, sl
  40feb2:	f10a 0a01 	add.w	sl, sl, #1
  40feb6:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  40feba:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  40febc:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  40fec0:	1a52      	subs	r2, r2, r1
  40fec2:	fb03 2304 	mla	r3, r3, r4, r2
  40fec6:	9a07      	ldr	r2, [sp, #28]
  40fec8:	18d3      	adds	r3, r2, r3
  40feca:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  40fecc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40fece:	aa11      	add	r2, sp, #68	; 0x44
  40fed0:	2308      	movs	r3, #8
    while(len) {
  40fed2:	b12b      	cbz	r3, 40fee0 <draw_shadow+0x5cc>
        *d8 = *s8;
  40fed4:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fed8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fedc:	3b01      	subs	r3, #1
  40fede:	e7f8      	b.n	40fed2 <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  40fee0:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40fee4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40fee8:	f04f 0800 	mov.w	r8, #0
  40feec:	970f      	str	r7, [sp, #60]	; 0x3c
  40feee:	46a1      	mov	r9, r4
  40fef0:	9c06      	ldr	r4, [sp, #24]
  40fef2:	e02a      	b.n	40ff4a <draw_shadow+0x636>
  40fef4:	00414edd 	.word	0x00414edd
  40fef8:	0040c0d1 	.word	0x0040c0d1
  40fefc:	00415e45 	.word	0x00415e45
  40ff00:	0040f32d 	.word	0x0040f32d
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40ff04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ff06:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40ff0a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40ff0e:	9805      	ldr	r0, [sp, #20]
  40ff10:	4fbc      	ldr	r7, [pc, #752]	; (410204 <draw_shadow+0x8f0>)
  40ff12:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff14:	2801      	cmp	r0, #1
  40ff16:	d023      	beq.n	40ff60 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  40ff18:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40ff1c:	9302      	str	r3, [sp, #8]
  40ff1e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  40ff22:	9301      	str	r3, [sp, #4]
  40ff24:	9000      	str	r0, [sp, #0]
  40ff26:	9b05      	ldr	r3, [sp, #20]
  40ff28:	8c2a      	ldrh	r2, [r5, #32]
  40ff2a:	a911      	add	r1, sp, #68	; 0x44
  40ff2c:	9804      	ldr	r0, [sp, #16]
  40ff2e:	4fb6      	ldr	r7, [pc, #728]	; (410208 <draw_shadow+0x8f4>)
  40ff30:	47b8      	blx	r7
                fa.y1++;
  40ff32:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40ff36:	3301      	adds	r3, #1
  40ff38:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40ff3c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40ff40:	3301      	adds	r3, #1
  40ff42:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40ff46:	f108 0801 	add.w	r8, r8, #1
  40ff4a:	45d0      	cmp	r8, sl
  40ff4c:	da0a      	bge.n	40ff64 <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40ff4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ff50:	990e      	ldr	r1, [sp, #56]	; 0x38
  40ff52:	9805      	ldr	r0, [sp, #20]
  40ff54:	4bad      	ldr	r3, [pc, #692]	; (41020c <draw_shadow+0x8f8>)
  40ff56:	4798      	blx	r3
                if(simple_mode) {
  40ff58:	2c00      	cmp	r4, #0
  40ff5a:	d0d3      	beq.n	40ff04 <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff5c:	2002      	movs	r0, #2
  40ff5e:	e7db      	b.n	40ff18 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff60:	2002      	movs	r0, #2
  40ff62:	e7d9      	b.n	40ff18 <draw_shadow+0x604>
  40ff64:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40ff66:	464c      	mov	r4, r9
  40ff68:	e665      	b.n	40fc36 <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  40ff6a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  40ff6e:	da0f      	bge.n	40ff90 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  40ff70:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  40ff74:	1ae2      	subs	r2, r4, r3
  40ff76:	3a01      	subs	r2, #1
  40ff78:	f811 c002 	ldrb.w	ip, [r1, r2]
  40ff7c:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  40ff80:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  40ff84:	3301      	adds	r3, #1
  40ff86:	4622      	mov	r2, r4
  40ff88:	2c00      	cmp	r4, #0
  40ff8a:	daee      	bge.n	40ff6a <draw_shadow+0x656>
  40ff8c:	1c62      	adds	r2, r4, #1
  40ff8e:	e7ec      	b.n	40ff6a <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  40ff90:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  40ff92:	3001      	adds	r0, #1
  40ff94:	42a0      	cmp	r0, r4
  40ff96:	da01      	bge.n	40ff9c <draw_shadow+0x688>
  40ff98:	2300      	movs	r3, #0
  40ff9a:	e7f4      	b.n	40ff86 <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  40ff9c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  40ffa0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  40ffa4:	fa16 f383 	uxtah	r3, r6, r3
  40ffa8:	b29b      	uxth	r3, r3
  40ffaa:	3b01      	subs	r3, #1
  40ffac:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  40ffb0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40ffb4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  40ffb8:	fa16 f383 	uxtah	r3, r6, r3
  40ffbc:	b29b      	uxth	r3, r3
  40ffbe:	3b01      	subs	r3, #1
  40ffc0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40ffc4:	9a04      	ldr	r2, [sp, #16]
  40ffc6:	a915      	add	r1, sp, #84	; 0x54
  40ffc8:	a813      	add	r0, sp, #76	; 0x4c
  40ffca:	4b91      	ldr	r3, [pc, #580]	; (410210 <draw_shadow+0x8fc>)
  40ffcc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ffce:	2800      	cmp	r0, #0
  40ffd0:	f040 809b 	bne.w	41010a <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  40ffd4:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  40ffd8:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  40ffdc:	fa16 f383 	uxtah	r3, r6, r3
  40ffe0:	b29b      	uxth	r3, r3
  40ffe2:	3b01      	subs	r3, #1
  40ffe4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  40ffe8:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40ffec:	b293      	uxth	r3, r2
  40ffee:	1b9b      	subs	r3, r3, r6
  40fff0:	b29b      	uxth	r3, r3
  40fff2:	3301      	adds	r3, #1
  40fff4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40fff8:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fffc:	9a04      	ldr	r2, [sp, #16]
  40fffe:	a915      	add	r1, sp, #84	; 0x54
  410000:	a813      	add	r0, sp, #76	; 0x4c
  410002:	4b83      	ldr	r3, [pc, #524]	; (410210 <draw_shadow+0x8fc>)
  410004:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410006:	2800      	cmp	r0, #0
  410008:	f040 810a 	bne.w	410220 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  41000c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410010:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  410014:	fa16 f383 	uxtah	r3, r6, r3
  410018:	b29b      	uxth	r3, r3
  41001a:	3b01      	subs	r3, #1
  41001c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  410020:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  410024:	4433      	add	r3, r6
  410026:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41002a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41002e:	1b9b      	subs	r3, r3, r6
  410030:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410034:	9a04      	ldr	r2, [sp, #16]
  410036:	a915      	add	r1, sp, #84	; 0x54
  410038:	a813      	add	r0, sp, #76	; 0x4c
  41003a:	4b75      	ldr	r3, [pc, #468]	; (410210 <draw_shadow+0x8fc>)
  41003c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41003e:	2800      	cmp	r0, #0
  410040:	f040 816c 	bne.w	41031c <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  410044:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410048:	4433      	add	r3, r6
  41004a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  41004e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410052:	1b9b      	subs	r3, r3, r6
  410054:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  410058:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41005c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  410060:	fa16 f383 	uxtah	r3, r6, r3
  410064:	b29b      	uxth	r3, r3
  410066:	3b01      	subs	r3, #1
  410068:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41006c:	9a04      	ldr	r2, [sp, #16]
  41006e:	a915      	add	r1, sp, #84	; 0x54
  410070:	a813      	add	r0, sp, #76	; 0x4c
  410072:	4b67      	ldr	r3, [pc, #412]	; (410210 <draw_shadow+0x8fc>)
  410074:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410076:	2800      	cmp	r0, #0
  410078:	f040 81d1 	bne.w	41041e <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  41007c:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410080:	4433      	add	r3, r6
  410082:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  410086:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41008a:	1b9b      	subs	r3, r3, r6
  41008c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410090:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  410094:	b293      	uxth	r3, r2
  410096:	1b9b      	subs	r3, r3, r6
  410098:	b29b      	uxth	r3, r3
  41009a:	3301      	adds	r3, #1
  41009c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4100a0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4100a4:	9a04      	ldr	r2, [sp, #16]
  4100a6:	a915      	add	r1, sp, #84	; 0x54
  4100a8:	a813      	add	r0, sp, #76	; 0x4c
  4100aa:	4b59      	ldr	r3, [pc, #356]	; (410210 <draw_shadow+0x8fc>)
  4100ac:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4100ae:	2800      	cmp	r0, #0
  4100b0:	f040 8245 	bne.w	41053e <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  4100b4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4100b8:	4433      	add	r3, r6
  4100ba:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4100be:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4100c2:	1b9b      	subs	r3, r3, r6
  4100c4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4100c8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4100cc:	4433      	add	r3, r6
  4100ce:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  4100d2:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  4100d6:	1b9e      	subs	r6, r3, r6
  4100d8:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4100dc:	9a04      	ldr	r2, [sp, #16]
  4100de:	a915      	add	r1, sp, #84	; 0x54
  4100e0:	a813      	add	r0, sp, #76	; 0x4c
  4100e2:	4b4b      	ldr	r3, [pc, #300]	; (410210 <draw_shadow+0x8fc>)
  4100e4:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4100e6:	9b06      	ldr	r3, [sp, #24]
  4100e8:	f083 0301 	eor.w	r3, r3, #1
  4100ec:	b2db      	uxtb	r3, r3
  4100ee:	4218      	tst	r0, r3
  4100f0:	f040 82a9 	bne.w	410646 <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  4100f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4100f6:	4b47      	ldr	r3, [pc, #284]	; (410214 <draw_shadow+0x900>)
  4100f8:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  4100fa:	9805      	ldr	r0, [sp, #20]
  4100fc:	4c46      	ldr	r4, [pc, #280]	; (410218 <draw_shadow+0x904>)
  4100fe:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  410100:	9807      	ldr	r0, [sp, #28]
  410102:	47a0      	blx	r4
}
  410104:	b027      	add	sp, #156	; 0x9c
  410106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41010a:	9a08      	ldr	r2, [sp, #32]
  41010c:	a91e      	add	r1, sp, #120	; 0x78
  41010e:	a815      	add	r0, sp, #84	; 0x54
  410110:	4b42      	ldr	r3, [pc, #264]	; (41021c <draw_shadow+0x908>)
  410112:	4798      	blx	r3
  410114:	2800      	cmp	r0, #0
  410116:	f47f af5d 	bne.w	40ffd4 <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  41011a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  41011e:	459b      	cmp	fp, r3
  410120:	da01      	bge.n	410126 <draw_shadow+0x812>
  410122:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  410126:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  41012a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41012c:	4299      	cmp	r1, r3
  41012e:	da01      	bge.n	410134 <draw_shadow+0x820>
  410130:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  410134:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410138:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41013c:	b291      	uxth	r1, r2
  41013e:	1a5b      	subs	r3, r3, r1
  410140:	b29b      	uxth	r3, r3
  410142:	3301      	adds	r3, #1
  410144:	b21b      	sxth	r3, r3
  410146:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410148:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41014c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410150:	b288      	uxth	r0, r1
  410152:	1a1b      	subs	r3, r3, r0
  410154:	b29b      	uxth	r3, r3
  410156:	3301      	adds	r3, #1
  410158:	b21b      	sxth	r3, r3
  41015a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41015c:	2b00      	cmp	r3, #0
  41015e:	f77f af39 	ble.w	40ffd4 <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410162:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410166:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  41016a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  41016e:	eba2 0808 	sub.w	r8, r2, r8
  410172:	fb08 1804 	mla	r8, r8, r4, r1
  410176:	9b07      	ldr	r3, [sp, #28]
  410178:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  41017a:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  41017c:	aa11      	add	r2, sp, #68	; 0x44
  41017e:	2308      	movs	r3, #8
    while(len) {
  410180:	b12b      	cbz	r3, 41018e <draw_shadow+0x87a>
        *d8 = *s8;
  410182:	f811 0b01 	ldrb.w	r0, [r1], #1
  410186:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41018a:	3b01      	subs	r3, #1
  41018c:	e7f8      	b.n	410180 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  41018e:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410192:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410196:	f04f 0900 	mov.w	r9, #0
  41019a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  41019e:	46a3      	mov	fp, r4
  4101a0:	46f2      	mov	sl, lr
  4101a2:	e017      	b.n	4101d4 <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4101a4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4101a8:	9302      	str	r3, [sp, #8]
  4101aa:	9701      	str	r7, [sp, #4]
  4101ac:	9000      	str	r0, [sp, #0]
  4101ae:	9b05      	ldr	r3, [sp, #20]
  4101b0:	8c2a      	ldrh	r2, [r5, #32]
  4101b2:	a911      	add	r1, sp, #68	; 0x44
  4101b4:	9804      	ldr	r0, [sp, #16]
  4101b6:	4c14      	ldr	r4, [pc, #80]	; (410208 <draw_shadow+0x8f4>)
  4101b8:	47a0      	blx	r4
                fa.y1++;
  4101ba:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4101be:	3301      	adds	r3, #1
  4101c0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4101c4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4101c8:	3301      	adds	r3, #1
  4101ca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4101ce:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  4101d0:	f109 0901 	add.w	r9, r9, #1
  4101d4:	45d1      	cmp	r9, sl
  4101d6:	da11      	bge.n	4101fc <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4101d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4101da:	4641      	mov	r1, r8
  4101dc:	9c05      	ldr	r4, [sp, #20]
  4101de:	4620      	mov	r0, r4
  4101e0:	4b0a      	ldr	r3, [pc, #40]	; (41020c <draw_shadow+0x8f8>)
  4101e2:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4101e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4101e6:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4101ea:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4101ee:	4620      	mov	r0, r4
  4101f0:	4c04      	ldr	r4, [pc, #16]	; (410204 <draw_shadow+0x8f0>)
  4101f2:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4101f4:	2801      	cmp	r0, #1
  4101f6:	d1d5      	bne.n	4101a4 <draw_shadow+0x890>
  4101f8:	2002      	movs	r0, #2
  4101fa:	e7d3      	b.n	4101a4 <draw_shadow+0x890>
  4101fc:	465c      	mov	r4, fp
  4101fe:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410202:	e6e7      	b.n	40ffd4 <draw_shadow+0x6c0>
  410204:	0040f32d 	.word	0x0040f32d
  410208:	0040c0d1 	.word	0x0040c0d1
  41020c:	00415e45 	.word	0x00415e45
  410210:	00414c69 	.word	0x00414c69
  410214:	0040f37d 	.word	0x0040f37d
  410218:	00415d8d 	.word	0x00415d8d
  41021c:	00414edd 	.word	0x00414edd
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410220:	9a08      	ldr	r2, [sp, #32]
  410222:	a91e      	add	r1, sp, #120	; 0x78
  410224:	a815      	add	r0, sp, #84	; 0x54
  410226:	4bb9      	ldr	r3, [pc, #740]	; (41050c <draw_shadow+0xbf8>)
  410228:	4798      	blx	r3
  41022a:	2800      	cmp	r0, #0
  41022c:	f47f aeee 	bne.w	41000c <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410230:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410234:	459b      	cmp	fp, r3
  410236:	db03      	blt.n	410240 <draw_shadow+0x92c>
  410238:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41023a:	3301      	adds	r3, #1
  41023c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  410240:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410244:	990c      	ldr	r1, [sp, #48]	; 0x30
  410246:	4299      	cmp	r1, r3
  410248:	da01      	bge.n	41024e <draw_shadow+0x93a>
  41024a:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41024e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410252:	fa1f fb82 	uxth.w	fp, r2
  410256:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41025a:	ebab 0b03 	sub.w	fp, fp, r3
  41025e:	fa1f fb8b 	uxth.w	fp, fp
  410262:	f10b 0b01 	add.w	fp, fp, #1
  410266:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41026a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41026e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410272:	b288      	uxth	r0, r1
  410274:	1a1b      	subs	r3, r3, r0
  410276:	b29b      	uxth	r3, r3
  410278:	3301      	adds	r3, #1
  41027a:	b21b      	sxth	r3, r3
  41027c:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41027e:	2b00      	cmp	r3, #0
  410280:	f77f aec4 	ble.w	41000c <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410284:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410288:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  41028c:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  410290:	eba8 0802 	sub.w	r8, r8, r2
  410294:	fb08 1804 	mla	r8, r8, r4, r1
  410298:	9b07      	ldr	r3, [sp, #28]
  41029a:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  41029c:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  41029e:	aa11      	add	r2, sp, #68	; 0x44
  4102a0:	2308      	movs	r3, #8
    while(len) {
  4102a2:	b12b      	cbz	r3, 4102b0 <draw_shadow+0x99c>
        *d8 = *s8;
  4102a4:	f811 0b01 	ldrb.w	r0, [r1], #1
  4102a8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4102ac:	3b01      	subs	r3, #1
  4102ae:	e7f8      	b.n	4102a2 <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4102b0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4102b4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  4102b8:	f04f 0900 	mov.w	r9, #0
  4102bc:	46a2      	mov	sl, r4
  4102be:	e017      	b.n	4102f0 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4102c0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4102c4:	9302      	str	r3, [sp, #8]
  4102c6:	9701      	str	r7, [sp, #4]
  4102c8:	9000      	str	r0, [sp, #0]
  4102ca:	9b05      	ldr	r3, [sp, #20]
  4102cc:	8c2a      	ldrh	r2, [r5, #32]
  4102ce:	a911      	add	r1, sp, #68	; 0x44
  4102d0:	9804      	ldr	r0, [sp, #16]
  4102d2:	4c8f      	ldr	r4, [pc, #572]	; (410510 <draw_shadow+0xbfc>)
  4102d4:	47a0      	blx	r4
                fa.y1--;
  4102d6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4102da:	3b01      	subs	r3, #1
  4102dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  4102e0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4102e4:	3b01      	subs	r3, #1
  4102e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4102ea:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  4102ec:	f109 0901 	add.w	r9, r9, #1
  4102f0:	45d9      	cmp	r9, fp
  4102f2:	da11      	bge.n	410318 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  4102f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4102f6:	4641      	mov	r1, r8
  4102f8:	9c05      	ldr	r4, [sp, #20]
  4102fa:	4620      	mov	r0, r4
  4102fc:	4b85      	ldr	r3, [pc, #532]	; (410514 <draw_shadow+0xc00>)
  4102fe:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410302:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410306:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41030a:	4620      	mov	r0, r4
  41030c:	4c82      	ldr	r4, [pc, #520]	; (410518 <draw_shadow+0xc04>)
  41030e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410310:	2801      	cmp	r0, #1
  410312:	d1d5      	bne.n	4102c0 <draw_shadow+0x9ac>
  410314:	2002      	movs	r0, #2
  410316:	e7d3      	b.n	4102c0 <draw_shadow+0x9ac>
  410318:	4654      	mov	r4, sl
  41031a:	e677      	b.n	41000c <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41031c:	9a08      	ldr	r2, [sp, #32]
  41031e:	a91e      	add	r1, sp, #120	; 0x78
  410320:	a815      	add	r0, sp, #84	; 0x54
  410322:	4b7a      	ldr	r3, [pc, #488]	; (41050c <draw_shadow+0xbf8>)
  410324:	4798      	blx	r3
  410326:	2800      	cmp	r0, #0
  410328:	f47f ae8c 	bne.w	410044 <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  41032c:	9b06      	ldr	r3, [sp, #24]
  41032e:	b14b      	cbz	r3, 410344 <draw_shadow+0xa30>
  410330:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410334:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410336:	f9b2 2000 	ldrsh.w	r2, [r2]
  41033a:	4293      	cmp	r3, r2
  41033c:	bfa8      	it	ge
  41033e:	4613      	movge	r3, r2
  410340:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  410344:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  410348:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  41034c:	b29a      	uxth	r2, r3
  41034e:	ebab 0b02 	sub.w	fp, fp, r2
  410352:	fa1f fb8b 	uxth.w	fp, fp
  410356:	f10b 0b01 	add.w	fp, fp, #1
  41035a:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  41035e:	f1bb 0f00 	cmp.w	fp, #0
  410362:	f77f ae6f 	ble.w	410044 <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410366:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  41036a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  41036e:	ebaa 0a02 	sub.w	sl, sl, r2
  410372:	fa1f fa8a 	uxth.w	sl, sl
  410376:	f10a 0a01 	add.w	sl, sl, #1
  41037a:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  41037e:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  410380:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  410384:	1a59      	subs	r1, r3, r1
  410386:	fb02 1304 	mla	r3, r2, r4, r1
  41038a:	9a07      	ldr	r2, [sp, #28]
  41038c:	18d3      	adds	r3, r2, r3
  41038e:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  410390:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410392:	aa11      	add	r2, sp, #68	; 0x44
  410394:	2308      	movs	r3, #8
    while(len) {
  410396:	b12b      	cbz	r3, 4103a4 <draw_shadow+0xa90>
        *d8 = *s8;
  410398:	f811 0b01 	ldrb.w	r0, [r1], #1
  41039c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4103a0:	3b01      	subs	r3, #1
  4103a2:	e7f8      	b.n	410396 <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  4103a4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4103a8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4103ac:	f04f 0800 	mov.w	r8, #0
  4103b0:	970c      	str	r7, [sp, #48]	; 0x30
  4103b2:	46a1      	mov	r9, r4
  4103b4:	9c06      	ldr	r4, [sp, #24]
  4103b6:	e022      	b.n	4103fe <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4103b8:	465b      	mov	r3, fp
  4103ba:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4103be:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4103c2:	9805      	ldr	r0, [sp, #20]
  4103c4:	4f54      	ldr	r7, [pc, #336]	; (410518 <draw_shadow+0xc04>)
  4103c6:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4103c8:	2801      	cmp	r0, #1
  4103ca:	d023      	beq.n	410414 <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  4103cc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4103d0:	9302      	str	r3, [sp, #8]
  4103d2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  4103d6:	9301      	str	r3, [sp, #4]
  4103d8:	9000      	str	r0, [sp, #0]
  4103da:	9b05      	ldr	r3, [sp, #20]
  4103dc:	8c2a      	ldrh	r2, [r5, #32]
  4103de:	a911      	add	r1, sp, #68	; 0x44
  4103e0:	9804      	ldr	r0, [sp, #16]
  4103e2:	4f4b      	ldr	r7, [pc, #300]	; (410510 <draw_shadow+0xbfc>)
  4103e4:	47b8      	blx	r7
                fa.y1++;
  4103e6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4103ea:	3301      	adds	r3, #1
  4103ec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4103f0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4103f4:	3301      	adds	r3, #1
  4103f6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4103fa:	f108 0801 	add.w	r8, r8, #1
  4103fe:	45d0      	cmp	r8, sl
  410400:	da0a      	bge.n	410418 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410402:	465a      	mov	r2, fp
  410404:	990a      	ldr	r1, [sp, #40]	; 0x28
  410406:	9805      	ldr	r0, [sp, #20]
  410408:	4b42      	ldr	r3, [pc, #264]	; (410514 <draw_shadow+0xc00>)
  41040a:	4798      	blx	r3
                if(simple_mode) {
  41040c:	2c00      	cmp	r4, #0
  41040e:	d0d3      	beq.n	4103b8 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410410:	2002      	movs	r0, #2
  410412:	e7db      	b.n	4103cc <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410414:	2002      	movs	r0, #2
  410416:	e7d9      	b.n	4103cc <draw_shadow+0xab8>
  410418:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41041a:	464c      	mov	r4, r9
  41041c:	e612      	b.n	410044 <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41041e:	9a08      	ldr	r2, [sp, #32]
  410420:	a91e      	add	r1, sp, #120	; 0x78
  410422:	a815      	add	r0, sp, #84	; 0x54
  410424:	4b39      	ldr	r3, [pc, #228]	; (41050c <draw_shadow+0xbf8>)
  410426:	4798      	blx	r3
  410428:	2800      	cmp	r0, #0
  41042a:	f47f ae27 	bne.w	41007c <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  41042e:	9b06      	ldr	r3, [sp, #24]
  410430:	b14b      	cbz	r3, 410446 <draw_shadow+0xb32>
  410432:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410434:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410438:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41043c:	4293      	cmp	r3, r2
  41043e:	bfa8      	it	ge
  410440:	4613      	movge	r3, r2
  410442:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410446:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41044a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  41044e:	1a9b      	subs	r3, r3, r2
  410450:	b29b      	uxth	r3, r3
  410452:	3301      	adds	r3, #1
  410454:	b21b      	sxth	r3, r3
  410456:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410458:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  41045c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410460:	b29a      	uxth	r2, r3
  410462:	ebab 0b02 	sub.w	fp, fp, r2
  410466:	fa1f fb8b 	uxth.w	fp, fp
  41046a:	f10b 0b01 	add.w	fp, fp, #1
  41046e:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  410472:	46a6      	mov	lr, r4
  410474:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  410476:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  41047a:	eba3 0808 	sub.w	r8, r3, r8
  41047e:	fb08 2804 	mla	r8, r8, r4, r2
  410482:	9b07      	ldr	r3, [sp, #28]
  410484:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410486:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410488:	aa11      	add	r2, sp, #68	; 0x44
  41048a:	2308      	movs	r3, #8
  41048c:	e004      	b.n	410498 <draw_shadow+0xb84>
        *d8 = *s8;
  41048e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410492:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410496:	3b01      	subs	r3, #1
    while(len) {
  410498:	2b00      	cmp	r3, #0
  41049a:	d1f8      	bne.n	41048e <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  41049c:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4104a0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4104a4:	f04f 0900 	mov.w	r9, #0
  4104a8:	940c      	str	r4, [sp, #48]	; 0x30
  4104aa:	960d      	str	r6, [sp, #52]	; 0x34
  4104ac:	9e06      	ldr	r6, [sp, #24]
  4104ae:	46f2      	mov	sl, lr
  4104b0:	e01e      	b.n	4104f0 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  4104b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4104b4:	9805      	ldr	r0, [sp, #20]
  4104b6:	4b19      	ldr	r3, [pc, #100]	; (41051c <draw_shadow+0xc08>)
  4104b8:	4798      	blx	r3
            if(simple_mode) {
  4104ba:	b38e      	cbz	r6, 410520 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  4104bc:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4104be:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4104c2:	9302      	str	r3, [sp, #8]
  4104c4:	23ff      	movs	r3, #255	; 0xff
  4104c6:	9301      	str	r3, [sp, #4]
  4104c8:	9000      	str	r0, [sp, #0]
  4104ca:	9b05      	ldr	r3, [sp, #20]
  4104cc:	8c2a      	ldrh	r2, [r5, #32]
  4104ce:	a911      	add	r1, sp, #68	; 0x44
  4104d0:	9804      	ldr	r0, [sp, #16]
  4104d2:	4c0f      	ldr	r4, [pc, #60]	; (410510 <draw_shadow+0xbfc>)
  4104d4:	47a0      	blx	r4
            fa.y1++;
  4104d6:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4104da:	3301      	adds	r3, #1
  4104dc:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  4104e0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4104e4:	3301      	adds	r3, #1
  4104e6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  4104ea:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  4104ec:	f109 0901 	add.w	r9, r9, #1
  4104f0:	45d9      	cmp	r9, fp
  4104f2:	da21      	bge.n	410538 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  4104f4:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  4104f8:	2fff      	cmp	r7, #255	; 0xff
  4104fa:	bf08      	it	eq
  4104fc:	29ff      	cmpeq	r1, #255	; 0xff
  4104fe:	d0d8      	beq.n	4104b2 <draw_shadow+0xb9e>
  410500:	fb01 f107 	mul.w	r1, r1, r7
  410504:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410508:	e7d3      	b.n	4104b2 <draw_shadow+0xb9e>
  41050a:	bf00      	nop
  41050c:	00414edd 	.word	0x00414edd
  410510:	0040c0d1 	.word	0x0040c0d1
  410514:	00415e45 	.word	0x00415e45
  410518:	0040f32d 	.word	0x0040f32d
  41051c:	0041610d 	.word	0x0041610d
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410522:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410526:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41052a:	9805      	ldr	r0, [sp, #20]
  41052c:	4c73      	ldr	r4, [pc, #460]	; (4106fc <draw_shadow+0xde8>)
  41052e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410530:	2801      	cmp	r0, #1
  410532:	d1c4      	bne.n	4104be <draw_shadow+0xbaa>
  410534:	2002      	movs	r0, #2
  410536:	e7c2      	b.n	4104be <draw_shadow+0xbaa>
  410538:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41053a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  41053c:	e59e      	b.n	41007c <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41053e:	9a08      	ldr	r2, [sp, #32]
  410540:	a91e      	add	r1, sp, #120	; 0x78
  410542:	a815      	add	r0, sp, #84	; 0x54
  410544:	4b6e      	ldr	r3, [pc, #440]	; (410700 <draw_shadow+0xdec>)
  410546:	4798      	blx	r3
  410548:	2800      	cmp	r0, #0
  41054a:	f47f adb3 	bne.w	4100b4 <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  41054e:	9b06      	ldr	r3, [sp, #24]
  410550:	b14b      	cbz	r3, 410566 <draw_shadow+0xc52>
  410552:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410554:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410558:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41055c:	4293      	cmp	r3, r2
  41055e:	bfb8      	it	lt
  410560:	4613      	movlt	r3, r2
  410562:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410566:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41056a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  41056e:	1a9b      	subs	r3, r3, r2
  410570:	b29b      	uxth	r3, r3
  410572:	3301      	adds	r3, #1
  410574:	b21b      	sxth	r3, r3
  410576:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410578:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41057c:	fa1f f982 	uxth.w	r9, r2
  410580:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  410584:	eba9 0903 	sub.w	r9, r9, r3
  410588:	fa1f f989 	uxth.w	r9, r9
  41058c:	f109 0901 	add.w	r9, r9, #1
  410590:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  410594:	46a2      	mov	sl, r4
  410596:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  410598:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  41059c:	1a9b      	subs	r3, r3, r2
  41059e:	fb03 1404 	mla	r4, r3, r4, r1
  4105a2:	9b07      	ldr	r3, [sp, #28]
  4105a4:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4105a6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4105a8:	aa11      	add	r2, sp, #68	; 0x44
  4105aa:	2308      	movs	r3, #8
  4105ac:	e004      	b.n	4105b8 <draw_shadow+0xca4>
        *d8 = *s8;
  4105ae:	f811 0b01 	ldrb.w	r0, [r1], #1
  4105b2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4105b6:	3b01      	subs	r3, #1
    while(len) {
  4105b8:	2b00      	cmp	r3, #0
  4105ba:	d1f8      	bne.n	4105ae <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  4105bc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4105c0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  4105c4:	f04f 0800 	mov.w	r8, #0
  4105c8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4105cc:	960a      	str	r6, [sp, #40]	; 0x28
  4105ce:	e020      	b.n	410612 <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  4105d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4105d2:	9805      	ldr	r0, [sp, #20]
  4105d4:	4b4b      	ldr	r3, [pc, #300]	; (410704 <draw_shadow+0xdf0>)
  4105d6:	4798      	blx	r3
            if(simple_mode) {
  4105d8:	f1bb 0f00 	cmp.w	fp, #0
  4105dc:	d025      	beq.n	41062a <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  4105de:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4105e0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4105e4:	9302      	str	r3, [sp, #8]
  4105e6:	23ff      	movs	r3, #255	; 0xff
  4105e8:	9301      	str	r3, [sp, #4]
  4105ea:	9000      	str	r0, [sp, #0]
  4105ec:	9b05      	ldr	r3, [sp, #20]
  4105ee:	8c2a      	ldrh	r2, [r5, #32]
  4105f0:	a911      	add	r1, sp, #68	; 0x44
  4105f2:	9804      	ldr	r0, [sp, #16]
  4105f4:	4e44      	ldr	r6, [pc, #272]	; (410708 <draw_shadow+0xdf4>)
  4105f6:	47b0      	blx	r6
            fa.y1--;
  4105f8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4105fc:	3b01      	subs	r3, #1
  4105fe:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  410602:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410606:	3b01      	subs	r3, #1
  410608:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  41060c:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  41060e:	f108 0801 	add.w	r8, r8, #1
  410612:	45c8      	cmp	r8, r9
  410614:	da15      	bge.n	410642 <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410616:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410618:	2fff      	cmp	r7, #255	; 0xff
  41061a:	bf08      	it	eq
  41061c:	29ff      	cmpeq	r1, #255	; 0xff
  41061e:	d0d7      	beq.n	4105d0 <draw_shadow+0xcbc>
  410620:	fb01 f107 	mul.w	r1, r1, r7
  410624:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410628:	e7d2      	b.n	4105d0 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41062c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410630:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410634:	9805      	ldr	r0, [sp, #20]
  410636:	4e31      	ldr	r6, [pc, #196]	; (4106fc <draw_shadow+0xde8>)
  410638:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41063a:	2801      	cmp	r0, #1
  41063c:	d1d0      	bne.n	4105e0 <draw_shadow+0xccc>
  41063e:	2002      	movs	r0, #2
  410640:	e7ce      	b.n	4105e0 <draw_shadow+0xccc>
  410642:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410644:	e536      	b.n	4100b4 <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410646:	9a08      	ldr	r2, [sp, #32]
  410648:	a91e      	add	r1, sp, #120	; 0x78
  41064a:	a815      	add	r0, sp, #84	; 0x54
  41064c:	4b2c      	ldr	r3, [pc, #176]	; (410700 <draw_shadow+0xdec>)
  41064e:	4798      	blx	r3
  410650:	2800      	cmp	r0, #0
  410652:	f47f ad4f 	bne.w	4100f4 <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410656:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  41065a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  41065e:	1af6      	subs	r6, r6, r3
  410660:	b2b6      	uxth	r6, r6
  410662:	3601      	adds	r6, #1
  410664:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410666:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  41066a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41066e:	eba8 0803 	sub.w	r8, r8, r3
  410672:	fa1f f888 	uxth.w	r8, r8
  410676:	f108 0801 	add.w	r8, r8, #1
  41067a:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  41067e:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410680:	aa11      	add	r2, sp, #68	; 0x44
  410682:	2308      	movs	r3, #8
    while(len) {
  410684:	b12b      	cbz	r3, 410692 <draw_shadow+0xd7e>
        *d8 = *s8;
  410686:	f811 0b01 	ldrb.w	r0, [r1], #1
  41068a:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41068e:	3b01      	subs	r3, #1
  410690:	e7f8      	b.n	410684 <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  410692:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410696:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  41069a:	2400      	movs	r4, #0
  41069c:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4106a0:	e016      	b.n	4106d0 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4106a2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4106a6:	9302      	str	r3, [sp, #8]
  4106a8:	23ff      	movs	r3, #255	; 0xff
  4106aa:	9301      	str	r3, [sp, #4]
  4106ac:	9000      	str	r0, [sp, #0]
  4106ae:	464b      	mov	r3, r9
  4106b0:	8c2a      	ldrh	r2, [r5, #32]
  4106b2:	a911      	add	r1, sp, #68	; 0x44
  4106b4:	9804      	ldr	r0, [sp, #16]
  4106b6:	4f14      	ldr	r7, [pc, #80]	; (410708 <draw_shadow+0xdf4>)
  4106b8:	47b8      	blx	r7
            fa.y1++;
  4106ba:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4106be:	3301      	adds	r3, #1
  4106c0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  4106c4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4106c8:	3301      	adds	r3, #1
  4106ca:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4106ce:	3401      	adds	r4, #1
  4106d0:	4544      	cmp	r4, r8
  4106d2:	f6bf ad0f 	bge.w	4100f4 <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  4106d6:	4632      	mov	r2, r6
  4106d8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  4106dc:	4648      	mov	r0, r9
  4106de:	4b09      	ldr	r3, [pc, #36]	; (410704 <draw_shadow+0xdf0>)
  4106e0:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4106e2:	4633      	mov	r3, r6
  4106e4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4106e8:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4106ec:	4648      	mov	r0, r9
  4106ee:	4f03      	ldr	r7, [pc, #12]	; (4106fc <draw_shadow+0xde8>)
  4106f0:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4106f2:	2801      	cmp	r0, #1
  4106f4:	d1d5      	bne.n	4106a2 <draw_shadow+0xd8e>
  4106f6:	2002      	movs	r0, #2
  4106f8:	e7d3      	b.n	4106a2 <draw_shadow+0xd8e>
  4106fa:	bf00      	nop
  4106fc:	0040f32d 	.word	0x0040f32d
  410700:	00414edd 	.word	0x00414edd
  410704:	0041610d 	.word	0x0041610d
  410708:	0040c0d1 	.word	0x0040c0d1

0041070c <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  41070c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410710:	b0a5      	sub	sp, #148	; 0x94
  410712:	4683      	mov	fp, r0
  410714:	460c      	mov	r4, r1
  410716:	9205      	str	r2, [sp, #20]
  410718:	461e      	mov	r6, r3
  41071a:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  41071e:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  410722:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  410726:	4baa      	ldr	r3, [pc, #680]	; (4109d0 <draw_full_border+0x2c4>)
  410728:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  41072a:	2800      	cmp	r0, #0
  41072c:	d13d      	bne.n	4107aa <draw_full_border+0x9e>
    bool simple_mode = true;
  41072e:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410732:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  410736:	f8bb 2000 	ldrh.w	r2, [fp]
  41073a:	1a8a      	subs	r2, r1, r2
  41073c:	b292      	uxth	r2, r2
  41073e:	3201      	adds	r2, #1
  410740:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410742:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  410746:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  41074a:	1ac0      	subs	r0, r0, r3
  41074c:	b280      	uxth	r0, r0
  41074e:	3001      	adds	r0, #1
  410750:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  410752:	88a3      	ldrh	r3, [r4, #4]
  410754:	1a59      	subs	r1, r3, r1
  410756:	b289      	uxth	r1, r1
  410758:	910c      	str	r1, [sp, #48]	; 0x30
  41075a:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41075e:	8821      	ldrh	r1, [r4, #0]
  410760:	1a5b      	subs	r3, r3, r1
  410762:	b29b      	uxth	r3, r3
  410764:	3301      	adds	r3, #1
  410766:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410768:	88e1      	ldrh	r1, [r4, #6]
  41076a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  41076e:	eba1 010e 	sub.w	r1, r1, lr
  410772:	b289      	uxth	r1, r1
  410774:	3101      	adds	r1, #1
  410776:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  410778:	b1d5      	cbz	r5, 4107b0 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  41077a:	4282      	cmp	r2, r0
  41077c:	bfa8      	it	ge
  41077e:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  410780:	1055      	asrs	r5, r2, #1
  410782:	42ae      	cmp	r6, r5
  410784:	dc00      	bgt.n	410788 <draw_full_border+0x7c>
        rin = radius;
  410786:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  410788:	eb05 0309 	add.w	r3, r5, r9
  41078c:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41078e:	4b91      	ldr	r3, [pc, #580]	; (4109d4 <draw_full_border+0x2c8>)
  410790:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410792:	4b91      	ldr	r3, [pc, #580]	; (4109d8 <draw_full_border+0x2cc>)
  410794:	4798      	blx	r3
  410796:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  410798:	9a05      	ldr	r2, [sp, #20]
  41079a:	4621      	mov	r1, r4
  41079c:	a822      	add	r0, sp, #136	; 0x88
  41079e:	4b8f      	ldr	r3, [pc, #572]	; (4109dc <draw_full_border+0x2d0>)
  4107a0:	4798      	blx	r3
    if(is_common == false) return;
  4107a2:	b998      	cbnz	r0, 4107cc <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  4107a4:	b025      	add	sp, #148	; 0x94
  4107a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  4107aa:	f04f 0a00 	mov.w	sl, #0
  4107ae:	e7c0      	b.n	410732 <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  4107b0:	4299      	cmp	r1, r3
  4107b2:	bfa8      	it	ge
  4107b4:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  4107b6:	104b      	asrs	r3, r1, #1
  4107b8:	9306      	str	r3, [sp, #24]
  4107ba:	429e      	cmp	r6, r3
  4107bc:	dc00      	bgt.n	4107c0 <draw_full_border+0xb4>
        rout = radius;
  4107be:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  4107c0:	9b06      	ldr	r3, [sp, #24]
  4107c2:	ebb3 0509 	subs.w	r5, r3, r9
  4107c6:	d5e2      	bpl.n	41078e <draw_full_border+0x82>
  4107c8:	2500      	movs	r5, #0
  4107ca:	e7e0      	b.n	41078e <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  4107cc:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  4107d0:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4107d4:	eba3 030e 	sub.w	r3, r3, lr
  4107d8:	b29a      	uxth	r2, r3
  4107da:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  4107de:	8a70      	ldrh	r0, [r6, #18]
  4107e0:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  4107e4:	1a09      	subs	r1, r1, r0
  4107e6:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  4107ea:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4107ee:	eba3 030e 	sub.w	r3, r3, lr
  4107f2:	b29b      	uxth	r3, r3
  4107f4:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  4107f8:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  4107fc:	1a09      	subs	r1, r1, r0
  4107fe:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410802:	1a9b      	subs	r3, r3, r2
  410804:	b29b      	uxth	r3, r3
  410806:	3301      	adds	r3, #1
  410808:	b21b      	sxth	r3, r3
  41080a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  41080c:	2301      	movs	r3, #1
  41080e:	b22a      	sxth	r2, r5
  410810:	4659      	mov	r1, fp
  410812:	a81b      	add	r0, sp, #108	; 0x6c
  410814:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 4109f4 <draw_full_border+0x2e8>
  410818:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  41081a:	2100      	movs	r1, #0
  41081c:	a81b      	add	r0, sp, #108	; 0x6c
  41081e:	4d70      	ldr	r5, [pc, #448]	; (4109e0 <draw_full_border+0x2d4>)
  410820:	47a8      	blx	r5
  410822:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  410824:	2300      	movs	r3, #0
  410826:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  41082a:	4621      	mov	r1, r4
  41082c:	a814      	add	r0, sp, #80	; 0x50
  41082e:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410830:	2100      	movs	r1, #0
  410832:	a814      	add	r0, sp, #80	; 0x50
  410834:	47a8      	blx	r5
  410836:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410838:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41083a:	9308      	str	r3, [sp, #32]
  41083c:	4618      	mov	r0, r3
  41083e:	4b69      	ldr	r3, [pc, #420]	; (4109e4 <draw_full_border+0x2d8>)
  410840:	4798      	blx	r3
  410842:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  410844:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410848:	f109 39ff 	add.w	r9, r9, #4294967295
  41084c:	464b      	mov	r3, r9
  41084e:	9a06      	ldr	r2, [sp, #24]
  410850:	4591      	cmp	r9, r2
  410852:	bfb8      	it	lt
  410854:	4613      	movlt	r3, r2
  410856:	4619      	mov	r1, r3
  410858:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  41085a:	f1ba 0f00 	cmp.w	sl, #0
  41085e:	f000 8197 	beq.w	410b90 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  410862:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  410866:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  41086a:	1ad2      	subs	r2, r2, r3
  41086c:	188a      	adds	r2, r1, r2
  41086e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  410870:	f9b4 2000 	ldrsh.w	r2, [r4]
  410874:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410878:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  41087c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410880:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  410884:	fa1f f289 	uxth.w	r2, r9
  410888:	fa12 f383 	uxtah	r3, r2, r3
  41088c:	b21b      	sxth	r3, r3
  41088e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410892:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410896:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410898:	e02c      	b.n	4108f4 <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  41089a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41089e:	b29a      	uxth	r2, r3
  4108a0:	1b55      	subs	r5, r2, r5
  4108a2:	b2ad      	uxth	r5, r5
  4108a4:	3501      	adds	r5, #1
  4108a6:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  4108aa:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  4108ae:	9a06      	ldr	r2, [sp, #24]
  4108b0:	1a9b      	subs	r3, r3, r2
  4108b2:	3301      	adds	r3, #1
  4108b4:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  4108b8:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4108bc:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  4108be:	1a9b      	subs	r3, r3, r2
  4108c0:	d46c      	bmi.n	41099c <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  4108c2:	f8cd 8008 	str.w	r8, [sp, #8]
  4108c6:	f8cd a004 	str.w	sl, [sp, #4]
  4108ca:	9700      	str	r7, [sp, #0]
  4108cc:	9a07      	ldr	r2, [sp, #28]
  4108ce:	4413      	add	r3, r2
  4108d0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  4108d4:	a910      	add	r1, sp, #64	; 0x40
  4108d6:	9805      	ldr	r0, [sp, #20]
  4108d8:	4d43      	ldr	r5, [pc, #268]	; (4109e8 <draw_full_border+0x2dc>)
  4108da:	47a8      	blx	r5
            fill_area.y1++;
  4108dc:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4108e0:	3301      	adds	r3, #1
  4108e2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  4108e6:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  4108ea:	3301      	adds	r3, #1
  4108ec:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  4108f0:	f109 0901 	add.w	r9, r9, #1
  4108f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4108f6:	4599      	cmp	r9, r3
  4108f8:	dc52      	bgt.n	4109a0 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  4108fa:	9908      	ldr	r1, [sp, #32]
  4108fc:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410900:	4658      	mov	r0, fp
  410902:	4b3a      	ldr	r3, [pc, #232]	; (4109ec <draw_full_border+0x2e0>)
  410904:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410906:	8a31      	ldrh	r1, [r6, #16]
  410908:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  41090c:	4419      	add	r1, r3
  41090e:	8a72      	ldrh	r2, [r6, #18]
  410910:	444a      	add	r2, r9
  410912:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410914:	b212      	sxth	r2, r2
  410916:	b209      	sxth	r1, r1
  410918:	4658      	mov	r0, fp
  41091a:	4d35      	ldr	r5, [pc, #212]	; (4109f0 <draw_full_border+0x2e4>)
  41091c:	47a8      	blx	r5
  41091e:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  410920:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410924:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410928:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  41092c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  410930:	f9b4 3000 	ldrsh.w	r3, [r4]
  410934:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410938:	8823      	ldrh	r3, [r4, #0]
  41093a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  41093e:	442b      	add	r3, r5
  410940:	b29b      	uxth	r3, r3
  410942:	3b01      	subs	r3, #1
  410944:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410948:	f8cd 8008 	str.w	r8, [sp, #8]
  41094c:	f8cd a004 	str.w	sl, [sp, #4]
  410950:	9000      	str	r0, [sp, #0]
  410952:	465b      	mov	r3, fp
  410954:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410958:	a910      	add	r1, sp, #64	; 0x40
  41095a:	9805      	ldr	r0, [sp, #20]
  41095c:	f8df b088 	ldr.w	fp, [pc, #136]	; 4109e8 <draw_full_border+0x2dc>
  410960:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  410962:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410966:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  41096a:	990a      	ldr	r1, [sp, #40]	; 0x28
  41096c:	440b      	add	r3, r1
  41096e:	429a      	cmp	r2, r3
  410970:	da93      	bge.n	41089a <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  410972:	8823      	ldrh	r3, [r4, #0]
  410974:	442b      	add	r3, r5
  410976:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  41097a:	88a3      	ldrh	r3, [r4, #4]
  41097c:	1b5b      	subs	r3, r3, r5
  41097e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410982:	f8cd 8008 	str.w	r8, [sp, #8]
  410986:	f8cd a004 	str.w	sl, [sp, #4]
  41098a:	2301      	movs	r3, #1
  41098c:	9300      	str	r3, [sp, #0]
  41098e:	2300      	movs	r3, #0
  410990:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410994:	a910      	add	r1, sp, #64	; 0x40
  410996:	9805      	ldr	r0, [sp, #20]
  410998:	47d8      	blx	fp
  41099a:	e77e      	b.n	41089a <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  41099c:	2300      	movs	r3, #0
  41099e:	e790      	b.n	4108c2 <draw_full_border+0x1b6>
  4109a0:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  4109a2:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  4109a6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4109aa:	eba9 0903 	sub.w	r9, r9, r3
  4109ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4109b0:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  4109b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4109b6:	4549      	cmp	r1, r9
  4109b8:	db01      	blt.n	4109be <draw_full_border+0x2b2>
  4109ba:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  4109be:	fa19 f383 	uxtah	r3, r9, r3
  4109c2:	b21b      	sxth	r3, r3
  4109c4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  4109c8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  4109cc:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  4109ce:	e040      	b.n	410a52 <draw_full_border+0x346>
  4109d0:	0040f3f5 	.word	0x0040f3f5
  4109d4:	00409055 	.word	0x00409055
  4109d8:	00414505 	.word	0x00414505
  4109dc:	00414c69 	.word	0x00414c69
  4109e0:	0040f2f9 	.word	0x0040f2f9
  4109e4:	00415fdd 	.word	0x00415fdd
  4109e8:	0040c0d1 	.word	0x0040c0d1
  4109ec:	004161c1 	.word	0x004161c1
  4109f0:	0040f32d 	.word	0x0040f32d
  4109f4:	0040f575 	.word	0x0040f575
            fill_area2.x1 = area_outer->x2 - rout + 1;
  4109f8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4109fc:	b29a      	uxth	r2, r3
  4109fe:	1b55      	subs	r5, r2, r5
  410a00:	b2ad      	uxth	r5, r5
  410a02:	3501      	adds	r5, #1
  410a04:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410a08:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410a0c:	9a06      	ldr	r2, [sp, #24]
  410a0e:	1a9b      	subs	r3, r3, r2
  410a10:	3301      	adds	r3, #1
  410a12:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  410a16:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410a1a:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410a1c:	1a9b      	subs	r3, r3, r2
  410a1e:	d46d      	bmi.n	410afc <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410a20:	f8cd 8008 	str.w	r8, [sp, #8]
  410a24:	f8cd a004 	str.w	sl, [sp, #4]
  410a28:	9700      	str	r7, [sp, #0]
  410a2a:	9a07      	ldr	r2, [sp, #28]
  410a2c:	4413      	add	r3, r2
  410a2e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410a32:	a910      	add	r1, sp, #64	; 0x40
  410a34:	9805      	ldr	r0, [sp, #20]
  410a36:	4d79      	ldr	r5, [pc, #484]	; (410c1c <draw_full_border+0x510>)
  410a38:	47a8      	blx	r5
            fill_area.y1++;
  410a3a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410a3e:	3301      	adds	r3, #1
  410a40:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410a44:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410a48:	3301      	adds	r3, #1
  410a4a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410a4e:	f109 0901 	add.w	r9, r9, #1
  410a52:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  410a56:	4599      	cmp	r9, r3
  410a58:	dc52      	bgt.n	410b00 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  410a5a:	9908      	ldr	r1, [sp, #32]
  410a5c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410a60:	4658      	mov	r0, fp
  410a62:	4b6f      	ldr	r3, [pc, #444]	; (410c20 <draw_full_border+0x514>)
  410a64:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410a66:	8a31      	ldrh	r1, [r6, #16]
  410a68:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410a6c:	4419      	add	r1, r3
  410a6e:	8a72      	ldrh	r2, [r6, #18]
  410a70:	444a      	add	r2, r9
  410a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410a74:	b212      	sxth	r2, r2
  410a76:	b209      	sxth	r1, r1
  410a78:	4658      	mov	r0, fp
  410a7a:	4d6a      	ldr	r5, [pc, #424]	; (410c24 <draw_full_border+0x518>)
  410a7c:	47a8      	blx	r5
  410a7e:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  410a80:	f9b4 3000 	ldrsh.w	r3, [r4]
  410a84:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410a88:	8823      	ldrh	r3, [r4, #0]
  410a8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410a8e:	442b      	add	r3, r5
  410a90:	b29b      	uxth	r3, r3
  410a92:	3b01      	subs	r3, #1
  410a94:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  410a98:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410a9c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410aa0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410aa4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410aa8:	f8cd 8008 	str.w	r8, [sp, #8]
  410aac:	f8cd a004 	str.w	sl, [sp, #4]
  410ab0:	9000      	str	r0, [sp, #0]
  410ab2:	465b      	mov	r3, fp
  410ab4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410ab8:	a910      	add	r1, sp, #64	; 0x40
  410aba:	9805      	ldr	r0, [sp, #20]
  410abc:	f8df b15c 	ldr.w	fp, [pc, #348]	; 410c1c <draw_full_border+0x510>
  410ac0:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  410ac2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410ac6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  410aca:	990a      	ldr	r1, [sp, #40]	; 0x28
  410acc:	1a5b      	subs	r3, r3, r1
  410ace:	429a      	cmp	r2, r3
  410ad0:	dd92      	ble.n	4109f8 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  410ad2:	8823      	ldrh	r3, [r4, #0]
  410ad4:	442b      	add	r3, r5
  410ad6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410ada:	88a3      	ldrh	r3, [r4, #4]
  410adc:	1b5b      	subs	r3, r3, r5
  410ade:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410ae2:	f8cd 8008 	str.w	r8, [sp, #8]
  410ae6:	f8cd a004 	str.w	sl, [sp, #4]
  410aea:	2301      	movs	r3, #1
  410aec:	9300      	str	r3, [sp, #0]
  410aee:	2300      	movs	r3, #0
  410af0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410af4:	a910      	add	r1, sp, #64	; 0x40
  410af6:	9805      	ldr	r0, [sp, #20]
  410af8:	47d8      	blx	fp
  410afa:	e77d      	b.n	4109f8 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  410afc:	2300      	movs	r3, #0
  410afe:	e78f      	b.n	410a20 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  410b00:	8863      	ldrh	r3, [r4, #2]
  410b02:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  410b06:	444b      	add	r3, r9
  410b08:	b29b      	uxth	r3, r3
  410b0a:	3301      	adds	r3, #1
  410b0c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  410b10:	88e3      	ldrh	r3, [r4, #6]
  410b12:	eba3 0309 	sub.w	r3, r3, r9
  410b16:	b29b      	uxth	r3, r3
  410b18:	3b01      	subs	r3, #1
  410b1a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  410b1e:	f9b4 3000 	ldrsh.w	r3, [r4]
  410b22:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  410b26:	8823      	ldrh	r3, [r4, #0]
  410b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410b2a:	4413      	add	r3, r2
  410b2c:	b29b      	uxth	r3, r3
  410b2e:	3b01      	subs	r3, #1
  410b30:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410b34:	f8cd 8008 	str.w	r8, [sp, #8]
  410b38:	f8cd a004 	str.w	sl, [sp, #4]
  410b3c:	2601      	movs	r6, #1
  410b3e:	9600      	str	r6, [sp, #0]
  410b40:	2300      	movs	r3, #0
  410b42:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410b46:	a912      	add	r1, sp, #72	; 0x48
  410b48:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410b4c:	4648      	mov	r0, r9
  410b4e:	4d33      	ldr	r5, [pc, #204]	; (410c1c <draw_full_border+0x510>)
  410b50:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  410b52:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  410b56:	b293      	uxth	r3, r2
  410b58:	990c      	ldr	r1, [sp, #48]	; 0x30
  410b5a:	1a5b      	subs	r3, r3, r1
  410b5c:	b29b      	uxth	r3, r3
  410b5e:	4433      	add	r3, r6
  410b60:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410b64:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410b68:	f8cd 8008 	str.w	r8, [sp, #8]
  410b6c:	f8cd a004 	str.w	sl, [sp, #4]
  410b70:	9600      	str	r6, [sp, #0]
  410b72:	2300      	movs	r3, #0
  410b74:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410b78:	a912      	add	r1, sp, #72	; 0x48
  410b7a:	4648      	mov	r0, r9
  410b7c:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  410b7e:	980d      	ldr	r0, [sp, #52]	; 0x34
  410b80:	4c29      	ldr	r4, [pc, #164]	; (410c28 <draw_full_border+0x51c>)
  410b82:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  410b84:	980e      	ldr	r0, [sp, #56]	; 0x38
  410b86:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  410b88:	9807      	ldr	r0, [sp, #28]
  410b8a:	4b28      	ldr	r3, [pc, #160]	; (410c2c <draw_full_border+0x520>)
  410b8c:	4798      	blx	r3
  410b8e:	e609      	b.n	4107a4 <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  410b90:	f9b4 3000 	ldrsh.w	r3, [r4]
  410b94:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410b98:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410b9c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410ba0:	8a73      	ldrh	r3, [r6, #18]
  410ba2:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  410ba6:	fa13 f384 	uxtah	r3, r3, r4
  410baa:	b21b      	sxth	r3, r3
  410bac:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410bb0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410bb4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410bb8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  410bbc:	f8dd a014 	ldr.w	sl, [sp, #20]
  410bc0:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410bc2:	e025      	b.n	410c10 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  410bc4:	9908      	ldr	r1, [sp, #32]
  410bc6:	4658      	mov	r0, fp
  410bc8:	4b15      	ldr	r3, [pc, #84]	; (410c20 <draw_full_border+0x514>)
  410bca:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410bcc:	8a31      	ldrh	r1, [r6, #16]
  410bce:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410bd2:	4419      	add	r1, r3
  410bd4:	8a72      	ldrh	r2, [r6, #18]
  410bd6:	4422      	add	r2, r4
  410bd8:	464b      	mov	r3, r9
  410bda:	b212      	sxth	r2, r2
  410bdc:	b209      	sxth	r1, r1
  410bde:	4658      	mov	r0, fp
  410be0:	4f10      	ldr	r7, [pc, #64]	; (410c24 <draw_full_border+0x518>)
  410be2:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  410be4:	f8cd 8008 	str.w	r8, [sp, #8]
  410be8:	9501      	str	r5, [sp, #4]
  410bea:	9000      	str	r0, [sp, #0]
  410bec:	465b      	mov	r3, fp
  410bee:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410bf2:	a912      	add	r1, sp, #72	; 0x48
  410bf4:	4650      	mov	r0, sl
  410bf6:	4f09      	ldr	r7, [pc, #36]	; (410c1c <draw_full_border+0x510>)
  410bf8:	47b8      	blx	r7
            fill_area.y1++;
  410bfa:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410bfe:	3301      	adds	r3, #1
  410c00:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410c04:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410c08:	3301      	adds	r3, #1
  410c0a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410c0e:	3401      	adds	r4, #1
  410c10:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  410c14:	429c      	cmp	r4, r3
  410c16:	ddd5      	ble.n	410bc4 <draw_full_border+0x4b8>
  410c18:	e7b1      	b.n	410b7e <draw_full_border+0x472>
  410c1a:	bf00      	nop
  410c1c:	0040c0d1 	.word	0x0040c0d1
  410c20:	004161c1 	.word	0x004161c1
  410c24:	0040f32d 	.word	0x0040f32d
  410c28:	0040f37d 	.word	0x0040f37d
  410c2c:	00415d8d 	.word	0x00415d8d

00410c30 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  410c30:	7f93      	ldrb	r3, [r2, #30]
  410c32:	2b02      	cmp	r3, #2
  410c34:	d957      	bls.n	410ce6 <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  410c36:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  410c3a:	2b00      	cmp	r3, #0
  410c3c:	d053      	beq.n	410ce6 <draw_outline+0xb6>
{
  410c3e:	b530      	push	{r4, r5, lr}
  410c40:	b089      	sub	sp, #36	; 0x24
  410c42:	ac06      	add	r4, sp, #24
  410c44:	2308      	movs	r3, #8
  410c46:	e004      	b.n	410c52 <draw_outline+0x22>
        *d8 = *s8;
  410c48:	f810 5b01 	ldrb.w	r5, [r0], #1
  410c4c:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  410c50:	3b01      	subs	r3, #1
    while(len) {
  410c52:	2b00      	cmp	r3, #0
  410c54:	d1f8      	bne.n	410c48 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  410c56:	8b93      	ldrh	r3, [r2, #28]
  410c58:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  410c5c:	1ac0      	subs	r0, r0, r3
  410c5e:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  410c62:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  410c66:	1ac0      	subs	r0, r0, r3
  410c68:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  410c6c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  410c70:	4418      	add	r0, r3
  410c72:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  410c76:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  410c7a:	4403      	add	r3, r0
  410c7c:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  410c80:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  410c82:	a804      	add	r0, sp, #16
  410c84:	2308      	movs	r3, #8
  410c86:	e004      	b.n	410c92 <draw_outline+0x62>
        *d8 = *s8;
  410c88:	f814 5b01 	ldrb.w	r5, [r4], #1
  410c8c:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  410c90:	3b01      	subs	r3, #1
    while(len) {
  410c92:	2b00      	cmp	r3, #0
  410c94:	d1f8      	bne.n	410c88 <draw_outline+0x58>
  410c96:	4610      	mov	r0, r2
  410c98:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  410c9a:	8b43      	ldrh	r3, [r0, #26]
  410c9c:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  410ca0:	1ae4      	subs	r4, r4, r3
  410ca2:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  410ca6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  410caa:	441c      	add	r4, r3
  410cac:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  410cb0:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  410cb4:	1ae4      	subs	r4, r4, r3
  410cb6:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  410cba:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  410cbe:	440b      	add	r3, r1
  410cc0:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  410cc4:	f9b0 3000 	ldrsh.w	r3, [r0]
  410cc8:	7fc1      	ldrb	r1, [r0, #31]
  410cca:	9103      	str	r1, [sp, #12]
  410ccc:	7f81      	ldrb	r1, [r0, #30]
  410cce:	9102      	str	r1, [sp, #8]
  410cd0:	8b01      	ldrh	r1, [r0, #24]
  410cd2:	f8ad 1004 	strh.w	r1, [sp, #4]
  410cd6:	2101      	movs	r1, #1
  410cd8:	9100      	str	r1, [sp, #0]
  410cda:	a904      	add	r1, sp, #16
  410cdc:	a806      	add	r0, sp, #24
  410cde:	4c02      	ldr	r4, [pc, #8]	; (410ce8 <draw_outline+0xb8>)
  410ce0:	47a0      	blx	r4
}
  410ce2:	b009      	add	sp, #36	; 0x24
  410ce4:	bd30      	pop	{r4, r5, pc}
  410ce6:	4770      	bx	lr
  410ce8:	0041070d 	.word	0x0041070d

00410cec <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  410cec:	7d13      	ldrb	r3, [r2, #20]
  410cee:	2b02      	cmp	r3, #2
  410cf0:	f240 8197 	bls.w	411022 <draw_border+0x336>
    if(dsc->border_width == 0) return;
  410cf4:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  410cf8:	2b00      	cmp	r3, #0
  410cfa:	f000 8192 	beq.w	411022 <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  410cfe:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  410d02:	2b00      	cmp	r3, #0
  410d04:	f000 818d 	beq.w	411022 <draw_border+0x336>
    if(dsc->border_post) return;
  410d08:	7d93      	ldrb	r3, [r2, #22]
  410d0a:	f013 0f01 	tst.w	r3, #1
  410d0e:	f040 8188 	bne.w	411022 <draw_border+0x336>
{
  410d12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410d16:	b0a3      	sub	sp, #140	; 0x8c
  410d18:	8885      	ldrh	r5, [r0, #4]
  410d1a:	8803      	ldrh	r3, [r0, #0]
  410d1c:	1aed      	subs	r5, r5, r3
  410d1e:	b2ad      	uxth	r5, r5
  410d20:	3501      	adds	r5, #1
  410d22:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410d24:	88c3      	ldrh	r3, [r0, #6]
  410d26:	8844      	ldrh	r4, [r0, #2]
  410d28:	1b1b      	subs	r3, r3, r4
  410d2a:	b29b      	uxth	r3, r3
  410d2c:	3301      	adds	r3, #1
  410d2e:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  410d30:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  410d34:	429d      	cmp	r5, r3
  410d36:	bfa8      	it	ge
  410d38:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  410d3a:	106d      	asrs	r5, r5, #1
  410d3c:	42ac      	cmp	r4, r5
  410d3e:	dc00      	bgt.n	410d42 <draw_border+0x56>
    int32_t rout = dsc->radius;
  410d40:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  410d42:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  410d44:	ac20      	add	r4, sp, #128	; 0x80
  410d46:	2308      	movs	r3, #8
  410d48:	e004      	b.n	410d54 <draw_border+0x68>
        *d8 = *s8;
  410d4a:	f816 7b01 	ldrb.w	r7, [r6], #1
  410d4e:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  410d52:	3b01      	subs	r3, #1
    while(len) {
  410d54:	2b00      	cmp	r3, #0
  410d56:	d1f8      	bne.n	410d4a <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410d58:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  410d5c:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  410d60:	b2b4      	uxth	r4, r6
  410d62:	f014 0f04 	tst.w	r4, #4
  410d66:	d039      	beq.n	410ddc <draw_border+0xf0>
  410d68:	8a13      	ldrh	r3, [r2, #16]
  410d6a:	443b      	add	r3, r7
  410d6c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  410d70:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  410d74:	f014 0f08 	tst.w	r4, #8
  410d78:	d036      	beq.n	410de8 <draw_border+0xfc>
  410d7a:	8a13      	ldrh	r3, [r2, #16]
  410d7c:	1afb      	subs	r3, r7, r3
  410d7e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  410d82:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  410d86:	f014 0f02 	tst.w	r4, #2
  410d8a:	d033      	beq.n	410df4 <draw_border+0x108>
  410d8c:	8a13      	ldrh	r3, [r2, #16]
  410d8e:	443b      	add	r3, r7
  410d90:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  410d94:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  410d98:	f014 0f01 	tst.w	r4, #1
  410d9c:	d030      	beq.n	410e00 <draw_border+0x114>
  410d9e:	8a13      	ldrh	r3, [r2, #16]
  410da0:	4692      	mov	sl, r2
  410da2:	9105      	str	r1, [sp, #20]
  410da4:	4604      	mov	r4, r0
  410da6:	1afb      	subs	r3, r7, r3
  410da8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  410dac:	2e0f      	cmp	r6, #15
  410dae:	d02d      	beq.n	410e0c <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  410db0:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  410db4:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  410db8:	d901      	bls.n	410dbe <draw_border+0xd2>
  410dba:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  410dbe:	4b99      	ldr	r3, [pc, #612]	; (411024 <draw_border+0x338>)
  410dc0:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410dc2:	4b99      	ldr	r3, [pc, #612]	; (411028 <draw_border+0x33c>)
  410dc4:	4798      	blx	r3
  410dc6:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  410dc8:	9a05      	ldr	r2, [sp, #20]
  410dca:	4621      	mov	r1, r4
  410dcc:	a80e      	add	r0, sp, #56	; 0x38
  410dce:	4b97      	ldr	r3, [pc, #604]	; (41102c <draw_border+0x340>)
  410dd0:	4798      	blx	r3
        if(is_common == false) return;
  410dd2:	2800      	cmp	r0, #0
  410dd4:	d12d      	bne.n	410e32 <draw_border+0x146>
}
  410dd6:	b023      	add	sp, #140	; 0x8c
  410dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410ddc:	8a13      	ldrh	r3, [r2, #16]
  410dde:	442b      	add	r3, r5
  410de0:	b29b      	uxth	r3, r3
  410de2:	425b      	negs	r3, r3
  410de4:	b29b      	uxth	r3, r3
  410de6:	e7c0      	b.n	410d6a <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  410de8:	8a13      	ldrh	r3, [r2, #16]
  410dea:	442b      	add	r3, r5
  410dec:	b29b      	uxth	r3, r3
  410dee:	425b      	negs	r3, r3
  410df0:	b29b      	uxth	r3, r3
  410df2:	e7c3      	b.n	410d7c <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  410df4:	8a13      	ldrh	r3, [r2, #16]
  410df6:	442b      	add	r3, r5
  410df8:	b29b      	uxth	r3, r3
  410dfa:	425b      	negs	r3, r3
  410dfc:	b29b      	uxth	r3, r3
  410dfe:	e7c6      	b.n	410d8e <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  410e00:	8a13      	ldrh	r3, [r2, #16]
  410e02:	442b      	add	r3, r5
  410e04:	b29b      	uxth	r3, r3
  410e06:	425b      	negs	r3, r3
  410e08:	b29b      	uxth	r3, r3
  410e0a:	e7c9      	b.n	410da0 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  410e0c:	f9b2 3000 	ldrsh.w	r3, [r2]
  410e10:	7d52      	ldrb	r2, [r2, #21]
  410e12:	9203      	str	r2, [sp, #12]
  410e14:	f89a 2014 	ldrb.w	r2, [sl, #20]
  410e18:	9202      	str	r2, [sp, #8]
  410e1a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  410e1e:	f8ad 2004 	strh.w	r2, [sp, #4]
  410e22:	2200      	movs	r2, #0
  410e24:	9200      	str	r2, [sp, #0]
  410e26:	460a      	mov	r2, r1
  410e28:	4601      	mov	r1, r0
  410e2a:	a820      	add	r0, sp, #128	; 0x80
  410e2c:	4c80      	ldr	r4, [pc, #512]	; (411030 <draw_border+0x344>)
  410e2e:	47a0      	blx	r4
  410e30:	e7d1      	b.n	410dd6 <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  410e32:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  410e36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  410e3a:	1a5b      	subs	r3, r3, r1
  410e3c:	b29a      	uxth	r2, r3
  410e3e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  410e42:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  410e46:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  410e4a:	1a1b      	subs	r3, r3, r0
  410e4c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  410e50:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  410e54:	1a5b      	subs	r3, r3, r1
  410e56:	b29b      	uxth	r3, r3
  410e58:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  410e5c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  410e60:	1a09      	subs	r1, r1, r0
  410e62:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410e66:	1a9b      	subs	r3, r3, r2
  410e68:	b29b      	uxth	r3, r3
  410e6a:	3301      	adds	r3, #1
  410e6c:	b21b      	sxth	r3, r3
  410e6e:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410e70:	9306      	str	r3, [sp, #24]
  410e72:	4618      	mov	r0, r3
  410e74:	4b6f      	ldr	r3, [pc, #444]	; (411034 <draw_border+0x348>)
  410e76:	4798      	blx	r3
  410e78:	4607      	mov	r7, r0
        if(rout > 0) {
  410e7a:	2d00      	cmp	r5, #0
  410e7c:	dd53      	ble.n	410f26 <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  410e7e:	2300      	movs	r3, #0
  410e80:	462a      	mov	r2, r5
  410e82:	4621      	mov	r1, r4
  410e84:	a812      	add	r0, sp, #72	; 0x48
  410e86:	4e6c      	ldr	r6, [pc, #432]	; (411038 <draw_border+0x34c>)
  410e88:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410e8a:	2100      	movs	r1, #0
  410e8c:	a812      	add	r0, sp, #72	; 0x48
  410e8e:	4b6b      	ldr	r3, [pc, #428]	; (41103c <draw_border+0x350>)
  410e90:	4798      	blx	r3
  410e92:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  410e94:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  410e98:	1aaa      	subs	r2, r5, r2
  410e9a:	2301      	movs	r3, #1
  410e9c:	b212      	sxth	r2, r2
  410e9e:	a920      	add	r1, sp, #128	; 0x80
  410ea0:	a819      	add	r0, sp, #100	; 0x64
  410ea2:	4e65      	ldr	r6, [pc, #404]	; (411038 <draw_border+0x34c>)
  410ea4:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  410ea6:	2100      	movs	r1, #0
  410ea8:	a819      	add	r0, sp, #100	; 0x64
  410eaa:	4b64      	ldr	r3, [pc, #400]	; (41103c <draw_border+0x350>)
  410eac:	4798      	blx	r3
  410eae:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  410eb0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  410eb4:	3b01      	subs	r3, #1
  410eb6:	429d      	cmp	r5, r3
  410eb8:	bfb8      	it	lt
  410eba:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  410ebc:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  410ec0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  410ec4:	f89a 3015 	ldrb.w	r3, [sl, #21]
  410ec8:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  410eca:	f9b4 3000 	ldrsh.w	r3, [r4]
  410ece:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  410ed2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410ed6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410eda:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  410ede:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  410ee2:	fa13 f386 	uxtah	r3, r3, r6
  410ee6:	b21b      	sxth	r3, r3
  410ee8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  410eec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  410ef0:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  410ef4:	2b04      	cmp	r3, #4
  410ef6:	d01a      	beq.n	410f2e <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  410ef8:	2b08      	cmp	r3, #8
  410efa:	d01f      	beq.n	410f3c <draw_border+0x250>
        uint32_t buf_ofs = 0;
  410efc:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  410f00:	2200      	movs	r2, #0
  410f02:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  410f06:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  410f0a:	2b02      	cmp	r3, #2
  410f0c:	d023      	beq.n	410f56 <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  410f0e:	2b01      	cmp	r3, #1
  410f10:	d025      	beq.n	410f5e <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  410f12:	2b03      	cmp	r3, #3
  410f14:	d027      	beq.n	410f66 <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410f16:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  410f1a:	bb53      	cbnz	r3, 410f72 <draw_border+0x286>
  410f1c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  410f20:	b363      	cbz	r3, 410f7c <draw_border+0x290>
  410f22:	2300      	movs	r3, #0
  410f24:	e026      	b.n	410f74 <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  410f26:	f04f 33ff 	mov.w	r3, #4294967295
  410f2a:	930a      	str	r3, [sp, #40]	; 0x28
  410f2c:	e7b2      	b.n	410e94 <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  410f2e:	8822      	ldrh	r2, [r4, #0]
  410f30:	442a      	add	r2, r5
  410f32:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  410f36:	f04f 0b00 	mov.w	fp, #0
  410f3a:	e7e1      	b.n	410f00 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  410f3c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  410f40:	ebab 0b05 	sub.w	fp, fp, r5
  410f44:	fa0f fb8b 	sxth.w	fp, fp
  410f48:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  410f4c:	f9b4 2000 	ldrsh.w	r2, [r4]
  410f50:	ebab 0b02 	sub.w	fp, fp, r2
  410f54:	e7d4      	b.n	410f00 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  410f56:	2201      	movs	r2, #1
  410f58:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  410f5c:	e7d7      	b.n	410f0e <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  410f5e:	2201      	movs	r2, #1
  410f60:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  410f64:	e7d5      	b.n	410f12 <draw_border+0x226>
            top_only = true;
  410f66:	2301      	movs	r3, #1
  410f68:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  410f6c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  410f70:	e7d1      	b.n	410f16 <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410f72:	2300      	movs	r3, #0
  410f74:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  410f78:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410f7a:	e02b      	b.n	410fd4 <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  410f7c:	2301      	movs	r3, #1
  410f7e:	e7f9      	b.n	410f74 <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  410f80:	9906      	ldr	r1, [sp, #24]
  410f82:	4638      	mov	r0, r7
  410f84:	4b2e      	ldr	r3, [pc, #184]	; (411040 <draw_border+0x354>)
  410f86:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410f88:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  410f8c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  410f90:	4419      	add	r1, r3
  410f92:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  410f96:	4432      	add	r2, r6
  410f98:	9b08      	ldr	r3, [sp, #32]
  410f9a:	b212      	sxth	r2, r2
  410f9c:	b209      	sxth	r1, r1
  410f9e:	4638      	mov	r0, r7
  410fa0:	4c28      	ldr	r4, [pc, #160]	; (411044 <draw_border+0x358>)
  410fa2:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  410fa4:	9b07      	ldr	r3, [sp, #28]
  410fa6:	9302      	str	r3, [sp, #8]
  410fa8:	f8cd 9004 	str.w	r9, [sp, #4]
  410fac:	9000      	str	r0, [sp, #0]
  410fae:	eb07 030b 	add.w	r3, r7, fp
  410fb2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  410fb6:	a910      	add	r1, sp, #64	; 0x40
  410fb8:	9805      	ldr	r0, [sp, #20]
  410fba:	4c23      	ldr	r4, [pc, #140]	; (411048 <draw_border+0x35c>)
  410fbc:	47a0      	blx	r4
            fill_area.y1++;
  410fbe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  410fc2:	3301      	adds	r3, #1
  410fc4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  410fc8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410fcc:	3301      	adds	r3, #1
  410fce:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410fd2:	3601      	adds	r6, #1
  410fd4:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  410fd8:	429e      	cmp	r6, r3
  410fda:	dc19      	bgt.n	411010 <draw_border+0x324>
            if(normal ||
  410fdc:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  410fe0:	2b00      	cmp	r3, #0
  410fe2:	d1cd      	bne.n	410f80 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410fe4:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  410fe8:	b133      	cbz	r3, 410ff8 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410fea:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  410fee:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  410ff2:	442b      	add	r3, r5
  410ff4:	429a      	cmp	r2, r3
  410ff6:	ddc3      	ble.n	410f80 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  410ff8:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  410ffc:	2b00      	cmp	r3, #0
  410ffe:	d0de      	beq.n	410fbe <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  411000:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  411004:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  411008:	1b5b      	subs	r3, r3, r5
  41100a:	429a      	cmp	r2, r3
  41100c:	dbd7      	blt.n	410fbe <draw_border+0x2d2>
  41100e:	e7b7      	b.n	410f80 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  411010:	980b      	ldr	r0, [sp, #44]	; 0x2c
  411012:	4c0e      	ldr	r4, [pc, #56]	; (41104c <draw_border+0x360>)
  411014:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  411016:	980a      	ldr	r0, [sp, #40]	; 0x28
  411018:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  41101a:	4638      	mov	r0, r7
  41101c:	4b0c      	ldr	r3, [pc, #48]	; (411050 <draw_border+0x364>)
  41101e:	4798      	blx	r3
  411020:	e6d9      	b.n	410dd6 <draw_border+0xea>
  411022:	4770      	bx	lr
  411024:	00409055 	.word	0x00409055
  411028:	00414505 	.word	0x00414505
  41102c:	00414c69 	.word	0x00414c69
  411030:	0041070d 	.word	0x0041070d
  411034:	00415fdd 	.word	0x00415fdd
  411038:	0040f575 	.word	0x0040f575
  41103c:	0040f2f9 	.word	0x0040f2f9
  411040:	004161c1 	.word	0x004161c1
  411044:	0040f32d 	.word	0x0040f32d
  411048:	0040c0d1 	.word	0x0040c0d1
  41104c:	0040f37d 	.word	0x0040f37d
  411050:	00415d8d 	.word	0x00415d8d

00411054 <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  411054:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  411056:	2b00      	cmp	r3, #0
  411058:	f000 814e 	beq.w	4112f8 <draw_pattern+0x2a4>
{
  41105c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411060:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  411062:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  411066:	2c02      	cmp	r4, #2
  411068:	d802      	bhi.n	411070 <draw_pattern+0x1c>
}
  41106a:	b01f      	add	sp, #124	; 0x7c
  41106c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411070:	4614      	mov	r4, r2
  411072:	460e      	mov	r6, r1
  411074:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  411076:	4618      	mov	r0, r3
  411078:	4ba0      	ldr	r3, [pc, #640]	; (4112fc <draw_pattern+0x2a8>)
  41107a:	4798      	blx	r3
  41107c:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  41107e:	2801      	cmp	r0, #1
  411080:	d908      	bls.n	411094 <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  411082:	2802      	cmp	r0, #2
  411084:	d022      	beq.n	4110cc <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  411086:	2300      	movs	r3, #0
  411088:	461a      	mov	r2, r3
  41108a:	4631      	mov	r1, r6
  41108c:	4628      	mov	r0, r5
  41108e:	4c9c      	ldr	r4, [pc, #624]	; (411300 <draw_pattern+0x2ac>)
  411090:	47a0      	blx	r4
        return;
  411092:	e7ea      	b.n	41106a <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  411094:	a907      	add	r1, sp, #28
  411096:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  411098:	4b9a      	ldr	r3, [pc, #616]	; (411304 <draw_pattern+0x2b0>)
  41109a:	4798      	blx	r3
        if(res != LV_RES_OK) {
  41109c:	2801      	cmp	r0, #1
  41109e:	d1e4      	bne.n	41106a <draw_pattern+0x16>
        img_w = header.w;
  4110a0:	9b07      	ldr	r3, [sp, #28]
  4110a2:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  4110a6:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  4110aa:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  4110ae:	a81a      	add	r0, sp, #104	; 0x68
  4110b0:	4b95      	ldr	r3, [pc, #596]	; (411308 <draw_pattern+0x2b4>)
  4110b2:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  4110b4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4110b8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  4110bc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4110c0:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  4110c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4110c6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  4110ca:	e01d      	b.n	411108 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  4110cc:	a811      	add	r0, sp, #68	; 0x44
  4110ce:	4b8f      	ldr	r3, [pc, #572]	; (41130c <draw_pattern+0x2b8>)
  4110d0:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  4110d2:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4110d4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  4110d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
  4110da:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  4110dc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4110e0:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  4110e4:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  4110e8:	2100      	movs	r1, #0
  4110ea:	9102      	str	r1, [sp, #8]
  4110ec:	f647 4118 	movw	r1, #31768	; 0x7c18
  4110f0:	9101      	str	r1, [sp, #4]
  4110f2:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  4110f6:	9100      	str	r1, [sp, #0]
  4110f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4110fa:	a807      	add	r0, sp, #28
  4110fc:	4f84      	ldr	r7, [pc, #528]	; (411310 <draw_pattern+0x2bc>)
  4110fe:	47b8      	blx	r7
        img_w = s.x;
  411100:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  411104:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  411108:	f1ba 0f00 	cmp.w	sl, #0
  41110c:	bf18      	it	ne
  41110e:	f1bb 0f00 	cmpne.w	fp, #0
  411112:	d0aa      	beq.n	41106a <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  411114:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  411118:	f013 0f01 	tst.w	r3, #1
  41111c:	d148      	bne.n	4111b0 <draw_pattern+0x15c>
  41111e:	88a8      	ldrh	r0, [r5, #4]
  411120:	882b      	ldrh	r3, [r5, #0]
  411122:	1ac0      	subs	r0, r0, r3
  411124:	b280      	uxth	r0, r0
  411126:	3001      	adds	r0, #1
  411128:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41112a:	88ea      	ldrh	r2, [r5, #6]
  41112c:	8869      	ldrh	r1, [r5, #2]
  41112e:	1a52      	subs	r2, r2, r1
  411130:	b292      	uxth	r2, r2
  411132:	3201      	adds	r2, #1
  411134:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411136:	ebb0 000b 	subs.w	r0, r0, fp
  41113a:	f100 80ba 	bmi.w	4112b2 <draw_pattern+0x25e>
  41113e:	eb03 0360 	add.w	r3, r3, r0, asr #1
  411142:	b29b      	uxth	r3, r3
  411144:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411148:	eba2 020a 	sub.w	r2, r2, sl
  41114c:	4610      	mov	r0, r2
  41114e:	2a00      	cmp	r2, #0
  411150:	f2c0 80b1 	blt.w	4112b6 <draw_pattern+0x262>
  411154:	eb01 0160 	add.w	r1, r1, r0, asr #1
  411158:	b289      	uxth	r1, r1
  41115a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  41115e:	445b      	add	r3, fp
  411160:	b29b      	uxth	r3, r3
  411162:	3b01      	subs	r3, #1
  411164:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411168:	eb01 030a 	add.w	r3, r1, sl
  41116c:	b29b      	uxth	r3, r3
  41116e:	3b01      	subs	r3, #1
  411170:	b29b      	uxth	r3, r3
  411172:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  411176:	f1b8 0f02 	cmp.w	r8, #2
  41117a:	f000 809e 	beq.w	4112ba <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  41117e:	f9b4 2000 	ldrsh.w	r2, [r4]
  411182:	4629      	mov	r1, r5
  411184:	a80f      	add	r0, sp, #60	; 0x3c
  411186:	4b63      	ldr	r3, [pc, #396]	; (411314 <draw_pattern+0x2c0>)
  411188:	4798      	blx	r3
  41118a:	2800      	cmp	r0, #0
  41118c:	f000 809e 	beq.w	4112cc <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  411190:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411194:	f1b8 0f02 	cmp.w	r8, #2
  411198:	f000 80a5 	beq.w	4112e6 <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  41119c:	ab1a      	add	r3, sp, #104	; 0x68
  41119e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4111a0:	4631      	mov	r1, r6
  4111a2:	a80f      	add	r0, sp, #60	; 0x3c
  4111a4:	4c56      	ldr	r4, [pc, #344]	; (411300 <draw_pattern+0x2ac>)
  4111a6:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  4111a8:	4628      	mov	r0, r5
  4111aa:	4b5b      	ldr	r3, [pc, #364]	; (411318 <draw_pattern+0x2c4>)
  4111ac:	4798      	blx	r3
  4111ae:	e75c      	b.n	41106a <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4111b0:	2300      	movs	r3, #0
  4111b2:	f9b4 2000 	ldrsh.w	r2, [r4]
  4111b6:	4629      	mov	r1, r5
  4111b8:	a808      	add	r0, sp, #32
  4111ba:	4f58      	ldr	r7, [pc, #352]	; (41131c <draw_pattern+0x2c8>)
  4111bc:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4111be:	2100      	movs	r1, #0
  4111c0:	a808      	add	r0, sp, #32
  4111c2:	4b57      	ldr	r3, [pc, #348]	; (411320 <draw_pattern+0x2cc>)
  4111c4:	4798      	blx	r3
  4111c6:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4111c8:	88ab      	ldrh	r3, [r5, #4]
  4111ca:	882a      	ldrh	r2, [r5, #0]
  4111cc:	1a9b      	subs	r3, r3, r2
  4111ce:	b29b      	uxth	r3, r3
  4111d0:	3301      	adds	r3, #1
  4111d2:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  4111d4:	fb93 f2fb 	sdiv	r2, r3, fp
  4111d8:	fb02 331b 	mls	r3, r2, fp, r3
  4111dc:	2b00      	cmp	r3, #0
  4111de:	db1e      	blt.n	41121e <draw_pattern+0x1ca>
  4111e0:	105b      	asrs	r3, r3, #1
  4111e2:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4111e4:	88ea      	ldrh	r2, [r5, #6]
  4111e6:	886b      	ldrh	r3, [r5, #2]
  4111e8:	1ad2      	subs	r2, r2, r3
  4111ea:	b292      	uxth	r2, r2
  4111ec:	3201      	adds	r2, #1
  4111ee:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  4111f0:	fb92 f1fa 	sdiv	r1, r2, sl
  4111f4:	fb01 221a 	mls	r2, r1, sl, r2
  4111f8:	2a00      	cmp	r2, #0
  4111fa:	db12      	blt.n	411222 <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  4111fc:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  411200:	b29b      	uxth	r3, r3
  411202:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411206:	fa1f fa8a 	uxth.w	sl, sl
  41120a:	4453      	add	r3, sl
  41120c:	b29b      	uxth	r3, r3
  41120e:	3b01      	subs	r3, #1
  411210:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411214:	f8cd b010 	str.w	fp, [sp, #16]
  411218:	4683      	mov	fp, r0
  41121a:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  41121c:	e031      	b.n	411282 <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  41121e:	3301      	adds	r3, #1
  411220:	e7de      	b.n	4111e0 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411222:	3201      	adds	r2, #1
  411224:	e7ea      	b.n	4111fc <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411226:	2300      	movs	r3, #0
  411228:	9300      	str	r3, [sp, #0]
  41122a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  41122e:	aa11      	add	r2, sp, #68	; 0x44
  411230:	4631      	mov	r1, r6
  411232:	a80f      	add	r0, sp, #60	; 0x3c
  411234:	4c3b      	ldr	r4, [pc, #236]	; (411324 <draw_pattern+0x2d0>)
  411236:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411238:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41123c:	443b      	add	r3, r7
  41123e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  411242:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  411246:	443b      	add	r3, r7
  411248:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  41124c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  411250:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  411254:	429a      	cmp	r2, r3
  411256:	dc0a      	bgt.n	41126e <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411258:	f1b8 0f02 	cmp.w	r8, #2
  41125c:	d0e3      	beq.n	411226 <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  41125e:	ab1a      	add	r3, sp, #104	; 0x68
  411260:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  411264:	4631      	mov	r1, r6
  411266:	a80f      	add	r0, sp, #60	; 0x3c
  411268:	4c25      	ldr	r4, [pc, #148]	; (411300 <draw_pattern+0x2ac>)
  41126a:	47a0      	blx	r4
  41126c:	e7e4      	b.n	411238 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  41126e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  411272:	4453      	add	r3, sl
  411274:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  411278:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  41127c:	4453      	add	r3, sl
  41127e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411282:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  411286:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  41128a:	429a      	cmp	r2, r3
  41128c:	dc0d      	bgt.n	4112aa <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  41128e:	882b      	ldrh	r3, [r5, #0]
  411290:	eba3 030b 	sub.w	r3, r3, fp
  411294:	b29b      	uxth	r3, r3
  411296:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  41129a:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  41129e:	443b      	add	r3, r7
  4112a0:	b29b      	uxth	r3, r3
  4112a2:	3b01      	subs	r3, #1
  4112a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  4112a8:	e7d0      	b.n	41124c <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  4112aa:	9805      	ldr	r0, [sp, #20]
  4112ac:	4b1a      	ldr	r3, [pc, #104]	; (411318 <draw_pattern+0x2c4>)
  4112ae:	4798      	blx	r3
  4112b0:	e6db      	b.n	41106a <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  4112b2:	3001      	adds	r0, #1
  4112b4:	e743      	b.n	41113e <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  4112b6:	1c50      	adds	r0, r2, #1
  4112b8:	e74c      	b.n	411154 <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  4112ba:	f002 0201 	and.w	r2, r2, #1
  4112be:	4411      	add	r1, r2
  4112c0:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  4112c4:	4413      	add	r3, r2
  4112c6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  4112ca:	e758      	b.n	41117e <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4112cc:	2300      	movs	r3, #0
  4112ce:	f9b4 2000 	ldrsh.w	r2, [r4]
  4112d2:	4629      	mov	r1, r5
  4112d4:	a808      	add	r0, sp, #32
  4112d6:	4d11      	ldr	r5, [pc, #68]	; (41131c <draw_pattern+0x2c8>)
  4112d8:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4112da:	2100      	movs	r1, #0
  4112dc:	a808      	add	r0, sp, #32
  4112de:	4b10      	ldr	r3, [pc, #64]	; (411320 <draw_pattern+0x2cc>)
  4112e0:	4798      	blx	r3
  4112e2:	4605      	mov	r5, r0
  4112e4:	e756      	b.n	411194 <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  4112e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4112e8:	2200      	movs	r2, #0
  4112ea:	9200      	str	r2, [sp, #0]
  4112ec:	aa11      	add	r2, sp, #68	; 0x44
  4112ee:	4631      	mov	r1, r6
  4112f0:	a80f      	add	r0, sp, #60	; 0x3c
  4112f2:	4c0c      	ldr	r4, [pc, #48]	; (411324 <draw_pattern+0x2d0>)
  4112f4:	47a0      	blx	r4
  4112f6:	e757      	b.n	4111a8 <draw_pattern+0x154>
  4112f8:	4770      	bx	lr
  4112fa:	bf00      	nop
  4112fc:	0040ce8d 	.word	0x0040ce8d
  411300:	0040ce4d 	.word	0x0040ce4d
  411304:	00413019 	.word	0x00413019
  411308:	0040cba1 	.word	0x0040cba1
  41130c:	0040d735 	.word	0x0040d735
  411310:	00416ab1 	.word	0x00416ab1
  411314:	00414edd 	.word	0x00414edd
  411318:	0040f37d 	.word	0x0040f37d
  41131c:	0040f575 	.word	0x0040f575
  411320:	0040f2f9 	.word	0x0040f2f9
  411324:	0040d77d 	.word	0x0040d77d

00411328 <draw_value_str>:
{
  411328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41132c:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  41132e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  411330:	b11d      	cbz	r5, 41133a <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  411332:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  411336:	2b02      	cmp	r3, #2
  411338:	d802      	bhi.n	411340 <draw_value_str+0x18>
}
  41133a:	b013      	add	sp, #76	; 0x4c
  41133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411340:	4614      	mov	r4, r2
  411342:	460e      	mov	r6, r1
  411344:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  411346:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  41134a:	2700      	movs	r7, #0
  41134c:	9702      	str	r7, [sp, #8]
  41134e:	f647 4218 	movw	r2, #31768	; 0x7c18
  411352:	9201      	str	r2, [sp, #4]
  411354:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411358:	9200      	str	r2, [sp, #0]
  41135a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  41135c:	4629      	mov	r1, r5
  41135e:	a811      	add	r0, sp, #68	; 0x44
  411360:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 411414 <draw_value_str+0xec>
  411364:	47c8      	blx	r9
    value_area.x1 = 0;
  411366:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  41136a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  41136e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  411372:	3b01      	subs	r3, #1
  411374:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  411378:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  41137c:	3b01      	subs	r3, #1
  41137e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  411382:	ab0e      	add	r3, sp, #56	; 0x38
  411384:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  411388:	a90f      	add	r1, sp, #60	; 0x3c
  41138a:	4640      	mov	r0, r8
  41138c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 411418 <draw_value_str+0xf0>
  411390:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  411392:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  411396:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  41139a:	441a      	add	r2, r3
  41139c:	b292      	uxth	r2, r2
  41139e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  4113a2:	4413      	add	r3, r2
  4113a4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  4113a8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  4113ac:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  4113b0:	440b      	add	r3, r1
  4113b2:	b29b      	uxth	r3, r3
  4113b4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  4113b8:	4419      	add	r1, r3
  4113ba:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  4113be:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  4113c2:	440a      	add	r2, r1
  4113c4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  4113c8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  4113cc:	4413      	add	r3, r2
  4113ce:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  4113d2:	a805      	add	r0, sp, #20
  4113d4:	4b0d      	ldr	r3, [pc, #52]	; (41140c <draw_value_str+0xe4>)
  4113d6:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  4113d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4113da:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  4113dc:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  4113e0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  4113e4:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  4113e8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  4113ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  4113f0:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  4113f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4113f8:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  4113fc:	9700      	str	r7, [sp, #0]
  4113fe:	462b      	mov	r3, r5
  411400:	aa05      	add	r2, sp, #20
  411402:	4631      	mov	r1, r6
  411404:	a80f      	add	r0, sp, #60	; 0x3c
  411406:	4c02      	ldr	r4, [pc, #8]	; (411410 <draw_value_str+0xe8>)
  411408:	47a0      	blx	r4
  41140a:	e796      	b.n	41133a <draw_value_str+0x12>
  41140c:	0040d735 	.word	0x0040d735
  411410:	0040d77d 	.word	0x0040d77d
  411414:	00416ab1 	.word	0x00416ab1
  411418:	00414fa5 	.word	0x00414fa5

0041141c <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  41141c:	7b13      	ldrb	r3, [r2, #12]
  41141e:	2b02      	cmp	r3, #2
  411420:	f240 839c 	bls.w	411b5c <draw_bg+0x740>
{
  411424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411428:	b0a5      	sub	sp, #148	; 0x94
  41142a:	ad22      	add	r5, sp, #136	; 0x88
  41142c:	2308      	movs	r3, #8
  41142e:	e004      	b.n	41143a <draw_bg+0x1e>
        *d8 = *s8;
  411430:	f810 6b01 	ldrb.w	r6, [r0], #1
  411434:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  411438:	3b01      	subs	r3, #1
    while(len) {
  41143a:	2b00      	cmp	r3, #0
  41143c:	d1f8      	bne.n	411430 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  41143e:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  411442:	2b01      	cmp	r3, #1
  411444:	dd22      	ble.n	41148c <draw_bg+0x70>
  411446:	7d13      	ldrb	r3, [r2, #20]
  411448:	2bfc      	cmp	r3, #252	; 0xfc
  41144a:	d91f      	bls.n	41148c <draw_bg+0x70>
  41144c:	f9b2 3000 	ldrsh.w	r3, [r2]
  411450:	b1e3      	cbz	r3, 41148c <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  411452:	8a53      	ldrh	r3, [r2, #18]
  411454:	f3c3 0080 	ubfx	r0, r3, #2, #1
  411458:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  41145c:	4428      	add	r0, r5
  41145e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  411462:	f3c3 0040 	ubfx	r0, r3, #1, #1
  411466:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  41146a:	4428      	add	r0, r5
  41146c:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  411470:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  411474:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  411478:	1b40      	subs	r0, r0, r5
  41147a:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  41147e:	f003 0301 	and.w	r3, r3, #1
  411482:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  411486:	1ac3      	subs	r3, r0, r3
  411488:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  41148c:	7b13      	ldrb	r3, [r2, #12]
  41148e:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  411490:	2bfd      	cmp	r3, #253	; 0xfd
  411492:	d901      	bls.n	411498 <draw_bg+0x7c>
  411494:	23ff      	movs	r3, #255	; 0xff
  411496:	9305      	str	r3, [sp, #20]
  411498:	4692      	mov	sl, r2
  41149a:	460d      	mov	r5, r1
  41149c:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  41149e:	4bad      	ldr	r3, [pc, #692]	; (411754 <draw_bg+0x338>)
  4114a0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4114a2:	4bad      	ldr	r3, [pc, #692]	; (411758 <draw_bg+0x33c>)
  4114a4:	4798      	blx	r3
  4114a6:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  4114a8:	462a      	mov	r2, r5
  4114aa:	a922      	add	r1, sp, #136	; 0x88
  4114ac:	a820      	add	r0, sp, #128	; 0x80
  4114ae:	4bab      	ldr	r3, [pc, #684]	; (41175c <draw_bg+0x340>)
  4114b0:	4798      	blx	r3
    if(is_common == false) return;
  4114b2:	9006      	str	r0, [sp, #24]
  4114b4:	b910      	cbnz	r0, 4114bc <draw_bg+0xa0>
}
  4114b6:	b025      	add	sp, #148	; 0x94
  4114b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  4114bc:	8a39      	ldrh	r1, [r7, #16]
  4114be:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4114c2:	1a5b      	subs	r3, r3, r1
  4114c4:	b29a      	uxth	r2, r3
  4114c6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  4114ca:	8a7d      	ldrh	r5, [r7, #18]
  4114cc:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  4114d0:	1b40      	subs	r0, r0, r5
  4114d2:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  4114d6:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  4114da:	1a5b      	subs	r3, r3, r1
  4114dc:	b29b      	uxth	r3, r3
  4114de:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  4114e2:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  4114e6:	1b49      	subs	r1, r1, r5
  4114e8:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4114ec:	1a9b      	subs	r3, r3, r2
  4114ee:	b29b      	uxth	r3, r3
  4114f0:	3301      	adds	r3, #1
  4114f2:	b21b      	sxth	r3, r3
  4114f4:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  4114f6:	930c      	str	r3, [sp, #48]	; 0x30
  4114f8:	4618      	mov	r0, r3
  4114fa:	4b99      	ldr	r3, [pc, #612]	; (411760 <draw_bg+0x344>)
  4114fc:	4798      	blx	r3
  4114fe:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  411500:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411504:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411508:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41150c:	429a      	cmp	r2, r3
  41150e:	d00a      	beq.n	411526 <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411510:	4b94      	ldr	r3, [pc, #592]	; (411764 <draw_bg+0x348>)
  411512:	4798      	blx	r3
  411514:	b283      	uxth	r3, r0
  411516:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411518:	b943      	cbnz	r3, 41152c <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  41151a:	f1b8 0f02 	cmp.w	r8, #2
  41151e:	d068      	beq.n	4115f2 <draw_bg+0x1d6>
    bool simple_mode = true;
  411520:	9b06      	ldr	r3, [sp, #24]
  411522:	9309      	str	r3, [sp, #36]	; 0x24
  411524:	e004      	b.n	411530 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411526:	f04f 0800 	mov.w	r8, #0
  41152a:	e7f1      	b.n	411510 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  41152c:	2300      	movs	r3, #0
  41152e:	9309      	str	r3, [sp, #36]	; 0x24
  411530:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  411534:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411538:	ebab 0b03 	sub.w	fp, fp, r3
  41153c:	fa1f fb8b 	uxth.w	fp, fp
  411540:	f10b 0b01 	add.w	fp, fp, #1
  411544:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411548:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41154c:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411550:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411554:	1aed      	subs	r5, r5, r3
  411556:	b2ad      	uxth	r5, r5
  411558:	3501      	adds	r5, #1
  41155a:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  41155c:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411560:	455d      	cmp	r5, fp
  411562:	bfa8      	it	ge
  411564:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  411566:	106d      	asrs	r5, r5, #1
  411568:	42ab      	cmp	r3, r5
  41156a:	dc00      	bgt.n	41156e <draw_bg+0x152>
    int32_t rout = dsc->radius;
  41156c:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  41156e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411570:	2d00      	cmp	r5, #0
  411572:	bf14      	ite	ne
  411574:	2300      	movne	r3, #0
  411576:	f003 0301 	andeq.w	r3, r3, #1
  41157a:	b113      	cbz	r3, 411582 <draw_bg+0x166>
  41157c:	f1b8 0f00 	cmp.w	r8, #0
  411580:	d03a      	beq.n	4115f8 <draw_bg+0x1dc>
        if(rout > 0) {
  411582:	2d00      	cmp	r5, #0
  411584:	dd4a      	ble.n	41161c <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  411586:	2300      	movs	r3, #0
  411588:	462a      	mov	r2, r5
  41158a:	a922      	add	r1, sp, #136	; 0x88
  41158c:	a819      	add	r0, sp, #100	; 0x64
  41158e:	4e76      	ldr	r6, [pc, #472]	; (411768 <draw_bg+0x34c>)
  411590:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  411592:	2100      	movs	r1, #0
  411594:	a819      	add	r0, sp, #100	; 0x64
  411596:	4b75      	ldr	r3, [pc, #468]	; (41176c <draw_bg+0x350>)
  411598:	4798      	blx	r3
  41159a:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  41159c:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  4115a0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  4115a4:	f1b8 0f02 	cmp.w	r8, #2
  4115a8:	d03c      	beq.n	411624 <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  4115aa:	2300      	movs	r3, #0
  4115ac:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4115ae:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  4115b2:	b293      	uxth	r3, r2
  4115b4:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4115b8:	b288      	uxth	r0, r1
  4115ba:	1a1b      	subs	r3, r3, r0
  4115bc:	b29b      	uxth	r3, r3
  4115be:	3301      	adds	r3, #1
  4115c0:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  4115c2:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4115c6:	2b32      	cmp	r3, #50	; 0x32
  4115c8:	dc01      	bgt.n	4115ce <draw_bg+0x1b2>
        bool split = false;
  4115ca:	2300      	movs	r3, #0
  4115cc:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  4115ce:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  4115d2:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  4115d6:	8a7b      	ldrh	r3, [r7, #18]
  4115d8:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  4115dc:	fa13 f386 	uxtah	r3, r3, r6
  4115e0:	b21b      	sxth	r3, r3
  4115e2:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  4115e6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  4115ea:	46b9      	mov	r9, r7
  4115ec:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4115f0:	e1ec      	b.n	4119cc <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  4115f2:	2300      	movs	r3, #0
  4115f4:	9309      	str	r3, [sp, #36]	; 0x24
  4115f6:	e79b      	b.n	411530 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  4115f8:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  4115fc:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411600:	9302      	str	r3, [sp, #8]
  411602:	9b05      	ldr	r3, [sp, #20]
  411604:	9301      	str	r3, [sp, #4]
  411606:	2301      	movs	r3, #1
  411608:	9300      	str	r3, [sp, #0]
  41160a:	2300      	movs	r3, #0
  41160c:	a922      	add	r1, sp, #136	; 0x88
  41160e:	980a      	ldr	r0, [sp, #40]	; 0x28
  411610:	4c57      	ldr	r4, [pc, #348]	; (411770 <draw_bg+0x354>)
  411612:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411614:	f04f 33ff 	mov.w	r3, #4294967295
  411618:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  41161a:	e234      	b.n	411a86 <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  41161c:	f04f 33ff 	mov.w	r3, #4294967295
  411620:	9310      	str	r3, [sp, #64]	; 0x40
  411622:	e7bb      	b.n	41159c <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  411624:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411628:	4b4d      	ldr	r3, [pc, #308]	; (411760 <draw_bg+0x344>)
  41162a:	4798      	blx	r3
  41162c:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  41162e:	f04f 0900 	mov.w	r9, #0
  411632:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  411636:	9512      	str	r5, [sp, #72]	; 0x48
  411638:	4684      	mov	ip, r0
  41163a:	9713      	str	r7, [sp, #76]	; 0x4c
  41163c:	f8dd e010 	ldr.w	lr, [sp, #16]
  411640:	e004      	b.n	41164c <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  411642:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  411646:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411648:	f109 0901 	add.w	r9, r9, #1
  41164c:	45f1      	cmp	r9, lr
  41164e:	da66      	bge.n	41171e <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411650:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  411654:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411658:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  41165c:	fb0b f200 	mul.w	r2, fp, r0
  411660:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  411662:	429a      	cmp	r2, r3
  411664:	daed      	bge.n	411642 <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411666:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  41166a:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  41166e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  411672:	da51      	bge.n	411718 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  411674:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  411676:	fb01 f10b 	mul.w	r1, r1, fp
  41167a:	1209      	asrs	r1, r1, #8
    i -= min;
  41167c:	1a9b      	subs	r3, r3, r2
  41167e:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  411680:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  411684:	fb93 f3f1 	sdiv	r3, r3, r1
  411688:	b2db      	uxtb	r3, r3
  41168a:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  41168e:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411692:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411696:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  41169a:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  41169e:	fb07 f505 	mul.w	r5, r7, r5
  4116a2:	fb03 5202 	mla	r2, r3, r2, r5
  4116a6:	3280      	adds	r2, #128	; 0x80
  4116a8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  4116ac:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  4116b0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4116b4:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4116b8:	f000 0507 	and.w	r5, r0, #7
  4116bc:	f3c0 3242 	ubfx	r2, r0, #13, #3
  4116c0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  4116c4:	f001 0807 	and.w	r8, r1, #7
  4116c8:	f3c1 3542 	ubfx	r5, r1, #13, #3
  4116cc:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  4116d0:	fb05 f507 	mul.w	r5, r5, r7
  4116d4:	fb02 5203 	mla	r2, r2, r3, r5
  4116d8:	3280      	adds	r2, #128	; 0x80
  4116da:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  4116de:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  4116e2:	f3c2 6582 	ubfx	r5, r2, #26, #3
  4116e6:	f365 0402 	bfi	r4, r5, #0, #3
  4116ea:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4116ee:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4116f2:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4116f6:	f3c1 2104 	ubfx	r1, r1, #8, #5
  4116fa:	fb01 f707 	mul.w	r7, r1, r7
  4116fe:	fb00 7303 	mla	r3, r0, r3, r7
  411702:	3380      	adds	r3, #128	; 0x80
  411704:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411708:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41170c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411710:	f363 240c 	bfi	r4, r3, #8, #5
  411714:	4623      	mov	r3, r4
  411716:	e796      	b.n	411646 <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  411718:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41171c:	e793      	b.n	411646 <draw_bg+0x22a>
  41171e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  411722:	9d12      	ldr	r5, [sp, #72]	; 0x48
  411724:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  411726:	e742      	b.n	4115ae <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  411728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41172a:	9905      	ldr	r1, [sp, #20]
  41172c:	9f08      	ldr	r7, [sp, #32]
  41172e:	4638      	mov	r0, r7
  411730:	4b10      	ldr	r3, [pc, #64]	; (411774 <draw_bg+0x358>)
  411732:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411734:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  411738:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41173c:	4419      	add	r1, r3
  41173e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  411742:	4432      	add	r2, r6
  411744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411746:	b212      	sxth	r2, r2
  411748:	b209      	sxth	r1, r1
  41174a:	4638      	mov	r0, r7
  41174c:	4f0a      	ldr	r7, [pc, #40]	; (411778 <draw_bg+0x35c>)
  41174e:	47b8      	blx	r7
  411750:	9004      	str	r0, [sp, #16]
  411752:	e028      	b.n	4117a6 <draw_bg+0x38a>
  411754:	00409055 	.word	0x00409055
  411758:	00414505 	.word	0x00414505
  41175c:	00414c69 	.word	0x00414c69
  411760:	00415fdd 	.word	0x00415fdd
  411764:	0040f3f5 	.word	0x0040f3f5
  411768:	0040f575 	.word	0x0040f575
  41176c:	0040f2f9 	.word	0x0040f2f9
  411770:	0040c0d1 	.word	0x0040c0d1
  411774:	0041610d 	.word	0x0041610d
  411778:	0040f32d 	.word	0x0040f32d
                _lv_memset(mask_buf, opa, draw_area_w);
  41177c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41177e:	9905      	ldr	r1, [sp, #20]
  411780:	9f08      	ldr	r7, [sp, #32]
  411782:	4638      	mov	r0, r7
  411784:	4bb5      	ldr	r3, [pc, #724]	; (411a5c <draw_bg+0x640>)
  411786:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411788:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  41178c:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  411790:	4419      	add	r1, r3
  411792:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  411796:	4432      	add	r2, r6
  411798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41179a:	b212      	sxth	r2, r2
  41179c:	b209      	sxth	r1, r1
  41179e:	4638      	mov	r0, r7
  4117a0:	4faf      	ldr	r7, [pc, #700]	; (411a60 <draw_bg+0x644>)
  4117a2:	47b8      	blx	r7
  4117a4:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  4117a6:	9b04      	ldr	r3, [sp, #16]
  4117a8:	2b02      	cmp	r3, #2
  4117aa:	d061      	beq.n	411870 <draw_bg+0x454>
            opa2 = opa;
  4117ac:	9b05      	ldr	r3, [sp, #20]
  4117ae:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  4117b0:	f1b8 0f01 	cmp.w	r8, #1
  4117b4:	d05f      	beq.n	411876 <draw_bg+0x45a>
            if(simple_mode && split &&
  4117b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4117b8:	9a06      	ldr	r2, [sp, #24]
  4117ba:	4013      	ands	r3, r2
  4117bc:	f013 0fff 	tst.w	r3, #255	; 0xff
  4117c0:	f000 80e8 	beq.w	411994 <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  4117c4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4117c8:	442b      	add	r3, r5
  4117ca:	3301      	adds	r3, #1
            if(simple_mode && split &&
  4117cc:	429c      	cmp	r4, r3
  4117ce:	db06      	blt.n	4117de <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  4117d0:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4117d4:	1b5b      	subs	r3, r3, r5
  4117d6:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  4117d8:	429c      	cmp	r4, r3
  4117da:	f340 80db 	ble.w	411994 <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  4117de:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4117e2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  4117e6:	b2ac      	uxth	r4, r5
  4117e8:	fa14 f383 	uxtah	r3, r4, r3
  4117ec:	b29b      	uxth	r3, r3
  4117ee:	3b01      	subs	r3, #1
  4117f0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  4117f4:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4117f8:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  4117fc:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411800:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  411804:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411808:	9302      	str	r3, [sp, #8]
  41180a:	9b07      	ldr	r3, [sp, #28]
  41180c:	9301      	str	r3, [sp, #4]
  41180e:	9b04      	ldr	r3, [sp, #16]
  411810:	9300      	str	r3, [sp, #0]
  411812:	9b08      	ldr	r3, [sp, #32]
  411814:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411818:	a917      	add	r1, sp, #92	; 0x5c
  41181a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41181c:	4f91      	ldr	r7, [pc, #580]	; (411a64 <draw_bg+0x648>)
  41181e:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  411820:	f1b8 0f01 	cmp.w	r8, #1
  411824:	f000 809c 	beq.w	411960 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  411828:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  41182c:	b29a      	uxth	r2, r3
  41182e:	1b14      	subs	r4, r2, r4
  411830:	b2a4      	uxth	r4, r4
  411832:	3401      	adds	r4, #1
  411834:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  411838:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  41183c:	1b5b      	subs	r3, r3, r5
  41183e:	3301      	adds	r3, #1
  411840:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  411844:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  411848:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  41184a:	1a9b      	subs	r3, r3, r2
  41184c:	f100 80a0 	bmi.w	411990 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  411850:	f89a 200d 	ldrb.w	r2, [sl, #13]
  411854:	9202      	str	r2, [sp, #8]
  411856:	9a07      	ldr	r2, [sp, #28]
  411858:	9201      	str	r2, [sp, #4]
  41185a:	9a04      	ldr	r2, [sp, #16]
  41185c:	9200      	str	r2, [sp, #0]
  41185e:	9a08      	ldr	r2, [sp, #32]
  411860:	4413      	add	r3, r2
  411862:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411866:	a917      	add	r1, sp, #92	; 0x5c
  411868:	980a      	ldr	r0, [sp, #40]	; 0x28
  41186a:	4c7e      	ldr	r4, [pc, #504]	; (411a64 <draw_bg+0x648>)
  41186c:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  41186e:	e0a2      	b.n	4119b6 <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  411870:	23ff      	movs	r3, #255	; 0xff
  411872:	9307      	str	r3, [sp, #28]
  411874:	e79c      	b.n	4117b0 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411876:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  41187a:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  41187e:	1ad2      	subs	r2, r2, r3
  411880:	b292      	uxth	r2, r2
  411882:	3201      	adds	r2, #1
  411884:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  411886:	1ae3      	subs	r3, r4, r3
  411888:	b29b      	uxth	r3, r3
  41188a:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  41188e:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  411892:	fb02 f10c 	mul.w	r1, r2, ip
  411896:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  411898:	4571      	cmp	r1, lr
  41189a:	da59      	bge.n	411950 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  41189c:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  4118a0:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  4118a4:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  4118a8:	da57      	bge.n	41195a <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4118aa:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  4118ae:	fb00 f202 	mul.w	r2, r0, r2
  4118b2:	1212      	asrs	r2, r2, #8
    i -= min;
  4118b4:	1a5b      	subs	r3, r3, r1
  4118b6:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4118b8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4118bc:	fb93 f3f2 	sdiv	r3, r3, r2
  4118c0:	b2db      	uxtb	r3, r3
  4118c2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4118c6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4118ca:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  4118ce:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  4118d2:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  4118d6:	fb0c fe0e 	mul.w	lr, ip, lr
  4118da:	fb03 e202 	mla	r2, r3, r2, lr
  4118de:	3280      	adds	r2, #128	; 0x80
  4118e0:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4118e4:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4118e8:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4118ec:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4118f0:	f000 0e07 	and.w	lr, r0, #7
  4118f4:	f3c0 3242 	ubfx	r2, r0, #13, #3
  4118f8:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4118fc:	f001 0707 	and.w	r7, r1, #7
  411900:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  411904:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  411908:	fb0e fe0c 	mul.w	lr, lr, ip
  41190c:	fb02 e203 	mla	r2, r2, r3, lr
  411910:	3280      	adds	r2, #128	; 0x80
  411912:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  411916:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  41191a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  41191e:	f36e 0b02 	bfi	fp, lr, #0, #3
  411922:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411926:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41192a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41192e:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411932:	fb01 fc0c 	mul.w	ip, r1, ip
  411936:	fb00 c303 	mla	r3, r0, r3, ip
  41193a:	3380      	adds	r3, #128	; 0x80
  41193c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411940:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411944:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411948:	f363 2b0c 	bfi	fp, r3, #8, #5
  41194c:	465b      	mov	r3, fp
  41194e:	e001      	b.n	411954 <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  411950:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411954:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  411958:	e72d      	b.n	4117b6 <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  41195a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41195e:	e7f9      	b.n	411954 <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  411960:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411964:	4423      	add	r3, r4
  411966:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  41196a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  41196e:	1b1b      	subs	r3, r3, r4
  411970:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  411974:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411978:	9302      	str	r3, [sp, #8]
  41197a:	9b05      	ldr	r3, [sp, #20]
  41197c:	9301      	str	r3, [sp, #4]
  41197e:	2301      	movs	r3, #1
  411980:	9300      	str	r3, [sp, #0]
  411982:	2300      	movs	r3, #0
  411984:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411988:	a917      	add	r1, sp, #92	; 0x5c
  41198a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41198c:	47b8      	blx	r7
  41198e:	e74b      	b.n	411828 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  411990:	2300      	movs	r3, #0
  411992:	e75d      	b.n	411850 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  411994:	f1b8 0f02 	cmp.w	r8, #2
  411998:	d034      	beq.n	411a04 <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  41199a:	f1b8 0f01 	cmp.w	r8, #1
  41199e:	d03f      	beq.n	411a20 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  4119a0:	9b06      	ldr	r3, [sp, #24]
  4119a2:	f083 0301 	eor.w	r3, r3, #1
  4119a6:	b2db      	uxtb	r3, r3
  4119a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4119aa:	2a00      	cmp	r2, #0
  4119ac:	bf18      	it	ne
  4119ae:	f043 0301 	orrne.w	r3, r3, #1
  4119b2:	2b00      	cmp	r3, #0
  4119b4:	d143      	bne.n	411a3e <draw_bg+0x622>
            fill_area.y1++;
  4119b6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  4119ba:	3301      	adds	r3, #1
  4119bc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  4119c0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4119c4:	3301      	adds	r3, #1
  4119c6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4119ca:	3601      	adds	r6, #1
  4119cc:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  4119d0:	429e      	cmp	r6, r3
  4119d2:	dc4b      	bgt.n	411a6c <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  4119d4:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  4119d8:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  4119da:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4119de:	442b      	add	r3, r5
  4119e0:	3301      	adds	r3, #1
  4119e2:	429c      	cmp	r4, r3
  4119e4:	f77f aeca 	ble.w	41177c <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  4119e8:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  4119ec:	1b5b      	subs	r3, r3, r5
  4119ee:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  4119f0:	429c      	cmp	r4, r3
  4119f2:	f6bf aec3 	bge.w	41177c <draw_bg+0x360>
                if(simple_mode == false) {
  4119f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4119f8:	2b00      	cmp	r3, #0
  4119fa:	f43f ae95 	beq.w	411728 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  4119fe:	2301      	movs	r3, #1
  411a00:	9304      	str	r3, [sp, #16]
  411a02:	e6d0      	b.n	4117a6 <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  411a04:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411a08:	9302      	str	r3, [sp, #8]
  411a0a:	9b07      	ldr	r3, [sp, #28]
  411a0c:	9301      	str	r3, [sp, #4]
  411a0e:	9b04      	ldr	r3, [sp, #16]
  411a10:	9300      	str	r3, [sp, #0]
  411a12:	9b08      	ldr	r3, [sp, #32]
  411a14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  411a16:	a915      	add	r1, sp, #84	; 0x54
  411a18:	980a      	ldr	r0, [sp, #40]	; 0x28
  411a1a:	4c13      	ldr	r4, [pc, #76]	; (411a68 <draw_bg+0x64c>)
  411a1c:	47a0      	blx	r4
  411a1e:	e7ca      	b.n	4119b6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411a20:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411a24:	9302      	str	r3, [sp, #8]
  411a26:	9b07      	ldr	r3, [sp, #28]
  411a28:	9301      	str	r3, [sp, #4]
  411a2a:	9b04      	ldr	r3, [sp, #16]
  411a2c:	9300      	str	r3, [sp, #0]
  411a2e:	9b08      	ldr	r3, [sp, #32]
  411a30:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411a34:	a915      	add	r1, sp, #84	; 0x54
  411a36:	980a      	ldr	r0, [sp, #40]	; 0x28
  411a38:	4c0a      	ldr	r4, [pc, #40]	; (411a64 <draw_bg+0x648>)
  411a3a:	47a0      	blx	r4
  411a3c:	e7bb      	b.n	4119b6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411a3e:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411a42:	9302      	str	r3, [sp, #8]
  411a44:	9b07      	ldr	r3, [sp, #28]
  411a46:	9301      	str	r3, [sp, #4]
  411a48:	9b04      	ldr	r3, [sp, #16]
  411a4a:	9300      	str	r3, [sp, #0]
  411a4c:	9b08      	ldr	r3, [sp, #32]
  411a4e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411a52:	a915      	add	r1, sp, #84	; 0x54
  411a54:	980a      	ldr	r0, [sp, #40]	; 0x28
  411a56:	4c03      	ldr	r4, [pc, #12]	; (411a64 <draw_bg+0x648>)
  411a58:	47a0      	blx	r4
  411a5a:	e7ac      	b.n	4119b6 <draw_bg+0x59a>
  411a5c:	0041610d 	.word	0x0041610d
  411a60:	0040f32d 	.word	0x0040f32d
  411a64:	0040c0d1 	.word	0x0040c0d1
  411a68:	0040c1f1 	.word	0x0040c1f1
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  411a6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411a6e:	f1b8 0f00 	cmp.w	r8, #0
  411a72:	bf08      	it	eq
  411a74:	2b00      	cmpeq	r3, #0
  411a76:	d101      	bne.n	411a7c <draw_bg+0x660>
  411a78:	9b06      	ldr	r3, [sp, #24]
  411a7a:	b95b      	cbnz	r3, 411a94 <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  411a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411a7e:	b113      	cbz	r3, 411a86 <draw_bg+0x66a>
  411a80:	4618      	mov	r0, r3
  411a82:	4b37      	ldr	r3, [pc, #220]	; (411b60 <draw_bg+0x744>)
  411a84:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  411a86:	9810      	ldr	r0, [sp, #64]	; 0x40
  411a88:	4b36      	ldr	r3, [pc, #216]	; (411b64 <draw_bg+0x748>)
  411a8a:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  411a8c:	9808      	ldr	r0, [sp, #32]
  411a8e:	4b34      	ldr	r3, [pc, #208]	; (411b60 <draw_bg+0x744>)
  411a90:	4798      	blx	r3
  411a92:	e510      	b.n	4114b6 <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  411a94:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411a98:	b2ad      	uxth	r5, r5
  411a9a:	442b      	add	r3, r5
  411a9c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  411aa0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411aa4:	1b5b      	subs	r3, r3, r5
  411aa6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  411aaa:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411aae:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  411ab2:	fa15 f383 	uxtah	r3, r5, r3
  411ab6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411aba:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411abe:	9302      	str	r3, [sp, #8]
  411ac0:	9b05      	ldr	r3, [sp, #20]
  411ac2:	9301      	str	r3, [sp, #4]
  411ac4:	2301      	movs	r3, #1
  411ac6:	9300      	str	r3, [sp, #0]
  411ac8:	2300      	movs	r3, #0
  411aca:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411ace:	a915      	add	r1, sp, #84	; 0x54
  411ad0:	980a      	ldr	r0, [sp, #40]	; 0x28
  411ad2:	4c25      	ldr	r4, [pc, #148]	; (411b68 <draw_bg+0x74c>)
  411ad4:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  411ad6:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  411ada:	b28b      	uxth	r3, r1
  411adc:	1b5b      	subs	r3, r3, r5
  411ade:	b21b      	sxth	r3, r3
  411ae0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  411ae4:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  411ae8:	4293      	cmp	r3, r2
  411aea:	dc03      	bgt.n	411af4 <draw_bg+0x6d8>
  411aec:	b293      	uxth	r3, r2
  411aee:	3301      	adds	r3, #1
  411af0:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  411af4:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411af8:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411afc:	9302      	str	r3, [sp, #8]
  411afe:	9f05      	ldr	r7, [sp, #20]
  411b00:	9701      	str	r7, [sp, #4]
  411b02:	2601      	movs	r6, #1
  411b04:	9600      	str	r6, [sp, #0]
  411b06:	2300      	movs	r3, #0
  411b08:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411b0c:	a915      	add	r1, sp, #84	; 0x54
  411b0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  411b12:	4640      	mov	r0, r8
  411b14:	4c14      	ldr	r4, [pc, #80]	; (411b68 <draw_bg+0x74c>)
  411b16:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  411b18:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411b1c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  411b20:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411b24:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  411b28:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411b2c:	442b      	add	r3, r5
  411b2e:	b29b      	uxth	r3, r3
  411b30:	4433      	add	r3, r6
  411b32:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  411b36:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  411b3a:	1b5b      	subs	r3, r3, r5
  411b3c:	b29b      	uxth	r3, r3
  411b3e:	3b01      	subs	r3, #1
  411b40:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411b44:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411b48:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411b4c:	9302      	str	r3, [sp, #8]
  411b4e:	9701      	str	r7, [sp, #4]
  411b50:	9600      	str	r6, [sp, #0]
  411b52:	2300      	movs	r3, #0
  411b54:	a915      	add	r1, sp, #84	; 0x54
  411b56:	4640      	mov	r0, r8
  411b58:	47a0      	blx	r4
  411b5a:	e78f      	b.n	411a7c <draw_bg+0x660>
  411b5c:	4770      	bx	lr
  411b5e:	bf00      	nop
  411b60:	00415d8d 	.word	0x00415d8d
  411b64:	0040f37d 	.word	0x0040f37d
  411b68:	0040c0d1 	.word	0x0040c0d1

00411b6c <lv_draw_rect_dsc_init>:
{
  411b6c:	b510      	push	{r4, lr}
  411b6e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  411b70:	2154      	movs	r1, #84	; 0x54
  411b72:	4b0e      	ldr	r3, [pc, #56]	; (411bac <lv_draw_rect_dsc_init+0x40>)
  411b74:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  411b76:	4b0e      	ldr	r3, [pc, #56]	; (411bb0 <lv_draw_rect_dsc_init+0x44>)
  411b78:	881b      	ldrh	r3, [r3, #0]
  411b7a:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  411b7c:	2300      	movs	r3, #0
  411b7e:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  411b80:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  411b82:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  411b84:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  411b88:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  411b8a:	23ff      	movs	r3, #255	; 0xff
  411b8c:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  411b8e:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  411b90:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  411b92:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  411b94:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  411b98:	4a06      	ldr	r2, [pc, #24]	; (411bb4 <lv_draw_rect_dsc_init+0x48>)
  411b9a:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  411b9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  411ba0:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  411ba2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  411ba6:	230f      	movs	r3, #15
  411ba8:	8263      	strh	r3, [r4, #18]
  411baa:	bd10      	pop	{r4, pc}
  411bac:	00416169 	.word	0x00416169
  411bb0:	00423764 	.word	0x00423764
  411bb4:	2040002c 	.word	0x2040002c

00411bb8 <lv_draw_rect>:
{
  411bb8:	b570      	push	{r4, r5, r6, lr}
  411bba:	88c3      	ldrh	r3, [r0, #6]
  411bbc:	8844      	ldrh	r4, [r0, #2]
  411bbe:	1b1b      	subs	r3, r3, r4
  411bc0:	b29b      	uxth	r3, r3
  411bc2:	3301      	adds	r3, #1
  411bc4:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  411bc6:	2b00      	cmp	r3, #0
  411bc8:	dd25      	ble.n	411c16 <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411bca:	8883      	ldrh	r3, [r0, #4]
  411bcc:	8804      	ldrh	r4, [r0, #0]
  411bce:	1b1b      	subs	r3, r3, r4
  411bd0:	b29b      	uxth	r3, r3
  411bd2:	3301      	adds	r3, #1
  411bd4:	b21b      	sxth	r3, r3
  411bd6:	2b00      	cmp	r3, #0
  411bd8:	dd1d      	ble.n	411c16 <lv_draw_rect+0x5e>
  411bda:	4616      	mov	r6, r2
  411bdc:	460d      	mov	r5, r1
  411bde:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  411be0:	4b0d      	ldr	r3, [pc, #52]	; (411c18 <lv_draw_rect+0x60>)
  411be2:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  411be4:	4632      	mov	r2, r6
  411be6:	4629      	mov	r1, r5
  411be8:	4620      	mov	r0, r4
  411bea:	4b0c      	ldr	r3, [pc, #48]	; (411c1c <lv_draw_rect+0x64>)
  411bec:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  411bee:	4632      	mov	r2, r6
  411bf0:	4629      	mov	r1, r5
  411bf2:	4620      	mov	r0, r4
  411bf4:	4b0a      	ldr	r3, [pc, #40]	; (411c20 <lv_draw_rect+0x68>)
  411bf6:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  411bf8:	4632      	mov	r2, r6
  411bfa:	4629      	mov	r1, r5
  411bfc:	4620      	mov	r0, r4
  411bfe:	4b09      	ldr	r3, [pc, #36]	; (411c24 <lv_draw_rect+0x6c>)
  411c00:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  411c02:	4632      	mov	r2, r6
  411c04:	4629      	mov	r1, r5
  411c06:	4620      	mov	r0, r4
  411c08:	4b07      	ldr	r3, [pc, #28]	; (411c28 <lv_draw_rect+0x70>)
  411c0a:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  411c0c:	4632      	mov	r2, r6
  411c0e:	4629      	mov	r1, r5
  411c10:	4620      	mov	r0, r4
  411c12:	4b06      	ldr	r3, [pc, #24]	; (411c2c <lv_draw_rect+0x74>)
  411c14:	4798      	blx	r3
  411c16:	bd70      	pop	{r4, r5, r6, pc}
  411c18:	0040f915 	.word	0x0040f915
  411c1c:	0041141d 	.word	0x0041141d
  411c20:	00411055 	.word	0x00411055
  411c24:	00410ced 	.word	0x00410ced
  411c28:	00411329 	.word	0x00411329
  411c2c:	00410c31 	.word	0x00410c31

00411c30 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  411c30:	b5f0      	push	{r4, r5, r6, r7, lr}
  411c32:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  411c34:	2400      	movs	r4, #0
  411c36:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411c3a:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  411c3c:	7804      	ldrb	r4, [r0, #0]
  411c3e:	f004 041f 	and.w	r4, r4, #31
  411c42:	2c06      	cmp	r4, #6
  411c44:	bf18      	it	ne
  411c46:	2c04      	cmpne	r4, #4
  411c48:	d010      	beq.n	411c6c <lv_img_buf_get_px_color+0x3c>
  411c4a:	2c05      	cmp	r4, #5
  411c4c:	d00e      	beq.n	411c6c <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  411c4e:	2c07      	cmp	r4, #7
  411c50:	d02b      	beq.n	411caa <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  411c52:	2c08      	cmp	r4, #8
  411c54:	d03f      	beq.n	411cd6 <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  411c56:	2c09      	cmp	r4, #9
  411c58:	d055      	beq.n	411d06 <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  411c5a:	2c0a      	cmp	r4, #10
  411c5c:	d06c      	beq.n	411d38 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411c5e:	3c0b      	subs	r4, #11
  411c60:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  411c62:	2c03      	cmp	r4, #3
  411c64:	d81d      	bhi.n	411ca2 <lv_img_buf_get_px_color+0x72>
        p_color = color;
  411c66:	f8ad 3004 	strh.w	r3, [sp, #4]
  411c6a:	e01a      	b.n	411ca2 <lv_img_buf_get_px_color+0x72>
  411c6c:	4616      	mov	r6, r2
  411c6e:	460f      	mov	r7, r1
  411c70:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  411c72:	7800      	ldrb	r0, [r0, #0]
  411c74:	f000 001f 	and.w	r0, r0, #31
  411c78:	4b35      	ldr	r3, [pc, #212]	; (411d50 <lv_img_buf_get_px_color+0x120>)
  411c7a:	4798      	blx	r3
  411c7c:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  411c80:	6822      	ldr	r2, [r4, #0]
  411c82:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411c86:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  411c8a:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  411c8e:	aa01      	add	r2, sp, #4
  411c90:	2302      	movs	r3, #2
  411c92:	e004      	b.n	411c9e <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  411c94:	f810 1b01 	ldrb.w	r1, [r0], #1
  411c98:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  411c9c:	3b01      	subs	r3, #1
    while(len) {
  411c9e:	2b00      	cmp	r3, #0
  411ca0:	d1f8      	bne.n	411c94 <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  411ca2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  411ca6:	b003      	add	sp, #12
  411ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  411caa:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  411cae:	6800      	ldr	r0, [r0, #0]
  411cb0:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411cb4:	3007      	adds	r0, #7
  411cb6:	10c0      	asrs	r0, r0, #3
  411cb8:	fb00 f202 	mul.w	r2, r0, r2
  411cbc:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411cc0:	18a8      	adds	r0, r5, r2
  411cc2:	7a03      	ldrb	r3, [r0, #8]
  411cc4:	f1c4 0207 	rsb	r2, r4, #7
  411cc8:	2101      	movs	r1, #1
  411cca:	4091      	lsls	r1, r2
  411ccc:	400b      	ands	r3, r1
  411cce:	4113      	asrs	r3, r2
  411cd0:	f8ad 3004 	strh.w	r3, [sp, #4]
  411cd4:	e7e5      	b.n	411ca2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  411cd6:	f001 0303 	and.w	r3, r1, #3
  411cda:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  411cdc:	6800      	ldr	r0, [r0, #0]
  411cde:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411ce2:	3003      	adds	r0, #3
  411ce4:	1080      	asrs	r0, r0, #2
  411ce6:	fb00 f202 	mul.w	r2, r0, r2
  411cea:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411cee:	18a8      	adds	r0, r5, r2
  411cf0:	7c02      	ldrb	r2, [r0, #16]
  411cf2:	f1c3 0306 	rsb	r3, r3, #6
  411cf6:	2103      	movs	r1, #3
  411cf8:	4099      	lsls	r1, r3
  411cfa:	400a      	ands	r2, r1
  411cfc:	fa42 f303 	asr.w	r3, r2, r3
  411d00:	f8ad 3004 	strh.w	r3, [sp, #4]
  411d04:	e7cd      	b.n	411ca2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  411d06:	f001 0301 	and.w	r3, r1, #1
  411d0a:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  411d0c:	6800      	ldr	r0, [r0, #0]
  411d0e:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411d12:	3001      	adds	r0, #1
  411d14:	1040      	asrs	r0, r0, #1
  411d16:	fb00 f202 	mul.w	r2, r0, r2
  411d1a:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411d1e:	18a8      	adds	r0, r5, r2
  411d20:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  411d24:	f1c3 0304 	rsb	r3, r3, #4
  411d28:	210f      	movs	r1, #15
  411d2a:	4099      	lsls	r1, r3
  411d2c:	400a      	ands	r2, r1
  411d2e:	fa42 f303 	asr.w	r3, r2, r3
  411d32:	f8ad 3004 	strh.w	r3, [sp, #4]
  411d36:	e7b4      	b.n	411ca2 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  411d38:	6800      	ldr	r0, [r0, #0]
  411d3a:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411d3e:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  411d42:	18a8      	adds	r0, r5, r2
  411d44:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  411d48:	f8ad 3004 	strh.w	r3, [sp, #4]
  411d4c:	e7a9      	b.n	411ca2 <lv_img_buf_get_px_color+0x72>
  411d4e:	bf00      	nop
  411d50:	0040cbc9 	.word	0x0040cbc9

00411d54 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  411d54:	b5f0      	push	{r4, r5, r6, r7, lr}
  411d56:	b085      	sub	sp, #20
  411d58:	4604      	mov	r4, r0
  411d5a:	460e      	mov	r6, r1
  411d5c:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411d5e:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  411d60:	7803      	ldrb	r3, [r0, #0]
  411d62:	f003 031f 	and.w	r3, r3, #31
  411d66:	2b05      	cmp	r3, #5
  411d68:	d00a      	beq.n	411d80 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  411d6a:	2b0b      	cmp	r3, #11
  411d6c:	d012      	beq.n	411d94 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  411d6e:	2b0c      	cmp	r3, #12
  411d70:	d029      	beq.n	411dc6 <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  411d72:	2b0d      	cmp	r3, #13
  411d74:	d043      	beq.n	411dfe <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411d76:	2b0e      	cmp	r3, #14
  411d78:	d05f      	beq.n	411e3a <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  411d7a:	20ff      	movs	r0, #255	; 0xff
}
  411d7c:	b005      	add	sp, #20
  411d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  411d80:	6801      	ldr	r1, [r0, #0]
  411d82:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411d86:	fb01 6102 	mla	r1, r1, r2, r6
  411d8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  411d8e:	440d      	add	r5, r1
  411d90:	78a8      	ldrb	r0, [r5, #2]
  411d92:	e7f3      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  411d94:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  411d98:	6801      	ldr	r1, [r0, #0]
  411d9a:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411d9e:	3107      	adds	r1, #7
  411da0:	10c9      	asrs	r1, r1, #3
  411da2:	fb01 f107 	mul.w	r1, r1, r7
  411da6:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411daa:	5c6b      	ldrb	r3, [r5, r1]
  411dac:	f1c2 0207 	rsb	r2, r2, #7
  411db0:	2101      	movs	r1, #1
  411db2:	4091      	lsls	r1, r2
  411db4:	400b      	ands	r3, r1
  411db6:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  411db8:	f013 0fff 	tst.w	r3, #255	; 0xff
  411dbc:	d101      	bne.n	411dc2 <lv_img_buf_get_px_alpha+0x6e>
  411dbe:	20ff      	movs	r0, #255	; 0xff
  411dc0:	e7dc      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
  411dc2:	2000      	movs	r0, #0
  411dc4:	e7da      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  411dc6:	4b20      	ldr	r3, [pc, #128]	; (411e48 <lv_img_buf_get_px_alpha+0xf4>)
  411dc8:	681b      	ldr	r3, [r3, #0]
  411dca:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  411dcc:	f001 0203 	and.w	r2, r1, #3
  411dd0:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  411dd2:	6801      	ldr	r1, [r0, #0]
  411dd4:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411dd8:	3103      	adds	r1, #3
  411dda:	1089      	asrs	r1, r1, #2
  411ddc:	fb01 f107 	mul.w	r1, r1, r7
  411de0:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411de4:	5c6b      	ldrb	r3, [r5, r1]
  411de6:	f1c2 0206 	rsb	r2, r2, #6
  411dea:	2103      	movs	r1, #3
  411dec:	4091      	lsls	r1, r2
  411dee:	400b      	ands	r3, r1
  411df0:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  411df2:	aa04      	add	r2, sp, #16
  411df4:	fa52 f383 	uxtab	r3, r2, r3
  411df8:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411dfc:	e7be      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  411dfe:	4b13      	ldr	r3, [pc, #76]	; (411e4c <lv_img_buf_get_px_alpha+0xf8>)
  411e00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  411e02:	f10d 0e10 	add.w	lr, sp, #16
  411e06:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  411e0a:	f006 0201 	and.w	r2, r6, #1
  411e0e:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  411e10:	6821      	ldr	r1, [r4, #0]
  411e12:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411e16:	3101      	adds	r1, #1
  411e18:	1049      	asrs	r1, r1, #1
  411e1a:	fb01 f107 	mul.w	r1, r1, r7
  411e1e:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411e22:	5c6b      	ldrb	r3, [r5, r1]
  411e24:	f1c2 0204 	rsb	r2, r2, #4
  411e28:	210f      	movs	r1, #15
  411e2a:	4091      	lsls	r1, r2
  411e2c:	400b      	ands	r3, r1
  411e2e:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  411e30:	fa5e f383 	uxtab	r3, lr, r3
  411e34:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  411e38:	e7a0      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  411e3a:	6801      	ldr	r1, [r0, #0]
  411e3c:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411e40:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  411e44:	5c68      	ldrb	r0, [r5, r1]
  411e46:	e799      	b.n	411d7c <lv_img_buf_get_px_alpha+0x28>
  411e48:	00423768 	.word	0x00423768
  411e4c:	0042376c 	.word	0x0042376c

00411e50 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  411e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411e54:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  411e56:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  411e5a:	021b      	lsls	r3, r3, #8
  411e5c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  411e5e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  411e62:	021b      	lsls	r3, r3, #8
  411e64:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  411e66:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  411e6a:	4e3f      	ldr	r6, [pc, #252]	; (411f68 <_lv_img_buf_transform_init+0x118>)
  411e6c:	fb86 3200 	smull	r3, r2, r6, r0
  411e70:	17c3      	asrs	r3, r0, #31
  411e72:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  411e76:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  411e78:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  411e7c:	f06f 0709 	mvn.w	r7, #9
  411e80:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  411e84:	b29d      	uxth	r5, r3
  411e86:	4268      	negs	r0, r5
  411e88:	b200      	sxth	r0, r0
  411e8a:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 411f74 <_lv_img_buf_transform_init+0x124>
  411e8e:	47d0      	blx	sl
  411e90:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  411e92:	fa1f f989 	uxth.w	r9, r9
  411e96:	f1c9 0000 	rsb	r0, r9, #0
  411e9a:	b200      	sxth	r0, r0
  411e9c:	47d0      	blx	sl
  411e9e:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  411ea0:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  411ea4:	b200      	sxth	r0, r0
  411ea6:	47d0      	blx	sl
  411ea8:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  411eaa:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  411eae:	b200      	sxth	r0, r0
  411eb0:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  411eb2:	f1c7 020a 	rsb	r2, r7, #10
  411eb6:	fb0b f307 	mul.w	r3, fp, r7
  411eba:	fb02 3308 	mla	r3, r2, r8, r3
  411ebe:	fb86 e103 	smull	lr, r1, r6, r3
  411ec2:	17db      	asrs	r3, r3, #31
  411ec4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  411ec8:	fb00 f007 	mul.w	r0, r0, r7
  411ecc:	fb02 0005 	mla	r0, r2, r5, r0
  411ed0:	fb86 2600 	smull	r2, r6, r6, r0
  411ed4:	17c0      	asrs	r0, r0, #31
  411ed6:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411eda:	115b      	asrs	r3, r3, #5
  411edc:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  411ede:	1140      	asrs	r0, r0, #5
  411ee0:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  411ee2:	7ca0      	ldrb	r0, [r4, #18]
  411ee4:	4b21      	ldr	r3, [pc, #132]	; (411f6c <_lv_img_buf_transform_init+0x11c>)
  411ee6:	4798      	blx	r3
  411ee8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411eec:	f360 0300 	bfi	r3, r0, #0, #1
  411ef0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  411ef4:	7ca0      	ldrb	r0, [r4, #18]
  411ef6:	4b1e      	ldr	r3, [pc, #120]	; (411f70 <_lv_img_buf_transform_init+0x120>)
  411ef8:	4798      	blx	r3
  411efa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411efe:	f360 0341 	bfi	r3, r0, #1, #1
  411f02:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  411f06:	7ca2      	ldrb	r2, [r4, #18]
  411f08:	1f13      	subs	r3, r2, #4
  411f0a:	b2db      	uxtb	r3, r3
  411f0c:	2b02      	cmp	r3, #2
  411f0e:	d924      	bls.n	411f5a <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  411f10:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411f14:	f36f 0382 	bfc	r3, #2, #1
  411f18:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  411f1c:	6823      	ldr	r3, [r4, #0]
  411f1e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  411f20:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  411f22:	f003 031f 	and.w	r3, r3, #31
  411f26:	f362 0304 	bfi	r3, r2, #0, #5
  411f2a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  411f2c:	88a2      	ldrh	r2, [r4, #4]
  411f2e:	69a3      	ldr	r3, [r4, #24]
  411f30:	f362 2394 	bfi	r3, r2, #10, #11
  411f34:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  411f36:	88e2      	ldrh	r2, [r4, #6]
  411f38:	0c1b      	lsrs	r3, r3, #16
  411f3a:	f362 134f 	bfi	r3, r2, #5, #11
  411f3e:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  411f40:	89e2      	ldrh	r2, [r4, #14]
  411f42:	0853      	lsrs	r3, r2, #1
  411f44:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  411f48:	fb93 f3f2 	sdiv	r3, r3, r2
  411f4c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  411f4e:	23ff      	movs	r3, #255	; 0xff
  411f50:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  411f52:	8a23      	ldrh	r3, [r4, #16]
  411f54:	82a3      	strh	r3, [r4, #20]
  411f56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  411f5a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  411f5e:	f043 0304 	orr.w	r3, r3, #4
  411f62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  411f66:	e7d9      	b.n	411f1c <_lv_img_buf_transform_init+0xcc>
  411f68:	66666667 	.word	0x66666667
  411f6c:	0040cbfb 	.word	0x0040cbfb
  411f70:	0040cc0f 	.word	0x0040cc0f
  411f74:	00415ac5 	.word	0x00415ac5

00411f78 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  411f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411f7c:	b083      	sub	sp, #12
  411f7e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  411f82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  411f84:	2b00      	cmp	r3, #0
  411f86:	bf08      	it	eq
  411f88:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  411f8c:	d109      	bne.n	411fa2 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  411f8e:	2300      	movs	r3, #0
  411f90:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  411f92:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  411f94:	3901      	subs	r1, #1
  411f96:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  411f98:	3a01      	subs	r2, #1
  411f9a:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  411f9c:	b003      	add	sp, #12
  411f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  411fa2:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  411fa4:	f9b5 6000 	ldrsh.w	r6, [r5]
  411fa8:	4276      	negs	r6, r6
  411faa:	fb0e f606 	mul.w	r6, lr, r6
  411fae:	1236      	asrs	r6, r6, #8
  411fb0:	3e01      	subs	r6, #1
  411fb2:	b2b6      	uxth	r6, r6
  411fb4:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  411fb6:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  411fba:	4264      	negs	r4, r4
  411fbc:	fb04 f40e 	mul.w	r4, r4, lr
  411fc0:	1224      	asrs	r4, r4, #8
  411fc2:	3c01      	subs	r4, #1
  411fc4:	b2a4      	uxth	r4, r4
  411fc6:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  411fc8:	f9b5 3000 	ldrsh.w	r3, [r5]
  411fcc:	1ac9      	subs	r1, r1, r3
  411fce:	fb01 f10e 	mul.w	r1, r1, lr
  411fd2:	1209      	asrs	r1, r1, #8
  411fd4:	3102      	adds	r1, #2
  411fd6:	b289      	uxth	r1, r1
  411fd8:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  411fda:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  411fde:	1ad3      	subs	r3, r2, r3
  411fe0:	fb03 f30e 	mul.w	r3, r3, lr
  411fe4:	121b      	asrs	r3, r3, #8
  411fe6:	3302      	adds	r3, #2
  411fe8:	b29b      	uxth	r3, r3
  411fea:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  411fec:	b967      	cbnz	r7, 412008 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  411fee:	882a      	ldrh	r2, [r5, #0]
  411ff0:	4416      	add	r6, r2
  411ff2:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  411ff4:	886a      	ldrh	r2, [r5, #2]
  411ff6:	4414      	add	r4, r2
  411ff8:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  411ffa:	882a      	ldrh	r2, [r5, #0]
  411ffc:	4411      	add	r1, r2
  411ffe:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  412000:	886a      	ldrh	r2, [r5, #2]
  412002:	4413      	add	r3, r2
  412004:	80c3      	strh	r3, [r0, #6]
        return;
  412006:	e7c9      	b.n	411f9c <_lv_img_buf_get_transformed_area+0x24>
  412008:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  41200a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 41215c <_lv_img_buf_get_transformed_area+0x1e4>
  41200e:	fb88 3007 	smull	r3, r0, r8, r7
  412012:	17fe      	asrs	r6, r7, #31
  412014:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  412018:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  41201a:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  41201e:	f06f 0009 	mvn.w	r0, #9
  412022:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  412026:	4630      	mov	r0, r6
  412028:	f8df 9134 	ldr.w	r9, [pc, #308]	; 412160 <_lv_img_buf_get_transformed_area+0x1e8>
  41202c:	47c8      	blx	r9
  41202e:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  412030:	fa0f f08a 	sxth.w	r0, sl
  412034:	47c8      	blx	r9
  412036:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  412038:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  41203c:	b200      	sxth	r0, r0
  41203e:	47c8      	blx	r9
  412040:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  412042:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  412046:	b200      	sxth	r0, r0
  412048:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  41204a:	f1c7 030a 	rsb	r3, r7, #10
  41204e:	fb0b fb07 	mul.w	fp, fp, r7
  412052:	9a01      	ldr	r2, [sp, #4]
  412054:	fb03 bb02 	mla	fp, r3, r2, fp
  412058:	fb88 210b 	smull	r2, r1, r8, fp
  41205c:	ea4f 72eb 	mov.w	r2, fp, asr #31
  412060:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  412064:	fb00 f007 	mul.w	r0, r0, r7
  412068:	fb03 0606 	mla	r6, r3, r6, r0
  41206c:	fb88 3806 	smull	r3, r8, r8, r6
  412070:	17f6      	asrs	r6, r6, #31
  412072:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412076:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  412078:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  41207c:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  412080:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412084:	fb00 f608 	mul.w	r6, r0, r8
  412088:	fb03 f102 	mul.w	r1, r3, r2
  41208c:	eba6 0c01 	sub.w	ip, r6, r1
  412090:	882f      	ldrh	r7, [r5, #0]
  412092:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  412096:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  41209a:	fb00 f002 	mul.w	r0, r0, r2
  41209e:	fb03 f308 	mul.w	r3, r3, r8
  4120a2:	eb00 0e03 	add.w	lr, r0, r3
  4120a6:	886d      	ldrh	r5, [r5, #2]
  4120a8:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  4120ac:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  4120b0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4120b4:	fb09 fb08 	mul.w	fp, r9, r8
  4120b8:	ebab 0101 	sub.w	r1, fp, r1
  4120bc:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  4120c0:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4120c2:	fb09 f902 	mul.w	r9, r9, r2
  4120c6:	444b      	add	r3, r9
  4120c8:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  4120cc:	b21b      	sxth	r3, r3
    yt = res->y2;
  4120ce:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4120d2:	fb0a f202 	mul.w	r2, sl, r2
  4120d6:	1ab6      	subs	r6, r6, r2
  4120d8:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  4120dc:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4120de:	fb0a f808 	mul.w	r8, sl, r8
  4120e2:	4440      	add	r0, r8
  4120e4:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  4120e8:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4120ea:	ebab 0202 	sub.w	r2, fp, r2
  4120ee:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  4120f2:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4120f4:	44c8      	add	r8, r9
  4120f6:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  4120fa:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  4120fc:	460a      	mov	r2, r1
  4120fe:	42b9      	cmp	r1, r7
  412100:	bfa8      	it	ge
  412102:	463a      	movge	r2, r7
  412104:	46e0      	mov	r8, ip
  412106:	45b4      	cmp	ip, r6
  412108:	bfa8      	it	ge
  41210a:	46b0      	movge	r8, r6
  41210c:	4542      	cmp	r2, r8
  41210e:	bfa8      	it	ge
  412110:	4642      	movge	r2, r8
  412112:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  412114:	42b9      	cmp	r1, r7
  412116:	bfb8      	it	lt
  412118:	4639      	movlt	r1, r7
  41211a:	45b4      	cmp	ip, r6
  41211c:	bfb8      	it	lt
  41211e:	46b4      	movlt	ip, r6
  412120:	458c      	cmp	ip, r1
  412122:	bfb8      	it	lt
  412124:	468c      	movlt	ip, r1
  412126:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  41212a:	461a      	mov	r2, r3
  41212c:	42ab      	cmp	r3, r5
  41212e:	bfa8      	it	ge
  412130:	462a      	movge	r2, r5
  412132:	4671      	mov	r1, lr
  412134:	4586      	cmp	lr, r0
  412136:	bfa8      	it	ge
  412138:	4601      	movge	r1, r0
  41213a:	428a      	cmp	r2, r1
  41213c:	bfa8      	it	ge
  41213e:	460a      	movge	r2, r1
  412140:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  412142:	429d      	cmp	r5, r3
  412144:	bfb8      	it	lt
  412146:	461d      	movlt	r5, r3
  412148:	4586      	cmp	lr, r0
  41214a:	bfb8      	it	lt
  41214c:	4686      	movlt	lr, r0
  41214e:	45ae      	cmp	lr, r5
  412150:	bfb8      	it	lt
  412152:	46ae      	movlt	lr, r5
  412154:	f8a4 e006 	strh.w	lr, [r4, #6]
  412158:	e720      	b.n	411f9c <_lv_img_buf_get_transformed_area+0x24>
  41215a:	bf00      	nop
  41215c:	66666667 	.word	0x66666667
  412160:	00415ac5 	.word	0x00415ac5

00412164 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  412164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412168:	b089      	sub	sp, #36	; 0x24
  41216a:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  41216c:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  41216e:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  412172:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  412174:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  412178:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  41217a:	2a6f      	cmp	r2, #111	; 0x6f
  41217c:	dc28      	bgt.n	4121d0 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  41217e:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412182:	2a01      	cmp	r2, #1
  412184:	d422      	bmi.n	4121cc <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  412186:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  41218a:	b2f6      	uxtb	r6, r6
  41218c:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  412190:	2b6f      	cmp	r3, #111	; 0x6f
  412192:	dc34      	bgt.n	4121fe <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412194:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412198:	2b01      	cmp	r3, #1
  41219a:	d42d      	bmi.n	4121f8 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  41219c:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  4121a0:	b2ed      	uxtb	r5, r5
  4121a2:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  4121a6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  4121aa:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  4121ae:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4121b2:	f013 0f04 	tst.w	r3, #4
  4121b6:	f000 808b 	beq.w	4122d0 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  4121ba:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4121bc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4121c0:	fb03 2307 	mla	r3, r3, r7, r2
  4121c4:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  4121c6:	a807      	add	r0, sp, #28
  4121c8:	2202      	movs	r2, #2
  4121ca:	e034      	b.n	412236 <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  4121cc:	2700      	movs	r7, #0
  4121ce:	e7dc      	b.n	41218a <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  4121d0:	2a90      	cmp	r2, #144	; 0x90
  4121d2:	dd0e      	ble.n	4121f2 <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  4121d4:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  4121d8:	3201      	adds	r2, #1
  4121da:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  4121de:	4282      	cmp	r2, r0
  4121e0:	da05      	bge.n	4121ee <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  4121e2:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  4121e4:	b2f6      	uxtb	r6, r6
  4121e6:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  4121ea:	b2f6      	uxtb	r6, r6
  4121ec:	e7d0      	b.n	412190 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  4121ee:	2700      	movs	r7, #0
  4121f0:	e7f8      	b.n	4121e4 <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  4121f2:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  4121f4:	2700      	movs	r7, #0
  4121f6:	e7cb      	b.n	412190 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  4121f8:	f04f 0800 	mov.w	r8, #0
  4121fc:	e7d0      	b.n	4121a0 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  4121fe:	2b90      	cmp	r3, #144	; 0x90
  412200:	dd10      	ble.n	412224 <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412202:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412206:	3301      	adds	r3, #1
  412208:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  41220c:	4293      	cmp	r3, r2
  41220e:	da06      	bge.n	41221e <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  412210:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  412214:	b2ed      	uxtb	r5, r5
  412216:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  41221a:	b2ed      	uxtb	r5, r5
  41221c:	e7c3      	b.n	4121a6 <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  41221e:	f04f 0800 	mov.w	r8, #0
  412222:	e7f7      	b.n	412214 <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  412224:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  412226:	f04f 0800 	mov.w	r8, #0
  41222a:	e7bc      	b.n	4121a6 <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  41222c:	f813 eb01 	ldrb.w	lr, [r3], #1
  412230:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412234:	3a01      	subs	r2, #1
    while(len) {
  412236:	2a00      	cmp	r2, #0
  412238:	d1f8      	bne.n	41222c <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  41223a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  41223c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  412240:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412244:	fb03 f300 	mul.w	r3, r3, r0
  412248:	fb03 2308 	mla	r3, r3, r8, r2
  41224c:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  41224e:	a806      	add	r0, sp, #24
  412250:	2202      	movs	r2, #2
  412252:	e004      	b.n	41225e <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  412254:	f813 eb01 	ldrb.w	lr, [r3], #1
  412258:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  41225c:	3a01      	subs	r2, #1
    while(len) {
  41225e:	2a00      	cmp	r2, #0
  412260:	d1f8      	bne.n	412254 <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  412262:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412264:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  412268:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41226c:	fb03 f302 	mul.w	r3, r3, r2
  412270:	fb03 f308 	mul.w	r3, r3, r8
  412274:	fb02 3307 	mla	r3, r2, r7, r3
  412278:	4403      	add	r3, r0
  41227a:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  41227c:	a805      	add	r0, sp, #20
  41227e:	2202      	movs	r2, #2
  412280:	e004      	b.n	41228c <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  412282:	f813 eb01 	ldrb.w	lr, [r3], #1
  412286:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  41228a:	3a01      	subs	r2, #1
    while(len) {
  41228c:	2a00      	cmp	r2, #0
  41228e:	d1f8      	bne.n	412282 <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  412290:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412294:	f013 0f02 	tst.w	r3, #2
  412298:	d06a      	beq.n	412370 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  41229a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  41229c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4122a0:	fb03 f207 	mul.w	r2, r3, r7
  4122a4:	1887      	adds	r7, r0, r2
  4122a6:	441f      	add	r7, r3
  4122a8:	3f01      	subs	r7, #1
  4122aa:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  4122ae:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  4122b2:	fb07 f703 	mul.w	r7, r7, r3
  4122b6:	fb07 f808 	mul.w	r8, r7, r8
  4122ba:	eb00 0708 	add.w	r7, r0, r8
  4122be:	441f      	add	r7, r3
  4122c0:	3f01      	subs	r7, #1
  4122c2:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  4122c4:	4442      	add	r2, r8
  4122c6:	4402      	add	r2, r0
  4122c8:	4413      	add	r3, r2
  4122ca:	3b01      	subs	r3, #1
  4122cc:	5cc8      	ldrb	r0, [r1, r3]
  4122ce:	e052      	b.n	412376 <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  4122d0:	f104 0318 	add.w	r3, r4, #24
  4122d4:	4618      	mov	r0, r3
  4122d6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  4122da:	b2bf      	uxth	r7, r7
  4122dc:	4439      	add	r1, r7
  4122de:	8a23      	ldrh	r3, [r4, #16]
  4122e0:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  4122e4:	b209      	sxth	r1, r1
  4122e6:	9001      	str	r0, [sp, #4]
  4122e8:	f8df b300 	ldr.w	fp, [pc, #768]	; 4125ec <_lv_img_buf_transform_anti_alias+0x488>
  4122ec:	47d8      	blx	fp
  4122ee:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  4122f2:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  4122f6:	fa1f f888 	uxth.w	r8, r8
  4122fa:	4442      	add	r2, r8
  4122fc:	8a23      	ldrh	r3, [r4, #16]
  4122fe:	b212      	sxth	r2, r2
  412300:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  412304:	9801      	ldr	r0, [sp, #4]
  412306:	47d8      	blx	fp
  412308:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  41230c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412310:	4439      	add	r1, r7
  412312:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412316:	4442      	add	r2, r8
  412318:	8a23      	ldrh	r3, [r4, #16]
  41231a:	b212      	sxth	r2, r2
  41231c:	b209      	sxth	r1, r1
  41231e:	9801      	ldr	r0, [sp, #4]
  412320:	47d8      	blx	fp
  412322:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  412326:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41232a:	f013 0f02 	tst.w	r3, #2
  41232e:	d058      	beq.n	4123e2 <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  412330:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  412334:	9202      	str	r2, [sp, #8]
  412336:	fa17 f782 	uxtah	r7, r7, r2
  41233a:	b23f      	sxth	r7, r7
  41233c:	463b      	mov	r3, r7
  41233e:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  412342:	463a      	mov	r2, r7
  412344:	9303      	str	r3, [sp, #12]
  412346:	4619      	mov	r1, r3
  412348:	9801      	ldr	r0, [sp, #4]
  41234a:	4ba7      	ldr	r3, [pc, #668]	; (4125e8 <_lv_img_buf_transform_anti_alias+0x484>)
  41234c:	4798      	blx	r3
  41234e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412350:	fa18 f887 	uxtah	r8, r8, r7
  412354:	fa0f f888 	sxth.w	r8, r8
  412358:	4642      	mov	r2, r8
  41235a:	9902      	ldr	r1, [sp, #8]
  41235c:	9801      	ldr	r0, [sp, #4]
  41235e:	4fa2      	ldr	r7, [pc, #648]	; (4125e8 <_lv_img_buf_transform_anti_alias+0x484>)
  412360:	47b8      	blx	r7
  412362:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  412364:	4642      	mov	r2, r8
  412366:	9903      	ldr	r1, [sp, #12]
  412368:	9801      	ldr	r0, [sp, #4]
  41236a:	4b9f      	ldr	r3, [pc, #636]	; (4125e8 <_lv_img_buf_transform_anti_alias+0x484>)
  41236c:	4798      	blx	r3
  41236e:	e002      	b.n	412376 <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  412370:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412372:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412374:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  412376:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41237a:	f013 0f02 	tst.w	r3, #2
  41237e:	d036      	beq.n	4123ee <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  412380:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  412384:	fb03 f10b 	mul.w	r1, r3, fp
  412388:	fb06 110a 	mla	r1, r6, sl, r1
  41238c:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  412390:	fb03 f300 	mul.w	r3, r3, r0
  412394:	fb06 3307 	mla	r3, r6, r7, r3
  412398:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  41239c:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  4123a0:	fb02 f203 	mul.w	r2, r2, r3
  4123a4:	fb05 2201 	mla	r2, r5, r1, r2
  4123a8:	1212      	asrs	r2, r2, #8
  4123aa:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  4123ac:	2902      	cmp	r1, #2
  4123ae:	bf98      	it	ls
  4123b0:	2b02      	cmpls	r3, #2
  4123b2:	f240 8117 	bls.w	4125e4 <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  4123b6:	2902      	cmp	r1, #2
  4123b8:	d800      	bhi.n	4123bc <_lv_img_buf_transform_anti_alias+0x258>
  4123ba:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  4123bc:	2b02      	cmp	r3, #2
  4123be:	d800      	bhi.n	4123c2 <_lv_img_buf_transform_anti_alias+0x25e>
  4123c0:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4123c2:	f1ba 0f02 	cmp.w	sl, #2
  4123c6:	d910      	bls.n	4123ea <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  4123c8:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  4123ca:	f1bb 0f02 	cmp.w	fp, #2
  4123ce:	d800      	bhi.n	4123d2 <_lv_img_buf_transform_anti_alias+0x26e>
  4123d0:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  4123d2:	2f02      	cmp	r7, #2
  4123d4:	d800      	bhi.n	4123d8 <_lv_img_buf_transform_anti_alias+0x274>
  4123d6:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  4123d8:	2802      	cmp	r0, #2
  4123da:	d962      	bls.n	4124a2 <_lv_img_buf_transform_anti_alias+0x33e>
  4123dc:	4633      	mov	r3, r6
  4123de:	4616      	mov	r6, r2
  4123e0:	e008      	b.n	4123f4 <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  4123e2:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  4123e4:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  4123e6:	4683      	mov	fp, r0
  4123e8:	e7c5      	b.n	412376 <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4123ea:	2200      	movs	r2, #0
  4123ec:	e7ed      	b.n	4123ca <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  4123ee:	23ff      	movs	r3, #255	; 0xff
  4123f0:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  4123f2:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  4123f4:	2e00      	cmp	r6, #0
  4123f6:	d157      	bne.n	4124a8 <_lv_img_buf_transform_anti_alias+0x344>
  4123f8:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  4123fc:	2b00      	cmp	r3, #0
  4123fe:	f040 809c 	bne.w	41253a <_lv_img_buf_transform_anti_alias+0x3d6>
  412402:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412406:	2d00      	cmp	r5, #0
  412408:	f000 80e5 	beq.w	4125d6 <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  41240c:	2dff      	cmp	r5, #255	; 0xff
  41240e:	f000 80e5 	beq.w	4125dc <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412412:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412416:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  41241a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  41241e:	fb00 f101 	mul.w	r1, r0, r1
  412422:	fb05 1202 	mla	r2, r5, r2, r1
  412426:	3280      	adds	r2, #128	; 0x80
  412428:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41242c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412430:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412434:	f04f 0100 	mov.w	r1, #0
  412438:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41243c:	f009 0607 	and.w	r6, r9, #7
  412440:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412444:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  412448:	f003 0707 	and.w	r7, r3, #7
  41244c:	f3c3 3642 	ubfx	r6, r3, #13, #3
  412450:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  412454:	fb06 f600 	mul.w	r6, r6, r0
  412458:	fb02 6205 	mla	r2, r2, r5, r6
  41245c:	3280      	adds	r2, #128	; 0x80
  41245e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  412462:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  412466:	f3c2 6682 	ubfx	r6, r2, #26, #3
  41246a:	f366 0102 	bfi	r1, r6, #0, #3
  41246e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412472:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412476:	f3c9 2904 	ubfx	r9, r9, #8, #5
  41247a:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41247e:	fb03 f000 	mul.w	r0, r3, r0
  412482:	fb09 0505 	mla	r5, r9, r5, r0
  412486:	3580      	adds	r5, #128	; 0x80
  412488:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  41248c:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  412490:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  412494:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  412498:	82a1      	strh	r1, [r4, #20]

    return true;
  41249a:	2001      	movs	r0, #1
}
  41249c:	b009      	add	sp, #36	; 0x24
  41249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4124a2:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  4124a4:	23ff      	movs	r3, #255	; 0xff
  4124a6:	e7a5      	b.n	4123f4 <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  4124a8:	2eff      	cmp	r6, #255	; 0xff
  4124aa:	d0a7      	beq.n	4123fc <_lv_img_buf_transform_anti_alias+0x298>
  4124ac:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4124b0:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  4124b4:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  4124b8:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  4124bc:	fb07 f101 	mul.w	r1, r7, r1
  4124c0:	fb06 1202 	mla	r2, r6, r2, r1
  4124c4:	3280      	adds	r2, #128	; 0x80
  4124c6:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  4124ca:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  4124ce:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4124d2:	f04f 0100 	mov.w	r1, #0
  4124d6:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4124da:	f009 0e07 	and.w	lr, r9, #7
  4124de:	f3c9 3242 	ubfx	r2, r9, #13, #3
  4124e2:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4124e6:	f000 0c07 	and.w	ip, r0, #7
  4124ea:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  4124ee:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  4124f2:	fb0e fe07 	mul.w	lr, lr, r7
  4124f6:	fb02 e206 	mla	r2, r2, r6, lr
  4124fa:	3280      	adds	r2, #128	; 0x80
  4124fc:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412500:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412504:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412508:	f36e 0102 	bfi	r1, lr, #0, #3
  41250c:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412510:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412514:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412518:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41251c:	fb00 f707 	mul.w	r7, r0, r7
  412520:	fb09 7606 	mla	r6, r9, r6, r7
  412524:	3680      	adds	r6, #128	; 0x80
  412526:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  41252a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  41252e:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  412532:	f366 210c 	bfi	r1, r6, #8, #5
  412536:	4689      	mov	r9, r1
  412538:	e760      	b.n	4123fc <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  41253a:	2bff      	cmp	r3, #255	; 0xff
  41253c:	d048      	beq.n	4125d0 <_lv_img_buf_transform_anti_alias+0x46c>
  41253e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  412542:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412546:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  41254a:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  41254e:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412552:	fb07 f101 	mul.w	r1, r7, r1
  412556:	fb03 1202 	mla	r2, r3, r2, r1
  41255a:	3280      	adds	r2, #128	; 0x80
  41255c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412560:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412564:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412568:	f04f 0100 	mov.w	r1, #0
  41256c:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  412570:	f006 0e07 	and.w	lr, r6, #7
  412574:	f3c6 3242 	ubfx	r2, r6, #13, #3
  412578:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  41257c:	f000 0c07 	and.w	ip, r0, #7
  412580:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  412584:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412588:	fb0e fe07 	mul.w	lr, lr, r7
  41258c:	fb02 e203 	mla	r2, r2, r3, lr
  412590:	3280      	adds	r2, #128	; 0x80
  412592:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412596:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  41259a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  41259e:	f36e 0102 	bfi	r1, lr, #0, #3
  4125a2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4125a6:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4125aa:	f3c6 2604 	ubfx	r6, r6, #8, #5
  4125ae:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4125b2:	fb00 f707 	mul.w	r7, r0, r7
  4125b6:	fb06 7303 	mla	r3, r6, r3, r7
  4125ba:	3380      	adds	r3, #128	; 0x80
  4125bc:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4125c0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4125c4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4125c8:	f363 210c 	bfi	r1, r3, #8, #5
  4125cc:	460b      	mov	r3, r1
  4125ce:	e71a      	b.n	412406 <_lv_img_buf_transform_anti_alias+0x2a2>
  4125d0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4125d4:	e717      	b.n	412406 <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  4125d6:	82a3      	strh	r3, [r4, #20]
    return true;
  4125d8:	2001      	movs	r0, #1
  4125da:	e75f      	b.n	41249c <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  4125dc:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  4125e0:	2001      	movs	r0, #1
  4125e2:	e75b      	b.n	41249c <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  4125e4:	2000      	movs	r0, #0
  4125e6:	e759      	b.n	41249c <_lv_img_buf_transform_anti_alias+0x338>
  4125e8:	00411d55 	.word	0x00411d55
  4125ec:	00411c31 	.word	0x00411c31

004125f0 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  4125f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  4125f4:	4b4c      	ldr	r3, [pc, #304]	; (412728 <_lv_img_cache_open+0x138>)
  4125f6:	881f      	ldrh	r7, [r3, #0]
  4125f8:	2f00      	cmp	r7, #0
  4125fa:	f000 8091 	beq.w	412720 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  4125fe:	4b4b      	ldr	r3, [pc, #300]	; (41272c <_lv_img_cache_open+0x13c>)
  412600:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412602:	2300      	movs	r3, #0
  412604:	e001      	b.n	41260a <_lv_img_cache_open+0x1a>
  412606:	3301      	adds	r3, #1
  412608:	b29b      	uxth	r3, r3
  41260a:	42bb      	cmp	r3, r7
  41260c:	d20a      	bcs.n	412624 <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  41260e:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  412612:	00ac      	lsls	r4, r5, #2
  412614:	4434      	add	r4, r6
  412616:	6a25      	ldr	r5, [r4, #32]
  412618:	4a45      	ldr	r2, [pc, #276]	; (412730 <_lv_img_cache_open+0x140>)
  41261a:	4295      	cmp	r5, r2
  41261c:	dbf3      	blt.n	412606 <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  41261e:	3d01      	subs	r5, #1
  412620:	6225      	str	r5, [r4, #32]
  412622:	e7f0      	b.n	412606 <_lv_img_cache_open+0x16>
  412624:	4688      	mov	r8, r1
  412626:	4607      	mov	r7, r0
  412628:	2400      	movs	r4, #0
  41262a:	e00c      	b.n	412646 <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  41262c:	892a      	ldrh	r2, [r5, #8]
  41262e:	fa1f f388 	uxth.w	r3, r8
  412632:	429a      	cmp	r2, r3
  412634:	d020      	beq.n	412678 <_lv_img_cache_open+0x88>
        bool match = false;
  412636:	2300      	movs	r3, #0
  412638:	e002      	b.n	412640 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  41263a:	2801      	cmp	r0, #1
  41263c:	d015      	beq.n	41266a <_lv_img_cache_open+0x7a>
        bool match = false;
  41263e:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412640:	b9f3      	cbnz	r3, 412680 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  412642:	3401      	adds	r4, #1
  412644:	b2a4      	uxth	r4, r4
  412646:	4b38      	ldr	r3, [pc, #224]	; (412728 <_lv_img_cache_open+0x138>)
  412648:	881b      	ldrh	r3, [r3, #0]
  41264a:	429c      	cmp	r4, r3
  41264c:	d223      	bcs.n	412696 <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  41264e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412652:	009d      	lsls	r5, r3, #2
  412654:	4435      	add	r5, r6
  412656:	6868      	ldr	r0, [r5, #4]
  412658:	4b36      	ldr	r3, [pc, #216]	; (412734 <_lv_img_cache_open+0x144>)
  41265a:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  41265c:	2800      	cmp	r0, #0
  41265e:	d1ec      	bne.n	41263a <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412660:	686b      	ldr	r3, [r5, #4]
  412662:	42bb      	cmp	r3, r7
  412664:	d0e2      	beq.n	41262c <_lv_img_cache_open+0x3c>
        bool match = false;
  412666:	2300      	movs	r3, #0
  412668:	e7ea      	b.n	412640 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  41266a:	4639      	mov	r1, r7
  41266c:	6868      	ldr	r0, [r5, #4]
  41266e:	4b32      	ldr	r3, [pc, #200]	; (412738 <_lv_img_cache_open+0x148>)
  412670:	4798      	blx	r3
  412672:	b118      	cbz	r0, 41267c <_lv_img_cache_open+0x8c>
        bool match = false;
  412674:	2300      	movs	r3, #0
  412676:	e7e3      	b.n	412640 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412678:	2301      	movs	r3, #1
  41267a:	e7e1      	b.n	412640 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  41267c:	2301      	movs	r3, #1
  41267e:	e7df      	b.n	412640 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  412680:	696b      	ldr	r3, [r5, #20]
  412682:	6a2a      	ldr	r2, [r5, #32]
  412684:	4413      	add	r3, r2
  412686:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  412688:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  41268c:	dd04      	ble.n	412698 <_lv_img_cache_open+0xa8>
  41268e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  412692:	622b      	str	r3, [r5, #32]
  412694:	e000      	b.n	412698 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  412696:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  412698:	b115      	cbz	r5, 4126a0 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  41269a:	4628      	mov	r0, r5
  41269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4126a0:	4634      	mov	r4, r6
  4126a2:	2301      	movs	r3, #1
  4126a4:	e001      	b.n	4126aa <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  4126a6:	3301      	adds	r3, #1
  4126a8:	b29b      	uxth	r3, r3
  4126aa:	4a1f      	ldr	r2, [pc, #124]	; (412728 <_lv_img_cache_open+0x138>)
  4126ac:	8812      	ldrh	r2, [r2, #0]
  4126ae:	4293      	cmp	r3, r2
  4126b0:	d209      	bcs.n	4126c6 <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  4126b2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4126b6:	008a      	lsls	r2, r1, #2
  4126b8:	4432      	add	r2, r6
  4126ba:	6a10      	ldr	r0, [r2, #32]
  4126bc:	6a21      	ldr	r1, [r4, #32]
  4126be:	4288      	cmp	r0, r1
  4126c0:	daf1      	bge.n	4126a6 <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  4126c2:	4614      	mov	r4, r2
  4126c4:	e7ef      	b.n	4126a6 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  4126c6:	6863      	ldr	r3, [r4, #4]
  4126c8:	b113      	cbz	r3, 4126d0 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  4126ca:	4620      	mov	r0, r4
  4126cc:	4b1b      	ldr	r3, [pc, #108]	; (41273c <_lv_img_cache_open+0x14c>)
  4126ce:	4798      	blx	r3
    t_start                          = lv_tick_get();
  4126d0:	4b1b      	ldr	r3, [pc, #108]	; (412740 <_lv_img_cache_open+0x150>)
  4126d2:	4798      	blx	r3
  4126d4:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  4126d6:	2300      	movs	r3, #0
  4126d8:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  4126da:	4642      	mov	r2, r8
  4126dc:	4639      	mov	r1, r7
  4126de:	4620      	mov	r0, r4
  4126e0:	4b18      	ldr	r3, [pc, #96]	; (412744 <_lv_img_cache_open+0x154>)
  4126e2:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  4126e4:	b148      	cbz	r0, 4126fa <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  4126e6:	2300      	movs	r3, #0
  4126e8:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  4126ea:	6963      	ldr	r3, [r4, #20]
  4126ec:	b19b      	cbz	r3, 412716 <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  4126ee:	6963      	ldr	r3, [r4, #20]
  4126f0:	b9c3      	cbnz	r3, 412724 <_lv_img_cache_open+0x134>
  4126f2:	2301      	movs	r3, #1
  4126f4:	6163      	str	r3, [r4, #20]
    return cached_src;
  4126f6:	4625      	mov	r5, r4
  4126f8:	e7cf      	b.n	41269a <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  4126fa:	4620      	mov	r0, r4
  4126fc:	4b0f      	ldr	r3, [pc, #60]	; (41273c <_lv_img_cache_open+0x14c>)
  4126fe:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412700:	2120      	movs	r1, #32
  412702:	4620      	mov	r0, r4
  412704:	4e10      	ldr	r6, [pc, #64]	; (412748 <_lv_img_cache_open+0x158>)
  412706:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412708:	2124      	movs	r1, #36	; 0x24
  41270a:	4620      	mov	r0, r4
  41270c:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  41270e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  412712:	6223      	str	r3, [r4, #32]
        return NULL;
  412714:	e7c1      	b.n	41269a <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  412716:	4630      	mov	r0, r6
  412718:	4b0c      	ldr	r3, [pc, #48]	; (41274c <_lv_img_cache_open+0x15c>)
  41271a:	4798      	blx	r3
  41271c:	6160      	str	r0, [r4, #20]
  41271e:	e7e6      	b.n	4126ee <_lv_img_cache_open+0xfe>
        return NULL;
  412720:	2500      	movs	r5, #0
  412722:	e7ba      	b.n	41269a <_lv_img_cache_open+0xaa>
    return cached_src;
  412724:	4625      	mov	r5, r4
  412726:	e7b8      	b.n	41269a <_lv_img_cache_open+0xaa>
  412728:	2040c71e 	.word	0x2040c71e
  41272c:	2043a248 	.word	0x2043a248
  412730:	80000002 	.word	0x80000002
  412734:	0040ce8d 	.word	0x0040ce8d
  412738:	0041fd69 	.word	0x0041fd69
  41273c:	0041313d 	.word	0x0041313d
  412740:	0041480d 	.word	0x0041480d
  412744:	0041307d 	.word	0x0041307d
  412748:	00416169 	.word	0x00416169
  41274c:	00414829 	.word	0x00414829

00412750 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  412750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412754:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412756:	4b11      	ldr	r3, [pc, #68]	; (41279c <lv_img_cache_invalidate_src+0x4c>)
  412758:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  41275a:	2400      	movs	r4, #0
  41275c:	e00d      	b.n	41277a <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  41275e:	b113      	cbz	r3, 412766 <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  412760:	4628      	mov	r0, r5
  412762:	4b0f      	ldr	r3, [pc, #60]	; (4127a0 <lv_img_cache_invalidate_src+0x50>)
  412764:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412766:	2120      	movs	r1, #32
  412768:	4628      	mov	r0, r5
  41276a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4127a8 <lv_img_cache_invalidate_src+0x58>
  41276e:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  412770:	2124      	movs	r1, #36	; 0x24
  412772:	4628      	mov	r0, r5
  412774:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  412776:	3401      	adds	r4, #1
  412778:	b2a4      	uxth	r4, r4
  41277a:	4b0a      	ldr	r3, [pc, #40]	; (4127a4 <lv_img_cache_invalidate_src+0x54>)
  41277c:	881b      	ldrh	r3, [r3, #0]
  41277e:	429c      	cmp	r4, r3
  412780:	d209      	bcs.n	412796 <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  412782:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412786:	0098      	lsls	r0, r3, #2
  412788:	183d      	adds	r5, r7, r0
  41278a:	686b      	ldr	r3, [r5, #4]
  41278c:	42b3      	cmp	r3, r6
  41278e:	d0e6      	beq.n	41275e <lv_img_cache_invalidate_src+0xe>
  412790:	2e00      	cmp	r6, #0
  412792:	d1f0      	bne.n	412776 <lv_img_cache_invalidate_src+0x26>
  412794:	e7e3      	b.n	41275e <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  412796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41279a:	bf00      	nop
  41279c:	2043a248 	.word	0x2043a248
  4127a0:	0041313d 	.word	0x0041313d
  4127a4:	2040c71e 	.word	0x2040c71e
  4127a8:	00416169 	.word	0x00416169

004127ac <lv_img_cache_set_size>:
{
  4127ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4127ae:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  4127b0:	4b1c      	ldr	r3, [pc, #112]	; (412824 <lv_img_cache_set_size+0x78>)
  4127b2:	681b      	ldr	r3, [r3, #0]
  4127b4:	b133      	cbz	r3, 4127c4 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  4127b6:	2000      	movs	r0, #0
  4127b8:	4b1b      	ldr	r3, [pc, #108]	; (412828 <lv_img_cache_set_size+0x7c>)
  4127ba:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  4127bc:	4b19      	ldr	r3, [pc, #100]	; (412824 <lv_img_cache_set_size+0x78>)
  4127be:	6818      	ldr	r0, [r3, #0]
  4127c0:	4b1a      	ldr	r3, [pc, #104]	; (41282c <lv_img_cache_set_size+0x80>)
  4127c2:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  4127c4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4127c8:	0098      	lsls	r0, r3, #2
  4127ca:	4b19      	ldr	r3, [pc, #100]	; (412830 <lv_img_cache_set_size+0x84>)
  4127cc:	4798      	blx	r3
  4127ce:	4b15      	ldr	r3, [pc, #84]	; (412824 <lv_img_cache_set_size+0x78>)
  4127d0:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  4127d2:	4b18      	ldr	r3, [pc, #96]	; (412834 <lv_img_cache_set_size+0x88>)
  4127d4:	4798      	blx	r3
  4127d6:	b130      	cbz	r0, 4127e6 <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  4127d8:	4b12      	ldr	r3, [pc, #72]	; (412824 <lv_img_cache_set_size+0x78>)
  4127da:	681b      	ldr	r3, [r3, #0]
  4127dc:	b153      	cbz	r3, 4127f4 <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  4127de:	4b16      	ldr	r3, [pc, #88]	; (412838 <lv_img_cache_set_size+0x8c>)
  4127e0:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  4127e2:	2400      	movs	r4, #0
  4127e4:	e019      	b.n	41281a <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  4127e6:	4b0f      	ldr	r3, [pc, #60]	; (412824 <lv_img_cache_set_size+0x78>)
  4127e8:	681a      	ldr	r2, [r3, #0]
  4127ea:	2300      	movs	r3, #0
  4127ec:	4813      	ldr	r0, [pc, #76]	; (41283c <lv_img_cache_set_size+0x90>)
  4127ee:	4914      	ldr	r1, [pc, #80]	; (412840 <lv_img_cache_set_size+0x94>)
  4127f0:	4788      	blx	r1
  4127f2:	e7fe      	b.n	4127f2 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  4127f4:	2200      	movs	r2, #0
  4127f6:	4b10      	ldr	r3, [pc, #64]	; (412838 <lv_img_cache_set_size+0x8c>)
  4127f8:	801a      	strh	r2, [r3, #0]
        return;
  4127fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  4127fc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412800:	009d      	lsls	r5, r3, #2
  412802:	4f08      	ldr	r7, [pc, #32]	; (412824 <lv_img_cache_set_size+0x78>)
  412804:	6838      	ldr	r0, [r7, #0]
  412806:	2120      	movs	r1, #32
  412808:	4428      	add	r0, r5
  41280a:	4e0e      	ldr	r6, [pc, #56]	; (412844 <lv_img_cache_set_size+0x98>)
  41280c:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  41280e:	6838      	ldr	r0, [r7, #0]
  412810:	2124      	movs	r1, #36	; 0x24
  412812:	4428      	add	r0, r5
  412814:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  412816:	3401      	adds	r4, #1
  412818:	b2a4      	uxth	r4, r4
  41281a:	4b07      	ldr	r3, [pc, #28]	; (412838 <lv_img_cache_set_size+0x8c>)
  41281c:	881b      	ldrh	r3, [r3, #0]
  41281e:	429c      	cmp	r4, r3
  412820:	d3ec      	bcc.n	4127fc <lv_img_cache_set_size+0x50>
  412822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412824:	2043a248 	.word	0x2043a248
  412828:	00412751 	.word	0x00412751
  41282c:	00415cf9 	.word	0x00415cf9
  412830:	00415c35 	.word	0x00415c35
  412834:	0041552d 	.word	0x0041552d
  412838:	2040c71e 	.word	0x2040c71e
  41283c:	004235f0 	.word	0x004235f0
  412840:	00415539 	.word	0x00415539
  412844:	00416169 	.word	0x00416169

00412848 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  412848:	b530      	push	{r4, r5, lr}
  41284a:	b085      	sub	sp, #20
  41284c:	460c      	mov	r4, r1
  41284e:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  412850:	4608      	mov	r0, r1
  412852:	4b2b      	ldr	r3, [pc, #172]	; (412900 <lv_img_decoder_built_in_info+0xb8>)
  412854:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  412856:	b9d8      	cbnz	r0, 412890 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  412858:	7823      	ldrb	r3, [r4, #0]
  41285a:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  41285e:	3b04      	subs	r3, #4
  412860:	b2db      	uxtb	r3, r3
  412862:	2b0a      	cmp	r3, #10
  412864:	d849      	bhi.n	4128fa <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  412866:	6823      	ldr	r3, [r4, #0]
  412868:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41286c:	682a      	ldr	r2, [r5, #0]
  41286e:	f363 2294 	bfi	r2, r3, #10, #11
  412872:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  412874:	8863      	ldrh	r3, [r4, #2]
  412876:	f3c3 134a 	ubfx	r3, r3, #5, #11
  41287a:	886a      	ldrh	r2, [r5, #2]
  41287c:	f363 124f 	bfi	r2, r3, #5, #11
  412880:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  412882:	7822      	ldrb	r2, [r4, #0]
  412884:	782b      	ldrb	r3, [r5, #0]
  412886:	f362 0304 	bfi	r3, r2, #0, #5
  41288a:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  41288c:	2001      	movs	r0, #1
  41288e:	e004      	b.n	41289a <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  412890:	2801      	cmp	r0, #1
  412892:	d004      	beq.n	41289e <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  412894:	2802      	cmp	r0, #2
  412896:	d022      	beq.n	4128de <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  412898:	2000      	movs	r0, #0
}
  41289a:	b005      	add	sp, #20
  41289c:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  41289e:	2202      	movs	r2, #2
  4128a0:	4621      	mov	r1, r4
  4128a2:	a802      	add	r0, sp, #8
  4128a4:	4b17      	ldr	r3, [pc, #92]	; (412904 <lv_img_decoder_built_in_info+0xbc>)
  4128a6:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  4128a8:	b148      	cbz	r0, 4128be <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4128aa:	782b      	ldrb	r3, [r5, #0]
  4128ac:	f003 031f 	and.w	r3, r3, #31
  4128b0:	331c      	adds	r3, #28
  4128b2:	f003 031f 	and.w	r3, r3, #31
  4128b6:	2b0a      	cmp	r3, #10
  4128b8:	d80f      	bhi.n	4128da <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  4128ba:	2001      	movs	r0, #1
  4128bc:	e7ed      	b.n	41289a <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  4128be:	ab01      	add	r3, sp, #4
  4128c0:	2204      	movs	r2, #4
  4128c2:	4629      	mov	r1, r5
  4128c4:	a802      	add	r0, sp, #8
  4128c6:	4c10      	ldr	r4, [pc, #64]	; (412908 <lv_img_decoder_built_in_info+0xc0>)
  4128c8:	47a0      	blx	r4
  4128ca:	4604      	mov	r4, r0
            lv_fs_close(&file);
  4128cc:	a802      	add	r0, sp, #8
  4128ce:	4b0f      	ldr	r3, [pc, #60]	; (41290c <lv_img_decoder_built_in_info+0xc4>)
  4128d0:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  4128d2:	b914      	cbnz	r4, 4128da <lv_img_decoder_built_in_info+0x92>
  4128d4:	9b01      	ldr	r3, [sp, #4]
  4128d6:	2b04      	cmp	r3, #4
  4128d8:	d0e7      	beq.n	4128aa <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  4128da:	2000      	movs	r0, #0
  4128dc:	e7dd      	b.n	41289a <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  4128de:	682b      	ldr	r3, [r5, #0]
  4128e0:	2001      	movs	r0, #1
  4128e2:	f360 2394 	bfi	r3, r0, #10, #11
  4128e6:	602b      	str	r3, [r5, #0]
        header->h = 1;
  4128e8:	0c1a      	lsrs	r2, r3, #16
  4128ea:	f360 124f 	bfi	r2, r0, #5, #11
  4128ee:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  4128f0:	220b      	movs	r2, #11
  4128f2:	f362 0304 	bfi	r3, r2, #0, #5
  4128f6:	702b      	strb	r3, [r5, #0]
  4128f8:	e7cf      	b.n	41289a <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  4128fa:	2000      	movs	r0, #0
  4128fc:	e7cd      	b.n	41289a <lv_img_decoder_built_in_info+0x52>
  4128fe:	bf00      	nop
  412900:	0040ce8d 	.word	0x0040ce8d
  412904:	00415685 	.word	0x00415685
  412908:	00415601 	.word	0x00415601
  41290c:	004155d1 	.word	0x004155d1

00412910 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  412910:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412912:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  412914:	b1a4      	cbz	r4, 412940 <lv_img_decoder_built_in_close+0x30>
  412916:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  412918:	6820      	ldr	r0, [r4, #0]
  41291a:	b120      	cbz	r0, 412926 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  41291c:	4b09      	ldr	r3, [pc, #36]	; (412944 <lv_img_decoder_built_in_close+0x34>)
  41291e:	4798      	blx	r3
            lv_mem_free(user_data->f);
  412920:	6820      	ldr	r0, [r4, #0]
  412922:	4b09      	ldr	r3, [pc, #36]	; (412948 <lv_img_decoder_built_in_close+0x38>)
  412924:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  412926:	6860      	ldr	r0, [r4, #4]
  412928:	b108      	cbz	r0, 41292e <lv_img_decoder_built_in_close+0x1e>
  41292a:	4b07      	ldr	r3, [pc, #28]	; (412948 <lv_img_decoder_built_in_close+0x38>)
  41292c:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  41292e:	68a0      	ldr	r0, [r4, #8]
  412930:	b108      	cbz	r0, 412936 <lv_img_decoder_built_in_close+0x26>
  412932:	4b05      	ldr	r3, [pc, #20]	; (412948 <lv_img_decoder_built_in_close+0x38>)
  412934:	4798      	blx	r3

        lv_mem_free(user_data);
  412936:	4620      	mov	r0, r4
  412938:	4b03      	ldr	r3, [pc, #12]	; (412948 <lv_img_decoder_built_in_close+0x38>)
  41293a:	4798      	blx	r3

        dsc->user_data = NULL;
  41293c:	2300      	movs	r3, #0
  41293e:	61eb      	str	r3, [r5, #28]
  412940:	bd38      	pop	{r3, r4, r5, pc}
  412942:	bf00      	nop
  412944:	004155d1 	.word	0x004155d1
  412948:	00415cf9 	.word	0x00415cf9

0041294c <lv_img_decoder_built_in_open>:
{
  41294c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412950:	b082      	sub	sp, #8
  412952:	4607      	mov	r7, r0
  412954:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  412956:	7a8b      	ldrb	r3, [r1, #10]
  412958:	2b01      	cmp	r3, #1
  41295a:	d016      	beq.n	41298a <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  41295c:	b923      	cbnz	r3, 412968 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  41295e:	684b      	ldr	r3, [r1, #4]
  412960:	689b      	ldr	r3, [r3, #8]
  412962:	2b00      	cmp	r3, #0
  412964:	f000 810b 	beq.w	412b7e <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  412968:	7b20      	ldrb	r0, [r4, #12]
  41296a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  41296e:	1f03      	subs	r3, r0, #4
  412970:	b2db      	uxtb	r3, r3
  412972:	2b02      	cmp	r3, #2
  412974:	d851      	bhi.n	412a1a <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412976:	7aa3      	ldrb	r3, [r4, #10]
  412978:	2b00      	cmp	r3, #0
  41297a:	d14a      	bne.n	412a12 <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  41297c:	6863      	ldr	r3, [r4, #4]
  41297e:	689b      	ldr	r3, [r3, #8]
  412980:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412982:	2001      	movs	r0, #1
}
  412984:	b002      	add	sp, #8
  412986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  41298a:	6848      	ldr	r0, [r1, #4]
  41298c:	4b7d      	ldr	r3, [pc, #500]	; (412b84 <lv_img_decoder_built_in_open+0x238>)
  41298e:	4798      	blx	r3
  412990:	497d      	ldr	r1, [pc, #500]	; (412b88 <lv_img_decoder_built_in_open+0x23c>)
  412992:	4b7e      	ldr	r3, [pc, #504]	; (412b8c <lv_img_decoder_built_in_open+0x240>)
  412994:	4798      	blx	r3
  412996:	b9a8      	cbnz	r0, 4129c4 <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  412998:	2202      	movs	r2, #2
  41299a:	6861      	ldr	r1, [r4, #4]
  41299c:	4668      	mov	r0, sp
  41299e:	4b7c      	ldr	r3, [pc, #496]	; (412b90 <lv_img_decoder_built_in_open+0x244>)
  4129a0:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  4129a2:	b978      	cbnz	r0, 4129c4 <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  4129a4:	69e3      	ldr	r3, [r4, #28]
  4129a6:	b17b      	cbz	r3, 4129c8 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4129a8:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  4129aa:	2008      	movs	r0, #8
  4129ac:	4b79      	ldr	r3, [pc, #484]	; (412b94 <lv_img_decoder_built_in_open+0x248>)
  4129ae:	4798      	blx	r3
  4129b0:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  4129b2:	4b79      	ldr	r3, [pc, #484]	; (412b98 <lv_img_decoder_built_in_open+0x24c>)
  4129b4:	4798      	blx	r3
  4129b6:	b1d8      	cbz	r0, 4129f0 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  4129b8:	682b      	ldr	r3, [r5, #0]
  4129ba:	bb3b      	cbnz	r3, 412a0c <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  4129bc:	4621      	mov	r1, r4
  4129be:	4638      	mov	r0, r7
  4129c0:	4b76      	ldr	r3, [pc, #472]	; (412b9c <lv_img_decoder_built_in_open+0x250>)
  4129c2:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  4129c4:	2000      	movs	r0, #0
  4129c6:	e7dd      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  4129c8:	200c      	movs	r0, #12
  4129ca:	4b72      	ldr	r3, [pc, #456]	; (412b94 <lv_img_decoder_built_in_open+0x248>)
  4129cc:	4798      	blx	r3
  4129ce:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  4129d0:	4b71      	ldr	r3, [pc, #452]	; (412b98 <lv_img_decoder_built_in_open+0x24c>)
  4129d2:	4798      	blx	r3
  4129d4:	b928      	cbnz	r0, 4129e2 <lv_img_decoder_built_in_open+0x96>
  4129d6:	69e2      	ldr	r2, [r4, #28]
  4129d8:	2300      	movs	r3, #0
  4129da:	4871      	ldr	r0, [pc, #452]	; (412ba0 <lv_img_decoder_built_in_open+0x254>)
  4129dc:	4971      	ldr	r1, [pc, #452]	; (412ba4 <lv_img_decoder_built_in_open+0x258>)
  4129de:	4788      	blx	r1
  4129e0:	e7fe      	b.n	4129e0 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  4129e2:	69e0      	ldr	r0, [r4, #28]
  4129e4:	2800      	cmp	r0, #0
  4129e6:	d0ed      	beq.n	4129c4 <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  4129e8:	210c      	movs	r1, #12
  4129ea:	4b6f      	ldr	r3, [pc, #444]	; (412ba8 <lv_img_decoder_built_in_open+0x25c>)
  4129ec:	4798      	blx	r3
  4129ee:	e7db      	b.n	4129a8 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  4129f0:	682a      	ldr	r2, [r5, #0]
  4129f2:	2300      	movs	r3, #0
  4129f4:	486a      	ldr	r0, [pc, #424]	; (412ba0 <lv_img_decoder_built_in_open+0x254>)
  4129f6:	496b      	ldr	r1, [pc, #428]	; (412ba4 <lv_img_decoder_built_in_open+0x258>)
  4129f8:	4788      	blx	r1
  4129fa:	e7fe      	b.n	4129fa <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  4129fc:	f811 0b01 	ldrb.w	r0, [r1], #1
  412a00:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  412a04:	3a01      	subs	r2, #1
    while(len) {
  412a06:	2a00      	cmp	r2, #0
  412a08:	d1f8      	bne.n	4129fc <lv_img_decoder_built_in_open+0xb0>
  412a0a:	e7ad      	b.n	412968 <lv_img_decoder_built_in_open+0x1c>
  412a0c:	4669      	mov	r1, sp
  412a0e:	2208      	movs	r2, #8
  412a10:	e7f9      	b.n	412a06 <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  412a12:	2300      	movs	r3, #0
  412a14:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412a16:	2001      	movs	r0, #1
  412a18:	e7b4      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  412a1a:	1fc3      	subs	r3, r0, #7
  412a1c:	b2db      	uxtb	r3, r3
  412a1e:	2b03      	cmp	r3, #3
  412a20:	d909      	bls.n	412a36 <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  412a22:	f1a0 030b 	sub.w	r3, r0, #11
  412a26:	b2db      	uxtb	r3, r3
  412a28:	2b03      	cmp	r3, #3
  412a2a:	f200 80a2 	bhi.w	412b72 <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  412a2e:	2300      	movs	r3, #0
  412a30:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  412a32:	2001      	movs	r0, #1
  412a34:	e7a6      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  412a36:	4b5d      	ldr	r3, [pc, #372]	; (412bac <lv_img_decoder_built_in_open+0x260>)
  412a38:	4798      	blx	r3
  412a3a:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  412a3c:	2601      	movs	r6, #1
  412a3e:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  412a40:	69e3      	ldr	r3, [r4, #28]
  412a42:	b17b      	cbz	r3, 412a64 <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412a44:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  412a46:	2002      	movs	r0, #2
  412a48:	fa00 f00a 	lsl.w	r0, r0, sl
  412a4c:	4b51      	ldr	r3, [pc, #324]	; (412b94 <lv_img_decoder_built_in_open+0x248>)
  412a4e:	4798      	blx	r3
  412a50:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  412a52:	4b51      	ldr	r3, [pc, #324]	; (412b98 <lv_img_decoder_built_in_open+0x24c>)
  412a54:	4798      	blx	r3
  412a56:	b9f0      	cbnz	r0, 412a96 <lv_img_decoder_built_in_open+0x14a>
  412a58:	686a      	ldr	r2, [r5, #4]
  412a5a:	2300      	movs	r3, #0
  412a5c:	4850      	ldr	r0, [pc, #320]	; (412ba0 <lv_img_decoder_built_in_open+0x254>)
  412a5e:	4951      	ldr	r1, [pc, #324]	; (412ba4 <lv_img_decoder_built_in_open+0x258>)
  412a60:	4788      	blx	r1
  412a62:	e7fe      	b.n	412a62 <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412a64:	200c      	movs	r0, #12
  412a66:	4b4b      	ldr	r3, [pc, #300]	; (412b94 <lv_img_decoder_built_in_open+0x248>)
  412a68:	4798      	blx	r3
  412a6a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412a6c:	4b4a      	ldr	r3, [pc, #296]	; (412b98 <lv_img_decoder_built_in_open+0x24c>)
  412a6e:	4798      	blx	r3
  412a70:	b928      	cbnz	r0, 412a7e <lv_img_decoder_built_in_open+0x132>
  412a72:	69e2      	ldr	r2, [r4, #28]
  412a74:	2300      	movs	r3, #0
  412a76:	484a      	ldr	r0, [pc, #296]	; (412ba0 <lv_img_decoder_built_in_open+0x254>)
  412a78:	494a      	ldr	r1, [pc, #296]	; (412ba4 <lv_img_decoder_built_in_open+0x258>)
  412a7a:	4788      	blx	r1
  412a7c:	e7fe      	b.n	412a7c <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  412a7e:	69e0      	ldr	r0, [r4, #28]
  412a80:	b928      	cbnz	r0, 412a8e <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  412a82:	4621      	mov	r1, r4
  412a84:	4638      	mov	r0, r7
  412a86:	4b45      	ldr	r3, [pc, #276]	; (412b9c <lv_img_decoder_built_in_open+0x250>)
  412a88:	4798      	blx	r3
                return LV_RES_INV;
  412a8a:	2000      	movs	r0, #0
  412a8c:	e77a      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412a8e:	210c      	movs	r1, #12
  412a90:	4b45      	ldr	r3, [pc, #276]	; (412ba8 <lv_img_decoder_built_in_open+0x25c>)
  412a92:	4798      	blx	r3
  412a94:	e7d6      	b.n	412a44 <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  412a96:	4630      	mov	r0, r6
  412a98:	4b3e      	ldr	r3, [pc, #248]	; (412b94 <lv_img_decoder_built_in_open+0x248>)
  412a9a:	4798      	blx	r3
  412a9c:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  412a9e:	4b3e      	ldr	r3, [pc, #248]	; (412b98 <lv_img_decoder_built_in_open+0x24c>)
  412aa0:	4798      	blx	r3
  412aa2:	b158      	cbz	r0, 412abc <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  412aa4:	686b      	ldr	r3, [r5, #4]
  412aa6:	b17b      	cbz	r3, 412ac8 <lv_img_decoder_built_in_open+0x17c>
  412aa8:	68ab      	ldr	r3, [r5, #8]
  412aaa:	b16b      	cbz	r3, 412ac8 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412aac:	7aa3      	ldrb	r3, [r4, #10]
  412aae:	2b01      	cmp	r3, #1
  412ab0:	d010      	beq.n	412ad4 <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  412ab2:	6863      	ldr	r3, [r4, #4]
  412ab4:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  412ab8:	2300      	movs	r3, #0
  412aba:	e054      	b.n	412b66 <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  412abc:	68aa      	ldr	r2, [r5, #8]
  412abe:	2300      	movs	r3, #0
  412ac0:	4837      	ldr	r0, [pc, #220]	; (412ba0 <lv_img_decoder_built_in_open+0x254>)
  412ac2:	4938      	ldr	r1, [pc, #224]	; (412ba4 <lv_img_decoder_built_in_open+0x258>)
  412ac4:	4788      	blx	r1
  412ac6:	e7fe      	b.n	412ac6 <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  412ac8:	4621      	mov	r1, r4
  412aca:	4638      	mov	r0, r7
  412acc:	4b33      	ldr	r3, [pc, #204]	; (412b9c <lv_img_decoder_built_in_open+0x250>)
  412ace:	4798      	blx	r3
            return LV_RES_INV;
  412ad0:	2000      	movs	r0, #0
  412ad2:	e757      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  412ad4:	2104      	movs	r1, #4
  412ad6:	6828      	ldr	r0, [r5, #0]
  412ad8:	4b35      	ldr	r3, [pc, #212]	; (412bb0 <lv_img_decoder_built_in_open+0x264>)
  412ada:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  412adc:	2700      	movs	r7, #0
  412ade:	e022      	b.n	412b26 <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  412ae0:	2300      	movs	r3, #0
  412ae2:	2204      	movs	r2, #4
  412ae4:	4669      	mov	r1, sp
  412ae6:	6828      	ldr	r0, [r5, #0]
  412ae8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 412bb4 <lv_img_decoder_built_in_open+0x268>
  412aec:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  412aee:	6869      	ldr	r1, [r5, #4]
  412af0:	f89d 0002 	ldrb.w	r0, [sp, #2]
  412af4:	f89d 3001 	ldrb.w	r3, [sp, #1]
  412af8:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  412afc:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  412b00:	08c0      	lsrs	r0, r0, #3
  412b02:	08d2      	lsrs	r2, r2, #3
  412b04:	f3c3 0382 	ubfx	r3, r3, #2, #3
  412b08:	f36e 0902 	bfi	r9, lr, #0, #3
  412b0c:	f360 09c7 	bfi	r9, r0, #3, #5
  412b10:	f362 290c 	bfi	r9, r2, #8, #5
  412b14:	f363 394f 	bfi	r9, r3, #13, #3
  412b18:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  412b1c:	68ab      	ldr	r3, [r5, #8]
  412b1e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  412b22:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  412b24:	3701      	adds	r7, #1
  412b26:	42b7      	cmp	r7, r6
  412b28:	d3da      	bcc.n	412ae0 <lv_img_decoder_built_in_open+0x194>
  412b2a:	e01e      	b.n	412b6a <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  412b2c:	6869      	ldr	r1, [r5, #4]
  412b2e:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  412b32:	f890 e002 	ldrb.w	lr, [r0, #2]
  412b36:	7842      	ldrb	r2, [r0, #1]
  412b38:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  412b3c:	ea4f 1952 	mov.w	r9, r2, lsr #5
  412b40:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  412b44:	08ff      	lsrs	r7, r7, #3
  412b46:	f3c2 0282 	ubfx	r2, r2, #2, #3
  412b4a:	f369 0802 	bfi	r8, r9, #0, #3
  412b4e:	f36e 08c7 	bfi	r8, lr, #3, #5
  412b52:	f367 280c 	bfi	r8, r7, #8, #5
  412b56:	f362 384f 	bfi	r8, r2, #13, #3
  412b5a:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  412b5e:	68aa      	ldr	r2, [r5, #8]
  412b60:	78c1      	ldrb	r1, [r0, #3]
  412b62:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  412b64:	3301      	adds	r3, #1
  412b66:	42b3      	cmp	r3, r6
  412b68:	d3e0      	bcc.n	412b2c <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  412b6a:	2300      	movs	r3, #0
  412b6c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  412b6e:	2001      	movs	r0, #1
  412b70:	e708      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  412b72:	4621      	mov	r1, r4
  412b74:	4638      	mov	r0, r7
  412b76:	4b09      	ldr	r3, [pc, #36]	; (412b9c <lv_img_decoder_built_in_open+0x250>)
  412b78:	4798      	blx	r3
        return LV_RES_INV;
  412b7a:	2000      	movs	r0, #0
  412b7c:	e702      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  412b7e:	2000      	movs	r0, #0
  412b80:	e700      	b.n	412984 <lv_img_decoder_built_in_open+0x38>
  412b82:	bf00      	nop
  412b84:	00415745 	.word	0x00415745
  412b88:	00423790 	.word	0x00423790
  412b8c:	0041fd69 	.word	0x0041fd69
  412b90:	00415685 	.word	0x00415685
  412b94:	00415c35 	.word	0x00415c35
  412b98:	0041552d 	.word	0x0041552d
  412b9c:	00412911 	.word	0x00412911
  412ba0:	004235f0 	.word	0x004235f0
  412ba4:	00415539 	.word	0x00415539
  412ba8:	00416169 	.word	0x00416169
  412bac:	0040cbc9 	.word	0x0040cbc9
  412bb0:	0041563d 	.word	0x0041563d
  412bb4:	00415601 	.word	0x00415601

00412bb8 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  412bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412bbc:	b083      	sub	sp, #12
  412bbe:	4680      	mov	r8, r0
  412bc0:	4689      	mov	r9, r1
  412bc2:	4614      	mov	r4, r2
  412bc4:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412bc6:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412bc8:	7b00      	ldrb	r0, [r0, #12]
  412bca:	f000 001f 	and.w	r0, r0, #31
  412bce:	4b15      	ldr	r3, [pc, #84]	; (412c24 <lv_img_decoder_built_in_line_true_color+0x6c>)
  412bd0:	4798      	blx	r3
  412bd2:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  412bd4:	f8d8 100c 	ldr.w	r1, [r8, #12]
  412bd8:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412bdc:	fb01 9104 	mla	r1, r1, r4, r9
  412be0:	fb01 f100 	mul.w	r1, r1, r0
  412be4:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  412be6:	3104      	adds	r1, #4
  412be8:	6830      	ldr	r0, [r6, #0]
  412bea:	4b0f      	ldr	r3, [pc, #60]	; (412c28 <lv_img_decoder_built_in_line_true_color+0x70>)
  412bec:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  412bee:	b118      	cbz	r0, 412bf8 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  412bf0:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  412bf2:	b003      	add	sp, #12
  412bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  412bf8:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  412bfc:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  412c00:	ab02      	add	r3, sp, #8
  412c02:	2200      	movs	r2, #0
  412c04:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  412c08:	462a      	mov	r2, r5
  412c0a:	990a      	ldr	r1, [sp, #40]	; 0x28
  412c0c:	6830      	ldr	r0, [r6, #0]
  412c0e:	4c07      	ldr	r4, [pc, #28]	; (412c2c <lv_img_decoder_built_in_line_true_color+0x74>)
  412c10:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  412c12:	b920      	cbnz	r0, 412c1e <lv_img_decoder_built_in_line_true_color+0x66>
  412c14:	9b01      	ldr	r3, [sp, #4]
  412c16:	429d      	cmp	r5, r3
  412c18:	d1eb      	bne.n	412bf2 <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  412c1a:	2001      	movs	r0, #1
  412c1c:	e7e9      	b.n	412bf2 <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  412c1e:	2000      	movs	r0, #0
  412c20:	e7e7      	b.n	412bf2 <lv_img_decoder_built_in_line_true_color+0x3a>
  412c22:	bf00      	nop
  412c24:	0040cbc9 	.word	0x0040cbc9
  412c28:	0041563d 	.word	0x0041563d
  412c2c:	00415601 	.word	0x00415601

00412c30 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  412c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412c34:	b08b      	sub	sp, #44	; 0x2c
  412c36:	4680      	mov	r8, r0
  412c38:	460c      	mov	r4, r1
  412c3a:	4693      	mov	fp, r2
  412c3c:	461e      	mov	r6, r3
  412c3e:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  412c40:	2700      	movs	r7, #0
  412c42:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  412c46:	23ff      	movs	r3, #255	; 0xff
  412c48:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  412c4c:	4b6a      	ldr	r3, [pc, #424]	; (412df8 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  412c4e:	f853 2b04 	ldr.w	r2, [r3], #4
  412c52:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  412c54:	f10d 0e10 	add.w	lr, sp, #16
  412c58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  412c5a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  412c5e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412c62:	463b      	mov	r3, r7
  412c64:	e008      	b.n	412c78 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  412c66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  412c6a:	b281      	uxth	r1, r0
  412c6c:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  412c6e:	3201      	adds	r2, #1
  412c70:	0a09      	lsrs	r1, r1, #8
  412c72:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  412c74:	3301      	adds	r3, #1
  412c76:	b21b      	sxth	r3, r3
  412c78:	42b3      	cmp	r3, r6
  412c7a:	dbf4      	blt.n	412c66 <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  412c7c:	f898 000c 	ldrb.w	r0, [r8, #12]
  412c80:	f000 001f 	and.w	r0, r0, #31
  412c84:	4b5d      	ldr	r3, [pc, #372]	; (412dfc <lv_img_decoder_built_in_line_alpha+0x1cc>)
  412c86:	4798      	blx	r3
  412c88:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412c8a:	2701      	movs	r7, #1
  412c8c:	4087      	lsls	r7, r0
  412c8e:	b2bf      	uxth	r7, r7
  412c90:	3f01      	subs	r7, #1
  412c92:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  412c94:	f898 300c 	ldrb.w	r3, [r8, #12]
  412c98:	f003 031f 	and.w	r3, r3, #31
  412c9c:	3b0b      	subs	r3, #11
  412c9e:	2b03      	cmp	r3, #3
  412ca0:	d864      	bhi.n	412d6c <lv_img_decoder_built_in_line_alpha+0x13c>
  412ca2:	e8df f003 	tbb	[pc, r3]
  412ca6:	2802      	.short	0x2802
  412ca8:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412cae:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412cb2:	10da      	asrs	r2, r3, #3
  412cb4:	b211      	sxth	r1, r2
  412cb6:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  412cb8:	f013 0f07 	tst.w	r3, #7
  412cbc:	d001      	beq.n	412cc2 <lv_img_decoder_built_in_line_alpha+0x92>
  412cbe:	1c53      	adds	r3, r2, #1
  412cc0:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  412cc2:	10e3      	asrs	r3, r4, #3
  412cc4:	9a01      	ldr	r2, [sp, #4]
  412cc6:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  412cca:	43e4      	mvns	r4, r4
  412ccc:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  412cd0:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412cd4:	f8d8 301c 	ldr.w	r3, [r8, #28]
  412cd8:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412cda:	9801      	ldr	r0, [sp, #4]
  412cdc:	4b48      	ldr	r3, [pc, #288]	; (412e00 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  412cde:	4798      	blx	r3
  412ce0:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412ce2:	f898 300a 	ldrb.w	r3, [r8, #10]
  412ce6:	2b00      	cmp	r3, #0
  412ce8:	d149      	bne.n	412d7e <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  412cea:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  412cee:	689b      	ldr	r3, [r3, #8]
  412cf0:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  412cf2:	2100      	movs	r1, #0
  412cf4:	e05d      	b.n	412db2 <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412cfa:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412cfe:	109a      	asrs	r2, r3, #2
  412d00:	b211      	sxth	r1, r2
  412d02:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  412d04:	f013 0f03 	tst.w	r3, #3
  412d08:	d001      	beq.n	412d0e <lv_img_decoder_built_in_line_alpha+0xde>
  412d0a:	1c53      	adds	r3, r2, #1
  412d0c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  412d0e:	10a3      	asrs	r3, r4, #2
  412d10:	9a01      	ldr	r2, [sp, #4]
  412d12:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  412d16:	b2a4      	uxth	r4, r4
  412d18:	43e4      	mvns	r4, r4
  412d1a:	f004 0403 	and.w	r4, r4, #3
  412d1e:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  412d20:	f10d 0a20 	add.w	sl, sp, #32
            break;
  412d24:	e7d6      	b.n	412cd4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412d2a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412d2e:	105a      	asrs	r2, r3, #1
  412d30:	b211      	sxth	r1, r2
  412d32:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  412d34:	f013 0f01 	tst.w	r3, #1
  412d38:	d001      	beq.n	412d3e <lv_img_decoder_built_in_line_alpha+0x10e>
  412d3a:	1c53      	adds	r3, r2, #1
  412d3c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  412d3e:	1063      	asrs	r3, r4, #1
  412d40:	9a01      	ldr	r2, [sp, #4]
  412d42:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  412d46:	f014 0f01 	tst.w	r4, #1
  412d4a:	d114      	bne.n	412d76 <lv_img_decoder_built_in_line_alpha+0x146>
  412d4c:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  412d4e:	f10d 0a10 	add.w	sl, sp, #16
  412d52:	e7bf      	b.n	412cd4 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412d58:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412d5c:	b29a      	uxth	r2, r3
  412d5e:	b21b      	sxth	r3, r3
  412d60:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  412d62:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  412d66:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  412d68:	46a2      	mov	sl, r4
            break;
  412d6a:	e7b3      	b.n	412cd4 <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  412d6c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  412d6e:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  412d70:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  412d72:	46a2      	mov	sl, r4
  412d74:	e7ae      	b.n	412cd4 <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  412d76:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  412d78:	f10d 0a10 	add.w	sl, sp, #16
  412d7c:	e7aa      	b.n	412cd4 <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412d7e:	f10b 0104 	add.w	r1, fp, #4
  412d82:	9b03      	ldr	r3, [sp, #12]
  412d84:	6818      	ldr	r0, [r3, #0]
  412d86:	4b1f      	ldr	r3, [pc, #124]	; (412e04 <lv_img_decoder_built_in_line_alpha+0x1d4>)
  412d88:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412d8a:	2300      	movs	r3, #0
  412d8c:	9a01      	ldr	r2, [sp, #4]
  412d8e:	9902      	ldr	r1, [sp, #8]
  412d90:	9803      	ldr	r0, [sp, #12]
  412d92:	6800      	ldr	r0, [r0, #0]
  412d94:	f8df b074 	ldr.w	fp, [pc, #116]	; 412e0c <lv_img_decoder_built_in_line_alpha+0x1dc>
  412d98:	47d8      	blx	fp
        data_tmp = fs_buf;
  412d9a:	f8dd b008 	ldr.w	fp, [sp, #8]
  412d9e:	e7a8      	b.n	412cf2 <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412da0:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  412da4:	eba4 0409 	sub.w	r4, r4, r9
  412da8:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412daa:	2c00      	cmp	r4, #0
  412dac:	db17      	blt.n	412dde <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  412dae:	3101      	adds	r1, #1
  412db0:	b209      	sxth	r1, r1
  412db2:	42b1      	cmp	r1, r6
  412db4:	da19      	bge.n	412dea <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412db6:	f89b 3000 	ldrb.w	r3, [fp]
  412dba:	fa07 f204 	lsl.w	r2, r7, r4
  412dbe:	4013      	ands	r3, r2
  412dc0:	4123      	asrs	r3, r4
  412dc2:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412dc6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  412dca:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  412dcc:	f898 200c 	ldrb.w	r2, [r8, #12]
  412dd0:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412dd4:	2a0e      	cmp	r2, #14
  412dd6:	d0e3      	beq.n	412da0 <lv_img_decoder_built_in_line_alpha+0x170>
  412dd8:	f81a e00e 	ldrb.w	lr, [sl, lr]
  412ddc:	e7e0      	b.n	412da0 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  412dde:	f1c9 0408 	rsb	r4, r9, #8
  412de2:	b264      	sxtb	r4, r4
            data_tmp++;
  412de4:	f10b 0b01 	add.w	fp, fp, #1
  412de8:	e7e1      	b.n	412dae <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412dea:	9802      	ldr	r0, [sp, #8]
  412dec:	4b06      	ldr	r3, [pc, #24]	; (412e08 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  412dee:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  412df0:	2001      	movs	r0, #1
  412df2:	b00b      	add	sp, #44	; 0x2c
  412df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412df8:	0042377c 	.word	0x0042377c
  412dfc:	0040cbc9 	.word	0x0040cbc9
  412e00:	00415fdd 	.word	0x00415fdd
  412e04:	0041563d 	.word	0x0041563d
  412e08:	00415d8d 	.word	0x00415d8d
  412e0c:	00415601 	.word	0x00415601

00412e10 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  412e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412e14:	b083      	sub	sp, #12
  412e16:	4682      	mov	sl, r0
  412e18:	460c      	mov	r4, r1
  412e1a:	4616      	mov	r6, r2
  412e1c:	4699      	mov	r9, r3
  412e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412e20:	7b00      	ldrb	r0, [r0, #12]
  412e22:	f000 001f 	and.w	r0, r0, #31
  412e26:	4b5d      	ldr	r3, [pc, #372]	; (412f9c <lv_img_decoder_built_in_line_indexed+0x18c>)
  412e28:	4798      	blx	r3
  412e2a:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412e2c:	2701      	movs	r7, #1
  412e2e:	4087      	lsls	r7, r0
  412e30:	b2bf      	uxth	r7, r7
  412e32:	3f01      	subs	r7, #1
  412e34:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  412e36:	f89a 300c 	ldrb.w	r3, [sl, #12]
  412e3a:	f003 031f 	and.w	r3, r3, #31
  412e3e:	3b07      	subs	r3, #7
  412e40:	2b03      	cmp	r3, #3
  412e42:	d868      	bhi.n	412f16 <lv_img_decoder_built_in_line_indexed+0x106>
  412e44:	e8df f003 	tbb	[pc, r3]
  412e48:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412e4c:	f8da 300c 	ldr.w	r3, [sl, #12]
  412e50:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412e54:	10da      	asrs	r2, r3, #3
  412e56:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  412e5a:	f013 0f07 	tst.w	r3, #7
  412e5e:	d001      	beq.n	412e64 <lv_img_decoder_built_in_line_indexed+0x54>
  412e60:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  412e64:	10e3      	asrs	r3, r4, #3
  412e66:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  412e6a:	f106 0308 	add.w	r3, r6, #8
  412e6e:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  412e70:	43e4      	mvns	r4, r4
  412e72:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412e76:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412e7a:	4658      	mov	r0, fp
  412e7c:	4b48      	ldr	r3, [pc, #288]	; (412fa0 <lv_img_decoder_built_in_line_indexed+0x190>)
  412e7e:	4798      	blx	r3
  412e80:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412e82:	f89a 300a 	ldrb.w	r3, [sl, #10]
  412e86:	2b00      	cmp	r3, #0
  412e88:	d14c      	bne.n	412f24 <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  412e8a:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  412e8e:	689b      	ldr	r3, [r3, #8]
  412e90:	9a01      	ldr	r2, [sp, #4]
  412e92:	441a      	add	r2, r3
  412e94:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  412e96:	2100      	movs	r1, #0
  412e98:	e056      	b.n	412f48 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412e9a:	f8da 300c 	ldr.w	r3, [sl, #12]
  412e9e:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412ea2:	109a      	asrs	r2, r3, #2
  412ea4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  412ea8:	f013 0f03 	tst.w	r3, #3
  412eac:	d001      	beq.n	412eb2 <lv_img_decoder_built_in_line_indexed+0xa2>
  412eae:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  412eb2:	10a3      	asrs	r3, r4, #2
  412eb4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  412eb8:	f106 0310 	add.w	r3, r6, #16
  412ebc:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  412ebe:	b2a4      	uxth	r4, r4
  412ec0:	43e4      	mvns	r4, r4
  412ec2:	f004 0403 	and.w	r4, r4, #3
  412ec6:	0064      	lsls	r4, r4, #1
            break;
  412ec8:	e7d5      	b.n	412e76 <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412eca:	f8da 300c 	ldr.w	r3, [sl, #12]
  412ece:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412ed2:	105a      	asrs	r2, r3, #1
  412ed4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  412ed8:	f013 0f01 	tst.w	r3, #1
  412edc:	d001      	beq.n	412ee2 <lv_img_decoder_built_in_line_indexed+0xd2>
  412ede:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  412ee2:	1063      	asrs	r3, r4, #1
  412ee4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  412ee8:	f106 0340 	add.w	r3, r6, #64	; 0x40
  412eec:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  412eee:	f014 0f01 	tst.w	r4, #1
  412ef2:	d115      	bne.n	412f20 <lv_img_decoder_built_in_line_indexed+0x110>
  412ef4:	2404      	movs	r4, #4
  412ef6:	e7be      	b.n	412e76 <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412ef8:	f8da 300c 	ldr.w	r3, [sl, #12]
  412efc:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  412f00:	fa1f f38b 	uxth.w	r3, fp
  412f04:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  412f08:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  412f0c:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  412f10:	9301      	str	r3, [sp, #4]
            pos = 0;
  412f12:	2400      	movs	r4, #0
            break;
  412f14:	e7af      	b.n	412e76 <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  412f16:	2300      	movs	r3, #0
  412f18:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  412f1a:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  412f1c:	469b      	mov	fp, r3
  412f1e:	e7aa      	b.n	412e76 <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  412f20:	2400      	movs	r4, #0
  412f22:	e7a8      	b.n	412e76 <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412f24:	9901      	ldr	r1, [sp, #4]
  412f26:	3104      	adds	r1, #4
  412f28:	6830      	ldr	r0, [r6, #0]
  412f2a:	4b1e      	ldr	r3, [pc, #120]	; (412fa4 <lv_img_decoder_built_in_line_indexed+0x194>)
  412f2c:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412f2e:	2300      	movs	r3, #0
  412f30:	465a      	mov	r2, fp
  412f32:	f8dd b000 	ldr.w	fp, [sp]
  412f36:	4659      	mov	r1, fp
  412f38:	6830      	ldr	r0, [r6, #0]
  412f3a:	f8df a070 	ldr.w	sl, [pc, #112]	; 412fac <lv_img_decoder_built_in_line_indexed+0x19c>
  412f3e:	47d0      	blx	sl
        data_tmp = fs_buf;
  412f40:	46de      	mov	lr, fp
  412f42:	e7a8      	b.n	412e96 <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412f44:	3101      	adds	r1, #1
  412f46:	b209      	sxth	r1, r1
  412f48:	4549      	cmp	r1, r9
  412f4a:	da20      	bge.n	412f8e <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412f4c:	f89e 3000 	ldrb.w	r3, [lr]
  412f50:	fa07 f204 	lsl.w	r2, r7, r4
  412f54:	4013      	ands	r3, r2
  412f56:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  412f58:	6870      	ldr	r0, [r6, #4]
  412f5a:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  412f5c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  412f60:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  412f64:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  412f66:	f102 0c01 	add.w	ip, r2, #1
  412f6a:	0a00      	lsrs	r0, r0, #8
  412f6c:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  412f70:	3202      	adds	r2, #2
  412f72:	68b0      	ldr	r0, [r6, #8]
  412f74:	5cc3      	ldrb	r3, [r0, r3]
  412f76:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  412f78:	eba4 0408 	sub.w	r4, r4, r8
  412f7c:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412f7e:	2c00      	cmp	r4, #0
  412f80:	dae0      	bge.n	412f44 <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  412f82:	f1c8 0408 	rsb	r4, r8, #8
  412f86:	b264      	sxtb	r4, r4
            data_tmp++;
  412f88:	f10e 0e01 	add.w	lr, lr, #1
  412f8c:	e7da      	b.n	412f44 <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  412f8e:	9800      	ldr	r0, [sp, #0]
  412f90:	4b05      	ldr	r3, [pc, #20]	; (412fa8 <lv_img_decoder_built_in_line_indexed+0x198>)
  412f92:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  412f94:	2001      	movs	r0, #1
  412f96:	b003      	add	sp, #12
  412f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  412f9c:	0040cbc9 	.word	0x0040cbc9
  412fa0:	00415fdd 	.word	0x00415fdd
  412fa4:	0041563d 	.word	0x0041563d
  412fa8:	00415d8d 	.word	0x00415d8d
  412fac:	00415601 	.word	0x00415601

00412fb0 <lv_img_decoder_built_in_read_line>:
{
  412fb0:	b530      	push	{r4, r5, lr}
  412fb2:	b083      	sub	sp, #12
  412fb4:	4608      	mov	r0, r1
  412fb6:	4611      	mov	r1, r2
  412fb8:	461a      	mov	r2, r3
  412fba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  412fbe:	7b04      	ldrb	r4, [r0, #12]
  412fc0:	f004 041f 	and.w	r4, r4, #31
  412fc4:	1f25      	subs	r5, r4, #4
  412fc6:	b2ed      	uxtb	r5, r5
  412fc8:	2d02      	cmp	r5, #2
  412fca:	d80a      	bhi.n	412fe2 <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412fcc:	7a84      	ldrb	r4, [r0, #10]
  412fce:	2c01      	cmp	r4, #1
  412fd0:	d002      	beq.n	412fd8 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  412fd2:	2000      	movs	r0, #0
}
  412fd4:	b003      	add	sp, #12
  412fd6:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  412fd8:	9c07      	ldr	r4, [sp, #28]
  412fda:	9400      	str	r4, [sp, #0]
  412fdc:	4c0b      	ldr	r4, [pc, #44]	; (41300c <lv_img_decoder_built_in_read_line+0x5c>)
  412fde:	47a0      	blx	r4
  412fe0:	e7f8      	b.n	412fd4 <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  412fe2:	f1a4 050b 	sub.w	r5, r4, #11
  412fe6:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  412fe8:	2d03      	cmp	r5, #3
  412fea:	d905      	bls.n	412ff8 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  412fec:	3c07      	subs	r4, #7
  412fee:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  412ff0:	2c03      	cmp	r4, #3
  412ff2:	d906      	bls.n	413002 <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  412ff4:	2000      	movs	r0, #0
  412ff6:	e7ed      	b.n	412fd4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  412ff8:	9c07      	ldr	r4, [sp, #28]
  412ffa:	9400      	str	r4, [sp, #0]
  412ffc:	4c04      	ldr	r4, [pc, #16]	; (413010 <lv_img_decoder_built_in_read_line+0x60>)
  412ffe:	47a0      	blx	r4
  413000:	e7e8      	b.n	412fd4 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  413002:	9c07      	ldr	r4, [sp, #28]
  413004:	9400      	str	r4, [sp, #0]
  413006:	4c03      	ldr	r4, [pc, #12]	; (413014 <lv_img_decoder_built_in_read_line+0x64>)
  413008:	47a0      	blx	r4
  41300a:	e7e3      	b.n	412fd4 <lv_img_decoder_built_in_read_line+0x24>
  41300c:	00412bb9 	.word	0x00412bb9
  413010:	00412c31 	.word	0x00412c31
  413014:	00412e11 	.word	0x00412e11

00413018 <lv_img_decoder_get_info>:
{
  413018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41301a:	4607      	mov	r7, r0
  41301c:	460e      	mov	r6, r1
    header->always_zero = 0;
  41301e:	780b      	ldrb	r3, [r1, #0]
  413020:	f36f 1347 	bfc	r3, #5, #3
  413024:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  413026:	884b      	ldrh	r3, [r1, #2]
  413028:	f36f 134f 	bfc	r3, #5, #11
  41302c:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  41302e:	680b      	ldr	r3, [r1, #0]
  413030:	f36f 2394 	bfc	r3, #10, #11
  413034:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  413036:	f36f 0304 	bfc	r3, #0, #5
  41303a:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41303c:	480c      	ldr	r0, [pc, #48]	; (413070 <lv_img_decoder_get_info+0x58>)
  41303e:	4b0d      	ldr	r3, [pc, #52]	; (413074 <lv_img_decoder_get_info+0x5c>)
  413040:	4798      	blx	r3
  413042:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  413044:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413046:	e005      	b.n	413054 <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  413048:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41304a:	4621      	mov	r1, r4
  41304c:	4808      	ldr	r0, [pc, #32]	; (413070 <lv_img_decoder_get_info+0x58>)
  41304e:	4b0a      	ldr	r3, [pc, #40]	; (413078 <lv_img_decoder_get_info+0x60>)
  413050:	4798      	blx	r3
  413052:	4604      	mov	r4, r0
  413054:	b14c      	cbz	r4, 41306a <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  413056:	6823      	ldr	r3, [r4, #0]
  413058:	2b00      	cmp	r3, #0
  41305a:	d0f5      	beq.n	413048 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  41305c:	4632      	mov	r2, r6
  41305e:	4639      	mov	r1, r7
  413060:	4620      	mov	r0, r4
  413062:	4798      	blx	r3
  413064:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  413066:	2801      	cmp	r0, #1
  413068:	d1ef      	bne.n	41304a <lv_img_decoder_get_info+0x32>
}
  41306a:	4628      	mov	r0, r5
  41306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41306e:	bf00      	nop
  413070:	2043a194 	.word	0x2043a194
  413074:	0041583d 	.word	0x0041583d
  413078:	00415851 	.word	0x00415851

0041307c <lv_img_decoder_open>:
{
  41307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41307e:	4606      	mov	r6, r0
  413080:	460f      	mov	r7, r1
    dsc->color     = color;
  413082:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  413084:	4608      	mov	r0, r1
  413086:	4b1d      	ldr	r3, [pc, #116]	; (4130fc <lv_img_decoder_open+0x80>)
  413088:	4798      	blx	r3
  41308a:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  41308c:	2300      	movs	r3, #0
  41308e:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  413090:	2801      	cmp	r0, #1
  413092:	d006      	beq.n	4130a2 <lv_img_decoder_open+0x26>
        dsc->src       = src;
  413094:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413096:	481a      	ldr	r0, [pc, #104]	; (413100 <lv_img_decoder_open+0x84>)
  413098:	4b1a      	ldr	r3, [pc, #104]	; (413104 <lv_img_decoder_open+0x88>)
  41309a:	4798      	blx	r3
  41309c:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  41309e:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4130a0:	e00f      	b.n	4130c2 <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  4130a2:	4638      	mov	r0, r7
  4130a4:	4b18      	ldr	r3, [pc, #96]	; (413108 <lv_img_decoder_open+0x8c>)
  4130a6:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  4130a8:	3001      	adds	r0, #1
  4130aa:	4b18      	ldr	r3, [pc, #96]	; (41310c <lv_img_decoder_open+0x90>)
  4130ac:	4798      	blx	r3
  4130ae:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  4130b0:	4639      	mov	r1, r7
  4130b2:	4b17      	ldr	r3, [pc, #92]	; (413110 <lv_img_decoder_open+0x94>)
  4130b4:	4798      	blx	r3
  4130b6:	e7ee      	b.n	413096 <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4130b8:	4621      	mov	r1, r4
  4130ba:	4811      	ldr	r0, [pc, #68]	; (413100 <lv_img_decoder_open+0x84>)
  4130bc:	4b15      	ldr	r3, [pc, #84]	; (413114 <lv_img_decoder_open+0x98>)
  4130be:	4798      	blx	r3
  4130c0:	4604      	mov	r4, r0
  4130c2:	b1c4      	cbz	r4, 4130f6 <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  4130c4:	6823      	ldr	r3, [r4, #0]
  4130c6:	2b00      	cmp	r3, #0
  4130c8:	d0f6      	beq.n	4130b8 <lv_img_decoder_open+0x3c>
  4130ca:	6862      	ldr	r2, [r4, #4]
  4130cc:	2a00      	cmp	r2, #0
  4130ce:	d0f3      	beq.n	4130b8 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  4130d0:	f106 020c 	add.w	r2, r6, #12
  4130d4:	4639      	mov	r1, r7
  4130d6:	4620      	mov	r0, r4
  4130d8:	4798      	blx	r3
  4130da:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  4130dc:	2801      	cmp	r0, #1
  4130de:	d1eb      	bne.n	4130b8 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  4130e0:	2300      	movs	r3, #0
  4130e2:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  4130e4:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  4130e6:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  4130e8:	6863      	ldr	r3, [r4, #4]
  4130ea:	4631      	mov	r1, r6
  4130ec:	4620      	mov	r0, r4
  4130ee:	4798      	blx	r3
  4130f0:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  4130f2:	2801      	cmp	r0, #1
  4130f4:	d1e0      	bne.n	4130b8 <lv_img_decoder_open+0x3c>
}
  4130f6:	4628      	mov	r0, r5
  4130f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4130fa:	bf00      	nop
  4130fc:	0040ce8d 	.word	0x0040ce8d
  413100:	2043a194 	.word	0x2043a194
  413104:	0041583d 	.word	0x0041583d
  413108:	00420101 	.word	0x00420101
  41310c:	00415c35 	.word	0x00415c35
  413110:	0042003d 	.word	0x0042003d
  413114:	00415851 	.word	0x00415851

00413118 <lv_img_decoder_read_line>:
{
  413118:	b570      	push	{r4, r5, r6, lr}
  41311a:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  41311c:	6806      	ldr	r6, [r0, #0]
  41311e:	68b4      	ldr	r4, [r6, #8]
  413120:	b154      	cbz	r4, 413138 <lv_img_decoder_read_line+0x20>
  413122:	461d      	mov	r5, r3
  413124:	4613      	mov	r3, r2
  413126:	460a      	mov	r2, r1
  413128:	4601      	mov	r1, r0
  41312a:	9806      	ldr	r0, [sp, #24]
  41312c:	9001      	str	r0, [sp, #4]
  41312e:	9500      	str	r5, [sp, #0]
  413130:	4630      	mov	r0, r6
  413132:	47a0      	blx	r4
}
  413134:	b002      	add	sp, #8
  413136:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  413138:	2000      	movs	r0, #0
  41313a:	e7fb      	b.n	413134 <lv_img_decoder_read_line+0x1c>

0041313c <lv_img_decoder_close>:
    if(dsc->decoder) {
  41313c:	6803      	ldr	r3, [r0, #0]
  41313e:	b183      	cbz	r3, 413162 <lv_img_decoder_close+0x26>
{
  413140:	b510      	push	{r4, lr}
  413142:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  413144:	68da      	ldr	r2, [r3, #12]
  413146:	b112      	cbz	r2, 41314e <lv_img_decoder_close+0x12>
  413148:	4601      	mov	r1, r0
  41314a:	4618      	mov	r0, r3
  41314c:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41314e:	7aa3      	ldrb	r3, [r4, #10]
  413150:	2b01      	cmp	r3, #1
  413152:	d000      	beq.n	413156 <lv_img_decoder_close+0x1a>
  413154:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  413156:	6860      	ldr	r0, [r4, #4]
  413158:	4b02      	ldr	r3, [pc, #8]	; (413164 <lv_img_decoder_close+0x28>)
  41315a:	4798      	blx	r3
            dsc->src = NULL;
  41315c:	2300      	movs	r3, #0
  41315e:	6063      	str	r3, [r4, #4]
}
  413160:	e7f8      	b.n	413154 <lv_img_decoder_close+0x18>
  413162:	4770      	bx	lr
  413164:	00415cf9 	.word	0x00415cf9

00413168 <lv_img_decoder_create>:
{
  413168:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  41316a:	480a      	ldr	r0, [pc, #40]	; (413194 <lv_img_decoder_create+0x2c>)
  41316c:	4b0a      	ldr	r3, [pc, #40]	; (413198 <lv_img_decoder_create+0x30>)
  41316e:	4798      	blx	r3
  413170:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  413172:	4b0a      	ldr	r3, [pc, #40]	; (41319c <lv_img_decoder_create+0x34>)
  413174:	4798      	blx	r3
  413176:	b130      	cbz	r0, 413186 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  413178:	b11c      	cbz	r4, 413182 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  41317a:	2110      	movs	r1, #16
  41317c:	4620      	mov	r0, r4
  41317e:	4b08      	ldr	r3, [pc, #32]	; (4131a0 <lv_img_decoder_create+0x38>)
  413180:	4798      	blx	r3
}
  413182:	4620      	mov	r0, r4
  413184:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  413186:	4622      	mov	r2, r4
  413188:	2300      	movs	r3, #0
  41318a:	4806      	ldr	r0, [pc, #24]	; (4131a4 <lv_img_decoder_create+0x3c>)
  41318c:	4906      	ldr	r1, [pc, #24]	; (4131a8 <lv_img_decoder_create+0x40>)
  41318e:	4788      	blx	r1
  413190:	e7fe      	b.n	413190 <lv_img_decoder_create+0x28>
  413192:	bf00      	nop
  413194:	2043a194 	.word	0x2043a194
  413198:	004157a5 	.word	0x004157a5
  41319c:	0041552d 	.word	0x0041552d
  4131a0:	00416169 	.word	0x00416169
  4131a4:	004235f0 	.word	0x004235f0
  4131a8:	00415539 	.word	0x00415539

004131ac <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  4131ac:	6001      	str	r1, [r0, #0]
  4131ae:	4770      	bx	lr

004131b0 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  4131b0:	6041      	str	r1, [r0, #4]
  4131b2:	4770      	bx	lr

004131b4 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  4131b4:	6081      	str	r1, [r0, #8]
  4131b6:	4770      	bx	lr

004131b8 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  4131b8:	60c1      	str	r1, [r0, #12]
  4131ba:	4770      	bx	lr

004131bc <_lv_img_decoder_init>:
{
  4131bc:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  4131be:	2110      	movs	r1, #16
  4131c0:	4810      	ldr	r0, [pc, #64]	; (413204 <_lv_img_decoder_init+0x48>)
  4131c2:	4b11      	ldr	r3, [pc, #68]	; (413208 <_lv_img_decoder_init+0x4c>)
  4131c4:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  4131c6:	4b11      	ldr	r3, [pc, #68]	; (41320c <_lv_img_decoder_init+0x50>)
  4131c8:	4798      	blx	r3
    if(decoder == NULL) {
  4131ca:	4604      	mov	r4, r0
  4131cc:	b178      	cbz	r0, 4131ee <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  4131ce:	4910      	ldr	r1, [pc, #64]	; (413210 <_lv_img_decoder_init+0x54>)
  4131d0:	4b10      	ldr	r3, [pc, #64]	; (413214 <_lv_img_decoder_init+0x58>)
  4131d2:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  4131d4:	4910      	ldr	r1, [pc, #64]	; (413218 <_lv_img_decoder_init+0x5c>)
  4131d6:	4620      	mov	r0, r4
  4131d8:	4b10      	ldr	r3, [pc, #64]	; (41321c <_lv_img_decoder_init+0x60>)
  4131da:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  4131dc:	4910      	ldr	r1, [pc, #64]	; (413220 <_lv_img_decoder_init+0x64>)
  4131de:	4620      	mov	r0, r4
  4131e0:	4b10      	ldr	r3, [pc, #64]	; (413224 <_lv_img_decoder_init+0x68>)
  4131e2:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  4131e4:	4910      	ldr	r1, [pc, #64]	; (413228 <_lv_img_decoder_init+0x6c>)
  4131e6:	4620      	mov	r0, r4
  4131e8:	4b10      	ldr	r3, [pc, #64]	; (41322c <_lv_img_decoder_init+0x70>)
  4131ea:	4798      	blx	r3
  4131ec:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  4131ee:	4b10      	ldr	r3, [pc, #64]	; (413230 <_lv_img_decoder_init+0x74>)
  4131f0:	4798      	blx	r3
  4131f2:	2800      	cmp	r0, #0
  4131f4:	d1fa      	bne.n	4131ec <_lv_img_decoder_init+0x30>
  4131f6:	4622      	mov	r2, r4
  4131f8:	2300      	movs	r3, #0
  4131fa:	480e      	ldr	r0, [pc, #56]	; (413234 <_lv_img_decoder_init+0x78>)
  4131fc:	490e      	ldr	r1, [pc, #56]	; (413238 <_lv_img_decoder_init+0x7c>)
  4131fe:	4788      	blx	r1
  413200:	e7fe      	b.n	413200 <_lv_img_decoder_init+0x44>
  413202:	bf00      	nop
  413204:	2043a194 	.word	0x2043a194
  413208:	00415793 	.word	0x00415793
  41320c:	00413169 	.word	0x00413169
  413210:	00412849 	.word	0x00412849
  413214:	004131ad 	.word	0x004131ad
  413218:	0041294d 	.word	0x0041294d
  41321c:	004131b1 	.word	0x004131b1
  413220:	00412fb1 	.word	0x00412fb1
  413224:	004131b5 	.word	0x004131b5
  413228:	00412911 	.word	0x00412911
  41322c:	004131b9 	.word	0x004131b9
  413230:	0041552d 	.word	0x0041552d
  413234:	004235f0 	.word	0x004235f0
  413238:	00415539 	.word	0x00415539

0041323c <lv_font_get_glyph_bitmap>:
 * @param font_p pointer to a font
 * @param letter an UNICODE character code
 * @return pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
  41323c:	b508      	push	{r3, lr}
    return font_p->get_glyph_bitmap(font_p, letter);
  41323e:	6843      	ldr	r3, [r0, #4]
  413240:	4798      	blx	r3
}
  413242:	bd08      	pop	{r3, pc}

00413244 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
  413244:	b510      	push	{r4, lr}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
  413246:	6804      	ldr	r4, [r0, #0]
  413248:	47a0      	blx	r4
}
  41324a:	bd10      	pop	{r4, pc}

0041324c <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
  41324c:	b510      	push	{r4, lr}
  41324e:	b084      	sub	sp, #16
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
  413250:	4613      	mov	r3, r2
  413252:	460a      	mov	r2, r1
  413254:	a901      	add	r1, sp, #4
  413256:	4c04      	ldr	r4, [pc, #16]	; (413268 <lv_font_get_glyph_width+0x1c>)
  413258:	47a0      	blx	r4
    if(ret) return g.adv_w;
  41325a:	b118      	cbz	r0, 413264 <lv_font_get_glyph_width+0x18>
  41325c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
  413260:	b004      	add	sp, #16
  413262:	bd10      	pop	{r4, pc}
    else return 0;
  413264:	2000      	movs	r0, #0
  413266:	e7fb      	b.n	413260 <lv_font_get_glyph_width+0x14>
  413268:	00413245 	.word	0x00413245

0041326c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  41326c:	7803      	ldrb	r3, [r0, #0]
  41326e:	780a      	ldrb	r2, [r1, #0]
  413270:	4293      	cmp	r3, r2
  413272:	d001      	beq.n	413278 <kern_pair_8_compare+0xc>
  413274:	1a98      	subs	r0, r3, r2
  413276:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  413278:	7840      	ldrb	r0, [r0, #1]
  41327a:	784b      	ldrb	r3, [r1, #1]
  41327c:	1ac0      	subs	r0, r0, r3

}
  41327e:	4770      	bx	lr

00413280 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  413280:	8803      	ldrh	r3, [r0, #0]
  413282:	880a      	ldrh	r2, [r1, #0]
  413284:	4293      	cmp	r3, r2
  413286:	d001      	beq.n	41328c <kern_pair_16_compare+0xc>
  413288:	1a98      	subs	r0, r3, r2
  41328a:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  41328c:	8840      	ldrh	r0, [r0, #2]
  41328e:	884b      	ldrh	r3, [r1, #2]
  413290:	1ac0      	subs	r0, r0, r3
}
  413292:	4770      	bx	lr

00413294 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  413294:	8800      	ldrh	r0, [r0, #0]
  413296:	880b      	ldrh	r3, [r1, #0]
}
  413298:	1ac0      	subs	r0, r0, r3
  41329a:	4770      	bx	lr

0041329c <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  41329c:	460b      	mov	r3, r1
  41329e:	2900      	cmp	r1, #0
  4132a0:	d061      	beq.n	413366 <get_glyph_dsc_id+0xca>
{
  4132a2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4132a4:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4132a6:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  4132a8:	6962      	ldr	r2, [r4, #20]
  4132aa:	4291      	cmp	r1, r2
  4132ac:	d013      	beq.n	4132d6 <get_glyph_dsc_id+0x3a>
  4132ae:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  4132b0:	8a61      	ldrh	r1, [r4, #18]
  4132b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4132b6:	428a      	cmp	r2, r1
  4132b8:	da51      	bge.n	41335e <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  4132ba:	68a0      	ldr	r0, [r4, #8]
  4132bc:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4132c0:	00a9      	lsls	r1, r5, #2
  4132c2:	460e      	mov	r6, r1
  4132c4:	1847      	adds	r7, r0, r1
  4132c6:	5841      	ldr	r1, [r0, r1]
  4132c8:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  4132ca:	88b8      	ldrh	r0, [r7, #4]
  4132cc:	4281      	cmp	r1, r0
  4132ce:	d904      	bls.n	4132da <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  4132d0:	3201      	adds	r2, #1
  4132d2:	b292      	uxth	r2, r2
  4132d4:	e7ec      	b.n	4132b0 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  4132d6:	69a0      	ldr	r0, [r4, #24]
  4132d8:	e00a      	b.n	4132f0 <get_glyph_dsc_id+0x54>
  4132da:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  4132dc:	7cbb      	ldrb	r3, [r7, #18]
  4132de:	2b02      	cmp	r3, #2
  4132e0:	d008      	beq.n	4132f4 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  4132e2:	b953      	cbnz	r3, 4132fa <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  4132e4:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  4132e6:	88f8      	ldrh	r0, [r7, #6]
  4132e8:	5c5b      	ldrb	r3, [r3, r1]
  4132ea:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  4132ec:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  4132ee:	61a0      	str	r0, [r4, #24]
}
  4132f0:	b005      	add	sp, #20
  4132f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  4132f4:	88f8      	ldrh	r0, [r7, #6]
  4132f6:	4408      	add	r0, r1
  4132f8:	e7f8      	b.n	4132ec <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  4132fa:	2b03      	cmp	r3, #3
  4132fc:	d003      	beq.n	413306 <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  4132fe:	2b01      	cmp	r3, #1
  413300:	d017      	beq.n	413332 <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  413302:	2000      	movs	r0, #0
  413304:	e7f2      	b.n	4132ec <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413306:	a804      	add	r0, sp, #16
  413308:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  41330c:	68b9      	ldr	r1, [r7, #8]
  41330e:	8a3a      	ldrh	r2, [r7, #16]
  413310:	4b16      	ldr	r3, [pc, #88]	; (41336c <get_glyph_dsc_id+0xd0>)
  413312:	9300      	str	r3, [sp, #0]
  413314:	2302      	movs	r3, #2
  413316:	4f16      	ldr	r7, [pc, #88]	; (413370 <get_glyph_dsc_id+0xd4>)
  413318:	47b8      	blx	r7
            if(p) {
  41331a:	4603      	mov	r3, r0
  41331c:	b138      	cbz	r0, 41332e <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  41331e:	68a2      	ldr	r2, [r4, #8]
  413320:	4416      	add	r6, r2
  413322:	68b0      	ldr	r0, [r6, #8]
  413324:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  413326:	88f3      	ldrh	r3, [r6, #6]
  413328:	eb03 0060 	add.w	r0, r3, r0, asr #1
  41332c:	e7de      	b.n	4132ec <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  41332e:	2000      	movs	r0, #0
  413330:	e7dc      	b.n	4132ec <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413332:	a804      	add	r0, sp, #16
  413334:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413338:	68b9      	ldr	r1, [r7, #8]
  41333a:	8a3a      	ldrh	r2, [r7, #16]
  41333c:	4b0b      	ldr	r3, [pc, #44]	; (41336c <get_glyph_dsc_id+0xd0>)
  41333e:	9300      	str	r3, [sp, #0]
  413340:	2302      	movs	r3, #2
  413342:	4f0b      	ldr	r7, [pc, #44]	; (413370 <get_glyph_dsc_id+0xd4>)
  413344:	47b8      	blx	r7
            if(p) {
  413346:	b140      	cbz	r0, 41335a <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413348:	68a3      	ldr	r3, [r4, #8]
  41334a:	441e      	add	r6, r3
  41334c:	68b3      	ldr	r3, [r6, #8]
  41334e:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  413350:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  413352:	88f3      	ldrh	r3, [r6, #6]
  413354:	5a88      	ldrh	r0, [r1, r2]
  413356:	4418      	add	r0, r3
  413358:	e7c8      	b.n	4132ec <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  41335a:	2000      	movs	r0, #0
  41335c:	e7c6      	b.n	4132ec <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  41335e:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  413360:	2000      	movs	r0, #0
  413362:	61a0      	str	r0, [r4, #24]
    return 0;
  413364:	e7c4      	b.n	4132f0 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  413366:	4608      	mov	r0, r1
  413368:	4770      	bx	lr
  41336a:	bf00      	nop
  41336c:	00413295 	.word	0x00413295
  413370:	00416b81 	.word	0x00416b81

00413374 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  413374:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  413376:	7cd8      	ldrb	r0, [r3, #19]
  413378:	f010 0f20 	tst.w	r0, #32
  41337c:	d13a      	bne.n	4133f4 <get_kern_value+0x80>
{
  41337e:	b570      	push	{r4, r5, r6, lr}
  413380:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  413382:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  413384:	7ae3      	ldrb	r3, [r4, #11]
  413386:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  41338a:	d004      	beq.n	413396 <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  41338c:	2b40      	cmp	r3, #64	; 0x40
  41338e:	d01a      	beq.n	4133c6 <get_kern_value+0x52>
    int8_t value = 0;
  413390:	2000      	movs	r0, #0
}
  413392:	b004      	add	sp, #16
  413394:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  413396:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  413398:	0212      	lsls	r2, r2, #8
  41339a:	b292      	uxth	r2, r2
  41339c:	440a      	add	r2, r1
  41339e:	a804      	add	r0, sp, #16
  4133a0:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  4133a4:	68a2      	ldr	r2, [r4, #8]
  4133a6:	4b1d      	ldr	r3, [pc, #116]	; (41341c <get_kern_value+0xa8>)
  4133a8:	9300      	str	r3, [sp, #0]
  4133aa:	2302      	movs	r3, #2
  4133ac:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  4133b0:	4629      	mov	r1, r5
  4133b2:	4e1b      	ldr	r6, [pc, #108]	; (413420 <get_kern_value+0xac>)
  4133b4:	47b0      	blx	r6
            if(kid_p) {
  4133b6:	b120      	cbz	r0, 4133c2 <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  4133b8:	1b43      	subs	r3, r0, r5
  4133ba:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  4133bc:	6862      	ldr	r2, [r4, #4]
  4133be:	56d0      	ldrsb	r0, [r2, r3]
  4133c0:	e7e7      	b.n	413392 <get_kern_value+0x1e>
    int8_t value = 0;
  4133c2:	2000      	movs	r0, #0
  4133c4:	e7e5      	b.n	413392 <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  4133c6:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  4133c8:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  4133cc:	a804      	add	r0, sp, #16
  4133ce:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  4133d2:	68a2      	ldr	r2, [r4, #8]
  4133d4:	4b13      	ldr	r3, [pc, #76]	; (413424 <get_kern_value+0xb0>)
  4133d6:	9300      	str	r3, [sp, #0]
  4133d8:	2304      	movs	r3, #4
  4133da:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  4133de:	4629      	mov	r1, r5
  4133e0:	4e0f      	ldr	r6, [pc, #60]	; (413420 <get_kern_value+0xac>)
  4133e2:	47b0      	blx	r6
            if(kid_p) {
  4133e4:	b120      	cbz	r0, 4133f0 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  4133e6:	1b43      	subs	r3, r0, r5
  4133e8:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  4133ea:	6862      	ldr	r2, [r4, #4]
  4133ec:	56d0      	ldrsb	r0, [r2, r3]
  4133ee:	e7d0      	b.n	413392 <get_kern_value+0x1e>
    int8_t value = 0;
  4133f0:	2000      	movs	r0, #0
  4133f2:	e7ce      	b.n	413392 <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  4133f4:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  4133f6:	6843      	ldr	r3, [r0, #4]
  4133f8:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  4133fa:	6881      	ldr	r1, [r0, #8]
  4133fc:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  4133fe:	2b00      	cmp	r3, #0
  413400:	bf18      	it	ne
  413402:	2a00      	cmpne	r2, #0
  413404:	d007      	beq.n	413416 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  413406:	6801      	ldr	r1, [r0, #0]
  413408:	3b01      	subs	r3, #1
  41340a:	7b40      	ldrb	r0, [r0, #13]
  41340c:	3a01      	subs	r2, #1
  41340e:	fb00 2303 	mla	r3, r0, r3, r2
  413412:	56c8      	ldrsb	r0, [r1, r3]
  413414:	4770      	bx	lr
    int8_t value = 0;
  413416:	2000      	movs	r0, #0
  413418:	4770      	bx	lr
  41341a:	bf00      	nop
  41341c:	0041326d 	.word	0x0041326d
  413420:	00416b81 	.word	0x00416b81
  413424:	00413281 	.word	0x00413281

00413428 <decompress>:
{
  413428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41342c:	b087      	sub	sp, #28
  41342e:	460e      	mov	r6, r1
  413430:	4614      	mov	r4, r2
  413432:	9301      	str	r3, [sp, #4]
  413434:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  413438:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  41343c:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  41343e:	2f03      	cmp	r7, #3
  413440:	d018      	beq.n	413474 <decompress+0x4c>
    uint8_t wr_size = bpp;
  413442:	9702      	str	r7, [sp, #8]
    rle_in = in;
  413444:	4ba8      	ldr	r3, [pc, #672]	; (4136e8 <decompress+0x2c0>)
  413446:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  413448:	4ba8      	ldr	r3, [pc, #672]	; (4136ec <decompress+0x2c4>)
  41344a:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  41344c:	2300      	movs	r3, #0
  41344e:	4aa8      	ldr	r2, [pc, #672]	; (4136f0 <decompress+0x2c8>)
  413450:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  413452:	4aa8      	ldr	r2, [pc, #672]	; (4136f4 <decompress+0x2cc>)
  413454:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  413456:	4aa8      	ldr	r2, [pc, #672]	; (4136f8 <decompress+0x2d0>)
  413458:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  41345a:	4aa8      	ldr	r2, [pc, #672]	; (4136fc <decompress+0x2d4>)
  41345c:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  41345e:	4620      	mov	r0, r4
  413460:	4ba7      	ldr	r3, [pc, #668]	; (413700 <decompress+0x2d8>)
  413462:	4798      	blx	r3
  413464:	4605      	mov	r5, r0
    if(prefilter) {
  413466:	9b04      	ldr	r3, [sp, #16]
  413468:	b93b      	cbnz	r3, 41347a <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  41346a:	2300      	movs	r3, #0
  41346c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  41346e:	2000      	movs	r0, #0
  413470:	46a6      	mov	lr, r4
  413472:	e03a      	b.n	4134ea <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  413474:	2304      	movs	r3, #4
  413476:	9302      	str	r3, [sp, #8]
  413478:	e7e4      	b.n	413444 <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  41347a:	4620      	mov	r0, r4
  41347c:	4ba0      	ldr	r3, [pc, #640]	; (413700 <decompress+0x2d8>)
  41347e:	4798      	blx	r3
  413480:	9003      	str	r0, [sp, #12]
  413482:	e7f4      	b.n	41346e <decompress+0x46>
            bit_mask = 0x1;
  413484:	f04f 0801 	mov.w	r8, #1
  413488:	e011      	b.n	4134ae <decompress+0x86>
            bit_mask = 0x7;
  41348a:	f04f 0807 	mov.w	r8, #7
  41348e:	e00e      	b.n	4134ae <decompress+0x86>
            bit_mask = 0xF;
  413490:	f04f 080f 	mov.w	r8, #15
  413494:	e00b      	b.n	4134ae <decompress+0x86>
            bit_mask = 0xFF;
  413496:	f04f 08ff 	mov.w	r8, #255	; 0xff
  41349a:	e008      	b.n	4134ae <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41349c:	2301      	movs	r3, #1
  41349e:	4093      	lsls	r3, r2
  4134a0:	b2db      	uxtb	r3, r3
  4134a2:	3b01      	subs	r3, #1
  4134a4:	fa5f f883 	uxtb.w	r8, r3
  4134a8:	e001      	b.n	4134ae <decompress+0x86>
            bit_mask = 0x3;
  4134aa:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  4134ae:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  4134b0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4134b4:	eb01 0902 	add.w	r9, r1, r2
  4134b8:	f1b9 0f07 	cmp.w	r9, #7
  4134bc:	d83c      	bhi.n	413538 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4134be:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4134c2:	4249      	negs	r1, r1
  4134c4:	1a89      	subs	r1, r1, r2
  4134c6:	3108      	adds	r1, #8
  4134c8:	410b      	asrs	r3, r1
  4134ca:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4134ce:	b11c      	cbz	r4, 4134d8 <decompress+0xb0>
  4134d0:	4989      	ldr	r1, [pc, #548]	; (4136f8 <decompress+0x2d0>)
  4134d2:	7809      	ldrb	r1, [r1, #0]
  4134d4:	4299      	cmp	r1, r3
  4134d6:	d03d      	beq.n	413554 <decompress+0x12c>
        rle_prev_v = ret;
  4134d8:	4987      	ldr	r1, [pc, #540]	; (4136f8 <decompress+0x2d0>)
  4134da:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  4134dc:	4422      	add	r2, r4
  4134de:	4985      	ldr	r1, [pc, #532]	; (4136f4 <decompress+0x2cc>)
  4134e0:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  4134e2:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  4134e6:	3001      	adds	r0, #1
  4134e8:	b200      	sxth	r0, r0
  4134ea:	4586      	cmp	lr, r0
  4134ec:	f340 8188 	ble.w	413800 <decompress+0x3d8>
        out[i] = rle_next();
  4134f0:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  4134f4:	4b7e      	ldr	r3, [pc, #504]	; (4136f0 <decompress+0x2c8>)
  4134f6:	781b      	ldrb	r3, [r3, #0]
  4134f8:	2b00      	cmp	r3, #0
  4134fa:	d136      	bne.n	41356a <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4134fc:	4b7a      	ldr	r3, [pc, #488]	; (4136e8 <decompress+0x2c0>)
  4134fe:	f8d3 a000 	ldr.w	sl, [r3]
  413502:	4b7c      	ldr	r3, [pc, #496]	; (4136f4 <decompress+0x2cc>)
  413504:	681c      	ldr	r4, [r3, #0]
  413506:	4b79      	ldr	r3, [pc, #484]	; (4136ec <decompress+0x2c4>)
  413508:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41350a:	1e51      	subs	r1, r2, #1
  41350c:	2907      	cmp	r1, #7
  41350e:	d8c5      	bhi.n	41349c <decompress+0x74>
  413510:	a301      	add	r3, pc, #4	; (adr r3, 413518 <decompress+0xf0>)
  413512:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  413516:	bf00      	nop
  413518:	00413485 	.word	0x00413485
  41351c:	004134ab 	.word	0x004134ab
  413520:	0041348b 	.word	0x0041348b
  413524:	00413491 	.word	0x00413491
  413528:	0041349d 	.word	0x0041349d
  41352c:	0041349d 	.word	0x0041349d
  413530:	0041349d 	.word	0x0041349d
  413534:	00413497 	.word	0x00413497
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413538:	f81a 9003 	ldrb.w	r9, [sl, r3]
  41353c:	4453      	add	r3, sl
  41353e:	785b      	ldrb	r3, [r3, #1]
  413540:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  413544:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413546:	4249      	negs	r1, r1
  413548:	1a89      	subs	r1, r1, r2
  41354a:	3110      	adds	r1, #16
  41354c:	410b      	asrs	r3, r1
  41354e:	ea03 0308 	and.w	r3, r3, r8
  413552:	e7bc      	b.n	4134ce <decompress+0xa6>
            rle_cnt = 0;
  413554:	f04f 0800 	mov.w	r8, #0
  413558:	4968      	ldr	r1, [pc, #416]	; (4136fc <decompress+0x2d4>)
  41355a:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  41355e:	f04f 0801 	mov.w	r8, #1
  413562:	4963      	ldr	r1, [pc, #396]	; (4136f0 <decompress+0x2c8>)
  413564:	f881 8000 	strb.w	r8, [r1]
  413568:	e7b6      	b.n	4134d8 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  41356a:	2b01      	cmp	r3, #1
  41356c:	d004      	beq.n	413578 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  41356e:	2b02      	cmp	r3, #2
  413570:	f000 80f3 	beq.w	41375a <decompress+0x332>
    uint8_t ret = 0;
  413574:	2300      	movs	r3, #0
  413576:	e7b4      	b.n	4134e2 <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  413578:	4b5b      	ldr	r3, [pc, #364]	; (4136e8 <decompress+0x2c0>)
  41357a:	f8d3 8000 	ldr.w	r8, [r3]
  41357e:	4b5d      	ldr	r3, [pc, #372]	; (4136f4 <decompress+0x2cc>)
  413580:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413582:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413584:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413588:	1c5c      	adds	r4, r3, #1
  41358a:	2c07      	cmp	r4, #7
  41358c:	d81d      	bhi.n	4135ca <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41358e:	f818 1001 	ldrb.w	r1, [r8, r1]
  413592:	f1c3 0307 	rsb	r3, r3, #7
  413596:	fa41 f303 	asr.w	r3, r1, r3
  41359a:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  41359e:	4b57      	ldr	r3, [pc, #348]	; (4136fc <decompress+0x2d4>)
  4135a0:	781c      	ldrb	r4, [r3, #0]
  4135a2:	3401      	adds	r4, #1
  4135a4:	b2e4      	uxtb	r4, r4
  4135a6:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  4135a8:	3201      	adds	r2, #1
  4135aa:	4b52      	ldr	r3, [pc, #328]	; (4136f4 <decompress+0x2cc>)
  4135ac:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4135ae:	2901      	cmp	r1, #1
  4135b0:	d018      	beq.n	4135e4 <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4135b2:	4b4e      	ldr	r3, [pc, #312]	; (4136ec <decompress+0x2c4>)
  4135b4:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  4135b6:	1e63      	subs	r3, r4, #1
  4135b8:	2b07      	cmp	r3, #7
  4135ba:	f200 808e 	bhi.w	4136da <decompress+0x2b2>
  4135be:	e8df f003 	tbb	[pc, r3]
  4135c2:	a184      	.short	0xa184
  4135c4:	8c8c8886 	.word	0x8c8c8886
  4135c8:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4135ca:	f818 4001 	ldrb.w	r4, [r8, r1]
  4135ce:	4441      	add	r1, r8
  4135d0:	7849      	ldrb	r1, [r1, #1]
  4135d2:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  4135d6:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4135d8:	f1c3 030f 	rsb	r3, r3, #15
  4135dc:	4119      	asrs	r1, r3
  4135de:	f001 0101 	and.w	r1, r1, #1
  4135e2:	e7dc      	b.n	41359e <decompress+0x176>
            ret = rle_prev_v;
  4135e4:	4b44      	ldr	r3, [pc, #272]	; (4136f8 <decompress+0x2d0>)
  4135e6:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  4135e8:	2c0b      	cmp	r4, #11
  4135ea:	f47f af7a 	bne.w	4134e2 <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  4135ee:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  4135f0:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  4135f4:	f109 0a06 	add.w	sl, r9, #6
  4135f8:	f1ba 0f07 	cmp.w	sl, #7
  4135fc:	d815      	bhi.n	41362a <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4135fe:	f818 4004 	ldrb.w	r4, [r8, r4]
  413602:	f1c9 0902 	rsb	r9, r9, #2
  413606:	fa44 f409 	asr.w	r4, r4, r9
  41360a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  41360e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 4136fc <decompress+0x2d4>
  413612:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  413616:	3206      	adds	r2, #6
  413618:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 4136f4 <decompress+0x2cc>
  41361c:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413620:	b18c      	cbz	r4, 413646 <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  413622:	2102      	movs	r1, #2
  413624:	4a32      	ldr	r2, [pc, #200]	; (4136f0 <decompress+0x2c8>)
  413626:	7011      	strb	r1, [r2, #0]
  413628:	e75b      	b.n	4134e2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41362a:	f818 a004 	ldrb.w	sl, [r8, r4]
  41362e:	4444      	add	r4, r8
  413630:	7864      	ldrb	r4, [r4, #1]
  413632:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  413636:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413638:	f1c9 090a 	rsb	r9, r9, #10
  41363c:	fa44 f409 	asr.w	r4, r4, r9
  413640:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  413644:	e7e3      	b.n	41360e <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413646:	4b29      	ldr	r3, [pc, #164]	; (4136ec <decompress+0x2c4>)
  413648:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  41364a:	1e63      	subs	r3, r4, #1
  41364c:	2b07      	cmp	r3, #7
  41364e:	d824      	bhi.n	41369a <decompress+0x272>
  413650:	e8df f003 	tbb	[pc, r3]
  413654:	1f042905 	.word	0x1f042905
  413658:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  41365c:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  41365e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413662:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413666:	eb03 0a04 	add.w	sl, r3, r4
  41366a:	f1ba 0f07 	cmp.w	sl, #7
  41366e:	d81c      	bhi.n	4136aa <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413670:	f818 8009 	ldrb.w	r8, [r8, r9]
  413674:	425b      	negs	r3, r3
  413676:	1b1b      	subs	r3, r3, r4
  413678:	3308      	adds	r3, #8
  41367a:	fa48 f303 	asr.w	r3, r8, r3
  41367e:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413680:	491d      	ldr	r1, [pc, #116]	; (4136f8 <decompress+0x2d0>)
  413682:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413684:	4422      	add	r2, r4
  413686:	491b      	ldr	r1, [pc, #108]	; (4136f4 <decompress+0x2cc>)
  413688:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41368a:	2100      	movs	r1, #0
  41368c:	4a18      	ldr	r2, [pc, #96]	; (4136f0 <decompress+0x2c8>)
  41368e:	7011      	strb	r1, [r2, #0]
  413690:	e727      	b.n	4134e2 <decompress+0xba>
            bit_mask = 0xF;
  413692:	210f      	movs	r1, #15
  413694:	e7e3      	b.n	41365e <decompress+0x236>
            bit_mask = 0xFF;
  413696:	21ff      	movs	r1, #255	; 0xff
  413698:	e7e1      	b.n	41365e <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41369a:	2101      	movs	r1, #1
  41369c:	40a1      	lsls	r1, r4
  41369e:	b2c9      	uxtb	r1, r1
  4136a0:	3901      	subs	r1, #1
  4136a2:	b2c9      	uxtb	r1, r1
  4136a4:	e7db      	b.n	41365e <decompress+0x236>
            bit_mask = 0x3;
  4136a6:	2103      	movs	r1, #3
  4136a8:	e7d9      	b.n	41365e <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4136aa:	f818 a009 	ldrb.w	sl, [r8, r9]
  4136ae:	44c8      	add	r8, r9
  4136b0:	f898 8001 	ldrb.w	r8, [r8, #1]
  4136b4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  4136b8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4136bc:	425b      	negs	r3, r3
  4136be:	1b1b      	subs	r3, r3, r4
  4136c0:	3310      	adds	r3, #16
  4136c2:	fa48 f303 	asr.w	r3, r8, r3
  4136c6:	400b      	ands	r3, r1
  4136c8:	e7da      	b.n	413680 <decompress+0x258>
            bit_mask = 0x1;
  4136ca:	2301      	movs	r3, #1
  4136cc:	e01b      	b.n	413706 <decompress+0x2de>
            bit_mask = 0x7;
  4136ce:	2307      	movs	r3, #7
  4136d0:	e019      	b.n	413706 <decompress+0x2de>
            bit_mask = 0xF;
  4136d2:	230f      	movs	r3, #15
  4136d4:	e017      	b.n	413706 <decompress+0x2de>
            bit_mask = 0xFF;
  4136d6:	23ff      	movs	r3, #255	; 0xff
  4136d8:	e015      	b.n	413706 <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4136da:	2301      	movs	r3, #1
  4136dc:	40a3      	lsls	r3, r4
  4136de:	b2db      	uxtb	r3, r3
  4136e0:	3b01      	subs	r3, #1
  4136e2:	b2db      	uxtb	r3, r3
  4136e4:	e00f      	b.n	413706 <decompress+0x2de>
  4136e6:	bf00      	nop
  4136e8:	2040c724 	.word	0x2040c724
  4136ec:	2040c720 	.word	0x2040c720
  4136f0:	2040c730 	.word	0x2040c730
  4136f4:	2040c72c 	.word	0x2040c72c
  4136f8:	2040c728 	.word	0x2040c728
  4136fc:	2040c721 	.word	0x2040c721
  413700:	00415fdd 	.word	0x00415fdd
            bit_mask = 0x3;
  413704:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413706:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41370a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  41370e:	eb01 0a04 	add.w	sl, r1, r4
  413712:	f1ba 0f07 	cmp.w	sl, #7
  413716:	d810      	bhi.n	41373a <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413718:	f818 8009 	ldrb.w	r8, [r8, r9]
  41371c:	4249      	negs	r1, r1
  41371e:	1b09      	subs	r1, r1, r4
  413720:	3108      	adds	r1, #8
  413722:	fa48 f101 	asr.w	r1, r8, r1
  413726:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413728:	49b4      	ldr	r1, [pc, #720]	; (4139fc <decompress+0x5d4>)
  41372a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41372c:	4422      	add	r2, r4
  41372e:	49b4      	ldr	r1, [pc, #720]	; (413a00 <decompress+0x5d8>)
  413730:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413732:	2100      	movs	r1, #0
  413734:	4ab3      	ldr	r2, [pc, #716]	; (413a04 <decompress+0x5dc>)
  413736:	7011      	strb	r1, [r2, #0]
  413738:	e6d3      	b.n	4134e2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41373a:	f818 a009 	ldrb.w	sl, [r8, r9]
  41373e:	44c8      	add	r8, r9
  413740:	f898 8001 	ldrb.w	r8, [r8, #1]
  413744:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413748:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41374c:	4249      	negs	r1, r1
  41374e:	1b09      	subs	r1, r1, r4
  413750:	3110      	adds	r1, #16
  413752:	fa48 f101 	asr.w	r1, r8, r1
  413756:	400b      	ands	r3, r1
  413758:	e7e6      	b.n	413728 <decompress+0x300>
        ret = rle_prev_v;
  41375a:	4ba8      	ldr	r3, [pc, #672]	; (4139fc <decompress+0x5d4>)
  41375c:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  41375e:	49aa      	ldr	r1, [pc, #680]	; (413a08 <decompress+0x5e0>)
  413760:	780a      	ldrb	r2, [r1, #0]
  413762:	3a01      	subs	r2, #1
  413764:	b2d2      	uxtb	r2, r2
  413766:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413768:	2a00      	cmp	r2, #0
  41376a:	f47f aeba 	bne.w	4134e2 <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41376e:	4ba7      	ldr	r3, [pc, #668]	; (413a0c <decompress+0x5e4>)
  413770:	f8d3 a000 	ldr.w	sl, [r3]
  413774:	4ba2      	ldr	r3, [pc, #648]	; (413a00 <decompress+0x5d8>)
  413776:	681c      	ldr	r4, [r3, #0]
  413778:	4ba5      	ldr	r3, [pc, #660]	; (413a10 <decompress+0x5e8>)
  41377a:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41377c:	1e53      	subs	r3, r2, #1
  41377e:	2b07      	cmp	r3, #7
  413780:	d80d      	bhi.n	41379e <decompress+0x376>
  413782:	e8df f003 	tbb	[pc, r3]
  413786:	1204      	.short	0x1204
  413788:	0c0c0806 	.word	0x0c0c0806
  41378c:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  41378e:	2301      	movs	r3, #1
  413790:	e00c      	b.n	4137ac <decompress+0x384>
            bit_mask = 0x7;
  413792:	2307      	movs	r3, #7
  413794:	e00a      	b.n	4137ac <decompress+0x384>
            bit_mask = 0xF;
  413796:	230f      	movs	r3, #15
  413798:	e008      	b.n	4137ac <decompress+0x384>
            bit_mask = 0xFF;
  41379a:	23ff      	movs	r3, #255	; 0xff
  41379c:	e006      	b.n	4137ac <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41379e:	2301      	movs	r3, #1
  4137a0:	4093      	lsls	r3, r2
  4137a2:	b2db      	uxtb	r3, r3
  4137a4:	3b01      	subs	r3, #1
  4137a6:	b2db      	uxtb	r3, r3
  4137a8:	e000      	b.n	4137ac <decompress+0x384>
            bit_mask = 0x3;
  4137aa:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4137ac:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  4137b0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4137b4:	eb01 0902 	add.w	r9, r1, r2
  4137b8:	f1b9 0f07 	cmp.w	r9, #7
  4137bc:	d810      	bhi.n	4137e0 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4137be:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4137c2:	4249      	negs	r1, r1
  4137c4:	1a89      	subs	r1, r1, r2
  4137c6:	3108      	adds	r1, #8
  4137c8:	fa48 f101 	asr.w	r1, r8, r1
  4137cc:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4137ce:	498b      	ldr	r1, [pc, #556]	; (4139fc <decompress+0x5d4>)
  4137d0:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  4137d2:	4422      	add	r2, r4
  4137d4:	498a      	ldr	r1, [pc, #552]	; (413a00 <decompress+0x5d8>)
  4137d6:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4137d8:	2100      	movs	r1, #0
  4137da:	4a8a      	ldr	r2, [pc, #552]	; (413a04 <decompress+0x5dc>)
  4137dc:	7011      	strb	r1, [r2, #0]
  4137de:	e680      	b.n	4134e2 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4137e0:	f81a 9008 	ldrb.w	r9, [sl, r8]
  4137e4:	44d0      	add	r8, sl
  4137e6:	f898 8001 	ldrb.w	r8, [r8, #1]
  4137ea:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  4137ee:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4137f2:	4249      	negs	r1, r1
  4137f4:	1a89      	subs	r1, r1, r2
  4137f6:	3110      	adds	r1, #16
  4137f8:	fa48 f101 	asr.w	r1, r8, r1
  4137fc:	400b      	ands	r3, r1
  4137fe:	e7e6      	b.n	4137ce <decompress+0x3a6>
  413800:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  413802:	f04f 0c00 	mov.w	ip, #0
  413806:	4660      	mov	r0, ip
  413808:	f8dd e008 	ldr.w	lr, [sp, #8]
  41380c:	e048      	b.n	4138a0 <decompress+0x478>
        switch(val) {
  41380e:	2907      	cmp	r1, #7
  413810:	d805      	bhi.n	41381e <decompress+0x3f6>
  413812:	e8df f001 	tbb	[pc, r1]
  413816:	0723      	.short	0x0723
  413818:	17130f0b 	.word	0x17130f0b
  41381c:	1f1b      	.short	0x1f1b
        len = 4;
  41381e:	f04f 0804 	mov.w	r8, #4
  413822:	e01e      	b.n	413862 <decompress+0x43a>
  413824:	f04f 0804 	mov.w	r8, #4
                val = 2;
  413828:	2102      	movs	r1, #2
  41382a:	e01a      	b.n	413862 <decompress+0x43a>
        len = 4;
  41382c:	f04f 0804 	mov.w	r8, #4
                val = 4;
  413830:	4641      	mov	r1, r8
  413832:	e016      	b.n	413862 <decompress+0x43a>
        len = 4;
  413834:	f04f 0804 	mov.w	r8, #4
                val = 6;
  413838:	2106      	movs	r1, #6
  41383a:	e012      	b.n	413862 <decompress+0x43a>
        len = 4;
  41383c:	f04f 0804 	mov.w	r8, #4
                val = 9;
  413840:	2109      	movs	r1, #9
  413842:	e00e      	b.n	413862 <decompress+0x43a>
        len = 4;
  413844:	f04f 0804 	mov.w	r8, #4
                val = 11;
  413848:	210b      	movs	r1, #11
  41384a:	e00a      	b.n	413862 <decompress+0x43a>
        len = 4;
  41384c:	f04f 0804 	mov.w	r8, #4
                val = 13;
  413850:	210d      	movs	r1, #13
  413852:	e006      	b.n	413862 <decompress+0x43a>
        len = 4;
  413854:	f04f 0804 	mov.w	r8, #4
                val = 15;
  413858:	210f      	movs	r1, #15
  41385a:	e002      	b.n	413862 <decompress+0x43a>
        len = 4;
  41385c:	f04f 0804 	mov.w	r8, #4
                val = 0;
  413860:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413862:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413866:	4252      	negs	r2, r2
  413868:	eba2 0208 	sub.w	r2, r2, r8
  41386c:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41386e:	2301      	movs	r3, #1
  413870:	fa03 f308 	lsl.w	r3, r3, r8
  413874:	b2db      	uxtb	r3, r3
  413876:	3b01      	subs	r3, #1
  413878:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41387a:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  41387e:	43db      	mvns	r3, r3
  413880:	4093      	lsls	r3, r2
  413882:	f816 9008 	ldrb.w	r9, [r6, r8]
  413886:	ea09 0303 	and.w	r3, r9, r3
  41388a:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  41388c:	fa01 f202 	lsl.w	r2, r1, r2
  413890:	431a      	orrs	r2, r3
  413892:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  413896:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  413898:	f10c 0c01 	add.w	ip, ip, #1
  41389c:	fa0f fc8c 	sxth.w	ip, ip
  4138a0:	45a4      	cmp	ip, r4
  4138a2:	da05      	bge.n	4138b0 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  4138a4:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  4138a8:	2f03      	cmp	r7, #3
  4138aa:	d0b0      	beq.n	41380e <decompress+0x3e6>
  4138ac:	46b8      	mov	r8, r7
  4138ae:	e7d8      	b.n	413862 <decompress+0x43a>
  4138b0:	2301      	movs	r3, #1
  4138b2:	9300      	str	r3, [sp, #0]
  4138b4:	f000 bc62 	b.w	41417c <decompress+0xd54>
            bit_mask = 0x1;
  4138b8:	2301      	movs	r3, #1
  4138ba:	e00c      	b.n	4138d6 <decompress+0x4ae>
            bit_mask = 0x7;
  4138bc:	2307      	movs	r3, #7
  4138be:	e00a      	b.n	4138d6 <decompress+0x4ae>
            bit_mask = 0xF;
  4138c0:	230f      	movs	r3, #15
  4138c2:	e008      	b.n	4138d6 <decompress+0x4ae>
            bit_mask = 0xFF;
  4138c4:	23ff      	movs	r3, #255	; 0xff
  4138c6:	e006      	b.n	4138d6 <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4138c8:	2301      	movs	r3, #1
  4138ca:	408b      	lsls	r3, r1
  4138cc:	b2db      	uxtb	r3, r3
  4138ce:	3b01      	subs	r3, #1
  4138d0:	b2db      	uxtb	r3, r3
  4138d2:	e000      	b.n	4138d6 <decompress+0x4ae>
            bit_mask = 0x3;
  4138d4:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4138d6:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  4138da:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  4138de:	eb02 0b01 	add.w	fp, r2, r1
  4138e2:	f1bb 0f07 	cmp.w	fp, #7
  4138e6:	d83d      	bhi.n	413964 <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4138e8:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4138ec:	4252      	negs	r2, r2
  4138ee:	1a52      	subs	r2, r2, r1
  4138f0:	3208      	adds	r2, #8
  4138f2:	fa48 f202 	asr.w	r2, r8, r2
  4138f6:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4138f8:	b118      	cbz	r0, 413902 <decompress+0x4da>
  4138fa:	4a40      	ldr	r2, [pc, #256]	; (4139fc <decompress+0x5d4>)
  4138fc:	7812      	ldrb	r2, [r2, #0]
  4138fe:	429a      	cmp	r2, r3
  413900:	d041      	beq.n	413986 <decompress+0x55e>
        rle_prev_v = ret;
  413902:	4a3e      	ldr	r2, [pc, #248]	; (4139fc <decompress+0x5d4>)
  413904:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  413906:	4401      	add	r1, r0
  413908:	4a3d      	ldr	r2, [pc, #244]	; (413a00 <decompress+0x5d8>)
  41390a:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  41390c:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413910:	f10e 0e01 	add.w	lr, lr, #1
  413914:	fa0f fe8e 	sxth.w	lr, lr
  413918:	4574      	cmp	r4, lr
  41391a:	f340 8191 	ble.w	413c40 <decompress+0x818>
        out[i] = rle_next();
  41391e:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  413922:	4b38      	ldr	r3, [pc, #224]	; (413a04 <decompress+0x5dc>)
  413924:	781b      	ldrb	r3, [r3, #0]
  413926:	2b00      	cmp	r3, #0
  413928:	d138      	bne.n	41399c <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41392a:	4b38      	ldr	r3, [pc, #224]	; (413a0c <decompress+0x5e4>)
  41392c:	f8d3 a000 	ldr.w	sl, [r3]
  413930:	4b33      	ldr	r3, [pc, #204]	; (413a00 <decompress+0x5d8>)
  413932:	6818      	ldr	r0, [r3, #0]
  413934:	4b36      	ldr	r3, [pc, #216]	; (413a10 <decompress+0x5e8>)
  413936:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413938:	1e4b      	subs	r3, r1, #1
  41393a:	2b07      	cmp	r3, #7
  41393c:	d8c4      	bhi.n	4138c8 <decompress+0x4a0>
  41393e:	a201      	add	r2, pc, #4	; (adr r2, 413944 <decompress+0x51c>)
  413940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  413944:	004138b9 	.word	0x004138b9
  413948:	004138d5 	.word	0x004138d5
  41394c:	004138bd 	.word	0x004138bd
  413950:	004138c1 	.word	0x004138c1
  413954:	004138c9 	.word	0x004138c9
  413958:	004138c9 	.word	0x004138c9
  41395c:	004138c9 	.word	0x004138c9
  413960:	004138c5 	.word	0x004138c5
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413964:	f81a b008 	ldrb.w	fp, [sl, r8]
  413968:	44d0      	add	r8, sl
  41396a:	f898 8001 	ldrb.w	r8, [r8, #1]
  41396e:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413972:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413976:	4252      	negs	r2, r2
  413978:	1a52      	subs	r2, r2, r1
  41397a:	3210      	adds	r2, #16
  41397c:	fa4b fb02 	asr.w	fp, fp, r2
  413980:	ea0b 0303 	and.w	r3, fp, r3
  413984:	e7b8      	b.n	4138f8 <decompress+0x4d0>
            rle_cnt = 0;
  413986:	f04f 0800 	mov.w	r8, #0
  41398a:	4a1f      	ldr	r2, [pc, #124]	; (413a08 <decompress+0x5e0>)
  41398c:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  413990:	f04f 0801 	mov.w	r8, #1
  413994:	4a1b      	ldr	r2, [pc, #108]	; (413a04 <decompress+0x5dc>)
  413996:	f882 8000 	strb.w	r8, [r2]
  41399a:	e7b2      	b.n	413902 <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  41399c:	2b01      	cmp	r3, #1
  41399e:	d004      	beq.n	4139aa <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  4139a0:	2b02      	cmp	r3, #2
  4139a2:	f000 80f3 	beq.w	413b8c <decompress+0x764>
    uint8_t ret = 0;
  4139a6:	2300      	movs	r3, #0
  4139a8:	e7b0      	b.n	41390c <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  4139aa:	4b18      	ldr	r3, [pc, #96]	; (413a0c <decompress+0x5e4>)
  4139ac:	f8d3 8000 	ldr.w	r8, [r3]
  4139b0:	4b13      	ldr	r3, [pc, #76]	; (413a00 <decompress+0x5d8>)
  4139b2:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4139b4:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4139b6:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4139ba:	1c58      	adds	r0, r3, #1
  4139bc:	2807      	cmp	r0, #7
  4139be:	d829      	bhi.n	413a14 <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4139c0:	f818 1001 	ldrb.w	r1, [r8, r1]
  4139c4:	f1c3 0307 	rsb	r3, r3, #7
  4139c8:	fa41 f303 	asr.w	r3, r1, r3
  4139cc:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  4139d0:	4b0d      	ldr	r3, [pc, #52]	; (413a08 <decompress+0x5e0>)
  4139d2:	7818      	ldrb	r0, [r3, #0]
  4139d4:	3001      	adds	r0, #1
  4139d6:	b2c0      	uxtb	r0, r0
  4139d8:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  4139da:	3201      	adds	r2, #1
  4139dc:	4b08      	ldr	r3, [pc, #32]	; (413a00 <decompress+0x5d8>)
  4139de:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4139e0:	2901      	cmp	r1, #1
  4139e2:	d024      	beq.n	413a2e <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4139e4:	4b0a      	ldr	r3, [pc, #40]	; (413a10 <decompress+0x5e8>)
  4139e6:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  4139e8:	1e43      	subs	r3, r0, #1
  4139ea:	2b07      	cmp	r3, #7
  4139ec:	f200 809c 	bhi.w	413b28 <decompress+0x700>
  4139f0:	e8df f003 	tbb	[pc, r3]
  4139f4:	9694a092 	.word	0x9694a092
  4139f8:	989a9a9a 	.word	0x989a9a9a
  4139fc:	2040c728 	.word	0x2040c728
  413a00:	2040c72c 	.word	0x2040c72c
  413a04:	2040c730 	.word	0x2040c730
  413a08:	2040c721 	.word	0x2040c721
  413a0c:	2040c724 	.word	0x2040c724
  413a10:	2040c720 	.word	0x2040c720
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a14:	f818 0001 	ldrb.w	r0, [r8, r1]
  413a18:	4441      	add	r1, r8
  413a1a:	7849      	ldrb	r1, [r1, #1]
  413a1c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  413a20:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413a22:	f1c3 030f 	rsb	r3, r3, #15
  413a26:	4119      	asrs	r1, r3
  413a28:	f001 0101 	and.w	r1, r1, #1
  413a2c:	e7d0      	b.n	4139d0 <decompress+0x5a8>
            ret = rle_prev_v;
  413a2e:	4bb8      	ldr	r3, [pc, #736]	; (413d10 <decompress+0x8e8>)
  413a30:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413a32:	280b      	cmp	r0, #11
  413a34:	f47f af6a 	bne.w	41390c <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  413a38:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413a3a:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  413a3e:	f10a 0b06 	add.w	fp, sl, #6
  413a42:	f1bb 0f07 	cmp.w	fp, #7
  413a46:	d815      	bhi.n	413a74 <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413a48:	f818 0000 	ldrb.w	r0, [r8, r0]
  413a4c:	f1ca 0a02 	rsb	sl, sl, #2
  413a50:	fa40 f00a 	asr.w	r0, r0, sl
  413a54:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413a58:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 413d20 <decompress+0x8f8>
  413a5c:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  413a60:	3206      	adds	r2, #6
  413a62:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 413d1c <decompress+0x8f4>
  413a66:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  413a6a:	b188      	cbz	r0, 413a90 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  413a6c:	2102      	movs	r1, #2
  413a6e:	4aa9      	ldr	r2, [pc, #676]	; (413d14 <decompress+0x8ec>)
  413a70:	7011      	strb	r1, [r2, #0]
  413a72:	e74b      	b.n	41390c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a74:	f818 b000 	ldrb.w	fp, [r8, r0]
  413a78:	4440      	add	r0, r8
  413a7a:	7840      	ldrb	r0, [r0, #1]
  413a7c:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  413a80:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413a82:	f1ca 0a0a 	rsb	sl, sl, #10
  413a86:	fa40 f00a 	asr.w	r0, r0, sl
  413a8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  413a8e:	e7e3      	b.n	413a58 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413a90:	4ba1      	ldr	r3, [pc, #644]	; (413d18 <decompress+0x8f0>)
  413a92:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  413a96:	f10b 33ff 	add.w	r3, fp, #4294967295
  413a9a:	2b07      	cmp	r3, #7
  413a9c:	d80b      	bhi.n	413ab6 <decompress+0x68e>
  413a9e:	e8df f003 	tbb	[pc, r3]
  413aa2:	1112      	.short	0x1112
  413aa4:	0a0a0604 	.word	0x0a0a0604
  413aa8:	080a      	.short	0x080a
            bit_mask = 0x7;
  413aaa:	2107      	movs	r1, #7
  413aac:	e00b      	b.n	413ac6 <decompress+0x69e>
            bit_mask = 0xF;
  413aae:	210f      	movs	r1, #15
  413ab0:	e009      	b.n	413ac6 <decompress+0x69e>
            bit_mask = 0xFF;
  413ab2:	21ff      	movs	r1, #255	; 0xff
  413ab4:	e007      	b.n	413ac6 <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413ab6:	2101      	movs	r1, #1
  413ab8:	fa01 f10b 	lsl.w	r1, r1, fp
  413abc:	b2c9      	uxtb	r1, r1
  413abe:	3901      	subs	r1, #1
  413ac0:	b2c9      	uxtb	r1, r1
  413ac2:	e000      	b.n	413ac6 <decompress+0x69e>
            bit_mask = 0x3;
  413ac4:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  413ac6:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413ac8:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413acc:	eb03 0a0b 	add.w	sl, r3, fp
  413ad0:	f1ba 0f07 	cmp.w	sl, #7
  413ad4:	d811      	bhi.n	413afa <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413ad6:	f818 0000 	ldrb.w	r0, [r8, r0]
  413ada:	425b      	negs	r3, r3
  413adc:	eba3 030b 	sub.w	r3, r3, fp
  413ae0:	3308      	adds	r3, #8
  413ae2:	fa40 f303 	asr.w	r3, r0, r3
  413ae6:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413ae8:	4989      	ldr	r1, [pc, #548]	; (413d10 <decompress+0x8e8>)
  413aea:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413aec:	445a      	add	r2, fp
  413aee:	498b      	ldr	r1, [pc, #556]	; (413d1c <decompress+0x8f4>)
  413af0:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413af2:	2100      	movs	r1, #0
  413af4:	4a87      	ldr	r2, [pc, #540]	; (413d14 <decompress+0x8ec>)
  413af6:	7011      	strb	r1, [r2, #0]
  413af8:	e708      	b.n	41390c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413afa:	f818 a000 	ldrb.w	sl, [r8, r0]
  413afe:	4440      	add	r0, r8
  413b00:	7840      	ldrb	r0, [r0, #1]
  413b02:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  413b06:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413b08:	425b      	negs	r3, r3
  413b0a:	eba3 030b 	sub.w	r3, r3, fp
  413b0e:	3310      	adds	r3, #16
  413b10:	fa40 f303 	asr.w	r3, r0, r3
  413b14:	400b      	ands	r3, r1
  413b16:	e7e7      	b.n	413ae8 <decompress+0x6c0>
            bit_mask = 0x1;
  413b18:	2301      	movs	r3, #1
  413b1a:	e00c      	b.n	413b36 <decompress+0x70e>
            bit_mask = 0x7;
  413b1c:	2307      	movs	r3, #7
  413b1e:	e00a      	b.n	413b36 <decompress+0x70e>
            bit_mask = 0xF;
  413b20:	230f      	movs	r3, #15
  413b22:	e008      	b.n	413b36 <decompress+0x70e>
            bit_mask = 0xFF;
  413b24:	23ff      	movs	r3, #255	; 0xff
  413b26:	e006      	b.n	413b36 <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413b28:	2301      	movs	r3, #1
  413b2a:	4083      	lsls	r3, r0
  413b2c:	b2db      	uxtb	r3, r3
  413b2e:	3b01      	subs	r3, #1
  413b30:	b2db      	uxtb	r3, r3
  413b32:	e000      	b.n	413b36 <decompress+0x70e>
            bit_mask = 0x3;
  413b34:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413b36:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413b3a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413b3e:	eb01 0b00 	add.w	fp, r1, r0
  413b42:	f1bb 0f07 	cmp.w	fp, #7
  413b46:	d810      	bhi.n	413b6a <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413b48:	f818 800a 	ldrb.w	r8, [r8, sl]
  413b4c:	4249      	negs	r1, r1
  413b4e:	1a09      	subs	r1, r1, r0
  413b50:	3108      	adds	r1, #8
  413b52:	fa48 f101 	asr.w	r1, r8, r1
  413b56:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413b58:	496d      	ldr	r1, [pc, #436]	; (413d10 <decompress+0x8e8>)
  413b5a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413b5c:	4402      	add	r2, r0
  413b5e:	496f      	ldr	r1, [pc, #444]	; (413d1c <decompress+0x8f4>)
  413b60:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413b62:	2100      	movs	r1, #0
  413b64:	4a6b      	ldr	r2, [pc, #428]	; (413d14 <decompress+0x8ec>)
  413b66:	7011      	strb	r1, [r2, #0]
  413b68:	e6d0      	b.n	41390c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413b6a:	f818 b00a 	ldrb.w	fp, [r8, sl]
  413b6e:	44d0      	add	r8, sl
  413b70:	f898 8001 	ldrb.w	r8, [r8, #1]
  413b74:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413b78:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413b7c:	4249      	negs	r1, r1
  413b7e:	1a09      	subs	r1, r1, r0
  413b80:	3110      	adds	r1, #16
  413b82:	fa4b fb01 	asr.w	fp, fp, r1
  413b86:	ea0b 0303 	and.w	r3, fp, r3
  413b8a:	e7e5      	b.n	413b58 <decompress+0x730>
        ret = rle_prev_v;
  413b8c:	4b60      	ldr	r3, [pc, #384]	; (413d10 <decompress+0x8e8>)
  413b8e:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  413b90:	4963      	ldr	r1, [pc, #396]	; (413d20 <decompress+0x8f8>)
  413b92:	780a      	ldrb	r2, [r1, #0]
  413b94:	3a01      	subs	r2, #1
  413b96:	b2d2      	uxtb	r2, r2
  413b98:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413b9a:	2a00      	cmp	r2, #0
  413b9c:	f47f aeb6 	bne.w	41390c <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413ba0:	4b60      	ldr	r3, [pc, #384]	; (413d24 <decompress+0x8fc>)
  413ba2:	f8d3 a000 	ldr.w	sl, [r3]
  413ba6:	4b5d      	ldr	r3, [pc, #372]	; (413d1c <decompress+0x8f4>)
  413ba8:	6818      	ldr	r0, [r3, #0]
  413baa:	4b5b      	ldr	r3, [pc, #364]	; (413d18 <decompress+0x8f0>)
  413bac:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413bae:	1e4b      	subs	r3, r1, #1
  413bb0:	2b07      	cmp	r3, #7
  413bb2:	d80d      	bhi.n	413bd0 <decompress+0x7a8>
  413bb4:	e8df f003 	tbb	[pc, r3]
  413bb8:	08061204 	.word	0x08061204
  413bbc:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  413bc0:	2301      	movs	r3, #1
  413bc2:	e00c      	b.n	413bde <decompress+0x7b6>
            bit_mask = 0x7;
  413bc4:	2307      	movs	r3, #7
  413bc6:	e00a      	b.n	413bde <decompress+0x7b6>
            bit_mask = 0xF;
  413bc8:	230f      	movs	r3, #15
  413bca:	e008      	b.n	413bde <decompress+0x7b6>
            bit_mask = 0xFF;
  413bcc:	23ff      	movs	r3, #255	; 0xff
  413bce:	e006      	b.n	413bde <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413bd0:	2301      	movs	r3, #1
  413bd2:	408b      	lsls	r3, r1
  413bd4:	b2db      	uxtb	r3, r3
  413bd6:	3b01      	subs	r3, #1
  413bd8:	b2db      	uxtb	r3, r3
  413bda:	e000      	b.n	413bde <decompress+0x7b6>
            bit_mask = 0x3;
  413bdc:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413bde:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  413be2:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  413be6:	eb02 0b01 	add.w	fp, r2, r1
  413bea:	f1bb 0f07 	cmp.w	fp, #7
  413bee:	d810      	bhi.n	413c12 <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413bf0:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413bf4:	4252      	negs	r2, r2
  413bf6:	1a52      	subs	r2, r2, r1
  413bf8:	3208      	adds	r2, #8
  413bfa:	fa48 f202 	asr.w	r2, r8, r2
  413bfe:	4013      	ands	r3, r2
            rle_prev_v = ret;
  413c00:	4a43      	ldr	r2, [pc, #268]	; (413d10 <decompress+0x8e8>)
  413c02:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  413c04:	4401      	add	r1, r0
  413c06:	4a45      	ldr	r2, [pc, #276]	; (413d1c <decompress+0x8f4>)
  413c08:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  413c0a:	2100      	movs	r1, #0
  413c0c:	4a41      	ldr	r2, [pc, #260]	; (413d14 <decompress+0x8ec>)
  413c0e:	7011      	strb	r1, [r2, #0]
  413c10:	e67c      	b.n	41390c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413c12:	f81a b008 	ldrb.w	fp, [sl, r8]
  413c16:	44d0      	add	r8, sl
  413c18:	f898 8001 	ldrb.w	r8, [r8, #1]
  413c1c:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413c20:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413c24:	4252      	negs	r2, r2
  413c26:	1a52      	subs	r2, r2, r1
  413c28:	3210      	adds	r2, #16
  413c2a:	fa4b fb02 	asr.w	fp, fp, r2
  413c2e:	ea0b 0303 	and.w	r3, fp, r3
  413c32:	e7e5      	b.n	413c00 <decompress+0x7d8>
  413c34:	f04f 0e00 	mov.w	lr, #0
  413c38:	9005      	str	r0, [sp, #20]
  413c3a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  413c3e:	e66b      	b.n	413918 <decompress+0x4f0>
  413c40:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  413c42:	f04f 0c00 	mov.w	ip, #0
  413c46:	f8dd e008 	ldr.w	lr, [sp, #8]
  413c4a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  413c4e:	e048      	b.n	413ce2 <decompress+0x8ba>
        switch(val) {
  413c50:	2907      	cmp	r1, #7
  413c52:	d805      	bhi.n	413c60 <decompress+0x838>
  413c54:	e8df f001 	tbb	[pc, r1]
  413c58:	0f0b0723 	.word	0x0f0b0723
  413c5c:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  413c60:	f04f 0904 	mov.w	r9, #4
  413c64:	e01e      	b.n	413ca4 <decompress+0x87c>
  413c66:	f04f 0904 	mov.w	r9, #4
                val = 2;
  413c6a:	2102      	movs	r1, #2
  413c6c:	e01a      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c6e:	f04f 0904 	mov.w	r9, #4
                val = 4;
  413c72:	4649      	mov	r1, r9
  413c74:	e016      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c76:	f04f 0904 	mov.w	r9, #4
                val = 6;
  413c7a:	2106      	movs	r1, #6
  413c7c:	e012      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c7e:	f04f 0904 	mov.w	r9, #4
                val = 9;
  413c82:	2109      	movs	r1, #9
  413c84:	e00e      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c86:	f04f 0904 	mov.w	r9, #4
                val = 11;
  413c8a:	210b      	movs	r1, #11
  413c8c:	e00a      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c8e:	f04f 0904 	mov.w	r9, #4
                val = 13;
  413c92:	210d      	movs	r1, #13
  413c94:	e006      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c96:	f04f 0904 	mov.w	r9, #4
                val = 15;
  413c9a:	210f      	movs	r1, #15
  413c9c:	e002      	b.n	413ca4 <decompress+0x87c>
        len = 4;
  413c9e:	f04f 0904 	mov.w	r9, #4
                val = 0;
  413ca2:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413ca4:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413ca8:	4252      	negs	r2, r2
  413caa:	eba2 0209 	sub.w	r2, r2, r9
  413cae:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413cb0:	2301      	movs	r3, #1
  413cb2:	fa03 f309 	lsl.w	r3, r3, r9
  413cb6:	b2db      	uxtb	r3, r3
  413cb8:	3b01      	subs	r3, #1
  413cba:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413cbc:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  413cc0:	43db      	mvns	r3, r3
  413cc2:	4093      	lsls	r3, r2
  413cc4:	f816 a009 	ldrb.w	sl, [r6, r9]
  413cc8:	ea0a 0303 	and.w	r3, sl, r3
  413ccc:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413cce:	fa01 f202 	lsl.w	r2, r1, r2
  413cd2:	431a      	orrs	r2, r3
  413cd4:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  413cd8:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  413cda:	f10c 0c01 	add.w	ip, ip, #1
  413cde:	fa0f fc8c 	sxth.w	ip, ip
  413ce2:	45a4      	cmp	ip, r4
  413ce4:	f280 8246 	bge.w	414174 <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  413ce8:	f818 100c 	ldrb.w	r1, [r8, ip]
  413cec:	f815 300c 	ldrb.w	r3, [r5, ip]
  413cf0:	4059      	eors	r1, r3
  413cf2:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  413cf6:	2f03      	cmp	r7, #3
  413cf8:	d0aa      	beq.n	413c50 <decompress+0x828>
  413cfa:	46b9      	mov	r9, r7
  413cfc:	e7d2      	b.n	413ca4 <decompress+0x87c>
            bit_mask = 0x1;
  413cfe:	f04f 0901 	mov.w	r9, #1
  413d02:	e01d      	b.n	413d40 <decompress+0x918>
            bit_mask = 0x7;
  413d04:	f04f 0907 	mov.w	r9, #7
  413d08:	e01a      	b.n	413d40 <decompress+0x918>
            bit_mask = 0xF;
  413d0a:	f04f 090f 	mov.w	r9, #15
  413d0e:	e017      	b.n	413d40 <decompress+0x918>
  413d10:	2040c728 	.word	0x2040c728
  413d14:	2040c730 	.word	0x2040c730
  413d18:	2040c720 	.word	0x2040c720
  413d1c:	2040c72c 	.word	0x2040c72c
  413d20:	2040c721 	.word	0x2040c721
  413d24:	2040c724 	.word	0x2040c724
            bit_mask = 0xFF;
  413d28:	f04f 09ff 	mov.w	r9, #255	; 0xff
  413d2c:	e008      	b.n	413d40 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413d2e:	2301      	movs	r3, #1
  413d30:	4093      	lsls	r3, r2
  413d32:	b2db      	uxtb	r3, r3
  413d34:	3b01      	subs	r3, #1
  413d36:	fa5f f983 	uxtb.w	r9, r3
  413d3a:	e001      	b.n	413d40 <decompress+0x918>
            bit_mask = 0x3;
  413d3c:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  413d40:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  413d44:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  413d48:	188b      	adds	r3, r1, r2
  413d4a:	2b07      	cmp	r3, #7
  413d4c:	d840      	bhi.n	413dd0 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413d4e:	f81b 300a 	ldrb.w	r3, [fp, sl]
  413d52:	4249      	negs	r1, r1
  413d54:	1a89      	subs	r1, r1, r2
  413d56:	3108      	adds	r1, #8
  413d58:	410b      	asrs	r3, r1
  413d5a:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413d5e:	f1b8 0f00 	cmp.w	r8, #0
  413d62:	d003      	beq.n	413d6c <decompress+0x944>
  413d64:	49b9      	ldr	r1, [pc, #740]	; (41404c <decompress+0xc24>)
  413d66:	7809      	ldrb	r1, [r1, #0]
  413d68:	4299      	cmp	r1, r3
  413d6a:	d040      	beq.n	413dee <decompress+0x9c6>
        rle_prev_v = ret;
  413d6c:	49b7      	ldr	r1, [pc, #732]	; (41404c <decompress+0xc24>)
  413d6e:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  413d70:	4442      	add	r2, r8
  413d72:	49b7      	ldr	r1, [pc, #732]	; (414050 <decompress+0xc28>)
  413d74:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  413d76:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413d7a:	f10e 0e01 	add.w	lr, lr, #1
  413d7e:	fa0f fe8e 	sxth.w	lr, lr
  413d82:	4574      	cmp	r4, lr
  413d84:	f340 81a0 	ble.w	4140c8 <decompress+0xca0>
        out[i] = rle_next();
  413d88:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  413d8c:	4bb1      	ldr	r3, [pc, #708]	; (414054 <decompress+0xc2c>)
  413d8e:	781b      	ldrb	r3, [r3, #0]
  413d90:	2b00      	cmp	r3, #0
  413d92:	d137      	bne.n	413e04 <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413d94:	4bb0      	ldr	r3, [pc, #704]	; (414058 <decompress+0xc30>)
  413d96:	f8d3 b000 	ldr.w	fp, [r3]
  413d9a:	4bad      	ldr	r3, [pc, #692]	; (414050 <decompress+0xc28>)
  413d9c:	f8d3 8000 	ldr.w	r8, [r3]
  413da0:	4bae      	ldr	r3, [pc, #696]	; (41405c <decompress+0xc34>)
  413da2:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413da4:	1e53      	subs	r3, r2, #1
  413da6:	2b07      	cmp	r3, #7
  413da8:	d8c1      	bhi.n	413d2e <decompress+0x906>
  413daa:	a101      	add	r1, pc, #4	; (adr r1, 413db0 <decompress+0x988>)
  413dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  413db0:	00413cff 	.word	0x00413cff
  413db4:	00413d3d 	.word	0x00413d3d
  413db8:	00413d05 	.word	0x00413d05
  413dbc:	00413d0b 	.word	0x00413d0b
  413dc0:	00413d2f 	.word	0x00413d2f
  413dc4:	00413d2f 	.word	0x00413d2f
  413dc8:	00413d2f 	.word	0x00413d2f
  413dcc:	00413d29 	.word	0x00413d29
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413dd0:	f81b 300a 	ldrb.w	r3, [fp, sl]
  413dd4:	44da      	add	sl, fp
  413dd6:	f89a a001 	ldrb.w	sl, [sl, #1]
  413dda:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  413dde:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413de0:	4249      	negs	r1, r1
  413de2:	1a89      	subs	r1, r1, r2
  413de4:	3110      	adds	r1, #16
  413de6:	410b      	asrs	r3, r1
  413de8:	ea03 0309 	and.w	r3, r3, r9
  413dec:	e7b7      	b.n	413d5e <decompress+0x936>
            rle_cnt = 0;
  413dee:	f04f 0900 	mov.w	r9, #0
  413df2:	499b      	ldr	r1, [pc, #620]	; (414060 <decompress+0xc38>)
  413df4:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  413df8:	f04f 0901 	mov.w	r9, #1
  413dfc:	4995      	ldr	r1, [pc, #596]	; (414054 <decompress+0xc2c>)
  413dfe:	f881 9000 	strb.w	r9, [r1]
  413e02:	e7b3      	b.n	413d6c <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  413e04:	2b01      	cmp	r3, #1
  413e06:	d004      	beq.n	413e12 <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  413e08:	2b02      	cmp	r3, #2
  413e0a:	f000 80fa 	beq.w	414002 <decompress+0xbda>
    uint8_t ret = 0;
  413e0e:	2300      	movs	r3, #0
  413e10:	e7b1      	b.n	413d76 <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  413e12:	4b91      	ldr	r3, [pc, #580]	; (414058 <decompress+0xc30>)
  413e14:	f8d3 9000 	ldr.w	r9, [r3]
  413e18:	4b8d      	ldr	r3, [pc, #564]	; (414050 <decompress+0xc28>)
  413e1a:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413e1c:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413e1e:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413e22:	f103 0801 	add.w	r8, r3, #1
  413e26:	f1b8 0f07 	cmp.w	r8, #7
  413e2a:	d822      	bhi.n	413e72 <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413e2c:	f819 1001 	ldrb.w	r1, [r9, r1]
  413e30:	f1c3 0307 	rsb	r3, r3, #7
  413e34:	4119      	asrs	r1, r3
  413e36:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  413e3a:	4b89      	ldr	r3, [pc, #548]	; (414060 <decompress+0xc38>)
  413e3c:	f893 8000 	ldrb.w	r8, [r3]
  413e40:	f108 0801 	add.w	r8, r8, #1
  413e44:	fa5f f888 	uxtb.w	r8, r8
  413e48:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  413e4c:	3201      	adds	r2, #1
  413e4e:	4b80      	ldr	r3, [pc, #512]	; (414050 <decompress+0xc28>)
  413e50:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413e52:	2901      	cmp	r1, #1
  413e54:	d01a      	beq.n	413e8c <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413e56:	4b81      	ldr	r3, [pc, #516]	; (41405c <decompress+0xc34>)
  413e58:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  413e5c:	f108 33ff 	add.w	r3, r8, #4294967295
  413e60:	2b07      	cmp	r3, #7
  413e62:	f200 8099 	bhi.w	413f98 <decompress+0xb70>
  413e66:	e8df f003 	tbb	[pc, r3]
  413e6a:	9e8f      	.short	0x9e8f
  413e6c:	97979391 	.word	0x97979391
  413e70:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413e72:	f819 8001 	ldrb.w	r8, [r9, r1]
  413e76:	4449      	add	r1, r9
  413e78:	7849      	ldrb	r1, [r1, #1]
  413e7a:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  413e7e:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413e80:	f1c3 030f 	rsb	r3, r3, #15
  413e84:	4119      	asrs	r1, r3
  413e86:	f001 0101 	and.w	r1, r1, #1
  413e8a:	e7d6      	b.n	413e3a <decompress+0xa12>
            ret = rle_prev_v;
  413e8c:	4b6f      	ldr	r3, [pc, #444]	; (41404c <decompress+0xc24>)
  413e8e:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413e90:	f1b8 0f0b 	cmp.w	r8, #11
  413e94:	f47f af6f 	bne.w	413d76 <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  413e98:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413e9c:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  413ea0:	f10b 0806 	add.w	r8, fp, #6
  413ea4:	f1b8 0f07 	cmp.w	r8, #7
  413ea8:	d817      	bhi.n	413eda <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413eaa:	f819 a00a 	ldrb.w	sl, [r9, sl]
  413eae:	f1cb 0802 	rsb	r8, fp, #2
  413eb2:	fa4a f808 	asr.w	r8, sl, r8
  413eb6:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413eba:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 414060 <decompress+0xc38>
  413ebe:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  413ec2:	3206      	adds	r2, #6
  413ec4:	f8df a188 	ldr.w	sl, [pc, #392]	; 414050 <decompress+0xc28>
  413ec8:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  413ecc:	f1b8 0f00 	cmp.w	r8, #0
  413ed0:	d013      	beq.n	413efa <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  413ed2:	2102      	movs	r1, #2
  413ed4:	4a5f      	ldr	r2, [pc, #380]	; (414054 <decompress+0xc2c>)
  413ed6:	7011      	strb	r1, [r2, #0]
  413ed8:	e74d      	b.n	413d76 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413eda:	f819 800a 	ldrb.w	r8, [r9, sl]
  413ede:	44ca      	add	sl, r9
  413ee0:	f89a a001 	ldrb.w	sl, [sl, #1]
  413ee4:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  413ee8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413eec:	f1cb 0b0a 	rsb	fp, fp, #10
  413ef0:	fa48 f80b 	asr.w	r8, r8, fp
  413ef4:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  413ef8:	e7df      	b.n	413eba <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413efa:	4b58      	ldr	r3, [pc, #352]	; (41405c <decompress+0xc34>)
  413efc:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  413f00:	f108 33ff 	add.w	r3, r8, #4294967295
  413f04:	2b07      	cmp	r3, #7
  413f06:	d80b      	bhi.n	413f20 <decompress+0xaf8>
  413f08:	e8df f003 	tbb	[pc, r3]
  413f0c:	06041112 	.word	0x06041112
  413f10:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  413f14:	2107      	movs	r1, #7
  413f16:	e00b      	b.n	413f30 <decompress+0xb08>
            bit_mask = 0xF;
  413f18:	210f      	movs	r1, #15
  413f1a:	e009      	b.n	413f30 <decompress+0xb08>
            bit_mask = 0xFF;
  413f1c:	21ff      	movs	r1, #255	; 0xff
  413f1e:	e007      	b.n	413f30 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413f20:	2101      	movs	r1, #1
  413f22:	fa01 f108 	lsl.w	r1, r1, r8
  413f26:	b2c9      	uxtb	r1, r1
  413f28:	3901      	subs	r1, #1
  413f2a:	b2c9      	uxtb	r1, r1
  413f2c:	e000      	b.n	413f30 <decompress+0xb08>
            bit_mask = 0x3;
  413f2e:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  413f30:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413f34:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413f38:	eb03 0b08 	add.w	fp, r3, r8
  413f3c:	f1bb 0f07 	cmp.w	fp, #7
  413f40:	d811      	bhi.n	413f66 <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f42:	f819 900a 	ldrb.w	r9, [r9, sl]
  413f46:	425b      	negs	r3, r3
  413f48:	eba3 0308 	sub.w	r3, r3, r8
  413f4c:	3308      	adds	r3, #8
  413f4e:	fa49 f303 	asr.w	r3, r9, r3
  413f52:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413f54:	493d      	ldr	r1, [pc, #244]	; (41404c <decompress+0xc24>)
  413f56:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413f58:	4442      	add	r2, r8
  413f5a:	493d      	ldr	r1, [pc, #244]	; (414050 <decompress+0xc28>)
  413f5c:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413f5e:	2100      	movs	r1, #0
  413f60:	4a3c      	ldr	r2, [pc, #240]	; (414054 <decompress+0xc2c>)
  413f62:	7011      	strb	r1, [r2, #0]
  413f64:	e707      	b.n	413d76 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413f66:	f819 b00a 	ldrb.w	fp, [r9, sl]
  413f6a:	44d1      	add	r9, sl
  413f6c:	f899 9001 	ldrb.w	r9, [r9, #1]
  413f70:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  413f74:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413f78:	425b      	negs	r3, r3
  413f7a:	eba3 0308 	sub.w	r3, r3, r8
  413f7e:	3310      	adds	r3, #16
  413f80:	fa49 f303 	asr.w	r3, r9, r3
  413f84:	400b      	ands	r3, r1
  413f86:	e7e5      	b.n	413f54 <decompress+0xb2c>
            bit_mask = 0x1;
  413f88:	2301      	movs	r3, #1
  413f8a:	e00d      	b.n	413fa8 <decompress+0xb80>
            bit_mask = 0x7;
  413f8c:	2307      	movs	r3, #7
  413f8e:	e00b      	b.n	413fa8 <decompress+0xb80>
            bit_mask = 0xF;
  413f90:	230f      	movs	r3, #15
  413f92:	e009      	b.n	413fa8 <decompress+0xb80>
            bit_mask = 0xFF;
  413f94:	23ff      	movs	r3, #255	; 0xff
  413f96:	e007      	b.n	413fa8 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413f98:	2301      	movs	r3, #1
  413f9a:	fa03 f308 	lsl.w	r3, r3, r8
  413f9e:	b2db      	uxtb	r3, r3
  413fa0:	3b01      	subs	r3, #1
  413fa2:	b2db      	uxtb	r3, r3
  413fa4:	e000      	b.n	413fa8 <decompress+0xb80>
            bit_mask = 0x3;
  413fa6:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413fa8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413fac:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413fb0:	eb01 0b08 	add.w	fp, r1, r8
  413fb4:	f1bb 0f07 	cmp.w	fp, #7
  413fb8:	d811      	bhi.n	413fde <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413fba:	f819 900a 	ldrb.w	r9, [r9, sl]
  413fbe:	4249      	negs	r1, r1
  413fc0:	eba1 0108 	sub.w	r1, r1, r8
  413fc4:	3108      	adds	r1, #8
  413fc6:	fa49 f101 	asr.w	r1, r9, r1
  413fca:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413fcc:	491f      	ldr	r1, [pc, #124]	; (41404c <decompress+0xc24>)
  413fce:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413fd0:	4442      	add	r2, r8
  413fd2:	491f      	ldr	r1, [pc, #124]	; (414050 <decompress+0xc28>)
  413fd4:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413fd6:	2100      	movs	r1, #0
  413fd8:	4a1e      	ldr	r2, [pc, #120]	; (414054 <decompress+0xc2c>)
  413fda:	7011      	strb	r1, [r2, #0]
  413fdc:	e6cb      	b.n	413d76 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413fde:	f819 b00a 	ldrb.w	fp, [r9, sl]
  413fe2:	44d1      	add	r9, sl
  413fe4:	f899 9001 	ldrb.w	r9, [r9, #1]
  413fe8:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  413fec:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ff0:	4249      	negs	r1, r1
  413ff2:	eba1 0108 	sub.w	r1, r1, r8
  413ff6:	3110      	adds	r1, #16
  413ff8:	fa49 f901 	asr.w	r9, r9, r1
  413ffc:	ea09 0303 	and.w	r3, r9, r3
  414000:	e7e4      	b.n	413fcc <decompress+0xba4>
        ret = rle_prev_v;
  414002:	4b12      	ldr	r3, [pc, #72]	; (41404c <decompress+0xc24>)
  414004:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414006:	4916      	ldr	r1, [pc, #88]	; (414060 <decompress+0xc38>)
  414008:	780a      	ldrb	r2, [r1, #0]
  41400a:	3a01      	subs	r2, #1
  41400c:	b2d2      	uxtb	r2, r2
  41400e:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414010:	2a00      	cmp	r2, #0
  414012:	f47f aeb0 	bne.w	413d76 <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414016:	4b10      	ldr	r3, [pc, #64]	; (414058 <decompress+0xc30>)
  414018:	f8d3 a000 	ldr.w	sl, [r3]
  41401c:	4b0c      	ldr	r3, [pc, #48]	; (414050 <decompress+0xc28>)
  41401e:	f8d3 9000 	ldr.w	r9, [r3]
  414022:	4b0e      	ldr	r3, [pc, #56]	; (41405c <decompress+0xc34>)
  414024:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414028:	f108 33ff 	add.w	r3, r8, #4294967295
  41402c:	2b07      	cmp	r3, #7
  41402e:	d819      	bhi.n	414064 <decompress+0xc3c>
  414030:	e8df f003 	tbb	[pc, r3]
  414034:	08061f04 	.word	0x08061f04
  414038:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  41403c:	2301      	movs	r3, #1
  41403e:	e019      	b.n	414074 <decompress+0xc4c>
            bit_mask = 0x7;
  414040:	2307      	movs	r3, #7
  414042:	e017      	b.n	414074 <decompress+0xc4c>
            bit_mask = 0xF;
  414044:	230f      	movs	r3, #15
  414046:	e015      	b.n	414074 <decompress+0xc4c>
            bit_mask = 0xFF;
  414048:	23ff      	movs	r3, #255	; 0xff
  41404a:	e013      	b.n	414074 <decompress+0xc4c>
  41404c:	2040c728 	.word	0x2040c728
  414050:	2040c72c 	.word	0x2040c72c
  414054:	2040c730 	.word	0x2040c730
  414058:	2040c724 	.word	0x2040c724
  41405c:	2040c720 	.word	0x2040c720
  414060:	2040c721 	.word	0x2040c721
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414064:	2301      	movs	r3, #1
  414066:	fa03 f308 	lsl.w	r3, r3, r8
  41406a:	b2db      	uxtb	r3, r3
  41406c:	3b01      	subs	r3, #1
  41406e:	b2db      	uxtb	r3, r3
  414070:	e000      	b.n	414074 <decompress+0xc4c>
            bit_mask = 0x3;
  414072:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  414074:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  414078:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  41407c:	eb02 0b08 	add.w	fp, r2, r8
  414080:	f1bb 0f07 	cmp.w	fp, #7
  414084:	d812      	bhi.n	4140ac <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414086:	f81a a001 	ldrb.w	sl, [sl, r1]
  41408a:	4251      	negs	r1, r2
  41408c:	eba1 0108 	sub.w	r1, r1, r8
  414090:	3108      	adds	r1, #8
  414092:	fa4a f101 	asr.w	r1, sl, r1
  414096:	400b      	ands	r3, r1
            rle_prev_v = ret;
  414098:	4a42      	ldr	r2, [pc, #264]	; (4141a4 <decompress+0xd7c>)
  41409a:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  41409c:	eb08 0209 	add.w	r2, r8, r9
  4140a0:	4941      	ldr	r1, [pc, #260]	; (4141a8 <decompress+0xd80>)
  4140a2:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4140a4:	2100      	movs	r1, #0
  4140a6:	4a41      	ldr	r2, [pc, #260]	; (4141ac <decompress+0xd84>)
  4140a8:	7011      	strb	r1, [r2, #0]
  4140aa:	e664      	b.n	413d76 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4140ac:	f81a b001 	ldrb.w	fp, [sl, r1]
  4140b0:	4451      	add	r1, sl
  4140b2:	7849      	ldrb	r1, [r1, #1]
  4140b4:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  4140b8:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4140ba:	4252      	negs	r2, r2
  4140bc:	eba2 0208 	sub.w	r2, r2, r8
  4140c0:	3210      	adds	r2, #16
  4140c2:	4111      	asrs	r1, r2
  4140c4:	400b      	ands	r3, r1
  4140c6:	e7e7      	b.n	414098 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  4140c8:	f04f 0c00 	mov.w	ip, #0
  4140cc:	f8dd e008 	ldr.w	lr, [sp, #8]
  4140d0:	e048      	b.n	414164 <decompress+0xd3c>
        switch(val) {
  4140d2:	2907      	cmp	r1, #7
  4140d4:	d805      	bhi.n	4140e2 <decompress+0xcba>
  4140d6:	e8df f001 	tbb	[pc, r1]
  4140da:	0723      	.short	0x0723
  4140dc:	17130f0b 	.word	0x17130f0b
  4140e0:	1f1b      	.short	0x1f1b
        len = 4;
  4140e2:	f04f 0804 	mov.w	r8, #4
  4140e6:	e01e      	b.n	414126 <decompress+0xcfe>
  4140e8:	f04f 0804 	mov.w	r8, #4
                val = 2;
  4140ec:	2102      	movs	r1, #2
  4140ee:	e01a      	b.n	414126 <decompress+0xcfe>
        len = 4;
  4140f0:	f04f 0804 	mov.w	r8, #4
                val = 4;
  4140f4:	4641      	mov	r1, r8
  4140f6:	e016      	b.n	414126 <decompress+0xcfe>
        len = 4;
  4140f8:	f04f 0804 	mov.w	r8, #4
                val = 6;
  4140fc:	2106      	movs	r1, #6
  4140fe:	e012      	b.n	414126 <decompress+0xcfe>
        len = 4;
  414100:	f04f 0804 	mov.w	r8, #4
                val = 9;
  414104:	2109      	movs	r1, #9
  414106:	e00e      	b.n	414126 <decompress+0xcfe>
        len = 4;
  414108:	f04f 0804 	mov.w	r8, #4
                val = 11;
  41410c:	210b      	movs	r1, #11
  41410e:	e00a      	b.n	414126 <decompress+0xcfe>
        len = 4;
  414110:	f04f 0804 	mov.w	r8, #4
                val = 13;
  414114:	210d      	movs	r1, #13
  414116:	e006      	b.n	414126 <decompress+0xcfe>
        len = 4;
  414118:	f04f 0804 	mov.w	r8, #4
                val = 15;
  41411c:	210f      	movs	r1, #15
  41411e:	e002      	b.n	414126 <decompress+0xcfe>
        len = 4;
  414120:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414124:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414126:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  41412a:	4252      	negs	r2, r2
  41412c:	eba2 0208 	sub.w	r2, r2, r8
  414130:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414132:	2301      	movs	r3, #1
  414134:	fa03 f308 	lsl.w	r3, r3, r8
  414138:	b2db      	uxtb	r3, r3
  41413a:	3b01      	subs	r3, #1
  41413c:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41413e:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  414142:	43db      	mvns	r3, r3
  414144:	4093      	lsls	r3, r2
  414146:	f816 9008 	ldrb.w	r9, [r6, r8]
  41414a:	ea09 0303 	and.w	r3, r9, r3
  41414e:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  414150:	fa01 f202 	lsl.w	r2, r1, r2
  414154:	431a      	orrs	r2, r3
  414156:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  41415a:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  41415c:	f10c 0c01 	add.w	ip, ip, #1
  414160:	fa0f fc8c 	sxth.w	ip, ip
  414164:	45a4      	cmp	ip, r4
  414166:	da05      	bge.n	414174 <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  414168:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  41416c:	2f03      	cmp	r7, #3
  41416e:	d0b0      	beq.n	4140d2 <decompress+0xcaa>
  414170:	46b8      	mov	r8, r7
  414172:	e7d8      	b.n	414126 <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  414174:	9b00      	ldr	r3, [sp, #0]
  414176:	3301      	adds	r3, #1
  414178:	b21b      	sxth	r3, r3
  41417a:	9300      	str	r3, [sp, #0]
  41417c:	9b00      	ldr	r3, [sp, #0]
  41417e:	9a01      	ldr	r2, [sp, #4]
  414180:	4293      	cmp	r3, r2
  414182:	da06      	bge.n	414192 <decompress+0xd6a>
        if(prefilter) {
  414184:	9b04      	ldr	r3, [sp, #16]
  414186:	2b00      	cmp	r3, #0
  414188:	f47f ad54 	bne.w	413c34 <decompress+0x80c>
  41418c:	f04f 0e00 	mov.w	lr, #0
  414190:	e5f7      	b.n	413d82 <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  414192:	4628      	mov	r0, r5
  414194:	4c06      	ldr	r4, [pc, #24]	; (4141b0 <decompress+0xd88>)
  414196:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  414198:	9803      	ldr	r0, [sp, #12]
  41419a:	47a0      	blx	r4
}
  41419c:	b007      	add	sp, #28
  41419e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4141a2:	bf00      	nop
  4141a4:	2040c728 	.word	0x2040c728
  4141a8:	2040c72c 	.word	0x2040c72c
  4141ac:	2040c730 	.word	0x2040c730
  4141b0:	00415d8d 	.word	0x00415d8d

004141b4 <lv_font_get_bitmap_fmt_txt>:
{
  4141b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4141b8:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  4141ba:	2909      	cmp	r1, #9
  4141bc:	d01e      	beq.n	4141fc <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4141be:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4141c0:	4b37      	ldr	r3, [pc, #220]	; (4142a0 <lv_font_get_bitmap_fmt_txt+0xec>)
  4141c2:	4798      	blx	r3
    if(!gid) return NULL;
  4141c4:	4607      	mov	r7, r0
  4141c6:	2800      	cmp	r0, #0
  4141c8:	d063      	beq.n	414292 <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4141ca:	686e      	ldr	r6, [r5, #4]
  4141cc:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  4141d0:	7ceb      	ldrb	r3, [r5, #19]
  4141d2:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  4141d6:	d013      	beq.n	414200 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  4141d8:	f898 3004 	ldrb.w	r3, [r8, #4]
  4141dc:	f898 4005 	ldrb.w	r4, [r8, #5]
  4141e0:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  4141e4:	2c00      	cmp	r4, #0
  4141e6:	d056      	beq.n	414296 <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  4141e8:	7ceb      	ldrb	r3, [r5, #19]
  4141ea:	f3c3 0343 	ubfx	r3, r3, #1, #4
  4141ee:	3b01      	subs	r3, #1
  4141f0:	2b03      	cmp	r3, #3
  4141f2:	d80e      	bhi.n	414212 <lv_font_get_bitmap_fmt_txt+0x5e>
  4141f4:	e8df f003 	tbb	[pc, r3]
  4141f8:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  4141fc:	2120      	movs	r1, #32
  4141fe:	e7de      	b.n	4141be <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  414200:	6828      	ldr	r0, [r5, #0]
  414202:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  414206:	f3c3 0313 	ubfx	r3, r3, #0, #20
  41420a:	4418      	add	r0, r3
  41420c:	e02f      	b.n	41426e <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  41420e:	3407      	adds	r4, #7
  414210:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  414212:	4b24      	ldr	r3, [pc, #144]	; (4142a4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414214:	6818      	ldr	r0, [r3, #0]
  414216:	4b24      	ldr	r3, [pc, #144]	; (4142a8 <lv_font_get_bitmap_fmt_txt+0xf4>)
  414218:	4798      	blx	r3
  41421a:	4284      	cmp	r4, r0
  41421c:	d90c      	bls.n	414238 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  41421e:	4621      	mov	r1, r4
  414220:	4b20      	ldr	r3, [pc, #128]	; (4142a4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414222:	6818      	ldr	r0, [r3, #0]
  414224:	4b21      	ldr	r3, [pc, #132]	; (4142ac <lv_font_get_bitmap_fmt_txt+0xf8>)
  414226:	4798      	blx	r3
  414228:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  41422a:	4b21      	ldr	r3, [pc, #132]	; (4142b0 <lv_font_get_bitmap_fmt_txt+0xfc>)
  41422c:	4798      	blx	r3
  41422e:	b350      	cbz	r0, 414286 <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  414230:	2c00      	cmp	r4, #0
  414232:	d032      	beq.n	41429a <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  414234:	4b1b      	ldr	r3, [pc, #108]	; (4142a4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414236:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  414238:	7ceb      	ldrb	r3, [r5, #19]
  41423a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  41423e:	2c40      	cmp	r4, #64	; 0x40
  414240:	bf14      	ite	ne
  414242:	2400      	movne	r4, #0
  414244:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414246:	f8d5 e000 	ldr.w	lr, [r5]
  41424a:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  41424e:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  414252:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414256:	f898 3005 	ldrb.w	r3, [r8, #5]
  41425a:	f898 2004 	ldrb.w	r2, [r8, #4]
  41425e:	4d11      	ldr	r5, [pc, #68]	; (4142a4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414260:	9401      	str	r4, [sp, #4]
  414262:	9100      	str	r1, [sp, #0]
  414264:	6829      	ldr	r1, [r5, #0]
  414266:	4470      	add	r0, lr
  414268:	4c12      	ldr	r4, [pc, #72]	; (4142b4 <lv_font_get_bitmap_fmt_txt+0x100>)
  41426a:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  41426c:	6828      	ldr	r0, [r5, #0]
}
  41426e:	b002      	add	sp, #8
  414270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  414274:	3403      	adds	r4, #3
  414276:	08a4      	lsrs	r4, r4, #2
                break;
  414278:	e7cb      	b.n	414212 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  41427a:	3401      	adds	r4, #1
  41427c:	0864      	lsrs	r4, r4, #1
                break;
  41427e:	e7c8      	b.n	414212 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  414280:	3401      	adds	r4, #1
  414282:	0864      	lsrs	r4, r4, #1
                break;
  414284:	e7c5      	b.n	414212 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  414286:	4622      	mov	r2, r4
  414288:	2300      	movs	r3, #0
  41428a:	480b      	ldr	r0, [pc, #44]	; (4142b8 <lv_font_get_bitmap_fmt_txt+0x104>)
  41428c:	490b      	ldr	r1, [pc, #44]	; (4142bc <lv_font_get_bitmap_fmt_txt+0x108>)
  41428e:	4788      	blx	r1
  414290:	e7fe      	b.n	414290 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  414292:	2000      	movs	r0, #0
  414294:	e7eb      	b.n	41426e <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  414296:	2000      	movs	r0, #0
  414298:	e7e9      	b.n	41426e <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  41429a:	2000      	movs	r0, #0
  41429c:	e7e7      	b.n	41426e <lv_font_get_bitmap_fmt_txt+0xba>
  41429e:	bf00      	nop
  4142a0:	0041329d 	.word	0x0041329d
  4142a4:	2043a178 	.word	0x2043a178
  4142a8:	00415d6d 	.word	0x00415d6d
  4142ac:	00415f65 	.word	0x00415f65
  4142b0:	0041552d 	.word	0x0041552d
  4142b4:	00413429 	.word	0x00413429
  4142b8:	004235f0 	.word	0x004235f0
  4142bc:	00415539 	.word	0x00415539

004142c0 <lv_font_get_glyph_dsc_fmt_txt>:
{
  4142c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4142c4:	4607      	mov	r7, r0
  4142c6:	460c      	mov	r4, r1
  4142c8:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  4142ca:	2a09      	cmp	r2, #9
  4142cc:	d034      	beq.n	414338 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  4142ce:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4142d0:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4142d2:	4611      	mov	r1, r2
  4142d4:	4638      	mov	r0, r7
  4142d6:	4b20      	ldr	r3, [pc, #128]	; (414358 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  4142d8:	4798      	blx	r3
    if(!gid) return false;
  4142da:	4680      	mov	r8, r0
  4142dc:	2800      	cmp	r0, #0
  4142de:	d035      	beq.n	41434c <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  4142e0:	68f3      	ldr	r3, [r6, #12]
  4142e2:	2b00      	cmp	r3, #0
  4142e4:	d030      	beq.n	414348 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  4142e6:	4649      	mov	r1, r9
  4142e8:	4638      	mov	r0, r7
  4142ea:	4b1b      	ldr	r3, [pc, #108]	; (414358 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  4142ec:	4798      	blx	r3
        if(gid_next) {
  4142ee:	4602      	mov	r2, r0
  4142f0:	bb28      	cbnz	r0, 41433e <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  4142f2:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4142f4:	6871      	ldr	r1, [r6, #4]
  4142f6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  4142fa:	8a33      	ldrh	r3, [r6, #16]
  4142fc:	fb03 f300 	mul.w	r3, r3, r0
  414300:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  414302:	8848      	ldrh	r0, [r1, #2]
  414304:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  414308:	b105      	cbz	r5, 41430c <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  41430a:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  41430c:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  41430e:	3308      	adds	r3, #8
  414310:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  414312:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  414314:	794b      	ldrb	r3, [r1, #5]
  414316:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  414318:	790a      	ldrb	r2, [r1, #4]
  41431a:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  41431c:	f991 3006 	ldrsb.w	r3, [r1, #6]
  414320:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  414322:	f991 3007 	ldrsb.w	r3, [r1, #7]
  414326:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  414328:	7cf3      	ldrb	r3, [r6, #19]
  41432a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  41432e:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  414330:	b185      	cbz	r5, 414354 <lv_font_get_glyph_dsc_fmt_txt+0x94>
  414332:	0052      	lsls	r2, r2, #1
  414334:	8062      	strh	r2, [r4, #2]
  414336:	e00a      	b.n	41434e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  414338:	2501      	movs	r5, #1
        unicode_letter = ' ';
  41433a:	2220      	movs	r2, #32
  41433c:	e7c8      	b.n	4142d0 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  41433e:	4641      	mov	r1, r8
  414340:	4638      	mov	r0, r7
  414342:	4b06      	ldr	r3, [pc, #24]	; (41435c <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  414344:	4798      	blx	r3
  414346:	e7d5      	b.n	4142f4 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  414348:	2000      	movs	r0, #0
  41434a:	e7d3      	b.n	4142f4 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  41434c:	2500      	movs	r5, #0
}
  41434e:	4628      	mov	r0, r5
  414350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  414354:	2501      	movs	r5, #1
  414356:	e7fa      	b.n	41434e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  414358:	0041329d 	.word	0x0041329d
  41435c:	00413375 	.word	0x00413375

00414360 <_lv_font_clean_up_fmt_txt>:
{
  414360:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  414362:	4b04      	ldr	r3, [pc, #16]	; (414374 <_lv_font_clean_up_fmt_txt+0x14>)
  414364:	6818      	ldr	r0, [r3, #0]
  414366:	b120      	cbz	r0, 414372 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414368:	4b03      	ldr	r3, [pc, #12]	; (414378 <_lv_font_clean_up_fmt_txt+0x18>)
  41436a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  41436c:	2200      	movs	r2, #0
  41436e:	4b01      	ldr	r3, [pc, #4]	; (414374 <_lv_font_clean_up_fmt_txt+0x14>)
  414370:	601a      	str	r2, [r3, #0]
  414372:	bd08      	pop	{r3, pc}
  414374:	2043a178 	.word	0x2043a178
  414378:	00415cf9 	.word	0x00415cf9

0041437c <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  41437c:	b510      	push	{r4, lr}
  41437e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  414380:	2134      	movs	r1, #52	; 0x34
  414382:	4b13      	ldr	r3, [pc, #76]	; (4143d0 <lv_disp_drv_init+0x54>)
  414384:	4798      	blx	r3

    driver->flush_cb         = NULL;
  414386:	2300      	movs	r3, #0
  414388:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  41438a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  41438e:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  414390:	22f0      	movs	r2, #240	; 0xf0
  414392:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  414394:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  414396:	7a22      	ldrb	r2, [r4, #8]
  414398:	f363 0241 	bfi	r2, r3, #1, #1
  41439c:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  41439e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  4143a2:	f042 0207 	orr.w	r2, r2, #7
  4143a6:	f363 02c7 	bfi	r2, r3, #3, #5
  4143aa:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  4143ae:	22e0      	movs	r2, #224	; 0xe0
  4143b0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  4143b4:	8922      	ldrh	r2, [r4, #8]
  4143b6:	2194      	movs	r1, #148	; 0x94
  4143b8:	f361 028b 	bfi	r2, r1, #2, #10
  4143bc:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  4143be:	b2d2      	uxtb	r2, r2
  4143c0:	f042 0201 	orr.w	r2, r2, #1
  4143c4:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  4143c6:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  4143c8:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  4143ca:	6163      	str	r3, [r4, #20]
  4143cc:	bd10      	pop	{r4, pc}
  4143ce:	bf00      	nop
  4143d0:	00416169 	.word	0x00416169

004143d4 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  4143d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4143d6:	4604      	mov	r4, r0
  4143d8:	460d      	mov	r5, r1
  4143da:	4617      	mov	r7, r2
  4143dc:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  4143de:	2124      	movs	r1, #36	; 0x24
  4143e0:	4b03      	ldr	r3, [pc, #12]	; (4143f0 <lv_disp_buf_init+0x1c>)
  4143e2:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  4143e4:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  4143e6:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  4143e8:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  4143ea:	60e6      	str	r6, [r4, #12]
  4143ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4143ee:	bf00      	nop
  4143f0:	00416169 	.word	0x00416169

004143f4 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  4143f4:	4b01      	ldr	r3, [pc, #4]	; (4143fc <lv_disp_get_default+0x8>)
  4143f6:	6818      	ldr	r0, [r3, #0]
  4143f8:	4770      	bx	lr
  4143fa:	bf00      	nop
  4143fc:	2040c734 	.word	0x2040c734

00414400 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  414400:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414402:	4603      	mov	r3, r0
  414404:	b138      	cbz	r0, 414416 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  414406:	b16b      	cbz	r3, 414424 <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414408:	7a1a      	ldrb	r2, [r3, #8]
  41440a:	f012 0f02 	tst.w	r2, #2
  41440e:	d006      	beq.n	41441e <lv_disp_get_hor_res+0x1e>
  414410:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414414:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414416:	4b05      	ldr	r3, [pc, #20]	; (41442c <lv_disp_get_hor_res+0x2c>)
  414418:	4798      	blx	r3
  41441a:	4603      	mov	r3, r0
  41441c:	e7f3      	b.n	414406 <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  41441e:	f9b3 0000 	ldrsh.w	r0, [r3]
  414422:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  414424:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  414428:	bd08      	pop	{r3, pc}
  41442a:	bf00      	nop
  41442c:	004143f5 	.word	0x004143f5

00414430 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  414430:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414432:	4603      	mov	r3, r0
  414434:	b138      	cbz	r0, 414446 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  414436:	b16b      	cbz	r3, 414454 <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414438:	7a1a      	ldrb	r2, [r3, #8]
  41443a:	f012 0f02 	tst.w	r2, #2
  41443e:	d006      	beq.n	41444e <lv_disp_get_ver_res+0x1e>
  414440:	f9b3 0000 	ldrsh.w	r0, [r3]
  414444:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414446:	4b04      	ldr	r3, [pc, #16]	; (414458 <lv_disp_get_ver_res+0x28>)
  414448:	4798      	blx	r3
  41444a:	4603      	mov	r3, r0
  41444c:	e7f3      	b.n	414436 <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  41444e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414452:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  414454:	20f0      	movs	r0, #240	; 0xf0
}
  414456:	bd08      	pop	{r3, pc}
  414458:	004143f5 	.word	0x004143f5

0041445c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  41445c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  41445e:	4603      	mov	r3, r0
  414460:	b120      	cbz	r0, 41446c <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414462:	b13b      	cbz	r3, 414474 <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  414464:	8918      	ldrh	r0, [r3, #8]
  414466:	f3c0 0089 	ubfx	r0, r0, #2, #10
  41446a:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  41446c:	4b02      	ldr	r3, [pc, #8]	; (414478 <lv_disp_get_dpi+0x1c>)
  41446e:	4798      	blx	r3
  414470:	4603      	mov	r3, r0
  414472:	e7f6      	b.n	414462 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414474:	2094      	movs	r0, #148	; 0x94
}
  414476:	bd08      	pop	{r3, pc}
  414478:	004143f5 	.word	0x004143f5

0041447c <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  41447c:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  41447e:	4605      	mov	r5, r0
  414480:	b1a0      	cbz	r0, 4144ac <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  414482:	b1bd      	cbz	r5, 4144b4 <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  414484:	4628      	mov	r0, r5
  414486:	4b10      	ldr	r3, [pc, #64]	; (4144c8 <lv_disp_get_size_category+0x4c>)
  414488:	4798      	blx	r3
  41448a:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  41448c:	4628      	mov	r0, r5
  41448e:	4b0f      	ldr	r3, [pc, #60]	; (4144cc <lv_disp_get_size_category+0x50>)
  414490:	4798      	blx	r3

    w = w * 10 / dpi;
  414492:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  414496:	0063      	lsls	r3, r4, #1
  414498:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  41449c:	281d      	cmp	r0, #29
  41449e:	d90c      	bls.n	4144ba <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  4144a0:	2831      	cmp	r0, #49	; 0x31
  4144a2:	d90c      	bls.n	4144be <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  4144a4:	2845      	cmp	r0, #69	; 0x45
  4144a6:	d80c      	bhi.n	4144c2 <lv_disp_get_size_category+0x46>
  4144a8:	2002      	movs	r0, #2
  4144aa:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  4144ac:	4b08      	ldr	r3, [pc, #32]	; (4144d0 <lv_disp_get_size_category+0x54>)
  4144ae:	4798      	blx	r3
  4144b0:	4605      	mov	r5, r0
  4144b2:	e7e6      	b.n	414482 <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  4144b4:	f44f 74a0 	mov.w	r4, #320	; 0x140
  4144b8:	e7e8      	b.n	41448c <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  4144ba:	2000      	movs	r0, #0
  4144bc:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  4144be:	2001      	movs	r0, #1
  4144c0:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  4144c2:	2003      	movs	r0, #3
}
  4144c4:	bd38      	pop	{r3, r4, r5, pc}
  4144c6:	bf00      	nop
  4144c8:	00414401 	.word	0x00414401
  4144cc:	0041445d 	.word	0x0041445d
  4144d0:	004143f5 	.word	0x004143f5

004144d4 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  4144d4:	6842      	ldr	r2, [r0, #4]
  4144d6:	2300      	movs	r3, #0
  4144d8:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  4144da:	6842      	ldr	r2, [r0, #4]
  4144dc:	61d3      	str	r3, [r2, #28]
  4144de:	4770      	bx	lr

004144e0 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  4144e0:	b508      	push	{r3, lr}
    if(disp == NULL)
  4144e2:	b120      	cbz	r0, 4144ee <lv_disp_get_next+0xe>
  4144e4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  4144e6:	4804      	ldr	r0, [pc, #16]	; (4144f8 <lv_disp_get_next+0x18>)
  4144e8:	4b04      	ldr	r3, [pc, #16]	; (4144fc <lv_disp_get_next+0x1c>)
  4144ea:	4798      	blx	r3
}
  4144ec:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  4144ee:	4802      	ldr	r0, [pc, #8]	; (4144f8 <lv_disp_get_next+0x18>)
  4144f0:	4b03      	ldr	r3, [pc, #12]	; (414500 <lv_disp_get_next+0x20>)
  4144f2:	4798      	blx	r3
  4144f4:	bd08      	pop	{r3, pc}
  4144f6:	bf00      	nop
  4144f8:	2043a188 	.word	0x2043a188
  4144fc:	00415851 	.word	0x00415851
  414500:	0041583d 	.word	0x0041583d

00414504 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  414504:	6840      	ldr	r0, [r0, #4]
  414506:	4770      	bx	lr

00414508 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414508:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  41450c:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414510:	4770      	bx	lr

00414512 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  414512:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414516:	f3c3 0309 	ubfx	r3, r3, #0, #10
  41451a:	428b      	cmp	r3, r1
  41451c:	db07      	blt.n	41452e <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  41451e:	1a5b      	subs	r3, r3, r1
  414520:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  414524:	f363 0209 	bfi	r2, r3, #0, #10
  414528:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  41452c:	4770      	bx	lr
        disp->inv_p = 0;
  41452e:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414532:	f36f 0309 	bfc	r3, #0, #10
  414536:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  41453a:	4770      	bx	lr

0041453c <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  41453c:	6843      	ldr	r3, [r0, #4]
  41453e:	681a      	ldr	r2, [r3, #0]
  414540:	b12a      	cbz	r2, 41454e <lv_disp_is_double_buf+0x12>
  414542:	685b      	ldr	r3, [r3, #4]
  414544:	b10b      	cbz	r3, 41454a <lv_disp_is_double_buf+0xe>
        return true;
  414546:	2001      	movs	r0, #1
    else
        return false;
}
  414548:	4770      	bx	lr
        return false;
  41454a:	2000      	movs	r0, #0
  41454c:	4770      	bx	lr
  41454e:	2000      	movs	r0, #0
  414550:	4770      	bx	lr
	...

00414554 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  414554:	b538      	push	{r3, r4, r5, lr}
  414556:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414558:	f9b0 4000 	ldrsh.w	r4, [r0]
  41455c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414560:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  414564:	4b06      	ldr	r3, [pc, #24]	; (414580 <lv_disp_is_true_double_buf+0x2c>)
  414566:	4798      	blx	r3
  414568:	b130      	cbz	r0, 414578 <lv_disp_is_true_double_buf+0x24>
  41456a:	4603      	mov	r3, r0
  41456c:	686a      	ldr	r2, [r5, #4]
  41456e:	68d2      	ldr	r2, [r2, #12]
  414570:	4294      	cmp	r4, r2
  414572:	d002      	beq.n	41457a <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  414574:	2300      	movs	r3, #0
  414576:	e000      	b.n	41457a <lv_disp_is_true_double_buf+0x26>
  414578:	2300      	movs	r3, #0
    }
}
  41457a:	4618      	mov	r0, r3
  41457c:	bd38      	pop	{r3, r4, r5, pc}
  41457e:	bf00      	nop
  414580:	0041453d 	.word	0x0041453d

00414584 <lv_disp_drv_register>:
{
  414584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414586:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  414588:	483b      	ldr	r0, [pc, #236]	; (414678 <lv_disp_drv_register+0xf4>)
  41458a:	4b3c      	ldr	r3, [pc, #240]	; (41467c <lv_disp_drv_register+0xf8>)
  41458c:	4798      	blx	r3
    if(!disp) {
  41458e:	4604      	mov	r4, r0
  414590:	2800      	cmp	r0, #0
  414592:	d05c      	beq.n	41464e <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  414594:	f44f 71c4 	mov.w	r1, #392	; 0x188
  414598:	4b39      	ldr	r3, [pc, #228]	; (414680 <lv_disp_drv_register+0xfc>)
  41459a:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  41459c:	2234      	movs	r2, #52	; 0x34
  41459e:	4629      	mov	r1, r5
  4145a0:	4620      	mov	r0, r4
  4145a2:	4b38      	ldr	r3, [pc, #224]	; (414684 <lv_disp_drv_register+0x100>)
  4145a4:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  4145a6:	214c      	movs	r1, #76	; 0x4c
  4145a8:	f104 0038 	add.w	r0, r4, #56	; 0x38
  4145ac:	4b36      	ldr	r3, [pc, #216]	; (414688 <lv_disp_drv_register+0x104>)
  4145ae:	4798      	blx	r3
    disp->last_activity_time = 0;
  4145b0:	2300      	movs	r3, #0
  4145b2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  4145b6:	4b35      	ldr	r3, [pc, #212]	; (41468c <lv_disp_drv_register+0x108>)
  4145b8:	681b      	ldr	r3, [r3, #0]
  4145ba:	2b00      	cmp	r3, #0
  4145bc:	d051      	beq.n	414662 <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  4145be:	4b33      	ldr	r3, [pc, #204]	; (41468c <lv_disp_drv_register+0x108>)
  4145c0:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  4145c2:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  4145c4:	4623      	mov	r3, r4
  4145c6:	2203      	movs	r2, #3
  4145c8:	211e      	movs	r1, #30
  4145ca:	4831      	ldr	r0, [pc, #196]	; (414690 <lv_disp_drv_register+0x10c>)
  4145cc:	4d31      	ldr	r5, [pc, #196]	; (414694 <lv_disp_drv_register+0x110>)
  4145ce:	47a8      	blx	r5
  4145d0:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  4145d2:	4b31      	ldr	r3, [pc, #196]	; (414698 <lv_disp_drv_register+0x114>)
  4145d4:	4798      	blx	r3
  4145d6:	2800      	cmp	r0, #0
  4145d8:	d046      	beq.n	414668 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  4145da:	6b63      	ldr	r3, [r4, #52]	; 0x34
  4145dc:	2b00      	cmp	r3, #0
  4145de:	d049      	beq.n	414674 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  4145e0:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  4145e4:	f36f 0309 	bfc	r3, #0, #10
  4145e8:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  4145ec:	2500      	movs	r5, #0
  4145ee:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  4145f2:	4b2a      	ldr	r3, [pc, #168]	; (41469c <lv_disp_drv_register+0x118>)
  4145f4:	881b      	ldrh	r3, [r3, #0]
  4145f6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  4145fa:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  4145fc:	23ff      	movs	r3, #255	; 0xff
  4145fe:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  414602:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414604:	4629      	mov	r1, r5
  414606:	4628      	mov	r0, r5
  414608:	4e25      	ldr	r6, [pc, #148]	; (4146a0 <lv_disp_drv_register+0x11c>)
  41460a:	47b0      	blx	r6
  41460c:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  41460e:	4629      	mov	r1, r5
  414610:	4628      	mov	r0, r5
  414612:	47b0      	blx	r6
  414614:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  414616:	4629      	mov	r1, r5
  414618:	4628      	mov	r0, r5
  41461a:	47b0      	blx	r6
  41461c:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  41461e:	4629      	mov	r1, r5
  414620:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414622:	4e20      	ldr	r6, [pc, #128]	; (4146a4 <lv_disp_drv_register+0x120>)
  414624:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  414626:	4629      	mov	r1, r5
  414628:	6d60      	ldr	r0, [r4, #84]	; 0x54
  41462a:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  41462c:	4629      	mov	r1, r5
  41462e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414630:	4e1d      	ldr	r6, [pc, #116]	; (4146a8 <lv_disp_drv_register+0x124>)
  414632:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  414634:	4629      	mov	r1, r5
  414636:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414638:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  41463a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  41463c:	4b1b      	ldr	r3, [pc, #108]	; (4146ac <lv_disp_drv_register+0x128>)
  41463e:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414640:	4b12      	ldr	r3, [pc, #72]	; (41468c <lv_disp_drv_register+0x108>)
  414642:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  414644:	6b60      	ldr	r0, [r4, #52]	; 0x34
  414646:	4b1a      	ldr	r3, [pc, #104]	; (4146b0 <lv_disp_drv_register+0x12c>)
  414648:	4798      	blx	r3
}
  41464a:	4620      	mov	r0, r4
  41464c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  41464e:	4b12      	ldr	r3, [pc, #72]	; (414698 <lv_disp_drv_register+0x114>)
  414650:	4798      	blx	r3
  414652:	2800      	cmp	r0, #0
  414654:	d1f9      	bne.n	41464a <lv_disp_drv_register+0xc6>
  414656:	4622      	mov	r2, r4
  414658:	2300      	movs	r3, #0
  41465a:	4816      	ldr	r0, [pc, #88]	; (4146b4 <lv_disp_drv_register+0x130>)
  41465c:	4916      	ldr	r1, [pc, #88]	; (4146b8 <lv_disp_drv_register+0x134>)
  41465e:	4788      	blx	r1
  414660:	e7fe      	b.n	414660 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  414662:	4b0a      	ldr	r3, [pc, #40]	; (41468c <lv_disp_drv_register+0x108>)
  414664:	601c      	str	r4, [r3, #0]
  414666:	e7aa      	b.n	4145be <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  414668:	6b62      	ldr	r2, [r4, #52]	; 0x34
  41466a:	2300      	movs	r3, #0
  41466c:	4811      	ldr	r0, [pc, #68]	; (4146b4 <lv_disp_drv_register+0x130>)
  41466e:	4912      	ldr	r1, [pc, #72]	; (4146b8 <lv_disp_drv_register+0x134>)
  414670:	4788      	blx	r1
  414672:	e7fe      	b.n	414672 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  414674:	2400      	movs	r4, #0
  414676:	e7e8      	b.n	41464a <lv_disp_drv_register+0xc6>
  414678:	2043a188 	.word	0x2043a188
  41467c:	004157a5 	.word	0x004157a5
  414680:	00416169 	.word	0x00416169
  414684:	00415e45 	.word	0x00415e45
  414688:	00415793 	.word	0x00415793
  41468c:	2040c734 	.word	0x2040c734
  414690:	004094d5 	.word	0x004094d5
  414694:	00416239 	.word	0x00416239
  414698:	0041552d 	.word	0x0041552d
  41469c:	00426ba0 	.word	0x00426ba0
  4146a0:	00406285 	.word	0x00406285
  4146a4:	004072fd 	.word	0x004072fd
  4146a8:	00405245 	.word	0x00405245
  4146ac:	004059c9 	.word	0x004059c9
  4146b0:	00416601 	.word	0x00416601
  4146b4:	004235f0 	.word	0x004235f0
  4146b8:	00415539 	.word	0x00415539

004146bc <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  4146bc:	b510      	push	{r4, lr}
  4146be:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  4146c0:	211c      	movs	r1, #28
  4146c2:	4b08      	ldr	r3, [pc, #32]	; (4146e4 <lv_indev_drv_init+0x28>)
  4146c4:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  4146c6:	2300      	movs	r3, #0
  4146c8:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  4146ca:	230a      	movs	r3, #10
  4146cc:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  4146ce:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  4146d0:	f44f 73c8 	mov.w	r3, #400	; 0x190
  4146d4:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  4146d6:	2364      	movs	r3, #100	; 0x64
  4146d8:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  4146da:	2332      	movs	r3, #50	; 0x32
  4146dc:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  4146de:	2303      	movs	r3, #3
  4146e0:	75a3      	strb	r3, [r4, #22]
  4146e2:	bd10      	pop	{r4, pc}
  4146e4:	00416169 	.word	0x00416169

004146e8 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  4146e8:	b538      	push	{r3, r4, r5, lr}
  4146ea:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  4146ec:	68c3      	ldr	r3, [r0, #12]
  4146ee:	b313      	cbz	r3, 414736 <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  4146f0:	68eb      	ldr	r3, [r5, #12]
  4146f2:	2b00      	cmp	r3, #0
  4146f4:	d02d      	beq.n	414752 <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  4146f6:	4818      	ldr	r0, [pc, #96]	; (414758 <lv_indev_drv_register+0x70>)
  4146f8:	4b18      	ldr	r3, [pc, #96]	; (41475c <lv_indev_drv_register+0x74>)
  4146fa:	4798      	blx	r3
    if(!indev) {
  4146fc:	4604      	mov	r4, r0
  4146fe:	b1f0      	cbz	r0, 41473e <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414700:	2160      	movs	r1, #96	; 0x60
  414702:	4b17      	ldr	r3, [pc, #92]	; (414760 <lv_indev_drv_register+0x78>)
  414704:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  414706:	221c      	movs	r2, #28
  414708:	4629      	mov	r1, r5
  41470a:	4620      	mov	r0, r4
  41470c:	4b15      	ldr	r3, [pc, #84]	; (414764 <lv_indev_drv_register+0x7c>)
  41470e:	4798      	blx	r3

    indev->proc.reset_query = 1;
  414710:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  414714:	f043 0302 	orr.w	r3, r3, #2
  414718:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  41471c:	2300      	movs	r3, #0
  41471e:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  414720:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  414722:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  414724:	4623      	mov	r3, r4
  414726:	2204      	movs	r2, #4
  414728:	211e      	movs	r1, #30
  41472a:	480f      	ldr	r0, [pc, #60]	; (414768 <lv_indev_drv_register+0x80>)
  41472c:	4d0f      	ldr	r5, [pc, #60]	; (41476c <lv_indev_drv_register+0x84>)
  41472e:	47a8      	blx	r5
  414730:	6120      	str	r0, [r4, #16]

    return indev;
}
  414732:	4620      	mov	r0, r4
  414734:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414736:	4b0e      	ldr	r3, [pc, #56]	; (414770 <lv_indev_drv_register+0x88>)
  414738:	4798      	blx	r3
  41473a:	60e8      	str	r0, [r5, #12]
  41473c:	e7d8      	b.n	4146f0 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  41473e:	4b0d      	ldr	r3, [pc, #52]	; (414774 <lv_indev_drv_register+0x8c>)
  414740:	4798      	blx	r3
  414742:	2800      	cmp	r0, #0
  414744:	d1f5      	bne.n	414732 <lv_indev_drv_register+0x4a>
  414746:	4622      	mov	r2, r4
  414748:	2300      	movs	r3, #0
  41474a:	480b      	ldr	r0, [pc, #44]	; (414778 <lv_indev_drv_register+0x90>)
  41474c:	490b      	ldr	r1, [pc, #44]	; (41477c <lv_indev_drv_register+0x94>)
  41474e:	4788      	blx	r1
  414750:	e7fe      	b.n	414750 <lv_indev_drv_register+0x68>
        return NULL;
  414752:	2400      	movs	r4, #0
  414754:	e7ed      	b.n	414732 <lv_indev_drv_register+0x4a>
  414756:	bf00      	nop
  414758:	2043a17c 	.word	0x2043a17c
  41475c:	004157a5 	.word	0x004157a5
  414760:	00416169 	.word	0x00416169
  414764:	00415e45 	.word	0x00415e45
  414768:	00404de1 	.word	0x00404de1
  41476c:	00416239 	.word	0x00416239
  414770:	004143f5 	.word	0x004143f5
  414774:	0041552d 	.word	0x0041552d
  414778:	004235f0 	.word	0x004235f0
  41477c:	00415539 	.word	0x00415539

00414780 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  414780:	b508      	push	{r3, lr}
    if(indev == NULL)
  414782:	b120      	cbz	r0, 41478e <lv_indev_get_next+0xe>
  414784:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  414786:	4804      	ldr	r0, [pc, #16]	; (414798 <lv_indev_get_next+0x18>)
  414788:	4b04      	ldr	r3, [pc, #16]	; (41479c <lv_indev_get_next+0x1c>)
  41478a:	4798      	blx	r3
}
  41478c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  41478e:	4802      	ldr	r0, [pc, #8]	; (414798 <lv_indev_get_next+0x18>)
  414790:	4b03      	ldr	r3, [pc, #12]	; (4147a0 <lv_indev_get_next+0x20>)
  414792:	4798      	blx	r3
  414794:	bd08      	pop	{r3, pc}
  414796:	bf00      	nop
  414798:	2043a17c 	.word	0x2043a17c
  41479c:	00415851 	.word	0x00415851
  4147a0:	0041583d 	.word	0x0041583d

004147a4 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  4147a4:	b538      	push	{r3, r4, r5, lr}
  4147a6:	4604      	mov	r4, r0
  4147a8:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  4147aa:	2110      	movs	r1, #16
  4147ac:	4628      	mov	r0, r5
  4147ae:	4b10      	ldr	r3, [pc, #64]	; (4147f0 <_lv_indev_read+0x4c>)
  4147b0:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  4147b2:	7823      	ldrb	r3, [r4, #0]
  4147b4:	2b01      	cmp	r3, #1
  4147b6:	d009      	beq.n	4147cc <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  4147b8:	2b02      	cmp	r3, #2
  4147ba:	d00e      	beq.n	4147da <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  4147bc:	2b04      	cmp	r3, #4
  4147be:	d00f      	beq.n	4147e0 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  4147c0:	6863      	ldr	r3, [r4, #4]
  4147c2:	b193      	cbz	r3, 4147ea <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  4147c4:	4629      	mov	r1, r5
  4147c6:	4620      	mov	r0, r4
  4147c8:	4798      	blx	r3
  4147ca:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  4147cc:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  4147d0:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  4147d2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  4147d6:	806b      	strh	r3, [r5, #2]
  4147d8:	e7f2      	b.n	4147c0 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  4147da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4147dc:	606b      	str	r3, [r5, #4]
  4147de:	e7ef      	b.n	4147c0 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  4147e0:	230a      	movs	r3, #10
  4147e2:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  4147e4:	2300      	movs	r3, #0
  4147e6:	81ab      	strh	r3, [r5, #12]
  4147e8:	e7ea      	b.n	4147c0 <_lv_indev_read+0x1c>
    bool cont = false;
  4147ea:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  4147ec:	bd38      	pop	{r3, r4, r5, pc}
  4147ee:	bf00      	nop
  4147f0:	00416169 	.word	0x00416169

004147f4 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
  4147f4:	2200      	movs	r2, #0
  4147f6:	4b03      	ldr	r3, [pc, #12]	; (414804 <lv_tick_inc+0x10>)
  4147f8:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
  4147fa:	4a03      	ldr	r2, [pc, #12]	; (414808 <lv_tick_inc+0x14>)
  4147fc:	6813      	ldr	r3, [r2, #0]
  4147fe:	4418      	add	r0, r3
  414800:	6010      	str	r0, [r2, #0]
  414802:	4770      	bx	lr
  414804:	2040c73c 	.word	0x2040c73c
  414808:	2040c738 	.word	0x2040c738

0041480c <lv_tick_get>:
     * This loop detects if `lv_tick_inc` was called while reading `sys_time`.
     * If `tick_irq_flag` was cleared in `lv_tick_inc` try to read again
     * until `tick_irq_flag` remains `1`. */
    uint32_t result;
    do {
        tick_irq_flag = 1;
  41480c:	4b04      	ldr	r3, [pc, #16]	; (414820 <lv_tick_get+0x14>)
  41480e:	2201      	movs	r2, #1
  414810:	701a      	strb	r2, [r3, #0]
        result        = sys_time;
  414812:	4a04      	ldr	r2, [pc, #16]	; (414824 <lv_tick_get+0x18>)
  414814:	6810      	ldr	r0, [r2, #0]
    } while(!tick_irq_flag); /*Continue until see a non interrupted cycle */
  414816:	781b      	ldrb	r3, [r3, #0]
  414818:	2b00      	cmp	r3, #0
  41481a:	d0f7      	beq.n	41480c <lv_tick_get>

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
  41481c:	4770      	bx	lr
  41481e:	bf00      	nop
  414820:	2040c73c 	.word	0x2040c73c
  414824:	2040c738 	.word	0x2040c738

00414828 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of lv_tick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
  414828:	b510      	push	{r4, lr}
  41482a:	4604      	mov	r4, r0
    uint32_t act_time = lv_tick_get();
  41482c:	4b03      	ldr	r3, [pc, #12]	; (41483c <lv_tick_elaps+0x14>)
  41482e:	4798      	blx	r3

    /*If there is no overflow in sys_time simple subtract*/
    if(act_time >= prev_tick) {
  414830:	42a0      	cmp	r0, r4
  414832:	d201      	bcs.n	414838 <lv_tick_elaps+0x10>
        prev_tick = act_time - prev_tick;
    }
    else {
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
  414834:	1b00      	subs	r0, r0, r4
    }

    return prev_tick;
}
  414836:	bd10      	pop	{r4, pc}
        prev_tick = act_time - prev_tick;
  414838:	1b00      	subs	r0, r0, r4
  41483a:	bd10      	pop	{r4, pc}
  41483c:	0041480d 	.word	0x0041480d

00414840 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  414840:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  414842:	6a88      	ldr	r0, [r1, #40]	; 0x28
  414844:	4282      	cmp	r2, r0
  414846:	d00b      	beq.n	414860 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  414848:	0280      	lsls	r0, r0, #10
  41484a:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  41484e:	6a0b      	ldr	r3, [r1, #32]
  414850:	698a      	ldr	r2, [r1, #24]
  414852:	1a9b      	subs	r3, r3, r2
  414854:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  414858:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  41485c:	b200      	sxth	r0, r0
  41485e:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  414860:	f44f 6080 	mov.w	r0, #1024	; 0x400
  414864:	e7f3      	b.n	41484e <lv_anim_path_linear+0xe>
	...

00414868 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  414868:	b508      	push	{r3, lr}
    anim_list_changed = true;
  41486a:	2201      	movs	r2, #1
  41486c:	4b08      	ldr	r3, [pc, #32]	; (414890 <anim_mark_list_change+0x28>)
  41486e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  414870:	4808      	ldr	r0, [pc, #32]	; (414894 <anim_mark_list_change+0x2c>)
  414872:	4b09      	ldr	r3, [pc, #36]	; (414898 <anim_mark_list_change+0x30>)
  414874:	4798      	blx	r3
  414876:	b128      	cbz	r0, 414884 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  414878:	2104      	movs	r1, #4
  41487a:	4b08      	ldr	r3, [pc, #32]	; (41489c <anim_mark_list_change+0x34>)
  41487c:	6818      	ldr	r0, [r3, #0]
  41487e:	4b08      	ldr	r3, [pc, #32]	; (4148a0 <anim_mark_list_change+0x38>)
  414880:	4798      	blx	r3
  414882:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  414884:	2100      	movs	r1, #0
  414886:	4b05      	ldr	r3, [pc, #20]	; (41489c <anim_mark_list_change+0x34>)
  414888:	6818      	ldr	r0, [r3, #0]
  41488a:	4b05      	ldr	r3, [pc, #20]	; (4148a0 <anim_mark_list_change+0x38>)
  41488c:	4798      	blx	r3
  41488e:	bd08      	pop	{r3, pc}
  414890:	2040c744 	.word	0x2040c744
  414894:	2043a24c 	.word	0x2043a24c
  414898:	0041583d 	.word	0x0041583d
  41489c:	2040c740 	.word	0x2040c740
  4148a0:	0041658d 	.word	0x0041658d

004148a4 <anim_ready_handler>:
{
  4148a4:	b510      	push	{r4, lr}
  4148a6:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  4148a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  4148ac:	f013 0301 	ands.w	r3, r3, #1
  4148b0:	d107      	bne.n	4148c2 <anim_ready_handler+0x1e>
  4148b2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4148b4:	b12a      	cbz	r2, 4148c2 <anim_ready_handler+0x1e>
  4148b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
  4148ba:	428a      	cmp	r2, r1
  4148bc:	d001      	beq.n	4148c2 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  4148be:	3a01      	subs	r2, #1
  4148c0:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4148c2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  4148c4:	b9b2      	cbnz	r2, 4148f4 <anim_ready_handler+0x50>
  4148c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4148c8:	b102      	cbz	r2, 4148cc <anim_ready_handler+0x28>
  4148ca:	b19b      	cbz	r3, 4148f4 <anim_ready_handler+0x50>
  4148cc:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  4148ce:	2244      	movs	r2, #68	; 0x44
  4148d0:	4601      	mov	r1, r0
  4148d2:	a801      	add	r0, sp, #4
  4148d4:	4b16      	ldr	r3, [pc, #88]	; (414930 <anim_ready_handler+0x8c>)
  4148d6:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  4148d8:	4621      	mov	r1, r4
  4148da:	4816      	ldr	r0, [pc, #88]	; (414934 <anim_ready_handler+0x90>)
  4148dc:	4b16      	ldr	r3, [pc, #88]	; (414938 <anim_ready_handler+0x94>)
  4148de:	4798      	blx	r3
        lv_mem_free(a);
  4148e0:	4620      	mov	r0, r4
  4148e2:	4b16      	ldr	r3, [pc, #88]	; (41493c <anim_ready_handler+0x98>)
  4148e4:	4798      	blx	r3
        anim_mark_list_change();
  4148e6:	4b16      	ldr	r3, [pc, #88]	; (414940 <anim_ready_handler+0x9c>)
  4148e8:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  4148ea:	9b04      	ldr	r3, [sp, #16]
  4148ec:	b1e3      	cbz	r3, 414928 <anim_ready_handler+0x84>
  4148ee:	a801      	add	r0, sp, #4
  4148f0:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  4148f2:	e019      	b.n	414928 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  4148f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
  4148f6:	4252      	negs	r2, r2
  4148f8:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  4148fa:	6b02      	ldr	r2, [r0, #48]	; 0x30
  4148fc:	b1a2      	cbz	r2, 414928 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  4148fe:	b913      	cbnz	r3, 414906 <anim_ready_handler+0x62>
  414900:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  414902:	4249      	negs	r1, r1
  414904:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  414906:	f083 0301 	eor.w	r3, r3, #1
  41490a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  41490e:	f363 0100 	bfi	r1, r3, #0, #1
  414912:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  414916:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  414918:	6a04      	ldr	r4, [r0, #32]
  41491a:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  41491c:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  41491e:	f011 0f01 	tst.w	r1, #1
  414922:	d100      	bne.n	414926 <anim_ready_handler+0x82>
  414924:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  414926:	6242      	str	r2, [r0, #36]	; 0x24
}
  414928:	4b06      	ldr	r3, [pc, #24]	; (414944 <anim_ready_handler+0xa0>)
  41492a:	7818      	ldrb	r0, [r3, #0]
  41492c:	b012      	add	sp, #72	; 0x48
  41492e:	bd10      	pop	{r4, pc}
  414930:	00415e45 	.word	0x00415e45
  414934:	2043a24c 	.word	0x2043a24c
  414938:	004158f9 	.word	0x004158f9
  41493c:	00415cf9 	.word	0x00415cf9
  414940:	00414869 	.word	0x00414869
  414944:	2040c744 	.word	0x2040c744

00414948 <anim_task>:
{
  414948:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41494a:	4836      	ldr	r0, [pc, #216]	; (414a24 <anim_task+0xdc>)
  41494c:	4b36      	ldr	r3, [pc, #216]	; (414a28 <anim_task+0xe0>)
  41494e:	4798      	blx	r3
  414950:	e009      	b.n	414966 <anim_task+0x1e>
        a->has_run = 0;
  414952:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  414956:	f36f 0341 	bfc	r3, #1, #1
  41495a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  41495e:	4601      	mov	r1, r0
  414960:	4830      	ldr	r0, [pc, #192]	; (414a24 <anim_task+0xdc>)
  414962:	4b32      	ldr	r3, [pc, #200]	; (414a2c <anim_task+0xe4>)
  414964:	4798      	blx	r3
  414966:	2800      	cmp	r0, #0
  414968:	d1f3      	bne.n	414952 <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  41496a:	4b31      	ldr	r3, [pc, #196]	; (414a30 <anim_task+0xe8>)
  41496c:	6818      	ldr	r0, [r3, #0]
  41496e:	4b31      	ldr	r3, [pc, #196]	; (414a34 <anim_task+0xec>)
  414970:	4798      	blx	r3
  414972:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414974:	482b      	ldr	r0, [pc, #172]	; (414a24 <anim_task+0xdc>)
  414976:	4b2c      	ldr	r3, [pc, #176]	; (414a28 <anim_task+0xe0>)
  414978:	4798      	blx	r3
  41497a:	4604      	mov	r4, r0
    while(a != NULL) {
  41497c:	e022      	b.n	4149c4 <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  41497e:	2a00      	cmp	r2, #0
  414980:	db31      	blt.n	4149e6 <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  414982:	68a3      	ldr	r3, [r4, #8]
  414984:	2b00      	cmp	r3, #0
  414986:	d02e      	beq.n	4149e6 <anim_task+0x9e>
  414988:	4620      	mov	r0, r4
  41498a:	4798      	blx	r3
  41498c:	e02b      	b.n	4149e6 <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  41498e:	6923      	ldr	r3, [r4, #16]
  414990:	2b00      	cmp	r3, #0
  414992:	d032      	beq.n	4149fa <anim_task+0xb2>
  414994:	4621      	mov	r1, r4
  414996:	f104 0010 	add.w	r0, r4, #16
  41499a:	4798      	blx	r3
                if(new_value != a->current) {
  41499c:	69e3      	ldr	r3, [r4, #28]
  41499e:	4298      	cmp	r0, r3
  4149a0:	d005      	beq.n	4149ae <anim_task+0x66>
                    a->current = new_value;
  4149a2:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  4149a4:	6863      	ldr	r3, [r4, #4]
  4149a6:	b113      	cbz	r3, 4149ae <anim_task+0x66>
  4149a8:	b201      	sxth	r1, r0
  4149aa:	6820      	ldr	r0, [r4, #0]
  4149ac:	4798      	blx	r3
                if(a->act_time >= a->time) {
  4149ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  4149b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4149b2:	429a      	cmp	r2, r3
  4149b4:	da27      	bge.n	414a06 <anim_task+0xbe>
        if(anim_list_changed)
  4149b6:	4b20      	ldr	r3, [pc, #128]	; (414a38 <anim_task+0xf0>)
  4149b8:	781b      	ldrb	r3, [r3, #0]
  4149ba:	b343      	cbz	r3, 414a0e <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  4149bc:	4819      	ldr	r0, [pc, #100]	; (414a24 <anim_task+0xdc>)
  4149be:	4b1a      	ldr	r3, [pc, #104]	; (414a28 <anim_task+0xe0>)
  4149c0:	4798      	blx	r3
  4149c2:	4604      	mov	r4, r0
    while(a != NULL) {
  4149c4:	b34c      	cbz	r4, 414a1a <anim_task+0xd2>
        anim_list_changed = false;
  4149c6:	2200      	movs	r2, #0
  4149c8:	4b1b      	ldr	r3, [pc, #108]	; (414a38 <anim_task+0xf0>)
  4149ca:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  4149cc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  4149d0:	f013 0f02 	tst.w	r3, #2
  4149d4:	d1ef      	bne.n	4149b6 <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  4149d6:	f043 0302 	orr.w	r3, r3, #2
  4149da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  4149de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4149e0:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  4149e2:	2b00      	cmp	r3, #0
  4149e4:	ddcb      	ble.n	41497e <anim_task+0x36>
            a->act_time += elaps;
  4149e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4149e8:	442b      	add	r3, r5
  4149ea:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  4149ec:	2b00      	cmp	r3, #0
  4149ee:	dbe2      	blt.n	4149b6 <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  4149f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4149f2:	4293      	cmp	r3, r2
  4149f4:	ddcb      	ble.n	41498e <anim_task+0x46>
  4149f6:	62a2      	str	r2, [r4, #40]	; 0x28
  4149f8:	e7c9      	b.n	41498e <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  4149fa:	4621      	mov	r1, r4
  4149fc:	f104 0010 	add.w	r0, r4, #16
  414a00:	4b0e      	ldr	r3, [pc, #56]	; (414a3c <anim_task+0xf4>)
  414a02:	4798      	blx	r3
  414a04:	e7ca      	b.n	41499c <anim_task+0x54>
                    anim_ready_handler(a);
  414a06:	4620      	mov	r0, r4
  414a08:	4b0d      	ldr	r3, [pc, #52]	; (414a40 <anim_task+0xf8>)
  414a0a:	4798      	blx	r3
  414a0c:	e7d3      	b.n	4149b6 <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414a0e:	4621      	mov	r1, r4
  414a10:	4804      	ldr	r0, [pc, #16]	; (414a24 <anim_task+0xdc>)
  414a12:	4b06      	ldr	r3, [pc, #24]	; (414a2c <anim_task+0xe4>)
  414a14:	4798      	blx	r3
  414a16:	4604      	mov	r4, r0
  414a18:	e7d4      	b.n	4149c4 <anim_task+0x7c>
    last_task_run = lv_tick_get();
  414a1a:	4b0a      	ldr	r3, [pc, #40]	; (414a44 <anim_task+0xfc>)
  414a1c:	4798      	blx	r3
  414a1e:	4b04      	ldr	r3, [pc, #16]	; (414a30 <anim_task+0xe8>)
  414a20:	6018      	str	r0, [r3, #0]
  414a22:	bd38      	pop	{r3, r4, r5, pc}
  414a24:	2043a24c 	.word	0x2043a24c
  414a28:	0041583d 	.word	0x0041583d
  414a2c:	00415851 	.word	0x00415851
  414a30:	2040c748 	.word	0x2040c748
  414a34:	00414829 	.word	0x00414829
  414a38:	2040c744 	.word	0x2040c744
  414a3c:	00414841 	.word	0x00414841
  414a40:	004148a5 	.word	0x004148a5
  414a44:	0041480d 	.word	0x0041480d

00414a48 <_lv_anim_core_init>:
{
  414a48:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  414a4a:	2144      	movs	r1, #68	; 0x44
  414a4c:	480a      	ldr	r0, [pc, #40]	; (414a78 <_lv_anim_core_init+0x30>)
  414a4e:	4b0b      	ldr	r3, [pc, #44]	; (414a7c <_lv_anim_core_init+0x34>)
  414a50:	4798      	blx	r3
    last_task_run = lv_tick_get();
  414a52:	4b0b      	ldr	r3, [pc, #44]	; (414a80 <_lv_anim_core_init+0x38>)
  414a54:	4798      	blx	r3
  414a56:	4b0b      	ldr	r3, [pc, #44]	; (414a84 <_lv_anim_core_init+0x3c>)
  414a58:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  414a5a:	2300      	movs	r3, #0
  414a5c:	2204      	movs	r2, #4
  414a5e:	211e      	movs	r1, #30
  414a60:	4809      	ldr	r0, [pc, #36]	; (414a88 <_lv_anim_core_init+0x40>)
  414a62:	4c0a      	ldr	r4, [pc, #40]	; (414a8c <_lv_anim_core_init+0x44>)
  414a64:	47a0      	blx	r4
  414a66:	4b0a      	ldr	r3, [pc, #40]	; (414a90 <_lv_anim_core_init+0x48>)
  414a68:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  414a6a:	4b0a      	ldr	r3, [pc, #40]	; (414a94 <_lv_anim_core_init+0x4c>)
  414a6c:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  414a6e:	2200      	movs	r2, #0
  414a70:	4b09      	ldr	r3, [pc, #36]	; (414a98 <_lv_anim_core_init+0x50>)
  414a72:	701a      	strb	r2, [r3, #0]
  414a74:	bd10      	pop	{r4, pc}
  414a76:	bf00      	nop
  414a78:	2043a24c 	.word	0x2043a24c
  414a7c:	00415793 	.word	0x00415793
  414a80:	0041480d 	.word	0x0041480d
  414a84:	2040c748 	.word	0x2040c748
  414a88:	00414949 	.word	0x00414949
  414a8c:	00416239 	.word	0x00416239
  414a90:	2040c740 	.word	0x2040c740
  414a94:	00414869 	.word	0x00414869
  414a98:	2040c744 	.word	0x2040c744

00414a9c <lv_anim_init>:
{
  414a9c:	b510      	push	{r4, lr}
  414a9e:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  414aa0:	2144      	movs	r1, #68	; 0x44
  414aa2:	4b0f      	ldr	r3, [pc, #60]	; (414ae0 <lv_anim_init+0x44>)
  414aa4:	4798      	blx	r3
    a->time    = 500;
  414aa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  414aaa:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  414aac:	2300      	movs	r3, #0
  414aae:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  414ab0:	2364      	movs	r3, #100	; 0x64
  414ab2:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  414ab4:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  414ab8:	4a0a      	ldr	r2, [pc, #40]	; (414ae4 <lv_anim_init+0x48>)
  414aba:	2304      	movs	r3, #4
  414abc:	e004      	b.n	414ac8 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  414abe:	f812 0b01 	ldrb.w	r0, [r2], #1
  414ac2:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  414ac6:	3b01      	subs	r3, #1
    while(len) {
  414ac8:	2b00      	cmp	r3, #0
  414aca:	d1f8      	bne.n	414abe <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  414acc:	2301      	movs	r3, #1
  414ace:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  414ad0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414ad4:	f043 0301 	orr.w	r3, r3, #1
  414ad8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  414adc:	bd10      	pop	{r4, pc}
  414ade:	bf00      	nop
  414ae0:	00416169 	.word	0x00416169
  414ae4:	00426ba4 	.word	0x00426ba4

00414ae8 <lv_anim_del>:
{
  414ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414aec:	4606      	mov	r6, r0
  414aee:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414af0:	4812      	ldr	r0, [pc, #72]	; (414b3c <lv_anim_del+0x54>)
  414af2:	4b13      	ldr	r3, [pc, #76]	; (414b40 <lv_anim_del+0x58>)
  414af4:	4798      	blx	r3
  414af6:	4604      	mov	r4, r0
    bool del = false;
  414af8:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  414afc:	e00b      	b.n	414b16 <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414afe:	4621      	mov	r1, r4
  414b00:	480e      	ldr	r0, [pc, #56]	; (414b3c <lv_anim_del+0x54>)
  414b02:	4b10      	ldr	r3, [pc, #64]	; (414b44 <lv_anim_del+0x5c>)
  414b04:	4798      	blx	r3
            lv_mem_free(a);
  414b06:	4620      	mov	r0, r4
  414b08:	4b0f      	ldr	r3, [pc, #60]	; (414b48 <lv_anim_del+0x60>)
  414b0a:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  414b0c:	4b0f      	ldr	r3, [pc, #60]	; (414b4c <lv_anim_del+0x64>)
  414b0e:	4798      	blx	r3
            del = true;
  414b10:	f04f 0801 	mov.w	r8, #1
  414b14:	462c      	mov	r4, r5
    while(a != NULL) {
  414b16:	b16c      	cbz	r4, 414b34 <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414b18:	4621      	mov	r1, r4
  414b1a:	4808      	ldr	r0, [pc, #32]	; (414b3c <lv_anim_del+0x54>)
  414b1c:	4b0c      	ldr	r3, [pc, #48]	; (414b50 <lv_anim_del+0x68>)
  414b1e:	4798      	blx	r3
  414b20:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  414b22:	6823      	ldr	r3, [r4, #0]
  414b24:	42b3      	cmp	r3, r6
  414b26:	d1f5      	bne.n	414b14 <lv_anim_del+0x2c>
  414b28:	6863      	ldr	r3, [r4, #4]
  414b2a:	42bb      	cmp	r3, r7
  414b2c:	d0e7      	beq.n	414afe <lv_anim_del+0x16>
  414b2e:	2f00      	cmp	r7, #0
  414b30:	d1f0      	bne.n	414b14 <lv_anim_del+0x2c>
  414b32:	e7e4      	b.n	414afe <lv_anim_del+0x16>
}
  414b34:	4640      	mov	r0, r8
  414b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414b3a:	bf00      	nop
  414b3c:	2043a24c 	.word	0x2043a24c
  414b40:	0041583d 	.word	0x0041583d
  414b44:	004158f9 	.word	0x004158f9
  414b48:	00415cf9 	.word	0x00415cf9
  414b4c:	00414869 	.word	0x00414869
  414b50:	00415851 	.word	0x00415851

00414b54 <lv_anim_start>:
{
  414b54:	b538      	push	{r3, r4, r5, lr}
  414b56:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  414b58:	6841      	ldr	r1, [r0, #4]
  414b5a:	b111      	cbz	r1, 414b62 <lv_anim_start+0xe>
  414b5c:	6800      	ldr	r0, [r0, #0]
  414b5e:	4b18      	ldr	r3, [pc, #96]	; (414bc0 <lv_anim_start+0x6c>)
  414b60:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  414b62:	4818      	ldr	r0, [pc, #96]	; (414bc4 <lv_anim_start+0x70>)
  414b64:	4b18      	ldr	r3, [pc, #96]	; (414bc8 <lv_anim_start+0x74>)
  414b66:	4798      	blx	r3
  414b68:	b9e8      	cbnz	r0, 414ba6 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  414b6a:	4816      	ldr	r0, [pc, #88]	; (414bc4 <lv_anim_start+0x70>)
  414b6c:	4b17      	ldr	r3, [pc, #92]	; (414bcc <lv_anim_start+0x78>)
  414b6e:	4798      	blx	r3
  414b70:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  414b72:	4b17      	ldr	r3, [pc, #92]	; (414bd0 <lv_anim_start+0x7c>)
  414b74:	4798      	blx	r3
  414b76:	b1e0      	cbz	r0, 414bb2 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  414b78:	b1a4      	cbz	r4, 414ba4 <lv_anim_start+0x50>
    a->time_orig = a->time;
  414b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  414b7c:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  414b7e:	2244      	movs	r2, #68	; 0x44
  414b80:	4629      	mov	r1, r5
  414b82:	4620      	mov	r0, r4
  414b84:	4b13      	ldr	r3, [pc, #76]	; (414bd4 <lv_anim_start+0x80>)
  414b86:	4798      	blx	r3
    if(new_anim->early_apply) {
  414b88:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414b8c:	f013 0f01 	tst.w	r3, #1
  414b90:	d006      	beq.n	414ba0 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  414b92:	6863      	ldr	r3, [r4, #4]
  414b94:	b123      	cbz	r3, 414ba0 <lv_anim_start+0x4c>
  414b96:	6820      	ldr	r0, [r4, #0]
  414b98:	b110      	cbz	r0, 414ba0 <lv_anim_start+0x4c>
  414b9a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  414b9e:	4798      	blx	r3
    anim_mark_list_change();
  414ba0:	4b0d      	ldr	r3, [pc, #52]	; (414bd8 <lv_anim_start+0x84>)
  414ba2:	4798      	blx	r3
  414ba4:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  414ba6:	4b0d      	ldr	r3, [pc, #52]	; (414bdc <lv_anim_start+0x88>)
  414ba8:	4798      	blx	r3
  414baa:	3801      	subs	r0, #1
  414bac:	4b0c      	ldr	r3, [pc, #48]	; (414be0 <lv_anim_start+0x8c>)
  414bae:	6018      	str	r0, [r3, #0]
  414bb0:	e7db      	b.n	414b6a <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  414bb2:	4622      	mov	r2, r4
  414bb4:	2300      	movs	r3, #0
  414bb6:	480b      	ldr	r0, [pc, #44]	; (414be4 <lv_anim_start+0x90>)
  414bb8:	490b      	ldr	r1, [pc, #44]	; (414be8 <lv_anim_start+0x94>)
  414bba:	4788      	blx	r1
  414bbc:	e7fe      	b.n	414bbc <lv_anim_start+0x68>
  414bbe:	bf00      	nop
  414bc0:	00414ae9 	.word	0x00414ae9
  414bc4:	2043a24c 	.word	0x2043a24c
  414bc8:	00415aa9 	.word	0x00415aa9
  414bcc:	004157a5 	.word	0x004157a5
  414bd0:	0041552d 	.word	0x0041552d
  414bd4:	00415e45 	.word	0x00415e45
  414bd8:	00414869 	.word	0x00414869
  414bdc:	0041480d 	.word	0x0041480d
  414be0:	2040c748 	.word	0x2040c748
  414be4:	004235f0 	.word	0x004235f0
  414be8:	00415539 	.word	0x00415539

00414bec <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
  414bec:	b410      	push	{r4}
    lv_coord_t r = (area->x2 - area->x1) / 2;
  414bee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  414bf2:	f9b0 2000 	ldrsh.w	r2, [r0]
  414bf6:	1a9b      	subs	r3, r3, r2
  414bf8:	d417      	bmi.n	414c2a <lv_point_within_circle+0x3e>
  414bfa:	105b      	asrs	r3, r3, #1

    /* Circle center */
    lv_coord_t cx = area->x1 + r;
  414bfc:	b29c      	uxth	r4, r3
  414bfe:	fa14 f282 	uxtah	r2, r4, r2
  414c02:	b292      	uxth	r2, r2
    lv_coord_t cy = area->y1 + r;
  414c04:	8840      	ldrh	r0, [r0, #2]
  414c06:	4404      	add	r4, r0
  414c08:	b2a4      	uxth	r4, r4

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
  414c0a:	8808      	ldrh	r0, [r1, #0]
  414c0c:	1a82      	subs	r2, r0, r2
    lv_coord_t py = p->y - cy;
  414c0e:	8849      	ldrh	r1, [r1, #2]
  414c10:	1b09      	subs	r1, r1, r4

    uint32_t r_sqrd = r * r;
  414c12:	fb13 f303 	smulbb	r3, r3, r3
    uint32_t dist = (px * px) + (py * py);
  414c16:	fb11 f101 	smulbb	r1, r1, r1
  414c1a:	fb12 1202 	smlabb	r2, r2, r2, r1

    if(dist <= r_sqrd)
  414c1e:	4293      	cmp	r3, r2
  414c20:	d205      	bcs.n	414c2e <lv_point_within_circle+0x42>
        return true;
    else
        return false;
  414c22:	2000      	movs	r0, #0
}
  414c24:	f85d 4b04 	ldr.w	r4, [sp], #4
  414c28:	4770      	bx	lr
    lv_coord_t r = (area->x2 - area->x1) / 2;
  414c2a:	3301      	adds	r3, #1
  414c2c:	e7e5      	b.n	414bfa <lv_point_within_circle+0xe>
        return true;
  414c2e:	2001      	movs	r0, #1
  414c30:	e7f8      	b.n	414c24 <lv_point_within_circle+0x38>

00414c32 <lv_area_set>:
    area_p->x1 = x1;
  414c32:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
  414c34:	8042      	strh	r2, [r0, #2]
    area_p->x2 = x2;
  414c36:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
  414c38:	f9bd 3000 	ldrsh.w	r3, [sp]
  414c3c:	80c3      	strh	r3, [r0, #6]
  414c3e:	4770      	bx	lr

00414c40 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
  414c40:	8843      	ldrh	r3, [r0, #2]
  414c42:	4419      	add	r1, r3
  414c44:	b289      	uxth	r1, r1
  414c46:	3901      	subs	r1, #1
  414c48:	80c1      	strh	r1, [r0, #6]
  414c4a:	4770      	bx	lr

00414c4c <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
  414c4c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  414c50:	f9b0 3000 	ldrsh.w	r3, [r0]
  414c54:	1ad2      	subs	r2, r2, r3
  414c56:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  414c5a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  414c5e:	1a18      	subs	r0, r3, r0
  414c60:	3001      	adds	r0, #1
}
  414c62:	fb02 0000 	mla	r0, r2, r0, r0
  414c66:	4770      	bx	lr

00414c68 <_lv_area_intersect>:
{
  414c68:	b470      	push	{r4, r5, r6}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
  414c6a:	f9b2 4000 	ldrsh.w	r4, [r2]
  414c6e:	f9b1 3000 	ldrsh.w	r3, [r1]
  414c72:	429c      	cmp	r4, r3
  414c74:	bfb8      	it	lt
  414c76:	461c      	movlt	r4, r3
  414c78:	8004      	strh	r4, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
  414c7a:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  414c7e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414c82:	429d      	cmp	r5, r3
  414c84:	bfb8      	it	lt
  414c86:	461d      	movlt	r5, r3
  414c88:	8045      	strh	r5, [r0, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
  414c8a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  414c8e:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  414c92:	42b3      	cmp	r3, r6
  414c94:	bfa8      	it	ge
  414c96:	4633      	movge	r3, r6
  414c98:	8083      	strh	r3, [r0, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
  414c9a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  414c9e:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  414ca2:	428a      	cmp	r2, r1
  414ca4:	bfa8      	it	ge
  414ca6:	460a      	movge	r2, r1
  414ca8:	80c2      	strh	r2, [r0, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
  414caa:	429c      	cmp	r4, r3
  414cac:	dc05      	bgt.n	414cba <_lv_area_intersect+0x52>
  414cae:	4295      	cmp	r5, r2
  414cb0:	dd01      	ble.n	414cb6 <_lv_area_intersect+0x4e>
        union_ok = false;
  414cb2:	2000      	movs	r0, #0
  414cb4:	e002      	b.n	414cbc <_lv_area_intersect+0x54>
    bool union_ok = true;
  414cb6:	2001      	movs	r0, #1
  414cb8:	e000      	b.n	414cbc <_lv_area_intersect+0x54>
        union_ok = false;
  414cba:	2000      	movs	r0, #0
}
  414cbc:	bc70      	pop	{r4, r5, r6}
  414cbe:	4770      	bx	lr

00414cc0 <_lv_area_join>:
{
  414cc0:	b410      	push	{r4}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
  414cc2:	f9b2 3000 	ldrsh.w	r3, [r2]
  414cc6:	f9b1 4000 	ldrsh.w	r4, [r1]
  414cca:	42a3      	cmp	r3, r4
  414ccc:	bfa8      	it	ge
  414cce:	4623      	movge	r3, r4
  414cd0:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
  414cd2:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  414cd6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414cda:	42a3      	cmp	r3, r4
  414cdc:	bfa8      	it	ge
  414cde:	4623      	movge	r3, r4
  414ce0:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
  414ce2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  414ce6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  414cea:	42a3      	cmp	r3, r4
  414cec:	bfb8      	it	lt
  414cee:	4623      	movlt	r3, r4
  414cf0:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
  414cf2:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  414cf6:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  414cfa:	4293      	cmp	r3, r2
  414cfc:	bfb8      	it	lt
  414cfe:	4613      	movlt	r3, r2
  414d00:	80c3      	strh	r3, [r0, #6]
}
  414d02:	f85d 4b04 	ldr.w	r4, [sp], #4
  414d06:	4770      	bx	lr

00414d08 <_lv_area_is_point_on>:
{
  414d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414d0c:	b082      	sub	sp, #8
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
  414d0e:	f9b1 3000 	ldrsh.w	r3, [r1]
  414d12:	f9b0 6000 	ldrsh.w	r6, [r0]
  414d16:	42b3      	cmp	r3, r6
  414d18:	db0f      	blt.n	414d3a <_lv_area_is_point_on+0x32>
  414d1a:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  414d1e:	42a3      	cmp	r3, r4
  414d20:	dc52      	bgt.n	414dc8 <_lv_area_is_point_on+0xc0>
  414d22:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414d26:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  414d2a:	42a3      	cmp	r3, r4
  414d2c:	db4e      	blt.n	414dcc <_lv_area_is_point_on+0xc4>
  414d2e:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  414d32:	42a3      	cmp	r3, r4
  414d34:	dd4c      	ble.n	414dd0 <_lv_area_is_point_on+0xc8>
    bool is_on_rect = false;
  414d36:	2500      	movs	r5, #0
  414d38:	e000      	b.n	414d3c <_lv_area_is_point_on+0x34>
  414d3a:	2500      	movs	r5, #0
    if(!is_on_rect)
  414d3c:	2d00      	cmp	r5, #0
  414d3e:	d03f      	beq.n	414dc0 <_lv_area_is_point_on+0xb8>
    if(radius <= 0) {
  414d40:	2a00      	cmp	r2, #0
  414d42:	dd3d      	ble.n	414dc0 <_lv_area_is_point_on+0xb8>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414d44:	8884      	ldrh	r4, [r0, #4]
  414d46:	b2b3      	uxth	r3, r6
  414d48:	1ae4      	subs	r4, r4, r3
  414d4a:	b2a4      	uxth	r4, r4
  414d4c:	3401      	adds	r4, #1
  414d4e:	b224      	sxth	r4, r4
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  414d50:	2c00      	cmp	r4, #0
  414d52:	db3f      	blt.n	414dd4 <_lv_area_is_point_on+0xcc>
  414d54:	1064      	asrs	r4, r4, #1
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  414d56:	88c3      	ldrh	r3, [r0, #6]
  414d58:	8847      	ldrh	r7, [r0, #2]
  414d5a:	1bdb      	subs	r3, r3, r7
  414d5c:	b29b      	uxth	r3, r3
  414d5e:	3301      	adds	r3, #1
  414d60:	b21b      	sxth	r3, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  414d62:	2b00      	cmp	r3, #0
  414d64:	db38      	blt.n	414dd8 <_lv_area_is_point_on+0xd0>
  414d66:	105b      	asrs	r3, r3, #1
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
  414d68:	429c      	cmp	r4, r3
  414d6a:	bfa8      	it	ge
  414d6c:	461c      	movge	r4, r3
  414d6e:	b224      	sxth	r4, r4
    if(radius > max_radius)
  414d70:	42a2      	cmp	r2, r4
  414d72:	dc00      	bgt.n	414d76 <_lv_area_is_point_on+0x6e>
  414d74:	4614      	mov	r4, r2
  414d76:	4688      	mov	r8, r1
  414d78:	4607      	mov	r7, r0
    corner_area.x1 = a_p->x1;
  414d7a:	f8ad 6000 	strh.w	r6, [sp]
    corner_area.x2 = a_p->x1 + radius;
  414d7e:	8803      	ldrh	r3, [r0, #0]
  414d80:	b2a4      	uxth	r4, r4
  414d82:	4423      	add	r3, r4
  414d84:	f8ad 3004 	strh.w	r3, [sp, #4]
    corner_area.y1 = a_p->y1;
  414d88:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414d8c:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  414d90:	8843      	ldrh	r3, [r0, #2]
  414d92:	4423      	add	r3, r4
  414d94:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414d98:	2200      	movs	r2, #0
  414d9a:	4668      	mov	r0, sp
  414d9c:	f7ff ffb4 	bl	414d08 <_lv_area_is_point_on>
  414da0:	b1e0      	cbz	r0, 414ddc <_lv_area_is_point_on+0xd4>
        corner_area.x2 += radius;
  414da2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  414da6:	4423      	add	r3, r4
  414da8:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y2 += radius;
  414dac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  414db0:	441c      	add	r4, r3
  414db2:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  414db6:	4641      	mov	r1, r8
  414db8:	4668      	mov	r0, sp
  414dba:	4b36      	ldr	r3, [pc, #216]	; (414e94 <_lv_area_is_point_on+0x18c>)
  414dbc:	4798      	blx	r3
  414dbe:	4605      	mov	r5, r0
}
  414dc0:	4628      	mov	r0, r5
  414dc2:	b002      	add	sp, #8
  414dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_on_rect = false;
  414dc8:	2500      	movs	r5, #0
  414dca:	e7b7      	b.n	414d3c <_lv_area_is_point_on+0x34>
  414dcc:	2500      	movs	r5, #0
  414dce:	e7b5      	b.n	414d3c <_lv_area_is_point_on+0x34>
        is_on_rect = true;
  414dd0:	2501      	movs	r5, #1
  414dd2:	e7b3      	b.n	414d3c <_lv_area_is_point_on+0x34>
    lv_coord_t w = lv_area_get_width(a_p) / 2;
  414dd4:	3401      	adds	r4, #1
  414dd6:	e7bd      	b.n	414d54 <_lv_area_is_point_on+0x4c>
    lv_coord_t h = lv_area_get_height(a_p) / 2;
  414dd8:	3301      	adds	r3, #1
  414dda:	e7c4      	b.n	414d66 <_lv_area_is_point_on+0x5e>
    corner_area.y1 = a_p->y2 - radius;
  414ddc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  414de0:	b293      	uxth	r3, r2
  414de2:	1b1b      	subs	r3, r3, r4
  414de4:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y2;
  414de8:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414dec:	2200      	movs	r2, #0
  414dee:	4641      	mov	r1, r8
  414df0:	4668      	mov	r0, sp
  414df2:	f7ff ff89 	bl	414d08 <_lv_area_is_point_on>
  414df6:	b178      	cbz	r0, 414e18 <_lv_area_is_point_on+0x110>
        corner_area.x2 += radius;
  414df8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  414dfc:	4423      	add	r3, r4
  414dfe:	f8ad 3004 	strh.w	r3, [sp, #4]
        corner_area.y1 -= radius;
  414e02:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  414e06:	1b1c      	subs	r4, r3, r4
  414e08:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  414e0c:	4641      	mov	r1, r8
  414e0e:	4668      	mov	r0, sp
  414e10:	4b20      	ldr	r3, [pc, #128]	; (414e94 <_lv_area_is_point_on+0x18c>)
  414e12:	4798      	blx	r3
  414e14:	4605      	mov	r5, r0
  414e16:	e7d3      	b.n	414dc0 <_lv_area_is_point_on+0xb8>
    corner_area.x1 = a_p->x2 - radius;
  414e18:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  414e1c:	b293      	uxth	r3, r2
  414e1e:	1b1b      	subs	r3, r3, r4
  414e20:	f8ad 3000 	strh.w	r3, [sp]
    corner_area.x2 = a_p->x2;
  414e24:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414e28:	2200      	movs	r2, #0
  414e2a:	4641      	mov	r1, r8
  414e2c:	4668      	mov	r0, sp
  414e2e:	f7ff ff6b 	bl	414d08 <_lv_area_is_point_on>
  414e32:	b178      	cbz	r0, 414e54 <_lv_area_is_point_on+0x14c>
        corner_area.x1 -= radius;
  414e34:	f8bd 3000 	ldrh.w	r3, [sp]
  414e38:	1b1b      	subs	r3, r3, r4
  414e3a:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y1 -= radius;
  414e3e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  414e42:	1b1c      	subs	r4, r3, r4
  414e44:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
  414e48:	4641      	mov	r1, r8
  414e4a:	4668      	mov	r0, sp
  414e4c:	4b11      	ldr	r3, [pc, #68]	; (414e94 <_lv_area_is_point_on+0x18c>)
  414e4e:	4798      	blx	r3
  414e50:	4605      	mov	r5, r0
  414e52:	e7b5      	b.n	414dc0 <_lv_area_is_point_on+0xb8>
    corner_area.y1 = a_p->y1;
  414e54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  414e58:	f8ad 3002 	strh.w	r3, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
  414e5c:	887b      	ldrh	r3, [r7, #2]
  414e5e:	4423      	add	r3, r4
  414e60:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
  414e64:	2200      	movs	r2, #0
  414e66:	4641      	mov	r1, r8
  414e68:	4668      	mov	r0, sp
  414e6a:	f7ff ff4d 	bl	414d08 <_lv_area_is_point_on>
  414e6e:	2800      	cmp	r0, #0
  414e70:	d0a6      	beq.n	414dc0 <_lv_area_is_point_on+0xb8>
        corner_area.x1 -= radius;
  414e72:	f8bd 3000 	ldrh.w	r3, [sp]
  414e76:	1b1b      	subs	r3, r3, r4
  414e78:	f8ad 3000 	strh.w	r3, [sp]
        corner_area.y2 += radius;
  414e7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  414e80:	441c      	add	r4, r3
  414e82:	f8ad 4006 	strh.w	r4, [sp, #6]
        return lv_point_within_circle(&corner_area, p_p);
  414e86:	4641      	mov	r1, r8
  414e88:	4668      	mov	r0, sp
  414e8a:	4b02      	ldr	r3, [pc, #8]	; (414e94 <_lv_area_is_point_on+0x18c>)
  414e8c:	4798      	blx	r3
  414e8e:	4605      	mov	r5, r0
  414e90:	e796      	b.n	414dc0 <_lv_area_is_point_on+0xb8>
  414e92:	bf00      	nop
  414e94:	00414bed 	.word	0x00414bed

00414e98 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
  414e98:	f9b0 2000 	ldrsh.w	r2, [r0]
  414e9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  414ea0:	429a      	cmp	r2, r3
  414ea2:	dc13      	bgt.n	414ecc <_lv_area_is_on+0x34>
  414ea4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  414ea8:	f9b1 3000 	ldrsh.w	r3, [r1]
  414eac:	429a      	cmp	r2, r3
  414eae:	db0f      	blt.n	414ed0 <_lv_area_is_on+0x38>
  414eb0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  414eb4:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  414eb8:	429a      	cmp	r2, r3
  414eba:	dc0b      	bgt.n	414ed4 <_lv_area_is_on+0x3c>
  414ebc:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  414ec0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414ec4:	429a      	cmp	r2, r3
  414ec6:	da07      	bge.n	414ed8 <_lv_area_is_on+0x40>
        return false;
  414ec8:	2000      	movs	r0, #0
  414eca:	4770      	bx	lr
  414ecc:	2000      	movs	r0, #0
  414ece:	4770      	bx	lr
  414ed0:	2000      	movs	r0, #0
  414ed2:	4770      	bx	lr
  414ed4:	2000      	movs	r0, #0
  414ed6:	4770      	bx	lr
        return true;
  414ed8:	2001      	movs	r0, #1
}
  414eda:	4770      	bx	lr

00414edc <_lv_area_is_in>:
{
  414edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  414ede:	b083      	sub	sp, #12
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  414ee0:	f9b0 5000 	ldrsh.w	r5, [r0]
  414ee4:	f9b1 3000 	ldrsh.w	r3, [r1]
  414ee8:	429d      	cmp	r5, r3
  414eea:	db13      	blt.n	414f14 <_lv_area_is_in+0x38>
  414eec:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  414ef0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414ef4:	429c      	cmp	r4, r3
  414ef6:	db13      	blt.n	414f20 <_lv_area_is_in+0x44>
  414ef8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  414efc:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  414f00:	429c      	cmp	r4, r3
  414f02:	dc0f      	bgt.n	414f24 <_lv_area_is_in+0x48>
       ain_p->y2 <= aholder_p->y2) {
  414f04:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  414f08:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
  414f0c:	429c      	cmp	r4, r3
  414f0e:	dd0b      	ble.n	414f28 <_lv_area_is_in+0x4c>
    bool is_in = false;
  414f10:	2300      	movs	r3, #0
  414f12:	e000      	b.n	414f16 <_lv_area_is_in+0x3a>
  414f14:	2300      	movs	r3, #0
    if(!is_in) return false;
  414f16:	b103      	cbz	r3, 414f1a <_lv_area_is_in+0x3e>
    if(radius == 0) return true;
  414f18:	b942      	cbnz	r2, 414f2c <_lv_area_is_in+0x50>
}
  414f1a:	4618      	mov	r0, r3
  414f1c:	b003      	add	sp, #12
  414f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bool is_in = false;
  414f20:	2300      	movs	r3, #0
  414f22:	e7f8      	b.n	414f16 <_lv_area_is_in+0x3a>
  414f24:	2300      	movs	r3, #0
  414f26:	e7f6      	b.n	414f16 <_lv_area_is_in+0x3a>
        is_in = true;
  414f28:	2301      	movs	r3, #1
  414f2a:	e7f4      	b.n	414f16 <_lv_area_is_in+0x3a>
  414f2c:	4617      	mov	r7, r2
  414f2e:	460c      	mov	r4, r1
  414f30:	4606      	mov	r6, r0
    p.x = ain_p->x1;
  414f32:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  414f36:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414f3a:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414f3e:	a901      	add	r1, sp, #4
  414f40:	4620      	mov	r0, r4
  414f42:	4b17      	ldr	r3, [pc, #92]	; (414fa0 <_lv_area_is_in+0xc4>)
  414f44:	4798      	blx	r3
  414f46:	4603      	mov	r3, r0
  414f48:	2800      	cmp	r0, #0
  414f4a:	d0e6      	beq.n	414f1a <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  414f4c:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  414f50:	f8ad 5004 	strh.w	r5, [sp, #4]
    p.y = ain_p->y1;
  414f54:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  414f58:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414f5c:	463a      	mov	r2, r7
  414f5e:	a901      	add	r1, sp, #4
  414f60:	4620      	mov	r0, r4
  414f62:	4b0f      	ldr	r3, [pc, #60]	; (414fa0 <_lv_area_is_in+0xc4>)
  414f64:	4798      	blx	r3
  414f66:	4603      	mov	r3, r0
  414f68:	2800      	cmp	r0, #0
  414f6a:	d0d6      	beq.n	414f1a <_lv_area_is_in+0x3e>
    p.x = ain_p->x1;
  414f6c:	f9b6 3000 	ldrsh.w	r3, [r6]
  414f70:	f8ad 3004 	strh.w	r3, [sp, #4]
    p.y = ain_p->y2;
  414f74:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  414f78:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414f7c:	463a      	mov	r2, r7
  414f7e:	a901      	add	r1, sp, #4
  414f80:	4620      	mov	r0, r4
  414f82:	4b07      	ldr	r3, [pc, #28]	; (414fa0 <_lv_area_is_in+0xc4>)
  414f84:	4798      	blx	r3
  414f86:	4603      	mov	r3, r0
  414f88:	2800      	cmp	r0, #0
  414f8a:	d0c6      	beq.n	414f1a <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
  414f8c:	a902      	add	r1, sp, #8
  414f8e:	f821 5d04 	strh.w	r5, [r1, #-4]!
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
  414f92:	463a      	mov	r2, r7
  414f94:	4620      	mov	r0, r4
  414f96:	4b02      	ldr	r3, [pc, #8]	; (414fa0 <_lv_area_is_in+0xc4>)
  414f98:	4798      	blx	r3
  414f9a:	4603      	mov	r3, r0
  414f9c:	e7bd      	b.n	414f1a <_lv_area_is_in+0x3e>
  414f9e:	bf00      	nop
  414fa0:	00414d09 	.word	0x00414d09

00414fa4 <_lv_area_align>:
{
  414fa4:	b430      	push	{r4, r5}
    switch(align) {
  414fa6:	2a14      	cmp	r2, #20
  414fa8:	d842      	bhi.n	415030 <_lv_area_align+0x8c>
  414faa:	e8df f012 	tbh	[pc, r2, lsl #1]
  414fae:	0015      	.short	0x0015
  414fb0:	00570053 	.word	0x00570053
  414fb4:	00850074 	.word	0x00850074
  414fb8:	00bf0096 	.word	0x00bf0096
  414fbc:	00f900dc 	.word	0x00f900dc
  414fc0:	012b0122 	.word	0x012b0122
  414fc4:	0161014c 	.word	0x0161014c
  414fc8:	018b016a 	.word	0x018b016a
  414fcc:	01a901a0 	.word	0x01a901a0
  414fd0:	01df01ca 	.word	0x01df01ca
  414fd4:	020901e8 	.word	0x020901e8
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  414fd8:	8884      	ldrh	r4, [r0, #4]
  414fda:	8802      	ldrh	r2, [r0, #0]
  414fdc:	1aa4      	subs	r4, r4, r2
  414fde:	b2a4      	uxth	r4, r4
  414fe0:	3401      	adds	r4, #1
  414fe2:	b224      	sxth	r4, r4
  414fe4:	888a      	ldrh	r2, [r1, #4]
  414fe6:	880d      	ldrh	r5, [r1, #0]
  414fe8:	1b52      	subs	r2, r2, r5
  414fea:	b292      	uxth	r2, r2
  414fec:	3201      	adds	r2, #1
  414fee:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  414ff0:	4625      	mov	r5, r4
  414ff2:	2c00      	cmp	r4, #0
  414ff4:	db26      	blt.n	415044 <_lv_area_align+0xa0>
  414ff6:	106d      	asrs	r5, r5, #1
  414ff8:	4614      	mov	r4, r2
  414ffa:	2a00      	cmp	r2, #0
  414ffc:	db24      	blt.n	415048 <_lv_area_align+0xa4>
  414ffe:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415002:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415004:	88c4      	ldrh	r4, [r0, #6]
  415006:	8842      	ldrh	r2, [r0, #2]
  415008:	1aa4      	subs	r4, r4, r2
  41500a:	b2a4      	uxth	r4, r4
  41500c:	3401      	adds	r4, #1
  41500e:	b224      	sxth	r4, r4
  415010:	88ca      	ldrh	r2, [r1, #6]
  415012:	8849      	ldrh	r1, [r1, #2]
  415014:	1a52      	subs	r2, r2, r1
  415016:	b292      	uxth	r2, r2
  415018:	3201      	adds	r2, #1
  41501a:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41501c:	4621      	mov	r1, r4
  41501e:	2c00      	cmp	r4, #0
  415020:	db14      	blt.n	41504c <_lv_area_align+0xa8>
  415022:	1049      	asrs	r1, r1, #1
  415024:	4614      	mov	r4, r2
  415026:	2a00      	cmp	r2, #0
  415028:	db12      	blt.n	415050 <_lv_area_align+0xac>
  41502a:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  41502e:	8059      	strh	r1, [r3, #2]
    res->x += base->x1;
  415030:	8802      	ldrh	r2, [r0, #0]
  415032:	8819      	ldrh	r1, [r3, #0]
  415034:	440a      	add	r2, r1
  415036:	801a      	strh	r2, [r3, #0]
    res->y += base->y1;
  415038:	8842      	ldrh	r2, [r0, #2]
  41503a:	8859      	ldrh	r1, [r3, #2]
  41503c:	440a      	add	r2, r1
  41503e:	805a      	strh	r2, [r3, #2]
}
  415040:	bc30      	pop	{r4, r5}
  415042:	4770      	bx	lr
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415044:	1c65      	adds	r5, r4, #1
  415046:	e7d6      	b.n	414ff6 <_lv_area_align+0x52>
  415048:	1c54      	adds	r4, r2, #1
  41504a:	e7d8      	b.n	414ffe <_lv_area_align+0x5a>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41504c:	1c61      	adds	r1, r4, #1
  41504e:	e7e8      	b.n	415022 <_lv_area_align+0x7e>
  415050:	1c54      	adds	r4, r2, #1
  415052:	e7ea      	b.n	41502a <_lv_area_align+0x86>
            res->x = 0;
  415054:	2200      	movs	r2, #0
  415056:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  415058:	805a      	strh	r2, [r3, #2]
            break;
  41505a:	e7e9      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41505c:	8884      	ldrh	r4, [r0, #4]
  41505e:	8802      	ldrh	r2, [r0, #0]
  415060:	1aa4      	subs	r4, r4, r2
  415062:	b2a4      	uxth	r4, r4
  415064:	3401      	adds	r4, #1
  415066:	b224      	sxth	r4, r4
  415068:	888a      	ldrh	r2, [r1, #4]
  41506a:	8809      	ldrh	r1, [r1, #0]
  41506c:	1a52      	subs	r2, r2, r1
  41506e:	b292      	uxth	r2, r2
  415070:	3201      	adds	r2, #1
  415072:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415074:	4621      	mov	r1, r4
  415076:	2c00      	cmp	r4, #0
  415078:	db09      	blt.n	41508e <_lv_area_align+0xea>
  41507a:	1049      	asrs	r1, r1, #1
  41507c:	4614      	mov	r4, r2
  41507e:	2a00      	cmp	r2, #0
  415080:	db07      	blt.n	415092 <_lv_area_align+0xee>
  415082:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415086:	8019      	strh	r1, [r3, #0]
            res->y = 0;
  415088:	2200      	movs	r2, #0
  41508a:	805a      	strh	r2, [r3, #2]
            break;
  41508c:	e7d0      	b.n	415030 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41508e:	1c61      	adds	r1, r4, #1
  415090:	e7f3      	b.n	41507a <_lv_area_align+0xd6>
  415092:	1c54      	adds	r4, r2, #1
  415094:	e7f5      	b.n	415082 <_lv_area_align+0xde>
  415096:	8882      	ldrh	r2, [r0, #4]
  415098:	8804      	ldrh	r4, [r0, #0]
  41509a:	1b12      	subs	r2, r2, r4
  41509c:	b292      	uxth	r2, r2
  41509e:	3201      	adds	r2, #1
  4150a0:	b292      	uxth	r2, r2
  4150a2:	888c      	ldrh	r4, [r1, #4]
  4150a4:	8809      	ldrh	r1, [r1, #0]
  4150a6:	1a61      	subs	r1, r4, r1
  4150a8:	b289      	uxth	r1, r1
  4150aa:	3101      	adds	r1, #1
  4150ac:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4150ae:	1a52      	subs	r2, r2, r1
  4150b0:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4150b2:	2200      	movs	r2, #0
  4150b4:	805a      	strh	r2, [r3, #2]
            break;
  4150b6:	e7bb      	b.n	415030 <_lv_area_align+0x8c>
            res->x = 0;
  4150b8:	2200      	movs	r2, #0
  4150ba:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4150bc:	88c2      	ldrh	r2, [r0, #6]
  4150be:	8844      	ldrh	r4, [r0, #2]
  4150c0:	1b12      	subs	r2, r2, r4
  4150c2:	b292      	uxth	r2, r2
  4150c4:	3201      	adds	r2, #1
  4150c6:	b292      	uxth	r2, r2
  4150c8:	88cc      	ldrh	r4, [r1, #6]
  4150ca:	8849      	ldrh	r1, [r1, #2]
  4150cc:	1a61      	subs	r1, r4, r1
  4150ce:	b289      	uxth	r1, r1
  4150d0:	3101      	adds	r1, #1
  4150d2:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  4150d4:	1a52      	subs	r2, r2, r1
  4150d6:	805a      	strh	r2, [r3, #2]
            break;
  4150d8:	e7aa      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4150da:	8884      	ldrh	r4, [r0, #4]
  4150dc:	8802      	ldrh	r2, [r0, #0]
  4150de:	1aa4      	subs	r4, r4, r2
  4150e0:	b2a4      	uxth	r4, r4
  4150e2:	3401      	adds	r4, #1
  4150e4:	b224      	sxth	r4, r4
  4150e6:	888a      	ldrh	r2, [r1, #4]
  4150e8:	880d      	ldrh	r5, [r1, #0]
  4150ea:	1b52      	subs	r2, r2, r5
  4150ec:	b292      	uxth	r2, r2
  4150ee:	3201      	adds	r2, #1
  4150f0:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4150f2:	4625      	mov	r5, r4
  4150f4:	2c00      	cmp	r4, #0
  4150f6:	db15      	blt.n	415124 <_lv_area_align+0x180>
  4150f8:	106d      	asrs	r5, r5, #1
  4150fa:	4614      	mov	r4, r2
  4150fc:	2a00      	cmp	r2, #0
  4150fe:	db13      	blt.n	415128 <_lv_area_align+0x184>
  415100:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415104:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415106:	88c2      	ldrh	r2, [r0, #6]
  415108:	8844      	ldrh	r4, [r0, #2]
  41510a:	1b12      	subs	r2, r2, r4
  41510c:	b292      	uxth	r2, r2
  41510e:	3201      	adds	r2, #1
  415110:	b292      	uxth	r2, r2
  415112:	88cc      	ldrh	r4, [r1, #6]
  415114:	8849      	ldrh	r1, [r1, #2]
  415116:	1a61      	subs	r1, r4, r1
  415118:	b289      	uxth	r1, r1
  41511a:	3101      	adds	r1, #1
  41511c:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  41511e:	1a52      	subs	r2, r2, r1
  415120:	805a      	strh	r2, [r3, #2]
            break;
  415122:	e785      	b.n	415030 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  415124:	1c65      	adds	r5, r4, #1
  415126:	e7e7      	b.n	4150f8 <_lv_area_align+0x154>
  415128:	1c54      	adds	r4, r2, #1
  41512a:	e7e9      	b.n	415100 <_lv_area_align+0x15c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41512c:	8882      	ldrh	r2, [r0, #4]
  41512e:	8804      	ldrh	r4, [r0, #0]
  415130:	1b12      	subs	r2, r2, r4
  415132:	b292      	uxth	r2, r2
  415134:	3201      	adds	r2, #1
  415136:	b292      	uxth	r2, r2
  415138:	888c      	ldrh	r4, [r1, #4]
  41513a:	880d      	ldrh	r5, [r1, #0]
  41513c:	1b64      	subs	r4, r4, r5
  41513e:	b2a4      	uxth	r4, r4
  415140:	3401      	adds	r4, #1
  415142:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  415144:	1b12      	subs	r2, r2, r4
  415146:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415148:	88c2      	ldrh	r2, [r0, #6]
  41514a:	8844      	ldrh	r4, [r0, #2]
  41514c:	1b12      	subs	r2, r2, r4
  41514e:	b292      	uxth	r2, r2
  415150:	3201      	adds	r2, #1
  415152:	b292      	uxth	r2, r2
  415154:	88cc      	ldrh	r4, [r1, #6]
  415156:	8849      	ldrh	r1, [r1, #2]
  415158:	1a61      	subs	r1, r4, r1
  41515a:	b289      	uxth	r1, r1
  41515c:	3101      	adds	r1, #1
  41515e:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415160:	1a52      	subs	r2, r2, r1
  415162:	805a      	strh	r2, [r3, #2]
            break;
  415164:	e764      	b.n	415030 <_lv_area_align+0x8c>
            res->x = 0;
  415166:	2200      	movs	r2, #0
  415168:	801a      	strh	r2, [r3, #0]
  41516a:	88c4      	ldrh	r4, [r0, #6]
  41516c:	8842      	ldrh	r2, [r0, #2]
  41516e:	1aa4      	subs	r4, r4, r2
  415170:	b2a4      	uxth	r4, r4
  415172:	3401      	adds	r4, #1
  415174:	b224      	sxth	r4, r4
  415176:	88ca      	ldrh	r2, [r1, #6]
  415178:	8849      	ldrh	r1, [r1, #2]
  41517a:	1a52      	subs	r2, r2, r1
  41517c:	b292      	uxth	r2, r2
  41517e:	3201      	adds	r2, #1
  415180:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415182:	4621      	mov	r1, r4
  415184:	2c00      	cmp	r4, #0
  415186:	db07      	blt.n	415198 <_lv_area_align+0x1f4>
  415188:	1049      	asrs	r1, r1, #1
  41518a:	4614      	mov	r4, r2
  41518c:	2a00      	cmp	r2, #0
  41518e:	db05      	blt.n	41519c <_lv_area_align+0x1f8>
  415190:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415194:	8059      	strh	r1, [r3, #2]
            break;
  415196:	e74b      	b.n	415030 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415198:	1c61      	adds	r1, r4, #1
  41519a:	e7f5      	b.n	415188 <_lv_area_align+0x1e4>
  41519c:	1c54      	adds	r4, r2, #1
  41519e:	e7f7      	b.n	415190 <_lv_area_align+0x1ec>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4151a0:	8882      	ldrh	r2, [r0, #4]
  4151a2:	8804      	ldrh	r4, [r0, #0]
  4151a4:	1b12      	subs	r2, r2, r4
  4151a6:	b292      	uxth	r2, r2
  4151a8:	3201      	adds	r2, #1
  4151aa:	b292      	uxth	r2, r2
  4151ac:	888c      	ldrh	r4, [r1, #4]
  4151ae:	880d      	ldrh	r5, [r1, #0]
  4151b0:	1b64      	subs	r4, r4, r5
  4151b2:	b2a4      	uxth	r4, r4
  4151b4:	3401      	adds	r4, #1
  4151b6:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4151b8:	1b12      	subs	r2, r2, r4
  4151ba:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4151bc:	88c4      	ldrh	r4, [r0, #6]
  4151be:	8842      	ldrh	r2, [r0, #2]
  4151c0:	1aa4      	subs	r4, r4, r2
  4151c2:	b2a4      	uxth	r4, r4
  4151c4:	3401      	adds	r4, #1
  4151c6:	b224      	sxth	r4, r4
  4151c8:	88ca      	ldrh	r2, [r1, #6]
  4151ca:	8849      	ldrh	r1, [r1, #2]
  4151cc:	1a52      	subs	r2, r2, r1
  4151ce:	b292      	uxth	r2, r2
  4151d0:	3201      	adds	r2, #1
  4151d2:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4151d4:	4621      	mov	r1, r4
  4151d6:	2c00      	cmp	r4, #0
  4151d8:	db07      	blt.n	4151ea <_lv_area_align+0x246>
  4151da:	1049      	asrs	r1, r1, #1
  4151dc:	4614      	mov	r4, r2
  4151de:	2a00      	cmp	r2, #0
  4151e0:	db05      	blt.n	4151ee <_lv_area_align+0x24a>
  4151e2:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4151e6:	8059      	strh	r1, [r3, #2]
            break;
  4151e8:	e722      	b.n	415030 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4151ea:	1c61      	adds	r1, r4, #1
  4151ec:	e7f5      	b.n	4151da <_lv_area_align+0x236>
  4151ee:	1c54      	adds	r4, r2, #1
  4151f0:	e7f7      	b.n	4151e2 <_lv_area_align+0x23e>
            res->x = 0;
  4151f2:	2200      	movs	r2, #0
  4151f4:	801a      	strh	r2, [r3, #0]
  4151f6:	88ca      	ldrh	r2, [r1, #6]
  4151f8:	8849      	ldrh	r1, [r1, #2]
  4151fa:	1a52      	subs	r2, r2, r1
  4151fc:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  4151fe:	43d2      	mvns	r2, r2
  415200:	805a      	strh	r2, [r3, #2]
            break;
  415202:	e715      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415204:	8884      	ldrh	r4, [r0, #4]
  415206:	8802      	ldrh	r2, [r0, #0]
  415208:	1aa4      	subs	r4, r4, r2
  41520a:	b2a4      	uxth	r4, r4
  41520c:	3401      	adds	r4, #1
  41520e:	b224      	sxth	r4, r4
  415210:	888a      	ldrh	r2, [r1, #4]
  415212:	880d      	ldrh	r5, [r1, #0]
  415214:	1b52      	subs	r2, r2, r5
  415216:	b292      	uxth	r2, r2
  415218:	3201      	adds	r2, #1
  41521a:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41521c:	4625      	mov	r5, r4
  41521e:	2c00      	cmp	r4, #0
  415220:	db0d      	blt.n	41523e <_lv_area_align+0x29a>
  415222:	106d      	asrs	r5, r5, #1
  415224:	4614      	mov	r4, r2
  415226:	2a00      	cmp	r2, #0
  415228:	db0b      	blt.n	415242 <_lv_area_align+0x29e>
  41522a:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  41522e:	801d      	strh	r5, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415230:	88ca      	ldrh	r2, [r1, #6]
  415232:	8849      	ldrh	r1, [r1, #2]
  415234:	1a52      	subs	r2, r2, r1
  415236:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  415238:	43d2      	mvns	r2, r2
  41523a:	805a      	strh	r2, [r3, #2]
            break;
  41523c:	e6f8      	b.n	415030 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41523e:	1c65      	adds	r5, r4, #1
  415240:	e7ef      	b.n	415222 <_lv_area_align+0x27e>
  415242:	1c54      	adds	r4, r2, #1
  415244:	e7f1      	b.n	41522a <_lv_area_align+0x286>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415246:	8882      	ldrh	r2, [r0, #4]
  415248:	8804      	ldrh	r4, [r0, #0]
  41524a:	1b12      	subs	r2, r2, r4
  41524c:	b292      	uxth	r2, r2
  41524e:	3201      	adds	r2, #1
  415250:	b292      	uxth	r2, r2
  415252:	888c      	ldrh	r4, [r1, #4]
  415254:	880d      	ldrh	r5, [r1, #0]
  415256:	1b64      	subs	r4, r4, r5
  415258:	b2a4      	uxth	r4, r4
  41525a:	3401      	adds	r4, #1
  41525c:	b2a4      	uxth	r4, r4
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  41525e:	1b12      	subs	r2, r2, r4
  415260:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  415262:	88ca      	ldrh	r2, [r1, #6]
  415264:	8849      	ldrh	r1, [r1, #2]
  415266:	1a52      	subs	r2, r2, r1
  415268:	b292      	uxth	r2, r2
            res->y = -lv_area_get_height(to_align);
  41526a:	43d2      	mvns	r2, r2
  41526c:	805a      	strh	r2, [r3, #2]
            break;
  41526e:	e6df      	b.n	415030 <_lv_area_align+0x8c>
            res->x = 0;
  415270:	2200      	movs	r2, #0
  415272:	801a      	strh	r2, [r3, #0]
  415274:	88c2      	ldrh	r2, [r0, #6]
  415276:	8841      	ldrh	r1, [r0, #2]
  415278:	1a52      	subs	r2, r2, r1
  41527a:	b292      	uxth	r2, r2
  41527c:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  41527e:	805a      	strh	r2, [r3, #2]
            break;
  415280:	e6d6      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415282:	8884      	ldrh	r4, [r0, #4]
  415284:	8802      	ldrh	r2, [r0, #0]
  415286:	1aa4      	subs	r4, r4, r2
  415288:	b2a4      	uxth	r4, r4
  41528a:	3401      	adds	r4, #1
  41528c:	b224      	sxth	r4, r4
  41528e:	888a      	ldrh	r2, [r1, #4]
  415290:	8809      	ldrh	r1, [r1, #0]
  415292:	1a52      	subs	r2, r2, r1
  415294:	b292      	uxth	r2, r2
  415296:	3201      	adds	r2, #1
  415298:	b212      	sxth	r2, r2
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  41529a:	4621      	mov	r1, r4
  41529c:	2c00      	cmp	r4, #0
  41529e:	db0d      	blt.n	4152bc <_lv_area_align+0x318>
  4152a0:	1049      	asrs	r1, r1, #1
  4152a2:	4614      	mov	r4, r2
  4152a4:	2a00      	cmp	r2, #0
  4152a6:	db0b      	blt.n	4152c0 <_lv_area_align+0x31c>
  4152a8:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4152ac:	8019      	strh	r1, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4152ae:	88c2      	ldrh	r2, [r0, #6]
  4152b0:	8841      	ldrh	r1, [r0, #2]
  4152b2:	1a52      	subs	r2, r2, r1
  4152b4:	b292      	uxth	r2, r2
  4152b6:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  4152b8:	805a      	strh	r2, [r3, #2]
            break;
  4152ba:	e6b9      	b.n	415030 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
  4152bc:	1c61      	adds	r1, r4, #1
  4152be:	e7ef      	b.n	4152a0 <_lv_area_align+0x2fc>
  4152c0:	1c54      	adds	r4, r2, #1
  4152c2:	e7f1      	b.n	4152a8 <_lv_area_align+0x304>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4152c4:	8882      	ldrh	r2, [r0, #4]
  4152c6:	8804      	ldrh	r4, [r0, #0]
  4152c8:	1b12      	subs	r2, r2, r4
  4152ca:	b292      	uxth	r2, r2
  4152cc:	3201      	adds	r2, #1
  4152ce:	b292      	uxth	r2, r2
  4152d0:	888c      	ldrh	r4, [r1, #4]
  4152d2:	8809      	ldrh	r1, [r1, #0]
  4152d4:	1a61      	subs	r1, r4, r1
  4152d6:	b289      	uxth	r1, r1
  4152d8:	3101      	adds	r1, #1
  4152da:	b289      	uxth	r1, r1
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
  4152dc:	1a52      	subs	r2, r2, r1
  4152de:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4152e0:	88c2      	ldrh	r2, [r0, #6]
  4152e2:	8841      	ldrh	r1, [r0, #2]
  4152e4:	1a52      	subs	r2, r2, r1
  4152e6:	b292      	uxth	r2, r2
  4152e8:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base);
  4152ea:	805a      	strh	r2, [r3, #2]
            break;
  4152ec:	e6a0      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4152ee:	888a      	ldrh	r2, [r1, #4]
  4152f0:	8809      	ldrh	r1, [r1, #0]
  4152f2:	1a52      	subs	r2, r2, r1
  4152f4:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  4152f6:	43d2      	mvns	r2, r2
  4152f8:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  4152fa:	2200      	movs	r2, #0
  4152fc:	805a      	strh	r2, [r3, #2]
            break;
  4152fe:	e697      	b.n	415030 <_lv_area_align+0x8c>
  415300:	888a      	ldrh	r2, [r1, #4]
  415302:	880c      	ldrh	r4, [r1, #0]
  415304:	1b12      	subs	r2, r2, r4
  415306:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  415308:	43d2      	mvns	r2, r2
  41530a:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41530c:	88c4      	ldrh	r4, [r0, #6]
  41530e:	8842      	ldrh	r2, [r0, #2]
  415310:	1aa4      	subs	r4, r4, r2
  415312:	b2a4      	uxth	r4, r4
  415314:	3401      	adds	r4, #1
  415316:	b224      	sxth	r4, r4
  415318:	88ca      	ldrh	r2, [r1, #6]
  41531a:	8849      	ldrh	r1, [r1, #2]
  41531c:	1a52      	subs	r2, r2, r1
  41531e:	b292      	uxth	r2, r2
  415320:	3201      	adds	r2, #1
  415322:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  415324:	4621      	mov	r1, r4
  415326:	2c00      	cmp	r4, #0
  415328:	db07      	blt.n	41533a <_lv_area_align+0x396>
  41532a:	1049      	asrs	r1, r1, #1
  41532c:	4614      	mov	r4, r2
  41532e:	2a00      	cmp	r2, #0
  415330:	db05      	blt.n	41533e <_lv_area_align+0x39a>
  415332:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415336:	8059      	strh	r1, [r3, #2]
            break;
  415338:	e67a      	b.n	415030 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  41533a:	1c61      	adds	r1, r4, #1
  41533c:	e7f5      	b.n	41532a <_lv_area_align+0x386>
  41533e:	1c54      	adds	r4, r2, #1
  415340:	e7f7      	b.n	415332 <_lv_area_align+0x38e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  415342:	888a      	ldrh	r2, [r1, #4]
  415344:	880c      	ldrh	r4, [r1, #0]
  415346:	1b12      	subs	r2, r2, r4
  415348:	b292      	uxth	r2, r2
            res->x = -lv_area_get_width(to_align);
  41534a:	43d2      	mvns	r2, r2
  41534c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41534e:	88c2      	ldrh	r2, [r0, #6]
  415350:	8844      	ldrh	r4, [r0, #2]
  415352:	1b12      	subs	r2, r2, r4
  415354:	b292      	uxth	r2, r2
  415356:	3201      	adds	r2, #1
  415358:	b292      	uxth	r2, r2
  41535a:	88cc      	ldrh	r4, [r1, #6]
  41535c:	8849      	ldrh	r1, [r1, #2]
  41535e:	1a61      	subs	r1, r4, r1
  415360:	b289      	uxth	r1, r1
  415362:	3101      	adds	r1, #1
  415364:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  415366:	1a52      	subs	r2, r2, r1
  415368:	805a      	strh	r2, [r3, #2]
            break;
  41536a:	e661      	b.n	415030 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41536c:	8882      	ldrh	r2, [r0, #4]
  41536e:	8801      	ldrh	r1, [r0, #0]
  415370:	1a52      	subs	r2, r2, r1
  415372:	b292      	uxth	r2, r2
  415374:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  415376:	801a      	strh	r2, [r3, #0]
            res->y = 0;
  415378:	2200      	movs	r2, #0
  41537a:	805a      	strh	r2, [r3, #2]
            break;
  41537c:	e658      	b.n	415030 <_lv_area_align+0x8c>
  41537e:	8882      	ldrh	r2, [r0, #4]
  415380:	8804      	ldrh	r4, [r0, #0]
  415382:	1b12      	subs	r2, r2, r4
  415384:	b292      	uxth	r2, r2
  415386:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  415388:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41538a:	88c4      	ldrh	r4, [r0, #6]
  41538c:	8842      	ldrh	r2, [r0, #2]
  41538e:	1aa4      	subs	r4, r4, r2
  415390:	b2a4      	uxth	r4, r4
  415392:	3401      	adds	r4, #1
  415394:	b224      	sxth	r4, r4
  415396:	88ca      	ldrh	r2, [r1, #6]
  415398:	8849      	ldrh	r1, [r1, #2]
  41539a:	1a52      	subs	r2, r2, r1
  41539c:	b292      	uxth	r2, r2
  41539e:	3201      	adds	r2, #1
  4153a0:	b212      	sxth	r2, r2
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4153a2:	4621      	mov	r1, r4
  4153a4:	2c00      	cmp	r4, #0
  4153a6:	db07      	blt.n	4153b8 <_lv_area_align+0x414>
  4153a8:	1049      	asrs	r1, r1, #1
  4153aa:	4614      	mov	r4, r2
  4153ac:	2a00      	cmp	r2, #0
  4153ae:	db05      	blt.n	4153bc <_lv_area_align+0x418>
  4153b0:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4153b4:	8059      	strh	r1, [r3, #2]
            break;
  4153b6:	e63b      	b.n	415030 <_lv_area_align+0x8c>
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
  4153b8:	1c61      	adds	r1, r4, #1
  4153ba:	e7f5      	b.n	4153a8 <_lv_area_align+0x404>
  4153bc:	1c54      	adds	r4, r2, #1
  4153be:	e7f7      	b.n	4153b0 <_lv_area_align+0x40c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4153c0:	8882      	ldrh	r2, [r0, #4]
  4153c2:	8804      	ldrh	r4, [r0, #0]
  4153c4:	1b12      	subs	r2, r2, r4
  4153c6:	b292      	uxth	r2, r2
  4153c8:	3201      	adds	r2, #1
            res->x = lv_area_get_width(base);
  4153ca:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4153cc:	88c2      	ldrh	r2, [r0, #6]
  4153ce:	8844      	ldrh	r4, [r0, #2]
  4153d0:	1b12      	subs	r2, r2, r4
  4153d2:	b292      	uxth	r2, r2
  4153d4:	3201      	adds	r2, #1
  4153d6:	b292      	uxth	r2, r2
  4153d8:	88cc      	ldrh	r4, [r1, #6]
  4153da:	8849      	ldrh	r1, [r1, #2]
  4153dc:	1a61      	subs	r1, r4, r1
  4153de:	b289      	uxth	r1, r1
  4153e0:	3101      	adds	r1, #1
  4153e2:	b289      	uxth	r1, r1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
  4153e4:	1a52      	subs	r2, r2, r1
  4153e6:	805a      	strh	r2, [r3, #2]
            break;
  4153e8:	e622      	b.n	415030 <_lv_area_align+0x8c>

004153ea <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
  4153ea:	f010 0f03 	tst.w	r0, #3
  4153ee:	d002      	beq.n	4153f6 <lv_color_fill+0xc>
        *buf = color;
  4153f0:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num--;
  4153f4:	3a01      	subs	r2, #1
    }

    uint32_t c32 = color.full + (color.full << 16);
  4153f6:	b28b      	uxth	r3, r1
  4153f8:	eb03 4303 	add.w	r3, r3, r3, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
  4153fc:	e009      	b.n	415412 <lv_color_fill+0x28>
        *buf32 = c32;
  4153fe:	6003      	str	r3, [r0, #0]
        buf32++;
        *buf32 = c32;
  415400:	6043      	str	r3, [r0, #4]
        buf32++;
        *buf32 = c32;
  415402:	6083      	str	r3, [r0, #8]
        buf32++;
        *buf32 = c32;
  415404:	60c3      	str	r3, [r0, #12]
        buf32++;

        *buf32 = c32;
  415406:	6103      	str	r3, [r0, #16]
        buf32++;
        *buf32 = c32;
  415408:	6143      	str	r3, [r0, #20]
        buf32++;
        *buf32 = c32;
  41540a:	6183      	str	r3, [r0, #24]
        buf32++;
        *buf32 = c32;
  41540c:	61c3      	str	r3, [r0, #28]
        buf32++;
  41540e:	3020      	adds	r0, #32

        px_num -= 16;
  415410:	3a10      	subs	r2, #16
    while(px_num > 16) {
  415412:	2a10      	cmp	r2, #16
  415414:	d8f3      	bhi.n	4153fe <lv_color_fill+0x14>
  415416:	e002      	b.n	41541e <lv_color_fill+0x34>
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
        *buf = color;
  415418:	f820 1b02 	strh.w	r1, [r0], #2
        buf++;
        px_num --;
  41541c:	3a01      	subs	r2, #1
    while(px_num) {
  41541e:	2a00      	cmp	r2, #0
  415420:	d1fa      	bne.n	415418 <lv_color_fill+0x2e>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
  415422:	4770      	bx	lr

00415424 <lv_color_lighten>:

lv_color_t lv_color_lighten(lv_color_t c, lv_opa_t lvl)
{
  415424:	b4f0      	push	{r4, r5, r6, r7}
  415426:	4602      	mov	r2, r0
    return lv_color_mix(LV_COLOR_WHITE, c, lvl);
  415428:	4b23      	ldr	r3, [pc, #140]	; (4154b8 <lv_color_lighten+0x94>)
  41542a:	881c      	ldrh	r4, [r3, #0]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41542c:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  415430:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  415434:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  415438:	fb05 f000 	mul.w	r0, r5, r0
  41543c:	fb01 0303 	mla	r3, r1, r3, r0
  415440:	3380      	adds	r3, #128	; 0x80
  415442:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  415446:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  41544a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41544e:	f04f 0000 	mov.w	r0, #0
  415452:	f363 00c7 	bfi	r0, r3, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  415456:	f004 0607 	and.w	r6, r4, #7
  41545a:	f3c4 3342 	ubfx	r3, r4, #13, #3
  41545e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  415462:	f002 0707 	and.w	r7, r2, #7
  415466:	f3c2 3642 	ubfx	r6, r2, #13, #3
  41546a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  41546e:	fb06 f605 	mul.w	r6, r6, r5
  415472:	fb03 6301 	mla	r3, r3, r1, r6
  415476:	3380      	adds	r3, #128	; 0x80
  415478:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  41547c:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  415480:	f3c3 6682 	ubfx	r6, r3, #26, #3
  415484:	f366 0002 	bfi	r0, r6, #0, #3
  415488:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  41548c:	f363 304f 	bfi	r0, r3, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  415490:	f3c4 2404 	ubfx	r4, r4, #8, #5
  415494:	f3c2 2204 	ubfx	r2, r2, #8, #5
  415498:	fb02 f505 	mul.w	r5, r2, r5
  41549c:	fb04 5101 	mla	r1, r4, r1, r5
  4154a0:	3180      	adds	r1, #128	; 0x80
  4154a2:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  4154a6:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  4154aa:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  4154ae:	f361 200c 	bfi	r0, r1, #8, #5
}
  4154b2:	bcf0      	pop	{r4, r5, r6, r7}
  4154b4:	4770      	bx	lr
  4154b6:	bf00      	nop
  4154b8:	00426bac 	.word	0x00426bac

004154bc <lv_color_darken>:

lv_color_t lv_color_darken(lv_color_t c, lv_opa_t lvl)
{
  4154bc:	b410      	push	{r4}
  4154be:	4603      	mov	r3, r0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4154c0:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  4154c4:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  4154c8:	fb01 f202 	mul.w	r2, r1, r2
  4154cc:	3280      	adds	r2, #128	; 0x80
  4154ce:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  4154d2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  4154d6:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4154da:	f04f 0000 	mov.w	r0, #0
  4154de:	f362 00c7 	bfi	r0, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4154e2:	f003 0407 	and.w	r4, r3, #7
  4154e6:	f3c3 3242 	ubfx	r2, r3, #13, #3
  4154ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  4154ee:	fb02 f201 	mul.w	r2, r2, r1
  4154f2:	3280      	adds	r2, #128	; 0x80
  4154f4:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  4154f8:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  4154fc:	f3c2 6482 	ubfx	r4, r2, #26, #3
  415500:	f364 0002 	bfi	r0, r4, #0, #3
  415504:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415508:	f362 304f 	bfi	r0, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41550c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  415510:	fb03 f301 	mul.w	r3, r3, r1
  415514:	3380      	adds	r3, #128	; 0x80
  415516:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  41551a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41551e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  415522:	f363 200c 	bfi	r0, r3, #8, #5
    return lv_color_mix(LV_COLOR_BLACK, c, lvl);
}
  415526:	f85d 4b04 	ldr.w	r4, [sp], #4
  41552a:	4770      	bx	lr

0041552c <lv_debug_check_null>:
 *   GLOBAL FUNCTIONS
 **********************/

bool lv_debug_check_null(const void * p)
{
    if(p) return true;
  41552c:	b108      	cbz	r0, 415532 <lv_debug_check_null+0x6>
  41552e:	2001      	movs	r0, #1
  415530:	4770      	bx	lr

    return false;
  415532:	2000      	movs	r0, #0
}
  415534:	4770      	bx	lr
	...

00415538 <lv_debug_log_error>:
    LV_LOG_WARN("lv_debug_check_str: string is longer than LV_DEBUG_STR_MAX_LENGTH");
    return false;
}

void lv_debug_log_error(const char * msg, uint64_t value)
{
  415538:	b570      	push	{r4, r5, r6, lr}
  41553a:	b0c0      	sub	sp, #256	; 0x100
  41553c:	4606      	mov	r6, r0
  41553e:	4614      	mov	r4, r2
    static const char hex[] = "0123456789ABCDEF";

    size_t msg_len = strlen(msg);
  415540:	4b15      	ldr	r3, [pc, #84]	; (415598 <lv_debug_log_error+0x60>)
  415542:	4798      	blx	r3
    uint32_t value_len = sizeof(unsigned long int);

    if(msg_len < 230) {
  415544:	28e5      	cmp	r0, #229	; 0xe5
  415546:	d901      	bls.n	41554c <lv_debug_log_error+0x14>
        LV_LOG_ERROR(buf);
    }
    else {
        LV_LOG_ERROR(msg);
    }
}
  415548:	b040      	add	sp, #256	; 0x100
  41554a:	bd70      	pop	{r4, r5, r6, pc}
  41554c:	4605      	mov	r5, r0
        _lv_memcpy(bufp, msg, msg_len);
  41554e:	4602      	mov	r2, r0
  415550:	4631      	mov	r1, r6
  415552:	4668      	mov	r0, sp
  415554:	4b11      	ldr	r3, [pc, #68]	; (41559c <lv_debug_log_error+0x64>)
  415556:	4798      	blx	r3
        bufp += msg_len;
  415558:	eb0d 0105 	add.w	r1, sp, r5
        *bufp = ' ';
  41555c:	2320      	movs	r3, #32
  41555e:	f80d 3005 	strb.w	r3, [sp, r5]
        *bufp = '(';
  415562:	2328      	movs	r3, #40	; 0x28
  415564:	704b      	strb	r3, [r1, #1]
        *bufp = '0';
  415566:	2330      	movs	r3, #48	; 0x30
  415568:	708b      	strb	r3, [r1, #2]
        *bufp = 'x';
  41556a:	2378      	movs	r3, #120	; 0x78
  41556c:	70cb      	strb	r3, [r1, #3]
        bufp ++;
  41556e:	3104      	adds	r1, #4
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415570:	2307      	movs	r3, #7
  415572:	e00a      	b.n	41558a <lv_debug_log_error+0x52>
            uint8_t x = (unsigned long int)((unsigned long int)value >> (i * 4)) & 0xF;
  415574:	009a      	lsls	r2, r3, #2
  415576:	fa24 f202 	lsr.w	r2, r4, r2
  41557a:	f002 020f 	and.w	r2, r2, #15
            *bufp = hex[x];
  41557e:	4808      	ldr	r0, [pc, #32]	; (4155a0 <lv_debug_log_error+0x68>)
  415580:	5c82      	ldrb	r2, [r0, r2]
  415582:	f801 2b01 	strb.w	r2, [r1], #1
        for(i = value_len * 2 - 1; i >= 0; i--) {
  415586:	3b01      	subs	r3, #1
  415588:	b25b      	sxtb	r3, r3
  41558a:	2b00      	cmp	r3, #0
  41558c:	daf2      	bge.n	415574 <lv_debug_log_error+0x3c>
        *bufp = ')';
  41558e:	2329      	movs	r3, #41	; 0x29
  415590:	700b      	strb	r3, [r1, #0]
        *bufp = '\0';
  415592:	2300      	movs	r3, #0
  415594:	704b      	strb	r3, [r1, #1]
}
  415596:	e7d7      	b.n	415548 <lv_debug_log_error+0x10>
  415598:	00420101 	.word	0x00420101
  41559c:	00415e45 	.word	0x00415e45
  4155a0:	00426bb0 	.word	0x00426bb0

004155a4 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  4155a4:	3001      	adds	r0, #1

    while(*path != '\0') {
  4155a6:	e000      	b.n	4155aa <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  4155a8:	3001      	adds	r0, #1
    while(*path != '\0') {
  4155aa:	7803      	ldrb	r3, [r0, #0]
  4155ac:	b12b      	cbz	r3, 4155ba <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  4155ae:	2b5c      	cmp	r3, #92	; 0x5c
  4155b0:	bf18      	it	ne
  4155b2:	2b3a      	cmpne	r3, #58	; 0x3a
  4155b4:	d0f8      	beq.n	4155a8 <lv_fs_get_real_path+0x4>
  4155b6:	2b2f      	cmp	r3, #47	; 0x2f
  4155b8:	d0f6      	beq.n	4155a8 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  4155ba:	4770      	bx	lr

004155bc <_lv_fs_init>:
{
  4155bc:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  4155be:	2144      	movs	r1, #68	; 0x44
  4155c0:	4801      	ldr	r0, [pc, #4]	; (4155c8 <_lv_fs_init+0xc>)
  4155c2:	4b02      	ldr	r3, [pc, #8]	; (4155cc <_lv_fs_init+0x10>)
  4155c4:	4798      	blx	r3
  4155c6:	bd08      	pop	{r3, pc}
  4155c8:	2043a220 	.word	0x2043a220
  4155cc:	00415793 	.word	0x00415793

004155d0 <lv_fs_close>:
{
  4155d0:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  4155d2:	6843      	ldr	r3, [r0, #4]
  4155d4:	b173      	cbz	r3, 4155f4 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  4155d6:	691a      	ldr	r2, [r3, #16]
  4155d8:	b172      	cbz	r2, 4155f8 <lv_fs_close+0x28>
  4155da:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  4155dc:	6801      	ldr	r1, [r0, #0]
  4155de:	4618      	mov	r0, r3
  4155e0:	4790      	blx	r2
  4155e2:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  4155e4:	6820      	ldr	r0, [r4, #0]
  4155e6:	4b05      	ldr	r3, [pc, #20]	; (4155fc <lv_fs_close+0x2c>)
  4155e8:	4798      	blx	r3
    file_p->file_d = NULL;
  4155ea:	2300      	movs	r3, #0
  4155ec:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  4155ee:	6063      	str	r3, [r4, #4]
}
  4155f0:	4628      	mov	r0, r5
  4155f2:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  4155f4:	250b      	movs	r5, #11
  4155f6:	e7fb      	b.n	4155f0 <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  4155f8:	2509      	movs	r5, #9
  4155fa:	e7f9      	b.n	4155f0 <lv_fs_close+0x20>
  4155fc:	00415cf9 	.word	0x00415cf9

00415600 <lv_fs_read>:
{
  415600:	b5f0      	push	{r4, r5, r6, r7, lr}
  415602:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  415604:	461e      	mov	r6, r3
  415606:	b10b      	cbz	r3, 41560c <lv_fs_read+0xc>
  415608:	2300      	movs	r3, #0
  41560a:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  41560c:	6845      	ldr	r5, [r0, #4]
  41560e:	b18d      	cbz	r5, 415634 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415610:	69af      	ldr	r7, [r5, #24]
  415612:	b18f      	cbz	r7, 415638 <lv_fs_read+0x38>
  415614:	4613      	mov	r3, r2
  415616:	460a      	mov	r2, r1
  415618:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  41561a:	a804      	add	r0, sp, #16
  41561c:	2100      	movs	r1, #0
  41561e:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  415622:	6821      	ldr	r1, [r4, #0]
  415624:	9000      	str	r0, [sp, #0]
  415626:	4628      	mov	r0, r5
  415628:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  41562a:	b10e      	cbz	r6, 415630 <lv_fs_read+0x30>
  41562c:	9b03      	ldr	r3, [sp, #12]
  41562e:	6033      	str	r3, [r6, #0]
}
  415630:	b005      	add	sp, #20
  415632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415634:	200b      	movs	r0, #11
  415636:	e7fb      	b.n	415630 <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  415638:	2009      	movs	r0, #9
  41563a:	e7f9      	b.n	415630 <lv_fs_read+0x30>

0041563c <lv_fs_seek>:
{
  41563c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  41563e:	6844      	ldr	r4, [r0, #4]
  415640:	b134      	cbz	r4, 415650 <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  415642:	6a25      	ldr	r5, [r4, #32]
  415644:	b135      	cbz	r5, 415654 <lv_fs_seek+0x18>
  415646:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  415648:	6801      	ldr	r1, [r0, #0]
  41564a:	4620      	mov	r0, r4
  41564c:	47a8      	blx	r5
    return res;
  41564e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415650:	200b      	movs	r0, #11
  415652:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  415654:	2009      	movs	r0, #9
}
  415656:	bd38      	pop	{r3, r4, r5, pc}

00415658 <lv_fs_get_drv>:
{
  415658:	b510      	push	{r4, lr}
  41565a:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  41565c:	4806      	ldr	r0, [pc, #24]	; (415678 <lv_fs_get_drv+0x20>)
  41565e:	4b07      	ldr	r3, [pc, #28]	; (41567c <lv_fs_get_drv+0x24>)
  415660:	4798      	blx	r3
  415662:	b138      	cbz	r0, 415674 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  415664:	7803      	ldrb	r3, [r0, #0]
  415666:	42a3      	cmp	r3, r4
  415668:	d004      	beq.n	415674 <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  41566a:	4601      	mov	r1, r0
  41566c:	4802      	ldr	r0, [pc, #8]	; (415678 <lv_fs_get_drv+0x20>)
  41566e:	4b04      	ldr	r3, [pc, #16]	; (415680 <lv_fs_get_drv+0x28>)
  415670:	4798      	blx	r3
  415672:	e7f6      	b.n	415662 <lv_fs_get_drv+0xa>
}
  415674:	bd10      	pop	{r4, pc}
  415676:	bf00      	nop
  415678:	2043a220 	.word	0x2043a220
  41567c:	0041583d 	.word	0x0041583d
  415680:	00415851 	.word	0x00415851

00415684 <lv_fs_open>:
{
  415684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  415688:	2400      	movs	r4, #0
  41568a:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  41568c:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  41568e:	2900      	cmp	r1, #0
  415690:	d044      	beq.n	41571c <lv_fs_open+0x98>
  415692:	460d      	mov	r5, r1
  415694:	4690      	mov	r8, r2
  415696:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  415698:	7808      	ldrb	r0, [r1, #0]
  41569a:	4b23      	ldr	r3, [pc, #140]	; (415728 <lv_fs_open+0xa4>)
  41569c:	4798      	blx	r3
  41569e:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  4156a0:	2800      	cmp	r0, #0
  4156a2:	d03f      	beq.n	415724 <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  4156a4:	6883      	ldr	r3, [r0, #8]
  4156a6:	b10b      	cbz	r3, 4156ac <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  4156a8:	4798      	blx	r3
  4156aa:	b1a0      	cbz	r0, 4156d6 <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  4156ac:	6867      	ldr	r7, [r4, #4]
  4156ae:	68fe      	ldr	r6, [r7, #12]
  4156b0:	b1ae      	cbz	r6, 4156de <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  4156b2:	4628      	mov	r0, r5
  4156b4:	4b1d      	ldr	r3, [pc, #116]	; (41572c <lv_fs_open+0xa8>)
  4156b6:	4798      	blx	r3
  4156b8:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  4156ba:	8878      	ldrh	r0, [r7, #2]
  4156bc:	b198      	cbz	r0, 4156e6 <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  4156be:	4b1c      	ldr	r3, [pc, #112]	; (415730 <lv_fs_open+0xac>)
  4156c0:	4798      	blx	r3
  4156c2:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  4156c4:	4b1b      	ldr	r3, [pc, #108]	; (415734 <lv_fs_open+0xb0>)
  4156c6:	4798      	blx	r3
  4156c8:	b1a0      	cbz	r0, 4156f4 <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  4156ca:	6821      	ldr	r1, [r4, #0]
  4156cc:	b9c1      	cbnz	r1, 415700 <lv_fs_open+0x7c>
        file_p->drv = NULL;
  4156ce:	2300      	movs	r3, #0
  4156d0:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  4156d2:	250a      	movs	r5, #10
  4156d4:	e023      	b.n	41571e <lv_fs_open+0x9a>
            file_p->drv = NULL;
  4156d6:	2300      	movs	r3, #0
  4156d8:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  4156da:	2501      	movs	r5, #1
  4156dc:	e01f      	b.n	41571e <lv_fs_open+0x9a>
        file_p->drv = NULL;
  4156de:	2300      	movs	r3, #0
  4156e0:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  4156e2:	2509      	movs	r5, #9
  4156e4:	e01b      	b.n	41571e <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  4156e6:	4643      	mov	r3, r8
  4156e8:	462a      	mov	r2, r5
  4156ea:	4621      	mov	r1, r4
  4156ec:	4638      	mov	r0, r7
  4156ee:	47b0      	blx	r6
  4156f0:	4605      	mov	r5, r0
  4156f2:	e014      	b.n	41571e <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  4156f4:	6822      	ldr	r2, [r4, #0]
  4156f6:	2300      	movs	r3, #0
  4156f8:	480f      	ldr	r0, [pc, #60]	; (415738 <lv_fs_open+0xb4>)
  4156fa:	4910      	ldr	r1, [pc, #64]	; (41573c <lv_fs_open+0xb8>)
  4156fc:	4788      	blx	r1
  4156fe:	e7fe      	b.n	4156fe <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  415700:	6860      	ldr	r0, [r4, #4]
  415702:	68c7      	ldr	r7, [r0, #12]
  415704:	4643      	mov	r3, r8
  415706:	462a      	mov	r2, r5
  415708:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  41570a:	4605      	mov	r5, r0
  41570c:	b138      	cbz	r0, 41571e <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  41570e:	6820      	ldr	r0, [r4, #0]
  415710:	4b0b      	ldr	r3, [pc, #44]	; (415740 <lv_fs_open+0xbc>)
  415712:	4798      	blx	r3
        file_p->file_d = NULL;
  415714:	2300      	movs	r3, #0
  415716:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  415718:	6063      	str	r3, [r4, #4]
  41571a:	e000      	b.n	41571e <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  41571c:	250b      	movs	r5, #11
}
  41571e:	4628      	mov	r0, r5
  415720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  415724:	2503      	movs	r5, #3
  415726:	e7fa      	b.n	41571e <lv_fs_open+0x9a>
  415728:	00415659 	.word	0x00415659
  41572c:	004155a5 	.word	0x004155a5
  415730:	00415c35 	.word	0x00415c35
  415734:	0041552d 	.word	0x0041552d
  415738:	004235f0 	.word	0x004235f0
  41573c:	00415539 	.word	0x00415539
  415740:	00415cf9 	.word	0x00415cf9

00415744 <lv_fs_get_ext>:
{
  415744:	b510      	push	{r4, lr}
  415746:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  415748:	4b09      	ldr	r3, [pc, #36]	; (415770 <lv_fs_get_ext+0x2c>)
  41574a:	4798      	blx	r3
  41574c:	b158      	cbz	r0, 415766 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  41574e:	5c23      	ldrb	r3, [r4, r0]
  415750:	2b2e      	cmp	r3, #46	; 0x2e
  415752:	d005      	beq.n	415760 <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  415754:	2b5c      	cmp	r3, #92	; 0x5c
  415756:	bf18      	it	ne
  415758:	2b2f      	cmpne	r3, #47	; 0x2f
  41575a:	d006      	beq.n	41576a <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  41575c:	3801      	subs	r0, #1
  41575e:	e7f5      	b.n	41574c <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  415760:	3001      	adds	r0, #1
  415762:	4420      	add	r0, r4
  415764:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  415766:	4803      	ldr	r0, [pc, #12]	; (415774 <lv_fs_get_ext+0x30>)
  415768:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  41576a:	4802      	ldr	r0, [pc, #8]	; (415774 <lv_fs_get_ext+0x30>)
}
  41576c:	bd10      	pop	{r4, pc}
  41576e:	bf00      	nop
  415770:	00420101 	.word	0x00420101
  415774:	00428468 	.word	0x00428468

00415778 <node_set_prev>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
  415778:	460b      	mov	r3, r1
  41577a:	b109      	cbz	r1, 415780 <node_set_prev+0x8>

    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_PREV_P_OFFSET(ll_p);
  41577c:	6801      	ldr	r1, [r0, #0]

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
  41577e:	505a      	str	r2, [r3, r1]
  415780:	4770      	bx	lr

00415782 <node_set_next>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
  415782:	b129      	cbz	r1, 415790 <node_set_next+0xe>
{
  415784:	b410      	push	{r4}
    uint8_t * act8 = (uint8_t *) act;

    act8 += LL_NEXT_P_OFFSET(ll_p);
  415786:	6803      	ldr	r3, [r0, #0]
  415788:	3304      	adds	r3, #4
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
  41578a:	50ca      	str	r2, [r1, r3]
}
  41578c:	f85d 4b04 	ldr.w	r4, [sp], #4
  415790:	4770      	bx	lr

00415792 <_lv_ll_init>:
    ll_p->head = NULL;
  415792:	2300      	movs	r3, #0
  415794:	6043      	str	r3, [r0, #4]
    ll_p->tail = NULL;
  415796:	6083      	str	r3, [r0, #8]
    node_size = (node_size + 3) & (~0x3);
  415798:	3103      	adds	r1, #3
  41579a:	f021 0103 	bic.w	r1, r1, #3
    ll_p->n_size = node_size;
  41579e:	6001      	str	r1, [r0, #0]
  4157a0:	4770      	bx	lr
	...

004157a4 <_lv_ll_ins_head>:
{
  4157a4:	b538      	push	{r3, r4, r5, lr}
  4157a6:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4157a8:	6800      	ldr	r0, [r0, #0]
  4157aa:	3008      	adds	r0, #8
  4157ac:	4b0d      	ldr	r3, [pc, #52]	; (4157e4 <_lv_ll_ins_head+0x40>)
  4157ae:	4798      	blx	r3
    if(n_new != NULL) {
  4157b0:	4605      	mov	r5, r0
  4157b2:	b190      	cbz	r0, 4157da <_lv_ll_ins_head+0x36>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
  4157b4:	2200      	movs	r2, #0
  4157b6:	4601      	mov	r1, r0
  4157b8:	4620      	mov	r0, r4
  4157ba:	4b0b      	ldr	r3, [pc, #44]	; (4157e8 <_lv_ll_ins_head+0x44>)
  4157bc:	4798      	blx	r3
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
  4157be:	6862      	ldr	r2, [r4, #4]
  4157c0:	4629      	mov	r1, r5
  4157c2:	4620      	mov	r0, r4
  4157c4:	4b09      	ldr	r3, [pc, #36]	; (4157ec <_lv_ll_ins_head+0x48>)
  4157c6:	4798      	blx	r3
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
  4157c8:	6861      	ldr	r1, [r4, #4]
  4157ca:	b119      	cbz	r1, 4157d4 <_lv_ll_ins_head+0x30>
            node_set_prev(ll_p, ll_p->head, n_new);
  4157cc:	462a      	mov	r2, r5
  4157ce:	4620      	mov	r0, r4
  4157d0:	4b05      	ldr	r3, [pc, #20]	; (4157e8 <_lv_ll_ins_head+0x44>)
  4157d2:	4798      	blx	r3
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
  4157d4:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
  4157d6:	68a3      	ldr	r3, [r4, #8]
  4157d8:	b10b      	cbz	r3, 4157de <_lv_ll_ins_head+0x3a>
}
  4157da:	4628      	mov	r0, r5
  4157dc:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->tail = n_new;
  4157de:	60a5      	str	r5, [r4, #8]
  4157e0:	e7fb      	b.n	4157da <_lv_ll_ins_head+0x36>
  4157e2:	bf00      	nop
  4157e4:	00415c35 	.word	0x00415c35
  4157e8:	00415779 	.word	0x00415779
  4157ec:	00415783 	.word	0x00415783

004157f0 <_lv_ll_ins_tail>:
{
  4157f0:	b538      	push	{r3, r4, r5, lr}
  4157f2:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4157f4:	6800      	ldr	r0, [r0, #0]
  4157f6:	3008      	adds	r0, #8
  4157f8:	4b0d      	ldr	r3, [pc, #52]	; (415830 <_lv_ll_ins_tail+0x40>)
  4157fa:	4798      	blx	r3
    if(n_new != NULL) {
  4157fc:	4605      	mov	r5, r0
  4157fe:	b190      	cbz	r0, 415826 <_lv_ll_ins_tail+0x36>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
  415800:	2200      	movs	r2, #0
  415802:	4601      	mov	r1, r0
  415804:	4620      	mov	r0, r4
  415806:	4b0b      	ldr	r3, [pc, #44]	; (415834 <_lv_ll_ins_tail+0x44>)
  415808:	4798      	blx	r3
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
  41580a:	68a2      	ldr	r2, [r4, #8]
  41580c:	4629      	mov	r1, r5
  41580e:	4620      	mov	r0, r4
  415810:	4b09      	ldr	r3, [pc, #36]	; (415838 <_lv_ll_ins_tail+0x48>)
  415812:	4798      	blx	r3
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
  415814:	68a1      	ldr	r1, [r4, #8]
  415816:	b119      	cbz	r1, 415820 <_lv_ll_ins_tail+0x30>
            node_set_next(ll_p, ll_p->tail, n_new);
  415818:	462a      	mov	r2, r5
  41581a:	4620      	mov	r0, r4
  41581c:	4b05      	ldr	r3, [pc, #20]	; (415834 <_lv_ll_ins_tail+0x44>)
  41581e:	4798      	blx	r3
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
  415820:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
  415822:	6863      	ldr	r3, [r4, #4]
  415824:	b10b      	cbz	r3, 41582a <_lv_ll_ins_tail+0x3a>
}
  415826:	4628      	mov	r0, r5
  415828:	bd38      	pop	{r3, r4, r5, pc}
            ll_p->head = n_new;
  41582a:	6065      	str	r5, [r4, #4]
  41582c:	e7fb      	b.n	415826 <_lv_ll_ins_tail+0x36>
  41582e:	bf00      	nop
  415830:	00415c35 	.word	0x00415c35
  415834:	00415783 	.word	0x00415783
  415838:	00415779 	.word	0x00415779

0041583c <_lv_ll_get_head>:
    if(ll_p != NULL) {
  41583c:	b108      	cbz	r0, 415842 <_lv_ll_get_head+0x6>
        head = ll_p->head;
  41583e:	6840      	ldr	r0, [r0, #4]
  415840:	4770      	bx	lr
    void * head = NULL;
  415842:	2000      	movs	r0, #0
}
  415844:	4770      	bx	lr

00415846 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
  415846:	b108      	cbz	r0, 41584c <_lv_ll_get_tail+0x6>
        tail = ll_p->tail;
  415848:	6880      	ldr	r0, [r0, #8]
  41584a:	4770      	bx	lr
    void * tail = NULL;
  41584c:	2000      	movs	r0, #0
}
  41584e:	4770      	bx	lr

00415850 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
  415850:	b118      	cbz	r0, 41585a <_lv_ll_get_next+0xa>
    n_act_d += LL_NEXT_P_OFFSET(ll_p);
  415852:	6803      	ldr	r3, [r0, #0]
  415854:	3304      	adds	r3, #4
    return *((lv_ll_node_t **)n_act_d);
  415856:	58c8      	ldr	r0, [r1, r3]
  415858:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  41585a:	2000      	movs	r0, #0
}
  41585c:	4770      	bx	lr

0041585e <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
  41585e:	b110      	cbz	r0, 415866 <_lv_ll_get_prev+0x8>
    n_act_d += LL_PREV_P_OFFSET(ll_p);
  415860:	6803      	ldr	r3, [r0, #0]
    return *((lv_ll_node_t **)n_act_d);
  415862:	58c8      	ldr	r0, [r1, r3]
  415864:	4770      	bx	lr
    if(ll_p == NULL) return NULL;
  415866:	2000      	movs	r0, #0
}
  415868:	4770      	bx	lr
	...

0041586c <_lv_ll_ins_prev>:
    if(NULL == ll_p || NULL == n_act) return NULL;
  41586c:	2900      	cmp	r1, #0
  41586e:	bf18      	it	ne
  415870:	2800      	cmpne	r0, #0
  415872:	d02f      	beq.n	4158d4 <_lv_ll_ins_prev+0x68>
{
  415874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415878:	4604      	mov	r4, r0
  41587a:	4688      	mov	r8, r1
    if(_lv_ll_get_head(ll_p) == n_act) {
  41587c:	4b18      	ldr	r3, [pc, #96]	; (4158e0 <_lv_ll_ins_prev+0x74>)
  41587e:	4798      	blx	r3
  415880:	4580      	cmp	r8, r0
  415882:	d01f      	beq.n	4158c4 <_lv_ll_ins_prev+0x58>
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  415884:	6820      	ldr	r0, [r4, #0]
  415886:	3008      	adds	r0, #8
  415888:	4b16      	ldr	r3, [pc, #88]	; (4158e4 <_lv_ll_ins_prev+0x78>)
  41588a:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  41588c:	4605      	mov	r5, r0
  41588e:	b318      	cbz	r0, 4158d8 <_lv_ll_ins_prev+0x6c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
  415890:	4641      	mov	r1, r8
  415892:	4620      	mov	r0, r4
  415894:	4b14      	ldr	r3, [pc, #80]	; (4158e8 <_lv_ll_ins_prev+0x7c>)
  415896:	4798      	blx	r3
  415898:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
  41589a:	462a      	mov	r2, r5
  41589c:	4601      	mov	r1, r0
  41589e:	4620      	mov	r0, r4
  4158a0:	4e12      	ldr	r6, [pc, #72]	; (4158ec <_lv_ll_ins_prev+0x80>)
  4158a2:	47b0      	blx	r6
        node_set_prev(ll_p, n_new, n_prev);
  4158a4:	463a      	mov	r2, r7
  4158a6:	4629      	mov	r1, r5
  4158a8:	4620      	mov	r0, r4
  4158aa:	4f11      	ldr	r7, [pc, #68]	; (4158f0 <_lv_ll_ins_prev+0x84>)
  4158ac:	47b8      	blx	r7
        node_set_prev(ll_p, n_act, n_new);
  4158ae:	462a      	mov	r2, r5
  4158b0:	4641      	mov	r1, r8
  4158b2:	4620      	mov	r0, r4
  4158b4:	47b8      	blx	r7
        node_set_next(ll_p, n_new, n_act);
  4158b6:	4642      	mov	r2, r8
  4158b8:	4629      	mov	r1, r5
  4158ba:	4620      	mov	r0, r4
  4158bc:	47b0      	blx	r6
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
  4158be:	4628      	mov	r0, r5
  4158c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n_new = _lv_ll_ins_head(ll_p);
  4158c4:	4620      	mov	r0, r4
  4158c6:	4b0b      	ldr	r3, [pc, #44]	; (4158f4 <_lv_ll_ins_prev+0x88>)
  4158c8:	4798      	blx	r3
        if(n_new == NULL) return NULL;
  4158ca:	b108      	cbz	r0, 4158d0 <_lv_ll_ins_prev+0x64>
  4158cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4158d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(NULL == ll_p || NULL == n_act) return NULL;
  4158d4:	2000      	movs	r0, #0
  4158d6:	4770      	bx	lr
        if(n_new == NULL) return NULL;
  4158d8:	2000      	movs	r0, #0
}
  4158da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4158de:	bf00      	nop
  4158e0:	0041583d 	.word	0x0041583d
  4158e4:	00415c35 	.word	0x00415c35
  4158e8:	0041585f 	.word	0x0041585f
  4158ec:	00415783 	.word	0x00415783
  4158f0:	00415779 	.word	0x00415779
  4158f4:	004157a5 	.word	0x004157a5

004158f8 <_lv_ll_remove>:
{
  4158f8:	b570      	push	{r4, r5, r6, lr}
  4158fa:	4604      	mov	r4, r0
  4158fc:	460d      	mov	r5, r1
    if(_lv_ll_get_head(ll_p) == node_p) {
  4158fe:	4b1e      	ldr	r3, [pc, #120]	; (415978 <_lv_ll_remove+0x80>)
  415900:	4798      	blx	r3
  415902:	4285      	cmp	r5, r0
  415904:	d019      	beq.n	41593a <_lv_ll_remove+0x42>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
  415906:	4620      	mov	r0, r4
  415908:	4b1c      	ldr	r3, [pc, #112]	; (41597c <_lv_ll_remove+0x84>)
  41590a:	4798      	blx	r3
  41590c:	4285      	cmp	r5, r0
  41590e:	d023      	beq.n	415958 <_lv_ll_remove+0x60>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
  415910:	4629      	mov	r1, r5
  415912:	4620      	mov	r0, r4
  415914:	4b1a      	ldr	r3, [pc, #104]	; (415980 <_lv_ll_remove+0x88>)
  415916:	4798      	blx	r3
  415918:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
  41591a:	4629      	mov	r1, r5
  41591c:	4620      	mov	r0, r4
  41591e:	4b19      	ldr	r3, [pc, #100]	; (415984 <_lv_ll_remove+0x8c>)
  415920:	4798      	blx	r3
  415922:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
  415924:	4602      	mov	r2, r0
  415926:	4631      	mov	r1, r6
  415928:	4620      	mov	r0, r4
  41592a:	4b17      	ldr	r3, [pc, #92]	; (415988 <_lv_ll_remove+0x90>)
  41592c:	4798      	blx	r3
        node_set_prev(ll_p, n_next, n_prev);
  41592e:	4632      	mov	r2, r6
  415930:	4629      	mov	r1, r5
  415932:	4620      	mov	r0, r4
  415934:	4b15      	ldr	r3, [pc, #84]	; (41598c <_lv_ll_remove+0x94>)
  415936:	4798      	blx	r3
  415938:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
  41593a:	4629      	mov	r1, r5
  41593c:	4620      	mov	r0, r4
  41593e:	4b11      	ldr	r3, [pc, #68]	; (415984 <_lv_ll_remove+0x8c>)
  415940:	4798      	blx	r3
  415942:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
  415944:	b128      	cbz	r0, 415952 <_lv_ll_remove+0x5a>
            node_set_prev(ll_p, ll_p->head, NULL);
  415946:	2200      	movs	r2, #0
  415948:	4601      	mov	r1, r0
  41594a:	4620      	mov	r0, r4
  41594c:	4b0f      	ldr	r3, [pc, #60]	; (41598c <_lv_ll_remove+0x94>)
  41594e:	4798      	blx	r3
  415950:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->tail = NULL;
  415952:	2300      	movs	r3, #0
  415954:	60a3      	str	r3, [r4, #8]
  415956:	bd70      	pop	{r4, r5, r6, pc}
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
  415958:	4629      	mov	r1, r5
  41595a:	4620      	mov	r0, r4
  41595c:	4b08      	ldr	r3, [pc, #32]	; (415980 <_lv_ll_remove+0x88>)
  41595e:	4798      	blx	r3
  415960:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
  415962:	b128      	cbz	r0, 415970 <_lv_ll_remove+0x78>
            node_set_next(ll_p, ll_p->tail, NULL);
  415964:	2200      	movs	r2, #0
  415966:	4601      	mov	r1, r0
  415968:	4620      	mov	r0, r4
  41596a:	4b07      	ldr	r3, [pc, #28]	; (415988 <_lv_ll_remove+0x90>)
  41596c:	4798      	blx	r3
  41596e:	bd70      	pop	{r4, r5, r6, pc}
            ll_p->head = NULL;
  415970:	2300      	movs	r3, #0
  415972:	6063      	str	r3, [r4, #4]
  415974:	bd70      	pop	{r4, r5, r6, pc}
  415976:	bf00      	nop
  415978:	0041583d 	.word	0x0041583d
  41597c:	00415847 	.word	0x00415847
  415980:	0041585f 	.word	0x0041585f
  415984:	00415851 	.word	0x00415851
  415988:	00415783 	.word	0x00415783
  41598c:	00415779 	.word	0x00415779

00415990 <_lv_ll_chg_list>:
{
  415990:	b570      	push	{r4, r5, r6, lr}
  415992:	460c      	mov	r4, r1
  415994:	4615      	mov	r5, r2
  415996:	461e      	mov	r6, r3
    _lv_ll_remove(ll_ori_p, node);
  415998:	4611      	mov	r1, r2
  41599a:	4b17      	ldr	r3, [pc, #92]	; (4159f8 <_lv_ll_chg_list+0x68>)
  41599c:	4798      	blx	r3
    if(head) {
  41599e:	b1ae      	cbz	r6, 4159cc <_lv_ll_chg_list+0x3c>
        node_set_prev(ll_new_p, node, NULL);
  4159a0:	2200      	movs	r2, #0
  4159a2:	4629      	mov	r1, r5
  4159a4:	4620      	mov	r0, r4
  4159a6:	4b15      	ldr	r3, [pc, #84]	; (4159fc <_lv_ll_chg_list+0x6c>)
  4159a8:	4798      	blx	r3
        node_set_next(ll_new_p, node, ll_new_p->head);
  4159aa:	6862      	ldr	r2, [r4, #4]
  4159ac:	4629      	mov	r1, r5
  4159ae:	4620      	mov	r0, r4
  4159b0:	4b13      	ldr	r3, [pc, #76]	; (415a00 <_lv_ll_chg_list+0x70>)
  4159b2:	4798      	blx	r3
        if(ll_new_p->head != NULL) { /*If there is old head then before it goes the new*/
  4159b4:	6861      	ldr	r1, [r4, #4]
  4159b6:	b119      	cbz	r1, 4159c0 <_lv_ll_chg_list+0x30>
            node_set_prev(ll_new_p, ll_new_p->head, node);
  4159b8:	462a      	mov	r2, r5
  4159ba:	4620      	mov	r0, r4
  4159bc:	4b0f      	ldr	r3, [pc, #60]	; (4159fc <_lv_ll_chg_list+0x6c>)
  4159be:	4798      	blx	r3
        ll_new_p->head = node;       /*Set the new head in the dsc.*/
  4159c0:	6065      	str	r5, [r4, #4]
        if(ll_new_p->tail == NULL) { /*If there is no tail (first node) set the tail too*/
  4159c2:	68a3      	ldr	r3, [r4, #8]
  4159c4:	b103      	cbz	r3, 4159c8 <_lv_ll_chg_list+0x38>
  4159c6:	bd70      	pop	{r4, r5, r6, pc}
            ll_new_p->tail = node;
  4159c8:	60a5      	str	r5, [r4, #8]
  4159ca:	bd70      	pop	{r4, r5, r6, pc}
        node_set_prev(ll_new_p, node, ll_new_p->tail);
  4159cc:	68a2      	ldr	r2, [r4, #8]
  4159ce:	4629      	mov	r1, r5
  4159d0:	4620      	mov	r0, r4
  4159d2:	4b0a      	ldr	r3, [pc, #40]	; (4159fc <_lv_ll_chg_list+0x6c>)
  4159d4:	4798      	blx	r3
        node_set_next(ll_new_p, node, NULL);
  4159d6:	2200      	movs	r2, #0
  4159d8:	4629      	mov	r1, r5
  4159da:	4620      	mov	r0, r4
  4159dc:	4b08      	ldr	r3, [pc, #32]	; (415a00 <_lv_ll_chg_list+0x70>)
  4159de:	4798      	blx	r3
        if(ll_new_p->tail != NULL) { /*If there is old tail then after it goes the new*/
  4159e0:	68a1      	ldr	r1, [r4, #8]
  4159e2:	b119      	cbz	r1, 4159ec <_lv_ll_chg_list+0x5c>
            node_set_next(ll_new_p, ll_new_p->tail, node);
  4159e4:	462a      	mov	r2, r5
  4159e6:	4620      	mov	r0, r4
  4159e8:	4b05      	ldr	r3, [pc, #20]	; (415a00 <_lv_ll_chg_list+0x70>)
  4159ea:	4798      	blx	r3
        ll_new_p->tail = node;       /*Set the new tail in the dsc.*/
  4159ec:	60a5      	str	r5, [r4, #8]
        if(ll_new_p->head == NULL) { /*If there is no head (first node) set the head too*/
  4159ee:	6863      	ldr	r3, [r4, #4]
  4159f0:	2b00      	cmp	r3, #0
  4159f2:	d1e8      	bne.n	4159c6 <_lv_ll_chg_list+0x36>
            ll_new_p->head = node;
  4159f4:	6065      	str	r5, [r4, #4]
}
  4159f6:	e7e6      	b.n	4159c6 <_lv_ll_chg_list+0x36>
  4159f8:	004158f9 	.word	0x004158f9
  4159fc:	00415779 	.word	0x00415779
  415a00:	00415783 	.word	0x00415783

00415a04 <_lv_ll_get_len>:
{
  415a04:	b538      	push	{r3, r4, r5, lr}
  415a06:	4605      	mov	r5, r0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415a08:	4b06      	ldr	r3, [pc, #24]	; (415a24 <_lv_ll_get_len+0x20>)
  415a0a:	4798      	blx	r3
    uint32_t len = 0;
  415a0c:	2400      	movs	r4, #0
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415a0e:	e004      	b.n	415a1a <_lv_ll_get_len+0x16>
        len++;
  415a10:	3401      	adds	r4, #1
    for(node = _lv_ll_get_head(ll_p); node != NULL; node = _lv_ll_get_next(ll_p, node)) {
  415a12:	4601      	mov	r1, r0
  415a14:	4628      	mov	r0, r5
  415a16:	4b04      	ldr	r3, [pc, #16]	; (415a28 <_lv_ll_get_len+0x24>)
  415a18:	4798      	blx	r3
  415a1a:	2800      	cmp	r0, #0
  415a1c:	d1f8      	bne.n	415a10 <_lv_ll_get_len+0xc>
}
  415a1e:	4620      	mov	r0, r4
  415a20:	bd38      	pop	{r3, r4, r5, pc}
  415a22:	bf00      	nop
  415a24:	0041583d 	.word	0x0041583d
  415a28:	00415851 	.word	0x00415851

00415a2c <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
  415a2c:	4291      	cmp	r1, r2
  415a2e:	d02f      	beq.n	415a90 <_lv_ll_move_before+0x64>
{
  415a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  415a34:	4617      	mov	r7, r2
  415a36:	460c      	mov	r4, r1
  415a38:	4605      	mov	r5, r0
    if(n_after != NULL)
  415a3a:	b30a      	cbz	r2, 415a80 <_lv_ll_move_before+0x54>
        n_before = _lv_ll_get_prev(ll_p, n_after);
  415a3c:	4611      	mov	r1, r2
  415a3e:	4b15      	ldr	r3, [pc, #84]	; (415a94 <_lv_ll_move_before+0x68>)
  415a40:	4798      	blx	r3
  415a42:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
  415a44:	42a6      	cmp	r6, r4
  415a46:	d019      	beq.n	415a7c <_lv_ll_move_before+0x50>
    _lv_ll_remove(ll_p, n_act);
  415a48:	4621      	mov	r1, r4
  415a4a:	4628      	mov	r0, r5
  415a4c:	4b12      	ldr	r3, [pc, #72]	; (415a98 <_lv_ll_move_before+0x6c>)
  415a4e:	4798      	blx	r3
    node_set_next(ll_p, n_before, n_act);
  415a50:	4622      	mov	r2, r4
  415a52:	4631      	mov	r1, r6
  415a54:	4628      	mov	r0, r5
  415a56:	f8df 8048 	ldr.w	r8, [pc, #72]	; 415aa0 <_lv_ll_move_before+0x74>
  415a5a:	47c0      	blx	r8
    node_set_prev(ll_p, n_act, n_before);
  415a5c:	4632      	mov	r2, r6
  415a5e:	4621      	mov	r1, r4
  415a60:	4628      	mov	r0, r5
  415a62:	f8df 9040 	ldr.w	r9, [pc, #64]	; 415aa4 <_lv_ll_move_before+0x78>
  415a66:	47c8      	blx	r9
    node_set_prev(ll_p, n_after, n_act);
  415a68:	4622      	mov	r2, r4
  415a6a:	4639      	mov	r1, r7
  415a6c:	4628      	mov	r0, r5
  415a6e:	47c8      	blx	r9
    node_set_next(ll_p, n_act, n_after);
  415a70:	463a      	mov	r2, r7
  415a72:	4621      	mov	r1, r4
  415a74:	4628      	mov	r0, r5
  415a76:	47c0      	blx	r8
    if(n_after == NULL) ll_p->tail = n_act;
  415a78:	b137      	cbz	r7, 415a88 <_lv_ll_move_before+0x5c>
    if(n_before == NULL) ll_p->head = n_act;
  415a7a:	b13e      	cbz	r6, 415a8c <_lv_ll_move_before+0x60>
  415a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        n_before = _lv_ll_get_tail(ll_p); /*if `n_after` is NULL `n_act` should be the new tail*/
  415a80:	4b06      	ldr	r3, [pc, #24]	; (415a9c <_lv_ll_move_before+0x70>)
  415a82:	4798      	blx	r3
  415a84:	4606      	mov	r6, r0
  415a86:	e7dd      	b.n	415a44 <_lv_ll_move_before+0x18>
    if(n_after == NULL) ll_p->tail = n_act;
  415a88:	60ac      	str	r4, [r5, #8]
  415a8a:	e7f6      	b.n	415a7a <_lv_ll_move_before+0x4e>
    if(n_before == NULL) ll_p->head = n_act;
  415a8c:	606c      	str	r4, [r5, #4]
  415a8e:	e7f5      	b.n	415a7c <_lv_ll_move_before+0x50>
  415a90:	4770      	bx	lr
  415a92:	bf00      	nop
  415a94:	0041585f 	.word	0x0041585f
  415a98:	004158f9 	.word	0x004158f9
  415a9c:	00415847 	.word	0x00415847
  415aa0:	00415783 	.word	0x00415783
  415aa4:	00415779 	.word	0x00415779

00415aa8 <_lv_ll_is_empty>:
    if(ll_p == NULL) return true;
  415aa8:	b138      	cbz	r0, 415aba <_lv_ll_is_empty+0x12>
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  415aaa:	6842      	ldr	r2, [r0, #4]
  415aac:	b10a      	cbz	r2, 415ab2 <_lv_ll_is_empty+0xa>
    return false;
  415aae:	2000      	movs	r0, #0
  415ab0:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  415ab2:	6883      	ldr	r3, [r0, #8]
  415ab4:	b11b      	cbz	r3, 415abe <_lv_ll_is_empty+0x16>
    return false;
  415ab6:	2000      	movs	r0, #0
  415ab8:	4770      	bx	lr
    if(ll_p == NULL) return true;
  415aba:	2001      	movs	r0, #1
  415abc:	4770      	bx	lr
    if(ll_p->head == NULL && ll_p->tail == NULL) return true;
  415abe:	2001      	movs	r0, #1
}
  415ac0:	4770      	bx	lr
	...

00415ac4 <_lv_trigo_sin>:
 * @return sinus of 'angle'. sin(-90) = -32767, sin(90) = 32767
 */
LV_ATTRIBUTE_FAST_MEM int16_t _lv_trigo_sin(int16_t angle)
{
    int16_t ret = 0;
    angle       = angle % 360;
  415ac4:	4b1c      	ldr	r3, [pc, #112]	; (415b38 <_lv_trigo_sin+0x74>)
  415ac6:	fb83 2300 	smull	r2, r3, r3, r0
  415aca:	181a      	adds	r2, r3, r0
  415acc:	17c3      	asrs	r3, r0, #31
  415ace:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  415ad2:	f44f 72b4 	mov.w	r2, #360	; 0x168
  415ad6:	fb02 0013 	mls	r0, r2, r3, r0
  415ada:	b200      	sxth	r0, r0

    if(angle < 0) angle = 360 + angle;
  415adc:	2800      	cmp	r0, #0
  415ade:	db15      	blt.n	415b0c <_lv_trigo_sin+0x48>

    if(angle < 90) {
  415ae0:	2859      	cmp	r0, #89	; 0x59
  415ae2:	dd16      	ble.n	415b12 <_lv_trigo_sin+0x4e>
        ret = sin0_90_table[angle];
    }
    else if(angle >= 90 && angle < 180) {
  415ae4:	b280      	uxth	r0, r0
  415ae6:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  415aea:	b29b      	uxth	r3, r3
  415aec:	2b59      	cmp	r3, #89	; 0x59
  415aee:	d914      	bls.n	415b1a <_lv_trigo_sin+0x56>
        angle = 180 - angle;
        ret   = sin0_90_table[angle];
    }
    else if(angle >= 180 && angle < 270) {
  415af0:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  415af4:	b29b      	uxth	r3, r3
  415af6:	2b59      	cmp	r3, #89	; 0x59
  415af8:	d916      	bls.n	415b28 <_lv_trigo_sin+0x64>
        angle = angle - 180;
        ret   = -sin0_90_table[angle];
    }
    else {   /*angle >=270*/
        angle = 360 - angle;
  415afa:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  415afe:	b200      	sxth	r0, r0
        ret   = -sin0_90_table[angle];
  415b00:	4b0e      	ldr	r3, [pc, #56]	; (415b3c <_lv_trigo_sin+0x78>)
  415b02:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  415b06:	4240      	negs	r0, r0
  415b08:	b200      	sxth	r0, r0
    }

    return ret;
}
  415b0a:	4770      	bx	lr
    if(angle < 0) angle = 360 + angle;
  415b0c:	4410      	add	r0, r2
  415b0e:	b200      	sxth	r0, r0
  415b10:	e7e6      	b.n	415ae0 <_lv_trigo_sin+0x1c>
        ret = sin0_90_table[angle];
  415b12:	4b0a      	ldr	r3, [pc, #40]	; (415b3c <_lv_trigo_sin+0x78>)
  415b14:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  415b18:	4770      	bx	lr
        angle = 180 - angle;
  415b1a:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  415b1e:	b200      	sxth	r0, r0
        ret   = sin0_90_table[angle];
  415b20:	4b06      	ldr	r3, [pc, #24]	; (415b3c <_lv_trigo_sin+0x78>)
  415b22:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  415b26:	4770      	bx	lr
        angle = angle - 180;
  415b28:	b21b      	sxth	r3, r3
        ret   = -sin0_90_table[angle];
  415b2a:	4a04      	ldr	r2, [pc, #16]	; (415b3c <_lv_trigo_sin+0x78>)
  415b2c:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  415b30:	4240      	negs	r0, r0
  415b32:	b200      	sxth	r0, r0
  415b34:	4770      	bx	lr
  415b36:	bf00      	nop
  415b38:	b60b60b7 	.word	0xb60b60b7
  415b3c:	00426bc4 	.word	0x00426bc4

00415b40 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
  415b40:	b430      	push	{r4, r5}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
  415b42:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
  415b44:	2400      	movs	r4, #0
  415b46:	e001      	b.n	415b4c <_lv_sqrt+0xc>
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
        if(trial * trial <= x) root = trial;
        mask = mask >> 1;
    } while(mask);
  415b48:	0852      	lsrs	r2, r2, #1
  415b4a:	d006      	beq.n	415b5a <_lv_sqrt+0x1a>
        trial = root + mask;
  415b4c:	1913      	adds	r3, r2, r4
        if(trial * trial <= x) root = trial;
  415b4e:	fb03 f503 	mul.w	r5, r3, r3
  415b52:	42a8      	cmp	r0, r5
  415b54:	d3f8      	bcc.n	415b48 <_lv_sqrt+0x8>
  415b56:	461c      	mov	r4, r3
  415b58:	e7f6      	b.n	415b48 <_lv_sqrt+0x8>

    q->i = root >> 4;
  415b5a:	0923      	lsrs	r3, r4, #4
  415b5c:	800b      	strh	r3, [r1, #0]
    q->f = (root & 0xf) << 4;
  415b5e:	0124      	lsls	r4, r4, #4
  415b60:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  415b64:	804c      	strh	r4, [r1, #2]
}
  415b66:	bc30      	pop	{r4, r5}
  415b68:	4770      	bx	lr
	...

00415b6c <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  415b6c:	4603      	mov	r3, r0
  415b6e:	b158      	cbz	r0, 415b88 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  415b70:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  415b72:	681b      	ldr	r3, [r3, #0]
  415b74:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  415b78:	1d02      	adds	r2, r0, #4
  415b7a:	4b06      	ldr	r3, [pc, #24]	; (415b94 <ent_get_next+0x28>)
  415b7c:	681b      	ldr	r3, [r3, #0]
  415b7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  415b82:	429a      	cmp	r2, r3
  415b84:	d203      	bcs.n	415b8e <ent_get_next+0x22>
    }

    return next_e;
}
  415b86:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  415b88:	4b02      	ldr	r3, [pc, #8]	; (415b94 <ent_get_next+0x28>)
  415b8a:	6818      	ldr	r0, [r3, #0]
  415b8c:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  415b8e:	2000      	movs	r0, #0
    return next_e;
  415b90:	e7f9      	b.n	415b86 <ent_get_next+0x1a>
  415b92:	bf00      	nop
  415b94:	2040c774 	.word	0x2040c774

00415b98 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415b98:	3103      	adds	r1, #3
  415b9a:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  415b9e:	6803      	ldr	r3, [r0, #0]
  415ba0:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415ba4:	1d0a      	adds	r2, r1, #4
  415ba6:	4293      	cmp	r3, r2
  415ba8:	d016      	beq.n	415bd8 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  415baa:	4299      	cmp	r1, r3
  415bac:	d013      	beq.n	415bd6 <ent_trunc+0x3e>
{
  415bae:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  415bb0:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  415bb2:	5c53      	ldrb	r3, [r2, r1]
  415bb4:	f36f 0300 	bfc	r3, #0, #1
  415bb8:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  415bba:	6803      	ldr	r3, [r0, #0]
  415bbc:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  415bc0:	3b04      	subs	r3, #4
  415bc2:	5854      	ldr	r4, [r2, r1]
  415bc4:	f363 045f 	bfi	r4, r3, #1, #31
  415bc8:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  415bca:	6803      	ldr	r3, [r0, #0]
  415bcc:	f361 035f 	bfi	r3, r1, #1, #31
  415bd0:	6003      	str	r3, [r0, #0]
    }
}
  415bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
  415bd6:	4770      	bx	lr
        size = e->header.s.d_size;
  415bd8:	4619      	mov	r1, r3
  415bda:	e7e6      	b.n	415baa <ent_trunc+0x12>

00415bdc <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  415bdc:	7803      	ldrb	r3, [r0, #0]
  415bde:	f013 0f01 	tst.w	r3, #1
  415be2:	d10f      	bne.n	415c04 <ent_alloc+0x28>
  415be4:	6803      	ldr	r3, [r0, #0]
  415be6:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415bea:	428b      	cmp	r3, r1
  415bec:	d30c      	bcc.n	415c08 <ent_alloc+0x2c>
{
  415bee:	b510      	push	{r4, lr}
  415bf0:	4604      	mov	r4, r0
        ent_trunc(e, size);
  415bf2:	4b06      	ldr	r3, [pc, #24]	; (415c0c <ent_alloc+0x30>)
  415bf4:	4798      	blx	r3
        e->header.s.used = 1;
  415bf6:	7823      	ldrb	r3, [r4, #0]
  415bf8:	f043 0301 	orr.w	r3, r3, #1
  415bfc:	4620      	mov	r0, r4
  415bfe:	f800 3b04 	strb.w	r3, [r0], #4
  415c02:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  415c04:	2000      	movs	r0, #0
  415c06:	4770      	bx	lr
  415c08:	2000      	movs	r0, #0
    return alloc;
  415c0a:	4770      	bx	lr
  415c0c:	00415b99 	.word	0x00415b99

00415c10 <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  415c10:	4b06      	ldr	r3, [pc, #24]	; (415c2c <_lv_mem_init+0x1c>)
  415c12:	4a07      	ldr	r2, [pc, #28]	; (415c30 <_lv_mem_init+0x20>)
  415c14:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  415c16:	781a      	ldrb	r2, [r3, #0]
  415c18:	f36f 0200 	bfc	r2, #0, #1
  415c1c:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  415c1e:	681a      	ldr	r2, [r3, #0]
  415c20:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  415c24:	f361 025f 	bfi	r2, r1, #1, #31
  415c28:	601a      	str	r2, [r3, #0]
  415c2a:	4770      	bx	lr
  415c2c:	2040c778 	.word	0x2040c778
  415c30:	2040c774 	.word	0x2040c774

00415c34 <lv_mem_alloc>:
{
  415c34:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  415c36:	b330      	cbz	r0, 415c86 <lv_mem_alloc+0x52>
  415c38:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415c3a:	3603      	adds	r6, #3
  415c3c:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  415c40:	2400      	movs	r4, #0
    void * alloc = NULL;
  415c42:	4625      	mov	r5, r4
  415c44:	e006      	b.n	415c54 <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  415c46:	1c23      	adds	r3, r4, #0
  415c48:	bf18      	it	ne
  415c4a:	2301      	movne	r3, #1
  415c4c:	2d00      	cmp	r5, #0
  415c4e:	bf18      	it	ne
  415c50:	2300      	movne	r3, #0
  415c52:	b153      	cbz	r3, 415c6a <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  415c54:	4620      	mov	r0, r4
  415c56:	4b0d      	ldr	r3, [pc, #52]	; (415c8c <lv_mem_alloc+0x58>)
  415c58:	4798      	blx	r3
        if(e != NULL) {
  415c5a:	4604      	mov	r4, r0
  415c5c:	2800      	cmp	r0, #0
  415c5e:	d0f2      	beq.n	415c46 <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  415c60:	4631      	mov	r1, r6
  415c62:	4b0b      	ldr	r3, [pc, #44]	; (415c90 <lv_mem_alloc+0x5c>)
  415c64:	4798      	blx	r3
  415c66:	4605      	mov	r5, r0
  415c68:	e7ed      	b.n	415c46 <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  415c6a:	b16d      	cbz	r5, 415c88 <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  415c6c:	4b09      	ldr	r3, [pc, #36]	; (415c94 <lv_mem_alloc+0x60>)
  415c6e:	681b      	ldr	r3, [r3, #0]
  415c70:	429d      	cmp	r5, r3
  415c72:	d909      	bls.n	415c88 <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  415c74:	1aeb      	subs	r3, r5, r3
  415c76:	441e      	add	r6, r3
  415c78:	4b07      	ldr	r3, [pc, #28]	; (415c98 <lv_mem_alloc+0x64>)
  415c7a:	681b      	ldr	r3, [r3, #0]
  415c7c:	429e      	cmp	r6, r3
  415c7e:	d903      	bls.n	415c88 <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  415c80:	4b05      	ldr	r3, [pc, #20]	; (415c98 <lv_mem_alloc+0x64>)
  415c82:	601e      	str	r6, [r3, #0]
  415c84:	e000      	b.n	415c88 <lv_mem_alloc+0x54>
        return &zero_mem;
  415c86:	4d05      	ldr	r5, [pc, #20]	; (415c9c <lv_mem_alloc+0x68>)
}
  415c88:	4628      	mov	r0, r5
  415c8a:	bd70      	pop	{r4, r5, r6, pc}
  415c8c:	00415b6d 	.word	0x00415b6d
  415c90:	00415bdd 	.word	0x00415bdd
  415c94:	2040c774 	.word	0x2040c774
  415c98:	2040c770 	.word	0x2040c770
  415c9c:	20414778 	.word	0x20414778

00415ca0 <lv_mem_defrag>:
{
  415ca0:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  415ca2:	2000      	movs	r0, #0
  415ca4:	4b13      	ldr	r3, [pc, #76]	; (415cf4 <lv_mem_defrag+0x54>)
  415ca6:	4798      	blx	r3
  415ca8:	4604      	mov	r4, r0
  415caa:	e017      	b.n	415cdc <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  415cac:	b304      	cbz	r4, 415cf0 <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  415cae:	4620      	mov	r0, r4
  415cb0:	4b10      	ldr	r3, [pc, #64]	; (415cf4 <lv_mem_defrag+0x54>)
  415cb2:	4798      	blx	r3
        while(e_next != NULL) {
  415cb4:	b180      	cbz	r0, 415cd8 <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  415cb6:	7803      	ldrb	r3, [r0, #0]
  415cb8:	f013 0f01 	tst.w	r3, #1
  415cbc:	d10c      	bne.n	415cd8 <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  415cbe:	6801      	ldr	r1, [r0, #0]
  415cc0:	6823      	ldr	r3, [r4, #0]
  415cc2:	f3c3 025e 	ubfx	r2, r3, #1, #31
  415cc6:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415cca:	3204      	adds	r2, #4
  415ccc:	f362 035f 	bfi	r3, r2, #1, #31
  415cd0:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  415cd2:	4b08      	ldr	r3, [pc, #32]	; (415cf4 <lv_mem_defrag+0x54>)
  415cd4:	4798      	blx	r3
  415cd6:	e7ed      	b.n	415cb4 <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  415cd8:	b150      	cbz	r0, 415cf0 <lv_mem_defrag+0x50>
{
  415cda:	4604      	mov	r4, r0
        while(e_free != NULL) {
  415cdc:	2c00      	cmp	r4, #0
  415cde:	d0e5      	beq.n	415cac <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  415ce0:	7823      	ldrb	r3, [r4, #0]
  415ce2:	f013 0f01 	tst.w	r3, #1
  415ce6:	d0e1      	beq.n	415cac <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  415ce8:	4620      	mov	r0, r4
  415cea:	4b02      	ldr	r3, [pc, #8]	; (415cf4 <lv_mem_defrag+0x54>)
  415cec:	4798      	blx	r3
  415cee:	e7f4      	b.n	415cda <lv_mem_defrag+0x3a>
  415cf0:	bd10      	pop	{r4, pc}
  415cf2:	bf00      	nop
  415cf4:	00415b6d 	.word	0x00415b6d

00415cf8 <lv_mem_free>:
    if(data == &zero_mem) return;
  415cf8:	4b18      	ldr	r3, [pc, #96]	; (415d5c <lv_mem_free+0x64>)
  415cfa:	4298      	cmp	r0, r3
  415cfc:	d02d      	beq.n	415d5a <lv_mem_free+0x62>
    if(data == NULL) return;
  415cfe:	b360      	cbz	r0, 415d5a <lv_mem_free+0x62>
{
  415d00:	b510      	push	{r4, lr}
  415d02:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  415d04:	3804      	subs	r0, #4
    e->header.s.used = 0;
  415d06:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  415d0a:	f36f 0300 	bfc	r3, #0, #1
  415d0e:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  415d12:	4a13      	ldr	r2, [pc, #76]	; (415d60 <lv_mem_free+0x68>)
  415d14:	8813      	ldrh	r3, [r2, #0]
  415d16:	3301      	adds	r3, #1
  415d18:	b29b      	uxth	r3, r3
  415d1a:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  415d1c:	2b0f      	cmp	r3, #15
  415d1e:	d816      	bhi.n	415d4e <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  415d20:	4b10      	ldr	r3, [pc, #64]	; (415d64 <lv_mem_free+0x6c>)
  415d22:	4798      	blx	r3
        while(e_next != NULL) {
  415d24:	b190      	cbz	r0, 415d4c <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  415d26:	7803      	ldrb	r3, [r0, #0]
  415d28:	f013 0f01 	tst.w	r3, #1
  415d2c:	d114      	bne.n	415d58 <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  415d2e:	6801      	ldr	r1, [r0, #0]
  415d30:	f854 3c04 	ldr.w	r3, [r4, #-4]
  415d34:	f3c3 025e 	ubfx	r2, r3, #1, #31
  415d38:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415d3c:	3204      	adds	r2, #4
  415d3e:	f362 035f 	bfi	r3, r2, #1, #31
  415d42:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  415d46:	4b07      	ldr	r3, [pc, #28]	; (415d64 <lv_mem_free+0x6c>)
  415d48:	4798      	blx	r3
  415d4a:	e7eb      	b.n	415d24 <lv_mem_free+0x2c>
  415d4c:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  415d4e:	2200      	movs	r2, #0
  415d50:	4b03      	ldr	r3, [pc, #12]	; (415d60 <lv_mem_free+0x68>)
  415d52:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  415d54:	4b04      	ldr	r3, [pc, #16]	; (415d68 <lv_mem_free+0x70>)
  415d56:	4798      	blx	r3
  415d58:	bd10      	pop	{r4, pc}
  415d5a:	4770      	bx	lr
  415d5c:	20414778 	.word	0x20414778
  415d60:	2040c74c 	.word	0x2040c74c
  415d64:	00415b6d 	.word	0x00415b6d
  415d68:	00415ca1 	.word	0x00415ca1

00415d6c <_lv_mem_get_size>:
    if(data == NULL) return 0;
  415d6c:	b138      	cbz	r0, 415d7e <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  415d6e:	4a06      	ldr	r2, [pc, #24]	; (415d88 <_lv_mem_get_size+0x1c>)
  415d70:	4290      	cmp	r0, r2
  415d72:	d006      	beq.n	415d82 <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  415d74:	f850 0c04 	ldr.w	r0, [r0, #-4]
  415d78:	f3c0 005e 	ubfx	r0, r0, #1, #31
  415d7c:	4770      	bx	lr
    if(data == NULL) return 0;
  415d7e:	2000      	movs	r0, #0
  415d80:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  415d82:	2000      	movs	r0, #0
}
  415d84:	4770      	bx	lr
  415d86:	bf00      	nop
  415d88:	20414778 	.word	0x20414778

00415d8c <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415d8c:	2300      	movs	r3, #0
  415d8e:	2b01      	cmp	r3, #1
  415d90:	d810      	bhi.n	415db4 <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  415d92:	4619      	mov	r1, r3
  415d94:	4a12      	ldr	r2, [pc, #72]	; (415de0 <_lv_mem_buf_release+0x54>)
  415d96:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  415d9a:	4282      	cmp	r2, r0
  415d9c:	d002      	beq.n	415da4 <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415d9e:	3301      	adds	r3, #1
  415da0:	b2db      	uxtb	r3, r3
  415da2:	e7f4      	b.n	415d8e <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  415da4:	4b0e      	ldr	r3, [pc, #56]	; (415de0 <_lv_mem_buf_release+0x54>)
  415da6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  415daa:	798b      	ldrb	r3, [r1, #6]
  415dac:	f36f 0300 	bfc	r3, #0, #1
  415db0:	718b      	strb	r3, [r1, #6]
            return;
  415db2:	4770      	bx	lr
  415db4:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415db6:	2b0f      	cmp	r3, #15
  415db8:	d810      	bhi.n	415ddc <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  415dba:	4619      	mov	r1, r3
  415dbc:	4a09      	ldr	r2, [pc, #36]	; (415de4 <_lv_mem_buf_release+0x58>)
  415dbe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  415dc2:	4290      	cmp	r0, r2
  415dc4:	d002      	beq.n	415dcc <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415dc6:	3301      	adds	r3, #1
  415dc8:	b2db      	uxtb	r3, r3
  415dca:	e7f4      	b.n	415db6 <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  415dcc:	4b05      	ldr	r3, [pc, #20]	; (415de4 <_lv_mem_buf_release+0x58>)
  415dce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  415dd2:	798b      	ldrb	r3, [r1, #6]
  415dd4:	f36f 0300 	bfc	r3, #0, #1
  415dd8:	718b      	strb	r3, [r1, #6]
            return;
  415dda:	4770      	bx	lr
  415ddc:	4770      	bx	lr
  415dde:	bf00      	nop
  415de0:	20400040 	.word	0x20400040
  415de4:	2043a1a0 	.word	0x2043a1a0

00415de8 <_lv_mem_buf_free_all>:
{
  415de8:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415dea:	2300      	movs	r3, #0
  415dec:	e008      	b.n	415e00 <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  415dee:	4a12      	ldr	r2, [pc, #72]	; (415e38 <_lv_mem_buf_free_all+0x50>)
  415df0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415df4:	7991      	ldrb	r1, [r2, #6]
  415df6:	f36f 0100 	bfc	r1, #0, #1
  415dfa:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  415dfc:	3301      	adds	r3, #1
  415dfe:	b2db      	uxtb	r3, r3
  415e00:	2b01      	cmp	r3, #1
  415e02:	d9f4      	bls.n	415dee <_lv_mem_buf_free_all+0x6>
  415e04:	2400      	movs	r4, #0
  415e06:	e001      	b.n	415e0c <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  415e08:	3401      	adds	r4, #1
  415e0a:	b2e4      	uxtb	r4, r4
  415e0c:	2c0f      	cmp	r4, #15
  415e0e:	d812      	bhi.n	415e36 <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  415e10:	4b0a      	ldr	r3, [pc, #40]	; (415e3c <_lv_mem_buf_free_all+0x54>)
  415e12:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  415e16:	2800      	cmp	r0, #0
  415e18:	d0f6      	beq.n	415e08 <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  415e1a:	4b09      	ldr	r3, [pc, #36]	; (415e40 <_lv_mem_buf_free_all+0x58>)
  415e1c:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  415e1e:	4b07      	ldr	r3, [pc, #28]	; (415e3c <_lv_mem_buf_free_all+0x54>)
  415e20:	2200      	movs	r2, #0
  415e22:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  415e26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  415e2a:	7999      	ldrb	r1, [r3, #6]
  415e2c:	f362 0100 	bfi	r1, r2, #0, #1
  415e30:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  415e32:	809a      	strh	r2, [r3, #4]
  415e34:	e7e8      	b.n	415e08 <_lv_mem_buf_free_all+0x20>
}
  415e36:	bd10      	pop	{r4, pc}
  415e38:	20400040 	.word	0x20400040
  415e3c:	2043a1a0 	.word	0x2043a1a0
  415e40:	00415cf9 	.word	0x00415cf9

00415e44 <_lv_memcpy>:
{
  415e44:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  415e46:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  415e4a:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  415e4e:	429c      	cmp	r4, r3
  415e50:	d050      	beq.n	415ef4 <_lv_memcpy+0xb0>
  415e52:	4603      	mov	r3, r0
  415e54:	e042      	b.n	415edc <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  415e56:	780c      	ldrb	r4, [r1, #0]
  415e58:	701c      	strb	r4, [r3, #0]
  415e5a:	784c      	ldrb	r4, [r1, #1]
  415e5c:	705c      	strb	r4, [r3, #1]
  415e5e:	788c      	ldrb	r4, [r1, #2]
  415e60:	709c      	strb	r4, [r3, #2]
  415e62:	78cc      	ldrb	r4, [r1, #3]
  415e64:	70dc      	strb	r4, [r3, #3]
  415e66:	790c      	ldrb	r4, [r1, #4]
  415e68:	711c      	strb	r4, [r3, #4]
  415e6a:	794c      	ldrb	r4, [r1, #5]
  415e6c:	715c      	strb	r4, [r3, #5]
  415e6e:	798c      	ldrb	r4, [r1, #6]
  415e70:	719c      	strb	r4, [r3, #6]
  415e72:	79cc      	ldrb	r4, [r1, #7]
  415e74:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  415e76:	7a0c      	ldrb	r4, [r1, #8]
  415e78:	721c      	strb	r4, [r3, #8]
  415e7a:	7a4c      	ldrb	r4, [r1, #9]
  415e7c:	725c      	strb	r4, [r3, #9]
  415e7e:	7a8c      	ldrb	r4, [r1, #10]
  415e80:	729c      	strb	r4, [r3, #10]
  415e82:	7acc      	ldrb	r4, [r1, #11]
  415e84:	72dc      	strb	r4, [r3, #11]
  415e86:	7b0c      	ldrb	r4, [r1, #12]
  415e88:	731c      	strb	r4, [r3, #12]
  415e8a:	7b4c      	ldrb	r4, [r1, #13]
  415e8c:	735c      	strb	r4, [r3, #13]
  415e8e:	7b8c      	ldrb	r4, [r1, #14]
  415e90:	739c      	strb	r4, [r3, #14]
  415e92:	7bcc      	ldrb	r4, [r1, #15]
  415e94:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  415e96:	7c0c      	ldrb	r4, [r1, #16]
  415e98:	741c      	strb	r4, [r3, #16]
  415e9a:	7c4c      	ldrb	r4, [r1, #17]
  415e9c:	745c      	strb	r4, [r3, #17]
  415e9e:	7c8c      	ldrb	r4, [r1, #18]
  415ea0:	749c      	strb	r4, [r3, #18]
  415ea2:	7ccc      	ldrb	r4, [r1, #19]
  415ea4:	74dc      	strb	r4, [r3, #19]
  415ea6:	7d0c      	ldrb	r4, [r1, #20]
  415ea8:	751c      	strb	r4, [r3, #20]
  415eaa:	7d4c      	ldrb	r4, [r1, #21]
  415eac:	755c      	strb	r4, [r3, #21]
  415eae:	7d8c      	ldrb	r4, [r1, #22]
  415eb0:	759c      	strb	r4, [r3, #22]
  415eb2:	7dcc      	ldrb	r4, [r1, #23]
  415eb4:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  415eb6:	7e0c      	ldrb	r4, [r1, #24]
  415eb8:	761c      	strb	r4, [r3, #24]
  415eba:	7e4c      	ldrb	r4, [r1, #25]
  415ebc:	765c      	strb	r4, [r3, #25]
  415ebe:	7e8c      	ldrb	r4, [r1, #26]
  415ec0:	769c      	strb	r4, [r3, #26]
  415ec2:	7ecc      	ldrb	r4, [r1, #27]
  415ec4:	76dc      	strb	r4, [r3, #27]
  415ec6:	7f0c      	ldrb	r4, [r1, #28]
  415ec8:	771c      	strb	r4, [r3, #28]
  415eca:	7f4c      	ldrb	r4, [r1, #29]
  415ecc:	775c      	strb	r4, [r3, #29]
  415ece:	7f8c      	ldrb	r4, [r1, #30]
  415ed0:	779c      	strb	r4, [r3, #30]
  415ed2:	7fcc      	ldrb	r4, [r1, #31]
  415ed4:	77dc      	strb	r4, [r3, #31]
  415ed6:	3320      	adds	r3, #32
  415ed8:	3120      	adds	r1, #32
            len -= 32;
  415eda:	3a20      	subs	r2, #32
        while(len > 32) {
  415edc:	2a20      	cmp	r2, #32
  415ede:	d8ba      	bhi.n	415e56 <_lv_memcpy+0x12>
  415ee0:	e004      	b.n	415eec <_lv_memcpy+0xa8>
            COPY8
  415ee2:	f811 4b01 	ldrb.w	r4, [r1], #1
  415ee6:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  415eea:	3a01      	subs	r2, #1
        while(len) {
  415eec:	2a00      	cmp	r2, #0
  415eee:	d1f8      	bne.n	415ee2 <_lv_memcpy+0x9e>
}
  415ef0:	bc30      	pop	{r4, r5}
  415ef2:	4770      	bx	lr
    if(d_align) {
  415ef4:	b174      	cbz	r4, 415f14 <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  415ef6:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  415efa:	4603      	mov	r3, r0
        while(d_align && len) {
  415efc:	e005      	b.n	415f0a <_lv_memcpy+0xc6>
            COPY8;
  415efe:	f811 5b01 	ldrb.w	r5, [r1], #1
  415f02:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  415f06:	3c01      	subs	r4, #1
            len--;
  415f08:	3a01      	subs	r2, #1
        while(d_align && len) {
  415f0a:	2c00      	cmp	r4, #0
  415f0c:	bf18      	it	ne
  415f0e:	2a00      	cmpne	r2, #0
  415f10:	d1f5      	bne.n	415efe <_lv_memcpy+0xba>
  415f12:	e014      	b.n	415f3e <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  415f14:	4603      	mov	r3, r0
  415f16:	e012      	b.n	415f3e <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  415f18:	680c      	ldr	r4, [r1, #0]
  415f1a:	601c      	str	r4, [r3, #0]
  415f1c:	684c      	ldr	r4, [r1, #4]
  415f1e:	605c      	str	r4, [r3, #4]
  415f20:	688c      	ldr	r4, [r1, #8]
  415f22:	609c      	str	r4, [r3, #8]
  415f24:	68cc      	ldr	r4, [r1, #12]
  415f26:	60dc      	str	r4, [r3, #12]
  415f28:	690c      	ldr	r4, [r1, #16]
  415f2a:	611c      	str	r4, [r3, #16]
  415f2c:	694c      	ldr	r4, [r1, #20]
  415f2e:	615c      	str	r4, [r3, #20]
  415f30:	698c      	ldr	r4, [r1, #24]
  415f32:	619c      	str	r4, [r3, #24]
  415f34:	69cc      	ldr	r4, [r1, #28]
  415f36:	61dc      	str	r4, [r3, #28]
  415f38:	3320      	adds	r3, #32
  415f3a:	3120      	adds	r1, #32
        len -= 32;
  415f3c:	3a20      	subs	r2, #32
    while(len > 32) {
  415f3e:	2a20      	cmp	r2, #32
  415f40:	d8ea      	bhi.n	415f18 <_lv_memcpy+0xd4>
  415f42:	e004      	b.n	415f4e <_lv_memcpy+0x10a>
        COPY32;
  415f44:	f851 4b04 	ldr.w	r4, [r1], #4
  415f48:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  415f4c:	3a04      	subs	r2, #4
    while(len > 4) {
  415f4e:	2a04      	cmp	r2, #4
  415f50:	d8f8      	bhi.n	415f44 <_lv_memcpy+0x100>
  415f52:	e004      	b.n	415f5e <_lv_memcpy+0x11a>
        COPY8
  415f54:	f811 4b01 	ldrb.w	r4, [r1], #1
  415f58:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  415f5c:	3a01      	subs	r2, #1
    while(len) {
  415f5e:	2a00      	cmp	r2, #0
  415f60:	d1f8      	bne.n	415f54 <_lv_memcpy+0x110>
  415f62:	e7c5      	b.n	415ef0 <_lv_memcpy+0xac>

00415f64 <lv_mem_realloc>:
{
  415f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  415f66:	3103      	adds	r1, #3
  415f68:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  415f6c:	4605      	mov	r5, r0
  415f6e:	b128      	cbz	r0, 415f7c <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  415f70:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  415f74:	f013 0f01 	tst.w	r3, #1
  415f78:	d100      	bne.n	415f7c <lv_mem_realloc+0x18>
            data_p = NULL;
  415f7a:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  415f7c:	4628      	mov	r0, r5
  415f7e:	4b12      	ldr	r3, [pc, #72]	; (415fc8 <lv_mem_realloc+0x64>)
  415f80:	4798      	blx	r3
  415f82:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415f84:	4284      	cmp	r4, r0
  415f86:	d01d      	beq.n	415fc4 <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  415f88:	d30e      	bcc.n	415fa8 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  415f8a:	4620      	mov	r0, r4
  415f8c:	4b0f      	ldr	r3, [pc, #60]	; (415fcc <lv_mem_realloc+0x68>)
  415f8e:	4798      	blx	r3
    if(new_p == NULL) {
  415f90:	4607      	mov	r7, r0
  415f92:	b138      	cbz	r0, 415fa4 <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  415f94:	b135      	cbz	r5, 415fa4 <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  415f96:	2e00      	cmp	r6, #0
  415f98:	bf18      	it	ne
  415f9a:	2c00      	cmpne	r4, #0
  415f9c:	d10a      	bne.n	415fb4 <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  415f9e:	4628      	mov	r0, r5
  415fa0:	4b0b      	ldr	r3, [pc, #44]	; (415fd0 <lv_mem_realloc+0x6c>)
  415fa2:	4798      	blx	r3
}
  415fa4:	4638      	mov	r0, r7
  415fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  415fa8:	4621      	mov	r1, r4
  415faa:	1f28      	subs	r0, r5, #4
  415fac:	4b09      	ldr	r3, [pc, #36]	; (415fd4 <lv_mem_realloc+0x70>)
  415fae:	4798      	blx	r3
        return &e->first_data;
  415fb0:	462f      	mov	r7, r5
  415fb2:	e7f7      	b.n	415fa4 <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  415fb4:	4622      	mov	r2, r4
  415fb6:	42b4      	cmp	r4, r6
  415fb8:	bf28      	it	cs
  415fba:	4632      	movcs	r2, r6
  415fbc:	4629      	mov	r1, r5
  415fbe:	4b06      	ldr	r3, [pc, #24]	; (415fd8 <lv_mem_realloc+0x74>)
  415fc0:	4798      	blx	r3
  415fc2:	e7ec      	b.n	415f9e <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  415fc4:	462f      	mov	r7, r5
  415fc6:	e7ed      	b.n	415fa4 <lv_mem_realloc+0x40>
  415fc8:	00415d6d 	.word	0x00415d6d
  415fcc:	00415c35 	.word	0x00415c35
  415fd0:	00415cf9 	.word	0x00415cf9
  415fd4:	00415b99 	.word	0x00415b99
  415fd8:	00415e45 	.word	0x00415e45

00415fdc <_lv_mem_buf_get>:
{
  415fdc:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  415fde:	2800      	cmp	r0, #0
  415fe0:	f000 8085 	beq.w	4160ee <_lv_mem_buf_get+0x112>
  415fe4:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  415fe6:	2810      	cmp	r0, #16
  415fe8:	d91d      	bls.n	416026 <_lv_mem_buf_get+0x4a>
  415fea:	f04f 31ff 	mov.w	r1, #4294967295
  415fee:	2300      	movs	r3, #0
  415ff0:	e028      	b.n	416044 <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  415ff2:	4619      	mov	r1, r3
  415ff4:	4a3f      	ldr	r2, [pc, #252]	; (4160f4 <_lv_mem_buf_get+0x118>)
  415ff6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  415ffa:	7992      	ldrb	r2, [r2, #6]
  415ffc:	f012 0f01 	tst.w	r2, #1
  416000:	d007      	beq.n	416012 <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416002:	3301      	adds	r3, #1
  416004:	b2db      	uxtb	r3, r3
  416006:	2b01      	cmp	r3, #1
  416008:	d9f3      	bls.n	415ff2 <_lv_mem_buf_get+0x16>
  41600a:	f04f 31ff 	mov.w	r1, #4294967295
  41600e:	2300      	movs	r3, #0
  416010:	e018      	b.n	416044 <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  416012:	4a38      	ldr	r2, [pc, #224]	; (4160f4 <_lv_mem_buf_get+0x118>)
  416014:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  416018:	7983      	ldrb	r3, [r0, #6]
  41601a:	f043 0301 	orr.w	r3, r3, #1
  41601e:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  416020:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  416024:	e034      	b.n	416090 <_lv_mem_buf_get+0xb4>
  416026:	2300      	movs	r3, #0
  416028:	e7ed      	b.n	416006 <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  41602a:	4a33      	ldr	r2, [pc, #204]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  41602c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  416030:	798b      	ldrb	r3, [r1, #6]
  416032:	f043 0301 	orr.w	r3, r3, #1
  416036:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  416038:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  41603c:	e028      	b.n	416090 <_lv_mem_buf_get+0xb4>
                i_guess = i;
  41603e:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416040:	3301      	adds	r3, #1
  416042:	b2db      	uxtb	r3, r3
  416044:	2b0f      	cmp	r3, #15
  416046:	d818      	bhi.n	41607a <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  416048:	4618      	mov	r0, r3
  41604a:	4a2b      	ldr	r2, [pc, #172]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  41604c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416050:	7992      	ldrb	r2, [r2, #6]
  416052:	f012 0f01 	tst.w	r2, #1
  416056:	d1f3      	bne.n	416040 <_lv_mem_buf_get+0x64>
  416058:	4a27      	ldr	r2, [pc, #156]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  41605a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  41605e:	8892      	ldrh	r2, [r2, #4]
  416060:	4294      	cmp	r4, r2
  416062:	d8ed      	bhi.n	416040 <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  416064:	d0e1      	beq.n	41602a <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  416066:	2900      	cmp	r1, #0
  416068:	dbe9      	blt.n	41603e <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  41606a:	4823      	ldr	r0, [pc, #140]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  41606c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  416070:	8880      	ldrh	r0, [r0, #4]
  416072:	4282      	cmp	r2, r0
  416074:	d2e4      	bcs.n	416040 <_lv_mem_buf_get+0x64>
                i_guess = i;
  416076:	b259      	sxtb	r1, r3
  416078:	e7e2      	b.n	416040 <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  41607a:	2900      	cmp	r1, #0
  41607c:	db23      	blt.n	4160c6 <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  41607e:	4a1e      	ldr	r2, [pc, #120]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  416080:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  416084:	7983      	ldrb	r3, [r0, #6]
  416086:	f043 0301 	orr.w	r3, r3, #1
  41608a:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  41608c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  416090:	4618      	mov	r0, r3
  416092:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  416094:	4621      	mov	r1, r4
  416096:	4b18      	ldr	r3, [pc, #96]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  416098:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  41609c:	4b17      	ldr	r3, [pc, #92]	; (4160fc <_lv_mem_buf_get+0x120>)
  41609e:	4798      	blx	r3
            if(buf == NULL) {
  4160a0:	4603      	mov	r3, r0
  4160a2:	b150      	cbz	r0, 4160ba <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  4160a4:	4814      	ldr	r0, [pc, #80]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  4160a6:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  4160aa:	7991      	ldrb	r1, [r2, #6]
  4160ac:	f041 0101 	orr.w	r1, r1, #1
  4160b0:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  4160b2:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  4160b4:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  4160b8:	e7ea      	b.n	416090 <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  4160ba:	2200      	movs	r2, #0
  4160bc:	2300      	movs	r3, #0
  4160be:	4810      	ldr	r0, [pc, #64]	; (416100 <_lv_mem_buf_get+0x124>)
  4160c0:	4910      	ldr	r1, [pc, #64]	; (416104 <_lv_mem_buf_get+0x128>)
  4160c2:	4788      	blx	r1
  4160c4:	e7fe      	b.n	4160c4 <_lv_mem_buf_get+0xe8>
  4160c6:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4160c8:	2b0f      	cmp	r3, #15
  4160ca:	d80a      	bhi.n	4160e2 <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  4160cc:	461d      	mov	r5, r3
  4160ce:	4a0a      	ldr	r2, [pc, #40]	; (4160f8 <_lv_mem_buf_get+0x11c>)
  4160d0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4160d4:	7992      	ldrb	r2, [r2, #6]
  4160d6:	f012 0f01 	tst.w	r2, #1
  4160da:	d0db      	beq.n	416094 <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4160dc:	3301      	adds	r3, #1
  4160de:	b2db      	uxtb	r3, r3
  4160e0:	e7f2      	b.n	4160c8 <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  4160e2:	2200      	movs	r2, #0
  4160e4:	2300      	movs	r3, #0
  4160e6:	4808      	ldr	r0, [pc, #32]	; (416108 <_lv_mem_buf_get+0x12c>)
  4160e8:	4906      	ldr	r1, [pc, #24]	; (416104 <_lv_mem_buf_get+0x128>)
  4160ea:	4788      	blx	r1
  4160ec:	e7fe      	b.n	4160ec <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  4160ee:	2300      	movs	r3, #0
  4160f0:	e7ce      	b.n	416090 <_lv_mem_buf_get+0xb4>
  4160f2:	bf00      	nop
  4160f4:	20400040 	.word	0x20400040
  4160f8:	2043a1a0 	.word	0x2043a1a0
  4160fc:	00415f65 	.word	0x00415f65
  416100:	00426c7c 	.word	0x00426c7c
  416104:	00415539 	.word	0x00415539
  416108:	00426cd0 	.word	0x00426cd0

0041610c <_lv_memset>:
    if(d_align) {
  41610c:	f010 0303 	ands.w	r3, r0, #3
  416110:	d00a      	beq.n	416128 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  416112:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416116:	e003      	b.n	416120 <_lv_memset+0x14>
            SET8(v);
  416118:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  41611c:	3a01      	subs	r2, #1
            d_align--;
  41611e:	3b01      	subs	r3, #1
        while(d_align && len) {
  416120:	2b00      	cmp	r3, #0
  416122:	bf18      	it	ne
  416124:	2a00      	cmpne	r2, #0
  416126:	d1f7      	bne.n	416118 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  416128:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  41612c:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  416130:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  416134:	e009      	b.n	41614a <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  416136:	6003      	str	r3, [r0, #0]
  416138:	6043      	str	r3, [r0, #4]
  41613a:	6083      	str	r3, [r0, #8]
  41613c:	60c3      	str	r3, [r0, #12]
  41613e:	6103      	str	r3, [r0, #16]
  416140:	6143      	str	r3, [r0, #20]
  416142:	6183      	str	r3, [r0, #24]
  416144:	61c3      	str	r3, [r0, #28]
  416146:	3020      	adds	r0, #32
        len -= 32;
  416148:	3a20      	subs	r2, #32
    while(len > 32) {
  41614a:	2a20      	cmp	r2, #32
  41614c:	d8f3      	bhi.n	416136 <_lv_memset+0x2a>
  41614e:	e002      	b.n	416156 <_lv_memset+0x4a>
        SET32(v32);
  416150:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416154:	3a04      	subs	r2, #4
    while(len > 4) {
  416156:	2a04      	cmp	r2, #4
  416158:	d8fa      	bhi.n	416150 <_lv_memset+0x44>
  41615a:	e002      	b.n	416162 <_lv_memset+0x56>
        SET8(v);
  41615c:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  416160:	3a01      	subs	r2, #1
    while(len) {
  416162:	2a00      	cmp	r2, #0
  416164:	d1fa      	bne.n	41615c <_lv_memset+0x50>
}
  416166:	4770      	bx	lr

00416168 <_lv_memset_00>:
    if(d_align) {
  416168:	f010 0303 	ands.w	r3, r0, #3
  41616c:	d017      	beq.n	41619e <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  41616e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416172:	e004      	b.n	41617e <_lv_memset_00+0x16>
            SET8(0);
  416174:	2200      	movs	r2, #0
  416176:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  41617a:	3901      	subs	r1, #1
            d_align--;
  41617c:	3b01      	subs	r3, #1
        while(d_align && len) {
  41617e:	2b00      	cmp	r3, #0
  416180:	bf18      	it	ne
  416182:	2900      	cmpne	r1, #0
  416184:	d1f6      	bne.n	416174 <_lv_memset_00+0xc>
  416186:	e00a      	b.n	41619e <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  416188:	2300      	movs	r3, #0
  41618a:	6003      	str	r3, [r0, #0]
  41618c:	6043      	str	r3, [r0, #4]
  41618e:	6083      	str	r3, [r0, #8]
  416190:	60c3      	str	r3, [r0, #12]
  416192:	6103      	str	r3, [r0, #16]
  416194:	6143      	str	r3, [r0, #20]
  416196:	6183      	str	r3, [r0, #24]
  416198:	61c3      	str	r3, [r0, #28]
  41619a:	3020      	adds	r0, #32
        len -= 32;
  41619c:	3920      	subs	r1, #32
    while(len > 32) {
  41619e:	2920      	cmp	r1, #32
  4161a0:	d8f2      	bhi.n	416188 <_lv_memset_00+0x20>
  4161a2:	e003      	b.n	4161ac <_lv_memset_00+0x44>
        SET32(0);
  4161a4:	2300      	movs	r3, #0
  4161a6:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  4161aa:	3904      	subs	r1, #4
    while(len > 4) {
  4161ac:	2904      	cmp	r1, #4
  4161ae:	d8f9      	bhi.n	4161a4 <_lv_memset_00+0x3c>
  4161b0:	e003      	b.n	4161ba <_lv_memset_00+0x52>
        SET8(0);
  4161b2:	2300      	movs	r3, #0
  4161b4:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  4161b8:	3901      	subs	r1, #1
    while(len) {
  4161ba:	2900      	cmp	r1, #0
  4161bc:	d1f9      	bne.n	4161b2 <_lv_memset_00+0x4a>
}
  4161be:	4770      	bx	lr

004161c0 <_lv_memset_ff>:
    if(d_align) {
  4161c0:	f010 0303 	ands.w	r3, r0, #3
  4161c4:	d018      	beq.n	4161f8 <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  4161c6:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  4161ca:	e004      	b.n	4161d6 <_lv_memset_ff+0x16>
            SET8(0xFF);
  4161cc:	22ff      	movs	r2, #255	; 0xff
  4161ce:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  4161d2:	3901      	subs	r1, #1
            d_align--;
  4161d4:	3b01      	subs	r3, #1
        while(d_align && len) {
  4161d6:	2b00      	cmp	r3, #0
  4161d8:	bf18      	it	ne
  4161da:	2900      	cmpne	r1, #0
  4161dc:	d1f6      	bne.n	4161cc <_lv_memset_ff+0xc>
  4161de:	e00b      	b.n	4161f8 <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  4161e0:	f04f 33ff 	mov.w	r3, #4294967295
  4161e4:	6003      	str	r3, [r0, #0]
  4161e6:	6043      	str	r3, [r0, #4]
  4161e8:	6083      	str	r3, [r0, #8]
  4161ea:	60c3      	str	r3, [r0, #12]
  4161ec:	6103      	str	r3, [r0, #16]
  4161ee:	6143      	str	r3, [r0, #20]
  4161f0:	6183      	str	r3, [r0, #24]
  4161f2:	61c3      	str	r3, [r0, #28]
  4161f4:	3020      	adds	r0, #32
        len -= 32;
  4161f6:	3920      	subs	r1, #32
    while(len > 32) {
  4161f8:	2920      	cmp	r1, #32
  4161fa:	d8f1      	bhi.n	4161e0 <_lv_memset_ff+0x20>
  4161fc:	e004      	b.n	416208 <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  4161fe:	f04f 33ff 	mov.w	r3, #4294967295
  416202:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416206:	3904      	subs	r1, #4
    while(len > 4) {
  416208:	2904      	cmp	r1, #4
  41620a:	d8f8      	bhi.n	4161fe <_lv_memset_ff+0x3e>
  41620c:	e003      	b.n	416216 <_lv_memset_ff+0x56>
        SET8(0xFF);
  41620e:	23ff      	movs	r3, #255	; 0xff
  416210:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416214:	3901      	subs	r1, #1
    while(len) {
  416216:	2900      	cmp	r1, #0
  416218:	d1f9      	bne.n	41620e <_lv_memset_ff+0x4e>
}
  41621a:	4770      	bx	lr

0041621c <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  41621c:	b510      	push	{r4, lr}
  41621e:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  416220:	6840      	ldr	r0, [r0, #4]
  416222:	4b04      	ldr	r3, [pc, #16]	; (416234 <lv_task_time_remaining+0x18>)
  416224:	4798      	blx	r3
    if(elp >= task->period)
  416226:	6823      	ldr	r3, [r4, #0]
  416228:	4298      	cmp	r0, r3
  41622a:	d201      	bcs.n	416230 <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  41622c:	1a18      	subs	r0, r3, r0
  41622e:	bd10      	pop	{r4, pc}
        return 0;
  416230:	2000      	movs	r0, #0
}
  416232:	bd10      	pop	{r4, pc}
  416234:	00414829 	.word	0x00414829

00416238 <lv_task_create>:
{
  416238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41623c:	4607      	mov	r7, r0
  41623e:	4688      	mov	r8, r1
  416240:	4615      	mov	r5, r2
  416242:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416244:	4831      	ldr	r0, [pc, #196]	; (41630c <lv_task_create+0xd4>)
  416246:	4b32      	ldr	r3, [pc, #200]	; (416310 <lv_task_create+0xd8>)
  416248:	4798      	blx	r3
    if(NULL == tmp) {
  41624a:	4604      	mov	r4, r0
  41624c:	b338      	cbz	r0, 41629e <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  41624e:	7d23      	ldrb	r3, [r4, #20]
  416250:	f003 0307 	and.w	r3, r3, #7
  416254:	42ab      	cmp	r3, r5
  416256:	dd32      	ble.n	4162be <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  416258:	4621      	mov	r1, r4
  41625a:	482c      	ldr	r0, [pc, #176]	; (41630c <lv_task_create+0xd4>)
  41625c:	4b2d      	ldr	r3, [pc, #180]	; (416314 <lv_task_create+0xdc>)
  41625e:	4798      	blx	r3
        } while(tmp != NULL);
  416260:	4604      	mov	r4, r0
  416262:	2800      	cmp	r0, #0
  416264:	d1f3      	bne.n	41624e <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  416266:	4603      	mov	r3, r0
        if(tmp == NULL) {
  416268:	2b00      	cmp	r3, #0
  41626a:	d03c      	beq.n	4162e6 <lv_task_create+0xae>
    task_list_changed = true;
  41626c:	f04f 0901 	mov.w	r9, #1
  416270:	4b29      	ldr	r3, [pc, #164]	; (416318 <lv_task_create+0xe0>)
  416272:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  416276:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  41627a:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  41627c:	7d23      	ldrb	r3, [r4, #20]
  41627e:	f365 0302 	bfi	r3, r5, #0, #3
  416282:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  416284:	f04f 33ff 	mov.w	r3, #4294967295
  416288:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  41628a:	4b24      	ldr	r3, [pc, #144]	; (41631c <lv_task_create+0xe4>)
  41628c:	4798      	blx	r3
  41628e:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  416290:	60e6      	str	r6, [r4, #12]
    task_created = true;
  416292:	4b23      	ldr	r3, [pc, #140]	; (416320 <lv_task_create+0xe8>)
  416294:	f883 9000 	strb.w	r9, [r3]
}
  416298:	4620      	mov	r0, r4
  41629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  41629e:	481b      	ldr	r0, [pc, #108]	; (41630c <lv_task_create+0xd4>)
  4162a0:	4b20      	ldr	r3, [pc, #128]	; (416324 <lv_task_create+0xec>)
  4162a2:	4798      	blx	r3
  4162a4:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  4162a6:	4b20      	ldr	r3, [pc, #128]	; (416328 <lv_task_create+0xf0>)
  4162a8:	4798      	blx	r3
  4162aa:	b928      	cbnz	r0, 4162b8 <lv_task_create+0x80>
  4162ac:	4622      	mov	r2, r4
  4162ae:	2300      	movs	r3, #0
  4162b0:	481e      	ldr	r0, [pc, #120]	; (41632c <lv_task_create+0xf4>)
  4162b2:	491f      	ldr	r1, [pc, #124]	; (416330 <lv_task_create+0xf8>)
  4162b4:	4788      	blx	r1
  4162b6:	e7fe      	b.n	4162b6 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  4162b8:	2c00      	cmp	r4, #0
  4162ba:	d1d7      	bne.n	41626c <lv_task_create+0x34>
  4162bc:	e7ec      	b.n	416298 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4162be:	4621      	mov	r1, r4
  4162c0:	4812      	ldr	r0, [pc, #72]	; (41630c <lv_task_create+0xd4>)
  4162c2:	4b1c      	ldr	r3, [pc, #112]	; (416334 <lv_task_create+0xfc>)
  4162c4:	4798      	blx	r3
  4162c6:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  4162c8:	4b17      	ldr	r3, [pc, #92]	; (416328 <lv_task_create+0xf0>)
  4162ca:	4798      	blx	r3
  4162cc:	b128      	cbz	r0, 4162da <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  4162ce:	f1b9 0f00 	cmp.w	r9, #0
  4162d2:	d018      	beq.n	416306 <lv_task_create+0xce>
  4162d4:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  4162d6:	464c      	mov	r4, r9
  4162d8:	e7c6      	b.n	416268 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  4162da:	464a      	mov	r2, r9
  4162dc:	2300      	movs	r3, #0
  4162de:	4813      	ldr	r0, [pc, #76]	; (41632c <lv_task_create+0xf4>)
  4162e0:	4913      	ldr	r1, [pc, #76]	; (416330 <lv_task_create+0xf8>)
  4162e2:	4788      	blx	r1
  4162e4:	e7fe      	b.n	4162e4 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  4162e6:	4809      	ldr	r0, [pc, #36]	; (41630c <lv_task_create+0xd4>)
  4162e8:	4b13      	ldr	r3, [pc, #76]	; (416338 <lv_task_create+0x100>)
  4162ea:	4798      	blx	r3
  4162ec:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  4162ee:	4b0e      	ldr	r3, [pc, #56]	; (416328 <lv_task_create+0xf0>)
  4162f0:	4798      	blx	r3
  4162f2:	b928      	cbnz	r0, 416300 <lv_task_create+0xc8>
  4162f4:	4622      	mov	r2, r4
  4162f6:	2300      	movs	r3, #0
  4162f8:	480c      	ldr	r0, [pc, #48]	; (41632c <lv_task_create+0xf4>)
  4162fa:	490d      	ldr	r1, [pc, #52]	; (416330 <lv_task_create+0xf8>)
  4162fc:	4788      	blx	r1
  4162fe:	e7fe      	b.n	4162fe <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  416300:	2c00      	cmp	r4, #0
  416302:	d1b3      	bne.n	41626c <lv_task_create+0x34>
  416304:	e7c8      	b.n	416298 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  416306:	464c      	mov	r4, r9
  416308:	e7c6      	b.n	416298 <lv_task_create+0x60>
  41630a:	bf00      	nop
  41630c:	2043a16c 	.word	0x2043a16c
  416310:	0041583d 	.word	0x0041583d
  416314:	00415851 	.word	0x00415851
  416318:	2041478f 	.word	0x2041478f
  41631c:	0041480d 	.word	0x0041480d
  416320:	2041478d 	.word	0x2041478d
  416324:	004157a5 	.word	0x004157a5
  416328:	0041552d 	.word	0x0041552d
  41632c:	004235f0 	.word	0x004235f0
  416330:	00415539 	.word	0x00415539
  416334:	0041586d 	.word	0x0041586d
  416338:	004157f1 	.word	0x004157f1

0041633c <lv_task_del>:
{
  41633c:	b510      	push	{r4, lr}
  41633e:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  416340:	4601      	mov	r1, r0
  416342:	4809      	ldr	r0, [pc, #36]	; (416368 <lv_task_del+0x2c>)
  416344:	4b09      	ldr	r3, [pc, #36]	; (41636c <lv_task_del+0x30>)
  416346:	4798      	blx	r3
    task_list_changed = true;
  416348:	2201      	movs	r2, #1
  41634a:	4b09      	ldr	r3, [pc, #36]	; (416370 <lv_task_del+0x34>)
  41634c:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  41634e:	4620      	mov	r0, r4
  416350:	4b08      	ldr	r3, [pc, #32]	; (416374 <lv_task_del+0x38>)
  416352:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  416354:	4b08      	ldr	r3, [pc, #32]	; (416378 <lv_task_del+0x3c>)
  416356:	681b      	ldr	r3, [r3, #0]
  416358:	429c      	cmp	r4, r3
  41635a:	d000      	beq.n	41635e <lv_task_del+0x22>
  41635c:	bd10      	pop	{r4, pc}
  41635e:	2201      	movs	r2, #1
  416360:	4b06      	ldr	r3, [pc, #24]	; (41637c <lv_task_del+0x40>)
  416362:	701a      	strb	r2, [r3, #0]
}
  416364:	e7fa      	b.n	41635c <lv_task_del+0x20>
  416366:	bf00      	nop
  416368:	2043a16c 	.word	0x2043a16c
  41636c:	004158f9 	.word	0x004158f9
  416370:	2041478f 	.word	0x2041478f
  416374:	00415cf9 	.word	0x00415cf9
  416378:	2043a23c 	.word	0x2043a23c
  41637c:	2041478e 	.word	0x2041478e

00416380 <lv_task_exec>:
{
  416380:	b510      	push	{r4, lr}
  416382:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  416384:	4b0e      	ldr	r3, [pc, #56]	; (4163c0 <lv_task_exec+0x40>)
  416386:	4798      	blx	r3
  416388:	b108      	cbz	r0, 41638e <lv_task_exec+0xe>
    bool exec = false;
  41638a:	2000      	movs	r0, #0
  41638c:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  41638e:	4b0d      	ldr	r3, [pc, #52]	; (4163c4 <lv_task_exec+0x44>)
  416390:	4798      	blx	r3
  416392:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  416394:	68a3      	ldr	r3, [r4, #8]
  416396:	b10b      	cbz	r3, 41639c <lv_task_exec+0x1c>
  416398:	4620      	mov	r0, r4
  41639a:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  41639c:	4b0a      	ldr	r3, [pc, #40]	; (4163c8 <lv_task_exec+0x48>)
  41639e:	7818      	ldrb	r0, [r3, #0]
  4163a0:	b938      	cbnz	r0, 4163b2 <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  4163a2:	6923      	ldr	r3, [r4, #16]
  4163a4:	2b00      	cmp	r3, #0
  4163a6:	dd01      	ble.n	4163ac <lv_task_exec+0x2c>
                task->repeat_count--;
  4163a8:	3b01      	subs	r3, #1
  4163aa:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  4163ac:	6923      	ldr	r3, [r4, #16]
  4163ae:	b10b      	cbz	r3, 4163b4 <lv_task_exec+0x34>
        exec = true;
  4163b0:	2001      	movs	r0, #1
}
  4163b2:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  4163b4:	4620      	mov	r0, r4
  4163b6:	4b05      	ldr	r3, [pc, #20]	; (4163cc <lv_task_exec+0x4c>)
  4163b8:	4798      	blx	r3
        exec = true;
  4163ba:	2001      	movs	r0, #1
  4163bc:	bd10      	pop	{r4, pc}
  4163be:	bf00      	nop
  4163c0:	0041621d 	.word	0x0041621d
  4163c4:	0041480d 	.word	0x0041480d
  4163c8:	2041478e 	.word	0x2041478e
  4163cc:	0041633d 	.word	0x0041633d

004163d0 <lv_task_handler>:
{
  4163d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  4163d2:	4b5e      	ldr	r3, [pc, #376]	; (41654c <lv_task_handler+0x17c>)
  4163d4:	781b      	ldrb	r3, [r3, #0]
  4163d6:	2b00      	cmp	r3, #0
  4163d8:	f040 80b5 	bne.w	416546 <lv_task_handler+0x176>
    already_running = true;
  4163dc:	2201      	movs	r2, #1
  4163de:	4b5b      	ldr	r3, [pc, #364]	; (41654c <lv_task_handler+0x17c>)
  4163e0:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  4163e2:	4b5b      	ldr	r3, [pc, #364]	; (416550 <lv_task_handler+0x180>)
  4163e4:	781d      	ldrb	r5, [r3, #0]
  4163e6:	b925      	cbnz	r5, 4163f2 <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  4163e8:	2200      	movs	r2, #0
  4163ea:	4b58      	ldr	r3, [pc, #352]	; (41654c <lv_task_handler+0x17c>)
  4163ec:	701a      	strb	r2, [r3, #0]
        return 1;
  4163ee:	2501      	movs	r5, #1
  4163f0:	e0aa      	b.n	416548 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  4163f2:	4b58      	ldr	r3, [pc, #352]	; (416554 <lv_task_handler+0x184>)
  4163f4:	4798      	blx	r3
  4163f6:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  4163f8:	2400      	movs	r4, #0
  4163fa:	e04e      	b.n	41649a <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  4163fc:	4b56      	ldr	r3, [pc, #344]	; (416558 <lv_task_handler+0x188>)
  4163fe:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  416400:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  416402:	e00f      	b.n	416424 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  416404:	4b55      	ldr	r3, [pc, #340]	; (41655c <lv_task_handler+0x18c>)
  416406:	4798      	blx	r3
            if(task_created || task_deleted) {
  416408:	4b55      	ldr	r3, [pc, #340]	; (416560 <lv_task_handler+0x190>)
  41640a:	781b      	ldrb	r3, [r3, #0]
  41640c:	2b00      	cmp	r3, #0
  41640e:	d153      	bne.n	4164b8 <lv_task_handler+0xe8>
  416410:	4b54      	ldr	r3, [pc, #336]	; (416564 <lv_task_handler+0x194>)
  416412:	781b      	ldrb	r3, [r3, #0]
  416414:	2b00      	cmp	r3, #0
  416416:	d151      	bne.n	4164bc <lv_task_handler+0xec>
            if(task_list_changed) {
  416418:	4a53      	ldr	r2, [pc, #332]	; (416568 <lv_task_handler+0x198>)
  41641a:	7812      	ldrb	r2, [r2, #0]
  41641c:	2a00      	cmp	r2, #0
  41641e:	d14f      	bne.n	4164c0 <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  416420:	4b4d      	ldr	r3, [pc, #308]	; (416558 <lv_task_handler+0x188>)
  416422:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  416424:	4b4c      	ldr	r3, [pc, #304]	; (416558 <lv_task_handler+0x188>)
  416426:	6819      	ldr	r1, [r3, #0]
  416428:	2900      	cmp	r1, #0
  41642a:	d034      	beq.n	416496 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  41642c:	484f      	ldr	r0, [pc, #316]	; (41656c <lv_task_handler+0x19c>)
  41642e:	4b50      	ldr	r3, [pc, #320]	; (416570 <lv_task_handler+0x1a0>)
  416430:	4798      	blx	r3
  416432:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  416434:	4b48      	ldr	r3, [pc, #288]	; (416558 <lv_task_handler+0x188>)
  416436:	6818      	ldr	r0, [r3, #0]
  416438:	7d03      	ldrb	r3, [r0, #20]
  41643a:	f013 0307 	ands.w	r3, r3, #7
  41643e:	d039      	beq.n	4164b4 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  416440:	4284      	cmp	r4, r0
  416442:	d0db      	beq.n	4163fc <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  416444:	2b05      	cmp	r3, #5
  416446:	d0dd      	beq.n	416404 <lv_task_handler+0x34>
            else if(task_interrupter) {
  416448:	b1b4      	cbz	r4, 416478 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  41644a:	7d02      	ldrb	r2, [r0, #20]
  41644c:	f002 0207 	and.w	r2, r2, #7
  416450:	7d23      	ldrb	r3, [r4, #20]
  416452:	f003 0307 	and.w	r3, r3, #7
  416456:	429a      	cmp	r2, r3
  416458:	ddd6      	ble.n	416408 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  41645a:	4b40      	ldr	r3, [pc, #256]	; (41655c <lv_task_handler+0x18c>)
  41645c:	4798      	blx	r3
  41645e:	2800      	cmp	r0, #0
  416460:	d0d2      	beq.n	416408 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  416462:	4b3f      	ldr	r3, [pc, #252]	; (416560 <lv_task_handler+0x190>)
  416464:	781b      	ldrb	r3, [r3, #0]
  416466:	2b00      	cmp	r3, #0
  416468:	d1ce      	bne.n	416408 <lv_task_handler+0x38>
  41646a:	4b3e      	ldr	r3, [pc, #248]	; (416564 <lv_task_handler+0x194>)
  41646c:	781b      	ldrb	r3, [r3, #0]
  41646e:	2b00      	cmp	r3, #0
  416470:	d1ca      	bne.n	416408 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  416472:	4a39      	ldr	r2, [pc, #228]	; (416558 <lv_task_handler+0x188>)
  416474:	6814      	ldr	r4, [r2, #0]
                            break;
  416476:	e00f      	b.n	416498 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  416478:	4b38      	ldr	r3, [pc, #224]	; (41655c <lv_task_handler+0x18c>)
  41647a:	4798      	blx	r3
  41647c:	2800      	cmp	r0, #0
  41647e:	d0c3      	beq.n	416408 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  416480:	4b37      	ldr	r3, [pc, #220]	; (416560 <lv_task_handler+0x190>)
  416482:	781b      	ldrb	r3, [r3, #0]
  416484:	2b00      	cmp	r3, #0
  416486:	d1bf      	bne.n	416408 <lv_task_handler+0x38>
  416488:	4b36      	ldr	r3, [pc, #216]	; (416564 <lv_task_handler+0x194>)
  41648a:	781b      	ldrb	r3, [r3, #0]
  41648c:	2b00      	cmp	r3, #0
  41648e:	d1bb      	bne.n	416408 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  416490:	4a31      	ldr	r2, [pc, #196]	; (416558 <lv_task_handler+0x188>)
  416492:	6814      	ldr	r4, [r2, #0]
                        break;
  416494:	e000      	b.n	416498 <lv_task_handler+0xc8>
        end_flag                 = true;
  416496:	462b      	mov	r3, r5
    } while(!end_flag);
  416498:	b9a3      	cbnz	r3, 4164c4 <lv_task_handler+0xf4>
        task_deleted             = false;
  41649a:	2300      	movs	r3, #0
  41649c:	4a31      	ldr	r2, [pc, #196]	; (416564 <lv_task_handler+0x194>)
  41649e:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  4164a0:	4a2f      	ldr	r2, [pc, #188]	; (416560 <lv_task_handler+0x190>)
  4164a2:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  4164a4:	4a30      	ldr	r2, [pc, #192]	; (416568 <lv_task_handler+0x198>)
  4164a6:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4164a8:	4830      	ldr	r0, [pc, #192]	; (41656c <lv_task_handler+0x19c>)
  4164aa:	4b32      	ldr	r3, [pc, #200]	; (416574 <lv_task_handler+0x1a4>)
  4164ac:	4798      	blx	r3
  4164ae:	4b2a      	ldr	r3, [pc, #168]	; (416558 <lv_task_handler+0x188>)
  4164b0:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4164b2:	e7b7      	b.n	416424 <lv_task_handler+0x54>
        end_flag                 = true;
  4164b4:	462b      	mov	r3, r5
  4164b6:	e7ef      	b.n	416498 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4164b8:	2400      	movs	r4, #0
  4164ba:	e7ed      	b.n	416498 <lv_task_handler+0xc8>
  4164bc:	2400      	movs	r4, #0
  4164be:	e7eb      	b.n	416498 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  4164c0:	2400      	movs	r4, #0
  4164c2:	e7e9      	b.n	416498 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4164c4:	4829      	ldr	r0, [pc, #164]	; (41656c <lv_task_handler+0x19c>)
  4164c6:	4b2b      	ldr	r3, [pc, #172]	; (416574 <lv_task_handler+0x1a4>)
  4164c8:	4798      	blx	r3
  4164ca:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  4164cc:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4164d0:	e004      	b.n	4164dc <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  4164d2:	4621      	mov	r1, r4
  4164d4:	4825      	ldr	r0, [pc, #148]	; (41656c <lv_task_handler+0x19c>)
  4164d6:	4b26      	ldr	r3, [pc, #152]	; (416570 <lv_task_handler+0x1a0>)
  4164d8:	4798      	blx	r3
  4164da:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  4164dc:	b154      	cbz	r4, 4164f4 <lv_task_handler+0x124>
  4164de:	7d23      	ldrb	r3, [r4, #20]
  4164e0:	f013 0f07 	tst.w	r3, #7
  4164e4:	d006      	beq.n	4164f4 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  4164e6:	4620      	mov	r0, r4
  4164e8:	4b23      	ldr	r3, [pc, #140]	; (416578 <lv_task_handler+0x1a8>)
  4164ea:	4798      	blx	r3
        if(delay < time_till_next)
  4164ec:	4285      	cmp	r5, r0
  4164ee:	d9f0      	bls.n	4164d2 <lv_task_handler+0x102>
            time_till_next = delay;
  4164f0:	4605      	mov	r5, r0
  4164f2:	e7ee      	b.n	4164d2 <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  4164f4:	4630      	mov	r0, r6
  4164f6:	4c21      	ldr	r4, [pc, #132]	; (41657c <lv_task_handler+0x1ac>)
  4164f8:	47a0      	blx	r4
  4164fa:	4a21      	ldr	r2, [pc, #132]	; (416580 <lv_task_handler+0x1b0>)
  4164fc:	6813      	ldr	r3, [r2, #0]
  4164fe:	4403      	add	r3, r0
  416500:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  416502:	4b20      	ldr	r3, [pc, #128]	; (416584 <lv_task_handler+0x1b4>)
  416504:	6818      	ldr	r0, [r3, #0]
  416506:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  416508:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  41650c:	d315      	bcc.n	41653a <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  41650e:	4b1c      	ldr	r3, [pc, #112]	; (416580 <lv_task_handler+0x1b0>)
  416510:	681a      	ldr	r2, [r3, #0]
  416512:	2364      	movs	r3, #100	; 0x64
  416514:	fb03 f302 	mul.w	r3, r3, r2
  416518:	fbb3 f3f0 	udiv	r3, r3, r0
  41651c:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  41651e:	2b64      	cmp	r3, #100	; 0x64
  416520:	d80f      	bhi.n	416542 <lv_task_handler+0x172>
  416522:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  416526:	b2db      	uxtb	r3, r3
  416528:	4a17      	ldr	r2, [pc, #92]	; (416588 <lv_task_handler+0x1b8>)
  41652a:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  41652c:	2200      	movs	r2, #0
  41652e:	4b14      	ldr	r3, [pc, #80]	; (416580 <lv_task_handler+0x1b0>)
  416530:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  416532:	4b08      	ldr	r3, [pc, #32]	; (416554 <lv_task_handler+0x184>)
  416534:	4798      	blx	r3
  416536:	4b13      	ldr	r3, [pc, #76]	; (416584 <lv_task_handler+0x1b4>)
  416538:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  41653a:	2200      	movs	r2, #0
  41653c:	4b03      	ldr	r3, [pc, #12]	; (41654c <lv_task_handler+0x17c>)
  41653e:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  416540:	e002      	b.n	416548 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  416542:	2300      	movs	r3, #0
  416544:	e7f0      	b.n	416528 <lv_task_handler+0x158>
    if(already_running) return 1;
  416546:	2501      	movs	r5, #1
}
  416548:	4628      	mov	r0, r5
  41654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41654c:	2041477c 	.word	0x2041477c
  416550:	2041478c 	.word	0x2041478c
  416554:	0041480d 	.word	0x0041480d
  416558:	2043a23c 	.word	0x2043a23c
  41655c:	00416381 	.word	0x00416381
  416560:	2041478d 	.word	0x2041478d
  416564:	2041478e 	.word	0x2041478e
  416568:	2041478f 	.word	0x2041478f
  41656c:	2043a16c 	.word	0x2043a16c
  416570:	00415851 	.word	0x00415851
  416574:	0041583d 	.word	0x0041583d
  416578:	0041621d 	.word	0x0041621d
  41657c:	00414829 	.word	0x00414829
  416580:	20414780 	.word	0x20414780
  416584:	20414788 	.word	0x20414788
  416588:	20414784 	.word	0x20414784

0041658c <lv_task_set_prio>:
{
  41658c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  41658e:	7d03      	ldrb	r3, [r0, #20]
  416590:	f003 0307 	and.w	r3, r3, #7
  416594:	428b      	cmp	r3, r1
  416596:	d021      	beq.n	4165dc <lv_task_set_prio+0x50>
  416598:	460d      	mov	r5, r1
  41659a:	460f      	mov	r7, r1
  41659c:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41659e:	4813      	ldr	r0, [pc, #76]	; (4165ec <lv_task_set_prio+0x60>)
  4165a0:	4b13      	ldr	r3, [pc, #76]	; (4165f0 <lv_task_set_prio+0x64>)
  4165a2:	4798      	blx	r3
  4165a4:	4604      	mov	r4, r0
  4165a6:	b18c      	cbz	r4, 4165cc <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  4165a8:	7d23      	ldrb	r3, [r4, #20]
  4165aa:	f003 0307 	and.w	r3, r3, #7
  4165ae:	429d      	cmp	r5, r3
  4165b0:	da05      	bge.n	4165be <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  4165b2:	4621      	mov	r1, r4
  4165b4:	480d      	ldr	r0, [pc, #52]	; (4165ec <lv_task_set_prio+0x60>)
  4165b6:	4b0f      	ldr	r3, [pc, #60]	; (4165f4 <lv_task_set_prio+0x68>)
  4165b8:	4798      	blx	r3
  4165ba:	4604      	mov	r4, r0
  4165bc:	e7f3      	b.n	4165a6 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  4165be:	42b4      	cmp	r4, r6
  4165c0:	d004      	beq.n	4165cc <lv_task_set_prio+0x40>
  4165c2:	4622      	mov	r2, r4
  4165c4:	4631      	mov	r1, r6
  4165c6:	4809      	ldr	r0, [pc, #36]	; (4165ec <lv_task_set_prio+0x60>)
  4165c8:	4b0b      	ldr	r3, [pc, #44]	; (4165f8 <lv_task_set_prio+0x6c>)
  4165ca:	4798      	blx	r3
    if(i == NULL) {
  4165cc:	b13c      	cbz	r4, 4165de <lv_task_set_prio+0x52>
    task_list_changed = true;
  4165ce:	2201      	movs	r2, #1
  4165d0:	4b0a      	ldr	r3, [pc, #40]	; (4165fc <lv_task_set_prio+0x70>)
  4165d2:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  4165d4:	7d33      	ldrb	r3, [r6, #20]
  4165d6:	f367 0302 	bfi	r3, r7, #0, #3
  4165da:	7533      	strb	r3, [r6, #20]
  4165dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  4165de:	2200      	movs	r2, #0
  4165e0:	4631      	mov	r1, r6
  4165e2:	4802      	ldr	r0, [pc, #8]	; (4165ec <lv_task_set_prio+0x60>)
  4165e4:	4b04      	ldr	r3, [pc, #16]	; (4165f8 <lv_task_set_prio+0x6c>)
  4165e6:	4798      	blx	r3
  4165e8:	e7f1      	b.n	4165ce <lv_task_set_prio+0x42>
  4165ea:	bf00      	nop
  4165ec:	2043a16c 	.word	0x2043a16c
  4165f0:	0041583d 	.word	0x0041583d
  4165f4:	00415851 	.word	0x00415851
  4165f8:	00415a2d 	.word	0x00415a2d
  4165fc:	2041478f 	.word	0x2041478f

00416600 <lv_task_ready>:
{
  416600:	b510      	push	{r4, lr}
  416602:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  416604:	4b03      	ldr	r3, [pc, #12]	; (416614 <lv_task_ready+0x14>)
  416606:	4798      	blx	r3
  416608:	6823      	ldr	r3, [r4, #0]
  41660a:	1ac0      	subs	r0, r0, r3
  41660c:	3801      	subs	r0, #1
  41660e:	6060      	str	r0, [r4, #4]
  416610:	bd10      	pop	{r4, pc}
  416612:	bf00      	nop
  416614:	0041480d 	.word	0x0041480d

00416618 <lv_task_enable>:
    lv_task_run = en;
  416618:	4b01      	ldr	r3, [pc, #4]	; (416620 <lv_task_enable+0x8>)
  41661a:	7018      	strb	r0, [r3, #0]
  41661c:	4770      	bx	lr
  41661e:	bf00      	nop
  416620:	2041478c 	.word	0x2041478c

00416624 <_lv_task_core_init>:
{
  416624:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  416626:	2118      	movs	r1, #24
  416628:	4803      	ldr	r0, [pc, #12]	; (416638 <_lv_task_core_init+0x14>)
  41662a:	4b04      	ldr	r3, [pc, #16]	; (41663c <_lv_task_core_init+0x18>)
  41662c:	4798      	blx	r3
    lv_task_enable(true);
  41662e:	2001      	movs	r0, #1
  416630:	4b03      	ldr	r3, [pc, #12]	; (416640 <_lv_task_core_init+0x1c>)
  416632:	4798      	blx	r3
  416634:	bd08      	pop	{r3, pc}
  416636:	bf00      	nop
  416638:	2043a16c 	.word	0x2043a16c
  41663c:	00415793 	.word	0x00415793
  416640:	00416619 	.word	0x00416619

00416644 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  416644:	b430      	push	{r4, r5}
  416646:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  416648:	2300      	movs	r3, #0
  41664a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  41664c:	460c      	mov	r4, r1
  41664e:	b151      	cbz	r1, 416666 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  416650:	6822      	ldr	r2, [r4, #0]
  416652:	5c83      	ldrb	r3, [r0, r2]
  416654:	f013 0f80 	tst.w	r3, #128	; 0x80
  416658:	d107      	bne.n	41666a <lv_txt_utf8_next+0x26>
        result = txt[*i];
  41665a:	4618      	mov	r0, r3
        (*i)++;
  41665c:	3201      	adds	r2, #1
  41665e:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  416660:	b002      	add	sp, #8
  416662:	bc30      	pop	{r4, r5}
  416664:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  416666:	ac01      	add	r4, sp, #4
  416668:	e7f2      	b.n	416650 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  41666a:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  41666e:	29c0      	cmp	r1, #192	; 0xc0
  416670:	d00b      	beq.n	41668a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  416672:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  416676:	29e0      	cmp	r1, #224	; 0xe0
  416678:	d019      	beq.n	4166ae <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  41667a:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  41667e:	29f0      	cmp	r1, #240	; 0xf0
  416680:	d033      	beq.n	4166ea <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  416682:	3201      	adds	r2, #1
  416684:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  416686:	2000      	movs	r0, #0
  416688:	e7ea      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  41668a:	019b      	lsls	r3, r3, #6
  41668c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  416690:	3201      	adds	r2, #1
  416692:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416694:	5c80      	ldrb	r0, [r0, r2]
  416696:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  41669a:	2980      	cmp	r1, #128	; 0x80
  41669c:	d001      	beq.n	4166a2 <lv_txt_utf8_next+0x5e>
  41669e:	2000      	movs	r0, #0
  4166a0:	e7de      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4166a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  4166a6:	4418      	add	r0, r3
            (*i)++;
  4166a8:	3201      	adds	r2, #1
  4166aa:	6022      	str	r2, [r4, #0]
  4166ac:	e7d8      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  4166ae:	031b      	lsls	r3, r3, #12
  4166b0:	b29b      	uxth	r3, r3
            (*i)++;
  4166b2:	3201      	adds	r2, #1
  4166b4:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4166b6:	5c81      	ldrb	r1, [r0, r2]
  4166b8:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4166bc:	2d80      	cmp	r5, #128	; 0x80
  4166be:	d001      	beq.n	4166c4 <lv_txt_utf8_next+0x80>
  4166c0:	2000      	movs	r0, #0
  4166c2:	e7cd      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  4166c4:	0189      	lsls	r1, r1, #6
  4166c6:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  4166ca:	440b      	add	r3, r1
            (*i)++;
  4166cc:	3201      	adds	r2, #1
  4166ce:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4166d0:	5c81      	ldrb	r1, [r0, r2]
  4166d2:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  4166d6:	2880      	cmp	r0, #128	; 0x80
  4166d8:	d001      	beq.n	4166de <lv_txt_utf8_next+0x9a>
  4166da:	2000      	movs	r0, #0
  4166dc:	e7c0      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  4166de:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4166e2:	1858      	adds	r0, r3, r1
            (*i)++;
  4166e4:	3201      	adds	r2, #1
  4166e6:	6022      	str	r2, [r4, #0]
  4166e8:	e7ba      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  4166ea:	049b      	lsls	r3, r3, #18
  4166ec:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  4166f0:	3201      	adds	r2, #1
  4166f2:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4166f4:	5c81      	ldrb	r1, [r0, r2]
  4166f6:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4166fa:	2d80      	cmp	r5, #128	; 0x80
  4166fc:	d001      	beq.n	416702 <lv_txt_utf8_next+0xbe>
  4166fe:	2000      	movs	r0, #0
  416700:	e7ae      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  416702:	0309      	lsls	r1, r1, #12
  416704:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  416708:	430b      	orrs	r3, r1
            (*i)++;
  41670a:	3201      	adds	r2, #1
  41670c:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  41670e:	5c81      	ldrb	r1, [r0, r2]
  416710:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  416714:	2d80      	cmp	r5, #128	; 0x80
  416716:	d001      	beq.n	41671c <lv_txt_utf8_next+0xd8>
  416718:	2000      	movs	r0, #0
  41671a:	e7a1      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  41671c:	0189      	lsls	r1, r1, #6
  41671e:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  416722:	440b      	add	r3, r1
            (*i)++;
  416724:	3201      	adds	r2, #1
  416726:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416728:	5c81      	ldrb	r1, [r0, r2]
  41672a:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  41672e:	2880      	cmp	r0, #128	; 0x80
  416730:	d001      	beq.n	416736 <lv_txt_utf8_next+0xf2>
  416732:	2000      	movs	r0, #0
  416734:	e794      	b.n	416660 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  416736:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  41673a:	1858      	adds	r0, r3, r1
            (*i)++;
  41673c:	3201      	adds	r2, #1
  41673e:	6022      	str	r2, [r4, #0]
  416740:	e78e      	b.n	416660 <lv_txt_utf8_next+0x1c>
	...

00416744 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  416744:	b570      	push	{r4, r5, r6, lr}
  416746:	b082      	sub	sp, #8
  416748:	4606      	mov	r6, r0
  41674a:	460d      	mov	r5, r1
    uint32_t i        = 0;
  41674c:	2400      	movs	r4, #0
  41674e:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  416750:	e005      	b.n	41675e <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  416752:	4b06      	ldr	r3, [pc, #24]	; (41676c <lv_txt_utf8_get_char_id+0x28>)
  416754:	681b      	ldr	r3, [r3, #0]
  416756:	a901      	add	r1, sp, #4
  416758:	4630      	mov	r0, r6
  41675a:	4798      	blx	r3
        char_cnt++;
  41675c:	3401      	adds	r4, #1
    while(i < byte_id) {
  41675e:	9b01      	ldr	r3, [sp, #4]
  416760:	42ab      	cmp	r3, r5
  416762:	d3f6      	bcc.n	416752 <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  416764:	4620      	mov	r0, r4
  416766:	b002      	add	sp, #8
  416768:	bd70      	pop	{r4, r5, r6, pc}
  41676a:	bf00      	nop
  41676c:	20400054 	.word	0x20400054

00416770 <_lv_txt_is_cmd>:
{
  416770:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  416772:	2923      	cmp	r1, #35	; 0x23
  416774:	d004      	beq.n	416780 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  416776:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  416778:	7813      	ldrb	r3, [r2, #0]
  41677a:	2b01      	cmp	r3, #1
  41677c:	d014      	beq.n	4167a8 <_lv_txt_is_cmd+0x38>
}
  41677e:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  416780:	7803      	ldrb	r3, [r0, #0]
  416782:	b91b      	cbnz	r3, 41678c <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  416784:	2301      	movs	r3, #1
  416786:	7003      	strb	r3, [r0, #0]
            ret    = true;
  416788:	4618      	mov	r0, r3
  41678a:	e7f5      	b.n	416778 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  41678c:	2b01      	cmp	r3, #1
  41678e:	d003      	beq.n	416798 <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  416790:	2b02      	cmp	r3, #2
  416792:	d005      	beq.n	4167a0 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  416794:	2000      	movs	r0, #0
  416796:	e7ef      	b.n	416778 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  416798:	2300      	movs	r3, #0
  41679a:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  41679c:	4618      	mov	r0, r3
  41679e:	e7eb      	b.n	416778 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  4167a0:	2300      	movs	r3, #0
  4167a2:	7003      	strb	r3, [r0, #0]
            ret    = true;
  4167a4:	2001      	movs	r0, #1
  4167a6:	e7e7      	b.n	416778 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  4167a8:	2920      	cmp	r1, #32
  4167aa:	d001      	beq.n	4167b0 <_lv_txt_is_cmd+0x40>
        ret = true;
  4167ac:	2001      	movs	r0, #1
  4167ae:	e7e6      	b.n	41677e <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  4167b0:	2302      	movs	r3, #2
  4167b2:	7013      	strb	r3, [r2, #0]
        ret = true;
  4167b4:	2001      	movs	r0, #1
  4167b6:	4770      	bx	lr

004167b8 <lv_txt_get_next_word>:
{
  4167b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4167bc:	b089      	sub	sp, #36	; 0x24
  4167be:	9103      	str	r1, [sp, #12]
  4167c0:	9202      	str	r2, [sp, #8]
  4167c2:	9304      	str	r3, [sp, #16]
  4167c4:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  4167c8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  4167cc:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  4167ce:	2800      	cmp	r0, #0
  4167d0:	f000 808f 	beq.w	4168f2 <lv_txt_get_next_word+0x13a>
  4167d4:	4607      	mov	r7, r0
  4167d6:	7803      	ldrb	r3, [r0, #0]
  4167d8:	2b00      	cmp	r3, #0
  4167da:	f000 808d 	beq.w	4168f8 <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  4167de:	2900      	cmp	r1, #0
  4167e0:	f000 8090 	beq.w	416904 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  4167e4:	f01b 0f02 	tst.w	fp, #2
  4167e8:	d002      	beq.n	4167f0 <lv_txt_get_next_word+0x38>
  4167ea:	f647 4318 	movw	r3, #31768	; 0x7c18
  4167ee:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  4167f0:	2600      	movs	r6, #0
  4167f2:	9607      	str	r6, [sp, #28]
  4167f4:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  4167f6:	4b47      	ldr	r3, [pc, #284]	; (416914 <lv_txt_get_next_word+0x15c>)
  4167f8:	681b      	ldr	r3, [r3, #0]
  4167fa:	a907      	add	r1, sp, #28
  4167fc:	4638      	mov	r0, r7
  4167fe:	4798      	blx	r3
  416800:	4604      	mov	r4, r0
    i_next_next = i_next;
  416802:	9b07      	ldr	r3, [sp, #28]
  416804:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  416806:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  41680a:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  41680c:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  41680e:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  416810:	e039      	b.n	416886 <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  416812:	9a01      	ldr	r2, [sp, #4]
  416814:	4621      	mov	r1, r4
  416816:	9803      	ldr	r0, [sp, #12]
  416818:	4b3f      	ldr	r3, [pc, #252]	; (416918 <lv_txt_get_next_word+0x160>)
  41681a:	4798      	blx	r3
  41681c:	b203      	sxth	r3, r0
        cur_w += letter_w;
  41681e:	4428      	add	r0, r5
  416820:	b280      	uxth	r0, r0
  416822:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  416824:	2b00      	cmp	r3, #0
  416826:	dd02      	ble.n	41682e <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  416828:	9b02      	ldr	r3, [sp, #8]
  41682a:	18c5      	adds	r5, r0, r3
  41682c:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  41682e:	f1b8 3fff 	cmp.w	r8, #4294967295
  416832:	d00f      	beq.n	416854 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  416834:	2c0d      	cmp	r4, #13
  416836:	bf18      	it	ne
  416838:	2c0a      	cmpne	r4, #10
  41683a:	bf0c      	ite	eq
  41683c:	2101      	moveq	r1, #1
  41683e:	2100      	movne	r1, #0
  416840:	d038      	beq.n	4168b4 <lv_txt_get_next_word+0xfc>
  416842:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  416844:	4a35      	ldr	r2, [pc, #212]	; (41691c <lv_txt_get_next_word+0x164>)
  416846:	5cd2      	ldrb	r2, [r2, r3]
  416848:	b162      	cbz	r2, 416864 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  41684a:	4294      	cmp	r4, r2
  41684c:	d009      	beq.n	416862 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  41684e:	3301      	adds	r3, #1
  416850:	b2db      	uxtb	r3, r3
  416852:	e7f7      	b.n	416844 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  416854:	9b02      	ldr	r3, [sp, #8]
  416856:	1aeb      	subs	r3, r5, r3
  416858:	9a04      	ldr	r2, [sp, #16]
  41685a:	4293      	cmp	r3, r2
  41685c:	ddea      	ble.n	416834 <lv_txt_get_next_word+0x7c>
            break_index = i;
  41685e:	46b0      	mov	r8, r6
  416860:	e7e8      	b.n	416834 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  416862:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  416864:	bb31      	cbnz	r1, 4168b4 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  416866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416868:	3300      	adds	r3, #0
  41686a:	bf18      	it	ne
  41686c:	2301      	movne	r3, #1
  41686e:	f1b8 3fff 	cmp.w	r8, #4294967295
  416872:	bf18      	it	ne
  416874:	2300      	movne	r3, #0
  416876:	b10b      	cbz	r3, 41687c <lv_txt_get_next_word+0xc4>
  416878:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  41687a:	601d      	str	r5, [r3, #0]
        i = i_next;
  41687c:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  41687e:	9b06      	ldr	r3, [sp, #24]
  416880:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  416882:	46d1      	mov	r9, sl
  416884:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  416886:	5dbb      	ldrb	r3, [r7, r6]
  416888:	b1e3      	cbz	r3, 4168c4 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  41688a:	4b22      	ldr	r3, [pc, #136]	; (416914 <lv_txt_get_next_word+0x15c>)
  41688c:	681b      	ldr	r3, [r3, #0]
  41688e:	a906      	add	r1, sp, #24
  416890:	4638      	mov	r0, r7
  416892:	4798      	blx	r3
  416894:	9001      	str	r0, [sp, #4]
        word_len++;
  416896:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41689a:	f01b 0f01 	tst.w	fp, #1
  41689e:	d0b8      	beq.n	416812 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  4168a0:	4621      	mov	r1, r4
  4168a2:	9814      	ldr	r0, [sp, #80]	; 0x50
  4168a4:	4b1e      	ldr	r3, [pc, #120]	; (416920 <lv_txt_get_next_word+0x168>)
  4168a6:	4798      	blx	r3
  4168a8:	2800      	cmp	r0, #0
  4168aa:	d0b2      	beq.n	416812 <lv_txt_get_next_word+0x5a>
                i = i_next;
  4168ac:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  4168ae:	9b06      	ldr	r3, [sp, #24]
  4168b0:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  4168b2:	e7e6      	b.n	416882 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  4168b4:	2e00      	cmp	r6, #0
  4168b6:	bf08      	it	eq
  4168b8:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  4168bc:	d102      	bne.n	4168c4 <lv_txt_get_next_word+0x10c>
  4168be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4168c0:	b103      	cbz	r3, 4168c4 <lv_txt_get_next_word+0x10c>
  4168c2:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  4168c4:	f1b8 3fff 	cmp.w	r8, #4294967295
  4168c8:	d008      	beq.n	4168dc <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  4168ca:	9b05      	ldr	r3, [sp, #20]
  4168cc:	b9b3      	cbnz	r3, 4168fc <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  4168ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4168d0:	b1eb      	cbz	r3, 41690e <lv_txt_get_next_word+0x156>
  4168d2:	2300      	movs	r3, #0
  4168d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4168d6:	6013      	str	r3, [r2, #0]
    return 0;
  4168d8:	4698      	mov	r8, r3
  4168da:	e00f      	b.n	4168fc <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  4168dc:	f1b9 0f00 	cmp.w	r9, #0
  4168e0:	d004      	beq.n	4168ec <lv_txt_get_next_word+0x134>
  4168e2:	9b01      	ldr	r3, [sp, #4]
  4168e4:	2c0d      	cmp	r4, #13
  4168e6:	bf08      	it	eq
  4168e8:	2b0a      	cmpeq	r3, #10
  4168ea:	d10e      	bne.n	41690a <lv_txt_get_next_word+0x152>
  4168ec:	f8dd 801c 	ldr.w	r8, [sp, #28]
  4168f0:	e004      	b.n	4168fc <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  4168f2:	f04f 0800 	mov.w	r8, #0
  4168f6:	e001      	b.n	4168fc <lv_txt_get_next_word+0x144>
  4168f8:	f04f 0800 	mov.w	r8, #0
}
  4168fc:	4640      	mov	r0, r8
  4168fe:	b009      	add	sp, #36	; 0x24
  416900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  416904:	f04f 0800 	mov.w	r8, #0
  416908:	e7f8      	b.n	4168fc <lv_txt_get_next_word+0x144>
  41690a:	46b0      	mov	r8, r6
  41690c:	e7f6      	b.n	4168fc <lv_txt_get_next_word+0x144>
    return 0;
  41690e:	f04f 0800 	mov.w	r8, #0
  416912:	e7f3      	b.n	4168fc <lv_txt_get_next_word+0x144>
  416914:	20400054 	.word	0x20400054
  416918:	0041324d 	.word	0x0041324d
  41691c:	00426d00 	.word	0x00426d00
  416920:	00416771 	.word	0x00416771

00416924 <_lv_txt_get_next_line>:
{
  416924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416928:	b089      	sub	sp, #36	; 0x24
  41692a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  41692e:	2800      	cmp	r0, #0
  416930:	d05f      	beq.n	4169f2 <_lv_txt_get_next_line+0xce>
  416932:	4689      	mov	r9, r1
  416934:	4690      	mov	r8, r2
  416936:	461d      	mov	r5, r3
  416938:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  41693a:	2900      	cmp	r1, #0
  41693c:	d05b      	beq.n	4169f6 <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  41693e:	f016 0f12 	tst.w	r6, #18
  416942:	d145      	bne.n	4169d0 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  416944:	f016 0f02 	tst.w	r6, #2
  416948:	d001      	beq.n	41694e <_lv_txt_get_next_line+0x2a>
  41694a:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  41694e:	2300      	movs	r3, #0
  416950:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  416954:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  416956:	9b06      	ldr	r3, [sp, #24]
  416958:	18e0      	adds	r0, r4, r3
  41695a:	5ce2      	ldrb	r2, [r4, r3]
  41695c:	b332      	cbz	r2, 4169ac <_lv_txt_get_next_line+0x88>
  41695e:	2d00      	cmp	r5, #0
  416960:	dd24      	ble.n	4169ac <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  416962:	2200      	movs	r2, #0
  416964:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  416966:	fab3 f383 	clz	r3, r3
  41696a:	095b      	lsrs	r3, r3, #5
  41696c:	9303      	str	r3, [sp, #12]
  41696e:	f10d 031f 	add.w	r3, sp, #31
  416972:	9302      	str	r3, [sp, #8]
  416974:	ab05      	add	r3, sp, #20
  416976:	9301      	str	r3, [sp, #4]
  416978:	9600      	str	r6, [sp, #0]
  41697a:	462b      	mov	r3, r5
  41697c:	4642      	mov	r2, r8
  41697e:	4649      	mov	r1, r9
  416980:	4f1e      	ldr	r7, [pc, #120]	; (4169fc <_lv_txt_get_next_line+0xd8>)
  416982:	47b8      	blx	r7
        max_width -= word_w;
  416984:	9b05      	ldr	r3, [sp, #20]
  416986:	1aed      	subs	r5, r5, r3
  416988:	b22d      	sxth	r5, r5
        if(advance == 0) {
  41698a:	4603      	mov	r3, r0
  41698c:	b310      	cbz	r0, 4169d4 <_lv_txt_get_next_line+0xb0>
        i += advance;
  41698e:	9806      	ldr	r0, [sp, #24]
  416990:	4418      	add	r0, r3
  416992:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  416994:	7823      	ldrb	r3, [r4, #0]
  416996:	2b0d      	cmp	r3, #13
  416998:	bf18      	it	ne
  41699a:	2b0a      	cmpne	r3, #10
  41699c:	d006      	beq.n	4169ac <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  41699e:	5c23      	ldrb	r3, [r4, r0]
  4169a0:	2b0d      	cmp	r3, #13
  4169a2:	bf18      	it	ne
  4169a4:	2b0a      	cmpne	r3, #10
  4169a6:	d1d6      	bne.n	416956 <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  4169a8:	3001      	adds	r0, #1
  4169aa:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  4169ac:	9b06      	ldr	r3, [sp, #24]
  4169ae:	b1d3      	cbz	r3, 4169e6 <_lv_txt_get_next_line+0xc2>
    return i;
  4169b0:	9806      	ldr	r0, [sp, #24]
}
  4169b2:	b009      	add	sp, #36	; 0x24
  4169b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  4169b8:	3001      	adds	r0, #1
  4169ba:	5c23      	ldrb	r3, [r4, r0]
  4169bc:	2b0a      	cmp	r3, #10
  4169be:	bf18      	it	ne
  4169c0:	2b0d      	cmpne	r3, #13
  4169c2:	d001      	beq.n	4169c8 <_lv_txt_get_next_line+0xa4>
  4169c4:	2b00      	cmp	r3, #0
  4169c6:	d1f7      	bne.n	4169b8 <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  4169c8:	2b00      	cmp	r3, #0
  4169ca:	d0f2      	beq.n	4169b2 <_lv_txt_get_next_line+0x8e>
  4169cc:	3001      	adds	r0, #1
  4169ce:	e7f0      	b.n	4169b2 <_lv_txt_get_next_line+0x8e>
  4169d0:	2000      	movs	r0, #0
  4169d2:	e7f2      	b.n	4169ba <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  4169d4:	9b06      	ldr	r3, [sp, #24]
  4169d6:	2b00      	cmp	r3, #0
  4169d8:	d1e8      	bne.n	4169ac <_lv_txt_get_next_line+0x88>
  4169da:	4b09      	ldr	r3, [pc, #36]	; (416a00 <_lv_txt_get_next_line+0xdc>)
  4169dc:	681b      	ldr	r3, [r3, #0]
  4169de:	a906      	add	r1, sp, #24
  4169e0:	4620      	mov	r0, r4
  4169e2:	4798      	blx	r3
  4169e4:	e7e2      	b.n	4169ac <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  4169e6:	4b06      	ldr	r3, [pc, #24]	; (416a00 <_lv_txt_get_next_line+0xdc>)
  4169e8:	681b      	ldr	r3, [r3, #0]
  4169ea:	a906      	add	r1, sp, #24
  4169ec:	4620      	mov	r0, r4
  4169ee:	4798      	blx	r3
  4169f0:	e7de      	b.n	4169b0 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  4169f2:	2000      	movs	r0, #0
  4169f4:	e7dd      	b.n	4169b2 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  4169f6:	2000      	movs	r0, #0
  4169f8:	e7db      	b.n	4169b2 <_lv_txt_get_next_line+0x8e>
  4169fa:	bf00      	nop
  4169fc:	004167b9 	.word	0x004167b9
  416a00:	20400054 	.word	0x20400054

00416a04 <_lv_txt_get_width>:
{
  416a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416a08:	b085      	sub	sp, #20
  416a0a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  416a0e:	2800      	cmp	r0, #0
  416a10:	d041      	beq.n	416a96 <_lv_txt_get_width+0x92>
  416a12:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  416a14:	2a00      	cmp	r2, #0
  416a16:	d041      	beq.n	416a9c <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  416a18:	2000      	movs	r0, #0
  416a1a:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  416a1c:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  416a20:	b129      	cbz	r1, 416a2e <_lv_txt_get_width+0x2a>
  416a22:	4698      	mov	r8, r3
  416a24:	9201      	str	r2, [sp, #4]
  416a26:	460d      	mov	r5, r1
  416a28:	f04f 0a00 	mov.w	sl, #0
  416a2c:	e00e      	b.n	416a4c <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  416a2e:	4682      	mov	sl, r0
  416a30:	e02d      	b.n	416a8e <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  416a32:	464a      	mov	r2, r9
  416a34:	4659      	mov	r1, fp
  416a36:	9801      	ldr	r0, [sp, #4]
  416a38:	4b1a      	ldr	r3, [pc, #104]	; (416aa4 <_lv_txt_get_width+0xa0>)
  416a3a:	4798      	blx	r3
  416a3c:	b203      	sxth	r3, r0
            if(char_width > 0) {
  416a3e:	2b00      	cmp	r3, #0
  416a40:	dd04      	ble.n	416a4c <_lv_txt_get_width+0x48>
                width += char_width;
  416a42:	4450      	add	r0, sl
                width += letter_space;
  416a44:	fa18 f080 	uxtah	r0, r8, r0
  416a48:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  416a4c:	9b03      	ldr	r3, [sp, #12]
  416a4e:	429d      	cmp	r5, r3
  416a50:	d916      	bls.n	416a80 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  416a52:	4e15      	ldr	r6, [pc, #84]	; (416aa8 <_lv_txt_get_width+0xa4>)
  416a54:	6833      	ldr	r3, [r6, #0]
  416a56:	a903      	add	r1, sp, #12
  416a58:	4620      	mov	r0, r4
  416a5a:	4798      	blx	r3
  416a5c:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  416a5e:	6833      	ldr	r3, [r6, #0]
  416a60:	2100      	movs	r1, #0
  416a62:	9803      	ldr	r0, [sp, #12]
  416a64:	4420      	add	r0, r4
  416a66:	4798      	blx	r3
  416a68:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  416a6a:	f017 0f01 	tst.w	r7, #1
  416a6e:	d0e0      	beq.n	416a32 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  416a70:	4659      	mov	r1, fp
  416a72:	f10d 000b 	add.w	r0, sp, #11
  416a76:	4b0d      	ldr	r3, [pc, #52]	; (416aac <_lv_txt_get_width+0xa8>)
  416a78:	4798      	blx	r3
  416a7a:	2800      	cmp	r0, #0
  416a7c:	d1e6      	bne.n	416a4c <_lv_txt_get_width+0x48>
  416a7e:	e7d8      	b.n	416a32 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  416a80:	f1ba 0f00 	cmp.w	sl, #0
  416a84:	dd03      	ble.n	416a8e <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  416a86:	ebaa 0008 	sub.w	r0, sl, r8
  416a8a:	fa0f fa80 	sxth.w	sl, r0
}
  416a8e:	4650      	mov	r0, sl
  416a90:	b005      	add	sp, #20
  416a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  416a96:	f04f 0a00 	mov.w	sl, #0
  416a9a:	e7f8      	b.n	416a8e <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  416a9c:	f04f 0a00 	mov.w	sl, #0
  416aa0:	e7f5      	b.n	416a8e <_lv_txt_get_width+0x8a>
  416aa2:	bf00      	nop
  416aa4:	0041324d 	.word	0x0041324d
  416aa8:	20400054 	.word	0x20400054
  416aac:	00416771 	.word	0x00416771

00416ab0 <_lv_txt_get_size>:
{
  416ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416ab4:	b087      	sub	sp, #28
  416ab6:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  416aba:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  416abe:	9404      	str	r4, [sp, #16]
  416ac0:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  416ac4:	2400      	movs	r4, #0
  416ac6:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  416ac8:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  416aca:	2900      	cmp	r1, #0
  416acc:	d04d      	beq.n	416b6a <_lv_txt_get_size+0xba>
  416ace:	460f      	mov	r7, r1
    if(font == NULL) return;
  416ad0:	2a00      	cmp	r2, #0
  416ad2:	d04a      	beq.n	416b6a <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  416ad4:	f018 0f02 	tst.w	r8, #2
  416ad8:	d002      	beq.n	416ae0 <_lv_txt_get_size+0x30>
  416ada:	f647 4118 	movw	r1, #31768	; 0x7c18
  416ade:	9104      	str	r1, [sp, #16]
  416ae0:	9303      	str	r3, [sp, #12]
  416ae2:	9202      	str	r2, [sp, #8]
  416ae4:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  416ae6:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  416aea:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  416aec:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  416af0:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  416af2:	197e      	adds	r6, r7, r5
  416af4:	5d7b      	ldrb	r3, [r7, r5]
  416af6:	b323      	cbz	r3, 416b42 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  416af8:	f8cd 8000 	str.w	r8, [sp]
  416afc:	9b04      	ldr	r3, [sp, #16]
  416afe:	9a03      	ldr	r2, [sp, #12]
  416b00:	9902      	ldr	r1, [sp, #8]
  416b02:	4630      	mov	r0, r6
  416b04:	f8df b074 	ldr.w	fp, [pc, #116]	; 416b7c <_lv_txt_get_size+0xcc>
  416b08:	47d8      	blx	fp
  416b0a:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  416b0c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416b10:	eb03 020a 	add.w	r2, r3, sl
  416b14:	444a      	add	r2, r9
  416b16:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  416b1a:	d226      	bcs.n	416b6a <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  416b1c:	4453      	add	r3, sl
            size_res->y += line_space;
  416b1e:	fa19 f383 	uxtah	r3, r9, r3
  416b22:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  416b24:	f8cd 8000 	str.w	r8, [sp]
  416b28:	9b03      	ldr	r3, [sp, #12]
  416b2a:	9a02      	ldr	r2, [sp, #8]
  416b2c:	4601      	mov	r1, r0
  416b2e:	4630      	mov	r0, r6
  416b30:	4e11      	ldr	r6, [pc, #68]	; (416b78 <_lv_txt_get_size+0xc8>)
  416b32:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  416b34:	f9b4 3000 	ldrsh.w	r3, [r4]
  416b38:	4298      	cmp	r0, r3
  416b3a:	bfb8      	it	lt
  416b3c:	4618      	movlt	r0, r3
  416b3e:	8020      	strh	r0, [r4, #0]
  416b40:	e7d7      	b.n	416af2 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  416b42:	b15d      	cbz	r5, 416b5c <_lv_txt_get_size+0xac>
  416b44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  416b48:	2b0d      	cmp	r3, #13
  416b4a:	bf18      	it	ne
  416b4c:	2b0a      	cmpne	r3, #10
  416b4e:	d105      	bne.n	416b5c <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  416b50:	eb0a 0309 	add.w	r3, sl, r9
  416b54:	8862      	ldrh	r2, [r4, #2]
  416b56:	fa12 f383 	uxtah	r3, r2, r3
  416b5a:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  416b5c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416b60:	b133      	cbz	r3, 416b70 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  416b62:	eba3 0909 	sub.w	r9, r3, r9
  416b66:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  416b6a:	b007      	add	sp, #28
  416b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  416b70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  416b74:	8063      	strh	r3, [r4, #2]
  416b76:	e7f8      	b.n	416b6a <_lv_txt_get_size+0xba>
  416b78:	00416a05 	.word	0x00416a05
  416b7c:	00416925 	.word	0x00416925

00416b80 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
  416b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  416b84:	4681      	mov	r9, r0
  416b86:	468a      	mov	sl, r1
  416b88:	4615      	mov	r5, r2
  416b8a:	461f      	mov	r7, r3
  416b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
  416b90:	4608      	mov	r0, r1
  416b92:	e003      	b.n	416b9c <_lv_utils_bsearch+0x1c>
        middle += (n / 2) * size;
        if((c = (*cmp)(key, middle)) > 0) {
            n    = (n / 2) - ((n & 1) == 0);
            base = (middle += size);
        }
        else if(c < 0) {
  416b94:	2800      	cmp	r0, #0
  416b96:	da16      	bge.n	416bc6 <_lv_utils_bsearch+0x46>
            n /= 2;
            middle = base;
  416b98:	4650      	mov	r0, sl
            n /= 2;
  416b9a:	4635      	mov	r5, r6
    for(middle = base; n != 0;) {
  416b9c:	b185      	cbz	r5, 416bc0 <_lv_utils_bsearch+0x40>
        middle += (n / 2) * size;
  416b9e:	086e      	lsrs	r6, r5, #1
  416ba0:	fb07 0406 	mla	r4, r7, r6, r0
        if((c = (*cmp)(key, middle)) > 0) {
  416ba4:	4621      	mov	r1, r4
  416ba6:	4648      	mov	r0, r9
  416ba8:	47c0      	blx	r8
  416baa:	2800      	cmp	r0, #0
  416bac:	ddf2      	ble.n	416b94 <_lv_utils_bsearch+0x14>
            n    = (n / 2) - ((n & 1) == 0);
  416bae:	f015 0f01 	tst.w	r5, #1
  416bb2:	bf0c      	ite	eq
  416bb4:	2501      	moveq	r5, #1
  416bb6:	2500      	movne	r5, #0
  416bb8:	1b75      	subs	r5, r6, r5
            base = (middle += size);
  416bba:	19e0      	adds	r0, r4, r7
  416bbc:	4682      	mov	sl, r0
  416bbe:	e7ed      	b.n	416b9c <_lv_utils_bsearch+0x1c>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
  416bc0:	2000      	movs	r0, #0
  416bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            return (char *)middle;
  416bc6:	4620      	mov	r0, r4
}
  416bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00416bcc <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  416bcc:	b570      	push	{r4, r5, r6, lr}
  416bce:	4604      	mov	r4, r0
  416bd0:	460d      	mov	r5, r1
  416bd2:	4616      	mov	r6, r2
    if(th->base) {
  416bd4:	6880      	ldr	r0, [r0, #8]
  416bd6:	b108      	cbz	r0, 416bdc <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  416bd8:	f7ff fff8 	bl	416bcc <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  416bdc:	6863      	ldr	r3, [r4, #4]
  416bde:	b11b      	cbz	r3, 416be8 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  416be0:	4631      	mov	r1, r6
  416be2:	4628      	mov	r0, r5
  416be4:	4798      	blx	r3
  416be6:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  416be8:	6823      	ldr	r3, [r4, #0]
  416bea:	b123      	cbz	r3, 416bf6 <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  416bec:	4632      	mov	r2, r6
  416bee:	4629      	mov	r1, r5
  416bf0:	4801      	ldr	r0, [pc, #4]	; (416bf8 <apply_theme+0x2c>)
  416bf2:	6800      	ldr	r0, [r0, #0]
  416bf4:	4798      	blx	r3
  416bf6:	bd70      	pop	{r4, r5, r6, pc}
  416bf8:	20414790 	.word	0x20414790

00416bfc <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  416bfc:	b538      	push	{r3, r4, r5, lr}
  416bfe:	4604      	mov	r4, r0
    switch(name) {
  416c00:	3901      	subs	r1, #1
  416c02:	2927      	cmp	r1, #39	; 0x27
  416c04:	f200 8150 	bhi.w	416ea8 <clear_styles+0x2ac>
  416c08:	e8df f011 	tbh	[pc, r1, lsl #1]
  416c0c:	002c0028 	.word	0x002c0028
  416c10:	0046006b 	.word	0x0046006b
  416c14:	00380034 	.word	0x00380034
  416c18:	0057012d 	.word	0x0057012d
  416c1c:	00ea0083 	.word	0x00ea0083
  416c20:	013a0030 	.word	0x013a0030
  416c24:	014500dd 	.word	0x014500dd
  416c28:	005f005b 	.word	0x005f005b
  416c2c:	0063003f 	.word	0x0063003f
  416c30:	00670095 	.word	0x00670095
  416c34:	00d900cf 	.word	0x00d900cf
  416c38:	008a0141 	.word	0x008a0141
  416c3c:	00cb008e 	.word	0x00cb008e
  416c40:	00c40099 	.word	0x00c40099
  416c44:	01220079 	.word	0x01220079
  416c48:	00720129 	.word	0x00720129
  416c4c:	00f4004d 	.word	0x00f4004d
  416c50:	00b300a3 	.word	0x00b300a3
  416c54:	00ba0115 	.word	0x00ba0115
  416c58:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416c5c:	2100      	movs	r1, #0
  416c5e:	4b93      	ldr	r3, [pc, #588]	; (416eac <clear_styles+0x2b0>)
  416c60:	4798      	blx	r3
            break;
  416c62:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416c64:	2100      	movs	r1, #0
  416c66:	4b91      	ldr	r3, [pc, #580]	; (416eac <clear_styles+0x2b0>)
  416c68:	4798      	blx	r3
            break;
  416c6a:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416c6c:	2100      	movs	r1, #0
  416c6e:	4b8f      	ldr	r3, [pc, #572]	; (416eac <clear_styles+0x2b0>)
  416c70:	4798      	blx	r3
            break;
  416c72:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416c74:	2100      	movs	r1, #0
  416c76:	4b8d      	ldr	r3, [pc, #564]	; (416eac <clear_styles+0x2b0>)
  416c78:	4798      	blx	r3
            break;
  416c7a:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  416c7c:	2100      	movs	r1, #0
  416c7e:	4d8b      	ldr	r5, [pc, #556]	; (416eac <clear_styles+0x2b0>)
  416c80:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  416c82:	2101      	movs	r1, #1
  416c84:	4620      	mov	r0, r4
  416c86:	47a8      	blx	r5
            break;
  416c88:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  416c8a:	2100      	movs	r1, #0
  416c8c:	4d87      	ldr	r5, [pc, #540]	; (416eac <clear_styles+0x2b0>)
  416c8e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  416c90:	2101      	movs	r1, #1
  416c92:	4620      	mov	r0, r4
  416c94:	47a8      	blx	r5
            break;
  416c96:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  416c98:	2100      	movs	r1, #0
  416c9a:	4d84      	ldr	r5, [pc, #528]	; (416eac <clear_styles+0x2b0>)
  416c9c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  416c9e:	2101      	movs	r1, #1
  416ca0:	4620      	mov	r0, r4
  416ca2:	47a8      	blx	r5
            break;
  416ca4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  416ca6:	2100      	movs	r1, #0
  416ca8:	4d80      	ldr	r5, [pc, #512]	; (416eac <clear_styles+0x2b0>)
  416caa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  416cac:	2101      	movs	r1, #1
  416cae:	4620      	mov	r0, r4
  416cb0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  416cb2:	2102      	movs	r1, #2
  416cb4:	4620      	mov	r0, r4
  416cb6:	47a8      	blx	r5
            break;
  416cb8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  416cba:	2100      	movs	r1, #0
  416cbc:	4b7b      	ldr	r3, [pc, #492]	; (416eac <clear_styles+0x2b0>)
  416cbe:	4798      	blx	r3
            break;
  416cc0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  416cc2:	2100      	movs	r1, #0
  416cc4:	4b79      	ldr	r3, [pc, #484]	; (416eac <clear_styles+0x2b0>)
  416cc6:	4798      	blx	r3
            break;
  416cc8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  416cca:	2100      	movs	r1, #0
  416ccc:	4b77      	ldr	r3, [pc, #476]	; (416eac <clear_styles+0x2b0>)
  416cce:	4798      	blx	r3
            break;
  416cd0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  416cd2:	2100      	movs	r1, #0
  416cd4:	4b75      	ldr	r3, [pc, #468]	; (416eac <clear_styles+0x2b0>)
  416cd6:	4798      	blx	r3
            break;
  416cd8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  416cda:	2100      	movs	r1, #0
  416cdc:	4b73      	ldr	r3, [pc, #460]	; (416eac <clear_styles+0x2b0>)
  416cde:	4798      	blx	r3
            break;
  416ce0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  416ce2:	2100      	movs	r1, #0
  416ce4:	4d71      	ldr	r5, [pc, #452]	; (416eac <clear_styles+0x2b0>)
  416ce6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  416ce8:	2101      	movs	r1, #1
  416cea:	4620      	mov	r0, r4
  416cec:	47a8      	blx	r5
            break;
  416cee:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  416cf0:	2100      	movs	r1, #0
  416cf2:	4d6e      	ldr	r5, [pc, #440]	; (416eac <clear_styles+0x2b0>)
  416cf4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  416cf6:	2101      	movs	r1, #1
  416cf8:	4620      	mov	r0, r4
  416cfa:	47a8      	blx	r5
            break;
  416cfc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  416cfe:	2100      	movs	r1, #0
  416d00:	4d6a      	ldr	r5, [pc, #424]	; (416eac <clear_styles+0x2b0>)
  416d02:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  416d04:	2101      	movs	r1, #1
  416d06:	4620      	mov	r0, r4
  416d08:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  416d0a:	2102      	movs	r1, #2
  416d0c:	4620      	mov	r0, r4
  416d0e:	47a8      	blx	r5
            break;
  416d10:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  416d12:	2100      	movs	r1, #0
  416d14:	4d65      	ldr	r5, [pc, #404]	; (416eac <clear_styles+0x2b0>)
  416d16:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  416d18:	2140      	movs	r1, #64	; 0x40
  416d1a:	4620      	mov	r0, r4
  416d1c:	47a8      	blx	r5
            break;
  416d1e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  416d20:	2100      	movs	r1, #0
  416d22:	4b62      	ldr	r3, [pc, #392]	; (416eac <clear_styles+0x2b0>)
  416d24:	4798      	blx	r3
            break;
  416d26:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  416d28:	2140      	movs	r1, #64	; 0x40
  416d2a:	4d60      	ldr	r5, [pc, #384]	; (416eac <clear_styles+0x2b0>)
  416d2c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  416d2e:	2141      	movs	r1, #65	; 0x41
  416d30:	4620      	mov	r0, r4
  416d32:	47a8      	blx	r5
            break;
  416d34:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  416d36:	2100      	movs	r1, #0
  416d38:	4b5c      	ldr	r3, [pc, #368]	; (416eac <clear_styles+0x2b0>)
  416d3a:	4798      	blx	r3
            break;
  416d3c:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  416d3e:	2100      	movs	r1, #0
  416d40:	4d5a      	ldr	r5, [pc, #360]	; (416eac <clear_styles+0x2b0>)
  416d42:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  416d44:	2140      	movs	r1, #64	; 0x40
  416d46:	4620      	mov	r0, r4
  416d48:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  416d4a:	2101      	movs	r1, #1
  416d4c:	4620      	mov	r0, r4
  416d4e:	47a8      	blx	r5
            break;
  416d50:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  416d52:	2100      	movs	r1, #0
  416d54:	4d55      	ldr	r5, [pc, #340]	; (416eac <clear_styles+0x2b0>)
  416d56:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  416d58:	2140      	movs	r1, #64	; 0x40
  416d5a:	4620      	mov	r0, r4
  416d5c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  416d5e:	2141      	movs	r1, #65	; 0x41
  416d60:	4620      	mov	r0, r4
  416d62:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  416d64:	2143      	movs	r1, #67	; 0x43
  416d66:	4620      	mov	r0, r4
  416d68:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  416d6a:	2142      	movs	r1, #66	; 0x42
  416d6c:	4620      	mov	r0, r4
  416d6e:	47a8      	blx	r5
            break;
  416d70:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  416d72:	2100      	movs	r1, #0
  416d74:	4d4d      	ldr	r5, [pc, #308]	; (416eac <clear_styles+0x2b0>)
  416d76:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  416d78:	2140      	movs	r1, #64	; 0x40
  416d7a:	4620      	mov	r0, r4
  416d7c:	47a8      	blx	r5
            break;
  416d7e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  416d80:	2100      	movs	r1, #0
  416d82:	4d4a      	ldr	r5, [pc, #296]	; (416eac <clear_styles+0x2b0>)
  416d84:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  416d86:	2101      	movs	r1, #1
  416d88:	4620      	mov	r0, r4
  416d8a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  416d8c:	2102      	movs	r1, #2
  416d8e:	4620      	mov	r0, r4
  416d90:	47a8      	blx	r5
            break;
  416d92:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  416d94:	2100      	movs	r1, #0
  416d96:	4d45      	ldr	r5, [pc, #276]	; (416eac <clear_styles+0x2b0>)
  416d98:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  416d9a:	2103      	movs	r1, #3
  416d9c:	4620      	mov	r0, r4
  416d9e:	47a8      	blx	r5
            break;
  416da0:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  416da2:	2100      	movs	r1, #0
  416da4:	4b41      	ldr	r3, [pc, #260]	; (416eac <clear_styles+0x2b0>)
  416da6:	4798      	blx	r3
            break;
  416da8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  416daa:	2100      	movs	r1, #0
  416dac:	4d3f      	ldr	r5, [pc, #252]	; (416eac <clear_styles+0x2b0>)
  416dae:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  416db0:	2140      	movs	r1, #64	; 0x40
  416db2:	4620      	mov	r0, r4
  416db4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  416db6:	2101      	movs	r1, #1
  416db8:	4620      	mov	r0, r4
  416dba:	47a8      	blx	r5
            break;
  416dbc:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416dbe:	2100      	movs	r1, #0
  416dc0:	4b3a      	ldr	r3, [pc, #232]	; (416eac <clear_styles+0x2b0>)
  416dc2:	4798      	blx	r3
            break;
  416dc4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  416dc6:	2100      	movs	r1, #0
  416dc8:	4d38      	ldr	r5, [pc, #224]	; (416eac <clear_styles+0x2b0>)
  416dca:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  416dcc:	2140      	movs	r1, #64	; 0x40
  416dce:	4620      	mov	r0, r4
  416dd0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  416dd2:	2141      	movs	r1, #65	; 0x41
  416dd4:	4620      	mov	r0, r4
  416dd6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  416dd8:	2142      	movs	r1, #66	; 0x42
  416dda:	4620      	mov	r0, r4
  416ddc:	47a8      	blx	r5
            break;
  416dde:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  416de0:	2100      	movs	r1, #0
  416de2:	4d32      	ldr	r5, [pc, #200]	; (416eac <clear_styles+0x2b0>)
  416de4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  416de6:	2101      	movs	r1, #1
  416de8:	4620      	mov	r0, r4
  416dea:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  416dec:	2102      	movs	r1, #2
  416dee:	4620      	mov	r0, r4
  416df0:	47a8      	blx	r5
            break;
  416df2:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  416df4:	2100      	movs	r1, #0
  416df6:	4d2d      	ldr	r5, [pc, #180]	; (416eac <clear_styles+0x2b0>)
  416df8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  416dfa:	2101      	movs	r1, #1
  416dfc:	4620      	mov	r0, r4
  416dfe:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  416e00:	2102      	movs	r1, #2
  416e02:	4620      	mov	r0, r4
  416e04:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  416e06:	2103      	movs	r1, #3
  416e08:	4620      	mov	r0, r4
  416e0a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  416e0c:	2104      	movs	r1, #4
  416e0e:	4620      	mov	r0, r4
  416e10:	47a8      	blx	r5
            break;
  416e12:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  416e14:	2100      	movs	r1, #0
  416e16:	4d25      	ldr	r5, [pc, #148]	; (416eac <clear_styles+0x2b0>)
  416e18:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  416e1a:	2142      	movs	r1, #66	; 0x42
  416e1c:	4620      	mov	r0, r4
  416e1e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  416e20:	2141      	movs	r1, #65	; 0x41
  416e22:	4620      	mov	r0, r4
  416e24:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  416e26:	2140      	movs	r1, #64	; 0x40
  416e28:	4620      	mov	r0, r4
  416e2a:	47a8      	blx	r5
            break;
  416e2c:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416e2e:	2100      	movs	r1, #0
  416e30:	4b1e      	ldr	r3, [pc, #120]	; (416eac <clear_styles+0x2b0>)
  416e32:	4798      	blx	r3
            break;
  416e34:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  416e36:	2100      	movs	r1, #0
  416e38:	4d1c      	ldr	r5, [pc, #112]	; (416eac <clear_styles+0x2b0>)
  416e3a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  416e3c:	2104      	movs	r1, #4
  416e3e:	4620      	mov	r0, r4
  416e40:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  416e42:	2103      	movs	r1, #3
  416e44:	4620      	mov	r0, r4
  416e46:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  416e48:	2101      	movs	r1, #1
  416e4a:	4620      	mov	r0, r4
  416e4c:	47a8      	blx	r5
            break;
  416e4e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  416e50:	2100      	movs	r1, #0
  416e52:	4d16      	ldr	r5, [pc, #88]	; (416eac <clear_styles+0x2b0>)
  416e54:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  416e56:	2103      	movs	r1, #3
  416e58:	4620      	mov	r0, r4
  416e5a:	47a8      	blx	r5
            break;
  416e5c:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416e5e:	2100      	movs	r1, #0
  416e60:	4b12      	ldr	r3, [pc, #72]	; (416eac <clear_styles+0x2b0>)
  416e62:	4798      	blx	r3
            break;
  416e64:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  416e66:	2100      	movs	r1, #0
  416e68:	4d10      	ldr	r5, [pc, #64]	; (416eac <clear_styles+0x2b0>)
  416e6a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  416e6c:	2103      	movs	r1, #3
  416e6e:	4620      	mov	r0, r4
  416e70:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  416e72:	2101      	movs	r1, #1
  416e74:	4620      	mov	r0, r4
  416e76:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  416e78:	2102      	movs	r1, #2
  416e7a:	4620      	mov	r0, r4
  416e7c:	47a8      	blx	r5
            break;
  416e7e:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  416e80:	2100      	movs	r1, #0
  416e82:	4d0a      	ldr	r5, [pc, #40]	; (416eac <clear_styles+0x2b0>)
  416e84:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  416e86:	2101      	movs	r1, #1
  416e88:	4620      	mov	r0, r4
  416e8a:	47a8      	blx	r5
            break;
  416e8c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  416e8e:	2100      	movs	r1, #0
  416e90:	4b06      	ldr	r3, [pc, #24]	; (416eac <clear_styles+0x2b0>)
  416e92:	4798      	blx	r3
            break;
  416e94:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  416e96:	2100      	movs	r1, #0
  416e98:	4d04      	ldr	r5, [pc, #16]	; (416eac <clear_styles+0x2b0>)
  416e9a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  416e9c:	2101      	movs	r1, #1
  416e9e:	4620      	mov	r0, r4
  416ea0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  416ea2:	2102      	movs	r1, #2
  416ea4:	4620      	mov	r0, r4
  416ea6:	47a8      	blx	r5
  416ea8:	bd38      	pop	{r3, r4, r5, pc}
  416eaa:	bf00      	nop
  416eac:	00405745 	.word	0x00405745

00416eb0 <lv_theme_set_act>:
    act_theme = th;
  416eb0:	4b01      	ldr	r3, [pc, #4]	; (416eb8 <lv_theme_set_act+0x8>)
  416eb2:	6018      	str	r0, [r3, #0]
  416eb4:	4770      	bx	lr
  416eb6:	bf00      	nop
  416eb8:	20414790 	.word	0x20414790

00416ebc <lv_theme_apply>:
{
  416ebc:	b538      	push	{r3, r4, r5, lr}
  416ebe:	4604      	mov	r4, r0
  416ec0:	460d      	mov	r5, r1
    clear_styles(obj, name);
  416ec2:	4b04      	ldr	r3, [pc, #16]	; (416ed4 <lv_theme_apply+0x18>)
  416ec4:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  416ec6:	462a      	mov	r2, r5
  416ec8:	4621      	mov	r1, r4
  416eca:	4b03      	ldr	r3, [pc, #12]	; (416ed8 <lv_theme_apply+0x1c>)
  416ecc:	6818      	ldr	r0, [r3, #0]
  416ece:	4b03      	ldr	r3, [pc, #12]	; (416edc <lv_theme_apply+0x20>)
  416ed0:	4798      	blx	r3
  416ed2:	bd38      	pop	{r3, r4, r5, pc}
  416ed4:	00416bfd 	.word	0x00416bfd
  416ed8:	20414790 	.word	0x20414790
  416edc:	00416bcd 	.word	0x00416bcd

00416ee0 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  416ee0:	4b01      	ldr	r3, [pc, #4]	; (416ee8 <lv_theme_get_font_normal+0x8>)
  416ee2:	681b      	ldr	r3, [r3, #0]
}
  416ee4:	6958      	ldr	r0, [r3, #20]
  416ee6:	4770      	bx	lr
  416ee8:	20414790 	.word	0x20414790

00416eec <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  416eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  416ef0:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  416ef2:	3a01      	subs	r2, #1
  416ef4:	2a27      	cmp	r2, #39	; 0x27
  416ef6:	d831      	bhi.n	416f5c <theme_apply+0x70>
  416ef8:	e8df f012 	tbh	[pc, r2, lsl #1]
  416efc:	00370028 	.word	0x00370028
  416f00:	008800ae 	.word	0x008800ae
  416f04:	0055004b 	.word	0x0055004b
  416f08:	003002af 	.word	0x003002af
  416f0c:	01fd00fd 	.word	0x01fd00fd
  416f10:	02cb0041 	.word	0x02cb0041
  416f14:	02ea01d3 	.word	0x02ea01d3
  416f18:	00300030 	.word	0x00300030
  416f1c:	0030006f 	.word	0x0030006f
  416f20:	00300131 	.word	0x00300131
  416f24:	01c901b4 	.word	0x01c901b4
  416f28:	011202db 	.word	0x011202db
  416f2c:	01af0121 	.word	0x01af0121
  416f30:	019a013b 	.word	0x019a013b
  416f34:	028500e2 	.word	0x028500e2
  416f38:	00d202a0 	.word	0x00d202a0
  416f3c:	02270098 	.word	0x02270098
  416f40:	017b0160 	.word	0x017b0160
  416f44:	01850264 	.word	0x01850264
  416f48:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  416f4c:	2100      	movs	r1, #0
  416f4e:	4620      	mov	r0, r4
  416f50:	4b96      	ldr	r3, [pc, #600]	; (4171ac <theme_apply+0x2c0>)
  416f52:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  416f54:	4b96      	ldr	r3, [pc, #600]	; (4171b0 <theme_apply+0x2c4>)
  416f56:	6819      	ldr	r1, [r3, #0]
  416f58:	4b96      	ldr	r3, [pc, #600]	; (4171b4 <theme_apply+0x2c8>)
  416f5a:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  416f5c:	22ff      	movs	r2, #255	; 0xff
  416f5e:	4611      	mov	r1, r2
  416f60:	4620      	mov	r0, r4
  416f62:	4b95      	ldr	r3, [pc, #596]	; (4171b8 <theme_apply+0x2cc>)
  416f64:	4798      	blx	r3
  416f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  416f6a:	2100      	movs	r1, #0
  416f6c:	4620      	mov	r0, r4
  416f6e:	4b8f      	ldr	r3, [pc, #572]	; (4171ac <theme_apply+0x2c0>)
  416f70:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  416f72:	4b8f      	ldr	r3, [pc, #572]	; (4171b0 <theme_apply+0x2c4>)
  416f74:	6819      	ldr	r1, [r3, #0]
  416f76:	3104      	adds	r1, #4
  416f78:	4b8e      	ldr	r3, [pc, #568]	; (4171b4 <theme_apply+0x2c8>)
  416f7a:	4798      	blx	r3
            break;
  416f7c:	e7ee      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  416f7e:	2100      	movs	r1, #0
  416f80:	4620      	mov	r0, r4
  416f82:	4b8a      	ldr	r3, [pc, #552]	; (4171ac <theme_apply+0x2c0>)
  416f84:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  416f86:	4b8a      	ldr	r3, [pc, #552]	; (4171b0 <theme_apply+0x2c4>)
  416f88:	6819      	ldr	r1, [r3, #0]
  416f8a:	3104      	adds	r1, #4
  416f8c:	4b89      	ldr	r3, [pc, #548]	; (4171b4 <theme_apply+0x2c8>)
  416f8e:	4798      	blx	r3
            break;
  416f90:	e7e4      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  416f92:	2100      	movs	r1, #0
  416f94:	4620      	mov	r0, r4
  416f96:	4b85      	ldr	r3, [pc, #532]	; (4171ac <theme_apply+0x2c0>)
  416f98:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  416f9a:	4b85      	ldr	r3, [pc, #532]	; (4171b0 <theme_apply+0x2c4>)
  416f9c:	6819      	ldr	r1, [r3, #0]
  416f9e:	3110      	adds	r1, #16
  416fa0:	4b84      	ldr	r3, [pc, #528]	; (4171b4 <theme_apply+0x2c8>)
  416fa2:	4798      	blx	r3
            break;
  416fa4:	e7da      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  416fa6:	2100      	movs	r1, #0
  416fa8:	4620      	mov	r0, r4
  416faa:	4f80      	ldr	r7, [pc, #512]	; (4171ac <theme_apply+0x2c0>)
  416fac:	47b8      	blx	r7
  416fae:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  416fb0:	4e7f      	ldr	r6, [pc, #508]	; (4171b0 <theme_apply+0x2c4>)
  416fb2:	6831      	ldr	r1, [r6, #0]
  416fb4:	3104      	adds	r1, #4
  416fb6:	4d7f      	ldr	r5, [pc, #508]	; (4171b4 <theme_apply+0x2c8>)
  416fb8:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  416fba:	6831      	ldr	r1, [r6, #0]
  416fbc:	3118      	adds	r1, #24
  416fbe:	4640      	mov	r0, r8
  416fc0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  416fc2:	2101      	movs	r1, #1
  416fc4:	4620      	mov	r0, r4
  416fc6:	47b8      	blx	r7
  416fc8:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416fca:	6831      	ldr	r1, [r6, #0]
  416fcc:	3104      	adds	r1, #4
  416fce:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  416fd0:	6831      	ldr	r1, [r6, #0]
  416fd2:	3108      	adds	r1, #8
  416fd4:	4638      	mov	r0, r7
  416fd6:	47a8      	blx	r5
            break;
  416fd8:	e7c0      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  416fda:	2100      	movs	r1, #0
  416fdc:	4620      	mov	r0, r4
  416fde:	4f73      	ldr	r7, [pc, #460]	; (4171ac <theme_apply+0x2c0>)
  416fe0:	47b8      	blx	r7
  416fe2:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  416fe4:	4e72      	ldr	r6, [pc, #456]	; (4171b0 <theme_apply+0x2c4>)
  416fe6:	6831      	ldr	r1, [r6, #0]
  416fe8:	4d72      	ldr	r5, [pc, #456]	; (4171b4 <theme_apply+0x2c8>)
  416fea:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  416fec:	6831      	ldr	r1, [r6, #0]
  416fee:	316c      	adds	r1, #108	; 0x6c
  416ff0:	4640      	mov	r0, r8
  416ff2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  416ff4:	2101      	movs	r1, #1
  416ff6:	4620      	mov	r0, r4
  416ff8:	47b8      	blx	r7
  416ffa:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  416ffc:	6831      	ldr	r1, [r6, #0]
  416ffe:	3104      	adds	r1, #4
  417000:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417002:	6831      	ldr	r1, [r6, #0]
  417004:	3108      	adds	r1, #8
  417006:	4638      	mov	r0, r7
  417008:	47a8      	blx	r5
            break;
  41700a:	e7a7      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  41700c:	2100      	movs	r1, #0
  41700e:	4620      	mov	r0, r4
  417010:	4f66      	ldr	r7, [pc, #408]	; (4171ac <theme_apply+0x2c0>)
  417012:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  417014:	4e66      	ldr	r6, [pc, #408]	; (4171b0 <theme_apply+0x2c4>)
  417016:	6831      	ldr	r1, [r6, #0]
  417018:	3128      	adds	r1, #40	; 0x28
  41701a:	4d66      	ldr	r5, [pc, #408]	; (4171b4 <theme_apply+0x2c8>)
  41701c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  41701e:	2101      	movs	r1, #1
  417020:	4620      	mov	r0, r4
  417022:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  417024:	6831      	ldr	r1, [r6, #0]
  417026:	312c      	adds	r1, #44	; 0x2c
  417028:	47a8      	blx	r5
            break;
  41702a:	e797      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  41702c:	2100      	movs	r1, #0
  41702e:	4620      	mov	r0, r4
  417030:	4f5e      	ldr	r7, [pc, #376]	; (4171ac <theme_apply+0x2c0>)
  417032:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  417034:	4e5e      	ldr	r6, [pc, #376]	; (4171b0 <theme_apply+0x2c4>)
  417036:	6831      	ldr	r1, [r6, #0]
  417038:	3128      	adds	r1, #40	; 0x28
  41703a:	4d5e      	ldr	r5, [pc, #376]	; (4171b4 <theme_apply+0x2c8>)
  41703c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  41703e:	2101      	movs	r1, #1
  417040:	4620      	mov	r0, r4
  417042:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  417044:	6831      	ldr	r1, [r6, #0]
  417046:	312c      	adds	r1, #44	; 0x2c
  417048:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  41704a:	2102      	movs	r1, #2
  41704c:	4620      	mov	r0, r4
  41704e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  417050:	6831      	ldr	r1, [r6, #0]
  417052:	31a0      	adds	r1, #160	; 0xa0
  417054:	47a8      	blx	r5
            break;
  417056:	e781      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  417058:	2100      	movs	r1, #0
  41705a:	4620      	mov	r0, r4
  41705c:	4f53      	ldr	r7, [pc, #332]	; (4171ac <theme_apply+0x2c0>)
  41705e:	47b8      	blx	r7
  417060:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417062:	4e53      	ldr	r6, [pc, #332]	; (4171b0 <theme_apply+0x2c4>)
  417064:	6831      	ldr	r1, [r6, #0]
  417066:	3104      	adds	r1, #4
  417068:	4d52      	ldr	r5, [pc, #328]	; (4171b4 <theme_apply+0x2c8>)
  41706a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  41706c:	6831      	ldr	r1, [r6, #0]
  41706e:	3120      	adds	r1, #32
  417070:	4640      	mov	r0, r8
  417072:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  417074:	2101      	movs	r1, #1
  417076:	4620      	mov	r0, r4
  417078:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  41707a:	6831      	ldr	r1, [r6, #0]
  41707c:	311c      	adds	r1, #28
  41707e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  417080:	2102      	movs	r1, #2
  417082:	4620      	mov	r0, r4
  417084:	47b8      	blx	r7
  417086:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417088:	6831      	ldr	r1, [r6, #0]
  41708a:	3104      	adds	r1, #4
  41708c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  41708e:	6831      	ldr	r1, [r6, #0]
  417090:	3108      	adds	r1, #8
  417092:	4638      	mov	r0, r7
  417094:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  417096:	6831      	ldr	r1, [r6, #0]
  417098:	3124      	adds	r1, #36	; 0x24
  41709a:	4638      	mov	r0, r7
  41709c:	47a8      	blx	r5
            break;
  41709e:	e75d      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  4170a0:	2100      	movs	r1, #0
  4170a2:	4620      	mov	r0, r4
  4170a4:	4f41      	ldr	r7, [pc, #260]	; (4171ac <theme_apply+0x2c0>)
  4170a6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  4170a8:	4e41      	ldr	r6, [pc, #260]	; (4171b0 <theme_apply+0x2c4>)
  4170aa:	6831      	ldr	r1, [r6, #0]
  4170ac:	3120      	adds	r1, #32
  4170ae:	4d41      	ldr	r5, [pc, #260]	; (4171b4 <theme_apply+0x2c8>)
  4170b0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  4170b2:	2101      	movs	r1, #1
  4170b4:	4620      	mov	r0, r4
  4170b6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4170b8:	6831      	ldr	r1, [r6, #0]
  4170ba:	311c      	adds	r1, #28
  4170bc:	47a8      	blx	r5
            break;
  4170be:	e74d      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  4170c0:	2100      	movs	r1, #0
  4170c2:	4620      	mov	r0, r4
  4170c4:	4f39      	ldr	r7, [pc, #228]	; (4171ac <theme_apply+0x2c0>)
  4170c6:	47b8      	blx	r7
  4170c8:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  4170ca:	4e39      	ldr	r6, [pc, #228]	; (4171b0 <theme_apply+0x2c4>)
  4170cc:	6831      	ldr	r1, [r6, #0]
  4170ce:	3128      	adds	r1, #40	; 0x28
  4170d0:	4d38      	ldr	r5, [pc, #224]	; (4171b4 <theme_apply+0x2c8>)
  4170d2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  4170d4:	6831      	ldr	r1, [r6, #0]
  4170d6:	3198      	adds	r1, #152	; 0x98
  4170d8:	4640      	mov	r0, r8
  4170da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  4170dc:	2101      	movs	r1, #1
  4170de:	4620      	mov	r0, r4
  4170e0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4170e2:	6831      	ldr	r1, [r6, #0]
  4170e4:	312c      	adds	r1, #44	; 0x2c
  4170e6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  4170e8:	2102      	movs	r1, #2
  4170ea:	4620      	mov	r0, r4
  4170ec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  4170ee:	6831      	ldr	r1, [r6, #0]
  4170f0:	3194      	adds	r1, #148	; 0x94
  4170f2:	47a8      	blx	r5
            break;
  4170f4:	e732      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  4170f6:	2100      	movs	r1, #0
  4170f8:	4620      	mov	r0, r4
  4170fa:	4f2c      	ldr	r7, [pc, #176]	; (4171ac <theme_apply+0x2c0>)
  4170fc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  4170fe:	4e2c      	ldr	r6, [pc, #176]	; (4171b0 <theme_apply+0x2c4>)
  417100:	6831      	ldr	r1, [r6, #0]
  417102:	3150      	adds	r1, #80	; 0x50
  417104:	4d2b      	ldr	r5, [pc, #172]	; (4171b4 <theme_apply+0x2c8>)
  417106:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417108:	2140      	movs	r1, #64	; 0x40
  41710a:	4620      	mov	r0, r4
  41710c:	47b8      	blx	r7
  41710e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  417110:	6831      	ldr	r1, [r6, #0]
  417112:	3110      	adds	r1, #16
  417114:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  417116:	6831      	ldr	r1, [r6, #0]
  417118:	3154      	adds	r1, #84	; 0x54
  41711a:	4638      	mov	r0, r7
  41711c:	47a8      	blx	r5
            break;
  41711e:	e71d      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  417120:	2100      	movs	r1, #0
  417122:	4620      	mov	r0, r4
  417124:	4b21      	ldr	r3, [pc, #132]	; (4171ac <theme_apply+0x2c0>)
  417126:	4798      	blx	r3
  417128:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41712a:	4e21      	ldr	r6, [pc, #132]	; (4171b0 <theme_apply+0x2c4>)
  41712c:	6831      	ldr	r1, [r6, #0]
  41712e:	3104      	adds	r1, #4
  417130:	4d20      	ldr	r5, [pc, #128]	; (4171b4 <theme_apply+0x2c8>)
  417132:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  417134:	6831      	ldr	r1, [r6, #0]
  417136:	3180      	adds	r1, #128	; 0x80
  417138:	4638      	mov	r0, r7
  41713a:	47a8      	blx	r5
            break;
  41713c:	e70e      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  41713e:	2140      	movs	r1, #64	; 0x40
  417140:	4620      	mov	r0, r4
  417142:	4f1a      	ldr	r7, [pc, #104]	; (4171ac <theme_apply+0x2c0>)
  417144:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  417146:	4e1a      	ldr	r6, [pc, #104]	; (4171b0 <theme_apply+0x2c4>)
  417148:	6831      	ldr	r1, [r6, #0]
  41714a:	3118      	adds	r1, #24
  41714c:	4d19      	ldr	r5, [pc, #100]	; (4171b4 <theme_apply+0x2c8>)
  41714e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  417150:	2141      	movs	r1, #65	; 0x41
  417152:	4620      	mov	r0, r4
  417154:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  417156:	6831      	ldr	r1, [r6, #0]
  417158:	3110      	adds	r1, #16
  41715a:	47a8      	blx	r5
            break;
  41715c:	e6fe      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  41715e:	2100      	movs	r1, #0
  417160:	4620      	mov	r0, r4
  417162:	4b12      	ldr	r3, [pc, #72]	; (4171ac <theme_apply+0x2c0>)
  417164:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  417166:	4b12      	ldr	r3, [pc, #72]	; (4171b0 <theme_apply+0x2c4>)
  417168:	6819      	ldr	r1, [r3, #0]
  41716a:	3170      	adds	r1, #112	; 0x70
  41716c:	4b11      	ldr	r3, [pc, #68]	; (4171b4 <theme_apply+0x2c8>)
  41716e:	4798      	blx	r3
            break;
  417170:	e6f4      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  417172:	2100      	movs	r1, #0
  417174:	4620      	mov	r0, r4
  417176:	4f0d      	ldr	r7, [pc, #52]	; (4171ac <theme_apply+0x2c0>)
  417178:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  41717a:	4e0d      	ldr	r6, [pc, #52]	; (4171b0 <theme_apply+0x2c4>)
  41717c:	6831      	ldr	r1, [r6, #0]
  41717e:	3104      	adds	r1, #4
  417180:	4d0c      	ldr	r5, [pc, #48]	; (4171b4 <theme_apply+0x2c8>)
  417182:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417184:	2140      	movs	r1, #64	; 0x40
  417186:	4620      	mov	r0, r4
  417188:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  41718a:	6831      	ldr	r1, [r6, #0]
  41718c:	3114      	adds	r1, #20
  41718e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  417190:	2101      	movs	r1, #1
  417192:	4620      	mov	r0, r4
  417194:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417196:	6831      	ldr	r1, [r6, #0]
  417198:	3184      	adds	r1, #132	; 0x84
  41719a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  41719c:	2102      	movs	r1, #2
  41719e:	4620      	mov	r0, r4
  4171a0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  4171a2:	6831      	ldr	r1, [r6, #0]
  4171a4:	3188      	adds	r1, #136	; 0x88
  4171a6:	47a8      	blx	r5
            break;
  4171a8:	e6d8      	b.n	416f5c <theme_apply+0x70>
  4171aa:	bf00      	nop
  4171ac:	0040567d 	.word	0x0040567d
  4171b0:	20414798 	.word	0x20414798
  4171b4:	00409769 	.word	0x00409769
  4171b8:	004071fd 	.word	0x004071fd
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  4171bc:	2100      	movs	r1, #0
  4171be:	4620      	mov	r0, r4
  4171c0:	4f9b      	ldr	r7, [pc, #620]	; (417430 <theme_apply+0x544>)
  4171c2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4171c4:	4e9b      	ldr	r6, [pc, #620]	; (417434 <theme_apply+0x548>)
  4171c6:	6831      	ldr	r1, [r6, #0]
  4171c8:	4d9b      	ldr	r5, [pc, #620]	; (417438 <theme_apply+0x54c>)
  4171ca:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4171cc:	2141      	movs	r1, #65	; 0x41
  4171ce:	4620      	mov	r0, r4
  4171d0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4171d2:	6831      	ldr	r1, [r6, #0]
  4171d4:	31ac      	adds	r1, #172	; 0xac
  4171d6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  4171d8:	2143      	movs	r1, #67	; 0x43
  4171da:	4620      	mov	r0, r4
  4171dc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  4171de:	6831      	ldr	r1, [r6, #0]
  4171e0:	31b0      	adds	r1, #176	; 0xb0
  4171e2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4171e4:	2142      	movs	r1, #66	; 0x42
  4171e6:	4620      	mov	r0, r4
  4171e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4171ea:	6831      	ldr	r1, [r6, #0]
  4171ec:	31a8      	adds	r1, #168	; 0xa8
  4171ee:	47a8      	blx	r5
            break;
  4171f0:	e6b4      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4171f2:	2140      	movs	r1, #64	; 0x40
  4171f4:	4620      	mov	r0, r4
  4171f6:	4b8e      	ldr	r3, [pc, #568]	; (417430 <theme_apply+0x544>)
  4171f8:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  4171fa:	4b8e      	ldr	r3, [pc, #568]	; (417434 <theme_apply+0x548>)
  4171fc:	6819      	ldr	r1, [r3, #0]
  4171fe:	31b4      	adds	r1, #180	; 0xb4
  417200:	4b8d      	ldr	r3, [pc, #564]	; (417438 <theme_apply+0x54c>)
  417202:	4798      	blx	r3
            break;
  417204:	e6aa      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  417206:	2100      	movs	r1, #0
  417208:	4620      	mov	r0, r4
  41720a:	4f89      	ldr	r7, [pc, #548]	; (417430 <theme_apply+0x544>)
  41720c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41720e:	4e89      	ldr	r6, [pc, #548]	; (417434 <theme_apply+0x548>)
  417210:	6831      	ldr	r1, [r6, #0]
  417212:	4d89      	ldr	r5, [pc, #548]	; (417438 <theme_apply+0x54c>)
  417214:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  417216:	2101      	movs	r1, #1
  417218:	4620      	mov	r0, r4
  41721a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41721c:	6831      	ldr	r1, [r6, #0]
  41721e:	3184      	adds	r1, #132	; 0x84
  417220:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  417222:	2102      	movs	r1, #2
  417224:	4620      	mov	r0, r4
  417226:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  417228:	6831      	ldr	r1, [r6, #0]
  41722a:	3188      	adds	r1, #136	; 0x88
  41722c:	47a8      	blx	r5
            break;
  41722e:	e695      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  417230:	2100      	movs	r1, #0
  417232:	4620      	mov	r0, r4
  417234:	4f7e      	ldr	r7, [pc, #504]	; (417430 <theme_apply+0x544>)
  417236:	47b8      	blx	r7
  417238:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41723a:	4e7e      	ldr	r6, [pc, #504]	; (417434 <theme_apply+0x548>)
  41723c:	6831      	ldr	r1, [r6, #0]
  41723e:	3104      	adds	r1, #4
  417240:	4d7d      	ldr	r5, [pc, #500]	; (417438 <theme_apply+0x54c>)
  417242:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  417244:	6831      	ldr	r1, [r6, #0]
  417246:	318c      	adds	r1, #140	; 0x8c
  417248:	4640      	mov	r0, r8
  41724a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  41724c:	2103      	movs	r1, #3
  41724e:	4620      	mov	r0, r4
  417250:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  417252:	6831      	ldr	r1, [r6, #0]
  417254:	3190      	adds	r1, #144	; 0x90
  417256:	47a8      	blx	r5
            break;
  417258:	e680      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  41725a:	2100      	movs	r1, #0
  41725c:	4620      	mov	r0, r4
  41725e:	4b74      	ldr	r3, [pc, #464]	; (417430 <theme_apply+0x544>)
  417260:	4798      	blx	r3
            break;
  417262:	e67b      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  417264:	2100      	movs	r1, #0
  417266:	4620      	mov	r0, r4
  417268:	4f71      	ldr	r7, [pc, #452]	; (417430 <theme_apply+0x544>)
  41726a:	47b8      	blx	r7
  41726c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41726e:	4e71      	ldr	r6, [pc, #452]	; (417434 <theme_apply+0x548>)
  417270:	6831      	ldr	r1, [r6, #0]
  417272:	3104      	adds	r1, #4
  417274:	4d70      	ldr	r5, [pc, #448]	; (417438 <theme_apply+0x54c>)
  417276:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  417278:	6831      	ldr	r1, [r6, #0]
  41727a:	3178      	adds	r1, #120	; 0x78
  41727c:	4640      	mov	r0, r8
  41727e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  417280:	2101      	movs	r1, #1
  417282:	4620      	mov	r0, r4
  417284:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417286:	6831      	ldr	r1, [r6, #0]
  417288:	3184      	adds	r1, #132	; 0x84
  41728a:	47a8      	blx	r5
            break;
  41728c:	e666      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  41728e:	2100      	movs	r1, #0
  417290:	4620      	mov	r0, r4
  417292:	4b67      	ldr	r3, [pc, #412]	; (417430 <theme_apply+0x544>)
  417294:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  417296:	4b67      	ldr	r3, [pc, #412]	; (417434 <theme_apply+0x548>)
  417298:	6819      	ldr	r1, [r3, #0]
  41729a:	317c      	adds	r1, #124	; 0x7c
  41729c:	4b66      	ldr	r3, [pc, #408]	; (417438 <theme_apply+0x54c>)
  41729e:	4798      	blx	r3
            break;
  4172a0:	e65c      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  4172a2:	2100      	movs	r1, #0
  4172a4:	4620      	mov	r0, r4
  4172a6:	4f62      	ldr	r7, [pc, #392]	; (417430 <theme_apply+0x544>)
  4172a8:	47b8      	blx	r7
  4172aa:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4172ac:	4e61      	ldr	r6, [pc, #388]	; (417434 <theme_apply+0x548>)
  4172ae:	6831      	ldr	r1, [r6, #0]
  4172b0:	3104      	adds	r1, #4
  4172b2:	4d61      	ldr	r5, [pc, #388]	; (417438 <theme_apply+0x54c>)
  4172b4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4172b6:	6831      	ldr	r1, [r6, #0]
  4172b8:	3108      	adds	r1, #8
  4172ba:	4640      	mov	r0, r8
  4172bc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4172be:	6831      	ldr	r1, [r6, #0]
  4172c0:	3118      	adds	r1, #24
  4172c2:	4640      	mov	r0, r8
  4172c4:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  4172c6:	2140      	movs	r1, #64	; 0x40
  4172c8:	4620      	mov	r0, r4
  4172ca:	47b8      	blx	r7
  4172cc:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4172ce:	6831      	ldr	r1, [r6, #0]
  4172d0:	3104      	adds	r1, #4
  4172d2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  4172d4:	6831      	ldr	r1, [r6, #0]
  4172d6:	3158      	adds	r1, #88	; 0x58
  4172d8:	4640      	mov	r0, r8
  4172da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  4172dc:	2141      	movs	r1, #65	; 0x41
  4172de:	4620      	mov	r0, r4
  4172e0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4172e2:	6831      	ldr	r1, [r6, #0]
  4172e4:	3184      	adds	r1, #132	; 0x84
  4172e6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  4172e8:	2142      	movs	r1, #66	; 0x42
  4172ea:	4620      	mov	r0, r4
  4172ec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  4172ee:	6831      	ldr	r1, [r6, #0]
  4172f0:	315c      	adds	r1, #92	; 0x5c
  4172f2:	47a8      	blx	r5
            break;
  4172f4:	e632      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  4172f6:	2100      	movs	r1, #0
  4172f8:	4620      	mov	r0, r4
  4172fa:	4f4d      	ldr	r7, [pc, #308]	; (417430 <theme_apply+0x544>)
  4172fc:	47b8      	blx	r7
  4172fe:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417300:	4e4c      	ldr	r6, [pc, #304]	; (417434 <theme_apply+0x548>)
  417302:	6831      	ldr	r1, [r6, #0]
  417304:	3104      	adds	r1, #4
  417306:	4d4c      	ldr	r5, [pc, #304]	; (417438 <theme_apply+0x54c>)
  417308:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  41730a:	6831      	ldr	r1, [r6, #0]
  41730c:	3144      	adds	r1, #68	; 0x44
  41730e:	4640      	mov	r0, r8
  417310:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417312:	6831      	ldr	r1, [r6, #0]
  417314:	3118      	adds	r1, #24
  417316:	4640      	mov	r0, r8
  417318:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  41731a:	2101      	movs	r1, #1
  41731c:	4620      	mov	r0, r4
  41731e:	47b8      	blx	r7
  417320:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  417322:	6831      	ldr	r1, [r6, #0]
  417324:	3118      	adds	r1, #24
  417326:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  417328:	6831      	ldr	r1, [r6, #0]
  41732a:	3148      	adds	r1, #72	; 0x48
  41732c:	4640      	mov	r0, r8
  41732e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  417330:	2103      	movs	r1, #3
  417332:	4620      	mov	r0, r4
  417334:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  417336:	6831      	ldr	r1, [r6, #0]
  417338:	3148      	adds	r1, #72	; 0x48
  41733a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  41733c:	2102      	movs	r1, #2
  41733e:	4620      	mov	r0, r4
  417340:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  417342:	6831      	ldr	r1, [r6, #0]
  417344:	314c      	adds	r1, #76	; 0x4c
  417346:	47a8      	blx	r5
            break;
  417348:	e608      	b.n	416f5c <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  41734a:	2100      	movs	r1, #0
  41734c:	4620      	mov	r0, r4
  41734e:	4b38      	ldr	r3, [pc, #224]	; (417430 <theme_apply+0x544>)
  417350:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  417352:	4b38      	ldr	r3, [pc, #224]	; (417434 <theme_apply+0x548>)
  417354:	6819      	ldr	r1, [r3, #0]
  417356:	3104      	adds	r1, #4
  417358:	4b37      	ldr	r3, [pc, #220]	; (417438 <theme_apply+0x54c>)
  41735a:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  41735c:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  41735e:	e009      	b.n	417374 <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  417360:	b2e9      	uxtb	r1, r5
  417362:	4620      	mov	r0, r4
  417364:	4b32      	ldr	r3, [pc, #200]	; (417430 <theme_apply+0x544>)
  417366:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  417368:	4b32      	ldr	r3, [pc, #200]	; (417434 <theme_apply+0x548>)
  41736a:	6819      	ldr	r1, [r3, #0]
  41736c:	31a4      	adds	r1, #164	; 0xa4
  41736e:	4b32      	ldr	r3, [pc, #200]	; (417438 <theme_apply+0x54c>)
  417370:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  417372:	3501      	adds	r5, #1
  417374:	2d04      	cmp	r5, #4
  417376:	ddf3      	ble.n	417360 <theme_apply+0x474>
  417378:	e5f0      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  41737a:	2100      	movs	r1, #0
  41737c:	4620      	mov	r0, r4
  41737e:	4f2c      	ldr	r7, [pc, #176]	; (417430 <theme_apply+0x544>)
  417380:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  417382:	4e2c      	ldr	r6, [pc, #176]	; (417434 <theme_apply+0x548>)
  417384:	6831      	ldr	r1, [r6, #0]
  417386:	4d2c      	ldr	r5, [pc, #176]	; (417438 <theme_apply+0x54c>)
  417388:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  41738a:	2142      	movs	r1, #66	; 0x42
  41738c:	4620      	mov	r0, r4
  41738e:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417390:	6831      	ldr	r1, [r6, #0]
  417392:	3184      	adds	r1, #132	; 0x84
  417394:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417396:	2141      	movs	r1, #65	; 0x41
  417398:	4620      	mov	r0, r4
  41739a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  41739c:	6831      	ldr	r1, [r6, #0]
  41739e:	31b4      	adds	r1, #180	; 0xb4
  4173a0:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  4173a2:	2140      	movs	r1, #64	; 0x40
  4173a4:	4620      	mov	r0, r4
  4173a6:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  4173a8:	6831      	ldr	r1, [r6, #0]
  4173aa:	31ac      	adds	r1, #172	; 0xac
  4173ac:	47a8      	blx	r5
            break;
  4173ae:	e5d5      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4173b0:	2100      	movs	r1, #0
  4173b2:	4620      	mov	r0, r4
  4173b4:	4b1e      	ldr	r3, [pc, #120]	; (417430 <theme_apply+0x544>)
  4173b6:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  4173b8:	4b1e      	ldr	r3, [pc, #120]	; (417434 <theme_apply+0x548>)
  4173ba:	6819      	ldr	r1, [r3, #0]
  4173bc:	31a8      	adds	r1, #168	; 0xa8
  4173be:	4b1e      	ldr	r3, [pc, #120]	; (417438 <theme_apply+0x54c>)
  4173c0:	4798      	blx	r3
            break;
  4173c2:	e5cb      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  4173c4:	2100      	movs	r1, #0
  4173c6:	4620      	mov	r0, r4
  4173c8:	4f19      	ldr	r7, [pc, #100]	; (417430 <theme_apply+0x544>)
  4173ca:	47b8      	blx	r7
  4173cc:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4173ce:	4e19      	ldr	r6, [pc, #100]	; (417434 <theme_apply+0x548>)
  4173d0:	6831      	ldr	r1, [r6, #0]
  4173d2:	3104      	adds	r1, #4
  4173d4:	4d18      	ldr	r5, [pc, #96]	; (417438 <theme_apply+0x54c>)
  4173d6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  4173d8:	6831      	ldr	r1, [r6, #0]
  4173da:	3118      	adds	r1, #24
  4173dc:	4640      	mov	r0, r8
  4173de:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  4173e0:	2104      	movs	r1, #4
  4173e2:	4620      	mov	r0, r4
  4173e4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  4173e6:	6831      	ldr	r1, [r6, #0]
  4173e8:	31bc      	adds	r1, #188	; 0xbc
  4173ea:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  4173ec:	2103      	movs	r1, #3
  4173ee:	4620      	mov	r0, r4
  4173f0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  4173f2:	6831      	ldr	r1, [r6, #0]
  4173f4:	31b8      	adds	r1, #184	; 0xb8
  4173f6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  4173f8:	2101      	movs	r1, #1
  4173fa:	4620      	mov	r0, r4
  4173fc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4173fe:	6831      	ldr	r1, [r6, #0]
  417400:	3184      	adds	r1, #132	; 0x84
  417402:	47a8      	blx	r5
            break;
  417404:	e5aa      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  417406:	2100      	movs	r1, #0
  417408:	4620      	mov	r0, r4
  41740a:	4f09      	ldr	r7, [pc, #36]	; (417430 <theme_apply+0x544>)
  41740c:	47b8      	blx	r7
  41740e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417410:	4e08      	ldr	r6, [pc, #32]	; (417434 <theme_apply+0x548>)
  417412:	6831      	ldr	r1, [r6, #0]
  417414:	3104      	adds	r1, #4
  417416:	4d08      	ldr	r5, [pc, #32]	; (417438 <theme_apply+0x54c>)
  417418:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41741a:	6831      	ldr	r1, [r6, #0]
  41741c:	3118      	adds	r1, #24
  41741e:	4640      	mov	r0, r8
  417420:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  417422:	2103      	movs	r1, #3
  417424:	4620      	mov	r0, r4
  417426:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  417428:	6831      	ldr	r1, [r6, #0]
  41742a:	319c      	adds	r1, #156	; 0x9c
  41742c:	47a8      	blx	r5
            break;
  41742e:	e595      	b.n	416f5c <theme_apply+0x70>
  417430:	0040567d 	.word	0x0040567d
  417434:	20414798 	.word	0x20414798
  417438:	00409769 	.word	0x00409769
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  41743c:	2100      	movs	r1, #0
  41743e:	4620      	mov	r0, r4
  417440:	4b31      	ldr	r3, [pc, #196]	; (417508 <theme_apply+0x61c>)
  417442:	4798      	blx	r3
  417444:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  417446:	4e31      	ldr	r6, [pc, #196]	; (41750c <theme_apply+0x620>)
  417448:	6831      	ldr	r1, [r6, #0]
  41744a:	3104      	adds	r1, #4
  41744c:	4d30      	ldr	r5, [pc, #192]	; (417510 <theme_apply+0x624>)
  41744e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417450:	6831      	ldr	r1, [r6, #0]
  417452:	3108      	adds	r1, #8
  417454:	4638      	mov	r0, r7
  417456:	47a8      	blx	r5
            break;
  417458:	e580      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  41745a:	2100      	movs	r1, #0
  41745c:	4620      	mov	r0, r4
  41745e:	4f2a      	ldr	r7, [pc, #168]	; (417508 <theme_apply+0x61c>)
  417460:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  417462:	4e2a      	ldr	r6, [pc, #168]	; (41750c <theme_apply+0x620>)
  417464:	6831      	ldr	r1, [r6, #0]
  417466:	3104      	adds	r1, #4
  417468:	4d29      	ldr	r5, [pc, #164]	; (417510 <theme_apply+0x624>)
  41746a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  41746c:	2103      	movs	r1, #3
  41746e:	4620      	mov	r0, r4
  417470:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  417472:	6831      	ldr	r1, [r6, #0]
  417474:	3130      	adds	r1, #48	; 0x30
  417476:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  417478:	2101      	movs	r1, #1
  41747a:	4620      	mov	r0, r4
  41747c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  41747e:	6831      	ldr	r1, [r6, #0]
  417480:	3134      	adds	r1, #52	; 0x34
  417482:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  417484:	2102      	movs	r1, #2
  417486:	4620      	mov	r0, r4
  417488:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  41748a:	6831      	ldr	r1, [r6, #0]
  41748c:	3138      	adds	r1, #56	; 0x38
  41748e:	47a8      	blx	r5
            break;
  417490:	e564      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  417492:	2100      	movs	r1, #0
  417494:	4620      	mov	r0, r4
  417496:	4f1c      	ldr	r7, [pc, #112]	; (417508 <theme_apply+0x61c>)
  417498:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  41749a:	4e1c      	ldr	r6, [pc, #112]	; (41750c <theme_apply+0x620>)
  41749c:	6831      	ldr	r1, [r6, #0]
  41749e:	313c      	adds	r1, #60	; 0x3c
  4174a0:	4d1b      	ldr	r5, [pc, #108]	; (417510 <theme_apply+0x624>)
  4174a2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  4174a4:	2101      	movs	r1, #1
  4174a6:	4620      	mov	r0, r4
  4174a8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  4174aa:	6831      	ldr	r1, [r6, #0]
  4174ac:	3140      	adds	r1, #64	; 0x40
  4174ae:	47a8      	blx	r5
            break;
  4174b0:	e554      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  4174b2:	2100      	movs	r1, #0
  4174b4:	4620      	mov	r0, r4
  4174b6:	4b14      	ldr	r3, [pc, #80]	; (417508 <theme_apply+0x61c>)
  4174b8:	4798      	blx	r3
  4174ba:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4174bc:	4e13      	ldr	r6, [pc, #76]	; (41750c <theme_apply+0x620>)
  4174be:	6831      	ldr	r1, [r6, #0]
  4174c0:	3104      	adds	r1, #4
  4174c2:	4d13      	ldr	r5, [pc, #76]	; (417510 <theme_apply+0x624>)
  4174c4:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  4174c6:	6831      	ldr	r1, [r6, #0]
  4174c8:	3174      	adds	r1, #116	; 0x74
  4174ca:	4638      	mov	r0, r7
  4174cc:	47a8      	blx	r5
            break;
  4174ce:	e545      	b.n	416f5c <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  4174d0:	2100      	movs	r1, #0
  4174d2:	4620      	mov	r0, r4
  4174d4:	4f0c      	ldr	r7, [pc, #48]	; (417508 <theme_apply+0x61c>)
  4174d6:	47b8      	blx	r7
  4174d8:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4174da:	4e0c      	ldr	r6, [pc, #48]	; (41750c <theme_apply+0x620>)
  4174dc:	6831      	ldr	r1, [r6, #0]
  4174de:	3104      	adds	r1, #4
  4174e0:	4d0b      	ldr	r5, [pc, #44]	; (417510 <theme_apply+0x624>)
  4174e2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  4174e4:	6831      	ldr	r1, [r6, #0]
  4174e6:	3160      	adds	r1, #96	; 0x60
  4174e8:	4640      	mov	r0, r8
  4174ea:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  4174ec:	2101      	movs	r1, #1
  4174ee:	4620      	mov	r0, r4
  4174f0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  4174f2:	6831      	ldr	r1, [r6, #0]
  4174f4:	3164      	adds	r1, #100	; 0x64
  4174f6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  4174f8:	2102      	movs	r1, #2
  4174fa:	4620      	mov	r0, r4
  4174fc:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  4174fe:	6831      	ldr	r1, [r6, #0]
  417500:	3168      	adds	r1, #104	; 0x68
  417502:	47a8      	blx	r5
            break;
  417504:	e52a      	b.n	416f5c <theme_apply+0x70>
  417506:	bf00      	nop
  417508:	0040567d 	.word	0x0040567d
  41750c:	20414798 	.word	0x20414798
  417510:	00409769 	.word	0x00409769

00417514 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  417514:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  417516:	4b04      	ldr	r3, [pc, #16]	; (417528 <style_init_reset+0x14>)
  417518:	781b      	ldrb	r3, [r3, #0]
  41751a:	b913      	cbnz	r3, 417522 <style_init_reset+0xe>
    else lv_style_init(style);
  41751c:	4b03      	ldr	r3, [pc, #12]	; (41752c <style_init_reset+0x18>)
  41751e:	4798      	blx	r3
  417520:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  417522:	4b03      	ldr	r3, [pc, #12]	; (417530 <style_init_reset+0x1c>)
  417524:	4798      	blx	r3
  417526:	bd08      	pop	{r3, pc}
  417528:	20414794 	.word	0x20414794
  41752c:	00409685 	.word	0x00409685
  417530:	004098a9 	.word	0x004098a9

00417534 <bar_init>:
{
  417534:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  417536:	4c6f      	ldr	r4, [pc, #444]	; (4176f4 <bar_init+0x1c0>)
  417538:	6820      	ldr	r0, [r4, #0]
  41753a:	3028      	adds	r0, #40	; 0x28
  41753c:	4b6e      	ldr	r3, [pc, #440]	; (4176f8 <bar_init+0x1c4>)
  41753e:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417540:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417542:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417546:	2101      	movs	r1, #1
  417548:	3028      	adds	r0, #40	; 0x28
  41754a:	4b6c      	ldr	r3, [pc, #432]	; (4176fc <bar_init+0x1c8>)
  41754c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41754e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417550:	22ff      	movs	r2, #255	; 0xff
  417552:	212c      	movs	r1, #44	; 0x2c
  417554:	3028      	adds	r0, #40	; 0x28
  417556:	4b6a      	ldr	r3, [pc, #424]	; (417700 <bar_init+0x1cc>)
  417558:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41755a:	6820      	ldr	r0, [r4, #0]
  41755c:	3028      	adds	r0, #40	; 0x28
  41755e:	4b69      	ldr	r3, [pc, #420]	; (417704 <bar_init+0x1d0>)
  417560:	6a1b      	ldr	r3, [r3, #32]
  417562:	f013 0f02 	tst.w	r3, #2
  417566:	f000 808e 	beq.w	417686 <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  41756a:	f04f 0200 	mov.w	r2, #0
  41756e:	2306      	movs	r3, #6
  417570:	f363 0202 	bfi	r2, r3, #0, #3
  417574:	231a      	movs	r3, #26
  417576:	f363 02c7 	bfi	r2, r3, #3, #5
  41757a:	231b      	movs	r3, #27
  41757c:	f363 220c 	bfi	r2, r3, #8, #5
  417580:	2305      	movs	r3, #5
  417582:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417586:	2129      	movs	r1, #41	; 0x29
  417588:	4b5f      	ldr	r3, [pc, #380]	; (417708 <bar_init+0x1d4>)
  41758a:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  41758c:	4b59      	ldr	r3, [pc, #356]	; (4176f4 <bar_init+0x1c0>)
  41758e:	6818      	ldr	r0, [r3, #0]
  417590:	3028      	adds	r0, #40	; 0x28
  417592:	4b5c      	ldr	r3, [pc, #368]	; (417704 <bar_init+0x1d0>)
  417594:	6a1b      	ldr	r3, [r3, #32]
  417596:	f013 0f02 	tst.w	r3, #2
  41759a:	f000 8082 	beq.w	4176a2 <bar_init+0x16e>
  41759e:	f04f 0200 	mov.w	r2, #0
  4175a2:	2302      	movs	r3, #2
  4175a4:	f363 0202 	bfi	r2, r3, #0, #3
  4175a8:	2306      	movs	r3, #6
  4175aa:	f363 02c7 	bfi	r2, r3, #3, #5
  4175ae:	2309      	movs	r3, #9
  4175b0:	f363 220c 	bfi	r2, r3, #8, #5
  4175b4:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4175b8:	2179      	movs	r1, #121	; 0x79
  4175ba:	4d53      	ldr	r5, [pc, #332]	; (417708 <bar_init+0x1d4>)
  4175bc:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  4175be:	4c4d      	ldr	r4, [pc, #308]	; (4176f4 <bar_init+0x1c0>)
  4175c0:	6820      	ldr	r0, [r4, #0]
  4175c2:	4e50      	ldr	r6, [pc, #320]	; (417704 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4175c4:	89b2      	ldrh	r2, [r6, #12]
  4175c6:	2149      	movs	r1, #73	; 0x49
  4175c8:	3028      	adds	r0, #40	; 0x28
  4175ca:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  4175cc:	6820      	ldr	r0, [r4, #0]
  4175ce:	89f2      	ldrh	r2, [r6, #14]
  4175d0:	f240 4149 	movw	r1, #1097	; 0x449
  4175d4:	3028      	adds	r0, #40	; 0x28
  4175d6:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  4175d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4175da:	2200      	movs	r2, #0
  4175dc:	214c      	movs	r1, #76	; 0x4c
  4175de:	3028      	adds	r0, #40	; 0x28
  4175e0:	4d47      	ldr	r5, [pc, #284]	; (417700 <bar_init+0x1cc>)
  4175e2:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  4175e4:	6820      	ldr	r0, [r4, #0]
  4175e6:	227f      	movs	r2, #127	; 0x7f
  4175e8:	f44f 7113 	mov.w	r1, #588	; 0x24c
  4175ec:	3028      	adds	r0, #40	; 0x28
  4175ee:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4175f0:	6824      	ldr	r4, [r4, #0]
  4175f2:	3428      	adds	r4, #40	; 0x28
  4175f4:	6a33      	ldr	r3, [r6, #32]
  4175f6:	f013 0f20 	tst.w	r3, #32
  4175fa:	d055      	beq.n	4176a8 <bar_init+0x174>
  4175fc:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  4175fe:	2140      	movs	r1, #64	; 0x40
  417600:	4620      	mov	r0, r4
  417602:	4d3e      	ldr	r5, [pc, #248]	; (4176fc <bar_init+0x1c8>)
  417604:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  417606:	4c3b      	ldr	r4, [pc, #236]	; (4176f4 <bar_init+0x1c0>)
  417608:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41760a:	2200      	movs	r2, #0
  41760c:	21b0      	movs	r1, #176	; 0xb0
  41760e:	3028      	adds	r0, #40	; 0x28
  417610:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  417612:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  417614:	224c      	movs	r2, #76	; 0x4c
  417616:	21b7      	movs	r1, #183	; 0xb7
  417618:	3028      	adds	r0, #40	; 0x28
  41761a:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  41761c:	6820      	ldr	r0, [r4, #0]
  41761e:	302c      	adds	r0, #44	; 0x2c
  417620:	4b35      	ldr	r3, [pc, #212]	; (4176f8 <bar_init+0x1c4>)
  417622:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  417624:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417626:	22ff      	movs	r2, #255	; 0xff
  417628:	212c      	movs	r1, #44	; 0x2c
  41762a:	4408      	add	r0, r1
  41762c:	4b34      	ldr	r3, [pc, #208]	; (417700 <bar_init+0x1cc>)
  41762e:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417630:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417632:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417636:	2101      	movs	r1, #1
  417638:	302c      	adds	r0, #44	; 0x2c
  41763a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  41763c:	6820      	ldr	r0, [r4, #0]
  41763e:	4d31      	ldr	r5, [pc, #196]	; (417704 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417640:	89aa      	ldrh	r2, [r5, #12]
  417642:	2129      	movs	r1, #41	; 0x29
  417644:	302c      	adds	r0, #44	; 0x2c
  417646:	4e30      	ldr	r6, [pc, #192]	; (417708 <bar_init+0x1d4>)
  417648:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  41764a:	6820      	ldr	r0, [r4, #0]
  41764c:	f04f 0200 	mov.w	r2, #0
  417650:	2304      	movs	r3, #4
  417652:	f363 0202 	bfi	r2, r3, #0, #3
  417656:	2311      	movs	r3, #17
  417658:	f363 02c7 	bfi	r2, r3, #3, #5
  41765c:	f363 220c 	bfi	r2, r3, #8, #5
  417660:	2302      	movs	r3, #2
  417662:	f363 324f 	bfi	r2, r3, #13, #3
  417666:	f242 0129 	movw	r1, #8233	; 0x2029
  41766a:	302c      	adds	r0, #44	; 0x2c
  41766c:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  41766e:	6820      	ldr	r0, [r4, #0]
  417670:	302c      	adds	r0, #44	; 0x2c
  417672:	6a2b      	ldr	r3, [r5, #32]
  417674:	f013 0f02 	tst.w	r3, #2
  417678:	d12d      	bne.n	4176d6 <bar_init+0x1a2>
  41767a:	4b24      	ldr	r3, [pc, #144]	; (41770c <bar_init+0x1d8>)
  41767c:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41767e:	2179      	movs	r1, #121	; 0x79
  417680:	4b21      	ldr	r3, [pc, #132]	; (417708 <bar_init+0x1d4>)
  417682:	4798      	blx	r3
  417684:	bd70      	pop	{r4, r5, r6, pc}
  417686:	2302      	movs	r3, #2
  417688:	f04f 0200 	mov.w	r2, #0
  41768c:	f363 0202 	bfi	r2, r3, #0, #3
  417690:	2108      	movs	r1, #8
  417692:	f361 02c7 	bfi	r2, r1, #3, #5
  417696:	2109      	movs	r1, #9
  417698:	f361 220c 	bfi	r2, r1, #8, #5
  41769c:	f363 324f 	bfi	r2, r3, #13, #3
  4176a0:	e771      	b.n	417586 <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4176a2:	4b1a      	ldr	r3, [pc, #104]	; (41770c <bar_init+0x1d8>)
  4176a4:	881a      	ldrh	r2, [r3, #0]
  4176a6:	e787      	b.n	4175b8 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4176a8:	2000      	movs	r0, #0
  4176aa:	4b19      	ldr	r3, [pc, #100]	; (417710 <bar_init+0x1dc>)
  4176ac:	4798      	blx	r3
  4176ae:	3028      	adds	r0, #40	; 0x28
  4176b0:	0040      	lsls	r0, r0, #1
  4176b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4176b6:	da01      	bge.n	4176bc <bar_init+0x188>
  4176b8:	2201      	movs	r2, #1
  4176ba:	e7a0      	b.n	4175fe <bar_init+0xca>
  4176bc:	2000      	movs	r0, #0
  4176be:	4b14      	ldr	r3, [pc, #80]	; (417710 <bar_init+0x1dc>)
  4176c0:	4798      	blx	r3
  4176c2:	3028      	adds	r0, #40	; 0x28
  4176c4:	0040      	lsls	r0, r0, #1
  4176c6:	4b13      	ldr	r3, [pc, #76]	; (417714 <bar_init+0x1e0>)
  4176c8:	fb83 2300 	smull	r2, r3, r3, r0
  4176cc:	17c2      	asrs	r2, r0, #31
  4176ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4176d2:	b212      	sxth	r2, r2
  4176d4:	e793      	b.n	4175fe <bar_init+0xca>
  4176d6:	f04f 0200 	mov.w	r2, #0
  4176da:	2302      	movs	r3, #2
  4176dc:	f363 0202 	bfi	r2, r3, #0, #3
  4176e0:	2308      	movs	r3, #8
  4176e2:	f363 02c7 	bfi	r2, r3, #3, #5
  4176e6:	2309      	movs	r3, #9
  4176e8:	f363 220c 	bfi	r2, r3, #8, #5
  4176ec:	f36f 324f 	bfc	r2, #13, #3
  4176f0:	e7c5      	b.n	41767e <bar_init+0x14a>
  4176f2:	bf00      	nop
  4176f4:	20414798 	.word	0x20414798
  4176f8:	00417515 	.word	0x00417515
  4176fc:	00409a6d 	.word	0x00409a6d
  417700:	00409d8d 	.word	0x00409d8d
  417704:	2041479c 	.word	0x2041479c
  417708:	00409bfd 	.word	0x00409bfd
  41770c:	00426d08 	.word	0x00426d08
  417710:	0041445d 	.word	0x0041445d
  417714:	66666667 	.word	0x66666667

00417718 <slider_init>:
{
  417718:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  41771a:	4ca3      	ldr	r4, [pc, #652]	; (4179a8 <slider_init+0x290>)
  41771c:	6820      	ldr	r0, [r4, #0]
  41771e:	3094      	adds	r0, #148	; 0x94
  417720:	4ba2      	ldr	r3, [pc, #648]	; (4179ac <slider_init+0x294>)
  417722:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  417724:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417726:	22ff      	movs	r2, #255	; 0xff
  417728:	212c      	movs	r1, #44	; 0x2c
  41772a:	3094      	adds	r0, #148	; 0x94
  41772c:	4ba0      	ldr	r3, [pc, #640]	; (4179b0 <slider_init+0x298>)
  41772e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  417730:	6820      	ldr	r0, [r4, #0]
  417732:	3094      	adds	r0, #148	; 0x94
  417734:	4b9f      	ldr	r3, [pc, #636]	; (4179b4 <slider_init+0x29c>)
  417736:	6a1b      	ldr	r3, [r3, #32]
  417738:	f013 0f02 	tst.w	r3, #2
  41773c:	f000 80ba 	beq.w	4178b4 <slider_init+0x19c>
  417740:	4b9c      	ldr	r3, [pc, #624]	; (4179b4 <slider_init+0x29c>)
  417742:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417744:	2129      	movs	r1, #41	; 0x29
  417746:	4b9c      	ldr	r3, [pc, #624]	; (4179b8 <slider_init+0x2a0>)
  417748:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  41774a:	4b97      	ldr	r3, [pc, #604]	; (4179a8 <slider_init+0x290>)
  41774c:	6818      	ldr	r0, [r3, #0]
  41774e:	3094      	adds	r0, #148	; 0x94
  417750:	4b98      	ldr	r3, [pc, #608]	; (4179b4 <slider_init+0x29c>)
  417752:	6a1b      	ldr	r3, [r3, #32]
  417754:	f013 0f02 	tst.w	r3, #2
  417758:	f000 80af 	beq.w	4178ba <slider_init+0x1a2>
  41775c:	f04f 0200 	mov.w	r2, #0
  417760:	2302      	movs	r3, #2
  417762:	f363 0202 	bfi	r2, r3, #0, #3
  417766:	2306      	movs	r3, #6
  417768:	f363 02c7 	bfi	r2, r3, #3, #5
  41776c:	2309      	movs	r3, #9
  41776e:	f363 220c 	bfi	r2, r3, #8, #5
  417772:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417776:	2179      	movs	r1, #121	; 0x79
  417778:	4b8f      	ldr	r3, [pc, #572]	; (4179b8 <slider_init+0x2a0>)
  41777a:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41777c:	4c8a      	ldr	r4, [pc, #552]	; (4179a8 <slider_init+0x290>)
  41777e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417780:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417784:	2101      	movs	r1, #1
  417786:	3094      	adds	r0, #148	; 0x94
  417788:	4b8c      	ldr	r3, [pc, #560]	; (4179bc <slider_init+0x2a4>)
  41778a:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  41778c:	6824      	ldr	r4, [r4, #0]
  41778e:	3494      	adds	r4, #148	; 0x94
  417790:	2000      	movs	r0, #0
  417792:	4b8b      	ldr	r3, [pc, #556]	; (4179c0 <slider_init+0x2a8>)
  417794:	4798      	blx	r3
  417796:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41779a:	3050      	adds	r0, #80	; 0x50
  41779c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4177a0:	f280 808e 	bge.w	4178c0 <slider_init+0x1a8>
  4177a4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4177a6:	2112      	movs	r1, #18
  4177a8:	4620      	mov	r0, r4
  4177aa:	4b84      	ldr	r3, [pc, #528]	; (4179bc <slider_init+0x2a4>)
  4177ac:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4177ae:	4b7e      	ldr	r3, [pc, #504]	; (4179a8 <slider_init+0x290>)
  4177b0:	681c      	ldr	r4, [r3, #0]
  4177b2:	3494      	adds	r4, #148	; 0x94
  4177b4:	2000      	movs	r0, #0
  4177b6:	4b82      	ldr	r3, [pc, #520]	; (4179c0 <slider_init+0x2a8>)
  4177b8:	4798      	blx	r3
  4177ba:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4177be:	3050      	adds	r0, #80	; 0x50
  4177c0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4177c4:	f280 808a 	bge.w	4178dc <slider_init+0x1c4>
  4177c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4177ca:	2113      	movs	r1, #19
  4177cc:	4620      	mov	r0, r4
  4177ce:	4b7b      	ldr	r3, [pc, #492]	; (4179bc <slider_init+0x2a4>)
  4177d0:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4177d2:	4b75      	ldr	r3, [pc, #468]	; (4179a8 <slider_init+0x290>)
  4177d4:	681c      	ldr	r4, [r3, #0]
  4177d6:	3494      	adds	r4, #148	; 0x94
  4177d8:	2000      	movs	r0, #0
  4177da:	4b79      	ldr	r3, [pc, #484]	; (4179c0 <slider_init+0x2a8>)
  4177dc:	4798      	blx	r3
  4177de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4177e2:	3050      	adds	r0, #80	; 0x50
  4177e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4177e8:	f280 8086 	bge.w	4178f8 <slider_init+0x1e0>
  4177ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4177ee:	2110      	movs	r1, #16
  4177f0:	4620      	mov	r0, r4
  4177f2:	4b72      	ldr	r3, [pc, #456]	; (4179bc <slider_init+0x2a4>)
  4177f4:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4177f6:	4b6c      	ldr	r3, [pc, #432]	; (4179a8 <slider_init+0x290>)
  4177f8:	681c      	ldr	r4, [r3, #0]
  4177fa:	3494      	adds	r4, #148	; 0x94
  4177fc:	2000      	movs	r0, #0
  4177fe:	4b70      	ldr	r3, [pc, #448]	; (4179c0 <slider_init+0x2a8>)
  417800:	4798      	blx	r3
  417802:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417806:	3050      	adds	r0, #80	; 0x50
  417808:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41780c:	f280 8082 	bge.w	417914 <slider_init+0x1fc>
  417810:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417812:	2111      	movs	r1, #17
  417814:	4620      	mov	r0, r4
  417816:	4b69      	ldr	r3, [pc, #420]	; (4179bc <slider_init+0x2a4>)
  417818:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  41781a:	4c63      	ldr	r4, [pc, #396]	; (4179a8 <slider_init+0x290>)
  41781c:	6820      	ldr	r0, [r4, #0]
  41781e:	3098      	adds	r0, #152	; 0x98
  417820:	4b62      	ldr	r3, [pc, #392]	; (4179ac <slider_init+0x294>)
  417822:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417824:	6824      	ldr	r4, [r4, #0]
  417826:	3498      	adds	r4, #152	; 0x98
  417828:	2000      	movs	r0, #0
  41782a:	4b65      	ldr	r3, [pc, #404]	; (4179c0 <slider_init+0x2a8>)
  41782c:	4798      	blx	r3
  41782e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417832:	0040      	lsls	r0, r0, #1
  417834:	3050      	adds	r0, #80	; 0x50
  417836:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41783a:	da79      	bge.n	417930 <slider_init+0x218>
  41783c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41783e:	2117      	movs	r1, #23
  417840:	4620      	mov	r0, r4
  417842:	4b5e      	ldr	r3, [pc, #376]	; (4179bc <slider_init+0x2a4>)
  417844:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417846:	4b58      	ldr	r3, [pc, #352]	; (4179a8 <slider_init+0x290>)
  417848:	681c      	ldr	r4, [r3, #0]
  41784a:	3498      	adds	r4, #152	; 0x98
  41784c:	2000      	movs	r0, #0
  41784e:	4b5c      	ldr	r3, [pc, #368]	; (4179c0 <slider_init+0x2a8>)
  417850:	4798      	blx	r3
  417852:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417856:	0040      	lsls	r0, r0, #1
  417858:	3050      	adds	r0, #80	; 0x50
  41785a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41785e:	da76      	bge.n	41794e <slider_init+0x236>
  417860:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  417862:	2118      	movs	r1, #24
  417864:	4620      	mov	r0, r4
  417866:	4b55      	ldr	r3, [pc, #340]	; (4179bc <slider_init+0x2a4>)
  417868:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41786a:	4b4f      	ldr	r3, [pc, #316]	; (4179a8 <slider_init+0x290>)
  41786c:	681c      	ldr	r4, [r3, #0]
  41786e:	3498      	adds	r4, #152	; 0x98
  417870:	2000      	movs	r0, #0
  417872:	4b53      	ldr	r3, [pc, #332]	; (4179c0 <slider_init+0x2a8>)
  417874:	4798      	blx	r3
  417876:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41787a:	0040      	lsls	r0, r0, #1
  41787c:	3050      	adds	r0, #80	; 0x50
  41787e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417882:	da73      	bge.n	41796c <slider_init+0x254>
  417884:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  417886:	2115      	movs	r1, #21
  417888:	4620      	mov	r0, r4
  41788a:	4b4c      	ldr	r3, [pc, #304]	; (4179bc <slider_init+0x2a4>)
  41788c:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41788e:	4b46      	ldr	r3, [pc, #280]	; (4179a8 <slider_init+0x290>)
  417890:	681c      	ldr	r4, [r3, #0]
  417892:	3498      	adds	r4, #152	; 0x98
  417894:	2000      	movs	r0, #0
  417896:	4b4a      	ldr	r3, [pc, #296]	; (4179c0 <slider_init+0x2a8>)
  417898:	4798      	blx	r3
  41789a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41789e:	0040      	lsls	r0, r0, #1
  4178a0:	3050      	adds	r0, #80	; 0x50
  4178a2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4178a6:	da70      	bge.n	41798a <slider_init+0x272>
  4178a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  4178aa:	2116      	movs	r1, #22
  4178ac:	4620      	mov	r0, r4
  4178ae:	4b43      	ldr	r3, [pc, #268]	; (4179bc <slider_init+0x2a4>)
  4178b0:	4798      	blx	r3
  4178b2:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  4178b4:	4b43      	ldr	r3, [pc, #268]	; (4179c4 <slider_init+0x2ac>)
  4178b6:	881a      	ldrh	r2, [r3, #0]
  4178b8:	e744      	b.n	417744 <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4178ba:	4b42      	ldr	r3, [pc, #264]	; (4179c4 <slider_init+0x2ac>)
  4178bc:	881a      	ldrh	r2, [r3, #0]
  4178be:	e75a      	b.n	417776 <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4178c0:	2000      	movs	r0, #0
  4178c2:	4b3f      	ldr	r3, [pc, #252]	; (4179c0 <slider_init+0x2a8>)
  4178c4:	4798      	blx	r3
  4178c6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4178ca:	3050      	adds	r0, #80	; 0x50
  4178cc:	4b3e      	ldr	r3, [pc, #248]	; (4179c8 <slider_init+0x2b0>)
  4178ce:	fb83 2300 	smull	r2, r3, r3, r0
  4178d2:	17c2      	asrs	r2, r0, #31
  4178d4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4178d8:	b212      	sxth	r2, r2
  4178da:	e764      	b.n	4177a6 <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4178dc:	2000      	movs	r0, #0
  4178de:	4b38      	ldr	r3, [pc, #224]	; (4179c0 <slider_init+0x2a8>)
  4178e0:	4798      	blx	r3
  4178e2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4178e6:	3050      	adds	r0, #80	; 0x50
  4178e8:	4b37      	ldr	r3, [pc, #220]	; (4179c8 <slider_init+0x2b0>)
  4178ea:	fb83 2300 	smull	r2, r3, r3, r0
  4178ee:	17c2      	asrs	r2, r0, #31
  4178f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4178f4:	b212      	sxth	r2, r2
  4178f6:	e768      	b.n	4177ca <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  4178f8:	2000      	movs	r0, #0
  4178fa:	4b31      	ldr	r3, [pc, #196]	; (4179c0 <slider_init+0x2a8>)
  4178fc:	4798      	blx	r3
  4178fe:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417902:	3050      	adds	r0, #80	; 0x50
  417904:	4b30      	ldr	r3, [pc, #192]	; (4179c8 <slider_init+0x2b0>)
  417906:	fb83 2300 	smull	r2, r3, r3, r0
  41790a:	17c2      	asrs	r2, r0, #31
  41790c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417910:	b212      	sxth	r2, r2
  417912:	e76c      	b.n	4177ee <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417914:	2000      	movs	r0, #0
  417916:	4b2a      	ldr	r3, [pc, #168]	; (4179c0 <slider_init+0x2a8>)
  417918:	4798      	blx	r3
  41791a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41791e:	3050      	adds	r0, #80	; 0x50
  417920:	4b29      	ldr	r3, [pc, #164]	; (4179c8 <slider_init+0x2b0>)
  417922:	fb83 2300 	smull	r2, r3, r3, r0
  417926:	17c2      	asrs	r2, r0, #31
  417928:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41792c:	b212      	sxth	r2, r2
  41792e:	e770      	b.n	417812 <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417930:	2000      	movs	r0, #0
  417932:	4b23      	ldr	r3, [pc, #140]	; (4179c0 <slider_init+0x2a8>)
  417934:	4798      	blx	r3
  417936:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41793a:	0040      	lsls	r0, r0, #1
  41793c:	3050      	adds	r0, #80	; 0x50
  41793e:	4b22      	ldr	r3, [pc, #136]	; (4179c8 <slider_init+0x2b0>)
  417940:	fb83 2300 	smull	r2, r3, r3, r0
  417944:	17c2      	asrs	r2, r0, #31
  417946:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41794a:	b212      	sxth	r2, r2
  41794c:	e777      	b.n	41783e <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41794e:	2000      	movs	r0, #0
  417950:	4b1b      	ldr	r3, [pc, #108]	; (4179c0 <slider_init+0x2a8>)
  417952:	4798      	blx	r3
  417954:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417958:	0040      	lsls	r0, r0, #1
  41795a:	3050      	adds	r0, #80	; 0x50
  41795c:	4b1a      	ldr	r3, [pc, #104]	; (4179c8 <slider_init+0x2b0>)
  41795e:	fb83 2300 	smull	r2, r3, r3, r0
  417962:	17c2      	asrs	r2, r0, #31
  417964:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417968:	b212      	sxth	r2, r2
  41796a:	e77a      	b.n	417862 <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41796c:	2000      	movs	r0, #0
  41796e:	4b14      	ldr	r3, [pc, #80]	; (4179c0 <slider_init+0x2a8>)
  417970:	4798      	blx	r3
  417972:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417976:	0040      	lsls	r0, r0, #1
  417978:	3050      	adds	r0, #80	; 0x50
  41797a:	4b13      	ldr	r3, [pc, #76]	; (4179c8 <slider_init+0x2b0>)
  41797c:	fb83 2300 	smull	r2, r3, r3, r0
  417980:	17c2      	asrs	r2, r0, #31
  417982:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417986:	b212      	sxth	r2, r2
  417988:	e77d      	b.n	417886 <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41798a:	2000      	movs	r0, #0
  41798c:	4b0c      	ldr	r3, [pc, #48]	; (4179c0 <slider_init+0x2a8>)
  41798e:	4798      	blx	r3
  417990:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417994:	0040      	lsls	r0, r0, #1
  417996:	3050      	adds	r0, #80	; 0x50
  417998:	4b0b      	ldr	r3, [pc, #44]	; (4179c8 <slider_init+0x2b0>)
  41799a:	fb83 2300 	smull	r2, r3, r3, r0
  41799e:	17c2      	asrs	r2, r0, #31
  4179a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4179a4:	b212      	sxth	r2, r2
  4179a6:	e780      	b.n	4178aa <slider_init+0x192>
  4179a8:	20414798 	.word	0x20414798
  4179ac:	00417515 	.word	0x00417515
  4179b0:	00409d8d 	.word	0x00409d8d
  4179b4:	2041479c 	.word	0x2041479c
  4179b8:	00409bfd 	.word	0x00409bfd
  4179bc:	00409a6d 	.word	0x00409a6d
  4179c0:	0041445d 	.word	0x0041445d
  4179c4:	00426d08 	.word	0x00426d08
  4179c8:	66666667 	.word	0x66666667

004179cc <switch_init>:
{
  4179cc:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  4179ce:	4c48      	ldr	r4, [pc, #288]	; (417af0 <switch_init+0x124>)
  4179d0:	6820      	ldr	r0, [r4, #0]
  4179d2:	30a0      	adds	r0, #160	; 0xa0
  4179d4:	4b47      	ldr	r3, [pc, #284]	; (417af4 <switch_init+0x128>)
  4179d6:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  4179d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4179da:	22ff      	movs	r2, #255	; 0xff
  4179dc:	212c      	movs	r1, #44	; 0x2c
  4179de:	30a0      	adds	r0, #160	; 0xa0
  4179e0:	4b45      	ldr	r3, [pc, #276]	; (417af8 <switch_init+0x12c>)
  4179e2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  4179e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4179e6:	4b45      	ldr	r3, [pc, #276]	; (417afc <switch_init+0x130>)
  4179e8:	881a      	ldrh	r2, [r3, #0]
  4179ea:	2129      	movs	r1, #41	; 0x29
  4179ec:	30a0      	adds	r0, #160	; 0xa0
  4179ee:	4b44      	ldr	r3, [pc, #272]	; (417b00 <switch_init+0x134>)
  4179f0:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4179f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4179f4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4179f8:	2101      	movs	r1, #1
  4179fa:	30a0      	adds	r0, #160	; 0xa0
  4179fc:	4b41      	ldr	r3, [pc, #260]	; (417b04 <switch_init+0x138>)
  4179fe:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  417a00:	6824      	ldr	r4, [r4, #0]
  417a02:	34a0      	adds	r4, #160	; 0xa0
  417a04:	2000      	movs	r0, #0
  417a06:	4b40      	ldr	r3, [pc, #256]	; (417b08 <switch_init+0x13c>)
  417a08:	4798      	blx	r3
  417a0a:	3014      	adds	r0, #20
  417a0c:	0080      	lsls	r0, r0, #2
  417a0e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a12:	da39      	bge.n	417a88 <switch_init+0xbc>
  417a14:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417a18:	2110      	movs	r1, #16
  417a1a:	4620      	mov	r0, r4
  417a1c:	4b39      	ldr	r3, [pc, #228]	; (417b04 <switch_init+0x138>)
  417a1e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  417a20:	4b33      	ldr	r3, [pc, #204]	; (417af0 <switch_init+0x124>)
  417a22:	681c      	ldr	r4, [r3, #0]
  417a24:	34a0      	adds	r4, #160	; 0xa0
  417a26:	2000      	movs	r0, #0
  417a28:	4b37      	ldr	r3, [pc, #220]	; (417b08 <switch_init+0x13c>)
  417a2a:	4798      	blx	r3
  417a2c:	3014      	adds	r0, #20
  417a2e:	0080      	lsls	r0, r0, #2
  417a30:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a34:	da35      	bge.n	417aa2 <switch_init+0xd6>
  417a36:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417a3a:	2111      	movs	r1, #17
  417a3c:	4620      	mov	r0, r4
  417a3e:	4b31      	ldr	r3, [pc, #196]	; (417b04 <switch_init+0x138>)
  417a40:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  417a42:	4b2b      	ldr	r3, [pc, #172]	; (417af0 <switch_init+0x124>)
  417a44:	681c      	ldr	r4, [r3, #0]
  417a46:	34a0      	adds	r4, #160	; 0xa0
  417a48:	2000      	movs	r0, #0
  417a4a:	4b2f      	ldr	r3, [pc, #188]	; (417b08 <switch_init+0x13c>)
  417a4c:	4798      	blx	r3
  417a4e:	3014      	adds	r0, #20
  417a50:	0080      	lsls	r0, r0, #2
  417a52:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a56:	da31      	bge.n	417abc <switch_init+0xf0>
  417a58:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417a5c:	2112      	movs	r1, #18
  417a5e:	4620      	mov	r0, r4
  417a60:	4b28      	ldr	r3, [pc, #160]	; (417b04 <switch_init+0x138>)
  417a62:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  417a64:	4b22      	ldr	r3, [pc, #136]	; (417af0 <switch_init+0x124>)
  417a66:	681c      	ldr	r4, [r3, #0]
  417a68:	34a0      	adds	r4, #160	; 0xa0
  417a6a:	2000      	movs	r0, #0
  417a6c:	4b26      	ldr	r3, [pc, #152]	; (417b08 <switch_init+0x13c>)
  417a6e:	4798      	blx	r3
  417a70:	3014      	adds	r0, #20
  417a72:	0080      	lsls	r0, r0, #2
  417a74:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a78:	da2d      	bge.n	417ad6 <switch_init+0x10a>
  417a7a:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417a7e:	2113      	movs	r1, #19
  417a80:	4620      	mov	r0, r4
  417a82:	4b20      	ldr	r3, [pc, #128]	; (417b04 <switch_init+0x138>)
  417a84:	4798      	blx	r3
  417a86:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  417a88:	2000      	movs	r0, #0
  417a8a:	4b1f      	ldr	r3, [pc, #124]	; (417b08 <switch_init+0x13c>)
  417a8c:	4798      	blx	r3
  417a8e:	3014      	adds	r0, #20
  417a90:	0080      	lsls	r0, r0, #2
  417a92:	4b1e      	ldr	r3, [pc, #120]	; (417b0c <switch_init+0x140>)
  417a94:	fb83 2300 	smull	r2, r3, r3, r0
  417a98:	17c2      	asrs	r2, r0, #31
  417a9a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417a9e:	b212      	sxth	r2, r2
  417aa0:	e7ba      	b.n	417a18 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  417aa2:	2000      	movs	r0, #0
  417aa4:	4b18      	ldr	r3, [pc, #96]	; (417b08 <switch_init+0x13c>)
  417aa6:	4798      	blx	r3
  417aa8:	3014      	adds	r0, #20
  417aaa:	0080      	lsls	r0, r0, #2
  417aac:	4b17      	ldr	r3, [pc, #92]	; (417b0c <switch_init+0x140>)
  417aae:	fb83 2300 	smull	r2, r3, r3, r0
  417ab2:	17c2      	asrs	r2, r0, #31
  417ab4:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417ab8:	b212      	sxth	r2, r2
  417aba:	e7be      	b.n	417a3a <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  417abc:	2000      	movs	r0, #0
  417abe:	4b12      	ldr	r3, [pc, #72]	; (417b08 <switch_init+0x13c>)
  417ac0:	4798      	blx	r3
  417ac2:	3014      	adds	r0, #20
  417ac4:	0080      	lsls	r0, r0, #2
  417ac6:	4b11      	ldr	r3, [pc, #68]	; (417b0c <switch_init+0x140>)
  417ac8:	fb83 2300 	smull	r2, r3, r3, r0
  417acc:	17c2      	asrs	r2, r0, #31
  417ace:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417ad2:	b212      	sxth	r2, r2
  417ad4:	e7c2      	b.n	417a5c <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  417ad6:	2000      	movs	r0, #0
  417ad8:	4b0b      	ldr	r3, [pc, #44]	; (417b08 <switch_init+0x13c>)
  417ada:	4798      	blx	r3
  417adc:	3014      	adds	r0, #20
  417ade:	0080      	lsls	r0, r0, #2
  417ae0:	4b0a      	ldr	r3, [pc, #40]	; (417b0c <switch_init+0x140>)
  417ae2:	fb83 2300 	smull	r2, r3, r3, r0
  417ae6:	17c2      	asrs	r2, r0, #31
  417ae8:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417aec:	b212      	sxth	r2, r2
  417aee:	e7c6      	b.n	417a7e <switch_init+0xb2>
  417af0:	20414798 	.word	0x20414798
  417af4:	00417515 	.word	0x00417515
  417af8:	00409d8d 	.word	0x00409d8d
  417afc:	00426d08 	.word	0x00426d08
  417b00:	00409bfd 	.word	0x00409bfd
  417b04:	00409a6d 	.word	0x00409a6d
  417b08:	0041445d 	.word	0x0041445d
  417b0c:	66666667 	.word	0x66666667

00417b10 <linemeter_init>:
{
  417b10:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  417b12:	4c8a      	ldr	r4, [pc, #552]	; (417d3c <linemeter_init+0x22c>)
  417b14:	6820      	ldr	r0, [r4, #0]
  417b16:	3074      	adds	r0, #116	; 0x74
  417b18:	4b89      	ldr	r3, [pc, #548]	; (417d40 <linemeter_init+0x230>)
  417b1a:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417b1c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417b1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417b22:	2101      	movs	r1, #1
  417b24:	3074      	adds	r0, #116	; 0x74
  417b26:	4b87      	ldr	r3, [pc, #540]	; (417d44 <linemeter_init+0x234>)
  417b28:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417b2a:	6824      	ldr	r4, [r4, #0]
  417b2c:	3474      	adds	r4, #116	; 0x74
  417b2e:	2000      	movs	r0, #0
  417b30:	4b85      	ldr	r3, [pc, #532]	; (417d48 <linemeter_init+0x238>)
  417b32:	4798      	blx	r3
  417b34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417b38:	0080      	lsls	r0, r0, #2
  417b3a:	3050      	adds	r0, #80	; 0x50
  417b3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b40:	f280 8093 	bge.w	417c6a <linemeter_init+0x15a>
  417b44:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417b46:	2112      	movs	r1, #18
  417b48:	4620      	mov	r0, r4
  417b4a:	4b7e      	ldr	r3, [pc, #504]	; (417d44 <linemeter_init+0x234>)
  417b4c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417b4e:	4b7b      	ldr	r3, [pc, #492]	; (417d3c <linemeter_init+0x22c>)
  417b50:	681c      	ldr	r4, [r3, #0]
  417b52:	3474      	adds	r4, #116	; 0x74
  417b54:	2000      	movs	r0, #0
  417b56:	4b7c      	ldr	r3, [pc, #496]	; (417d48 <linemeter_init+0x238>)
  417b58:	4798      	blx	r3
  417b5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417b5e:	0080      	lsls	r0, r0, #2
  417b60:	3050      	adds	r0, #80	; 0x50
  417b62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b66:	f280 808f 	bge.w	417c88 <linemeter_init+0x178>
  417b6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417b6c:	2113      	movs	r1, #19
  417b6e:	4620      	mov	r0, r4
  417b70:	4b74      	ldr	r3, [pc, #464]	; (417d44 <linemeter_init+0x234>)
  417b72:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417b74:	4b71      	ldr	r3, [pc, #452]	; (417d3c <linemeter_init+0x22c>)
  417b76:	681c      	ldr	r4, [r3, #0]
  417b78:	3474      	adds	r4, #116	; 0x74
  417b7a:	2000      	movs	r0, #0
  417b7c:	4b72      	ldr	r3, [pc, #456]	; (417d48 <linemeter_init+0x238>)
  417b7e:	4798      	blx	r3
  417b80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417b84:	0080      	lsls	r0, r0, #2
  417b86:	3050      	adds	r0, #80	; 0x50
  417b88:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b8c:	f280 808b 	bge.w	417ca6 <linemeter_init+0x196>
  417b90:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417b92:	2110      	movs	r1, #16
  417b94:	4620      	mov	r0, r4
  417b96:	4b6b      	ldr	r3, [pc, #428]	; (417d44 <linemeter_init+0x234>)
  417b98:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  417b9a:	4b68      	ldr	r3, [pc, #416]	; (417d3c <linemeter_init+0x22c>)
  417b9c:	681c      	ldr	r4, [r3, #0]
  417b9e:	3474      	adds	r4, #116	; 0x74
  417ba0:	2000      	movs	r0, #0
  417ba2:	4b69      	ldr	r3, [pc, #420]	; (417d48 <linemeter_init+0x238>)
  417ba4:	4798      	blx	r3
  417ba6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417baa:	0040      	lsls	r0, r0, #1
  417bac:	3050      	adds	r0, #80	; 0x50
  417bae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417bb2:	f280 8087 	bge.w	417cc4 <linemeter_init+0x1b4>
  417bb6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  417bb8:	2114      	movs	r1, #20
  417bba:	4620      	mov	r0, r4
  417bbc:	4b61      	ldr	r3, [pc, #388]	; (417d44 <linemeter_init+0x234>)
  417bbe:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  417bc0:	4b5e      	ldr	r3, [pc, #376]	; (417d3c <linemeter_init+0x22c>)
  417bc2:	681c      	ldr	r4, [r3, #0]
  417bc4:	3474      	adds	r4, #116	; 0x74
  417bc6:	2000      	movs	r0, #0
  417bc8:	4b5f      	ldr	r3, [pc, #380]	; (417d48 <linemeter_init+0x238>)
  417bca:	4798      	blx	r3
  417bcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bd4:	3050      	adds	r0, #80	; 0x50
  417bd6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417bda:	f280 8082 	bge.w	417ce2 <linemeter_init+0x1d2>
  417bde:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417be0:	21c0      	movs	r1, #192	; 0xc0
  417be2:	4620      	mov	r0, r4
  417be4:	4b57      	ldr	r3, [pc, #348]	; (417d44 <linemeter_init+0x234>)
  417be6:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417be8:	4c54      	ldr	r4, [pc, #336]	; (417d3c <linemeter_init+0x22c>)
  417bea:	6820      	ldr	r0, [r4, #0]
  417bec:	4e57      	ldr	r6, [pc, #348]	; (417d4c <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417bee:	89b2      	ldrh	r2, [r6, #12]
  417bf0:	2199      	movs	r1, #153	; 0x99
  417bf2:	3074      	adds	r0, #116	; 0x74
  417bf4:	4d56      	ldr	r5, [pc, #344]	; (417d50 <linemeter_init+0x240>)
  417bf6:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417bf8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417bfa:	89b2      	ldrh	r2, [r6, #12]
  417bfc:	21c9      	movs	r1, #201	; 0xc9
  417bfe:	3074      	adds	r0, #116	; 0x74
  417c00:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417c02:	6820      	ldr	r0, [r4, #0]
  417c04:	f04f 0200 	mov.w	r2, #0
  417c08:	2304      	movs	r3, #4
  417c0a:	f363 0202 	bfi	r2, r3, #0, #3
  417c0e:	2311      	movs	r3, #17
  417c10:	f363 02c7 	bfi	r2, r3, #3, #5
  417c14:	f363 220c 	bfi	r2, r3, #8, #5
  417c18:	2302      	movs	r3, #2
  417c1a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417c1e:	21ca      	movs	r1, #202	; 0xca
  417c20:	3074      	adds	r0, #116	; 0x74
  417c22:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  417c24:	6824      	ldr	r4, [r4, #0]
  417c26:	3474      	adds	r4, #116	; 0x74
  417c28:	2000      	movs	r0, #0
  417c2a:	4b47      	ldr	r3, [pc, #284]	; (417d48 <linemeter_init+0x238>)
  417c2c:	4798      	blx	r3
  417c2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c32:	0040      	lsls	r0, r0, #1
  417c34:	3050      	adds	r0, #80	; 0x50
  417c36:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417c3a:	da62      	bge.n	417d02 <linemeter_init+0x1f2>
  417c3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417c3e:	2190      	movs	r1, #144	; 0x90
  417c40:	4620      	mov	r0, r4
  417c42:	4b40      	ldr	r3, [pc, #256]	; (417d44 <linemeter_init+0x234>)
  417c44:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  417c46:	4b3d      	ldr	r3, [pc, #244]	; (417d3c <linemeter_init+0x22c>)
  417c48:	681c      	ldr	r4, [r3, #0]
  417c4a:	3474      	adds	r4, #116	; 0x74
  417c4c:	2000      	movs	r0, #0
  417c4e:	4b3e      	ldr	r3, [pc, #248]	; (417d48 <linemeter_init+0x238>)
  417c50:	4798      	blx	r3
  417c52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417c56:	3050      	adds	r0, #80	; 0x50
  417c58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417c5c:	da60      	bge.n	417d20 <linemeter_init+0x210>
  417c5e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417c60:	21c3      	movs	r1, #195	; 0xc3
  417c62:	4620      	mov	r0, r4
  417c64:	4b37      	ldr	r3, [pc, #220]	; (417d44 <linemeter_init+0x234>)
  417c66:	4798      	blx	r3
  417c68:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417c6a:	2000      	movs	r0, #0
  417c6c:	4b36      	ldr	r3, [pc, #216]	; (417d48 <linemeter_init+0x238>)
  417c6e:	4798      	blx	r3
  417c70:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c74:	0080      	lsls	r0, r0, #2
  417c76:	3050      	adds	r0, #80	; 0x50
  417c78:	4b36      	ldr	r3, [pc, #216]	; (417d54 <linemeter_init+0x244>)
  417c7a:	fb83 2300 	smull	r2, r3, r3, r0
  417c7e:	17c2      	asrs	r2, r0, #31
  417c80:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c84:	b212      	sxth	r2, r2
  417c86:	e75e      	b.n	417b46 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417c88:	2000      	movs	r0, #0
  417c8a:	4b2f      	ldr	r3, [pc, #188]	; (417d48 <linemeter_init+0x238>)
  417c8c:	4798      	blx	r3
  417c8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c92:	0080      	lsls	r0, r0, #2
  417c94:	3050      	adds	r0, #80	; 0x50
  417c96:	4b2f      	ldr	r3, [pc, #188]	; (417d54 <linemeter_init+0x244>)
  417c98:	fb83 2300 	smull	r2, r3, r3, r0
  417c9c:	17c2      	asrs	r2, r0, #31
  417c9e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417ca2:	b212      	sxth	r2, r2
  417ca4:	e762      	b.n	417b6c <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417ca6:	2000      	movs	r0, #0
  417ca8:	4b27      	ldr	r3, [pc, #156]	; (417d48 <linemeter_init+0x238>)
  417caa:	4798      	blx	r3
  417cac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417cb0:	0080      	lsls	r0, r0, #2
  417cb2:	3050      	adds	r0, #80	; 0x50
  417cb4:	4b27      	ldr	r3, [pc, #156]	; (417d54 <linemeter_init+0x244>)
  417cb6:	fb83 2300 	smull	r2, r3, r3, r0
  417cba:	17c2      	asrs	r2, r0, #31
  417cbc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cc0:	b212      	sxth	r2, r2
  417cc2:	e766      	b.n	417b92 <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  417cc4:	2000      	movs	r0, #0
  417cc6:	4b20      	ldr	r3, [pc, #128]	; (417d48 <linemeter_init+0x238>)
  417cc8:	4798      	blx	r3
  417cca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417cce:	0040      	lsls	r0, r0, #1
  417cd0:	3050      	adds	r0, #80	; 0x50
  417cd2:	4b20      	ldr	r3, [pc, #128]	; (417d54 <linemeter_init+0x244>)
  417cd4:	fb83 2300 	smull	r2, r3, r3, r0
  417cd8:	17c2      	asrs	r2, r0, #31
  417cda:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cde:	b212      	sxth	r2, r2
  417ce0:	e76a      	b.n	417bb8 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  417ce2:	2000      	movs	r0, #0
  417ce4:	4b18      	ldr	r3, [pc, #96]	; (417d48 <linemeter_init+0x238>)
  417ce6:	4798      	blx	r3
  417ce8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417cec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417cf0:	3050      	adds	r0, #80	; 0x50
  417cf2:	4b18      	ldr	r3, [pc, #96]	; (417d54 <linemeter_init+0x244>)
  417cf4:	fb83 2300 	smull	r2, r3, r3, r0
  417cf8:	17c2      	asrs	r2, r0, #31
  417cfa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cfe:	b212      	sxth	r2, r2
  417d00:	e76e      	b.n	417be0 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  417d02:	2000      	movs	r0, #0
  417d04:	4b10      	ldr	r3, [pc, #64]	; (417d48 <linemeter_init+0x238>)
  417d06:	4798      	blx	r3
  417d08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417d0c:	0040      	lsls	r0, r0, #1
  417d0e:	3050      	adds	r0, #80	; 0x50
  417d10:	4b10      	ldr	r3, [pc, #64]	; (417d54 <linemeter_init+0x244>)
  417d12:	fb83 2300 	smull	r2, r3, r3, r0
  417d16:	17c2      	asrs	r2, r0, #31
  417d18:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d1c:	b212      	sxth	r2, r2
  417d1e:	e78e      	b.n	417c3e <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  417d20:	2000      	movs	r0, #0
  417d22:	4b09      	ldr	r3, [pc, #36]	; (417d48 <linemeter_init+0x238>)
  417d24:	4798      	blx	r3
  417d26:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417d2a:	3050      	adds	r0, #80	; 0x50
  417d2c:	4b09      	ldr	r3, [pc, #36]	; (417d54 <linemeter_init+0x244>)
  417d2e:	fb83 2300 	smull	r2, r3, r3, r0
  417d32:	17c2      	asrs	r2, r0, #31
  417d34:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d38:	b212      	sxth	r2, r2
  417d3a:	e791      	b.n	417c60 <linemeter_init+0x150>
  417d3c:	20414798 	.word	0x20414798
  417d40:	00417515 	.word	0x00417515
  417d44:	00409a6d 	.word	0x00409a6d
  417d48:	0041445d 	.word	0x0041445d
  417d4c:	2041479c 	.word	0x2041479c
  417d50:	00409bfd 	.word	0x00409bfd
  417d54:	66666667 	.word	0x66666667

00417d58 <gauge_init>:
{
  417d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  417d5c:	4cc0      	ldr	r4, [pc, #768]	; (418060 <gauge_init+0x308>)
  417d5e:	6820      	ldr	r0, [r4, #0]
  417d60:	3060      	adds	r0, #96	; 0x60
  417d62:	4bc0      	ldr	r3, [pc, #768]	; (418064 <gauge_init+0x30c>)
  417d64:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417d66:	6820      	ldr	r0, [r4, #0]
  417d68:	f04f 0804 	mov.w	r8, #4
  417d6c:	f04f 0200 	mov.w	r2, #0
  417d70:	f368 0202 	bfi	r2, r8, #0, #3
  417d74:	2511      	movs	r5, #17
  417d76:	f365 02c7 	bfi	r2, r5, #3, #5
  417d7a:	f365 220c 	bfi	r2, r5, #8, #5
  417d7e:	2702      	movs	r7, #2
  417d80:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417d84:	2199      	movs	r1, #153	; 0x99
  417d86:	3060      	adds	r0, #96	; 0x60
  417d88:	4eb7      	ldr	r6, [pc, #732]	; (418068 <gauge_init+0x310>)
  417d8a:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417d8c:	6820      	ldr	r0, [r4, #0]
  417d8e:	f04f 0200 	mov.w	r2, #0
  417d92:	f368 0202 	bfi	r2, r8, #0, #3
  417d96:	f365 02c7 	bfi	r2, r5, #3, #5
  417d9a:	f365 220c 	bfi	r2, r5, #8, #5
  417d9e:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417da2:	21c9      	movs	r1, #201	; 0xc9
  417da4:	3060      	adds	r0, #96	; 0x60
  417da6:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  417da8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417daa:	4bb0      	ldr	r3, [pc, #704]	; (41806c <gauge_init+0x314>)
  417dac:	899a      	ldrh	r2, [r3, #12]
  417dae:	21ca      	movs	r1, #202	; 0xca
  417db0:	3060      	adds	r0, #96	; 0x60
  417db2:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  417db4:	6824      	ldr	r4, [r4, #0]
  417db6:	3460      	adds	r4, #96	; 0x60
  417db8:	2000      	movs	r0, #0
  417dba:	4bad      	ldr	r3, [pc, #692]	; (418070 <gauge_init+0x318>)
  417dbc:	4798      	blx	r3
  417dbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417dc2:	3050      	adds	r0, #80	; 0x50
  417dc4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417dc8:	f280 8177 	bge.w	4180ba <gauge_init+0x362>
  417dcc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417dce:	2190      	movs	r1, #144	; 0x90
  417dd0:	4620      	mov	r0, r4
  417dd2:	4ba8      	ldr	r3, [pc, #672]	; (418074 <gauge_init+0x31c>)
  417dd4:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  417dd6:	4ba2      	ldr	r3, [pc, #648]	; (418060 <gauge_init+0x308>)
  417dd8:	681c      	ldr	r4, [r3, #0]
  417dda:	3460      	adds	r4, #96	; 0x60
  417ddc:	2000      	movs	r0, #0
  417dde:	4ba4      	ldr	r3, [pc, #656]	; (418070 <gauge_init+0x318>)
  417de0:	4798      	blx	r3
  417de2:	3014      	adds	r0, #20
  417de4:	0080      	lsls	r0, r0, #2
  417de6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417dea:	f280 8174 	bge.w	4180d6 <gauge_init+0x37e>
  417dee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417df0:	21c3      	movs	r1, #195	; 0xc3
  417df2:	4620      	mov	r0, r4
  417df4:	4b9f      	ldr	r3, [pc, #636]	; (418074 <gauge_init+0x31c>)
  417df6:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  417df8:	4b99      	ldr	r3, [pc, #612]	; (418060 <gauge_init+0x308>)
  417dfa:	681c      	ldr	r4, [r3, #0]
  417dfc:	3460      	adds	r4, #96	; 0x60
  417dfe:	2000      	movs	r0, #0
  417e00:	4b9b      	ldr	r3, [pc, #620]	; (418070 <gauge_init+0x318>)
  417e02:	4798      	blx	r3
  417e04:	300a      	adds	r0, #10
  417e06:	00c0      	lsls	r0, r0, #3
  417e08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417e0c:	f280 8170 	bge.w	4180f0 <gauge_init+0x398>
  417e10:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  417e12:	21c2      	movs	r1, #194	; 0xc2
  417e14:	4620      	mov	r0, r4
  417e16:	4b97      	ldr	r3, [pc, #604]	; (418074 <gauge_init+0x31c>)
  417e18:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417e1a:	4b91      	ldr	r3, [pc, #580]	; (418060 <gauge_init+0x308>)
  417e1c:	681c      	ldr	r4, [r3, #0]
  417e1e:	3460      	adds	r4, #96	; 0x60
  417e20:	2000      	movs	r0, #0
  417e22:	4b93      	ldr	r3, [pc, #588]	; (418070 <gauge_init+0x318>)
  417e24:	4798      	blx	r3
  417e26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e2a:	0080      	lsls	r0, r0, #2
  417e2c:	3050      	adds	r0, #80	; 0x50
  417e2e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417e32:	f280 816a 	bge.w	41810a <gauge_init+0x3b2>
  417e36:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417e38:	2112      	movs	r1, #18
  417e3a:	4620      	mov	r0, r4
  417e3c:	4b8d      	ldr	r3, [pc, #564]	; (418074 <gauge_init+0x31c>)
  417e3e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417e40:	4b87      	ldr	r3, [pc, #540]	; (418060 <gauge_init+0x308>)
  417e42:	681c      	ldr	r4, [r3, #0]
  417e44:	3460      	adds	r4, #96	; 0x60
  417e46:	2000      	movs	r0, #0
  417e48:	4b89      	ldr	r3, [pc, #548]	; (418070 <gauge_init+0x318>)
  417e4a:	4798      	blx	r3
  417e4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e50:	0080      	lsls	r0, r0, #2
  417e52:	3050      	adds	r0, #80	; 0x50
  417e54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417e58:	f280 8166 	bge.w	418128 <gauge_init+0x3d0>
  417e5c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417e5e:	2113      	movs	r1, #19
  417e60:	4620      	mov	r0, r4
  417e62:	4b84      	ldr	r3, [pc, #528]	; (418074 <gauge_init+0x31c>)
  417e64:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417e66:	4b7e      	ldr	r3, [pc, #504]	; (418060 <gauge_init+0x308>)
  417e68:	681c      	ldr	r4, [r3, #0]
  417e6a:	3460      	adds	r4, #96	; 0x60
  417e6c:	2000      	movs	r0, #0
  417e6e:	4b80      	ldr	r3, [pc, #512]	; (418070 <gauge_init+0x318>)
  417e70:	4798      	blx	r3
  417e72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e76:	0080      	lsls	r0, r0, #2
  417e78:	3050      	adds	r0, #80	; 0x50
  417e7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417e7e:	f280 8162 	bge.w	418146 <gauge_init+0x3ee>
  417e82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417e84:	2110      	movs	r1, #16
  417e86:	4620      	mov	r0, r4
  417e88:	4b7a      	ldr	r3, [pc, #488]	; (418074 <gauge_init+0x31c>)
  417e8a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  417e8c:	4b74      	ldr	r3, [pc, #464]	; (418060 <gauge_init+0x308>)
  417e8e:	681c      	ldr	r4, [r3, #0]
  417e90:	3460      	adds	r4, #96	; 0x60
  417e92:	2000      	movs	r0, #0
  417e94:	4b76      	ldr	r3, [pc, #472]	; (418070 <gauge_init+0x318>)
  417e96:	4798      	blx	r3
  417e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417e9c:	0080      	lsls	r0, r0, #2
  417e9e:	3050      	adds	r0, #80	; 0x50
  417ea0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ea4:	f280 815e 	bge.w	418164 <gauge_init+0x40c>
  417ea8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  417eaa:	2114      	movs	r1, #20
  417eac:	4620      	mov	r0, r4
  417eae:	4b71      	ldr	r3, [pc, #452]	; (418074 <gauge_init+0x31c>)
  417eb0:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  417eb2:	4b6b      	ldr	r3, [pc, #428]	; (418060 <gauge_init+0x308>)
  417eb4:	681c      	ldr	r4, [r3, #0]
  417eb6:	3460      	adds	r4, #96	; 0x60
  417eb8:	2000      	movs	r0, #0
  417eba:	4b6d      	ldr	r3, [pc, #436]	; (418070 <gauge_init+0x318>)
  417ebc:	4798      	blx	r3
  417ebe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417ec2:	3050      	adds	r0, #80	; 0x50
  417ec4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ec8:	f280 815b 	bge.w	418182 <gauge_init+0x42a>
  417ecc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417ece:	21c0      	movs	r1, #192	; 0xc0
  417ed0:	4620      	mov	r0, r4
  417ed2:	4d68      	ldr	r5, [pc, #416]	; (418074 <gauge_init+0x31c>)
  417ed4:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417ed6:	4c62      	ldr	r4, [pc, #392]	; (418060 <gauge_init+0x308>)
  417ed8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417eda:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417ede:	2101      	movs	r1, #1
  417ee0:	3060      	adds	r0, #96	; 0x60
  417ee2:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  417ee4:	6820      	ldr	r0, [r4, #0]
  417ee6:	3064      	adds	r0, #100	; 0x64
  417ee8:	4b5e      	ldr	r3, [pc, #376]	; (418064 <gauge_init+0x30c>)
  417eea:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417eec:	6820      	ldr	r0, [r4, #0]
  417eee:	f04f 0804 	mov.w	r8, #4
  417ef2:	f04f 0200 	mov.w	r2, #0
  417ef6:	f368 0202 	bfi	r2, r8, #0, #3
  417efa:	2511      	movs	r5, #17
  417efc:	f365 02c7 	bfi	r2, r5, #3, #5
  417f00:	f365 220c 	bfi	r2, r5, #8, #5
  417f04:	2702      	movs	r7, #2
  417f06:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417f0a:	2199      	movs	r1, #153	; 0x99
  417f0c:	3064      	adds	r0, #100	; 0x64
  417f0e:	4e56      	ldr	r6, [pc, #344]	; (418068 <gauge_init+0x310>)
  417f10:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417f12:	6820      	ldr	r0, [r4, #0]
  417f14:	f04f 0200 	mov.w	r2, #0
  417f18:	f368 0202 	bfi	r2, r8, #0, #3
  417f1c:	f365 02c7 	bfi	r2, r5, #3, #5
  417f20:	f365 220c 	bfi	r2, r5, #8, #5
  417f24:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417f28:	21c9      	movs	r1, #201	; 0xc9
  417f2a:	3064      	adds	r0, #100	; 0x64
  417f2c:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  417f2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417f30:	4b4e      	ldr	r3, [pc, #312]	; (41806c <gauge_init+0x314>)
  417f32:	899a      	ldrh	r2, [r3, #12]
  417f34:	21ca      	movs	r1, #202	; 0xca
  417f36:	3064      	adds	r0, #100	; 0x64
  417f38:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417f3a:	6824      	ldr	r4, [r4, #0]
  417f3c:	3464      	adds	r4, #100	; 0x64
  417f3e:	2000      	movs	r0, #0
  417f40:	4b4b      	ldr	r3, [pc, #300]	; (418070 <gauge_init+0x318>)
  417f42:	4798      	blx	r3
  417f44:	300a      	adds	r0, #10
  417f46:	00c0      	lsls	r0, r0, #3
  417f48:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f4c:	f280 8127 	bge.w	41819e <gauge_init+0x446>
  417f50:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417f52:	2190      	movs	r1, #144	; 0x90
  417f54:	4620      	mov	r0, r4
  417f56:	4b47      	ldr	r3, [pc, #284]	; (418074 <gauge_init+0x31c>)
  417f58:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  417f5a:	4b41      	ldr	r3, [pc, #260]	; (418060 <gauge_init+0x308>)
  417f5c:	681c      	ldr	r4, [r3, #0]
  417f5e:	3464      	adds	r4, #100	; 0x64
  417f60:	2000      	movs	r0, #0
  417f62:	4b43      	ldr	r3, [pc, #268]	; (418070 <gauge_init+0x318>)
  417f64:	4798      	blx	r3
  417f66:	300a      	adds	r0, #10
  417f68:	00c0      	lsls	r0, r0, #3
  417f6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f6e:	f280 8123 	bge.w	4181b8 <gauge_init+0x460>
  417f72:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417f74:	21c3      	movs	r1, #195	; 0xc3
  417f76:	4620      	mov	r0, r4
  417f78:	4b3e      	ldr	r3, [pc, #248]	; (418074 <gauge_init+0x31c>)
  417f7a:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  417f7c:	4b38      	ldr	r3, [pc, #224]	; (418060 <gauge_init+0x308>)
  417f7e:	681c      	ldr	r4, [r3, #0]
  417f80:	3464      	adds	r4, #100	; 0x64
  417f82:	2000      	movs	r0, #0
  417f84:	4b3a      	ldr	r3, [pc, #232]	; (418070 <gauge_init+0x318>)
  417f86:	4798      	blx	r3
  417f88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417f8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417f90:	3050      	adds	r0, #80	; 0x50
  417f92:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f96:	f280 811c 	bge.w	4181d2 <gauge_init+0x47a>
  417f9a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417f9c:	21c0      	movs	r1, #192	; 0xc0
  417f9e:	4620      	mov	r0, r4
  417fa0:	4b34      	ldr	r3, [pc, #208]	; (418074 <gauge_init+0x31c>)
  417fa2:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  417fa4:	4c2e      	ldr	r4, [pc, #184]	; (418060 <gauge_init+0x308>)
  417fa6:	6820      	ldr	r0, [r4, #0]
  417fa8:	3068      	adds	r0, #104	; 0x68
  417faa:	4b2e      	ldr	r3, [pc, #184]	; (418064 <gauge_init+0x30c>)
  417fac:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  417fae:	6820      	ldr	r0, [r4, #0]
  417fb0:	3068      	adds	r0, #104	; 0x68
  417fb2:	4b2e      	ldr	r3, [pc, #184]	; (41806c <gauge_init+0x314>)
  417fb4:	6a1b      	ldr	r3, [r3, #32]
  417fb6:	f013 0f02 	tst.w	r3, #2
  417fba:	f000 811a 	beq.w	4181f2 <gauge_init+0x49a>
  417fbe:	2302      	movs	r3, #2
  417fc0:	f04f 0200 	mov.w	r2, #0
  417fc4:	f363 0202 	bfi	r2, r3, #0, #3
  417fc8:	2108      	movs	r1, #8
  417fca:	f361 02c7 	bfi	r2, r1, #3, #5
  417fce:	210b      	movs	r1, #11
  417fd0:	f361 220c 	bfi	r2, r1, #8, #5
  417fd4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417fd8:	2199      	movs	r1, #153	; 0x99
  417fda:	4b23      	ldr	r3, [pc, #140]	; (418068 <gauge_init+0x310>)
  417fdc:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  417fde:	4b20      	ldr	r3, [pc, #128]	; (418060 <gauge_init+0x308>)
  417fe0:	681c      	ldr	r4, [r3, #0]
  417fe2:	3468      	adds	r4, #104	; 0x68
  417fe4:	2000      	movs	r0, #0
  417fe6:	4b22      	ldr	r3, [pc, #136]	; (418070 <gauge_init+0x318>)
  417fe8:	4798      	blx	r3
  417fea:	300a      	adds	r0, #10
  417fec:	00c0      	lsls	r0, r0, #3
  417fee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ff2:	f280 8101 	bge.w	4181f8 <gauge_init+0x4a0>
  417ff6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417ff8:	2190      	movs	r1, #144	; 0x90
  417ffa:	4620      	mov	r0, r4
  417ffc:	4b1d      	ldr	r3, [pc, #116]	; (418074 <gauge_init+0x31c>)
  417ffe:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  418000:	4c17      	ldr	r4, [pc, #92]	; (418060 <gauge_init+0x308>)
  418002:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418004:	22ff      	movs	r2, #255	; 0xff
  418006:	212c      	movs	r1, #44	; 0x2c
  418008:	3068      	adds	r0, #104	; 0x68
  41800a:	4b1b      	ldr	r3, [pc, #108]	; (418078 <gauge_init+0x320>)
  41800c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41800e:	6820      	ldr	r0, [r4, #0]
  418010:	3068      	adds	r0, #104	; 0x68
  418012:	4b16      	ldr	r3, [pc, #88]	; (41806c <gauge_init+0x314>)
  418014:	6a1b      	ldr	r3, [r3, #32]
  418016:	f013 0f02 	tst.w	r3, #2
  41801a:	f000 80fa 	beq.w	418212 <gauge_init+0x4ba>
  41801e:	2302      	movs	r3, #2
  418020:	f04f 0200 	mov.w	r2, #0
  418024:	f363 0202 	bfi	r2, r3, #0, #3
  418028:	2108      	movs	r1, #8
  41802a:	f361 02c7 	bfi	r2, r1, #3, #5
  41802e:	210b      	movs	r1, #11
  418030:	f361 220c 	bfi	r2, r1, #8, #5
  418034:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418038:	2129      	movs	r1, #41	; 0x29
  41803a:	4b0b      	ldr	r3, [pc, #44]	; (418068 <gauge_init+0x310>)
  41803c:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41803e:	4c08      	ldr	r4, [pc, #32]	; (418060 <gauge_init+0x308>)
  418040:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418042:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418046:	2101      	movs	r1, #1
  418048:	3068      	adds	r0, #104	; 0x68
  41804a:	4b0a      	ldr	r3, [pc, #40]	; (418074 <gauge_init+0x31c>)
  41804c:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  41804e:	6824      	ldr	r4, [r4, #0]
  418050:	3468      	adds	r4, #104	; 0x68
  418052:	2000      	movs	r0, #0
  418054:	4b06      	ldr	r3, [pc, #24]	; (418070 <gauge_init+0x318>)
  418056:	4798      	blx	r3
  418058:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41805c:	0040      	lsls	r0, r0, #1
  41805e:	e00d      	b.n	41807c <gauge_init+0x324>
  418060:	20414798 	.word	0x20414798
  418064:	00417515 	.word	0x00417515
  418068:	00409bfd 	.word	0x00409bfd
  41806c:	2041479c 	.word	0x2041479c
  418070:	0041445d 	.word	0x0041445d
  418074:	00409a6d 	.word	0x00409a6d
  418078:	00409d8d 	.word	0x00409d8d
  41807c:	3050      	adds	r0, #80	; 0x50
  41807e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418082:	f280 80c9 	bge.w	418218 <gauge_init+0x4c0>
  418086:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  418088:	2103      	movs	r1, #3
  41808a:	4620      	mov	r0, r4
  41808c:	4b71      	ldr	r3, [pc, #452]	; (418254 <gauge_init+0x4fc>)
  41808e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  418090:	4b71      	ldr	r3, [pc, #452]	; (418258 <gauge_init+0x500>)
  418092:	681c      	ldr	r4, [r3, #0]
  418094:	3468      	adds	r4, #104	; 0x68
  418096:	2000      	movs	r0, #0
  418098:	4b70      	ldr	r3, [pc, #448]	; (41825c <gauge_init+0x504>)
  41809a:	4798      	blx	r3
  41809c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4180a0:	0040      	lsls	r0, r0, #1
  4180a2:	3050      	adds	r0, #80	; 0x50
  4180a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4180a8:	f280 80c5 	bge.w	418236 <gauge_init+0x4de>
  4180ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4180ae:	2114      	movs	r1, #20
  4180b0:	4620      	mov	r0, r4
  4180b2:	4b68      	ldr	r3, [pc, #416]	; (418254 <gauge_init+0x4fc>)
  4180b4:	4798      	blx	r3
  4180b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  4180ba:	2000      	movs	r0, #0
  4180bc:	4b67      	ldr	r3, [pc, #412]	; (41825c <gauge_init+0x504>)
  4180be:	4798      	blx	r3
  4180c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4180c4:	3050      	adds	r0, #80	; 0x50
  4180c6:	4b66      	ldr	r3, [pc, #408]	; (418260 <gauge_init+0x508>)
  4180c8:	fb83 2300 	smull	r2, r3, r3, r0
  4180cc:	17c2      	asrs	r2, r0, #31
  4180ce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180d2:	b212      	sxth	r2, r2
  4180d4:	e67b      	b.n	417dce <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  4180d6:	2000      	movs	r0, #0
  4180d8:	4b60      	ldr	r3, [pc, #384]	; (41825c <gauge_init+0x504>)
  4180da:	4798      	blx	r3
  4180dc:	3014      	adds	r0, #20
  4180de:	0080      	lsls	r0, r0, #2
  4180e0:	4b5f      	ldr	r3, [pc, #380]	; (418260 <gauge_init+0x508>)
  4180e2:	fb83 2300 	smull	r2, r3, r3, r0
  4180e6:	17c2      	asrs	r2, r0, #31
  4180e8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180ec:	b212      	sxth	r2, r2
  4180ee:	e67f      	b.n	417df0 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  4180f0:	2000      	movs	r0, #0
  4180f2:	4b5a      	ldr	r3, [pc, #360]	; (41825c <gauge_init+0x504>)
  4180f4:	4798      	blx	r3
  4180f6:	300a      	adds	r0, #10
  4180f8:	00c0      	lsls	r0, r0, #3
  4180fa:	4b59      	ldr	r3, [pc, #356]	; (418260 <gauge_init+0x508>)
  4180fc:	fb83 2300 	smull	r2, r3, r3, r0
  418100:	17c2      	asrs	r2, r0, #31
  418102:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418106:	b212      	sxth	r2, r2
  418108:	e683      	b.n	417e12 <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41810a:	2000      	movs	r0, #0
  41810c:	4b53      	ldr	r3, [pc, #332]	; (41825c <gauge_init+0x504>)
  41810e:	4798      	blx	r3
  418110:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418114:	0080      	lsls	r0, r0, #2
  418116:	3050      	adds	r0, #80	; 0x50
  418118:	4b51      	ldr	r3, [pc, #324]	; (418260 <gauge_init+0x508>)
  41811a:	fb83 2300 	smull	r2, r3, r3, r0
  41811e:	17c2      	asrs	r2, r0, #31
  418120:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418124:	b212      	sxth	r2, r2
  418126:	e687      	b.n	417e38 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418128:	2000      	movs	r0, #0
  41812a:	4b4c      	ldr	r3, [pc, #304]	; (41825c <gauge_init+0x504>)
  41812c:	4798      	blx	r3
  41812e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418132:	0080      	lsls	r0, r0, #2
  418134:	3050      	adds	r0, #80	; 0x50
  418136:	4b4a      	ldr	r3, [pc, #296]	; (418260 <gauge_init+0x508>)
  418138:	fb83 2300 	smull	r2, r3, r3, r0
  41813c:	17c2      	asrs	r2, r0, #31
  41813e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418142:	b212      	sxth	r2, r2
  418144:	e68b      	b.n	417e5e <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418146:	2000      	movs	r0, #0
  418148:	4b44      	ldr	r3, [pc, #272]	; (41825c <gauge_init+0x504>)
  41814a:	4798      	blx	r3
  41814c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418150:	0080      	lsls	r0, r0, #2
  418152:	3050      	adds	r0, #80	; 0x50
  418154:	4b42      	ldr	r3, [pc, #264]	; (418260 <gauge_init+0x508>)
  418156:	fb83 2300 	smull	r2, r3, r3, r0
  41815a:	17c2      	asrs	r2, r0, #31
  41815c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418160:	b212      	sxth	r2, r2
  418162:	e68f      	b.n	417e84 <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418164:	2000      	movs	r0, #0
  418166:	4b3d      	ldr	r3, [pc, #244]	; (41825c <gauge_init+0x504>)
  418168:	4798      	blx	r3
  41816a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41816e:	0080      	lsls	r0, r0, #2
  418170:	3050      	adds	r0, #80	; 0x50
  418172:	4b3b      	ldr	r3, [pc, #236]	; (418260 <gauge_init+0x508>)
  418174:	fb83 2300 	smull	r2, r3, r3, r0
  418178:	17c2      	asrs	r2, r0, #31
  41817a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41817e:	b212      	sxth	r2, r2
  418180:	e693      	b.n	417eaa <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  418182:	2000      	movs	r0, #0
  418184:	4b35      	ldr	r3, [pc, #212]	; (41825c <gauge_init+0x504>)
  418186:	4798      	blx	r3
  418188:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41818c:	3050      	adds	r0, #80	; 0x50
  41818e:	4b34      	ldr	r3, [pc, #208]	; (418260 <gauge_init+0x508>)
  418190:	fb83 2300 	smull	r2, r3, r3, r0
  418194:	17c2      	asrs	r2, r0, #31
  418196:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41819a:	b212      	sxth	r2, r2
  41819c:	e697      	b.n	417ece <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41819e:	2000      	movs	r0, #0
  4181a0:	4b2e      	ldr	r3, [pc, #184]	; (41825c <gauge_init+0x504>)
  4181a2:	4798      	blx	r3
  4181a4:	300a      	adds	r0, #10
  4181a6:	00c0      	lsls	r0, r0, #3
  4181a8:	4b2d      	ldr	r3, [pc, #180]	; (418260 <gauge_init+0x508>)
  4181aa:	fb83 2300 	smull	r2, r3, r3, r0
  4181ae:	17c2      	asrs	r2, r0, #31
  4181b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4181b4:	b212      	sxth	r2, r2
  4181b6:	e6cc      	b.n	417f52 <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4181b8:	2000      	movs	r0, #0
  4181ba:	4b28      	ldr	r3, [pc, #160]	; (41825c <gauge_init+0x504>)
  4181bc:	4798      	blx	r3
  4181be:	300a      	adds	r0, #10
  4181c0:	00c0      	lsls	r0, r0, #3
  4181c2:	4b27      	ldr	r3, [pc, #156]	; (418260 <gauge_init+0x508>)
  4181c4:	fb83 2300 	smull	r2, r3, r3, r0
  4181c8:	17c2      	asrs	r2, r0, #31
  4181ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4181ce:	b212      	sxth	r2, r2
  4181d0:	e6d0      	b.n	417f74 <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4181d2:	2000      	movs	r0, #0
  4181d4:	4b21      	ldr	r3, [pc, #132]	; (41825c <gauge_init+0x504>)
  4181d6:	4798      	blx	r3
  4181d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4181dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4181e0:	3050      	adds	r0, #80	; 0x50
  4181e2:	4b1f      	ldr	r3, [pc, #124]	; (418260 <gauge_init+0x508>)
  4181e4:	fb83 2300 	smull	r2, r3, r3, r0
  4181e8:	17c2      	asrs	r2, r0, #31
  4181ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4181ee:	b212      	sxth	r2, r2
  4181f0:	e6d4      	b.n	417f9c <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  4181f2:	4b1c      	ldr	r3, [pc, #112]	; (418264 <gauge_init+0x50c>)
  4181f4:	881a      	ldrh	r2, [r3, #0]
  4181f6:	e6ef      	b.n	417fd8 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  4181f8:	2000      	movs	r0, #0
  4181fa:	4b18      	ldr	r3, [pc, #96]	; (41825c <gauge_init+0x504>)
  4181fc:	4798      	blx	r3
  4181fe:	300a      	adds	r0, #10
  418200:	00c0      	lsls	r0, r0, #3
  418202:	4b17      	ldr	r3, [pc, #92]	; (418260 <gauge_init+0x508>)
  418204:	fb83 2300 	smull	r2, r3, r3, r0
  418208:	17c2      	asrs	r2, r0, #31
  41820a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41820e:	b212      	sxth	r2, r2
  418210:	e6f2      	b.n	417ff8 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  418212:	4b14      	ldr	r3, [pc, #80]	; (418264 <gauge_init+0x50c>)
  418214:	881a      	ldrh	r2, [r3, #0]
  418216:	e70f      	b.n	418038 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  418218:	2000      	movs	r0, #0
  41821a:	4b10      	ldr	r3, [pc, #64]	; (41825c <gauge_init+0x504>)
  41821c:	4798      	blx	r3
  41821e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418222:	0040      	lsls	r0, r0, #1
  418224:	3050      	adds	r0, #80	; 0x50
  418226:	4b0e      	ldr	r3, [pc, #56]	; (418260 <gauge_init+0x508>)
  418228:	fb83 2300 	smull	r2, r3, r3, r0
  41822c:	17c2      	asrs	r2, r0, #31
  41822e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418232:	b212      	sxth	r2, r2
  418234:	e728      	b.n	418088 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  418236:	2000      	movs	r0, #0
  418238:	4b08      	ldr	r3, [pc, #32]	; (41825c <gauge_init+0x504>)
  41823a:	4798      	blx	r3
  41823c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418240:	0040      	lsls	r0, r0, #1
  418242:	3050      	adds	r0, #80	; 0x50
  418244:	4b06      	ldr	r3, [pc, #24]	; (418260 <gauge_init+0x508>)
  418246:	fb83 2300 	smull	r2, r3, r3, r0
  41824a:	17c2      	asrs	r2, r0, #31
  41824c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418250:	b212      	sxth	r2, r2
  418252:	e72c      	b.n	4180ae <gauge_init+0x356>
  418254:	00409a6d 	.word	0x00409a6d
  418258:	20414798 	.word	0x20414798
  41825c:	0041445d 	.word	0x0041445d
  418260:	66666667 	.word	0x66666667
  418264:	00426d08 	.word	0x00426d08

00418268 <arc_init>:
{
  418268:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  41826a:	4c53      	ldr	r4, [pc, #332]	; (4183b8 <arc_init+0x150>)
  41826c:	6820      	ldr	r0, [r4, #0]
  41826e:	301c      	adds	r0, #28
  418270:	4b52      	ldr	r3, [pc, #328]	; (4183bc <arc_init+0x154>)
  418272:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  418274:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418276:	4b52      	ldr	r3, [pc, #328]	; (4183c0 <arc_init+0x158>)
  418278:	899a      	ldrh	r2, [r3, #12]
  41827a:	2199      	movs	r1, #153	; 0x99
  41827c:	301c      	adds	r0, #28
  41827e:	4b51      	ldr	r3, [pc, #324]	; (4183c4 <arc_init+0x15c>)
  418280:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  418282:	6824      	ldr	r4, [r4, #0]
  418284:	341c      	adds	r4, #28
  418286:	2000      	movs	r0, #0
  418288:	4b4f      	ldr	r3, [pc, #316]	; (4183c8 <arc_init+0x160>)
  41828a:	4798      	blx	r3
  41828c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418294:	3050      	adds	r0, #80	; 0x50
  418296:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41829a:	da5e      	bge.n	41835a <arc_init+0xf2>
  41829c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41829e:	2190      	movs	r1, #144	; 0x90
  4182a0:	4620      	mov	r0, r4
  4182a2:	4d4a      	ldr	r5, [pc, #296]	; (4183cc <arc_init+0x164>)
  4182a4:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  4182a6:	4c44      	ldr	r4, [pc, #272]	; (4183b8 <arc_init+0x150>)
  4182a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  4182aa:	2201      	movs	r2, #1
  4182ac:	2194      	movs	r1, #148	; 0x94
  4182ae:	301c      	adds	r0, #28
  4182b0:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  4182b2:	6820      	ldr	r0, [r4, #0]
  4182b4:	3020      	adds	r0, #32
  4182b6:	4b41      	ldr	r3, [pc, #260]	; (4183bc <arc_init+0x154>)
  4182b8:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  4182ba:	6820      	ldr	r0, [r4, #0]
  4182bc:	3020      	adds	r0, #32
  4182be:	4b40      	ldr	r3, [pc, #256]	; (4183c0 <arc_init+0x158>)
  4182c0:	6a1b      	ldr	r3, [r3, #32]
  4182c2:	f013 0f02 	tst.w	r3, #2
  4182c6:	d058      	beq.n	41837a <arc_init+0x112>
  4182c8:	f04f 0200 	mov.w	r2, #0
  4182cc:	2306      	movs	r3, #6
  4182ce:	f363 0202 	bfi	r2, r3, #0, #3
  4182d2:	231a      	movs	r3, #26
  4182d4:	f363 02c7 	bfi	r2, r3, #3, #5
  4182d8:	231b      	movs	r3, #27
  4182da:	f363 220c 	bfi	r2, r3, #8, #5
  4182de:	2305      	movs	r3, #5
  4182e0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4182e4:	2199      	movs	r1, #153	; 0x99
  4182e6:	4b37      	ldr	r3, [pc, #220]	; (4183c4 <arc_init+0x15c>)
  4182e8:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  4182ea:	4b33      	ldr	r3, [pc, #204]	; (4183b8 <arc_init+0x150>)
  4182ec:	681c      	ldr	r4, [r3, #0]
  4182ee:	3420      	adds	r4, #32
  4182f0:	2000      	movs	r0, #0
  4182f2:	4b35      	ldr	r3, [pc, #212]	; (4183c8 <arc_init+0x160>)
  4182f4:	4798      	blx	r3
  4182f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4182fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4182fe:	3050      	adds	r0, #80	; 0x50
  418300:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418304:	da47      	bge.n	418396 <arc_init+0x12e>
  418306:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418308:	2190      	movs	r1, #144	; 0x90
  41830a:	4620      	mov	r0, r4
  41830c:	4c2f      	ldr	r4, [pc, #188]	; (4183cc <arc_init+0x164>)
  41830e:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  418310:	4d29      	ldr	r5, [pc, #164]	; (4183b8 <arc_init+0x150>)
  418312:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  418314:	2201      	movs	r2, #1
  418316:	2194      	movs	r1, #148	; 0x94
  418318:	3020      	adds	r0, #32
  41831a:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  41831c:	6828      	ldr	r0, [r5, #0]
  41831e:	3024      	adds	r0, #36	; 0x24
  418320:	4b26      	ldr	r3, [pc, #152]	; (4183bc <arc_init+0x154>)
  418322:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  418324:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418326:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41832a:	2101      	movs	r1, #1
  41832c:	3024      	adds	r0, #36	; 0x24
  41832e:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  418330:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418332:	2200      	movs	r2, #0
  418334:	2110      	movs	r1, #16
  418336:	3024      	adds	r0, #36	; 0x24
  418338:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  41833a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41833c:	2200      	movs	r2, #0
  41833e:	2111      	movs	r1, #17
  418340:	3024      	adds	r0, #36	; 0x24
  418342:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  418344:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418346:	2200      	movs	r2, #0
  418348:	2112      	movs	r1, #18
  41834a:	3024      	adds	r0, #36	; 0x24
  41834c:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  41834e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418350:	2200      	movs	r2, #0
  418352:	2113      	movs	r1, #19
  418354:	3024      	adds	r0, #36	; 0x24
  418356:	47a0      	blx	r4
  418358:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  41835a:	2000      	movs	r0, #0
  41835c:	4b1a      	ldr	r3, [pc, #104]	; (4183c8 <arc_init+0x160>)
  41835e:	4798      	blx	r3
  418360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418368:	3050      	adds	r0, #80	; 0x50
  41836a:	4b19      	ldr	r3, [pc, #100]	; (4183d0 <arc_init+0x168>)
  41836c:	fb83 2300 	smull	r2, r3, r3, r0
  418370:	17c2      	asrs	r2, r0, #31
  418372:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418376:	b212      	sxth	r2, r2
  418378:	e791      	b.n	41829e <arc_init+0x36>
  41837a:	2302      	movs	r3, #2
  41837c:	f04f 0200 	mov.w	r2, #0
  418380:	f363 0202 	bfi	r2, r3, #0, #3
  418384:	2108      	movs	r1, #8
  418386:	f361 02c7 	bfi	r2, r1, #3, #5
  41838a:	2109      	movs	r1, #9
  41838c:	f361 220c 	bfi	r2, r1, #8, #5
  418390:	f363 324f 	bfi	r2, r3, #13, #3
  418394:	e7a6      	b.n	4182e4 <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  418396:	2000      	movs	r0, #0
  418398:	4b0b      	ldr	r3, [pc, #44]	; (4183c8 <arc_init+0x160>)
  41839a:	4798      	blx	r3
  41839c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4183a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4183a4:	3050      	adds	r0, #80	; 0x50
  4183a6:	4b0a      	ldr	r3, [pc, #40]	; (4183d0 <arc_init+0x168>)
  4183a8:	fb83 2300 	smull	r2, r3, r3, r0
  4183ac:	17c2      	asrs	r2, r0, #31
  4183ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4183b2:	b212      	sxth	r2, r2
  4183b4:	e7a8      	b.n	418308 <arc_init+0xa0>
  4183b6:	bf00      	nop
  4183b8:	20414798 	.word	0x20414798
  4183bc:	00417515 	.word	0x00417515
  4183c0:	2041479c 	.word	0x2041479c
  4183c4:	00409bfd 	.word	0x00409bfd
  4183c8:	0041445d 	.word	0x0041445d
  4183cc:	00409a6d 	.word	0x00409a6d
  4183d0:	66666667 	.word	0x66666667

004183d4 <chart_init>:
{
  4183d4:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  4183d6:	4c9a      	ldr	r4, [pc, #616]	; (418640 <chart_init+0x26c>)
  4183d8:	6820      	ldr	r0, [r4, #0]
  4183da:	3044      	adds	r0, #68	; 0x44
  4183dc:	4b99      	ldr	r3, [pc, #612]	; (418644 <chart_init+0x270>)
  4183de:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  4183e0:	6820      	ldr	r0, [r4, #0]
  4183e2:	3044      	adds	r0, #68	; 0x44
  4183e4:	4b98      	ldr	r3, [pc, #608]	; (418648 <chart_init+0x274>)
  4183e6:	6a1b      	ldr	r3, [r3, #32]
  4183e8:	f013 0f02 	tst.w	r3, #2
  4183ec:	f000 80ab 	beq.w	418546 <chart_init+0x172>
  4183f0:	f04f 0200 	mov.w	r2, #0
  4183f4:	2305      	movs	r3, #5
  4183f6:	f363 0202 	bfi	r2, r3, #0, #3
  4183fa:	2315      	movs	r3, #21
  4183fc:	f363 02c7 	bfi	r2, r3, #3, #5
  418400:	f363 220c 	bfi	r2, r3, #8, #5
  418404:	2302      	movs	r3, #2
  418406:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41840a:	f248 0189 	movw	r1, #32905	; 0x8089
  41840e:	4b8f      	ldr	r3, [pc, #572]	; (41864c <chart_init+0x278>)
  418410:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  418412:	4c8b      	ldr	r4, [pc, #556]	; (418640 <chart_init+0x26c>)
  418414:	6820      	ldr	r0, [r4, #0]
  418416:	3048      	adds	r0, #72	; 0x48
  418418:	4b8a      	ldr	r3, [pc, #552]	; (418644 <chart_init+0x270>)
  41841a:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41841c:	6824      	ldr	r4, [r4, #0]
  41841e:	3448      	adds	r4, #72	; 0x48
  418420:	2000      	movs	r0, #0
  418422:	4b8b      	ldr	r3, [pc, #556]	; (418650 <chart_init+0x27c>)
  418424:	4798      	blx	r3
  418426:	3050      	adds	r0, #80	; 0x50
  418428:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41842c:	f280 809a 	bge.w	418564 <chart_init+0x190>
  418430:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418432:	2190      	movs	r1, #144	; 0x90
  418434:	4620      	mov	r0, r4
  418436:	4b87      	ldr	r3, [pc, #540]	; (418654 <chart_init+0x280>)
  418438:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41843a:	4b81      	ldr	r3, [pc, #516]	; (418640 <chart_init+0x26c>)
  41843c:	681c      	ldr	r4, [r3, #0]
  41843e:	3448      	adds	r4, #72	; 0x48
  418440:	2000      	movs	r0, #0
  418442:	4b83      	ldr	r3, [pc, #524]	; (418650 <chart_init+0x27c>)
  418444:	4798      	blx	r3
  418446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41844a:	0040      	lsls	r0, r0, #1
  41844c:	3050      	adds	r0, #80	; 0x50
  41844e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418452:	f280 8093 	bge.w	41857c <chart_init+0x1a8>
  418456:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  418458:	2192      	movs	r1, #146	; 0x92
  41845a:	4620      	mov	r0, r4
  41845c:	4b7d      	ldr	r3, [pc, #500]	; (418654 <chart_init+0x280>)
  41845e:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  418460:	4b77      	ldr	r3, [pc, #476]	; (418640 <chart_init+0x26c>)
  418462:	681c      	ldr	r4, [r3, #0]
  418464:	3448      	adds	r4, #72	; 0x48
  418466:	2000      	movs	r0, #0
  418468:	4b79      	ldr	r3, [pc, #484]	; (418650 <chart_init+0x27c>)
  41846a:	4798      	blx	r3
  41846c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418470:	0040      	lsls	r0, r0, #1
  418472:	3050      	adds	r0, #80	; 0x50
  418474:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418478:	f280 808f 	bge.w	41859a <chart_init+0x1c6>
  41847c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  41847e:	2193      	movs	r1, #147	; 0x93
  418480:	4620      	mov	r0, r4
  418482:	4b74      	ldr	r3, [pc, #464]	; (418654 <chart_init+0x280>)
  418484:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  418486:	4b6e      	ldr	r3, [pc, #440]	; (418640 <chart_init+0x26c>)
  418488:	6818      	ldr	r0, [r3, #0]
  41848a:	3048      	adds	r0, #72	; 0x48
  41848c:	4b6e      	ldr	r3, [pc, #440]	; (418648 <chart_init+0x274>)
  41848e:	6a1b      	ldr	r3, [r3, #32]
  418490:	f013 0f02 	tst.w	r3, #2
  418494:	f000 8090 	beq.w	4185b8 <chart_init+0x1e4>
  418498:	f04f 0200 	mov.w	r2, #0
  41849c:	2306      	movs	r3, #6
  41849e:	f363 0202 	bfi	r2, r3, #0, #3
  4184a2:	231a      	movs	r3, #26
  4184a4:	f363 02c7 	bfi	r2, r3, #3, #5
  4184a8:	231c      	movs	r3, #28
  4184aa:	f363 220c 	bfi	r2, r3, #8, #5
  4184ae:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  4184b2:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4184b6:	2199      	movs	r1, #153	; 0x99
  4184b8:	4b64      	ldr	r3, [pc, #400]	; (41864c <chart_init+0x278>)
  4184ba:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  4184bc:	4c60      	ldr	r4, [pc, #384]	; (418640 <chart_init+0x26c>)
  4184be:	6820      	ldr	r0, [r4, #0]
  4184c0:	304c      	adds	r0, #76	; 0x4c
  4184c2:	4b60      	ldr	r3, [pc, #384]	; (418644 <chart_init+0x270>)
  4184c4:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  4184c6:	6824      	ldr	r4, [r4, #0]
  4184c8:	344c      	adds	r4, #76	; 0x4c
  4184ca:	2000      	movs	r0, #0
  4184cc:	4b60      	ldr	r3, [pc, #384]	; (418650 <chart_init+0x27c>)
  4184ce:	4798      	blx	r3
  4184d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4184d4:	3050      	adds	r0, #80	; 0x50
  4184d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4184da:	da7c      	bge.n	4185d6 <chart_init+0x202>
  4184dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4184de:	2190      	movs	r1, #144	; 0x90
  4184e0:	4620      	mov	r0, r4
  4184e2:	4b5c      	ldr	r3, [pc, #368]	; (418654 <chart_init+0x280>)
  4184e4:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  4184e6:	4b56      	ldr	r3, [pc, #344]	; (418640 <chart_init+0x26c>)
  4184e8:	681c      	ldr	r4, [r3, #0]
  4184ea:	344c      	adds	r4, #76	; 0x4c
  4184ec:	2000      	movs	r0, #0
  4184ee:	4b58      	ldr	r3, [pc, #352]	; (418650 <chart_init+0x27c>)
  4184f0:	4798      	blx	r3
  4184f2:	3014      	adds	r0, #20
  4184f4:	0080      	lsls	r0, r0, #2
  4184f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4184fa:	da7a      	bge.n	4185f2 <chart_init+0x21e>
  4184fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4184fe:	2103      	movs	r1, #3
  418500:	4620      	mov	r0, r4
  418502:	4b54      	ldr	r3, [pc, #336]	; (418654 <chart_init+0x280>)
  418504:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  418506:	4b4e      	ldr	r3, [pc, #312]	; (418640 <chart_init+0x26c>)
  418508:	681c      	ldr	r4, [r3, #0]
  41850a:	344c      	adds	r4, #76	; 0x4c
  41850c:	2000      	movs	r0, #0
  41850e:	4b50      	ldr	r3, [pc, #320]	; (418650 <chart_init+0x27c>)
  418510:	4798      	blx	r3
  418512:	3028      	adds	r0, #40	; 0x28
  418514:	0040      	lsls	r0, r0, #1
  418516:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41851a:	da77      	bge.n	41860c <chart_init+0x238>
  41851c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41851e:	2114      	movs	r1, #20
  418520:	4620      	mov	r0, r4
  418522:	4b4c      	ldr	r3, [pc, #304]	; (418654 <chart_init+0x280>)
  418524:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418526:	4b46      	ldr	r3, [pc, #280]	; (418640 <chart_init+0x26c>)
  418528:	681c      	ldr	r4, [r3, #0]
  41852a:	344c      	adds	r4, #76	; 0x4c
  41852c:	2000      	movs	r0, #0
  41852e:	4b48      	ldr	r3, [pc, #288]	; (418650 <chart_init+0x27c>)
  418530:	4798      	blx	r3
  418532:	3050      	adds	r0, #80	; 0x50
  418534:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418538:	da75      	bge.n	418626 <chart_init+0x252>
  41853a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41853c:	2101      	movs	r1, #1
  41853e:	4620      	mov	r0, r4
  418540:	4b44      	ldr	r3, [pc, #272]	; (418654 <chart_init+0x280>)
  418542:	4798      	blx	r3
  418544:	bd10      	pop	{r4, pc}
  418546:	f04f 0200 	mov.w	r2, #0
  41854a:	2305      	movs	r3, #5
  41854c:	f363 0202 	bfi	r2, r3, #0, #3
  418550:	2314      	movs	r3, #20
  418552:	f363 02c7 	bfi	r2, r3, #3, #5
  418556:	2317      	movs	r3, #23
  418558:	f363 220c 	bfi	r2, r3, #8, #5
  41855c:	2303      	movs	r3, #3
  41855e:	f363 324f 	bfi	r2, r3, #13, #3
  418562:	e752      	b.n	41840a <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  418564:	2000      	movs	r0, #0
  418566:	4b3a      	ldr	r3, [pc, #232]	; (418650 <chart_init+0x27c>)
  418568:	4798      	blx	r3
  41856a:	3050      	adds	r0, #80	; 0x50
  41856c:	4b3a      	ldr	r3, [pc, #232]	; (418658 <chart_init+0x284>)
  41856e:	fb83 2300 	smull	r2, r3, r3, r0
  418572:	17c2      	asrs	r2, r0, #31
  418574:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418578:	b212      	sxth	r2, r2
  41857a:	e75a      	b.n	418432 <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41857c:	2000      	movs	r0, #0
  41857e:	4b34      	ldr	r3, [pc, #208]	; (418650 <chart_init+0x27c>)
  418580:	4798      	blx	r3
  418582:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418586:	0040      	lsls	r0, r0, #1
  418588:	3050      	adds	r0, #80	; 0x50
  41858a:	4b33      	ldr	r3, [pc, #204]	; (418658 <chart_init+0x284>)
  41858c:	fb83 2300 	smull	r2, r3, r3, r0
  418590:	17c2      	asrs	r2, r0, #31
  418592:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418596:	b212      	sxth	r2, r2
  418598:	e75e      	b.n	418458 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41859a:	2000      	movs	r0, #0
  41859c:	4b2c      	ldr	r3, [pc, #176]	; (418650 <chart_init+0x27c>)
  41859e:	4798      	blx	r3
  4185a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4185a4:	0040      	lsls	r0, r0, #1
  4185a6:	3050      	adds	r0, #80	; 0x50
  4185a8:	4b2b      	ldr	r3, [pc, #172]	; (418658 <chart_init+0x284>)
  4185aa:	fb83 2300 	smull	r2, r3, r3, r0
  4185ae:	17c2      	asrs	r2, r0, #31
  4185b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185b4:	b212      	sxth	r2, r2
  4185b6:	e762      	b.n	41847e <chart_init+0xaa>
  4185b8:	f04f 0200 	mov.w	r2, #0
  4185bc:	2304      	movs	r3, #4
  4185be:	f363 0202 	bfi	r2, r3, #0, #3
  4185c2:	2310      	movs	r3, #16
  4185c4:	f363 02c7 	bfi	r2, r3, #3, #5
  4185c8:	2312      	movs	r3, #18
  4185ca:	f363 220c 	bfi	r2, r3, #8, #5
  4185ce:	2302      	movs	r3, #2
  4185d0:	f363 324f 	bfi	r2, r3, #13, #3
  4185d4:	e76f      	b.n	4184b6 <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  4185d6:	2000      	movs	r0, #0
  4185d8:	4b1d      	ldr	r3, [pc, #116]	; (418650 <chart_init+0x27c>)
  4185da:	4798      	blx	r3
  4185dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4185e0:	3050      	adds	r0, #80	; 0x50
  4185e2:	4b1d      	ldr	r3, [pc, #116]	; (418658 <chart_init+0x284>)
  4185e4:	fb83 2300 	smull	r2, r3, r3, r0
  4185e8:	17c2      	asrs	r2, r0, #31
  4185ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185ee:	b212      	sxth	r2, r2
  4185f0:	e775      	b.n	4184de <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  4185f2:	2000      	movs	r0, #0
  4185f4:	4b16      	ldr	r3, [pc, #88]	; (418650 <chart_init+0x27c>)
  4185f6:	4798      	blx	r3
  4185f8:	3014      	adds	r0, #20
  4185fa:	0080      	lsls	r0, r0, #2
  4185fc:	4b16      	ldr	r3, [pc, #88]	; (418658 <chart_init+0x284>)
  4185fe:	fb83 2300 	smull	r2, r3, r3, r0
  418602:	17c2      	asrs	r2, r0, #31
  418604:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418608:	b212      	sxth	r2, r2
  41860a:	e778      	b.n	4184fe <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41860c:	2000      	movs	r0, #0
  41860e:	4b10      	ldr	r3, [pc, #64]	; (418650 <chart_init+0x27c>)
  418610:	4798      	blx	r3
  418612:	3028      	adds	r0, #40	; 0x28
  418614:	0040      	lsls	r0, r0, #1
  418616:	4b10      	ldr	r3, [pc, #64]	; (418658 <chart_init+0x284>)
  418618:	fb83 2300 	smull	r2, r3, r3, r0
  41861c:	17c2      	asrs	r2, r0, #31
  41861e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418622:	b212      	sxth	r2, r2
  418624:	e77b      	b.n	41851e <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418626:	2000      	movs	r0, #0
  418628:	4b09      	ldr	r3, [pc, #36]	; (418650 <chart_init+0x27c>)
  41862a:	4798      	blx	r3
  41862c:	3050      	adds	r0, #80	; 0x50
  41862e:	4b0a      	ldr	r3, [pc, #40]	; (418658 <chart_init+0x284>)
  418630:	fb83 2300 	smull	r2, r3, r3, r0
  418634:	17c2      	asrs	r2, r0, #31
  418636:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41863a:	b212      	sxth	r2, r2
  41863c:	e77e      	b.n	41853c <chart_init+0x168>
  41863e:	bf00      	nop
  418640:	20414798 	.word	0x20414798
  418644:	00417515 	.word	0x00417515
  418648:	2041479c 	.word	0x2041479c
  41864c:	00409bfd 	.word	0x00409bfd
  418650:	0041445d 	.word	0x0041445d
  418654:	00409a6d 	.word	0x00409a6d
  418658:	66666667 	.word	0x66666667

0041865c <calendar_init>:
{
  41865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  41865e:	4cbd      	ldr	r4, [pc, #756]	; (418954 <calendar_init+0x2f8>)
  418660:	6820      	ldr	r0, [r4, #0]
  418662:	3034      	adds	r0, #52	; 0x34
  418664:	4bbc      	ldr	r3, [pc, #752]	; (418958 <calendar_init+0x2fc>)
  418666:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  418668:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41866a:	2200      	movs	r2, #0
  41866c:	2110      	movs	r1, #16
  41866e:	3034      	adds	r0, #52	; 0x34
  418670:	4bba      	ldr	r3, [pc, #744]	; (41895c <calendar_init+0x300>)
  418672:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418674:	6824      	ldr	r4, [r4, #0]
  418676:	3434      	adds	r4, #52	; 0x34
  418678:	2000      	movs	r0, #0
  41867a:	4bb9      	ldr	r3, [pc, #740]	; (418960 <calendar_init+0x304>)
  41867c:	4798      	blx	r3
  41867e:	2801      	cmp	r0, #1
  418680:	f240 81e5 	bls.w	418a4e <calendar_init+0x3f2>
  418684:	2000      	movs	r0, #0
  418686:	4bb7      	ldr	r3, [pc, #732]	; (418964 <calendar_init+0x308>)
  418688:	4798      	blx	r3
  41868a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41868e:	0040      	lsls	r0, r0, #1
  418690:	3050      	adds	r0, #80	; 0x50
  418692:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418696:	f280 81f3 	bge.w	418a80 <calendar_init+0x424>
  41869a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41869c:	2112      	movs	r1, #18
  41869e:	4620      	mov	r0, r4
  4186a0:	4bae      	ldr	r3, [pc, #696]	; (41895c <calendar_init+0x300>)
  4186a2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4186a4:	4bab      	ldr	r3, [pc, #684]	; (418954 <calendar_init+0x2f8>)
  4186a6:	681c      	ldr	r4, [r3, #0]
  4186a8:	3434      	adds	r4, #52	; 0x34
  4186aa:	2000      	movs	r0, #0
  4186ac:	4bac      	ldr	r3, [pc, #688]	; (418960 <calendar_init+0x304>)
  4186ae:	4798      	blx	r3
  4186b0:	2801      	cmp	r0, #1
  4186b2:	f240 81f4 	bls.w	418a9e <calendar_init+0x442>
  4186b6:	2000      	movs	r0, #0
  4186b8:	4baa      	ldr	r3, [pc, #680]	; (418964 <calendar_init+0x308>)
  4186ba:	4798      	blx	r3
  4186bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4186c0:	0040      	lsls	r0, r0, #1
  4186c2:	3050      	adds	r0, #80	; 0x50
  4186c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4186c8:	f280 8202 	bge.w	418ad0 <calendar_init+0x474>
  4186cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4186ce:	2113      	movs	r1, #19
  4186d0:	4620      	mov	r0, r4
  4186d2:	4da2      	ldr	r5, [pc, #648]	; (41895c <calendar_init+0x300>)
  4186d4:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  4186d6:	4c9f      	ldr	r4, [pc, #636]	; (418954 <calendar_init+0x2f8>)
  4186d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4186da:	2200      	movs	r2, #0
  4186dc:	2111      	movs	r1, #17
  4186de:	3034      	adds	r0, #52	; 0x34
  4186e0:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4186e2:	6824      	ldr	r4, [r4, #0]
  4186e4:	3434      	adds	r4, #52	; 0x34
  4186e6:	2000      	movs	r0, #0
  4186e8:	4b9d      	ldr	r3, [pc, #628]	; (418960 <calendar_init+0x304>)
  4186ea:	4798      	blx	r3
  4186ec:	2801      	cmp	r0, #1
  4186ee:	f240 81fe 	bls.w	418aee <calendar_init+0x492>
  4186f2:	2000      	movs	r0, #0
  4186f4:	4b9b      	ldr	r3, [pc, #620]	; (418964 <calendar_init+0x308>)
  4186f6:	4798      	blx	r3
  4186f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4186fc:	0040      	lsls	r0, r0, #1
  4186fe:	3050      	adds	r0, #80	; 0x50
  418700:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418704:	f280 820c 	bge.w	418b20 <calendar_init+0x4c4>
  418708:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41870a:	2115      	movs	r1, #21
  41870c:	4620      	mov	r0, r4
  41870e:	4b93      	ldr	r3, [pc, #588]	; (41895c <calendar_init+0x300>)
  418710:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418712:	4b90      	ldr	r3, [pc, #576]	; (418954 <calendar_init+0x2f8>)
  418714:	681c      	ldr	r4, [r3, #0]
  418716:	3434      	adds	r4, #52	; 0x34
  418718:	2000      	movs	r0, #0
  41871a:	4b91      	ldr	r3, [pc, #580]	; (418960 <calendar_init+0x304>)
  41871c:	4798      	blx	r3
  41871e:	2801      	cmp	r0, #1
  418720:	f240 820d 	bls.w	418b3e <calendar_init+0x4e2>
  418724:	2000      	movs	r0, #0
  418726:	4b8f      	ldr	r3, [pc, #572]	; (418964 <calendar_init+0x308>)
  418728:	4798      	blx	r3
  41872a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41872e:	0040      	lsls	r0, r0, #1
  418730:	3050      	adds	r0, #80	; 0x50
  418732:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418736:	f280 821b 	bge.w	418b70 <calendar_init+0x514>
  41873a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41873c:	2116      	movs	r1, #22
  41873e:	4620      	mov	r0, r4
  418740:	4b86      	ldr	r3, [pc, #536]	; (41895c <calendar_init+0x300>)
  418742:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  418744:	4b83      	ldr	r3, [pc, #524]	; (418954 <calendar_init+0x2f8>)
  418746:	6818      	ldr	r0, [r3, #0]
  418748:	3034      	adds	r0, #52	; 0x34
  41874a:	4b87      	ldr	r3, [pc, #540]	; (418968 <calendar_init+0x30c>)
  41874c:	6a1b      	ldr	r3, [r3, #32]
  41874e:	f013 0f02 	tst.w	r3, #2
  418752:	f000 821c 	beq.w	418b8e <calendar_init+0x532>
  418756:	f04f 0200 	mov.w	r2, #0
  41875a:	2304      	movs	r3, #4
  41875c:	f363 0202 	bfi	r2, r3, #0, #3
  418760:	2311      	movs	r3, #17
  418762:	f363 02c7 	bfi	r2, r3, #3, #5
  418766:	f363 220c 	bfi	r2, r3, #8, #5
  41876a:	2302      	movs	r3, #2
  41876c:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418770:	f249 0189 	movw	r1, #37001	; 0x9089
  418774:	4b7d      	ldr	r3, [pc, #500]	; (41896c <calendar_init+0x310>)
  418776:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  418778:	4c76      	ldr	r4, [pc, #472]	; (418954 <calendar_init+0x2f8>)
  41877a:	6820      	ldr	r0, [r4, #0]
  41877c:	3038      	adds	r0, #56	; 0x38
  41877e:	4b76      	ldr	r3, [pc, #472]	; (418958 <calendar_init+0x2fc>)
  418780:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  418782:	6820      	ldr	r0, [r4, #0]
  418784:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  418786:	4b78      	ldr	r3, [pc, #480]	; (418968 <calendar_init+0x30c>)
  418788:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  41878a:	f013 0f02 	tst.w	r3, #2
  41878e:	f000 8201 	beq.w	418b94 <calendar_init+0x538>
  418792:	f04f 0200 	mov.w	r2, #0
  418796:	2302      	movs	r3, #2
  418798:	f363 0202 	bfi	r2, r3, #0, #3
  41879c:	2306      	movs	r3, #6
  41879e:	f363 02c7 	bfi	r2, r3, #3, #5
  4187a2:	2309      	movs	r3, #9
  4187a4:	f363 220c 	bfi	r2, r3, #8, #5
  4187a8:	f36f 324f 	bfc	r2, #13, #3
  4187ac:	f248 0189 	movw	r1, #32905	; 0x8089
  4187b0:	4b6e      	ldr	r3, [pc, #440]	; (41896c <calendar_init+0x310>)
  4187b2:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4187b4:	4b67      	ldr	r3, [pc, #412]	; (418954 <calendar_init+0x2f8>)
  4187b6:	681c      	ldr	r4, [r3, #0]
  4187b8:	3438      	adds	r4, #56	; 0x38
  4187ba:	2000      	movs	r0, #0
  4187bc:	4b68      	ldr	r3, [pc, #416]	; (418960 <calendar_init+0x304>)
  4187be:	4798      	blx	r3
  4187c0:	2801      	cmp	r0, #1
  4187c2:	f240 81f2 	bls.w	418baa <calendar_init+0x54e>
  4187c6:	2000      	movs	r0, #0
  4187c8:	4b66      	ldr	r3, [pc, #408]	; (418964 <calendar_init+0x308>)
  4187ca:	4798      	blx	r3
  4187cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4187d0:	0040      	lsls	r0, r0, #1
  4187d2:	3050      	adds	r0, #80	; 0x50
  4187d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187d8:	f280 8200 	bge.w	418bdc <calendar_init+0x580>
  4187dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4187de:	2112      	movs	r1, #18
  4187e0:	4620      	mov	r0, r4
  4187e2:	4b5e      	ldr	r3, [pc, #376]	; (41895c <calendar_init+0x300>)
  4187e4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  4187e6:	4b5b      	ldr	r3, [pc, #364]	; (418954 <calendar_init+0x2f8>)
  4187e8:	681c      	ldr	r4, [r3, #0]
  4187ea:	3438      	adds	r4, #56	; 0x38
  4187ec:	2000      	movs	r0, #0
  4187ee:	4b5c      	ldr	r3, [pc, #368]	; (418960 <calendar_init+0x304>)
  4187f0:	4798      	blx	r3
  4187f2:	2801      	cmp	r0, #1
  4187f4:	f240 8201 	bls.w	418bfa <calendar_init+0x59e>
  4187f8:	2000      	movs	r0, #0
  4187fa:	4b5a      	ldr	r3, [pc, #360]	; (418964 <calendar_init+0x308>)
  4187fc:	4798      	blx	r3
  4187fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418802:	0040      	lsls	r0, r0, #1
  418804:	3050      	adds	r0, #80	; 0x50
  418806:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41880a:	f280 820f 	bge.w	418c2c <calendar_init+0x5d0>
  41880e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418810:	2113      	movs	r1, #19
  418812:	4620      	mov	r0, r4
  418814:	4b51      	ldr	r3, [pc, #324]	; (41895c <calendar_init+0x300>)
  418816:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418818:	4b4e      	ldr	r3, [pc, #312]	; (418954 <calendar_init+0x2f8>)
  41881a:	681c      	ldr	r4, [r3, #0]
  41881c:	3438      	adds	r4, #56	; 0x38
  41881e:	2000      	movs	r0, #0
  418820:	4b4f      	ldr	r3, [pc, #316]	; (418960 <calendar_init+0x304>)
  418822:	4798      	blx	r3
  418824:	2801      	cmp	r0, #1
  418826:	f240 8210 	bls.w	418c4a <calendar_init+0x5ee>
  41882a:	2000      	movs	r0, #0
  41882c:	4b4d      	ldr	r3, [pc, #308]	; (418964 <calendar_init+0x308>)
  41882e:	4798      	blx	r3
  418830:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418834:	0040      	lsls	r0, r0, #1
  418836:	3050      	adds	r0, #80	; 0x50
  418838:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41883c:	f280 822a 	bge.w	418c94 <calendar_init+0x638>
  418840:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418842:	2111      	movs	r1, #17
  418844:	4620      	mov	r0, r4
  418846:	4b45      	ldr	r3, [pc, #276]	; (41895c <calendar_init+0x300>)
  418848:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  41884a:	4c42      	ldr	r4, [pc, #264]	; (418954 <calendar_init+0x2f8>)
  41884c:	6820      	ldr	r0, [r4, #0]
  41884e:	3030      	adds	r0, #48	; 0x30
  418850:	4b41      	ldr	r3, [pc, #260]	; (418958 <calendar_init+0x2fc>)
  418852:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  418854:	6824      	ldr	r4, [r4, #0]
  418856:	3430      	adds	r4, #48	; 0x30
  418858:	2000      	movs	r0, #0
  41885a:	4b42      	ldr	r3, [pc, #264]	; (418964 <calendar_init+0x308>)
  41885c:	4798      	blx	r3
  41885e:	3014      	adds	r0, #20
  418860:	0080      	lsls	r0, r0, #2
  418862:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418866:	f280 8224 	bge.w	418cb2 <calendar_init+0x656>
  41886a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41886c:	2101      	movs	r1, #1
  41886e:	4620      	mov	r0, r4
  418870:	4b3a      	ldr	r3, [pc, #232]	; (41895c <calendar_init+0x300>)
  418872:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  418874:	4b37      	ldr	r3, [pc, #220]	; (418954 <calendar_init+0x2f8>)
  418876:	6818      	ldr	r0, [r3, #0]
  418878:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  41887a:	4b3b      	ldr	r3, [pc, #236]	; (418968 <calendar_init+0x30c>)
  41887c:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41887e:	f013 0f02 	tst.w	r3, #2
  418882:	f000 8223 	beq.w	418ccc <calendar_init+0x670>
  418886:	f04f 0200 	mov.w	r2, #0
  41888a:	2302      	movs	r3, #2
  41888c:	f363 0202 	bfi	r2, r3, #0, #3
  418890:	2306      	movs	r3, #6
  418892:	f363 02c7 	bfi	r2, r3, #3, #5
  418896:	2309      	movs	r3, #9
  418898:	f363 220c 	bfi	r2, r3, #8, #5
  41889c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4188a0:	f248 1189 	movw	r1, #33161	; 0x8189
  4188a4:	4d31      	ldr	r5, [pc, #196]	; (41896c <calendar_init+0x310>)
  4188a6:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  4188a8:	4c2a      	ldr	r4, [pc, #168]	; (418954 <calendar_init+0x2f8>)
  4188aa:	6820      	ldr	r0, [r4, #0]
  4188ac:	4b30      	ldr	r3, [pc, #192]	; (418970 <calendar_init+0x314>)
  4188ae:	889a      	ldrh	r2, [r3, #4]
  4188b0:	f24a 0189 	movw	r1, #41097	; 0xa089
  4188b4:	3030      	adds	r0, #48	; 0x30
  4188b6:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  4188b8:	6820      	ldr	r0, [r4, #0]
  4188ba:	3030      	adds	r0, #48	; 0x30
  4188bc:	4b2a      	ldr	r3, [pc, #168]	; (418968 <calendar_init+0x30c>)
  4188be:	6a1b      	ldr	r3, [r3, #32]
  4188c0:	f013 0f02 	tst.w	r3, #2
  4188c4:	f000 8205 	beq.w	418cd2 <calendar_init+0x676>
  4188c8:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4188ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
  4188ce:	4d29      	ldr	r5, [pc, #164]	; (418974 <calendar_init+0x318>)
  4188d0:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  4188d2:	4c20      	ldr	r4, [pc, #128]	; (418954 <calendar_init+0x2f8>)
  4188d4:	6820      	ldr	r0, [r4, #0]
  4188d6:	2233      	movs	r2, #51	; 0x33
  4188d8:	f241 012c 	movw	r1, #4140	; 0x102c
  4188dc:	3030      	adds	r0, #48	; 0x30
  4188de:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  4188e0:	6820      	ldr	r0, [r4, #0]
  4188e2:	22ff      	movs	r2, #255	; 0xff
  4188e4:	f44f 710b 	mov.w	r1, #556	; 0x22c
  4188e8:	3030      	adds	r0, #48	; 0x30
  4188ea:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  4188ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  4188ee:	4b20      	ldr	r3, [pc, #128]	; (418970 <calendar_init+0x314>)
  4188f0:	881a      	ldrh	r2, [r3, #0]
  4188f2:	f248 2189 	movw	r1, #33417	; 0x8289
  4188f6:	3030      	adds	r0, #48	; 0x30
  4188f8:	4e1c      	ldr	r6, [pc, #112]	; (41896c <calendar_init+0x310>)
  4188fa:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  4188fc:	6820      	ldr	r0, [r4, #0]
  4188fe:	4d1a      	ldr	r5, [pc, #104]	; (418968 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418900:	89aa      	ldrh	r2, [r5, #12]
  418902:	f240 2129 	movw	r1, #553	; 0x229
  418906:	3030      	adds	r0, #48	; 0x30
  418908:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  41890a:	6820      	ldr	r0, [r4, #0]
  41890c:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  41890e:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418910:	f013 0f02 	tst.w	r3, #2
  418914:	f000 81df 	beq.w	418cd6 <calendar_init+0x67a>
  418918:	f04f 0200 	mov.w	r2, #0
  41891c:	2303      	movs	r3, #3
  41891e:	f363 0202 	bfi	r2, r3, #0, #3
  418922:	230c      	movs	r3, #12
  418924:	f363 02c7 	bfi	r2, r3, #3, #5
  418928:	f363 220c 	bfi	r2, r3, #8, #5
  41892c:	2301      	movs	r3, #1
  41892e:	f363 324f 	bfi	r2, r3, #13, #3
  418932:	2129      	movs	r1, #41	; 0x29
  418934:	4d0d      	ldr	r5, [pc, #52]	; (41896c <calendar_init+0x310>)
  418936:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  418938:	4c06      	ldr	r4, [pc, #24]	; (418954 <calendar_init+0x2f8>)
  41893a:	6820      	ldr	r0, [r4, #0]
  41893c:	4e0a      	ldr	r6, [pc, #40]	; (418968 <calendar_init+0x30c>)
  41893e:	89b2      	ldrh	r2, [r6, #12]
  418940:	f240 1129 	movw	r1, #297	; 0x129
  418944:	3030      	adds	r0, #48	; 0x30
  418946:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  418948:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41894a:	2202      	movs	r2, #2
  41894c:	f44f 7198 	mov.w	r1, #304	; 0x130
  418950:	3030      	adds	r0, #48	; 0x30
  418952:	e011      	b.n	418978 <calendar_init+0x31c>
  418954:	20414798 	.word	0x20414798
  418958:	00417515 	.word	0x00417515
  41895c:	00409a6d 	.word	0x00409a6d
  418960:	0041447d 	.word	0x0041447d
  418964:	0041445d 	.word	0x0041445d
  418968:	2041479c 	.word	0x2041479c
  41896c:	00409bfd 	.word	0x00409bfd
  418970:	00426d08 	.word	0x00426d08
  418974:	00409d8d 	.word	0x00409d8d
  418978:	4fb9      	ldr	r7, [pc, #740]	; (418c60 <calendar_init+0x604>)
  41897a:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  41897c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41897e:	2204      	movs	r2, #4
  418980:	f240 1131 	movw	r1, #305	; 0x131
  418984:	3030      	adds	r0, #48	; 0x30
  418986:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  418988:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41898a:	89b2      	ldrh	r2, [r6, #12]
  41898c:	f240 1139 	movw	r1, #313	; 0x139
  418990:	3030      	adds	r0, #48	; 0x30
  418992:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  418994:	6824      	ldr	r4, [r4, #0]
  418996:	3430      	adds	r4, #48	; 0x30
  418998:	2000      	movs	r0, #0
  41899a:	4bb2      	ldr	r3, [pc, #712]	; (418c64 <calendar_init+0x608>)
  41899c:	4798      	blx	r3
  41899e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4189a2:	3050      	adds	r0, #80	; 0x50
  4189a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4189a8:	f280 8198 	bge.w	418cdc <calendar_init+0x680>
  4189ac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4189ae:	2114      	movs	r1, #20
  4189b0:	4620      	mov	r0, r4
  4189b2:	4bab      	ldr	r3, [pc, #684]	; (418c60 <calendar_init+0x604>)
  4189b4:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4189b6:	4bac      	ldr	r3, [pc, #688]	; (418c68 <calendar_init+0x60c>)
  4189b8:	681c      	ldr	r4, [r3, #0]
  4189ba:	3430      	adds	r4, #48	; 0x30
  4189bc:	2000      	movs	r0, #0
  4189be:	4bab      	ldr	r3, [pc, #684]	; (418c6c <calendar_init+0x610>)
  4189c0:	4798      	blx	r3
  4189c2:	2801      	cmp	r0, #1
  4189c4:	f240 8198 	bls.w	418cf8 <calendar_init+0x69c>
  4189c8:	2000      	movs	r0, #0
  4189ca:	4ba6      	ldr	r3, [pc, #664]	; (418c64 <calendar_init+0x608>)
  4189cc:	4798      	blx	r3
  4189ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4189d2:	0040      	lsls	r0, r0, #1
  4189d4:	3050      	adds	r0, #80	; 0x50
  4189d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4189da:	f280 81a6 	bge.w	418d2a <calendar_init+0x6ce>
  4189de:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4189e0:	2112      	movs	r1, #18
  4189e2:	4620      	mov	r0, r4
  4189e4:	4b9e      	ldr	r3, [pc, #632]	; (418c60 <calendar_init+0x604>)
  4189e6:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4189e8:	4b9f      	ldr	r3, [pc, #636]	; (418c68 <calendar_init+0x60c>)
  4189ea:	681c      	ldr	r4, [r3, #0]
  4189ec:	3430      	adds	r4, #48	; 0x30
  4189ee:	2000      	movs	r0, #0
  4189f0:	4b9e      	ldr	r3, [pc, #632]	; (418c6c <calendar_init+0x610>)
  4189f2:	4798      	blx	r3
  4189f4:	2801      	cmp	r0, #1
  4189f6:	f240 81a7 	bls.w	418d48 <calendar_init+0x6ec>
  4189fa:	2000      	movs	r0, #0
  4189fc:	4b99      	ldr	r3, [pc, #612]	; (418c64 <calendar_init+0x608>)
  4189fe:	4798      	blx	r3
  418a00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a04:	0040      	lsls	r0, r0, #1
  418a06:	3050      	adds	r0, #80	; 0x50
  418a08:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a0c:	f280 81b5 	bge.w	418d7a <calendar_init+0x71e>
  418a10:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418a12:	2113      	movs	r1, #19
  418a14:	4620      	mov	r0, r4
  418a16:	4b92      	ldr	r3, [pc, #584]	; (418c60 <calendar_init+0x604>)
  418a18:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418a1a:	4b93      	ldr	r3, [pc, #588]	; (418c68 <calendar_init+0x60c>)
  418a1c:	681c      	ldr	r4, [r3, #0]
  418a1e:	3430      	adds	r4, #48	; 0x30
  418a20:	2000      	movs	r0, #0
  418a22:	4b92      	ldr	r3, [pc, #584]	; (418c6c <calendar_init+0x610>)
  418a24:	4798      	blx	r3
  418a26:	2801      	cmp	r0, #1
  418a28:	f240 81b6 	bls.w	418d98 <calendar_init+0x73c>
  418a2c:	2000      	movs	r0, #0
  418a2e:	4b8d      	ldr	r3, [pc, #564]	; (418c64 <calendar_init+0x608>)
  418a30:	4798      	blx	r3
  418a32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a36:	0040      	lsls	r0, r0, #1
  418a38:	3050      	adds	r0, #80	; 0x50
  418a3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a3e:	f280 81c4 	bge.w	418dca <calendar_init+0x76e>
  418a42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418a44:	2111      	movs	r1, #17
  418a46:	4620      	mov	r0, r4
  418a48:	4b85      	ldr	r3, [pc, #532]	; (418c60 <calendar_init+0x604>)
  418a4a:	4798      	blx	r3
  418a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418a4e:	2000      	movs	r0, #0
  418a50:	4b84      	ldr	r3, [pc, #528]	; (418c64 <calendar_init+0x608>)
  418a52:	4798      	blx	r3
  418a54:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a58:	3050      	adds	r0, #80	; 0x50
  418a5a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a5e:	da01      	bge.n	418a64 <calendar_init+0x408>
  418a60:	2201      	movs	r2, #1
  418a62:	e61b      	b.n	41869c <calendar_init+0x40>
  418a64:	2000      	movs	r0, #0
  418a66:	4b7f      	ldr	r3, [pc, #508]	; (418c64 <calendar_init+0x608>)
  418a68:	4798      	blx	r3
  418a6a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a6e:	3050      	adds	r0, #80	; 0x50
  418a70:	4b7f      	ldr	r3, [pc, #508]	; (418c70 <calendar_init+0x614>)
  418a72:	fb83 2300 	smull	r2, r3, r3, r0
  418a76:	17c2      	asrs	r2, r0, #31
  418a78:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a7c:	b212      	sxth	r2, r2
  418a7e:	e60d      	b.n	41869c <calendar_init+0x40>
  418a80:	2000      	movs	r0, #0
  418a82:	4b78      	ldr	r3, [pc, #480]	; (418c64 <calendar_init+0x608>)
  418a84:	4798      	blx	r3
  418a86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a8a:	0040      	lsls	r0, r0, #1
  418a8c:	3050      	adds	r0, #80	; 0x50
  418a8e:	4b78      	ldr	r3, [pc, #480]	; (418c70 <calendar_init+0x614>)
  418a90:	fb83 2300 	smull	r2, r3, r3, r0
  418a94:	17c2      	asrs	r2, r0, #31
  418a96:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418a9a:	b212      	sxth	r2, r2
  418a9c:	e5fe      	b.n	41869c <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418a9e:	2000      	movs	r0, #0
  418aa0:	4b70      	ldr	r3, [pc, #448]	; (418c64 <calendar_init+0x608>)
  418aa2:	4798      	blx	r3
  418aa4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418aa8:	3050      	adds	r0, #80	; 0x50
  418aaa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418aae:	da01      	bge.n	418ab4 <calendar_init+0x458>
  418ab0:	2201      	movs	r2, #1
  418ab2:	e60c      	b.n	4186ce <calendar_init+0x72>
  418ab4:	2000      	movs	r0, #0
  418ab6:	4b6b      	ldr	r3, [pc, #428]	; (418c64 <calendar_init+0x608>)
  418ab8:	4798      	blx	r3
  418aba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418abe:	3050      	adds	r0, #80	; 0x50
  418ac0:	4b6b      	ldr	r3, [pc, #428]	; (418c70 <calendar_init+0x614>)
  418ac2:	fb83 2300 	smull	r2, r3, r3, r0
  418ac6:	17c2      	asrs	r2, r0, #31
  418ac8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418acc:	b212      	sxth	r2, r2
  418ace:	e5fe      	b.n	4186ce <calendar_init+0x72>
  418ad0:	2000      	movs	r0, #0
  418ad2:	4b64      	ldr	r3, [pc, #400]	; (418c64 <calendar_init+0x608>)
  418ad4:	4798      	blx	r3
  418ad6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ada:	0040      	lsls	r0, r0, #1
  418adc:	3050      	adds	r0, #80	; 0x50
  418ade:	4b64      	ldr	r3, [pc, #400]	; (418c70 <calendar_init+0x614>)
  418ae0:	fb83 2300 	smull	r2, r3, r3, r0
  418ae4:	17c2      	asrs	r2, r0, #31
  418ae6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418aea:	b212      	sxth	r2, r2
  418aec:	e5ef      	b.n	4186ce <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418aee:	2000      	movs	r0, #0
  418af0:	4b5c      	ldr	r3, [pc, #368]	; (418c64 <calendar_init+0x608>)
  418af2:	4798      	blx	r3
  418af4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418af8:	3050      	adds	r0, #80	; 0x50
  418afa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418afe:	da01      	bge.n	418b04 <calendar_init+0x4a8>
  418b00:	2201      	movs	r2, #1
  418b02:	e602      	b.n	41870a <calendar_init+0xae>
  418b04:	2000      	movs	r0, #0
  418b06:	4b57      	ldr	r3, [pc, #348]	; (418c64 <calendar_init+0x608>)
  418b08:	4798      	blx	r3
  418b0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b0e:	3050      	adds	r0, #80	; 0x50
  418b10:	4b57      	ldr	r3, [pc, #348]	; (418c70 <calendar_init+0x614>)
  418b12:	fb83 2300 	smull	r2, r3, r3, r0
  418b16:	17c2      	asrs	r2, r0, #31
  418b18:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b1c:	b212      	sxth	r2, r2
  418b1e:	e5f4      	b.n	41870a <calendar_init+0xae>
  418b20:	2000      	movs	r0, #0
  418b22:	4b50      	ldr	r3, [pc, #320]	; (418c64 <calendar_init+0x608>)
  418b24:	4798      	blx	r3
  418b26:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b2a:	0040      	lsls	r0, r0, #1
  418b2c:	3050      	adds	r0, #80	; 0x50
  418b2e:	4b50      	ldr	r3, [pc, #320]	; (418c70 <calendar_init+0x614>)
  418b30:	fb83 2300 	smull	r2, r3, r3, r0
  418b34:	17c2      	asrs	r2, r0, #31
  418b36:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b3a:	b212      	sxth	r2, r2
  418b3c:	e5e5      	b.n	41870a <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418b3e:	2000      	movs	r0, #0
  418b40:	4b48      	ldr	r3, [pc, #288]	; (418c64 <calendar_init+0x608>)
  418b42:	4798      	blx	r3
  418b44:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b48:	3050      	adds	r0, #80	; 0x50
  418b4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b4e:	da01      	bge.n	418b54 <calendar_init+0x4f8>
  418b50:	2201      	movs	r2, #1
  418b52:	e5f3      	b.n	41873c <calendar_init+0xe0>
  418b54:	2000      	movs	r0, #0
  418b56:	4b43      	ldr	r3, [pc, #268]	; (418c64 <calendar_init+0x608>)
  418b58:	4798      	blx	r3
  418b5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b5e:	3050      	adds	r0, #80	; 0x50
  418b60:	4b43      	ldr	r3, [pc, #268]	; (418c70 <calendar_init+0x614>)
  418b62:	fb83 2300 	smull	r2, r3, r3, r0
  418b66:	17c2      	asrs	r2, r0, #31
  418b68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b6c:	b212      	sxth	r2, r2
  418b6e:	e5e5      	b.n	41873c <calendar_init+0xe0>
  418b70:	2000      	movs	r0, #0
  418b72:	4b3c      	ldr	r3, [pc, #240]	; (418c64 <calendar_init+0x608>)
  418b74:	4798      	blx	r3
  418b76:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b7a:	0040      	lsls	r0, r0, #1
  418b7c:	3050      	adds	r0, #80	; 0x50
  418b7e:	4b3c      	ldr	r3, [pc, #240]	; (418c70 <calendar_init+0x614>)
  418b80:	fb83 2300 	smull	r2, r3, r3, r0
  418b84:	17c2      	asrs	r2, r0, #31
  418b86:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418b8a:	b212      	sxth	r2, r2
  418b8c:	e5d6      	b.n	41873c <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  418b8e:	4b39      	ldr	r3, [pc, #228]	; (418c74 <calendar_init+0x618>)
  418b90:	881a      	ldrh	r2, [r3, #0]
  418b92:	e5ed      	b.n	418770 <calendar_init+0x114>
  418b94:	f04f 0207 	mov.w	r2, #7
  418b98:	231d      	movs	r3, #29
  418b9a:	f363 02c7 	bfi	r2, r3, #3, #5
  418b9e:	f363 220c 	bfi	r2, r3, #8, #5
  418ba2:	2303      	movs	r3, #3
  418ba4:	f363 324f 	bfi	r2, r3, #13, #3
  418ba8:	e600      	b.n	4187ac <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418baa:	2000      	movs	r0, #0
  418bac:	4b2d      	ldr	r3, [pc, #180]	; (418c64 <calendar_init+0x608>)
  418bae:	4798      	blx	r3
  418bb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418bb4:	3050      	adds	r0, #80	; 0x50
  418bb6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bba:	da01      	bge.n	418bc0 <calendar_init+0x564>
  418bbc:	2201      	movs	r2, #1
  418bbe:	e60e      	b.n	4187de <calendar_init+0x182>
  418bc0:	2000      	movs	r0, #0
  418bc2:	4b28      	ldr	r3, [pc, #160]	; (418c64 <calendar_init+0x608>)
  418bc4:	4798      	blx	r3
  418bc6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418bca:	3050      	adds	r0, #80	; 0x50
  418bcc:	4b28      	ldr	r3, [pc, #160]	; (418c70 <calendar_init+0x614>)
  418bce:	fb83 2300 	smull	r2, r3, r3, r0
  418bd2:	17c2      	asrs	r2, r0, #31
  418bd4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418bd8:	b212      	sxth	r2, r2
  418bda:	e600      	b.n	4187de <calendar_init+0x182>
  418bdc:	2000      	movs	r0, #0
  418bde:	4b21      	ldr	r3, [pc, #132]	; (418c64 <calendar_init+0x608>)
  418be0:	4798      	blx	r3
  418be2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418be6:	0040      	lsls	r0, r0, #1
  418be8:	3050      	adds	r0, #80	; 0x50
  418bea:	4b21      	ldr	r3, [pc, #132]	; (418c70 <calendar_init+0x614>)
  418bec:	fb83 2300 	smull	r2, r3, r3, r0
  418bf0:	17c2      	asrs	r2, r0, #31
  418bf2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418bf6:	b212      	sxth	r2, r2
  418bf8:	e5f1      	b.n	4187de <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418bfa:	2000      	movs	r0, #0
  418bfc:	4b19      	ldr	r3, [pc, #100]	; (418c64 <calendar_init+0x608>)
  418bfe:	4798      	blx	r3
  418c00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c04:	3050      	adds	r0, #80	; 0x50
  418c06:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c0a:	da01      	bge.n	418c10 <calendar_init+0x5b4>
  418c0c:	2201      	movs	r2, #1
  418c0e:	e5ff      	b.n	418810 <calendar_init+0x1b4>
  418c10:	2000      	movs	r0, #0
  418c12:	4b14      	ldr	r3, [pc, #80]	; (418c64 <calendar_init+0x608>)
  418c14:	4798      	blx	r3
  418c16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c1a:	3050      	adds	r0, #80	; 0x50
  418c1c:	4b14      	ldr	r3, [pc, #80]	; (418c70 <calendar_init+0x614>)
  418c1e:	fb83 2300 	smull	r2, r3, r3, r0
  418c22:	17c2      	asrs	r2, r0, #31
  418c24:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418c28:	b212      	sxth	r2, r2
  418c2a:	e5f1      	b.n	418810 <calendar_init+0x1b4>
  418c2c:	2000      	movs	r0, #0
  418c2e:	4b0d      	ldr	r3, [pc, #52]	; (418c64 <calendar_init+0x608>)
  418c30:	4798      	blx	r3
  418c32:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c36:	0040      	lsls	r0, r0, #1
  418c38:	3050      	adds	r0, #80	; 0x50
  418c3a:	4b0d      	ldr	r3, [pc, #52]	; (418c70 <calendar_init+0x614>)
  418c3c:	fb83 2300 	smull	r2, r3, r3, r0
  418c40:	17c2      	asrs	r2, r0, #31
  418c42:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418c46:	b212      	sxth	r2, r2
  418c48:	e5e2      	b.n	418810 <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418c4a:	2000      	movs	r0, #0
  418c4c:	4b05      	ldr	r3, [pc, #20]	; (418c64 <calendar_init+0x608>)
  418c4e:	4798      	blx	r3
  418c50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c54:	3050      	adds	r0, #80	; 0x50
  418c56:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418c5a:	da0d      	bge.n	418c78 <calendar_init+0x61c>
  418c5c:	2201      	movs	r2, #1
  418c5e:	e5f0      	b.n	418842 <calendar_init+0x1e6>
  418c60:	00409a6d 	.word	0x00409a6d
  418c64:	0041445d 	.word	0x0041445d
  418c68:	20414798 	.word	0x20414798
  418c6c:	0041447d 	.word	0x0041447d
  418c70:	66666667 	.word	0x66666667
  418c74:	00426d08 	.word	0x00426d08
  418c78:	2000      	movs	r0, #0
  418c7a:	4b5b      	ldr	r3, [pc, #364]	; (418de8 <calendar_init+0x78c>)
  418c7c:	4798      	blx	r3
  418c7e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c82:	3050      	adds	r0, #80	; 0x50
  418c84:	4b59      	ldr	r3, [pc, #356]	; (418dec <calendar_init+0x790>)
  418c86:	fb83 2300 	smull	r2, r3, r3, r0
  418c8a:	17c2      	asrs	r2, r0, #31
  418c8c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418c90:	b212      	sxth	r2, r2
  418c92:	e5d6      	b.n	418842 <calendar_init+0x1e6>
  418c94:	2000      	movs	r0, #0
  418c96:	4b54      	ldr	r3, [pc, #336]	; (418de8 <calendar_init+0x78c>)
  418c98:	4798      	blx	r3
  418c9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418c9e:	0040      	lsls	r0, r0, #1
  418ca0:	3050      	adds	r0, #80	; 0x50
  418ca2:	4b52      	ldr	r3, [pc, #328]	; (418dec <calendar_init+0x790>)
  418ca4:	fb83 2300 	smull	r2, r3, r3, r0
  418ca8:	17c2      	asrs	r2, r0, #31
  418caa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418cae:	b212      	sxth	r2, r2
  418cb0:	e5c7      	b.n	418842 <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  418cb2:	2000      	movs	r0, #0
  418cb4:	4b4c      	ldr	r3, [pc, #304]	; (418de8 <calendar_init+0x78c>)
  418cb6:	4798      	blx	r3
  418cb8:	3014      	adds	r0, #20
  418cba:	0080      	lsls	r0, r0, #2
  418cbc:	4b4b      	ldr	r3, [pc, #300]	; (418dec <calendar_init+0x790>)
  418cbe:	fb83 2300 	smull	r2, r3, r3, r0
  418cc2:	17c2      	asrs	r2, r0, #31
  418cc4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418cc8:	b212      	sxth	r2, r2
  418cca:	e5cf      	b.n	41886c <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  418ccc:	4b48      	ldr	r3, [pc, #288]	; (418df0 <calendar_init+0x794>)
  418cce:	881a      	ldrh	r2, [r3, #0]
  418cd0:	e5e6      	b.n	4188a0 <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  418cd2:	2266      	movs	r2, #102	; 0x66
  418cd4:	e5f9      	b.n	4188ca <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418cd6:	4b46      	ldr	r3, [pc, #280]	; (418df0 <calendar_init+0x794>)
  418cd8:	881a      	ldrh	r2, [r3, #0]
  418cda:	e62a      	b.n	418932 <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  418cdc:	2000      	movs	r0, #0
  418cde:	4b42      	ldr	r3, [pc, #264]	; (418de8 <calendar_init+0x78c>)
  418ce0:	4798      	blx	r3
  418ce2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418ce6:	3050      	adds	r0, #80	; 0x50
  418ce8:	4b40      	ldr	r3, [pc, #256]	; (418dec <calendar_init+0x790>)
  418cea:	fb83 2300 	smull	r2, r3, r3, r0
  418cee:	17c2      	asrs	r2, r0, #31
  418cf0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418cf4:	b212      	sxth	r2, r2
  418cf6:	e65a      	b.n	4189ae <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418cf8:	2000      	movs	r0, #0
  418cfa:	4b3b      	ldr	r3, [pc, #236]	; (418de8 <calendar_init+0x78c>)
  418cfc:	4798      	blx	r3
  418cfe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d02:	3050      	adds	r0, #80	; 0x50
  418d04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d08:	da01      	bge.n	418d0e <calendar_init+0x6b2>
  418d0a:	2201      	movs	r2, #1
  418d0c:	e668      	b.n	4189e0 <calendar_init+0x384>
  418d0e:	2000      	movs	r0, #0
  418d10:	4b35      	ldr	r3, [pc, #212]	; (418de8 <calendar_init+0x78c>)
  418d12:	4798      	blx	r3
  418d14:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d18:	3050      	adds	r0, #80	; 0x50
  418d1a:	4b34      	ldr	r3, [pc, #208]	; (418dec <calendar_init+0x790>)
  418d1c:	fb83 2300 	smull	r2, r3, r3, r0
  418d20:	17c2      	asrs	r2, r0, #31
  418d22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d26:	b212      	sxth	r2, r2
  418d28:	e65a      	b.n	4189e0 <calendar_init+0x384>
  418d2a:	2000      	movs	r0, #0
  418d2c:	4b2e      	ldr	r3, [pc, #184]	; (418de8 <calendar_init+0x78c>)
  418d2e:	4798      	blx	r3
  418d30:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d34:	0040      	lsls	r0, r0, #1
  418d36:	3050      	adds	r0, #80	; 0x50
  418d38:	4b2c      	ldr	r3, [pc, #176]	; (418dec <calendar_init+0x790>)
  418d3a:	fb83 2300 	smull	r2, r3, r3, r0
  418d3e:	17c2      	asrs	r2, r0, #31
  418d40:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d44:	b212      	sxth	r2, r2
  418d46:	e64b      	b.n	4189e0 <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418d48:	2000      	movs	r0, #0
  418d4a:	4b27      	ldr	r3, [pc, #156]	; (418de8 <calendar_init+0x78c>)
  418d4c:	4798      	blx	r3
  418d4e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d52:	3050      	adds	r0, #80	; 0x50
  418d54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d58:	da01      	bge.n	418d5e <calendar_init+0x702>
  418d5a:	2201      	movs	r2, #1
  418d5c:	e659      	b.n	418a12 <calendar_init+0x3b6>
  418d5e:	2000      	movs	r0, #0
  418d60:	4b21      	ldr	r3, [pc, #132]	; (418de8 <calendar_init+0x78c>)
  418d62:	4798      	blx	r3
  418d64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d68:	3050      	adds	r0, #80	; 0x50
  418d6a:	4b20      	ldr	r3, [pc, #128]	; (418dec <calendar_init+0x790>)
  418d6c:	fb83 2300 	smull	r2, r3, r3, r0
  418d70:	17c2      	asrs	r2, r0, #31
  418d72:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d76:	b212      	sxth	r2, r2
  418d78:	e64b      	b.n	418a12 <calendar_init+0x3b6>
  418d7a:	2000      	movs	r0, #0
  418d7c:	4b1a      	ldr	r3, [pc, #104]	; (418de8 <calendar_init+0x78c>)
  418d7e:	4798      	blx	r3
  418d80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d84:	0040      	lsls	r0, r0, #1
  418d86:	3050      	adds	r0, #80	; 0x50
  418d88:	4b18      	ldr	r3, [pc, #96]	; (418dec <calendar_init+0x790>)
  418d8a:	fb83 2300 	smull	r2, r3, r3, r0
  418d8e:	17c2      	asrs	r2, r0, #31
  418d90:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418d94:	b212      	sxth	r2, r2
  418d96:	e63c      	b.n	418a12 <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418d98:	2000      	movs	r0, #0
  418d9a:	4b13      	ldr	r3, [pc, #76]	; (418de8 <calendar_init+0x78c>)
  418d9c:	4798      	blx	r3
  418d9e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418da2:	3050      	adds	r0, #80	; 0x50
  418da4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418da8:	da01      	bge.n	418dae <calendar_init+0x752>
  418daa:	2201      	movs	r2, #1
  418dac:	e64a      	b.n	418a44 <calendar_init+0x3e8>
  418dae:	2000      	movs	r0, #0
  418db0:	4b0d      	ldr	r3, [pc, #52]	; (418de8 <calendar_init+0x78c>)
  418db2:	4798      	blx	r3
  418db4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418db8:	3050      	adds	r0, #80	; 0x50
  418dba:	4b0c      	ldr	r3, [pc, #48]	; (418dec <calendar_init+0x790>)
  418dbc:	fb83 2300 	smull	r2, r3, r3, r0
  418dc0:	17c2      	asrs	r2, r0, #31
  418dc2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418dc6:	b212      	sxth	r2, r2
  418dc8:	e63c      	b.n	418a44 <calendar_init+0x3e8>
  418dca:	2000      	movs	r0, #0
  418dcc:	4b06      	ldr	r3, [pc, #24]	; (418de8 <calendar_init+0x78c>)
  418dce:	4798      	blx	r3
  418dd0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418dd4:	0040      	lsls	r0, r0, #1
  418dd6:	3050      	adds	r0, #80	; 0x50
  418dd8:	4b04      	ldr	r3, [pc, #16]	; (418dec <calendar_init+0x790>)
  418dda:	fb83 2300 	smull	r2, r3, r3, r0
  418dde:	17c2      	asrs	r2, r0, #31
  418de0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418de4:	b212      	sxth	r2, r2
  418de6:	e62d      	b.n	418a44 <calendar_init+0x3e8>
  418de8:	0041445d 	.word	0x0041445d
  418dec:	66666667 	.word	0x66666667
  418df0:	00426d08 	.word	0x00426d08

00418df4 <cpicker_init>:
{
  418df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  418df6:	4c9a      	ldr	r4, [pc, #616]	; (419060 <cpicker_init+0x26c>)
  418df8:	6820      	ldr	r0, [r4, #0]
  418dfa:	303c      	adds	r0, #60	; 0x3c
  418dfc:	4b99      	ldr	r3, [pc, #612]	; (419064 <cpicker_init+0x270>)
  418dfe:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  418e00:	6824      	ldr	r4, [r4, #0]
  418e02:	343c      	adds	r4, #60	; 0x3c
  418e04:	2000      	movs	r0, #0
  418e06:	4b98      	ldr	r3, [pc, #608]	; (419068 <cpicker_init+0x274>)
  418e08:	4798      	blx	r3
  418e0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e0e:	0040      	lsls	r0, r0, #1
  418e10:	3050      	adds	r0, #80	; 0x50
  418e12:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e16:	f280 80b6 	bge.w	418f86 <cpicker_init+0x192>
  418e1a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  418e1c:	21c0      	movs	r1, #192	; 0xc0
  418e1e:	4620      	mov	r0, r4
  418e20:	4b92      	ldr	r3, [pc, #584]	; (41906c <cpicker_init+0x278>)
  418e22:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  418e24:	4c8e      	ldr	r4, [pc, #568]	; (419060 <cpicker_init+0x26c>)
  418e26:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418e28:	22ff      	movs	r2, #255	; 0xff
  418e2a:	212c      	movs	r1, #44	; 0x2c
  418e2c:	303c      	adds	r0, #60	; 0x3c
  418e2e:	4b90      	ldr	r3, [pc, #576]	; (419070 <cpicker_init+0x27c>)
  418e30:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  418e32:	6820      	ldr	r0, [r4, #0]
  418e34:	303c      	adds	r0, #60	; 0x3c
  418e36:	4b8f      	ldr	r3, [pc, #572]	; (419074 <cpicker_init+0x280>)
  418e38:	6a1b      	ldr	r3, [r3, #32]
  418e3a:	f013 0f02 	tst.w	r3, #2
  418e3e:	f000 80b1 	beq.w	418fa4 <cpicker_init+0x1b0>
  418e42:	f04f 0207 	mov.w	r2, #7
  418e46:	231d      	movs	r3, #29
  418e48:	f363 02c7 	bfi	r2, r3, #3, #5
  418e4c:	231e      	movs	r3, #30
  418e4e:	f363 220c 	bfi	r2, r3, #8, #5
  418e52:	2303      	movs	r3, #3
  418e54:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418e58:	2129      	movs	r1, #41	; 0x29
  418e5a:	4b87      	ldr	r3, [pc, #540]	; (419078 <cpicker_init+0x284>)
  418e5c:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  418e5e:	4b80      	ldr	r3, [pc, #512]	; (419060 <cpicker_init+0x26c>)
  418e60:	681c      	ldr	r4, [r3, #0]
  418e62:	343c      	adds	r4, #60	; 0x3c
  418e64:	2000      	movs	r0, #0
  418e66:	4b80      	ldr	r3, [pc, #512]	; (419068 <cpicker_init+0x274>)
  418e68:	4798      	blx	r3
  418e6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418e6e:	0080      	lsls	r0, r0, #2
  418e70:	3050      	adds	r0, #80	; 0x50
  418e72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e76:	f280 80a3 	bge.w	418fc0 <cpicker_init+0x1cc>
  418e7a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418e7c:	2114      	movs	r1, #20
  418e7e:	4620      	mov	r0, r4
  418e80:	4e7a      	ldr	r6, [pc, #488]	; (41906c <cpicker_init+0x278>)
  418e82:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418e84:	4c76      	ldr	r4, [pc, #472]	; (419060 <cpicker_init+0x26c>)
  418e86:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418e88:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418e8c:	2101      	movs	r1, #1
  418e8e:	303c      	adds	r0, #60	; 0x3c
  418e90:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  418e92:	6820      	ldr	r0, [r4, #0]
  418e94:	3040      	adds	r0, #64	; 0x40
  418e96:	4b73      	ldr	r3, [pc, #460]	; (419064 <cpicker_init+0x270>)
  418e98:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418e9a:	6820      	ldr	r0, [r4, #0]
  418e9c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  418ea0:	2101      	movs	r1, #1
  418ea2:	3040      	adds	r0, #64	; 0x40
  418ea4:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  418ea6:	6820      	ldr	r0, [r4, #0]
  418ea8:	4f74      	ldr	r7, [pc, #464]	; (41907c <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418eaa:	883a      	ldrh	r2, [r7, #0]
  418eac:	2129      	movs	r1, #41	; 0x29
  418eae:	3040      	adds	r0, #64	; 0x40
  418eb0:	4d71      	ldr	r5, [pc, #452]	; (419078 <cpicker_init+0x284>)
  418eb2:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  418eb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418eb6:	22ff      	movs	r2, #255	; 0xff
  418eb8:	212c      	movs	r1, #44	; 0x2c
  418eba:	3040      	adds	r0, #64	; 0x40
  418ebc:	4b6c      	ldr	r3, [pc, #432]	; (419070 <cpicker_init+0x27c>)
  418ebe:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  418ec0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  418ec2:	2202      	movs	r2, #2
  418ec4:	2130      	movs	r1, #48	; 0x30
  418ec6:	3040      	adds	r0, #64	; 0x40
  418ec8:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  418eca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  418ecc:	88ba      	ldrh	r2, [r7, #4]
  418ece:	2139      	movs	r1, #57	; 0x39
  418ed0:	3040      	adds	r0, #64	; 0x40
  418ed2:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  418ed4:	6820      	ldr	r0, [r4, #0]
  418ed6:	4e67      	ldr	r6, [pc, #412]	; (419074 <cpicker_init+0x280>)
  418ed8:	89b2      	ldrh	r2, [r6, #12]
  418eda:	f240 2139 	movw	r1, #569	; 0x239
  418ede:	3040      	adds	r0, #64	; 0x40
  418ee0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  418ee2:	6820      	ldr	r0, [r4, #0]
  418ee4:	89f2      	ldrh	r2, [r6, #14]
  418ee6:	f240 4139 	movw	r1, #1081	; 0x439
  418eea:	3040      	adds	r0, #64	; 0x40
  418eec:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418eee:	6824      	ldr	r4, [r4, #0]
  418ef0:	3440      	adds	r4, #64	; 0x40
  418ef2:	2000      	movs	r0, #0
  418ef4:	4b5c      	ldr	r3, [pc, #368]	; (419068 <cpicker_init+0x274>)
  418ef6:	4798      	blx	r3
  418ef8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418efc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418f00:	3050      	adds	r0, #80	; 0x50
  418f02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f06:	da6a      	bge.n	418fde <cpicker_init+0x1ea>
  418f08:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418f0a:	2112      	movs	r1, #18
  418f0c:	4620      	mov	r0, r4
  418f0e:	4b57      	ldr	r3, [pc, #348]	; (41906c <cpicker_init+0x278>)
  418f10:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418f12:	4b53      	ldr	r3, [pc, #332]	; (419060 <cpicker_init+0x26c>)
  418f14:	681c      	ldr	r4, [r3, #0]
  418f16:	3440      	adds	r4, #64	; 0x40
  418f18:	2000      	movs	r0, #0
  418f1a:	4b53      	ldr	r3, [pc, #332]	; (419068 <cpicker_init+0x274>)
  418f1c:	4798      	blx	r3
  418f1e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418f22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418f26:	3050      	adds	r0, #80	; 0x50
  418f28:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f2c:	da67      	bge.n	418ffe <cpicker_init+0x20a>
  418f2e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418f30:	2113      	movs	r1, #19
  418f32:	4620      	mov	r0, r4
  418f34:	4b4d      	ldr	r3, [pc, #308]	; (41906c <cpicker_init+0x278>)
  418f36:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418f38:	4b49      	ldr	r3, [pc, #292]	; (419060 <cpicker_init+0x26c>)
  418f3a:	681c      	ldr	r4, [r3, #0]
  418f3c:	3440      	adds	r4, #64	; 0x40
  418f3e:	2000      	movs	r0, #0
  418f40:	4b49      	ldr	r3, [pc, #292]	; (419068 <cpicker_init+0x274>)
  418f42:	4798      	blx	r3
  418f44:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418f48:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418f4c:	3050      	adds	r0, #80	; 0x50
  418f4e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f52:	da64      	bge.n	41901e <cpicker_init+0x22a>
  418f54:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  418f56:	2110      	movs	r1, #16
  418f58:	4620      	mov	r0, r4
  418f5a:	4b44      	ldr	r3, [pc, #272]	; (41906c <cpicker_init+0x278>)
  418f5c:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418f5e:	4b40      	ldr	r3, [pc, #256]	; (419060 <cpicker_init+0x26c>)
  418f60:	681c      	ldr	r4, [r3, #0]
  418f62:	3440      	adds	r4, #64	; 0x40
  418f64:	2000      	movs	r0, #0
  418f66:	4b40      	ldr	r3, [pc, #256]	; (419068 <cpicker_init+0x274>)
  418f68:	4798      	blx	r3
  418f6a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  418f6e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  418f72:	3050      	adds	r0, #80	; 0x50
  418f74:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f78:	da61      	bge.n	41903e <cpicker_init+0x24a>
  418f7a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418f7c:	2111      	movs	r1, #17
  418f7e:	4620      	mov	r0, r4
  418f80:	4b3a      	ldr	r3, [pc, #232]	; (41906c <cpicker_init+0x278>)
  418f82:	4798      	blx	r3
  418f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  418f86:	2000      	movs	r0, #0
  418f88:	4b37      	ldr	r3, [pc, #220]	; (419068 <cpicker_init+0x274>)
  418f8a:	4798      	blx	r3
  418f8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f90:	0040      	lsls	r0, r0, #1
  418f92:	3050      	adds	r0, #80	; 0x50
  418f94:	4b3a      	ldr	r3, [pc, #232]	; (419080 <cpicker_init+0x28c>)
  418f96:	fb83 2300 	smull	r2, r3, r3, r0
  418f9a:	17c2      	asrs	r2, r0, #31
  418f9c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418fa0:	b212      	sxth	r2, r2
  418fa2:	e73b      	b.n	418e1c <cpicker_init+0x28>
  418fa4:	2302      	movs	r3, #2
  418fa6:	f04f 0200 	mov.w	r2, #0
  418faa:	f363 0202 	bfi	r2, r3, #0, #3
  418fae:	2108      	movs	r1, #8
  418fb0:	f361 02c7 	bfi	r2, r1, #3, #5
  418fb4:	210b      	movs	r1, #11
  418fb6:	f361 220c 	bfi	r2, r1, #8, #5
  418fba:	f363 324f 	bfi	r2, r3, #13, #3
  418fbe:	e74b      	b.n	418e58 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  418fc0:	2000      	movs	r0, #0
  418fc2:	4b29      	ldr	r3, [pc, #164]	; (419068 <cpicker_init+0x274>)
  418fc4:	4798      	blx	r3
  418fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418fca:	0080      	lsls	r0, r0, #2
  418fcc:	3050      	adds	r0, #80	; 0x50
  418fce:	4b2c      	ldr	r3, [pc, #176]	; (419080 <cpicker_init+0x28c>)
  418fd0:	fb83 2300 	smull	r2, r3, r3, r0
  418fd4:	17c2      	asrs	r2, r0, #31
  418fd6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418fda:	b212      	sxth	r2, r2
  418fdc:	e74e      	b.n	418e7c <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418fde:	2000      	movs	r0, #0
  418fe0:	4b21      	ldr	r3, [pc, #132]	; (419068 <cpicker_init+0x274>)
  418fe2:	4798      	blx	r3
  418fe4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  418fe8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  418fec:	3050      	adds	r0, #80	; 0x50
  418fee:	4b24      	ldr	r3, [pc, #144]	; (419080 <cpicker_init+0x28c>)
  418ff0:	fb83 2300 	smull	r2, r3, r3, r0
  418ff4:	17c2      	asrs	r2, r0, #31
  418ff6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418ffa:	b212      	sxth	r2, r2
  418ffc:	e785      	b.n	418f0a <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  418ffe:	2000      	movs	r0, #0
  419000:	4b19      	ldr	r3, [pc, #100]	; (419068 <cpicker_init+0x274>)
  419002:	4798      	blx	r3
  419004:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419008:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41900c:	3050      	adds	r0, #80	; 0x50
  41900e:	4b1c      	ldr	r3, [pc, #112]	; (419080 <cpicker_init+0x28c>)
  419010:	fb83 2300 	smull	r2, r3, r3, r0
  419014:	17c2      	asrs	r2, r0, #31
  419016:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41901a:	b212      	sxth	r2, r2
  41901c:	e788      	b.n	418f30 <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41901e:	2000      	movs	r0, #0
  419020:	4b11      	ldr	r3, [pc, #68]	; (419068 <cpicker_init+0x274>)
  419022:	4798      	blx	r3
  419024:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419028:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41902c:	3050      	adds	r0, #80	; 0x50
  41902e:	4b14      	ldr	r3, [pc, #80]	; (419080 <cpicker_init+0x28c>)
  419030:	fb83 2300 	smull	r2, r3, r3, r0
  419034:	17c2      	asrs	r2, r0, #31
  419036:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41903a:	b212      	sxth	r2, r2
  41903c:	e78b      	b.n	418f56 <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41903e:	2000      	movs	r0, #0
  419040:	4b09      	ldr	r3, [pc, #36]	; (419068 <cpicker_init+0x274>)
  419042:	4798      	blx	r3
  419044:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419048:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41904c:	3050      	adds	r0, #80	; 0x50
  41904e:	4b0c      	ldr	r3, [pc, #48]	; (419080 <cpicker_init+0x28c>)
  419050:	fb83 2300 	smull	r2, r3, r3, r0
  419054:	17c2      	asrs	r2, r0, #31
  419056:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41905a:	b212      	sxth	r2, r2
  41905c:	e78e      	b.n	418f7c <cpicker_init+0x188>
  41905e:	bf00      	nop
  419060:	20414798 	.word	0x20414798
  419064:	00417515 	.word	0x00417515
  419068:	0041445d 	.word	0x0041445d
  41906c:	00409a6d 	.word	0x00409a6d
  419070:	00409d8d 	.word	0x00409d8d
  419074:	2041479c 	.word	0x2041479c
  419078:	00409bfd 	.word	0x00409bfd
  41907c:	00426d08 	.word	0x00426d08
  419080:	66666667 	.word	0x66666667

00419084 <checkbox_init>:
{
  419084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  419086:	4cb5      	ldr	r4, [pc, #724]	; (41935c <checkbox_init+0x2d8>)
  419088:	6820      	ldr	r0, [r4, #0]
  41908a:	3050      	adds	r0, #80	; 0x50
  41908c:	4bb4      	ldr	r3, [pc, #720]	; (419360 <checkbox_init+0x2dc>)
  41908e:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  419090:	6824      	ldr	r4, [r4, #0]
  419092:	3450      	adds	r4, #80	; 0x50
  419094:	2000      	movs	r0, #0
  419096:	4bb3      	ldr	r3, [pc, #716]	; (419364 <checkbox_init+0x2e0>)
  419098:	4798      	blx	r3
  41909a:	3014      	adds	r0, #20
  41909c:	0080      	lsls	r0, r0, #2
  41909e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190a2:	f280 80e1 	bge.w	419268 <checkbox_init+0x1e4>
  4190a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4190a8:	2101      	movs	r1, #1
  4190aa:	4620      	mov	r0, r4
  4190ac:	4bae      	ldr	r3, [pc, #696]	; (419368 <checkbox_init+0x2e4>)
  4190ae:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4190b0:	4baa      	ldr	r3, [pc, #680]	; (41935c <checkbox_init+0x2d8>)
  4190b2:	681c      	ldr	r4, [r3, #0]
  4190b4:	3450      	adds	r4, #80	; 0x50
  4190b6:	2000      	movs	r0, #0
  4190b8:	4baa      	ldr	r3, [pc, #680]	; (419364 <checkbox_init+0x2e0>)
  4190ba:	4798      	blx	r3
  4190bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4190c0:	0043      	lsls	r3, r0, #1
  4190c2:	3350      	adds	r3, #80	; 0x50
  4190c4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4190c8:	f280 80db 	bge.w	419282 <checkbox_init+0x1fe>
  4190cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4190ce:	2114      	movs	r1, #20
  4190d0:	4620      	mov	r0, r4
  4190d2:	4ba5      	ldr	r3, [pc, #660]	; (419368 <checkbox_init+0x2e4>)
  4190d4:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  4190d6:	4ca1      	ldr	r4, [pc, #644]	; (41935c <checkbox_init+0x2d8>)
  4190d8:	6820      	ldr	r0, [r4, #0]
  4190da:	4ea4      	ldr	r6, [pc, #656]	; (41936c <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  4190dc:	89b2      	ldrh	r2, [r6, #12]
  4190de:	2149      	movs	r1, #73	; 0x49
  4190e0:	3050      	adds	r0, #80	; 0x50
  4190e2:	4ba3      	ldr	r3, [pc, #652]	; (419370 <checkbox_init+0x2ec>)
  4190e4:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  4190e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4190e8:	2200      	movs	r2, #0
  4190ea:	214c      	movs	r1, #76	; 0x4c
  4190ec:	3050      	adds	r0, #80	; 0x50
  4190ee:	4da1      	ldr	r5, [pc, #644]	; (419374 <checkbox_init+0x2f0>)
  4190f0:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  4190f2:	6820      	ldr	r0, [r4, #0]
  4190f4:	227f      	movs	r2, #127	; 0x7f
  4190f6:	f44f 7113 	mov.w	r1, #588	; 0x24c
  4190fa:	3050      	adds	r0, #80	; 0x50
  4190fc:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4190fe:	6824      	ldr	r4, [r4, #0]
  419100:	3450      	adds	r4, #80	; 0x50
  419102:	6a33      	ldr	r3, [r6, #32]
  419104:	f013 0f20 	tst.w	r3, #32
  419108:	f000 80ca 	beq.w	4192a0 <checkbox_init+0x21c>
  41910c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41910e:	2140      	movs	r1, #64	; 0x40
  419110:	4620      	mov	r0, r4
  419112:	4b95      	ldr	r3, [pc, #596]	; (419368 <checkbox_init+0x2e4>)
  419114:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419116:	4b91      	ldr	r3, [pc, #580]	; (41935c <checkbox_init+0x2d8>)
  419118:	681c      	ldr	r4, [r3, #0]
  41911a:	3450      	adds	r4, #80	; 0x50
  41911c:	2000      	movs	r0, #0
  41911e:	4b91      	ldr	r3, [pc, #580]	; (419364 <checkbox_init+0x2e0>)
  419120:	4798      	blx	r3
  419122:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419126:	0043      	lsls	r3, r0, #1
  419128:	3350      	adds	r3, #80	; 0x50
  41912a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41912e:	f280 80ce 	bge.w	4192ce <checkbox_init+0x24a>
  419132:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  419134:	2141      	movs	r1, #65	; 0x41
  419136:	4620      	mov	r0, r4
  419138:	4d8b      	ldr	r5, [pc, #556]	; (419368 <checkbox_init+0x2e4>)
  41913a:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41913c:	4c87      	ldr	r4, [pc, #540]	; (41935c <checkbox_init+0x2d8>)
  41913e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  419140:	2200      	movs	r2, #0
  419142:	21b0      	movs	r1, #176	; 0xb0
  419144:	3050      	adds	r0, #80	; 0x50
  419146:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  419148:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41914a:	224c      	movs	r2, #76	; 0x4c
  41914c:	21b7      	movs	r1, #183	; 0xb7
  41914e:	3050      	adds	r0, #80	; 0x50
  419150:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  419152:	6820      	ldr	r0, [r4, #0]
  419154:	3054      	adds	r0, #84	; 0x54
  419156:	4b82      	ldr	r3, [pc, #520]	; (419360 <checkbox_init+0x2dc>)
  419158:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  41915a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41915c:	2200      	movs	r2, #0
  41915e:	f44f 7113 	mov.w	r1, #588	; 0x24c
  419162:	3054      	adds	r0, #84	; 0x54
  419164:	4b83      	ldr	r3, [pc, #524]	; (419374 <checkbox_init+0x2f0>)
  419166:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  419168:	6824      	ldr	r4, [r4, #0]
  41916a:	3454      	adds	r4, #84	; 0x54
  41916c:	2000      	movs	r0, #0
  41916e:	4b7d      	ldr	r3, [pc, #500]	; (419364 <checkbox_init+0x2e0>)
  419170:	4798      	blx	r3
  419172:	3014      	adds	r0, #20
  419174:	0080      	lsls	r0, r0, #2
  419176:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41917a:	f280 80b7 	bge.w	4192ec <checkbox_init+0x268>
  41917e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419180:	2101      	movs	r1, #1
  419182:	4620      	mov	r0, r4
  419184:	4e78      	ldr	r6, [pc, #480]	; (419368 <checkbox_init+0x2e4>)
  419186:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  419188:	4c74      	ldr	r4, [pc, #464]	; (41935c <checkbox_init+0x2d8>)
  41918a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  41918c:	4a7a      	ldr	r2, [pc, #488]	; (419378 <checkbox_init+0x2f4>)
  41918e:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  419192:	3054      	adds	r0, #84	; 0x54
  419194:	4d79      	ldr	r5, [pc, #484]	; (41937c <checkbox_init+0x2f8>)
  419196:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  419198:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41919a:	4b79      	ldr	r3, [pc, #484]	; (419380 <checkbox_init+0x2fc>)
  41919c:	881a      	ldrh	r2, [r3, #0]
  41919e:	f240 1169 	movw	r1, #361	; 0x169
  4191a2:	3054      	adds	r0, #84	; 0x54
  4191a4:	4b72      	ldr	r3, [pc, #456]	; (419370 <checkbox_init+0x2ec>)
  4191a6:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  4191a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  4191aa:	2200      	movs	r2, #0
  4191ac:	216c      	movs	r1, #108	; 0x6c
  4191ae:	3054      	adds	r0, #84	; 0x54
  4191b0:	4f70      	ldr	r7, [pc, #448]	; (419374 <checkbox_init+0x2f0>)
  4191b2:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  4191b4:	6820      	ldr	r0, [r4, #0]
  4191b6:	22ff      	movs	r2, #255	; 0xff
  4191b8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  4191bc:	3054      	adds	r0, #84	; 0x54
  4191be:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  4191c0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  4191c2:	226c      	movs	r2, #108	; 0x6c
  4191c4:	21b4      	movs	r1, #180	; 0xb4
  4191c6:	3054      	adds	r0, #84	; 0x54
  4191c8:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  4191ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4191cc:	4b67      	ldr	r3, [pc, #412]	; (41936c <checkbox_init+0x2e8>)
  4191ce:	691a      	ldr	r2, [r3, #16]
  4191d0:	f248 118e 	movw	r1, #33166	; 0x818e
  4191d4:	3054      	adds	r0, #84	; 0x54
  4191d6:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  4191d8:	6824      	ldr	r4, [r4, #0]
  4191da:	3454      	adds	r4, #84	; 0x54
  4191dc:	2000      	movs	r0, #0
  4191de:	4b61      	ldr	r3, [pc, #388]	; (419364 <checkbox_init+0x2e0>)
  4191e0:	4798      	blx	r3
  4191e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4191e6:	3050      	adds	r0, #80	; 0x50
  4191e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4191ec:	f280 808b 	bge.w	419306 <checkbox_init+0x282>
  4191f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4191f2:	2112      	movs	r1, #18
  4191f4:	4620      	mov	r0, r4
  4191f6:	4b5c      	ldr	r3, [pc, #368]	; (419368 <checkbox_init+0x2e4>)
  4191f8:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  4191fa:	4b58      	ldr	r3, [pc, #352]	; (41935c <checkbox_init+0x2d8>)
  4191fc:	681c      	ldr	r4, [r3, #0]
  4191fe:	3454      	adds	r4, #84	; 0x54
  419200:	2000      	movs	r0, #0
  419202:	4b58      	ldr	r3, [pc, #352]	; (419364 <checkbox_init+0x2e0>)
  419204:	4798      	blx	r3
  419206:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41920a:	3050      	adds	r0, #80	; 0x50
  41920c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419210:	f280 8087 	bge.w	419322 <checkbox_init+0x29e>
  419214:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419216:	2113      	movs	r1, #19
  419218:	4620      	mov	r0, r4
  41921a:	4b53      	ldr	r3, [pc, #332]	; (419368 <checkbox_init+0x2e4>)
  41921c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41921e:	4b4f      	ldr	r3, [pc, #316]	; (41935c <checkbox_init+0x2d8>)
  419220:	681c      	ldr	r4, [r3, #0]
  419222:	3454      	adds	r4, #84	; 0x54
  419224:	2000      	movs	r0, #0
  419226:	4b4f      	ldr	r3, [pc, #316]	; (419364 <checkbox_init+0x2e0>)
  419228:	4798      	blx	r3
  41922a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41922e:	3050      	adds	r0, #80	; 0x50
  419230:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419234:	f280 8083 	bge.w	41933e <checkbox_init+0x2ba>
  419238:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41923a:	2110      	movs	r1, #16
  41923c:	4620      	mov	r0, r4
  41923e:	4b4a      	ldr	r3, [pc, #296]	; (419368 <checkbox_init+0x2e4>)
  419240:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419242:	4b46      	ldr	r3, [pc, #280]	; (41935c <checkbox_init+0x2d8>)
  419244:	681c      	ldr	r4, [r3, #0]
  419246:	3454      	adds	r4, #84	; 0x54
  419248:	2000      	movs	r0, #0
  41924a:	4b46      	ldr	r3, [pc, #280]	; (419364 <checkbox_init+0x2e0>)
  41924c:	4798      	blx	r3
  41924e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419252:	3050      	adds	r0, #80	; 0x50
  419254:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419258:	f280 8096 	bge.w	419388 <checkbox_init+0x304>
  41925c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41925e:	2111      	movs	r1, #17
  419260:	4620      	mov	r0, r4
  419262:	4b41      	ldr	r3, [pc, #260]	; (419368 <checkbox_init+0x2e4>)
  419264:	4798      	blx	r3
  419266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  419268:	2000      	movs	r0, #0
  41926a:	4b3e      	ldr	r3, [pc, #248]	; (419364 <checkbox_init+0x2e0>)
  41926c:	4798      	blx	r3
  41926e:	3014      	adds	r0, #20
  419270:	0080      	lsls	r0, r0, #2
  419272:	4b44      	ldr	r3, [pc, #272]	; (419384 <checkbox_init+0x300>)
  419274:	fb83 2300 	smull	r2, r3, r3, r0
  419278:	17c2      	asrs	r2, r0, #31
  41927a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41927e:	b212      	sxth	r2, r2
  419280:	e712      	b.n	4190a8 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419282:	2000      	movs	r0, #0
  419284:	4b37      	ldr	r3, [pc, #220]	; (419364 <checkbox_init+0x2e0>)
  419286:	4798      	blx	r3
  419288:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41928c:	0043      	lsls	r3, r0, #1
  41928e:	3350      	adds	r3, #80	; 0x50
  419290:	493c      	ldr	r1, [pc, #240]	; (419384 <checkbox_init+0x300>)
  419292:	fb81 2103 	smull	r2, r1, r1, r3
  419296:	17da      	asrs	r2, r3, #31
  419298:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41929c:	b212      	sxth	r2, r2
  41929e:	e716      	b.n	4190ce <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  4192a0:	2000      	movs	r0, #0
  4192a2:	4b30      	ldr	r3, [pc, #192]	; (419364 <checkbox_init+0x2e0>)
  4192a4:	4798      	blx	r3
  4192a6:	3028      	adds	r0, #40	; 0x28
  4192a8:	0040      	lsls	r0, r0, #1
  4192aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192ae:	da01      	bge.n	4192b4 <checkbox_init+0x230>
  4192b0:	2201      	movs	r2, #1
  4192b2:	e72c      	b.n	41910e <checkbox_init+0x8a>
  4192b4:	2000      	movs	r0, #0
  4192b6:	4b2b      	ldr	r3, [pc, #172]	; (419364 <checkbox_init+0x2e0>)
  4192b8:	4798      	blx	r3
  4192ba:	3028      	adds	r0, #40	; 0x28
  4192bc:	0040      	lsls	r0, r0, #1
  4192be:	4b31      	ldr	r3, [pc, #196]	; (419384 <checkbox_init+0x300>)
  4192c0:	fb83 2300 	smull	r2, r3, r3, r0
  4192c4:	17c2      	asrs	r2, r0, #31
  4192c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4192ca:	b212      	sxth	r2, r2
  4192cc:	e71f      	b.n	41910e <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4192ce:	2000      	movs	r0, #0
  4192d0:	4b24      	ldr	r3, [pc, #144]	; (419364 <checkbox_init+0x2e0>)
  4192d2:	4798      	blx	r3
  4192d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4192d8:	0043      	lsls	r3, r0, #1
  4192da:	3350      	adds	r3, #80	; 0x50
  4192dc:	4929      	ldr	r1, [pc, #164]	; (419384 <checkbox_init+0x300>)
  4192de:	fb81 2103 	smull	r2, r1, r1, r3
  4192e2:	17da      	asrs	r2, r3, #31
  4192e4:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  4192e8:	b212      	sxth	r2, r2
  4192ea:	e723      	b.n	419134 <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  4192ec:	2000      	movs	r0, #0
  4192ee:	4b1d      	ldr	r3, [pc, #116]	; (419364 <checkbox_init+0x2e0>)
  4192f0:	4798      	blx	r3
  4192f2:	3014      	adds	r0, #20
  4192f4:	0080      	lsls	r0, r0, #2
  4192f6:	4b23      	ldr	r3, [pc, #140]	; (419384 <checkbox_init+0x300>)
  4192f8:	fb83 2300 	smull	r2, r3, r3, r0
  4192fc:	17c2      	asrs	r2, r0, #31
  4192fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419302:	b212      	sxth	r2, r2
  419304:	e73c      	b.n	419180 <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419306:	2000      	movs	r0, #0
  419308:	4b16      	ldr	r3, [pc, #88]	; (419364 <checkbox_init+0x2e0>)
  41930a:	4798      	blx	r3
  41930c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419310:	3050      	adds	r0, #80	; 0x50
  419312:	4b1c      	ldr	r3, [pc, #112]	; (419384 <checkbox_init+0x300>)
  419314:	fb83 2300 	smull	r2, r3, r3, r0
  419318:	17c2      	asrs	r2, r0, #31
  41931a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41931e:	b212      	sxth	r2, r2
  419320:	e767      	b.n	4191f2 <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419322:	2000      	movs	r0, #0
  419324:	4b0f      	ldr	r3, [pc, #60]	; (419364 <checkbox_init+0x2e0>)
  419326:	4798      	blx	r3
  419328:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41932c:	3050      	adds	r0, #80	; 0x50
  41932e:	4b15      	ldr	r3, [pc, #84]	; (419384 <checkbox_init+0x300>)
  419330:	fb83 2300 	smull	r2, r3, r3, r0
  419334:	17c2      	asrs	r2, r0, #31
  419336:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41933a:	b212      	sxth	r2, r2
  41933c:	e76b      	b.n	419216 <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41933e:	2000      	movs	r0, #0
  419340:	4b08      	ldr	r3, [pc, #32]	; (419364 <checkbox_init+0x2e0>)
  419342:	4798      	blx	r3
  419344:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419348:	3050      	adds	r0, #80	; 0x50
  41934a:	4b0e      	ldr	r3, [pc, #56]	; (419384 <checkbox_init+0x300>)
  41934c:	fb83 2300 	smull	r2, r3, r3, r0
  419350:	17c2      	asrs	r2, r0, #31
  419352:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419356:	b212      	sxth	r2, r2
  419358:	e76f      	b.n	41923a <checkbox_init+0x1b6>
  41935a:	bf00      	nop
  41935c:	20414798 	.word	0x20414798
  419360:	00417515 	.word	0x00417515
  419364:	0041445d 	.word	0x0041445d
  419368:	00409a6d 	.word	0x00409a6d
  41936c:	2041479c 	.word	0x2041479c
  419370:	00409bfd 	.word	0x00409bfd
  419374:	00409d8d 	.word	0x00409d8d
  419378:	00426d14 	.word	0x00426d14
  41937c:	00409f1d 	.word	0x00409f1d
  419380:	00426d08 	.word	0x00426d08
  419384:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419388:	2000      	movs	r0, #0
  41938a:	4b06      	ldr	r3, [pc, #24]	; (4193a4 <checkbox_init+0x320>)
  41938c:	4798      	blx	r3
  41938e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419392:	3050      	adds	r0, #80	; 0x50
  419394:	4b04      	ldr	r3, [pc, #16]	; (4193a8 <checkbox_init+0x324>)
  419396:	fb83 2300 	smull	r2, r3, r3, r0
  41939a:	17c2      	asrs	r2, r0, #31
  41939c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4193a0:	b212      	sxth	r2, r2
  4193a2:	e75c      	b.n	41925e <checkbox_init+0x1da>
  4193a4:	0041445d 	.word	0x0041445d
  4193a8:	66666667 	.word	0x66666667

004193ac <keyboard_init>:
{
  4193ac:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  4193ae:	4c76      	ldr	r4, [pc, #472]	; (419588 <keyboard_init+0x1dc>)
  4193b0:	6820      	ldr	r0, [r4, #0]
  4193b2:	306c      	adds	r0, #108	; 0x6c
  4193b4:	4b75      	ldr	r3, [pc, #468]	; (41958c <keyboard_init+0x1e0>)
  4193b6:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  4193b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4193ba:	2200      	movs	r2, #0
  4193bc:	2101      	movs	r1, #1
  4193be:	306c      	adds	r0, #108	; 0x6c
  4193c0:	4b73      	ldr	r3, [pc, #460]	; (419590 <keyboard_init+0x1e4>)
  4193c2:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  4193c4:	6824      	ldr	r4, [r4, #0]
  4193c6:	346c      	adds	r4, #108	; 0x6c
  4193c8:	2000      	movs	r0, #0
  4193ca:	4b72      	ldr	r3, [pc, #456]	; (419594 <keyboard_init+0x1e8>)
  4193cc:	4798      	blx	r3
  4193ce:	3014      	adds	r0, #20
  4193d0:	0080      	lsls	r0, r0, #2
  4193d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4193d6:	f280 8081 	bge.w	4194dc <keyboard_init+0x130>
  4193da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  4193dc:	2130      	movs	r1, #48	; 0x30
  4193de:	4620      	mov	r0, r4
  4193e0:	4d6b      	ldr	r5, [pc, #428]	; (419590 <keyboard_init+0x1e4>)
  4193e2:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  4193e4:	4c68      	ldr	r4, [pc, #416]	; (419588 <keyboard_init+0x1dc>)
  4193e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  4193e8:	2202      	movs	r2, #2
  4193ea:	2131      	movs	r1, #49	; 0x31
  4193ec:	306c      	adds	r0, #108	; 0x6c
  4193ee:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  4193f0:	6820      	ldr	r0, [r4, #0]
  4193f2:	306c      	adds	r0, #108	; 0x6c
  4193f4:	4b68      	ldr	r3, [pc, #416]	; (419598 <keyboard_init+0x1ec>)
  4193f6:	6a1b      	ldr	r3, [r3, #32]
  4193f8:	f013 0f02 	tst.w	r3, #2
  4193fc:	d07b      	beq.n	4194f6 <keyboard_init+0x14a>
  4193fe:	f04f 0200 	mov.w	r2, #0
  419402:	2301      	movs	r3, #1
  419404:	f363 0202 	bfi	r2, r3, #0, #3
  419408:	2307      	movs	r3, #7
  41940a:	f363 02c7 	bfi	r2, r3, #3, #5
  41940e:	2308      	movs	r3, #8
  419410:	f363 220c 	bfi	r2, r3, #8, #5
  419414:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419418:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41941c:	2139      	movs	r1, #57	; 0x39
  41941e:	4d5f      	ldr	r5, [pc, #380]	; (41959c <keyboard_init+0x1f0>)
  419420:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  419422:	4c59      	ldr	r4, [pc, #356]	; (419588 <keyboard_init+0x1dc>)
  419424:	6820      	ldr	r0, [r4, #0]
  419426:	4b5c      	ldr	r3, [pc, #368]	; (419598 <keyboard_init+0x1ec>)
  419428:	89da      	ldrh	r2, [r3, #14]
  41942a:	f240 4139 	movw	r1, #1081	; 0x439
  41942e:	306c      	adds	r0, #108	; 0x6c
  419430:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  419432:	6824      	ldr	r4, [r4, #0]
  419434:	346c      	adds	r4, #108	; 0x6c
  419436:	2000      	movs	r0, #0
  419438:	4b56      	ldr	r3, [pc, #344]	; (419594 <keyboard_init+0x1e8>)
  41943a:	4798      	blx	r3
  41943c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419440:	3050      	adds	r0, #80	; 0x50
  419442:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419446:	da59      	bge.n	4194fc <keyboard_init+0x150>
  419448:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41944a:	2112      	movs	r1, #18
  41944c:	4620      	mov	r0, r4
  41944e:	4b50      	ldr	r3, [pc, #320]	; (419590 <keyboard_init+0x1e4>)
  419450:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419452:	4b4d      	ldr	r3, [pc, #308]	; (419588 <keyboard_init+0x1dc>)
  419454:	681c      	ldr	r4, [r3, #0]
  419456:	346c      	adds	r4, #108	; 0x6c
  419458:	2000      	movs	r0, #0
  41945a:	4b4e      	ldr	r3, [pc, #312]	; (419594 <keyboard_init+0x1e8>)
  41945c:	4798      	blx	r3
  41945e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419462:	3050      	adds	r0, #80	; 0x50
  419464:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419468:	da56      	bge.n	419518 <keyboard_init+0x16c>
  41946a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41946c:	2113      	movs	r1, #19
  41946e:	4620      	mov	r0, r4
  419470:	4b47      	ldr	r3, [pc, #284]	; (419590 <keyboard_init+0x1e4>)
  419472:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  419474:	4b44      	ldr	r3, [pc, #272]	; (419588 <keyboard_init+0x1dc>)
  419476:	681c      	ldr	r4, [r3, #0]
  419478:	346c      	adds	r4, #108	; 0x6c
  41947a:	2000      	movs	r0, #0
  41947c:	4b45      	ldr	r3, [pc, #276]	; (419594 <keyboard_init+0x1e8>)
  41947e:	4798      	blx	r3
  419480:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419484:	3050      	adds	r0, #80	; 0x50
  419486:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41948a:	da53      	bge.n	419534 <keyboard_init+0x188>
  41948c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41948e:	2110      	movs	r1, #16
  419490:	4620      	mov	r0, r4
  419492:	4b3f      	ldr	r3, [pc, #252]	; (419590 <keyboard_init+0x1e4>)
  419494:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419496:	4b3c      	ldr	r3, [pc, #240]	; (419588 <keyboard_init+0x1dc>)
  419498:	681c      	ldr	r4, [r3, #0]
  41949a:	346c      	adds	r4, #108	; 0x6c
  41949c:	2000      	movs	r0, #0
  41949e:	4b3d      	ldr	r3, [pc, #244]	; (419594 <keyboard_init+0x1e8>)
  4194a0:	4798      	blx	r3
  4194a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4194a6:	3050      	adds	r0, #80	; 0x50
  4194a8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194ac:	da50      	bge.n	419550 <keyboard_init+0x1a4>
  4194ae:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4194b0:	2111      	movs	r1, #17
  4194b2:	4620      	mov	r0, r4
  4194b4:	4b36      	ldr	r3, [pc, #216]	; (419590 <keyboard_init+0x1e4>)
  4194b6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  4194b8:	4b33      	ldr	r3, [pc, #204]	; (419588 <keyboard_init+0x1dc>)
  4194ba:	681c      	ldr	r4, [r3, #0]
  4194bc:	346c      	adds	r4, #108	; 0x6c
  4194be:	2000      	movs	r0, #0
  4194c0:	4b34      	ldr	r3, [pc, #208]	; (419594 <keyboard_init+0x1e8>)
  4194c2:	4798      	blx	r3
  4194c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4194c8:	3050      	adds	r0, #80	; 0x50
  4194ca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194ce:	da4d      	bge.n	41956c <keyboard_init+0x1c0>
  4194d0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4194d2:	2114      	movs	r1, #20
  4194d4:	4620      	mov	r0, r4
  4194d6:	4b2e      	ldr	r3, [pc, #184]	; (419590 <keyboard_init+0x1e4>)
  4194d8:	4798      	blx	r3
  4194da:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  4194dc:	2000      	movs	r0, #0
  4194de:	4b2d      	ldr	r3, [pc, #180]	; (419594 <keyboard_init+0x1e8>)
  4194e0:	4798      	blx	r3
  4194e2:	3014      	adds	r0, #20
  4194e4:	0080      	lsls	r0, r0, #2
  4194e6:	4b2e      	ldr	r3, [pc, #184]	; (4195a0 <keyboard_init+0x1f4>)
  4194e8:	fb83 2300 	smull	r2, r3, r3, r0
  4194ec:	17c2      	asrs	r2, r0, #31
  4194ee:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4194f2:	b212      	sxth	r2, r2
  4194f4:	e772      	b.n	4193dc <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  4194f6:	f04f 0200 	mov.w	r2, #0
  4194fa:	e78f      	b.n	41941c <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  4194fc:	2000      	movs	r0, #0
  4194fe:	4b25      	ldr	r3, [pc, #148]	; (419594 <keyboard_init+0x1e8>)
  419500:	4798      	blx	r3
  419502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419506:	3050      	adds	r0, #80	; 0x50
  419508:	4b25      	ldr	r3, [pc, #148]	; (4195a0 <keyboard_init+0x1f4>)
  41950a:	fb83 2300 	smull	r2, r3, r3, r0
  41950e:	17c2      	asrs	r2, r0, #31
  419510:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419514:	b212      	sxth	r2, r2
  419516:	e798      	b.n	41944a <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419518:	2000      	movs	r0, #0
  41951a:	4b1e      	ldr	r3, [pc, #120]	; (419594 <keyboard_init+0x1e8>)
  41951c:	4798      	blx	r3
  41951e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419522:	3050      	adds	r0, #80	; 0x50
  419524:	4b1e      	ldr	r3, [pc, #120]	; (4195a0 <keyboard_init+0x1f4>)
  419526:	fb83 2300 	smull	r2, r3, r3, r0
  41952a:	17c2      	asrs	r2, r0, #31
  41952c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419530:	b212      	sxth	r2, r2
  419532:	e79b      	b.n	41946c <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  419534:	2000      	movs	r0, #0
  419536:	4b17      	ldr	r3, [pc, #92]	; (419594 <keyboard_init+0x1e8>)
  419538:	4798      	blx	r3
  41953a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41953e:	3050      	adds	r0, #80	; 0x50
  419540:	4b17      	ldr	r3, [pc, #92]	; (4195a0 <keyboard_init+0x1f4>)
  419542:	fb83 2300 	smull	r2, r3, r3, r0
  419546:	17c2      	asrs	r2, r0, #31
  419548:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41954c:	b212      	sxth	r2, r2
  41954e:	e79e      	b.n	41948e <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419550:	2000      	movs	r0, #0
  419552:	4b10      	ldr	r3, [pc, #64]	; (419594 <keyboard_init+0x1e8>)
  419554:	4798      	blx	r3
  419556:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41955a:	3050      	adds	r0, #80	; 0x50
  41955c:	4b10      	ldr	r3, [pc, #64]	; (4195a0 <keyboard_init+0x1f4>)
  41955e:	fb83 2300 	smull	r2, r3, r3, r0
  419562:	17c2      	asrs	r2, r0, #31
  419564:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419568:	b212      	sxth	r2, r2
  41956a:	e7a1      	b.n	4194b0 <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  41956c:	2000      	movs	r0, #0
  41956e:	4b09      	ldr	r3, [pc, #36]	; (419594 <keyboard_init+0x1e8>)
  419570:	4798      	blx	r3
  419572:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419576:	3050      	adds	r0, #80	; 0x50
  419578:	4b09      	ldr	r3, [pc, #36]	; (4195a0 <keyboard_init+0x1f4>)
  41957a:	fb83 2300 	smull	r2, r3, r3, r0
  41957e:	17c2      	asrs	r2, r0, #31
  419580:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419584:	b212      	sxth	r2, r2
  419586:	e7a4      	b.n	4194d2 <keyboard_init+0x126>
  419588:	20414798 	.word	0x20414798
  41958c:	00417515 	.word	0x00417515
  419590:	00409a6d 	.word	0x00409a6d
  419594:	0041445d 	.word	0x0041445d
  419598:	2041479c 	.word	0x2041479c
  41959c:	00409bfd 	.word	0x00409bfd
  4195a0:	66666667 	.word	0x66666667

004195a4 <msgbox_init>:
{
  4195a4:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  4195a6:	4c20      	ldr	r4, [pc, #128]	; (419628 <msgbox_init+0x84>)
  4195a8:	6820      	ldr	r0, [r4, #0]
  4195aa:	3080      	adds	r0, #128	; 0x80
  4195ac:	4b1f      	ldr	r3, [pc, #124]	; (41962c <msgbox_init+0x88>)
  4195ae:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  4195b0:	6824      	ldr	r4, [r4, #0]
  4195b2:	3480      	adds	r4, #128	; 0x80
  4195b4:	2000      	movs	r0, #0
  4195b6:	4b1e      	ldr	r3, [pc, #120]	; (419630 <msgbox_init+0x8c>)
  4195b8:	4798      	blx	r3
  4195ba:	2332      	movs	r3, #50	; 0x32
  4195bc:	fb03 f000 	mul.w	r0, r3, r0
  4195c0:	3050      	adds	r0, #80	; 0x50
  4195c2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4195c6:	da1d      	bge.n	419604 <msgbox_init+0x60>
  4195c8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  4195ca:	2150      	movs	r1, #80	; 0x50
  4195cc:	4620      	mov	r0, r4
  4195ce:	4b19      	ldr	r3, [pc, #100]	; (419634 <msgbox_init+0x90>)
  4195d0:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  4195d2:	4b15      	ldr	r3, [pc, #84]	; (419628 <msgbox_init+0x84>)
  4195d4:	6818      	ldr	r0, [r3, #0]
  4195d6:	3080      	adds	r0, #128	; 0x80
  4195d8:	4b17      	ldr	r3, [pc, #92]	; (419638 <msgbox_init+0x94>)
  4195da:	6a1b      	ldr	r3, [r3, #32]
  4195dc:	f013 0f02 	tst.w	r3, #2
  4195e0:	d11f      	bne.n	419622 <msgbox_init+0x7e>
  4195e2:	f04f 0200 	mov.w	r2, #0
  4195e6:	2304      	movs	r3, #4
  4195e8:	f363 0202 	bfi	r2, r3, #0, #3
  4195ec:	2313      	movs	r3, #19
  4195ee:	f363 02c7 	bfi	r2, r3, #3, #5
  4195f2:	f363 220c 	bfi	r2, r3, #8, #5
  4195f6:	2306      	movs	r3, #6
  4195f8:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  4195fc:	2159      	movs	r1, #89	; 0x59
  4195fe:	4b0f      	ldr	r3, [pc, #60]	; (41963c <msgbox_init+0x98>)
  419600:	4798      	blx	r3
  419602:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  419604:	2000      	movs	r0, #0
  419606:	4b0a      	ldr	r3, [pc, #40]	; (419630 <msgbox_init+0x8c>)
  419608:	4798      	blx	r3
  41960a:	2232      	movs	r2, #50	; 0x32
  41960c:	fb02 f000 	mul.w	r0, r2, r0
  419610:	3050      	adds	r0, #80	; 0x50
  419612:	4b0b      	ldr	r3, [pc, #44]	; (419640 <msgbox_init+0x9c>)
  419614:	fb83 2300 	smull	r2, r3, r3, r0
  419618:	17c2      	asrs	r2, r0, #31
  41961a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41961e:	b212      	sxth	r2, r2
  419620:	e7d3      	b.n	4195ca <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  419622:	4b08      	ldr	r3, [pc, #32]	; (419644 <msgbox_init+0xa0>)
  419624:	891a      	ldrh	r2, [r3, #8]
  419626:	e7e9      	b.n	4195fc <msgbox_init+0x58>
  419628:	20414798 	.word	0x20414798
  41962c:	00417515 	.word	0x00417515
  419630:	0041445d 	.word	0x0041445d
  419634:	00409a6d 	.word	0x00409a6d
  419638:	2041479c 	.word	0x2041479c
  41963c:	00409bfd 	.word	0x00409bfd
  419640:	66666667 	.word	0x66666667
  419644:	00426d08 	.word	0x00426d08

00419648 <page_init>:
{
  419648:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  41964a:	4c5a      	ldr	r4, [pc, #360]	; (4197b4 <page_init+0x16c>)
  41964c:	6820      	ldr	r0, [r4, #0]
  41964e:	3084      	adds	r0, #132	; 0x84
  419650:	4b59      	ldr	r3, [pc, #356]	; (4197b8 <page_init+0x170>)
  419652:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  419654:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419656:	22ff      	movs	r2, #255	; 0xff
  419658:	212c      	movs	r1, #44	; 0x2c
  41965a:	3084      	adds	r0, #132	; 0x84
  41965c:	4b57      	ldr	r3, [pc, #348]	; (4197bc <page_init+0x174>)
  41965e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  419660:	6820      	ldr	r0, [r4, #0]
  419662:	3084      	adds	r0, #132	; 0x84
  419664:	4b56      	ldr	r3, [pc, #344]	; (4197c0 <page_init+0x178>)
  419666:	6a1b      	ldr	r3, [r3, #32]
  419668:	f013 0f02 	tst.w	r3, #2
  41966c:	d068      	beq.n	419740 <page_init+0xf8>
  41966e:	f04f 0200 	mov.w	r2, #0
  419672:	2306      	movs	r3, #6
  419674:	f363 0202 	bfi	r2, r3, #0, #3
  419678:	2319      	movs	r3, #25
  41967a:	f363 02c7 	bfi	r2, r3, #3, #5
  41967e:	231a      	movs	r3, #26
  419680:	f363 220c 	bfi	r2, r3, #8, #5
  419684:	2303      	movs	r3, #3
  419686:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41968a:	2129      	movs	r1, #41	; 0x29
  41968c:	4b4d      	ldr	r3, [pc, #308]	; (4197c4 <page_init+0x17c>)
  41968e:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419690:	4c48      	ldr	r4, [pc, #288]	; (4197b4 <page_init+0x16c>)
  419692:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419694:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419698:	2101      	movs	r1, #1
  41969a:	3084      	adds	r0, #132	; 0x84
  41969c:	4b4a      	ldr	r3, [pc, #296]	; (4197c8 <page_init+0x180>)
  41969e:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  4196a0:	6824      	ldr	r4, [r4, #0]
  4196a2:	3484      	adds	r4, #132	; 0x84
  4196a4:	2000      	movs	r0, #0
  4196a6:	4b49      	ldr	r3, [pc, #292]	; (4197cc <page_init+0x184>)
  4196a8:	4798      	blx	r3
  4196aa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4196ae:	3050      	adds	r0, #80	; 0x50
  4196b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4196b4:	da54      	bge.n	419760 <page_init+0x118>
  4196b6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4196b8:	2103      	movs	r1, #3
  4196ba:	4620      	mov	r0, r4
  4196bc:	4b42      	ldr	r3, [pc, #264]	; (4197c8 <page_init+0x180>)
  4196be:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  4196c0:	4b3c      	ldr	r3, [pc, #240]	; (4197b4 <page_init+0x16c>)
  4196c2:	681c      	ldr	r4, [r3, #0]
  4196c4:	3484      	adds	r4, #132	; 0x84
  4196c6:	2000      	movs	r0, #0
  4196c8:	4b40      	ldr	r3, [pc, #256]	; (4197cc <page_init+0x184>)
  4196ca:	4798      	blx	r3
  4196cc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4196d0:	3050      	adds	r0, #80	; 0x50
  4196d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4196d6:	da51      	bge.n	41977c <page_init+0x134>
  4196d8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4196da:	2113      	movs	r1, #19
  4196dc:	4620      	mov	r0, r4
  4196de:	4b3a      	ldr	r3, [pc, #232]	; (4197c8 <page_init+0x180>)
  4196e0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  4196e2:	4b34      	ldr	r3, [pc, #208]	; (4197b4 <page_init+0x16c>)
  4196e4:	681c      	ldr	r4, [r3, #0]
  4196e6:	3484      	adds	r4, #132	; 0x84
  4196e8:	2000      	movs	r0, #0
  4196ea:	4b38      	ldr	r3, [pc, #224]	; (4197cc <page_init+0x184>)
  4196ec:	4798      	blx	r3
  4196ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4196f2:	3050      	adds	r0, #80	; 0x50
  4196f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4196f8:	da4e      	bge.n	419798 <page_init+0x150>
  4196fa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4196fc:	2111      	movs	r1, #17
  4196fe:	4620      	mov	r0, r4
  419700:	4b31      	ldr	r3, [pc, #196]	; (4197c8 <page_init+0x180>)
  419702:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  419704:	4c2b      	ldr	r4, [pc, #172]	; (4197b4 <page_init+0x16c>)
  419706:	6820      	ldr	r0, [r4, #0]
  419708:	3088      	adds	r0, #136	; 0x88
  41970a:	4b2b      	ldr	r3, [pc, #172]	; (4197b8 <page_init+0x170>)
  41970c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  41970e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419710:	22ff      	movs	r2, #255	; 0xff
  419712:	212c      	movs	r1, #44	; 0x2c
  419714:	3088      	adds	r0, #136	; 0x88
  419716:	4b29      	ldr	r3, [pc, #164]	; (4197bc <page_init+0x174>)
  419718:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  41971a:	6820      	ldr	r0, [r4, #0]
  41971c:	f04f 0200 	mov.w	r2, #0
  419720:	2304      	movs	r3, #4
  419722:	f363 0202 	bfi	r2, r3, #0, #3
  419726:	2311      	movs	r3, #17
  419728:	f363 02c7 	bfi	r2, r3, #3, #5
  41972c:	f363 220c 	bfi	r2, r3, #8, #5
  419730:	2302      	movs	r3, #2
  419732:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419736:	2129      	movs	r1, #41	; 0x29
  419738:	3088      	adds	r0, #136	; 0x88
  41973a:	4b22      	ldr	r3, [pc, #136]	; (4197c4 <page_init+0x17c>)
  41973c:	4798      	blx	r3
  41973e:	bd10      	pop	{r4, pc}
  419740:	f04f 0200 	mov.w	r2, #0
  419744:	2303      	movs	r3, #3
  419746:	f363 0202 	bfi	r2, r3, #0, #3
  41974a:	230e      	movs	r3, #14
  41974c:	f363 02c7 	bfi	r2, r3, #3, #5
  419750:	2310      	movs	r3, #16
  419752:	f363 220c 	bfi	r2, r3, #8, #5
  419756:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41975a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41975e:	e794      	b.n	41968a <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  419760:	2000      	movs	r0, #0
  419762:	4b1a      	ldr	r3, [pc, #104]	; (4197cc <page_init+0x184>)
  419764:	4798      	blx	r3
  419766:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41976a:	3050      	adds	r0, #80	; 0x50
  41976c:	4b18      	ldr	r3, [pc, #96]	; (4197d0 <page_init+0x188>)
  41976e:	fb83 2300 	smull	r2, r3, r3, r0
  419772:	17c2      	asrs	r2, r0, #31
  419774:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419778:	b212      	sxth	r2, r2
  41977a:	e79d      	b.n	4196b8 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  41977c:	2000      	movs	r0, #0
  41977e:	4b13      	ldr	r3, [pc, #76]	; (4197cc <page_init+0x184>)
  419780:	4798      	blx	r3
  419782:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419786:	3050      	adds	r0, #80	; 0x50
  419788:	4b11      	ldr	r3, [pc, #68]	; (4197d0 <page_init+0x188>)
  41978a:	fb83 2300 	smull	r2, r3, r3, r0
  41978e:	17c2      	asrs	r2, r0, #31
  419790:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419794:	b212      	sxth	r2, r2
  419796:	e7a0      	b.n	4196da <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  419798:	2000      	movs	r0, #0
  41979a:	4b0c      	ldr	r3, [pc, #48]	; (4197cc <page_init+0x184>)
  41979c:	4798      	blx	r3
  41979e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  4197a2:	3050      	adds	r0, #80	; 0x50
  4197a4:	4b0a      	ldr	r3, [pc, #40]	; (4197d0 <page_init+0x188>)
  4197a6:	fb83 2300 	smull	r2, r3, r3, r0
  4197aa:	17c2      	asrs	r2, r0, #31
  4197ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4197b0:	b212      	sxth	r2, r2
  4197b2:	e7a3      	b.n	4196fc <page_init+0xb4>
  4197b4:	20414798 	.word	0x20414798
  4197b8:	00417515 	.word	0x00417515
  4197bc:	00409d8d 	.word	0x00409d8d
  4197c0:	2041479c 	.word	0x2041479c
  4197c4:	00409bfd 	.word	0x00409bfd
  4197c8:	00409a6d 	.word	0x00409a6d
  4197cc:	0041445d 	.word	0x0041445d
  4197d0:	66666667 	.word	0x66666667

004197d4 <textarea_init>:
{
  4197d4:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  4197d6:	4c4a      	ldr	r4, [pc, #296]	; (419900 <textarea_init+0x12c>)
  4197d8:	6820      	ldr	r0, [r4, #0]
  4197da:	30b8      	adds	r0, #184	; 0xb8
  4197dc:	4b49      	ldr	r3, [pc, #292]	; (419904 <textarea_init+0x130>)
  4197de:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  4197e0:	6820      	ldr	r0, [r4, #0]
  4197e2:	30b8      	adds	r0, #184	; 0xb8
  4197e4:	4b48      	ldr	r3, [pc, #288]	; (419908 <textarea_init+0x134>)
  4197e6:	6a1b      	ldr	r3, [r3, #32]
  4197e8:	f013 0f02 	tst.w	r3, #2
  4197ec:	d052      	beq.n	419894 <textarea_init+0xc0>
  4197ee:	f04f 0200 	mov.w	r2, #0
  4197f2:	2302      	movs	r3, #2
  4197f4:	f363 0202 	bfi	r2, r3, #0, #3
  4197f8:	2306      	movs	r3, #6
  4197fa:	f363 02c7 	bfi	r2, r3, #3, #5
  4197fe:	2309      	movs	r3, #9
  419800:	f363 220c 	bfi	r2, r3, #8, #5
  419804:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419808:	2139      	movs	r1, #57	; 0x39
  41980a:	4b40      	ldr	r3, [pc, #256]	; (41990c <textarea_init+0x138>)
  41980c:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  41980e:	4b3c      	ldr	r3, [pc, #240]	; (419900 <textarea_init+0x12c>)
  419810:	681c      	ldr	r4, [r3, #0]
  419812:	34b8      	adds	r4, #184	; 0xb8
  419814:	2000      	movs	r0, #0
  419816:	4b3e      	ldr	r3, [pc, #248]	; (419910 <textarea_init+0x13c>)
  419818:	4798      	blx	r3
  41981a:	3028      	adds	r0, #40	; 0x28
  41981c:	0040      	lsls	r0, r0, #1
  41981e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419822:	da46      	bge.n	4198b2 <textarea_init+0xde>
  419824:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419826:	2130      	movs	r1, #48	; 0x30
  419828:	4620      	mov	r0, r4
  41982a:	4b3a      	ldr	r3, [pc, #232]	; (419914 <textarea_init+0x140>)
  41982c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  41982e:	4b34      	ldr	r3, [pc, #208]	; (419900 <textarea_init+0x12c>)
  419830:	681c      	ldr	r4, [r3, #0]
  419832:	34b8      	adds	r4, #184	; 0xb8
  419834:	2000      	movs	r0, #0
  419836:	4b36      	ldr	r3, [pc, #216]	; (419910 <textarea_init+0x13c>)
  419838:	4798      	blx	r3
  41983a:	3050      	adds	r0, #80	; 0x50
  41983c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419840:	da44      	bge.n	4198cc <textarea_init+0xf8>
  419842:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419844:	2112      	movs	r1, #18
  419846:	4620      	mov	r0, r4
  419848:	4d32      	ldr	r5, [pc, #200]	; (419914 <textarea_init+0x140>)
  41984a:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  41984c:	4c2c      	ldr	r4, [pc, #176]	; (419900 <textarea_init+0x12c>)
  41984e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419850:	2204      	movs	r2, #4
  419852:	2131      	movs	r1, #49	; 0x31
  419854:	30b8      	adds	r0, #184	; 0xb8
  419856:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  419858:	6820      	ldr	r0, [r4, #0]
  41985a:	30bc      	adds	r0, #188	; 0xbc
  41985c:	4b29      	ldr	r3, [pc, #164]	; (419904 <textarea_init+0x130>)
  41985e:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  419860:	6820      	ldr	r0, [r4, #0]
  419862:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  419864:	4b28      	ldr	r3, [pc, #160]	; (419908 <textarea_init+0x134>)
  419866:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  419868:	f013 0f02 	tst.w	r3, #2
  41986c:	d13a      	bne.n	4198e4 <textarea_init+0x110>
  41986e:	f04f 0200 	mov.w	r2, #0
  419872:	2305      	movs	r3, #5
  419874:	f363 0202 	bfi	r2, r3, #0, #3
  419878:	2314      	movs	r3, #20
  41987a:	f363 02c7 	bfi	r2, r3, #3, #5
  41987e:	2317      	movs	r3, #23
  419880:	f363 220c 	bfi	r2, r3, #8, #5
  419884:	2303      	movs	r3, #3
  419886:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41988a:	f248 0189 	movw	r1, #32905	; 0x8089
  41988e:	4b1f      	ldr	r3, [pc, #124]	; (41990c <textarea_init+0x138>)
  419890:	4798      	blx	r3
  419892:	bd38      	pop	{r3, r4, r5, pc}
  419894:	f04f 0200 	mov.w	r2, #0
  419898:	2305      	movs	r3, #5
  41989a:	f363 0202 	bfi	r2, r3, #0, #3
  41989e:	2314      	movs	r3, #20
  4198a0:	f363 02c7 	bfi	r2, r3, #3, #5
  4198a4:	2315      	movs	r3, #21
  4198a6:	f363 220c 	bfi	r2, r3, #8, #5
  4198aa:	2302      	movs	r3, #2
  4198ac:	f363 324f 	bfi	r2, r3, #13, #3
  4198b0:	e7aa      	b.n	419808 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  4198b2:	2000      	movs	r0, #0
  4198b4:	4b16      	ldr	r3, [pc, #88]	; (419910 <textarea_init+0x13c>)
  4198b6:	4798      	blx	r3
  4198b8:	3028      	adds	r0, #40	; 0x28
  4198ba:	0040      	lsls	r0, r0, #1
  4198bc:	4b16      	ldr	r3, [pc, #88]	; (419918 <textarea_init+0x144>)
  4198be:	fb83 2300 	smull	r2, r3, r3, r0
  4198c2:	17c2      	asrs	r2, r0, #31
  4198c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198c8:	b212      	sxth	r2, r2
  4198ca:	e7ac      	b.n	419826 <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  4198cc:	2000      	movs	r0, #0
  4198ce:	4b10      	ldr	r3, [pc, #64]	; (419910 <textarea_init+0x13c>)
  4198d0:	4798      	blx	r3
  4198d2:	3050      	adds	r0, #80	; 0x50
  4198d4:	4b10      	ldr	r3, [pc, #64]	; (419918 <textarea_init+0x144>)
  4198d6:	fb83 2300 	smull	r2, r3, r3, r0
  4198da:	17c2      	asrs	r2, r0, #31
  4198dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198e0:	b212      	sxth	r2, r2
  4198e2:	e7af      	b.n	419844 <textarea_init+0x70>
  4198e4:	f04f 0200 	mov.w	r2, #0
  4198e8:	2305      	movs	r3, #5
  4198ea:	f363 0202 	bfi	r2, r3, #0, #3
  4198ee:	2315      	movs	r3, #21
  4198f0:	f363 02c7 	bfi	r2, r3, #3, #5
  4198f4:	f363 220c 	bfi	r2, r3, #8, #5
  4198f8:	2302      	movs	r3, #2
  4198fa:	f363 324f 	bfi	r2, r3, #13, #3
  4198fe:	e7c4      	b.n	41988a <textarea_init+0xb6>
  419900:	20414798 	.word	0x20414798
  419904:	00417515 	.word	0x00417515
  419908:	2041479c 	.word	0x2041479c
  41990c:	00409bfd 	.word	0x00409bfd
  419910:	0041445d 	.word	0x0041445d
  419914:	00409a6d 	.word	0x00409a6d
  419918:	66666667 	.word	0x66666667

0041991c <spinbox_init>:
{
  41991c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  41991e:	4c2d      	ldr	r4, [pc, #180]	; (4199d4 <spinbox_init+0xb8>)
  419920:	6820      	ldr	r0, [r4, #0]
  419922:	309c      	adds	r0, #156	; 0x9c
  419924:	4b2c      	ldr	r3, [pc, #176]	; (4199d8 <spinbox_init+0xbc>)
  419926:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  419928:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41992a:	22ff      	movs	r2, #255	; 0xff
  41992c:	212c      	movs	r1, #44	; 0x2c
  41992e:	309c      	adds	r0, #156	; 0x9c
  419930:	4b2a      	ldr	r3, [pc, #168]	; (4199dc <spinbox_init+0xc0>)
  419932:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  419934:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419936:	4b2a      	ldr	r3, [pc, #168]	; (4199e0 <spinbox_init+0xc4>)
  419938:	899a      	ldrh	r2, [r3, #12]
  41993a:	2129      	movs	r1, #41	; 0x29
  41993c:	309c      	adds	r0, #156	; 0x9c
  41993e:	4d29      	ldr	r5, [pc, #164]	; (4199e4 <spinbox_init+0xc8>)
  419940:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419942:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419944:	4b28      	ldr	r3, [pc, #160]	; (4199e8 <spinbox_init+0xcc>)
  419946:	881a      	ldrh	r2, [r3, #0]
  419948:	f248 0189 	movw	r1, #32905	; 0x8089
  41994c:	309c      	adds	r0, #156	; 0x9c
  41994e:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419950:	6824      	ldr	r4, [r4, #0]
  419952:	349c      	adds	r4, #156	; 0x9c
  419954:	2000      	movs	r0, #0
  419956:	4b25      	ldr	r3, [pc, #148]	; (4199ec <spinbox_init+0xd0>)
  419958:	4798      	blx	r3
  41995a:	2364      	movs	r3, #100	; 0x64
  41995c:	fb03 f000 	mul.w	r0, r3, r0
  419960:	3050      	adds	r0, #80	; 0x50
  419962:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419966:	da17      	bge.n	419998 <spinbox_init+0x7c>
  419968:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41996a:	2110      	movs	r1, #16
  41996c:	4620      	mov	r0, r4
  41996e:	4b20      	ldr	r3, [pc, #128]	; (4199f0 <spinbox_init+0xd4>)
  419970:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419972:	4b18      	ldr	r3, [pc, #96]	; (4199d4 <spinbox_init+0xb8>)
  419974:	681c      	ldr	r4, [r3, #0]
  419976:	349c      	adds	r4, #156	; 0x9c
  419978:	2000      	movs	r0, #0
  41997a:	4b1c      	ldr	r3, [pc, #112]	; (4199ec <spinbox_init+0xd0>)
  41997c:	4798      	blx	r3
  41997e:	2364      	movs	r3, #100	; 0x64
  419980:	fb03 f000 	mul.w	r0, r3, r0
  419984:	3050      	adds	r0, #80	; 0x50
  419986:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41998a:	da14      	bge.n	4199b6 <spinbox_init+0x9a>
  41998c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41998e:	2111      	movs	r1, #17
  419990:	4620      	mov	r0, r4
  419992:	4b17      	ldr	r3, [pc, #92]	; (4199f0 <spinbox_init+0xd4>)
  419994:	4798      	blx	r3
  419996:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419998:	2000      	movs	r0, #0
  41999a:	4b14      	ldr	r3, [pc, #80]	; (4199ec <spinbox_init+0xd0>)
  41999c:	4798      	blx	r3
  41999e:	2264      	movs	r2, #100	; 0x64
  4199a0:	fb02 f000 	mul.w	r0, r2, r0
  4199a4:	3050      	adds	r0, #80	; 0x50
  4199a6:	4b13      	ldr	r3, [pc, #76]	; (4199f4 <spinbox_init+0xd8>)
  4199a8:	fb83 2300 	smull	r2, r3, r3, r0
  4199ac:	17c2      	asrs	r2, r0, #31
  4199ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4199b2:	b212      	sxth	r2, r2
  4199b4:	e7d9      	b.n	41996a <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  4199b6:	2000      	movs	r0, #0
  4199b8:	4b0c      	ldr	r3, [pc, #48]	; (4199ec <spinbox_init+0xd0>)
  4199ba:	4798      	blx	r3
  4199bc:	2264      	movs	r2, #100	; 0x64
  4199be:	fb02 f000 	mul.w	r0, r2, r0
  4199c2:	3050      	adds	r0, #80	; 0x50
  4199c4:	4b0b      	ldr	r3, [pc, #44]	; (4199f4 <spinbox_init+0xd8>)
  4199c6:	fb83 2300 	smull	r2, r3, r3, r0
  4199ca:	17c2      	asrs	r2, r0, #31
  4199cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4199d0:	b212      	sxth	r2, r2
  4199d2:	e7dc      	b.n	41998e <spinbox_init+0x72>
  4199d4:	20414798 	.word	0x20414798
  4199d8:	00417515 	.word	0x00417515
  4199dc:	00409d8d 	.word	0x00409d8d
  4199e0:	2041479c 	.word	0x2041479c
  4199e4:	00409bfd 	.word	0x00409bfd
  4199e8:	00426d08 	.word	0x00426d08
  4199ec:	0041445d 	.word	0x0041445d
  4199f0:	00409a6d 	.word	0x00409a6d
  4199f4:	66666667 	.word	0x66666667

004199f8 <list_init>:
{
  4199f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  4199fa:	4cbf      	ldr	r4, [pc, #764]	; (419cf8 <list_init+0x300>)
  4199fc:	6820      	ldr	r0, [r4, #0]
  4199fe:	3078      	adds	r0, #120	; 0x78
  419a00:	4ebe      	ldr	r6, [pc, #760]	; (419cfc <list_init+0x304>)
  419a02:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  419a04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  419a06:	2201      	movs	r2, #1
  419a08:	2102      	movs	r1, #2
  419a0a:	3078      	adds	r0, #120	; 0x78
  419a0c:	4dbc      	ldr	r5, [pc, #752]	; (419d00 <list_init+0x308>)
  419a0e:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419a10:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419a12:	2200      	movs	r2, #0
  419a14:	2112      	movs	r1, #18
  419a16:	3078      	adds	r0, #120	; 0x78
  419a18:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419a1a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419a1c:	2200      	movs	r2, #0
  419a1e:	2113      	movs	r1, #19
  419a20:	3078      	adds	r0, #120	; 0x78
  419a22:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419a24:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419a26:	2200      	movs	r2, #0
  419a28:	2110      	movs	r1, #16
  419a2a:	3078      	adds	r0, #120	; 0x78
  419a2c:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419a2e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419a30:	2200      	movs	r2, #0
  419a32:	2111      	movs	r1, #17
  419a34:	3078      	adds	r0, #120	; 0x78
  419a36:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419a38:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419a3a:	2200      	movs	r2, #0
  419a3c:	2114      	movs	r1, #20
  419a3e:	3078      	adds	r0, #120	; 0x78
  419a40:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  419a42:	6820      	ldr	r0, [r4, #0]
  419a44:	307c      	adds	r0, #124	; 0x7c
  419a46:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  419a48:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419a4a:	22ff      	movs	r2, #255	; 0xff
  419a4c:	212c      	movs	r1, #44	; 0x2c
  419a4e:	307c      	adds	r0, #124	; 0x7c
  419a50:	4bac      	ldr	r3, [pc, #688]	; (419d04 <list_init+0x30c>)
  419a52:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  419a54:	6820      	ldr	r0, [r4, #0]
  419a56:	307c      	adds	r0, #124	; 0x7c
  419a58:	4bab      	ldr	r3, [pc, #684]	; (419d08 <list_init+0x310>)
  419a5a:	6a1b      	ldr	r3, [r3, #32]
  419a5c:	f013 0f02 	tst.w	r3, #2
  419a60:	f000 8223 	beq.w	419eaa <list_init+0x4b2>
  419a64:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419a68:	2129      	movs	r1, #41	; 0x29
  419a6a:	4ba8      	ldr	r3, [pc, #672]	; (419d0c <list_init+0x314>)
  419a6c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  419a6e:	4ba2      	ldr	r3, [pc, #648]	; (419cf8 <list_init+0x300>)
  419a70:	6818      	ldr	r0, [r3, #0]
  419a72:	307c      	adds	r0, #124	; 0x7c
  419a74:	4ba4      	ldr	r3, [pc, #656]	; (419d08 <list_init+0x310>)
  419a76:	6a1b      	ldr	r3, [r3, #32]
  419a78:	f013 0f02 	tst.w	r3, #2
  419a7c:	f000 8223 	beq.w	419ec6 <list_init+0x4ce>
  419a80:	f04f 0207 	mov.w	r2, #7
  419a84:	231d      	movs	r3, #29
  419a86:	f363 02c7 	bfi	r2, r3, #3, #5
  419a8a:	f363 220c 	bfi	r2, r3, #8, #5
  419a8e:	2303      	movs	r3, #3
  419a90:	f363 324f 	bfi	r2, r3, #13, #3
  419a94:	f241 0129 	movw	r1, #4137	; 0x1029
  419a98:	4b9c      	ldr	r3, [pc, #624]	; (419d0c <list_init+0x314>)
  419a9a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  419a9c:	4b96      	ldr	r3, [pc, #600]	; (419cf8 <list_init+0x300>)
  419a9e:	6818      	ldr	r0, [r3, #0]
  419aa0:	307c      	adds	r0, #124	; 0x7c
  419aa2:	4b99      	ldr	r3, [pc, #612]	; (419d08 <list_init+0x310>)
  419aa4:	6a1b      	ldr	r3, [r3, #32]
  419aa6:	f013 0f02 	tst.w	r3, #2
  419aaa:	f000 821b 	beq.w	419ee4 <list_init+0x4ec>
  419aae:	f04f 32ff 	mov.w	r2, #4294967295
  419ab2:	f242 0129 	movw	r1, #8233	; 0x2029
  419ab6:	4d95      	ldr	r5, [pc, #596]	; (419d0c <list_init+0x314>)
  419ab8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  419aba:	4c8f      	ldr	r4, [pc, #572]	; (419cf8 <list_init+0x300>)
  419abc:	6820      	ldr	r0, [r4, #0]
  419abe:	4f92      	ldr	r7, [pc, #584]	; (419d08 <list_init+0x310>)
  419ac0:	89ba      	ldrh	r2, [r7, #12]
  419ac2:	f240 1129 	movw	r1, #297	; 0x129
  419ac6:	307c      	adds	r0, #124	; 0x7c
  419ac8:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  419aca:	6826      	ldr	r6, [r4, #0]
  419acc:	367c      	adds	r6, #124	; 0x7c
  419ace:	2133      	movs	r1, #51	; 0x33
  419ad0:	89b8      	ldrh	r0, [r7, #12]
  419ad2:	4b8f      	ldr	r3, [pc, #572]	; (419d10 <list_init+0x318>)
  419ad4:	4798      	blx	r3
  419ad6:	4602      	mov	r2, r0
  419ad8:	f241 1129 	movw	r1, #4393	; 0x1129
  419adc:	4630      	mov	r0, r6
  419ade:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419ae0:	6820      	ldr	r0, [r4, #0]
  419ae2:	307c      	adds	r0, #124	; 0x7c
  419ae4:	6a3b      	ldr	r3, [r7, #32]
  419ae6:	f013 0f02 	tst.w	r3, #2
  419aea:	f000 8209 	beq.w	419f00 <list_init+0x508>
  419aee:	f04f 0200 	mov.w	r2, #0
  419af2:	2301      	movs	r3, #1
  419af4:	f363 0202 	bfi	r2, r3, #0, #3
  419af8:	2307      	movs	r3, #7
  419afa:	f363 02c7 	bfi	r2, r3, #3, #5
  419afe:	2308      	movs	r3, #8
  419b00:	f363 220c 	bfi	r2, r3, #8, #5
  419b04:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419b08:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419b0c:	f248 0189 	movw	r1, #32905	; 0x8089
  419b10:	4b7e      	ldr	r3, [pc, #504]	; (419d0c <list_init+0x314>)
  419b12:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  419b14:	4b78      	ldr	r3, [pc, #480]	; (419cf8 <list_init+0x300>)
  419b16:	6818      	ldr	r0, [r3, #0]
  419b18:	307c      	adds	r0, #124	; 0x7c
  419b1a:	4b7b      	ldr	r3, [pc, #492]	; (419d08 <list_init+0x310>)
  419b1c:	6a1b      	ldr	r3, [r3, #32]
  419b1e:	f013 0f02 	tst.w	r3, #2
  419b22:	f000 81f0 	beq.w	419f06 <list_init+0x50e>
  419b26:	f04f 32ff 	mov.w	r2, #4294967295
  419b2a:	f248 1189 	movw	r1, #33161	; 0x8189
  419b2e:	4b77      	ldr	r3, [pc, #476]	; (419d0c <list_init+0x314>)
  419b30:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  419b32:	4b71      	ldr	r3, [pc, #452]	; (419cf8 <list_init+0x300>)
  419b34:	6818      	ldr	r0, [r3, #0]
  419b36:	307c      	adds	r0, #124	; 0x7c
  419b38:	4b73      	ldr	r3, [pc, #460]	; (419d08 <list_init+0x310>)
  419b3a:	6a1b      	ldr	r3, [r3, #32]
  419b3c:	f013 0f02 	tst.w	r3, #2
  419b40:	f000 81e4 	beq.w	419f0c <list_init+0x514>
  419b44:	f04f 0200 	mov.w	r2, #0
  419b48:	2305      	movs	r3, #5
  419b4a:	f363 0202 	bfi	r2, r3, #0, #3
  419b4e:	2315      	movs	r3, #21
  419b50:	f363 02c7 	bfi	r2, r3, #3, #5
  419b54:	f363 220c 	bfi	r2, r3, #8, #5
  419b58:	2302      	movs	r3, #2
  419b5a:	f363 324f 	bfi	r2, r3, #13, #3
  419b5e:	f24a 0189 	movw	r1, #41097	; 0xa089
  419b62:	4b6a      	ldr	r3, [pc, #424]	; (419d0c <list_init+0x314>)
  419b64:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419b66:	4b64      	ldr	r3, [pc, #400]	; (419cf8 <list_init+0x300>)
  419b68:	6818      	ldr	r0, [r3, #0]
  419b6a:	307c      	adds	r0, #124	; 0x7c
  419b6c:	4b66      	ldr	r3, [pc, #408]	; (419d08 <list_init+0x310>)
  419b6e:	6a1b      	ldr	r3, [r3, #32]
  419b70:	f013 0f02 	tst.w	r3, #2
  419b74:	f000 81d8 	beq.w	419f28 <list_init+0x530>
  419b78:	f04f 0200 	mov.w	r2, #0
  419b7c:	2301      	movs	r3, #1
  419b7e:	f363 0202 	bfi	r2, r3, #0, #3
  419b82:	2307      	movs	r3, #7
  419b84:	f363 02c7 	bfi	r2, r3, #3, #5
  419b88:	2308      	movs	r3, #8
  419b8a:	f363 220c 	bfi	r2, r3, #8, #5
  419b8e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419b92:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  419b96:	f248 01a9 	movw	r1, #32937	; 0x80a9
  419b9a:	4b5c      	ldr	r3, [pc, #368]	; (419d0c <list_init+0x314>)
  419b9c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  419b9e:	4b56      	ldr	r3, [pc, #344]	; (419cf8 <list_init+0x300>)
  419ba0:	6818      	ldr	r0, [r3, #0]
  419ba2:	307c      	adds	r0, #124	; 0x7c
  419ba4:	4b58      	ldr	r3, [pc, #352]	; (419d08 <list_init+0x310>)
  419ba6:	6a1b      	ldr	r3, [r3, #32]
  419ba8:	f013 0f02 	tst.w	r3, #2
  419bac:	f000 81bf 	beq.w	419f2e <list_init+0x536>
  419bb0:	f04f 32ff 	mov.w	r2, #4294967295
  419bb4:	f248 11a9 	movw	r1, #33193	; 0x81a9
  419bb8:	4b54      	ldr	r3, [pc, #336]	; (419d0c <list_init+0x314>)
  419bba:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  419bbc:	4b4e      	ldr	r3, [pc, #312]	; (419cf8 <list_init+0x300>)
  419bbe:	6818      	ldr	r0, [r3, #0]
  419bc0:	307c      	adds	r0, #124	; 0x7c
  419bc2:	4b51      	ldr	r3, [pc, #324]	; (419d08 <list_init+0x310>)
  419bc4:	6a1b      	ldr	r3, [r3, #32]
  419bc6:	f013 0f02 	tst.w	r3, #2
  419bca:	f000 81b3 	beq.w	419f34 <list_init+0x53c>
  419bce:	f04f 0200 	mov.w	r2, #0
  419bd2:	2305      	movs	r3, #5
  419bd4:	f363 0202 	bfi	r2, r3, #0, #3
  419bd8:	2315      	movs	r3, #21
  419bda:	f363 02c7 	bfi	r2, r3, #3, #5
  419bde:	f363 220c 	bfi	r2, r3, #8, #5
  419be2:	2302      	movs	r3, #2
  419be4:	f363 324f 	bfi	r2, r3, #13, #3
  419be8:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  419bec:	4b47      	ldr	r3, [pc, #284]	; (419d0c <list_init+0x314>)
  419bee:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  419bf0:	4c41      	ldr	r4, [pc, #260]	; (419cf8 <list_init+0x300>)
  419bf2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419bf4:	2201      	movs	r2, #1
  419bf6:	2131      	movs	r1, #49	; 0x31
  419bf8:	307c      	adds	r0, #124	; 0x7c
  419bfa:	4b41      	ldr	r3, [pc, #260]	; (419d00 <list_init+0x308>)
  419bfc:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  419bfe:	6820      	ldr	r0, [r4, #0]
  419c00:	307c      	adds	r0, #124	; 0x7c
  419c02:	4b41      	ldr	r3, [pc, #260]	; (419d08 <list_init+0x310>)
  419c04:	6a1b      	ldr	r3, [r3, #32]
  419c06:	f013 0f02 	tst.w	r3, #2
  419c0a:	f000 81a1 	beq.w	419f50 <list_init+0x558>
  419c0e:	f04f 0200 	mov.w	r2, #0
  419c12:	2306      	movs	r3, #6
  419c14:	f363 0202 	bfi	r2, r3, #0, #3
  419c18:	231a      	movs	r3, #26
  419c1a:	f363 02c7 	bfi	r2, r3, #3, #5
  419c1e:	231c      	movs	r3, #28
  419c20:	f363 220c 	bfi	r2, r3, #8, #5
  419c24:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419c28:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419c2c:	2139      	movs	r1, #57	; 0x39
  419c2e:	4d37      	ldr	r5, [pc, #220]	; (419d0c <list_init+0x314>)
  419c30:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  419c32:	4c31      	ldr	r4, [pc, #196]	; (419cf8 <list_init+0x300>)
  419c34:	6820      	ldr	r0, [r4, #0]
  419c36:	4e34      	ldr	r6, [pc, #208]	; (419d08 <list_init+0x310>)
  419c38:	89b2      	ldrh	r2, [r6, #12]
  419c3a:	f240 2139 	movw	r1, #569	; 0x239
  419c3e:	307c      	adds	r0, #124	; 0x7c
  419c40:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  419c42:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419c44:	2201      	movs	r2, #1
  419c46:	2130      	movs	r1, #48	; 0x30
  419c48:	307c      	adds	r0, #124	; 0x7c
  419c4a:	4b2d      	ldr	r3, [pc, #180]	; (419d00 <list_init+0x308>)
  419c4c:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  419c4e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  419c50:	89f2      	ldrh	r2, [r6, #14]
  419c52:	f240 2149 	movw	r1, #585	; 0x249
  419c56:	307c      	adds	r0, #124	; 0x7c
  419c58:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  419c5a:	6824      	ldr	r4, [r4, #0]
  419c5c:	347c      	adds	r4, #124	; 0x7c
  419c5e:	6a33      	ldr	r3, [r6, #32]
  419c60:	f013 0f20 	tst.w	r3, #32
  419c64:	f000 8183 	beq.w	419f6e <list_init+0x576>
  419c68:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  419c6a:	f44f 7110 	mov.w	r1, #576	; 0x240
  419c6e:	4620      	mov	r0, r4
  419c70:	4b23      	ldr	r3, [pc, #140]	; (419d00 <list_init+0x308>)
  419c72:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  419c74:	4b20      	ldr	r3, [pc, #128]	; (419cf8 <list_init+0x300>)
  419c76:	681c      	ldr	r4, [r3, #0]
  419c78:	347c      	adds	r4, #124	; 0x7c
  419c7a:	2000      	movs	r0, #0
  419c7c:	4b25      	ldr	r3, [pc, #148]	; (419d14 <list_init+0x31c>)
  419c7e:	4798      	blx	r3
  419c80:	3028      	adds	r0, #40	; 0x28
  419c82:	0040      	lsls	r0, r0, #1
  419c84:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419c88:	f280 8188 	bge.w	419f9c <list_init+0x5a4>
  419c8c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  419c90:	f240 2141 	movw	r1, #577	; 0x241
  419c94:	4620      	mov	r0, r4
  419c96:	4b1a      	ldr	r3, [pc, #104]	; (419d00 <list_init+0x308>)
  419c98:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419c9a:	4b17      	ldr	r3, [pc, #92]	; (419cf8 <list_init+0x300>)
  419c9c:	681c      	ldr	r4, [r3, #0]
  419c9e:	347c      	adds	r4, #124	; 0x7c
  419ca0:	2000      	movs	r0, #0
  419ca2:	4b1d      	ldr	r3, [pc, #116]	; (419d18 <list_init+0x320>)
  419ca4:	4798      	blx	r3
  419ca6:	2801      	cmp	r0, #1
  419ca8:	f240 8185 	bls.w	419fb6 <list_init+0x5be>
  419cac:	2000      	movs	r0, #0
  419cae:	4b19      	ldr	r3, [pc, #100]	; (419d14 <list_init+0x31c>)
  419cb0:	4798      	blx	r3
  419cb2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419cb6:	0040      	lsls	r0, r0, #1
  419cb8:	3050      	adds	r0, #80	; 0x50
  419cba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cbe:	f280 8193 	bge.w	419fe8 <list_init+0x5f0>
  419cc2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419cc4:	2112      	movs	r1, #18
  419cc6:	4620      	mov	r0, r4
  419cc8:	4b0d      	ldr	r3, [pc, #52]	; (419d00 <list_init+0x308>)
  419cca:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419ccc:	4b0a      	ldr	r3, [pc, #40]	; (419cf8 <list_init+0x300>)
  419cce:	681c      	ldr	r4, [r3, #0]
  419cd0:	347c      	adds	r4, #124	; 0x7c
  419cd2:	2000      	movs	r0, #0
  419cd4:	4b10      	ldr	r3, [pc, #64]	; (419d18 <list_init+0x320>)
  419cd6:	4798      	blx	r3
  419cd8:	2801      	cmp	r0, #1
  419cda:	f240 8194 	bls.w	41a006 <list_init+0x60e>
  419cde:	2000      	movs	r0, #0
  419ce0:	4b0c      	ldr	r3, [pc, #48]	; (419d14 <list_init+0x31c>)
  419ce2:	4798      	blx	r3
  419ce4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ce8:	0040      	lsls	r0, r0, #1
  419cea:	3050      	adds	r0, #80	; 0x50
  419cec:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cf0:	f280 81ac 	bge.w	41a04c <list_init+0x654>
  419cf4:	e012      	b.n	419d1c <list_init+0x324>
  419cf6:	bf00      	nop
  419cf8:	20414798 	.word	0x20414798
  419cfc:	00417515 	.word	0x00417515
  419d00:	00409a6d 	.word	0x00409a6d
  419d04:	00409d8d 	.word	0x00409d8d
  419d08:	2041479c 	.word	0x2041479c
  419d0c:	00409bfd 	.word	0x00409bfd
  419d10:	004154bd 	.word	0x004154bd
  419d14:	0041445d 	.word	0x0041445d
  419d18:	0041447d 	.word	0x0041447d
  419d1c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419d1e:	2113      	movs	r1, #19
  419d20:	4620      	mov	r0, r4
  419d22:	4bc5      	ldr	r3, [pc, #788]	; (41a038 <list_init+0x640>)
  419d24:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419d26:	4bc5      	ldr	r3, [pc, #788]	; (41a03c <list_init+0x644>)
  419d28:	681c      	ldr	r4, [r3, #0]
  419d2a:	347c      	adds	r4, #124	; 0x7c
  419d2c:	2000      	movs	r0, #0
  419d2e:	4bc4      	ldr	r3, [pc, #784]	; (41a040 <list_init+0x648>)
  419d30:	4798      	blx	r3
  419d32:	2801      	cmp	r0, #1
  419d34:	f240 8199 	bls.w	41a06a <list_init+0x672>
  419d38:	2000      	movs	r0, #0
  419d3a:	4bc2      	ldr	r3, [pc, #776]	; (41a044 <list_init+0x64c>)
  419d3c:	4798      	blx	r3
  419d3e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d42:	0040      	lsls	r0, r0, #1
  419d44:	3050      	adds	r0, #80	; 0x50
  419d46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d4a:	f280 81a7 	bge.w	41a09c <list_init+0x6a4>
  419d4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419d50:	2110      	movs	r1, #16
  419d52:	4620      	mov	r0, r4
  419d54:	4bb8      	ldr	r3, [pc, #736]	; (41a038 <list_init+0x640>)
  419d56:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419d58:	4bb8      	ldr	r3, [pc, #736]	; (41a03c <list_init+0x644>)
  419d5a:	681c      	ldr	r4, [r3, #0]
  419d5c:	347c      	adds	r4, #124	; 0x7c
  419d5e:	2000      	movs	r0, #0
  419d60:	4bb7      	ldr	r3, [pc, #732]	; (41a040 <list_init+0x648>)
  419d62:	4798      	blx	r3
  419d64:	2801      	cmp	r0, #1
  419d66:	f240 81a8 	bls.w	41a0ba <list_init+0x6c2>
  419d6a:	2000      	movs	r0, #0
  419d6c:	4bb5      	ldr	r3, [pc, #724]	; (41a044 <list_init+0x64c>)
  419d6e:	4798      	blx	r3
  419d70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419d74:	0040      	lsls	r0, r0, #1
  419d76:	3050      	adds	r0, #80	; 0x50
  419d78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419d7c:	f280 81b6 	bge.w	41a0ec <list_init+0x6f4>
  419d80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419d82:	2111      	movs	r1, #17
  419d84:	4620      	mov	r0, r4
  419d86:	4bac      	ldr	r3, [pc, #688]	; (41a038 <list_init+0x640>)
  419d88:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419d8a:	4bac      	ldr	r3, [pc, #688]	; (41a03c <list_init+0x644>)
  419d8c:	681c      	ldr	r4, [r3, #0]
  419d8e:	347c      	adds	r4, #124	; 0x7c
  419d90:	2000      	movs	r0, #0
  419d92:	4bab      	ldr	r3, [pc, #684]	; (41a040 <list_init+0x648>)
  419d94:	4798      	blx	r3
  419d96:	2801      	cmp	r0, #1
  419d98:	f240 81b7 	bls.w	41a10a <list_init+0x712>
  419d9c:	2000      	movs	r0, #0
  419d9e:	4ba9      	ldr	r3, [pc, #676]	; (41a044 <list_init+0x64c>)
  419da0:	4798      	blx	r3
  419da2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419da6:	0040      	lsls	r0, r0, #1
  419da8:	3050      	adds	r0, #80	; 0x50
  419daa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419dae:	f280 81c5 	bge.w	41a13c <list_init+0x744>
  419db2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419db4:	2114      	movs	r1, #20
  419db6:	4620      	mov	r0, r4
  419db8:	4b9f      	ldr	r3, [pc, #636]	; (41a038 <list_init+0x640>)
  419dba:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  419dbc:	4b9f      	ldr	r3, [pc, #636]	; (41a03c <list_init+0x644>)
  419dbe:	681c      	ldr	r4, [r3, #0]
  419dc0:	347c      	adds	r4, #124	; 0x7c
  419dc2:	2000      	movs	r0, #0
  419dc4:	4b9e      	ldr	r3, [pc, #632]	; (41a040 <list_init+0x648>)
  419dc6:	4798      	blx	r3
  419dc8:	2801      	cmp	r0, #1
  419dca:	f240 81c6 	bls.w	41a15a <list_init+0x762>
  419dce:	2000      	movs	r0, #0
  419dd0:	4b9c      	ldr	r3, [pc, #624]	; (41a044 <list_init+0x64c>)
  419dd2:	4798      	blx	r3
  419dd4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419dd8:	0040      	lsls	r0, r0, #1
  419dda:	3050      	adds	r0, #80	; 0x50
  419ddc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419de0:	f280 81d5 	bge.w	41a18e <list_init+0x796>
  419de4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  419de8:	2104      	movs	r1, #4
  419dea:	4620      	mov	r0, r4
  419dec:	4b92      	ldr	r3, [pc, #584]	; (41a038 <list_init+0x640>)
  419dee:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  419df0:	4b92      	ldr	r3, [pc, #584]	; (41a03c <list_init+0x644>)
  419df2:	681c      	ldr	r4, [r3, #0]
  419df4:	347c      	adds	r4, #124	; 0x7c
  419df6:	2000      	movs	r0, #0
  419df8:	4b92      	ldr	r3, [pc, #584]	; (41a044 <list_init+0x64c>)
  419dfa:	4798      	blx	r3
  419dfc:	3028      	adds	r0, #40	; 0x28
  419dfe:	0040      	lsls	r0, r0, #1
  419e00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e04:	f280 81d2 	bge.w	41a1ac <list_init+0x7b4>
  419e08:	f04f 32ff 	mov.w	r2, #4294967295
  419e0c:	f241 0104 	movw	r1, #4100	; 0x1004
  419e10:	4620      	mov	r0, r4
  419e12:	4b89      	ldr	r3, [pc, #548]	; (41a038 <list_init+0x640>)
  419e14:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  419e16:	4b89      	ldr	r3, [pc, #548]	; (41a03c <list_init+0x644>)
  419e18:	681c      	ldr	r4, [r3, #0]
  419e1a:	347c      	adds	r4, #124	; 0x7c
  419e1c:	2000      	movs	r0, #0
  419e1e:	4b89      	ldr	r3, [pc, #548]	; (41a044 <list_init+0x64c>)
  419e20:	4798      	blx	r3
  419e22:	3028      	adds	r0, #40	; 0x28
  419e24:	0040      	lsls	r0, r0, #1
  419e26:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e2a:	f280 81cc 	bge.w	41a1c6 <list_init+0x7ce>
  419e2e:	f04f 32ff 	mov.w	r2, #4294967295
  419e32:	f44f 7182 	mov.w	r1, #260	; 0x104
  419e36:	4620      	mov	r0, r4
  419e38:	4b7f      	ldr	r3, [pc, #508]	; (41a038 <list_init+0x640>)
  419e3a:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  419e3c:	4b7f      	ldr	r3, [pc, #508]	; (41a03c <list_init+0x644>)
  419e3e:	681c      	ldr	r4, [r3, #0]
  419e40:	347c      	adds	r4, #124	; 0x7c
  419e42:	2000      	movs	r0, #0
  419e44:	4b7f      	ldr	r3, [pc, #508]	; (41a044 <list_init+0x64c>)
  419e46:	4798      	blx	r3
  419e48:	3028      	adds	r0, #40	; 0x28
  419e4a:	0040      	lsls	r0, r0, #1
  419e4c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e50:	f280 81c6 	bge.w	41a1e0 <list_init+0x7e8>
  419e54:	f04f 32ff 	mov.w	r2, #4294967295
  419e58:	f242 0104 	movw	r1, #8196	; 0x2004
  419e5c:	4620      	mov	r0, r4
  419e5e:	4b76      	ldr	r3, [pc, #472]	; (41a038 <list_init+0x640>)
  419e60:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  419e62:	4b76      	ldr	r3, [pc, #472]	; (41a03c <list_init+0x644>)
  419e64:	681c      	ldr	r4, [r3, #0]
  419e66:	347c      	adds	r4, #124	; 0x7c
  419e68:	2000      	movs	r0, #0
  419e6a:	4b76      	ldr	r3, [pc, #472]	; (41a044 <list_init+0x64c>)
  419e6c:	4798      	blx	r3
  419e6e:	3028      	adds	r0, #40	; 0x28
  419e70:	0040      	lsls	r0, r0, #1
  419e72:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419e76:	f280 81c0 	bge.w	41a1fa <list_init+0x802>
  419e7a:	f04f 32ff 	mov.w	r2, #4294967295
  419e7e:	f44f 7101 	mov.w	r1, #516	; 0x204
  419e82:	4620      	mov	r0, r4
  419e84:	4c6c      	ldr	r4, [pc, #432]	; (41a038 <list_init+0x640>)
  419e86:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  419e88:	4d6c      	ldr	r5, [pc, #432]	; (41a03c <list_init+0x644>)
  419e8a:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  419e8c:	2200      	movs	r2, #0
  419e8e:	21b0      	movs	r1, #176	; 0xb0
  419e90:	307c      	adds	r0, #124	; 0x7c
  419e92:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  419e94:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  419e96:	2229      	movs	r2, #41	; 0x29
  419e98:	21b7      	movs	r1, #183	; 0xb7
  419e9a:	307c      	adds	r0, #124	; 0x7c
  419e9c:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  419e9e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  419ea0:	2204      	movs	r2, #4
  419ea2:	21b6      	movs	r1, #182	; 0xb6
  419ea4:	307c      	adds	r0, #124	; 0x7c
  419ea6:	47a0      	blx	r4
  419ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  419eaa:	f04f 0200 	mov.w	r2, #0
  419eae:	2303      	movs	r3, #3
  419eb0:	f363 0202 	bfi	r2, r3, #0, #3
  419eb4:	230b      	movs	r3, #11
  419eb6:	f363 02c7 	bfi	r2, r3, #3, #5
  419eba:	230e      	movs	r3, #14
  419ebc:	f363 220c 	bfi	r2, r3, #8, #5
  419ec0:	f36f 324f 	bfc	r2, #13, #3
  419ec4:	e5d0      	b.n	419a68 <list_init+0x70>
  419ec6:	f04f 0200 	mov.w	r2, #0
  419eca:	2302      	movs	r3, #2
  419ecc:	f363 0202 	bfi	r2, r3, #0, #3
  419ed0:	2309      	movs	r3, #9
  419ed2:	f363 02c7 	bfi	r2, r3, #3, #5
  419ed6:	230a      	movs	r3, #10
  419ed8:	f363 220c 	bfi	r2, r3, #8, #5
  419edc:	2303      	movs	r3, #3
  419ede:	f363 324f 	bfi	r2, r3, #13, #3
  419ee2:	e5d7      	b.n	419a94 <list_init+0x9c>
  419ee4:	f04f 0200 	mov.w	r2, #0
  419ee8:	2303      	movs	r3, #3
  419eea:	f363 0202 	bfi	r2, r3, #0, #3
  419eee:	230b      	movs	r3, #11
  419ef0:	f363 02c7 	bfi	r2, r3, #3, #5
  419ef4:	230e      	movs	r3, #14
  419ef6:	f363 220c 	bfi	r2, r3, #8, #5
  419efa:	f36f 324f 	bfc	r2, #13, #3
  419efe:	e5d8      	b.n	419ab2 <list_init+0xba>
  419f00:	f04f 32ff 	mov.w	r2, #4294967295
  419f04:	e602      	b.n	419b0c <list_init+0x114>
  419f06:	f04f 32ff 	mov.w	r2, #4294967295
  419f0a:	e60e      	b.n	419b2a <list_init+0x132>
  419f0c:	f04f 0200 	mov.w	r2, #0
  419f10:	2304      	movs	r3, #4
  419f12:	f363 0202 	bfi	r2, r3, #0, #3
  419f16:	2313      	movs	r3, #19
  419f18:	f363 02c7 	bfi	r2, r3, #3, #5
  419f1c:	f363 220c 	bfi	r2, r3, #8, #5
  419f20:	2306      	movs	r3, #6
  419f22:	f363 324f 	bfi	r2, r3, #13, #3
  419f26:	e61a      	b.n	419b5e <list_init+0x166>
  419f28:	f04f 32ff 	mov.w	r2, #4294967295
  419f2c:	e633      	b.n	419b96 <list_init+0x19e>
  419f2e:	f04f 32ff 	mov.w	r2, #4294967295
  419f32:	e63f      	b.n	419bb4 <list_init+0x1bc>
  419f34:	f04f 0200 	mov.w	r2, #0
  419f38:	2304      	movs	r3, #4
  419f3a:	f363 0202 	bfi	r2, r3, #0, #3
  419f3e:	2313      	movs	r3, #19
  419f40:	f363 02c7 	bfi	r2, r3, #3, #5
  419f44:	f363 220c 	bfi	r2, r3, #8, #5
  419f48:	2306      	movs	r3, #6
  419f4a:	f363 324f 	bfi	r2, r3, #13, #3
  419f4e:	e64b      	b.n	419be8 <list_init+0x1f0>
  419f50:	f04f 0200 	mov.w	r2, #0
  419f54:	2304      	movs	r3, #4
  419f56:	f363 0202 	bfi	r2, r3, #0, #3
  419f5a:	2310      	movs	r3, #16
  419f5c:	f363 02c7 	bfi	r2, r3, #3, #5
  419f60:	2312      	movs	r3, #18
  419f62:	f363 220c 	bfi	r2, r3, #8, #5
  419f66:	2302      	movs	r3, #2
  419f68:	f363 324f 	bfi	r2, r3, #13, #3
  419f6c:	e65e      	b.n	419c2c <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  419f6e:	2000      	movs	r0, #0
  419f70:	4b34      	ldr	r3, [pc, #208]	; (41a044 <list_init+0x64c>)
  419f72:	4798      	blx	r3
  419f74:	3028      	adds	r0, #40	; 0x28
  419f76:	0040      	lsls	r0, r0, #1
  419f78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419f7c:	da01      	bge.n	419f82 <list_init+0x58a>
  419f7e:	2201      	movs	r2, #1
  419f80:	e673      	b.n	419c6a <list_init+0x272>
  419f82:	2000      	movs	r0, #0
  419f84:	4b2f      	ldr	r3, [pc, #188]	; (41a044 <list_init+0x64c>)
  419f86:	4798      	blx	r3
  419f88:	3028      	adds	r0, #40	; 0x28
  419f8a:	0040      	lsls	r0, r0, #1
  419f8c:	4b2e      	ldr	r3, [pc, #184]	; (41a048 <list_init+0x650>)
  419f8e:	fb83 2300 	smull	r2, r3, r3, r0
  419f92:	17c2      	asrs	r2, r0, #31
  419f94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419f98:	b212      	sxth	r2, r2
  419f9a:	e666      	b.n	419c6a <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  419f9c:	2000      	movs	r0, #0
  419f9e:	4b29      	ldr	r3, [pc, #164]	; (41a044 <list_init+0x64c>)
  419fa0:	4798      	blx	r3
  419fa2:	3028      	adds	r0, #40	; 0x28
  419fa4:	0040      	lsls	r0, r0, #1
  419fa6:	4b28      	ldr	r3, [pc, #160]	; (41a048 <list_init+0x650>)
  419fa8:	fb83 2300 	smull	r2, r3, r3, r0
  419fac:	17c2      	asrs	r2, r0, #31
  419fae:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  419fb2:	b212      	sxth	r2, r2
  419fb4:	e66c      	b.n	419c90 <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  419fb6:	2000      	movs	r0, #0
  419fb8:	4b22      	ldr	r3, [pc, #136]	; (41a044 <list_init+0x64c>)
  419fba:	4798      	blx	r3
  419fbc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fc0:	3050      	adds	r0, #80	; 0x50
  419fc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419fc6:	da01      	bge.n	419fcc <list_init+0x5d4>
  419fc8:	2201      	movs	r2, #1
  419fca:	e67b      	b.n	419cc4 <list_init+0x2cc>
  419fcc:	2000      	movs	r0, #0
  419fce:	4b1d      	ldr	r3, [pc, #116]	; (41a044 <list_init+0x64c>)
  419fd0:	4798      	blx	r3
  419fd2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419fd6:	3050      	adds	r0, #80	; 0x50
  419fd8:	4b1b      	ldr	r3, [pc, #108]	; (41a048 <list_init+0x650>)
  419fda:	fb83 2300 	smull	r2, r3, r3, r0
  419fde:	17c2      	asrs	r2, r0, #31
  419fe0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419fe4:	b212      	sxth	r2, r2
  419fe6:	e66d      	b.n	419cc4 <list_init+0x2cc>
  419fe8:	2000      	movs	r0, #0
  419fea:	4b16      	ldr	r3, [pc, #88]	; (41a044 <list_init+0x64c>)
  419fec:	4798      	blx	r3
  419fee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419ff2:	0040      	lsls	r0, r0, #1
  419ff4:	3050      	adds	r0, #80	; 0x50
  419ff6:	4b14      	ldr	r3, [pc, #80]	; (41a048 <list_init+0x650>)
  419ff8:	fb83 2300 	smull	r2, r3, r3, r0
  419ffc:	17c2      	asrs	r2, r0, #31
  419ffe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a002:	b212      	sxth	r2, r2
  41a004:	e65e      	b.n	419cc4 <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a006:	2000      	movs	r0, #0
  41a008:	4b0e      	ldr	r3, [pc, #56]	; (41a044 <list_init+0x64c>)
  41a00a:	4798      	blx	r3
  41a00c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a010:	3050      	adds	r0, #80	; 0x50
  41a012:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a016:	da01      	bge.n	41a01c <list_init+0x624>
  41a018:	2201      	movs	r2, #1
  41a01a:	e680      	b.n	419d1e <list_init+0x326>
  41a01c:	2000      	movs	r0, #0
  41a01e:	4b09      	ldr	r3, [pc, #36]	; (41a044 <list_init+0x64c>)
  41a020:	4798      	blx	r3
  41a022:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a026:	3050      	adds	r0, #80	; 0x50
  41a028:	4b07      	ldr	r3, [pc, #28]	; (41a048 <list_init+0x650>)
  41a02a:	fb83 2300 	smull	r2, r3, r3, r0
  41a02e:	17c2      	asrs	r2, r0, #31
  41a030:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a034:	b212      	sxth	r2, r2
  41a036:	e672      	b.n	419d1e <list_init+0x326>
  41a038:	00409a6d 	.word	0x00409a6d
  41a03c:	20414798 	.word	0x20414798
  41a040:	0041447d 	.word	0x0041447d
  41a044:	0041445d 	.word	0x0041445d
  41a048:	66666667 	.word	0x66666667
  41a04c:	2000      	movs	r0, #0
  41a04e:	4b71      	ldr	r3, [pc, #452]	; (41a214 <list_init+0x81c>)
  41a050:	4798      	blx	r3
  41a052:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a056:	0040      	lsls	r0, r0, #1
  41a058:	3050      	adds	r0, #80	; 0x50
  41a05a:	4b6f      	ldr	r3, [pc, #444]	; (41a218 <list_init+0x820>)
  41a05c:	fb83 2300 	smull	r2, r3, r3, r0
  41a060:	17c2      	asrs	r2, r0, #31
  41a062:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a066:	b212      	sxth	r2, r2
  41a068:	e659      	b.n	419d1e <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a06a:	2000      	movs	r0, #0
  41a06c:	4b69      	ldr	r3, [pc, #420]	; (41a214 <list_init+0x81c>)
  41a06e:	4798      	blx	r3
  41a070:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a074:	3050      	adds	r0, #80	; 0x50
  41a076:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a07a:	da01      	bge.n	41a080 <list_init+0x688>
  41a07c:	2201      	movs	r2, #1
  41a07e:	e667      	b.n	419d50 <list_init+0x358>
  41a080:	2000      	movs	r0, #0
  41a082:	4b64      	ldr	r3, [pc, #400]	; (41a214 <list_init+0x81c>)
  41a084:	4798      	blx	r3
  41a086:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a08a:	3050      	adds	r0, #80	; 0x50
  41a08c:	4b62      	ldr	r3, [pc, #392]	; (41a218 <list_init+0x820>)
  41a08e:	fb83 2300 	smull	r2, r3, r3, r0
  41a092:	17c2      	asrs	r2, r0, #31
  41a094:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a098:	b212      	sxth	r2, r2
  41a09a:	e659      	b.n	419d50 <list_init+0x358>
  41a09c:	2000      	movs	r0, #0
  41a09e:	4b5d      	ldr	r3, [pc, #372]	; (41a214 <list_init+0x81c>)
  41a0a0:	4798      	blx	r3
  41a0a2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0a6:	0040      	lsls	r0, r0, #1
  41a0a8:	3050      	adds	r0, #80	; 0x50
  41a0aa:	4b5b      	ldr	r3, [pc, #364]	; (41a218 <list_init+0x820>)
  41a0ac:	fb83 2300 	smull	r2, r3, r3, r0
  41a0b0:	17c2      	asrs	r2, r0, #31
  41a0b2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0b6:	b212      	sxth	r2, r2
  41a0b8:	e64a      	b.n	419d50 <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a0ba:	2000      	movs	r0, #0
  41a0bc:	4b55      	ldr	r3, [pc, #340]	; (41a214 <list_init+0x81c>)
  41a0be:	4798      	blx	r3
  41a0c0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0c4:	3050      	adds	r0, #80	; 0x50
  41a0c6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0ca:	da01      	bge.n	41a0d0 <list_init+0x6d8>
  41a0cc:	2201      	movs	r2, #1
  41a0ce:	e658      	b.n	419d82 <list_init+0x38a>
  41a0d0:	2000      	movs	r0, #0
  41a0d2:	4b50      	ldr	r3, [pc, #320]	; (41a214 <list_init+0x81c>)
  41a0d4:	4798      	blx	r3
  41a0d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0da:	3050      	adds	r0, #80	; 0x50
  41a0dc:	4b4e      	ldr	r3, [pc, #312]	; (41a218 <list_init+0x820>)
  41a0de:	fb83 2300 	smull	r2, r3, r3, r0
  41a0e2:	17c2      	asrs	r2, r0, #31
  41a0e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a0e8:	b212      	sxth	r2, r2
  41a0ea:	e64a      	b.n	419d82 <list_init+0x38a>
  41a0ec:	2000      	movs	r0, #0
  41a0ee:	4b49      	ldr	r3, [pc, #292]	; (41a214 <list_init+0x81c>)
  41a0f0:	4798      	blx	r3
  41a0f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0f6:	0040      	lsls	r0, r0, #1
  41a0f8:	3050      	adds	r0, #80	; 0x50
  41a0fa:	4b47      	ldr	r3, [pc, #284]	; (41a218 <list_init+0x820>)
  41a0fc:	fb83 2300 	smull	r2, r3, r3, r0
  41a100:	17c2      	asrs	r2, r0, #31
  41a102:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a106:	b212      	sxth	r2, r2
  41a108:	e63b      	b.n	419d82 <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a10a:	2000      	movs	r0, #0
  41a10c:	4b41      	ldr	r3, [pc, #260]	; (41a214 <list_init+0x81c>)
  41a10e:	4798      	blx	r3
  41a110:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a114:	3050      	adds	r0, #80	; 0x50
  41a116:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a11a:	da01      	bge.n	41a120 <list_init+0x728>
  41a11c:	2201      	movs	r2, #1
  41a11e:	e649      	b.n	419db4 <list_init+0x3bc>
  41a120:	2000      	movs	r0, #0
  41a122:	4b3c      	ldr	r3, [pc, #240]	; (41a214 <list_init+0x81c>)
  41a124:	4798      	blx	r3
  41a126:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a12a:	3050      	adds	r0, #80	; 0x50
  41a12c:	4b3a      	ldr	r3, [pc, #232]	; (41a218 <list_init+0x820>)
  41a12e:	fb83 2300 	smull	r2, r3, r3, r0
  41a132:	17c2      	asrs	r2, r0, #31
  41a134:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a138:	b212      	sxth	r2, r2
  41a13a:	e63b      	b.n	419db4 <list_init+0x3bc>
  41a13c:	2000      	movs	r0, #0
  41a13e:	4b35      	ldr	r3, [pc, #212]	; (41a214 <list_init+0x81c>)
  41a140:	4798      	blx	r3
  41a142:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a146:	0040      	lsls	r0, r0, #1
  41a148:	3050      	adds	r0, #80	; 0x50
  41a14a:	4b33      	ldr	r3, [pc, #204]	; (41a218 <list_init+0x820>)
  41a14c:	fb83 2300 	smull	r2, r3, r3, r0
  41a150:	17c2      	asrs	r2, r0, #31
  41a152:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a156:	b212      	sxth	r2, r2
  41a158:	e62c      	b.n	419db4 <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41a15a:	2000      	movs	r0, #0
  41a15c:	4b2d      	ldr	r3, [pc, #180]	; (41a214 <list_init+0x81c>)
  41a15e:	4798      	blx	r3
  41a160:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a164:	3050      	adds	r0, #80	; 0x50
  41a166:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a16a:	da02      	bge.n	41a172 <list_init+0x77a>
  41a16c:	f04f 32ff 	mov.w	r2, #4294967295
  41a170:	e63a      	b.n	419de8 <list_init+0x3f0>
  41a172:	2000      	movs	r0, #0
  41a174:	4b27      	ldr	r3, [pc, #156]	; (41a214 <list_init+0x81c>)
  41a176:	4798      	blx	r3
  41a178:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a17c:	3050      	adds	r0, #80	; 0x50
  41a17e:	4b26      	ldr	r3, [pc, #152]	; (41a218 <list_init+0x820>)
  41a180:	fb83 2300 	smull	r2, r3, r3, r0
  41a184:	17c2      	asrs	r2, r0, #31
  41a186:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a18a:	b212      	sxth	r2, r2
  41a18c:	e62c      	b.n	419de8 <list_init+0x3f0>
  41a18e:	2000      	movs	r0, #0
  41a190:	4b20      	ldr	r3, [pc, #128]	; (41a214 <list_init+0x81c>)
  41a192:	4798      	blx	r3
  41a194:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a198:	0040      	lsls	r0, r0, #1
  41a19a:	3050      	adds	r0, #80	; 0x50
  41a19c:	4b1e      	ldr	r3, [pc, #120]	; (41a218 <list_init+0x820>)
  41a19e:	fb83 2300 	smull	r2, r3, r3, r0
  41a1a2:	17c2      	asrs	r2, r0, #31
  41a1a4:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a1a8:	b212      	sxth	r2, r2
  41a1aa:	e61d      	b.n	419de8 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41a1ac:	2000      	movs	r0, #0
  41a1ae:	4b19      	ldr	r3, [pc, #100]	; (41a214 <list_init+0x81c>)
  41a1b0:	4798      	blx	r3
  41a1b2:	3028      	adds	r0, #40	; 0x28
  41a1b4:	0040      	lsls	r0, r0, #1
  41a1b6:	4b18      	ldr	r3, [pc, #96]	; (41a218 <list_init+0x820>)
  41a1b8:	fb83 2300 	smull	r2, r3, r3, r0
  41a1bc:	17c2      	asrs	r2, r0, #31
  41a1be:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a1c2:	b212      	sxth	r2, r2
  41a1c4:	e622      	b.n	419e0c <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41a1c6:	2000      	movs	r0, #0
  41a1c8:	4b12      	ldr	r3, [pc, #72]	; (41a214 <list_init+0x81c>)
  41a1ca:	4798      	blx	r3
  41a1cc:	3028      	adds	r0, #40	; 0x28
  41a1ce:	0040      	lsls	r0, r0, #1
  41a1d0:	4b11      	ldr	r3, [pc, #68]	; (41a218 <list_init+0x820>)
  41a1d2:	fb83 2300 	smull	r2, r3, r3, r0
  41a1d6:	17c2      	asrs	r2, r0, #31
  41a1d8:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a1dc:	b212      	sxth	r2, r2
  41a1de:	e628      	b.n	419e32 <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41a1e0:	2000      	movs	r0, #0
  41a1e2:	4b0c      	ldr	r3, [pc, #48]	; (41a214 <list_init+0x81c>)
  41a1e4:	4798      	blx	r3
  41a1e6:	3028      	adds	r0, #40	; 0x28
  41a1e8:	0040      	lsls	r0, r0, #1
  41a1ea:	4b0b      	ldr	r3, [pc, #44]	; (41a218 <list_init+0x820>)
  41a1ec:	fb83 2300 	smull	r2, r3, r3, r0
  41a1f0:	17c2      	asrs	r2, r0, #31
  41a1f2:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a1f6:	b212      	sxth	r2, r2
  41a1f8:	e62e      	b.n	419e58 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41a1fa:	2000      	movs	r0, #0
  41a1fc:	4b05      	ldr	r3, [pc, #20]	; (41a214 <list_init+0x81c>)
  41a1fe:	4798      	blx	r3
  41a200:	3028      	adds	r0, #40	; 0x28
  41a202:	0040      	lsls	r0, r0, #1
  41a204:	4b04      	ldr	r3, [pc, #16]	; (41a218 <list_init+0x820>)
  41a206:	fb83 2300 	smull	r2, r3, r3, r0
  41a20a:	17c2      	asrs	r2, r0, #31
  41a20c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a210:	b212      	sxth	r2, r2
  41a212:	e634      	b.n	419e7e <list_init+0x486>
  41a214:	0041445d 	.word	0x0041445d
  41a218:	66666667 	.word	0x66666667

0041a21c <ddlist_init>:
{
  41a21c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41a21e:	4c48      	ldr	r4, [pc, #288]	; (41a340 <ddlist_init+0x124>)
  41a220:	6820      	ldr	r0, [r4, #0]
  41a222:	3058      	adds	r0, #88	; 0x58
  41a224:	4b47      	ldr	r3, [pc, #284]	; (41a344 <ddlist_init+0x128>)
  41a226:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41a228:	6824      	ldr	r4, [r4, #0]
  41a22a:	3458      	adds	r4, #88	; 0x58
  41a22c:	2000      	movs	r0, #0
  41a22e:	4b46      	ldr	r3, [pc, #280]	; (41a348 <ddlist_init+0x12c>)
  41a230:	4798      	blx	r3
  41a232:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a236:	0080      	lsls	r0, r0, #2
  41a238:	3050      	adds	r0, #80	; 0x50
  41a23a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a23e:	da4d      	bge.n	41a2dc <ddlist_init+0xc0>
  41a240:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41a242:	f248 0181 	movw	r1, #32897	; 0x8081
  41a246:	4620      	mov	r0, r4
  41a248:	4d40      	ldr	r5, [pc, #256]	; (41a34c <ddlist_init+0x130>)
  41a24a:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41a24c:	4c3c      	ldr	r4, [pc, #240]	; (41a340 <ddlist_init+0x124>)
  41a24e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41a250:	2201      	movs	r2, #1
  41a252:	2102      	movs	r1, #2
  41a254:	3058      	adds	r0, #88	; 0x58
  41a256:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41a258:	6820      	ldr	r0, [r4, #0]
  41a25a:	305c      	adds	r0, #92	; 0x5c
  41a25c:	4b39      	ldr	r3, [pc, #228]	; (41a344 <ddlist_init+0x128>)
  41a25e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a260:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a262:	22ff      	movs	r2, #255	; 0xff
  41a264:	212c      	movs	r1, #44	; 0x2c
  41a266:	305c      	adds	r0, #92	; 0x5c
  41a268:	4b39      	ldr	r3, [pc, #228]	; (41a350 <ddlist_init+0x134>)
  41a26a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41a26c:	6820      	ldr	r0, [r4, #0]
  41a26e:	4d39      	ldr	r5, [pc, #228]	; (41a354 <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a270:	89aa      	ldrh	r2, [r5, #12]
  41a272:	2129      	movs	r1, #41	; 0x29
  41a274:	305c      	adds	r0, #92	; 0x5c
  41a276:	4b38      	ldr	r3, [pc, #224]	; (41a358 <ddlist_init+0x13c>)
  41a278:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41a27a:	6820      	ldr	r0, [r4, #0]
  41a27c:	305c      	adds	r0, #92	; 0x5c
  41a27e:	6a2b      	ldr	r3, [r5, #32]
  41a280:	f013 0f02 	tst.w	r3, #2
  41a284:	d039      	beq.n	41a2fa <ddlist_init+0xde>
  41a286:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a28a:	f248 0189 	movw	r1, #32905	; 0x8089
  41a28e:	4b32      	ldr	r3, [pc, #200]	; (41a358 <ddlist_init+0x13c>)
  41a290:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41a292:	4b2b      	ldr	r3, [pc, #172]	; (41a340 <ddlist_init+0x124>)
  41a294:	6818      	ldr	r0, [r3, #0]
  41a296:	305c      	adds	r0, #92	; 0x5c
  41a298:	4b2e      	ldr	r3, [pc, #184]	; (41a354 <ddlist_init+0x138>)
  41a29a:	6a1b      	ldr	r3, [r3, #32]
  41a29c:	f013 0f02 	tst.w	r3, #2
  41a2a0:	d02e      	beq.n	41a300 <ddlist_init+0xe4>
  41a2a2:	f04f 0207 	mov.w	r2, #7
  41a2a6:	231d      	movs	r3, #29
  41a2a8:	f363 02c7 	bfi	r2, r3, #3, #5
  41a2ac:	f363 220c 	bfi	r2, r3, #8, #5
  41a2b0:	2303      	movs	r3, #3
  41a2b2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a2b6:	f241 0129 	movw	r1, #4137	; 0x1029
  41a2ba:	4b27      	ldr	r3, [pc, #156]	; (41a358 <ddlist_init+0x13c>)
  41a2bc:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41a2be:	4b20      	ldr	r3, [pc, #128]	; (41a340 <ddlist_init+0x124>)
  41a2c0:	6818      	ldr	r0, [r3, #0]
  41a2c2:	305c      	adds	r0, #92	; 0x5c
  41a2c4:	4b23      	ldr	r3, [pc, #140]	; (41a354 <ddlist_init+0x138>)
  41a2c6:	6a1b      	ldr	r3, [r3, #32]
  41a2c8:	f013 0f02 	tst.w	r3, #2
  41a2cc:	d127      	bne.n	41a31e <ddlist_init+0x102>
  41a2ce:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a2d2:	f249 0189 	movw	r1, #37001	; 0x9089
  41a2d6:	4b20      	ldr	r3, [pc, #128]	; (41a358 <ddlist_init+0x13c>)
  41a2d8:	4798      	blx	r3
  41a2da:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41a2dc:	2000      	movs	r0, #0
  41a2de:	4b1a      	ldr	r3, [pc, #104]	; (41a348 <ddlist_init+0x12c>)
  41a2e0:	4798      	blx	r3
  41a2e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a2e6:	0080      	lsls	r0, r0, #2
  41a2e8:	3050      	adds	r0, #80	; 0x50
  41a2ea:	4b1c      	ldr	r3, [pc, #112]	; (41a35c <ddlist_init+0x140>)
  41a2ec:	fb83 2300 	smull	r2, r3, r3, r0
  41a2f0:	17c2      	asrs	r2, r0, #31
  41a2f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a2f6:	b212      	sxth	r2, r2
  41a2f8:	e7a3      	b.n	41a242 <ddlist_init+0x26>
  41a2fa:	f04f 32ff 	mov.w	r2, #4294967295
  41a2fe:	e7c4      	b.n	41a28a <ddlist_init+0x6e>
  41a300:	f04f 0200 	mov.w	r2, #0
  41a304:	2302      	movs	r3, #2
  41a306:	f363 0202 	bfi	r2, r3, #0, #3
  41a30a:	2309      	movs	r3, #9
  41a30c:	f363 02c7 	bfi	r2, r3, #3, #5
  41a310:	230a      	movs	r3, #10
  41a312:	f363 220c 	bfi	r2, r3, #8, #5
  41a316:	2303      	movs	r3, #3
  41a318:	f363 324f 	bfi	r2, r3, #13, #3
  41a31c:	e7cb      	b.n	41a2b6 <ddlist_init+0x9a>
  41a31e:	f04f 0200 	mov.w	r2, #0
  41a322:	2301      	movs	r3, #1
  41a324:	f363 0202 	bfi	r2, r3, #0, #3
  41a328:	2307      	movs	r3, #7
  41a32a:	f363 02c7 	bfi	r2, r3, #3, #5
  41a32e:	2308      	movs	r3, #8
  41a330:	f363 220c 	bfi	r2, r3, #8, #5
  41a334:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a338:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41a33c:	e7c9      	b.n	41a2d2 <ddlist_init+0xb6>
  41a33e:	bf00      	nop
  41a340:	20414798 	.word	0x20414798
  41a344:	00417515 	.word	0x00417515
  41a348:	0041445d 	.word	0x0041445d
  41a34c:	00409a6d 	.word	0x00409a6d
  41a350:	00409d8d 	.word	0x00409d8d
  41a354:	2041479c 	.word	0x2041479c
  41a358:	00409bfd 	.word	0x00409bfd
  41a35c:	66666667 	.word	0x66666667

0041a360 <roller_init>:
{
  41a360:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41a362:	4c21      	ldr	r4, [pc, #132]	; (41a3e8 <roller_init+0x88>)
  41a364:	6820      	ldr	r0, [r4, #0]
  41a366:	308c      	adds	r0, #140	; 0x8c
  41a368:	4b20      	ldr	r3, [pc, #128]	; (41a3ec <roller_init+0x8c>)
  41a36a:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a36c:	6824      	ldr	r4, [r4, #0]
  41a36e:	348c      	adds	r4, #140	; 0x8c
  41a370:	2000      	movs	r0, #0
  41a372:	4b1f      	ldr	r3, [pc, #124]	; (41a3f0 <roller_init+0x90>)
  41a374:	4798      	blx	r3
  41a376:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a37a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a37e:	3050      	adds	r0, #80	; 0x50
  41a380:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a384:	da1f      	bge.n	41a3c6 <roller_init+0x66>
  41a386:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41a388:	f248 0181 	movw	r1, #32897	; 0x8081
  41a38c:	4620      	mov	r0, r4
  41a38e:	4b19      	ldr	r3, [pc, #100]	; (41a3f4 <roller_init+0x94>)
  41a390:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41a392:	4c15      	ldr	r4, [pc, #84]	; (41a3e8 <roller_init+0x88>)
  41a394:	6820      	ldr	r0, [r4, #0]
  41a396:	3090      	adds	r0, #144	; 0x90
  41a398:	4b14      	ldr	r3, [pc, #80]	; (41a3ec <roller_init+0x8c>)
  41a39a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a39c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a39e:	22ff      	movs	r2, #255	; 0xff
  41a3a0:	212c      	movs	r1, #44	; 0x2c
  41a3a2:	3090      	adds	r0, #144	; 0x90
  41a3a4:	4b14      	ldr	r3, [pc, #80]	; (41a3f8 <roller_init+0x98>)
  41a3a6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41a3a8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a3aa:	4b14      	ldr	r3, [pc, #80]	; (41a3fc <roller_init+0x9c>)
  41a3ac:	899a      	ldrh	r2, [r3, #12]
  41a3ae:	2129      	movs	r1, #41	; 0x29
  41a3b0:	3090      	adds	r0, #144	; 0x90
  41a3b2:	4d13      	ldr	r5, [pc, #76]	; (41a400 <roller_init+0xa0>)
  41a3b4:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a3b6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a3b8:	4b12      	ldr	r3, [pc, #72]	; (41a404 <roller_init+0xa4>)
  41a3ba:	881a      	ldrh	r2, [r3, #0]
  41a3bc:	f248 0189 	movw	r1, #32905	; 0x8089
  41a3c0:	3090      	adds	r0, #144	; 0x90
  41a3c2:	47a8      	blx	r5
  41a3c4:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a3c6:	2000      	movs	r0, #0
  41a3c8:	4b09      	ldr	r3, [pc, #36]	; (41a3f0 <roller_init+0x90>)
  41a3ca:	4798      	blx	r3
  41a3cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a3d4:	3050      	adds	r0, #80	; 0x50
  41a3d6:	4b0c      	ldr	r3, [pc, #48]	; (41a408 <roller_init+0xa8>)
  41a3d8:	fb83 2300 	smull	r2, r3, r3, r0
  41a3dc:	17c2      	asrs	r2, r0, #31
  41a3de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a3e2:	b212      	sxth	r2, r2
  41a3e4:	e7d0      	b.n	41a388 <roller_init+0x28>
  41a3e6:	bf00      	nop
  41a3e8:	20414798 	.word	0x20414798
  41a3ec:	00417515 	.word	0x00417515
  41a3f0:	0041445d 	.word	0x0041445d
  41a3f4:	00409a6d 	.word	0x00409a6d
  41a3f8:	00409d8d 	.word	0x00409d8d
  41a3fc:	2041479c 	.word	0x2041479c
  41a400:	00409bfd 	.word	0x00409bfd
  41a404:	00426d08 	.word	0x00426d08
  41a408:	66666667 	.word	0x66666667

0041a40c <table_init>:
{
  41a40c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41a40e:	4c9d      	ldr	r4, [pc, #628]	; (41a684 <table_init+0x278>)
  41a410:	6820      	ldr	r0, [r4, #0]
  41a412:	30a4      	adds	r0, #164	; 0xa4
  41a414:	4b9c      	ldr	r3, [pc, #624]	; (41a688 <table_init+0x27c>)
  41a416:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41a418:	6820      	ldr	r0, [r4, #0]
  41a41a:	30a4      	adds	r0, #164	; 0xa4
  41a41c:	4b9b      	ldr	r3, [pc, #620]	; (41a68c <table_init+0x280>)
  41a41e:	6a1b      	ldr	r3, [r3, #32]
  41a420:	f013 0f02 	tst.w	r3, #2
  41a424:	d07e      	beq.n	41a524 <table_init+0x118>
  41a426:	f04f 0200 	mov.w	r2, #0
  41a42a:	2306      	movs	r3, #6
  41a42c:	f363 0202 	bfi	r2, r3, #0, #3
  41a430:	231a      	movs	r3, #26
  41a432:	f363 02c7 	bfi	r2, r3, #3, #5
  41a436:	231c      	movs	r3, #28
  41a438:	f363 220c 	bfi	r2, r3, #8, #5
  41a43c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a440:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a444:	2139      	movs	r1, #57	; 0x39
  41a446:	4b92      	ldr	r3, [pc, #584]	; (41a690 <table_init+0x284>)
  41a448:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41a44a:	4c8e      	ldr	r4, [pc, #568]	; (41a684 <table_init+0x278>)
  41a44c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a44e:	2201      	movs	r2, #1
  41a450:	2130      	movs	r1, #48	; 0x30
  41a452:	30a4      	adds	r0, #164	; 0xa4
  41a454:	4d8f      	ldr	r5, [pc, #572]	; (41a694 <table_init+0x288>)
  41a456:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41a458:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a45a:	2203      	movs	r2, #3
  41a45c:	2131      	movs	r1, #49	; 0x31
  41a45e:	30a4      	adds	r0, #164	; 0xa4
  41a460:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a462:	6824      	ldr	r4, [r4, #0]
  41a464:	34a4      	adds	r4, #164	; 0xa4
  41a466:	2000      	movs	r0, #0
  41a468:	4b8b      	ldr	r3, [pc, #556]	; (41a698 <table_init+0x28c>)
  41a46a:	4798      	blx	r3
  41a46c:	2801      	cmp	r0, #1
  41a46e:	d968      	bls.n	41a542 <table_init+0x136>
  41a470:	2000      	movs	r0, #0
  41a472:	4b8a      	ldr	r3, [pc, #552]	; (41a69c <table_init+0x290>)
  41a474:	4798      	blx	r3
  41a476:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a47a:	0040      	lsls	r0, r0, #1
  41a47c:	3050      	adds	r0, #80	; 0x50
  41a47e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a482:	da77      	bge.n	41a574 <table_init+0x168>
  41a484:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a486:	2112      	movs	r1, #18
  41a488:	4620      	mov	r0, r4
  41a48a:	4b82      	ldr	r3, [pc, #520]	; (41a694 <table_init+0x288>)
  41a48c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a48e:	4b7d      	ldr	r3, [pc, #500]	; (41a684 <table_init+0x278>)
  41a490:	681c      	ldr	r4, [r3, #0]
  41a492:	34a4      	adds	r4, #164	; 0xa4
  41a494:	2000      	movs	r0, #0
  41a496:	4b80      	ldr	r3, [pc, #512]	; (41a698 <table_init+0x28c>)
  41a498:	4798      	blx	r3
  41a49a:	2801      	cmp	r0, #1
  41a49c:	d979      	bls.n	41a592 <table_init+0x186>
  41a49e:	2000      	movs	r0, #0
  41a4a0:	4b7e      	ldr	r3, [pc, #504]	; (41a69c <table_init+0x290>)
  41a4a2:	4798      	blx	r3
  41a4a4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4a8:	0040      	lsls	r0, r0, #1
  41a4aa:	3050      	adds	r0, #80	; 0x50
  41a4ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4b0:	f280 8088 	bge.w	41a5c4 <table_init+0x1b8>
  41a4b4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a4b6:	2113      	movs	r1, #19
  41a4b8:	4620      	mov	r0, r4
  41a4ba:	4b76      	ldr	r3, [pc, #472]	; (41a694 <table_init+0x288>)
  41a4bc:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a4be:	4b71      	ldr	r3, [pc, #452]	; (41a684 <table_init+0x278>)
  41a4c0:	681c      	ldr	r4, [r3, #0]
  41a4c2:	34a4      	adds	r4, #164	; 0xa4
  41a4c4:	2000      	movs	r0, #0
  41a4c6:	4b74      	ldr	r3, [pc, #464]	; (41a698 <table_init+0x28c>)
  41a4c8:	4798      	blx	r3
  41a4ca:	2801      	cmp	r0, #1
  41a4cc:	f240 8089 	bls.w	41a5e2 <table_init+0x1d6>
  41a4d0:	2000      	movs	r0, #0
  41a4d2:	4b72      	ldr	r3, [pc, #456]	; (41a69c <table_init+0x290>)
  41a4d4:	4798      	blx	r3
  41a4d6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4da:	0040      	lsls	r0, r0, #1
  41a4dc:	3050      	adds	r0, #80	; 0x50
  41a4de:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4e2:	f280 8097 	bge.w	41a614 <table_init+0x208>
  41a4e6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a4e8:	2110      	movs	r1, #16
  41a4ea:	4620      	mov	r0, r4
  41a4ec:	4b69      	ldr	r3, [pc, #420]	; (41a694 <table_init+0x288>)
  41a4ee:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a4f0:	4b64      	ldr	r3, [pc, #400]	; (41a684 <table_init+0x278>)
  41a4f2:	681c      	ldr	r4, [r3, #0]
  41a4f4:	34a4      	adds	r4, #164	; 0xa4
  41a4f6:	2000      	movs	r0, #0
  41a4f8:	4b67      	ldr	r3, [pc, #412]	; (41a698 <table_init+0x28c>)
  41a4fa:	4798      	blx	r3
  41a4fc:	2801      	cmp	r0, #1
  41a4fe:	f240 8098 	bls.w	41a632 <table_init+0x226>
  41a502:	2000      	movs	r0, #0
  41a504:	4b65      	ldr	r3, [pc, #404]	; (41a69c <table_init+0x290>)
  41a506:	4798      	blx	r3
  41a508:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a50c:	0040      	lsls	r0, r0, #1
  41a50e:	3050      	adds	r0, #80	; 0x50
  41a510:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a514:	f280 80a6 	bge.w	41a664 <table_init+0x258>
  41a518:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a51a:	2111      	movs	r1, #17
  41a51c:	4620      	mov	r0, r4
  41a51e:	4b5d      	ldr	r3, [pc, #372]	; (41a694 <table_init+0x288>)
  41a520:	4798      	blx	r3
  41a522:	bd38      	pop	{r3, r4, r5, pc}
  41a524:	f04f 0200 	mov.w	r2, #0
  41a528:	2304      	movs	r3, #4
  41a52a:	f363 0202 	bfi	r2, r3, #0, #3
  41a52e:	2310      	movs	r3, #16
  41a530:	f363 02c7 	bfi	r2, r3, #3, #5
  41a534:	2312      	movs	r3, #18
  41a536:	f363 220c 	bfi	r2, r3, #8, #5
  41a53a:	2302      	movs	r3, #2
  41a53c:	f363 324f 	bfi	r2, r3, #13, #3
  41a540:	e780      	b.n	41a444 <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a542:	2000      	movs	r0, #0
  41a544:	4b55      	ldr	r3, [pc, #340]	; (41a69c <table_init+0x290>)
  41a546:	4798      	blx	r3
  41a548:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a54c:	3050      	adds	r0, #80	; 0x50
  41a54e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a552:	da01      	bge.n	41a558 <table_init+0x14c>
  41a554:	2201      	movs	r2, #1
  41a556:	e796      	b.n	41a486 <table_init+0x7a>
  41a558:	2000      	movs	r0, #0
  41a55a:	4b50      	ldr	r3, [pc, #320]	; (41a69c <table_init+0x290>)
  41a55c:	4798      	blx	r3
  41a55e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a562:	3050      	adds	r0, #80	; 0x50
  41a564:	4b4e      	ldr	r3, [pc, #312]	; (41a6a0 <table_init+0x294>)
  41a566:	fb83 2300 	smull	r2, r3, r3, r0
  41a56a:	17c2      	asrs	r2, r0, #31
  41a56c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a570:	b212      	sxth	r2, r2
  41a572:	e788      	b.n	41a486 <table_init+0x7a>
  41a574:	2000      	movs	r0, #0
  41a576:	4b49      	ldr	r3, [pc, #292]	; (41a69c <table_init+0x290>)
  41a578:	4798      	blx	r3
  41a57a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a57e:	0040      	lsls	r0, r0, #1
  41a580:	3050      	adds	r0, #80	; 0x50
  41a582:	4b47      	ldr	r3, [pc, #284]	; (41a6a0 <table_init+0x294>)
  41a584:	fb83 2300 	smull	r2, r3, r3, r0
  41a588:	17c2      	asrs	r2, r0, #31
  41a58a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a58e:	b212      	sxth	r2, r2
  41a590:	e779      	b.n	41a486 <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a592:	2000      	movs	r0, #0
  41a594:	4b41      	ldr	r3, [pc, #260]	; (41a69c <table_init+0x290>)
  41a596:	4798      	blx	r3
  41a598:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a59c:	3050      	adds	r0, #80	; 0x50
  41a59e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5a2:	da01      	bge.n	41a5a8 <table_init+0x19c>
  41a5a4:	2201      	movs	r2, #1
  41a5a6:	e786      	b.n	41a4b6 <table_init+0xaa>
  41a5a8:	2000      	movs	r0, #0
  41a5aa:	4b3c      	ldr	r3, [pc, #240]	; (41a69c <table_init+0x290>)
  41a5ac:	4798      	blx	r3
  41a5ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a5b2:	3050      	adds	r0, #80	; 0x50
  41a5b4:	4b3a      	ldr	r3, [pc, #232]	; (41a6a0 <table_init+0x294>)
  41a5b6:	fb83 2300 	smull	r2, r3, r3, r0
  41a5ba:	17c2      	asrs	r2, r0, #31
  41a5bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5c0:	b212      	sxth	r2, r2
  41a5c2:	e778      	b.n	41a4b6 <table_init+0xaa>
  41a5c4:	2000      	movs	r0, #0
  41a5c6:	4b35      	ldr	r3, [pc, #212]	; (41a69c <table_init+0x290>)
  41a5c8:	4798      	blx	r3
  41a5ca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a5ce:	0040      	lsls	r0, r0, #1
  41a5d0:	3050      	adds	r0, #80	; 0x50
  41a5d2:	4b33      	ldr	r3, [pc, #204]	; (41a6a0 <table_init+0x294>)
  41a5d4:	fb83 2300 	smull	r2, r3, r3, r0
  41a5d8:	17c2      	asrs	r2, r0, #31
  41a5da:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a5de:	b212      	sxth	r2, r2
  41a5e0:	e769      	b.n	41a4b6 <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a5e2:	2000      	movs	r0, #0
  41a5e4:	4b2d      	ldr	r3, [pc, #180]	; (41a69c <table_init+0x290>)
  41a5e6:	4798      	blx	r3
  41a5e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a5ec:	3050      	adds	r0, #80	; 0x50
  41a5ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5f2:	da01      	bge.n	41a5f8 <table_init+0x1ec>
  41a5f4:	2201      	movs	r2, #1
  41a5f6:	e777      	b.n	41a4e8 <table_init+0xdc>
  41a5f8:	2000      	movs	r0, #0
  41a5fa:	4b28      	ldr	r3, [pc, #160]	; (41a69c <table_init+0x290>)
  41a5fc:	4798      	blx	r3
  41a5fe:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a602:	3050      	adds	r0, #80	; 0x50
  41a604:	4b26      	ldr	r3, [pc, #152]	; (41a6a0 <table_init+0x294>)
  41a606:	fb83 2300 	smull	r2, r3, r3, r0
  41a60a:	17c2      	asrs	r2, r0, #31
  41a60c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a610:	b212      	sxth	r2, r2
  41a612:	e769      	b.n	41a4e8 <table_init+0xdc>
  41a614:	2000      	movs	r0, #0
  41a616:	4b21      	ldr	r3, [pc, #132]	; (41a69c <table_init+0x290>)
  41a618:	4798      	blx	r3
  41a61a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a61e:	0040      	lsls	r0, r0, #1
  41a620:	3050      	adds	r0, #80	; 0x50
  41a622:	4b1f      	ldr	r3, [pc, #124]	; (41a6a0 <table_init+0x294>)
  41a624:	fb83 2300 	smull	r2, r3, r3, r0
  41a628:	17c2      	asrs	r2, r0, #31
  41a62a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a62e:	b212      	sxth	r2, r2
  41a630:	e75a      	b.n	41a4e8 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a632:	2000      	movs	r0, #0
  41a634:	4b19      	ldr	r3, [pc, #100]	; (41a69c <table_init+0x290>)
  41a636:	4798      	blx	r3
  41a638:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a63c:	3050      	adds	r0, #80	; 0x50
  41a63e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a642:	da01      	bge.n	41a648 <table_init+0x23c>
  41a644:	2201      	movs	r2, #1
  41a646:	e768      	b.n	41a51a <table_init+0x10e>
  41a648:	2000      	movs	r0, #0
  41a64a:	4b14      	ldr	r3, [pc, #80]	; (41a69c <table_init+0x290>)
  41a64c:	4798      	blx	r3
  41a64e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a652:	3050      	adds	r0, #80	; 0x50
  41a654:	4b12      	ldr	r3, [pc, #72]	; (41a6a0 <table_init+0x294>)
  41a656:	fb83 2300 	smull	r2, r3, r3, r0
  41a65a:	17c2      	asrs	r2, r0, #31
  41a65c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a660:	b212      	sxth	r2, r2
  41a662:	e75a      	b.n	41a51a <table_init+0x10e>
  41a664:	2000      	movs	r0, #0
  41a666:	4b0d      	ldr	r3, [pc, #52]	; (41a69c <table_init+0x290>)
  41a668:	4798      	blx	r3
  41a66a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a66e:	0040      	lsls	r0, r0, #1
  41a670:	3050      	adds	r0, #80	; 0x50
  41a672:	4b0b      	ldr	r3, [pc, #44]	; (41a6a0 <table_init+0x294>)
  41a674:	fb83 2300 	smull	r2, r3, r3, r0
  41a678:	17c2      	asrs	r2, r0, #31
  41a67a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a67e:	b212      	sxth	r2, r2
  41a680:	e74b      	b.n	41a51a <table_init+0x10e>
  41a682:	bf00      	nop
  41a684:	20414798 	.word	0x20414798
  41a688:	00417515 	.word	0x00417515
  41a68c:	2041479c 	.word	0x2041479c
  41a690:	00409bfd 	.word	0x00409bfd
  41a694:	00409a6d 	.word	0x00409a6d
  41a698:	0041447d 	.word	0x0041447d
  41a69c:	0041445d 	.word	0x0041445d
  41a6a0:	66666667 	.word	0x66666667

0041a6a4 <tabview_win_shared_init>:
{
  41a6a4:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41a6a6:	4cbe      	ldr	r4, [pc, #760]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a6a8:	6820      	ldr	r0, [r4, #0]
  41a6aa:	30ac      	adds	r0, #172	; 0xac
  41a6ac:	4bbd      	ldr	r3, [pc, #756]	; (41a9a4 <tabview_win_shared_init+0x300>)
  41a6ae:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a6b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a6b2:	22ff      	movs	r2, #255	; 0xff
  41a6b4:	212c      	movs	r1, #44	; 0x2c
  41a6b6:	30ac      	adds	r0, #172	; 0xac
  41a6b8:	4bbb      	ldr	r3, [pc, #748]	; (41a9a8 <tabview_win_shared_init+0x304>)
  41a6ba:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41a6bc:	6820      	ldr	r0, [r4, #0]
  41a6be:	30ac      	adds	r0, #172	; 0xac
  41a6c0:	4bba      	ldr	r3, [pc, #744]	; (41a9ac <tabview_win_shared_init+0x308>)
  41a6c2:	6a1b      	ldr	r3, [r3, #32]
  41a6c4:	f013 0f02 	tst.w	r3, #2
  41a6c8:	f000 8198 	beq.w	41a9fc <tabview_win_shared_init+0x358>
  41a6cc:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a6d0:	2129      	movs	r1, #41	; 0x29
  41a6d2:	4bb7      	ldr	r3, [pc, #732]	; (41a9b0 <tabview_win_shared_init+0x30c>)
  41a6d4:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41a6d6:	4bb2      	ldr	r3, [pc, #712]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a6d8:	6818      	ldr	r0, [r3, #0]
  41a6da:	30ac      	adds	r0, #172	; 0xac
  41a6dc:	4bb3      	ldr	r3, [pc, #716]	; (41a9ac <tabview_win_shared_init+0x308>)
  41a6de:	6a1b      	ldr	r3, [r3, #32]
  41a6e0:	f013 0f02 	tst.w	r3, #2
  41a6e4:	f000 8198 	beq.w	41aa18 <tabview_win_shared_init+0x374>
  41a6e8:	f04f 0200 	mov.w	r2, #0
  41a6ec:	2301      	movs	r3, #1
  41a6ee:	f363 0202 	bfi	r2, r3, #0, #3
  41a6f2:	2307      	movs	r3, #7
  41a6f4:	f363 02c7 	bfi	r2, r3, #3, #5
  41a6f8:	2308      	movs	r3, #8
  41a6fa:	f363 220c 	bfi	r2, r3, #8, #5
  41a6fe:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a702:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a706:	f248 0189 	movw	r1, #32905	; 0x8089
  41a70a:	4da9      	ldr	r5, [pc, #676]	; (41a9b0 <tabview_win_shared_init+0x30c>)
  41a70c:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41a70e:	4ca4      	ldr	r4, [pc, #656]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a710:	6820      	ldr	r0, [r4, #0]
  41a712:	f04f 0200 	mov.w	r2, #0
  41a716:	2304      	movs	r3, #4
  41a718:	f363 0202 	bfi	r2, r3, #0, #3
  41a71c:	2312      	movs	r3, #18
  41a71e:	f363 02c7 	bfi	r2, r3, #3, #5
  41a722:	2313      	movs	r3, #19
  41a724:	f363 220c 	bfi	r2, r3, #8, #5
  41a728:	2306      	movs	r3, #6
  41a72a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41a72e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41a732:	30ac      	adds	r0, #172	; 0xac
  41a734:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a736:	6824      	ldr	r4, [r4, #0]
  41a738:	34ac      	adds	r4, #172	; 0xac
  41a73a:	2000      	movs	r0, #0
  41a73c:	4b9d      	ldr	r3, [pc, #628]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a73e:	4798      	blx	r3
  41a740:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a744:	3050      	adds	r0, #80	; 0x50
  41a746:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a74a:	f280 8171 	bge.w	41aa30 <tabview_win_shared_init+0x38c>
  41a74e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a750:	2110      	movs	r1, #16
  41a752:	4620      	mov	r0, r4
  41a754:	4b98      	ldr	r3, [pc, #608]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a756:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a758:	4b91      	ldr	r3, [pc, #580]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a75a:	681c      	ldr	r4, [r3, #0]
  41a75c:	34ac      	adds	r4, #172	; 0xac
  41a75e:	2000      	movs	r0, #0
  41a760:	4b94      	ldr	r3, [pc, #592]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a762:	4798      	blx	r3
  41a764:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a768:	3050      	adds	r0, #80	; 0x50
  41a76a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a76e:	f280 816d 	bge.w	41aa4c <tabview_win_shared_init+0x3a8>
  41a772:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a774:	2112      	movs	r1, #18
  41a776:	4620      	mov	r0, r4
  41a778:	4b8f      	ldr	r3, [pc, #572]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a77a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41a77c:	4b88      	ldr	r3, [pc, #544]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a77e:	681c      	ldr	r4, [r3, #0]
  41a780:	34ac      	adds	r4, #172	; 0xac
  41a782:	2000      	movs	r0, #0
  41a784:	4b8b      	ldr	r3, [pc, #556]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a786:	4798      	blx	r3
  41a788:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41a78c:	3050      	adds	r0, #80	; 0x50
  41a78e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a792:	f280 8169 	bge.w	41aa68 <tabview_win_shared_init+0x3c4>
  41a796:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a798:	2113      	movs	r1, #19
  41a79a:	4620      	mov	r0, r4
  41a79c:	4b86      	ldr	r3, [pc, #536]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a79e:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41a7a0:	4c7f      	ldr	r4, [pc, #508]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a7a2:	6820      	ldr	r0, [r4, #0]
  41a7a4:	30a8      	adds	r0, #168	; 0xa8
  41a7a6:	4b7f      	ldr	r3, [pc, #508]	; (41a9a4 <tabview_win_shared_init+0x300>)
  41a7a8:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41a7aa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a7ac:	227f      	movs	r2, #127	; 0x7f
  41a7ae:	f241 012c 	movw	r1, #4140	; 0x102c
  41a7b2:	30a8      	adds	r0, #168	; 0xa8
  41a7b4:	4b7c      	ldr	r3, [pc, #496]	; (41a9a8 <tabview_win_shared_init+0x304>)
  41a7b6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41a7b8:	6820      	ldr	r0, [r4, #0]
  41a7ba:	f04f 0200 	mov.w	r2, #0
  41a7be:	2304      	movs	r3, #4
  41a7c0:	f363 0202 	bfi	r2, r3, #0, #3
  41a7c4:	2311      	movs	r3, #17
  41a7c6:	f363 02c7 	bfi	r2, r3, #3, #5
  41a7ca:	f363 220c 	bfi	r2, r3, #8, #5
  41a7ce:	2302      	movs	r3, #2
  41a7d0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a7d4:	f241 0129 	movw	r1, #4137	; 0x1029
  41a7d8:	30a8      	adds	r0, #168	; 0xa8
  41a7da:	4b75      	ldr	r3, [pc, #468]	; (41a9b0 <tabview_win_shared_init+0x30c>)
  41a7dc:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41a7de:	6820      	ldr	r0, [r4, #0]
  41a7e0:	30a8      	adds	r0, #168	; 0xa8
  41a7e2:	4b72      	ldr	r3, [pc, #456]	; (41a9ac <tabview_win_shared_init+0x308>)
  41a7e4:	6a1b      	ldr	r3, [r3, #32]
  41a7e6:	f013 0f02 	tst.w	r3, #2
  41a7ea:	f000 814b 	beq.w	41aa84 <tabview_win_shared_init+0x3e0>
  41a7ee:	f04f 0200 	mov.w	r2, #0
  41a7f2:	2301      	movs	r3, #1
  41a7f4:	f363 0202 	bfi	r2, r3, #0, #3
  41a7f8:	2307      	movs	r3, #7
  41a7fa:	f363 02c7 	bfi	r2, r3, #3, #5
  41a7fe:	2308      	movs	r3, #8
  41a800:	f363 220c 	bfi	r2, r3, #8, #5
  41a804:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a808:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a80c:	f248 1189 	movw	r1, #33161	; 0x8189
  41a810:	4b67      	ldr	r3, [pc, #412]	; (41a9b0 <tabview_win_shared_init+0x30c>)
  41a812:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a814:	4b62      	ldr	r3, [pc, #392]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a816:	681c      	ldr	r4, [r3, #0]
  41a818:	34a8      	adds	r4, #168	; 0xa8
  41a81a:	2000      	movs	r0, #0
  41a81c:	4b65      	ldr	r3, [pc, #404]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a81e:	4798      	blx	r3
  41a820:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a824:	0080      	lsls	r0, r0, #2
  41a826:	3050      	adds	r0, #80	; 0x50
  41a828:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a82c:	f280 8136 	bge.w	41aa9c <tabview_win_shared_init+0x3f8>
  41a830:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a832:	2110      	movs	r1, #16
  41a834:	4620      	mov	r0, r4
  41a836:	4b60      	ldr	r3, [pc, #384]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a838:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41a83a:	4b59      	ldr	r3, [pc, #356]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a83c:	681c      	ldr	r4, [r3, #0]
  41a83e:	34a8      	adds	r4, #168	; 0xa8
  41a840:	2000      	movs	r0, #0
  41a842:	4b5c      	ldr	r3, [pc, #368]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a844:	4798      	blx	r3
  41a846:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a84a:	0080      	lsls	r0, r0, #2
  41a84c:	3050      	adds	r0, #80	; 0x50
  41a84e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a852:	f280 8132 	bge.w	41aaba <tabview_win_shared_init+0x416>
  41a856:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a858:	2111      	movs	r1, #17
  41a85a:	4620      	mov	r0, r4
  41a85c:	4b56      	ldr	r3, [pc, #344]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a85e:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41a860:	4c4f      	ldr	r4, [pc, #316]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a862:	6820      	ldr	r0, [r4, #0]
  41a864:	4e51      	ldr	r6, [pc, #324]	; (41a9ac <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a866:	89b2      	ldrh	r2, [r6, #12]
  41a868:	f248 2189 	movw	r1, #33417	; 0x8289
  41a86c:	30a8      	adds	r0, #168	; 0xa8
  41a86e:	4d50      	ldr	r5, [pc, #320]	; (41a9b0 <tabview_win_shared_init+0x30c>)
  41a870:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41a872:	6820      	ldr	r0, [r4, #0]
  41a874:	89f2      	ldrh	r2, [r6, #14]
  41a876:	f248 4189 	movw	r1, #33929	; 0x8489
  41a87a:	30a8      	adds	r0, #168	; 0xa8
  41a87c:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41a87e:	6820      	ldr	r0, [r4, #0]
  41a880:	30b0      	adds	r0, #176	; 0xb0
  41a882:	4b48      	ldr	r3, [pc, #288]	; (41a9a4 <tabview_win_shared_init+0x300>)
  41a884:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a886:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a888:	22ff      	movs	r2, #255	; 0xff
  41a88a:	212c      	movs	r1, #44	; 0x2c
  41a88c:	30b0      	adds	r0, #176	; 0xb0
  41a88e:	4b46      	ldr	r3, [pc, #280]	; (41a9a8 <tabview_win_shared_init+0x304>)
  41a890:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41a892:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a894:	89b2      	ldrh	r2, [r6, #12]
  41a896:	2129      	movs	r1, #41	; 0x29
  41a898:	30b0      	adds	r0, #176	; 0xb0
  41a89a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41a89c:	6820      	ldr	r0, [r4, #0]
  41a89e:	89f2      	ldrh	r2, [r6, #14]
  41a8a0:	f240 4129 	movw	r1, #1065	; 0x429
  41a8a4:	30b0      	adds	r0, #176	; 0xb0
  41a8a6:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41a8a8:	6824      	ldr	r4, [r4, #0]
  41a8aa:	34b0      	adds	r4, #176	; 0xb0
  41a8ac:	2000      	movs	r0, #0
  41a8ae:	4b41      	ldr	r3, [pc, #260]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a8b0:	4798      	blx	r3
  41a8b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a8b6:	3050      	adds	r0, #80	; 0x50
  41a8b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8bc:	f280 810c 	bge.w	41aad8 <tabview_win_shared_init+0x434>
  41a8c0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41a8c2:	2103      	movs	r1, #3
  41a8c4:	4620      	mov	r0, r4
  41a8c6:	4d3c      	ldr	r5, [pc, #240]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a8c8:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41a8ca:	4c35      	ldr	r4, [pc, #212]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a8cc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41a8ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41a8d2:	2101      	movs	r1, #1
  41a8d4:	30b0      	adds	r0, #176	; 0xb0
  41a8d6:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41a8d8:	6820      	ldr	r0, [r4, #0]
  41a8da:	30b4      	adds	r0, #180	; 0xb4
  41a8dc:	4b31      	ldr	r3, [pc, #196]	; (41a9a4 <tabview_win_shared_init+0x300>)
  41a8de:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a8e0:	6824      	ldr	r4, [r4, #0]
  41a8e2:	34b4      	adds	r4, #180	; 0xb4
  41a8e4:	2000      	movs	r0, #0
  41a8e6:	4b35      	ldr	r3, [pc, #212]	; (41a9bc <tabview_win_shared_init+0x318>)
  41a8e8:	4798      	blx	r3
  41a8ea:	2801      	cmp	r0, #1
  41a8ec:	f240 8102 	bls.w	41aaf4 <tabview_win_shared_init+0x450>
  41a8f0:	2000      	movs	r0, #0
  41a8f2:	4b30      	ldr	r3, [pc, #192]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a8f4:	4798      	blx	r3
  41a8f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a8fa:	0040      	lsls	r0, r0, #1
  41a8fc:	3050      	adds	r0, #80	; 0x50
  41a8fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a902:	f280 8110 	bge.w	41ab26 <tabview_win_shared_init+0x482>
  41a906:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a908:	2110      	movs	r1, #16
  41a90a:	4620      	mov	r0, r4
  41a90c:	4b2a      	ldr	r3, [pc, #168]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a90e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a910:	4b23      	ldr	r3, [pc, #140]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a912:	681c      	ldr	r4, [r3, #0]
  41a914:	34b4      	adds	r4, #180	; 0xb4
  41a916:	2000      	movs	r0, #0
  41a918:	4b28      	ldr	r3, [pc, #160]	; (41a9bc <tabview_win_shared_init+0x318>)
  41a91a:	4798      	blx	r3
  41a91c:	2801      	cmp	r0, #1
  41a91e:	f240 8111 	bls.w	41ab44 <tabview_win_shared_init+0x4a0>
  41a922:	2000      	movs	r0, #0
  41a924:	4b23      	ldr	r3, [pc, #140]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a926:	4798      	blx	r3
  41a928:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a92c:	0040      	lsls	r0, r0, #1
  41a92e:	3050      	adds	r0, #80	; 0x50
  41a930:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a934:	f280 811f 	bge.w	41ab76 <tabview_win_shared_init+0x4d2>
  41a938:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a93a:	2111      	movs	r1, #17
  41a93c:	4620      	mov	r0, r4
  41a93e:	4b1e      	ldr	r3, [pc, #120]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a940:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a942:	4b17      	ldr	r3, [pc, #92]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a944:	681c      	ldr	r4, [r3, #0]
  41a946:	34b4      	adds	r4, #180	; 0xb4
  41a948:	2000      	movs	r0, #0
  41a94a:	4b1c      	ldr	r3, [pc, #112]	; (41a9bc <tabview_win_shared_init+0x318>)
  41a94c:	4798      	blx	r3
  41a94e:	2801      	cmp	r0, #1
  41a950:	f240 8120 	bls.w	41ab94 <tabview_win_shared_init+0x4f0>
  41a954:	2000      	movs	r0, #0
  41a956:	4b17      	ldr	r3, [pc, #92]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a958:	4798      	blx	r3
  41a95a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a95e:	0040      	lsls	r0, r0, #1
  41a960:	3050      	adds	r0, #80	; 0x50
  41a962:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a966:	f280 812e 	bge.w	41abc6 <tabview_win_shared_init+0x522>
  41a96a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a96c:	2112      	movs	r1, #18
  41a96e:	4620      	mov	r0, r4
  41a970:	4b11      	ldr	r3, [pc, #68]	; (41a9b8 <tabview_win_shared_init+0x314>)
  41a972:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a974:	4b0a      	ldr	r3, [pc, #40]	; (41a9a0 <tabview_win_shared_init+0x2fc>)
  41a976:	681c      	ldr	r4, [r3, #0]
  41a978:	34b4      	adds	r4, #180	; 0xb4
  41a97a:	2000      	movs	r0, #0
  41a97c:	4b0f      	ldr	r3, [pc, #60]	; (41a9bc <tabview_win_shared_init+0x318>)
  41a97e:	4798      	blx	r3
  41a980:	2801      	cmp	r0, #1
  41a982:	f240 812f 	bls.w	41abe4 <tabview_win_shared_init+0x540>
  41a986:	2000      	movs	r0, #0
  41a988:	4b0a      	ldr	r3, [pc, #40]	; (41a9b4 <tabview_win_shared_init+0x310>)
  41a98a:	4798      	blx	r3
  41a98c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a990:	0040      	lsls	r0, r0, #1
  41a992:	3050      	adds	r0, #80	; 0x50
  41a994:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a998:	f280 813d 	bge.w	41ac16 <tabview_win_shared_init+0x572>
  41a99c:	2201      	movs	r2, #1
  41a99e:	e00f      	b.n	41a9c0 <tabview_win_shared_init+0x31c>
  41a9a0:	20414798 	.word	0x20414798
  41a9a4:	00417515 	.word	0x00417515
  41a9a8:	00409d8d 	.word	0x00409d8d
  41a9ac:	2041479c 	.word	0x2041479c
  41a9b0:	00409bfd 	.word	0x00409bfd
  41a9b4:	0041445d 	.word	0x0041445d
  41a9b8:	00409a6d 	.word	0x00409a6d
  41a9bc:	0041447d 	.word	0x0041447d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a9c0:	2113      	movs	r1, #19
  41a9c2:	4620      	mov	r0, r4
  41a9c4:	4baf      	ldr	r3, [pc, #700]	; (41ac84 <tabview_win_shared_init+0x5e0>)
  41a9c6:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41a9c8:	4baf      	ldr	r3, [pc, #700]	; (41ac88 <tabview_win_shared_init+0x5e4>)
  41a9ca:	681c      	ldr	r4, [r3, #0]
  41a9cc:	34b4      	adds	r4, #180	; 0xb4
  41a9ce:	2000      	movs	r0, #0
  41a9d0:	4bae      	ldr	r3, [pc, #696]	; (41ac8c <tabview_win_shared_init+0x5e8>)
  41a9d2:	4798      	blx	r3
  41a9d4:	2801      	cmp	r0, #1
  41a9d6:	f240 812d 	bls.w	41ac34 <tabview_win_shared_init+0x590>
  41a9da:	2000      	movs	r0, #0
  41a9dc:	4bac      	ldr	r3, [pc, #688]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41a9de:	4798      	blx	r3
  41a9e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a9e4:	0040      	lsls	r0, r0, #1
  41a9e6:	3050      	adds	r0, #80	; 0x50
  41a9e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9ec:	f280 813b 	bge.w	41ac66 <tabview_win_shared_init+0x5c2>
  41a9f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a9f2:	2114      	movs	r1, #20
  41a9f4:	4620      	mov	r0, r4
  41a9f6:	4ba3      	ldr	r3, [pc, #652]	; (41ac84 <tabview_win_shared_init+0x5e0>)
  41a9f8:	4798      	blx	r3
  41a9fa:	bd70      	pop	{r4, r5, r6, pc}
  41a9fc:	f04f 0200 	mov.w	r2, #0
  41aa00:	2303      	movs	r3, #3
  41aa02:	f363 0202 	bfi	r2, r3, #0, #3
  41aa06:	230b      	movs	r3, #11
  41aa08:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa0c:	230e      	movs	r3, #14
  41aa0e:	f363 220c 	bfi	r2, r3, #8, #5
  41aa12:	f36f 324f 	bfc	r2, #13, #3
  41aa16:	e65b      	b.n	41a6d0 <tabview_win_shared_init+0x2c>
  41aa18:	f04f 0207 	mov.w	r2, #7
  41aa1c:	231c      	movs	r3, #28
  41aa1e:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa22:	231d      	movs	r3, #29
  41aa24:	f363 220c 	bfi	r2, r3, #8, #5
  41aa28:	2302      	movs	r3, #2
  41aa2a:	f363 324f 	bfi	r2, r3, #13, #3
  41aa2e:	e66a      	b.n	41a706 <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aa30:	2000      	movs	r0, #0
  41aa32:	4b97      	ldr	r3, [pc, #604]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aa34:	4798      	blx	r3
  41aa36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aa3a:	3050      	adds	r0, #80	; 0x50
  41aa3c:	4b95      	ldr	r3, [pc, #596]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aa3e:	fb83 2300 	smull	r2, r3, r3, r0
  41aa42:	17c2      	asrs	r2, r0, #31
  41aa44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa48:	b212      	sxth	r2, r2
  41aa4a:	e681      	b.n	41a750 <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aa4c:	2000      	movs	r0, #0
  41aa4e:	4b90      	ldr	r3, [pc, #576]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aa50:	4798      	blx	r3
  41aa52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aa56:	3050      	adds	r0, #80	; 0x50
  41aa58:	4b8e      	ldr	r3, [pc, #568]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aa5a:	fb83 2300 	smull	r2, r3, r3, r0
  41aa5e:	17c2      	asrs	r2, r0, #31
  41aa60:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa64:	b212      	sxth	r2, r2
  41aa66:	e685      	b.n	41a774 <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aa68:	2000      	movs	r0, #0
  41aa6a:	4b89      	ldr	r3, [pc, #548]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aa6c:	4798      	blx	r3
  41aa6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aa72:	3050      	adds	r0, #80	; 0x50
  41aa74:	4b87      	ldr	r3, [pc, #540]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aa76:	fb83 2300 	smull	r2, r3, r3, r0
  41aa7a:	17c2      	asrs	r2, r0, #31
  41aa7c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aa80:	b212      	sxth	r2, r2
  41aa82:	e689      	b.n	41a798 <tabview_win_shared_init+0xf4>
  41aa84:	f04f 0207 	mov.w	r2, #7
  41aa88:	231c      	movs	r3, #28
  41aa8a:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa8e:	231d      	movs	r3, #29
  41aa90:	f363 220c 	bfi	r2, r3, #8, #5
  41aa94:	2302      	movs	r3, #2
  41aa96:	f363 324f 	bfi	r2, r3, #13, #3
  41aa9a:	e6b7      	b.n	41a80c <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41aa9c:	2000      	movs	r0, #0
  41aa9e:	4b7c      	ldr	r3, [pc, #496]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aaa0:	4798      	blx	r3
  41aaa2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aaa6:	0080      	lsls	r0, r0, #2
  41aaa8:	3050      	adds	r0, #80	; 0x50
  41aaaa:	4b7a      	ldr	r3, [pc, #488]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aaac:	fb83 2300 	smull	r2, r3, r3, r0
  41aab0:	17c2      	asrs	r2, r0, #31
  41aab2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aab6:	b212      	sxth	r2, r2
  41aab8:	e6bb      	b.n	41a832 <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41aaba:	2000      	movs	r0, #0
  41aabc:	4b74      	ldr	r3, [pc, #464]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aabe:	4798      	blx	r3
  41aac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aac4:	0080      	lsls	r0, r0, #2
  41aac6:	3050      	adds	r0, #80	; 0x50
  41aac8:	4b72      	ldr	r3, [pc, #456]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aaca:	fb83 2300 	smull	r2, r3, r3, r0
  41aace:	17c2      	asrs	r2, r0, #31
  41aad0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aad4:	b212      	sxth	r2, r2
  41aad6:	e6bf      	b.n	41a858 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41aad8:	2000      	movs	r0, #0
  41aada:	4b6d      	ldr	r3, [pc, #436]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aadc:	4798      	blx	r3
  41aade:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41aae2:	3050      	adds	r0, #80	; 0x50
  41aae4:	4b6b      	ldr	r3, [pc, #428]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41aae6:	fb83 2300 	smull	r2, r3, r3, r0
  41aaea:	17c2      	asrs	r2, r0, #31
  41aaec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aaf0:	b212      	sxth	r2, r2
  41aaf2:	e6e6      	b.n	41a8c2 <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41aaf4:	2000      	movs	r0, #0
  41aaf6:	4b66      	ldr	r3, [pc, #408]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41aaf8:	4798      	blx	r3
  41aafa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aafe:	3050      	adds	r0, #80	; 0x50
  41ab00:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab04:	da01      	bge.n	41ab0a <tabview_win_shared_init+0x466>
  41ab06:	2201      	movs	r2, #1
  41ab08:	e6fe      	b.n	41a908 <tabview_win_shared_init+0x264>
  41ab0a:	2000      	movs	r0, #0
  41ab0c:	4b60      	ldr	r3, [pc, #384]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab0e:	4798      	blx	r3
  41ab10:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab14:	3050      	adds	r0, #80	; 0x50
  41ab16:	4b5f      	ldr	r3, [pc, #380]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ab18:	fb83 2300 	smull	r2, r3, r3, r0
  41ab1c:	17c2      	asrs	r2, r0, #31
  41ab1e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ab22:	b212      	sxth	r2, r2
  41ab24:	e6f0      	b.n	41a908 <tabview_win_shared_init+0x264>
  41ab26:	2000      	movs	r0, #0
  41ab28:	4b59      	ldr	r3, [pc, #356]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab2a:	4798      	blx	r3
  41ab2c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab30:	0040      	lsls	r0, r0, #1
  41ab32:	3050      	adds	r0, #80	; 0x50
  41ab34:	4b57      	ldr	r3, [pc, #348]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ab36:	fb83 2300 	smull	r2, r3, r3, r0
  41ab3a:	17c2      	asrs	r2, r0, #31
  41ab3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ab40:	b212      	sxth	r2, r2
  41ab42:	e6e1      	b.n	41a908 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ab44:	2000      	movs	r0, #0
  41ab46:	4b52      	ldr	r3, [pc, #328]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab48:	4798      	blx	r3
  41ab4a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab4e:	3050      	adds	r0, #80	; 0x50
  41ab50:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab54:	da01      	bge.n	41ab5a <tabview_win_shared_init+0x4b6>
  41ab56:	2201      	movs	r2, #1
  41ab58:	e6ef      	b.n	41a93a <tabview_win_shared_init+0x296>
  41ab5a:	2000      	movs	r0, #0
  41ab5c:	4b4c      	ldr	r3, [pc, #304]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab5e:	4798      	blx	r3
  41ab60:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab64:	3050      	adds	r0, #80	; 0x50
  41ab66:	4b4b      	ldr	r3, [pc, #300]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ab68:	fb83 2300 	smull	r2, r3, r3, r0
  41ab6c:	17c2      	asrs	r2, r0, #31
  41ab6e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ab72:	b212      	sxth	r2, r2
  41ab74:	e6e1      	b.n	41a93a <tabview_win_shared_init+0x296>
  41ab76:	2000      	movs	r0, #0
  41ab78:	4b45      	ldr	r3, [pc, #276]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab7a:	4798      	blx	r3
  41ab7c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab80:	0040      	lsls	r0, r0, #1
  41ab82:	3050      	adds	r0, #80	; 0x50
  41ab84:	4b43      	ldr	r3, [pc, #268]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ab86:	fb83 2300 	smull	r2, r3, r3, r0
  41ab8a:	17c2      	asrs	r2, r0, #31
  41ab8c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ab90:	b212      	sxth	r2, r2
  41ab92:	e6d2      	b.n	41a93a <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ab94:	2000      	movs	r0, #0
  41ab96:	4b3e      	ldr	r3, [pc, #248]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ab98:	4798      	blx	r3
  41ab9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ab9e:	3050      	adds	r0, #80	; 0x50
  41aba0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aba4:	da01      	bge.n	41abaa <tabview_win_shared_init+0x506>
  41aba6:	2201      	movs	r2, #1
  41aba8:	e6e0      	b.n	41a96c <tabview_win_shared_init+0x2c8>
  41abaa:	2000      	movs	r0, #0
  41abac:	4b38      	ldr	r3, [pc, #224]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41abae:	4798      	blx	r3
  41abb0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abb4:	3050      	adds	r0, #80	; 0x50
  41abb6:	4b37      	ldr	r3, [pc, #220]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41abb8:	fb83 2300 	smull	r2, r3, r3, r0
  41abbc:	17c2      	asrs	r2, r0, #31
  41abbe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41abc2:	b212      	sxth	r2, r2
  41abc4:	e6d2      	b.n	41a96c <tabview_win_shared_init+0x2c8>
  41abc6:	2000      	movs	r0, #0
  41abc8:	4b31      	ldr	r3, [pc, #196]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41abca:	4798      	blx	r3
  41abcc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abd0:	0040      	lsls	r0, r0, #1
  41abd2:	3050      	adds	r0, #80	; 0x50
  41abd4:	4b2f      	ldr	r3, [pc, #188]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41abd6:	fb83 2300 	smull	r2, r3, r3, r0
  41abda:	17c2      	asrs	r2, r0, #31
  41abdc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41abe0:	b212      	sxth	r2, r2
  41abe2:	e6c3      	b.n	41a96c <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41abe4:	2000      	movs	r0, #0
  41abe6:	4b2a      	ldr	r3, [pc, #168]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41abe8:	4798      	blx	r3
  41abea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41abee:	3050      	adds	r0, #80	; 0x50
  41abf0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abf4:	da01      	bge.n	41abfa <tabview_win_shared_init+0x556>
  41abf6:	2201      	movs	r2, #1
  41abf8:	e6e2      	b.n	41a9c0 <tabview_win_shared_init+0x31c>
  41abfa:	2000      	movs	r0, #0
  41abfc:	4b24      	ldr	r3, [pc, #144]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41abfe:	4798      	blx	r3
  41ac00:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac04:	3050      	adds	r0, #80	; 0x50
  41ac06:	4b23      	ldr	r3, [pc, #140]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ac08:	fb83 2300 	smull	r2, r3, r3, r0
  41ac0c:	17c2      	asrs	r2, r0, #31
  41ac0e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ac12:	b212      	sxth	r2, r2
  41ac14:	e6d4      	b.n	41a9c0 <tabview_win_shared_init+0x31c>
  41ac16:	2000      	movs	r0, #0
  41ac18:	4b1d      	ldr	r3, [pc, #116]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ac1a:	4798      	blx	r3
  41ac1c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac20:	0040      	lsls	r0, r0, #1
  41ac22:	3050      	adds	r0, #80	; 0x50
  41ac24:	4b1b      	ldr	r3, [pc, #108]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ac26:	fb83 2300 	smull	r2, r3, r3, r0
  41ac2a:	17c2      	asrs	r2, r0, #31
  41ac2c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ac30:	b212      	sxth	r2, r2
  41ac32:	e6c5      	b.n	41a9c0 <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ac34:	2000      	movs	r0, #0
  41ac36:	4b16      	ldr	r3, [pc, #88]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ac38:	4798      	blx	r3
  41ac3a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac3e:	3050      	adds	r0, #80	; 0x50
  41ac40:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac44:	da01      	bge.n	41ac4a <tabview_win_shared_init+0x5a6>
  41ac46:	2201      	movs	r2, #1
  41ac48:	e6d3      	b.n	41a9f2 <tabview_win_shared_init+0x34e>
  41ac4a:	2000      	movs	r0, #0
  41ac4c:	4b10      	ldr	r3, [pc, #64]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ac4e:	4798      	blx	r3
  41ac50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac54:	3050      	adds	r0, #80	; 0x50
  41ac56:	4b0f      	ldr	r3, [pc, #60]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ac58:	fb83 2300 	smull	r2, r3, r3, r0
  41ac5c:	17c2      	asrs	r2, r0, #31
  41ac5e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ac62:	b212      	sxth	r2, r2
  41ac64:	e6c5      	b.n	41a9f2 <tabview_win_shared_init+0x34e>
  41ac66:	2000      	movs	r0, #0
  41ac68:	4b09      	ldr	r3, [pc, #36]	; (41ac90 <tabview_win_shared_init+0x5ec>)
  41ac6a:	4798      	blx	r3
  41ac6c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac70:	0040      	lsls	r0, r0, #1
  41ac72:	3050      	adds	r0, #80	; 0x50
  41ac74:	4b07      	ldr	r3, [pc, #28]	; (41ac94 <tabview_win_shared_init+0x5f0>)
  41ac76:	fb83 2300 	smull	r2, r3, r3, r0
  41ac7a:	17c2      	asrs	r2, r0, #31
  41ac7c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ac80:	b212      	sxth	r2, r2
  41ac82:	e6b6      	b.n	41a9f2 <tabview_win_shared_init+0x34e>
  41ac84:	00409a6d 	.word	0x00409a6d
  41ac88:	20414798 	.word	0x20414798
  41ac8c:	0041447d 	.word	0x0041447d
  41ac90:	0041445d 	.word	0x0041445d
  41ac94:	66666667 	.word	0x66666667

0041ac98 <led_init>:
{
  41ac98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41ac9c:	4c3a      	ldr	r4, [pc, #232]	; (41ad88 <led_init+0xf0>)
  41ac9e:	6820      	ldr	r0, [r4, #0]
  41aca0:	3070      	adds	r0, #112	; 0x70
  41aca2:	4b3a      	ldr	r3, [pc, #232]	; (41ad8c <led_init+0xf4>)
  41aca4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aca6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aca8:	22ff      	movs	r2, #255	; 0xff
  41acaa:	212c      	movs	r1, #44	; 0x2c
  41acac:	3070      	adds	r0, #112	; 0x70
  41acae:	4d38      	ldr	r5, [pc, #224]	; (41ad90 <led_init+0xf8>)
  41acb0:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41acb2:	6820      	ldr	r0, [r4, #0]
  41acb4:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41ada4 <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41acb8:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41acbc:	2129      	movs	r1, #41	; 0x29
  41acbe:	3070      	adds	r0, #112	; 0x70
  41acc0:	4f34      	ldr	r7, [pc, #208]	; (41ad94 <led_init+0xfc>)
  41acc2:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41acc4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41acc6:	2202      	movs	r2, #2
  41acc8:	2130      	movs	r1, #48	; 0x30
  41acca:	3070      	adds	r0, #112	; 0x70
  41accc:	4e32      	ldr	r6, [pc, #200]	; (41ad98 <led_init+0x100>)
  41acce:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41acd0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41acd2:	227f      	movs	r2, #127	; 0x7f
  41acd4:	213c      	movs	r1, #60	; 0x3c
  41acd6:	3070      	adds	r0, #112	; 0x70
  41acd8:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41acda:	6825      	ldr	r5, [r4, #0]
  41acdc:	3570      	adds	r5, #112	; 0x70
  41acde:	214c      	movs	r1, #76	; 0x4c
  41ace0:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41ace4:	4b2d      	ldr	r3, [pc, #180]	; (41ad9c <led_init+0x104>)
  41ace6:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41ace8:	4602      	mov	r2, r0
  41acea:	2139      	movs	r1, #57	; 0x39
  41acec:	4628      	mov	r0, r5
  41acee:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41acf0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41acf2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41acf6:	2101      	movs	r1, #1
  41acf8:	3070      	adds	r0, #112	; 0x70
  41acfa:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41acfc:	6824      	ldr	r4, [r4, #0]
  41acfe:	3470      	adds	r4, #112	; 0x70
  41ad00:	2000      	movs	r0, #0
  41ad02:	4b27      	ldr	r3, [pc, #156]	; (41ada0 <led_init+0x108>)
  41ad04:	4798      	blx	r3
  41ad06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad0a:	3050      	adds	r0, #80	; 0x50
  41ad0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad10:	da1e      	bge.n	41ad50 <led_init+0xb8>
  41ad12:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41ad14:	2150      	movs	r1, #80	; 0x50
  41ad16:	4620      	mov	r0, r4
  41ad18:	4b1f      	ldr	r3, [pc, #124]	; (41ad98 <led_init+0x100>)
  41ad1a:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41ad1c:	4c1a      	ldr	r4, [pc, #104]	; (41ad88 <led_init+0xf0>)
  41ad1e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41ad20:	4b20      	ldr	r3, [pc, #128]	; (41ada4 <led_init+0x10c>)
  41ad22:	899a      	ldrh	r2, [r3, #12]
  41ad24:	2159      	movs	r1, #89	; 0x59
  41ad26:	3070      	adds	r0, #112	; 0x70
  41ad28:	4b1a      	ldr	r3, [pc, #104]	; (41ad94 <led_init+0xfc>)
  41ad2a:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41ad2c:	6824      	ldr	r4, [r4, #0]
  41ad2e:	3470      	adds	r4, #112	; 0x70
  41ad30:	2000      	movs	r0, #0
  41ad32:	4b1b      	ldr	r3, [pc, #108]	; (41ada0 <led_init+0x108>)
  41ad34:	4798      	blx	r3
  41ad36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ad3a:	3050      	adds	r0, #80	; 0x50
  41ad3c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad40:	da14      	bge.n	41ad6c <led_init+0xd4>
  41ad42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41ad44:	2153      	movs	r1, #83	; 0x53
  41ad46:	4620      	mov	r0, r4
  41ad48:	4b13      	ldr	r3, [pc, #76]	; (41ad98 <led_init+0x100>)
  41ad4a:	4798      	blx	r3
  41ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41ad50:	2000      	movs	r0, #0
  41ad52:	4b13      	ldr	r3, [pc, #76]	; (41ada0 <led_init+0x108>)
  41ad54:	4798      	blx	r3
  41ad56:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad5a:	3050      	adds	r0, #80	; 0x50
  41ad5c:	4b12      	ldr	r3, [pc, #72]	; (41ada8 <led_init+0x110>)
  41ad5e:	fb83 2300 	smull	r2, r3, r3, r0
  41ad62:	17c2      	asrs	r2, r0, #31
  41ad64:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ad68:	b212      	sxth	r2, r2
  41ad6a:	e7d3      	b.n	41ad14 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41ad6c:	2000      	movs	r0, #0
  41ad6e:	4b0c      	ldr	r3, [pc, #48]	; (41ada0 <led_init+0x108>)
  41ad70:	4798      	blx	r3
  41ad72:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ad76:	3050      	adds	r0, #80	; 0x50
  41ad78:	4b0b      	ldr	r3, [pc, #44]	; (41ada8 <led_init+0x110>)
  41ad7a:	fb83 2300 	smull	r2, r3, r3, r0
  41ad7e:	17c2      	asrs	r2, r0, #31
  41ad80:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ad84:	b212      	sxth	r2, r2
  41ad86:	e7dd      	b.n	41ad44 <led_init+0xac>
  41ad88:	20414798 	.word	0x20414798
  41ad8c:	00417515 	.word	0x00417515
  41ad90:	00409d8d 	.word	0x00409d8d
  41ad94:	00409bfd 	.word	0x00409bfd
  41ad98:	00409a6d 	.word	0x00409a6d
  41ad9c:	00415425 	.word	0x00415425
  41ada0:	0041445d 	.word	0x0041445d
  41ada4:	2041479c 	.word	0x2041479c
  41ada8:	66666667 	.word	0x66666667

0041adac <basic_init>:
{
  41adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41adae:	4cc2      	ldr	r4, [pc, #776]	; (41b0b8 <basic_init+0x30c>)
  41adb0:	6820      	ldr	r0, [r4, #0]
  41adb2:	4bc2      	ldr	r3, [pc, #776]	; (41b0bc <basic_init+0x310>)
  41adb4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41adb6:	22ff      	movs	r2, #255	; 0xff
  41adb8:	212c      	movs	r1, #44	; 0x2c
  41adba:	6820      	ldr	r0, [r4, #0]
  41adbc:	4bc0      	ldr	r3, [pc, #768]	; (41b0c0 <basic_init+0x314>)
  41adbe:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41adc0:	6820      	ldr	r0, [r4, #0]
  41adc2:	4bc0      	ldr	r3, [pc, #768]	; (41b0c4 <basic_init+0x318>)
  41adc4:	6a1b      	ldr	r3, [r3, #32]
  41adc6:	f013 0f02 	tst.w	r3, #2
  41adca:	f000 8742 	beq.w	41bc52 <basic_init+0xea6>
  41adce:	f04f 0207 	mov.w	r2, #7
  41add2:	231d      	movs	r3, #29
  41add4:	f363 02c7 	bfi	r2, r3, #3, #5
  41add8:	231e      	movs	r3, #30
  41adda:	f363 220c 	bfi	r2, r3, #8, #5
  41adde:	2303      	movs	r3, #3
  41ade0:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ade4:	2129      	movs	r1, #41	; 0x29
  41ade6:	4bb8      	ldr	r3, [pc, #736]	; (41b0c8 <basic_init+0x31c>)
  41ade8:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41adea:	4bb3      	ldr	r3, [pc, #716]	; (41b0b8 <basic_init+0x30c>)
  41adec:	6818      	ldr	r0, [r3, #0]
  41adee:	4bb5      	ldr	r3, [pc, #724]	; (41b0c4 <basic_init+0x318>)
  41adf0:	6a1b      	ldr	r3, [r3, #32]
  41adf2:	f013 0f02 	tst.w	r3, #2
  41adf6:	f000 873b 	beq.w	41bc70 <basic_init+0xec4>
  41adfa:	f04f 0200 	mov.w	r2, #0
  41adfe:	2301      	movs	r3, #1
  41ae00:	f363 0202 	bfi	r2, r3, #0, #3
  41ae04:	2307      	movs	r3, #7
  41ae06:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae0a:	2308      	movs	r3, #8
  41ae0c:	f363 220c 	bfi	r2, r3, #8, #5
  41ae10:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ae14:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ae18:	f248 0189 	movw	r1, #32905	; 0x8089
  41ae1c:	4baa      	ldr	r3, [pc, #680]	; (41b0c8 <basic_init+0x31c>)
  41ae1e:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41ae20:	4ba5      	ldr	r3, [pc, #660]	; (41b0b8 <basic_init+0x30c>)
  41ae22:	6818      	ldr	r0, [r3, #0]
  41ae24:	4ba7      	ldr	r3, [pc, #668]	; (41b0c4 <basic_init+0x318>)
  41ae26:	6a1b      	ldr	r3, [r3, #32]
  41ae28:	f013 0f02 	tst.w	r3, #2
  41ae2c:	f000 872d 	beq.w	41bc8a <basic_init+0xede>
  41ae30:	f04f 0200 	mov.w	r2, #0
  41ae34:	2301      	movs	r3, #1
  41ae36:	f363 0202 	bfi	r2, r3, #0, #3
  41ae3a:	2307      	movs	r3, #7
  41ae3c:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae40:	2308      	movs	r3, #8
  41ae42:	f363 220c 	bfi	r2, r3, #8, #5
  41ae46:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ae4a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41ae4e:	2179      	movs	r1, #121	; 0x79
  41ae50:	4b9d      	ldr	r3, [pc, #628]	; (41b0c8 <basic_init+0x31c>)
  41ae52:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41ae54:	4b98      	ldr	r3, [pc, #608]	; (41b0b8 <basic_init+0x30c>)
  41ae56:	6818      	ldr	r0, [r3, #0]
  41ae58:	4b9a      	ldr	r3, [pc, #616]	; (41b0c4 <basic_init+0x318>)
  41ae5a:	6a1b      	ldr	r3, [r3, #32]
  41ae5c:	f013 0f02 	tst.w	r3, #2
  41ae60:	f000 8720 	beq.w	41bca4 <basic_init+0xef8>
  41ae64:	f04f 0200 	mov.w	r2, #0
  41ae68:	2301      	movs	r3, #1
  41ae6a:	f363 0202 	bfi	r2, r3, #0, #3
  41ae6e:	2307      	movs	r3, #7
  41ae70:	f363 02c7 	bfi	r2, r3, #3, #5
  41ae74:	2308      	movs	r3, #8
  41ae76:	f363 220c 	bfi	r2, r3, #8, #5
  41ae7a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ae7e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41ae82:	f248 018a 	movw	r1, #32906	; 0x808a
  41ae86:	4e90      	ldr	r6, [pc, #576]	; (41b0c8 <basic_init+0x31c>)
  41ae88:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41ae8a:	4c8b      	ldr	r4, [pc, #556]	; (41b0b8 <basic_init+0x30c>)
  41ae8c:	4d8d      	ldr	r5, [pc, #564]	; (41b0c4 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41ae8e:	89aa      	ldrh	r2, [r5, #12]
  41ae90:	f248 018b 	movw	r1, #32907	; 0x808b
  41ae94:	6820      	ldr	r0, [r4, #0]
  41ae96:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41ae98:	696a      	ldr	r2, [r5, #20]
  41ae9a:	217e      	movs	r1, #126	; 0x7e
  41ae9c:	6820      	ldr	r0, [r4, #0]
  41ae9e:	4b8b      	ldr	r3, [pc, #556]	; (41b0cc <basic_init+0x320>)
  41aea0:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41aea2:	6820      	ldr	r0, [r4, #0]
  41aea4:	3004      	adds	r0, #4
  41aea6:	4b85      	ldr	r3, [pc, #532]	; (41b0bc <basic_init+0x310>)
  41aea8:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41aeaa:	6824      	ldr	r4, [r4, #0]
  41aeac:	3404      	adds	r4, #4
  41aeae:	2000      	movs	r0, #0
  41aeb0:	4b87      	ldr	r3, [pc, #540]	; (41b0d0 <basic_init+0x324>)
  41aeb2:	4798      	blx	r3
  41aeb4:	300a      	adds	r0, #10
  41aeb6:	00c0      	lsls	r0, r0, #3
  41aeb8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aebc:	f280 86ff 	bge.w	41bcbe <basic_init+0xf12>
  41aec0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41aec2:	2101      	movs	r1, #1
  41aec4:	4620      	mov	r0, r4
  41aec6:	4b83      	ldr	r3, [pc, #524]	; (41b0d4 <basic_init+0x328>)
  41aec8:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aeca:	4c7b      	ldr	r4, [pc, #492]	; (41b0b8 <basic_init+0x30c>)
  41aecc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aece:	22ff      	movs	r2, #255	; 0xff
  41aed0:	212c      	movs	r1, #44	; 0x2c
  41aed2:	3004      	adds	r0, #4
  41aed4:	4b7a      	ldr	r3, [pc, #488]	; (41b0c0 <basic_init+0x314>)
  41aed6:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41aed8:	6820      	ldr	r0, [r4, #0]
  41aeda:	3004      	adds	r0, #4
  41aedc:	4b79      	ldr	r3, [pc, #484]	; (41b0c4 <basic_init+0x318>)
  41aede:	6a1b      	ldr	r3, [r3, #32]
  41aee0:	f013 0f02 	tst.w	r3, #2
  41aee4:	f000 86f9 	beq.w	41bcda <basic_init+0xf2e>
  41aee8:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aeec:	2129      	movs	r1, #41	; 0x29
  41aeee:	4b76      	ldr	r3, [pc, #472]	; (41b0c8 <basic_init+0x31c>)
  41aef0:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41aef2:	4b71      	ldr	r3, [pc, #452]	; (41b0b8 <basic_init+0x30c>)
  41aef4:	6818      	ldr	r0, [r3, #0]
  41aef6:	3004      	adds	r0, #4
  41aef8:	4b72      	ldr	r3, [pc, #456]	; (41b0c4 <basic_init+0x318>)
  41aefa:	6a1b      	ldr	r3, [r3, #32]
  41aefc:	f013 0f02 	tst.w	r3, #2
  41af00:	f000 86fa 	beq.w	41bcf8 <basic_init+0xf4c>
  41af04:	f04f 0200 	mov.w	r2, #0
  41af08:	2306      	movs	r3, #6
  41af0a:	f363 0202 	bfi	r2, r3, #0, #3
  41af0e:	231a      	movs	r3, #26
  41af10:	f363 02c7 	bfi	r2, r3, #3, #5
  41af14:	231c      	movs	r3, #28
  41af16:	f363 220c 	bfi	r2, r3, #8, #5
  41af1a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41af1e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41af22:	2139      	movs	r1, #57	; 0x39
  41af24:	4b68      	ldr	r3, [pc, #416]	; (41b0c8 <basic_init+0x31c>)
  41af26:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41af28:	4b66      	ldr	r3, [pc, #408]	; (41b0c4 <basic_init+0x318>)
  41af2a:	6a1b      	ldr	r3, [r3, #32]
  41af2c:	f013 0f20 	tst.w	r3, #32
  41af30:	f000 86f2 	beq.w	41bd18 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41af34:	4c60      	ldr	r4, [pc, #384]	; (41b0b8 <basic_init+0x30c>)
  41af36:	6820      	ldr	r0, [r4, #0]
  41af38:	4b62      	ldr	r3, [pc, #392]	; (41b0c4 <basic_init+0x318>)
  41af3a:	89da      	ldrh	r2, [r3, #14]
  41af3c:	f240 4139 	movw	r1, #1081	; 0x439
  41af40:	3004      	adds	r0, #4
  41af42:	4b61      	ldr	r3, [pc, #388]	; (41b0c8 <basic_init+0x31c>)
  41af44:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41af46:	6824      	ldr	r4, [r4, #0]
  41af48:	3404      	adds	r4, #4
  41af4a:	2000      	movs	r0, #0
  41af4c:	4b60      	ldr	r3, [pc, #384]	; (41b0d0 <basic_init+0x324>)
  41af4e:	4798      	blx	r3
  41af50:	3028      	adds	r0, #40	; 0x28
  41af52:	0040      	lsls	r0, r0, #1
  41af54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af58:	f280 86e9 	bge.w	41bd2e <basic_init+0xf82>
  41af5c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41af5e:	2130      	movs	r1, #48	; 0x30
  41af60:	4620      	mov	r0, r4
  41af62:	4d5c      	ldr	r5, [pc, #368]	; (41b0d4 <basic_init+0x328>)
  41af64:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41af66:	4c54      	ldr	r4, [pc, #336]	; (41b0b8 <basic_init+0x30c>)
  41af68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41af6a:	2201      	movs	r2, #1
  41af6c:	2133      	movs	r1, #51	; 0x33
  41af6e:	3004      	adds	r0, #4
  41af70:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41af72:	6820      	ldr	r0, [r4, #0]
  41af74:	3004      	adds	r0, #4
  41af76:	4b53      	ldr	r3, [pc, #332]	; (41b0c4 <basic_init+0x318>)
  41af78:	6a1b      	ldr	r3, [r3, #32]
  41af7a:	f013 0f02 	tst.w	r3, #2
  41af7e:	f000 86e4 	beq.w	41bd4a <basic_init+0xf9e>
  41af82:	f04f 0200 	mov.w	r2, #0
  41af86:	2301      	movs	r3, #1
  41af88:	f363 0202 	bfi	r2, r3, #0, #3
  41af8c:	2307      	movs	r3, #7
  41af8e:	f363 02c7 	bfi	r2, r3, #3, #5
  41af92:	2308      	movs	r3, #8
  41af94:	f363 220c 	bfi	r2, r3, #8, #5
  41af98:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41af9c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41afa0:	f248 0189 	movw	r1, #32905	; 0x8089
  41afa4:	4b48      	ldr	r3, [pc, #288]	; (41b0c8 <basic_init+0x31c>)
  41afa6:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41afa8:	4d43      	ldr	r5, [pc, #268]	; (41b0b8 <basic_init+0x30c>)
  41afaa:	6828      	ldr	r0, [r5, #0]
  41afac:	4c45      	ldr	r4, [pc, #276]	; (41b0c4 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41afae:	6962      	ldr	r2, [r4, #20]
  41afb0:	217e      	movs	r1, #126	; 0x7e
  41afb2:	3004      	adds	r0, #4
  41afb4:	4b45      	ldr	r3, [pc, #276]	; (41b0cc <basic_init+0x320>)
  41afb6:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41afb8:	6828      	ldr	r0, [r5, #0]
  41afba:	3004      	adds	r0, #4
  41afbc:	6a23      	ldr	r3, [r4, #32]
  41afbe:	f013 0f02 	tst.w	r3, #2
  41afc2:	f000 86c6 	beq.w	41bd52 <basic_init+0xfa6>
  41afc6:	f04f 0200 	mov.w	r2, #0
  41afca:	2301      	movs	r3, #1
  41afcc:	f363 0202 	bfi	r2, r3, #0, #3
  41afd0:	2307      	movs	r3, #7
  41afd2:	f363 02c7 	bfi	r2, r3, #3, #5
  41afd6:	2308      	movs	r3, #8
  41afd8:	f363 220c 	bfi	r2, r3, #8, #5
  41afdc:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41afe0:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41afe4:	2179      	movs	r1, #121	; 0x79
  41afe6:	4b38      	ldr	r3, [pc, #224]	; (41b0c8 <basic_init+0x31c>)
  41afe8:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41afea:	4b33      	ldr	r3, [pc, #204]	; (41b0b8 <basic_init+0x30c>)
  41afec:	6818      	ldr	r0, [r3, #0]
  41afee:	3004      	adds	r0, #4
  41aff0:	4b34      	ldr	r3, [pc, #208]	; (41b0c4 <basic_init+0x318>)
  41aff2:	6a1b      	ldr	r3, [r3, #32]
  41aff4:	f013 0f02 	tst.w	r3, #2
  41aff8:	f000 86af 	beq.w	41bd5a <basic_init+0xfae>
  41affc:	f04f 0200 	mov.w	r2, #0
  41b000:	2301      	movs	r3, #1
  41b002:	f363 0202 	bfi	r2, r3, #0, #3
  41b006:	2307      	movs	r3, #7
  41b008:	f363 02c7 	bfi	r2, r3, #3, #5
  41b00c:	2308      	movs	r3, #8
  41b00e:	f363 220c 	bfi	r2, r3, #8, #5
  41b012:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b016:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b01a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b01e:	4b2a      	ldr	r3, [pc, #168]	; (41b0c8 <basic_init+0x31c>)
  41b020:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b022:	4b25      	ldr	r3, [pc, #148]	; (41b0b8 <basic_init+0x30c>)
  41b024:	6818      	ldr	r0, [r3, #0]
  41b026:	3004      	adds	r0, #4
  41b028:	4b26      	ldr	r3, [pc, #152]	; (41b0c4 <basic_init+0x318>)
  41b02a:	6a1b      	ldr	r3, [r3, #32]
  41b02c:	f013 0f02 	tst.w	r3, #2
  41b030:	f000 8697 	beq.w	41bd62 <basic_init+0xfb6>
  41b034:	f04f 0200 	mov.w	r2, #0
  41b038:	2301      	movs	r3, #1
  41b03a:	f363 0202 	bfi	r2, r3, #0, #3
  41b03e:	2307      	movs	r3, #7
  41b040:	f363 02c7 	bfi	r2, r3, #3, #5
  41b044:	2308      	movs	r3, #8
  41b046:	f363 220c 	bfi	r2, r3, #8, #5
  41b04a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b04e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41b052:	2199      	movs	r1, #153	; 0x99
  41b054:	4b1c      	ldr	r3, [pc, #112]	; (41b0c8 <basic_init+0x31c>)
  41b056:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41b058:	4c17      	ldr	r4, [pc, #92]	; (41b0b8 <basic_init+0x30c>)
  41b05a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41b05c:	2201      	movs	r2, #1
  41b05e:	2190      	movs	r1, #144	; 0x90
  41b060:	3004      	adds	r0, #4
  41b062:	4b1c      	ldr	r3, [pc, #112]	; (41b0d4 <basic_init+0x328>)
  41b064:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b066:	6825      	ldr	r5, [r4, #0]
  41b068:	3504      	adds	r5, #4
  41b06a:	2000      	movs	r0, #0
  41b06c:	4b1a      	ldr	r3, [pc, #104]	; (41b0d8 <basic_init+0x32c>)
  41b06e:	4798      	blx	r3
  41b070:	2801      	cmp	r0, #1
  41b072:	f240 867a 	bls.w	41bd6a <basic_init+0xfbe>
  41b076:	2000      	movs	r0, #0
  41b078:	4b15      	ldr	r3, [pc, #84]	; (41b0d0 <basic_init+0x324>)
  41b07a:	4798      	blx	r3
  41b07c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b080:	0040      	lsls	r0, r0, #1
  41b082:	3050      	adds	r0, #80	; 0x50
  41b084:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b088:	f280 868a 	bge.w	41bda0 <basic_init+0xff4>
  41b08c:	2401      	movs	r4, #1
  41b08e:	2000      	movs	r0, #0
  41b090:	4b0f      	ldr	r3, [pc, #60]	; (41b0d0 <basic_init+0x324>)
  41b092:	4798      	blx	r3
  41b094:	3028      	adds	r0, #40	; 0x28
  41b096:	0040      	lsls	r0, r0, #1
  41b098:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b09c:	f280 86a2 	bge.w	41bde4 <basic_init+0x1038>
  41b0a0:	2201      	movs	r2, #1
  41b0a2:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b0a4:	b212      	sxth	r2, r2
  41b0a6:	2112      	movs	r1, #18
  41b0a8:	4628      	mov	r0, r5
  41b0aa:	4b0a      	ldr	r3, [pc, #40]	; (41b0d4 <basic_init+0x328>)
  41b0ac:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b0ae:	4b02      	ldr	r3, [pc, #8]	; (41b0b8 <basic_init+0x30c>)
  41b0b0:	681d      	ldr	r5, [r3, #0]
  41b0b2:	3504      	adds	r5, #4
  41b0b4:	e012      	b.n	41b0dc <basic_init+0x330>
  41b0b6:	bf00      	nop
  41b0b8:	20414798 	.word	0x20414798
  41b0bc:	00417515 	.word	0x00417515
  41b0c0:	00409d8d 	.word	0x00409d8d
  41b0c4:	2041479c 	.word	0x2041479c
  41b0c8:	00409bfd 	.word	0x00409bfd
  41b0cc:	00409f1d 	.word	0x00409f1d
  41b0d0:	0041445d 	.word	0x0041445d
  41b0d4:	00409a6d 	.word	0x00409a6d
  41b0d8:	0041447d 	.word	0x0041447d
  41b0dc:	2000      	movs	r0, #0
  41b0de:	4bc2      	ldr	r3, [pc, #776]	; (41b3e8 <basic_init+0x63c>)
  41b0e0:	4798      	blx	r3
  41b0e2:	2801      	cmp	r0, #1
  41b0e4:	f240 868c 	bls.w	41be00 <basic_init+0x1054>
  41b0e8:	2000      	movs	r0, #0
  41b0ea:	4bc0      	ldr	r3, [pc, #768]	; (41b3ec <basic_init+0x640>)
  41b0ec:	4798      	blx	r3
  41b0ee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0f2:	0040      	lsls	r0, r0, #1
  41b0f4:	3050      	adds	r0, #80	; 0x50
  41b0f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0fa:	f280 869c 	bge.w	41be36 <basic_init+0x108a>
  41b0fe:	2401      	movs	r4, #1
  41b100:	2000      	movs	r0, #0
  41b102:	4bba      	ldr	r3, [pc, #744]	; (41b3ec <basic_init+0x640>)
  41b104:	4798      	blx	r3
  41b106:	3028      	adds	r0, #40	; 0x28
  41b108:	0040      	lsls	r0, r0, #1
  41b10a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b10e:	f280 86a2 	bge.w	41be56 <basic_init+0x10aa>
  41b112:	2201      	movs	r2, #1
  41b114:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b116:	b212      	sxth	r2, r2
  41b118:	2113      	movs	r1, #19
  41b11a:	4628      	mov	r0, r5
  41b11c:	4bb4      	ldr	r3, [pc, #720]	; (41b3f0 <basic_init+0x644>)
  41b11e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b120:	4bb4      	ldr	r3, [pc, #720]	; (41b3f4 <basic_init+0x648>)
  41b122:	681d      	ldr	r5, [r3, #0]
  41b124:	3504      	adds	r5, #4
  41b126:	2000      	movs	r0, #0
  41b128:	4baf      	ldr	r3, [pc, #700]	; (41b3e8 <basic_init+0x63c>)
  41b12a:	4798      	blx	r3
  41b12c:	2801      	cmp	r0, #1
  41b12e:	f240 86a0 	bls.w	41be72 <basic_init+0x10c6>
  41b132:	2000      	movs	r0, #0
  41b134:	4bad      	ldr	r3, [pc, #692]	; (41b3ec <basic_init+0x640>)
  41b136:	4798      	blx	r3
  41b138:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b13c:	0040      	lsls	r0, r0, #1
  41b13e:	3050      	adds	r0, #80	; 0x50
  41b140:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b144:	f280 86b0 	bge.w	41bea8 <basic_init+0x10fc>
  41b148:	2401      	movs	r4, #1
  41b14a:	2000      	movs	r0, #0
  41b14c:	4ba7      	ldr	r3, [pc, #668]	; (41b3ec <basic_init+0x640>)
  41b14e:	4798      	blx	r3
  41b150:	3028      	adds	r0, #40	; 0x28
  41b152:	0040      	lsls	r0, r0, #1
  41b154:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b158:	f280 86b6 	bge.w	41bec8 <basic_init+0x111c>
  41b15c:	2201      	movs	r2, #1
  41b15e:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b160:	b212      	sxth	r2, r2
  41b162:	2110      	movs	r1, #16
  41b164:	4628      	mov	r0, r5
  41b166:	4ba2      	ldr	r3, [pc, #648]	; (41b3f0 <basic_init+0x644>)
  41b168:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b16a:	4ba2      	ldr	r3, [pc, #648]	; (41b3f4 <basic_init+0x648>)
  41b16c:	681d      	ldr	r5, [r3, #0]
  41b16e:	3504      	adds	r5, #4
  41b170:	2000      	movs	r0, #0
  41b172:	4b9d      	ldr	r3, [pc, #628]	; (41b3e8 <basic_init+0x63c>)
  41b174:	4798      	blx	r3
  41b176:	2801      	cmp	r0, #1
  41b178:	f240 86b4 	bls.w	41bee4 <basic_init+0x1138>
  41b17c:	2000      	movs	r0, #0
  41b17e:	4b9b      	ldr	r3, [pc, #620]	; (41b3ec <basic_init+0x640>)
  41b180:	4798      	blx	r3
  41b182:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b186:	0040      	lsls	r0, r0, #1
  41b188:	3050      	adds	r0, #80	; 0x50
  41b18a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b18e:	f280 86c4 	bge.w	41bf1a <basic_init+0x116e>
  41b192:	2401      	movs	r4, #1
  41b194:	2000      	movs	r0, #0
  41b196:	4b95      	ldr	r3, [pc, #596]	; (41b3ec <basic_init+0x640>)
  41b198:	4798      	blx	r3
  41b19a:	3028      	adds	r0, #40	; 0x28
  41b19c:	0040      	lsls	r0, r0, #1
  41b19e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1a2:	f280 86ca 	bge.w	41bf3a <basic_init+0x118e>
  41b1a6:	2201      	movs	r2, #1
  41b1a8:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b1aa:	b212      	sxth	r2, r2
  41b1ac:	2111      	movs	r1, #17
  41b1ae:	4628      	mov	r0, r5
  41b1b0:	4b8f      	ldr	r3, [pc, #572]	; (41b3f0 <basic_init+0x644>)
  41b1b2:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41b1b4:	4b8f      	ldr	r3, [pc, #572]	; (41b3f4 <basic_init+0x648>)
  41b1b6:	681c      	ldr	r4, [r3, #0]
  41b1b8:	3404      	adds	r4, #4
  41b1ba:	2000      	movs	r0, #0
  41b1bc:	4b8a      	ldr	r3, [pc, #552]	; (41b3e8 <basic_init+0x63c>)
  41b1be:	4798      	blx	r3
  41b1c0:	2801      	cmp	r0, #1
  41b1c2:	f240 86c8 	bls.w	41bf56 <basic_init+0x11aa>
  41b1c6:	2000      	movs	r0, #0
  41b1c8:	4b88      	ldr	r3, [pc, #544]	; (41b3ec <basic_init+0x640>)
  41b1ca:	4798      	blx	r3
  41b1cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b1d0:	0040      	lsls	r0, r0, #1
  41b1d2:	3050      	adds	r0, #80	; 0x50
  41b1d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b1d8:	f280 86d8 	bge.w	41bf8c <basic_init+0x11e0>
  41b1dc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b1de:	2114      	movs	r1, #20
  41b1e0:	4620      	mov	r0, r4
  41b1e2:	4d83      	ldr	r5, [pc, #524]	; (41b3f0 <basic_init+0x644>)
  41b1e4:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b1e6:	4c83      	ldr	r4, [pc, #524]	; (41b3f4 <basic_init+0x648>)
  41b1e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b1ea:	2200      	movs	r2, #0
  41b1ec:	21b0      	movs	r1, #176	; 0xb0
  41b1ee:	3004      	adds	r0, #4
  41b1f0:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41b1f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b1f4:	2239      	movs	r2, #57	; 0x39
  41b1f6:	21b7      	movs	r1, #183	; 0xb7
  41b1f8:	3004      	adds	r0, #4
  41b1fa:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41b1fc:	6820      	ldr	r0, [r4, #0]
  41b1fe:	300c      	adds	r0, #12
  41b200:	4b7d      	ldr	r3, [pc, #500]	; (41b3f8 <basic_init+0x64c>)
  41b202:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41b204:	6820      	ldr	r0, [r4, #0]
  41b206:	1d01      	adds	r1, r0, #4
  41b208:	300c      	adds	r0, #12
  41b20a:	4b7c      	ldr	r3, [pc, #496]	; (41b3fc <basic_init+0x650>)
  41b20c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41b20e:	6820      	ldr	r0, [r4, #0]
  41b210:	300c      	adds	r0, #12
  41b212:	4b7b      	ldr	r3, [pc, #492]	; (41b400 <basic_init+0x654>)
  41b214:	6a1b      	ldr	r3, [r3, #32]
  41b216:	f013 0f02 	tst.w	r3, #2
  41b21a:	f000 86c7 	beq.w	41bfac <basic_init+0x1200>
  41b21e:	f04f 0200 	mov.w	r2, #0
  41b222:	2306      	movs	r3, #6
  41b224:	f363 0202 	bfi	r2, r3, #0, #3
  41b228:	231a      	movs	r3, #26
  41b22a:	f363 02c7 	bfi	r2, r3, #3, #5
  41b22e:	231b      	movs	r3, #27
  41b230:	f363 220c 	bfi	r2, r3, #8, #5
  41b234:	2305      	movs	r3, #5
  41b236:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b23a:	2129      	movs	r1, #41	; 0x29
  41b23c:	4b71      	ldr	r3, [pc, #452]	; (41b404 <basic_init+0x658>)
  41b23e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41b240:	4b6c      	ldr	r3, [pc, #432]	; (41b3f4 <basic_init+0x648>)
  41b242:	6818      	ldr	r0, [r3, #0]
  41b244:	300c      	adds	r0, #12
  41b246:	4b6e      	ldr	r3, [pc, #440]	; (41b400 <basic_init+0x654>)
  41b248:	6a1b      	ldr	r3, [r3, #32]
  41b24a:	f013 0f02 	tst.w	r3, #2
  41b24e:	f000 86bc 	beq.w	41bfca <basic_init+0x121e>
  41b252:	f04f 0207 	mov.w	r2, #7
  41b256:	231b      	movs	r3, #27
  41b258:	f363 02c7 	bfi	r2, r3, #3, #5
  41b25c:	231d      	movs	r3, #29
  41b25e:	f363 220c 	bfi	r2, r3, #8, #5
  41b262:	2301      	movs	r3, #1
  41b264:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b268:	2139      	movs	r1, #57	; 0x39
  41b26a:	4b66      	ldr	r3, [pc, #408]	; (41b404 <basic_init+0x658>)
  41b26c:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b26e:	4b61      	ldr	r3, [pc, #388]	; (41b3f4 <basic_init+0x648>)
  41b270:	6818      	ldr	r0, [r3, #0]
  41b272:	300c      	adds	r0, #12
  41b274:	4b62      	ldr	r3, [pc, #392]	; (41b400 <basic_init+0x654>)
  41b276:	6a1b      	ldr	r3, [r3, #32]
  41b278:	f013 0f02 	tst.w	r3, #2
  41b27c:	f000 86b3 	beq.w	41bfe6 <basic_init+0x123a>
  41b280:	f04f 0200 	mov.w	r2, #0
  41b284:	2302      	movs	r3, #2
  41b286:	f363 0202 	bfi	r2, r3, #0, #3
  41b28a:	2306      	movs	r3, #6
  41b28c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b290:	2309      	movs	r3, #9
  41b292:	f363 220c 	bfi	r2, r3, #8, #5
  41b296:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b29a:	f248 0189 	movw	r1, #32905	; 0x8089
  41b29e:	4b59      	ldr	r3, [pc, #356]	; (41b404 <basic_init+0x658>)
  41b2a0:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b2a2:	4b54      	ldr	r3, [pc, #336]	; (41b3f4 <basic_init+0x648>)
  41b2a4:	6818      	ldr	r0, [r3, #0]
  41b2a6:	300c      	adds	r0, #12
  41b2a8:	4b55      	ldr	r3, [pc, #340]	; (41b400 <basic_init+0x654>)
  41b2aa:	6a1b      	ldr	r3, [r3, #32]
  41b2ac:	f013 0f02 	tst.w	r3, #2
  41b2b0:	f000 86a9 	beq.w	41c006 <basic_init+0x125a>
  41b2b4:	f04f 0200 	mov.w	r2, #0
  41b2b8:	2302      	movs	r3, #2
  41b2ba:	f363 0202 	bfi	r2, r3, #0, #3
  41b2be:	2306      	movs	r3, #6
  41b2c0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b2c4:	2309      	movs	r3, #9
  41b2c6:	f363 220c 	bfi	r2, r3, #8, #5
  41b2ca:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b2ce:	2179      	movs	r1, #121	; 0x79
  41b2d0:	4b4c      	ldr	r3, [pc, #304]	; (41b404 <basic_init+0x658>)
  41b2d2:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b2d4:	4b47      	ldr	r3, [pc, #284]	; (41b3f4 <basic_init+0x648>)
  41b2d6:	6818      	ldr	r0, [r3, #0]
  41b2d8:	300c      	adds	r0, #12
  41b2da:	4b49      	ldr	r3, [pc, #292]	; (41b400 <basic_init+0x654>)
  41b2dc:	6a1b      	ldr	r3, [r3, #32]
  41b2de:	f013 0f02 	tst.w	r3, #2
  41b2e2:	f000 86a0 	beq.w	41c026 <basic_init+0x127a>
  41b2e6:	f04f 0200 	mov.w	r2, #0
  41b2ea:	2302      	movs	r3, #2
  41b2ec:	f363 0202 	bfi	r2, r3, #0, #3
  41b2f0:	2306      	movs	r3, #6
  41b2f2:	f363 02c7 	bfi	r2, r3, #3, #5
  41b2f6:	2309      	movs	r3, #9
  41b2f8:	f363 220c 	bfi	r2, r3, #8, #5
  41b2fc:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b300:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b304:	4b3f      	ldr	r3, [pc, #252]	; (41b404 <basic_init+0x658>)
  41b306:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b308:	4b3a      	ldr	r3, [pc, #232]	; (41b3f4 <basic_init+0x648>)
  41b30a:	6818      	ldr	r0, [r3, #0]
  41b30c:	300c      	adds	r0, #12
  41b30e:	4b3c      	ldr	r3, [pc, #240]	; (41b400 <basic_init+0x654>)
  41b310:	6a1b      	ldr	r3, [r3, #32]
  41b312:	f013 0f02 	tst.w	r3, #2
  41b316:	f000 8696 	beq.w	41c046 <basic_init+0x129a>
  41b31a:	f04f 0200 	mov.w	r2, #0
  41b31e:	2302      	movs	r3, #2
  41b320:	f363 0202 	bfi	r2, r3, #0, #3
  41b324:	2306      	movs	r3, #6
  41b326:	f363 02c7 	bfi	r2, r3, #3, #5
  41b32a:	2309      	movs	r3, #9
  41b32c:	f363 220c 	bfi	r2, r3, #8, #5
  41b330:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41b334:	2199      	movs	r1, #153	; 0x99
  41b336:	4b33      	ldr	r3, [pc, #204]	; (41b404 <basic_init+0x658>)
  41b338:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41b33a:	4c2e      	ldr	r4, [pc, #184]	; (41b3f4 <basic_init+0x648>)
  41b33c:	6820      	ldr	r0, [r4, #0]
  41b33e:	3008      	adds	r0, #8
  41b340:	4b2d      	ldr	r3, [pc, #180]	; (41b3f8 <basic_init+0x64c>)
  41b342:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41b344:	6820      	ldr	r0, [r4, #0]
  41b346:	3008      	adds	r0, #8
  41b348:	4b2d      	ldr	r3, [pc, #180]	; (41b400 <basic_init+0x654>)
  41b34a:	6a1b      	ldr	r3, [r3, #32]
  41b34c:	f013 0f02 	tst.w	r3, #2
  41b350:	f000 8689 	beq.w	41c066 <basic_init+0x12ba>
  41b354:	f04f 0207 	mov.w	r2, #7
  41b358:	231d      	movs	r3, #29
  41b35a:	f363 02c7 	bfi	r2, r3, #3, #5
  41b35e:	f363 220c 	bfi	r2, r3, #8, #5
  41b362:	2303      	movs	r3, #3
  41b364:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b368:	f241 0129 	movw	r1, #4137	; 0x1029
  41b36c:	4d25      	ldr	r5, [pc, #148]	; (41b404 <basic_init+0x658>)
  41b36e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41b370:	4c20      	ldr	r4, [pc, #128]	; (41b3f4 <basic_init+0x648>)
  41b372:	6820      	ldr	r0, [r4, #0]
  41b374:	4f22      	ldr	r7, [pc, #136]	; (41b400 <basic_init+0x654>)
  41b376:	89ba      	ldrh	r2, [r7, #12]
  41b378:	f240 1129 	movw	r1, #297	; 0x129
  41b37c:	3008      	adds	r0, #8
  41b37e:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41b380:	6826      	ldr	r6, [r4, #0]
  41b382:	3608      	adds	r6, #8
  41b384:	2133      	movs	r1, #51	; 0x33
  41b386:	89b8      	ldrh	r0, [r7, #12]
  41b388:	4b1f      	ldr	r3, [pc, #124]	; (41b408 <basic_init+0x65c>)
  41b38a:	4798      	blx	r3
  41b38c:	4602      	mov	r2, r0
  41b38e:	f241 1129 	movw	r1, #4393	; 0x1129
  41b392:	4630      	mov	r0, r6
  41b394:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41b396:	6820      	ldr	r0, [r4, #0]
  41b398:	3008      	adds	r0, #8
  41b39a:	6a3b      	ldr	r3, [r7, #32]
  41b39c:	f013 0f02 	tst.w	r3, #2
  41b3a0:	f000 8671 	beq.w	41c086 <basic_init+0x12da>
  41b3a4:	f04f 32ff 	mov.w	r2, #4294967295
  41b3a8:	f242 0129 	movw	r1, #8233	; 0x2029
  41b3ac:	4f15      	ldr	r7, [pc, #84]	; (41b404 <basic_init+0x658>)
  41b3ae:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41b3b0:	4c10      	ldr	r4, [pc, #64]	; (41b3f4 <basic_init+0x648>)
  41b3b2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b3b4:	2200      	movs	r2, #0
  41b3b6:	f44f 7198 	mov.w	r1, #304	; 0x130
  41b3ba:	3008      	adds	r0, #8
  41b3bc:	4b0c      	ldr	r3, [pc, #48]	; (41b3f0 <basic_init+0x644>)
  41b3be:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41b3c0:	6825      	ldr	r5, [r4, #0]
  41b3c2:	3508      	adds	r5, #8
  41b3c4:	4e0e      	ldr	r6, [pc, #56]	; (41b400 <basic_init+0x654>)
  41b3c6:	2133      	movs	r1, #51	; 0x33
  41b3c8:	89b0      	ldrh	r0, [r6, #12]
  41b3ca:	4b0f      	ldr	r3, [pc, #60]	; (41b408 <basic_init+0x65c>)
  41b3cc:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b3ce:	4602      	mov	r2, r0
  41b3d0:	f241 2139 	movw	r1, #4665	; 0x1239
  41b3d4:	4628      	mov	r0, r5
  41b3d6:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41b3d8:	6820      	ldr	r0, [r4, #0]
  41b3da:	3008      	adds	r0, #8
  41b3dc:	6a33      	ldr	r3, [r6, #32]
  41b3de:	f013 0f02 	tst.w	r3, #2
  41b3e2:	f000 865f 	beq.w	41c0a4 <basic_init+0x12f8>
  41b3e6:	e011      	b.n	41b40c <basic_init+0x660>
  41b3e8:	0041447d 	.word	0x0041447d
  41b3ec:	0041445d 	.word	0x0041445d
  41b3f0:	00409a6d 	.word	0x00409a6d
  41b3f4:	20414798 	.word	0x20414798
  41b3f8:	00417515 	.word	0x00417515
  41b3fc:	00409909 	.word	0x00409909
  41b400:	2041479c 	.word	0x2041479c
  41b404:	00409bfd 	.word	0x00409bfd
  41b408:	004154bd 	.word	0x004154bd
  41b40c:	f04f 0200 	mov.w	r2, #0
  41b410:	2306      	movs	r3, #6
  41b412:	f363 0202 	bfi	r2, r3, #0, #3
  41b416:	2319      	movs	r3, #25
  41b418:	f363 02c7 	bfi	r2, r3, #3, #5
  41b41c:	f363 220c 	bfi	r2, r3, #8, #5
  41b420:	2303      	movs	r3, #3
  41b422:	f363 324f 	bfi	r2, r3, #13, #3
  41b426:	f241 0139 	movw	r1, #4153	; 0x1039
  41b42a:	4bc9      	ldr	r3, [pc, #804]	; (41b750 <basic_init+0x9a4>)
  41b42c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41b42e:	4bc9      	ldr	r3, [pc, #804]	; (41b754 <basic_init+0x9a8>)
  41b430:	6818      	ldr	r0, [r3, #0]
  41b432:	3008      	adds	r0, #8
  41b434:	4bc8      	ldr	r3, [pc, #800]	; (41b758 <basic_init+0x9ac>)
  41b436:	6a1b      	ldr	r3, [r3, #32]
  41b438:	f013 0f02 	tst.w	r3, #2
  41b43c:	f000 8642 	beq.w	41c0c4 <basic_init+0x1318>
  41b440:	f04f 0200 	mov.w	r2, #0
  41b444:	2301      	movs	r3, #1
  41b446:	f363 0202 	bfi	r2, r3, #0, #3
  41b44a:	2307      	movs	r3, #7
  41b44c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b450:	2308      	movs	r3, #8
  41b452:	f363 220c 	bfi	r2, r3, #8, #5
  41b456:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b45a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b45e:	f240 1139 	movw	r1, #313	; 0x139
  41b462:	4bbb      	ldr	r3, [pc, #748]	; (41b750 <basic_init+0x9a4>)
  41b464:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41b466:	4bbb      	ldr	r3, [pc, #748]	; (41b754 <basic_init+0x9a8>)
  41b468:	6818      	ldr	r0, [r3, #0]
  41b46a:	3008      	adds	r0, #8
  41b46c:	4bba      	ldr	r3, [pc, #744]	; (41b758 <basic_init+0x9ac>)
  41b46e:	6a1b      	ldr	r3, [r3, #32]
  41b470:	f013 0f02 	tst.w	r3, #2
  41b474:	f000 8636 	beq.w	41c0e4 <basic_init+0x1338>
  41b478:	f04f 0200 	mov.w	r2, #0
  41b47c:	2301      	movs	r3, #1
  41b47e:	f363 0202 	bfi	r2, r3, #0, #3
  41b482:	2307      	movs	r3, #7
  41b484:	f363 02c7 	bfi	r2, r3, #3, #5
  41b488:	2308      	movs	r3, #8
  41b48a:	f363 220c 	bfi	r2, r3, #8, #5
  41b48e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b492:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b496:	f241 1139 	movw	r1, #4409	; 0x1139
  41b49a:	4bad      	ldr	r3, [pc, #692]	; (41b750 <basic_init+0x9a4>)
  41b49c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41b49e:	4bad      	ldr	r3, [pc, #692]	; (41b754 <basic_init+0x9a8>)
  41b4a0:	6818      	ldr	r0, [r3, #0]
  41b4a2:	3008      	adds	r0, #8
  41b4a4:	4bac      	ldr	r3, [pc, #688]	; (41b758 <basic_init+0x9ac>)
  41b4a6:	6a1b      	ldr	r3, [r3, #32]
  41b4a8:	f013 0f02 	tst.w	r3, #2
  41b4ac:	f000 862a 	beq.w	41c104 <basic_init+0x1358>
  41b4b0:	f04f 0200 	mov.w	r2, #0
  41b4b4:	2306      	movs	r3, #6
  41b4b6:	f363 0202 	bfi	r2, r3, #0, #3
  41b4ba:	231a      	movs	r3, #26
  41b4bc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4c0:	231c      	movs	r3, #28
  41b4c2:	f363 220c 	bfi	r2, r3, #8, #5
  41b4c6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b4ca:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b4ce:	f242 0139 	movw	r1, #8249	; 0x2039
  41b4d2:	4b9f      	ldr	r3, [pc, #636]	; (41b750 <basic_init+0x9a4>)
  41b4d4:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b4d6:	4b9f      	ldr	r3, [pc, #636]	; (41b754 <basic_init+0x9a8>)
  41b4d8:	6818      	ldr	r0, [r3, #0]
  41b4da:	3008      	adds	r0, #8
  41b4dc:	4b9e      	ldr	r3, [pc, #632]	; (41b758 <basic_init+0x9ac>)
  41b4de:	6a1b      	ldr	r3, [r3, #32]
  41b4e0:	f013 0f02 	tst.w	r3, #2
  41b4e4:	f000 861e 	beq.w	41c124 <basic_init+0x1378>
  41b4e8:	f04f 0200 	mov.w	r2, #0
  41b4ec:	2301      	movs	r3, #1
  41b4ee:	f363 0202 	bfi	r2, r3, #0, #3
  41b4f2:	2307      	movs	r3, #7
  41b4f4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b4f8:	2308      	movs	r3, #8
  41b4fa:	f363 220c 	bfi	r2, r3, #8, #5
  41b4fe:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b502:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b506:	f249 0189 	movw	r1, #37001	; 0x9089
  41b50a:	4b91      	ldr	r3, [pc, #580]	; (41b750 <basic_init+0x9a4>)
  41b50c:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b50e:	4b91      	ldr	r3, [pc, #580]	; (41b754 <basic_init+0x9a8>)
  41b510:	6818      	ldr	r0, [r3, #0]
  41b512:	3008      	adds	r0, #8
  41b514:	4b90      	ldr	r3, [pc, #576]	; (41b758 <basic_init+0x9ac>)
  41b516:	6a1b      	ldr	r3, [r3, #32]
  41b518:	f013 0f02 	tst.w	r3, #2
  41b51c:	f000 8606 	beq.w	41c12c <basic_init+0x1380>
  41b520:	f04f 32ff 	mov.w	r2, #4294967295
  41b524:	f248 1189 	movw	r1, #33161	; 0x8189
  41b528:	4b89      	ldr	r3, [pc, #548]	; (41b750 <basic_init+0x9a4>)
  41b52a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b52c:	4b89      	ldr	r3, [pc, #548]	; (41b754 <basic_init+0x9a8>)
  41b52e:	6818      	ldr	r0, [r3, #0]
  41b530:	3008      	adds	r0, #8
  41b532:	4b89      	ldr	r3, [pc, #548]	; (41b758 <basic_init+0x9ac>)
  41b534:	6a1b      	ldr	r3, [r3, #32]
  41b536:	f013 0f02 	tst.w	r3, #2
  41b53a:	f000 85fb 	beq.w	41c134 <basic_init+0x1388>
  41b53e:	f04f 32ff 	mov.w	r2, #4294967295
  41b542:	f249 1189 	movw	r1, #37257	; 0x9189
  41b546:	4b82      	ldr	r3, [pc, #520]	; (41b750 <basic_init+0x9a4>)
  41b548:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b54a:	4b82      	ldr	r3, [pc, #520]	; (41b754 <basic_init+0x9a8>)
  41b54c:	6818      	ldr	r0, [r3, #0]
  41b54e:	3008      	adds	r0, #8
  41b550:	4b81      	ldr	r3, [pc, #516]	; (41b758 <basic_init+0x9ac>)
  41b552:	6a1b      	ldr	r3, [r3, #32]
  41b554:	f013 0f02 	tst.w	r3, #2
  41b558:	f000 85f0 	beq.w	41c13c <basic_init+0x1390>
  41b55c:	f04f 0200 	mov.w	r2, #0
  41b560:	2305      	movs	r3, #5
  41b562:	f363 0202 	bfi	r2, r3, #0, #3
  41b566:	2315      	movs	r3, #21
  41b568:	f363 02c7 	bfi	r2, r3, #3, #5
  41b56c:	f363 220c 	bfi	r2, r3, #8, #5
  41b570:	2302      	movs	r3, #2
  41b572:	f363 324f 	bfi	r2, r3, #13, #3
  41b576:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b57a:	4b75      	ldr	r3, [pc, #468]	; (41b750 <basic_init+0x9a4>)
  41b57c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b57e:	4b75      	ldr	r3, [pc, #468]	; (41b754 <basic_init+0x9a8>)
  41b580:	6818      	ldr	r0, [r3, #0]
  41b582:	3008      	adds	r0, #8
  41b584:	4b74      	ldr	r3, [pc, #464]	; (41b758 <basic_init+0x9ac>)
  41b586:	6a1b      	ldr	r3, [r3, #32]
  41b588:	f013 0f02 	tst.w	r3, #2
  41b58c:	f000 85e5 	beq.w	41c15a <basic_init+0x13ae>
  41b590:	f04f 0200 	mov.w	r2, #0
  41b594:	2301      	movs	r3, #1
  41b596:	f363 0202 	bfi	r2, r3, #0, #3
  41b59a:	2307      	movs	r3, #7
  41b59c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b5a0:	2308      	movs	r3, #8
  41b5a2:	f363 220c 	bfi	r2, r3, #8, #5
  41b5a6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b5aa:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b5ae:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b5b2:	4b67      	ldr	r3, [pc, #412]	; (41b750 <basic_init+0x9a4>)
  41b5b4:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b5b6:	4b67      	ldr	r3, [pc, #412]	; (41b754 <basic_init+0x9a8>)
  41b5b8:	6818      	ldr	r0, [r3, #0]
  41b5ba:	3008      	adds	r0, #8
  41b5bc:	4b66      	ldr	r3, [pc, #408]	; (41b758 <basic_init+0x9ac>)
  41b5be:	6a1b      	ldr	r3, [r3, #32]
  41b5c0:	f013 0f02 	tst.w	r3, #2
  41b5c4:	f000 85d2 	beq.w	41c16c <basic_init+0x13c0>
  41b5c8:	f04f 32ff 	mov.w	r2, #4294967295
  41b5cc:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41b5d0:	4b5f      	ldr	r3, [pc, #380]	; (41b750 <basic_init+0x9a4>)
  41b5d2:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b5d4:	4b5f      	ldr	r3, [pc, #380]	; (41b754 <basic_init+0x9a8>)
  41b5d6:	6818      	ldr	r0, [r3, #0]
  41b5d8:	3008      	adds	r0, #8
  41b5da:	4b5f      	ldr	r3, [pc, #380]	; (41b758 <basic_init+0x9ac>)
  41b5dc:	6a1b      	ldr	r3, [r3, #32]
  41b5de:	f013 0f02 	tst.w	r3, #2
  41b5e2:	f000 85c7 	beq.w	41c174 <basic_init+0x13c8>
  41b5e6:	f04f 32ff 	mov.w	r2, #4294967295
  41b5ea:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41b5ee:	4b58      	ldr	r3, [pc, #352]	; (41b750 <basic_init+0x9a4>)
  41b5f0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b5f2:	4b58      	ldr	r3, [pc, #352]	; (41b754 <basic_init+0x9a8>)
  41b5f4:	6818      	ldr	r0, [r3, #0]
  41b5f6:	3008      	adds	r0, #8
  41b5f8:	4b57      	ldr	r3, [pc, #348]	; (41b758 <basic_init+0x9ac>)
  41b5fa:	6a1b      	ldr	r3, [r3, #32]
  41b5fc:	f013 0f02 	tst.w	r3, #2
  41b600:	f000 85bc 	beq.w	41c17c <basic_init+0x13d0>
  41b604:	f04f 0200 	mov.w	r2, #0
  41b608:	2305      	movs	r3, #5
  41b60a:	f363 0202 	bfi	r2, r3, #0, #3
  41b60e:	2315      	movs	r3, #21
  41b610:	f363 02c7 	bfi	r2, r3, #3, #5
  41b614:	f363 220c 	bfi	r2, r3, #8, #5
  41b618:	2302      	movs	r3, #2
  41b61a:	f363 324f 	bfi	r2, r3, #13, #3
  41b61e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b622:	4b4b      	ldr	r3, [pc, #300]	; (41b750 <basic_init+0x9a4>)
  41b624:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b626:	4c4b      	ldr	r4, [pc, #300]	; (41b754 <basic_init+0x9a8>)
  41b628:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b62a:	2229      	movs	r2, #41	; 0x29
  41b62c:	21b6      	movs	r1, #182	; 0xb6
  41b62e:	3008      	adds	r0, #8
  41b630:	4d4a      	ldr	r5, [pc, #296]	; (41b75c <basic_init+0x9b0>)
  41b632:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41b634:	6820      	ldr	r0, [r4, #0]
  41b636:	3010      	adds	r0, #16
  41b638:	4b49      	ldr	r3, [pc, #292]	; (41b760 <basic_init+0x9b4>)
  41b63a:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b63c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b63e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b642:	2101      	movs	r1, #1
  41b644:	3010      	adds	r0, #16
  41b646:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b648:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b64a:	22ff      	movs	r2, #255	; 0xff
  41b64c:	212c      	movs	r1, #44	; 0x2c
  41b64e:	3010      	adds	r0, #16
  41b650:	4b44      	ldr	r3, [pc, #272]	; (41b764 <basic_init+0x9b8>)
  41b652:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41b654:	6820      	ldr	r0, [r4, #0]
  41b656:	3010      	adds	r0, #16
  41b658:	4b3f      	ldr	r3, [pc, #252]	; (41b758 <basic_init+0x9ac>)
  41b65a:	6a1b      	ldr	r3, [r3, #32]
  41b65c:	f013 0f02 	tst.w	r3, #2
  41b660:	f000 859b 	beq.w	41c19a <basic_init+0x13ee>
  41b664:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b668:	2129      	movs	r1, #41	; 0x29
  41b66a:	4b39      	ldr	r3, [pc, #228]	; (41b750 <basic_init+0x9a4>)
  41b66c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41b66e:	4b39      	ldr	r3, [pc, #228]	; (41b754 <basic_init+0x9a8>)
  41b670:	6818      	ldr	r0, [r3, #0]
  41b672:	3010      	adds	r0, #16
  41b674:	4b38      	ldr	r3, [pc, #224]	; (41b758 <basic_init+0x9ac>)
  41b676:	6a1b      	ldr	r3, [r3, #32]
  41b678:	f013 0f02 	tst.w	r3, #2
  41b67c:	f000 859c 	beq.w	41c1b8 <basic_init+0x140c>
  41b680:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41b684:	4a34      	ldr	r2, [pc, #208]	; (41b758 <basic_init+0x9ac>)
  41b686:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41b688:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41b68c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41b690:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41b694:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41b698:	25cc      	movs	r5, #204	; 0xcc
  41b69a:	fb05 1202 	mla	r2, r5, r2, r1
  41b69e:	3280      	adds	r2, #128	; 0x80
  41b6a0:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41b6a4:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41b6a8:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41b6ac:	f04f 0200 	mov.w	r2, #0
  41b6b0:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41b6b4:	f004 0607 	and.w	r6, r4, #7
  41b6b8:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41b6bc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41b6c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41b6c4:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41b6c8:	f003 0707 	and.w	r7, r3, #7
  41b6cc:	0b59      	lsrs	r1, r3, #13
  41b6ce:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41b6d2:	fb05 6101 	mla	r1, r5, r1, r6
  41b6d6:	3180      	adds	r1, #128	; 0x80
  41b6d8:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41b6dc:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41b6e0:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41b6e4:	f366 0202 	bfi	r2, r6, #0, #3
  41b6e8:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41b6ec:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41b6f0:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41b6f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41b6f8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41b6fc:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41b700:	fb05 4303 	mla	r3, r5, r3, r4
  41b704:	3380      	adds	r3, #128	; 0x80
  41b706:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41b70a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41b70e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41b712:	f363 220c 	bfi	r2, r3, #8, #5
  41b716:	f241 0129 	movw	r1, #4137	; 0x1029
  41b71a:	4d0d      	ldr	r5, [pc, #52]	; (41b750 <basic_init+0x9a4>)
  41b71c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41b71e:	4c0d      	ldr	r4, [pc, #52]	; (41b754 <basic_init+0x9a8>)
  41b720:	6820      	ldr	r0, [r4, #0]
  41b722:	4f0d      	ldr	r7, [pc, #52]	; (41b758 <basic_init+0x9ac>)
  41b724:	89ba      	ldrh	r2, [r7, #12]
  41b726:	f240 1129 	movw	r1, #297	; 0x129
  41b72a:	3010      	adds	r0, #16
  41b72c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41b72e:	6826      	ldr	r6, [r4, #0]
  41b730:	3610      	adds	r6, #16
  41b732:	214c      	movs	r1, #76	; 0x4c
  41b734:	89b8      	ldrh	r0, [r7, #12]
  41b736:	4b0c      	ldr	r3, [pc, #48]	; (41b768 <basic_init+0x9bc>)
  41b738:	4798      	blx	r3
  41b73a:	4602      	mov	r2, r0
  41b73c:	f241 1129 	movw	r1, #4393	; 0x1129
  41b740:	4630      	mov	r0, r6
  41b742:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41b744:	6820      	ldr	r0, [r4, #0]
  41b746:	3010      	adds	r0, #16
  41b748:	6a3b      	ldr	r3, [r7, #32]
  41b74a:	f013 0f02 	tst.w	r3, #2
  41b74e:	e00d      	b.n	41b76c <basic_init+0x9c0>
  41b750:	00409bfd 	.word	0x00409bfd
  41b754:	20414798 	.word	0x20414798
  41b758:	2041479c 	.word	0x2041479c
  41b75c:	00409a6d 	.word	0x00409a6d
  41b760:	00417515 	.word	0x00417515
  41b764:	00409d8d 	.word	0x00409d8d
  41b768:	004154bd 	.word	0x004154bd
  41b76c:	f000 8575 	beq.w	41c25a <basic_init+0x14ae>
  41b770:	f04f 32ff 	mov.w	r2, #4294967295
  41b774:	f242 0129 	movw	r1, #8233	; 0x2029
  41b778:	4bc7      	ldr	r3, [pc, #796]	; (41ba98 <basic_init+0xcec>)
  41b77a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41b77c:	4bc7      	ldr	r3, [pc, #796]	; (41ba9c <basic_init+0xcf0>)
  41b77e:	6818      	ldr	r0, [r3, #0]
  41b780:	3010      	adds	r0, #16
  41b782:	4bc7      	ldr	r3, [pc, #796]	; (41baa0 <basic_init+0xcf4>)
  41b784:	6a1b      	ldr	r3, [r3, #32]
  41b786:	f013 0f02 	tst.w	r3, #2
  41b78a:	f000 8575 	beq.w	41c278 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41b78e:	f04f 0200 	mov.w	r2, #0
  41b792:	2306      	movs	r3, #6
  41b794:	f363 0202 	bfi	r2, r3, #0, #3
  41b798:	2319      	movs	r3, #25
  41b79a:	f363 02c7 	bfi	r2, r3, #3, #5
  41b79e:	f363 220c 	bfi	r2, r3, #8, #5
  41b7a2:	2303      	movs	r3, #3
  41b7a4:	f363 324f 	bfi	r2, r3, #13, #3
  41b7a8:	f242 1129 	movw	r1, #8489	; 0x2129
  41b7ac:	4eba      	ldr	r6, [pc, #744]	; (41ba98 <basic_init+0xcec>)
  41b7ae:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41b7b0:	4dba      	ldr	r5, [pc, #744]	; (41ba9c <basic_init+0xcf0>)
  41b7b2:	6828      	ldr	r0, [r5, #0]
  41b7b4:	4cba      	ldr	r4, [pc, #744]	; (41baa0 <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b7b6:	89a2      	ldrh	r2, [r4, #12]
  41b7b8:	2139      	movs	r1, #57	; 0x39
  41b7ba:	3010      	adds	r0, #16
  41b7bc:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41b7be:	6828      	ldr	r0, [r5, #0]
  41b7c0:	89a2      	ldrh	r2, [r4, #12]
  41b7c2:	f241 0139 	movw	r1, #4153	; 0x1039
  41b7c6:	3010      	adds	r0, #16
  41b7c8:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41b7ca:	6828      	ldr	r0, [r5, #0]
  41b7cc:	3010      	adds	r0, #16
  41b7ce:	6a23      	ldr	r3, [r4, #32]
  41b7d0:	f013 0f02 	tst.w	r3, #2
  41b7d4:	f000 855f 	beq.w	41c296 <basic_init+0x14ea>
  41b7d8:	f04f 0200 	mov.w	r2, #0
  41b7dc:	2304      	movs	r3, #4
  41b7de:	f363 0202 	bfi	r2, r3, #0, #3
  41b7e2:	2311      	movs	r3, #17
  41b7e4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7e8:	f363 220c 	bfi	r2, r3, #8, #5
  41b7ec:	2302      	movs	r3, #2
  41b7ee:	f363 324f 	bfi	r2, r3, #13, #3
  41b7f2:	f242 0139 	movw	r1, #8249	; 0x2039
  41b7f6:	4ba8      	ldr	r3, [pc, #672]	; (41ba98 <basic_init+0xcec>)
  41b7f8:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41b7fa:	4ba8      	ldr	r3, [pc, #672]	; (41ba9c <basic_init+0xcf0>)
  41b7fc:	681c      	ldr	r4, [r3, #0]
  41b7fe:	3410      	adds	r4, #16
  41b800:	2000      	movs	r0, #0
  41b802:	4ba8      	ldr	r3, [pc, #672]	; (41baa4 <basic_init+0xcf8>)
  41b804:	4798      	blx	r3
  41b806:	3028      	adds	r0, #40	; 0x28
  41b808:	0040      	lsls	r0, r0, #1
  41b80a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b80e:	f280 8550 	bge.w	41c2b2 <basic_init+0x1506>
  41b812:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b814:	2130      	movs	r1, #48	; 0x30
  41b816:	4620      	mov	r0, r4
  41b818:	4ba3      	ldr	r3, [pc, #652]	; (41baa8 <basic_init+0xcfc>)
  41b81a:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41b81c:	4c9f      	ldr	r4, [pc, #636]	; (41ba9c <basic_init+0xcf0>)
  41b81e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41b820:	2200      	movs	r2, #0
  41b822:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41b826:	3010      	adds	r0, #16
  41b828:	4ba0      	ldr	r3, [pc, #640]	; (41baac <basic_init+0xd00>)
  41b82a:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b82c:	6820      	ldr	r0, [r4, #0]
  41b82e:	3010      	adds	r0, #16
  41b830:	4b9b      	ldr	r3, [pc, #620]	; (41baa0 <basic_init+0xcf4>)
  41b832:	6a1b      	ldr	r3, [r3, #32]
  41b834:	f013 0f02 	tst.w	r3, #2
  41b838:	f000 8549 	beq.w	41c2ce <basic_init+0x1522>
  41b83c:	f04f 0200 	mov.w	r2, #0
  41b840:	2302      	movs	r3, #2
  41b842:	f363 0202 	bfi	r2, r3, #0, #3
  41b846:	2306      	movs	r3, #6
  41b848:	f363 02c7 	bfi	r2, r3, #3, #5
  41b84c:	2309      	movs	r3, #9
  41b84e:	f363 220c 	bfi	r2, r3, #8, #5
  41b852:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b856:	f248 0189 	movw	r1, #32905	; 0x8089
  41b85a:	4b8f      	ldr	r3, [pc, #572]	; (41ba98 <basic_init+0xcec>)
  41b85c:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b85e:	4b8f      	ldr	r3, [pc, #572]	; (41ba9c <basic_init+0xcf0>)
  41b860:	6818      	ldr	r0, [r3, #0]
  41b862:	3010      	adds	r0, #16
  41b864:	4b8e      	ldr	r3, [pc, #568]	; (41baa0 <basic_init+0xcf4>)
  41b866:	6a1b      	ldr	r3, [r3, #32]
  41b868:	f013 0f02 	tst.w	r3, #2
  41b86c:	f000 8533 	beq.w	41c2d6 <basic_init+0x152a>
  41b870:	f04f 0200 	mov.w	r2, #0
  41b874:	2302      	movs	r3, #2
  41b876:	f363 0202 	bfi	r2, r3, #0, #3
  41b87a:	2306      	movs	r3, #6
  41b87c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b880:	2309      	movs	r3, #9
  41b882:	f363 220c 	bfi	r2, r3, #8, #5
  41b886:	f36f 324f 	bfc	r2, #13, #3
  41b88a:	f249 0189 	movw	r1, #37001	; 0x9089
  41b88e:	4d82      	ldr	r5, [pc, #520]	; (41ba98 <basic_init+0xcec>)
  41b890:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41b892:	4c82      	ldr	r4, [pc, #520]	; (41ba9c <basic_init+0xcf0>)
  41b894:	6820      	ldr	r0, [r4, #0]
  41b896:	f04f 32ff 	mov.w	r2, #4294967295
  41b89a:	f248 1189 	movw	r1, #33161	; 0x8189
  41b89e:	3010      	adds	r0, #16
  41b8a0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b8a2:	6820      	ldr	r0, [r4, #0]
  41b8a4:	f04f 32ff 	mov.w	r2, #4294967295
  41b8a8:	f249 1189 	movw	r1, #37257	; 0x9189
  41b8ac:	3010      	adds	r0, #16
  41b8ae:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41b8b0:	6820      	ldr	r0, [r4, #0]
  41b8b2:	3010      	adds	r0, #16
  41b8b4:	4b7a      	ldr	r3, [pc, #488]	; (41baa0 <basic_init+0xcf4>)
  41b8b6:	6a1b      	ldr	r3, [r3, #32]
  41b8b8:	f013 0f02 	tst.w	r3, #2
  41b8bc:	f000 850f 	beq.w	41c2de <basic_init+0x1532>
  41b8c0:	f04f 0200 	mov.w	r2, #0
  41b8c4:	2304      	movs	r3, #4
  41b8c6:	f363 0202 	bfi	r2, r3, #0, #3
  41b8ca:	2311      	movs	r3, #17
  41b8cc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b8d0:	f363 220c 	bfi	r2, r3, #8, #5
  41b8d4:	2302      	movs	r3, #2
  41b8d6:	f363 324f 	bfi	r2, r3, #13, #3
  41b8da:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b8de:	4b6e      	ldr	r3, [pc, #440]	; (41ba98 <basic_init+0xcec>)
  41b8e0:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b8e2:	4b6e      	ldr	r3, [pc, #440]	; (41ba9c <basic_init+0xcf0>)
  41b8e4:	6818      	ldr	r0, [r3, #0]
  41b8e6:	3010      	adds	r0, #16
  41b8e8:	4b6d      	ldr	r3, [pc, #436]	; (41baa0 <basic_init+0xcf4>)
  41b8ea:	6a1b      	ldr	r3, [r3, #32]
  41b8ec:	f013 0f02 	tst.w	r3, #2
  41b8f0:	f000 8504 	beq.w	41c2fc <basic_init+0x1550>
  41b8f4:	f04f 0200 	mov.w	r2, #0
  41b8f8:	2302      	movs	r3, #2
  41b8fa:	f363 0202 	bfi	r2, r3, #0, #3
  41b8fe:	2306      	movs	r3, #6
  41b900:	f363 02c7 	bfi	r2, r3, #3, #5
  41b904:	2309      	movs	r3, #9
  41b906:	f363 220c 	bfi	r2, r3, #8, #5
  41b90a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b90e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b912:	4b61      	ldr	r3, [pc, #388]	; (41ba98 <basic_init+0xcec>)
  41b914:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b916:	4b61      	ldr	r3, [pc, #388]	; (41ba9c <basic_init+0xcf0>)
  41b918:	6818      	ldr	r0, [r3, #0]
  41b91a:	3010      	adds	r0, #16
  41b91c:	4b60      	ldr	r3, [pc, #384]	; (41baa0 <basic_init+0xcf4>)
  41b91e:	6a1b      	ldr	r3, [r3, #32]
  41b920:	f013 0f02 	tst.w	r3, #2
  41b924:	f000 84ee 	beq.w	41c304 <basic_init+0x1558>
  41b928:	f04f 0200 	mov.w	r2, #0
  41b92c:	2302      	movs	r3, #2
  41b92e:	f363 0202 	bfi	r2, r3, #0, #3
  41b932:	2306      	movs	r3, #6
  41b934:	f363 02c7 	bfi	r2, r3, #3, #5
  41b938:	2309      	movs	r3, #9
  41b93a:	f363 220c 	bfi	r2, r3, #8, #5
  41b93e:	f36f 324f 	bfc	r2, #13, #3
  41b942:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b946:	4d54      	ldr	r5, [pc, #336]	; (41ba98 <basic_init+0xcec>)
  41b948:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b94a:	4c54      	ldr	r4, [pc, #336]	; (41ba9c <basic_init+0xcf0>)
  41b94c:	6820      	ldr	r0, [r4, #0]
  41b94e:	f04f 32ff 	mov.w	r2, #4294967295
  41b952:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b956:	3010      	adds	r0, #16
  41b958:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41b95a:	6820      	ldr	r0, [r4, #0]
  41b95c:	f04f 32ff 	mov.w	r2, #4294967295
  41b960:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41b964:	3010      	adds	r0, #16
  41b966:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41b968:	6820      	ldr	r0, [r4, #0]
  41b96a:	3010      	adds	r0, #16
  41b96c:	4b4c      	ldr	r3, [pc, #304]	; (41baa0 <basic_init+0xcf4>)
  41b96e:	6a1b      	ldr	r3, [r3, #32]
  41b970:	f013 0f02 	tst.w	r3, #2
  41b974:	f000 84ca 	beq.w	41c30c <basic_init+0x1560>
  41b978:	f04f 0200 	mov.w	r2, #0
  41b97c:	2304      	movs	r3, #4
  41b97e:	f363 0202 	bfi	r2, r3, #0, #3
  41b982:	2311      	movs	r3, #17
  41b984:	f363 02c7 	bfi	r2, r3, #3, #5
  41b988:	f363 220c 	bfi	r2, r3, #8, #5
  41b98c:	2302      	movs	r3, #2
  41b98e:	f363 324f 	bfi	r2, r3, #13, #3
  41b992:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b996:	4b40      	ldr	r3, [pc, #256]	; (41ba98 <basic_init+0xcec>)
  41b998:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b99a:	4b40      	ldr	r3, [pc, #256]	; (41ba9c <basic_init+0xcf0>)
  41b99c:	6818      	ldr	r0, [r3, #0]
  41b99e:	3010      	adds	r0, #16
  41b9a0:	4b3f      	ldr	r3, [pc, #252]	; (41baa0 <basic_init+0xcf4>)
  41b9a2:	6a1b      	ldr	r3, [r3, #32]
  41b9a4:	f013 0f02 	tst.w	r3, #2
  41b9a8:	f000 84bf 	beq.w	41c32a <basic_init+0x157e>
  41b9ac:	f04f 0200 	mov.w	r2, #0
  41b9b0:	2302      	movs	r3, #2
  41b9b2:	f363 0202 	bfi	r2, r3, #0, #3
  41b9b6:	2306      	movs	r3, #6
  41b9b8:	f363 02c7 	bfi	r2, r3, #3, #5
  41b9bc:	2309      	movs	r3, #9
  41b9be:	f363 220c 	bfi	r2, r3, #8, #5
  41b9c2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b9c6:	2179      	movs	r1, #121	; 0x79
  41b9c8:	4b33      	ldr	r3, [pc, #204]	; (41ba98 <basic_init+0xcec>)
  41b9ca:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41b9cc:	4b33      	ldr	r3, [pc, #204]	; (41ba9c <basic_init+0xcf0>)
  41b9ce:	6818      	ldr	r0, [r3, #0]
  41b9d0:	3010      	adds	r0, #16
  41b9d2:	4b33      	ldr	r3, [pc, #204]	; (41baa0 <basic_init+0xcf4>)
  41b9d4:	6a1b      	ldr	r3, [r3, #32]
  41b9d6:	f013 0f02 	tst.w	r3, #2
  41b9da:	f000 84aa 	beq.w	41c332 <basic_init+0x1586>
  41b9de:	f04f 0200 	mov.w	r2, #0
  41b9e2:	2302      	movs	r3, #2
  41b9e4:	f363 0202 	bfi	r2, r3, #0, #3
  41b9e8:	2306      	movs	r3, #6
  41b9ea:	f363 02c7 	bfi	r2, r3, #3, #5
  41b9ee:	2309      	movs	r3, #9
  41b9f0:	f363 220c 	bfi	r2, r3, #8, #5
  41b9f4:	f36f 324f 	bfc	r2, #13, #3
  41b9f8:	f241 0179 	movw	r1, #4217	; 0x1079
  41b9fc:	4d26      	ldr	r5, [pc, #152]	; (41ba98 <basic_init+0xcec>)
  41b9fe:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41ba00:	4c26      	ldr	r4, [pc, #152]	; (41ba9c <basic_init+0xcf0>)
  41ba02:	6820      	ldr	r0, [r4, #0]
  41ba04:	f04f 32ff 	mov.w	r2, #4294967295
  41ba08:	f240 1179 	movw	r1, #377	; 0x179
  41ba0c:	3010      	adds	r0, #16
  41ba0e:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41ba10:	6820      	ldr	r0, [r4, #0]
  41ba12:	f04f 32ff 	mov.w	r2, #4294967295
  41ba16:	f241 1179 	movw	r1, #4473	; 0x1179
  41ba1a:	3010      	adds	r0, #16
  41ba1c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41ba1e:	6820      	ldr	r0, [r4, #0]
  41ba20:	3010      	adds	r0, #16
  41ba22:	4b1f      	ldr	r3, [pc, #124]	; (41baa0 <basic_init+0xcf4>)
  41ba24:	6a1b      	ldr	r3, [r3, #32]
  41ba26:	f013 0f02 	tst.w	r3, #2
  41ba2a:	f000 8486 	beq.w	41c33a <basic_init+0x158e>
  41ba2e:	f04f 0200 	mov.w	r2, #0
  41ba32:	2304      	movs	r3, #4
  41ba34:	f363 0202 	bfi	r2, r3, #0, #3
  41ba38:	2311      	movs	r3, #17
  41ba3a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ba3e:	f363 220c 	bfi	r2, r3, #8, #5
  41ba42:	2302      	movs	r3, #2
  41ba44:	f363 324f 	bfi	r2, r3, #13, #3
  41ba48:	f242 0179 	movw	r1, #8313	; 0x2079
  41ba4c:	4b12      	ldr	r3, [pc, #72]	; (41ba98 <basic_init+0xcec>)
  41ba4e:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ba50:	4b12      	ldr	r3, [pc, #72]	; (41ba9c <basic_init+0xcf0>)
  41ba52:	681c      	ldr	r4, [r3, #0]
  41ba54:	3410      	adds	r4, #16
  41ba56:	2000      	movs	r0, #0
  41ba58:	4b12      	ldr	r3, [pc, #72]	; (41baa4 <basic_init+0xcf8>)
  41ba5a:	4798      	blx	r3
  41ba5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ba60:	00c0      	lsls	r0, r0, #3
  41ba62:	3050      	adds	r0, #80	; 0x50
  41ba64:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba68:	f280 8476 	bge.w	41c358 <basic_init+0x15ac>
  41ba6c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ba6e:	2112      	movs	r1, #18
  41ba70:	4620      	mov	r0, r4
  41ba72:	4b0d      	ldr	r3, [pc, #52]	; (41baa8 <basic_init+0xcfc>)
  41ba74:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41ba76:	4b09      	ldr	r3, [pc, #36]	; (41ba9c <basic_init+0xcf0>)
  41ba78:	681c      	ldr	r4, [r3, #0]
  41ba7a:	3410      	adds	r4, #16
  41ba7c:	2000      	movs	r0, #0
  41ba7e:	4b09      	ldr	r3, [pc, #36]	; (41baa4 <basic_init+0xcf8>)
  41ba80:	4798      	blx	r3
  41ba82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ba86:	00c0      	lsls	r0, r0, #3
  41ba88:	3050      	adds	r0, #80	; 0x50
  41ba8a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ba8e:	f280 8473 	bge.w	41c378 <basic_init+0x15cc>
  41ba92:	2201      	movs	r2, #1
  41ba94:	e00c      	b.n	41bab0 <basic_init+0xd04>
  41ba96:	bf00      	nop
  41ba98:	00409bfd 	.word	0x00409bfd
  41ba9c:	20414798 	.word	0x20414798
  41baa0:	2041479c 	.word	0x2041479c
  41baa4:	0041445d 	.word	0x0041445d
  41baa8:	00409a6d 	.word	0x00409a6d
  41baac:	00409d8d 	.word	0x00409d8d
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bab0:	2113      	movs	r1, #19
  41bab2:	4620      	mov	r0, r4
  41bab4:	4bc2      	ldr	r3, [pc, #776]	; (41bdc0 <basic_init+0x1014>)
  41bab6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41bab8:	4bc2      	ldr	r3, [pc, #776]	; (41bdc4 <basic_init+0x1018>)
  41baba:	681c      	ldr	r4, [r3, #0]
  41babc:	3410      	adds	r4, #16
  41babe:	2000      	movs	r0, #0
  41bac0:	4bc1      	ldr	r3, [pc, #772]	; (41bdc8 <basic_init+0x101c>)
  41bac2:	4798      	blx	r3
  41bac4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bac8:	3050      	adds	r0, #80	; 0x50
  41baca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bace:	f280 8463 	bge.w	41c398 <basic_init+0x15ec>
  41bad2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bad4:	2110      	movs	r1, #16
  41bad6:	4620      	mov	r0, r4
  41bad8:	4bb9      	ldr	r3, [pc, #740]	; (41bdc0 <basic_init+0x1014>)
  41bada:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41badc:	4bb9      	ldr	r3, [pc, #740]	; (41bdc4 <basic_init+0x1018>)
  41bade:	681c      	ldr	r4, [r3, #0]
  41bae0:	3410      	adds	r4, #16
  41bae2:	2000      	movs	r0, #0
  41bae4:	4bb8      	ldr	r3, [pc, #736]	; (41bdc8 <basic_init+0x101c>)
  41bae6:	4798      	blx	r3
  41bae8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41baec:	3050      	adds	r0, #80	; 0x50
  41baee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41baf2:	f280 8460 	bge.w	41c3b6 <basic_init+0x160a>
  41baf6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41baf8:	2111      	movs	r1, #17
  41bafa:	4620      	mov	r0, r4
  41bafc:	4bb0      	ldr	r3, [pc, #704]	; (41bdc0 <basic_init+0x1014>)
  41bafe:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41bb00:	4bb0      	ldr	r3, [pc, #704]	; (41bdc4 <basic_init+0x1018>)
  41bb02:	681c      	ldr	r4, [r3, #0]
  41bb04:	3410      	adds	r4, #16
  41bb06:	2000      	movs	r0, #0
  41bb08:	4baf      	ldr	r3, [pc, #700]	; (41bdc8 <basic_init+0x101c>)
  41bb0a:	4798      	blx	r3
  41bb0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bb10:	0080      	lsls	r0, r0, #2
  41bb12:	3050      	adds	r0, #80	; 0x50
  41bb14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb18:	f280 845c 	bge.w	41c3d4 <basic_init+0x1628>
  41bb1c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bb1e:	2114      	movs	r1, #20
  41bb20:	4620      	mov	r0, r4
  41bb22:	4ba7      	ldr	r3, [pc, #668]	; (41bdc0 <basic_init+0x1014>)
  41bb24:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41bb26:	4ba7      	ldr	r3, [pc, #668]	; (41bdc4 <basic_init+0x1018>)
  41bb28:	681c      	ldr	r4, [r3, #0]
  41bb2a:	3410      	adds	r4, #16
  41bb2c:	4ba7      	ldr	r3, [pc, #668]	; (41bdcc <basic_init+0x1020>)
  41bb2e:	6a1b      	ldr	r3, [r3, #32]
  41bb30:	f013 0f20 	tst.w	r3, #32
  41bb34:	f000 845e 	beq.w	41c3f4 <basic_init+0x1648>
  41bb38:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41bb3a:	2140      	movs	r1, #64	; 0x40
  41bb3c:	4620      	mov	r0, r4
  41bb3e:	4da0      	ldr	r5, [pc, #640]	; (41bdc0 <basic_init+0x1014>)
  41bb40:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41bb42:	4ca0      	ldr	r4, [pc, #640]	; (41bdc4 <basic_init+0x1018>)
  41bb44:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41bb46:	2200      	movs	r2, #0
  41bb48:	214c      	movs	r1, #76	; 0x4c
  41bb4a:	3010      	adds	r0, #16
  41bb4c:	4ea0      	ldr	r6, [pc, #640]	; (41bdd0 <basic_init+0x1024>)
  41bb4e:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41bb50:	6820      	ldr	r0, [r4, #0]
  41bb52:	227f      	movs	r2, #127	; 0x7f
  41bb54:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41bb58:	3010      	adds	r0, #16
  41bb5a:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41bb5c:	6820      	ldr	r0, [r4, #0]
  41bb5e:	4f9b      	ldr	r7, [pc, #620]	; (41bdcc <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41bb60:	89ba      	ldrh	r2, [r7, #12]
  41bb62:	2149      	movs	r1, #73	; 0x49
  41bb64:	3010      	adds	r0, #16
  41bb66:	4e9b      	ldr	r6, [pc, #620]	; (41bdd4 <basic_init+0x1028>)
  41bb68:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41bb6a:	6820      	ldr	r0, [r4, #0]
  41bb6c:	89fa      	ldrh	r2, [r7, #14]
  41bb6e:	f240 4149 	movw	r1, #1097	; 0x449
  41bb72:	3010      	adds	r0, #16
  41bb74:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41bb76:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41bb78:	2200      	movs	r2, #0
  41bb7a:	21b0      	movs	r1, #176	; 0xb0
  41bb7c:	3010      	adds	r0, #16
  41bb7e:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41bb80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41bb82:	223c      	movs	r2, #60	; 0x3c
  41bb84:	21b5      	movs	r1, #181	; 0xb5
  41bb86:	3010      	adds	r0, #16
  41bb88:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41bb8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41bb8c:	2229      	movs	r2, #41	; 0x29
  41bb8e:	21b6      	movs	r1, #182	; 0xb6
  41bb90:	3010      	adds	r0, #16
  41bb92:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41bb94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41bb96:	224c      	movs	r2, #76	; 0x4c
  41bb98:	21b7      	movs	r1, #183	; 0xb7
  41bb9a:	3010      	adds	r0, #16
  41bb9c:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41bb9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41bba0:	2200      	movs	r2, #0
  41bba2:	21b1      	movs	r1, #177	; 0xb1
  41bba4:	3010      	adds	r0, #16
  41bba6:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41bba8:	6820      	ldr	r0, [r4, #0]
  41bbaa:	2200      	movs	r2, #0
  41bbac:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41bbb0:	3010      	adds	r0, #16
  41bbb2:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41bbb4:	6820      	ldr	r0, [r4, #0]
  41bbb6:	3014      	adds	r0, #20
  41bbb8:	4b87      	ldr	r3, [pc, #540]	; (41bdd8 <basic_init+0x102c>)
  41bbba:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bbbc:	6824      	ldr	r4, [r4, #0]
  41bbbe:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bbc0:	2000      	movs	r0, #0
  41bbc2:	4b86      	ldr	r3, [pc, #536]	; (41bddc <basic_init+0x1030>)
  41bbc4:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bbc6:	2801      	cmp	r0, #1
  41bbc8:	f240 842d 	bls.w	41c426 <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bbcc:	2000      	movs	r0, #0
  41bbce:	4b7e      	ldr	r3, [pc, #504]	; (41bdc8 <basic_init+0x101c>)
  41bbd0:	4798      	blx	r3
  41bbd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bbd6:	00c0      	lsls	r0, r0, #3
  41bbd8:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bbda:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bbde:	f280 843f 	bge.w	41c460 <basic_init+0x16b4>
  41bbe2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bbe4:	2114      	movs	r1, #20
  41bbe6:	4620      	mov	r0, r4
  41bbe8:	4b75      	ldr	r3, [pc, #468]	; (41bdc0 <basic_init+0x1014>)
  41bbea:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41bbec:	4b75      	ldr	r3, [pc, #468]	; (41bdc4 <basic_init+0x1018>)
  41bbee:	6818      	ldr	r0, [r3, #0]
  41bbf0:	3018      	adds	r0, #24
  41bbf2:	4b79      	ldr	r3, [pc, #484]	; (41bdd8 <basic_init+0x102c>)
  41bbf4:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41bbf6:	2000      	movs	r0, #0
  41bbf8:	4b78      	ldr	r3, [pc, #480]	; (41bddc <basic_init+0x1030>)
  41bbfa:	4798      	blx	r3
  41bbfc:	2801      	cmp	r0, #1
  41bbfe:	f240 843f 	bls.w	41c480 <basic_init+0x16d4>
  41bc02:	2000      	movs	r0, #0
  41bc04:	4b70      	ldr	r3, [pc, #448]	; (41bdc8 <basic_init+0x101c>)
  41bc06:	4798      	blx	r3
  41bc08:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bc0c:	0080      	lsls	r0, r0, #2
  41bc0e:	3050      	adds	r0, #80	; 0x50
  41bc10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bc14:	f280 8451 	bge.w	41c4ba <basic_init+0x170e>
  41bc18:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41bc1a:	4e6a      	ldr	r6, [pc, #424]	; (41bdc4 <basic_init+0x1018>)
  41bc1c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bc1e:	4622      	mov	r2, r4
  41bc20:	2112      	movs	r1, #18
  41bc22:	3018      	adds	r0, #24
  41bc24:	4d66      	ldr	r5, [pc, #408]	; (41bdc0 <basic_init+0x1014>)
  41bc26:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bc28:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bc2a:	4622      	mov	r2, r4
  41bc2c:	2113      	movs	r1, #19
  41bc2e:	3018      	adds	r0, #24
  41bc30:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41bc32:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bc34:	4622      	mov	r2, r4
  41bc36:	2110      	movs	r1, #16
  41bc38:	3018      	adds	r0, #24
  41bc3a:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bc3c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bc3e:	4622      	mov	r2, r4
  41bc40:	2111      	movs	r1, #17
  41bc42:	3018      	adds	r0, #24
  41bc44:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bc46:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bc48:	4622      	mov	r2, r4
  41bc4a:	2114      	movs	r1, #20
  41bc4c:	3018      	adds	r0, #24
  41bc4e:	47a8      	blx	r5
  41bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41bc52:	2302      	movs	r3, #2
  41bc54:	f04f 0200 	mov.w	r2, #0
  41bc58:	f363 0202 	bfi	r2, r3, #0, #3
  41bc5c:	2108      	movs	r1, #8
  41bc5e:	f361 02c7 	bfi	r2, r1, #3, #5
  41bc62:	210b      	movs	r1, #11
  41bc64:	f361 220c 	bfi	r2, r1, #8, #5
  41bc68:	f363 324f 	bfi	r2, r3, #13, #3
  41bc6c:	f7ff b8ba 	b.w	41ade4 <basic_init+0x38>
  41bc70:	f04f 0207 	mov.w	r2, #7
  41bc74:	231c      	movs	r3, #28
  41bc76:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc7a:	231d      	movs	r3, #29
  41bc7c:	f363 220c 	bfi	r2, r3, #8, #5
  41bc80:	2302      	movs	r3, #2
  41bc82:	f363 324f 	bfi	r2, r3, #13, #3
  41bc86:	f7ff b8c7 	b.w	41ae18 <basic_init+0x6c>
  41bc8a:	f04f 0207 	mov.w	r2, #7
  41bc8e:	231c      	movs	r3, #28
  41bc90:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc94:	231d      	movs	r3, #29
  41bc96:	f363 220c 	bfi	r2, r3, #8, #5
  41bc9a:	2302      	movs	r3, #2
  41bc9c:	f363 324f 	bfi	r2, r3, #13, #3
  41bca0:	f7ff b8d5 	b.w	41ae4e <basic_init+0xa2>
  41bca4:	f04f 0207 	mov.w	r2, #7
  41bca8:	231c      	movs	r3, #28
  41bcaa:	f363 02c7 	bfi	r2, r3, #3, #5
  41bcae:	231d      	movs	r3, #29
  41bcb0:	f363 220c 	bfi	r2, r3, #8, #5
  41bcb4:	2302      	movs	r3, #2
  41bcb6:	f363 324f 	bfi	r2, r3, #13, #3
  41bcba:	f7ff b8e2 	b.w	41ae82 <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41bcbe:	2000      	movs	r0, #0
  41bcc0:	4b41      	ldr	r3, [pc, #260]	; (41bdc8 <basic_init+0x101c>)
  41bcc2:	4798      	blx	r3
  41bcc4:	300a      	adds	r0, #10
  41bcc6:	00c0      	lsls	r0, r0, #3
  41bcc8:	4b45      	ldr	r3, [pc, #276]	; (41bde0 <basic_init+0x1034>)
  41bcca:	fb83 2300 	smull	r2, r3, r3, r0
  41bcce:	17c2      	asrs	r2, r0, #31
  41bcd0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bcd4:	b212      	sxth	r2, r2
  41bcd6:	f7ff b8f4 	b.w	41aec2 <basic_init+0x116>
  41bcda:	f04f 0200 	mov.w	r2, #0
  41bcde:	2303      	movs	r3, #3
  41bce0:	f363 0202 	bfi	r2, r3, #0, #3
  41bce4:	230b      	movs	r3, #11
  41bce6:	f363 02c7 	bfi	r2, r3, #3, #5
  41bcea:	230e      	movs	r3, #14
  41bcec:	f363 220c 	bfi	r2, r3, #8, #5
  41bcf0:	f36f 324f 	bfc	r2, #13, #3
  41bcf4:	f7ff b8fa 	b.w	41aeec <basic_init+0x140>
  41bcf8:	f04f 0200 	mov.w	r2, #0
  41bcfc:	2304      	movs	r3, #4
  41bcfe:	f363 0202 	bfi	r2, r3, #0, #3
  41bd02:	2310      	movs	r3, #16
  41bd04:	f363 02c7 	bfi	r2, r3, #3, #5
  41bd08:	2312      	movs	r3, #18
  41bd0a:	f363 220c 	bfi	r2, r3, #8, #5
  41bd0e:	2302      	movs	r3, #2
  41bd10:	f363 324f 	bfi	r2, r3, #13, #3
  41bd14:	f7ff b905 	b.w	41af22 <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41bd18:	4b2a      	ldr	r3, [pc, #168]	; (41bdc4 <basic_init+0x1018>)
  41bd1a:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41bd1c:	4b2b      	ldr	r3, [pc, #172]	; (41bdcc <basic_init+0x1020>)
  41bd1e:	899a      	ldrh	r2, [r3, #12]
  41bd20:	f240 2139 	movw	r1, #569	; 0x239
  41bd24:	3004      	adds	r0, #4
  41bd26:	4b2b      	ldr	r3, [pc, #172]	; (41bdd4 <basic_init+0x1028>)
  41bd28:	4798      	blx	r3
  41bd2a:	f7ff b903 	b.w	41af34 <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41bd2e:	2000      	movs	r0, #0
  41bd30:	4b25      	ldr	r3, [pc, #148]	; (41bdc8 <basic_init+0x101c>)
  41bd32:	4798      	blx	r3
  41bd34:	3028      	adds	r0, #40	; 0x28
  41bd36:	0040      	lsls	r0, r0, #1
  41bd38:	4b29      	ldr	r3, [pc, #164]	; (41bde0 <basic_init+0x1034>)
  41bd3a:	fb83 2300 	smull	r2, r3, r3, r0
  41bd3e:	17c2      	asrs	r2, r0, #31
  41bd40:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bd44:	b212      	sxth	r2, r2
  41bd46:	f7ff b90a 	b.w	41af5e <basic_init+0x1b2>
  41bd4a:	f04f 32ff 	mov.w	r2, #4294967295
  41bd4e:	f7ff b927 	b.w	41afa0 <basic_init+0x1f4>
  41bd52:	f04f 32ff 	mov.w	r2, #4294967295
  41bd56:	f7ff b945 	b.w	41afe4 <basic_init+0x238>
  41bd5a:	f04f 32ff 	mov.w	r2, #4294967295
  41bd5e:	f7ff b95c 	b.w	41b01a <basic_init+0x26e>
  41bd62:	f04f 32ff 	mov.w	r2, #4294967295
  41bd66:	f7ff b974 	b.w	41b052 <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41bd6a:	2000      	movs	r0, #0
  41bd6c:	4b16      	ldr	r3, [pc, #88]	; (41bdc8 <basic_init+0x101c>)
  41bd6e:	4798      	blx	r3
  41bd70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd74:	3050      	adds	r0, #80	; 0x50
  41bd76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bd7a:	da02      	bge.n	41bd82 <basic_init+0xfd6>
  41bd7c:	2401      	movs	r4, #1
  41bd7e:	f7ff b986 	b.w	41b08e <basic_init+0x2e2>
  41bd82:	2000      	movs	r0, #0
  41bd84:	4b10      	ldr	r3, [pc, #64]	; (41bdc8 <basic_init+0x101c>)
  41bd86:	4798      	blx	r3
  41bd88:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bd8c:	3050      	adds	r0, #80	; 0x50
  41bd8e:	4a14      	ldr	r2, [pc, #80]	; (41bde0 <basic_init+0x1034>)
  41bd90:	fb82 3200 	smull	r3, r2, r2, r0
  41bd94:	17c4      	asrs	r4, r0, #31
  41bd96:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bd9a:	b2a4      	uxth	r4, r4
  41bd9c:	f7ff b977 	b.w	41b08e <basic_init+0x2e2>
  41bda0:	2000      	movs	r0, #0
  41bda2:	4b09      	ldr	r3, [pc, #36]	; (41bdc8 <basic_init+0x101c>)
  41bda4:	4798      	blx	r3
  41bda6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bdaa:	0040      	lsls	r0, r0, #1
  41bdac:	3050      	adds	r0, #80	; 0x50
  41bdae:	4a0c      	ldr	r2, [pc, #48]	; (41bde0 <basic_init+0x1034>)
  41bdb0:	fb82 3200 	smull	r3, r2, r2, r0
  41bdb4:	17c4      	asrs	r4, r0, #31
  41bdb6:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bdba:	b2a4      	uxth	r4, r4
  41bdbc:	f7ff b967 	b.w	41b08e <basic_init+0x2e2>
  41bdc0:	00409a6d 	.word	0x00409a6d
  41bdc4:	20414798 	.word	0x20414798
  41bdc8:	0041445d 	.word	0x0041445d
  41bdcc:	2041479c 	.word	0x2041479c
  41bdd0:	00409d8d 	.word	0x00409d8d
  41bdd4:	00409bfd 	.word	0x00409bfd
  41bdd8:	00417515 	.word	0x00417515
  41bddc:	0041447d 	.word	0x0041447d
  41bde0:	66666667 	.word	0x66666667
  41bde4:	2000      	movs	r0, #0
  41bde6:	4bdf      	ldr	r3, [pc, #892]	; (41c164 <basic_init+0x13b8>)
  41bde8:	4798      	blx	r3
  41bdea:	3028      	adds	r0, #40	; 0x28
  41bdec:	0040      	lsls	r0, r0, #1
  41bdee:	4bde      	ldr	r3, [pc, #888]	; (41c168 <basic_init+0x13bc>)
  41bdf0:	fb83 2300 	smull	r2, r3, r3, r0
  41bdf4:	17c2      	asrs	r2, r0, #31
  41bdf6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bdfa:	b292      	uxth	r2, r2
  41bdfc:	f7ff b951 	b.w	41b0a2 <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41be00:	2000      	movs	r0, #0
  41be02:	4bd8      	ldr	r3, [pc, #864]	; (41c164 <basic_init+0x13b8>)
  41be04:	4798      	blx	r3
  41be06:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be0a:	3050      	adds	r0, #80	; 0x50
  41be0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be10:	da02      	bge.n	41be18 <basic_init+0x106c>
  41be12:	2401      	movs	r4, #1
  41be14:	f7ff b974 	b.w	41b100 <basic_init+0x354>
  41be18:	2000      	movs	r0, #0
  41be1a:	4bd2      	ldr	r3, [pc, #840]	; (41c164 <basic_init+0x13b8>)
  41be1c:	4798      	blx	r3
  41be1e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be22:	3050      	adds	r0, #80	; 0x50
  41be24:	4ad0      	ldr	r2, [pc, #832]	; (41c168 <basic_init+0x13bc>)
  41be26:	fb82 3200 	smull	r3, r2, r2, r0
  41be2a:	17c4      	asrs	r4, r0, #31
  41be2c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41be30:	b2a4      	uxth	r4, r4
  41be32:	f7ff b965 	b.w	41b100 <basic_init+0x354>
  41be36:	2000      	movs	r0, #0
  41be38:	4bca      	ldr	r3, [pc, #808]	; (41c164 <basic_init+0x13b8>)
  41be3a:	4798      	blx	r3
  41be3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be40:	0040      	lsls	r0, r0, #1
  41be42:	3050      	adds	r0, #80	; 0x50
  41be44:	4ac8      	ldr	r2, [pc, #800]	; (41c168 <basic_init+0x13bc>)
  41be46:	fb82 3200 	smull	r3, r2, r2, r0
  41be4a:	17c4      	asrs	r4, r0, #31
  41be4c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41be50:	b2a4      	uxth	r4, r4
  41be52:	f7ff b955 	b.w	41b100 <basic_init+0x354>
  41be56:	2000      	movs	r0, #0
  41be58:	4bc2      	ldr	r3, [pc, #776]	; (41c164 <basic_init+0x13b8>)
  41be5a:	4798      	blx	r3
  41be5c:	3028      	adds	r0, #40	; 0x28
  41be5e:	0040      	lsls	r0, r0, #1
  41be60:	4bc1      	ldr	r3, [pc, #772]	; (41c168 <basic_init+0x13bc>)
  41be62:	fb83 2300 	smull	r2, r3, r3, r0
  41be66:	17c2      	asrs	r2, r0, #31
  41be68:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41be6c:	b292      	uxth	r2, r2
  41be6e:	f7ff b951 	b.w	41b114 <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41be72:	2000      	movs	r0, #0
  41be74:	4bbb      	ldr	r3, [pc, #748]	; (41c164 <basic_init+0x13b8>)
  41be76:	4798      	blx	r3
  41be78:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be7c:	3050      	adds	r0, #80	; 0x50
  41be7e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be82:	da02      	bge.n	41be8a <basic_init+0x10de>
  41be84:	2401      	movs	r4, #1
  41be86:	f7ff b960 	b.w	41b14a <basic_init+0x39e>
  41be8a:	2000      	movs	r0, #0
  41be8c:	4bb5      	ldr	r3, [pc, #724]	; (41c164 <basic_init+0x13b8>)
  41be8e:	4798      	blx	r3
  41be90:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be94:	3050      	adds	r0, #80	; 0x50
  41be96:	4ab4      	ldr	r2, [pc, #720]	; (41c168 <basic_init+0x13bc>)
  41be98:	fb82 3200 	smull	r3, r2, r2, r0
  41be9c:	17c4      	asrs	r4, r0, #31
  41be9e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bea2:	b2a4      	uxth	r4, r4
  41bea4:	f7ff b951 	b.w	41b14a <basic_init+0x39e>
  41bea8:	2000      	movs	r0, #0
  41beaa:	4bae      	ldr	r3, [pc, #696]	; (41c164 <basic_init+0x13b8>)
  41beac:	4798      	blx	r3
  41beae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beb2:	0040      	lsls	r0, r0, #1
  41beb4:	3050      	adds	r0, #80	; 0x50
  41beb6:	4aac      	ldr	r2, [pc, #688]	; (41c168 <basic_init+0x13bc>)
  41beb8:	fb82 3200 	smull	r3, r2, r2, r0
  41bebc:	17c4      	asrs	r4, r0, #31
  41bebe:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bec2:	b2a4      	uxth	r4, r4
  41bec4:	f7ff b941 	b.w	41b14a <basic_init+0x39e>
  41bec8:	2000      	movs	r0, #0
  41beca:	4ba6      	ldr	r3, [pc, #664]	; (41c164 <basic_init+0x13b8>)
  41becc:	4798      	blx	r3
  41bece:	3028      	adds	r0, #40	; 0x28
  41bed0:	0040      	lsls	r0, r0, #1
  41bed2:	4ba5      	ldr	r3, [pc, #660]	; (41c168 <basic_init+0x13bc>)
  41bed4:	fb83 2300 	smull	r2, r3, r3, r0
  41bed8:	17c2      	asrs	r2, r0, #31
  41beda:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bede:	b292      	uxth	r2, r2
  41bee0:	f7ff b93d 	b.w	41b15e <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41bee4:	2000      	movs	r0, #0
  41bee6:	4b9f      	ldr	r3, [pc, #636]	; (41c164 <basic_init+0x13b8>)
  41bee8:	4798      	blx	r3
  41beea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41beee:	3050      	adds	r0, #80	; 0x50
  41bef0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bef4:	da02      	bge.n	41befc <basic_init+0x1150>
  41bef6:	2401      	movs	r4, #1
  41bef8:	f7ff b94c 	b.w	41b194 <basic_init+0x3e8>
  41befc:	2000      	movs	r0, #0
  41befe:	4b99      	ldr	r3, [pc, #612]	; (41c164 <basic_init+0x13b8>)
  41bf00:	4798      	blx	r3
  41bf02:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf06:	3050      	adds	r0, #80	; 0x50
  41bf08:	4a97      	ldr	r2, [pc, #604]	; (41c168 <basic_init+0x13bc>)
  41bf0a:	fb82 3200 	smull	r3, r2, r2, r0
  41bf0e:	17c4      	asrs	r4, r0, #31
  41bf10:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bf14:	b2a4      	uxth	r4, r4
  41bf16:	f7ff b93d 	b.w	41b194 <basic_init+0x3e8>
  41bf1a:	2000      	movs	r0, #0
  41bf1c:	4b91      	ldr	r3, [pc, #580]	; (41c164 <basic_init+0x13b8>)
  41bf1e:	4798      	blx	r3
  41bf20:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf24:	0040      	lsls	r0, r0, #1
  41bf26:	3050      	adds	r0, #80	; 0x50
  41bf28:	4a8f      	ldr	r2, [pc, #572]	; (41c168 <basic_init+0x13bc>)
  41bf2a:	fb82 3200 	smull	r3, r2, r2, r0
  41bf2e:	17c4      	asrs	r4, r0, #31
  41bf30:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41bf34:	b2a4      	uxth	r4, r4
  41bf36:	f7ff b92d 	b.w	41b194 <basic_init+0x3e8>
  41bf3a:	2000      	movs	r0, #0
  41bf3c:	4b89      	ldr	r3, [pc, #548]	; (41c164 <basic_init+0x13b8>)
  41bf3e:	4798      	blx	r3
  41bf40:	3028      	adds	r0, #40	; 0x28
  41bf42:	0040      	lsls	r0, r0, #1
  41bf44:	4b88      	ldr	r3, [pc, #544]	; (41c168 <basic_init+0x13bc>)
  41bf46:	fb83 2300 	smull	r2, r3, r3, r0
  41bf4a:	17c2      	asrs	r2, r0, #31
  41bf4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf50:	b292      	uxth	r2, r2
  41bf52:	f7ff b929 	b.w	41b1a8 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41bf56:	2000      	movs	r0, #0
  41bf58:	4b82      	ldr	r3, [pc, #520]	; (41c164 <basic_init+0x13b8>)
  41bf5a:	4798      	blx	r3
  41bf5c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf60:	3050      	adds	r0, #80	; 0x50
  41bf62:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf66:	da02      	bge.n	41bf6e <basic_init+0x11c2>
  41bf68:	2201      	movs	r2, #1
  41bf6a:	f7ff b938 	b.w	41b1de <basic_init+0x432>
  41bf6e:	2000      	movs	r0, #0
  41bf70:	4b7c      	ldr	r3, [pc, #496]	; (41c164 <basic_init+0x13b8>)
  41bf72:	4798      	blx	r3
  41bf74:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf78:	3050      	adds	r0, #80	; 0x50
  41bf7a:	4b7b      	ldr	r3, [pc, #492]	; (41c168 <basic_init+0x13bc>)
  41bf7c:	fb83 2300 	smull	r2, r3, r3, r0
  41bf80:	17c2      	asrs	r2, r0, #31
  41bf82:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bf86:	b212      	sxth	r2, r2
  41bf88:	f7ff b929 	b.w	41b1de <basic_init+0x432>
  41bf8c:	2000      	movs	r0, #0
  41bf8e:	4b75      	ldr	r3, [pc, #468]	; (41c164 <basic_init+0x13b8>)
  41bf90:	4798      	blx	r3
  41bf92:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41bf96:	0040      	lsls	r0, r0, #1
  41bf98:	3050      	adds	r0, #80	; 0x50
  41bf9a:	4b73      	ldr	r3, [pc, #460]	; (41c168 <basic_init+0x13bc>)
  41bf9c:	fb83 2300 	smull	r2, r3, r3, r0
  41bfa0:	17c2      	asrs	r2, r0, #31
  41bfa2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41bfa6:	b212      	sxth	r2, r2
  41bfa8:	f7ff b919 	b.w	41b1de <basic_init+0x432>
  41bfac:	2302      	movs	r3, #2
  41bfae:	f04f 0200 	mov.w	r2, #0
  41bfb2:	f363 0202 	bfi	r2, r3, #0, #3
  41bfb6:	2108      	movs	r1, #8
  41bfb8:	f361 02c7 	bfi	r2, r1, #3, #5
  41bfbc:	2109      	movs	r1, #9
  41bfbe:	f361 220c 	bfi	r2, r1, #8, #5
  41bfc2:	f363 324f 	bfi	r2, r3, #13, #3
  41bfc6:	f7ff b938 	b.w	41b23a <basic_init+0x48e>
  41bfca:	f04f 0200 	mov.w	r2, #0
  41bfce:	2302      	movs	r3, #2
  41bfd0:	f363 0202 	bfi	r2, r3, #0, #3
  41bfd4:	2308      	movs	r3, #8
  41bfd6:	f363 02c7 	bfi	r2, r3, #3, #5
  41bfda:	f363 220c 	bfi	r2, r3, #8, #5
  41bfde:	f36f 324f 	bfc	r2, #13, #3
  41bfe2:	f7ff b941 	b.w	41b268 <basic_init+0x4bc>
  41bfe6:	f04f 0200 	mov.w	r2, #0
  41bfea:	2305      	movs	r3, #5
  41bfec:	f363 0202 	bfi	r2, r3, #0, #3
  41bff0:	2314      	movs	r3, #20
  41bff2:	f363 02c7 	bfi	r2, r3, #3, #5
  41bff6:	2315      	movs	r3, #21
  41bff8:	f363 220c 	bfi	r2, r3, #8, #5
  41bffc:	2302      	movs	r3, #2
  41bffe:	f363 324f 	bfi	r2, r3, #13, #3
  41c002:	f7ff b94a 	b.w	41b29a <basic_init+0x4ee>
  41c006:	f04f 0200 	mov.w	r2, #0
  41c00a:	2305      	movs	r3, #5
  41c00c:	f363 0202 	bfi	r2, r3, #0, #3
  41c010:	2314      	movs	r3, #20
  41c012:	f363 02c7 	bfi	r2, r3, #3, #5
  41c016:	2315      	movs	r3, #21
  41c018:	f363 220c 	bfi	r2, r3, #8, #5
  41c01c:	2302      	movs	r3, #2
  41c01e:	f363 324f 	bfi	r2, r3, #13, #3
  41c022:	f7ff b954 	b.w	41b2ce <basic_init+0x522>
  41c026:	f04f 0200 	mov.w	r2, #0
  41c02a:	2305      	movs	r3, #5
  41c02c:	f363 0202 	bfi	r2, r3, #0, #3
  41c030:	2314      	movs	r3, #20
  41c032:	f363 02c7 	bfi	r2, r3, #3, #5
  41c036:	2315      	movs	r3, #21
  41c038:	f363 220c 	bfi	r2, r3, #8, #5
  41c03c:	2302      	movs	r3, #2
  41c03e:	f363 324f 	bfi	r2, r3, #13, #3
  41c042:	f7ff b95d 	b.w	41b300 <basic_init+0x554>
  41c046:	f04f 0200 	mov.w	r2, #0
  41c04a:	2305      	movs	r3, #5
  41c04c:	f363 0202 	bfi	r2, r3, #0, #3
  41c050:	2314      	movs	r3, #20
  41c052:	f363 02c7 	bfi	r2, r3, #3, #5
  41c056:	2315      	movs	r3, #21
  41c058:	f363 220c 	bfi	r2, r3, #8, #5
  41c05c:	2302      	movs	r3, #2
  41c05e:	f363 324f 	bfi	r2, r3, #13, #3
  41c062:	f7ff b967 	b.w	41b334 <basic_init+0x588>
  41c066:	f04f 0200 	mov.w	r2, #0
  41c06a:	2302      	movs	r3, #2
  41c06c:	f363 0202 	bfi	r2, r3, #0, #3
  41c070:	2309      	movs	r3, #9
  41c072:	f363 02c7 	bfi	r2, r3, #3, #5
  41c076:	230a      	movs	r3, #10
  41c078:	f363 220c 	bfi	r2, r3, #8, #5
  41c07c:	2303      	movs	r3, #3
  41c07e:	f363 324f 	bfi	r2, r3, #13, #3
  41c082:	f7ff b971 	b.w	41b368 <basic_init+0x5bc>
  41c086:	f04f 0200 	mov.w	r2, #0
  41c08a:	2303      	movs	r3, #3
  41c08c:	f363 0202 	bfi	r2, r3, #0, #3
  41c090:	230b      	movs	r3, #11
  41c092:	f363 02c7 	bfi	r2, r3, #3, #5
  41c096:	230e      	movs	r3, #14
  41c098:	f363 220c 	bfi	r2, r3, #8, #5
  41c09c:	f36f 324f 	bfc	r2, #13, #3
  41c0a0:	f7ff b982 	b.w	41b3a8 <basic_init+0x5fc>
  41c0a4:	f04f 0200 	mov.w	r2, #0
  41c0a8:	2303      	movs	r3, #3
  41c0aa:	f363 0202 	bfi	r2, r3, #0, #3
  41c0ae:	230b      	movs	r3, #11
  41c0b0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c0b4:	230d      	movs	r3, #13
  41c0b6:	f363 220c 	bfi	r2, r3, #8, #5
  41c0ba:	2301      	movs	r3, #1
  41c0bc:	f363 324f 	bfi	r2, r3, #13, #3
  41c0c0:	f7ff b9b1 	b.w	41b426 <basic_init+0x67a>
  41c0c4:	f04f 0200 	mov.w	r2, #0
  41c0c8:	2303      	movs	r3, #3
  41c0ca:	f363 0202 	bfi	r2, r3, #0, #3
  41c0ce:	230b      	movs	r3, #11
  41c0d0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c0d4:	230d      	movs	r3, #13
  41c0d6:	f363 220c 	bfi	r2, r3, #8, #5
  41c0da:	2301      	movs	r3, #1
  41c0dc:	f363 324f 	bfi	r2, r3, #13, #3
  41c0e0:	f7ff b9bd 	b.w	41b45e <basic_init+0x6b2>
  41c0e4:	f04f 0200 	mov.w	r2, #0
  41c0e8:	2303      	movs	r3, #3
  41c0ea:	f363 0202 	bfi	r2, r3, #0, #3
  41c0ee:	230b      	movs	r3, #11
  41c0f0:	f363 02c7 	bfi	r2, r3, #3, #5
  41c0f4:	230d      	movs	r3, #13
  41c0f6:	f363 220c 	bfi	r2, r3, #8, #5
  41c0fa:	2301      	movs	r3, #1
  41c0fc:	f363 324f 	bfi	r2, r3, #13, #3
  41c100:	f7ff b9c9 	b.w	41b496 <basic_init+0x6ea>
  41c104:	f04f 0200 	mov.w	r2, #0
  41c108:	2303      	movs	r3, #3
  41c10a:	f363 0202 	bfi	r2, r3, #0, #3
  41c10e:	230b      	movs	r3, #11
  41c110:	f363 02c7 	bfi	r2, r3, #3, #5
  41c114:	230d      	movs	r3, #13
  41c116:	f363 220c 	bfi	r2, r3, #8, #5
  41c11a:	2301      	movs	r3, #1
  41c11c:	f363 324f 	bfi	r2, r3, #13, #3
  41c120:	f7ff b9d5 	b.w	41b4ce <basic_init+0x722>
  41c124:	f04f 32ff 	mov.w	r2, #4294967295
  41c128:	f7ff b9ed 	b.w	41b506 <basic_init+0x75a>
  41c12c:	f04f 32ff 	mov.w	r2, #4294967295
  41c130:	f7ff b9f8 	b.w	41b524 <basic_init+0x778>
  41c134:	f04f 32ff 	mov.w	r2, #4294967295
  41c138:	f7ff ba03 	b.w	41b542 <basic_init+0x796>
  41c13c:	f04f 0200 	mov.w	r2, #0
  41c140:	2304      	movs	r3, #4
  41c142:	f363 0202 	bfi	r2, r3, #0, #3
  41c146:	2313      	movs	r3, #19
  41c148:	f363 02c7 	bfi	r2, r3, #3, #5
  41c14c:	f363 220c 	bfi	r2, r3, #8, #5
  41c150:	2306      	movs	r3, #6
  41c152:	f363 324f 	bfi	r2, r3, #13, #3
  41c156:	f7ff ba0e 	b.w	41b576 <basic_init+0x7ca>
  41c15a:	f04f 32ff 	mov.w	r2, #4294967295
  41c15e:	f7ff ba26 	b.w	41b5ae <basic_init+0x802>
  41c162:	bf00      	nop
  41c164:	0041445d 	.word	0x0041445d
  41c168:	66666667 	.word	0x66666667
  41c16c:	f04f 32ff 	mov.w	r2, #4294967295
  41c170:	f7ff ba2c 	b.w	41b5cc <basic_init+0x820>
  41c174:	f04f 32ff 	mov.w	r2, #4294967295
  41c178:	f7ff ba37 	b.w	41b5ea <basic_init+0x83e>
  41c17c:	f04f 0200 	mov.w	r2, #0
  41c180:	2304      	movs	r3, #4
  41c182:	f363 0202 	bfi	r2, r3, #0, #3
  41c186:	2313      	movs	r3, #19
  41c188:	f363 02c7 	bfi	r2, r3, #3, #5
  41c18c:	f363 220c 	bfi	r2, r3, #8, #5
  41c190:	2306      	movs	r3, #6
  41c192:	f363 324f 	bfi	r2, r3, #13, #3
  41c196:	f7ff ba42 	b.w	41b61e <basic_init+0x872>
  41c19a:	f04f 0200 	mov.w	r2, #0
  41c19e:	2303      	movs	r3, #3
  41c1a0:	f363 0202 	bfi	r2, r3, #0, #3
  41c1a4:	230b      	movs	r3, #11
  41c1a6:	f363 02c7 	bfi	r2, r3, #3, #5
  41c1aa:	230e      	movs	r3, #14
  41c1ac:	f363 220c 	bfi	r2, r3, #8, #5
  41c1b0:	f36f 324f 	bfc	r2, #13, #3
  41c1b4:	f7ff ba58 	b.w	41b668 <basic_init+0x8bc>
  41c1b8:	f04f 0400 	mov.w	r4, #0
  41c1bc:	2303      	movs	r3, #3
  41c1be:	f363 0402 	bfi	r4, r3, #0, #3
  41c1c2:	230b      	movs	r3, #11
  41c1c4:	f363 04c7 	bfi	r4, r3, #3, #5
  41c1c8:	230e      	movs	r3, #14
  41c1ca:	f363 240c 	bfi	r4, r3, #8, #5
  41c1ce:	f36f 344f 	bfc	r4, #13, #3
  41c1d2:	4bc2      	ldr	r3, [pc, #776]	; (41c4dc <basic_init+0x1730>)
  41c1d4:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41c1d6:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41c1da:	264c      	movs	r6, #76	; 0x4c
  41c1dc:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41c1e0:	25b3      	movs	r5, #179	; 0xb3
  41c1e2:	fb05 f101 	mul.w	r1, r5, r1
  41c1e6:	fb06 1202 	mla	r2, r6, r2, r1
  41c1ea:	3280      	adds	r2, #128	; 0x80
  41c1ec:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41c1f0:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41c1f4:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41c1f8:	f04f 0200 	mov.w	r2, #0
  41c1fc:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41c200:	f003 0707 	and.w	r7, r3, #7
  41c204:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41c208:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41c20c:	f004 0707 	and.w	r7, r4, #7
  41c210:	00ff      	lsls	r7, r7, #3
  41c212:	fb05 f707 	mul.w	r7, r5, r7
  41c216:	fb06 7101 	mla	r1, r6, r1, r7
  41c21a:	3180      	adds	r1, #128	; 0x80
  41c21c:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41c220:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41c224:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41c228:	f367 0202 	bfi	r2, r7, #0, #3
  41c22c:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41c230:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41c234:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41c238:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41c23c:	fb05 f404 	mul.w	r4, r5, r4
  41c240:	fb06 4303 	mla	r3, r6, r3, r4
  41c244:	3380      	adds	r3, #128	; 0x80
  41c246:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41c24a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41c24e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41c252:	f363 220c 	bfi	r2, r3, #8, #5
  41c256:	f7ff ba5e 	b.w	41b716 <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41c25a:	f04f 0200 	mov.w	r2, #0
  41c25e:	2303      	movs	r3, #3
  41c260:	f363 0202 	bfi	r2, r3, #0, #3
  41c264:	230b      	movs	r3, #11
  41c266:	f363 02c7 	bfi	r2, r3, #3, #5
  41c26a:	230e      	movs	r3, #14
  41c26c:	f363 220c 	bfi	r2, r3, #8, #5
  41c270:	f36f 324f 	bfc	r2, #13, #3
  41c274:	f7ff ba7e 	b.w	41b774 <basic_init+0x9c8>
  41c278:	f04f 0200 	mov.w	r2, #0
  41c27c:	2304      	movs	r3, #4
  41c27e:	f363 0202 	bfi	r2, r3, #0, #3
  41c282:	2311      	movs	r3, #17
  41c284:	f363 02c7 	bfi	r2, r3, #3, #5
  41c288:	f363 220c 	bfi	r2, r3, #8, #5
  41c28c:	2302      	movs	r3, #2
  41c28e:	f363 324f 	bfi	r2, r3, #13, #3
  41c292:	f7ff ba89 	b.w	41b7a8 <basic_init+0x9fc>
  41c296:	f04f 0200 	mov.w	r2, #0
  41c29a:	2302      	movs	r3, #2
  41c29c:	f363 0202 	bfi	r2, r3, #0, #3
  41c2a0:	2308      	movs	r3, #8
  41c2a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2a6:	f363 220c 	bfi	r2, r3, #8, #5
  41c2aa:	f36f 324f 	bfc	r2, #13, #3
  41c2ae:	f7ff baa0 	b.w	41b7f2 <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c2b2:	2000      	movs	r0, #0
  41c2b4:	4b8a      	ldr	r3, [pc, #552]	; (41c4e0 <basic_init+0x1734>)
  41c2b6:	4798      	blx	r3
  41c2b8:	3028      	adds	r0, #40	; 0x28
  41c2ba:	0040      	lsls	r0, r0, #1
  41c2bc:	4b89      	ldr	r3, [pc, #548]	; (41c4e4 <basic_init+0x1738>)
  41c2be:	fb83 2300 	smull	r2, r3, r3, r0
  41c2c2:	17c2      	asrs	r2, r0, #31
  41c2c4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2c8:	b212      	sxth	r2, r2
  41c2ca:	f7ff baa3 	b.w	41b814 <basic_init+0xa68>
  41c2ce:	f04f 32ff 	mov.w	r2, #4294967295
  41c2d2:	f7ff bac0 	b.w	41b856 <basic_init+0xaaa>
  41c2d6:	f04f 32ff 	mov.w	r2, #4294967295
  41c2da:	f7ff bad6 	b.w	41b88a <basic_init+0xade>
  41c2de:	f04f 0200 	mov.w	r2, #0
  41c2e2:	2304      	movs	r3, #4
  41c2e4:	f363 0202 	bfi	r2, r3, #0, #3
  41c2e8:	2311      	movs	r3, #17
  41c2ea:	f363 02c7 	bfi	r2, r3, #3, #5
  41c2ee:	f363 220c 	bfi	r2, r3, #8, #5
  41c2f2:	2302      	movs	r3, #2
  41c2f4:	f363 324f 	bfi	r2, r3, #13, #3
  41c2f8:	f7ff baef 	b.w	41b8da <basic_init+0xb2e>
  41c2fc:	f04f 32ff 	mov.w	r2, #4294967295
  41c300:	f7ff bb05 	b.w	41b90e <basic_init+0xb62>
  41c304:	f04f 32ff 	mov.w	r2, #4294967295
  41c308:	f7ff bb1b 	b.w	41b942 <basic_init+0xb96>
  41c30c:	f04f 0200 	mov.w	r2, #0
  41c310:	2304      	movs	r3, #4
  41c312:	f363 0202 	bfi	r2, r3, #0, #3
  41c316:	2311      	movs	r3, #17
  41c318:	f363 02c7 	bfi	r2, r3, #3, #5
  41c31c:	f363 220c 	bfi	r2, r3, #8, #5
  41c320:	2302      	movs	r3, #2
  41c322:	f363 324f 	bfi	r2, r3, #13, #3
  41c326:	f7ff bb34 	b.w	41b992 <basic_init+0xbe6>
  41c32a:	f04f 32ff 	mov.w	r2, #4294967295
  41c32e:	f7ff bb4a 	b.w	41b9c6 <basic_init+0xc1a>
  41c332:	f04f 32ff 	mov.w	r2, #4294967295
  41c336:	f7ff bb5f 	b.w	41b9f8 <basic_init+0xc4c>
  41c33a:	f04f 0200 	mov.w	r2, #0
  41c33e:	2304      	movs	r3, #4
  41c340:	f363 0202 	bfi	r2, r3, #0, #3
  41c344:	2311      	movs	r3, #17
  41c346:	f363 02c7 	bfi	r2, r3, #3, #5
  41c34a:	f363 220c 	bfi	r2, r3, #8, #5
  41c34e:	2302      	movs	r3, #2
  41c350:	f363 324f 	bfi	r2, r3, #13, #3
  41c354:	f7ff bb78 	b.w	41ba48 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41c358:	2000      	movs	r0, #0
  41c35a:	4b61      	ldr	r3, [pc, #388]	; (41c4e0 <basic_init+0x1734>)
  41c35c:	4798      	blx	r3
  41c35e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c362:	00c0      	lsls	r0, r0, #3
  41c364:	3050      	adds	r0, #80	; 0x50
  41c366:	4b5f      	ldr	r3, [pc, #380]	; (41c4e4 <basic_init+0x1738>)
  41c368:	fb83 2300 	smull	r2, r3, r3, r0
  41c36c:	17c2      	asrs	r2, r0, #31
  41c36e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c372:	b212      	sxth	r2, r2
  41c374:	f7ff bb7b 	b.w	41ba6e <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41c378:	2000      	movs	r0, #0
  41c37a:	4b59      	ldr	r3, [pc, #356]	; (41c4e0 <basic_init+0x1734>)
  41c37c:	4798      	blx	r3
  41c37e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c382:	00c0      	lsls	r0, r0, #3
  41c384:	3050      	adds	r0, #80	; 0x50
  41c386:	4b57      	ldr	r3, [pc, #348]	; (41c4e4 <basic_init+0x1738>)
  41c388:	fb83 2300 	smull	r2, r3, r3, r0
  41c38c:	17c2      	asrs	r2, r0, #31
  41c38e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c392:	b212      	sxth	r2, r2
  41c394:	f7ff bb8c 	b.w	41bab0 <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41c398:	2000      	movs	r0, #0
  41c39a:	4b51      	ldr	r3, [pc, #324]	; (41c4e0 <basic_init+0x1734>)
  41c39c:	4798      	blx	r3
  41c39e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3a2:	3050      	adds	r0, #80	; 0x50
  41c3a4:	4b4f      	ldr	r3, [pc, #316]	; (41c4e4 <basic_init+0x1738>)
  41c3a6:	fb83 2300 	smull	r2, r3, r3, r0
  41c3aa:	17c2      	asrs	r2, r0, #31
  41c3ac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3b0:	b212      	sxth	r2, r2
  41c3b2:	f7ff bb8f 	b.w	41bad4 <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41c3b6:	2000      	movs	r0, #0
  41c3b8:	4b49      	ldr	r3, [pc, #292]	; (41c4e0 <basic_init+0x1734>)
  41c3ba:	4798      	blx	r3
  41c3bc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c3c0:	3050      	adds	r0, #80	; 0x50
  41c3c2:	4b48      	ldr	r3, [pc, #288]	; (41c4e4 <basic_init+0x1738>)
  41c3c4:	fb83 2300 	smull	r2, r3, r3, r0
  41c3c8:	17c2      	asrs	r2, r0, #31
  41c3ca:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3ce:	b212      	sxth	r2, r2
  41c3d0:	f7ff bb92 	b.w	41baf8 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41c3d4:	2000      	movs	r0, #0
  41c3d6:	4b42      	ldr	r3, [pc, #264]	; (41c4e0 <basic_init+0x1734>)
  41c3d8:	4798      	blx	r3
  41c3da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c3de:	0080      	lsls	r0, r0, #2
  41c3e0:	3050      	adds	r0, #80	; 0x50
  41c3e2:	4b40      	ldr	r3, [pc, #256]	; (41c4e4 <basic_init+0x1738>)
  41c3e4:	fb83 2300 	smull	r2, r3, r3, r0
  41c3e8:	17c2      	asrs	r2, r0, #31
  41c3ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c3ee:	b212      	sxth	r2, r2
  41c3f0:	f7ff bb95 	b.w	41bb1e <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41c3f4:	2000      	movs	r0, #0
  41c3f6:	4b3a      	ldr	r3, [pc, #232]	; (41c4e0 <basic_init+0x1734>)
  41c3f8:	4798      	blx	r3
  41c3fa:	3028      	adds	r0, #40	; 0x28
  41c3fc:	0040      	lsls	r0, r0, #1
  41c3fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c402:	da02      	bge.n	41c40a <basic_init+0x165e>
  41c404:	2201      	movs	r2, #1
  41c406:	f7ff bb98 	b.w	41bb3a <basic_init+0xd8e>
  41c40a:	2000      	movs	r0, #0
  41c40c:	4b34      	ldr	r3, [pc, #208]	; (41c4e0 <basic_init+0x1734>)
  41c40e:	4798      	blx	r3
  41c410:	3028      	adds	r0, #40	; 0x28
  41c412:	0040      	lsls	r0, r0, #1
  41c414:	4b33      	ldr	r3, [pc, #204]	; (41c4e4 <basic_init+0x1738>)
  41c416:	fb83 2300 	smull	r2, r3, r3, r0
  41c41a:	17c2      	asrs	r2, r0, #31
  41c41c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c420:	b212      	sxth	r2, r2
  41c422:	f7ff bb8a 	b.w	41bb3a <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c426:	2000      	movs	r0, #0
  41c428:	4b2d      	ldr	r3, [pc, #180]	; (41c4e0 <basic_init+0x1734>)
  41c42a:	4798      	blx	r3
  41c42c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c430:	0080      	lsls	r0, r0, #2
  41c432:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c434:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c438:	da02      	bge.n	41c440 <basic_init+0x1694>
  41c43a:	2201      	movs	r2, #1
  41c43c:	f7ff bbd2 	b.w	41bbe4 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c440:	2000      	movs	r0, #0
  41c442:	4b27      	ldr	r3, [pc, #156]	; (41c4e0 <basic_init+0x1734>)
  41c444:	4798      	blx	r3
  41c446:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c44a:	0080      	lsls	r0, r0, #2
  41c44c:	3050      	adds	r0, #80	; 0x50
  41c44e:	4b25      	ldr	r3, [pc, #148]	; (41c4e4 <basic_init+0x1738>)
  41c450:	fb83 2300 	smull	r2, r3, r3, r0
  41c454:	17c2      	asrs	r2, r0, #31
  41c456:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c45a:	b212      	sxth	r2, r2
  41c45c:	f7ff bbc2 	b.w	41bbe4 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c460:	2000      	movs	r0, #0
  41c462:	4b1f      	ldr	r3, [pc, #124]	; (41c4e0 <basic_init+0x1734>)
  41c464:	4798      	blx	r3
  41c466:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c46a:	00c0      	lsls	r0, r0, #3
  41c46c:	3050      	adds	r0, #80	; 0x50
  41c46e:	4b1d      	ldr	r3, [pc, #116]	; (41c4e4 <basic_init+0x1738>)
  41c470:	fb83 2300 	smull	r2, r3, r3, r0
  41c474:	17c2      	asrs	r2, r0, #31
  41c476:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c47a:	b212      	sxth	r2, r2
  41c47c:	f7ff bbb2 	b.w	41bbe4 <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41c480:	2000      	movs	r0, #0
  41c482:	4b17      	ldr	r3, [pc, #92]	; (41c4e0 <basic_init+0x1734>)
  41c484:	4798      	blx	r3
  41c486:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c48a:	0040      	lsls	r0, r0, #1
  41c48c:	3050      	adds	r0, #80	; 0x50
  41c48e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c492:	da02      	bge.n	41c49a <basic_init+0x16ee>
  41c494:	2401      	movs	r4, #1
  41c496:	f7ff bbc0 	b.w	41bc1a <basic_init+0xe6e>
  41c49a:	2000      	movs	r0, #0
  41c49c:	4b10      	ldr	r3, [pc, #64]	; (41c4e0 <basic_init+0x1734>)
  41c49e:	4798      	blx	r3
  41c4a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c4a4:	0040      	lsls	r0, r0, #1
  41c4a6:	3050      	adds	r0, #80	; 0x50
  41c4a8:	4b0e      	ldr	r3, [pc, #56]	; (41c4e4 <basic_init+0x1738>)
  41c4aa:	fb83 2300 	smull	r2, r3, r3, r0
  41c4ae:	17c4      	asrs	r4, r0, #31
  41c4b0:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41c4b4:	b224      	sxth	r4, r4
  41c4b6:	f7ff bbb0 	b.w	41bc1a <basic_init+0xe6e>
  41c4ba:	2000      	movs	r0, #0
  41c4bc:	4b08      	ldr	r3, [pc, #32]	; (41c4e0 <basic_init+0x1734>)
  41c4be:	4798      	blx	r3
  41c4c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c4c4:	0080      	lsls	r0, r0, #2
  41c4c6:	3050      	adds	r0, #80	; 0x50
  41c4c8:	4b06      	ldr	r3, [pc, #24]	; (41c4e4 <basic_init+0x1738>)
  41c4ca:	fb83 2300 	smull	r2, r3, r3, r0
  41c4ce:	17c4      	asrs	r4, r0, #31
  41c4d0:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41c4d4:	b224      	sxth	r4, r4
  41c4d6:	f7ff bba0 	b.w	41bc1a <basic_init+0xe6e>
  41c4da:	bf00      	nop
  41c4dc:	2041479c 	.word	0x2041479c
  41c4e0:	0041445d 	.word	0x0041445d
  41c4e4:	66666667 	.word	0x66666667

0041c4e8 <lv_theme_material_init>:
{
  41c4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41c4ec:	4680      	mov	r8, r0
  41c4ee:	460f      	mov	r7, r1
  41c4f0:	4615      	mov	r5, r2
  41c4f2:	461e      	mov	r6, r3
    if(!inited) {
  41c4f4:	4b27      	ldr	r3, [pc, #156]	; (41c594 <lv_theme_material_init+0xac>)
  41c4f6:	781b      	ldrb	r3, [r3, #0]
  41c4f8:	2b00      	cmp	r3, #0
  41c4fa:	d043      	beq.n	41c584 <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41c4fc:	4c26      	ldr	r4, [pc, #152]	; (41c598 <lv_theme_material_init+0xb0>)
  41c4fe:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41c502:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41c504:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41c506:	9b06      	ldr	r3, [sp, #24]
  41c508:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41c50a:	9b07      	ldr	r3, [sp, #28]
  41c50c:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41c50e:	9b08      	ldr	r3, [sp, #32]
  41c510:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41c512:	6225      	str	r5, [r4, #32]
    basic_init();
  41c514:	4b21      	ldr	r3, [pc, #132]	; (41c59c <lv_theme_material_init+0xb4>)
  41c516:	4798      	blx	r3
    bar_init();
  41c518:	4b21      	ldr	r3, [pc, #132]	; (41c5a0 <lv_theme_material_init+0xb8>)
  41c51a:	4798      	blx	r3
    led_init();
  41c51c:	4b21      	ldr	r3, [pc, #132]	; (41c5a4 <lv_theme_material_init+0xbc>)
  41c51e:	4798      	blx	r3
    slider_init();
  41c520:	4b21      	ldr	r3, [pc, #132]	; (41c5a8 <lv_theme_material_init+0xc0>)
  41c522:	4798      	blx	r3
    switch_init();
  41c524:	4b21      	ldr	r3, [pc, #132]	; (41c5ac <lv_theme_material_init+0xc4>)
  41c526:	4798      	blx	r3
    linemeter_init();
  41c528:	4b21      	ldr	r3, [pc, #132]	; (41c5b0 <lv_theme_material_init+0xc8>)
  41c52a:	4798      	blx	r3
    gauge_init();
  41c52c:	4b21      	ldr	r3, [pc, #132]	; (41c5b4 <lv_theme_material_init+0xcc>)
  41c52e:	4798      	blx	r3
    arc_init();
  41c530:	4b21      	ldr	r3, [pc, #132]	; (41c5b8 <lv_theme_material_init+0xd0>)
  41c532:	4798      	blx	r3
    chart_init();
  41c534:	4b21      	ldr	r3, [pc, #132]	; (41c5bc <lv_theme_material_init+0xd4>)
  41c536:	4798      	blx	r3
    calendar_init();
  41c538:	4b21      	ldr	r3, [pc, #132]	; (41c5c0 <lv_theme_material_init+0xd8>)
  41c53a:	4798      	blx	r3
    cpicker_init();
  41c53c:	4b21      	ldr	r3, [pc, #132]	; (41c5c4 <lv_theme_material_init+0xdc>)
  41c53e:	4798      	blx	r3
    checkbox_init();
  41c540:	4b21      	ldr	r3, [pc, #132]	; (41c5c8 <lv_theme_material_init+0xe0>)
  41c542:	4798      	blx	r3
    keyboard_init();
  41c544:	4b21      	ldr	r3, [pc, #132]	; (41c5cc <lv_theme_material_init+0xe4>)
  41c546:	4798      	blx	r3
    msgbox_init();
  41c548:	4b21      	ldr	r3, [pc, #132]	; (41c5d0 <lv_theme_material_init+0xe8>)
  41c54a:	4798      	blx	r3
    page_init();
  41c54c:	4b21      	ldr	r3, [pc, #132]	; (41c5d4 <lv_theme_material_init+0xec>)
  41c54e:	4798      	blx	r3
    textarea_init();
  41c550:	4b21      	ldr	r3, [pc, #132]	; (41c5d8 <lv_theme_material_init+0xf0>)
  41c552:	4798      	blx	r3
    spinbox_init();
  41c554:	4b21      	ldr	r3, [pc, #132]	; (41c5dc <lv_theme_material_init+0xf4>)
  41c556:	4798      	blx	r3
    list_init();
  41c558:	4b21      	ldr	r3, [pc, #132]	; (41c5e0 <lv_theme_material_init+0xf8>)
  41c55a:	4798      	blx	r3
    ddlist_init();
  41c55c:	4b21      	ldr	r3, [pc, #132]	; (41c5e4 <lv_theme_material_init+0xfc>)
  41c55e:	4798      	blx	r3
    roller_init();
  41c560:	4b21      	ldr	r3, [pc, #132]	; (41c5e8 <lv_theme_material_init+0x100>)
  41c562:	4798      	blx	r3
    table_init();
  41c564:	4b21      	ldr	r3, [pc, #132]	; (41c5ec <lv_theme_material_init+0x104>)
  41c566:	4798      	blx	r3
    tabview_win_shared_init();
  41c568:	4b21      	ldr	r3, [pc, #132]	; (41c5f0 <lv_theme_material_init+0x108>)
  41c56a:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41c56c:	2000      	movs	r0, #0
  41c56e:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41c570:	4b20      	ldr	r3, [pc, #128]	; (41c5f4 <lv_theme_material_init+0x10c>)
  41c572:	6023      	str	r3, [r4, #0]
    inited = true;
  41c574:	2201      	movs	r2, #1
  41c576:	4b07      	ldr	r3, [pc, #28]	; (41c594 <lv_theme_material_init+0xac>)
  41c578:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41c57a:	4b1f      	ldr	r3, [pc, #124]	; (41c5f8 <lv_theme_material_init+0x110>)
  41c57c:	4798      	blx	r3
}
  41c57e:	4620      	mov	r0, r4
  41c580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41c584:	20c0      	movs	r0, #192	; 0xc0
  41c586:	4b1d      	ldr	r3, [pc, #116]	; (41c5fc <lv_theme_material_init+0x114>)
  41c588:	4798      	blx	r3
  41c58a:	4b1d      	ldr	r3, [pc, #116]	; (41c600 <lv_theme_material_init+0x118>)
  41c58c:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41c58e:	4b1d      	ldr	r3, [pc, #116]	; (41c604 <lv_theme_material_init+0x11c>)
  41c590:	6018      	str	r0, [r3, #0]
  41c592:	e7b3      	b.n	41c4fc <lv_theme_material_init+0x14>
  41c594:	20414794 	.word	0x20414794
  41c598:	2041479c 	.word	0x2041479c
  41c59c:	0041adad 	.word	0x0041adad
  41c5a0:	00417535 	.word	0x00417535
  41c5a4:	0041ac99 	.word	0x0041ac99
  41c5a8:	00417719 	.word	0x00417719
  41c5ac:	004179cd 	.word	0x004179cd
  41c5b0:	00417b11 	.word	0x00417b11
  41c5b4:	00417d59 	.word	0x00417d59
  41c5b8:	00418269 	.word	0x00418269
  41c5bc:	004183d5 	.word	0x004183d5
  41c5c0:	0041865d 	.word	0x0041865d
  41c5c4:	00418df5 	.word	0x00418df5
  41c5c8:	00419085 	.word	0x00419085
  41c5cc:	004193ad 	.word	0x004193ad
  41c5d0:	004195a5 	.word	0x004195a5
  41c5d4:	00419649 	.word	0x00419649
  41c5d8:	004197d5 	.word	0x004197d5
  41c5dc:	0041991d 	.word	0x0041991d
  41c5e0:	004199f9 	.word	0x004199f9
  41c5e4:	0041a21d 	.word	0x0041a21d
  41c5e8:	0041a361 	.word	0x0041a361
  41c5ec:	0041a40d 	.word	0x0041a40d
  41c5f0:	0041a6a5 	.word	0x0041a6a5
  41c5f4:	00416eed 	.word	0x00416eed
  41c5f8:	004073fd 	.word	0x004073fd
  41c5fc:	00415c35 	.word	0x00415c35
  41c600:	2043a238 	.word	0x2043a238
  41c604:	20414798 	.word	0x20414798

0041c608 <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  41c608:	b909      	cbnz	r1, 41c60e <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  41c60a:	3028      	adds	r0, #40	; 0x28
            break;
  41c60c:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  41c60e:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  41c610:	4770      	bx	lr
	...

0041c614 <lv_img_design>:
{
  41c614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41c618:	b0af      	sub	sp, #188	; 0xbc
  41c61a:	4604      	mov	r4, r0
  41c61c:	9103      	str	r1, [sp, #12]
  41c61e:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  41c620:	4ba2      	ldr	r3, [pc, #648]	; (41c8ac <lv_img_design+0x298>)
  41c622:	4798      	blx	r3
  41c624:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  41c626:	2f02      	cmp	r7, #2
  41c628:	d00e      	beq.n	41c648 <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41c62a:	2f00      	cmp	r7, #0
  41c62c:	f040 825d 	bne.w	41caea <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  41c630:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  41c634:	2b00      	cmp	r3, #0
  41c636:	f000 8256 	beq.w	41cae6 <lv_img_design+0x4d2>
  41c63a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41c63e:	2b00      	cmp	r3, #0
  41c640:	f040 8087 	bne.w	41c752 <lv_img_design+0x13e>
  41c644:	2001      	movs	r0, #1
  41c646:	e253      	b.n	41caf0 <lv_img_design+0x4dc>
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41c648:	2202      	movs	r2, #2
  41c64a:	2100      	movs	r1, #0
  41c64c:	4620      	mov	r0, r4
  41c64e:	4b98      	ldr	r3, [pc, #608]	; (41c8b0 <lv_img_design+0x29c>)
  41c650:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  41c652:	b108      	cbz	r0, 41c658 <lv_img_design+0x44>
  41c654:	2003      	movs	r0, #3
  41c656:	e24b      	b.n	41caf0 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41c658:	7d2a      	ldrb	r2, [r5, #20]
  41c65a:	f002 0303 	and.w	r3, r2, #3
  41c65e:	3b02      	subs	r3, #2
  41c660:	b2db      	uxtb	r3, r3
  41c662:	2b01      	cmp	r3, #1
  41c664:	f240 82f6 	bls.w	41cc54 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  41c668:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  41c66c:	2a20      	cmp	r2, #32
  41c66e:	bf18      	it	ne
  41c670:	2a08      	cmpne	r2, #8
  41c672:	d001      	beq.n	41c678 <lv_img_design+0x64>
  41c674:	2002      	movs	r0, #2
  41c676:	e23b      	b.n	41caf0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  41c678:	f248 02ac 	movw	r2, #32940	; 0x80ac
  41c67c:	2100      	movs	r1, #0
  41c67e:	4620      	mov	r0, r4
  41c680:	4b8c      	ldr	r3, [pc, #560]	; (41c8b4 <lv_img_design+0x2a0>)
  41c682:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  41c684:	28ff      	cmp	r0, #255	; 0xff
  41c686:	d001      	beq.n	41c68c <lv_img_design+0x78>
  41c688:	2002      	movs	r0, #2
  41c68a:	e231      	b.n	41caf0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41c68c:	2206      	movs	r2, #6
  41c68e:	2100      	movs	r1, #0
  41c690:	4620      	mov	r0, r4
  41c692:	4b87      	ldr	r3, [pc, #540]	; (41c8b0 <lv_img_design+0x29c>)
  41c694:	4798      	blx	r3
        angle_final += ext->angle;
  41c696:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  41c698:	42d8      	cmn	r0, r3
  41c69a:	d001      	beq.n	41c6a0 <lv_img_design+0x8c>
  41c69c:	2002      	movs	r0, #2
  41c69e:	e227      	b.n	41caf0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41c6a0:	2207      	movs	r2, #7
  41c6a2:	2100      	movs	r1, #0
  41c6a4:	4620      	mov	r0, r4
  41c6a6:	4b82      	ldr	r3, [pc, #520]	; (41c8b0 <lv_img_design+0x29c>)
  41c6a8:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41c6aa:	8a6b      	ldrh	r3, [r5, #18]
  41c6ac:	fb03 f300 	mul.w	r3, r3, r0
  41c6b0:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  41c6b2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  41c6b6:	d02e      	beq.n	41c716 <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  41c6b8:	4620      	mov	r0, r4
  41c6ba:	4b7f      	ldr	r3, [pc, #508]	; (41c8b8 <lv_img_design+0x2a4>)
  41c6bc:	4798      	blx	r3
  41c6be:	4680      	mov	r8, r0
  41c6c0:	4620      	mov	r0, r4
  41c6c2:	4b7e      	ldr	r3, [pc, #504]	; (41c8bc <lv_img_design+0x2a8>)
  41c6c4:	4798      	blx	r3
  41c6c6:	350e      	adds	r5, #14
  41c6c8:	9501      	str	r5, [sp, #4]
  41c6ca:	b2bf      	uxth	r7, r7
  41c6cc:	9700      	str	r7, [sp, #0]
  41c6ce:	2300      	movs	r3, #0
  41c6d0:	4602      	mov	r2, r0
  41c6d2:	4641      	mov	r1, r8
  41c6d4:	a819      	add	r0, sp, #100	; 0x64
  41c6d6:	4d7a      	ldr	r5, [pc, #488]	; (41c8c0 <lv_img_design+0x2ac>)
  41c6d8:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  41c6da:	8a22      	ldrh	r2, [r4, #16]
  41c6dc:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41c6e0:	4413      	add	r3, r2
  41c6e2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  41c6e6:	8a63      	ldrh	r3, [r4, #18]
  41c6e8:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  41c6ec:	4419      	add	r1, r3
  41c6ee:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  41c6f2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  41c6f6:	440a      	add	r2, r1
  41c6f8:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  41c6fc:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  41c700:	4413      	add	r3, r2
  41c702:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41c706:	2200      	movs	r2, #0
  41c708:	a919      	add	r1, sp, #100	; 0x64
  41c70a:	9803      	ldr	r0, [sp, #12]
  41c70c:	4b6d      	ldr	r3, [pc, #436]	; (41c8c4 <lv_img_design+0x2b0>)
  41c70e:	4798      	blx	r3
  41c710:	b950      	cbnz	r0, 41c728 <lv_img_design+0x114>
  41c712:	2002      	movs	r0, #2
  41c714:	e1ec      	b.n	41caf0 <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41c716:	2200      	movs	r2, #0
  41c718:	f104 0110 	add.w	r1, r4, #16
  41c71c:	9803      	ldr	r0, [sp, #12]
  41c71e:	4b69      	ldr	r3, [pc, #420]	; (41c8c4 <lv_img_design+0x2b0>)
  41c720:	4798      	blx	r3
  41c722:	b908      	cbnz	r0, 41c728 <lv_img_design+0x114>
  41c724:	2002      	movs	r0, #2
  41c726:	e1e3      	b.n	41caf0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  41c728:	2220      	movs	r2, #32
  41c72a:	2100      	movs	r1, #0
  41c72c:	4620      	mov	r0, r4
  41c72e:	4b60      	ldr	r3, [pc, #384]	; (41c8b0 <lv_img_design+0x29c>)
  41c730:	4798      	blx	r3
  41c732:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41c734:	2800      	cmp	r0, #0
  41c736:	f040 828f 	bne.w	41cc58 <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  41c73a:	f248 02a0 	movw	r2, #32928	; 0x80a0
  41c73e:	2100      	movs	r1, #0
  41c740:	4620      	mov	r0, r4
  41c742:	4b5b      	ldr	r3, [pc, #364]	; (41c8b0 <lv_img_design+0x29c>)
  41c744:	4798      	blx	r3
  41c746:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41c748:	2800      	cmp	r0, #0
  41c74a:	f000 8287 	beq.w	41cc5c <lv_img_design+0x648>
  41c74e:	2002      	movs	r0, #2
  41c750:	e1ce      	b.n	41caf0 <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  41c752:	a819      	add	r0, sp, #100	; 0x64
  41c754:	4b5c      	ldr	r3, [pc, #368]	; (41c8c8 <lv_img_design+0x2b4>)
  41c756:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  41c758:	aa19      	add	r2, sp, #100	; 0x64
  41c75a:	2100      	movs	r1, #0
  41c75c:	4620      	mov	r0, r4
  41c75e:	4b5b      	ldr	r3, [pc, #364]	; (41c8cc <lv_img_design+0x2b8>)
  41c760:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41c762:	2233      	movs	r2, #51	; 0x33
  41c764:	2100      	movs	r1, #0
  41c766:	4620      	mov	r0, r4
  41c768:	4b51      	ldr	r3, [pc, #324]	; (41c8b0 <lv_img_design+0x29c>)
  41c76a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41c76c:	b110      	cbz	r0, 41c774 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  41c76e:	2300      	movs	r3, #0
  41c770:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41c774:	2207      	movs	r2, #7
  41c776:	2100      	movs	r1, #0
  41c778:	4620      	mov	r0, r4
  41c77a:	4e4d      	ldr	r6, [pc, #308]	; (41c8b0 <lv_img_design+0x29c>)
  41c77c:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41c77e:	8a6f      	ldrh	r7, [r5, #18]
  41c780:	fb07 f700 	mul.w	r7, r7, r0
  41c784:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41c786:	2206      	movs	r2, #6
  41c788:	2100      	movs	r1, #0
  41c78a:	4620      	mov	r0, r4
  41c78c:	47b0      	blx	r6
        angle_final += ext->angle;
  41c78e:	89ab      	ldrh	r3, [r5, #12]
  41c790:	18c3      	adds	r3, r0, r3
  41c792:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  41c794:	4620      	mov	r0, r4
  41c796:	4b48      	ldr	r3, [pc, #288]	; (41c8b8 <lv_img_design+0x2a4>)
  41c798:	4798      	blx	r3
  41c79a:	4680      	mov	r8, r0
  41c79c:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  41c79e:	4620      	mov	r0, r4
  41c7a0:	4b46      	ldr	r3, [pc, #280]	; (41c8bc <lv_img_design+0x2a8>)
  41c7a2:	4798      	blx	r3
  41c7a4:	4602      	mov	r2, r0
  41c7a6:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41c7a8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41c7ac:	9307      	str	r3, [sp, #28]
  41c7ae:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  41c7b2:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41c7b6:	f8cd a004 	str.w	sl, [sp, #4]
  41c7ba:	f8cd 9000 	str.w	r9, [sp]
  41c7be:	4641      	mov	r1, r8
  41c7c0:	a808      	add	r0, sp, #32
  41c7c2:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 41c8c0 <lv_img_design+0x2ac>
  41c7c6:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  41c7c8:	8a22      	ldrh	r2, [r4, #16]
  41c7ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41c7ce:	4413      	add	r3, r2
  41c7d0:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  41c7d4:	8a63      	ldrh	r3, [r4, #18]
  41c7d6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41c7da:	4419      	add	r1, r3
  41c7dc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  41c7e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41c7e4:	440a      	add	r2, r1
  41c7e6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  41c7ea:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  41c7ee:	4413      	add	r3, r2
  41c7f0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41c7f4:	2212      	movs	r2, #18
  41c7f6:	2100      	movs	r1, #0
  41c7f8:	4620      	mov	r0, r4
  41c7fa:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41c7fc:	b280      	uxth	r0, r0
  41c7fe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41c802:	1a18      	subs	r0, r3, r0
  41c804:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41c808:	2213      	movs	r2, #19
  41c80a:	2100      	movs	r1, #0
  41c80c:	4620      	mov	r0, r4
  41c80e:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41c810:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41c814:	fa13 f080 	uxtah	r0, r3, r0
  41c818:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41c81c:	2210      	movs	r2, #16
  41c81e:	2100      	movs	r1, #0
  41c820:	4620      	mov	r0, r4
  41c822:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41c824:	b280      	uxth	r0, r0
  41c826:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  41c82a:	1a18      	subs	r0, r3, r0
  41c82c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41c830:	2211      	movs	r2, #17
  41c832:	2100      	movs	r1, #0
  41c834:	4620      	mov	r0, r4
  41c836:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41c838:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41c83c:	fa13 f080 	uxtah	r0, r3, r0
  41c840:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  41c844:	aa19      	add	r2, sp, #100	; 0x64
  41c846:	9903      	ldr	r1, [sp, #12]
  41c848:	a808      	add	r0, sp, #32
  41c84a:	4b21      	ldr	r3, [pc, #132]	; (41c8d0 <lv_img_design+0x2bc>)
  41c84c:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  41c84e:	b90f      	cbnz	r7, 41c854 <lv_img_design+0x240>
  41c850:	2000      	movs	r0, #0
  41c852:	e14d      	b.n	41caf0 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41c854:	2202      	movs	r2, #2
  41c856:	2100      	movs	r1, #0
  41c858:	4620      	mov	r0, r4
  41c85a:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41c85c:	b980      	cbnz	r0, 41c880 <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  41c85e:	7d2b      	ldrb	r3, [r5, #20]
  41c860:	f003 0303 	and.w	r3, r3, #3
  41c864:	2b01      	cmp	r3, #1
  41c866:	d93d      	bls.n	41c8e4 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41c868:	2b02      	cmp	r3, #2
  41c86a:	f000 8122 	beq.w	41cab2 <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  41c86e:	2300      	movs	r3, #0
  41c870:	461a      	mov	r2, r3
  41c872:	9903      	ldr	r1, [sp, #12]
  41c874:	f104 0010 	add.w	r0, r4, #16
  41c878:	4c16      	ldr	r4, [pc, #88]	; (41c8d4 <lv_img_design+0x2c0>)
  41c87a:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  41c87c:	2000      	movs	r0, #0
  41c87e:	e137      	b.n	41caf0 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  41c880:	201c      	movs	r0, #28
  41c882:	4b15      	ldr	r3, [pc, #84]	; (41c8d8 <lv_img_design+0x2c4>)
  41c884:	4798      	blx	r3
  41c886:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41c888:	2201      	movs	r2, #1
  41c88a:	2100      	movs	r1, #0
  41c88c:	4620      	mov	r0, r4
  41c88e:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  41c890:	2300      	movs	r3, #0
  41c892:	4602      	mov	r2, r0
  41c894:	a908      	add	r1, sp, #32
  41c896:	4658      	mov	r0, fp
  41c898:	f8df 8044 	ldr.w	r8, [pc, #68]	; 41c8e0 <lv_img_design+0x2cc>
  41c89c:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  41c89e:	f504 7118 	add.w	r1, r4, #608	; 0x260
  41c8a2:	4658      	mov	r0, fp
  41c8a4:	4b0d      	ldr	r3, [pc, #52]	; (41c8dc <lv_img_design+0x2c8>)
  41c8a6:	4798      	blx	r3
  41c8a8:	e7d9      	b.n	41c85e <lv_img_design+0x24a>
  41c8aa:	bf00      	nop
  41c8ac:	00407949 	.word	0x00407949
  41c8b0:	00406e35 	.word	0x00406e35
  41c8b4:	004068a9 	.word	0x004068a9
  41c8b8:	0040561d 	.word	0x0040561d
  41c8bc:	0040564d 	.word	0x0040564d
  41c8c0:	00411f79 	.word	0x00411f79
  41c8c4:	00414edd 	.word	0x00414edd
  41c8c8:	00411b6d 	.word	0x00411b6d
  41c8cc:	00407bf1 	.word	0x00407bf1
  41c8d0:	00411bb9 	.word	0x00411bb9
  41c8d4:	0040ce4d 	.word	0x0040ce4d
  41c8d8:	00415fdd 	.word	0x00415fdd
  41c8dc:	0040f2f9 	.word	0x0040f2f9
  41c8e0:	0040f575 	.word	0x0040f575
            lv_draw_img_dsc_init(&img_dsc);
  41c8e4:	a810      	add	r0, sp, #64	; 0x40
  41c8e6:	4b8e      	ldr	r3, [pc, #568]	; (41cb20 <lv_img_design+0x50c>)
  41c8e8:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  41c8ea:	aa10      	add	r2, sp, #64	; 0x40
  41c8ec:	2100      	movs	r1, #0
  41c8ee:	4620      	mov	r0, r4
  41c8f0:	4b8c      	ldr	r3, [pc, #560]	; (41cb24 <lv_img_design+0x510>)
  41c8f2:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  41c8f4:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41c8f8:	f1b9 0f00 	cmp.w	r9, #0
  41c8fc:	f000 80d7 	beq.w	41caae <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  41c900:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41c904:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  41c908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  41c90c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  41c910:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  41c914:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  41c918:	7d6a      	ldrb	r2, [r5, #21]
  41c91a:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  41c91e:	f362 0300 	bfi	r3, r2, #0, #1
  41c922:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  41c926:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  41c92a:	fb08 f807 	mul.w	r8, r8, r7
  41c92e:	ea4f 2828 	mov.w	r8, r8, asr #8
  41c932:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  41c936:	2b00      	cmp	r3, #0
  41c938:	f340 80b9 	ble.w	41caae <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  41c93c:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  41c940:	fb0b fb07 	mul.w	fp, fp, r7
  41c944:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  41c948:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  41c94c:	2b00      	cmp	r3, #0
  41c94e:	f340 80ae 	ble.w	41caae <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  41c952:	a90a      	add	r1, sp, #40	; 0x28
  41c954:	4620      	mov	r0, r4
  41c956:	4b74      	ldr	r3, [pc, #464]	; (41cb28 <lv_img_design+0x514>)
  41c958:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  41c95a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41c95e:	fb03 f307 	mul.w	r3, r3, r7
  41c962:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  41c966:	eb01 2123 	add.w	r1, r1, r3, asr #8
  41c96a:	b289      	uxth	r1, r1
  41c96c:	fa0f fe81 	sxth.w	lr, r1
  41c970:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  41c974:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  41c978:	fb03 f307 	mul.w	r3, r3, r7
  41c97c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  41c980:	eb02 2223 	add.w	r2, r2, r3, asr #8
  41c984:	b292      	uxth	r2, r2
  41c986:	b210      	sxth	r0, r2
  41c988:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  41c98c:	9b05      	ldr	r3, [sp, #20]
  41c98e:	3b01      	subs	r3, #1
  41c990:	fb03 f307 	mul.w	r3, r3, r7
  41c994:	eb01 2323 	add.w	r3, r1, r3, asr #8
  41c998:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  41c99c:	9b06      	ldr	r3, [sp, #24]
  41c99e:	3b01      	subs	r3, #1
  41c9a0:	fb03 f307 	mul.w	r3, r3, r7
  41c9a4:	eb02 2323 	add.w	r3, r2, r3, asr #8
  41c9a8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  41c9ac:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  41c9b0:	459e      	cmp	lr, r3
  41c9b2:	dd03      	ble.n	41c9bc <lv_img_design+0x3a8>
  41c9b4:	892b      	ldrh	r3, [r5, #8]
  41c9b6:	1ac9      	subs	r1, r1, r3
  41c9b8:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  41c9bc:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  41c9c0:	4298      	cmp	r0, r3
  41c9c2:	dd03      	ble.n	41c9cc <lv_img_design+0x3b8>
  41c9c4:	896b      	ldrh	r3, [r5, #10]
  41c9c6:	1ad2      	subs	r2, r2, r3
  41c9c8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  41c9cc:	4620      	mov	r0, r4
  41c9ce:	4b57      	ldr	r3, [pc, #348]	; (41cb2c <lv_img_design+0x518>)
  41c9d0:	4798      	blx	r3
  41c9d2:	4607      	mov	r7, r0
  41c9d4:	4620      	mov	r0, r4
  41c9d6:	4b56      	ldr	r3, [pc, #344]	; (41cb30 <lv_img_design+0x51c>)
  41c9d8:	4798      	blx	r3
  41c9da:	f8cd a004 	str.w	sl, [sp, #4]
  41c9de:	f8cd 9000 	str.w	r9, [sp]
  41c9e2:	9b07      	ldr	r3, [sp, #28]
  41c9e4:	4602      	mov	r2, r0
  41c9e6:	4639      	mov	r1, r7
  41c9e8:	a80c      	add	r0, sp, #48	; 0x30
  41c9ea:	4f52      	ldr	r7, [pc, #328]	; (41cb34 <lv_img_design+0x520>)
  41c9ec:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  41c9ee:	8a23      	ldrh	r3, [r4, #16]
  41c9f0:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41c9f4:	441a      	add	r2, r3
  41c9f6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  41c9fa:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41c9fe:	4413      	add	r3, r2
  41ca00:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  41ca04:	8a63      	ldrh	r3, [r4, #18]
  41ca06:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  41ca0a:	441a      	add	r2, r3
  41ca0c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  41ca10:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  41ca14:	4413      	add	r3, r2
  41ca16:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  41ca1a:	9a03      	ldr	r2, [sp, #12]
  41ca1c:	a90c      	add	r1, sp, #48	; 0x30
  41ca1e:	4608      	mov	r0, r1
  41ca20:	4b45      	ldr	r3, [pc, #276]	; (41cb38 <lv_img_design+0x524>)
  41ca22:	4798      	blx	r3
  41ca24:	2800      	cmp	r0, #0
  41ca26:	d042      	beq.n	41caae <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  41ca28:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  41ca2c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  41ca30:	896a      	ldrh	r2, [r5, #10]
  41ca32:	fa12 f383 	uxtah	r3, r2, r3
  41ca36:	b29b      	uxth	r3, r3
  41ca38:	3b01      	subs	r3, #1
  41ca3a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41ca3e:	e023      	b.n	41ca88 <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  41ca40:	ab10      	add	r3, sp, #64	; 0x40
  41ca42:	682a      	ldr	r2, [r5, #0]
  41ca44:	a90c      	add	r1, sp, #48	; 0x30
  41ca46:	a80e      	add	r0, sp, #56	; 0x38
  41ca48:	4c3c      	ldr	r4, [pc, #240]	; (41cb3c <lv_img_design+0x528>)
  41ca4a:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41ca4c:	fa1f f388 	uxth.w	r3, r8
  41ca50:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  41ca54:	441a      	add	r2, r3
  41ca56:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  41ca5a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  41ca5e:	4413      	add	r3, r2
  41ca60:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  41ca64:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  41ca68:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  41ca6c:	429a      	cmp	r2, r3
  41ca6e:	dbe7      	blt.n	41ca40 <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41ca70:	fa1f f38b 	uxth.w	r3, fp
  41ca74:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  41ca78:	441a      	add	r2, r3
  41ca7a:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  41ca7e:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41ca82:	4413      	add	r3, r2
  41ca84:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  41ca88:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  41ca8c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  41ca90:	429a      	cmp	r2, r3
  41ca92:	f6bf aef3 	bge.w	41c87c <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  41ca96:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  41ca9a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  41ca9e:	892a      	ldrh	r2, [r5, #8]
  41caa0:	fa12 f383 	uxtah	r3, r2, r3
  41caa4:	b29b      	uxth	r3, r3
  41caa6:	3b01      	subs	r3, #1
  41caa8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41caac:	e7da      	b.n	41ca64 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41caae:	2000      	movs	r0, #0
  41cab0:	e01e      	b.n	41caf0 <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  41cab2:	a810      	add	r0, sp, #64	; 0x40
  41cab4:	4b22      	ldr	r3, [pc, #136]	; (41cb40 <lv_img_design+0x52c>)
  41cab6:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  41cab8:	aa10      	add	r2, sp, #64	; 0x40
  41caba:	2100      	movs	r1, #0
  41cabc:	4620      	mov	r0, r4
  41cabe:	4b21      	ldr	r3, [pc, #132]	; (41cb44 <lv_img_design+0x530>)
  41cac0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41cac2:	f248 02a9 	movw	r2, #32937	; 0x80a9
  41cac6:	2100      	movs	r1, #0
  41cac8:	4620      	mov	r0, r4
  41caca:	4b1f      	ldr	r3, [pc, #124]	; (41cb48 <lv_img_design+0x534>)
  41cacc:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  41cace:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  41cad2:	682b      	ldr	r3, [r5, #0]
  41cad4:	2200      	movs	r2, #0
  41cad6:	9200      	str	r2, [sp, #0]
  41cad8:	aa10      	add	r2, sp, #64	; 0x40
  41cada:	9903      	ldr	r1, [sp, #12]
  41cadc:	f104 0010 	add.w	r0, r4, #16
  41cae0:	4c1a      	ldr	r4, [pc, #104]	; (41cb4c <lv_img_design+0x538>)
  41cae2:	47a0      	blx	r4
  41cae4:	e6ca      	b.n	41c87c <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  41cae6:	2001      	movs	r0, #1
  41cae8:	e002      	b.n	41caf0 <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41caea:	2f01      	cmp	r7, #1
  41caec:	d003      	beq.n	41caf6 <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  41caee:	2000      	movs	r0, #0
}
  41caf0:	b02f      	add	sp, #188	; 0xbc
  41caf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41caf6:	2202      	movs	r2, #2
  41caf8:	2100      	movs	r1, #0
  41cafa:	4620      	mov	r0, r4
  41cafc:	4b14      	ldr	r3, [pc, #80]	; (41cb50 <lv_img_design+0x53c>)
  41cafe:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41cb00:	b938      	cbnz	r0, 41cb12 <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41cb02:	2233      	movs	r2, #51	; 0x33
  41cb04:	2100      	movs	r1, #0
  41cb06:	4620      	mov	r0, r4
  41cb08:	4b11      	ldr	r3, [pc, #68]	; (41cb50 <lv_img_design+0x53c>)
  41cb0a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41cb0c:	bb30      	cbnz	r0, 41cb5c <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  41cb0e:	2000      	movs	r0, #0
  41cb10:	e7ee      	b.n	41caf0 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  41cb12:	f504 7018 	add.w	r0, r4, #608	; 0x260
  41cb16:	4b0f      	ldr	r3, [pc, #60]	; (41cb54 <lv_img_design+0x540>)
  41cb18:	4798      	blx	r3
            _lv_mem_buf_release(param);
  41cb1a:	4b0f      	ldr	r3, [pc, #60]	; (41cb58 <lv_img_design+0x544>)
  41cb1c:	4798      	blx	r3
  41cb1e:	e7f0      	b.n	41cb02 <lv_img_design+0x4ee>
  41cb20:	0040cba1 	.word	0x0040cba1
  41cb24:	004082e9 	.word	0x004082e9
  41cb28:	0040555d 	.word	0x0040555d
  41cb2c:	0040561d 	.word	0x0040561d
  41cb30:	0040564d 	.word	0x0040564d
  41cb34:	00411f79 	.word	0x00411f79
  41cb38:	00414c69 	.word	0x00414c69
  41cb3c:	0040ce4d 	.word	0x0040ce4d
  41cb40:	0040d735 	.word	0x0040d735
  41cb44:	00408221 	.word	0x00408221
  41cb48:	00406821 	.word	0x00406821
  41cb4c:	0040d77d 	.word	0x0040d77d
  41cb50:	00406e35 	.word	0x00406e35
  41cb54:	0040f3a1 	.word	0x0040f3a1
  41cb58:	00415d8d 	.word	0x00415d8d
            lv_draw_rect_dsc_init(&draw_dsc);
  41cb5c:	a819      	add	r0, sp, #100	; 0x64
  41cb5e:	4b40      	ldr	r3, [pc, #256]	; (41cc60 <lv_img_design+0x64c>)
  41cb60:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  41cb62:	2700      	movs	r7, #0
  41cb64:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  41cb68:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  41cb6c:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  41cb70:	aa19      	add	r2, sp, #100	; 0x64
  41cb72:	4639      	mov	r1, r7
  41cb74:	4620      	mov	r0, r4
  41cb76:	4b3b      	ldr	r3, [pc, #236]	; (41cc64 <lv_img_design+0x650>)
  41cb78:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41cb7a:	2207      	movs	r2, #7
  41cb7c:	4639      	mov	r1, r7
  41cb7e:	4620      	mov	r0, r4
  41cb80:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 41cc70 <lv_img_design+0x65c>
  41cb84:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  41cb86:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  41cb8a:	fb08 f800 	mul.w	r8, r8, r0
  41cb8e:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41cb92:	2206      	movs	r2, #6
  41cb94:	4639      	mov	r1, r7
  41cb96:	4620      	mov	r0, r4
  41cb98:	47c8      	blx	r9
            angle_final += ext->angle;
  41cb9a:	89ab      	ldrh	r3, [r5, #12]
  41cb9c:	4403      	add	r3, r0
  41cb9e:	8aa1      	ldrh	r1, [r4, #20]
  41cba0:	8a22      	ldrh	r2, [r4, #16]
  41cba2:	1a89      	subs	r1, r1, r2
  41cba4:	b289      	uxth	r1, r1
  41cba6:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41cba8:	8ae2      	ldrh	r2, [r4, #22]
  41cbaa:	8a60      	ldrh	r0, [r4, #18]
  41cbac:	1a12      	subs	r2, r2, r0
  41cbae:	b292      	uxth	r2, r2
  41cbb0:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  41cbb2:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  41cbb4:	9501      	str	r5, [sp, #4]
  41cbb6:	fa1f f088 	uxth.w	r0, r8
  41cbba:	9000      	str	r0, [sp, #0]
  41cbbc:	b21b      	sxth	r3, r3
  41cbbe:	b212      	sxth	r2, r2
  41cbc0:	b209      	sxth	r1, r1
  41cbc2:	a810      	add	r0, sp, #64	; 0x40
  41cbc4:	4d28      	ldr	r5, [pc, #160]	; (41cc68 <lv_img_design+0x654>)
  41cbc6:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  41cbc8:	8a22      	ldrh	r2, [r4, #16]
  41cbca:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41cbce:	4413      	add	r3, r2
  41cbd0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  41cbd4:	8a63      	ldrh	r3, [r4, #18]
  41cbd6:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  41cbda:	4419      	add	r1, r3
  41cbdc:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  41cbe0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  41cbe4:	440a      	add	r2, r1
  41cbe6:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  41cbea:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  41cbee:	4413      	add	r3, r2
  41cbf0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cbf4:	2212      	movs	r2, #18
  41cbf6:	4639      	mov	r1, r7
  41cbf8:	4620      	mov	r0, r4
  41cbfa:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41cbfc:	b280      	uxth	r0, r0
  41cbfe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41cc02:	1a18      	subs	r0, r3, r0
  41cc04:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cc08:	2213      	movs	r2, #19
  41cc0a:	4639      	mov	r1, r7
  41cc0c:	4620      	mov	r0, r4
  41cc0e:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41cc10:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  41cc14:	fa13 f080 	uxtah	r0, r3, r0
  41cc18:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cc1c:	2210      	movs	r2, #16
  41cc1e:	4639      	mov	r1, r7
  41cc20:	4620      	mov	r0, r4
  41cc22:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41cc24:	b280      	uxth	r0, r0
  41cc26:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  41cc2a:	1a18      	subs	r0, r3, r0
  41cc2c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cc30:	2211      	movs	r2, #17
  41cc32:	4639      	mov	r1, r7
  41cc34:	4620      	mov	r0, r4
  41cc36:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41cc38:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  41cc3c:	fa13 f080 	uxtah	r0, r3, r0
  41cc40:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  41cc44:	aa19      	add	r2, sp, #100	; 0x64
  41cc46:	9903      	ldr	r1, [sp, #12]
  41cc48:	f104 0010 	add.w	r0, r4, #16
  41cc4c:	4b07      	ldr	r3, [pc, #28]	; (41cc6c <lv_img_design+0x658>)
  41cc4e:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41cc50:	4638      	mov	r0, r7
  41cc52:	e74d      	b.n	41caf0 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41cc54:	2002      	movs	r0, #2
  41cc56:	e74b      	b.n	41caf0 <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41cc58:	2002      	movs	r0, #2
  41cc5a:	e749      	b.n	41caf0 <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  41cc5c:	2001      	movs	r0, #1
  41cc5e:	e747      	b.n	41caf0 <lv_img_design+0x4dc>
  41cc60:	00411b6d 	.word	0x00411b6d
  41cc64:	00407bf1 	.word	0x00407bf1
  41cc68:	00411f79 	.word	0x00411f79
  41cc6c:	00411bb9 	.word	0x00411bb9
  41cc70:	00406e35 	.word	0x00406e35

0041cc74 <lv_img_get_auto_size>:
{
  41cc74:	b510      	push	{r4, lr}
  41cc76:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41cc78:	4b07      	ldr	r3, [pc, #28]	; (41cc98 <lv_img_get_auto_size+0x24>)
  41cc7a:	4798      	blx	r3
  41cc7c:	b928      	cbnz	r0, 41cc8a <lv_img_get_auto_size+0x16>
  41cc7e:	4622      	mov	r2, r4
  41cc80:	2300      	movs	r3, #0
  41cc82:	4806      	ldr	r0, [pc, #24]	; (41cc9c <lv_img_get_auto_size+0x28>)
  41cc84:	4906      	ldr	r1, [pc, #24]	; (41cca0 <lv_img_get_auto_size+0x2c>)
  41cc86:	4788      	blx	r1
  41cc88:	e7fe      	b.n	41cc88 <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41cc8a:	4620      	mov	r0, r4
  41cc8c:	4b05      	ldr	r3, [pc, #20]	; (41cca4 <lv_img_get_auto_size+0x30>)
  41cc8e:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  41cc90:	7d00      	ldrb	r0, [r0, #20]
}
  41cc92:	f3c0 0080 	ubfx	r0, r0, #2, #1
  41cc96:	bd10      	pop	{r4, pc}
  41cc98:	0041552d 	.word	0x0041552d
  41cc9c:	00423604 	.word	0x00423604
  41cca0:	00415539 	.word	0x00415539
  41cca4:	00407949 	.word	0x00407949

0041cca8 <lv_img_set_src>:
{
  41cca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41ccac:	b086      	sub	sp, #24
  41ccae:	4605      	mov	r5, r0
  41ccb0:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41ccb2:	4b63      	ldr	r3, [pc, #396]	; (41ce40 <lv_img_set_src+0x198>)
  41ccb4:	4798      	blx	r3
  41ccb6:	b928      	cbnz	r0, 41ccc4 <lv_img_set_src+0x1c>
  41ccb8:	462a      	mov	r2, r5
  41ccba:	2300      	movs	r3, #0
  41ccbc:	4861      	ldr	r0, [pc, #388]	; (41ce44 <lv_img_set_src+0x19c>)
  41ccbe:	4962      	ldr	r1, [pc, #392]	; (41ce48 <lv_img_set_src+0x1a0>)
  41ccc0:	4788      	blx	r1
  41ccc2:	e7fe      	b.n	41ccc2 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  41ccc4:	4630      	mov	r0, r6
  41ccc6:	4b61      	ldr	r3, [pc, #388]	; (41ce4c <lv_img_set_src+0x1a4>)
  41ccc8:	4798      	blx	r3
  41ccca:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  41cccc:	4628      	mov	r0, r5
  41ccce:	4b60      	ldr	r3, [pc, #384]	; (41ce50 <lv_img_set_src+0x1a8>)
  41ccd0:	4798      	blx	r3
  41ccd2:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  41ccd4:	2f03      	cmp	r7, #3
  41ccd6:	d06e      	beq.n	41cdb6 <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  41ccd8:	a905      	add	r1, sp, #20
  41ccda:	4630      	mov	r0, r6
  41ccdc:	4b5d      	ldr	r3, [pc, #372]	; (41ce54 <lv_img_set_src+0x1ac>)
  41ccde:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  41cce0:	2f00      	cmp	r7, #0
  41cce2:	d17b      	bne.n	41cddc <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41cce4:	7d23      	ldrb	r3, [r4, #20]
  41cce6:	f003 0303 	and.w	r3, r3, #3
  41ccea:	3b01      	subs	r3, #1
  41ccec:	b2db      	uxtb	r3, r3
  41ccee:	2b01      	cmp	r3, #1
  41ccf0:	d802      	bhi.n	41ccf8 <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  41ccf2:	6820      	ldr	r0, [r4, #0]
  41ccf4:	4b58      	ldr	r3, [pc, #352]	; (41ce58 <lv_img_set_src+0x1b0>)
  41ccf6:	4798      	blx	r3
        ext->src = src_img;
  41ccf8:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  41ccfa:	2f02      	cmp	r7, #2
  41ccfc:	d12c      	bne.n	41cd58 <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41ccfe:	f248 028e 	movw	r2, #32910	; 0x808e
  41cd02:	2100      	movs	r1, #0
  41cd04:	4628      	mov	r0, r5
  41cd06:	4b55      	ldr	r3, [pc, #340]	; (41ce5c <lv_img_set_src+0x1b4>)
  41cd08:	4798      	blx	r3
  41cd0a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41cd0c:	f248 0280 	movw	r2, #32896	; 0x8080
  41cd10:	2100      	movs	r1, #0
  41cd12:	4628      	mov	r0, r5
  41cd14:	f8df 816c 	ldr.w	r8, [pc, #364]	; 41ce84 <lv_img_set_src+0x1dc>
  41cd18:	47c0      	blx	r8
  41cd1a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41cd1c:	f248 0281 	movw	r2, #32897	; 0x8081
  41cd20:	2100      	movs	r1, #0
  41cd22:	4628      	mov	r0, r5
  41cd24:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  41cd26:	2300      	movs	r3, #0
  41cd28:	9302      	str	r3, [sp, #8]
  41cd2a:	f647 4318 	movw	r3, #31768	; 0x7c18
  41cd2e:	9301      	str	r3, [sp, #4]
  41cd30:	9000      	str	r0, [sp, #0]
  41cd32:	4653      	mov	r3, sl
  41cd34:	464a      	mov	r2, r9
  41cd36:	4631      	mov	r1, r6
  41cd38:	a804      	add	r0, sp, #16
  41cd3a:	4e49      	ldr	r6, [pc, #292]	; (41ce60 <lv_img_set_src+0x1b8>)
  41cd3c:	47b0      	blx	r6
        header.w = size.x;
  41cd3e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41cd42:	9b05      	ldr	r3, [sp, #20]
  41cd44:	f362 2394 	bfi	r3, r2, #10, #11
  41cd48:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  41cd4a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41cd4e:	0c1b      	lsrs	r3, r3, #16
  41cd50:	f362 134f 	bfi	r3, r2, #5, #11
  41cd54:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  41cd58:	7d21      	ldrb	r1, [r4, #20]
  41cd5a:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  41cd5e:	9b05      	ldr	r3, [sp, #20]
  41cd60:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41cd64:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  41cd66:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  41cd6a:	f3c0 104a 	ubfx	r0, r0, #5, #11
  41cd6e:	b282      	uxth	r2, r0
  41cd70:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  41cd72:	f89d 0014 	ldrb.w	r0, [sp, #20]
  41cd76:	f360 01c7 	bfi	r1, r0, #3, #5
  41cd7a:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  41cd7c:	f3c3 0349 	ubfx	r3, r3, #1, #10
  41cd80:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  41cd82:	1053      	asrs	r3, r2, #1
  41cd84:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  41cd86:	4628      	mov	r0, r5
  41cd88:	4b36      	ldr	r3, [pc, #216]	; (41ce64 <lv_img_set_src+0x1bc>)
  41cd8a:	4798      	blx	r3
  41cd8c:	b130      	cbz	r0, 41cd9c <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  41cd8e:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  41cd92:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  41cd96:	4628      	mov	r0, r5
  41cd98:	4b33      	ldr	r3, [pc, #204]	; (41ce68 <lv_img_set_src+0x1c0>)
  41cd9a:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  41cd9c:	89a3      	ldrh	r3, [r4, #12]
  41cd9e:	b91b      	cbnz	r3, 41cda8 <lv_img_set_src+0x100>
  41cda0:	8a63      	ldrh	r3, [r4, #18]
  41cda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  41cda6:	d002      	beq.n	41cdae <lv_img_set_src+0x106>
  41cda8:	4628      	mov	r0, r5
  41cdaa:	4b30      	ldr	r3, [pc, #192]	; (41ce6c <lv_img_set_src+0x1c4>)
  41cdac:	4798      	blx	r3
    lv_obj_invalidate(img);
  41cdae:	4628      	mov	r0, r5
  41cdb0:	4b2f      	ldr	r3, [pc, #188]	; (41ce70 <lv_img_set_src+0x1c8>)
  41cdb2:	4798      	blx	r3
  41cdb4:	e00f      	b.n	41cdd6 <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  41cdb6:	7d03      	ldrb	r3, [r0, #20]
  41cdb8:	f003 0303 	and.w	r3, r3, #3
  41cdbc:	3b01      	subs	r3, #1
  41cdbe:	b2db      	uxtb	r3, r3
  41cdc0:	2b01      	cmp	r3, #1
  41cdc2:	d802      	bhi.n	41cdca <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  41cdc4:	6800      	ldr	r0, [r0, #0]
  41cdc6:	4b24      	ldr	r3, [pc, #144]	; (41ce58 <lv_img_set_src+0x1b0>)
  41cdc8:	4798      	blx	r3
        ext->src      = NULL;
  41cdca:	2300      	movs	r3, #0
  41cdcc:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  41cdce:	7d23      	ldrb	r3, [r4, #20]
  41cdd0:	f043 0303 	orr.w	r3, r3, #3
  41cdd4:	7523      	strb	r3, [r4, #20]
}
  41cdd6:	b006      	add	sp, #24
  41cdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  41cddc:	1e7b      	subs	r3, r7, #1
  41cdde:	b2db      	uxtb	r3, r3
  41cde0:	2b01      	cmp	r3, #1
  41cde2:	d88a      	bhi.n	41ccfa <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  41cde4:	f8d4 8000 	ldr.w	r8, [r4]
  41cde8:	4546      	cmp	r6, r8
  41cdea:	d086      	beq.n	41ccfa <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41cdec:	7d23      	ldrb	r3, [r4, #20]
  41cdee:	f003 0303 	and.w	r3, r3, #3
  41cdf2:	3b01      	subs	r3, #1
  41cdf4:	b2db      	uxtb	r3, r3
  41cdf6:	2b01      	cmp	r3, #1
  41cdf8:	d901      	bls.n	41cdfe <lv_img_set_src+0x156>
            const void * old_src = NULL;
  41cdfa:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  41cdfe:	4630      	mov	r0, r6
  41ce00:	4b1c      	ldr	r3, [pc, #112]	; (41ce74 <lv_img_set_src+0x1cc>)
  41ce02:	4798      	blx	r3
  41ce04:	3001      	adds	r0, #1
  41ce06:	4b1c      	ldr	r3, [pc, #112]	; (41ce78 <lv_img_set_src+0x1d0>)
  41ce08:	4798      	blx	r3
  41ce0a:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  41ce0c:	4b0c      	ldr	r3, [pc, #48]	; (41ce40 <lv_img_set_src+0x198>)
  41ce0e:	4798      	blx	r3
  41ce10:	b928      	cbnz	r0, 41ce1e <lv_img_set_src+0x176>
  41ce12:	464a      	mov	r2, r9
  41ce14:	2300      	movs	r3, #0
  41ce16:	4819      	ldr	r0, [pc, #100]	; (41ce7c <lv_img_set_src+0x1d4>)
  41ce18:	490b      	ldr	r1, [pc, #44]	; (41ce48 <lv_img_set_src+0x1a0>)
  41ce1a:	4788      	blx	r1
  41ce1c:	e7fe      	b.n	41ce1c <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  41ce1e:	f1b9 0f00 	cmp.w	r9, #0
  41ce22:	d0d8      	beq.n	41cdd6 <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  41ce24:	4631      	mov	r1, r6
  41ce26:	4648      	mov	r0, r9
  41ce28:	4b15      	ldr	r3, [pc, #84]	; (41ce80 <lv_img_set_src+0x1d8>)
  41ce2a:	4798      	blx	r3
            ext->src = new_str;
  41ce2c:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  41ce30:	f1b8 0f00 	cmp.w	r8, #0
  41ce34:	f43f af61 	beq.w	41ccfa <lv_img_set_src+0x52>
  41ce38:	4640      	mov	r0, r8
  41ce3a:	4b07      	ldr	r3, [pc, #28]	; (41ce58 <lv_img_set_src+0x1b0>)
  41ce3c:	4798      	blx	r3
  41ce3e:	e75c      	b.n	41ccfa <lv_img_set_src+0x52>
  41ce40:	0041552d 	.word	0x0041552d
  41ce44:	00423604 	.word	0x00423604
  41ce48:	00415539 	.word	0x00415539
  41ce4c:	0040ce8d 	.word	0x0040ce8d
  41ce50:	00407949 	.word	0x00407949
  41ce54:	00413019 	.word	0x00413019
  41ce58:	00415cf9 	.word	0x00415cf9
  41ce5c:	00406d2d 	.word	0x00406d2d
  41ce60:	00416ab1 	.word	0x00416ab1
  41ce64:	0041cc75 	.word	0x0041cc75
  41ce68:	004066a9 	.word	0x004066a9
  41ce6c:	00405419 	.word	0x00405419
  41ce70:	004059c9 	.word	0x004059c9
  41ce74:	00420101 	.word	0x00420101
  41ce78:	00415c35 	.word	0x00415c35
  41ce7c:	004235f0 	.word	0x004235f0
  41ce80:	0042003d 	.word	0x0042003d
  41ce84:	00406e35 	.word	0x00406e35

0041ce88 <lv_img_create>:
{
  41ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41ce8c:	4680      	mov	r8, r0
  41ce8e:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  41ce90:	4b4c      	ldr	r3, [pc, #304]	; (41cfc4 <lv_img_create+0x13c>)
  41ce92:	4798      	blx	r3
  41ce94:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  41ce96:	4b4c      	ldr	r3, [pc, #304]	; (41cfc8 <lv_img_create+0x140>)
  41ce98:	4798      	blx	r3
  41ce9a:	b190      	cbz	r0, 41cec2 <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  41ce9c:	2d00      	cmp	r5, #0
  41ce9e:	d070      	beq.n	41cf82 <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41cea0:	4b4a      	ldr	r3, [pc, #296]	; (41cfcc <lv_img_create+0x144>)
  41cea2:	681b      	ldr	r3, [r3, #0]
  41cea4:	b19b      	cbz	r3, 41cece <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  41cea6:	2118      	movs	r1, #24
  41cea8:	4628      	mov	r0, r5
  41ceaa:	4b49      	ldr	r3, [pc, #292]	; (41cfd0 <lv_img_create+0x148>)
  41ceac:	4798      	blx	r3
  41ceae:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  41ceb0:	4b45      	ldr	r3, [pc, #276]	; (41cfc8 <lv_img_create+0x140>)
  41ceb2:	4798      	blx	r3
  41ceb4:	b988      	cbnz	r0, 41ceda <lv_img_create+0x52>
  41ceb6:	4622      	mov	r2, r4
  41ceb8:	2300      	movs	r3, #0
  41ceba:	4846      	ldr	r0, [pc, #280]	; (41cfd4 <lv_img_create+0x14c>)
  41cebc:	4946      	ldr	r1, [pc, #280]	; (41cfd8 <lv_img_create+0x150>)
  41cebe:	4788      	blx	r1
  41cec0:	e7fe      	b.n	41cec0 <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  41cec2:	462a      	mov	r2, r5
  41cec4:	2300      	movs	r3, #0
  41cec6:	4843      	ldr	r0, [pc, #268]	; (41cfd4 <lv_img_create+0x14c>)
  41cec8:	4943      	ldr	r1, [pc, #268]	; (41cfd8 <lv_img_create+0x150>)
  41ceca:	4788      	blx	r1
  41cecc:	e7fe      	b.n	41cecc <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41cece:	4628      	mov	r0, r5
  41ced0:	4b42      	ldr	r3, [pc, #264]	; (41cfdc <lv_img_create+0x154>)
  41ced2:	4798      	blx	r3
  41ced4:	4b3d      	ldr	r3, [pc, #244]	; (41cfcc <lv_img_create+0x144>)
  41ced6:	6018      	str	r0, [r3, #0]
  41ced8:	e7e5      	b.n	41cea6 <lv_img_create+0x1e>
    if(ext == NULL) {
  41ceda:	2c00      	cmp	r4, #0
  41cedc:	d054      	beq.n	41cf88 <lv_img_create+0x100>
    ext->src       = NULL;
  41cede:	2600      	movs	r6, #0
  41cee0:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  41cee2:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  41cee4:	f043 0303 	orr.w	r3, r3, #3
  41cee8:	f366 03c7 	bfi	r3, r6, #3, #5
  41ceec:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  41ceee:	4628      	mov	r0, r5
  41cef0:	4b3b      	ldr	r3, [pc, #236]	; (41cfe0 <lv_img_create+0x158>)
  41cef2:	4798      	blx	r3
  41cef4:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  41cef6:	4628      	mov	r0, r5
  41cef8:	4b3a      	ldr	r3, [pc, #232]	; (41cfe4 <lv_img_create+0x15c>)
  41cefa:	4798      	blx	r3
  41cefc:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  41cefe:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  41cf00:	f44f 7380 	mov.w	r3, #256	; 0x100
  41cf04:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  41cf06:	7d63      	ldrb	r3, [r4, #21]
  41cf08:	f043 0301 	orr.w	r3, r3, #1
  41cf0c:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  41cf0e:	7d23      	ldrb	r3, [r4, #20]
  41cf10:	f043 0304 	orr.w	r3, r3, #4
  41cf14:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  41cf16:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  41cf18:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  41cf1a:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  41cf1c:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  41cf1e:	4932      	ldr	r1, [pc, #200]	; (41cfe8 <lv_img_create+0x160>)
  41cf20:	4628      	mov	r0, r5
  41cf22:	4b32      	ldr	r3, [pc, #200]	; (41cfec <lv_img_create+0x164>)
  41cf24:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  41cf26:	4932      	ldr	r1, [pc, #200]	; (41cff0 <lv_img_create+0x168>)
  41cf28:	4628      	mov	r0, r5
  41cf2a:	4b32      	ldr	r3, [pc, #200]	; (41cff4 <lv_img_create+0x16c>)
  41cf2c:	4798      	blx	r3
    if(copy == NULL) {
  41cf2e:	2f00      	cmp	r7, #0
  41cf30:	d02f      	beq.n	41cf92 <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41cf32:	4638      	mov	r0, r7
  41cf34:	4b30      	ldr	r3, [pc, #192]	; (41cff8 <lv_img_create+0x170>)
  41cf36:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  41cf38:	7d03      	ldrb	r3, [r0, #20]
  41cf3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41cf3e:	7d22      	ldrb	r2, [r4, #20]
  41cf40:	f363 0282 	bfi	r2, r3, #2, #1
  41cf44:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  41cf46:	8a43      	ldrh	r3, [r0, #18]
  41cf48:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  41cf4a:	8983      	ldrh	r3, [r0, #12]
  41cf4c:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  41cf4e:	7d42      	ldrb	r2, [r0, #21]
  41cf50:	7d63      	ldrb	r3, [r4, #21]
  41cf52:	f362 0300 	bfi	r3, r2, #0, #1
  41cf56:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  41cf58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41cf5c:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  41cf5e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  41cf62:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  41cf64:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  41cf68:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  41cf6a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  41cf6e:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  41cf70:	6801      	ldr	r1, [r0, #0]
  41cf72:	4628      	mov	r0, r5
  41cf74:	4b21      	ldr	r3, [pc, #132]	; (41cffc <lv_img_create+0x174>)
  41cf76:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41cf78:	22ff      	movs	r2, #255	; 0xff
  41cf7a:	4611      	mov	r1, r2
  41cf7c:	4628      	mov	r0, r5
  41cf7e:	4b20      	ldr	r3, [pc, #128]	; (41d000 <lv_img_create+0x178>)
  41cf80:	4798      	blx	r3
}
  41cf82:	4628      	mov	r0, r5
  41cf84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  41cf88:	4628      	mov	r0, r5
  41cf8a:	4b1e      	ldr	r3, [pc, #120]	; (41d004 <lv_img_create+0x17c>)
  41cf8c:	4798      	blx	r3
        return NULL;
  41cf8e:	2500      	movs	r5, #0
  41cf90:	e7f7      	b.n	41cf82 <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  41cf92:	210f      	movs	r1, #15
  41cf94:	4628      	mov	r0, r5
  41cf96:	4b1c      	ldr	r3, [pc, #112]	; (41d008 <lv_img_create+0x180>)
  41cf98:	4798      	blx	r3
        lv_obj_set_click(img, false);
  41cf9a:	4631      	mov	r1, r6
  41cf9c:	4628      	mov	r0, r5
  41cf9e:	4b1b      	ldr	r3, [pc, #108]	; (41d00c <lv_img_create+0x184>)
  41cfa0:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  41cfa2:	2101      	movs	r1, #1
  41cfa4:	4628      	mov	r0, r5
  41cfa6:	4b1a      	ldr	r3, [pc, #104]	; (41d010 <lv_img_create+0x188>)
  41cfa8:	4798      	blx	r3
        if(par != NULL) {
  41cfaa:	f1b8 0f00 	cmp.w	r8, #0
  41cfae:	d004      	beq.n	41cfba <lv_img_create+0x132>
            ext->auto_size = 1;
  41cfb0:	7d23      	ldrb	r3, [r4, #20]
  41cfb2:	f043 0304 	orr.w	r3, r3, #4
  41cfb6:	7523      	strb	r3, [r4, #20]
  41cfb8:	e7e3      	b.n	41cf82 <lv_img_create+0xfa>
            ext->auto_size = 0;
  41cfba:	7d23      	ldrb	r3, [r4, #20]
  41cfbc:	f36f 0382 	bfc	r3, #2, #1
  41cfc0:	7523      	strb	r3, [r4, #20]
  41cfc2:	e7de      	b.n	41cf82 <lv_img_create+0xfa>
  41cfc4:	00406285 	.word	0x00406285
  41cfc8:	0041552d 	.word	0x0041552d
  41cfcc:	204147c4 	.word	0x204147c4
  41cfd0:	004053dd 	.word	0x004053dd
  41cfd4:	004235f0 	.word	0x004235f0
  41cfd8:	00415539 	.word	0x00415539
  41cfdc:	00407921 	.word	0x00407921
  41cfe0:	0040561d 	.word	0x0040561d
  41cfe4:	0040564d 	.word	0x0040564d
  41cfe8:	0041d015 	.word	0x0041d015
  41cfec:	00405379 	.word	0x00405379
  41cff0:	0041c615 	.word	0x0041c615
  41cff4:	004053b5 	.word	0x004053b5
  41cff8:	00407949 	.word	0x00407949
  41cffc:	0041cca9 	.word	0x0041cca9
  41d000:	004071fd 	.word	0x004071fd
  41d004:	00407aa9 	.word	0x00407aa9
  41d008:	00416ebd 	.word	0x00416ebd
  41d00c:	00405245 	.word	0x00405245
  41d010:	00405209 	.word	0x00405209

0041d014 <lv_img_signal>:
{
  41d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41d018:	b085      	sub	sp, #20
  41d01a:	4607      	mov	r7, r0
  41d01c:	460c      	mov	r4, r1
  41d01e:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41d020:	2908      	cmp	r1, #8
  41d022:	d020      	beq.n	41d066 <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  41d024:	4b98      	ldr	r3, [pc, #608]	; (41d288 <lv_img_signal+0x274>)
  41d026:	681b      	ldr	r3, [r3, #0]
  41d028:	4798      	blx	r3
  41d02a:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41d02c:	2801      	cmp	r0, #1
  41d02e:	d120      	bne.n	41d072 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d030:	2c07      	cmp	r4, #7
  41d032:	d02a      	beq.n	41d08a <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41d034:	4638      	mov	r0, r7
  41d036:	4b95      	ldr	r3, [pc, #596]	; (41d28c <lv_img_signal+0x278>)
  41d038:	4798      	blx	r3
  41d03a:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41d03c:	bb5c      	cbnz	r4, 41d096 <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41d03e:	7d03      	ldrb	r3, [r0, #20]
  41d040:	f003 0303 	and.w	r3, r3, #3
  41d044:	3b01      	subs	r3, #1
  41d046:	b2db      	uxtb	r3, r3
  41d048:	2b01      	cmp	r3, #1
  41d04a:	d812      	bhi.n	41d072 <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  41d04c:	6800      	ldr	r0, [r0, #0]
  41d04e:	4b90      	ldr	r3, [pc, #576]	; (41d290 <lv_img_signal+0x27c>)
  41d050:	4798      	blx	r3
            ext->src      = NULL;
  41d052:	2300      	movs	r3, #0
  41d054:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  41d058:	f898 3014 	ldrb.w	r3, [r8, #20]
  41d05c:	f043 0303 	orr.w	r3, r3, #3
  41d060:	f888 3014 	strb.w	r3, [r8, #20]
  41d064:	e005      	b.n	41d072 <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  41d066:	7811      	ldrb	r1, [r2, #0]
  41d068:	4b8a      	ldr	r3, [pc, #552]	; (41d294 <lv_img_signal+0x280>)
  41d06a:	4798      	blx	r3
  41d06c:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41d06e:	b120      	cbz	r0, 41d07a <lv_img_signal+0x66>
  41d070:	2601      	movs	r6, #1
}
  41d072:	4630      	mov	r0, r6
  41d074:	b005      	add	sp, #20
  41d076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  41d07a:	4b83      	ldr	r3, [pc, #524]	; (41d288 <lv_img_signal+0x274>)
  41d07c:	681b      	ldr	r3, [r3, #0]
  41d07e:	462a      	mov	r2, r5
  41d080:	4621      	mov	r1, r4
  41d082:	4638      	mov	r0, r7
  41d084:	4798      	blx	r3
  41d086:	4606      	mov	r6, r0
  41d088:	e7f3      	b.n	41d072 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41d08a:	4983      	ldr	r1, [pc, #524]	; (41d298 <lv_img_signal+0x284>)
  41d08c:	4628      	mov	r0, r5
  41d08e:	4b83      	ldr	r3, [pc, #524]	; (41d29c <lv_img_signal+0x288>)
  41d090:	4798      	blx	r3
  41d092:	4606      	mov	r6, r0
  41d094:	e7ed      	b.n	41d072 <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41d096:	2c04      	cmp	r4, #4
  41d098:	d027      	beq.n	41d0ea <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  41d09a:	2c06      	cmp	r4, #6
  41d09c:	d02f      	beq.n	41d0fe <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  41d09e:	2c0a      	cmp	r4, #10
  41d0a0:	d1e7      	bne.n	41d072 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41d0a2:	2207      	movs	r2, #7
  41d0a4:	2100      	movs	r1, #0
  41d0a6:	4638      	mov	r0, r7
  41d0a8:	f8df a200 	ldr.w	sl, [pc, #512]	; 41d2ac <lv_img_signal+0x298>
  41d0ac:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  41d0ae:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41d0b2:	fb03 f300 	mul.w	r3, r3, r0
  41d0b6:	121c      	asrs	r4, r3, #8
  41d0b8:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41d0bc:	2206      	movs	r2, #6
  41d0be:	2100      	movs	r1, #0
  41d0c0:	4638      	mov	r0, r7
  41d0c2:	47d0      	blx	sl
        angle += ext->angle;
  41d0c4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41d0c8:	4403      	add	r3, r0
  41d0ca:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41d0ce:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  41d0d2:	4638      	mov	r0, r7
  41d0d4:	4b72      	ldr	r3, [pc, #456]	; (41d2a0 <lv_img_signal+0x28c>)
  41d0d6:	4798      	blx	r3
  41d0d8:	4583      	cmp	fp, r0
  41d0da:	f000 8086 	beq.w	41d1ea <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  41d0de:	6829      	ldr	r1, [r5, #0]
  41d0e0:	4638      	mov	r0, r7
  41d0e2:	4b70      	ldr	r3, [pc, #448]	; (41d2a4 <lv_img_signal+0x290>)
  41d0e4:	4798      	blx	r3
  41d0e6:	7128      	strb	r0, [r5, #4]
  41d0e8:	e7c3      	b.n	41d072 <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41d0ea:	7d03      	ldrb	r3, [r0, #20]
  41d0ec:	f003 0303 	and.w	r3, r3, #3
  41d0f0:	2b02      	cmp	r3, #2
  41d0f2:	d1be      	bne.n	41d072 <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  41d0f4:	6801      	ldr	r1, [r0, #0]
  41d0f6:	4638      	mov	r0, r7
  41d0f8:	4b6b      	ldr	r3, [pc, #428]	; (41d2a8 <lv_img_signal+0x294>)
  41d0fa:	4798      	blx	r3
  41d0fc:	e7b9      	b.n	41d072 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41d0fe:	2207      	movs	r2, #7
  41d100:	2100      	movs	r1, #0
  41d102:	4638      	mov	r0, r7
  41d104:	4d69      	ldr	r5, [pc, #420]	; (41d2ac <lv_img_signal+0x298>)
  41d106:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  41d108:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41d10c:	fb03 f300 	mul.w	r3, r3, r0
  41d110:	121c      	asrs	r4, r3, #8
  41d112:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41d116:	2206      	movs	r2, #6
  41d118:	2100      	movs	r1, #0
  41d11a:	4638      	mov	r0, r7
  41d11c:	47a8      	blx	r5
        transf_angle += ext->angle;
  41d11e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41d122:	4403      	add	r3, r0
  41d124:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  41d126:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  41d12a:	bf08      	it	eq
  41d12c:	2d00      	cmpeq	r5, #0
  41d12e:	d126      	bne.n	41d17e <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d130:	2212      	movs	r2, #18
  41d132:	2100      	movs	r1, #0
  41d134:	4638      	mov	r0, r7
  41d136:	4d5d      	ldr	r5, [pc, #372]	; (41d2ac <lv_img_signal+0x298>)
  41d138:	47a8      	blx	r5
  41d13a:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d13c:	2213      	movs	r2, #19
  41d13e:	2100      	movs	r1, #0
  41d140:	4638      	mov	r0, r7
  41d142:	47a8      	blx	r5
  41d144:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d146:	2210      	movs	r2, #16
  41d148:	2100      	movs	r1, #0
  41d14a:	4638      	mov	r0, r7
  41d14c:	47a8      	blx	r5
  41d14e:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d150:	2211      	movs	r2, #17
  41d152:	2100      	movs	r1, #0
  41d154:	4638      	mov	r0, r7
  41d156:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  41d158:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  41d15c:	454b      	cmp	r3, r9
  41d15e:	bfb8      	it	lt
  41d160:	464b      	movlt	r3, r9
  41d162:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  41d164:	4543      	cmp	r3, r8
  41d166:	bfb8      	it	lt
  41d168:	4643      	movlt	r3, r8
  41d16a:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  41d16c:	42a3      	cmp	r3, r4
  41d16e:	bfb8      	it	lt
  41d170:	4623      	movlt	r3, r4
  41d172:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  41d174:	4298      	cmp	r0, r3
  41d176:	bfb8      	it	lt
  41d178:	4618      	movlt	r0, r3
  41d17a:	8678      	strh	r0, [r7, #50]	; 0x32
  41d17c:	e779      	b.n	41d072 <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  41d17e:	4638      	mov	r0, r7
  41d180:	4b47      	ldr	r3, [pc, #284]	; (41d2a0 <lv_img_signal+0x28c>)
  41d182:	4798      	blx	r3
  41d184:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  41d186:	4638      	mov	r0, r7
  41d188:	4b49      	ldr	r3, [pc, #292]	; (41d2b0 <lv_img_signal+0x29c>)
  41d18a:	4798      	blx	r3
  41d18c:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  41d18e:	f108 030e 	add.w	r3, r8, #14
  41d192:	9301      	str	r3, [sp, #4]
  41d194:	b2a4      	uxth	r4, r4
  41d196:	9400      	str	r4, [sp, #0]
  41d198:	462b      	mov	r3, r5
  41d19a:	4602      	mov	r2, r0
  41d19c:	4651      	mov	r1, sl
  41d19e:	a802      	add	r0, sp, #8
  41d1a0:	4c44      	ldr	r4, [pc, #272]	; (41d2b4 <lv_img_signal+0x2a0>)
  41d1a2:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  41d1a4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  41d1a8:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  41d1ac:	1a9a      	subs	r2, r3, r2
  41d1ae:	429a      	cmp	r2, r3
  41d1b0:	bfb8      	it	lt
  41d1b2:	461a      	movlt	r2, r3
  41d1b4:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  41d1b6:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  41d1ba:	1a9a      	subs	r2, r3, r2
  41d1bc:	428a      	cmp	r2, r1
  41d1be:	bfb8      	it	lt
  41d1c0:	460a      	movlt	r2, r1
  41d1c2:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  41d1c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  41d1c8:	441a      	add	r2, r3
  41d1ca:	eba2 020a 	sub.w	r2, r2, sl
  41d1ce:	428a      	cmp	r2, r1
  41d1d0:	bfb8      	it	lt
  41d1d2:	460a      	movlt	r2, r1
  41d1d4:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  41d1d6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  41d1da:	440b      	add	r3, r1
  41d1dc:	eba3 0309 	sub.w	r3, r3, r9
  41d1e0:	4293      	cmp	r3, r2
  41d1e2:	bfb8      	it	lt
  41d1e4:	4613      	movlt	r3, r2
  41d1e6:	867b      	strh	r3, [r7, #50]	; 0x32
  41d1e8:	e7a2      	b.n	41d130 <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41d1ea:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  41d1ee:	4638      	mov	r0, r7
  41d1f0:	4b2f      	ldr	r3, [pc, #188]	; (41d2b0 <lv_img_signal+0x29c>)
  41d1f2:	4798      	blx	r3
  41d1f4:	4583      	cmp	fp, r0
  41d1f6:	f47f af72 	bne.w	41d0de <lv_img_signal+0xca>
  41d1fa:	f1ba 0f00 	cmp.w	sl, #0
  41d1fe:	bf08      	it	eq
  41d200:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  41d204:	d108      	bne.n	41d218 <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41d206:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  41d20a:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  41d20e:	2102      	movs	r1, #2
  41d210:	fb93 f3f1 	sdiv	r3, r3, r1
  41d214:	429a      	cmp	r2, r3
  41d216:	d02e      	beq.n	41d276 <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  41d218:	4638      	mov	r0, r7
  41d21a:	4b21      	ldr	r3, [pc, #132]	; (41d2a0 <lv_img_signal+0x28c>)
  41d21c:	4798      	blx	r3
  41d21e:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  41d220:	4638      	mov	r0, r7
  41d222:	4b23      	ldr	r3, [pc, #140]	; (41d2b0 <lv_img_signal+0x29c>)
  41d224:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  41d226:	f108 030e 	add.w	r3, r8, #14
  41d22a:	9301      	str	r3, [sp, #4]
  41d22c:	b2a4      	uxth	r4, r4
  41d22e:	9400      	str	r4, [sp, #0]
  41d230:	4653      	mov	r3, sl
  41d232:	4602      	mov	r2, r0
  41d234:	4649      	mov	r1, r9
  41d236:	a802      	add	r0, sp, #8
  41d238:	4c1e      	ldr	r4, [pc, #120]	; (41d2b4 <lv_img_signal+0x2a0>)
  41d23a:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  41d23c:	8a3a      	ldrh	r2, [r7, #16]
  41d23e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41d242:	4413      	add	r3, r2
  41d244:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  41d248:	8a7b      	ldrh	r3, [r7, #18]
  41d24a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41d24e:	4419      	add	r1, r3
  41d250:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  41d254:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41d258:	440a      	add	r2, r1
  41d25a:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  41d25e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41d262:	4413      	add	r3, r2
  41d264:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  41d268:	2200      	movs	r2, #0
  41d26a:	6829      	ldr	r1, [r5, #0]
  41d26c:	a802      	add	r0, sp, #8
  41d26e:	4b12      	ldr	r3, [pc, #72]	; (41d2b8 <lv_img_signal+0x2a4>)
  41d270:	4798      	blx	r3
  41d272:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41d274:	e6fd      	b.n	41d072 <lv_img_signal+0x5e>
  41d276:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  41d27a:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  41d27e:	fb93 f3f1 	sdiv	r3, r3, r1
  41d282:	429a      	cmp	r2, r3
  41d284:	d1c8      	bne.n	41d218 <lv_img_signal+0x204>
  41d286:	e72a      	b.n	41d0de <lv_img_signal+0xca>
  41d288:	204147c4 	.word	0x204147c4
  41d28c:	00407949 	.word	0x00407949
  41d290:	00415cf9 	.word	0x00415cf9
  41d294:	0041c609 	.word	0x0041c609
  41d298:	00426d18 	.word	0x00426d18
  41d29c:	00407bd5 	.word	0x00407bd5
  41d2a0:	0040561d 	.word	0x0040561d
  41d2a4:	00407b65 	.word	0x00407b65
  41d2a8:	0041cca9 	.word	0x0041cca9
  41d2ac:	00406e35 	.word	0x00406e35
  41d2b0:	0040564d 	.word	0x0040564d
  41d2b4:	00411f79 	.word	0x00411f79
  41d2b8:	00414d09 	.word	0x00414d09

0041d2bc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  41d2bc:	b508      	push	{r3, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  41d2be:	4810      	ldr	r0, [pc, #64]	; (41d300 <sysclk_init+0x44>)
  41d2c0:	4b10      	ldr	r3, [pc, #64]	; (41d304 <sysclk_init+0x48>)
  41d2c2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  41d2c4:	213e      	movs	r1, #62	; 0x3e
  41d2c6:	2000      	movs	r0, #0
  41d2c8:	4b0f      	ldr	r3, [pc, #60]	; (41d308 <sysclk_init+0x4c>)
  41d2ca:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  41d2cc:	4b0f      	ldr	r3, [pc, #60]	; (41d30c <sysclk_init+0x50>)
  41d2ce:	4798      	blx	r3
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  41d2d0:	2800      	cmp	r0, #0
  41d2d2:	d0fb      	beq.n	41d2cc <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  41d2d4:	4b0e      	ldr	r3, [pc, #56]	; (41d310 <sysclk_init+0x54>)
  41d2d6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  41d2d8:	4a0e      	ldr	r2, [pc, #56]	; (41d314 <sysclk_init+0x58>)
  41d2da:	4b0f      	ldr	r3, [pc, #60]	; (41d318 <sysclk_init+0x5c>)
  41d2dc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  41d2de:	4b0f      	ldr	r3, [pc, #60]	; (41d31c <sysclk_init+0x60>)
  41d2e0:	4798      	blx	r3
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  41d2e2:	2800      	cmp	r0, #0
  41d2e4:	d0fb      	beq.n	41d2de <sysclk_init+0x22>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  41d2e6:	2002      	movs	r0, #2
  41d2e8:	4b0d      	ldr	r3, [pc, #52]	; (41d320 <sysclk_init+0x64>)
  41d2ea:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  41d2ec:	2000      	movs	r0, #0
  41d2ee:	4b0d      	ldr	r3, [pc, #52]	; (41d324 <sysclk_init+0x68>)
  41d2f0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  41d2f2:	4b0d      	ldr	r3, [pc, #52]	; (41d328 <sysclk_init+0x6c>)
  41d2f4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  41d2f6:	480d      	ldr	r0, [pc, #52]	; (41d32c <sysclk_init+0x70>)
  41d2f8:	4b02      	ldr	r3, [pc, #8]	; (41d304 <sysclk_init+0x48>)
  41d2fa:	4798      	blx	r3
  41d2fc:	bd08      	pop	{r3, pc}
  41d2fe:	bf00      	nop
  41d300:	07270e00 	.word	0x07270e00
  41d304:	0041e0f5 	.word	0x0041e0f5
  41d308:	0041dbb5 	.word	0x0041dbb5
  41d30c:	0041dc09 	.word	0x0041dc09
  41d310:	0041dc19 	.word	0x0041dc19
  41d314:	20183f01 	.word	0x20183f01
  41d318:	400e0600 	.word	0x400e0600
  41d31c:	0041dc29 	.word	0x0041dc29
  41d320:	0041db25 	.word	0x0041db25
  41d324:	0041db61 	.word	0x0041db61
  41d328:	0041dfe5 	.word	0x0041dfe5
  41d32c:	11e1a300 	.word	0x11e1a300

0041d330 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  41d330:	b510      	push	{r4, lr}
  41d332:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  41d334:	4b10      	ldr	r3, [pc, #64]	; (41d378 <spi_master_init+0x48>)
  41d336:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SWRST;
  41d338:	2380      	movs	r3, #128	; 0x80
  41d33a:	6023      	str	r3, [r4, #0]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  41d33c:	6863      	ldr	r3, [r4, #4]
  41d33e:	f043 0301 	orr.w	r3, r3, #1
  41d342:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  41d344:	6863      	ldr	r3, [r4, #4]
  41d346:	f043 0310 	orr.w	r3, r3, #16
  41d34a:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  41d34c:	6863      	ldr	r3, [r4, #4]
  41d34e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41d352:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  41d354:	2100      	movs	r1, #0
  41d356:	4620      	mov	r0, r4
  41d358:	4b08      	ldr	r3, [pc, #32]	; (41d37c <spi_master_init+0x4c>)
  41d35a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  41d35c:	6863      	ldr	r3, [r4, #4]
  41d35e:	f023 0302 	bic.w	r3, r3, #2
  41d362:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  41d364:	6863      	ldr	r3, [r4, #4]
  41d366:	f023 0304 	bic.w	r3, r3, #4
  41d36a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  41d36c:	2100      	movs	r1, #0
  41d36e:	4620      	mov	r0, r4
  41d370:	4b03      	ldr	r3, [pc, #12]	; (41d380 <spi_master_init+0x50>)
  41d372:	4798      	blx	r3
  41d374:	bd10      	pop	{r4, pc}
  41d376:	bf00      	nop
  41d378:	0041dc59 	.word	0x0041dc59
  41d37c:	0041dc85 	.word	0x0041dc85
  41d380:	0041dc9b 	.word	0x0041dc9b

0041d384 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  41d384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41d388:	4604      	mov	r4, r0
  41d38a:	460d      	mov	r5, r1
  41d38c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  41d38e:	4915      	ldr	r1, [pc, #84]	; (41d3e4 <spi_master_setup_device+0x60>)
  41d390:	4618      	mov	r0, r3
  41d392:	4b15      	ldr	r3, [pc, #84]	; (41d3e8 <spi_master_setup_device+0x64>)
  41d394:	4798      	blx	r3
  41d396:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  41d398:	2300      	movs	r3, #0
  41d39a:	461a      	mov	r2, r3
  41d39c:	6829      	ldr	r1, [r5, #0]
  41d39e:	4620      	mov	r0, r4
  41d3a0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 41d400 <spi_master_setup_device+0x7c>
  41d3a4:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  41d3a6:	2208      	movs	r2, #8
  41d3a8:	6829      	ldr	r1, [r5, #0]
  41d3aa:	4620      	mov	r0, r4
  41d3ac:	4b0f      	ldr	r3, [pc, #60]	; (41d3ec <spi_master_setup_device+0x68>)
  41d3ae:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  41d3b0:	b2fa      	uxtb	r2, r7
  41d3b2:	6829      	ldr	r1, [r5, #0]
  41d3b4:	4620      	mov	r0, r4
  41d3b6:	4b0e      	ldr	r3, [pc, #56]	; (41d3f0 <spi_master_setup_device+0x6c>)
  41d3b8:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  41d3ba:	2208      	movs	r2, #8
  41d3bc:	6829      	ldr	r1, [r5, #0]
  41d3be:	4620      	mov	r0, r4
  41d3c0:	4b0c      	ldr	r3, [pc, #48]	; (41d3f4 <spi_master_setup_device+0x70>)
  41d3c2:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  41d3c4:	0872      	lsrs	r2, r6, #1
  41d3c6:	6829      	ldr	r1, [r5, #0]
  41d3c8:	4620      	mov	r0, r4
  41d3ca:	4b0b      	ldr	r3, [pc, #44]	; (41d3f8 <spi_master_setup_device+0x74>)
  41d3cc:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  41d3ce:	f086 0201 	eor.w	r2, r6, #1
  41d3d2:	f002 0201 	and.w	r2, r2, #1
  41d3d6:	6829      	ldr	r1, [r5, #0]
  41d3d8:	4620      	mov	r0, r4
  41d3da:	4b08      	ldr	r3, [pc, #32]	; (41d3fc <spi_master_setup_device+0x78>)
  41d3dc:	4798      	blx	r3
  41d3de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41d3e2:	bf00      	nop
  41d3e4:	08f0d180 	.word	0x08f0d180
  41d3e8:	0041dd5f 	.word	0x0041dd5f
  41d3ec:	0041dd45 	.word	0x0041dd45
  41d3f0:	0041dd77 	.word	0x0041dd77
  41d3f4:	0041dcf1 	.word	0x0041dcf1
  41d3f8:	0041dcad 	.word	0x0041dcad
  41d3fc:	0041dccf 	.word	0x0041dccf
  41d400:	0041dda5 	.word	0x0041dda5

0041d404 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  41d404:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  41d406:	6843      	ldr	r3, [r0, #4]
  41d408:	f013 0f04 	tst.w	r3, #4
  41d40c:	d005      	beq.n	41d41a <spi_select_device+0x16>
		return 1;
  41d40e:	2301      	movs	r3, #1
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  41d410:	b143      	cbz	r3, 41d424 <spi_select_device+0x20>
		if (device->id < MAX_NUM_WITH_DECODER) {
  41d412:	6809      	ldr	r1, [r1, #0]
  41d414:	290f      	cmp	r1, #15
  41d416:	d902      	bls.n	41d41e <spi_select_device+0x1a>
  41d418:	bd08      	pop	{r3, pc}
		return 0;
  41d41a:	2300      	movs	r3, #0
  41d41c:	e7f8      	b.n	41d410 <spi_select_device+0xc>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  41d41e:	4b06      	ldr	r3, [pc, #24]	; (41d438 <spi_select_device+0x34>)
  41d420:	4798      	blx	r3
  41d422:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  41d424:	6809      	ldr	r1, [r1, #0]
  41d426:	2903      	cmp	r1, #3
  41d428:	d8f6      	bhi.n	41d418 <spi_select_device+0x14>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  41d42a:	2301      	movs	r3, #1
  41d42c:	fa03 f101 	lsl.w	r1, r3, r1
  41d430:	43c9      	mvns	r1, r1
  41d432:	4b01      	ldr	r3, [pc, #4]	; (41d438 <spi_select_device+0x34>)
  41d434:	4798      	blx	r3
		}
	}
}
  41d436:	e7ef      	b.n	41d418 <spi_select_device+0x14>
  41d438:	0041dc85 	.word	0x0041dc85

0041d43c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  41d43c:	b570      	push	{r4, r5, r6, lr}
  41d43e:	460d      	mov	r5, r1
  41d440:	4614      	mov	r4, r2
	int nChars = 0;

	if (file != 0) {
  41d442:	4606      	mov	r6, r0
  41d444:	b158      	cbz	r0, 41d45e <_read+0x22>
		return -1;
  41d446:	f04f 36ff 	mov.w	r6, #4294967295
  41d44a:	e00a      	b.n	41d462 <_read+0x26>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
  41d44c:	4b06      	ldr	r3, [pc, #24]	; (41d468 <_read+0x2c>)
  41d44e:	6818      	ldr	r0, [r3, #0]
  41d450:	4b06      	ldr	r3, [pc, #24]	; (41d46c <_read+0x30>)
  41d452:	681b      	ldr	r3, [r3, #0]
  41d454:	4629      	mov	r1, r5
  41d456:	4798      	blx	r3
		ptr++;
  41d458:	3501      	adds	r5, #1
		nChars++;
  41d45a:	3601      	adds	r6, #1
	for (; len > 0; --len) {
  41d45c:	3c01      	subs	r4, #1
  41d45e:	2c00      	cmp	r4, #0
  41d460:	dcf4      	bgt.n	41d44c <_read+0x10>
	}
	return nChars;
}
  41d462:	4630      	mov	r0, r6
  41d464:	bd70      	pop	{r4, r5, r6, pc}
  41d466:	bf00      	nop
  41d468:	2043a2fc 	.word	0x2043a2fc
  41d46c:	2043a2f4 	.word	0x2043a2f4

0041d470 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  41d470:	b570      	push	{r4, r5, r6, lr}
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  41d472:	3801      	subs	r0, #1
  41d474:	2802      	cmp	r0, #2
  41d476:	d80f      	bhi.n	41d498 <_write+0x28>
  41d478:	4614      	mov	r4, r2
  41d47a:	2500      	movs	r5, #0
		return -1;
	}

	for (; len != 0; --len) {
  41d47c:	b18c      	cbz	r4, 41d4a2 <_write+0x32>
		if (ptr_put(stdio_base, *ptr++) < 0) {
  41d47e:	4b0a      	ldr	r3, [pc, #40]	; (41d4a8 <_write+0x38>)
  41d480:	6818      	ldr	r0, [r3, #0]
  41d482:	1c4e      	adds	r6, r1, #1
  41d484:	4b09      	ldr	r3, [pc, #36]	; (41d4ac <_write+0x3c>)
  41d486:	681b      	ldr	r3, [r3, #0]
  41d488:	7809      	ldrb	r1, [r1, #0]
  41d48a:	4798      	blx	r3
  41d48c:	2800      	cmp	r0, #0
  41d48e:	db06      	blt.n	41d49e <_write+0x2e>
			return -1;
		}
		++nChars;
  41d490:	3501      	adds	r5, #1
	for (; len != 0; --len) {
  41d492:	3c01      	subs	r4, #1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  41d494:	4631      	mov	r1, r6
  41d496:	e7f1      	b.n	41d47c <_write+0xc>
		return -1;
  41d498:	f04f 35ff 	mov.w	r5, #4294967295
  41d49c:	e001      	b.n	41d4a2 <_write+0x32>
			return -1;
  41d49e:	f04f 35ff 	mov.w	r5, #4294967295
	}
	return nChars;
}
  41d4a2:	4628      	mov	r0, r5
  41d4a4:	bd70      	pop	{r4, r5, r6, pc}
  41d4a6:	bf00      	nop
  41d4a8:	2043a2fc 	.word	0x2043a2fc
  41d4ac:	2043a2f8 	.word	0x2043a2f8

0041d4b0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  41d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  41d4b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41d4b8:	4b9a      	ldr	r3, [pc, #616]	; (41d724 <board_init+0x274>)
  41d4ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb");
  41d4bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41d4c0:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  41d4c4:	4b98      	ldr	r3, [pc, #608]	; (41d728 <board_init+0x278>)
  41d4c6:	2200      	movs	r2, #0
  41d4c8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  41d4cc:	695a      	ldr	r2, [r3, #20]
  41d4ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  41d4d2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  41d4d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41d4d8:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  41d4dc:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  41d4e0:	f3c6 304e 	ubfx	r0, r6, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  41d4e4:	f006 0507 	and.w	r5, r6, #7
  41d4e8:	3504      	adds	r5, #4
    ways    = CCSIDR_WAYS(ccsidr);
  41d4ea:	f3c6 06c9 	ubfx	r6, r6, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  41d4ee:	fab6 f486 	clz	r4, r6
    wshift  = __CLZ(ways) & 0x1f;
  41d4f2:	f004 041f 	and.w	r4, r4, #31
  __ASM volatile ("dsb");
  41d4f6:	f3bf 8f4f 	dsb	sy
  41d4fa:	e00e      	b.n	41d51a <board_init+0x6a>
    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
            } while(tmpways--);
  41d4fc:	4613      	mov	r3, r2
              sw = ((tmpways << wshift) | (sets << sshift));
  41d4fe:	fa03 f204 	lsl.w	r2, r3, r4
  41d502:	fa00 f105 	lsl.w	r1, r0, r5
  41d506:	430a      	orrs	r2, r1
              SCB->DCISW = sw;
  41d508:	4987      	ldr	r1, [pc, #540]	; (41d728 <board_init+0x278>)
  41d50a:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
            } while(tmpways--);
  41d50e:	1e5a      	subs	r2, r3, #1
  41d510:	2b00      	cmp	r3, #0
  41d512:	d1f3      	bne.n	41d4fc <board_init+0x4c>
        } while(sets--);
  41d514:	1e43      	subs	r3, r0, #1
  41d516:	b110      	cbz	r0, 41d51e <board_init+0x6e>
  41d518:	4618      	mov	r0, r3
         int32_t tmpways = ways;
  41d51a:	4633      	mov	r3, r6
  41d51c:	e7ef      	b.n	41d4fe <board_init+0x4e>
  41d51e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  41d522:	460b      	mov	r3, r1
  41d524:	694a      	ldr	r2, [r1, #20]
  41d526:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  41d52a:	614a      	str	r2, [r1, #20]
  41d52c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41d530:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  41d534:	4a7d      	ldr	r2, [pc, #500]	; (41d72c <board_init+0x27c>)
  41d536:	497e      	ldr	r1, [pc, #504]	; (41d730 <board_init+0x280>)
  41d538:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  41d53a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  41d53e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  41d540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41d544:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  41d548:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  41d54c:	f022 0201 	bic.w	r2, r2, #1
  41d550:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  41d554:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  41d558:	f022 0201 	bic.w	r2, r2, #1
  41d55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  41d560:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41d564:	f3bf 8f6f 	isb	sy
  41d568:	200a      	movs	r0, #10
  41d56a:	4c72      	ldr	r4, [pc, #456]	; (41d734 <board_init+0x284>)
  41d56c:	47a0      	blx	r4
  41d56e:	200b      	movs	r0, #11
  41d570:	47a0      	blx	r4
  41d572:	200c      	movs	r0, #12
  41d574:	47a0      	blx	r4
  41d576:	2010      	movs	r0, #16
  41d578:	47a0      	blx	r4
  41d57a:	2011      	movs	r0, #17
  41d57c:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  41d57e:	4e6e      	ldr	r6, [pc, #440]	; (41d738 <board_init+0x288>)
  41d580:	f44f 7880 	mov.w	r8, #256	; 0x100
  41d584:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41d588:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41d58c:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  41d590:	4c6a      	ldr	r4, [pc, #424]	; (41d73c <board_init+0x28c>)
  41d592:	f44f 6500 	mov.w	r5, #2048	; 0x800
  41d596:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  41d598:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  41d59c:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  41d59e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41d5a2:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  41d5a4:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  41d5a6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  41d5aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
  41d5ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41d5b0:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41d5b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41d5b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41d5b8:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  41d5ba:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  41d5be:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  41d5c2:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  41d5c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41d5ca:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41d5cc:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41d5d0:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41d5d2:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41d5d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41d5d8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41d5da:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41d5de:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41d5e0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41d5e2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41d5e6:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41d5e8:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  41d5ea:	4a55      	ldr	r2, [pc, #340]	; (41d740 <board_init+0x290>)
  41d5ec:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41d5f0:	f043 0310 	orr.w	r3, r3, #16
  41d5f4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  41d5f8:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  41d5fc:	2310      	movs	r3, #16
  41d5fe:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41d600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  41d604:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  41d606:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41d608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  41d60c:	6f11      	ldr	r1, [r2, #112]	; 0x70
  41d60e:	4319      	orrs	r1, r3
  41d610:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  41d612:	6f51      	ldr	r1, [r2, #116]	; 0x74
  41d614:	4319      	orrs	r1, r3
  41d616:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41d618:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  41d61a:	2208      	movs	r2, #8
  41d61c:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41d61e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41d622:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41d624:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41d626:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41d62a:	6f21      	ldr	r1, [r4, #112]	; 0x70
  41d62c:	f021 0108 	bic.w	r1, r1, #8
  41d630:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41d632:	6f61      	ldr	r1, [r4, #116]	; 0x74
  41d634:	f021 0108 	bic.w	r1, r1, #8
  41d638:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41d63a:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  41d63c:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  41d63e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  41d642:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  41d644:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  41d646:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  41d64a:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41d64c:	f022 0210 	bic.w	r2, r2, #16
  41d650:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  41d652:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41d654:	f022 0210 	bic.w	r2, r2, #16
  41d658:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  41d65a:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  41d65c:	2300      	movs	r3, #0
  41d65e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  41d662:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d666:	4630      	mov	r0, r6
  41d668:	4f36      	ldr	r7, [pc, #216]	; (41d744 <board_init+0x294>)
  41d66a:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  41d66c:	2300      	movs	r3, #0
  41d66e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  41d672:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d676:	4630      	mov	r0, r6
  41d678:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  41d67a:	2301      	movs	r3, #1
  41d67c:	22ff      	movs	r2, #255	; 0xff
  41d67e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d682:	4630      	mov	r0, r6
  41d684:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  41d686:	2301      	movs	r3, #1
  41d688:	223f      	movs	r2, #63	; 0x3f
  41d68a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d68e:	482e      	ldr	r0, [pc, #184]	; (41d748 <board_init+0x298>)
  41d690:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  41d692:	2301      	movs	r3, #1
  41d694:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  41d698:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d69c:	4620      	mov	r0, r4
  41d69e:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  41d6a0:	2301      	movs	r3, #1
  41d6a2:	4642      	mov	r2, r8
  41d6a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d6a8:	4630      	mov	r0, r6
  41d6aa:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  41d6ac:	2301      	movs	r3, #1
  41d6ae:	462a      	mov	r2, r5
  41d6b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d6b4:	4630      	mov	r0, r6
  41d6b6:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  41d6b8:	2301      	movs	r3, #1
  41d6ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  41d6be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d6c2:	4822      	ldr	r0, [pc, #136]	; (41d74c <board_init+0x29c>)
  41d6c4:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  41d6c6:	2300      	movs	r3, #0
  41d6c8:	f44f 7200 	mov.w	r2, #512	; 0x200
  41d6cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d6d0:	4630      	mov	r0, r6
  41d6d2:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  41d6d4:	f44f 7100 	mov.w	r1, #512	; 0x200
  41d6d8:	4630      	mov	r0, r6
  41d6da:	4b1d      	ldr	r3, [pc, #116]	; (41d750 <board_init+0x2a0>)
  41d6dc:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  41d6de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d6e2:	2074      	movs	r0, #116	; 0x74
  41d6e4:	4c1b      	ldr	r4, [pc, #108]	; (41d754 <board_init+0x2a4>)
  41d6e6:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  41d6e8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d6ec:	2075      	movs	r0, #117	; 0x75
  41d6ee:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  41d6f0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d6f4:	2076      	movs	r0, #118	; 0x76
  41d6f6:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  41d6f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d6fc:	207b      	movs	r0, #123	; 0x7b
  41d6fe:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  41d700:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d704:	2018      	movs	r0, #24
  41d706:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  41d708:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d70c:	2006      	movs	r0, #6
  41d70e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  41d710:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41d714:	2053      	movs	r0, #83	; 0x53
  41d716:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  41d718:	2053      	movs	r0, #83	; 0x53
  41d71a:	4b0f      	ldr	r3, [pc, #60]	; (41d758 <board_init+0x2a8>)
  41d71c:	4798      	blx	r3
  41d71e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41d722:	bf00      	nop
  41d724:	400e1850 	.word	0x400e1850
  41d728:	e000ed00 	.word	0xe000ed00
  41d72c:	400e0c00 	.word	0x400e0c00
  41d730:	5a00080c 	.word	0x5a00080c
  41d734:	0041dc39 	.word	0x0041dc39
  41d738:	400e1200 	.word	0x400e1200
  41d73c:	400e0e00 	.word	0x400e0e00
  41d740:	40088000 	.word	0x40088000
  41d744:	0041d881 	.word	0x0041d881
  41d748:	400e1600 	.word	0x400e1600
  41d74c:	400e1400 	.word	0x400e1400
  41d750:	0041d767 	.word	0x0041d767
  41d754:	0041d941 	.word	0x0041d941
  41d758:	0041d929 	.word	0x0041d929

0041d75c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  41d75c:	b90a      	cbnz	r2, 41d762 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  41d75e:	6601      	str	r1, [r0, #96]	; 0x60
  41d760:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  41d762:	6641      	str	r1, [r0, #100]	; 0x64
  41d764:	4770      	bx	lr

0041d766 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  41d766:	6301      	str	r1, [r0, #48]	; 0x30
  41d768:	4770      	bx	lr

0041d76a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  41d76a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  41d76c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  41d770:	d039      	beq.n	41d7e6 <pio_set_peripheral+0x7c>
  41d772:	d813      	bhi.n	41d79c <pio_set_peripheral+0x32>
  41d774:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  41d778:	d025      	beq.n	41d7c6 <pio_set_peripheral+0x5c>
  41d77a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  41d77e:	d10a      	bne.n	41d796 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  41d780:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  41d782:	4313      	orrs	r3, r2
  41d784:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  41d786:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41d788:	6f43      	ldr	r3, [r0, #116]	; 0x74
  41d78a:	ea21 0102 	bic.w	r1, r1, r2
  41d78e:	400b      	ands	r3, r1
  41d790:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  41d792:	6042      	str	r2, [r0, #4]
  41d794:	4770      	bx	lr
	switch (ul_type) {
  41d796:	2900      	cmp	r1, #0
  41d798:	d1fb      	bne.n	41d792 <pio_set_peripheral+0x28>
  41d79a:	4770      	bx	lr
  41d79c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  41d7a0:	d020      	beq.n	41d7e4 <pio_set_peripheral+0x7a>
  41d7a2:	d809      	bhi.n	41d7b8 <pio_set_peripheral+0x4e>
  41d7a4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41d7a8:	d1f3      	bne.n	41d792 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  41d7aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  41d7ac:	4313      	orrs	r3, r2
  41d7ae:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41d7b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41d7b2:	4313      	orrs	r3, r2
  41d7b4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  41d7b6:	e7ec      	b.n	41d792 <pio_set_peripheral+0x28>
	switch (ul_type) {
  41d7b8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  41d7bc:	d012      	beq.n	41d7e4 <pio_set_peripheral+0x7a>
  41d7be:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41d7c2:	d00f      	beq.n	41d7e4 <pio_set_peripheral+0x7a>
  41d7c4:	e7e5      	b.n	41d792 <pio_set_peripheral+0x28>
{
  41d7c6:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  41d7c8:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  41d7ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
  41d7cc:	43d3      	mvns	r3, r2
  41d7ce:	401c      	ands	r4, r3
  41d7d0:	4021      	ands	r1, r4
  41d7d2:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41d7d4:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  41d7d6:	6f41      	ldr	r1, [r0, #116]	; 0x74
  41d7d8:	4023      	ands	r3, r4
  41d7da:	400b      	ands	r3, r1
  41d7dc:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  41d7de:	6042      	str	r2, [r0, #4]
}
  41d7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  41d7e4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  41d7e6:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  41d7e8:	6f03      	ldr	r3, [r0, #112]	; 0x70
  41d7ea:	ea21 0102 	bic.w	r1, r1, r2
  41d7ee:	400b      	ands	r3, r1
  41d7f0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  41d7f2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  41d7f4:	4313      	orrs	r3, r2
  41d7f6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  41d7f8:	e7cb      	b.n	41d792 <pio_set_peripheral+0x28>

0041d7fa <pio_disable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  41d7fa:	6441      	str	r1, [r0, #68]	; 0x44
  41d7fc:	4770      	bx	lr
	...

0041d800 <pio_set_input>:
{
  41d800:	b570      	push	{r4, r5, r6, lr}
  41d802:	4604      	mov	r4, r0
  41d804:	460d      	mov	r5, r1
  41d806:	4616      	mov	r6, r2
	pio_disable_interrupt(p_pio, ul_mask);
  41d808:	4b0d      	ldr	r3, [pc, #52]	; (41d840 <pio_set_input+0x40>)
  41d80a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  41d80c:	f006 0201 	and.w	r2, r6, #1
  41d810:	4629      	mov	r1, r5
  41d812:	4620      	mov	r0, r4
  41d814:	4b0b      	ldr	r3, [pc, #44]	; (41d844 <pio_set_input+0x44>)
  41d816:	4798      	blx	r3
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  41d818:	f016 0f0a 	tst.w	r6, #10
  41d81c:	d009      	beq.n	41d832 <pio_set_input+0x32>
		p_pio->PIO_IFER = ul_mask;
  41d81e:	6225      	str	r5, [r4, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  41d820:	f016 0f02 	tst.w	r6, #2
  41d824:	d107      	bne.n	41d836 <pio_set_input+0x36>
		if (ul_attribute & PIO_DEBOUNCE) {
  41d826:	f016 0f08 	tst.w	r6, #8
  41d82a:	d006      	beq.n	41d83a <pio_set_input+0x3a>
			p_pio->PIO_IFSCER = ul_mask;
  41d82c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  41d830:	e003      	b.n	41d83a <pio_set_input+0x3a>
		p_pio->PIO_IFDR = ul_mask;
  41d832:	6265      	str	r5, [r4, #36]	; 0x24
  41d834:	e7f4      	b.n	41d820 <pio_set_input+0x20>
		p_pio->PIO_IFSCDR = ul_mask;
  41d836:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  41d83a:	6165      	str	r5, [r4, #20]
	p_pio->PIO_PER = ul_mask;
  41d83c:	6025      	str	r5, [r4, #0]
  41d83e:	bd70      	pop	{r4, r5, r6, pc}
  41d840:	0041d7fb 	.word	0x0041d7fb
  41d844:	0041d75d 	.word	0x0041d75d

0041d848 <pio_set_output>:
{
  41d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41d84a:	4604      	mov	r4, r0
  41d84c:	460d      	mov	r5, r1
  41d84e:	4616      	mov	r6, r2
  41d850:	461f      	mov	r7, r3
	pio_disable_interrupt(p_pio, ul_mask);
  41d852:	4b09      	ldr	r3, [pc, #36]	; (41d878 <pio_set_output+0x30>)
  41d854:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  41d856:	9a06      	ldr	r2, [sp, #24]
  41d858:	4629      	mov	r1, r5
  41d85a:	4620      	mov	r0, r4
  41d85c:	4b07      	ldr	r3, [pc, #28]	; (41d87c <pio_set_output+0x34>)
  41d85e:	4798      	blx	r3
	if (ul_multidrive_enable) {
  41d860:	b12f      	cbz	r7, 41d86e <pio_set_output+0x26>
		p_pio->PIO_MDER = ul_mask;
  41d862:	6525      	str	r5, [r4, #80]	; 0x50
	if (ul_default_level) {
  41d864:	b92e      	cbnz	r6, 41d872 <pio_set_output+0x2a>
		p_pio->PIO_CODR = ul_mask;
  41d866:	6365      	str	r5, [r4, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  41d868:	6125      	str	r5, [r4, #16]
	p_pio->PIO_PER = ul_mask;
  41d86a:	6025      	str	r5, [r4, #0]
  41d86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		p_pio->PIO_MDDR = ul_mask;
  41d86e:	6565      	str	r5, [r4, #84]	; 0x54
  41d870:	e7f8      	b.n	41d864 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  41d872:	6325      	str	r5, [r4, #48]	; 0x30
  41d874:	e7f8      	b.n	41d868 <pio_set_output+0x20>
  41d876:	bf00      	nop
  41d878:	0041d7fb 	.word	0x0041d7fb
  41d87c:	0041d75d 	.word	0x0041d75d

0041d880 <pio_configure>:
{
  41d880:	b570      	push	{r4, r5, r6, lr}
  41d882:	b082      	sub	sp, #8
  41d884:	4604      	mov	r4, r0
  41d886:	4615      	mov	r5, r2
  41d888:	461e      	mov	r6, r3
	switch (ul_type) {
  41d88a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  41d88e:	d014      	beq.n	41d8ba <pio_configure+0x3a>
  41d890:	d90a      	bls.n	41d8a8 <pio_configure+0x28>
  41d892:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  41d896:	d023      	beq.n	41d8e0 <pio_configure+0x60>
  41d898:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41d89c:	d020      	beq.n	41d8e0 <pio_configure+0x60>
  41d89e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  41d8a2:	d017      	beq.n	41d8d4 <pio_configure+0x54>
		return 0;
  41d8a4:	2000      	movs	r0, #0
  41d8a6:	e013      	b.n	41d8d0 <pio_configure+0x50>
	switch (ul_type) {
  41d8a8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  41d8ac:	d005      	beq.n	41d8ba <pio_configure+0x3a>
  41d8ae:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  41d8b2:	d002      	beq.n	41d8ba <pio_configure+0x3a>
  41d8b4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  41d8b8:	d1f4      	bne.n	41d8a4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  41d8ba:	462a      	mov	r2, r5
  41d8bc:	4620      	mov	r0, r4
  41d8be:	4b10      	ldr	r3, [pc, #64]	; (41d900 <pio_configure+0x80>)
  41d8c0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  41d8c2:	f006 0201 	and.w	r2, r6, #1
  41d8c6:	4629      	mov	r1, r5
  41d8c8:	4620      	mov	r0, r4
  41d8ca:	4b0e      	ldr	r3, [pc, #56]	; (41d904 <pio_configure+0x84>)
  41d8cc:	4798      	blx	r3
	return 1;
  41d8ce:	2001      	movs	r0, #1
}
  41d8d0:	b002      	add	sp, #8
  41d8d2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_attribute);
  41d8d4:	461a      	mov	r2, r3
  41d8d6:	4629      	mov	r1, r5
  41d8d8:	4b0b      	ldr	r3, [pc, #44]	; (41d908 <pio_configure+0x88>)
  41d8da:	4798      	blx	r3
	return 1;
  41d8dc:	2001      	movs	r0, #1
		break;
  41d8de:	e7f7      	b.n	41d8d0 <pio_configure+0x50>
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  41d8e0:	f006 0301 	and.w	r3, r6, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  41d8e4:	9300      	str	r3, [sp, #0]
  41d8e6:	f3c6 0380 	ubfx	r3, r6, #2, #1
  41d8ea:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  41d8ee:	bf14      	ite	ne
  41d8f0:	2200      	movne	r2, #0
  41d8f2:	2201      	moveq	r2, #1
  41d8f4:	4629      	mov	r1, r5
  41d8f6:	4620      	mov	r0, r4
  41d8f8:	4c04      	ldr	r4, [pc, #16]	; (41d90c <pio_configure+0x8c>)
  41d8fa:	47a0      	blx	r4
	return 1;
  41d8fc:	2001      	movs	r0, #1
		break;
  41d8fe:	e7e7      	b.n	41d8d0 <pio_configure+0x50>
  41d900:	0041d76b 	.word	0x0041d76b
  41d904:	0041d75d 	.word	0x0041d75d
  41d908:	0041d801 	.word	0x0041d801
  41d90c:	0041d849 	.word	0x0041d849

0041d910 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  41d910:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  41d912:	4770      	bx	lr

0041d914 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  41d914:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  41d916:	4770      	bx	lr

0041d918 <pio_get_pin_group>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  41d918:	4b02      	ldr	r3, [pc, #8]	; (41d924 <pio_get_pin_group+0xc>)
  41d91a:	eb03 1050 	add.w	r0, r3, r0, lsr #5
#endif
	return p_pio;
}
  41d91e:	0240      	lsls	r0, r0, #9
  41d920:	4770      	bx	lr
  41d922:	bf00      	nop
  41d924:	00200707 	.word	0x00200707

0041d928 <pio_set_pin_high>:
{
  41d928:	b510      	push	{r4, lr}
  41d92a:	4604      	mov	r4, r0
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41d92c:	4b03      	ldr	r3, [pc, #12]	; (41d93c <pio_set_pin_high+0x14>)
  41d92e:	4798      	blx	r3
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  41d930:	f004 041f 	and.w	r4, r4, #31
  41d934:	2301      	movs	r3, #1
  41d936:	40a3      	lsls	r3, r4
  41d938:	6303      	str	r3, [r0, #48]	; 0x30
  41d93a:	bd10      	pop	{r4, pc}
  41d93c:	0041d919 	.word	0x0041d919

0041d940 <pio_configure_pin>:
{
  41d940:	b5f0      	push	{r4, r5, r6, r7, lr}
  41d942:	b083      	sub	sp, #12
  41d944:	4604      	mov	r4, r0
  41d946:	460d      	mov	r5, r1
	Pio *p_pio = pio_get_pin_group(ul_pin);
  41d948:	4b42      	ldr	r3, [pc, #264]	; (41da54 <pio_configure_pin+0x114>)
  41d94a:	4798      	blx	r3
  41d94c:	4606      	mov	r6, r0
	switch (ul_flags & PIO_TYPE_Msk) {
  41d94e:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  41d952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  41d956:	d055      	beq.n	41da04 <pio_configure_pin+0xc4>
  41d958:	d80a      	bhi.n	41d970 <pio_configure_pin+0x30>
  41d95a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  41d95e:	d02d      	beq.n	41d9bc <pio_configure_pin+0x7c>
  41d960:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  41d964:	d03c      	beq.n	41d9e0 <pio_configure_pin+0xa0>
  41d966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  41d96a:	d014      	beq.n	41d996 <pio_configure_pin+0x56>
		return 0;
  41d96c:	2000      	movs	r0, #0
  41d96e:	e023      	b.n	41d9b8 <pio_configure_pin+0x78>
	switch (ul_flags & PIO_TYPE_Msk) {
  41d970:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  41d974:	d058      	beq.n	41da28 <pio_configure_pin+0xe8>
  41d976:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  41d97a:	d055      	beq.n	41da28 <pio_configure_pin+0xe8>
  41d97c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  41d980:	d1f4      	bne.n	41d96c <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  41d982:	f004 011f 	and.w	r1, r4, #31
  41d986:	2401      	movs	r4, #1
  41d988:	462a      	mov	r2, r5
  41d98a:	fa04 f101 	lsl.w	r1, r4, r1
  41d98e:	4b32      	ldr	r3, [pc, #200]	; (41da58 <pio_configure_pin+0x118>)
  41d990:	4798      	blx	r3
	return 1;
  41d992:	4620      	mov	r0, r4
		break;
  41d994:	e010      	b.n	41d9b8 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  41d996:	f004 041f 	and.w	r4, r4, #31
  41d99a:	2701      	movs	r7, #1
  41d99c:	fa07 f404 	lsl.w	r4, r7, r4
  41d9a0:	4622      	mov	r2, r4
  41d9a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41d9a6:	4b2d      	ldr	r3, [pc, #180]	; (41da5c <pio_configure_pin+0x11c>)
  41d9a8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41d9aa:	ea05 0207 	and.w	r2, r5, r7
  41d9ae:	4621      	mov	r1, r4
  41d9b0:	4630      	mov	r0, r6
  41d9b2:	4b2b      	ldr	r3, [pc, #172]	; (41da60 <pio_configure_pin+0x120>)
  41d9b4:	4798      	blx	r3
	return 1;
  41d9b6:	4638      	mov	r0, r7
}
  41d9b8:	b003      	add	sp, #12
  41d9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  41d9bc:	f004 041f 	and.w	r4, r4, #31
  41d9c0:	2701      	movs	r7, #1
  41d9c2:	fa07 f404 	lsl.w	r4, r7, r4
  41d9c6:	4622      	mov	r2, r4
  41d9c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41d9cc:	4b23      	ldr	r3, [pc, #140]	; (41da5c <pio_configure_pin+0x11c>)
  41d9ce:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41d9d0:	ea05 0207 	and.w	r2, r5, r7
  41d9d4:	4621      	mov	r1, r4
  41d9d6:	4630      	mov	r0, r6
  41d9d8:	4b21      	ldr	r3, [pc, #132]	; (41da60 <pio_configure_pin+0x120>)
  41d9da:	4798      	blx	r3
	return 1;
  41d9dc:	4638      	mov	r0, r7
		break;
  41d9de:	e7eb      	b.n	41d9b8 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  41d9e0:	f004 041f 	and.w	r4, r4, #31
  41d9e4:	2701      	movs	r7, #1
  41d9e6:	fa07 f404 	lsl.w	r4, r7, r4
  41d9ea:	4622      	mov	r2, r4
  41d9ec:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  41d9f0:	4b1a      	ldr	r3, [pc, #104]	; (41da5c <pio_configure_pin+0x11c>)
  41d9f2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41d9f4:	ea05 0207 	and.w	r2, r5, r7
  41d9f8:	4621      	mov	r1, r4
  41d9fa:	4630      	mov	r0, r6
  41d9fc:	4b18      	ldr	r3, [pc, #96]	; (41da60 <pio_configure_pin+0x120>)
  41d9fe:	4798      	blx	r3
	return 1;
  41da00:	4638      	mov	r0, r7
		break;
  41da02:	e7d9      	b.n	41d9b8 <pio_configure_pin+0x78>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  41da04:	f004 041f 	and.w	r4, r4, #31
  41da08:	2701      	movs	r7, #1
  41da0a:	fa07 f404 	lsl.w	r4, r7, r4
  41da0e:	4622      	mov	r2, r4
  41da10:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  41da14:	4b11      	ldr	r3, [pc, #68]	; (41da5c <pio_configure_pin+0x11c>)
  41da16:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  41da18:	ea05 0207 	and.w	r2, r5, r7
  41da1c:	4621      	mov	r1, r4
  41da1e:	4630      	mov	r0, r6
  41da20:	4b0f      	ldr	r3, [pc, #60]	; (41da60 <pio_configure_pin+0x120>)
  41da22:	4798      	blx	r3
	return 1;
  41da24:	4638      	mov	r0, r7
		break;
  41da26:	e7c7      	b.n	41d9b8 <pio_configure_pin+0x78>
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41da28:	f004 011f 	and.w	r1, r4, #31
  41da2c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  41da2e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  41da32:	ea05 0304 	and.w	r3, r5, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  41da36:	9300      	str	r3, [sp, #0]
  41da38:	f3c5 0380 	ubfx	r3, r5, #2, #1
  41da3c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  41da40:	bf14      	ite	ne
  41da42:	2200      	movne	r2, #0
  41da44:	2201      	moveq	r2, #1
  41da46:	fa04 f101 	lsl.w	r1, r4, r1
  41da4a:	4630      	mov	r0, r6
  41da4c:	4d05      	ldr	r5, [pc, #20]	; (41da64 <pio_configure_pin+0x124>)
  41da4e:	47a8      	blx	r5
	return 1;
  41da50:	4620      	mov	r0, r4
		break;
  41da52:	e7b1      	b.n	41d9b8 <pio_configure_pin+0x78>
  41da54:	0041d919 	.word	0x0041d919
  41da58:	0041d801 	.word	0x0041d801
  41da5c:	0041d76b 	.word	0x0041d76b
  41da60:	0041d75d 	.word	0x0041d75d
  41da64:	0041d849 	.word	0x0041d849

0041da68 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  41da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41da6a:	4604      	mov	r4, r0
  41da6c:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  41da6e:	4b11      	ldr	r3, [pc, #68]	; (41dab4 <pio_handler_process+0x4c>)
  41da70:	4798      	blx	r3
  41da72:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  41da74:	4620      	mov	r0, r4
  41da76:	4b10      	ldr	r3, [pc, #64]	; (41dab8 <pio_handler_process+0x50>)
  41da78:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  41da7a:	4005      	ands	r5, r0
  41da7c:	d001      	beq.n	41da82 <pio_handler_process+0x1a>
  41da7e:	2400      	movs	r4, #0
  41da80:	e003      	b.n	41da8a <pio_handler_process+0x22>
  41da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
  41da84:	3401      	adds	r4, #1
			if (i >= MAX_INTERRUPT_SOURCES) {
  41da86:	2c06      	cmp	r4, #6
  41da88:	d811      	bhi.n	41daae <pio_handler_process+0x46>
		while (status != 0) {
  41da8a:	b18d      	cbz	r5, 41dab0 <pio_handler_process+0x48>
			if (gs_interrupt_sources[i].id == ul_id) {
  41da8c:	0123      	lsls	r3, r4, #4
  41da8e:	4a0b      	ldr	r2, [pc, #44]	; (41dabc <pio_handler_process+0x54>)
  41da90:	58d0      	ldr	r0, [r2, r3]
  41da92:	42b0      	cmp	r0, r6
  41da94:	d1f6      	bne.n	41da84 <pio_handler_process+0x1c>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  41da96:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  41da9a:	6859      	ldr	r1, [r3, #4]
  41da9c:	420d      	tst	r5, r1
  41da9e:	d0f1      	beq.n	41da84 <pio_handler_process+0x1c>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  41daa0:	461f      	mov	r7, r3
  41daa2:	68db      	ldr	r3, [r3, #12]
  41daa4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  41daa6:	687b      	ldr	r3, [r7, #4]
  41daa8:	ea25 0503 	bic.w	r5, r5, r3
  41daac:	e7ea      	b.n	41da84 <pio_handler_process+0x1c>
  41daae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41dab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41dab2:	bf00      	nop
  41dab4:	0041d911 	.word	0x0041d911
  41dab8:	0041d915 	.word	0x0041d915
  41dabc:	204147c8 	.word	0x204147c8

0041dac0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  41dac0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  41dac2:	210a      	movs	r1, #10
  41dac4:	4801      	ldr	r0, [pc, #4]	; (41dacc <PIOA_Handler+0xc>)
  41dac6:	4b02      	ldr	r3, [pc, #8]	; (41dad0 <PIOA_Handler+0x10>)
  41dac8:	4798      	blx	r3
  41daca:	bd08      	pop	{r3, pc}
  41dacc:	400e0e00 	.word	0x400e0e00
  41dad0:	0041da69 	.word	0x0041da69

0041dad4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  41dad4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  41dad6:	210b      	movs	r1, #11
  41dad8:	4801      	ldr	r0, [pc, #4]	; (41dae0 <PIOB_Handler+0xc>)
  41dada:	4b02      	ldr	r3, [pc, #8]	; (41dae4 <PIOB_Handler+0x10>)
  41dadc:	4798      	blx	r3
  41dade:	bd08      	pop	{r3, pc}
  41dae0:	400e1000 	.word	0x400e1000
  41dae4:	0041da69 	.word	0x0041da69

0041dae8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  41dae8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  41daea:	210c      	movs	r1, #12
  41daec:	4801      	ldr	r0, [pc, #4]	; (41daf4 <PIOC_Handler+0xc>)
  41daee:	4b02      	ldr	r3, [pc, #8]	; (41daf8 <PIOC_Handler+0x10>)
  41daf0:	4798      	blx	r3
  41daf2:	bd08      	pop	{r3, pc}
  41daf4:	400e1200 	.word	0x400e1200
  41daf8:	0041da69 	.word	0x0041da69

0041dafc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  41dafc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  41dafe:	2110      	movs	r1, #16
  41db00:	4801      	ldr	r0, [pc, #4]	; (41db08 <PIOD_Handler+0xc>)
  41db02:	4b02      	ldr	r3, [pc, #8]	; (41db0c <PIOD_Handler+0x10>)
  41db04:	4798      	blx	r3
  41db06:	bd08      	pop	{r3, pc}
  41db08:	400e1400 	.word	0x400e1400
  41db0c:	0041da69 	.word	0x0041da69

0041db10 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  41db10:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  41db12:	2111      	movs	r1, #17
  41db14:	4801      	ldr	r0, [pc, #4]	; (41db1c <PIOE_Handler+0xc>)
  41db16:	4b02      	ldr	r3, [pc, #8]	; (41db20 <PIOE_Handler+0x10>)
  41db18:	4798      	blx	r3
  41db1a:	bd08      	pop	{r3, pc}
  41db1c:	400e1600 	.word	0x400e1600
  41db20:	0041da69 	.word	0x0041da69

0041db24 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  41db24:	2803      	cmp	r0, #3
  41db26:	d010      	beq.n	41db4a <pmc_mck_set_division+0x26>
  41db28:	2804      	cmp	r0, #4
  41db2a:	d011      	beq.n	41db50 <pmc_mck_set_division+0x2c>
  41db2c:	2802      	cmp	r0, #2
  41db2e:	d012      	beq.n	41db56 <pmc_mck_set_division+0x32>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  41db30:	2300      	movs	r3, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  41db32:	490a      	ldr	r1, [pc, #40]	; (41db5c <pmc_mck_set_division+0x38>)
  41db34:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  41db36:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  41db3a:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  41db3c:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  41db3e:	4b07      	ldr	r3, [pc, #28]	; (41db5c <pmc_mck_set_division+0x38>)
  41db40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  41db42:	f013 0f08 	tst.w	r3, #8
  41db46:	d0fa      	beq.n	41db3e <pmc_mck_set_division+0x1a>
}
  41db48:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  41db4a:	f44f 7340 	mov.w	r3, #768	; 0x300
			break;
  41db4e:	e7f0      	b.n	41db32 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  41db50:	f44f 7300 	mov.w	r3, #512	; 0x200
			break;
  41db54:	e7ed      	b.n	41db32 <pmc_mck_set_division+0xe>
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  41db56:	f44f 7380 	mov.w	r3, #256	; 0x100
  41db5a:	e7ea      	b.n	41db32 <pmc_mck_set_division+0xe>
  41db5c:	400e0600 	.word	0x400e0600

0041db60 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  41db60:	4a13      	ldr	r2, [pc, #76]	; (41dbb0 <pmc_switch_mck_to_pllack+0x50>)
  41db62:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41db64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  41db68:	4318      	orrs	r0, r3
  41db6a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  41db6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  41db70:	4a0f      	ldr	r2, [pc, #60]	; (41dbb0 <pmc_switch_mck_to_pllack+0x50>)
  41db72:	6e92      	ldr	r2, [r2, #104]	; 0x68
  41db74:	f012 0f08 	tst.w	r2, #8
  41db78:	d102      	bne.n	41db80 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  41db7a:	b1a3      	cbz	r3, 41dba6 <pmc_switch_mck_to_pllack+0x46>
			--ul_timeout) {
  41db7c:	3b01      	subs	r3, #1
  41db7e:	e7f7      	b.n	41db70 <pmc_switch_mck_to_pllack+0x10>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  41db80:	4a0b      	ldr	r2, [pc, #44]	; (41dbb0 <pmc_switch_mck_to_pllack+0x50>)
  41db82:	6b13      	ldr	r3, [r2, #48]	; 0x30
  41db84:	f023 0303 	bic.w	r3, r3, #3
  41db88:	f043 0302 	orr.w	r3, r3, #2
  41db8c:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  41db8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  41db92:	4a07      	ldr	r2, [pc, #28]	; (41dbb0 <pmc_switch_mck_to_pllack+0x50>)
  41db94:	6e92      	ldr	r2, [r2, #104]	; 0x68
  41db96:	f012 0f08 	tst.w	r2, #8
  41db9a:	d102      	bne.n	41dba2 <pmc_switch_mck_to_pllack+0x42>
			--ul_timeout) {
		if (ul_timeout == 0) {
  41db9c:	b12b      	cbz	r3, 41dbaa <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
  41db9e:	3b01      	subs	r3, #1
  41dba0:	e7f7      	b.n	41db92 <pmc_switch_mck_to_pllack+0x32>
			return 1;
		}
	}

	return 0;
  41dba2:	2000      	movs	r0, #0
  41dba4:	4770      	bx	lr
			return 1;
  41dba6:	2001      	movs	r0, #1
  41dba8:	4770      	bx	lr
			return 1;
  41dbaa:	2001      	movs	r0, #1
}
  41dbac:	4770      	bx	lr
  41dbae:	bf00      	nop
  41dbb0:	400e0600 	.word	0x400e0600

0041dbb4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  41dbb4:	b9a0      	cbnz	r0, 41dbe0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  41dbb6:	4a0e      	ldr	r2, [pc, #56]	; (41dbf0 <pmc_switch_mainck_to_xtal+0x3c>)
  41dbb8:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  41dbba:	4b0e      	ldr	r3, [pc, #56]	; (41dbf4 <pmc_switch_mainck_to_xtal+0x40>)
  41dbbc:	4003      	ands	r3, r0
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  41dbbe:	0209      	lsls	r1, r1, #8
  41dbc0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  41dbc2:	4319      	orrs	r1, r3
  41dbc4:	4b0c      	ldr	r3, [pc, #48]	; (41dbf8 <pmc_switch_mainck_to_xtal+0x44>)
  41dbc6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  41dbc8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  41dbca:	4b09      	ldr	r3, [pc, #36]	; (41dbf0 <pmc_switch_mainck_to_xtal+0x3c>)
  41dbcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  41dbce:	f013 0f01 	tst.w	r3, #1
  41dbd2:	d0fa      	beq.n	41dbca <pmc_switch_mainck_to_xtal+0x16>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  41dbd4:	4a06      	ldr	r2, [pc, #24]	; (41dbf0 <pmc_switch_mainck_to_xtal+0x3c>)
  41dbd6:	6a11      	ldr	r1, [r2, #32]
  41dbd8:	4b08      	ldr	r3, [pc, #32]	; (41dbfc <pmc_switch_mainck_to_xtal+0x48>)
  41dbda:	430b      	orrs	r3, r1
  41dbdc:	6213      	str	r3, [r2, #32]
  41dbde:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  41dbe0:	4903      	ldr	r1, [pc, #12]	; (41dbf0 <pmc_switch_mainck_to_xtal+0x3c>)
  41dbe2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  41dbe4:	4a06      	ldr	r2, [pc, #24]	; (41dc00 <pmc_switch_mainck_to_xtal+0x4c>)
  41dbe6:	401a      	ands	r2, r3
  41dbe8:	4b06      	ldr	r3, [pc, #24]	; (41dc04 <pmc_switch_mainck_to_xtal+0x50>)
  41dbea:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  41dbec:	620b      	str	r3, [r1, #32]
  41dbee:	4770      	bx	lr
  41dbf0:	400e0600 	.word	0x400e0600
  41dbf4:	ffc8fffc 	.word	0xffc8fffc
  41dbf8:	00370001 	.word	0x00370001
  41dbfc:	01370000 	.word	0x01370000
  41dc00:	fec8fffc 	.word	0xfec8fffc
  41dc04:	01370002 	.word	0x01370002

0041dc08 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  41dc08:	4b02      	ldr	r3, [pc, #8]	; (41dc14 <pmc_osc_is_ready_mainck+0xc>)
  41dc0a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  41dc0c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  41dc10:	4770      	bx	lr
  41dc12:	bf00      	nop
  41dc14:	400e0600 	.word	0x400e0600

0041dc18 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  41dc18:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  41dc1c:	4b01      	ldr	r3, [pc, #4]	; (41dc24 <pmc_disable_pllack+0xc>)
  41dc1e:	629a      	str	r2, [r3, #40]	; 0x28
  41dc20:	4770      	bx	lr
  41dc22:	bf00      	nop
  41dc24:	400e0600 	.word	0x400e0600

0041dc28 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  41dc28:	4b02      	ldr	r3, [pc, #8]	; (41dc34 <pmc_is_locked_pllack+0xc>)
  41dc2a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  41dc2c:	f000 0002 	and.w	r0, r0, #2
  41dc30:	4770      	bx	lr
  41dc32:	bf00      	nop
  41dc34:	400e0600 	.word	0x400e0600

0041dc38 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  41dc38:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  41dc3c:	4b05      	ldr	r3, [pc, #20]	; (41dc54 <pmc_enable_periph_clk+0x1c>)
  41dc3e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  41dc42:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  41dc46:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  41dc4a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  41dc4e:	2000      	movs	r0, #0
  41dc50:	4770      	bx	lr
  41dc52:	bf00      	nop
  41dc54:	400e0600 	.word	0x400e0600

0041dc58 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  41dc58:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  41dc5a:	4b07      	ldr	r3, [pc, #28]	; (41dc78 <spi_enable_clock+0x20>)
  41dc5c:	4298      	cmp	r0, r3
  41dc5e:	d003      	beq.n	41dc68 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  41dc60:	4b06      	ldr	r3, [pc, #24]	; (41dc7c <spi_enable_clock+0x24>)
  41dc62:	4298      	cmp	r0, r3
  41dc64:	d004      	beq.n	41dc70 <spi_enable_clock+0x18>
  41dc66:	bd08      	pop	{r3, pc}
  41dc68:	2015      	movs	r0, #21
  41dc6a:	4b05      	ldr	r3, [pc, #20]	; (41dc80 <spi_enable_clock+0x28>)
  41dc6c:	4798      	blx	r3
  41dc6e:	bd08      	pop	{r3, pc}
  41dc70:	202a      	movs	r0, #42	; 0x2a
  41dc72:	4b03      	ldr	r3, [pc, #12]	; (41dc80 <spi_enable_clock+0x28>)
  41dc74:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  41dc76:	e7f6      	b.n	41dc66 <spi_enable_clock+0xe>
  41dc78:	40008000 	.word	0x40008000
  41dc7c:	40058000 	.word	0x40058000
  41dc80:	0041dc39 	.word	0x0041dc39

0041dc84 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  41dc84:	6843      	ldr	r3, [r0, #4]
  41dc86:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  41dc8a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  41dc8c:	6843      	ldr	r3, [r0, #4]
  41dc8e:	0409      	lsls	r1, r1, #16
  41dc90:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  41dc94:	430b      	orrs	r3, r1
  41dc96:	6043      	str	r3, [r0, #4]
  41dc98:	4770      	bx	lr

0041dc9a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  41dc9a:	6843      	ldr	r3, [r0, #4]
  41dc9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  41dca0:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  41dca2:	6843      	ldr	r3, [r0, #4]
  41dca4:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  41dca8:	6041      	str	r1, [r0, #4]
  41dcaa:	4770      	bx	lr

0041dcac <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  41dcac:	b93a      	cbnz	r2, 41dcbe <spi_set_clock_polarity+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  41dcae:	310c      	adds	r1, #12
  41dcb0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dcb4:	f023 0301 	bic.w	r3, r3, #1
  41dcb8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dcbc:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  41dcbe:	310c      	adds	r1, #12
  41dcc0:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dcc4:	f043 0301 	orr.w	r3, r3, #1
  41dcc8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dccc:	4770      	bx	lr

0041dcce <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  41dcce:	b93a      	cbnz	r2, 41dce0 <spi_set_clock_phase+0x12>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  41dcd0:	310c      	adds	r1, #12
  41dcd2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dcd6:	f023 0302 	bic.w	r3, r3, #2
  41dcda:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dcde:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  41dce0:	310c      	adds	r1, #12
  41dce2:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dce6:	f043 0302 	orr.w	r3, r3, #2
  41dcea:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dcee:	4770      	bx	lr

0041dcf0 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  41dcf0:	2a04      	cmp	r2, #4
  41dcf2:	d003      	beq.n	41dcfc <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  41dcf4:	b182      	cbz	r2, 41dd18 <spi_configure_cs_behavior+0x28>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  41dcf6:	2a08      	cmp	r2, #8
  41dcf8:	d01c      	beq.n	41dd34 <spi_configure_cs_behavior+0x44>
  41dcfa:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  41dcfc:	310c      	adds	r1, #12
  41dcfe:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd02:	f023 0308 	bic.w	r3, r3, #8
  41dd06:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  41dd0a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd0e:	f043 0304 	orr.w	r3, r3, #4
  41dd12:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dd16:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  41dd18:	310c      	adds	r1, #12
  41dd1a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd1e:	f023 0308 	bic.w	r3, r3, #8
  41dd22:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  41dd26:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd2a:	f023 0304 	bic.w	r3, r3, #4
  41dd2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  41dd32:	4770      	bx	lr
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  41dd34:	310c      	adds	r1, #12
  41dd36:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd3a:	f043 0308 	orr.w	r3, r3, #8
  41dd3e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	}
}
  41dd42:	e7da      	b.n	41dcfa <spi_configure_cs_behavior+0xa>

0041dd44 <spi_set_bits_per_transfer>:
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  41dd44:	310c      	adds	r1, #12
  41dd46:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  41dd4e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  41dd52:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd56:	431a      	orrs	r2, r3
  41dd58:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  41dd5c:	4770      	bx	lr

0041dd5e <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  41dd5e:	4401      	add	r1, r0
  41dd60:	3901      	subs	r1, #1
  41dd62:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  41dd66:	1e43      	subs	r3, r0, #1
  41dd68:	2bfe      	cmp	r3, #254	; 0xfe
  41dd6a:	d801      	bhi.n	41dd70 <spi_calc_baudrate_div+0x12>
		return -1;
	}

	return baud_div;
  41dd6c:	b200      	sxth	r0, r0
  41dd6e:	4770      	bx	lr
		return -1;
  41dd70:	f04f 30ff 	mov.w	r0, #4294967295
}
  41dd74:	4770      	bx	lr

0041dd76 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  41dd76:	b192      	cbz	r2, 41dd9e <spi_set_baudrate_div+0x28>
{
  41dd78:	b410      	push	{r4}
  41dd7a:	4614      	mov	r4, r2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  41dd7c:	310c      	adds	r1, #12
  41dd7e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  41dd82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  41dd86:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  41dd8a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  41dd8e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  41dd92:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    return 0;
  41dd96:	2000      	movs	r0, #0
}
  41dd98:	f85d 4b04 	ldr.w	r4, [sp], #4
  41dd9c:	4770      	bx	lr
        return -1;
  41dd9e:	f04f 30ff 	mov.w	r0, #4294967295
  41dda2:	4770      	bx	lr

0041dda4 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  41dda4:	b410      	push	{r4}
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  41dda6:	310c      	adds	r1, #12
  41dda8:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  41ddac:	b2a4      	uxth	r4, r4
  41ddae:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  41ddb2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
  41ddb6:	061b      	lsls	r3, r3, #24
  41ddb8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  41ddbc:	4314      	orrs	r4, r2
  41ddbe:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
  41ddc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  41ddc6:	4770      	bx	lr

0041ddc8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  41ddc8:	6943      	ldr	r3, [r0, #20]
  41ddca:	f013 0f02 	tst.w	r3, #2
  41ddce:	d002      	beq.n	41ddd6 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  41ddd0:	61c1      	str	r1, [r0, #28]
	return 0;
  41ddd2:	2000      	movs	r0, #0
  41ddd4:	4770      	bx	lr
		return 1;
  41ddd6:	2001      	movs	r0, #1
}
  41ddd8:	4770      	bx	lr

0041ddda <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  41ddda:	6943      	ldr	r3, [r0, #20]
  41dddc:	f013 0f01 	tst.w	r3, #1
  41dde0:	d003      	beq.n	41ddea <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  41dde2:	6983      	ldr	r3, [r0, #24]
  41dde4:	700b      	strb	r3, [r1, #0]
	return 0;
  41dde6:	2000      	movs	r0, #0
  41dde8:	4770      	bx	lr
		return 1;
  41ddea:	2001      	movs	r0, #1
}
  41ddec:	4770      	bx	lr

0041ddee <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  41ddee:	b430      	push	{r4, r5}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  41ddf0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  41ddf4:	d317      	bcc.n	41de26 <usart_set_async_baudrate+0x38>
		over = HIGH_FRQ_SAMPLE_DIV;
  41ddf6:	2410      	movs	r4, #16
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  41ddf8:	fb01 f104 	mul.w	r1, r1, r4
  41ddfc:	084b      	lsrs	r3, r1, #1
  41ddfe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  41de02:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  41de06:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  41de08:	1e5d      	subs	r5, r3, #1
  41de0a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  41de0e:	428d      	cmp	r5, r1
  41de10:	d810      	bhi.n	41de34 <usart_set_async_baudrate+0x46>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
  41de12:	2c08      	cmp	r4, #8
  41de14:	d009      	beq.n	41de2a <usart_set_async_baudrate+0x3c>
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  41de16:	0412      	lsls	r2, r2, #16
  41de18:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  41de1c:	431a      	orrs	r2, r3
  41de1e:	6202      	str	r2, [r0, #32]

	return 0;
  41de20:	2000      	movs	r0, #0
}
  41de22:	bc30      	pop	{r4, r5}
  41de24:	4770      	bx	lr
		over = LOW_FRQ_SAMPLE_DIV;
  41de26:	2408      	movs	r4, #8
  41de28:	e7e6      	b.n	41ddf8 <usart_set_async_baudrate+0xa>
		p_usart->US_MR |= US_MR_OVER;
  41de2a:	6841      	ldr	r1, [r0, #4]
  41de2c:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  41de30:	6041      	str	r1, [r0, #4]
  41de32:	e7f0      	b.n	41de16 <usart_set_async_baudrate+0x28>
		return 1;
  41de34:	2001      	movs	r0, #1
  41de36:	e7f4      	b.n	41de22 <usart_set_async_baudrate+0x34>

0041de38 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
  41de38:	2340      	movs	r3, #64	; 0x40
  41de3a:	6003      	str	r3, [r0, #0]
  41de3c:	4770      	bx	lr

0041de3e <usart_reset_tx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  41de3e:	2388      	movs	r3, #136	; 0x88
  41de40:	6003      	str	r3, [r0, #0]
  41de42:	4770      	bx	lr

0041de44 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
  41de44:	2310      	movs	r3, #16
  41de46:	6003      	str	r3, [r0, #0]
  41de48:	4770      	bx	lr

0041de4a <usart_reset_rx>:
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  41de4a:	2324      	movs	r3, #36	; 0x24
  41de4c:	6003      	str	r3, [r0, #0]
  41de4e:	4770      	bx	lr

0041de50 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
  41de50:	f44f 7380 	mov.w	r3, #256	; 0x100
  41de54:	6003      	str	r3, [r0, #0]
  41de56:	4770      	bx	lr

0041de58 <usart_drive_RTS_pin_high>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
  41de58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  41de5c:	6003      	str	r3, [r0, #0]
  41de5e:	4770      	bx	lr

0041de60 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  41de60:	6943      	ldr	r3, [r0, #20]
  41de62:	f013 0f02 	tst.w	r3, #2
  41de66:	d004      	beq.n	41de72 <usart_write+0x12>
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  41de68:	f3c1 0108 	ubfx	r1, r1, #0, #9
  41de6c:	61c1      	str	r1, [r0, #28]
	return 0;
  41de6e:	2000      	movs	r0, #0
  41de70:	4770      	bx	lr
		return 1;
  41de72:	2001      	movs	r0, #1
}
  41de74:	4770      	bx	lr

0041de76 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  41de76:	6943      	ldr	r3, [r0, #20]
  41de78:	f013 0f01 	tst.w	r3, #1
  41de7c:	d005      	beq.n	41de8a <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  41de7e:	6983      	ldr	r3, [r0, #24]
  41de80:	f3c3 0308 	ubfx	r3, r3, #0, #9
  41de84:	600b      	str	r3, [r1, #0]

	return 0;
  41de86:	2000      	movs	r0, #0
  41de88:	4770      	bx	lr
		return 1;
  41de8a:	2001      	movs	r0, #1
}
  41de8c:	4770      	bx	lr
	...

0041de90 <usart_disable_writeprotect>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  41de90:	4b01      	ldr	r3, [pc, #4]	; (41de98 <usart_disable_writeprotect+0x8>)
  41de92:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  41de96:	4770      	bx	lr
  41de98:	55534100 	.word	0x55534100

0041de9c <usart_reset>:
{
  41de9c:	b510      	push	{r4, lr}
  41de9e:	4604      	mov	r4, r0
	usart_disable_writeprotect(p_usart);
  41dea0:	4b09      	ldr	r3, [pc, #36]	; (41dec8 <usart_reset+0x2c>)
  41dea2:	4798      	blx	r3
	p_usart->US_MR = 0;
  41dea4:	2300      	movs	r3, #0
  41dea6:	6063      	str	r3, [r4, #4]
	p_usart->US_RTOR = 0;
  41dea8:	6263      	str	r3, [r4, #36]	; 0x24
	p_usart->US_TTGR = 0;
  41deaa:	62a3      	str	r3, [r4, #40]	; 0x28
	usart_reset_tx(p_usart);
  41deac:	4620      	mov	r0, r4
  41deae:	4b07      	ldr	r3, [pc, #28]	; (41decc <usart_reset+0x30>)
  41deb0:	4798      	blx	r3
	usart_reset_rx(p_usart);
  41deb2:	4620      	mov	r0, r4
  41deb4:	4b06      	ldr	r3, [pc, #24]	; (41ded0 <usart_reset+0x34>)
  41deb6:	4798      	blx	r3
	usart_reset_status(p_usart);
  41deb8:	4620      	mov	r0, r4
  41deba:	4b06      	ldr	r3, [pc, #24]	; (41ded4 <usart_reset+0x38>)
  41debc:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
  41debe:	4620      	mov	r0, r4
  41dec0:	4b05      	ldr	r3, [pc, #20]	; (41ded8 <usart_reset+0x3c>)
  41dec2:	4798      	blx	r3
  41dec4:	bd10      	pop	{r4, pc}
  41dec6:	bf00      	nop
  41dec8:	0041de91 	.word	0x0041de91
  41decc:	0041de3f 	.word	0x0041de3f
  41ded0:	0041de4b 	.word	0x0041de4b
  41ded4:	0041de51 	.word	0x0041de51
  41ded8:	0041de59 	.word	0x0041de59

0041dedc <usart_init_rs232>:
{
  41dedc:	b570      	push	{r4, r5, r6, lr}
  41dede:	4605      	mov	r5, r0
  41dee0:	460c      	mov	r4, r1
  41dee2:	4616      	mov	r6, r2
	usart_reset(p_usart);
  41dee4:	4b10      	ldr	r3, [pc, #64]	; (41df28 <usart_init_rs232+0x4c>)
  41dee6:	4798      	blx	r3
	ul_reg_val = 0;
  41dee8:	2200      	movs	r2, #0
  41deea:	4b10      	ldr	r3, [pc, #64]	; (41df2c <usart_init_rs232+0x50>)
  41deec:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  41deee:	b1b4      	cbz	r4, 41df1e <usart_init_rs232+0x42>
  41def0:	4632      	mov	r2, r6
  41def2:	6821      	ldr	r1, [r4, #0]
  41def4:	4628      	mov	r0, r5
  41def6:	4b0e      	ldr	r3, [pc, #56]	; (41df30 <usart_init_rs232+0x54>)
  41def8:	4798      	blx	r3
  41defa:	4602      	mov	r2, r0
  41defc:	b988      	cbnz	r0, 41df22 <usart_init_rs232+0x46>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41defe:	6863      	ldr	r3, [r4, #4]
  41df00:	68a1      	ldr	r1, [r4, #8]
  41df02:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  41df04:	6921      	ldr	r1, [r4, #16]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41df06:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  41df08:	68e1      	ldr	r1, [r4, #12]
  41df0a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  41df0c:	4907      	ldr	r1, [pc, #28]	; (41df2c <usart_init_rs232+0x50>)
  41df0e:	6808      	ldr	r0, [r1, #0]
  41df10:	4303      	orrs	r3, r0
  41df12:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  41df14:	6869      	ldr	r1, [r5, #4]
  41df16:	430b      	orrs	r3, r1
  41df18:	606b      	str	r3, [r5, #4]
}
  41df1a:	4610      	mov	r0, r2
  41df1c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  41df1e:	2201      	movs	r2, #1
  41df20:	e7fb      	b.n	41df1a <usart_init_rs232+0x3e>
  41df22:	2201      	movs	r2, #1
  41df24:	e7f9      	b.n	41df1a <usart_init_rs232+0x3e>
  41df26:	bf00      	nop
  41df28:	0041de9d 	.word	0x0041de9d
  41df2c:	20414838 	.word	0x20414838
  41df30:	0041ddef 	.word	0x0041ddef

0041df34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  41df34:	e7fe      	b.n	41df34 <Dummy_Handler>
	...

0041df38 <Reset_Handler>:
{
  41df38:	b500      	push	{lr}
  41df3a:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  41df3c:	4b1e      	ldr	r3, [pc, #120]	; (41dfb8 <Reset_Handler+0x80>)
  41df3e:	4a1f      	ldr	r2, [pc, #124]	; (41dfbc <Reset_Handler+0x84>)
  41df40:	429a      	cmp	r2, r3
  41df42:	d009      	beq.n	41df58 <Reset_Handler+0x20>
  41df44:	4b1c      	ldr	r3, [pc, #112]	; (41dfb8 <Reset_Handler+0x80>)
  41df46:	4a1d      	ldr	r2, [pc, #116]	; (41dfbc <Reset_Handler+0x84>)
  41df48:	e003      	b.n	41df52 <Reset_Handler+0x1a>
                        *pDest++ = *pSrc++;
  41df4a:	6811      	ldr	r1, [r2, #0]
  41df4c:	6019      	str	r1, [r3, #0]
  41df4e:	3304      	adds	r3, #4
  41df50:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
  41df52:	491b      	ldr	r1, [pc, #108]	; (41dfc0 <Reset_Handler+0x88>)
  41df54:	428b      	cmp	r3, r1
  41df56:	d3f8      	bcc.n	41df4a <Reset_Handler+0x12>
                        *pDest++ = *pSrc++;
  41df58:	4b1a      	ldr	r3, [pc, #104]	; (41dfc4 <Reset_Handler+0x8c>)
  41df5a:	e002      	b.n	41df62 <Reset_Handler+0x2a>
                *pDest++ = 0;
  41df5c:	2200      	movs	r2, #0
  41df5e:	601a      	str	r2, [r3, #0]
  41df60:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
  41df62:	4a19      	ldr	r2, [pc, #100]	; (41dfc8 <Reset_Handler+0x90>)
  41df64:	4293      	cmp	r3, r2
  41df66:	d3f9      	bcc.n	41df5c <Reset_Handler+0x24>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  41df68:	4a18      	ldr	r2, [pc, #96]	; (41dfcc <Reset_Handler+0x94>)
  41df6a:	4b19      	ldr	r3, [pc, #100]	; (41dfd0 <Reset_Handler+0x98>)
  41df6c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  41df70:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  41df72:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
  41df76:	fab3 f383 	clz	r3, r3
  41df7a:	095b      	lsrs	r3, r3, #5
  41df7c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  41df7e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  41df80:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  41df84:	2200      	movs	r2, #0
  41df86:	4b13      	ldr	r3, [pc, #76]	; (41dfd4 <Reset_Handler+0x9c>)
  41df88:	701a      	strb	r2, [r3, #0]
	return flags;
  41df8a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  41df8c:	4a12      	ldr	r2, [pc, #72]	; (41dfd8 <Reset_Handler+0xa0>)
  41df8e:	6813      	ldr	r3, [r2, #0]
  41df90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  41df94:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  41df96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  41df9a:	f3bf 8f6f 	isb	sy
	if (cpu_irq_is_enabled_flags(flags))
  41df9e:	b129      	cbz	r1, 41dfac <Reset_Handler+0x74>
		cpu_irq_enable();
  41dfa0:	2201      	movs	r2, #1
  41dfa2:	4b0c      	ldr	r3, [pc, #48]	; (41dfd4 <Reset_Handler+0x9c>)
  41dfa4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  41dfa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  41dfaa:	b662      	cpsie	i
        __libc_init_array();
  41dfac:	4b0b      	ldr	r3, [pc, #44]	; (41dfdc <Reset_Handler+0xa4>)
  41dfae:	4798      	blx	r3
        main();
  41dfb0:	4b0b      	ldr	r3, [pc, #44]	; (41dfe0 <Reset_Handler+0xa8>)
  41dfb2:	4798      	blx	r3
  41dfb4:	e7fe      	b.n	41dfb4 <Reset_Handler+0x7c>
  41dfb6:	bf00      	nop
  41dfb8:	20400000 	.word	0x20400000
  41dfbc:	00428e28 	.word	0x00428e28
  41dfc0:	20400a10 	.word	0x20400a10
  41dfc4:	20400a10 	.word	0x20400a10
  41dfc8:	2043a330 	.word	0x2043a330
  41dfcc:	e000ed00 	.word	0xe000ed00
  41dfd0:	00400000 	.word	0x00400000
  41dfd4:	20400058 	.word	0x20400058
  41dfd8:	e000ed88 	.word	0xe000ed88
  41dfdc:	0041f325 	.word	0x0041f325
  41dfe0:	0041e5d1 	.word	0x0041e5d1

0041dfe4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  41dfe4:	4b3c      	ldr	r3, [pc, #240]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41dfe8:	f003 0303 	and.w	r3, r3, #3
  41dfec:	2b01      	cmp	r3, #1
  41dfee:	d020      	beq.n	41e032 <SystemCoreClockUpdate+0x4e>
  41dff0:	b183      	cbz	r3, 41e014 <SystemCoreClockUpdate+0x30>
  41dff2:	2b02      	cmp	r3, #2
  41dff4:	d039      	beq.n	41e06a <SystemCoreClockUpdate+0x86>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  41dff6:	4b38      	ldr	r3, [pc, #224]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41dff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41dffa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41dffe:	2b70      	cmp	r3, #112	; 0x70
  41e000:	d062      	beq.n	41e0c8 <SystemCoreClockUpdate+0xe4>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  41e002:	4b35      	ldr	r3, [pc, #212]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  41e006:	f3c2 1202 	ubfx	r2, r2, #4, #3
  41e00a:	4934      	ldr	r1, [pc, #208]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e00c:	680b      	ldr	r3, [r1, #0]
  41e00e:	40d3      	lsrs	r3, r2
  41e010:	600b      	str	r3, [r1, #0]
  41e012:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  41e014:	4b32      	ldr	r3, [pc, #200]	; (41e0e0 <SystemCoreClockUpdate+0xfc>)
  41e016:	695b      	ldr	r3, [r3, #20]
  41e018:	f013 0f80 	tst.w	r3, #128	; 0x80
  41e01c:	d004      	beq.n	41e028 <SystemCoreClockUpdate+0x44>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  41e01e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41e022:	4b2e      	ldr	r3, [pc, #184]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e024:	601a      	str	r2, [r3, #0]
  41e026:	e7e6      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  41e028:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  41e02c:	4b2b      	ldr	r3, [pc, #172]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e02e:	601a      	str	r2, [r3, #0]
  41e030:	e7e1      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  41e032:	4b29      	ldr	r3, [pc, #164]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e034:	6a1b      	ldr	r3, [r3, #32]
  41e036:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  41e03a:	d003      	beq.n	41e044 <SystemCoreClockUpdate+0x60>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  41e03c:	4a29      	ldr	r2, [pc, #164]	; (41e0e4 <SystemCoreClockUpdate+0x100>)
  41e03e:	4b27      	ldr	r3, [pc, #156]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e040:	601a      	str	r2, [r3, #0]
  41e042:	e7d8      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  41e044:	4a28      	ldr	r2, [pc, #160]	; (41e0e8 <SystemCoreClockUpdate+0x104>)
  41e046:	4b25      	ldr	r3, [pc, #148]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e048:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  41e04a:	4b23      	ldr	r3, [pc, #140]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e04c:	6a1b      	ldr	r3, [r3, #32]
  41e04e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41e052:	2b10      	cmp	r3, #16
  41e054:	d005      	beq.n	41e062 <SystemCoreClockUpdate+0x7e>
  41e056:	2b20      	cmp	r3, #32
  41e058:	d1cd      	bne.n	41dff6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  41e05a:	4a22      	ldr	r2, [pc, #136]	; (41e0e4 <SystemCoreClockUpdate+0x100>)
  41e05c:	4b1f      	ldr	r3, [pc, #124]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e05e:	601a      	str	r2, [r3, #0]
          break;
  41e060:	e7c9      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  41e062:	4a22      	ldr	r2, [pc, #136]	; (41e0ec <SystemCoreClockUpdate+0x108>)
  41e064:	4b1d      	ldr	r3, [pc, #116]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e066:	601a      	str	r2, [r3, #0]
          break;
  41e068:	e7c5      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  41e06a:	4b1b      	ldr	r3, [pc, #108]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e06c:	6a1b      	ldr	r3, [r3, #32]
  41e06e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  41e072:	d016      	beq.n	41e0a2 <SystemCoreClockUpdate+0xbe>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  41e074:	4a1b      	ldr	r2, [pc, #108]	; (41e0e4 <SystemCoreClockUpdate+0x100>)
  41e076:	4b19      	ldr	r3, [pc, #100]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e078:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  41e07a:	4b17      	ldr	r3, [pc, #92]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  41e07e:	f003 0303 	and.w	r3, r3, #3
  41e082:	2b02      	cmp	r3, #2
  41e084:	d1b7      	bne.n	41dff6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  41e086:	4814      	ldr	r0, [pc, #80]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e088:	6a82      	ldr	r2, [r0, #40]	; 0x28
  41e08a:	f3c2 420a 	ubfx	r2, r2, #16, #11
  41e08e:	4913      	ldr	r1, [pc, #76]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e090:	680b      	ldr	r3, [r1, #0]
  41e092:	fb02 3303 	mla	r3, r2, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  41e096:	6a82      	ldr	r2, [r0, #40]	; 0x28
  41e098:	b2d2      	uxtb	r2, r2
  41e09a:	fbb3 f3f2 	udiv	r3, r3, r2
  41e09e:	600b      	str	r3, [r1, #0]
  41e0a0:	e7a9      	b.n	41dff6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  41e0a2:	4a11      	ldr	r2, [pc, #68]	; (41e0e8 <SystemCoreClockUpdate+0x104>)
  41e0a4:	4b0d      	ldr	r3, [pc, #52]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e0a6:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  41e0a8:	4b0b      	ldr	r3, [pc, #44]	; (41e0d8 <SystemCoreClockUpdate+0xf4>)
  41e0aa:	6a1b      	ldr	r3, [r3, #32]
  41e0ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  41e0b0:	2b10      	cmp	r3, #16
  41e0b2:	d005      	beq.n	41e0c0 <SystemCoreClockUpdate+0xdc>
  41e0b4:	2b20      	cmp	r3, #32
  41e0b6:	d1e0      	bne.n	41e07a <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 3U;
  41e0b8:	4a0a      	ldr	r2, [pc, #40]	; (41e0e4 <SystemCoreClockUpdate+0x100>)
  41e0ba:	4b08      	ldr	r3, [pc, #32]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e0bc:	601a      	str	r2, [r3, #0]
          break;
  41e0be:	e7dc      	b.n	41e07a <SystemCoreClockUpdate+0x96>
            SystemCoreClock *= 2U;
  41e0c0:	4a0a      	ldr	r2, [pc, #40]	; (41e0ec <SystemCoreClockUpdate+0x108>)
  41e0c2:	4b06      	ldr	r3, [pc, #24]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e0c4:	601a      	str	r2, [r3, #0]
          break;
  41e0c6:	e7d8      	b.n	41e07a <SystemCoreClockUpdate+0x96>
    SystemCoreClock /= 3U;
  41e0c8:	4a04      	ldr	r2, [pc, #16]	; (41e0dc <SystemCoreClockUpdate+0xf8>)
  41e0ca:	6813      	ldr	r3, [r2, #0]
  41e0cc:	4908      	ldr	r1, [pc, #32]	; (41e0f0 <SystemCoreClockUpdate+0x10c>)
  41e0ce:	fba1 1303 	umull	r1, r3, r1, r3
  41e0d2:	085b      	lsrs	r3, r3, #1
  41e0d4:	6013      	str	r3, [r2, #0]
  41e0d6:	4770      	bx	lr
  41e0d8:	400e0600 	.word	0x400e0600
  41e0dc:	2040005c 	.word	0x2040005c
  41e0e0:	400e1810 	.word	0x400e1810
  41e0e4:	00b71b00 	.word	0x00b71b00
  41e0e8:	003d0900 	.word	0x003d0900
  41e0ec:	007a1200 	.word	0x007a1200
  41e0f0:	aaaaaaab 	.word	0xaaaaaaab

0041e0f4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  41e0f4:	4b17      	ldr	r3, [pc, #92]	; (41e154 <system_init_flash+0x60>)
  41e0f6:	4298      	cmp	r0, r3
  41e0f8:	d912      	bls.n	41e120 <system_init_flash+0x2c>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  41e0fa:	4b17      	ldr	r3, [pc, #92]	; (41e158 <system_init_flash+0x64>)
  41e0fc:	4298      	cmp	r0, r3
  41e0fe:	d914      	bls.n	41e12a <system_init_flash+0x36>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  41e100:	4b16      	ldr	r3, [pc, #88]	; (41e15c <system_init_flash+0x68>)
  41e102:	4298      	cmp	r0, r3
  41e104:	d915      	bls.n	41e132 <system_init_flash+0x3e>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  41e106:	4b16      	ldr	r3, [pc, #88]	; (41e160 <system_init_flash+0x6c>)
  41e108:	4298      	cmp	r0, r3
  41e10a:	d916      	bls.n	41e13a <system_init_flash+0x46>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  41e10c:	4b15      	ldr	r3, [pc, #84]	; (41e164 <system_init_flash+0x70>)
  41e10e:	4298      	cmp	r0, r3
  41e110:	d917      	bls.n	41e142 <system_init_flash+0x4e>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  41e112:	4b15      	ldr	r3, [pc, #84]	; (41e168 <system_init_flash+0x74>)
  41e114:	4298      	cmp	r0, r3
  41e116:	d919      	bls.n	41e14c <system_init_flash+0x58>
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  41e118:	4a14      	ldr	r2, [pc, #80]	; (41e16c <system_init_flash+0x78>)
  41e11a:	4b15      	ldr	r3, [pc, #84]	; (41e170 <system_init_flash+0x7c>)
  41e11c:	601a      	str	r2, [r3, #0]
  41e11e:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  41e120:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  41e124:	4b12      	ldr	r3, [pc, #72]	; (41e170 <system_init_flash+0x7c>)
  41e126:	601a      	str	r2, [r3, #0]
  41e128:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  41e12a:	4a12      	ldr	r2, [pc, #72]	; (41e174 <system_init_flash+0x80>)
  41e12c:	4b10      	ldr	r3, [pc, #64]	; (41e170 <system_init_flash+0x7c>)
  41e12e:	601a      	str	r2, [r3, #0]
  41e130:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  41e132:	4a11      	ldr	r2, [pc, #68]	; (41e178 <system_init_flash+0x84>)
  41e134:	4b0e      	ldr	r3, [pc, #56]	; (41e170 <system_init_flash+0x7c>)
  41e136:	601a      	str	r2, [r3, #0]
  41e138:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  41e13a:	4a10      	ldr	r2, [pc, #64]	; (41e17c <system_init_flash+0x88>)
  41e13c:	4b0c      	ldr	r3, [pc, #48]	; (41e170 <system_init_flash+0x7c>)
  41e13e:	601a      	str	r2, [r3, #0]
  41e140:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  41e142:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  41e146:	4b0a      	ldr	r3, [pc, #40]	; (41e170 <system_init_flash+0x7c>)
  41e148:	601a      	str	r2, [r3, #0]
  41e14a:	4770      	bx	lr
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  41e14c:	4a0c      	ldr	r2, [pc, #48]	; (41e180 <system_init_flash+0x8c>)
  41e14e:	4b08      	ldr	r3, [pc, #32]	; (41e170 <system_init_flash+0x7c>)
  41e150:	601a      	str	r2, [r3, #0]
  41e152:	4770      	bx	lr
  41e154:	015ef3bf 	.word	0x015ef3bf
  41e158:	02bde77f 	.word	0x02bde77f
  41e15c:	041cdb3f 	.word	0x041cdb3f
  41e160:	057bceff 	.word	0x057bceff
  41e164:	06dac2bf 	.word	0x06dac2bf
  41e168:	0839b67f 	.word	0x0839b67f
  41e16c:	04000600 	.word	0x04000600
  41e170:	400e0c00 	.word	0x400e0c00
  41e174:	04000100 	.word	0x04000100
  41e178:	04000200 	.word	0x04000200
  41e17c:	04000300 	.word	0x04000300
  41e180:	04000500 	.word	0x04000500

0041e184 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  41e184:	4b0a      	ldr	r3, [pc, #40]	; (41e1b0 <_sbrk+0x2c>)
  41e186:	681b      	ldr	r3, [r3, #0]
  41e188:	b153      	cbz	r3, 41e1a0 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  41e18a:	4b09      	ldr	r3, [pc, #36]	; (41e1b0 <_sbrk+0x2c>)
  41e18c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  41e18e:	181a      	adds	r2, r3, r0
  41e190:	4908      	ldr	r1, [pc, #32]	; (41e1b4 <_sbrk+0x30>)
  41e192:	4291      	cmp	r1, r2
  41e194:	db08      	blt.n	41e1a8 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  41e196:	4610      	mov	r0, r2
  41e198:	4a05      	ldr	r2, [pc, #20]	; (41e1b0 <_sbrk+0x2c>)
  41e19a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  41e19c:	4618      	mov	r0, r3
  41e19e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  41e1a0:	4a05      	ldr	r2, [pc, #20]	; (41e1b8 <_sbrk+0x34>)
  41e1a2:	4b03      	ldr	r3, [pc, #12]	; (41e1b0 <_sbrk+0x2c>)
  41e1a4:	601a      	str	r2, [r3, #0]
  41e1a6:	e7f0      	b.n	41e18a <_sbrk+0x6>
		return (caddr_t) -1;	
  41e1a8:	f04f 30ff 	mov.w	r0, #4294967295
}
  41e1ac:	4770      	bx	lr
  41e1ae:	bf00      	nop
  41e1b0:	2041483c 	.word	0x2041483c
  41e1b4:	2045fffc 	.word	0x2045fffc
  41e1b8:	2043c530 	.word	0x2043c530

0041e1bc <_close>:
}

extern int _close(int file)
{
	return -1;
}
  41e1bc:	f04f 30ff 	mov.w	r0, #4294967295
  41e1c0:	4770      	bx	lr

0041e1c2 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  41e1c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  41e1c6:	604b      	str	r3, [r1, #4]

	return 0;
}
  41e1c8:	2000      	movs	r0, #0
  41e1ca:	4770      	bx	lr

0041e1cc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  41e1cc:	2001      	movs	r0, #1
  41e1ce:	4770      	bx	lr

0041e1d0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  41e1d0:	2000      	movs	r0, #0
  41e1d2:	4770      	bx	lr

0041e1d4 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  41e1d4:	b570      	push	{r4, r5, r6, lr}
  41e1d6:	4605      	mov	r5, r0
  41e1d8:	460c      	mov	r4, r1
  41e1da:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  41e1dc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  41e1e0:	f9b4 0000 	ldrsh.w	r0, [r4]
  41e1e4:	4b0d      	ldr	r3, [pc, #52]	; (41e21c <my_flush_cb+0x48>)
  41e1e6:	4798      	blx	r3
  41e1e8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  41e1ec:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  41e1f0:	4b0b      	ldr	r3, [pc, #44]	; (41e220 <my_flush_cb+0x4c>)
  41e1f2:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  41e1f4:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41e1f8:	f9b4 1000 	ldrsh.w	r1, [r4]
  41e1fc:	1a5b      	subs	r3, r3, r1
  41e1fe:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  41e202:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  41e206:	1a89      	subs	r1, r1, r2
  41e208:	fb01 f103 	mul.w	r1, r1, r3
  41e20c:	4630      	mov	r0, r6
  41e20e:	4b05      	ldr	r3, [pc, #20]	; (41e224 <my_flush_cb+0x50>)
  41e210:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  41e212:	4628      	mov	r0, r5
  41e214:	4b04      	ldr	r3, [pc, #16]	; (41e228 <my_flush_cb+0x54>)
  41e216:	4798      	blx	r3
  41e218:	bd70      	pop	{r4, r5, r6, pc}
  41e21a:	bf00      	nop
  41e21c:	00400c55 	.word	0x00400c55
  41e220:	00400c75 	.word	0x00400c75
  41e224:	00400cc5 	.word	0x00400cc5
  41e228:	004144d5 	.word	0x004144d5

0041e22c <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  41e22c:	b510      	push	{r4, lr}
  41e22e:	b082      	sub	sp, #8
  41e230:	460c      	mov	r4, r1
	int px, py, pressed;
	
	if (readPoint(&px, &py)) {
  41e232:	4669      	mov	r1, sp
  41e234:	a801      	add	r0, sp, #4
  41e236:	4b07      	ldr	r3, [pc, #28]	; (41e254 <my_input_read+0x28>)
  41e238:	4798      	blx	r3
  41e23a:	b940      	cbnz	r0, 41e24e <my_input_read+0x22>
		data->state = LV_INDEV_STATE_PR;
	}
	else {
		data->state = LV_INDEV_STATE_REL;
  41e23c:	2300      	movs	r3, #0
  41e23e:	73a3      	strb	r3, [r4, #14]
	}
	
	data->point.x = px;
  41e240:	9b01      	ldr	r3, [sp, #4]
  41e242:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  41e244:	9b00      	ldr	r3, [sp, #0]
  41e246:	8063      	strh	r3, [r4, #2]
	return false; /*No buffering now so no more data read*/
}
  41e248:	2000      	movs	r0, #0
  41e24a:	b002      	add	sp, #8
  41e24c:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PR;
  41e24e:	2301      	movs	r3, #1
  41e250:	73a3      	strb	r3, [r4, #14]
  41e252:	e7f5      	b.n	41e240 <my_input_read+0x14>
  41e254:	004009b1 	.word	0x004009b1

0041e258 <task_main>:
static void task_main(void *pvParameters) {
  41e258:	b500      	push	{lr}
  41e25a:	b083      	sub	sp, #12
  41e25c:	e002      	b.n	41e264 <task_main+0xc>
		vTaskDelay(25);
  41e25e:	2019      	movs	r0, #25
  41e260:	4b08      	ldr	r3, [pc, #32]	; (41e284 <task_main+0x2c>)
  41e262:	4798      	blx	r3
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  41e264:	2300      	movs	r3, #0
  41e266:	461a      	mov	r2, r3
  41e268:	f10d 0107 	add.w	r1, sp, #7
  41e26c:	4806      	ldr	r0, [pc, #24]	; (41e288 <task_main+0x30>)
  41e26e:	6800      	ldr	r0, [r0, #0]
  41e270:	4c06      	ldr	r4, [pc, #24]	; (41e28c <task_main+0x34>)
  41e272:	47a0      	blx	r4
  41e274:	2800      	cmp	r0, #0
  41e276:	d0f2      	beq.n	41e25e <task_main+0x6>
			printf("ox: %d \n", ox);
  41e278:	f89d 1007 	ldrb.w	r1, [sp, #7]
  41e27c:	4804      	ldr	r0, [pc, #16]	; (41e290 <task_main+0x38>)
  41e27e:	4b05      	ldr	r3, [pc, #20]	; (41e294 <task_main+0x3c>)
  41e280:	4798      	blx	r3
  41e282:	e7ec      	b.n	41e25e <task_main+0x6>
  41e284:	004026b5 	.word	0x004026b5
  41e288:	2043a304 	.word	0x2043a304
  41e28c:	00401e6d 	.word	0x00401e6d
  41e290:	0042846c 	.word	0x0042846c
  41e294:	0041f375 	.word	0x0041f375

0041e298 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  41e298:	b530      	push	{r4, r5, lr}
  41e29a:	b083      	sub	sp, #12
  41e29c:	4604      	mov	r4, r0
  41e29e:	460d      	mov	r5, r1
	uint32_t val = 0;
  41e2a0:	2300      	movs	r3, #0
  41e2a2:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  41e2a4:	4b28      	ldr	r3, [pc, #160]	; (41e348 <usart_serial_getchar+0xb0>)
  41e2a6:	4298      	cmp	r0, r3
  41e2a8:	d013      	beq.n	41e2d2 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  41e2aa:	4b28      	ldr	r3, [pc, #160]	; (41e34c <usart_serial_getchar+0xb4>)
  41e2ac:	429c      	cmp	r4, r3
  41e2ae:	d017      	beq.n	41e2e0 <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  41e2b0:	4b27      	ldr	r3, [pc, #156]	; (41e350 <usart_serial_getchar+0xb8>)
  41e2b2:	429c      	cmp	r4, r3
  41e2b4:	d01b      	beq.n	41e2ee <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  41e2b6:	4b27      	ldr	r3, [pc, #156]	; (41e354 <usart_serial_getchar+0xbc>)
  41e2b8:	429c      	cmp	r4, r3
  41e2ba:	d01f      	beq.n	41e2fc <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  41e2bc:	4b26      	ldr	r3, [pc, #152]	; (41e358 <usart_serial_getchar+0xc0>)
  41e2be:	429c      	cmp	r4, r3
  41e2c0:	d023      	beq.n	41e30a <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  41e2c2:	4b26      	ldr	r3, [pc, #152]	; (41e35c <usart_serial_getchar+0xc4>)
  41e2c4:	429c      	cmp	r4, r3
  41e2c6:	d02a      	beq.n	41e31e <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  41e2c8:	4b25      	ldr	r3, [pc, #148]	; (41e360 <usart_serial_getchar+0xc8>)
  41e2ca:	429c      	cmp	r4, r3
  41e2cc:	d031      	beq.n	41e332 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  41e2ce:	b003      	add	sp, #12
  41e2d0:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  41e2d2:	4629      	mov	r1, r5
  41e2d4:	4620      	mov	r0, r4
  41e2d6:	4b23      	ldr	r3, [pc, #140]	; (41e364 <usart_serial_getchar+0xcc>)
  41e2d8:	4798      	blx	r3
  41e2da:	2800      	cmp	r0, #0
  41e2dc:	d1f9      	bne.n	41e2d2 <usart_serial_getchar+0x3a>
  41e2de:	e7e4      	b.n	41e2aa <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  41e2e0:	4629      	mov	r1, r5
  41e2e2:	4620      	mov	r0, r4
  41e2e4:	4b1f      	ldr	r3, [pc, #124]	; (41e364 <usart_serial_getchar+0xcc>)
  41e2e6:	4798      	blx	r3
  41e2e8:	2800      	cmp	r0, #0
  41e2ea:	d1f9      	bne.n	41e2e0 <usart_serial_getchar+0x48>
  41e2ec:	e7e0      	b.n	41e2b0 <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  41e2ee:	4629      	mov	r1, r5
  41e2f0:	4620      	mov	r0, r4
  41e2f2:	4b1c      	ldr	r3, [pc, #112]	; (41e364 <usart_serial_getchar+0xcc>)
  41e2f4:	4798      	blx	r3
  41e2f6:	2800      	cmp	r0, #0
  41e2f8:	d1f9      	bne.n	41e2ee <usart_serial_getchar+0x56>
  41e2fa:	e7dc      	b.n	41e2b6 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  41e2fc:	4629      	mov	r1, r5
  41e2fe:	4620      	mov	r0, r4
  41e300:	4b18      	ldr	r3, [pc, #96]	; (41e364 <usart_serial_getchar+0xcc>)
  41e302:	4798      	blx	r3
  41e304:	2800      	cmp	r0, #0
  41e306:	d1f9      	bne.n	41e2fc <usart_serial_getchar+0x64>
  41e308:	e7d8      	b.n	41e2bc <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  41e30a:	a901      	add	r1, sp, #4
  41e30c:	4620      	mov	r0, r4
  41e30e:	4b16      	ldr	r3, [pc, #88]	; (41e368 <usart_serial_getchar+0xd0>)
  41e310:	4798      	blx	r3
  41e312:	2800      	cmp	r0, #0
  41e314:	d1f9      	bne.n	41e30a <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  41e316:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41e31a:	702b      	strb	r3, [r5, #0]
  41e31c:	e7d1      	b.n	41e2c2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  41e31e:	a901      	add	r1, sp, #4
  41e320:	4620      	mov	r0, r4
  41e322:	4b11      	ldr	r3, [pc, #68]	; (41e368 <usart_serial_getchar+0xd0>)
  41e324:	4798      	blx	r3
  41e326:	2800      	cmp	r0, #0
  41e328:	d1f9      	bne.n	41e31e <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  41e32a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41e32e:	702b      	strb	r3, [r5, #0]
  41e330:	e7ca      	b.n	41e2c8 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  41e332:	a901      	add	r1, sp, #4
  41e334:	4620      	mov	r0, r4
  41e336:	4b0c      	ldr	r3, [pc, #48]	; (41e368 <usart_serial_getchar+0xd0>)
  41e338:	4798      	blx	r3
  41e33a:	2800      	cmp	r0, #0
  41e33c:	d1f9      	bne.n	41e332 <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  41e33e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  41e342:	702b      	strb	r3, [r5, #0]
}
  41e344:	e7c3      	b.n	41e2ce <usart_serial_getchar+0x36>
  41e346:	bf00      	nop
  41e348:	400e0800 	.word	0x400e0800
  41e34c:	400e0a00 	.word	0x400e0a00
  41e350:	400e1a00 	.word	0x400e1a00
  41e354:	400e1c00 	.word	0x400e1c00
  41e358:	40024000 	.word	0x40024000
  41e35c:	40028000 	.word	0x40028000
  41e360:	4002c000 	.word	0x4002c000
  41e364:	0041dddb 	.word	0x0041dddb
  41e368:	0041de77 	.word	0x0041de77

0041e36c <usart_serial_putchar>:
{
  41e36c:	b538      	push	{r3, r4, r5, lr}
  41e36e:	4604      	mov	r4, r0
  41e370:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  41e372:	4b27      	ldr	r3, [pc, #156]	; (41e410 <usart_serial_putchar+0xa4>)
  41e374:	4298      	cmp	r0, r3
  41e376:	d013      	beq.n	41e3a0 <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  41e378:	4b26      	ldr	r3, [pc, #152]	; (41e414 <usart_serial_putchar+0xa8>)
  41e37a:	4298      	cmp	r0, r3
  41e37c:	d018      	beq.n	41e3b0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  41e37e:	4b26      	ldr	r3, [pc, #152]	; (41e418 <usart_serial_putchar+0xac>)
  41e380:	4298      	cmp	r0, r3
  41e382:	d01d      	beq.n	41e3c0 <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  41e384:	4b25      	ldr	r3, [pc, #148]	; (41e41c <usart_serial_putchar+0xb0>)
  41e386:	4298      	cmp	r0, r3
  41e388:	d022      	beq.n	41e3d0 <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  41e38a:	4b25      	ldr	r3, [pc, #148]	; (41e420 <usart_serial_putchar+0xb4>)
  41e38c:	4298      	cmp	r0, r3
  41e38e:	d027      	beq.n	41e3e0 <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  41e390:	4b24      	ldr	r3, [pc, #144]	; (41e424 <usart_serial_putchar+0xb8>)
  41e392:	4298      	cmp	r0, r3
  41e394:	d02c      	beq.n	41e3f0 <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  41e396:	4b24      	ldr	r3, [pc, #144]	; (41e428 <usart_serial_putchar+0xbc>)
  41e398:	4298      	cmp	r0, r3
  41e39a:	d031      	beq.n	41e400 <usart_serial_putchar+0x94>
	return 0;
  41e39c:	2000      	movs	r0, #0
}
  41e39e:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41e3a0:	4629      	mov	r1, r5
  41e3a2:	4620      	mov	r0, r4
  41e3a4:	4b21      	ldr	r3, [pc, #132]	; (41e42c <usart_serial_putchar+0xc0>)
  41e3a6:	4798      	blx	r3
  41e3a8:	2800      	cmp	r0, #0
  41e3aa:	d1f9      	bne.n	41e3a0 <usart_serial_putchar+0x34>
		return 1;
  41e3ac:	2001      	movs	r0, #1
  41e3ae:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41e3b0:	4629      	mov	r1, r5
  41e3b2:	4620      	mov	r0, r4
  41e3b4:	4b1d      	ldr	r3, [pc, #116]	; (41e42c <usart_serial_putchar+0xc0>)
  41e3b6:	4798      	blx	r3
  41e3b8:	2800      	cmp	r0, #0
  41e3ba:	d1f9      	bne.n	41e3b0 <usart_serial_putchar+0x44>
		return 1;
  41e3bc:	2001      	movs	r0, #1
  41e3be:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41e3c0:	4629      	mov	r1, r5
  41e3c2:	4620      	mov	r0, r4
  41e3c4:	4b19      	ldr	r3, [pc, #100]	; (41e42c <usart_serial_putchar+0xc0>)
  41e3c6:	4798      	blx	r3
  41e3c8:	2800      	cmp	r0, #0
  41e3ca:	d1f9      	bne.n	41e3c0 <usart_serial_putchar+0x54>
		return 1;
  41e3cc:	2001      	movs	r0, #1
  41e3ce:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  41e3d0:	4629      	mov	r1, r5
  41e3d2:	4620      	mov	r0, r4
  41e3d4:	4b15      	ldr	r3, [pc, #84]	; (41e42c <usart_serial_putchar+0xc0>)
  41e3d6:	4798      	blx	r3
  41e3d8:	2800      	cmp	r0, #0
  41e3da:	d1f9      	bne.n	41e3d0 <usart_serial_putchar+0x64>
		return 1;
  41e3dc:	2001      	movs	r0, #1
  41e3de:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41e3e0:	4629      	mov	r1, r5
  41e3e2:	4620      	mov	r0, r4
  41e3e4:	4b12      	ldr	r3, [pc, #72]	; (41e430 <usart_serial_putchar+0xc4>)
  41e3e6:	4798      	blx	r3
  41e3e8:	2800      	cmp	r0, #0
  41e3ea:	d1f9      	bne.n	41e3e0 <usart_serial_putchar+0x74>
		return 1;
  41e3ec:	2001      	movs	r0, #1
  41e3ee:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41e3f0:	4629      	mov	r1, r5
  41e3f2:	4620      	mov	r0, r4
  41e3f4:	4b0e      	ldr	r3, [pc, #56]	; (41e430 <usart_serial_putchar+0xc4>)
  41e3f6:	4798      	blx	r3
  41e3f8:	2800      	cmp	r0, #0
  41e3fa:	d1f9      	bne.n	41e3f0 <usart_serial_putchar+0x84>
		return 1;
  41e3fc:	2001      	movs	r0, #1
  41e3fe:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  41e400:	4629      	mov	r1, r5
  41e402:	4620      	mov	r0, r4
  41e404:	4b0a      	ldr	r3, [pc, #40]	; (41e430 <usart_serial_putchar+0xc4>)
  41e406:	4798      	blx	r3
  41e408:	2800      	cmp	r0, #0
  41e40a:	d1f9      	bne.n	41e400 <usart_serial_putchar+0x94>
		return 1;
  41e40c:	2001      	movs	r0, #1
  41e40e:	bd38      	pop	{r3, r4, r5, pc}
  41e410:	400e0800 	.word	0x400e0800
  41e414:	400e0a00 	.word	0x400e0a00
  41e418:	400e1a00 	.word	0x400e1a00
  41e41c:	400e1c00 	.word	0x400e1c00
  41e420:	40024000 	.word	0x40024000
  41e424:	40028000 	.word	0x40028000
  41e428:	4002c000 	.word	0x4002c000
  41e42c:	0041ddc9 	.word	0x0041ddc9
  41e430:	0041de61 	.word	0x0041de61

0041e434 <configure_lcd>:
static void configure_lcd(void) {
  41e434:	b510      	push	{r4, lr}
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  41e436:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41e43a:	2074      	movs	r0, #116	; 0x74
  41e43c:	4c0b      	ldr	r4, [pc, #44]	; (41e46c <configure_lcd+0x38>)
  41e43e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  41e440:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41e444:	2075      	movs	r0, #117	; 0x75
  41e446:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  41e448:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41e44c:	2076      	movs	r0, #118	; 0x76
  41e44e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  41e450:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41e454:	207b      	movs	r0, #123	; 0x7b
  41e456:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  41e458:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41e45c:	2018      	movs	r0, #24
  41e45e:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  41e460:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41e464:	2006      	movs	r0, #6
  41e466:	47a0      	blx	r4
  41e468:	bd10      	pop	{r4, pc}
  41e46a:	bf00      	nop
  41e46c:	0041d941 	.word	0x0041d941

0041e470 <configure_console>:
static void configure_console(void) {
  41e470:	b570      	push	{r4, r5, r6, lr}
  41e472:	b08a      	sub	sp, #40	; 0x28
	const usart_serial_options_t uart_serial_options = {
  41e474:	4b1a      	ldr	r3, [pc, #104]	; (41e4e0 <configure_console+0x70>)
  41e476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  41e478:	ac0a      	add	r4, sp, #40	; 0x28
  41e47a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  41e47e:	4d19      	ldr	r5, [pc, #100]	; (41e4e4 <configure_console+0x74>)
  41e480:	4b19      	ldr	r3, [pc, #100]	; (41e4e8 <configure_console+0x78>)
  41e482:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  41e484:	4a19      	ldr	r2, [pc, #100]	; (41e4ec <configure_console+0x7c>)
  41e486:	4b1a      	ldr	r3, [pc, #104]	; (41e4f0 <configure_console+0x80>)
  41e488:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  41e48a:	4a1a      	ldr	r2, [pc, #104]	; (41e4f4 <configure_console+0x84>)
  41e48c:	4b1a      	ldr	r3, [pc, #104]	; (41e4f8 <configure_console+0x88>)
  41e48e:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  41e490:	9b06      	ldr	r3, [sp, #24]
  41e492:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  41e494:	9b07      	ldr	r3, [sp, #28]
  41e496:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  41e498:	9b08      	ldr	r3, [sp, #32]
  41e49a:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  41e49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41e49e:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  41e4a0:	2400      	movs	r4, #0
  41e4a2:	9404      	str	r4, [sp, #16]
  41e4a4:	200e      	movs	r0, #14
  41e4a6:	4b15      	ldr	r3, [pc, #84]	; (41e4fc <configure_console+0x8c>)
  41e4a8:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  41e4aa:	4a15      	ldr	r2, [pc, #84]	; (41e500 <configure_console+0x90>)
  41e4ac:	4669      	mov	r1, sp
  41e4ae:	4628      	mov	r0, r5
  41e4b0:	4b14      	ldr	r3, [pc, #80]	; (41e504 <configure_console+0x94>)
  41e4b2:	4798      	blx	r3
		usart_enable_tx(p_usart);
  41e4b4:	4628      	mov	r0, r5
  41e4b6:	4b14      	ldr	r3, [pc, #80]	; (41e508 <configure_console+0x98>)
  41e4b8:	4798      	blx	r3
		usart_enable_rx(p_usart);
  41e4ba:	4628      	mov	r0, r5
  41e4bc:	4b13      	ldr	r3, [pc, #76]	; (41e50c <configure_console+0x9c>)
  41e4be:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  41e4c0:	4e13      	ldr	r6, [pc, #76]	; (41e510 <configure_console+0xa0>)
  41e4c2:	6833      	ldr	r3, [r6, #0]
  41e4c4:	4621      	mov	r1, r4
  41e4c6:	6898      	ldr	r0, [r3, #8]
  41e4c8:	4d12      	ldr	r5, [pc, #72]	; (41e514 <configure_console+0xa4>)
  41e4ca:	47a8      	blx	r5
	setbuf(stdin, NULL);
  41e4cc:	6833      	ldr	r3, [r6, #0]
  41e4ce:	4621      	mov	r1, r4
  41e4d0:	6858      	ldr	r0, [r3, #4]
  41e4d2:	47a8      	blx	r5
	setbuf(stdout, NULL);
  41e4d4:	6833      	ldr	r3, [r6, #0]
  41e4d6:	4621      	mov	r1, r4
  41e4d8:	6898      	ldr	r0, [r3, #8]
  41e4da:	47a8      	blx	r5
}
  41e4dc:	b00a      	add	sp, #40	; 0x28
  41e4de:	bd70      	pop	{r4, r5, r6, pc}
  41e4e0:	00426d20 	.word	0x00426d20
  41e4e4:	40028000 	.word	0x40028000
  41e4e8:	2043a2fc 	.word	0x2043a2fc
  41e4ec:	0041e36d 	.word	0x0041e36d
  41e4f0:	2043a2f8 	.word	0x2043a2f8
  41e4f4:	0041e299 	.word	0x0041e299
  41e4f8:	2043a2f4 	.word	0x2043a2f4
  41e4fc:	0041dc39 	.word	0x0041dc39
  41e500:	08f0d180 	.word	0x08f0d180
  41e504:	0041dedd 	.word	0x0041dedd
  41e508:	0041de39 	.word	0x0041de39
  41e50c:	0041de45 	.word	0x0041de45
  41e510:	20400060 	.word	0x20400060
  41e514:	0041fbb9 	.word	0x0041fbb9

0041e518 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  41e518:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  41e51a:	460a      	mov	r2, r1
  41e51c:	4601      	mov	r1, r0
  41e51e:	4802      	ldr	r0, [pc, #8]	; (41e528 <vApplicationStackOverflowHook+0x10>)
  41e520:	4b02      	ldr	r3, [pc, #8]	; (41e52c <vApplicationStackOverflowHook+0x14>)
  41e522:	4798      	blx	r3
  41e524:	e7fe      	b.n	41e524 <vApplicationStackOverflowHook+0xc>
  41e526:	bf00      	nop
  41e528:	00428478 	.word	0x00428478
  41e52c:	0041f375 	.word	0x0041f375

0041e530 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  41e530:	4770      	bx	lr

0041e532 <vApplicationMallocFailedHook>:
  41e532:	f04f 0380 	mov.w	r3, #128	; 0x80
  41e536:	b672      	cpsid	i
  41e538:	f383 8811 	msr	BASEPRI, r3
  41e53c:	f3bf 8f6f 	isb	sy
  41e540:	f3bf 8f4f 	dsb	sy
  41e544:	b662      	cpsie	i
  41e546:	e7fe      	b.n	41e546 <vApplicationMallocFailedHook+0x14>

0041e548 <lv_oxi>:
lv_oxi(void) {
  41e548:	b570      	push	{r4, r5, r6, lr}
  41e54a:	b082      	sub	sp, #8
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  41e54c:	4d0e      	ldr	r5, [pc, #56]	; (41e588 <lv_oxi+0x40>)
  41e54e:	47a8      	blx	r5
  41e550:	4c0e      	ldr	r4, [pc, #56]	; (41e58c <lv_oxi+0x44>)
  41e552:	47a0      	blx	r4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41e554:	4b0e      	ldr	r3, [pc, #56]	; (41e590 <lv_oxi+0x48>)
  41e556:	8a1b      	ldrh	r3, [r3, #16]
  41e558:	2229      	movs	r2, #41	; 0x29
  41e55a:	2100      	movs	r1, #0
  41e55c:	4e0d      	ldr	r6, [pc, #52]	; (41e594 <lv_oxi+0x4c>)
  41e55e:	47b0      	blx	r6
  41e560:	47a8      	blx	r5
  41e562:	47a0      	blx	r4
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
  41e564:	2100      	movs	r1, #0
  41e566:	4b0c      	ldr	r3, [pc, #48]	; (41e598 <lv_oxi+0x50>)
  41e568:	4798      	blx	r3
  41e56a:	4604      	mov	r4, r0
	lv_img_set_src(img1, &logo);
  41e56c:	490b      	ldr	r1, [pc, #44]	; (41e59c <lv_oxi+0x54>)
  41e56e:	4b0c      	ldr	r3, [pc, #48]	; (41e5a0 <lv_oxi+0x58>)
  41e570:	4798      	blx	r3
	lv_obj_align(img1, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 20);
  41e572:	2314      	movs	r3, #20
  41e574:	9300      	str	r3, [sp, #0]
  41e576:	2300      	movs	r3, #0
  41e578:	2201      	movs	r2, #1
  41e57a:	4619      	mov	r1, r3
  41e57c:	4620      	mov	r0, r4
  41e57e:	4c09      	ldr	r4, [pc, #36]	; (41e5a4 <lv_oxi+0x5c>)
  41e580:	47a0      	blx	r4
}
  41e582:	b002      	add	sp, #8
  41e584:	bd70      	pop	{r4, r5, r6, pc}
  41e586:	bf00      	nop
  41e588:	004143f5 	.word	0x004143f5
  41e58c:	004031f9 	.word	0x004031f9
  41e590:	00426d20 	.word	0x00426d20
  41e594:	0040731d 	.word	0x0040731d
  41e598:	0041ce89 	.word	0x0041ce89
  41e59c:	004223cc 	.word	0x004223cc
  41e5a0:	0041cca9 	.word	0x0041cca9
  41e5a4:	00405c71 	.word	0x00405c71

0041e5a8 <task_lcd>:
static void task_lcd(void *pvParameters) {
  41e5a8:	b508      	push	{r3, lr}
	lv_oxi();
  41e5aa:	4b05      	ldr	r3, [pc, #20]	; (41e5c0 <task_lcd+0x18>)
  41e5ac:	4798      	blx	r3
		lv_tick_inc(50);
  41e5ae:	2032      	movs	r0, #50	; 0x32
  41e5b0:	4b04      	ldr	r3, [pc, #16]	; (41e5c4 <task_lcd+0x1c>)
  41e5b2:	4798      	blx	r3
		lv_task_handler();
  41e5b4:	4b04      	ldr	r3, [pc, #16]	; (41e5c8 <task_lcd+0x20>)
  41e5b6:	4798      	blx	r3
		vTaskDelay(50);
  41e5b8:	2032      	movs	r0, #50	; 0x32
  41e5ba:	4b04      	ldr	r3, [pc, #16]	; (41e5cc <task_lcd+0x24>)
  41e5bc:	4798      	blx	r3
  41e5be:	e7f6      	b.n	41e5ae <task_lcd+0x6>
  41e5c0:	0041e549 	.word	0x0041e549
  41e5c4:	004147f5 	.word	0x004147f5
  41e5c8:	004163d1 	.word	0x004163d1
  41e5cc:	004026b5 	.word	0x004026b5

0041e5d0 <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  41e5d0:	b530      	push	{r4, r5, lr}
  41e5d2:	b099      	sub	sp, #100	; 0x64
	/* board and sys init */
	board_init();
  41e5d4:	4b33      	ldr	r3, [pc, #204]	; (41e6a4 <main+0xd4>)
  41e5d6:	4798      	blx	r3
	sysclk_init();
  41e5d8:	4b33      	ldr	r3, [pc, #204]	; (41e6a8 <main+0xd8>)
  41e5da:	4798      	blx	r3
	configure_console();
  41e5dc:	4b33      	ldr	r3, [pc, #204]	; (41e6ac <main+0xdc>)
  41e5de:	4798      	blx	r3

	/* LCd int */
	configure_lcd();
  41e5e0:	4b33      	ldr	r3, [pc, #204]	; (41e6b0 <main+0xe0>)
  41e5e2:	4798      	blx	r3
	ili9341_init();
  41e5e4:	4b33      	ldr	r3, [pc, #204]	; (41e6b4 <main+0xe4>)
  41e5e6:	4798      	blx	r3
	configure_touch();
  41e5e8:	4b33      	ldr	r3, [pc, #204]	; (41e6b8 <main+0xe8>)
  41e5ea:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  41e5ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  41e5f0:	4b32      	ldr	r3, [pc, #200]	; (41e6bc <main+0xec>)
  41e5f2:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();
	
	/*LittlevGL init*/
	lv_init();
  41e5f4:	4b32      	ldr	r3, [pc, #200]	; (41e6c0 <main+0xf0>)
  41e5f6:	4798      	blx	r3
	lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  41e5f8:	a80b      	add	r0, sp, #44	; 0x2c
  41e5fa:	4b32      	ldr	r3, [pc, #200]	; (41e6c4 <main+0xf4>)
  41e5fc:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  41e5fe:	4c32      	ldr	r4, [pc, #200]	; (41e6c8 <main+0xf8>)
  41e600:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  41e604:	2200      	movs	r2, #0
  41e606:	4931      	ldr	r1, [pc, #196]	; (41e6cc <main+0xfc>)
  41e608:	4620      	mov	r0, r4
  41e60a:	4d31      	ldr	r5, [pc, #196]	; (41e6d0 <main+0x100>)
  41e60c:	47a8      	blx	r5
	disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  41e60e:	940c      	str	r4, [sp, #48]	; 0x30
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  41e610:	4b30      	ldr	r3, [pc, #192]	; (41e6d4 <main+0x104>)
  41e612:	930e      	str	r3, [sp, #56]	; 0x38
	lv_disp_t * disp;
	disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  41e614:	a80b      	add	r0, sp, #44	; 0x2c
  41e616:	4b30      	ldr	r3, [pc, #192]	; (41e6d8 <main+0x108>)
  41e618:	4798      	blx	r3
	
	/* Init input on LVGL */
	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  41e61a:	a804      	add	r0, sp, #16
  41e61c:	4b2f      	ldr	r3, [pc, #188]	; (41e6dc <main+0x10c>)
  41e61e:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  41e620:	2401      	movs	r4, #1
  41e622:	f88d 4010 	strb.w	r4, [sp, #16]
	indev_drv.read_cb = my_input_read;
  41e626:	4b2e      	ldr	r3, [pc, #184]	; (41e6e0 <main+0x110>)
  41e628:	9305      	str	r3, [sp, #20]
	/*Register the driver in LVGL and save the created input device object*/
	lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  41e62a:	a804      	add	r0, sp, #16
  41e62c:	4b2d      	ldr	r3, [pc, #180]	; (41e6e4 <main+0x114>)
  41e62e:	4798      	blx	r3
	
	xQueueOx = xQueueCreate(32, sizeof(char));
  41e630:	2200      	movs	r2, #0
  41e632:	4621      	mov	r1, r4
  41e634:	2020      	movs	r0, #32
  41e636:	4b2c      	ldr	r3, [pc, #176]	; (41e6e8 <main+0x118>)
  41e638:	4798      	blx	r3
  41e63a:	4b2c      	ldr	r3, [pc, #176]	; (41e6ec <main+0x11c>)
  41e63c:	6018      	str	r0, [r3, #0]

	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  41e63e:	2300      	movs	r3, #0
  41e640:	9303      	str	r3, [sp, #12]
  41e642:	9302      	str	r3, [sp, #8]
  41e644:	9301      	str	r3, [sp, #4]
  41e646:	9300      	str	r3, [sp, #0]
  41e648:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41e64c:	4928      	ldr	r1, [pc, #160]	; (41e6f0 <main+0x120>)
  41e64e:	4829      	ldr	r0, [pc, #164]	; (41e6f4 <main+0x124>)
  41e650:	4c29      	ldr	r4, [pc, #164]	; (41e6f8 <main+0x128>)
  41e652:	47a0      	blx	r4
  41e654:	2801      	cmp	r0, #1
  41e656:	d002      	beq.n	41e65e <main+0x8e>
		printf("Failed to create lcd task\r\n");
  41e658:	4828      	ldr	r0, [pc, #160]	; (41e6fc <main+0x12c>)
  41e65a:	4b29      	ldr	r3, [pc, #164]	; (41e700 <main+0x130>)
  41e65c:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  41e65e:	2300      	movs	r3, #0
  41e660:	9303      	str	r3, [sp, #12]
  41e662:	9302      	str	r3, [sp, #8]
  41e664:	9301      	str	r3, [sp, #4]
  41e666:	9300      	str	r3, [sp, #0]
  41e668:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41e66c:	4925      	ldr	r1, [pc, #148]	; (41e704 <main+0x134>)
  41e66e:	4826      	ldr	r0, [pc, #152]	; (41e708 <main+0x138>)
  41e670:	4c21      	ldr	r4, [pc, #132]	; (41e6f8 <main+0x128>)
  41e672:	47a0      	blx	r4
  41e674:	2801      	cmp	r0, #1
  41e676:	d002      	beq.n	41e67e <main+0xae>
		printf("Failed to create APS task\r\n");
  41e678:	4824      	ldr	r0, [pc, #144]	; (41e70c <main+0x13c>)
  41e67a:	4b21      	ldr	r3, [pc, #132]	; (41e700 <main+0x130>)
  41e67c:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  41e67e:	2300      	movs	r3, #0
  41e680:	9303      	str	r3, [sp, #12]
  41e682:	9302      	str	r3, [sp, #8]
  41e684:	9301      	str	r3, [sp, #4]
  41e686:	9300      	str	r3, [sp, #0]
  41e688:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  41e68c:	4920      	ldr	r1, [pc, #128]	; (41e710 <main+0x140>)
  41e68e:	4821      	ldr	r0, [pc, #132]	; (41e714 <main+0x144>)
  41e690:	4c19      	ldr	r4, [pc, #100]	; (41e6f8 <main+0x128>)
  41e692:	47a0      	blx	r4
  41e694:	2801      	cmp	r0, #1
  41e696:	d002      	beq.n	41e69e <main+0xce>
		printf("Failed to create Main task\r\n");
  41e698:	481f      	ldr	r0, [pc, #124]	; (41e718 <main+0x148>)
  41e69a:	4b19      	ldr	r3, [pc, #100]	; (41e700 <main+0x130>)
  41e69c:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  41e69e:	4b1f      	ldr	r3, [pc, #124]	; (41e71c <main+0x14c>)
  41e6a0:	4798      	blx	r3
  41e6a2:	e7fe      	b.n	41e6a2 <main+0xd2>
  41e6a4:	0041d4b1 	.word	0x0041d4b1
  41e6a8:	0041d2bd 	.word	0x0041d2bd
  41e6ac:	0041e471 	.word	0x0041e471
  41e6b0:	0041e435 	.word	0x0041e435
  41e6b4:	00401179 	.word	0x00401179
  41e6b8:	00400665 	.word	0x00400665
  41e6bc:	400e1200 	.word	0x400e1200
  41e6c0:	00405139 	.word	0x00405139
  41e6c4:	0041437d 	.word	0x0041437d
  41e6c8:	2043a040 	.word	0x2043a040
  41e6cc:	20414840 	.word	0x20414840
  41e6d0:	004143d5 	.word	0x004143d5
  41e6d4:	0041e1d5 	.word	0x0041e1d5
  41e6d8:	00414585 	.word	0x00414585
  41e6dc:	004146bd 	.word	0x004146bd
  41e6e0:	0041e22d 	.word	0x0041e22d
  41e6e4:	004146e9 	.word	0x004146e9
  41e6e8:	00401af9 	.word	0x00401af9
  41e6ec:	2043a304 	.word	0x2043a304
  41e6f0:	00428400 	.word	0x00428400
  41e6f4:	0041e5a9 	.word	0x0041e5a9
  41e6f8:	0040225d 	.word	0x0040225d
  41e6fc:	00428404 	.word	0x00428404
  41e700:	0041f375 	.word	0x0041f375
  41e704:	00428420 	.word	0x00428420
  41e708:	00400389 	.word	0x00400389
  41e70c:	00428428 	.word	0x00428428
  41e710:	00428444 	.word	0x00428444
  41e714:	0041e259 	.word	0x0041e259
  41e718:	0042844c 	.word	0x0042844c
  41e71c:	004023b5 	.word	0x004023b5

0041e720 <arm_sin_f32>:
  41e720:	ee06 0a90 	vmov	s13, r0
  41e724:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 41e794 <arm_sin_f32+0x74>
  41e728:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  41e72c:	ee26 7a87 	vmul.f32	s14, s13, s14
  41e730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  41e734:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  41e738:	d504      	bpl.n	41e744 <arm_sin_f32+0x24>
  41e73a:	ee17 3a90 	vmov	r3, s15
  41e73e:	3b01      	subs	r3, #1
  41e740:	ee07 3a90 	vmov	s15, r3
  41e744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  41e748:	eddf 6a13 	vldr	s13, [pc, #76]	; 41e798 <arm_sin_f32+0x78>
  41e74c:	ee77 7a67 	vsub.f32	s15, s14, s15
  41e750:	ee67 7aa6 	vmul.f32	s15, s15, s13
  41e754:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  41e758:	ee17 3a10 	vmov	r3, s14
  41e75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  41e760:	ee07 3a10 	vmov	s14, r3
  41e764:	eef8 6a47 	vcvt.f32.u32	s13, s14
  41e768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  41e76c:	ee77 7ae6 	vsub.f32	s15, s15, s13
  41e770:	4a0a      	ldr	r2, [pc, #40]	; (41e79c <arm_sin_f32+0x7c>)
  41e772:	ee37 7a67 	vsub.f32	s14, s14, s15
  41e776:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  41e77a:	ed91 6a00 	vldr	s12, [r1]
  41e77e:	edd1 6a01 	vldr	s13, [r1, #4]
  41e782:	ee27 7a06 	vmul.f32	s14, s14, s12
  41e786:	ee67 7aa6 	vmul.f32	s15, s15, s13
  41e78a:	ee77 7a27 	vadd.f32	s15, s14, s15
  41e78e:	ee17 0a90 	vmov	r0, s15
  41e792:	4770      	bx	lr
  41e794:	3e22f983 	.word	0x3e22f983
  41e798:	44000000 	.word	0x44000000
  41e79c:	00428490 	.word	0x00428490

0041e7a0 <__aeabi_drsub>:
  41e7a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  41e7a4:	e002      	b.n	41e7ac <__adddf3>
  41e7a6:	bf00      	nop

0041e7a8 <__aeabi_dsub>:
  41e7a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0041e7ac <__adddf3>:
  41e7ac:	b530      	push	{r4, r5, lr}
  41e7ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
  41e7b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
  41e7b6:	ea94 0f05 	teq	r4, r5
  41e7ba:	bf08      	it	eq
  41e7bc:	ea90 0f02 	teqeq	r0, r2
  41e7c0:	bf1f      	itttt	ne
  41e7c2:	ea54 0c00 	orrsne.w	ip, r4, r0
  41e7c6:	ea55 0c02 	orrsne.w	ip, r5, r2
  41e7ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  41e7ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41e7d2:	f000 80e2 	beq.w	41e99a <__adddf3+0x1ee>
  41e7d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
  41e7da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  41e7de:	bfb8      	it	lt
  41e7e0:	426d      	neglt	r5, r5
  41e7e2:	dd0c      	ble.n	41e7fe <__adddf3+0x52>
  41e7e4:	442c      	add	r4, r5
  41e7e6:	ea80 0202 	eor.w	r2, r0, r2
  41e7ea:	ea81 0303 	eor.w	r3, r1, r3
  41e7ee:	ea82 0000 	eor.w	r0, r2, r0
  41e7f2:	ea83 0101 	eor.w	r1, r3, r1
  41e7f6:	ea80 0202 	eor.w	r2, r0, r2
  41e7fa:	ea81 0303 	eor.w	r3, r1, r3
  41e7fe:	2d36      	cmp	r5, #54	; 0x36
  41e800:	bf88      	it	hi
  41e802:	bd30      	pophi	{r4, r5, pc}
  41e804:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  41e808:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41e80c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  41e810:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  41e814:	d002      	beq.n	41e81c <__adddf3+0x70>
  41e816:	4240      	negs	r0, r0
  41e818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41e81c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  41e820:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41e824:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  41e828:	d002      	beq.n	41e830 <__adddf3+0x84>
  41e82a:	4252      	negs	r2, r2
  41e82c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  41e830:	ea94 0f05 	teq	r4, r5
  41e834:	f000 80a7 	beq.w	41e986 <__adddf3+0x1da>
  41e838:	f1a4 0401 	sub.w	r4, r4, #1
  41e83c:	f1d5 0e20 	rsbs	lr, r5, #32
  41e840:	db0d      	blt.n	41e85e <__adddf3+0xb2>
  41e842:	fa02 fc0e 	lsl.w	ip, r2, lr
  41e846:	fa22 f205 	lsr.w	r2, r2, r5
  41e84a:	1880      	adds	r0, r0, r2
  41e84c:	f141 0100 	adc.w	r1, r1, #0
  41e850:	fa03 f20e 	lsl.w	r2, r3, lr
  41e854:	1880      	adds	r0, r0, r2
  41e856:	fa43 f305 	asr.w	r3, r3, r5
  41e85a:	4159      	adcs	r1, r3
  41e85c:	e00e      	b.n	41e87c <__adddf3+0xd0>
  41e85e:	f1a5 0520 	sub.w	r5, r5, #32
  41e862:	f10e 0e20 	add.w	lr, lr, #32
  41e866:	2a01      	cmp	r2, #1
  41e868:	fa03 fc0e 	lsl.w	ip, r3, lr
  41e86c:	bf28      	it	cs
  41e86e:	f04c 0c02 	orrcs.w	ip, ip, #2
  41e872:	fa43 f305 	asr.w	r3, r3, r5
  41e876:	18c0      	adds	r0, r0, r3
  41e878:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  41e87c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41e880:	d507      	bpl.n	41e892 <__adddf3+0xe6>
  41e882:	f04f 0e00 	mov.w	lr, #0
  41e886:	f1dc 0c00 	rsbs	ip, ip, #0
  41e88a:	eb7e 0000 	sbcs.w	r0, lr, r0
  41e88e:	eb6e 0101 	sbc.w	r1, lr, r1
  41e892:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  41e896:	d31b      	bcc.n	41e8d0 <__adddf3+0x124>
  41e898:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  41e89c:	d30c      	bcc.n	41e8b8 <__adddf3+0x10c>
  41e89e:	0849      	lsrs	r1, r1, #1
  41e8a0:	ea5f 0030 	movs.w	r0, r0, rrx
  41e8a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
  41e8a8:	f104 0401 	add.w	r4, r4, #1
  41e8ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
  41e8b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  41e8b4:	f080 809a 	bcs.w	41e9ec <__adddf3+0x240>
  41e8b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  41e8bc:	bf08      	it	eq
  41e8be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41e8c2:	f150 0000 	adcs.w	r0, r0, #0
  41e8c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41e8ca:	ea41 0105 	orr.w	r1, r1, r5
  41e8ce:	bd30      	pop	{r4, r5, pc}
  41e8d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  41e8d4:	4140      	adcs	r0, r0
  41e8d6:	eb41 0101 	adc.w	r1, r1, r1
  41e8da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41e8de:	f1a4 0401 	sub.w	r4, r4, #1
  41e8e2:	d1e9      	bne.n	41e8b8 <__adddf3+0x10c>
  41e8e4:	f091 0f00 	teq	r1, #0
  41e8e8:	bf04      	itt	eq
  41e8ea:	4601      	moveq	r1, r0
  41e8ec:	2000      	moveq	r0, #0
  41e8ee:	fab1 f381 	clz	r3, r1
  41e8f2:	bf08      	it	eq
  41e8f4:	3320      	addeq	r3, #32
  41e8f6:	f1a3 030b 	sub.w	r3, r3, #11
  41e8fa:	f1b3 0220 	subs.w	r2, r3, #32
  41e8fe:	da0c      	bge.n	41e91a <__adddf3+0x16e>
  41e900:	320c      	adds	r2, #12
  41e902:	dd08      	ble.n	41e916 <__adddf3+0x16a>
  41e904:	f102 0c14 	add.w	ip, r2, #20
  41e908:	f1c2 020c 	rsb	r2, r2, #12
  41e90c:	fa01 f00c 	lsl.w	r0, r1, ip
  41e910:	fa21 f102 	lsr.w	r1, r1, r2
  41e914:	e00c      	b.n	41e930 <__adddf3+0x184>
  41e916:	f102 0214 	add.w	r2, r2, #20
  41e91a:	bfd8      	it	le
  41e91c:	f1c2 0c20 	rsble	ip, r2, #32
  41e920:	fa01 f102 	lsl.w	r1, r1, r2
  41e924:	fa20 fc0c 	lsr.w	ip, r0, ip
  41e928:	bfdc      	itt	le
  41e92a:	ea41 010c 	orrle.w	r1, r1, ip
  41e92e:	4090      	lslle	r0, r2
  41e930:	1ae4      	subs	r4, r4, r3
  41e932:	bfa2      	ittt	ge
  41e934:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  41e938:	4329      	orrge	r1, r5
  41e93a:	bd30      	popge	{r4, r5, pc}
  41e93c:	ea6f 0404 	mvn.w	r4, r4
  41e940:	3c1f      	subs	r4, #31
  41e942:	da1c      	bge.n	41e97e <__adddf3+0x1d2>
  41e944:	340c      	adds	r4, #12
  41e946:	dc0e      	bgt.n	41e966 <__adddf3+0x1ba>
  41e948:	f104 0414 	add.w	r4, r4, #20
  41e94c:	f1c4 0220 	rsb	r2, r4, #32
  41e950:	fa20 f004 	lsr.w	r0, r0, r4
  41e954:	fa01 f302 	lsl.w	r3, r1, r2
  41e958:	ea40 0003 	orr.w	r0, r0, r3
  41e95c:	fa21 f304 	lsr.w	r3, r1, r4
  41e960:	ea45 0103 	orr.w	r1, r5, r3
  41e964:	bd30      	pop	{r4, r5, pc}
  41e966:	f1c4 040c 	rsb	r4, r4, #12
  41e96a:	f1c4 0220 	rsb	r2, r4, #32
  41e96e:	fa20 f002 	lsr.w	r0, r0, r2
  41e972:	fa01 f304 	lsl.w	r3, r1, r4
  41e976:	ea40 0003 	orr.w	r0, r0, r3
  41e97a:	4629      	mov	r1, r5
  41e97c:	bd30      	pop	{r4, r5, pc}
  41e97e:	fa21 f004 	lsr.w	r0, r1, r4
  41e982:	4629      	mov	r1, r5
  41e984:	bd30      	pop	{r4, r5, pc}
  41e986:	f094 0f00 	teq	r4, #0
  41e98a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  41e98e:	bf06      	itte	eq
  41e990:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  41e994:	3401      	addeq	r4, #1
  41e996:	3d01      	subne	r5, #1
  41e998:	e74e      	b.n	41e838 <__adddf3+0x8c>
  41e99a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41e99e:	bf18      	it	ne
  41e9a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  41e9a4:	d029      	beq.n	41e9fa <__adddf3+0x24e>
  41e9a6:	ea94 0f05 	teq	r4, r5
  41e9aa:	bf08      	it	eq
  41e9ac:	ea90 0f02 	teqeq	r0, r2
  41e9b0:	d005      	beq.n	41e9be <__adddf3+0x212>
  41e9b2:	ea54 0c00 	orrs.w	ip, r4, r0
  41e9b6:	bf04      	itt	eq
  41e9b8:	4619      	moveq	r1, r3
  41e9ba:	4610      	moveq	r0, r2
  41e9bc:	bd30      	pop	{r4, r5, pc}
  41e9be:	ea91 0f03 	teq	r1, r3
  41e9c2:	bf1e      	ittt	ne
  41e9c4:	2100      	movne	r1, #0
  41e9c6:	2000      	movne	r0, #0
  41e9c8:	bd30      	popne	{r4, r5, pc}
  41e9ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  41e9ce:	d105      	bne.n	41e9dc <__adddf3+0x230>
  41e9d0:	0040      	lsls	r0, r0, #1
  41e9d2:	4149      	adcs	r1, r1
  41e9d4:	bf28      	it	cs
  41e9d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  41e9da:	bd30      	pop	{r4, r5, pc}
  41e9dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  41e9e0:	bf3c      	itt	cc
  41e9e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  41e9e6:	bd30      	popcc	{r4, r5, pc}
  41e9e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41e9ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  41e9f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41e9f4:	f04f 0000 	mov.w	r0, #0
  41e9f8:	bd30      	pop	{r4, r5, pc}
  41e9fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  41e9fe:	bf1a      	itte	ne
  41ea00:	4619      	movne	r1, r3
  41ea02:	4610      	movne	r0, r2
  41ea04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  41ea08:	bf1c      	itt	ne
  41ea0a:	460b      	movne	r3, r1
  41ea0c:	4602      	movne	r2, r0
  41ea0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41ea12:	bf06      	itte	eq
  41ea14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  41ea18:	ea91 0f03 	teqeq	r1, r3
  41ea1c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  41ea20:	bd30      	pop	{r4, r5, pc}
  41ea22:	bf00      	nop

0041ea24 <__aeabi_ui2d>:
  41ea24:	f090 0f00 	teq	r0, #0
  41ea28:	bf04      	itt	eq
  41ea2a:	2100      	moveq	r1, #0
  41ea2c:	4770      	bxeq	lr
  41ea2e:	b530      	push	{r4, r5, lr}
  41ea30:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41ea34:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41ea38:	f04f 0500 	mov.w	r5, #0
  41ea3c:	f04f 0100 	mov.w	r1, #0
  41ea40:	e750      	b.n	41e8e4 <__adddf3+0x138>
  41ea42:	bf00      	nop

0041ea44 <__aeabi_i2d>:
  41ea44:	f090 0f00 	teq	r0, #0
  41ea48:	bf04      	itt	eq
  41ea4a:	2100      	moveq	r1, #0
  41ea4c:	4770      	bxeq	lr
  41ea4e:	b530      	push	{r4, r5, lr}
  41ea50:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41ea54:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41ea58:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  41ea5c:	bf48      	it	mi
  41ea5e:	4240      	negmi	r0, r0
  41ea60:	f04f 0100 	mov.w	r1, #0
  41ea64:	e73e      	b.n	41e8e4 <__adddf3+0x138>
  41ea66:	bf00      	nop

0041ea68 <__aeabi_f2d>:
  41ea68:	0042      	lsls	r2, r0, #1
  41ea6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
  41ea6e:	ea4f 0131 	mov.w	r1, r1, rrx
  41ea72:	ea4f 7002 	mov.w	r0, r2, lsl #28
  41ea76:	bf1f      	itttt	ne
  41ea78:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  41ea7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41ea80:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  41ea84:	4770      	bxne	lr
  41ea86:	f092 0f00 	teq	r2, #0
  41ea8a:	bf14      	ite	ne
  41ea8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  41ea90:	4770      	bxeq	lr
  41ea92:	b530      	push	{r4, r5, lr}
  41ea94:	f44f 7460 	mov.w	r4, #896	; 0x380
  41ea98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  41ea9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41eaa0:	e720      	b.n	41e8e4 <__adddf3+0x138>
  41eaa2:	bf00      	nop

0041eaa4 <__aeabi_ul2d>:
  41eaa4:	ea50 0201 	orrs.w	r2, r0, r1
  41eaa8:	bf08      	it	eq
  41eaaa:	4770      	bxeq	lr
  41eaac:	b530      	push	{r4, r5, lr}
  41eaae:	f04f 0500 	mov.w	r5, #0
  41eab2:	e00a      	b.n	41eaca <__aeabi_l2d+0x16>

0041eab4 <__aeabi_l2d>:
  41eab4:	ea50 0201 	orrs.w	r2, r0, r1
  41eab8:	bf08      	it	eq
  41eaba:	4770      	bxeq	lr
  41eabc:	b530      	push	{r4, r5, lr}
  41eabe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  41eac2:	d502      	bpl.n	41eaca <__aeabi_l2d+0x16>
  41eac4:	4240      	negs	r0, r0
  41eac6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  41eaca:	f44f 6480 	mov.w	r4, #1024	; 0x400
  41eace:	f104 0432 	add.w	r4, r4, #50	; 0x32
  41ead2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  41ead6:	f43f aedc 	beq.w	41e892 <__adddf3+0xe6>
  41eada:	f04f 0203 	mov.w	r2, #3
  41eade:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41eae2:	bf18      	it	ne
  41eae4:	3203      	addne	r2, #3
  41eae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  41eaea:	bf18      	it	ne
  41eaec:	3203      	addne	r2, #3
  41eaee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  41eaf2:	f1c2 0320 	rsb	r3, r2, #32
  41eaf6:	fa00 fc03 	lsl.w	ip, r0, r3
  41eafa:	fa20 f002 	lsr.w	r0, r0, r2
  41eafe:	fa01 fe03 	lsl.w	lr, r1, r3
  41eb02:	ea40 000e 	orr.w	r0, r0, lr
  41eb06:	fa21 f102 	lsr.w	r1, r1, r2
  41eb0a:	4414      	add	r4, r2
  41eb0c:	e6c1      	b.n	41e892 <__adddf3+0xe6>
  41eb0e:	bf00      	nop

0041eb10 <__aeabi_dmul>:
  41eb10:	b570      	push	{r4, r5, r6, lr}
  41eb12:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41eb16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41eb1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41eb1e:	bf1d      	ittte	ne
  41eb20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41eb24:	ea94 0f0c 	teqne	r4, ip
  41eb28:	ea95 0f0c 	teqne	r5, ip
  41eb2c:	f000 f8de 	bleq	41ecec <__aeabi_dmul+0x1dc>
  41eb30:	442c      	add	r4, r5
  41eb32:	ea81 0603 	eor.w	r6, r1, r3
  41eb36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  41eb3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  41eb3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  41eb42:	bf18      	it	ne
  41eb44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  41eb48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41eb4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  41eb50:	d038      	beq.n	41ebc4 <__aeabi_dmul+0xb4>
  41eb52:	fba0 ce02 	umull	ip, lr, r0, r2
  41eb56:	f04f 0500 	mov.w	r5, #0
  41eb5a:	fbe1 e502 	umlal	lr, r5, r1, r2
  41eb5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  41eb62:	fbe0 e503 	umlal	lr, r5, r0, r3
  41eb66:	f04f 0600 	mov.w	r6, #0
  41eb6a:	fbe1 5603 	umlal	r5, r6, r1, r3
  41eb6e:	f09c 0f00 	teq	ip, #0
  41eb72:	bf18      	it	ne
  41eb74:	f04e 0e01 	orrne.w	lr, lr, #1
  41eb78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  41eb7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  41eb80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  41eb84:	d204      	bcs.n	41eb90 <__aeabi_dmul+0x80>
  41eb86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  41eb8a:	416d      	adcs	r5, r5
  41eb8c:	eb46 0606 	adc.w	r6, r6, r6
  41eb90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  41eb94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  41eb98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  41eb9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  41eba0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  41eba4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41eba8:	bf88      	it	hi
  41ebaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41ebae:	d81e      	bhi.n	41ebee <__aeabi_dmul+0xde>
  41ebb0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  41ebb4:	bf08      	it	eq
  41ebb6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  41ebba:	f150 0000 	adcs.w	r0, r0, #0
  41ebbe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41ebc2:	bd70      	pop	{r4, r5, r6, pc}
  41ebc4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  41ebc8:	ea46 0101 	orr.w	r1, r6, r1
  41ebcc:	ea40 0002 	orr.w	r0, r0, r2
  41ebd0:	ea81 0103 	eor.w	r1, r1, r3
  41ebd4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  41ebd8:	bfc2      	ittt	gt
  41ebda:	ebd4 050c 	rsbsgt	r5, r4, ip
  41ebde:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41ebe2:	bd70      	popgt	{r4, r5, r6, pc}
  41ebe4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41ebe8:	f04f 0e00 	mov.w	lr, #0
  41ebec:	3c01      	subs	r4, #1
  41ebee:	f300 80ab 	bgt.w	41ed48 <__aeabi_dmul+0x238>
  41ebf2:	f114 0f36 	cmn.w	r4, #54	; 0x36
  41ebf6:	bfde      	ittt	le
  41ebf8:	2000      	movle	r0, #0
  41ebfa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  41ebfe:	bd70      	pople	{r4, r5, r6, pc}
  41ec00:	f1c4 0400 	rsb	r4, r4, #0
  41ec04:	3c20      	subs	r4, #32
  41ec06:	da35      	bge.n	41ec74 <__aeabi_dmul+0x164>
  41ec08:	340c      	adds	r4, #12
  41ec0a:	dc1b      	bgt.n	41ec44 <__aeabi_dmul+0x134>
  41ec0c:	f104 0414 	add.w	r4, r4, #20
  41ec10:	f1c4 0520 	rsb	r5, r4, #32
  41ec14:	fa00 f305 	lsl.w	r3, r0, r5
  41ec18:	fa20 f004 	lsr.w	r0, r0, r4
  41ec1c:	fa01 f205 	lsl.w	r2, r1, r5
  41ec20:	ea40 0002 	orr.w	r0, r0, r2
  41ec24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  41ec28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  41ec2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41ec30:	fa21 f604 	lsr.w	r6, r1, r4
  41ec34:	eb42 0106 	adc.w	r1, r2, r6
  41ec38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41ec3c:	bf08      	it	eq
  41ec3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41ec42:	bd70      	pop	{r4, r5, r6, pc}
  41ec44:	f1c4 040c 	rsb	r4, r4, #12
  41ec48:	f1c4 0520 	rsb	r5, r4, #32
  41ec4c:	fa00 f304 	lsl.w	r3, r0, r4
  41ec50:	fa20 f005 	lsr.w	r0, r0, r5
  41ec54:	fa01 f204 	lsl.w	r2, r1, r4
  41ec58:	ea40 0002 	orr.w	r0, r0, r2
  41ec5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41ec60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  41ec64:	f141 0100 	adc.w	r1, r1, #0
  41ec68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41ec6c:	bf08      	it	eq
  41ec6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41ec72:	bd70      	pop	{r4, r5, r6, pc}
  41ec74:	f1c4 0520 	rsb	r5, r4, #32
  41ec78:	fa00 f205 	lsl.w	r2, r0, r5
  41ec7c:	ea4e 0e02 	orr.w	lr, lr, r2
  41ec80:	fa20 f304 	lsr.w	r3, r0, r4
  41ec84:	fa01 f205 	lsl.w	r2, r1, r5
  41ec88:	ea43 0302 	orr.w	r3, r3, r2
  41ec8c:	fa21 f004 	lsr.w	r0, r1, r4
  41ec90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41ec94:	fa21 f204 	lsr.w	r2, r1, r4
  41ec98:	ea20 0002 	bic.w	r0, r0, r2
  41ec9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  41eca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  41eca4:	bf08      	it	eq
  41eca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  41ecaa:	bd70      	pop	{r4, r5, r6, pc}
  41ecac:	f094 0f00 	teq	r4, #0
  41ecb0:	d10f      	bne.n	41ecd2 <__aeabi_dmul+0x1c2>
  41ecb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  41ecb6:	0040      	lsls	r0, r0, #1
  41ecb8:	eb41 0101 	adc.w	r1, r1, r1
  41ecbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41ecc0:	bf08      	it	eq
  41ecc2:	3c01      	subeq	r4, #1
  41ecc4:	d0f7      	beq.n	41ecb6 <__aeabi_dmul+0x1a6>
  41ecc6:	ea41 0106 	orr.w	r1, r1, r6
  41ecca:	f095 0f00 	teq	r5, #0
  41ecce:	bf18      	it	ne
  41ecd0:	4770      	bxne	lr
  41ecd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  41ecd6:	0052      	lsls	r2, r2, #1
  41ecd8:	eb43 0303 	adc.w	r3, r3, r3
  41ecdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  41ece0:	bf08      	it	eq
  41ece2:	3d01      	subeq	r5, #1
  41ece4:	d0f7      	beq.n	41ecd6 <__aeabi_dmul+0x1c6>
  41ece6:	ea43 0306 	orr.w	r3, r3, r6
  41ecea:	4770      	bx	lr
  41ecec:	ea94 0f0c 	teq	r4, ip
  41ecf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41ecf4:	bf18      	it	ne
  41ecf6:	ea95 0f0c 	teqne	r5, ip
  41ecfa:	d00c      	beq.n	41ed16 <__aeabi_dmul+0x206>
  41ecfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41ed00:	bf18      	it	ne
  41ed02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41ed06:	d1d1      	bne.n	41ecac <__aeabi_dmul+0x19c>
  41ed08:	ea81 0103 	eor.w	r1, r1, r3
  41ed0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41ed10:	f04f 0000 	mov.w	r0, #0
  41ed14:	bd70      	pop	{r4, r5, r6, pc}
  41ed16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41ed1a:	bf06      	itte	eq
  41ed1c:	4610      	moveq	r0, r2
  41ed1e:	4619      	moveq	r1, r3
  41ed20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41ed24:	d019      	beq.n	41ed5a <__aeabi_dmul+0x24a>
  41ed26:	ea94 0f0c 	teq	r4, ip
  41ed2a:	d102      	bne.n	41ed32 <__aeabi_dmul+0x222>
  41ed2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  41ed30:	d113      	bne.n	41ed5a <__aeabi_dmul+0x24a>
  41ed32:	ea95 0f0c 	teq	r5, ip
  41ed36:	d105      	bne.n	41ed44 <__aeabi_dmul+0x234>
  41ed38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  41ed3c:	bf1c      	itt	ne
  41ed3e:	4610      	movne	r0, r2
  41ed40:	4619      	movne	r1, r3
  41ed42:	d10a      	bne.n	41ed5a <__aeabi_dmul+0x24a>
  41ed44:	ea81 0103 	eor.w	r1, r1, r3
  41ed48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  41ed4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41ed50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  41ed54:	f04f 0000 	mov.w	r0, #0
  41ed58:	bd70      	pop	{r4, r5, r6, pc}
  41ed5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  41ed5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  41ed62:	bd70      	pop	{r4, r5, r6, pc}

0041ed64 <__aeabi_ddiv>:
  41ed64:	b570      	push	{r4, r5, r6, lr}
  41ed66:	f04f 0cff 	mov.w	ip, #255	; 0xff
  41ed6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  41ed6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  41ed72:	bf1d      	ittte	ne
  41ed74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  41ed78:	ea94 0f0c 	teqne	r4, ip
  41ed7c:	ea95 0f0c 	teqne	r5, ip
  41ed80:	f000 f8a7 	bleq	41eed2 <__aeabi_ddiv+0x16e>
  41ed84:	eba4 0405 	sub.w	r4, r4, r5
  41ed88:	ea81 0e03 	eor.w	lr, r1, r3
  41ed8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41ed90:	ea4f 3101 	mov.w	r1, r1, lsl #12
  41ed94:	f000 8088 	beq.w	41eea8 <__aeabi_ddiv+0x144>
  41ed98:	ea4f 3303 	mov.w	r3, r3, lsl #12
  41ed9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  41eda0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  41eda4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  41eda8:	ea4f 2202 	mov.w	r2, r2, lsl #8
  41edac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  41edb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  41edb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
  41edb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  41edbc:	429d      	cmp	r5, r3
  41edbe:	bf08      	it	eq
  41edc0:	4296      	cmpeq	r6, r2
  41edc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  41edc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
  41edca:	d202      	bcs.n	41edd2 <__aeabi_ddiv+0x6e>
  41edcc:	085b      	lsrs	r3, r3, #1
  41edce:	ea4f 0232 	mov.w	r2, r2, rrx
  41edd2:	1ab6      	subs	r6, r6, r2
  41edd4:	eb65 0503 	sbc.w	r5, r5, r3
  41edd8:	085b      	lsrs	r3, r3, #1
  41edda:	ea4f 0232 	mov.w	r2, r2, rrx
  41edde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  41ede2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  41ede6:	ebb6 0e02 	subs.w	lr, r6, r2
  41edea:	eb75 0e03 	sbcs.w	lr, r5, r3
  41edee:	bf22      	ittt	cs
  41edf0:	1ab6      	subcs	r6, r6, r2
  41edf2:	4675      	movcs	r5, lr
  41edf4:	ea40 000c 	orrcs.w	r0, r0, ip
  41edf8:	085b      	lsrs	r3, r3, #1
  41edfa:	ea4f 0232 	mov.w	r2, r2, rrx
  41edfe:	ebb6 0e02 	subs.w	lr, r6, r2
  41ee02:	eb75 0e03 	sbcs.w	lr, r5, r3
  41ee06:	bf22      	ittt	cs
  41ee08:	1ab6      	subcs	r6, r6, r2
  41ee0a:	4675      	movcs	r5, lr
  41ee0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  41ee10:	085b      	lsrs	r3, r3, #1
  41ee12:	ea4f 0232 	mov.w	r2, r2, rrx
  41ee16:	ebb6 0e02 	subs.w	lr, r6, r2
  41ee1a:	eb75 0e03 	sbcs.w	lr, r5, r3
  41ee1e:	bf22      	ittt	cs
  41ee20:	1ab6      	subcs	r6, r6, r2
  41ee22:	4675      	movcs	r5, lr
  41ee24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  41ee28:	085b      	lsrs	r3, r3, #1
  41ee2a:	ea4f 0232 	mov.w	r2, r2, rrx
  41ee2e:	ebb6 0e02 	subs.w	lr, r6, r2
  41ee32:	eb75 0e03 	sbcs.w	lr, r5, r3
  41ee36:	bf22      	ittt	cs
  41ee38:	1ab6      	subcs	r6, r6, r2
  41ee3a:	4675      	movcs	r5, lr
  41ee3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  41ee40:	ea55 0e06 	orrs.w	lr, r5, r6
  41ee44:	d018      	beq.n	41ee78 <__aeabi_ddiv+0x114>
  41ee46:	ea4f 1505 	mov.w	r5, r5, lsl #4
  41ee4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  41ee4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
  41ee52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  41ee56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  41ee5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  41ee5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  41ee62:	d1c0      	bne.n	41ede6 <__aeabi_ddiv+0x82>
  41ee64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41ee68:	d10b      	bne.n	41ee82 <__aeabi_ddiv+0x11e>
  41ee6a:	ea41 0100 	orr.w	r1, r1, r0
  41ee6e:	f04f 0000 	mov.w	r0, #0
  41ee72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  41ee76:	e7b6      	b.n	41ede6 <__aeabi_ddiv+0x82>
  41ee78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  41ee7c:	bf04      	itt	eq
  41ee7e:	4301      	orreq	r1, r0
  41ee80:	2000      	moveq	r0, #0
  41ee82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  41ee86:	bf88      	it	hi
  41ee88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  41ee8c:	f63f aeaf 	bhi.w	41ebee <__aeabi_dmul+0xde>
  41ee90:	ebb5 0c03 	subs.w	ip, r5, r3
  41ee94:	bf04      	itt	eq
  41ee96:	ebb6 0c02 	subseq.w	ip, r6, r2
  41ee9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  41ee9e:	f150 0000 	adcs.w	r0, r0, #0
  41eea2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  41eea6:	bd70      	pop	{r4, r5, r6, pc}
  41eea8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  41eeac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  41eeb0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  41eeb4:	bfc2      	ittt	gt
  41eeb6:	ebd4 050c 	rsbsgt	r5, r4, ip
  41eeba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  41eebe:	bd70      	popgt	{r4, r5, r6, pc}
  41eec0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41eec4:	f04f 0e00 	mov.w	lr, #0
  41eec8:	3c01      	subs	r4, #1
  41eeca:	e690      	b.n	41ebee <__aeabi_dmul+0xde>
  41eecc:	ea45 0e06 	orr.w	lr, r5, r6
  41eed0:	e68d      	b.n	41ebee <__aeabi_dmul+0xde>
  41eed2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  41eed6:	ea94 0f0c 	teq	r4, ip
  41eeda:	bf08      	it	eq
  41eedc:	ea95 0f0c 	teqeq	r5, ip
  41eee0:	f43f af3b 	beq.w	41ed5a <__aeabi_dmul+0x24a>
  41eee4:	ea94 0f0c 	teq	r4, ip
  41eee8:	d10a      	bne.n	41ef00 <__aeabi_ddiv+0x19c>
  41eeea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  41eeee:	f47f af34 	bne.w	41ed5a <__aeabi_dmul+0x24a>
  41eef2:	ea95 0f0c 	teq	r5, ip
  41eef6:	f47f af25 	bne.w	41ed44 <__aeabi_dmul+0x234>
  41eefa:	4610      	mov	r0, r2
  41eefc:	4619      	mov	r1, r3
  41eefe:	e72c      	b.n	41ed5a <__aeabi_dmul+0x24a>
  41ef00:	ea95 0f0c 	teq	r5, ip
  41ef04:	d106      	bne.n	41ef14 <__aeabi_ddiv+0x1b0>
  41ef06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  41ef0a:	f43f aefd 	beq.w	41ed08 <__aeabi_dmul+0x1f8>
  41ef0e:	4610      	mov	r0, r2
  41ef10:	4619      	mov	r1, r3
  41ef12:	e722      	b.n	41ed5a <__aeabi_dmul+0x24a>
  41ef14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  41ef18:	bf18      	it	ne
  41ef1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  41ef1e:	f47f aec5 	bne.w	41ecac <__aeabi_dmul+0x19c>
  41ef22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  41ef26:	f47f af0d 	bne.w	41ed44 <__aeabi_dmul+0x234>
  41ef2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  41ef2e:	f47f aeeb 	bne.w	41ed08 <__aeabi_dmul+0x1f8>
  41ef32:	e712      	b.n	41ed5a <__aeabi_dmul+0x24a>

0041ef34 <__aeabi_d2uiz>:
  41ef34:	004a      	lsls	r2, r1, #1
  41ef36:	d211      	bcs.n	41ef5c <__aeabi_d2uiz+0x28>
  41ef38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  41ef3c:	d211      	bcs.n	41ef62 <__aeabi_d2uiz+0x2e>
  41ef3e:	d50d      	bpl.n	41ef5c <__aeabi_d2uiz+0x28>
  41ef40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  41ef44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  41ef48:	d40e      	bmi.n	41ef68 <__aeabi_d2uiz+0x34>
  41ef4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41ef4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  41ef52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  41ef56:	fa23 f002 	lsr.w	r0, r3, r2
  41ef5a:	4770      	bx	lr
  41ef5c:	f04f 0000 	mov.w	r0, #0
  41ef60:	4770      	bx	lr
  41ef62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  41ef66:	d102      	bne.n	41ef6e <__aeabi_d2uiz+0x3a>
  41ef68:	f04f 30ff 	mov.w	r0, #4294967295
  41ef6c:	4770      	bx	lr
  41ef6e:	f04f 0000 	mov.w	r0, #0
  41ef72:	4770      	bx	lr

0041ef74 <__aeabi_d2f>:
  41ef74:	ea4f 0241 	mov.w	r2, r1, lsl #1
  41ef78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  41ef7c:	bf24      	itt	cs
  41ef7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  41ef82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  41ef86:	d90d      	bls.n	41efa4 <__aeabi_d2f+0x30>
  41ef88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  41ef8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  41ef90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  41ef94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  41ef98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  41ef9c:	bf08      	it	eq
  41ef9e:	f020 0001 	biceq.w	r0, r0, #1
  41efa2:	4770      	bx	lr
  41efa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  41efa8:	d121      	bne.n	41efee <__aeabi_d2f+0x7a>
  41efaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  41efae:	bfbc      	itt	lt
  41efb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  41efb4:	4770      	bxlt	lr
  41efb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  41efba:	ea4f 5252 	mov.w	r2, r2, lsr #21
  41efbe:	f1c2 0218 	rsb	r2, r2, #24
  41efc2:	f1c2 0c20 	rsb	ip, r2, #32
  41efc6:	fa10 f30c 	lsls.w	r3, r0, ip
  41efca:	fa20 f002 	lsr.w	r0, r0, r2
  41efce:	bf18      	it	ne
  41efd0:	f040 0001 	orrne.w	r0, r0, #1
  41efd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  41efd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  41efdc:	fa03 fc0c 	lsl.w	ip, r3, ip
  41efe0:	ea40 000c 	orr.w	r0, r0, ip
  41efe4:	fa23 f302 	lsr.w	r3, r3, r2
  41efe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  41efec:	e7cc      	b.n	41ef88 <__aeabi_d2f+0x14>
  41efee:	ea7f 5362 	mvns.w	r3, r2, asr #21
  41eff2:	d107      	bne.n	41f004 <__aeabi_d2f+0x90>
  41eff4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  41eff8:	bf1e      	ittt	ne
  41effa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  41effe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  41f002:	4770      	bxne	lr
  41f004:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  41f008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  41f00c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  41f010:	4770      	bx	lr
  41f012:	bf00      	nop

0041f014 <__aeabi_uldivmod>:
  41f014:	b953      	cbnz	r3, 41f02c <__aeabi_uldivmod+0x18>
  41f016:	b94a      	cbnz	r2, 41f02c <__aeabi_uldivmod+0x18>
  41f018:	2900      	cmp	r1, #0
  41f01a:	bf08      	it	eq
  41f01c:	2800      	cmpeq	r0, #0
  41f01e:	bf1c      	itt	ne
  41f020:	f04f 31ff 	movne.w	r1, #4294967295
  41f024:	f04f 30ff 	movne.w	r0, #4294967295
  41f028:	f000 b97a 	b.w	41f320 <__aeabi_idiv0>
  41f02c:	f1ad 0c08 	sub.w	ip, sp, #8
  41f030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  41f034:	f000 f806 	bl	41f044 <__udivmoddi4>
  41f038:	f8dd e004 	ldr.w	lr, [sp, #4]
  41f03c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  41f040:	b004      	add	sp, #16
  41f042:	4770      	bx	lr

0041f044 <__udivmoddi4>:
  41f044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41f048:	468c      	mov	ip, r1
  41f04a:	460d      	mov	r5, r1
  41f04c:	4604      	mov	r4, r0
  41f04e:	9e08      	ldr	r6, [sp, #32]
  41f050:	2b00      	cmp	r3, #0
  41f052:	d151      	bne.n	41f0f8 <__udivmoddi4+0xb4>
  41f054:	428a      	cmp	r2, r1
  41f056:	4617      	mov	r7, r2
  41f058:	d96d      	bls.n	41f136 <__udivmoddi4+0xf2>
  41f05a:	fab2 fe82 	clz	lr, r2
  41f05e:	f1be 0f00 	cmp.w	lr, #0
  41f062:	d00b      	beq.n	41f07c <__udivmoddi4+0x38>
  41f064:	f1ce 0c20 	rsb	ip, lr, #32
  41f068:	fa01 f50e 	lsl.w	r5, r1, lr
  41f06c:	fa20 fc0c 	lsr.w	ip, r0, ip
  41f070:	fa02 f70e 	lsl.w	r7, r2, lr
  41f074:	ea4c 0c05 	orr.w	ip, ip, r5
  41f078:	fa00 f40e 	lsl.w	r4, r0, lr
  41f07c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  41f080:	0c25      	lsrs	r5, r4, #16
  41f082:	fbbc f8fa 	udiv	r8, ip, sl
  41f086:	fa1f f987 	uxth.w	r9, r7
  41f08a:	fb0a cc18 	mls	ip, sl, r8, ip
  41f08e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  41f092:	fb08 f309 	mul.w	r3, r8, r9
  41f096:	42ab      	cmp	r3, r5
  41f098:	d90a      	bls.n	41f0b0 <__udivmoddi4+0x6c>
  41f09a:	19ed      	adds	r5, r5, r7
  41f09c:	f108 32ff 	add.w	r2, r8, #4294967295
  41f0a0:	f080 8123 	bcs.w	41f2ea <__udivmoddi4+0x2a6>
  41f0a4:	42ab      	cmp	r3, r5
  41f0a6:	f240 8120 	bls.w	41f2ea <__udivmoddi4+0x2a6>
  41f0aa:	f1a8 0802 	sub.w	r8, r8, #2
  41f0ae:	443d      	add	r5, r7
  41f0b0:	1aed      	subs	r5, r5, r3
  41f0b2:	b2a4      	uxth	r4, r4
  41f0b4:	fbb5 f0fa 	udiv	r0, r5, sl
  41f0b8:	fb0a 5510 	mls	r5, sl, r0, r5
  41f0bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  41f0c0:	fb00 f909 	mul.w	r9, r0, r9
  41f0c4:	45a1      	cmp	r9, r4
  41f0c6:	d909      	bls.n	41f0dc <__udivmoddi4+0x98>
  41f0c8:	19e4      	adds	r4, r4, r7
  41f0ca:	f100 33ff 	add.w	r3, r0, #4294967295
  41f0ce:	f080 810a 	bcs.w	41f2e6 <__udivmoddi4+0x2a2>
  41f0d2:	45a1      	cmp	r9, r4
  41f0d4:	f240 8107 	bls.w	41f2e6 <__udivmoddi4+0x2a2>
  41f0d8:	3802      	subs	r0, #2
  41f0da:	443c      	add	r4, r7
  41f0dc:	eba4 0409 	sub.w	r4, r4, r9
  41f0e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41f0e4:	2100      	movs	r1, #0
  41f0e6:	2e00      	cmp	r6, #0
  41f0e8:	d061      	beq.n	41f1ae <__udivmoddi4+0x16a>
  41f0ea:	fa24 f40e 	lsr.w	r4, r4, lr
  41f0ee:	2300      	movs	r3, #0
  41f0f0:	6034      	str	r4, [r6, #0]
  41f0f2:	6073      	str	r3, [r6, #4]
  41f0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41f0f8:	428b      	cmp	r3, r1
  41f0fa:	d907      	bls.n	41f10c <__udivmoddi4+0xc8>
  41f0fc:	2e00      	cmp	r6, #0
  41f0fe:	d054      	beq.n	41f1aa <__udivmoddi4+0x166>
  41f100:	2100      	movs	r1, #0
  41f102:	e886 0021 	stmia.w	r6, {r0, r5}
  41f106:	4608      	mov	r0, r1
  41f108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41f10c:	fab3 f183 	clz	r1, r3
  41f110:	2900      	cmp	r1, #0
  41f112:	f040 808e 	bne.w	41f232 <__udivmoddi4+0x1ee>
  41f116:	42ab      	cmp	r3, r5
  41f118:	d302      	bcc.n	41f120 <__udivmoddi4+0xdc>
  41f11a:	4282      	cmp	r2, r0
  41f11c:	f200 80fa 	bhi.w	41f314 <__udivmoddi4+0x2d0>
  41f120:	1a84      	subs	r4, r0, r2
  41f122:	eb65 0503 	sbc.w	r5, r5, r3
  41f126:	2001      	movs	r0, #1
  41f128:	46ac      	mov	ip, r5
  41f12a:	2e00      	cmp	r6, #0
  41f12c:	d03f      	beq.n	41f1ae <__udivmoddi4+0x16a>
  41f12e:	e886 1010 	stmia.w	r6, {r4, ip}
  41f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41f136:	b912      	cbnz	r2, 41f13e <__udivmoddi4+0xfa>
  41f138:	2701      	movs	r7, #1
  41f13a:	fbb7 f7f2 	udiv	r7, r7, r2
  41f13e:	fab7 fe87 	clz	lr, r7
  41f142:	f1be 0f00 	cmp.w	lr, #0
  41f146:	d134      	bne.n	41f1b2 <__udivmoddi4+0x16e>
  41f148:	1beb      	subs	r3, r5, r7
  41f14a:	0c3a      	lsrs	r2, r7, #16
  41f14c:	fa1f fc87 	uxth.w	ip, r7
  41f150:	2101      	movs	r1, #1
  41f152:	fbb3 f8f2 	udiv	r8, r3, r2
  41f156:	0c25      	lsrs	r5, r4, #16
  41f158:	fb02 3318 	mls	r3, r2, r8, r3
  41f15c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41f160:	fb0c f308 	mul.w	r3, ip, r8
  41f164:	42ab      	cmp	r3, r5
  41f166:	d907      	bls.n	41f178 <__udivmoddi4+0x134>
  41f168:	19ed      	adds	r5, r5, r7
  41f16a:	f108 30ff 	add.w	r0, r8, #4294967295
  41f16e:	d202      	bcs.n	41f176 <__udivmoddi4+0x132>
  41f170:	42ab      	cmp	r3, r5
  41f172:	f200 80d1 	bhi.w	41f318 <__udivmoddi4+0x2d4>
  41f176:	4680      	mov	r8, r0
  41f178:	1aed      	subs	r5, r5, r3
  41f17a:	b2a3      	uxth	r3, r4
  41f17c:	fbb5 f0f2 	udiv	r0, r5, r2
  41f180:	fb02 5510 	mls	r5, r2, r0, r5
  41f184:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  41f188:	fb0c fc00 	mul.w	ip, ip, r0
  41f18c:	45a4      	cmp	ip, r4
  41f18e:	d907      	bls.n	41f1a0 <__udivmoddi4+0x15c>
  41f190:	19e4      	adds	r4, r4, r7
  41f192:	f100 33ff 	add.w	r3, r0, #4294967295
  41f196:	d202      	bcs.n	41f19e <__udivmoddi4+0x15a>
  41f198:	45a4      	cmp	ip, r4
  41f19a:	f200 80b8 	bhi.w	41f30e <__udivmoddi4+0x2ca>
  41f19e:	4618      	mov	r0, r3
  41f1a0:	eba4 040c 	sub.w	r4, r4, ip
  41f1a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  41f1a8:	e79d      	b.n	41f0e6 <__udivmoddi4+0xa2>
  41f1aa:	4631      	mov	r1, r6
  41f1ac:	4630      	mov	r0, r6
  41f1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41f1b2:	f1ce 0420 	rsb	r4, lr, #32
  41f1b6:	fa05 f30e 	lsl.w	r3, r5, lr
  41f1ba:	fa07 f70e 	lsl.w	r7, r7, lr
  41f1be:	fa20 f804 	lsr.w	r8, r0, r4
  41f1c2:	0c3a      	lsrs	r2, r7, #16
  41f1c4:	fa25 f404 	lsr.w	r4, r5, r4
  41f1c8:	ea48 0803 	orr.w	r8, r8, r3
  41f1cc:	fbb4 f1f2 	udiv	r1, r4, r2
  41f1d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  41f1d4:	fb02 4411 	mls	r4, r2, r1, r4
  41f1d8:	fa1f fc87 	uxth.w	ip, r7
  41f1dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  41f1e0:	fb01 f30c 	mul.w	r3, r1, ip
  41f1e4:	42ab      	cmp	r3, r5
  41f1e6:	fa00 f40e 	lsl.w	r4, r0, lr
  41f1ea:	d909      	bls.n	41f200 <__udivmoddi4+0x1bc>
  41f1ec:	19ed      	adds	r5, r5, r7
  41f1ee:	f101 30ff 	add.w	r0, r1, #4294967295
  41f1f2:	f080 808a 	bcs.w	41f30a <__udivmoddi4+0x2c6>
  41f1f6:	42ab      	cmp	r3, r5
  41f1f8:	f240 8087 	bls.w	41f30a <__udivmoddi4+0x2c6>
  41f1fc:	3902      	subs	r1, #2
  41f1fe:	443d      	add	r5, r7
  41f200:	1aeb      	subs	r3, r5, r3
  41f202:	fa1f f588 	uxth.w	r5, r8
  41f206:	fbb3 f0f2 	udiv	r0, r3, r2
  41f20a:	fb02 3310 	mls	r3, r2, r0, r3
  41f20e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  41f212:	fb00 f30c 	mul.w	r3, r0, ip
  41f216:	42ab      	cmp	r3, r5
  41f218:	d907      	bls.n	41f22a <__udivmoddi4+0x1e6>
  41f21a:	19ed      	adds	r5, r5, r7
  41f21c:	f100 38ff 	add.w	r8, r0, #4294967295
  41f220:	d26f      	bcs.n	41f302 <__udivmoddi4+0x2be>
  41f222:	42ab      	cmp	r3, r5
  41f224:	d96d      	bls.n	41f302 <__udivmoddi4+0x2be>
  41f226:	3802      	subs	r0, #2
  41f228:	443d      	add	r5, r7
  41f22a:	1aeb      	subs	r3, r5, r3
  41f22c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  41f230:	e78f      	b.n	41f152 <__udivmoddi4+0x10e>
  41f232:	f1c1 0720 	rsb	r7, r1, #32
  41f236:	fa22 f807 	lsr.w	r8, r2, r7
  41f23a:	408b      	lsls	r3, r1
  41f23c:	fa05 f401 	lsl.w	r4, r5, r1
  41f240:	ea48 0303 	orr.w	r3, r8, r3
  41f244:	fa20 fe07 	lsr.w	lr, r0, r7
  41f248:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  41f24c:	40fd      	lsrs	r5, r7
  41f24e:	ea4e 0e04 	orr.w	lr, lr, r4
  41f252:	fbb5 f9fc 	udiv	r9, r5, ip
  41f256:	ea4f 441e 	mov.w	r4, lr, lsr #16
  41f25a:	fb0c 5519 	mls	r5, ip, r9, r5
  41f25e:	fa1f f883 	uxth.w	r8, r3
  41f262:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  41f266:	fb09 f408 	mul.w	r4, r9, r8
  41f26a:	42ac      	cmp	r4, r5
  41f26c:	fa02 f201 	lsl.w	r2, r2, r1
  41f270:	fa00 fa01 	lsl.w	sl, r0, r1
  41f274:	d908      	bls.n	41f288 <__udivmoddi4+0x244>
  41f276:	18ed      	adds	r5, r5, r3
  41f278:	f109 30ff 	add.w	r0, r9, #4294967295
  41f27c:	d243      	bcs.n	41f306 <__udivmoddi4+0x2c2>
  41f27e:	42ac      	cmp	r4, r5
  41f280:	d941      	bls.n	41f306 <__udivmoddi4+0x2c2>
  41f282:	f1a9 0902 	sub.w	r9, r9, #2
  41f286:	441d      	add	r5, r3
  41f288:	1b2d      	subs	r5, r5, r4
  41f28a:	fa1f fe8e 	uxth.w	lr, lr
  41f28e:	fbb5 f0fc 	udiv	r0, r5, ip
  41f292:	fb0c 5510 	mls	r5, ip, r0, r5
  41f296:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  41f29a:	fb00 f808 	mul.w	r8, r0, r8
  41f29e:	45a0      	cmp	r8, r4
  41f2a0:	d907      	bls.n	41f2b2 <__udivmoddi4+0x26e>
  41f2a2:	18e4      	adds	r4, r4, r3
  41f2a4:	f100 35ff 	add.w	r5, r0, #4294967295
  41f2a8:	d229      	bcs.n	41f2fe <__udivmoddi4+0x2ba>
  41f2aa:	45a0      	cmp	r8, r4
  41f2ac:	d927      	bls.n	41f2fe <__udivmoddi4+0x2ba>
  41f2ae:	3802      	subs	r0, #2
  41f2b0:	441c      	add	r4, r3
  41f2b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  41f2b6:	eba4 0408 	sub.w	r4, r4, r8
  41f2ba:	fba0 8902 	umull	r8, r9, r0, r2
  41f2be:	454c      	cmp	r4, r9
  41f2c0:	46c6      	mov	lr, r8
  41f2c2:	464d      	mov	r5, r9
  41f2c4:	d315      	bcc.n	41f2f2 <__udivmoddi4+0x2ae>
  41f2c6:	d012      	beq.n	41f2ee <__udivmoddi4+0x2aa>
  41f2c8:	b156      	cbz	r6, 41f2e0 <__udivmoddi4+0x29c>
  41f2ca:	ebba 030e 	subs.w	r3, sl, lr
  41f2ce:	eb64 0405 	sbc.w	r4, r4, r5
  41f2d2:	fa04 f707 	lsl.w	r7, r4, r7
  41f2d6:	40cb      	lsrs	r3, r1
  41f2d8:	431f      	orrs	r7, r3
  41f2da:	40cc      	lsrs	r4, r1
  41f2dc:	6037      	str	r7, [r6, #0]
  41f2de:	6074      	str	r4, [r6, #4]
  41f2e0:	2100      	movs	r1, #0
  41f2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  41f2e6:	4618      	mov	r0, r3
  41f2e8:	e6f8      	b.n	41f0dc <__udivmoddi4+0x98>
  41f2ea:	4690      	mov	r8, r2
  41f2ec:	e6e0      	b.n	41f0b0 <__udivmoddi4+0x6c>
  41f2ee:	45c2      	cmp	sl, r8
  41f2f0:	d2ea      	bcs.n	41f2c8 <__udivmoddi4+0x284>
  41f2f2:	ebb8 0e02 	subs.w	lr, r8, r2
  41f2f6:	eb69 0503 	sbc.w	r5, r9, r3
  41f2fa:	3801      	subs	r0, #1
  41f2fc:	e7e4      	b.n	41f2c8 <__udivmoddi4+0x284>
  41f2fe:	4628      	mov	r0, r5
  41f300:	e7d7      	b.n	41f2b2 <__udivmoddi4+0x26e>
  41f302:	4640      	mov	r0, r8
  41f304:	e791      	b.n	41f22a <__udivmoddi4+0x1e6>
  41f306:	4681      	mov	r9, r0
  41f308:	e7be      	b.n	41f288 <__udivmoddi4+0x244>
  41f30a:	4601      	mov	r1, r0
  41f30c:	e778      	b.n	41f200 <__udivmoddi4+0x1bc>
  41f30e:	3802      	subs	r0, #2
  41f310:	443c      	add	r4, r7
  41f312:	e745      	b.n	41f1a0 <__udivmoddi4+0x15c>
  41f314:	4608      	mov	r0, r1
  41f316:	e708      	b.n	41f12a <__udivmoddi4+0xe6>
  41f318:	f1a8 0802 	sub.w	r8, r8, #2
  41f31c:	443d      	add	r5, r7
  41f31e:	e72b      	b.n	41f178 <__udivmoddi4+0x134>

0041f320 <__aeabi_idiv0>:
  41f320:	4770      	bx	lr
  41f322:	bf00      	nop

0041f324 <__libc_init_array>:
  41f324:	b570      	push	{r4, r5, r6, lr}
  41f326:	4e0f      	ldr	r6, [pc, #60]	; (41f364 <__libc_init_array+0x40>)
  41f328:	4d0f      	ldr	r5, [pc, #60]	; (41f368 <__libc_init_array+0x44>)
  41f32a:	1b76      	subs	r6, r6, r5
  41f32c:	10b6      	asrs	r6, r6, #2
  41f32e:	bf18      	it	ne
  41f330:	2400      	movne	r4, #0
  41f332:	d005      	beq.n	41f340 <__libc_init_array+0x1c>
  41f334:	3401      	adds	r4, #1
  41f336:	f855 3b04 	ldr.w	r3, [r5], #4
  41f33a:	4798      	blx	r3
  41f33c:	42a6      	cmp	r6, r4
  41f33e:	d1f9      	bne.n	41f334 <__libc_init_array+0x10>
  41f340:	4e0a      	ldr	r6, [pc, #40]	; (41f36c <__libc_init_array+0x48>)
  41f342:	4d0b      	ldr	r5, [pc, #44]	; (41f370 <__libc_init_array+0x4c>)
  41f344:	1b76      	subs	r6, r6, r5
  41f346:	f009 fd59 	bl	428dfc <_init>
  41f34a:	10b6      	asrs	r6, r6, #2
  41f34c:	bf18      	it	ne
  41f34e:	2400      	movne	r4, #0
  41f350:	d006      	beq.n	41f360 <__libc_init_array+0x3c>
  41f352:	3401      	adds	r4, #1
  41f354:	f855 3b04 	ldr.w	r3, [r5], #4
  41f358:	4798      	blx	r3
  41f35a:	42a6      	cmp	r6, r4
  41f35c:	d1f9      	bne.n	41f352 <__libc_init_array+0x2e>
  41f35e:	bd70      	pop	{r4, r5, r6, pc}
  41f360:	bd70      	pop	{r4, r5, r6, pc}
  41f362:	bf00      	nop
  41f364:	00428e08 	.word	0x00428e08
  41f368:	00428e08 	.word	0x00428e08
  41f36c:	00428e10 	.word	0x00428e10
  41f370:	00428e08 	.word	0x00428e08

0041f374 <iprintf>:
  41f374:	b40f      	push	{r0, r1, r2, r3}
  41f376:	b500      	push	{lr}
  41f378:	4907      	ldr	r1, [pc, #28]	; (41f398 <iprintf+0x24>)
  41f37a:	b083      	sub	sp, #12
  41f37c:	ab04      	add	r3, sp, #16
  41f37e:	6808      	ldr	r0, [r1, #0]
  41f380:	f853 2b04 	ldr.w	r2, [r3], #4
  41f384:	6881      	ldr	r1, [r0, #8]
  41f386:	9301      	str	r3, [sp, #4]
  41f388:	f000 ff68 	bl	42025c <_vfiprintf_r>
  41f38c:	b003      	add	sp, #12
  41f38e:	f85d eb04 	ldr.w	lr, [sp], #4
  41f392:	b004      	add	sp, #16
  41f394:	4770      	bx	lr
  41f396:	bf00      	nop
  41f398:	20400060 	.word	0x20400060

0041f39c <malloc>:
  41f39c:	4b02      	ldr	r3, [pc, #8]	; (41f3a8 <malloc+0xc>)
  41f39e:	4601      	mov	r1, r0
  41f3a0:	6818      	ldr	r0, [r3, #0]
  41f3a2:	f000 b803 	b.w	41f3ac <_malloc_r>
  41f3a6:	bf00      	nop
  41f3a8:	20400060 	.word	0x20400060

0041f3ac <_malloc_r>:
  41f3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f3b0:	f101 060b 	add.w	r6, r1, #11
  41f3b4:	2e16      	cmp	r6, #22
  41f3b6:	b083      	sub	sp, #12
  41f3b8:	4605      	mov	r5, r0
  41f3ba:	f240 809e 	bls.w	41f4fa <_malloc_r+0x14e>
  41f3be:	f036 0607 	bics.w	r6, r6, #7
  41f3c2:	f100 80bd 	bmi.w	41f540 <_malloc_r+0x194>
  41f3c6:	42b1      	cmp	r1, r6
  41f3c8:	f200 80ba 	bhi.w	41f540 <_malloc_r+0x194>
  41f3cc:	f000 fbb6 	bl	41fb3c <__malloc_lock>
  41f3d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  41f3d4:	f0c0 8293 	bcc.w	41f8fe <_malloc_r+0x552>
  41f3d8:	0a73      	lsrs	r3, r6, #9
  41f3da:	f000 80b8 	beq.w	41f54e <_malloc_r+0x1a2>
  41f3de:	2b04      	cmp	r3, #4
  41f3e0:	f200 8179 	bhi.w	41f6d6 <_malloc_r+0x32a>
  41f3e4:	09b3      	lsrs	r3, r6, #6
  41f3e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  41f3ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  41f3ee:	00c3      	lsls	r3, r0, #3
  41f3f0:	4fbf      	ldr	r7, [pc, #764]	; (41f6f0 <_malloc_r+0x344>)
  41f3f2:	443b      	add	r3, r7
  41f3f4:	f1a3 0108 	sub.w	r1, r3, #8
  41f3f8:	685c      	ldr	r4, [r3, #4]
  41f3fa:	42a1      	cmp	r1, r4
  41f3fc:	d106      	bne.n	41f40c <_malloc_r+0x60>
  41f3fe:	e00c      	b.n	41f41a <_malloc_r+0x6e>
  41f400:	2a00      	cmp	r2, #0
  41f402:	f280 80aa 	bge.w	41f55a <_malloc_r+0x1ae>
  41f406:	68e4      	ldr	r4, [r4, #12]
  41f408:	42a1      	cmp	r1, r4
  41f40a:	d006      	beq.n	41f41a <_malloc_r+0x6e>
  41f40c:	6863      	ldr	r3, [r4, #4]
  41f40e:	f023 0303 	bic.w	r3, r3, #3
  41f412:	1b9a      	subs	r2, r3, r6
  41f414:	2a0f      	cmp	r2, #15
  41f416:	ddf3      	ble.n	41f400 <_malloc_r+0x54>
  41f418:	4670      	mov	r0, lr
  41f41a:	693c      	ldr	r4, [r7, #16]
  41f41c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 41f704 <_malloc_r+0x358>
  41f420:	4574      	cmp	r4, lr
  41f422:	f000 81ab 	beq.w	41f77c <_malloc_r+0x3d0>
  41f426:	6863      	ldr	r3, [r4, #4]
  41f428:	f023 0303 	bic.w	r3, r3, #3
  41f42c:	1b9a      	subs	r2, r3, r6
  41f42e:	2a0f      	cmp	r2, #15
  41f430:	f300 8190 	bgt.w	41f754 <_malloc_r+0x3a8>
  41f434:	2a00      	cmp	r2, #0
  41f436:	f8c7 e014 	str.w	lr, [r7, #20]
  41f43a:	f8c7 e010 	str.w	lr, [r7, #16]
  41f43e:	f280 809d 	bge.w	41f57c <_malloc_r+0x1d0>
  41f442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  41f446:	f080 8161 	bcs.w	41f70c <_malloc_r+0x360>
  41f44a:	08db      	lsrs	r3, r3, #3
  41f44c:	f103 0c01 	add.w	ip, r3, #1
  41f450:	1099      	asrs	r1, r3, #2
  41f452:	687a      	ldr	r2, [r7, #4]
  41f454:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  41f458:	f8c4 8008 	str.w	r8, [r4, #8]
  41f45c:	2301      	movs	r3, #1
  41f45e:	408b      	lsls	r3, r1
  41f460:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  41f464:	4313      	orrs	r3, r2
  41f466:	3908      	subs	r1, #8
  41f468:	60e1      	str	r1, [r4, #12]
  41f46a:	607b      	str	r3, [r7, #4]
  41f46c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  41f470:	f8c8 400c 	str.w	r4, [r8, #12]
  41f474:	1082      	asrs	r2, r0, #2
  41f476:	2401      	movs	r4, #1
  41f478:	4094      	lsls	r4, r2
  41f47a:	429c      	cmp	r4, r3
  41f47c:	f200 808b 	bhi.w	41f596 <_malloc_r+0x1ea>
  41f480:	421c      	tst	r4, r3
  41f482:	d106      	bne.n	41f492 <_malloc_r+0xe6>
  41f484:	f020 0003 	bic.w	r0, r0, #3
  41f488:	0064      	lsls	r4, r4, #1
  41f48a:	421c      	tst	r4, r3
  41f48c:	f100 0004 	add.w	r0, r0, #4
  41f490:	d0fa      	beq.n	41f488 <_malloc_r+0xdc>
  41f492:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  41f496:	46cc      	mov	ip, r9
  41f498:	4680      	mov	r8, r0
  41f49a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  41f49e:	459c      	cmp	ip, r3
  41f4a0:	d107      	bne.n	41f4b2 <_malloc_r+0x106>
  41f4a2:	e16d      	b.n	41f780 <_malloc_r+0x3d4>
  41f4a4:	2a00      	cmp	r2, #0
  41f4a6:	f280 817b 	bge.w	41f7a0 <_malloc_r+0x3f4>
  41f4aa:	68db      	ldr	r3, [r3, #12]
  41f4ac:	459c      	cmp	ip, r3
  41f4ae:	f000 8167 	beq.w	41f780 <_malloc_r+0x3d4>
  41f4b2:	6859      	ldr	r1, [r3, #4]
  41f4b4:	f021 0103 	bic.w	r1, r1, #3
  41f4b8:	1b8a      	subs	r2, r1, r6
  41f4ba:	2a0f      	cmp	r2, #15
  41f4bc:	ddf2      	ble.n	41f4a4 <_malloc_r+0xf8>
  41f4be:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  41f4c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  41f4c6:	9300      	str	r3, [sp, #0]
  41f4c8:	199c      	adds	r4, r3, r6
  41f4ca:	4628      	mov	r0, r5
  41f4cc:	f046 0601 	orr.w	r6, r6, #1
  41f4d0:	f042 0501 	orr.w	r5, r2, #1
  41f4d4:	605e      	str	r6, [r3, #4]
  41f4d6:	f8c8 c00c 	str.w	ip, [r8, #12]
  41f4da:	f8cc 8008 	str.w	r8, [ip, #8]
  41f4de:	617c      	str	r4, [r7, #20]
  41f4e0:	613c      	str	r4, [r7, #16]
  41f4e2:	f8c4 e00c 	str.w	lr, [r4, #12]
  41f4e6:	f8c4 e008 	str.w	lr, [r4, #8]
  41f4ea:	6065      	str	r5, [r4, #4]
  41f4ec:	505a      	str	r2, [r3, r1]
  41f4ee:	f000 fb2b 	bl	41fb48 <__malloc_unlock>
  41f4f2:	9b00      	ldr	r3, [sp, #0]
  41f4f4:	f103 0408 	add.w	r4, r3, #8
  41f4f8:	e01e      	b.n	41f538 <_malloc_r+0x18c>
  41f4fa:	2910      	cmp	r1, #16
  41f4fc:	d820      	bhi.n	41f540 <_malloc_r+0x194>
  41f4fe:	f000 fb1d 	bl	41fb3c <__malloc_lock>
  41f502:	2610      	movs	r6, #16
  41f504:	2318      	movs	r3, #24
  41f506:	2002      	movs	r0, #2
  41f508:	4f79      	ldr	r7, [pc, #484]	; (41f6f0 <_malloc_r+0x344>)
  41f50a:	443b      	add	r3, r7
  41f50c:	f1a3 0208 	sub.w	r2, r3, #8
  41f510:	685c      	ldr	r4, [r3, #4]
  41f512:	4294      	cmp	r4, r2
  41f514:	f000 813d 	beq.w	41f792 <_malloc_r+0x3e6>
  41f518:	6863      	ldr	r3, [r4, #4]
  41f51a:	68e1      	ldr	r1, [r4, #12]
  41f51c:	68a6      	ldr	r6, [r4, #8]
  41f51e:	f023 0303 	bic.w	r3, r3, #3
  41f522:	4423      	add	r3, r4
  41f524:	4628      	mov	r0, r5
  41f526:	685a      	ldr	r2, [r3, #4]
  41f528:	60f1      	str	r1, [r6, #12]
  41f52a:	f042 0201 	orr.w	r2, r2, #1
  41f52e:	608e      	str	r6, [r1, #8]
  41f530:	605a      	str	r2, [r3, #4]
  41f532:	f000 fb09 	bl	41fb48 <__malloc_unlock>
  41f536:	3408      	adds	r4, #8
  41f538:	4620      	mov	r0, r4
  41f53a:	b003      	add	sp, #12
  41f53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f540:	2400      	movs	r4, #0
  41f542:	230c      	movs	r3, #12
  41f544:	4620      	mov	r0, r4
  41f546:	602b      	str	r3, [r5, #0]
  41f548:	b003      	add	sp, #12
  41f54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f54e:	2040      	movs	r0, #64	; 0x40
  41f550:	f44f 7300 	mov.w	r3, #512	; 0x200
  41f554:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  41f558:	e74a      	b.n	41f3f0 <_malloc_r+0x44>
  41f55a:	4423      	add	r3, r4
  41f55c:	68e1      	ldr	r1, [r4, #12]
  41f55e:	685a      	ldr	r2, [r3, #4]
  41f560:	68a6      	ldr	r6, [r4, #8]
  41f562:	f042 0201 	orr.w	r2, r2, #1
  41f566:	60f1      	str	r1, [r6, #12]
  41f568:	4628      	mov	r0, r5
  41f56a:	608e      	str	r6, [r1, #8]
  41f56c:	605a      	str	r2, [r3, #4]
  41f56e:	f000 faeb 	bl	41fb48 <__malloc_unlock>
  41f572:	3408      	adds	r4, #8
  41f574:	4620      	mov	r0, r4
  41f576:	b003      	add	sp, #12
  41f578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f57c:	4423      	add	r3, r4
  41f57e:	4628      	mov	r0, r5
  41f580:	685a      	ldr	r2, [r3, #4]
  41f582:	f042 0201 	orr.w	r2, r2, #1
  41f586:	605a      	str	r2, [r3, #4]
  41f588:	f000 fade 	bl	41fb48 <__malloc_unlock>
  41f58c:	3408      	adds	r4, #8
  41f58e:	4620      	mov	r0, r4
  41f590:	b003      	add	sp, #12
  41f592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f596:	68bc      	ldr	r4, [r7, #8]
  41f598:	6863      	ldr	r3, [r4, #4]
  41f59a:	f023 0803 	bic.w	r8, r3, #3
  41f59e:	45b0      	cmp	r8, r6
  41f5a0:	d304      	bcc.n	41f5ac <_malloc_r+0x200>
  41f5a2:	eba8 0306 	sub.w	r3, r8, r6
  41f5a6:	2b0f      	cmp	r3, #15
  41f5a8:	f300 8085 	bgt.w	41f6b6 <_malloc_r+0x30a>
  41f5ac:	f8df 9158 	ldr.w	r9, [pc, #344]	; 41f708 <_malloc_r+0x35c>
  41f5b0:	4b50      	ldr	r3, [pc, #320]	; (41f6f4 <_malloc_r+0x348>)
  41f5b2:	f8d9 2000 	ldr.w	r2, [r9]
  41f5b6:	681b      	ldr	r3, [r3, #0]
  41f5b8:	3201      	adds	r2, #1
  41f5ba:	4433      	add	r3, r6
  41f5bc:	eb04 0a08 	add.w	sl, r4, r8
  41f5c0:	f000 8155 	beq.w	41f86e <_malloc_r+0x4c2>
  41f5c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  41f5c8:	330f      	adds	r3, #15
  41f5ca:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  41f5ce:	f02b 0b0f 	bic.w	fp, fp, #15
  41f5d2:	4659      	mov	r1, fp
  41f5d4:	4628      	mov	r0, r5
  41f5d6:	f000 fadd 	bl	41fb94 <_sbrk_r>
  41f5da:	1c41      	adds	r1, r0, #1
  41f5dc:	4602      	mov	r2, r0
  41f5de:	f000 80fc 	beq.w	41f7da <_malloc_r+0x42e>
  41f5e2:	4582      	cmp	sl, r0
  41f5e4:	f200 80f7 	bhi.w	41f7d6 <_malloc_r+0x42a>
  41f5e8:	4b43      	ldr	r3, [pc, #268]	; (41f6f8 <_malloc_r+0x34c>)
  41f5ea:	6819      	ldr	r1, [r3, #0]
  41f5ec:	4459      	add	r1, fp
  41f5ee:	6019      	str	r1, [r3, #0]
  41f5f0:	f000 814d 	beq.w	41f88e <_malloc_r+0x4e2>
  41f5f4:	f8d9 0000 	ldr.w	r0, [r9]
  41f5f8:	3001      	adds	r0, #1
  41f5fa:	bf1b      	ittet	ne
  41f5fc:	eba2 0a0a 	subne.w	sl, r2, sl
  41f600:	4451      	addne	r1, sl
  41f602:	f8c9 2000 	streq.w	r2, [r9]
  41f606:	6019      	strne	r1, [r3, #0]
  41f608:	f012 0107 	ands.w	r1, r2, #7
  41f60c:	f000 8115 	beq.w	41f83a <_malloc_r+0x48e>
  41f610:	f1c1 0008 	rsb	r0, r1, #8
  41f614:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  41f618:	4402      	add	r2, r0
  41f61a:	3108      	adds	r1, #8
  41f61c:	eb02 090b 	add.w	r9, r2, fp
  41f620:	f3c9 090b 	ubfx	r9, r9, #0, #12
  41f624:	eba1 0909 	sub.w	r9, r1, r9
  41f628:	4649      	mov	r1, r9
  41f62a:	4628      	mov	r0, r5
  41f62c:	9301      	str	r3, [sp, #4]
  41f62e:	9200      	str	r2, [sp, #0]
  41f630:	f000 fab0 	bl	41fb94 <_sbrk_r>
  41f634:	1c43      	adds	r3, r0, #1
  41f636:	e89d 000c 	ldmia.w	sp, {r2, r3}
  41f63a:	f000 8143 	beq.w	41f8c4 <_malloc_r+0x518>
  41f63e:	1a80      	subs	r0, r0, r2
  41f640:	4448      	add	r0, r9
  41f642:	f040 0001 	orr.w	r0, r0, #1
  41f646:	6819      	ldr	r1, [r3, #0]
  41f648:	60ba      	str	r2, [r7, #8]
  41f64a:	4449      	add	r1, r9
  41f64c:	42bc      	cmp	r4, r7
  41f64e:	6050      	str	r0, [r2, #4]
  41f650:	6019      	str	r1, [r3, #0]
  41f652:	d017      	beq.n	41f684 <_malloc_r+0x2d8>
  41f654:	f1b8 0f0f 	cmp.w	r8, #15
  41f658:	f240 80fb 	bls.w	41f852 <_malloc_r+0x4a6>
  41f65c:	6860      	ldr	r0, [r4, #4]
  41f65e:	f1a8 020c 	sub.w	r2, r8, #12
  41f662:	f022 0207 	bic.w	r2, r2, #7
  41f666:	eb04 0e02 	add.w	lr, r4, r2
  41f66a:	f000 0001 	and.w	r0, r0, #1
  41f66e:	f04f 0c05 	mov.w	ip, #5
  41f672:	4310      	orrs	r0, r2
  41f674:	2a0f      	cmp	r2, #15
  41f676:	6060      	str	r0, [r4, #4]
  41f678:	f8ce c004 	str.w	ip, [lr, #4]
  41f67c:	f8ce c008 	str.w	ip, [lr, #8]
  41f680:	f200 8117 	bhi.w	41f8b2 <_malloc_r+0x506>
  41f684:	4b1d      	ldr	r3, [pc, #116]	; (41f6fc <_malloc_r+0x350>)
  41f686:	68bc      	ldr	r4, [r7, #8]
  41f688:	681a      	ldr	r2, [r3, #0]
  41f68a:	4291      	cmp	r1, r2
  41f68c:	bf88      	it	hi
  41f68e:	6019      	strhi	r1, [r3, #0]
  41f690:	4b1b      	ldr	r3, [pc, #108]	; (41f700 <_malloc_r+0x354>)
  41f692:	681a      	ldr	r2, [r3, #0]
  41f694:	4291      	cmp	r1, r2
  41f696:	6862      	ldr	r2, [r4, #4]
  41f698:	bf88      	it	hi
  41f69a:	6019      	strhi	r1, [r3, #0]
  41f69c:	f022 0203 	bic.w	r2, r2, #3
  41f6a0:	4296      	cmp	r6, r2
  41f6a2:	eba2 0306 	sub.w	r3, r2, r6
  41f6a6:	d801      	bhi.n	41f6ac <_malloc_r+0x300>
  41f6a8:	2b0f      	cmp	r3, #15
  41f6aa:	dc04      	bgt.n	41f6b6 <_malloc_r+0x30a>
  41f6ac:	4628      	mov	r0, r5
  41f6ae:	f000 fa4b 	bl	41fb48 <__malloc_unlock>
  41f6b2:	2400      	movs	r4, #0
  41f6b4:	e740      	b.n	41f538 <_malloc_r+0x18c>
  41f6b6:	19a2      	adds	r2, r4, r6
  41f6b8:	f043 0301 	orr.w	r3, r3, #1
  41f6bc:	f046 0601 	orr.w	r6, r6, #1
  41f6c0:	6066      	str	r6, [r4, #4]
  41f6c2:	4628      	mov	r0, r5
  41f6c4:	60ba      	str	r2, [r7, #8]
  41f6c6:	6053      	str	r3, [r2, #4]
  41f6c8:	f000 fa3e 	bl	41fb48 <__malloc_unlock>
  41f6cc:	3408      	adds	r4, #8
  41f6ce:	4620      	mov	r0, r4
  41f6d0:	b003      	add	sp, #12
  41f6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41f6d6:	2b14      	cmp	r3, #20
  41f6d8:	d971      	bls.n	41f7be <_malloc_r+0x412>
  41f6da:	2b54      	cmp	r3, #84	; 0x54
  41f6dc:	f200 80a3 	bhi.w	41f826 <_malloc_r+0x47a>
  41f6e0:	0b33      	lsrs	r3, r6, #12
  41f6e2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  41f6e6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  41f6ea:	00c3      	lsls	r3, r0, #3
  41f6ec:	e680      	b.n	41f3f0 <_malloc_r+0x44>
  41f6ee:	bf00      	nop
  41f6f0:	20400490 	.word	0x20400490
  41f6f4:	2043a0a0 	.word	0x2043a0a0
  41f6f8:	2043a070 	.word	0x2043a070
  41f6fc:	2043a098 	.word	0x2043a098
  41f700:	2043a09c 	.word	0x2043a09c
  41f704:	20400498 	.word	0x20400498
  41f708:	20400898 	.word	0x20400898
  41f70c:	0a5a      	lsrs	r2, r3, #9
  41f70e:	2a04      	cmp	r2, #4
  41f710:	d95b      	bls.n	41f7ca <_malloc_r+0x41e>
  41f712:	2a14      	cmp	r2, #20
  41f714:	f200 80ae 	bhi.w	41f874 <_malloc_r+0x4c8>
  41f718:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  41f71c:	00c9      	lsls	r1, r1, #3
  41f71e:	325b      	adds	r2, #91	; 0x5b
  41f720:	eb07 0c01 	add.w	ip, r7, r1
  41f724:	5879      	ldr	r1, [r7, r1]
  41f726:	f1ac 0c08 	sub.w	ip, ip, #8
  41f72a:	458c      	cmp	ip, r1
  41f72c:	f000 8088 	beq.w	41f840 <_malloc_r+0x494>
  41f730:	684a      	ldr	r2, [r1, #4]
  41f732:	f022 0203 	bic.w	r2, r2, #3
  41f736:	4293      	cmp	r3, r2
  41f738:	d273      	bcs.n	41f822 <_malloc_r+0x476>
  41f73a:	6889      	ldr	r1, [r1, #8]
  41f73c:	458c      	cmp	ip, r1
  41f73e:	d1f7      	bne.n	41f730 <_malloc_r+0x384>
  41f740:	f8dc 200c 	ldr.w	r2, [ip, #12]
  41f744:	687b      	ldr	r3, [r7, #4]
  41f746:	60e2      	str	r2, [r4, #12]
  41f748:	f8c4 c008 	str.w	ip, [r4, #8]
  41f74c:	6094      	str	r4, [r2, #8]
  41f74e:	f8cc 400c 	str.w	r4, [ip, #12]
  41f752:	e68f      	b.n	41f474 <_malloc_r+0xc8>
  41f754:	19a1      	adds	r1, r4, r6
  41f756:	f046 0c01 	orr.w	ip, r6, #1
  41f75a:	f042 0601 	orr.w	r6, r2, #1
  41f75e:	f8c4 c004 	str.w	ip, [r4, #4]
  41f762:	4628      	mov	r0, r5
  41f764:	6179      	str	r1, [r7, #20]
  41f766:	6139      	str	r1, [r7, #16]
  41f768:	f8c1 e00c 	str.w	lr, [r1, #12]
  41f76c:	f8c1 e008 	str.w	lr, [r1, #8]
  41f770:	604e      	str	r6, [r1, #4]
  41f772:	50e2      	str	r2, [r4, r3]
  41f774:	f000 f9e8 	bl	41fb48 <__malloc_unlock>
  41f778:	3408      	adds	r4, #8
  41f77a:	e6dd      	b.n	41f538 <_malloc_r+0x18c>
  41f77c:	687b      	ldr	r3, [r7, #4]
  41f77e:	e679      	b.n	41f474 <_malloc_r+0xc8>
  41f780:	f108 0801 	add.w	r8, r8, #1
  41f784:	f018 0f03 	tst.w	r8, #3
  41f788:	f10c 0c08 	add.w	ip, ip, #8
  41f78c:	f47f ae85 	bne.w	41f49a <_malloc_r+0xee>
  41f790:	e02d      	b.n	41f7ee <_malloc_r+0x442>
  41f792:	68dc      	ldr	r4, [r3, #12]
  41f794:	42a3      	cmp	r3, r4
  41f796:	bf08      	it	eq
  41f798:	3002      	addeq	r0, #2
  41f79a:	f43f ae3e 	beq.w	41f41a <_malloc_r+0x6e>
  41f79e:	e6bb      	b.n	41f518 <_malloc_r+0x16c>
  41f7a0:	4419      	add	r1, r3
  41f7a2:	461c      	mov	r4, r3
  41f7a4:	684a      	ldr	r2, [r1, #4]
  41f7a6:	68db      	ldr	r3, [r3, #12]
  41f7a8:	f854 6f08 	ldr.w	r6, [r4, #8]!
  41f7ac:	f042 0201 	orr.w	r2, r2, #1
  41f7b0:	604a      	str	r2, [r1, #4]
  41f7b2:	4628      	mov	r0, r5
  41f7b4:	60f3      	str	r3, [r6, #12]
  41f7b6:	609e      	str	r6, [r3, #8]
  41f7b8:	f000 f9c6 	bl	41fb48 <__malloc_unlock>
  41f7bc:	e6bc      	b.n	41f538 <_malloc_r+0x18c>
  41f7be:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  41f7c2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  41f7c6:	00c3      	lsls	r3, r0, #3
  41f7c8:	e612      	b.n	41f3f0 <_malloc_r+0x44>
  41f7ca:	099a      	lsrs	r2, r3, #6
  41f7cc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  41f7d0:	00c9      	lsls	r1, r1, #3
  41f7d2:	3238      	adds	r2, #56	; 0x38
  41f7d4:	e7a4      	b.n	41f720 <_malloc_r+0x374>
  41f7d6:	42bc      	cmp	r4, r7
  41f7d8:	d054      	beq.n	41f884 <_malloc_r+0x4d8>
  41f7da:	68bc      	ldr	r4, [r7, #8]
  41f7dc:	6862      	ldr	r2, [r4, #4]
  41f7de:	f022 0203 	bic.w	r2, r2, #3
  41f7e2:	e75d      	b.n	41f6a0 <_malloc_r+0x2f4>
  41f7e4:	f859 3908 	ldr.w	r3, [r9], #-8
  41f7e8:	4599      	cmp	r9, r3
  41f7ea:	f040 8086 	bne.w	41f8fa <_malloc_r+0x54e>
  41f7ee:	f010 0f03 	tst.w	r0, #3
  41f7f2:	f100 30ff 	add.w	r0, r0, #4294967295
  41f7f6:	d1f5      	bne.n	41f7e4 <_malloc_r+0x438>
  41f7f8:	687b      	ldr	r3, [r7, #4]
  41f7fa:	ea23 0304 	bic.w	r3, r3, r4
  41f7fe:	607b      	str	r3, [r7, #4]
  41f800:	0064      	lsls	r4, r4, #1
  41f802:	429c      	cmp	r4, r3
  41f804:	f63f aec7 	bhi.w	41f596 <_malloc_r+0x1ea>
  41f808:	2c00      	cmp	r4, #0
  41f80a:	f43f aec4 	beq.w	41f596 <_malloc_r+0x1ea>
  41f80e:	421c      	tst	r4, r3
  41f810:	4640      	mov	r0, r8
  41f812:	f47f ae3e 	bne.w	41f492 <_malloc_r+0xe6>
  41f816:	0064      	lsls	r4, r4, #1
  41f818:	421c      	tst	r4, r3
  41f81a:	f100 0004 	add.w	r0, r0, #4
  41f81e:	d0fa      	beq.n	41f816 <_malloc_r+0x46a>
  41f820:	e637      	b.n	41f492 <_malloc_r+0xe6>
  41f822:	468c      	mov	ip, r1
  41f824:	e78c      	b.n	41f740 <_malloc_r+0x394>
  41f826:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  41f82a:	d815      	bhi.n	41f858 <_malloc_r+0x4ac>
  41f82c:	0bf3      	lsrs	r3, r6, #15
  41f82e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  41f832:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  41f836:	00c3      	lsls	r3, r0, #3
  41f838:	e5da      	b.n	41f3f0 <_malloc_r+0x44>
  41f83a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  41f83e:	e6ed      	b.n	41f61c <_malloc_r+0x270>
  41f840:	687b      	ldr	r3, [r7, #4]
  41f842:	1092      	asrs	r2, r2, #2
  41f844:	2101      	movs	r1, #1
  41f846:	fa01 f202 	lsl.w	r2, r1, r2
  41f84a:	4313      	orrs	r3, r2
  41f84c:	607b      	str	r3, [r7, #4]
  41f84e:	4662      	mov	r2, ip
  41f850:	e779      	b.n	41f746 <_malloc_r+0x39a>
  41f852:	2301      	movs	r3, #1
  41f854:	6053      	str	r3, [r2, #4]
  41f856:	e729      	b.n	41f6ac <_malloc_r+0x300>
  41f858:	f240 5254 	movw	r2, #1364	; 0x554
  41f85c:	4293      	cmp	r3, r2
  41f85e:	d822      	bhi.n	41f8a6 <_malloc_r+0x4fa>
  41f860:	0cb3      	lsrs	r3, r6, #18
  41f862:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  41f866:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  41f86a:	00c3      	lsls	r3, r0, #3
  41f86c:	e5c0      	b.n	41f3f0 <_malloc_r+0x44>
  41f86e:	f103 0b10 	add.w	fp, r3, #16
  41f872:	e6ae      	b.n	41f5d2 <_malloc_r+0x226>
  41f874:	2a54      	cmp	r2, #84	; 0x54
  41f876:	d829      	bhi.n	41f8cc <_malloc_r+0x520>
  41f878:	0b1a      	lsrs	r2, r3, #12
  41f87a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  41f87e:	00c9      	lsls	r1, r1, #3
  41f880:	326e      	adds	r2, #110	; 0x6e
  41f882:	e74d      	b.n	41f720 <_malloc_r+0x374>
  41f884:	4b20      	ldr	r3, [pc, #128]	; (41f908 <_malloc_r+0x55c>)
  41f886:	6819      	ldr	r1, [r3, #0]
  41f888:	4459      	add	r1, fp
  41f88a:	6019      	str	r1, [r3, #0]
  41f88c:	e6b2      	b.n	41f5f4 <_malloc_r+0x248>
  41f88e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  41f892:	2800      	cmp	r0, #0
  41f894:	f47f aeae 	bne.w	41f5f4 <_malloc_r+0x248>
  41f898:	eb08 030b 	add.w	r3, r8, fp
  41f89c:	68ba      	ldr	r2, [r7, #8]
  41f89e:	f043 0301 	orr.w	r3, r3, #1
  41f8a2:	6053      	str	r3, [r2, #4]
  41f8a4:	e6ee      	b.n	41f684 <_malloc_r+0x2d8>
  41f8a6:	207f      	movs	r0, #127	; 0x7f
  41f8a8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  41f8ac:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  41f8b0:	e59e      	b.n	41f3f0 <_malloc_r+0x44>
  41f8b2:	f104 0108 	add.w	r1, r4, #8
  41f8b6:	4628      	mov	r0, r5
  41f8b8:	9300      	str	r3, [sp, #0]
  41f8ba:	f001 fdeb 	bl	421494 <_free_r>
  41f8be:	9b00      	ldr	r3, [sp, #0]
  41f8c0:	6819      	ldr	r1, [r3, #0]
  41f8c2:	e6df      	b.n	41f684 <_malloc_r+0x2d8>
  41f8c4:	2001      	movs	r0, #1
  41f8c6:	f04f 0900 	mov.w	r9, #0
  41f8ca:	e6bc      	b.n	41f646 <_malloc_r+0x29a>
  41f8cc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  41f8d0:	d805      	bhi.n	41f8de <_malloc_r+0x532>
  41f8d2:	0bda      	lsrs	r2, r3, #15
  41f8d4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  41f8d8:	00c9      	lsls	r1, r1, #3
  41f8da:	3277      	adds	r2, #119	; 0x77
  41f8dc:	e720      	b.n	41f720 <_malloc_r+0x374>
  41f8de:	f240 5154 	movw	r1, #1364	; 0x554
  41f8e2:	428a      	cmp	r2, r1
  41f8e4:	d805      	bhi.n	41f8f2 <_malloc_r+0x546>
  41f8e6:	0c9a      	lsrs	r2, r3, #18
  41f8e8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  41f8ec:	00c9      	lsls	r1, r1, #3
  41f8ee:	327c      	adds	r2, #124	; 0x7c
  41f8f0:	e716      	b.n	41f720 <_malloc_r+0x374>
  41f8f2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  41f8f6:	227e      	movs	r2, #126	; 0x7e
  41f8f8:	e712      	b.n	41f720 <_malloc_r+0x374>
  41f8fa:	687b      	ldr	r3, [r7, #4]
  41f8fc:	e780      	b.n	41f800 <_malloc_r+0x454>
  41f8fe:	08f0      	lsrs	r0, r6, #3
  41f900:	f106 0308 	add.w	r3, r6, #8
  41f904:	e600      	b.n	41f508 <_malloc_r+0x15c>
  41f906:	bf00      	nop
  41f908:	2043a070 	.word	0x2043a070

0041f90c <memcmp>:
  41f90c:	2a03      	cmp	r2, #3
  41f90e:	b470      	push	{r4, r5, r6}
  41f910:	d922      	bls.n	41f958 <memcmp+0x4c>
  41f912:	ea40 0301 	orr.w	r3, r0, r1
  41f916:	079b      	lsls	r3, r3, #30
  41f918:	d011      	beq.n	41f93e <memcmp+0x32>
  41f91a:	7803      	ldrb	r3, [r0, #0]
  41f91c:	780c      	ldrb	r4, [r1, #0]
  41f91e:	42a3      	cmp	r3, r4
  41f920:	d11d      	bne.n	41f95e <memcmp+0x52>
  41f922:	440a      	add	r2, r1
  41f924:	3101      	adds	r1, #1
  41f926:	e005      	b.n	41f934 <memcmp+0x28>
  41f928:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  41f92c:	f811 4b01 	ldrb.w	r4, [r1], #1
  41f930:	42a3      	cmp	r3, r4
  41f932:	d114      	bne.n	41f95e <memcmp+0x52>
  41f934:	4291      	cmp	r1, r2
  41f936:	d1f7      	bne.n	41f928 <memcmp+0x1c>
  41f938:	2000      	movs	r0, #0
  41f93a:	bc70      	pop	{r4, r5, r6}
  41f93c:	4770      	bx	lr
  41f93e:	680d      	ldr	r5, [r1, #0]
  41f940:	6806      	ldr	r6, [r0, #0]
  41f942:	42ae      	cmp	r6, r5
  41f944:	460c      	mov	r4, r1
  41f946:	4603      	mov	r3, r0
  41f948:	f101 0104 	add.w	r1, r1, #4
  41f94c:	f100 0004 	add.w	r0, r0, #4
  41f950:	d108      	bne.n	41f964 <memcmp+0x58>
  41f952:	3a04      	subs	r2, #4
  41f954:	2a03      	cmp	r2, #3
  41f956:	d8f2      	bhi.n	41f93e <memcmp+0x32>
  41f958:	2a00      	cmp	r2, #0
  41f95a:	d1de      	bne.n	41f91a <memcmp+0xe>
  41f95c:	e7ec      	b.n	41f938 <memcmp+0x2c>
  41f95e:	1b18      	subs	r0, r3, r4
  41f960:	bc70      	pop	{r4, r5, r6}
  41f962:	4770      	bx	lr
  41f964:	4621      	mov	r1, r4
  41f966:	4618      	mov	r0, r3
  41f968:	e7d7      	b.n	41f91a <memcmp+0xe>
  41f96a:	bf00      	nop

0041f96c <memcpy>:
  41f96c:	4684      	mov	ip, r0
  41f96e:	ea41 0300 	orr.w	r3, r1, r0
  41f972:	f013 0303 	ands.w	r3, r3, #3
  41f976:	d16d      	bne.n	41fa54 <memcpy+0xe8>
  41f978:	3a40      	subs	r2, #64	; 0x40
  41f97a:	d341      	bcc.n	41fa00 <memcpy+0x94>
  41f97c:	f851 3b04 	ldr.w	r3, [r1], #4
  41f980:	f840 3b04 	str.w	r3, [r0], #4
  41f984:	f851 3b04 	ldr.w	r3, [r1], #4
  41f988:	f840 3b04 	str.w	r3, [r0], #4
  41f98c:	f851 3b04 	ldr.w	r3, [r1], #4
  41f990:	f840 3b04 	str.w	r3, [r0], #4
  41f994:	f851 3b04 	ldr.w	r3, [r1], #4
  41f998:	f840 3b04 	str.w	r3, [r0], #4
  41f99c:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9a0:	f840 3b04 	str.w	r3, [r0], #4
  41f9a4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9a8:	f840 3b04 	str.w	r3, [r0], #4
  41f9ac:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9b0:	f840 3b04 	str.w	r3, [r0], #4
  41f9b4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9b8:	f840 3b04 	str.w	r3, [r0], #4
  41f9bc:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9c0:	f840 3b04 	str.w	r3, [r0], #4
  41f9c4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9c8:	f840 3b04 	str.w	r3, [r0], #4
  41f9cc:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9d0:	f840 3b04 	str.w	r3, [r0], #4
  41f9d4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9d8:	f840 3b04 	str.w	r3, [r0], #4
  41f9dc:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9e0:	f840 3b04 	str.w	r3, [r0], #4
  41f9e4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9e8:	f840 3b04 	str.w	r3, [r0], #4
  41f9ec:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9f0:	f840 3b04 	str.w	r3, [r0], #4
  41f9f4:	f851 3b04 	ldr.w	r3, [r1], #4
  41f9f8:	f840 3b04 	str.w	r3, [r0], #4
  41f9fc:	3a40      	subs	r2, #64	; 0x40
  41f9fe:	d2bd      	bcs.n	41f97c <memcpy+0x10>
  41fa00:	3230      	adds	r2, #48	; 0x30
  41fa02:	d311      	bcc.n	41fa28 <memcpy+0xbc>
  41fa04:	f851 3b04 	ldr.w	r3, [r1], #4
  41fa08:	f840 3b04 	str.w	r3, [r0], #4
  41fa0c:	f851 3b04 	ldr.w	r3, [r1], #4
  41fa10:	f840 3b04 	str.w	r3, [r0], #4
  41fa14:	f851 3b04 	ldr.w	r3, [r1], #4
  41fa18:	f840 3b04 	str.w	r3, [r0], #4
  41fa1c:	f851 3b04 	ldr.w	r3, [r1], #4
  41fa20:	f840 3b04 	str.w	r3, [r0], #4
  41fa24:	3a10      	subs	r2, #16
  41fa26:	d2ed      	bcs.n	41fa04 <memcpy+0x98>
  41fa28:	320c      	adds	r2, #12
  41fa2a:	d305      	bcc.n	41fa38 <memcpy+0xcc>
  41fa2c:	f851 3b04 	ldr.w	r3, [r1], #4
  41fa30:	f840 3b04 	str.w	r3, [r0], #4
  41fa34:	3a04      	subs	r2, #4
  41fa36:	d2f9      	bcs.n	41fa2c <memcpy+0xc0>
  41fa38:	3204      	adds	r2, #4
  41fa3a:	d008      	beq.n	41fa4e <memcpy+0xe2>
  41fa3c:	07d2      	lsls	r2, r2, #31
  41fa3e:	bf1c      	itt	ne
  41fa40:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41fa44:	f800 3b01 	strbne.w	r3, [r0], #1
  41fa48:	d301      	bcc.n	41fa4e <memcpy+0xe2>
  41fa4a:	880b      	ldrh	r3, [r1, #0]
  41fa4c:	8003      	strh	r3, [r0, #0]
  41fa4e:	4660      	mov	r0, ip
  41fa50:	4770      	bx	lr
  41fa52:	bf00      	nop
  41fa54:	2a08      	cmp	r2, #8
  41fa56:	d313      	bcc.n	41fa80 <memcpy+0x114>
  41fa58:	078b      	lsls	r3, r1, #30
  41fa5a:	d08d      	beq.n	41f978 <memcpy+0xc>
  41fa5c:	f010 0303 	ands.w	r3, r0, #3
  41fa60:	d08a      	beq.n	41f978 <memcpy+0xc>
  41fa62:	f1c3 0304 	rsb	r3, r3, #4
  41fa66:	1ad2      	subs	r2, r2, r3
  41fa68:	07db      	lsls	r3, r3, #31
  41fa6a:	bf1c      	itt	ne
  41fa6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  41fa70:	f800 3b01 	strbne.w	r3, [r0], #1
  41fa74:	d380      	bcc.n	41f978 <memcpy+0xc>
  41fa76:	f831 3b02 	ldrh.w	r3, [r1], #2
  41fa7a:	f820 3b02 	strh.w	r3, [r0], #2
  41fa7e:	e77b      	b.n	41f978 <memcpy+0xc>
  41fa80:	3a04      	subs	r2, #4
  41fa82:	d3d9      	bcc.n	41fa38 <memcpy+0xcc>
  41fa84:	3a01      	subs	r2, #1
  41fa86:	f811 3b01 	ldrb.w	r3, [r1], #1
  41fa8a:	f800 3b01 	strb.w	r3, [r0], #1
  41fa8e:	d2f9      	bcs.n	41fa84 <memcpy+0x118>
  41fa90:	780b      	ldrb	r3, [r1, #0]
  41fa92:	7003      	strb	r3, [r0, #0]
  41fa94:	784b      	ldrb	r3, [r1, #1]
  41fa96:	7043      	strb	r3, [r0, #1]
  41fa98:	788b      	ldrb	r3, [r1, #2]
  41fa9a:	7083      	strb	r3, [r0, #2]
  41fa9c:	4660      	mov	r0, ip
  41fa9e:	4770      	bx	lr

0041faa0 <memset>:
  41faa0:	b470      	push	{r4, r5, r6}
  41faa2:	0786      	lsls	r6, r0, #30
  41faa4:	d046      	beq.n	41fb34 <memset+0x94>
  41faa6:	1e54      	subs	r4, r2, #1
  41faa8:	2a00      	cmp	r2, #0
  41faaa:	d041      	beq.n	41fb30 <memset+0x90>
  41faac:	b2ca      	uxtb	r2, r1
  41faae:	4603      	mov	r3, r0
  41fab0:	e002      	b.n	41fab8 <memset+0x18>
  41fab2:	f114 34ff 	adds.w	r4, r4, #4294967295
  41fab6:	d33b      	bcc.n	41fb30 <memset+0x90>
  41fab8:	f803 2b01 	strb.w	r2, [r3], #1
  41fabc:	079d      	lsls	r5, r3, #30
  41fabe:	d1f8      	bne.n	41fab2 <memset+0x12>
  41fac0:	2c03      	cmp	r4, #3
  41fac2:	d92e      	bls.n	41fb22 <memset+0x82>
  41fac4:	b2cd      	uxtb	r5, r1
  41fac6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  41faca:	2c0f      	cmp	r4, #15
  41facc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  41fad0:	d919      	bls.n	41fb06 <memset+0x66>
  41fad2:	f103 0210 	add.w	r2, r3, #16
  41fad6:	4626      	mov	r6, r4
  41fad8:	3e10      	subs	r6, #16
  41fada:	2e0f      	cmp	r6, #15
  41fadc:	f842 5c10 	str.w	r5, [r2, #-16]
  41fae0:	f842 5c0c 	str.w	r5, [r2, #-12]
  41fae4:	f842 5c08 	str.w	r5, [r2, #-8]
  41fae8:	f842 5c04 	str.w	r5, [r2, #-4]
  41faec:	f102 0210 	add.w	r2, r2, #16
  41faf0:	d8f2      	bhi.n	41fad8 <memset+0x38>
  41faf2:	f1a4 0210 	sub.w	r2, r4, #16
  41faf6:	f022 020f 	bic.w	r2, r2, #15
  41fafa:	f004 040f 	and.w	r4, r4, #15
  41fafe:	3210      	adds	r2, #16
  41fb00:	2c03      	cmp	r4, #3
  41fb02:	4413      	add	r3, r2
  41fb04:	d90d      	bls.n	41fb22 <memset+0x82>
  41fb06:	461e      	mov	r6, r3
  41fb08:	4622      	mov	r2, r4
  41fb0a:	3a04      	subs	r2, #4
  41fb0c:	2a03      	cmp	r2, #3
  41fb0e:	f846 5b04 	str.w	r5, [r6], #4
  41fb12:	d8fa      	bhi.n	41fb0a <memset+0x6a>
  41fb14:	1f22      	subs	r2, r4, #4
  41fb16:	f022 0203 	bic.w	r2, r2, #3
  41fb1a:	3204      	adds	r2, #4
  41fb1c:	4413      	add	r3, r2
  41fb1e:	f004 0403 	and.w	r4, r4, #3
  41fb22:	b12c      	cbz	r4, 41fb30 <memset+0x90>
  41fb24:	b2c9      	uxtb	r1, r1
  41fb26:	441c      	add	r4, r3
  41fb28:	f803 1b01 	strb.w	r1, [r3], #1
  41fb2c:	429c      	cmp	r4, r3
  41fb2e:	d1fb      	bne.n	41fb28 <memset+0x88>
  41fb30:	bc70      	pop	{r4, r5, r6}
  41fb32:	4770      	bx	lr
  41fb34:	4614      	mov	r4, r2
  41fb36:	4603      	mov	r3, r0
  41fb38:	e7c2      	b.n	41fac0 <memset+0x20>
  41fb3a:	bf00      	nop

0041fb3c <__malloc_lock>:
  41fb3c:	4801      	ldr	r0, [pc, #4]	; (41fb44 <__malloc_lock+0x8>)
  41fb3e:	f001 bf43 	b.w	4219c8 <__retarget_lock_acquire_recursive>
  41fb42:	bf00      	nop
  41fb44:	2043a318 	.word	0x2043a318

0041fb48 <__malloc_unlock>:
  41fb48:	4801      	ldr	r0, [pc, #4]	; (41fb50 <__malloc_unlock+0x8>)
  41fb4a:	f001 bf3f 	b.w	4219cc <__retarget_lock_release_recursive>
  41fb4e:	bf00      	nop
  41fb50:	2043a318 	.word	0x2043a318

0041fb54 <rand>:
  41fb54:	b410      	push	{r4}
  41fb56:	4b0c      	ldr	r3, [pc, #48]	; (41fb88 <rand+0x34>)
  41fb58:	480c      	ldr	r0, [pc, #48]	; (41fb8c <rand+0x38>)
  41fb5a:	6819      	ldr	r1, [r3, #0]
  41fb5c:	4c0c      	ldr	r4, [pc, #48]	; (41fb90 <rand+0x3c>)
  41fb5e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  41fb62:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  41fb66:	fb00 f002 	mul.w	r0, r0, r2
  41fb6a:	fb04 0003 	mla	r0, r4, r3, r0
  41fb6e:	fba2 2304 	umull	r2, r3, r2, r4
  41fb72:	4403      	add	r3, r0
  41fb74:	3201      	adds	r2, #1
  41fb76:	f143 0300 	adc.w	r3, r3, #0
  41fb7a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  41fb7e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  41fb82:	bc10      	pop	{r4}
  41fb84:	4770      	bx	lr
  41fb86:	bf00      	nop
  41fb88:	20400060 	.word	0x20400060
  41fb8c:	5851f42d 	.word	0x5851f42d
  41fb90:	4c957f2d 	.word	0x4c957f2d

0041fb94 <_sbrk_r>:
  41fb94:	b538      	push	{r3, r4, r5, lr}
  41fb96:	4c07      	ldr	r4, [pc, #28]	; (41fbb4 <_sbrk_r+0x20>)
  41fb98:	2300      	movs	r3, #0
  41fb9a:	4605      	mov	r5, r0
  41fb9c:	4608      	mov	r0, r1
  41fb9e:	6023      	str	r3, [r4, #0]
  41fba0:	f7fe faf0 	bl	41e184 <_sbrk>
  41fba4:	1c43      	adds	r3, r0, #1
  41fba6:	d000      	beq.n	41fbaa <_sbrk_r+0x16>
  41fba8:	bd38      	pop	{r3, r4, r5, pc}
  41fbaa:	6823      	ldr	r3, [r4, #0]
  41fbac:	2b00      	cmp	r3, #0
  41fbae:	d0fb      	beq.n	41fba8 <_sbrk_r+0x14>
  41fbb0:	602b      	str	r3, [r5, #0]
  41fbb2:	bd38      	pop	{r3, r4, r5, pc}
  41fbb4:	2043a32c 	.word	0x2043a32c

0041fbb8 <setbuf>:
  41fbb8:	2900      	cmp	r1, #0
  41fbba:	bf0c      	ite	eq
  41fbbc:	2202      	moveq	r2, #2
  41fbbe:	2200      	movne	r2, #0
  41fbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  41fbc4:	f000 b800 	b.w	41fbc8 <setvbuf>

0041fbc8 <setvbuf>:
  41fbc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41fbcc:	4c61      	ldr	r4, [pc, #388]	; (41fd54 <setvbuf+0x18c>)
  41fbce:	6825      	ldr	r5, [r4, #0]
  41fbd0:	b083      	sub	sp, #12
  41fbd2:	4604      	mov	r4, r0
  41fbd4:	460f      	mov	r7, r1
  41fbd6:	4690      	mov	r8, r2
  41fbd8:	461e      	mov	r6, r3
  41fbda:	b115      	cbz	r5, 41fbe2 <setvbuf+0x1a>
  41fbdc:	6bab      	ldr	r3, [r5, #56]	; 0x38
  41fbde:	2b00      	cmp	r3, #0
  41fbe0:	d064      	beq.n	41fcac <setvbuf+0xe4>
  41fbe2:	f1b8 0f02 	cmp.w	r8, #2
  41fbe6:	d006      	beq.n	41fbf6 <setvbuf+0x2e>
  41fbe8:	f1b8 0f01 	cmp.w	r8, #1
  41fbec:	f200 809f 	bhi.w	41fd2e <setvbuf+0x166>
  41fbf0:	2e00      	cmp	r6, #0
  41fbf2:	f2c0 809c 	blt.w	41fd2e <setvbuf+0x166>
  41fbf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  41fbf8:	07d8      	lsls	r0, r3, #31
  41fbfa:	d534      	bpl.n	41fc66 <setvbuf+0x9e>
  41fbfc:	4621      	mov	r1, r4
  41fbfe:	4628      	mov	r0, r5
  41fc00:	f001 faca 	bl	421198 <_fflush_r>
  41fc04:	6b21      	ldr	r1, [r4, #48]	; 0x30
  41fc06:	b141      	cbz	r1, 41fc1a <setvbuf+0x52>
  41fc08:	f104 0340 	add.w	r3, r4, #64	; 0x40
  41fc0c:	4299      	cmp	r1, r3
  41fc0e:	d002      	beq.n	41fc16 <setvbuf+0x4e>
  41fc10:	4628      	mov	r0, r5
  41fc12:	f001 fc3f 	bl	421494 <_free_r>
  41fc16:	2300      	movs	r3, #0
  41fc18:	6323      	str	r3, [r4, #48]	; 0x30
  41fc1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41fc1e:	2200      	movs	r2, #0
  41fc20:	61a2      	str	r2, [r4, #24]
  41fc22:	6062      	str	r2, [r4, #4]
  41fc24:	061a      	lsls	r2, r3, #24
  41fc26:	d43a      	bmi.n	41fc9e <setvbuf+0xd6>
  41fc28:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  41fc2c:	f023 0303 	bic.w	r3, r3, #3
  41fc30:	f1b8 0f02 	cmp.w	r8, #2
  41fc34:	81a3      	strh	r3, [r4, #12]
  41fc36:	d01d      	beq.n	41fc74 <setvbuf+0xac>
  41fc38:	ab01      	add	r3, sp, #4
  41fc3a:	466a      	mov	r2, sp
  41fc3c:	4621      	mov	r1, r4
  41fc3e:	4628      	mov	r0, r5
  41fc40:	f001 fec6 	bl	4219d0 <__swhatbuf_r>
  41fc44:	89a3      	ldrh	r3, [r4, #12]
  41fc46:	4318      	orrs	r0, r3
  41fc48:	81a0      	strh	r0, [r4, #12]
  41fc4a:	2e00      	cmp	r6, #0
  41fc4c:	d132      	bne.n	41fcb4 <setvbuf+0xec>
  41fc4e:	9e00      	ldr	r6, [sp, #0]
  41fc50:	4630      	mov	r0, r6
  41fc52:	f7ff fba3 	bl	41f39c <malloc>
  41fc56:	4607      	mov	r7, r0
  41fc58:	2800      	cmp	r0, #0
  41fc5a:	d06b      	beq.n	41fd34 <setvbuf+0x16c>
  41fc5c:	89a3      	ldrh	r3, [r4, #12]
  41fc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41fc62:	81a3      	strh	r3, [r4, #12]
  41fc64:	e028      	b.n	41fcb8 <setvbuf+0xf0>
  41fc66:	89a3      	ldrh	r3, [r4, #12]
  41fc68:	0599      	lsls	r1, r3, #22
  41fc6a:	d4c7      	bmi.n	41fbfc <setvbuf+0x34>
  41fc6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41fc6e:	f001 feab 	bl	4219c8 <__retarget_lock_acquire_recursive>
  41fc72:	e7c3      	b.n	41fbfc <setvbuf+0x34>
  41fc74:	2500      	movs	r5, #0
  41fc76:	6e61      	ldr	r1, [r4, #100]	; 0x64
  41fc78:	2600      	movs	r6, #0
  41fc7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  41fc7e:	f043 0302 	orr.w	r3, r3, #2
  41fc82:	2001      	movs	r0, #1
  41fc84:	60a6      	str	r6, [r4, #8]
  41fc86:	07ce      	lsls	r6, r1, #31
  41fc88:	81a3      	strh	r3, [r4, #12]
  41fc8a:	6022      	str	r2, [r4, #0]
  41fc8c:	6122      	str	r2, [r4, #16]
  41fc8e:	6160      	str	r0, [r4, #20]
  41fc90:	d401      	bmi.n	41fc96 <setvbuf+0xce>
  41fc92:	0598      	lsls	r0, r3, #22
  41fc94:	d53e      	bpl.n	41fd14 <setvbuf+0x14c>
  41fc96:	4628      	mov	r0, r5
  41fc98:	b003      	add	sp, #12
  41fc9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41fc9e:	6921      	ldr	r1, [r4, #16]
  41fca0:	4628      	mov	r0, r5
  41fca2:	f001 fbf7 	bl	421494 <_free_r>
  41fca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41fcaa:	e7bd      	b.n	41fc28 <setvbuf+0x60>
  41fcac:	4628      	mov	r0, r5
  41fcae:	f001 facb 	bl	421248 <__sinit>
  41fcb2:	e796      	b.n	41fbe2 <setvbuf+0x1a>
  41fcb4:	2f00      	cmp	r7, #0
  41fcb6:	d0cb      	beq.n	41fc50 <setvbuf+0x88>
  41fcb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  41fcba:	2b00      	cmp	r3, #0
  41fcbc:	d033      	beq.n	41fd26 <setvbuf+0x15e>
  41fcbe:	9b00      	ldr	r3, [sp, #0]
  41fcc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  41fcc4:	6027      	str	r7, [r4, #0]
  41fcc6:	429e      	cmp	r6, r3
  41fcc8:	bf1c      	itt	ne
  41fcca:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  41fcce:	81a2      	strhne	r2, [r4, #12]
  41fcd0:	f1b8 0f01 	cmp.w	r8, #1
  41fcd4:	bf04      	itt	eq
  41fcd6:	f042 0201 	orreq.w	r2, r2, #1
  41fcda:	81a2      	strheq	r2, [r4, #12]
  41fcdc:	b292      	uxth	r2, r2
  41fcde:	f012 0308 	ands.w	r3, r2, #8
  41fce2:	6127      	str	r7, [r4, #16]
  41fce4:	6166      	str	r6, [r4, #20]
  41fce6:	d00e      	beq.n	41fd06 <setvbuf+0x13e>
  41fce8:	07d1      	lsls	r1, r2, #31
  41fcea:	d51a      	bpl.n	41fd22 <setvbuf+0x15a>
  41fcec:	6e65      	ldr	r5, [r4, #100]	; 0x64
  41fcee:	4276      	negs	r6, r6
  41fcf0:	2300      	movs	r3, #0
  41fcf2:	f015 0501 	ands.w	r5, r5, #1
  41fcf6:	61a6      	str	r6, [r4, #24]
  41fcf8:	60a3      	str	r3, [r4, #8]
  41fcfa:	d009      	beq.n	41fd10 <setvbuf+0x148>
  41fcfc:	2500      	movs	r5, #0
  41fcfe:	4628      	mov	r0, r5
  41fd00:	b003      	add	sp, #12
  41fd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41fd06:	60a3      	str	r3, [r4, #8]
  41fd08:	6e65      	ldr	r5, [r4, #100]	; 0x64
  41fd0a:	f015 0501 	ands.w	r5, r5, #1
  41fd0e:	d1f5      	bne.n	41fcfc <setvbuf+0x134>
  41fd10:	0593      	lsls	r3, r2, #22
  41fd12:	d4c0      	bmi.n	41fc96 <setvbuf+0xce>
  41fd14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  41fd16:	f001 fe59 	bl	4219cc <__retarget_lock_release_recursive>
  41fd1a:	4628      	mov	r0, r5
  41fd1c:	b003      	add	sp, #12
  41fd1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  41fd22:	60a6      	str	r6, [r4, #8]
  41fd24:	e7f0      	b.n	41fd08 <setvbuf+0x140>
  41fd26:	4628      	mov	r0, r5
  41fd28:	f001 fa8e 	bl	421248 <__sinit>
  41fd2c:	e7c7      	b.n	41fcbe <setvbuf+0xf6>
  41fd2e:	f04f 35ff 	mov.w	r5, #4294967295
  41fd32:	e7b0      	b.n	41fc96 <setvbuf+0xce>
  41fd34:	f8dd 9000 	ldr.w	r9, [sp]
  41fd38:	45b1      	cmp	r9, r6
  41fd3a:	d004      	beq.n	41fd46 <setvbuf+0x17e>
  41fd3c:	4648      	mov	r0, r9
  41fd3e:	f7ff fb2d 	bl	41f39c <malloc>
  41fd42:	4607      	mov	r7, r0
  41fd44:	b920      	cbnz	r0, 41fd50 <setvbuf+0x188>
  41fd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  41fd4a:	f04f 35ff 	mov.w	r5, #4294967295
  41fd4e:	e792      	b.n	41fc76 <setvbuf+0xae>
  41fd50:	464e      	mov	r6, r9
  41fd52:	e783      	b.n	41fc5c <setvbuf+0x94>
  41fd54:	20400060 	.word	0x20400060
	...
  41fd60:	eba2 0003 	sub.w	r0, r2, r3
  41fd64:	4770      	bx	lr
  41fd66:	bf00      	nop

0041fd68 <strcmp>:
  41fd68:	7802      	ldrb	r2, [r0, #0]
  41fd6a:	780b      	ldrb	r3, [r1, #0]
  41fd6c:	2a01      	cmp	r2, #1
  41fd6e:	bf28      	it	cs
  41fd70:	429a      	cmpcs	r2, r3
  41fd72:	d1f5      	bne.n	41fd60 <setvbuf+0x198>
  41fd74:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  41fd78:	ea40 0401 	orr.w	r4, r0, r1
  41fd7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  41fd80:	f06f 0c00 	mvn.w	ip, #0
  41fd84:	ea4f 7244 	mov.w	r2, r4, lsl #29
  41fd88:	b312      	cbz	r2, 41fdd0 <strcmp+0x68>
  41fd8a:	ea80 0401 	eor.w	r4, r0, r1
  41fd8e:	f014 0f07 	tst.w	r4, #7
  41fd92:	d16a      	bne.n	41fe6a <strcmp+0x102>
  41fd94:	f000 0407 	and.w	r4, r0, #7
  41fd98:	f020 0007 	bic.w	r0, r0, #7
  41fd9c:	f004 0503 	and.w	r5, r4, #3
  41fda0:	f021 0107 	bic.w	r1, r1, #7
  41fda4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  41fda8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  41fdac:	f014 0f04 	tst.w	r4, #4
  41fdb0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  41fdb4:	fa0c f405 	lsl.w	r4, ip, r5
  41fdb8:	ea62 0204 	orn	r2, r2, r4
  41fdbc:	ea66 0604 	orn	r6, r6, r4
  41fdc0:	d00a      	beq.n	41fdd8 <strcmp+0x70>
  41fdc2:	ea63 0304 	orn	r3, r3, r4
  41fdc6:	4662      	mov	r2, ip
  41fdc8:	ea67 0704 	orn	r7, r7, r4
  41fdcc:	4666      	mov	r6, ip
  41fdce:	e003      	b.n	41fdd8 <strcmp+0x70>
  41fdd0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  41fdd4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  41fdd8:	fa82 f54c 	uadd8	r5, r2, ip
  41fddc:	ea82 0406 	eor.w	r4, r2, r6
  41fde0:	faa4 f48c 	sel	r4, r4, ip
  41fde4:	bb6c      	cbnz	r4, 41fe42 <strcmp+0xda>
  41fde6:	fa83 f54c 	uadd8	r5, r3, ip
  41fdea:	ea83 0507 	eor.w	r5, r3, r7
  41fdee:	faa5 f58c 	sel	r5, r5, ip
  41fdf2:	b995      	cbnz	r5, 41fe1a <strcmp+0xb2>
  41fdf4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  41fdf8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  41fdfc:	fa82 f54c 	uadd8	r5, r2, ip
  41fe00:	ea82 0406 	eor.w	r4, r2, r6
  41fe04:	faa4 f48c 	sel	r4, r4, ip
  41fe08:	fa83 f54c 	uadd8	r5, r3, ip
  41fe0c:	ea83 0507 	eor.w	r5, r3, r7
  41fe10:	faa5 f58c 	sel	r5, r5, ip
  41fe14:	4325      	orrs	r5, r4
  41fe16:	d0db      	beq.n	41fdd0 <strcmp+0x68>
  41fe18:	b99c      	cbnz	r4, 41fe42 <strcmp+0xda>
  41fe1a:	ba2d      	rev	r5, r5
  41fe1c:	fab5 f485 	clz	r4, r5
  41fe20:	f024 0407 	bic.w	r4, r4, #7
  41fe24:	fa27 f104 	lsr.w	r1, r7, r4
  41fe28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  41fe2c:	fa23 f304 	lsr.w	r3, r3, r4
  41fe30:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  41fe34:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41fe38:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41fe3c:	eba0 0001 	sub.w	r0, r0, r1
  41fe40:	4770      	bx	lr
  41fe42:	ba24      	rev	r4, r4
  41fe44:	fab4 f484 	clz	r4, r4
  41fe48:	f024 0407 	bic.w	r4, r4, #7
  41fe4c:	fa26 f104 	lsr.w	r1, r6, r4
  41fe50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  41fe54:	fa22 f204 	lsr.w	r2, r2, r4
  41fe58:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41fe5c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41fe60:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41fe64:	eba0 0001 	sub.w	r0, r0, r1
  41fe68:	4770      	bx	lr
  41fe6a:	f014 0f03 	tst.w	r4, #3
  41fe6e:	d13c      	bne.n	41feea <strcmp+0x182>
  41fe70:	f010 0403 	ands.w	r4, r0, #3
  41fe74:	d128      	bne.n	41fec8 <strcmp+0x160>
  41fe76:	f850 2b08 	ldr.w	r2, [r0], #8
  41fe7a:	f851 3b08 	ldr.w	r3, [r1], #8
  41fe7e:	fa82 f54c 	uadd8	r5, r2, ip
  41fe82:	ea82 0503 	eor.w	r5, r2, r3
  41fe86:	faa5 f58c 	sel	r5, r5, ip
  41fe8a:	b95d      	cbnz	r5, 41fea4 <strcmp+0x13c>
  41fe8c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  41fe90:	f851 3c04 	ldr.w	r3, [r1, #-4]
  41fe94:	fa82 f54c 	uadd8	r5, r2, ip
  41fe98:	ea82 0503 	eor.w	r5, r2, r3
  41fe9c:	faa5 f58c 	sel	r5, r5, ip
  41fea0:	2d00      	cmp	r5, #0
  41fea2:	d0e8      	beq.n	41fe76 <strcmp+0x10e>
  41fea4:	ba2d      	rev	r5, r5
  41fea6:	fab5 f485 	clz	r4, r5
  41feaa:	f024 0407 	bic.w	r4, r4, #7
  41feae:	fa23 f104 	lsr.w	r1, r3, r4
  41feb2:	fa22 f204 	lsr.w	r2, r2, r4
  41feb6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  41feba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  41febe:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41fec2:	eba0 0001 	sub.w	r0, r0, r1
  41fec6:	4770      	bx	lr
  41fec8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  41fecc:	f020 0003 	bic.w	r0, r0, #3
  41fed0:	f850 2b08 	ldr.w	r2, [r0], #8
  41fed4:	f021 0103 	bic.w	r1, r1, #3
  41fed8:	f851 3b08 	ldr.w	r3, [r1], #8
  41fedc:	fa0c f404 	lsl.w	r4, ip, r4
  41fee0:	ea62 0204 	orn	r2, r2, r4
  41fee4:	ea63 0304 	orn	r3, r3, r4
  41fee8:	e7c9      	b.n	41fe7e <strcmp+0x116>
  41feea:	f010 0403 	ands.w	r4, r0, #3
  41feee:	d01a      	beq.n	41ff26 <strcmp+0x1be>
  41fef0:	eba1 0104 	sub.w	r1, r1, r4
  41fef4:	f020 0003 	bic.w	r0, r0, #3
  41fef8:	07e4      	lsls	r4, r4, #31
  41fefa:	f850 2b04 	ldr.w	r2, [r0], #4
  41fefe:	d006      	beq.n	41ff0e <strcmp+0x1a6>
  41ff00:	d20f      	bcs.n	41ff22 <strcmp+0x1ba>
  41ff02:	788b      	ldrb	r3, [r1, #2]
  41ff04:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  41ff08:	1ae4      	subs	r4, r4, r3
  41ff0a:	d106      	bne.n	41ff1a <strcmp+0x1b2>
  41ff0c:	b12b      	cbz	r3, 41ff1a <strcmp+0x1b2>
  41ff0e:	78cb      	ldrb	r3, [r1, #3]
  41ff10:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  41ff14:	1ae4      	subs	r4, r4, r3
  41ff16:	d100      	bne.n	41ff1a <strcmp+0x1b2>
  41ff18:	b91b      	cbnz	r3, 41ff22 <strcmp+0x1ba>
  41ff1a:	4620      	mov	r0, r4
  41ff1c:	f85d 4b10 	ldr.w	r4, [sp], #16
  41ff20:	4770      	bx	lr
  41ff22:	f101 0104 	add.w	r1, r1, #4
  41ff26:	f850 2b04 	ldr.w	r2, [r0], #4
  41ff2a:	07cc      	lsls	r4, r1, #31
  41ff2c:	f021 0103 	bic.w	r1, r1, #3
  41ff30:	f851 3b04 	ldr.w	r3, [r1], #4
  41ff34:	d848      	bhi.n	41ffc8 <strcmp+0x260>
  41ff36:	d224      	bcs.n	41ff82 <strcmp+0x21a>
  41ff38:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  41ff3c:	fa82 f54c 	uadd8	r5, r2, ip
  41ff40:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  41ff44:	faa5 f58c 	sel	r5, r5, ip
  41ff48:	d10a      	bne.n	41ff60 <strcmp+0x1f8>
  41ff4a:	b965      	cbnz	r5, 41ff66 <strcmp+0x1fe>
  41ff4c:	f851 3b04 	ldr.w	r3, [r1], #4
  41ff50:	ea84 0402 	eor.w	r4, r4, r2
  41ff54:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  41ff58:	d10e      	bne.n	41ff78 <strcmp+0x210>
  41ff5a:	f850 2b04 	ldr.w	r2, [r0], #4
  41ff5e:	e7eb      	b.n	41ff38 <strcmp+0x1d0>
  41ff60:	ea4f 2313 	mov.w	r3, r3, lsr #8
  41ff64:	e055      	b.n	420012 <strcmp+0x2aa>
  41ff66:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  41ff6a:	d14d      	bne.n	420008 <strcmp+0x2a0>
  41ff6c:	7808      	ldrb	r0, [r1, #0]
  41ff6e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  41ff72:	f1c0 0000 	rsb	r0, r0, #0
  41ff76:	4770      	bx	lr
  41ff78:	ea4f 6212 	mov.w	r2, r2, lsr #24
  41ff7c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  41ff80:	e047      	b.n	420012 <strcmp+0x2aa>
  41ff82:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  41ff86:	fa82 f54c 	uadd8	r5, r2, ip
  41ff8a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  41ff8e:	faa5 f58c 	sel	r5, r5, ip
  41ff92:	d10a      	bne.n	41ffaa <strcmp+0x242>
  41ff94:	b965      	cbnz	r5, 41ffb0 <strcmp+0x248>
  41ff96:	f851 3b04 	ldr.w	r3, [r1], #4
  41ff9a:	ea84 0402 	eor.w	r4, r4, r2
  41ff9e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  41ffa2:	d10c      	bne.n	41ffbe <strcmp+0x256>
  41ffa4:	f850 2b04 	ldr.w	r2, [r0], #4
  41ffa8:	e7eb      	b.n	41ff82 <strcmp+0x21a>
  41ffaa:	ea4f 4313 	mov.w	r3, r3, lsr #16
  41ffae:	e030      	b.n	420012 <strcmp+0x2aa>
  41ffb0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  41ffb4:	d128      	bne.n	420008 <strcmp+0x2a0>
  41ffb6:	880b      	ldrh	r3, [r1, #0]
  41ffb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41ffbc:	e029      	b.n	420012 <strcmp+0x2aa>
  41ffbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
  41ffc2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  41ffc6:	e024      	b.n	420012 <strcmp+0x2aa>
  41ffc8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  41ffcc:	fa82 f54c 	uadd8	r5, r2, ip
  41ffd0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  41ffd4:	faa5 f58c 	sel	r5, r5, ip
  41ffd8:	d10a      	bne.n	41fff0 <strcmp+0x288>
  41ffda:	b965      	cbnz	r5, 41fff6 <strcmp+0x28e>
  41ffdc:	f851 3b04 	ldr.w	r3, [r1], #4
  41ffe0:	ea84 0402 	eor.w	r4, r4, r2
  41ffe4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  41ffe8:	d109      	bne.n	41fffe <strcmp+0x296>
  41ffea:	f850 2b04 	ldr.w	r2, [r0], #4
  41ffee:	e7eb      	b.n	41ffc8 <strcmp+0x260>
  41fff0:	ea4f 6313 	mov.w	r3, r3, lsr #24
  41fff4:	e00d      	b.n	420012 <strcmp+0x2aa>
  41fff6:	f015 0fff 	tst.w	r5, #255	; 0xff
  41fffa:	d105      	bne.n	420008 <strcmp+0x2a0>
  41fffc:	680b      	ldr	r3, [r1, #0]
  41fffe:	ea4f 2212 	mov.w	r2, r2, lsr #8
  420002:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  420006:	e004      	b.n	420012 <strcmp+0x2aa>
  420008:	f04f 0000 	mov.w	r0, #0
  42000c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  420010:	4770      	bx	lr
  420012:	ba12      	rev	r2, r2
  420014:	ba1b      	rev	r3, r3
  420016:	fa82 f44c 	uadd8	r4, r2, ip
  42001a:	ea82 0403 	eor.w	r4, r2, r3
  42001e:	faa4 f58c 	sel	r5, r4, ip
  420022:	fab5 f485 	clz	r4, r5
  420026:	fa02 f204 	lsl.w	r2, r2, r4
  42002a:	fa03 f304 	lsl.w	r3, r3, r4
  42002e:	ea4f 6012 	mov.w	r0, r2, lsr #24
  420032:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  420036:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  42003a:	4770      	bx	lr

0042003c <strcpy>:
  42003c:	ea80 0201 	eor.w	r2, r0, r1
  420040:	4684      	mov	ip, r0
  420042:	f012 0f03 	tst.w	r2, #3
  420046:	d14f      	bne.n	4200e8 <strcpy+0xac>
  420048:	f011 0f03 	tst.w	r1, #3
  42004c:	d132      	bne.n	4200b4 <strcpy+0x78>
  42004e:	f84d 4d04 	str.w	r4, [sp, #-4]!
  420052:	f011 0f04 	tst.w	r1, #4
  420056:	f851 3b04 	ldr.w	r3, [r1], #4
  42005a:	d00b      	beq.n	420074 <strcpy+0x38>
  42005c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  420060:	439a      	bics	r2, r3
  420062:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  420066:	bf04      	itt	eq
  420068:	f84c 3b04 	streq.w	r3, [ip], #4
  42006c:	f851 3b04 	ldreq.w	r3, [r1], #4
  420070:	d116      	bne.n	4200a0 <strcpy+0x64>
  420072:	bf00      	nop
  420074:	f851 4b04 	ldr.w	r4, [r1], #4
  420078:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  42007c:	439a      	bics	r2, r3
  42007e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  420082:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  420086:	d10b      	bne.n	4200a0 <strcpy+0x64>
  420088:	f84c 3b04 	str.w	r3, [ip], #4
  42008c:	43a2      	bics	r2, r4
  42008e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  420092:	bf04      	itt	eq
  420094:	f851 3b04 	ldreq.w	r3, [r1], #4
  420098:	f84c 4b04 	streq.w	r4, [ip], #4
  42009c:	d0ea      	beq.n	420074 <strcpy+0x38>
  42009e:	4623      	mov	r3, r4
  4200a0:	f80c 3b01 	strb.w	r3, [ip], #1
  4200a4:	f013 0fff 	tst.w	r3, #255	; 0xff
  4200a8:	ea4f 2333 	mov.w	r3, r3, ror #8
  4200ac:	d1f8      	bne.n	4200a0 <strcpy+0x64>
  4200ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  4200b2:	4770      	bx	lr
  4200b4:	f011 0f01 	tst.w	r1, #1
  4200b8:	d006      	beq.n	4200c8 <strcpy+0x8c>
  4200ba:	f811 2b01 	ldrb.w	r2, [r1], #1
  4200be:	f80c 2b01 	strb.w	r2, [ip], #1
  4200c2:	2a00      	cmp	r2, #0
  4200c4:	bf08      	it	eq
  4200c6:	4770      	bxeq	lr
  4200c8:	f011 0f02 	tst.w	r1, #2
  4200cc:	d0bf      	beq.n	42004e <strcpy+0x12>
  4200ce:	f831 2b02 	ldrh.w	r2, [r1], #2
  4200d2:	f012 0fff 	tst.w	r2, #255	; 0xff
  4200d6:	bf16      	itet	ne
  4200d8:	f82c 2b02 	strhne.w	r2, [ip], #2
  4200dc:	f88c 2000 	strbeq.w	r2, [ip]
  4200e0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4200e4:	d1b3      	bne.n	42004e <strcpy+0x12>
  4200e6:	4770      	bx	lr
  4200e8:	f811 2b01 	ldrb.w	r2, [r1], #1
  4200ec:	f80c 2b01 	strb.w	r2, [ip], #1
  4200f0:	2a00      	cmp	r2, #0
  4200f2:	d1f9      	bne.n	4200e8 <strcpy+0xac>
  4200f4:	4770      	bx	lr
  4200f6:	bf00      	nop
	...

00420100 <strlen>:
  420100:	f890 f000 	pld	[r0]
  420104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  420108:	f020 0107 	bic.w	r1, r0, #7
  42010c:	f06f 0c00 	mvn.w	ip, #0
  420110:	f010 0407 	ands.w	r4, r0, #7
  420114:	f891 f020 	pld	[r1, #32]
  420118:	f040 8049 	bne.w	4201ae <strlen+0xae>
  42011c:	f04f 0400 	mov.w	r4, #0
  420120:	f06f 0007 	mvn.w	r0, #7
  420124:	e9d1 2300 	ldrd	r2, r3, [r1]
  420128:	f891 f040 	pld	[r1, #64]	; 0x40
  42012c:	f100 0008 	add.w	r0, r0, #8
  420130:	fa82 f24c 	uadd8	r2, r2, ip
  420134:	faa4 f28c 	sel	r2, r4, ip
  420138:	fa83 f34c 	uadd8	r3, r3, ip
  42013c:	faa2 f38c 	sel	r3, r2, ip
  420140:	bb4b      	cbnz	r3, 420196 <strlen+0x96>
  420142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  420146:	fa82 f24c 	uadd8	r2, r2, ip
  42014a:	f100 0008 	add.w	r0, r0, #8
  42014e:	faa4 f28c 	sel	r2, r4, ip
  420152:	fa83 f34c 	uadd8	r3, r3, ip
  420156:	faa2 f38c 	sel	r3, r2, ip
  42015a:	b9e3      	cbnz	r3, 420196 <strlen+0x96>
  42015c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  420160:	fa82 f24c 	uadd8	r2, r2, ip
  420164:	f100 0008 	add.w	r0, r0, #8
  420168:	faa4 f28c 	sel	r2, r4, ip
  42016c:	fa83 f34c 	uadd8	r3, r3, ip
  420170:	faa2 f38c 	sel	r3, r2, ip
  420174:	b97b      	cbnz	r3, 420196 <strlen+0x96>
  420176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  42017a:	f101 0120 	add.w	r1, r1, #32
  42017e:	fa82 f24c 	uadd8	r2, r2, ip
  420182:	f100 0008 	add.w	r0, r0, #8
  420186:	faa4 f28c 	sel	r2, r4, ip
  42018a:	fa83 f34c 	uadd8	r3, r3, ip
  42018e:	faa2 f38c 	sel	r3, r2, ip
  420192:	2b00      	cmp	r3, #0
  420194:	d0c6      	beq.n	420124 <strlen+0x24>
  420196:	2a00      	cmp	r2, #0
  420198:	bf04      	itt	eq
  42019a:	3004      	addeq	r0, #4
  42019c:	461a      	moveq	r2, r3
  42019e:	ba12      	rev	r2, r2
  4201a0:	fab2 f282 	clz	r2, r2
  4201a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4201a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4201ac:	4770      	bx	lr
  4201ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4201b2:	f004 0503 	and.w	r5, r4, #3
  4201b6:	f1c4 0000 	rsb	r0, r4, #0
  4201ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4201be:	f014 0f04 	tst.w	r4, #4
  4201c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4201c6:	fa0c f505 	lsl.w	r5, ip, r5
  4201ca:	ea62 0205 	orn	r2, r2, r5
  4201ce:	bf1c      	itt	ne
  4201d0:	ea63 0305 	ornne	r3, r3, r5
  4201d4:	4662      	movne	r2, ip
  4201d6:	f04f 0400 	mov.w	r4, #0
  4201da:	e7a9      	b.n	420130 <strlen+0x30>

004201dc <__sprint_r.part.0>:
  4201dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4201e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  4201e2:	049c      	lsls	r4, r3, #18
  4201e4:	4693      	mov	fp, r2
  4201e6:	d52f      	bpl.n	420248 <__sprint_r.part.0+0x6c>
  4201e8:	6893      	ldr	r3, [r2, #8]
  4201ea:	6812      	ldr	r2, [r2, #0]
  4201ec:	b353      	cbz	r3, 420244 <__sprint_r.part.0+0x68>
  4201ee:	460e      	mov	r6, r1
  4201f0:	4607      	mov	r7, r0
  4201f2:	f102 0908 	add.w	r9, r2, #8
  4201f6:	e919 0420 	ldmdb	r9, {r5, sl}
  4201fa:	ea5f 089a 	movs.w	r8, sl, lsr #2
  4201fe:	d017      	beq.n	420230 <__sprint_r.part.0+0x54>
  420200:	3d04      	subs	r5, #4
  420202:	2400      	movs	r4, #0
  420204:	e001      	b.n	42020a <__sprint_r.part.0+0x2e>
  420206:	45a0      	cmp	r8, r4
  420208:	d010      	beq.n	42022c <__sprint_r.part.0+0x50>
  42020a:	4632      	mov	r2, r6
  42020c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  420210:	4638      	mov	r0, r7
  420212:	f001 f8bb 	bl	42138c <_fputwc_r>
  420216:	1c43      	adds	r3, r0, #1
  420218:	f104 0401 	add.w	r4, r4, #1
  42021c:	d1f3      	bne.n	420206 <__sprint_r.part.0+0x2a>
  42021e:	2300      	movs	r3, #0
  420220:	f8cb 3008 	str.w	r3, [fp, #8]
  420224:	f8cb 3004 	str.w	r3, [fp, #4]
  420228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42022c:	f8db 3008 	ldr.w	r3, [fp, #8]
  420230:	f02a 0a03 	bic.w	sl, sl, #3
  420234:	eba3 030a 	sub.w	r3, r3, sl
  420238:	f8cb 3008 	str.w	r3, [fp, #8]
  42023c:	f109 0908 	add.w	r9, r9, #8
  420240:	2b00      	cmp	r3, #0
  420242:	d1d8      	bne.n	4201f6 <__sprint_r.part.0+0x1a>
  420244:	2000      	movs	r0, #0
  420246:	e7ea      	b.n	42021e <__sprint_r.part.0+0x42>
  420248:	f001 fa0a 	bl	421660 <__sfvwrite_r>
  42024c:	2300      	movs	r3, #0
  42024e:	f8cb 3008 	str.w	r3, [fp, #8]
  420252:	f8cb 3004 	str.w	r3, [fp, #4]
  420256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42025a:	bf00      	nop

0042025c <_vfiprintf_r>:
  42025c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420260:	b0ad      	sub	sp, #180	; 0xb4
  420262:	461d      	mov	r5, r3
  420264:	468b      	mov	fp, r1
  420266:	4690      	mov	r8, r2
  420268:	9307      	str	r3, [sp, #28]
  42026a:	9006      	str	r0, [sp, #24]
  42026c:	b118      	cbz	r0, 420276 <_vfiprintf_r+0x1a>
  42026e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  420270:	2b00      	cmp	r3, #0
  420272:	f000 80f3 	beq.w	42045c <_vfiprintf_r+0x200>
  420276:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  42027a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  42027e:	07df      	lsls	r7, r3, #31
  420280:	b281      	uxth	r1, r0
  420282:	d402      	bmi.n	42028a <_vfiprintf_r+0x2e>
  420284:	058e      	lsls	r6, r1, #22
  420286:	f140 80fc 	bpl.w	420482 <_vfiprintf_r+0x226>
  42028a:	048c      	lsls	r4, r1, #18
  42028c:	d40a      	bmi.n	4202a4 <_vfiprintf_r+0x48>
  42028e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  420292:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  420296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  42029a:	f8ab 100c 	strh.w	r1, [fp, #12]
  42029e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4202a2:	b289      	uxth	r1, r1
  4202a4:	0708      	lsls	r0, r1, #28
  4202a6:	f140 80b3 	bpl.w	420410 <_vfiprintf_r+0x1b4>
  4202aa:	f8db 3010 	ldr.w	r3, [fp, #16]
  4202ae:	2b00      	cmp	r3, #0
  4202b0:	f000 80ae 	beq.w	420410 <_vfiprintf_r+0x1b4>
  4202b4:	f001 031a 	and.w	r3, r1, #26
  4202b8:	2b0a      	cmp	r3, #10
  4202ba:	f000 80b5 	beq.w	420428 <_vfiprintf_r+0x1cc>
  4202be:	2300      	movs	r3, #0
  4202c0:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  4202c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4202c6:	9311      	str	r3, [sp, #68]	; 0x44
  4202c8:	9310      	str	r3, [sp, #64]	; 0x40
  4202ca:	9303      	str	r3, [sp, #12]
  4202cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  4202d0:	46ca      	mov	sl, r9
  4202d2:	f8cd b010 	str.w	fp, [sp, #16]
  4202d6:	f898 3000 	ldrb.w	r3, [r8]
  4202da:	4644      	mov	r4, r8
  4202dc:	b1fb      	cbz	r3, 42031e <_vfiprintf_r+0xc2>
  4202de:	2b25      	cmp	r3, #37	; 0x25
  4202e0:	d102      	bne.n	4202e8 <_vfiprintf_r+0x8c>
  4202e2:	e01c      	b.n	42031e <_vfiprintf_r+0xc2>
  4202e4:	2b25      	cmp	r3, #37	; 0x25
  4202e6:	d003      	beq.n	4202f0 <_vfiprintf_r+0x94>
  4202e8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4202ec:	2b00      	cmp	r3, #0
  4202ee:	d1f9      	bne.n	4202e4 <_vfiprintf_r+0x88>
  4202f0:	eba4 0508 	sub.w	r5, r4, r8
  4202f4:	b19d      	cbz	r5, 42031e <_vfiprintf_r+0xc2>
  4202f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4202f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4202fa:	f8ca 8000 	str.w	r8, [sl]
  4202fe:	3301      	adds	r3, #1
  420300:	442a      	add	r2, r5
  420302:	2b07      	cmp	r3, #7
  420304:	f8ca 5004 	str.w	r5, [sl, #4]
  420308:	9211      	str	r2, [sp, #68]	; 0x44
  42030a:	9310      	str	r3, [sp, #64]	; 0x40
  42030c:	dd7a      	ble.n	420404 <_vfiprintf_r+0x1a8>
  42030e:	2a00      	cmp	r2, #0
  420310:	f040 84b0 	bne.w	420c74 <_vfiprintf_r+0xa18>
  420314:	9b03      	ldr	r3, [sp, #12]
  420316:	9210      	str	r2, [sp, #64]	; 0x40
  420318:	442b      	add	r3, r5
  42031a:	46ca      	mov	sl, r9
  42031c:	9303      	str	r3, [sp, #12]
  42031e:	7823      	ldrb	r3, [r4, #0]
  420320:	2b00      	cmp	r3, #0
  420322:	f000 83e0 	beq.w	420ae6 <_vfiprintf_r+0x88a>
  420326:	2000      	movs	r0, #0
  420328:	f04f 0300 	mov.w	r3, #0
  42032c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  420330:	f104 0801 	add.w	r8, r4, #1
  420334:	7862      	ldrb	r2, [r4, #1]
  420336:	4605      	mov	r5, r0
  420338:	4606      	mov	r6, r0
  42033a:	4603      	mov	r3, r0
  42033c:	f04f 34ff 	mov.w	r4, #4294967295
  420340:	f108 0801 	add.w	r8, r8, #1
  420344:	f1a2 0120 	sub.w	r1, r2, #32
  420348:	2958      	cmp	r1, #88	; 0x58
  42034a:	f200 82de 	bhi.w	42090a <_vfiprintf_r+0x6ae>
  42034e:	e8df f011 	tbh	[pc, r1, lsl #1]
  420352:	0221      	.short	0x0221
  420354:	02dc02dc 	.word	0x02dc02dc
  420358:	02dc0229 	.word	0x02dc0229
  42035c:	02dc02dc 	.word	0x02dc02dc
  420360:	02dc02dc 	.word	0x02dc02dc
  420364:	028902dc 	.word	0x028902dc
  420368:	02dc0295 	.word	0x02dc0295
  42036c:	02bd00a2 	.word	0x02bd00a2
  420370:	019f02dc 	.word	0x019f02dc
  420374:	01a401a4 	.word	0x01a401a4
  420378:	01a401a4 	.word	0x01a401a4
  42037c:	01a401a4 	.word	0x01a401a4
  420380:	01a401a4 	.word	0x01a401a4
  420384:	02dc01a4 	.word	0x02dc01a4
  420388:	02dc02dc 	.word	0x02dc02dc
  42038c:	02dc02dc 	.word	0x02dc02dc
  420390:	02dc02dc 	.word	0x02dc02dc
  420394:	02dc02dc 	.word	0x02dc02dc
  420398:	01b202dc 	.word	0x01b202dc
  42039c:	02dc02dc 	.word	0x02dc02dc
  4203a0:	02dc02dc 	.word	0x02dc02dc
  4203a4:	02dc02dc 	.word	0x02dc02dc
  4203a8:	02dc02dc 	.word	0x02dc02dc
  4203ac:	02dc02dc 	.word	0x02dc02dc
  4203b0:	02dc0197 	.word	0x02dc0197
  4203b4:	02dc02dc 	.word	0x02dc02dc
  4203b8:	02dc02dc 	.word	0x02dc02dc
  4203bc:	02dc019b 	.word	0x02dc019b
  4203c0:	025302dc 	.word	0x025302dc
  4203c4:	02dc02dc 	.word	0x02dc02dc
  4203c8:	02dc02dc 	.word	0x02dc02dc
  4203cc:	02dc02dc 	.word	0x02dc02dc
  4203d0:	02dc02dc 	.word	0x02dc02dc
  4203d4:	02dc02dc 	.word	0x02dc02dc
  4203d8:	021b025a 	.word	0x021b025a
  4203dc:	02dc02dc 	.word	0x02dc02dc
  4203e0:	026e02dc 	.word	0x026e02dc
  4203e4:	02dc021b 	.word	0x02dc021b
  4203e8:	027302dc 	.word	0x027302dc
  4203ec:	01f502dc 	.word	0x01f502dc
  4203f0:	02090182 	.word	0x02090182
  4203f4:	02dc02d7 	.word	0x02dc02d7
  4203f8:	02dc029a 	.word	0x02dc029a
  4203fc:	02dc00a7 	.word	0x02dc00a7
  420400:	022e02dc 	.word	0x022e02dc
  420404:	f10a 0a08 	add.w	sl, sl, #8
  420408:	9b03      	ldr	r3, [sp, #12]
  42040a:	442b      	add	r3, r5
  42040c:	9303      	str	r3, [sp, #12]
  42040e:	e786      	b.n	42031e <_vfiprintf_r+0xc2>
  420410:	4659      	mov	r1, fp
  420412:	9806      	ldr	r0, [sp, #24]
  420414:	f000 fdac 	bl	420f70 <__swsetup_r>
  420418:	bb18      	cbnz	r0, 420462 <_vfiprintf_r+0x206>
  42041a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  42041e:	f001 031a 	and.w	r3, r1, #26
  420422:	2b0a      	cmp	r3, #10
  420424:	f47f af4b 	bne.w	4202be <_vfiprintf_r+0x62>
  420428:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  42042c:	2b00      	cmp	r3, #0
  42042e:	f6ff af46 	blt.w	4202be <_vfiprintf_r+0x62>
  420432:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  420436:	07db      	lsls	r3, r3, #31
  420438:	d405      	bmi.n	420446 <_vfiprintf_r+0x1ea>
  42043a:	058f      	lsls	r7, r1, #22
  42043c:	d403      	bmi.n	420446 <_vfiprintf_r+0x1ea>
  42043e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  420442:	f001 fac3 	bl	4219cc <__retarget_lock_release_recursive>
  420446:	462b      	mov	r3, r5
  420448:	4642      	mov	r2, r8
  42044a:	4659      	mov	r1, fp
  42044c:	9806      	ldr	r0, [sp, #24]
  42044e:	f000 fd4d 	bl	420eec <__sbprintf>
  420452:	9003      	str	r0, [sp, #12]
  420454:	9803      	ldr	r0, [sp, #12]
  420456:	b02d      	add	sp, #180	; 0xb4
  420458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  42045c:	f000 fef4 	bl	421248 <__sinit>
  420460:	e709      	b.n	420276 <_vfiprintf_r+0x1a>
  420462:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  420466:	07d9      	lsls	r1, r3, #31
  420468:	d404      	bmi.n	420474 <_vfiprintf_r+0x218>
  42046a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  42046e:	059a      	lsls	r2, r3, #22
  420470:	f140 84aa 	bpl.w	420dc8 <_vfiprintf_r+0xb6c>
  420474:	f04f 33ff 	mov.w	r3, #4294967295
  420478:	9303      	str	r3, [sp, #12]
  42047a:	9803      	ldr	r0, [sp, #12]
  42047c:	b02d      	add	sp, #180	; 0xb4
  42047e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420482:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  420486:	f001 fa9f 	bl	4219c8 <__retarget_lock_acquire_recursive>
  42048a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  42048e:	b281      	uxth	r1, r0
  420490:	e6fb      	b.n	42028a <_vfiprintf_r+0x2e>
  420492:	4276      	negs	r6, r6
  420494:	9207      	str	r2, [sp, #28]
  420496:	f043 0304 	orr.w	r3, r3, #4
  42049a:	f898 2000 	ldrb.w	r2, [r8]
  42049e:	e74f      	b.n	420340 <_vfiprintf_r+0xe4>
  4204a0:	9608      	str	r6, [sp, #32]
  4204a2:	069e      	lsls	r6, r3, #26
  4204a4:	f100 8450 	bmi.w	420d48 <_vfiprintf_r+0xaec>
  4204a8:	9907      	ldr	r1, [sp, #28]
  4204aa:	06dd      	lsls	r5, r3, #27
  4204ac:	460a      	mov	r2, r1
  4204ae:	f100 83ef 	bmi.w	420c90 <_vfiprintf_r+0xa34>
  4204b2:	0658      	lsls	r0, r3, #25
  4204b4:	f140 83ec 	bpl.w	420c90 <_vfiprintf_r+0xa34>
  4204b8:	880e      	ldrh	r6, [r1, #0]
  4204ba:	3104      	adds	r1, #4
  4204bc:	2700      	movs	r7, #0
  4204be:	2201      	movs	r2, #1
  4204c0:	9107      	str	r1, [sp, #28]
  4204c2:	f04f 0100 	mov.w	r1, #0
  4204c6:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  4204ca:	2500      	movs	r5, #0
  4204cc:	1c61      	adds	r1, r4, #1
  4204ce:	f000 8116 	beq.w	4206fe <_vfiprintf_r+0x4a2>
  4204d2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  4204d6:	9102      	str	r1, [sp, #8]
  4204d8:	ea56 0107 	orrs.w	r1, r6, r7
  4204dc:	f040 8114 	bne.w	420708 <_vfiprintf_r+0x4ac>
  4204e0:	2c00      	cmp	r4, #0
  4204e2:	f040 835c 	bne.w	420b9e <_vfiprintf_r+0x942>
  4204e6:	2a00      	cmp	r2, #0
  4204e8:	f040 83b7 	bne.w	420c5a <_vfiprintf_r+0x9fe>
  4204ec:	f013 0301 	ands.w	r3, r3, #1
  4204f0:	9305      	str	r3, [sp, #20]
  4204f2:	f000 8457 	beq.w	420da4 <_vfiprintf_r+0xb48>
  4204f6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  4204fa:	2330      	movs	r3, #48	; 0x30
  4204fc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  420500:	9b05      	ldr	r3, [sp, #20]
  420502:	42a3      	cmp	r3, r4
  420504:	bfb8      	it	lt
  420506:	4623      	movlt	r3, r4
  420508:	9301      	str	r3, [sp, #4]
  42050a:	b10d      	cbz	r5, 420510 <_vfiprintf_r+0x2b4>
  42050c:	3301      	adds	r3, #1
  42050e:	9301      	str	r3, [sp, #4]
  420510:	9b02      	ldr	r3, [sp, #8]
  420512:	f013 0302 	ands.w	r3, r3, #2
  420516:	9309      	str	r3, [sp, #36]	; 0x24
  420518:	d002      	beq.n	420520 <_vfiprintf_r+0x2c4>
  42051a:	9b01      	ldr	r3, [sp, #4]
  42051c:	3302      	adds	r3, #2
  42051e:	9301      	str	r3, [sp, #4]
  420520:	9b02      	ldr	r3, [sp, #8]
  420522:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  420526:	930a      	str	r3, [sp, #40]	; 0x28
  420528:	f040 8217 	bne.w	42095a <_vfiprintf_r+0x6fe>
  42052c:	9b08      	ldr	r3, [sp, #32]
  42052e:	9a01      	ldr	r2, [sp, #4]
  420530:	1a9d      	subs	r5, r3, r2
  420532:	2d00      	cmp	r5, #0
  420534:	f340 8211 	ble.w	42095a <_vfiprintf_r+0x6fe>
  420538:	2d10      	cmp	r5, #16
  42053a:	f340 8490 	ble.w	420e5e <_vfiprintf_r+0xc02>
  42053e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  420540:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420542:	4ec4      	ldr	r6, [pc, #784]	; (420854 <_vfiprintf_r+0x5f8>)
  420544:	46d6      	mov	lr, sl
  420546:	2710      	movs	r7, #16
  420548:	46a2      	mov	sl, r4
  42054a:	4619      	mov	r1, r3
  42054c:	9c06      	ldr	r4, [sp, #24]
  42054e:	e007      	b.n	420560 <_vfiprintf_r+0x304>
  420550:	f101 0c02 	add.w	ip, r1, #2
  420554:	f10e 0e08 	add.w	lr, lr, #8
  420558:	4601      	mov	r1, r0
  42055a:	3d10      	subs	r5, #16
  42055c:	2d10      	cmp	r5, #16
  42055e:	dd11      	ble.n	420584 <_vfiprintf_r+0x328>
  420560:	1c48      	adds	r0, r1, #1
  420562:	3210      	adds	r2, #16
  420564:	2807      	cmp	r0, #7
  420566:	9211      	str	r2, [sp, #68]	; 0x44
  420568:	e88e 00c0 	stmia.w	lr, {r6, r7}
  42056c:	9010      	str	r0, [sp, #64]	; 0x40
  42056e:	ddef      	ble.n	420550 <_vfiprintf_r+0x2f4>
  420570:	2a00      	cmp	r2, #0
  420572:	f040 81e4 	bne.w	42093e <_vfiprintf_r+0x6e2>
  420576:	3d10      	subs	r5, #16
  420578:	2d10      	cmp	r5, #16
  42057a:	4611      	mov	r1, r2
  42057c:	f04f 0c01 	mov.w	ip, #1
  420580:	46ce      	mov	lr, r9
  420582:	dced      	bgt.n	420560 <_vfiprintf_r+0x304>
  420584:	4654      	mov	r4, sl
  420586:	4661      	mov	r1, ip
  420588:	46f2      	mov	sl, lr
  42058a:	442a      	add	r2, r5
  42058c:	2907      	cmp	r1, #7
  42058e:	9211      	str	r2, [sp, #68]	; 0x44
  420590:	f8ca 6000 	str.w	r6, [sl]
  420594:	f8ca 5004 	str.w	r5, [sl, #4]
  420598:	9110      	str	r1, [sp, #64]	; 0x40
  42059a:	f300 82ec 	bgt.w	420b76 <_vfiprintf_r+0x91a>
  42059e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4205a2:	f10a 0a08 	add.w	sl, sl, #8
  4205a6:	1c48      	adds	r0, r1, #1
  4205a8:	2d00      	cmp	r5, #0
  4205aa:	f040 81de 	bne.w	42096a <_vfiprintf_r+0x70e>
  4205ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4205b0:	2b00      	cmp	r3, #0
  4205b2:	f000 81f8 	beq.w	4209a6 <_vfiprintf_r+0x74a>
  4205b6:	3202      	adds	r2, #2
  4205b8:	a90e      	add	r1, sp, #56	; 0x38
  4205ba:	2302      	movs	r3, #2
  4205bc:	2807      	cmp	r0, #7
  4205be:	9211      	str	r2, [sp, #68]	; 0x44
  4205c0:	9010      	str	r0, [sp, #64]	; 0x40
  4205c2:	e88a 000a 	stmia.w	sl, {r1, r3}
  4205c6:	f340 81ea 	ble.w	42099e <_vfiprintf_r+0x742>
  4205ca:	2a00      	cmp	r2, #0
  4205cc:	f040 838c 	bne.w	420ce8 <_vfiprintf_r+0xa8c>
  4205d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4205d2:	2b80      	cmp	r3, #128	; 0x80
  4205d4:	f04f 0001 	mov.w	r0, #1
  4205d8:	4611      	mov	r1, r2
  4205da:	46ca      	mov	sl, r9
  4205dc:	f040 81e7 	bne.w	4209ae <_vfiprintf_r+0x752>
  4205e0:	9b08      	ldr	r3, [sp, #32]
  4205e2:	9d01      	ldr	r5, [sp, #4]
  4205e4:	1b5e      	subs	r6, r3, r5
  4205e6:	2e00      	cmp	r6, #0
  4205e8:	f340 81e1 	ble.w	4209ae <_vfiprintf_r+0x752>
  4205ec:	2e10      	cmp	r6, #16
  4205ee:	4d9a      	ldr	r5, [pc, #616]	; (420858 <_vfiprintf_r+0x5fc>)
  4205f0:	f340 8450 	ble.w	420e94 <_vfiprintf_r+0xc38>
  4205f4:	46d4      	mov	ip, sl
  4205f6:	2710      	movs	r7, #16
  4205f8:	46a2      	mov	sl, r4
  4205fa:	9c06      	ldr	r4, [sp, #24]
  4205fc:	e007      	b.n	42060e <_vfiprintf_r+0x3b2>
  4205fe:	f101 0e02 	add.w	lr, r1, #2
  420602:	f10c 0c08 	add.w	ip, ip, #8
  420606:	4601      	mov	r1, r0
  420608:	3e10      	subs	r6, #16
  42060a:	2e10      	cmp	r6, #16
  42060c:	dd11      	ble.n	420632 <_vfiprintf_r+0x3d6>
  42060e:	1c48      	adds	r0, r1, #1
  420610:	3210      	adds	r2, #16
  420612:	2807      	cmp	r0, #7
  420614:	9211      	str	r2, [sp, #68]	; 0x44
  420616:	e88c 00a0 	stmia.w	ip, {r5, r7}
  42061a:	9010      	str	r0, [sp, #64]	; 0x40
  42061c:	ddef      	ble.n	4205fe <_vfiprintf_r+0x3a2>
  42061e:	2a00      	cmp	r2, #0
  420620:	f040 829d 	bne.w	420b5e <_vfiprintf_r+0x902>
  420624:	3e10      	subs	r6, #16
  420626:	2e10      	cmp	r6, #16
  420628:	f04f 0e01 	mov.w	lr, #1
  42062c:	4611      	mov	r1, r2
  42062e:	46cc      	mov	ip, r9
  420630:	dced      	bgt.n	42060e <_vfiprintf_r+0x3b2>
  420632:	4654      	mov	r4, sl
  420634:	46e2      	mov	sl, ip
  420636:	4432      	add	r2, r6
  420638:	f1be 0f07 	cmp.w	lr, #7
  42063c:	9211      	str	r2, [sp, #68]	; 0x44
  42063e:	e88a 0060 	stmia.w	sl, {r5, r6}
  420642:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  420646:	f300 8369 	bgt.w	420d1c <_vfiprintf_r+0xac0>
  42064a:	f10a 0a08 	add.w	sl, sl, #8
  42064e:	f10e 0001 	add.w	r0, lr, #1
  420652:	4671      	mov	r1, lr
  420654:	e1ab      	b.n	4209ae <_vfiprintf_r+0x752>
  420656:	9608      	str	r6, [sp, #32]
  420658:	f013 0220 	ands.w	r2, r3, #32
  42065c:	f040 838c 	bne.w	420d78 <_vfiprintf_r+0xb1c>
  420660:	f013 0110 	ands.w	r1, r3, #16
  420664:	f040 831a 	bne.w	420c9c <_vfiprintf_r+0xa40>
  420668:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  42066c:	f000 8316 	beq.w	420c9c <_vfiprintf_r+0xa40>
  420670:	9807      	ldr	r0, [sp, #28]
  420672:	460a      	mov	r2, r1
  420674:	4601      	mov	r1, r0
  420676:	3104      	adds	r1, #4
  420678:	8806      	ldrh	r6, [r0, #0]
  42067a:	9107      	str	r1, [sp, #28]
  42067c:	2700      	movs	r7, #0
  42067e:	e720      	b.n	4204c2 <_vfiprintf_r+0x266>
  420680:	9608      	str	r6, [sp, #32]
  420682:	f043 0310 	orr.w	r3, r3, #16
  420686:	e7e7      	b.n	420658 <_vfiprintf_r+0x3fc>
  420688:	9608      	str	r6, [sp, #32]
  42068a:	f043 0310 	orr.w	r3, r3, #16
  42068e:	e708      	b.n	4204a2 <_vfiprintf_r+0x246>
  420690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  420694:	f898 2000 	ldrb.w	r2, [r8]
  420698:	e652      	b.n	420340 <_vfiprintf_r+0xe4>
  42069a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42069e:	2600      	movs	r6, #0
  4206a0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4206a4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4206a8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4206ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4206b0:	2909      	cmp	r1, #9
  4206b2:	d9f5      	bls.n	4206a0 <_vfiprintf_r+0x444>
  4206b4:	e646      	b.n	420344 <_vfiprintf_r+0xe8>
  4206b6:	9608      	str	r6, [sp, #32]
  4206b8:	2800      	cmp	r0, #0
  4206ba:	f040 8408 	bne.w	420ece <_vfiprintf_r+0xc72>
  4206be:	f043 0310 	orr.w	r3, r3, #16
  4206c2:	069e      	lsls	r6, r3, #26
  4206c4:	f100 834c 	bmi.w	420d60 <_vfiprintf_r+0xb04>
  4206c8:	06dd      	lsls	r5, r3, #27
  4206ca:	f100 82f3 	bmi.w	420cb4 <_vfiprintf_r+0xa58>
  4206ce:	0658      	lsls	r0, r3, #25
  4206d0:	f140 82f0 	bpl.w	420cb4 <_vfiprintf_r+0xa58>
  4206d4:	9d07      	ldr	r5, [sp, #28]
  4206d6:	f9b5 6000 	ldrsh.w	r6, [r5]
  4206da:	462a      	mov	r2, r5
  4206dc:	17f7      	asrs	r7, r6, #31
  4206de:	3204      	adds	r2, #4
  4206e0:	4630      	mov	r0, r6
  4206e2:	4639      	mov	r1, r7
  4206e4:	9207      	str	r2, [sp, #28]
  4206e6:	2800      	cmp	r0, #0
  4206e8:	f171 0200 	sbcs.w	r2, r1, #0
  4206ec:	f2c0 835d 	blt.w	420daa <_vfiprintf_r+0xb4e>
  4206f0:	1c61      	adds	r1, r4, #1
  4206f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4206f6:	f04f 0201 	mov.w	r2, #1
  4206fa:	f47f aeea 	bne.w	4204d2 <_vfiprintf_r+0x276>
  4206fe:	ea56 0107 	orrs.w	r1, r6, r7
  420702:	f000 824d 	beq.w	420ba0 <_vfiprintf_r+0x944>
  420706:	9302      	str	r3, [sp, #8]
  420708:	2a01      	cmp	r2, #1
  42070a:	f000 828c 	beq.w	420c26 <_vfiprintf_r+0x9ca>
  42070e:	2a02      	cmp	r2, #2
  420710:	f040 825c 	bne.w	420bcc <_vfiprintf_r+0x970>
  420714:	980b      	ldr	r0, [sp, #44]	; 0x2c
  420716:	46cb      	mov	fp, r9
  420718:	0933      	lsrs	r3, r6, #4
  42071a:	f006 010f 	and.w	r1, r6, #15
  42071e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  420722:	093a      	lsrs	r2, r7, #4
  420724:	461e      	mov	r6, r3
  420726:	4617      	mov	r7, r2
  420728:	5c43      	ldrb	r3, [r0, r1]
  42072a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  42072e:	ea56 0307 	orrs.w	r3, r6, r7
  420732:	d1f1      	bne.n	420718 <_vfiprintf_r+0x4bc>
  420734:	eba9 030b 	sub.w	r3, r9, fp
  420738:	9305      	str	r3, [sp, #20]
  42073a:	e6e1      	b.n	420500 <_vfiprintf_r+0x2a4>
  42073c:	2800      	cmp	r0, #0
  42073e:	f040 83c0 	bne.w	420ec2 <_vfiprintf_r+0xc66>
  420742:	0699      	lsls	r1, r3, #26
  420744:	f100 8367 	bmi.w	420e16 <_vfiprintf_r+0xbba>
  420748:	06da      	lsls	r2, r3, #27
  42074a:	f100 80f1 	bmi.w	420930 <_vfiprintf_r+0x6d4>
  42074e:	065b      	lsls	r3, r3, #25
  420750:	f140 80ee 	bpl.w	420930 <_vfiprintf_r+0x6d4>
  420754:	9a07      	ldr	r2, [sp, #28]
  420756:	6813      	ldr	r3, [r2, #0]
  420758:	3204      	adds	r2, #4
  42075a:	9207      	str	r2, [sp, #28]
  42075c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  420760:	801a      	strh	r2, [r3, #0]
  420762:	e5b8      	b.n	4202d6 <_vfiprintf_r+0x7a>
  420764:	9807      	ldr	r0, [sp, #28]
  420766:	4a3d      	ldr	r2, [pc, #244]	; (42085c <_vfiprintf_r+0x600>)
  420768:	9608      	str	r6, [sp, #32]
  42076a:	920b      	str	r2, [sp, #44]	; 0x2c
  42076c:	6806      	ldr	r6, [r0, #0]
  42076e:	2278      	movs	r2, #120	; 0x78
  420770:	2130      	movs	r1, #48	; 0x30
  420772:	3004      	adds	r0, #4
  420774:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  420778:	f043 0302 	orr.w	r3, r3, #2
  42077c:	9007      	str	r0, [sp, #28]
  42077e:	2700      	movs	r7, #0
  420780:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  420784:	2202      	movs	r2, #2
  420786:	e69c      	b.n	4204c2 <_vfiprintf_r+0x266>
  420788:	9608      	str	r6, [sp, #32]
  42078a:	2800      	cmp	r0, #0
  42078c:	d099      	beq.n	4206c2 <_vfiprintf_r+0x466>
  42078e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420792:	e796      	b.n	4206c2 <_vfiprintf_r+0x466>
  420794:	f898 2000 	ldrb.w	r2, [r8]
  420798:	2d00      	cmp	r5, #0
  42079a:	f47f add1 	bne.w	420340 <_vfiprintf_r+0xe4>
  42079e:	2001      	movs	r0, #1
  4207a0:	2520      	movs	r5, #32
  4207a2:	e5cd      	b.n	420340 <_vfiprintf_r+0xe4>
  4207a4:	f043 0301 	orr.w	r3, r3, #1
  4207a8:	f898 2000 	ldrb.w	r2, [r8]
  4207ac:	e5c8      	b.n	420340 <_vfiprintf_r+0xe4>
  4207ae:	9608      	str	r6, [sp, #32]
  4207b0:	2800      	cmp	r0, #0
  4207b2:	f040 8393 	bne.w	420edc <_vfiprintf_r+0xc80>
  4207b6:	4929      	ldr	r1, [pc, #164]	; (42085c <_vfiprintf_r+0x600>)
  4207b8:	910b      	str	r1, [sp, #44]	; 0x2c
  4207ba:	069f      	lsls	r7, r3, #26
  4207bc:	f100 82e8 	bmi.w	420d90 <_vfiprintf_r+0xb34>
  4207c0:	9807      	ldr	r0, [sp, #28]
  4207c2:	06de      	lsls	r6, r3, #27
  4207c4:	4601      	mov	r1, r0
  4207c6:	f100 8270 	bmi.w	420caa <_vfiprintf_r+0xa4e>
  4207ca:	065d      	lsls	r5, r3, #25
  4207cc:	f140 826d 	bpl.w	420caa <_vfiprintf_r+0xa4e>
  4207d0:	3104      	adds	r1, #4
  4207d2:	8806      	ldrh	r6, [r0, #0]
  4207d4:	9107      	str	r1, [sp, #28]
  4207d6:	2700      	movs	r7, #0
  4207d8:	07d8      	lsls	r0, r3, #31
  4207da:	f140 8222 	bpl.w	420c22 <_vfiprintf_r+0x9c6>
  4207de:	ea56 0107 	orrs.w	r1, r6, r7
  4207e2:	f000 821e 	beq.w	420c22 <_vfiprintf_r+0x9c6>
  4207e6:	2130      	movs	r1, #48	; 0x30
  4207e8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4207ec:	f043 0302 	orr.w	r3, r3, #2
  4207f0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4207f4:	2202      	movs	r2, #2
  4207f6:	e664      	b.n	4204c2 <_vfiprintf_r+0x266>
  4207f8:	9608      	str	r6, [sp, #32]
  4207fa:	2800      	cmp	r0, #0
  4207fc:	f040 836b 	bne.w	420ed6 <_vfiprintf_r+0xc7a>
  420800:	4917      	ldr	r1, [pc, #92]	; (420860 <_vfiprintf_r+0x604>)
  420802:	910b      	str	r1, [sp, #44]	; 0x2c
  420804:	e7d9      	b.n	4207ba <_vfiprintf_r+0x55e>
  420806:	9907      	ldr	r1, [sp, #28]
  420808:	9608      	str	r6, [sp, #32]
  42080a:	680a      	ldr	r2, [r1, #0]
  42080c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  420810:	f04f 0000 	mov.w	r0, #0
  420814:	460a      	mov	r2, r1
  420816:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  42081a:	3204      	adds	r2, #4
  42081c:	2001      	movs	r0, #1
  42081e:	9001      	str	r0, [sp, #4]
  420820:	9207      	str	r2, [sp, #28]
  420822:	9005      	str	r0, [sp, #20]
  420824:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  420828:	9302      	str	r3, [sp, #8]
  42082a:	2400      	movs	r4, #0
  42082c:	e670      	b.n	420510 <_vfiprintf_r+0x2b4>
  42082e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  420832:	f898 2000 	ldrb.w	r2, [r8]
  420836:	e583      	b.n	420340 <_vfiprintf_r+0xe4>
  420838:	f898 2000 	ldrb.w	r2, [r8]
  42083c:	2a6c      	cmp	r2, #108	; 0x6c
  42083e:	bf03      	ittte	eq
  420840:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  420844:	f043 0320 	orreq.w	r3, r3, #32
  420848:	f108 0801 	addeq.w	r8, r8, #1
  42084c:	f043 0310 	orrne.w	r3, r3, #16
  420850:	e576      	b.n	420340 <_vfiprintf_r+0xe4>
  420852:	bf00      	nop
  420854:	00428cc8 	.word	0x00428cc8
  420858:	00428cd8 	.word	0x00428cd8
  42085c:	00428cac 	.word	0x00428cac
  420860:	00428c98 	.word	0x00428c98
  420864:	9907      	ldr	r1, [sp, #28]
  420866:	680e      	ldr	r6, [r1, #0]
  420868:	460a      	mov	r2, r1
  42086a:	2e00      	cmp	r6, #0
  42086c:	f102 0204 	add.w	r2, r2, #4
  420870:	f6ff ae0f 	blt.w	420492 <_vfiprintf_r+0x236>
  420874:	9207      	str	r2, [sp, #28]
  420876:	f898 2000 	ldrb.w	r2, [r8]
  42087a:	e561      	b.n	420340 <_vfiprintf_r+0xe4>
  42087c:	f898 2000 	ldrb.w	r2, [r8]
  420880:	2001      	movs	r0, #1
  420882:	252b      	movs	r5, #43	; 0x2b
  420884:	e55c      	b.n	420340 <_vfiprintf_r+0xe4>
  420886:	9907      	ldr	r1, [sp, #28]
  420888:	9608      	str	r6, [sp, #32]
  42088a:	f8d1 b000 	ldr.w	fp, [r1]
  42088e:	f04f 0200 	mov.w	r2, #0
  420892:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  420896:	1d0e      	adds	r6, r1, #4
  420898:	f1bb 0f00 	cmp.w	fp, #0
  42089c:	f000 82e5 	beq.w	420e6a <_vfiprintf_r+0xc0e>
  4208a0:	1c67      	adds	r7, r4, #1
  4208a2:	f000 82c4 	beq.w	420e2e <_vfiprintf_r+0xbd2>
  4208a6:	4622      	mov	r2, r4
  4208a8:	2100      	movs	r1, #0
  4208aa:	4658      	mov	r0, fp
  4208ac:	9301      	str	r3, [sp, #4]
  4208ae:	f001 f91f 	bl	421af0 <memchr>
  4208b2:	9b01      	ldr	r3, [sp, #4]
  4208b4:	2800      	cmp	r0, #0
  4208b6:	f000 82e5 	beq.w	420e84 <_vfiprintf_r+0xc28>
  4208ba:	eba0 020b 	sub.w	r2, r0, fp
  4208be:	9205      	str	r2, [sp, #20]
  4208c0:	9607      	str	r6, [sp, #28]
  4208c2:	9302      	str	r3, [sp, #8]
  4208c4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4208c8:	2400      	movs	r4, #0
  4208ca:	e619      	b.n	420500 <_vfiprintf_r+0x2a4>
  4208cc:	f898 2000 	ldrb.w	r2, [r8]
  4208d0:	2a2a      	cmp	r2, #42	; 0x2a
  4208d2:	f108 0701 	add.w	r7, r8, #1
  4208d6:	f000 82e9 	beq.w	420eac <_vfiprintf_r+0xc50>
  4208da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4208de:	2909      	cmp	r1, #9
  4208e0:	46b8      	mov	r8, r7
  4208e2:	f04f 0400 	mov.w	r4, #0
  4208e6:	f63f ad2d 	bhi.w	420344 <_vfiprintf_r+0xe8>
  4208ea:	f818 2b01 	ldrb.w	r2, [r8], #1
  4208ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4208f2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4208f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4208fa:	2909      	cmp	r1, #9
  4208fc:	d9f5      	bls.n	4208ea <_vfiprintf_r+0x68e>
  4208fe:	e521      	b.n	420344 <_vfiprintf_r+0xe8>
  420900:	f043 0320 	orr.w	r3, r3, #32
  420904:	f898 2000 	ldrb.w	r2, [r8]
  420908:	e51a      	b.n	420340 <_vfiprintf_r+0xe4>
  42090a:	9608      	str	r6, [sp, #32]
  42090c:	2800      	cmp	r0, #0
  42090e:	f040 82db 	bne.w	420ec8 <_vfiprintf_r+0xc6c>
  420912:	2a00      	cmp	r2, #0
  420914:	f000 80e7 	beq.w	420ae6 <_vfiprintf_r+0x88a>
  420918:	2101      	movs	r1, #1
  42091a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  42091e:	f04f 0200 	mov.w	r2, #0
  420922:	9101      	str	r1, [sp, #4]
  420924:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  420928:	9105      	str	r1, [sp, #20]
  42092a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  42092e:	e77b      	b.n	420828 <_vfiprintf_r+0x5cc>
  420930:	9a07      	ldr	r2, [sp, #28]
  420932:	6813      	ldr	r3, [r2, #0]
  420934:	3204      	adds	r2, #4
  420936:	9207      	str	r2, [sp, #28]
  420938:	9a03      	ldr	r2, [sp, #12]
  42093a:	601a      	str	r2, [r3, #0]
  42093c:	e4cb      	b.n	4202d6 <_vfiprintf_r+0x7a>
  42093e:	aa0f      	add	r2, sp, #60	; 0x3c
  420940:	9904      	ldr	r1, [sp, #16]
  420942:	4620      	mov	r0, r4
  420944:	f7ff fc4a 	bl	4201dc <__sprint_r.part.0>
  420948:	2800      	cmp	r0, #0
  42094a:	f040 8139 	bne.w	420bc0 <_vfiprintf_r+0x964>
  42094e:	9910      	ldr	r1, [sp, #64]	; 0x40
  420950:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420952:	f101 0c01 	add.w	ip, r1, #1
  420956:	46ce      	mov	lr, r9
  420958:	e5ff      	b.n	42055a <_vfiprintf_r+0x2fe>
  42095a:	9910      	ldr	r1, [sp, #64]	; 0x40
  42095c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42095e:	1c48      	adds	r0, r1, #1
  420960:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  420964:	2d00      	cmp	r5, #0
  420966:	f43f ae22 	beq.w	4205ae <_vfiprintf_r+0x352>
  42096a:	3201      	adds	r2, #1
  42096c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  420970:	2101      	movs	r1, #1
  420972:	2807      	cmp	r0, #7
  420974:	9211      	str	r2, [sp, #68]	; 0x44
  420976:	9010      	str	r0, [sp, #64]	; 0x40
  420978:	f8ca 5000 	str.w	r5, [sl]
  42097c:	f8ca 1004 	str.w	r1, [sl, #4]
  420980:	f340 8108 	ble.w	420b94 <_vfiprintf_r+0x938>
  420984:	2a00      	cmp	r2, #0
  420986:	f040 81bc 	bne.w	420d02 <_vfiprintf_r+0xaa6>
  42098a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42098c:	2b00      	cmp	r3, #0
  42098e:	f43f ae1f 	beq.w	4205d0 <_vfiprintf_r+0x374>
  420992:	ab0e      	add	r3, sp, #56	; 0x38
  420994:	2202      	movs	r2, #2
  420996:	4608      	mov	r0, r1
  420998:	931c      	str	r3, [sp, #112]	; 0x70
  42099a:	921d      	str	r2, [sp, #116]	; 0x74
  42099c:	46ca      	mov	sl, r9
  42099e:	4601      	mov	r1, r0
  4209a0:	f10a 0a08 	add.w	sl, sl, #8
  4209a4:	3001      	adds	r0, #1
  4209a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4209a8:	2b80      	cmp	r3, #128	; 0x80
  4209aa:	f43f ae19 	beq.w	4205e0 <_vfiprintf_r+0x384>
  4209ae:	9b05      	ldr	r3, [sp, #20]
  4209b0:	1ae4      	subs	r4, r4, r3
  4209b2:	2c00      	cmp	r4, #0
  4209b4:	dd2e      	ble.n	420a14 <_vfiprintf_r+0x7b8>
  4209b6:	2c10      	cmp	r4, #16
  4209b8:	4db3      	ldr	r5, [pc, #716]	; (420c88 <_vfiprintf_r+0xa2c>)
  4209ba:	dd1e      	ble.n	4209fa <_vfiprintf_r+0x79e>
  4209bc:	46d6      	mov	lr, sl
  4209be:	2610      	movs	r6, #16
  4209c0:	9f06      	ldr	r7, [sp, #24]
  4209c2:	f8dd a010 	ldr.w	sl, [sp, #16]
  4209c6:	e006      	b.n	4209d6 <_vfiprintf_r+0x77a>
  4209c8:	1c88      	adds	r0, r1, #2
  4209ca:	f10e 0e08 	add.w	lr, lr, #8
  4209ce:	4619      	mov	r1, r3
  4209d0:	3c10      	subs	r4, #16
  4209d2:	2c10      	cmp	r4, #16
  4209d4:	dd10      	ble.n	4209f8 <_vfiprintf_r+0x79c>
  4209d6:	1c4b      	adds	r3, r1, #1
  4209d8:	3210      	adds	r2, #16
  4209da:	2b07      	cmp	r3, #7
  4209dc:	9211      	str	r2, [sp, #68]	; 0x44
  4209de:	e88e 0060 	stmia.w	lr, {r5, r6}
  4209e2:	9310      	str	r3, [sp, #64]	; 0x40
  4209e4:	ddf0      	ble.n	4209c8 <_vfiprintf_r+0x76c>
  4209e6:	2a00      	cmp	r2, #0
  4209e8:	d165      	bne.n	420ab6 <_vfiprintf_r+0x85a>
  4209ea:	3c10      	subs	r4, #16
  4209ec:	2c10      	cmp	r4, #16
  4209ee:	f04f 0001 	mov.w	r0, #1
  4209f2:	4611      	mov	r1, r2
  4209f4:	46ce      	mov	lr, r9
  4209f6:	dcee      	bgt.n	4209d6 <_vfiprintf_r+0x77a>
  4209f8:	46f2      	mov	sl, lr
  4209fa:	4422      	add	r2, r4
  4209fc:	2807      	cmp	r0, #7
  4209fe:	9211      	str	r2, [sp, #68]	; 0x44
  420a00:	f8ca 5000 	str.w	r5, [sl]
  420a04:	f8ca 4004 	str.w	r4, [sl, #4]
  420a08:	9010      	str	r0, [sp, #64]	; 0x40
  420a0a:	f300 8085 	bgt.w	420b18 <_vfiprintf_r+0x8bc>
  420a0e:	f10a 0a08 	add.w	sl, sl, #8
  420a12:	3001      	adds	r0, #1
  420a14:	9905      	ldr	r1, [sp, #20]
  420a16:	f8ca b000 	str.w	fp, [sl]
  420a1a:	440a      	add	r2, r1
  420a1c:	2807      	cmp	r0, #7
  420a1e:	9211      	str	r2, [sp, #68]	; 0x44
  420a20:	f8ca 1004 	str.w	r1, [sl, #4]
  420a24:	9010      	str	r0, [sp, #64]	; 0x40
  420a26:	f340 8082 	ble.w	420b2e <_vfiprintf_r+0x8d2>
  420a2a:	2a00      	cmp	r2, #0
  420a2c:	f040 8118 	bne.w	420c60 <_vfiprintf_r+0xa04>
  420a30:	9b02      	ldr	r3, [sp, #8]
  420a32:	9210      	str	r2, [sp, #64]	; 0x40
  420a34:	0758      	lsls	r0, r3, #29
  420a36:	d535      	bpl.n	420aa4 <_vfiprintf_r+0x848>
  420a38:	9b08      	ldr	r3, [sp, #32]
  420a3a:	9901      	ldr	r1, [sp, #4]
  420a3c:	1a5c      	subs	r4, r3, r1
  420a3e:	2c00      	cmp	r4, #0
  420a40:	f340 80e7 	ble.w	420c12 <_vfiprintf_r+0x9b6>
  420a44:	46ca      	mov	sl, r9
  420a46:	2c10      	cmp	r4, #16
  420a48:	f340 8218 	ble.w	420e7c <_vfiprintf_r+0xc20>
  420a4c:	9910      	ldr	r1, [sp, #64]	; 0x40
  420a4e:	4e8f      	ldr	r6, [pc, #572]	; (420c8c <_vfiprintf_r+0xa30>)
  420a50:	9f06      	ldr	r7, [sp, #24]
  420a52:	f8dd b010 	ldr.w	fp, [sp, #16]
  420a56:	2510      	movs	r5, #16
  420a58:	e006      	b.n	420a68 <_vfiprintf_r+0x80c>
  420a5a:	1c88      	adds	r0, r1, #2
  420a5c:	f10a 0a08 	add.w	sl, sl, #8
  420a60:	4619      	mov	r1, r3
  420a62:	3c10      	subs	r4, #16
  420a64:	2c10      	cmp	r4, #16
  420a66:	dd11      	ble.n	420a8c <_vfiprintf_r+0x830>
  420a68:	1c4b      	adds	r3, r1, #1
  420a6a:	3210      	adds	r2, #16
  420a6c:	2b07      	cmp	r3, #7
  420a6e:	9211      	str	r2, [sp, #68]	; 0x44
  420a70:	f8ca 6000 	str.w	r6, [sl]
  420a74:	f8ca 5004 	str.w	r5, [sl, #4]
  420a78:	9310      	str	r3, [sp, #64]	; 0x40
  420a7a:	ddee      	ble.n	420a5a <_vfiprintf_r+0x7fe>
  420a7c:	bb42      	cbnz	r2, 420ad0 <_vfiprintf_r+0x874>
  420a7e:	3c10      	subs	r4, #16
  420a80:	2c10      	cmp	r4, #16
  420a82:	f04f 0001 	mov.w	r0, #1
  420a86:	4611      	mov	r1, r2
  420a88:	46ca      	mov	sl, r9
  420a8a:	dced      	bgt.n	420a68 <_vfiprintf_r+0x80c>
  420a8c:	4422      	add	r2, r4
  420a8e:	2807      	cmp	r0, #7
  420a90:	9211      	str	r2, [sp, #68]	; 0x44
  420a92:	f8ca 6000 	str.w	r6, [sl]
  420a96:	f8ca 4004 	str.w	r4, [sl, #4]
  420a9a:	9010      	str	r0, [sp, #64]	; 0x40
  420a9c:	dd51      	ble.n	420b42 <_vfiprintf_r+0x8e6>
  420a9e:	2a00      	cmp	r2, #0
  420aa0:	f040 819b 	bne.w	420dda <_vfiprintf_r+0xb7e>
  420aa4:	9b03      	ldr	r3, [sp, #12]
  420aa6:	9a08      	ldr	r2, [sp, #32]
  420aa8:	9901      	ldr	r1, [sp, #4]
  420aaa:	428a      	cmp	r2, r1
  420aac:	bfac      	ite	ge
  420aae:	189b      	addge	r3, r3, r2
  420ab0:	185b      	addlt	r3, r3, r1
  420ab2:	9303      	str	r3, [sp, #12]
  420ab4:	e04e      	b.n	420b54 <_vfiprintf_r+0x8f8>
  420ab6:	aa0f      	add	r2, sp, #60	; 0x3c
  420ab8:	4651      	mov	r1, sl
  420aba:	4638      	mov	r0, r7
  420abc:	f7ff fb8e 	bl	4201dc <__sprint_r.part.0>
  420ac0:	2800      	cmp	r0, #0
  420ac2:	f040 813f 	bne.w	420d44 <_vfiprintf_r+0xae8>
  420ac6:	9910      	ldr	r1, [sp, #64]	; 0x40
  420ac8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420aca:	1c48      	adds	r0, r1, #1
  420acc:	46ce      	mov	lr, r9
  420ace:	e77f      	b.n	4209d0 <_vfiprintf_r+0x774>
  420ad0:	aa0f      	add	r2, sp, #60	; 0x3c
  420ad2:	4659      	mov	r1, fp
  420ad4:	4638      	mov	r0, r7
  420ad6:	f7ff fb81 	bl	4201dc <__sprint_r.part.0>
  420ada:	b960      	cbnz	r0, 420af6 <_vfiprintf_r+0x89a>
  420adc:	9910      	ldr	r1, [sp, #64]	; 0x40
  420ade:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420ae0:	1c48      	adds	r0, r1, #1
  420ae2:	46ca      	mov	sl, r9
  420ae4:	e7bd      	b.n	420a62 <_vfiprintf_r+0x806>
  420ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  420ae8:	f8dd b010 	ldr.w	fp, [sp, #16]
  420aec:	2b00      	cmp	r3, #0
  420aee:	f040 81d4 	bne.w	420e9a <_vfiprintf_r+0xc3e>
  420af2:	2300      	movs	r3, #0
  420af4:	9310      	str	r3, [sp, #64]	; 0x40
  420af6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  420afa:	f013 0f01 	tst.w	r3, #1
  420afe:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  420b02:	d102      	bne.n	420b0a <_vfiprintf_r+0x8ae>
  420b04:	059a      	lsls	r2, r3, #22
  420b06:	f140 80de 	bpl.w	420cc6 <_vfiprintf_r+0xa6a>
  420b0a:	065b      	lsls	r3, r3, #25
  420b0c:	f53f acb2 	bmi.w	420474 <_vfiprintf_r+0x218>
  420b10:	9803      	ldr	r0, [sp, #12]
  420b12:	b02d      	add	sp, #180	; 0xb4
  420b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420b18:	2a00      	cmp	r2, #0
  420b1a:	f040 8106 	bne.w	420d2a <_vfiprintf_r+0xace>
  420b1e:	9a05      	ldr	r2, [sp, #20]
  420b20:	921d      	str	r2, [sp, #116]	; 0x74
  420b22:	2301      	movs	r3, #1
  420b24:	9211      	str	r2, [sp, #68]	; 0x44
  420b26:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  420b2a:	9310      	str	r3, [sp, #64]	; 0x40
  420b2c:	46ca      	mov	sl, r9
  420b2e:	f10a 0a08 	add.w	sl, sl, #8
  420b32:	9b02      	ldr	r3, [sp, #8]
  420b34:	0759      	lsls	r1, r3, #29
  420b36:	d504      	bpl.n	420b42 <_vfiprintf_r+0x8e6>
  420b38:	9b08      	ldr	r3, [sp, #32]
  420b3a:	9901      	ldr	r1, [sp, #4]
  420b3c:	1a5c      	subs	r4, r3, r1
  420b3e:	2c00      	cmp	r4, #0
  420b40:	dc81      	bgt.n	420a46 <_vfiprintf_r+0x7ea>
  420b42:	9b03      	ldr	r3, [sp, #12]
  420b44:	9908      	ldr	r1, [sp, #32]
  420b46:	9801      	ldr	r0, [sp, #4]
  420b48:	4281      	cmp	r1, r0
  420b4a:	bfac      	ite	ge
  420b4c:	185b      	addge	r3, r3, r1
  420b4e:	181b      	addlt	r3, r3, r0
  420b50:	9303      	str	r3, [sp, #12]
  420b52:	bb72      	cbnz	r2, 420bb2 <_vfiprintf_r+0x956>
  420b54:	2300      	movs	r3, #0
  420b56:	9310      	str	r3, [sp, #64]	; 0x40
  420b58:	46ca      	mov	sl, r9
  420b5a:	f7ff bbbc 	b.w	4202d6 <_vfiprintf_r+0x7a>
  420b5e:	aa0f      	add	r2, sp, #60	; 0x3c
  420b60:	9904      	ldr	r1, [sp, #16]
  420b62:	4620      	mov	r0, r4
  420b64:	f7ff fb3a 	bl	4201dc <__sprint_r.part.0>
  420b68:	bb50      	cbnz	r0, 420bc0 <_vfiprintf_r+0x964>
  420b6a:	9910      	ldr	r1, [sp, #64]	; 0x40
  420b6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420b6e:	f101 0e01 	add.w	lr, r1, #1
  420b72:	46cc      	mov	ip, r9
  420b74:	e548      	b.n	420608 <_vfiprintf_r+0x3ac>
  420b76:	2a00      	cmp	r2, #0
  420b78:	f040 8140 	bne.w	420dfc <_vfiprintf_r+0xba0>
  420b7c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  420b80:	2900      	cmp	r1, #0
  420b82:	f000 811b 	beq.w	420dbc <_vfiprintf_r+0xb60>
  420b86:	2201      	movs	r2, #1
  420b88:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  420b8c:	4610      	mov	r0, r2
  420b8e:	921d      	str	r2, [sp, #116]	; 0x74
  420b90:	911c      	str	r1, [sp, #112]	; 0x70
  420b92:	46ca      	mov	sl, r9
  420b94:	4601      	mov	r1, r0
  420b96:	f10a 0a08 	add.w	sl, sl, #8
  420b9a:	3001      	adds	r0, #1
  420b9c:	e507      	b.n	4205ae <_vfiprintf_r+0x352>
  420b9e:	9b02      	ldr	r3, [sp, #8]
  420ba0:	2a01      	cmp	r2, #1
  420ba2:	f000 8098 	beq.w	420cd6 <_vfiprintf_r+0xa7a>
  420ba6:	2a02      	cmp	r2, #2
  420ba8:	d10d      	bne.n	420bc6 <_vfiprintf_r+0x96a>
  420baa:	9302      	str	r3, [sp, #8]
  420bac:	2600      	movs	r6, #0
  420bae:	2700      	movs	r7, #0
  420bb0:	e5b0      	b.n	420714 <_vfiprintf_r+0x4b8>
  420bb2:	aa0f      	add	r2, sp, #60	; 0x3c
  420bb4:	9904      	ldr	r1, [sp, #16]
  420bb6:	9806      	ldr	r0, [sp, #24]
  420bb8:	f7ff fb10 	bl	4201dc <__sprint_r.part.0>
  420bbc:	2800      	cmp	r0, #0
  420bbe:	d0c9      	beq.n	420b54 <_vfiprintf_r+0x8f8>
  420bc0:	f8dd b010 	ldr.w	fp, [sp, #16]
  420bc4:	e797      	b.n	420af6 <_vfiprintf_r+0x89a>
  420bc6:	9302      	str	r3, [sp, #8]
  420bc8:	2600      	movs	r6, #0
  420bca:	2700      	movs	r7, #0
  420bcc:	4649      	mov	r1, r9
  420bce:	e000      	b.n	420bd2 <_vfiprintf_r+0x976>
  420bd0:	4659      	mov	r1, fp
  420bd2:	08f2      	lsrs	r2, r6, #3
  420bd4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  420bd8:	08f8      	lsrs	r0, r7, #3
  420bda:	f006 0307 	and.w	r3, r6, #7
  420bde:	4607      	mov	r7, r0
  420be0:	4616      	mov	r6, r2
  420be2:	3330      	adds	r3, #48	; 0x30
  420be4:	ea56 0207 	orrs.w	r2, r6, r7
  420be8:	f801 3c01 	strb.w	r3, [r1, #-1]
  420bec:	f101 3bff 	add.w	fp, r1, #4294967295
  420bf0:	d1ee      	bne.n	420bd0 <_vfiprintf_r+0x974>
  420bf2:	9a02      	ldr	r2, [sp, #8]
  420bf4:	07d6      	lsls	r6, r2, #31
  420bf6:	f57f ad9d 	bpl.w	420734 <_vfiprintf_r+0x4d8>
  420bfa:	2b30      	cmp	r3, #48	; 0x30
  420bfc:	f43f ad9a 	beq.w	420734 <_vfiprintf_r+0x4d8>
  420c00:	3902      	subs	r1, #2
  420c02:	2330      	movs	r3, #48	; 0x30
  420c04:	f80b 3c01 	strb.w	r3, [fp, #-1]
  420c08:	eba9 0301 	sub.w	r3, r9, r1
  420c0c:	9305      	str	r3, [sp, #20]
  420c0e:	468b      	mov	fp, r1
  420c10:	e476      	b.n	420500 <_vfiprintf_r+0x2a4>
  420c12:	9b03      	ldr	r3, [sp, #12]
  420c14:	9a08      	ldr	r2, [sp, #32]
  420c16:	428a      	cmp	r2, r1
  420c18:	bfac      	ite	ge
  420c1a:	189b      	addge	r3, r3, r2
  420c1c:	185b      	addlt	r3, r3, r1
  420c1e:	9303      	str	r3, [sp, #12]
  420c20:	e798      	b.n	420b54 <_vfiprintf_r+0x8f8>
  420c22:	2202      	movs	r2, #2
  420c24:	e44d      	b.n	4204c2 <_vfiprintf_r+0x266>
  420c26:	2f00      	cmp	r7, #0
  420c28:	bf08      	it	eq
  420c2a:	2e0a      	cmpeq	r6, #10
  420c2c:	d352      	bcc.n	420cd4 <_vfiprintf_r+0xa78>
  420c2e:	46cb      	mov	fp, r9
  420c30:	4630      	mov	r0, r6
  420c32:	4639      	mov	r1, r7
  420c34:	220a      	movs	r2, #10
  420c36:	2300      	movs	r3, #0
  420c38:	f7fe f9ec 	bl	41f014 <__aeabi_uldivmod>
  420c3c:	3230      	adds	r2, #48	; 0x30
  420c3e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  420c42:	4630      	mov	r0, r6
  420c44:	4639      	mov	r1, r7
  420c46:	2300      	movs	r3, #0
  420c48:	220a      	movs	r2, #10
  420c4a:	f7fe f9e3 	bl	41f014 <__aeabi_uldivmod>
  420c4e:	4606      	mov	r6, r0
  420c50:	460f      	mov	r7, r1
  420c52:	ea56 0307 	orrs.w	r3, r6, r7
  420c56:	d1eb      	bne.n	420c30 <_vfiprintf_r+0x9d4>
  420c58:	e56c      	b.n	420734 <_vfiprintf_r+0x4d8>
  420c5a:	9405      	str	r4, [sp, #20]
  420c5c:	46cb      	mov	fp, r9
  420c5e:	e44f      	b.n	420500 <_vfiprintf_r+0x2a4>
  420c60:	aa0f      	add	r2, sp, #60	; 0x3c
  420c62:	9904      	ldr	r1, [sp, #16]
  420c64:	9806      	ldr	r0, [sp, #24]
  420c66:	f7ff fab9 	bl	4201dc <__sprint_r.part.0>
  420c6a:	2800      	cmp	r0, #0
  420c6c:	d1a8      	bne.n	420bc0 <_vfiprintf_r+0x964>
  420c6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420c70:	46ca      	mov	sl, r9
  420c72:	e75e      	b.n	420b32 <_vfiprintf_r+0x8d6>
  420c74:	aa0f      	add	r2, sp, #60	; 0x3c
  420c76:	9904      	ldr	r1, [sp, #16]
  420c78:	9806      	ldr	r0, [sp, #24]
  420c7a:	f7ff faaf 	bl	4201dc <__sprint_r.part.0>
  420c7e:	2800      	cmp	r0, #0
  420c80:	d19e      	bne.n	420bc0 <_vfiprintf_r+0x964>
  420c82:	46ca      	mov	sl, r9
  420c84:	f7ff bbc0 	b.w	420408 <_vfiprintf_r+0x1ac>
  420c88:	00428cd8 	.word	0x00428cd8
  420c8c:	00428cc8 	.word	0x00428cc8
  420c90:	3104      	adds	r1, #4
  420c92:	6816      	ldr	r6, [r2, #0]
  420c94:	9107      	str	r1, [sp, #28]
  420c96:	2201      	movs	r2, #1
  420c98:	2700      	movs	r7, #0
  420c9a:	e412      	b.n	4204c2 <_vfiprintf_r+0x266>
  420c9c:	9807      	ldr	r0, [sp, #28]
  420c9e:	4601      	mov	r1, r0
  420ca0:	3104      	adds	r1, #4
  420ca2:	6806      	ldr	r6, [r0, #0]
  420ca4:	9107      	str	r1, [sp, #28]
  420ca6:	2700      	movs	r7, #0
  420ca8:	e40b      	b.n	4204c2 <_vfiprintf_r+0x266>
  420caa:	680e      	ldr	r6, [r1, #0]
  420cac:	3104      	adds	r1, #4
  420cae:	9107      	str	r1, [sp, #28]
  420cb0:	2700      	movs	r7, #0
  420cb2:	e591      	b.n	4207d8 <_vfiprintf_r+0x57c>
  420cb4:	9907      	ldr	r1, [sp, #28]
  420cb6:	680e      	ldr	r6, [r1, #0]
  420cb8:	460a      	mov	r2, r1
  420cba:	17f7      	asrs	r7, r6, #31
  420cbc:	3204      	adds	r2, #4
  420cbe:	9207      	str	r2, [sp, #28]
  420cc0:	4630      	mov	r0, r6
  420cc2:	4639      	mov	r1, r7
  420cc4:	e50f      	b.n	4206e6 <_vfiprintf_r+0x48a>
  420cc6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  420cca:	f000 fe7f 	bl	4219cc <__retarget_lock_release_recursive>
  420cce:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  420cd2:	e71a      	b.n	420b0a <_vfiprintf_r+0x8ae>
  420cd4:	9b02      	ldr	r3, [sp, #8]
  420cd6:	9302      	str	r3, [sp, #8]
  420cd8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  420cdc:	3630      	adds	r6, #48	; 0x30
  420cde:	2301      	movs	r3, #1
  420ce0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  420ce4:	9305      	str	r3, [sp, #20]
  420ce6:	e40b      	b.n	420500 <_vfiprintf_r+0x2a4>
  420ce8:	aa0f      	add	r2, sp, #60	; 0x3c
  420cea:	9904      	ldr	r1, [sp, #16]
  420cec:	9806      	ldr	r0, [sp, #24]
  420cee:	f7ff fa75 	bl	4201dc <__sprint_r.part.0>
  420cf2:	2800      	cmp	r0, #0
  420cf4:	f47f af64 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420cf8:	9910      	ldr	r1, [sp, #64]	; 0x40
  420cfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420cfc:	1c48      	adds	r0, r1, #1
  420cfe:	46ca      	mov	sl, r9
  420d00:	e651      	b.n	4209a6 <_vfiprintf_r+0x74a>
  420d02:	aa0f      	add	r2, sp, #60	; 0x3c
  420d04:	9904      	ldr	r1, [sp, #16]
  420d06:	9806      	ldr	r0, [sp, #24]
  420d08:	f7ff fa68 	bl	4201dc <__sprint_r.part.0>
  420d0c:	2800      	cmp	r0, #0
  420d0e:	f47f af57 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420d12:	9910      	ldr	r1, [sp, #64]	; 0x40
  420d14:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420d16:	1c48      	adds	r0, r1, #1
  420d18:	46ca      	mov	sl, r9
  420d1a:	e448      	b.n	4205ae <_vfiprintf_r+0x352>
  420d1c:	2a00      	cmp	r2, #0
  420d1e:	f040 8091 	bne.w	420e44 <_vfiprintf_r+0xbe8>
  420d22:	2001      	movs	r0, #1
  420d24:	4611      	mov	r1, r2
  420d26:	46ca      	mov	sl, r9
  420d28:	e641      	b.n	4209ae <_vfiprintf_r+0x752>
  420d2a:	aa0f      	add	r2, sp, #60	; 0x3c
  420d2c:	9904      	ldr	r1, [sp, #16]
  420d2e:	9806      	ldr	r0, [sp, #24]
  420d30:	f7ff fa54 	bl	4201dc <__sprint_r.part.0>
  420d34:	2800      	cmp	r0, #0
  420d36:	f47f af43 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420d3a:	9810      	ldr	r0, [sp, #64]	; 0x40
  420d3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420d3e:	3001      	adds	r0, #1
  420d40:	46ca      	mov	sl, r9
  420d42:	e667      	b.n	420a14 <_vfiprintf_r+0x7b8>
  420d44:	46d3      	mov	fp, sl
  420d46:	e6d6      	b.n	420af6 <_vfiprintf_r+0x89a>
  420d48:	9e07      	ldr	r6, [sp, #28]
  420d4a:	3607      	adds	r6, #7
  420d4c:	f026 0207 	bic.w	r2, r6, #7
  420d50:	f102 0108 	add.w	r1, r2, #8
  420d54:	e9d2 6700 	ldrd	r6, r7, [r2]
  420d58:	9107      	str	r1, [sp, #28]
  420d5a:	2201      	movs	r2, #1
  420d5c:	f7ff bbb1 	b.w	4204c2 <_vfiprintf_r+0x266>
  420d60:	9e07      	ldr	r6, [sp, #28]
  420d62:	3607      	adds	r6, #7
  420d64:	f026 0607 	bic.w	r6, r6, #7
  420d68:	e9d6 0100 	ldrd	r0, r1, [r6]
  420d6c:	f106 0208 	add.w	r2, r6, #8
  420d70:	9207      	str	r2, [sp, #28]
  420d72:	4606      	mov	r6, r0
  420d74:	460f      	mov	r7, r1
  420d76:	e4b6      	b.n	4206e6 <_vfiprintf_r+0x48a>
  420d78:	9e07      	ldr	r6, [sp, #28]
  420d7a:	3607      	adds	r6, #7
  420d7c:	f026 0207 	bic.w	r2, r6, #7
  420d80:	f102 0108 	add.w	r1, r2, #8
  420d84:	e9d2 6700 	ldrd	r6, r7, [r2]
  420d88:	9107      	str	r1, [sp, #28]
  420d8a:	2200      	movs	r2, #0
  420d8c:	f7ff bb99 	b.w	4204c2 <_vfiprintf_r+0x266>
  420d90:	9e07      	ldr	r6, [sp, #28]
  420d92:	3607      	adds	r6, #7
  420d94:	f026 0107 	bic.w	r1, r6, #7
  420d98:	f101 0008 	add.w	r0, r1, #8
  420d9c:	9007      	str	r0, [sp, #28]
  420d9e:	e9d1 6700 	ldrd	r6, r7, [r1]
  420da2:	e519      	b.n	4207d8 <_vfiprintf_r+0x57c>
  420da4:	46cb      	mov	fp, r9
  420da6:	f7ff bbab 	b.w	420500 <_vfiprintf_r+0x2a4>
  420daa:	252d      	movs	r5, #45	; 0x2d
  420dac:	4276      	negs	r6, r6
  420dae:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  420db2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420db6:	2201      	movs	r2, #1
  420db8:	f7ff bb88 	b.w	4204cc <_vfiprintf_r+0x270>
  420dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  420dbe:	b9b3      	cbnz	r3, 420dee <_vfiprintf_r+0xb92>
  420dc0:	4611      	mov	r1, r2
  420dc2:	2001      	movs	r0, #1
  420dc4:	46ca      	mov	sl, r9
  420dc6:	e5f2      	b.n	4209ae <_vfiprintf_r+0x752>
  420dc8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  420dcc:	f000 fdfe 	bl	4219cc <__retarget_lock_release_recursive>
  420dd0:	f04f 33ff 	mov.w	r3, #4294967295
  420dd4:	9303      	str	r3, [sp, #12]
  420dd6:	f7ff bb50 	b.w	42047a <_vfiprintf_r+0x21e>
  420dda:	aa0f      	add	r2, sp, #60	; 0x3c
  420ddc:	9904      	ldr	r1, [sp, #16]
  420dde:	9806      	ldr	r0, [sp, #24]
  420de0:	f7ff f9fc 	bl	4201dc <__sprint_r.part.0>
  420de4:	2800      	cmp	r0, #0
  420de6:	f47f aeeb 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420dea:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420dec:	e6a9      	b.n	420b42 <_vfiprintf_r+0x8e6>
  420dee:	ab0e      	add	r3, sp, #56	; 0x38
  420df0:	2202      	movs	r2, #2
  420df2:	931c      	str	r3, [sp, #112]	; 0x70
  420df4:	921d      	str	r2, [sp, #116]	; 0x74
  420df6:	2001      	movs	r0, #1
  420df8:	46ca      	mov	sl, r9
  420dfa:	e5d0      	b.n	42099e <_vfiprintf_r+0x742>
  420dfc:	aa0f      	add	r2, sp, #60	; 0x3c
  420dfe:	9904      	ldr	r1, [sp, #16]
  420e00:	9806      	ldr	r0, [sp, #24]
  420e02:	f7ff f9eb 	bl	4201dc <__sprint_r.part.0>
  420e06:	2800      	cmp	r0, #0
  420e08:	f47f aeda 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420e0c:	9910      	ldr	r1, [sp, #64]	; 0x40
  420e0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420e10:	1c48      	adds	r0, r1, #1
  420e12:	46ca      	mov	sl, r9
  420e14:	e5a4      	b.n	420960 <_vfiprintf_r+0x704>
  420e16:	9a07      	ldr	r2, [sp, #28]
  420e18:	9903      	ldr	r1, [sp, #12]
  420e1a:	6813      	ldr	r3, [r2, #0]
  420e1c:	17cd      	asrs	r5, r1, #31
  420e1e:	4608      	mov	r0, r1
  420e20:	3204      	adds	r2, #4
  420e22:	4629      	mov	r1, r5
  420e24:	9207      	str	r2, [sp, #28]
  420e26:	e9c3 0100 	strd	r0, r1, [r3]
  420e2a:	f7ff ba54 	b.w	4202d6 <_vfiprintf_r+0x7a>
  420e2e:	4658      	mov	r0, fp
  420e30:	9607      	str	r6, [sp, #28]
  420e32:	9302      	str	r3, [sp, #8]
  420e34:	f7ff f964 	bl	420100 <strlen>
  420e38:	2400      	movs	r4, #0
  420e3a:	9005      	str	r0, [sp, #20]
  420e3c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  420e40:	f7ff bb5e 	b.w	420500 <_vfiprintf_r+0x2a4>
  420e44:	aa0f      	add	r2, sp, #60	; 0x3c
  420e46:	9904      	ldr	r1, [sp, #16]
  420e48:	9806      	ldr	r0, [sp, #24]
  420e4a:	f7ff f9c7 	bl	4201dc <__sprint_r.part.0>
  420e4e:	2800      	cmp	r0, #0
  420e50:	f47f aeb6 	bne.w	420bc0 <_vfiprintf_r+0x964>
  420e54:	9910      	ldr	r1, [sp, #64]	; 0x40
  420e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420e58:	1c48      	adds	r0, r1, #1
  420e5a:	46ca      	mov	sl, r9
  420e5c:	e5a7      	b.n	4209ae <_vfiprintf_r+0x752>
  420e5e:	9910      	ldr	r1, [sp, #64]	; 0x40
  420e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  420e62:	4e20      	ldr	r6, [pc, #128]	; (420ee4 <_vfiprintf_r+0xc88>)
  420e64:	3101      	adds	r1, #1
  420e66:	f7ff bb90 	b.w	42058a <_vfiprintf_r+0x32e>
  420e6a:	2c06      	cmp	r4, #6
  420e6c:	bf28      	it	cs
  420e6e:	2406      	movcs	r4, #6
  420e70:	9405      	str	r4, [sp, #20]
  420e72:	9607      	str	r6, [sp, #28]
  420e74:	9401      	str	r4, [sp, #4]
  420e76:	f8df b070 	ldr.w	fp, [pc, #112]	; 420ee8 <_vfiprintf_r+0xc8c>
  420e7a:	e4d5      	b.n	420828 <_vfiprintf_r+0x5cc>
  420e7c:	9810      	ldr	r0, [sp, #64]	; 0x40
  420e7e:	4e19      	ldr	r6, [pc, #100]	; (420ee4 <_vfiprintf_r+0xc88>)
  420e80:	3001      	adds	r0, #1
  420e82:	e603      	b.n	420a8c <_vfiprintf_r+0x830>
  420e84:	9405      	str	r4, [sp, #20]
  420e86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  420e8a:	9607      	str	r6, [sp, #28]
  420e8c:	9302      	str	r3, [sp, #8]
  420e8e:	4604      	mov	r4, r0
  420e90:	f7ff bb36 	b.w	420500 <_vfiprintf_r+0x2a4>
  420e94:	4686      	mov	lr, r0
  420e96:	f7ff bbce 	b.w	420636 <_vfiprintf_r+0x3da>
  420e9a:	9806      	ldr	r0, [sp, #24]
  420e9c:	aa0f      	add	r2, sp, #60	; 0x3c
  420e9e:	4659      	mov	r1, fp
  420ea0:	f7ff f99c 	bl	4201dc <__sprint_r.part.0>
  420ea4:	2800      	cmp	r0, #0
  420ea6:	f43f ae24 	beq.w	420af2 <_vfiprintf_r+0x896>
  420eaa:	e624      	b.n	420af6 <_vfiprintf_r+0x89a>
  420eac:	9907      	ldr	r1, [sp, #28]
  420eae:	f898 2001 	ldrb.w	r2, [r8, #1]
  420eb2:	680c      	ldr	r4, [r1, #0]
  420eb4:	3104      	adds	r1, #4
  420eb6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  420eba:	46b8      	mov	r8, r7
  420ebc:	9107      	str	r1, [sp, #28]
  420ebe:	f7ff ba3f 	b.w	420340 <_vfiprintf_r+0xe4>
  420ec2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420ec6:	e43c      	b.n	420742 <_vfiprintf_r+0x4e6>
  420ec8:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420ecc:	e521      	b.n	420912 <_vfiprintf_r+0x6b6>
  420ece:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420ed2:	f7ff bbf4 	b.w	4206be <_vfiprintf_r+0x462>
  420ed6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420eda:	e491      	b.n	420800 <_vfiprintf_r+0x5a4>
  420edc:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  420ee0:	e469      	b.n	4207b6 <_vfiprintf_r+0x55a>
  420ee2:	bf00      	nop
  420ee4:	00428cc8 	.word	0x00428cc8
  420ee8:	00428cc0 	.word	0x00428cc0

00420eec <__sbprintf>:
  420eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  420ef0:	460c      	mov	r4, r1
  420ef2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  420ef6:	8989      	ldrh	r1, [r1, #12]
  420ef8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  420efa:	89e5      	ldrh	r5, [r4, #14]
  420efc:	9619      	str	r6, [sp, #100]	; 0x64
  420efe:	f021 0102 	bic.w	r1, r1, #2
  420f02:	4606      	mov	r6, r0
  420f04:	69e0      	ldr	r0, [r4, #28]
  420f06:	f8ad 100c 	strh.w	r1, [sp, #12]
  420f0a:	4617      	mov	r7, r2
  420f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  420f10:	6a62      	ldr	r2, [r4, #36]	; 0x24
  420f12:	f8ad 500e 	strh.w	r5, [sp, #14]
  420f16:	4698      	mov	r8, r3
  420f18:	ad1a      	add	r5, sp, #104	; 0x68
  420f1a:	2300      	movs	r3, #0
  420f1c:	9007      	str	r0, [sp, #28]
  420f1e:	a816      	add	r0, sp, #88	; 0x58
  420f20:	9209      	str	r2, [sp, #36]	; 0x24
  420f22:	9306      	str	r3, [sp, #24]
  420f24:	9500      	str	r5, [sp, #0]
  420f26:	9504      	str	r5, [sp, #16]
  420f28:	9102      	str	r1, [sp, #8]
  420f2a:	9105      	str	r1, [sp, #20]
  420f2c:	f000 fd48 	bl	4219c0 <__retarget_lock_init_recursive>
  420f30:	4643      	mov	r3, r8
  420f32:	463a      	mov	r2, r7
  420f34:	4669      	mov	r1, sp
  420f36:	4630      	mov	r0, r6
  420f38:	f7ff f990 	bl	42025c <_vfiprintf_r>
  420f3c:	1e05      	subs	r5, r0, #0
  420f3e:	db07      	blt.n	420f50 <__sbprintf+0x64>
  420f40:	4630      	mov	r0, r6
  420f42:	4669      	mov	r1, sp
  420f44:	f000 f928 	bl	421198 <_fflush_r>
  420f48:	2800      	cmp	r0, #0
  420f4a:	bf18      	it	ne
  420f4c:	f04f 35ff 	movne.w	r5, #4294967295
  420f50:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  420f54:	065b      	lsls	r3, r3, #25
  420f56:	d503      	bpl.n	420f60 <__sbprintf+0x74>
  420f58:	89a3      	ldrh	r3, [r4, #12]
  420f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  420f5e:	81a3      	strh	r3, [r4, #12]
  420f60:	9816      	ldr	r0, [sp, #88]	; 0x58
  420f62:	f000 fd2f 	bl	4219c4 <__retarget_lock_close_recursive>
  420f66:	4628      	mov	r0, r5
  420f68:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  420f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00420f70 <__swsetup_r>:
  420f70:	b538      	push	{r3, r4, r5, lr}
  420f72:	4b30      	ldr	r3, [pc, #192]	; (421034 <__swsetup_r+0xc4>)
  420f74:	681b      	ldr	r3, [r3, #0]
  420f76:	4605      	mov	r5, r0
  420f78:	460c      	mov	r4, r1
  420f7a:	b113      	cbz	r3, 420f82 <__swsetup_r+0x12>
  420f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  420f7e:	2a00      	cmp	r2, #0
  420f80:	d038      	beq.n	420ff4 <__swsetup_r+0x84>
  420f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  420f86:	b293      	uxth	r3, r2
  420f88:	0718      	lsls	r0, r3, #28
  420f8a:	d50c      	bpl.n	420fa6 <__swsetup_r+0x36>
  420f8c:	6920      	ldr	r0, [r4, #16]
  420f8e:	b1a8      	cbz	r0, 420fbc <__swsetup_r+0x4c>
  420f90:	f013 0201 	ands.w	r2, r3, #1
  420f94:	d01e      	beq.n	420fd4 <__swsetup_r+0x64>
  420f96:	6963      	ldr	r3, [r4, #20]
  420f98:	2200      	movs	r2, #0
  420f9a:	425b      	negs	r3, r3
  420f9c:	61a3      	str	r3, [r4, #24]
  420f9e:	60a2      	str	r2, [r4, #8]
  420fa0:	b1f0      	cbz	r0, 420fe0 <__swsetup_r+0x70>
  420fa2:	2000      	movs	r0, #0
  420fa4:	bd38      	pop	{r3, r4, r5, pc}
  420fa6:	06d9      	lsls	r1, r3, #27
  420fa8:	d53c      	bpl.n	421024 <__swsetup_r+0xb4>
  420faa:	0758      	lsls	r0, r3, #29
  420fac:	d426      	bmi.n	420ffc <__swsetup_r+0x8c>
  420fae:	6920      	ldr	r0, [r4, #16]
  420fb0:	f042 0308 	orr.w	r3, r2, #8
  420fb4:	81a3      	strh	r3, [r4, #12]
  420fb6:	b29b      	uxth	r3, r3
  420fb8:	2800      	cmp	r0, #0
  420fba:	d1e9      	bne.n	420f90 <__swsetup_r+0x20>
  420fbc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  420fc0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  420fc4:	d0e4      	beq.n	420f90 <__swsetup_r+0x20>
  420fc6:	4628      	mov	r0, r5
  420fc8:	4621      	mov	r1, r4
  420fca:	f000 fd2f 	bl	421a2c <__smakebuf_r>
  420fce:	89a3      	ldrh	r3, [r4, #12]
  420fd0:	6920      	ldr	r0, [r4, #16]
  420fd2:	e7dd      	b.n	420f90 <__swsetup_r+0x20>
  420fd4:	0799      	lsls	r1, r3, #30
  420fd6:	bf58      	it	pl
  420fd8:	6962      	ldrpl	r2, [r4, #20]
  420fda:	60a2      	str	r2, [r4, #8]
  420fdc:	2800      	cmp	r0, #0
  420fde:	d1e0      	bne.n	420fa2 <__swsetup_r+0x32>
  420fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  420fe4:	061a      	lsls	r2, r3, #24
  420fe6:	d5dd      	bpl.n	420fa4 <__swsetup_r+0x34>
  420fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  420fec:	81a3      	strh	r3, [r4, #12]
  420fee:	f04f 30ff 	mov.w	r0, #4294967295
  420ff2:	bd38      	pop	{r3, r4, r5, pc}
  420ff4:	4618      	mov	r0, r3
  420ff6:	f000 f927 	bl	421248 <__sinit>
  420ffa:	e7c2      	b.n	420f82 <__swsetup_r+0x12>
  420ffc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  420ffe:	b151      	cbz	r1, 421016 <__swsetup_r+0xa6>
  421000:	f104 0340 	add.w	r3, r4, #64	; 0x40
  421004:	4299      	cmp	r1, r3
  421006:	d004      	beq.n	421012 <__swsetup_r+0xa2>
  421008:	4628      	mov	r0, r5
  42100a:	f000 fa43 	bl	421494 <_free_r>
  42100e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  421012:	2300      	movs	r3, #0
  421014:	6323      	str	r3, [r4, #48]	; 0x30
  421016:	2300      	movs	r3, #0
  421018:	6920      	ldr	r0, [r4, #16]
  42101a:	6063      	str	r3, [r4, #4]
  42101c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  421020:	6020      	str	r0, [r4, #0]
  421022:	e7c5      	b.n	420fb0 <__swsetup_r+0x40>
  421024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  421028:	2309      	movs	r3, #9
  42102a:	602b      	str	r3, [r5, #0]
  42102c:	f04f 30ff 	mov.w	r0, #4294967295
  421030:	81a2      	strh	r2, [r4, #12]
  421032:	bd38      	pop	{r3, r4, r5, pc}
  421034:	20400060 	.word	0x20400060

00421038 <register_fini>:
  421038:	4b02      	ldr	r3, [pc, #8]	; (421044 <register_fini+0xc>)
  42103a:	b113      	cbz	r3, 421042 <register_fini+0xa>
  42103c:	4802      	ldr	r0, [pc, #8]	; (421048 <register_fini+0x10>)
  42103e:	f000 b805 	b.w	42104c <atexit>
  421042:	4770      	bx	lr
  421044:	00000000 	.word	0x00000000
  421048:	004212b9 	.word	0x004212b9

0042104c <atexit>:
  42104c:	2300      	movs	r3, #0
  42104e:	4601      	mov	r1, r0
  421050:	461a      	mov	r2, r3
  421052:	4618      	mov	r0, r3
  421054:	f001 b890 	b.w	422178 <__register_exitproc>

00421058 <__sflush_r>:
  421058:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  42105c:	b29a      	uxth	r2, r3
  42105e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421062:	460d      	mov	r5, r1
  421064:	0711      	lsls	r1, r2, #28
  421066:	4680      	mov	r8, r0
  421068:	d43a      	bmi.n	4210e0 <__sflush_r+0x88>
  42106a:	686a      	ldr	r2, [r5, #4]
  42106c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  421070:	2a00      	cmp	r2, #0
  421072:	81ab      	strh	r3, [r5, #12]
  421074:	dd6f      	ble.n	421156 <__sflush_r+0xfe>
  421076:	6aac      	ldr	r4, [r5, #40]	; 0x28
  421078:	2c00      	cmp	r4, #0
  42107a:	d049      	beq.n	421110 <__sflush_r+0xb8>
  42107c:	2200      	movs	r2, #0
  42107e:	b29b      	uxth	r3, r3
  421080:	f8d8 6000 	ldr.w	r6, [r8]
  421084:	f8c8 2000 	str.w	r2, [r8]
  421088:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  42108c:	d067      	beq.n	42115e <__sflush_r+0x106>
  42108e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  421090:	075f      	lsls	r7, r3, #29
  421092:	d505      	bpl.n	4210a0 <__sflush_r+0x48>
  421094:	6869      	ldr	r1, [r5, #4]
  421096:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  421098:	1a52      	subs	r2, r2, r1
  42109a:	b10b      	cbz	r3, 4210a0 <__sflush_r+0x48>
  42109c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  42109e:	1ad2      	subs	r2, r2, r3
  4210a0:	2300      	movs	r3, #0
  4210a2:	69e9      	ldr	r1, [r5, #28]
  4210a4:	4640      	mov	r0, r8
  4210a6:	47a0      	blx	r4
  4210a8:	1c44      	adds	r4, r0, #1
  4210aa:	d03c      	beq.n	421126 <__sflush_r+0xce>
  4210ac:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4210b0:	692a      	ldr	r2, [r5, #16]
  4210b2:	602a      	str	r2, [r5, #0]
  4210b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4210b8:	2200      	movs	r2, #0
  4210ba:	81ab      	strh	r3, [r5, #12]
  4210bc:	04db      	lsls	r3, r3, #19
  4210be:	606a      	str	r2, [r5, #4]
  4210c0:	d447      	bmi.n	421152 <__sflush_r+0xfa>
  4210c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4210c4:	f8c8 6000 	str.w	r6, [r8]
  4210c8:	b311      	cbz	r1, 421110 <__sflush_r+0xb8>
  4210ca:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4210ce:	4299      	cmp	r1, r3
  4210d0:	d002      	beq.n	4210d8 <__sflush_r+0x80>
  4210d2:	4640      	mov	r0, r8
  4210d4:	f000 f9de 	bl	421494 <_free_r>
  4210d8:	2000      	movs	r0, #0
  4210da:	6328      	str	r0, [r5, #48]	; 0x30
  4210dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4210e0:	692e      	ldr	r6, [r5, #16]
  4210e2:	b1ae      	cbz	r6, 421110 <__sflush_r+0xb8>
  4210e4:	682c      	ldr	r4, [r5, #0]
  4210e6:	602e      	str	r6, [r5, #0]
  4210e8:	0791      	lsls	r1, r2, #30
  4210ea:	bf0c      	ite	eq
  4210ec:	696b      	ldreq	r3, [r5, #20]
  4210ee:	2300      	movne	r3, #0
  4210f0:	1ba4      	subs	r4, r4, r6
  4210f2:	60ab      	str	r3, [r5, #8]
  4210f4:	e00a      	b.n	42110c <__sflush_r+0xb4>
  4210f6:	4623      	mov	r3, r4
  4210f8:	4632      	mov	r2, r6
  4210fa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4210fc:	69e9      	ldr	r1, [r5, #28]
  4210fe:	4640      	mov	r0, r8
  421100:	47b8      	blx	r7
  421102:	2800      	cmp	r0, #0
  421104:	eba4 0400 	sub.w	r4, r4, r0
  421108:	4406      	add	r6, r0
  42110a:	dd04      	ble.n	421116 <__sflush_r+0xbe>
  42110c:	2c00      	cmp	r4, #0
  42110e:	dcf2      	bgt.n	4210f6 <__sflush_r+0x9e>
  421110:	2000      	movs	r0, #0
  421112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  421116:	89ab      	ldrh	r3, [r5, #12]
  421118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42111c:	81ab      	strh	r3, [r5, #12]
  42111e:	f04f 30ff 	mov.w	r0, #4294967295
  421122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  421126:	f8d8 4000 	ldr.w	r4, [r8]
  42112a:	2c1d      	cmp	r4, #29
  42112c:	d8f3      	bhi.n	421116 <__sflush_r+0xbe>
  42112e:	4b19      	ldr	r3, [pc, #100]	; (421194 <__sflush_r+0x13c>)
  421130:	40e3      	lsrs	r3, r4
  421132:	43db      	mvns	r3, r3
  421134:	f013 0301 	ands.w	r3, r3, #1
  421138:	d1ed      	bne.n	421116 <__sflush_r+0xbe>
  42113a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  42113e:	606b      	str	r3, [r5, #4]
  421140:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  421144:	6929      	ldr	r1, [r5, #16]
  421146:	81ab      	strh	r3, [r5, #12]
  421148:	04da      	lsls	r2, r3, #19
  42114a:	6029      	str	r1, [r5, #0]
  42114c:	d5b9      	bpl.n	4210c2 <__sflush_r+0x6a>
  42114e:	2c00      	cmp	r4, #0
  421150:	d1b7      	bne.n	4210c2 <__sflush_r+0x6a>
  421152:	6528      	str	r0, [r5, #80]	; 0x50
  421154:	e7b5      	b.n	4210c2 <__sflush_r+0x6a>
  421156:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  421158:	2a00      	cmp	r2, #0
  42115a:	dc8c      	bgt.n	421076 <__sflush_r+0x1e>
  42115c:	e7d8      	b.n	421110 <__sflush_r+0xb8>
  42115e:	2301      	movs	r3, #1
  421160:	69e9      	ldr	r1, [r5, #28]
  421162:	4640      	mov	r0, r8
  421164:	47a0      	blx	r4
  421166:	1c43      	adds	r3, r0, #1
  421168:	4602      	mov	r2, r0
  42116a:	d002      	beq.n	421172 <__sflush_r+0x11a>
  42116c:	89ab      	ldrh	r3, [r5, #12]
  42116e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  421170:	e78e      	b.n	421090 <__sflush_r+0x38>
  421172:	f8d8 3000 	ldr.w	r3, [r8]
  421176:	2b00      	cmp	r3, #0
  421178:	d0f8      	beq.n	42116c <__sflush_r+0x114>
  42117a:	2b1d      	cmp	r3, #29
  42117c:	d001      	beq.n	421182 <__sflush_r+0x12a>
  42117e:	2b16      	cmp	r3, #22
  421180:	d102      	bne.n	421188 <__sflush_r+0x130>
  421182:	f8c8 6000 	str.w	r6, [r8]
  421186:	e7c3      	b.n	421110 <__sflush_r+0xb8>
  421188:	89ab      	ldrh	r3, [r5, #12]
  42118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  42118e:	81ab      	strh	r3, [r5, #12]
  421190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  421194:	20400001 	.word	0x20400001

00421198 <_fflush_r>:
  421198:	b538      	push	{r3, r4, r5, lr}
  42119a:	460d      	mov	r5, r1
  42119c:	4604      	mov	r4, r0
  42119e:	b108      	cbz	r0, 4211a4 <_fflush_r+0xc>
  4211a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4211a2:	b1bb      	cbz	r3, 4211d4 <_fflush_r+0x3c>
  4211a4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4211a8:	b188      	cbz	r0, 4211ce <_fflush_r+0x36>
  4211aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4211ac:	07db      	lsls	r3, r3, #31
  4211ae:	d401      	bmi.n	4211b4 <_fflush_r+0x1c>
  4211b0:	0581      	lsls	r1, r0, #22
  4211b2:	d517      	bpl.n	4211e4 <_fflush_r+0x4c>
  4211b4:	4620      	mov	r0, r4
  4211b6:	4629      	mov	r1, r5
  4211b8:	f7ff ff4e 	bl	421058 <__sflush_r>
  4211bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4211be:	07da      	lsls	r2, r3, #31
  4211c0:	4604      	mov	r4, r0
  4211c2:	d402      	bmi.n	4211ca <_fflush_r+0x32>
  4211c4:	89ab      	ldrh	r3, [r5, #12]
  4211c6:	059b      	lsls	r3, r3, #22
  4211c8:	d507      	bpl.n	4211da <_fflush_r+0x42>
  4211ca:	4620      	mov	r0, r4
  4211cc:	bd38      	pop	{r3, r4, r5, pc}
  4211ce:	4604      	mov	r4, r0
  4211d0:	4620      	mov	r0, r4
  4211d2:	bd38      	pop	{r3, r4, r5, pc}
  4211d4:	f000 f838 	bl	421248 <__sinit>
  4211d8:	e7e4      	b.n	4211a4 <_fflush_r+0xc>
  4211da:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4211dc:	f000 fbf6 	bl	4219cc <__retarget_lock_release_recursive>
  4211e0:	4620      	mov	r0, r4
  4211e2:	bd38      	pop	{r3, r4, r5, pc}
  4211e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  4211e6:	f000 fbef 	bl	4219c8 <__retarget_lock_acquire_recursive>
  4211ea:	e7e3      	b.n	4211b4 <_fflush_r+0x1c>

004211ec <_cleanup_r>:
  4211ec:	4901      	ldr	r1, [pc, #4]	; (4211f4 <_cleanup_r+0x8>)
  4211ee:	f000 bbaf 	b.w	421950 <_fwalk_reent>
  4211f2:	bf00      	nop
  4211f4:	00422261 	.word	0x00422261

004211f8 <std.isra.0>:
  4211f8:	b510      	push	{r4, lr}
  4211fa:	2300      	movs	r3, #0
  4211fc:	4604      	mov	r4, r0
  4211fe:	8181      	strh	r1, [r0, #12]
  421200:	81c2      	strh	r2, [r0, #14]
  421202:	6003      	str	r3, [r0, #0]
  421204:	6043      	str	r3, [r0, #4]
  421206:	6083      	str	r3, [r0, #8]
  421208:	6643      	str	r3, [r0, #100]	; 0x64
  42120a:	6103      	str	r3, [r0, #16]
  42120c:	6143      	str	r3, [r0, #20]
  42120e:	6183      	str	r3, [r0, #24]
  421210:	4619      	mov	r1, r3
  421212:	2208      	movs	r2, #8
  421214:	305c      	adds	r0, #92	; 0x5c
  421216:	f7fe fc43 	bl	41faa0 <memset>
  42121a:	4807      	ldr	r0, [pc, #28]	; (421238 <std.isra.0+0x40>)
  42121c:	4907      	ldr	r1, [pc, #28]	; (42123c <std.isra.0+0x44>)
  42121e:	4a08      	ldr	r2, [pc, #32]	; (421240 <std.isra.0+0x48>)
  421220:	4b08      	ldr	r3, [pc, #32]	; (421244 <std.isra.0+0x4c>)
  421222:	6220      	str	r0, [r4, #32]
  421224:	61e4      	str	r4, [r4, #28]
  421226:	6261      	str	r1, [r4, #36]	; 0x24
  421228:	62a2      	str	r2, [r4, #40]	; 0x28
  42122a:	62e3      	str	r3, [r4, #44]	; 0x2c
  42122c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  421230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  421234:	f000 bbc4 	b.w	4219c0 <__retarget_lock_init_recursive>
  421238:	00421fa5 	.word	0x00421fa5
  42123c:	00421fc9 	.word	0x00421fc9
  421240:	00422005 	.word	0x00422005
  421244:	00422025 	.word	0x00422025

00421248 <__sinit>:
  421248:	b510      	push	{r4, lr}
  42124a:	4604      	mov	r4, r0
  42124c:	4812      	ldr	r0, [pc, #72]	; (421298 <__sinit+0x50>)
  42124e:	f000 fbbb 	bl	4219c8 <__retarget_lock_acquire_recursive>
  421252:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  421254:	b9d2      	cbnz	r2, 42128c <__sinit+0x44>
  421256:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  42125a:	4810      	ldr	r0, [pc, #64]	; (42129c <__sinit+0x54>)
  42125c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  421260:	2103      	movs	r1, #3
  421262:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  421266:	63e0      	str	r0, [r4, #60]	; 0x3c
  421268:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  42126c:	6860      	ldr	r0, [r4, #4]
  42126e:	2104      	movs	r1, #4
  421270:	f7ff ffc2 	bl	4211f8 <std.isra.0>
  421274:	2201      	movs	r2, #1
  421276:	2109      	movs	r1, #9
  421278:	68a0      	ldr	r0, [r4, #8]
  42127a:	f7ff ffbd 	bl	4211f8 <std.isra.0>
  42127e:	2202      	movs	r2, #2
  421280:	2112      	movs	r1, #18
  421282:	68e0      	ldr	r0, [r4, #12]
  421284:	f7ff ffb8 	bl	4211f8 <std.isra.0>
  421288:	2301      	movs	r3, #1
  42128a:	63a3      	str	r3, [r4, #56]	; 0x38
  42128c:	4802      	ldr	r0, [pc, #8]	; (421298 <__sinit+0x50>)
  42128e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  421292:	f000 bb9b 	b.w	4219cc <__retarget_lock_release_recursive>
  421296:	bf00      	nop
  421298:	2043a314 	.word	0x2043a314
  42129c:	004211ed 	.word	0x004211ed

004212a0 <__sfp_lock_acquire>:
  4212a0:	4801      	ldr	r0, [pc, #4]	; (4212a8 <__sfp_lock_acquire+0x8>)
  4212a2:	f000 bb91 	b.w	4219c8 <__retarget_lock_acquire_recursive>
  4212a6:	bf00      	nop
  4212a8:	2043a328 	.word	0x2043a328

004212ac <__sfp_lock_release>:
  4212ac:	4801      	ldr	r0, [pc, #4]	; (4212b4 <__sfp_lock_release+0x8>)
  4212ae:	f000 bb8d 	b.w	4219cc <__retarget_lock_release_recursive>
  4212b2:	bf00      	nop
  4212b4:	2043a328 	.word	0x2043a328

004212b8 <__libc_fini_array>:
  4212b8:	b538      	push	{r3, r4, r5, lr}
  4212ba:	4c0a      	ldr	r4, [pc, #40]	; (4212e4 <__libc_fini_array+0x2c>)
  4212bc:	4d0a      	ldr	r5, [pc, #40]	; (4212e8 <__libc_fini_array+0x30>)
  4212be:	1b64      	subs	r4, r4, r5
  4212c0:	10a4      	asrs	r4, r4, #2
  4212c2:	d00a      	beq.n	4212da <__libc_fini_array+0x22>
  4212c4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4212c8:	3b01      	subs	r3, #1
  4212ca:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4212ce:	3c01      	subs	r4, #1
  4212d0:	f855 3904 	ldr.w	r3, [r5], #-4
  4212d4:	4798      	blx	r3
  4212d6:	2c00      	cmp	r4, #0
  4212d8:	d1f9      	bne.n	4212ce <__libc_fini_array+0x16>
  4212da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4212de:	f007 bd97 	b.w	428e10 <_fini>
  4212e2:	bf00      	nop
  4212e4:	00428e20 	.word	0x00428e20
  4212e8:	00428e1c 	.word	0x00428e1c

004212ec <__fputwc>:
  4212ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4212f0:	b082      	sub	sp, #8
  4212f2:	4680      	mov	r8, r0
  4212f4:	4689      	mov	r9, r1
  4212f6:	4614      	mov	r4, r2
  4212f8:	f000 fb54 	bl	4219a4 <__locale_mb_cur_max>
  4212fc:	2801      	cmp	r0, #1
  4212fe:	d036      	beq.n	42136e <__fputwc+0x82>
  421300:	464a      	mov	r2, r9
  421302:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  421306:	a901      	add	r1, sp, #4
  421308:	4640      	mov	r0, r8
  42130a:	f000 fee7 	bl	4220dc <_wcrtomb_r>
  42130e:	1c42      	adds	r2, r0, #1
  421310:	4606      	mov	r6, r0
  421312:	d025      	beq.n	421360 <__fputwc+0x74>
  421314:	b3a8      	cbz	r0, 421382 <__fputwc+0x96>
  421316:	f89d e004 	ldrb.w	lr, [sp, #4]
  42131a:	2500      	movs	r5, #0
  42131c:	f10d 0a04 	add.w	sl, sp, #4
  421320:	e009      	b.n	421336 <__fputwc+0x4a>
  421322:	6823      	ldr	r3, [r4, #0]
  421324:	1c5a      	adds	r2, r3, #1
  421326:	6022      	str	r2, [r4, #0]
  421328:	f883 e000 	strb.w	lr, [r3]
  42132c:	3501      	adds	r5, #1
  42132e:	42b5      	cmp	r5, r6
  421330:	d227      	bcs.n	421382 <__fputwc+0x96>
  421332:	f815 e00a 	ldrb.w	lr, [r5, sl]
  421336:	68a3      	ldr	r3, [r4, #8]
  421338:	3b01      	subs	r3, #1
  42133a:	2b00      	cmp	r3, #0
  42133c:	60a3      	str	r3, [r4, #8]
  42133e:	daf0      	bge.n	421322 <__fputwc+0x36>
  421340:	69a7      	ldr	r7, [r4, #24]
  421342:	42bb      	cmp	r3, r7
  421344:	4671      	mov	r1, lr
  421346:	4622      	mov	r2, r4
  421348:	4640      	mov	r0, r8
  42134a:	db02      	blt.n	421352 <__fputwc+0x66>
  42134c:	f1be 0f0a 	cmp.w	lr, #10
  421350:	d1e7      	bne.n	421322 <__fputwc+0x36>
  421352:	f000 fe6b 	bl	42202c <__swbuf_r>
  421356:	1c43      	adds	r3, r0, #1
  421358:	d1e8      	bne.n	42132c <__fputwc+0x40>
  42135a:	b002      	add	sp, #8
  42135c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421360:	89a3      	ldrh	r3, [r4, #12]
  421362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  421366:	81a3      	strh	r3, [r4, #12]
  421368:	b002      	add	sp, #8
  42136a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42136e:	f109 33ff 	add.w	r3, r9, #4294967295
  421372:	2bfe      	cmp	r3, #254	; 0xfe
  421374:	d8c4      	bhi.n	421300 <__fputwc+0x14>
  421376:	fa5f fe89 	uxtb.w	lr, r9
  42137a:	4606      	mov	r6, r0
  42137c:	f88d e004 	strb.w	lr, [sp, #4]
  421380:	e7cb      	b.n	42131a <__fputwc+0x2e>
  421382:	4648      	mov	r0, r9
  421384:	b002      	add	sp, #8
  421386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  42138a:	bf00      	nop

0042138c <_fputwc_r>:
  42138c:	b530      	push	{r4, r5, lr}
  42138e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  421390:	f013 0f01 	tst.w	r3, #1
  421394:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  421398:	4614      	mov	r4, r2
  42139a:	b083      	sub	sp, #12
  42139c:	4605      	mov	r5, r0
  42139e:	b29a      	uxth	r2, r3
  4213a0:	d101      	bne.n	4213a6 <_fputwc_r+0x1a>
  4213a2:	0590      	lsls	r0, r2, #22
  4213a4:	d51c      	bpl.n	4213e0 <_fputwc_r+0x54>
  4213a6:	0490      	lsls	r0, r2, #18
  4213a8:	d406      	bmi.n	4213b8 <_fputwc_r+0x2c>
  4213aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4213ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4213b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4213b4:	81a3      	strh	r3, [r4, #12]
  4213b6:	6662      	str	r2, [r4, #100]	; 0x64
  4213b8:	4628      	mov	r0, r5
  4213ba:	4622      	mov	r2, r4
  4213bc:	f7ff ff96 	bl	4212ec <__fputwc>
  4213c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4213c2:	07da      	lsls	r2, r3, #31
  4213c4:	4605      	mov	r5, r0
  4213c6:	d402      	bmi.n	4213ce <_fputwc_r+0x42>
  4213c8:	89a3      	ldrh	r3, [r4, #12]
  4213ca:	059b      	lsls	r3, r3, #22
  4213cc:	d502      	bpl.n	4213d4 <_fputwc_r+0x48>
  4213ce:	4628      	mov	r0, r5
  4213d0:	b003      	add	sp, #12
  4213d2:	bd30      	pop	{r4, r5, pc}
  4213d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4213d6:	f000 faf9 	bl	4219cc <__retarget_lock_release_recursive>
  4213da:	4628      	mov	r0, r5
  4213dc:	b003      	add	sp, #12
  4213de:	bd30      	pop	{r4, r5, pc}
  4213e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4213e2:	9101      	str	r1, [sp, #4]
  4213e4:	f000 faf0 	bl	4219c8 <__retarget_lock_acquire_recursive>
  4213e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4213ec:	9901      	ldr	r1, [sp, #4]
  4213ee:	b29a      	uxth	r2, r3
  4213f0:	e7d9      	b.n	4213a6 <_fputwc_r+0x1a>
  4213f2:	bf00      	nop

004213f4 <_malloc_trim_r>:
  4213f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4213f6:	4f24      	ldr	r7, [pc, #144]	; (421488 <_malloc_trim_r+0x94>)
  4213f8:	460c      	mov	r4, r1
  4213fa:	4606      	mov	r6, r0
  4213fc:	f7fe fb9e 	bl	41fb3c <__malloc_lock>
  421400:	68bb      	ldr	r3, [r7, #8]
  421402:	685d      	ldr	r5, [r3, #4]
  421404:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  421408:	310f      	adds	r1, #15
  42140a:	f025 0503 	bic.w	r5, r5, #3
  42140e:	4429      	add	r1, r5
  421410:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  421414:	f021 010f 	bic.w	r1, r1, #15
  421418:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  42141c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  421420:	db07      	blt.n	421432 <_malloc_trim_r+0x3e>
  421422:	2100      	movs	r1, #0
  421424:	4630      	mov	r0, r6
  421426:	f7fe fbb5 	bl	41fb94 <_sbrk_r>
  42142a:	68bb      	ldr	r3, [r7, #8]
  42142c:	442b      	add	r3, r5
  42142e:	4298      	cmp	r0, r3
  421430:	d004      	beq.n	42143c <_malloc_trim_r+0x48>
  421432:	4630      	mov	r0, r6
  421434:	f7fe fb88 	bl	41fb48 <__malloc_unlock>
  421438:	2000      	movs	r0, #0
  42143a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42143c:	4261      	negs	r1, r4
  42143e:	4630      	mov	r0, r6
  421440:	f7fe fba8 	bl	41fb94 <_sbrk_r>
  421444:	3001      	adds	r0, #1
  421446:	d00d      	beq.n	421464 <_malloc_trim_r+0x70>
  421448:	4b10      	ldr	r3, [pc, #64]	; (42148c <_malloc_trim_r+0x98>)
  42144a:	68ba      	ldr	r2, [r7, #8]
  42144c:	6819      	ldr	r1, [r3, #0]
  42144e:	1b2d      	subs	r5, r5, r4
  421450:	f045 0501 	orr.w	r5, r5, #1
  421454:	4630      	mov	r0, r6
  421456:	1b09      	subs	r1, r1, r4
  421458:	6055      	str	r5, [r2, #4]
  42145a:	6019      	str	r1, [r3, #0]
  42145c:	f7fe fb74 	bl	41fb48 <__malloc_unlock>
  421460:	2001      	movs	r0, #1
  421462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  421464:	2100      	movs	r1, #0
  421466:	4630      	mov	r0, r6
  421468:	f7fe fb94 	bl	41fb94 <_sbrk_r>
  42146c:	68ba      	ldr	r2, [r7, #8]
  42146e:	1a83      	subs	r3, r0, r2
  421470:	2b0f      	cmp	r3, #15
  421472:	ddde      	ble.n	421432 <_malloc_trim_r+0x3e>
  421474:	4c06      	ldr	r4, [pc, #24]	; (421490 <_malloc_trim_r+0x9c>)
  421476:	4905      	ldr	r1, [pc, #20]	; (42148c <_malloc_trim_r+0x98>)
  421478:	6824      	ldr	r4, [r4, #0]
  42147a:	f043 0301 	orr.w	r3, r3, #1
  42147e:	1b00      	subs	r0, r0, r4
  421480:	6053      	str	r3, [r2, #4]
  421482:	6008      	str	r0, [r1, #0]
  421484:	e7d5      	b.n	421432 <_malloc_trim_r+0x3e>
  421486:	bf00      	nop
  421488:	20400490 	.word	0x20400490
  42148c:	2043a070 	.word	0x2043a070
  421490:	20400898 	.word	0x20400898

00421494 <_free_r>:
  421494:	2900      	cmp	r1, #0
  421496:	d044      	beq.n	421522 <_free_r+0x8e>
  421498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  42149c:	460d      	mov	r5, r1
  42149e:	4680      	mov	r8, r0
  4214a0:	f7fe fb4c 	bl	41fb3c <__malloc_lock>
  4214a4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4214a8:	4969      	ldr	r1, [pc, #420]	; (421650 <_free_r+0x1bc>)
  4214aa:	f027 0301 	bic.w	r3, r7, #1
  4214ae:	f1a5 0408 	sub.w	r4, r5, #8
  4214b2:	18e2      	adds	r2, r4, r3
  4214b4:	688e      	ldr	r6, [r1, #8]
  4214b6:	6850      	ldr	r0, [r2, #4]
  4214b8:	42b2      	cmp	r2, r6
  4214ba:	f020 0003 	bic.w	r0, r0, #3
  4214be:	d05e      	beq.n	42157e <_free_r+0xea>
  4214c0:	07fe      	lsls	r6, r7, #31
  4214c2:	6050      	str	r0, [r2, #4]
  4214c4:	d40b      	bmi.n	4214de <_free_r+0x4a>
  4214c6:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4214ca:	1be4      	subs	r4, r4, r7
  4214cc:	f101 0e08 	add.w	lr, r1, #8
  4214d0:	68a5      	ldr	r5, [r4, #8]
  4214d2:	4575      	cmp	r5, lr
  4214d4:	443b      	add	r3, r7
  4214d6:	d06d      	beq.n	4215b4 <_free_r+0x120>
  4214d8:	68e7      	ldr	r7, [r4, #12]
  4214da:	60ef      	str	r7, [r5, #12]
  4214dc:	60bd      	str	r5, [r7, #8]
  4214de:	1815      	adds	r5, r2, r0
  4214e0:	686d      	ldr	r5, [r5, #4]
  4214e2:	07ed      	lsls	r5, r5, #31
  4214e4:	d53e      	bpl.n	421564 <_free_r+0xd0>
  4214e6:	f043 0201 	orr.w	r2, r3, #1
  4214ea:	6062      	str	r2, [r4, #4]
  4214ec:	50e3      	str	r3, [r4, r3]
  4214ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4214f2:	d217      	bcs.n	421524 <_free_r+0x90>
  4214f4:	08db      	lsrs	r3, r3, #3
  4214f6:	1c58      	adds	r0, r3, #1
  4214f8:	109a      	asrs	r2, r3, #2
  4214fa:	684d      	ldr	r5, [r1, #4]
  4214fc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  421500:	60a7      	str	r7, [r4, #8]
  421502:	2301      	movs	r3, #1
  421504:	4093      	lsls	r3, r2
  421506:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  42150a:	432b      	orrs	r3, r5
  42150c:	3a08      	subs	r2, #8
  42150e:	60e2      	str	r2, [r4, #12]
  421510:	604b      	str	r3, [r1, #4]
  421512:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  421516:	60fc      	str	r4, [r7, #12]
  421518:	4640      	mov	r0, r8
  42151a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  42151e:	f7fe bb13 	b.w	41fb48 <__malloc_unlock>
  421522:	4770      	bx	lr
  421524:	0a5a      	lsrs	r2, r3, #9
  421526:	2a04      	cmp	r2, #4
  421528:	d852      	bhi.n	4215d0 <_free_r+0x13c>
  42152a:	099a      	lsrs	r2, r3, #6
  42152c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  421530:	00ff      	lsls	r7, r7, #3
  421532:	f102 0538 	add.w	r5, r2, #56	; 0x38
  421536:	19c8      	adds	r0, r1, r7
  421538:	59ca      	ldr	r2, [r1, r7]
  42153a:	3808      	subs	r0, #8
  42153c:	4290      	cmp	r0, r2
  42153e:	d04f      	beq.n	4215e0 <_free_r+0x14c>
  421540:	6851      	ldr	r1, [r2, #4]
  421542:	f021 0103 	bic.w	r1, r1, #3
  421546:	428b      	cmp	r3, r1
  421548:	d232      	bcs.n	4215b0 <_free_r+0x11c>
  42154a:	6892      	ldr	r2, [r2, #8]
  42154c:	4290      	cmp	r0, r2
  42154e:	d1f7      	bne.n	421540 <_free_r+0xac>
  421550:	68c3      	ldr	r3, [r0, #12]
  421552:	60a0      	str	r0, [r4, #8]
  421554:	60e3      	str	r3, [r4, #12]
  421556:	609c      	str	r4, [r3, #8]
  421558:	60c4      	str	r4, [r0, #12]
  42155a:	4640      	mov	r0, r8
  42155c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  421560:	f7fe baf2 	b.w	41fb48 <__malloc_unlock>
  421564:	6895      	ldr	r5, [r2, #8]
  421566:	4f3b      	ldr	r7, [pc, #236]	; (421654 <_free_r+0x1c0>)
  421568:	42bd      	cmp	r5, r7
  42156a:	4403      	add	r3, r0
  42156c:	d040      	beq.n	4215f0 <_free_r+0x15c>
  42156e:	68d0      	ldr	r0, [r2, #12]
  421570:	60e8      	str	r0, [r5, #12]
  421572:	f043 0201 	orr.w	r2, r3, #1
  421576:	6085      	str	r5, [r0, #8]
  421578:	6062      	str	r2, [r4, #4]
  42157a:	50e3      	str	r3, [r4, r3]
  42157c:	e7b7      	b.n	4214ee <_free_r+0x5a>
  42157e:	07ff      	lsls	r7, r7, #31
  421580:	4403      	add	r3, r0
  421582:	d407      	bmi.n	421594 <_free_r+0x100>
  421584:	f855 2c08 	ldr.w	r2, [r5, #-8]
  421588:	1aa4      	subs	r4, r4, r2
  42158a:	4413      	add	r3, r2
  42158c:	68a0      	ldr	r0, [r4, #8]
  42158e:	68e2      	ldr	r2, [r4, #12]
  421590:	60c2      	str	r2, [r0, #12]
  421592:	6090      	str	r0, [r2, #8]
  421594:	4a30      	ldr	r2, [pc, #192]	; (421658 <_free_r+0x1c4>)
  421596:	6812      	ldr	r2, [r2, #0]
  421598:	f043 0001 	orr.w	r0, r3, #1
  42159c:	4293      	cmp	r3, r2
  42159e:	6060      	str	r0, [r4, #4]
  4215a0:	608c      	str	r4, [r1, #8]
  4215a2:	d3b9      	bcc.n	421518 <_free_r+0x84>
  4215a4:	4b2d      	ldr	r3, [pc, #180]	; (42165c <_free_r+0x1c8>)
  4215a6:	4640      	mov	r0, r8
  4215a8:	6819      	ldr	r1, [r3, #0]
  4215aa:	f7ff ff23 	bl	4213f4 <_malloc_trim_r>
  4215ae:	e7b3      	b.n	421518 <_free_r+0x84>
  4215b0:	4610      	mov	r0, r2
  4215b2:	e7cd      	b.n	421550 <_free_r+0xbc>
  4215b4:	1811      	adds	r1, r2, r0
  4215b6:	6849      	ldr	r1, [r1, #4]
  4215b8:	07c9      	lsls	r1, r1, #31
  4215ba:	d444      	bmi.n	421646 <_free_r+0x1b2>
  4215bc:	6891      	ldr	r1, [r2, #8]
  4215be:	68d2      	ldr	r2, [r2, #12]
  4215c0:	60ca      	str	r2, [r1, #12]
  4215c2:	4403      	add	r3, r0
  4215c4:	f043 0001 	orr.w	r0, r3, #1
  4215c8:	6091      	str	r1, [r2, #8]
  4215ca:	6060      	str	r0, [r4, #4]
  4215cc:	50e3      	str	r3, [r4, r3]
  4215ce:	e7a3      	b.n	421518 <_free_r+0x84>
  4215d0:	2a14      	cmp	r2, #20
  4215d2:	d816      	bhi.n	421602 <_free_r+0x16e>
  4215d4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4215d8:	00ff      	lsls	r7, r7, #3
  4215da:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4215de:	e7aa      	b.n	421536 <_free_r+0xa2>
  4215e0:	10aa      	asrs	r2, r5, #2
  4215e2:	2301      	movs	r3, #1
  4215e4:	684d      	ldr	r5, [r1, #4]
  4215e6:	4093      	lsls	r3, r2
  4215e8:	432b      	orrs	r3, r5
  4215ea:	604b      	str	r3, [r1, #4]
  4215ec:	4603      	mov	r3, r0
  4215ee:	e7b0      	b.n	421552 <_free_r+0xbe>
  4215f0:	f043 0201 	orr.w	r2, r3, #1
  4215f4:	614c      	str	r4, [r1, #20]
  4215f6:	610c      	str	r4, [r1, #16]
  4215f8:	60e5      	str	r5, [r4, #12]
  4215fa:	60a5      	str	r5, [r4, #8]
  4215fc:	6062      	str	r2, [r4, #4]
  4215fe:	50e3      	str	r3, [r4, r3]
  421600:	e78a      	b.n	421518 <_free_r+0x84>
  421602:	2a54      	cmp	r2, #84	; 0x54
  421604:	d806      	bhi.n	421614 <_free_r+0x180>
  421606:	0b1a      	lsrs	r2, r3, #12
  421608:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  42160c:	00ff      	lsls	r7, r7, #3
  42160e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  421612:	e790      	b.n	421536 <_free_r+0xa2>
  421614:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  421618:	d806      	bhi.n	421628 <_free_r+0x194>
  42161a:	0bda      	lsrs	r2, r3, #15
  42161c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  421620:	00ff      	lsls	r7, r7, #3
  421622:	f102 0577 	add.w	r5, r2, #119	; 0x77
  421626:	e786      	b.n	421536 <_free_r+0xa2>
  421628:	f240 5054 	movw	r0, #1364	; 0x554
  42162c:	4282      	cmp	r2, r0
  42162e:	d806      	bhi.n	42163e <_free_r+0x1aa>
  421630:	0c9a      	lsrs	r2, r3, #18
  421632:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  421636:	00ff      	lsls	r7, r7, #3
  421638:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  42163c:	e77b      	b.n	421536 <_free_r+0xa2>
  42163e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  421642:	257e      	movs	r5, #126	; 0x7e
  421644:	e777      	b.n	421536 <_free_r+0xa2>
  421646:	f043 0101 	orr.w	r1, r3, #1
  42164a:	6061      	str	r1, [r4, #4]
  42164c:	6013      	str	r3, [r2, #0]
  42164e:	e763      	b.n	421518 <_free_r+0x84>
  421650:	20400490 	.word	0x20400490
  421654:	20400498 	.word	0x20400498
  421658:	2040089c 	.word	0x2040089c
  42165c:	2043a0a0 	.word	0x2043a0a0

00421660 <__sfvwrite_r>:
  421660:	6893      	ldr	r3, [r2, #8]
  421662:	2b00      	cmp	r3, #0
  421664:	d073      	beq.n	42174e <__sfvwrite_r+0xee>
  421666:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42166a:	898b      	ldrh	r3, [r1, #12]
  42166c:	b083      	sub	sp, #12
  42166e:	460c      	mov	r4, r1
  421670:	0719      	lsls	r1, r3, #28
  421672:	9000      	str	r0, [sp, #0]
  421674:	4616      	mov	r6, r2
  421676:	d526      	bpl.n	4216c6 <__sfvwrite_r+0x66>
  421678:	6922      	ldr	r2, [r4, #16]
  42167a:	b322      	cbz	r2, 4216c6 <__sfvwrite_r+0x66>
  42167c:	f013 0002 	ands.w	r0, r3, #2
  421680:	6835      	ldr	r5, [r6, #0]
  421682:	d02c      	beq.n	4216de <__sfvwrite_r+0x7e>
  421684:	f04f 0900 	mov.w	r9, #0
  421688:	4fb0      	ldr	r7, [pc, #704]	; (42194c <__sfvwrite_r+0x2ec>)
  42168a:	46c8      	mov	r8, r9
  42168c:	46b2      	mov	sl, r6
  42168e:	45b8      	cmp	r8, r7
  421690:	4643      	mov	r3, r8
  421692:	464a      	mov	r2, r9
  421694:	bf28      	it	cs
  421696:	463b      	movcs	r3, r7
  421698:	9800      	ldr	r0, [sp, #0]
  42169a:	f1b8 0f00 	cmp.w	r8, #0
  42169e:	d050      	beq.n	421742 <__sfvwrite_r+0xe2>
  4216a0:	69e1      	ldr	r1, [r4, #28]
  4216a2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4216a4:	47b0      	blx	r6
  4216a6:	2800      	cmp	r0, #0
  4216a8:	dd58      	ble.n	42175c <__sfvwrite_r+0xfc>
  4216aa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4216ae:	1a1b      	subs	r3, r3, r0
  4216b0:	4481      	add	r9, r0
  4216b2:	eba8 0800 	sub.w	r8, r8, r0
  4216b6:	f8ca 3008 	str.w	r3, [sl, #8]
  4216ba:	2b00      	cmp	r3, #0
  4216bc:	d1e7      	bne.n	42168e <__sfvwrite_r+0x2e>
  4216be:	2000      	movs	r0, #0
  4216c0:	b003      	add	sp, #12
  4216c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4216c6:	4621      	mov	r1, r4
  4216c8:	9800      	ldr	r0, [sp, #0]
  4216ca:	f7ff fc51 	bl	420f70 <__swsetup_r>
  4216ce:	2800      	cmp	r0, #0
  4216d0:	f040 8133 	bne.w	42193a <__sfvwrite_r+0x2da>
  4216d4:	89a3      	ldrh	r3, [r4, #12]
  4216d6:	6835      	ldr	r5, [r6, #0]
  4216d8:	f013 0002 	ands.w	r0, r3, #2
  4216dc:	d1d2      	bne.n	421684 <__sfvwrite_r+0x24>
  4216de:	f013 0901 	ands.w	r9, r3, #1
  4216e2:	d145      	bne.n	421770 <__sfvwrite_r+0x110>
  4216e4:	464f      	mov	r7, r9
  4216e6:	9601      	str	r6, [sp, #4]
  4216e8:	b337      	cbz	r7, 421738 <__sfvwrite_r+0xd8>
  4216ea:	059a      	lsls	r2, r3, #22
  4216ec:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4216f0:	f140 8083 	bpl.w	4217fa <__sfvwrite_r+0x19a>
  4216f4:	4547      	cmp	r7, r8
  4216f6:	46c3      	mov	fp, r8
  4216f8:	f0c0 80ab 	bcc.w	421852 <__sfvwrite_r+0x1f2>
  4216fc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  421700:	f040 80ac 	bne.w	42185c <__sfvwrite_r+0x1fc>
  421704:	6820      	ldr	r0, [r4, #0]
  421706:	46ba      	mov	sl, r7
  421708:	465a      	mov	r2, fp
  42170a:	4649      	mov	r1, r9
  42170c:	f000 fa40 	bl	421b90 <memmove>
  421710:	68a2      	ldr	r2, [r4, #8]
  421712:	6823      	ldr	r3, [r4, #0]
  421714:	eba2 0208 	sub.w	r2, r2, r8
  421718:	445b      	add	r3, fp
  42171a:	60a2      	str	r2, [r4, #8]
  42171c:	6023      	str	r3, [r4, #0]
  42171e:	9a01      	ldr	r2, [sp, #4]
  421720:	6893      	ldr	r3, [r2, #8]
  421722:	eba3 030a 	sub.w	r3, r3, sl
  421726:	44d1      	add	r9, sl
  421728:	eba7 070a 	sub.w	r7, r7, sl
  42172c:	6093      	str	r3, [r2, #8]
  42172e:	2b00      	cmp	r3, #0
  421730:	d0c5      	beq.n	4216be <__sfvwrite_r+0x5e>
  421732:	89a3      	ldrh	r3, [r4, #12]
  421734:	2f00      	cmp	r7, #0
  421736:	d1d8      	bne.n	4216ea <__sfvwrite_r+0x8a>
  421738:	f8d5 9000 	ldr.w	r9, [r5]
  42173c:	686f      	ldr	r7, [r5, #4]
  42173e:	3508      	adds	r5, #8
  421740:	e7d2      	b.n	4216e8 <__sfvwrite_r+0x88>
  421742:	f8d5 9000 	ldr.w	r9, [r5]
  421746:	f8d5 8004 	ldr.w	r8, [r5, #4]
  42174a:	3508      	adds	r5, #8
  42174c:	e79f      	b.n	42168e <__sfvwrite_r+0x2e>
  42174e:	2000      	movs	r0, #0
  421750:	4770      	bx	lr
  421752:	4621      	mov	r1, r4
  421754:	9800      	ldr	r0, [sp, #0]
  421756:	f7ff fd1f 	bl	421198 <_fflush_r>
  42175a:	b370      	cbz	r0, 4217ba <__sfvwrite_r+0x15a>
  42175c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  421760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  421764:	f04f 30ff 	mov.w	r0, #4294967295
  421768:	81a3      	strh	r3, [r4, #12]
  42176a:	b003      	add	sp, #12
  42176c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421770:	4681      	mov	r9, r0
  421772:	4633      	mov	r3, r6
  421774:	464e      	mov	r6, r9
  421776:	46a8      	mov	r8, r5
  421778:	469a      	mov	sl, r3
  42177a:	464d      	mov	r5, r9
  42177c:	b34e      	cbz	r6, 4217d2 <__sfvwrite_r+0x172>
  42177e:	b380      	cbz	r0, 4217e2 <__sfvwrite_r+0x182>
  421780:	6820      	ldr	r0, [r4, #0]
  421782:	6923      	ldr	r3, [r4, #16]
  421784:	6962      	ldr	r2, [r4, #20]
  421786:	45b1      	cmp	r9, r6
  421788:	46cb      	mov	fp, r9
  42178a:	bf28      	it	cs
  42178c:	46b3      	movcs	fp, r6
  42178e:	4298      	cmp	r0, r3
  421790:	465f      	mov	r7, fp
  421792:	d904      	bls.n	42179e <__sfvwrite_r+0x13e>
  421794:	68a3      	ldr	r3, [r4, #8]
  421796:	4413      	add	r3, r2
  421798:	459b      	cmp	fp, r3
  42179a:	f300 80a6 	bgt.w	4218ea <__sfvwrite_r+0x28a>
  42179e:	4593      	cmp	fp, r2
  4217a0:	db4b      	blt.n	42183a <__sfvwrite_r+0x1da>
  4217a2:	4613      	mov	r3, r2
  4217a4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4217a6:	69e1      	ldr	r1, [r4, #28]
  4217a8:	9800      	ldr	r0, [sp, #0]
  4217aa:	462a      	mov	r2, r5
  4217ac:	47b8      	blx	r7
  4217ae:	1e07      	subs	r7, r0, #0
  4217b0:	ddd4      	ble.n	42175c <__sfvwrite_r+0xfc>
  4217b2:	ebb9 0907 	subs.w	r9, r9, r7
  4217b6:	d0cc      	beq.n	421752 <__sfvwrite_r+0xf2>
  4217b8:	2001      	movs	r0, #1
  4217ba:	f8da 3008 	ldr.w	r3, [sl, #8]
  4217be:	1bdb      	subs	r3, r3, r7
  4217c0:	443d      	add	r5, r7
  4217c2:	1bf6      	subs	r6, r6, r7
  4217c4:	f8ca 3008 	str.w	r3, [sl, #8]
  4217c8:	2b00      	cmp	r3, #0
  4217ca:	f43f af78 	beq.w	4216be <__sfvwrite_r+0x5e>
  4217ce:	2e00      	cmp	r6, #0
  4217d0:	d1d5      	bne.n	42177e <__sfvwrite_r+0x11e>
  4217d2:	f108 0308 	add.w	r3, r8, #8
  4217d6:	e913 0060 	ldmdb	r3, {r5, r6}
  4217da:	4698      	mov	r8, r3
  4217dc:	3308      	adds	r3, #8
  4217de:	2e00      	cmp	r6, #0
  4217e0:	d0f9      	beq.n	4217d6 <__sfvwrite_r+0x176>
  4217e2:	4632      	mov	r2, r6
  4217e4:	210a      	movs	r1, #10
  4217e6:	4628      	mov	r0, r5
  4217e8:	f000 f982 	bl	421af0 <memchr>
  4217ec:	2800      	cmp	r0, #0
  4217ee:	f000 80a1 	beq.w	421934 <__sfvwrite_r+0x2d4>
  4217f2:	3001      	adds	r0, #1
  4217f4:	eba0 0905 	sub.w	r9, r0, r5
  4217f8:	e7c2      	b.n	421780 <__sfvwrite_r+0x120>
  4217fa:	6820      	ldr	r0, [r4, #0]
  4217fc:	6923      	ldr	r3, [r4, #16]
  4217fe:	4298      	cmp	r0, r3
  421800:	d802      	bhi.n	421808 <__sfvwrite_r+0x1a8>
  421802:	6963      	ldr	r3, [r4, #20]
  421804:	429f      	cmp	r7, r3
  421806:	d25d      	bcs.n	4218c4 <__sfvwrite_r+0x264>
  421808:	45b8      	cmp	r8, r7
  42180a:	bf28      	it	cs
  42180c:	46b8      	movcs	r8, r7
  42180e:	4642      	mov	r2, r8
  421810:	4649      	mov	r1, r9
  421812:	f000 f9bd 	bl	421b90 <memmove>
  421816:	68a3      	ldr	r3, [r4, #8]
  421818:	6822      	ldr	r2, [r4, #0]
  42181a:	eba3 0308 	sub.w	r3, r3, r8
  42181e:	4442      	add	r2, r8
  421820:	60a3      	str	r3, [r4, #8]
  421822:	6022      	str	r2, [r4, #0]
  421824:	b10b      	cbz	r3, 42182a <__sfvwrite_r+0x1ca>
  421826:	46c2      	mov	sl, r8
  421828:	e779      	b.n	42171e <__sfvwrite_r+0xbe>
  42182a:	4621      	mov	r1, r4
  42182c:	9800      	ldr	r0, [sp, #0]
  42182e:	f7ff fcb3 	bl	421198 <_fflush_r>
  421832:	2800      	cmp	r0, #0
  421834:	d192      	bne.n	42175c <__sfvwrite_r+0xfc>
  421836:	46c2      	mov	sl, r8
  421838:	e771      	b.n	42171e <__sfvwrite_r+0xbe>
  42183a:	465a      	mov	r2, fp
  42183c:	4629      	mov	r1, r5
  42183e:	f000 f9a7 	bl	421b90 <memmove>
  421842:	68a2      	ldr	r2, [r4, #8]
  421844:	6823      	ldr	r3, [r4, #0]
  421846:	eba2 020b 	sub.w	r2, r2, fp
  42184a:	445b      	add	r3, fp
  42184c:	60a2      	str	r2, [r4, #8]
  42184e:	6023      	str	r3, [r4, #0]
  421850:	e7af      	b.n	4217b2 <__sfvwrite_r+0x152>
  421852:	6820      	ldr	r0, [r4, #0]
  421854:	46b8      	mov	r8, r7
  421856:	46ba      	mov	sl, r7
  421858:	46bb      	mov	fp, r7
  42185a:	e755      	b.n	421708 <__sfvwrite_r+0xa8>
  42185c:	6962      	ldr	r2, [r4, #20]
  42185e:	6820      	ldr	r0, [r4, #0]
  421860:	6921      	ldr	r1, [r4, #16]
  421862:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  421866:	eba0 0a01 	sub.w	sl, r0, r1
  42186a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  42186e:	f10a 0001 	add.w	r0, sl, #1
  421872:	ea4f 0868 	mov.w	r8, r8, asr #1
  421876:	4438      	add	r0, r7
  421878:	4540      	cmp	r0, r8
  42187a:	4642      	mov	r2, r8
  42187c:	bf84      	itt	hi
  42187e:	4680      	movhi	r8, r0
  421880:	4642      	movhi	r2, r8
  421882:	055b      	lsls	r3, r3, #21
  421884:	d544      	bpl.n	421910 <__sfvwrite_r+0x2b0>
  421886:	4611      	mov	r1, r2
  421888:	9800      	ldr	r0, [sp, #0]
  42188a:	f7fd fd8f 	bl	41f3ac <_malloc_r>
  42188e:	4683      	mov	fp, r0
  421890:	2800      	cmp	r0, #0
  421892:	d055      	beq.n	421940 <__sfvwrite_r+0x2e0>
  421894:	4652      	mov	r2, sl
  421896:	6921      	ldr	r1, [r4, #16]
  421898:	f7fe f868 	bl	41f96c <memcpy>
  42189c:	89a3      	ldrh	r3, [r4, #12]
  42189e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4218a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4218a6:	81a3      	strh	r3, [r4, #12]
  4218a8:	eb0b 000a 	add.w	r0, fp, sl
  4218ac:	eba8 030a 	sub.w	r3, r8, sl
  4218b0:	f8c4 b010 	str.w	fp, [r4, #16]
  4218b4:	f8c4 8014 	str.w	r8, [r4, #20]
  4218b8:	6020      	str	r0, [r4, #0]
  4218ba:	60a3      	str	r3, [r4, #8]
  4218bc:	46b8      	mov	r8, r7
  4218be:	46ba      	mov	sl, r7
  4218c0:	46bb      	mov	fp, r7
  4218c2:	e721      	b.n	421708 <__sfvwrite_r+0xa8>
  4218c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4218c8:	42b9      	cmp	r1, r7
  4218ca:	bf28      	it	cs
  4218cc:	4639      	movcs	r1, r7
  4218ce:	464a      	mov	r2, r9
  4218d0:	fb91 f1f3 	sdiv	r1, r1, r3
  4218d4:	9800      	ldr	r0, [sp, #0]
  4218d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4218d8:	fb03 f301 	mul.w	r3, r3, r1
  4218dc:	69e1      	ldr	r1, [r4, #28]
  4218de:	47b0      	blx	r6
  4218e0:	f1b0 0a00 	subs.w	sl, r0, #0
  4218e4:	f73f af1b 	bgt.w	42171e <__sfvwrite_r+0xbe>
  4218e8:	e738      	b.n	42175c <__sfvwrite_r+0xfc>
  4218ea:	461a      	mov	r2, r3
  4218ec:	4629      	mov	r1, r5
  4218ee:	9301      	str	r3, [sp, #4]
  4218f0:	f000 f94e 	bl	421b90 <memmove>
  4218f4:	6822      	ldr	r2, [r4, #0]
  4218f6:	9b01      	ldr	r3, [sp, #4]
  4218f8:	9800      	ldr	r0, [sp, #0]
  4218fa:	441a      	add	r2, r3
  4218fc:	6022      	str	r2, [r4, #0]
  4218fe:	4621      	mov	r1, r4
  421900:	f7ff fc4a 	bl	421198 <_fflush_r>
  421904:	9b01      	ldr	r3, [sp, #4]
  421906:	2800      	cmp	r0, #0
  421908:	f47f af28 	bne.w	42175c <__sfvwrite_r+0xfc>
  42190c:	461f      	mov	r7, r3
  42190e:	e750      	b.n	4217b2 <__sfvwrite_r+0x152>
  421910:	9800      	ldr	r0, [sp, #0]
  421912:	f000 f9a1 	bl	421c58 <_realloc_r>
  421916:	4683      	mov	fp, r0
  421918:	2800      	cmp	r0, #0
  42191a:	d1c5      	bne.n	4218a8 <__sfvwrite_r+0x248>
  42191c:	9d00      	ldr	r5, [sp, #0]
  42191e:	6921      	ldr	r1, [r4, #16]
  421920:	4628      	mov	r0, r5
  421922:	f7ff fdb7 	bl	421494 <_free_r>
  421926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42192a:	220c      	movs	r2, #12
  42192c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  421930:	602a      	str	r2, [r5, #0]
  421932:	e715      	b.n	421760 <__sfvwrite_r+0x100>
  421934:	f106 0901 	add.w	r9, r6, #1
  421938:	e722      	b.n	421780 <__sfvwrite_r+0x120>
  42193a:	f04f 30ff 	mov.w	r0, #4294967295
  42193e:	e6bf      	b.n	4216c0 <__sfvwrite_r+0x60>
  421940:	9a00      	ldr	r2, [sp, #0]
  421942:	230c      	movs	r3, #12
  421944:	6013      	str	r3, [r2, #0]
  421946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42194a:	e709      	b.n	421760 <__sfvwrite_r+0x100>
  42194c:	7ffffc00 	.word	0x7ffffc00

00421950 <_fwalk_reent>:
  421950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  421954:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  421958:	d01f      	beq.n	42199a <_fwalk_reent+0x4a>
  42195a:	4688      	mov	r8, r1
  42195c:	4606      	mov	r6, r0
  42195e:	f04f 0900 	mov.w	r9, #0
  421962:	687d      	ldr	r5, [r7, #4]
  421964:	68bc      	ldr	r4, [r7, #8]
  421966:	3d01      	subs	r5, #1
  421968:	d411      	bmi.n	42198e <_fwalk_reent+0x3e>
  42196a:	89a3      	ldrh	r3, [r4, #12]
  42196c:	2b01      	cmp	r3, #1
  42196e:	f105 35ff 	add.w	r5, r5, #4294967295
  421972:	d908      	bls.n	421986 <_fwalk_reent+0x36>
  421974:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  421978:	3301      	adds	r3, #1
  42197a:	4621      	mov	r1, r4
  42197c:	4630      	mov	r0, r6
  42197e:	d002      	beq.n	421986 <_fwalk_reent+0x36>
  421980:	47c0      	blx	r8
  421982:	ea49 0900 	orr.w	r9, r9, r0
  421986:	1c6b      	adds	r3, r5, #1
  421988:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42198c:	d1ed      	bne.n	42196a <_fwalk_reent+0x1a>
  42198e:	683f      	ldr	r7, [r7, #0]
  421990:	2f00      	cmp	r7, #0
  421992:	d1e6      	bne.n	421962 <_fwalk_reent+0x12>
  421994:	4648      	mov	r0, r9
  421996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42199a:	46b9      	mov	r9, r7
  42199c:	4648      	mov	r0, r9
  42199e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4219a2:	bf00      	nop

004219a4 <__locale_mb_cur_max>:
  4219a4:	4b04      	ldr	r3, [pc, #16]	; (4219b8 <__locale_mb_cur_max+0x14>)
  4219a6:	4a05      	ldr	r2, [pc, #20]	; (4219bc <__locale_mb_cur_max+0x18>)
  4219a8:	681b      	ldr	r3, [r3, #0]
  4219aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4219ac:	2b00      	cmp	r3, #0
  4219ae:	bf08      	it	eq
  4219b0:	4613      	moveq	r3, r2
  4219b2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4219b6:	4770      	bx	lr
  4219b8:	20400060 	.word	0x20400060
  4219bc:	204008a4 	.word	0x204008a4

004219c0 <__retarget_lock_init_recursive>:
  4219c0:	4770      	bx	lr
  4219c2:	bf00      	nop

004219c4 <__retarget_lock_close_recursive>:
  4219c4:	4770      	bx	lr
  4219c6:	bf00      	nop

004219c8 <__retarget_lock_acquire_recursive>:
  4219c8:	4770      	bx	lr
  4219ca:	bf00      	nop

004219cc <__retarget_lock_release_recursive>:
  4219cc:	4770      	bx	lr
  4219ce:	bf00      	nop

004219d0 <__swhatbuf_r>:
  4219d0:	b570      	push	{r4, r5, r6, lr}
  4219d2:	460c      	mov	r4, r1
  4219d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4219d8:	2900      	cmp	r1, #0
  4219da:	b090      	sub	sp, #64	; 0x40
  4219dc:	4615      	mov	r5, r2
  4219de:	461e      	mov	r6, r3
  4219e0:	db14      	blt.n	421a0c <__swhatbuf_r+0x3c>
  4219e2:	aa01      	add	r2, sp, #4
  4219e4:	f000 fc9e 	bl	422324 <_fstat_r>
  4219e8:	2800      	cmp	r0, #0
  4219ea:	db0f      	blt.n	421a0c <__swhatbuf_r+0x3c>
  4219ec:	9a02      	ldr	r2, [sp, #8]
  4219ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4219f2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4219f6:	fab2 f282 	clz	r2, r2
  4219fa:	0952      	lsrs	r2, r2, #5
  4219fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  421a00:	f44f 6000 	mov.w	r0, #2048	; 0x800
  421a04:	6032      	str	r2, [r6, #0]
  421a06:	602b      	str	r3, [r5, #0]
  421a08:	b010      	add	sp, #64	; 0x40
  421a0a:	bd70      	pop	{r4, r5, r6, pc}
  421a0c:	89a2      	ldrh	r2, [r4, #12]
  421a0e:	2300      	movs	r3, #0
  421a10:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  421a14:	6033      	str	r3, [r6, #0]
  421a16:	d004      	beq.n	421a22 <__swhatbuf_r+0x52>
  421a18:	2240      	movs	r2, #64	; 0x40
  421a1a:	4618      	mov	r0, r3
  421a1c:	602a      	str	r2, [r5, #0]
  421a1e:	b010      	add	sp, #64	; 0x40
  421a20:	bd70      	pop	{r4, r5, r6, pc}
  421a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
  421a26:	602b      	str	r3, [r5, #0]
  421a28:	b010      	add	sp, #64	; 0x40
  421a2a:	bd70      	pop	{r4, r5, r6, pc}

00421a2c <__smakebuf_r>:
  421a2c:	898a      	ldrh	r2, [r1, #12]
  421a2e:	0792      	lsls	r2, r2, #30
  421a30:	460b      	mov	r3, r1
  421a32:	d506      	bpl.n	421a42 <__smakebuf_r+0x16>
  421a34:	f101 0243 	add.w	r2, r1, #67	; 0x43
  421a38:	2101      	movs	r1, #1
  421a3a:	601a      	str	r2, [r3, #0]
  421a3c:	611a      	str	r2, [r3, #16]
  421a3e:	6159      	str	r1, [r3, #20]
  421a40:	4770      	bx	lr
  421a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  421a44:	b083      	sub	sp, #12
  421a46:	ab01      	add	r3, sp, #4
  421a48:	466a      	mov	r2, sp
  421a4a:	460c      	mov	r4, r1
  421a4c:	4606      	mov	r6, r0
  421a4e:	f7ff ffbf 	bl	4219d0 <__swhatbuf_r>
  421a52:	9900      	ldr	r1, [sp, #0]
  421a54:	4605      	mov	r5, r0
  421a56:	4630      	mov	r0, r6
  421a58:	f7fd fca8 	bl	41f3ac <_malloc_r>
  421a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  421a60:	b1d8      	cbz	r0, 421a9a <__smakebuf_r+0x6e>
  421a62:	9a01      	ldr	r2, [sp, #4]
  421a64:	4f15      	ldr	r7, [pc, #84]	; (421abc <__smakebuf_r+0x90>)
  421a66:	9900      	ldr	r1, [sp, #0]
  421a68:	63f7      	str	r7, [r6, #60]	; 0x3c
  421a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  421a6e:	81a3      	strh	r3, [r4, #12]
  421a70:	6020      	str	r0, [r4, #0]
  421a72:	6120      	str	r0, [r4, #16]
  421a74:	6161      	str	r1, [r4, #20]
  421a76:	b91a      	cbnz	r2, 421a80 <__smakebuf_r+0x54>
  421a78:	432b      	orrs	r3, r5
  421a7a:	81a3      	strh	r3, [r4, #12]
  421a7c:	b003      	add	sp, #12
  421a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  421a80:	4630      	mov	r0, r6
  421a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  421a86:	f000 fc61 	bl	42234c <_isatty_r>
  421a8a:	b1a0      	cbz	r0, 421ab6 <__smakebuf_r+0x8a>
  421a8c:	89a3      	ldrh	r3, [r4, #12]
  421a8e:	f023 0303 	bic.w	r3, r3, #3
  421a92:	f043 0301 	orr.w	r3, r3, #1
  421a96:	b21b      	sxth	r3, r3
  421a98:	e7ee      	b.n	421a78 <__smakebuf_r+0x4c>
  421a9a:	059a      	lsls	r2, r3, #22
  421a9c:	d4ee      	bmi.n	421a7c <__smakebuf_r+0x50>
  421a9e:	f023 0303 	bic.w	r3, r3, #3
  421aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  421aa6:	f043 0302 	orr.w	r3, r3, #2
  421aaa:	2101      	movs	r1, #1
  421aac:	81a3      	strh	r3, [r4, #12]
  421aae:	6022      	str	r2, [r4, #0]
  421ab0:	6122      	str	r2, [r4, #16]
  421ab2:	6161      	str	r1, [r4, #20]
  421ab4:	e7e2      	b.n	421a7c <__smakebuf_r+0x50>
  421ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  421aba:	e7dd      	b.n	421a78 <__smakebuf_r+0x4c>
  421abc:	004211ed 	.word	0x004211ed

00421ac0 <__ascii_mbtowc>:
  421ac0:	b082      	sub	sp, #8
  421ac2:	b149      	cbz	r1, 421ad8 <__ascii_mbtowc+0x18>
  421ac4:	b15a      	cbz	r2, 421ade <__ascii_mbtowc+0x1e>
  421ac6:	b16b      	cbz	r3, 421ae4 <__ascii_mbtowc+0x24>
  421ac8:	7813      	ldrb	r3, [r2, #0]
  421aca:	600b      	str	r3, [r1, #0]
  421acc:	7812      	ldrb	r2, [r2, #0]
  421ace:	1c10      	adds	r0, r2, #0
  421ad0:	bf18      	it	ne
  421ad2:	2001      	movne	r0, #1
  421ad4:	b002      	add	sp, #8
  421ad6:	4770      	bx	lr
  421ad8:	a901      	add	r1, sp, #4
  421ada:	2a00      	cmp	r2, #0
  421adc:	d1f3      	bne.n	421ac6 <__ascii_mbtowc+0x6>
  421ade:	4610      	mov	r0, r2
  421ae0:	b002      	add	sp, #8
  421ae2:	4770      	bx	lr
  421ae4:	f06f 0001 	mvn.w	r0, #1
  421ae8:	e7f4      	b.n	421ad4 <__ascii_mbtowc+0x14>
  421aea:	bf00      	nop
  421aec:	0000      	movs	r0, r0
	...

00421af0 <memchr>:
  421af0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  421af4:	2a10      	cmp	r2, #16
  421af6:	db2b      	blt.n	421b50 <memchr+0x60>
  421af8:	f010 0f07 	tst.w	r0, #7
  421afc:	d008      	beq.n	421b10 <memchr+0x20>
  421afe:	f810 3b01 	ldrb.w	r3, [r0], #1
  421b02:	3a01      	subs	r2, #1
  421b04:	428b      	cmp	r3, r1
  421b06:	d02d      	beq.n	421b64 <memchr+0x74>
  421b08:	f010 0f07 	tst.w	r0, #7
  421b0c:	b342      	cbz	r2, 421b60 <memchr+0x70>
  421b0e:	d1f6      	bne.n	421afe <memchr+0xe>
  421b10:	b4f0      	push	{r4, r5, r6, r7}
  421b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  421b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  421b1a:	f022 0407 	bic.w	r4, r2, #7
  421b1e:	f07f 0700 	mvns.w	r7, #0
  421b22:	2300      	movs	r3, #0
  421b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  421b28:	3c08      	subs	r4, #8
  421b2a:	ea85 0501 	eor.w	r5, r5, r1
  421b2e:	ea86 0601 	eor.w	r6, r6, r1
  421b32:	fa85 f547 	uadd8	r5, r5, r7
  421b36:	faa3 f587 	sel	r5, r3, r7
  421b3a:	fa86 f647 	uadd8	r6, r6, r7
  421b3e:	faa5 f687 	sel	r6, r5, r7
  421b42:	b98e      	cbnz	r6, 421b68 <memchr+0x78>
  421b44:	d1ee      	bne.n	421b24 <memchr+0x34>
  421b46:	bcf0      	pop	{r4, r5, r6, r7}
  421b48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  421b4c:	f002 0207 	and.w	r2, r2, #7
  421b50:	b132      	cbz	r2, 421b60 <memchr+0x70>
  421b52:	f810 3b01 	ldrb.w	r3, [r0], #1
  421b56:	3a01      	subs	r2, #1
  421b58:	ea83 0301 	eor.w	r3, r3, r1
  421b5c:	b113      	cbz	r3, 421b64 <memchr+0x74>
  421b5e:	d1f8      	bne.n	421b52 <memchr+0x62>
  421b60:	2000      	movs	r0, #0
  421b62:	4770      	bx	lr
  421b64:	3801      	subs	r0, #1
  421b66:	4770      	bx	lr
  421b68:	2d00      	cmp	r5, #0
  421b6a:	bf06      	itte	eq
  421b6c:	4635      	moveq	r5, r6
  421b6e:	3803      	subeq	r0, #3
  421b70:	3807      	subne	r0, #7
  421b72:	f015 0f01 	tst.w	r5, #1
  421b76:	d107      	bne.n	421b88 <memchr+0x98>
  421b78:	3001      	adds	r0, #1
  421b7a:	f415 7f80 	tst.w	r5, #256	; 0x100
  421b7e:	bf02      	ittt	eq
  421b80:	3001      	addeq	r0, #1
  421b82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  421b86:	3001      	addeq	r0, #1
  421b88:	bcf0      	pop	{r4, r5, r6, r7}
  421b8a:	3801      	subs	r0, #1
  421b8c:	4770      	bx	lr
  421b8e:	bf00      	nop

00421b90 <memmove>:
  421b90:	4288      	cmp	r0, r1
  421b92:	b5f0      	push	{r4, r5, r6, r7, lr}
  421b94:	d90d      	bls.n	421bb2 <memmove+0x22>
  421b96:	188b      	adds	r3, r1, r2
  421b98:	4298      	cmp	r0, r3
  421b9a:	d20a      	bcs.n	421bb2 <memmove+0x22>
  421b9c:	1884      	adds	r4, r0, r2
  421b9e:	2a00      	cmp	r2, #0
  421ba0:	d051      	beq.n	421c46 <memmove+0xb6>
  421ba2:	4622      	mov	r2, r4
  421ba4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  421ba8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  421bac:	4299      	cmp	r1, r3
  421bae:	d1f9      	bne.n	421ba4 <memmove+0x14>
  421bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  421bb2:	2a0f      	cmp	r2, #15
  421bb4:	d948      	bls.n	421c48 <memmove+0xb8>
  421bb6:	ea41 0300 	orr.w	r3, r1, r0
  421bba:	079b      	lsls	r3, r3, #30
  421bbc:	d146      	bne.n	421c4c <memmove+0xbc>
  421bbe:	f100 0410 	add.w	r4, r0, #16
  421bc2:	f101 0310 	add.w	r3, r1, #16
  421bc6:	4615      	mov	r5, r2
  421bc8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  421bcc:	f844 6c10 	str.w	r6, [r4, #-16]
  421bd0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  421bd4:	f844 6c0c 	str.w	r6, [r4, #-12]
  421bd8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  421bdc:	f844 6c08 	str.w	r6, [r4, #-8]
  421be0:	3d10      	subs	r5, #16
  421be2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  421be6:	f844 6c04 	str.w	r6, [r4, #-4]
  421bea:	2d0f      	cmp	r5, #15
  421bec:	f103 0310 	add.w	r3, r3, #16
  421bf0:	f104 0410 	add.w	r4, r4, #16
  421bf4:	d8e8      	bhi.n	421bc8 <memmove+0x38>
  421bf6:	f1a2 0310 	sub.w	r3, r2, #16
  421bfa:	f023 030f 	bic.w	r3, r3, #15
  421bfe:	f002 0e0f 	and.w	lr, r2, #15
  421c02:	3310      	adds	r3, #16
  421c04:	f1be 0f03 	cmp.w	lr, #3
  421c08:	4419      	add	r1, r3
  421c0a:	4403      	add	r3, r0
  421c0c:	d921      	bls.n	421c52 <memmove+0xc2>
  421c0e:	1f1e      	subs	r6, r3, #4
  421c10:	460d      	mov	r5, r1
  421c12:	4674      	mov	r4, lr
  421c14:	3c04      	subs	r4, #4
  421c16:	f855 7b04 	ldr.w	r7, [r5], #4
  421c1a:	f846 7f04 	str.w	r7, [r6, #4]!
  421c1e:	2c03      	cmp	r4, #3
  421c20:	d8f8      	bhi.n	421c14 <memmove+0x84>
  421c22:	f1ae 0404 	sub.w	r4, lr, #4
  421c26:	f024 0403 	bic.w	r4, r4, #3
  421c2a:	3404      	adds	r4, #4
  421c2c:	4421      	add	r1, r4
  421c2e:	4423      	add	r3, r4
  421c30:	f002 0203 	and.w	r2, r2, #3
  421c34:	b162      	cbz	r2, 421c50 <memmove+0xc0>
  421c36:	3b01      	subs	r3, #1
  421c38:	440a      	add	r2, r1
  421c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
  421c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
  421c42:	428a      	cmp	r2, r1
  421c44:	d1f9      	bne.n	421c3a <memmove+0xaa>
  421c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
  421c48:	4603      	mov	r3, r0
  421c4a:	e7f3      	b.n	421c34 <memmove+0xa4>
  421c4c:	4603      	mov	r3, r0
  421c4e:	e7f2      	b.n	421c36 <memmove+0xa6>
  421c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  421c52:	4672      	mov	r2, lr
  421c54:	e7ee      	b.n	421c34 <memmove+0xa4>
  421c56:	bf00      	nop

00421c58 <_realloc_r>:
  421c58:	2900      	cmp	r1, #0
  421c5a:	f000 8095 	beq.w	421d88 <_realloc_r+0x130>
  421c5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421c62:	460d      	mov	r5, r1
  421c64:	4616      	mov	r6, r2
  421c66:	b083      	sub	sp, #12
  421c68:	4680      	mov	r8, r0
  421c6a:	f106 070b 	add.w	r7, r6, #11
  421c6e:	f7fd ff65 	bl	41fb3c <__malloc_lock>
  421c72:	f855 ec04 	ldr.w	lr, [r5, #-4]
  421c76:	2f16      	cmp	r7, #22
  421c78:	f02e 0403 	bic.w	r4, lr, #3
  421c7c:	f1a5 0908 	sub.w	r9, r5, #8
  421c80:	d83c      	bhi.n	421cfc <_realloc_r+0xa4>
  421c82:	2210      	movs	r2, #16
  421c84:	4617      	mov	r7, r2
  421c86:	42be      	cmp	r6, r7
  421c88:	d83d      	bhi.n	421d06 <_realloc_r+0xae>
  421c8a:	4294      	cmp	r4, r2
  421c8c:	da43      	bge.n	421d16 <_realloc_r+0xbe>
  421c8e:	4bc4      	ldr	r3, [pc, #784]	; (421fa0 <_realloc_r+0x348>)
  421c90:	6899      	ldr	r1, [r3, #8]
  421c92:	eb09 0004 	add.w	r0, r9, r4
  421c96:	4288      	cmp	r0, r1
  421c98:	f000 80b4 	beq.w	421e04 <_realloc_r+0x1ac>
  421c9c:	6843      	ldr	r3, [r0, #4]
  421c9e:	f023 0101 	bic.w	r1, r3, #1
  421ca2:	4401      	add	r1, r0
  421ca4:	6849      	ldr	r1, [r1, #4]
  421ca6:	07c9      	lsls	r1, r1, #31
  421ca8:	d54c      	bpl.n	421d44 <_realloc_r+0xec>
  421caa:	f01e 0f01 	tst.w	lr, #1
  421cae:	f000 809b 	beq.w	421de8 <_realloc_r+0x190>
  421cb2:	4631      	mov	r1, r6
  421cb4:	4640      	mov	r0, r8
  421cb6:	f7fd fb79 	bl	41f3ac <_malloc_r>
  421cba:	4606      	mov	r6, r0
  421cbc:	2800      	cmp	r0, #0
  421cbe:	d03a      	beq.n	421d36 <_realloc_r+0xde>
  421cc0:	f855 3c04 	ldr.w	r3, [r5, #-4]
  421cc4:	f023 0301 	bic.w	r3, r3, #1
  421cc8:	444b      	add	r3, r9
  421cca:	f1a0 0208 	sub.w	r2, r0, #8
  421cce:	429a      	cmp	r2, r3
  421cd0:	f000 8121 	beq.w	421f16 <_realloc_r+0x2be>
  421cd4:	1f22      	subs	r2, r4, #4
  421cd6:	2a24      	cmp	r2, #36	; 0x24
  421cd8:	f200 8107 	bhi.w	421eea <_realloc_r+0x292>
  421cdc:	2a13      	cmp	r2, #19
  421cde:	f200 80db 	bhi.w	421e98 <_realloc_r+0x240>
  421ce2:	4603      	mov	r3, r0
  421ce4:	462a      	mov	r2, r5
  421ce6:	6811      	ldr	r1, [r2, #0]
  421ce8:	6019      	str	r1, [r3, #0]
  421cea:	6851      	ldr	r1, [r2, #4]
  421cec:	6059      	str	r1, [r3, #4]
  421cee:	6892      	ldr	r2, [r2, #8]
  421cf0:	609a      	str	r2, [r3, #8]
  421cf2:	4629      	mov	r1, r5
  421cf4:	4640      	mov	r0, r8
  421cf6:	f7ff fbcd 	bl	421494 <_free_r>
  421cfa:	e01c      	b.n	421d36 <_realloc_r+0xde>
  421cfc:	f027 0707 	bic.w	r7, r7, #7
  421d00:	2f00      	cmp	r7, #0
  421d02:	463a      	mov	r2, r7
  421d04:	dabf      	bge.n	421c86 <_realloc_r+0x2e>
  421d06:	2600      	movs	r6, #0
  421d08:	230c      	movs	r3, #12
  421d0a:	4630      	mov	r0, r6
  421d0c:	f8c8 3000 	str.w	r3, [r8]
  421d10:	b003      	add	sp, #12
  421d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421d16:	462e      	mov	r6, r5
  421d18:	1be3      	subs	r3, r4, r7
  421d1a:	2b0f      	cmp	r3, #15
  421d1c:	d81e      	bhi.n	421d5c <_realloc_r+0x104>
  421d1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  421d22:	f003 0301 	and.w	r3, r3, #1
  421d26:	4323      	orrs	r3, r4
  421d28:	444c      	add	r4, r9
  421d2a:	f8c9 3004 	str.w	r3, [r9, #4]
  421d2e:	6863      	ldr	r3, [r4, #4]
  421d30:	f043 0301 	orr.w	r3, r3, #1
  421d34:	6063      	str	r3, [r4, #4]
  421d36:	4640      	mov	r0, r8
  421d38:	f7fd ff06 	bl	41fb48 <__malloc_unlock>
  421d3c:	4630      	mov	r0, r6
  421d3e:	b003      	add	sp, #12
  421d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421d44:	f023 0303 	bic.w	r3, r3, #3
  421d48:	18e1      	adds	r1, r4, r3
  421d4a:	4291      	cmp	r1, r2
  421d4c:	db1f      	blt.n	421d8e <_realloc_r+0x136>
  421d4e:	68c3      	ldr	r3, [r0, #12]
  421d50:	6882      	ldr	r2, [r0, #8]
  421d52:	462e      	mov	r6, r5
  421d54:	60d3      	str	r3, [r2, #12]
  421d56:	460c      	mov	r4, r1
  421d58:	609a      	str	r2, [r3, #8]
  421d5a:	e7dd      	b.n	421d18 <_realloc_r+0xc0>
  421d5c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  421d60:	eb09 0107 	add.w	r1, r9, r7
  421d64:	f002 0201 	and.w	r2, r2, #1
  421d68:	444c      	add	r4, r9
  421d6a:	f043 0301 	orr.w	r3, r3, #1
  421d6e:	4317      	orrs	r7, r2
  421d70:	f8c9 7004 	str.w	r7, [r9, #4]
  421d74:	604b      	str	r3, [r1, #4]
  421d76:	6863      	ldr	r3, [r4, #4]
  421d78:	f043 0301 	orr.w	r3, r3, #1
  421d7c:	3108      	adds	r1, #8
  421d7e:	6063      	str	r3, [r4, #4]
  421d80:	4640      	mov	r0, r8
  421d82:	f7ff fb87 	bl	421494 <_free_r>
  421d86:	e7d6      	b.n	421d36 <_realloc_r+0xde>
  421d88:	4611      	mov	r1, r2
  421d8a:	f7fd bb0f 	b.w	41f3ac <_malloc_r>
  421d8e:	f01e 0f01 	tst.w	lr, #1
  421d92:	d18e      	bne.n	421cb2 <_realloc_r+0x5a>
  421d94:	f855 1c08 	ldr.w	r1, [r5, #-8]
  421d98:	eba9 0a01 	sub.w	sl, r9, r1
  421d9c:	f8da 1004 	ldr.w	r1, [sl, #4]
  421da0:	f021 0103 	bic.w	r1, r1, #3
  421da4:	440b      	add	r3, r1
  421da6:	4423      	add	r3, r4
  421da8:	4293      	cmp	r3, r2
  421daa:	db25      	blt.n	421df8 <_realloc_r+0x1a0>
  421dac:	68c2      	ldr	r2, [r0, #12]
  421dae:	6881      	ldr	r1, [r0, #8]
  421db0:	4656      	mov	r6, sl
  421db2:	60ca      	str	r2, [r1, #12]
  421db4:	6091      	str	r1, [r2, #8]
  421db6:	f8da 100c 	ldr.w	r1, [sl, #12]
  421dba:	f856 0f08 	ldr.w	r0, [r6, #8]!
  421dbe:	1f22      	subs	r2, r4, #4
  421dc0:	2a24      	cmp	r2, #36	; 0x24
  421dc2:	60c1      	str	r1, [r0, #12]
  421dc4:	6088      	str	r0, [r1, #8]
  421dc6:	f200 8094 	bhi.w	421ef2 <_realloc_r+0x29a>
  421dca:	2a13      	cmp	r2, #19
  421dcc:	d96f      	bls.n	421eae <_realloc_r+0x256>
  421dce:	6829      	ldr	r1, [r5, #0]
  421dd0:	f8ca 1008 	str.w	r1, [sl, #8]
  421dd4:	6869      	ldr	r1, [r5, #4]
  421dd6:	f8ca 100c 	str.w	r1, [sl, #12]
  421dda:	2a1b      	cmp	r2, #27
  421ddc:	f200 80a2 	bhi.w	421f24 <_realloc_r+0x2cc>
  421de0:	3508      	adds	r5, #8
  421de2:	f10a 0210 	add.w	r2, sl, #16
  421de6:	e063      	b.n	421eb0 <_realloc_r+0x258>
  421de8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  421dec:	eba9 0a03 	sub.w	sl, r9, r3
  421df0:	f8da 1004 	ldr.w	r1, [sl, #4]
  421df4:	f021 0103 	bic.w	r1, r1, #3
  421df8:	1863      	adds	r3, r4, r1
  421dfa:	4293      	cmp	r3, r2
  421dfc:	f6ff af59 	blt.w	421cb2 <_realloc_r+0x5a>
  421e00:	4656      	mov	r6, sl
  421e02:	e7d8      	b.n	421db6 <_realloc_r+0x15e>
  421e04:	6841      	ldr	r1, [r0, #4]
  421e06:	f021 0b03 	bic.w	fp, r1, #3
  421e0a:	44a3      	add	fp, r4
  421e0c:	f107 0010 	add.w	r0, r7, #16
  421e10:	4583      	cmp	fp, r0
  421e12:	da56      	bge.n	421ec2 <_realloc_r+0x26a>
  421e14:	f01e 0f01 	tst.w	lr, #1
  421e18:	f47f af4b 	bne.w	421cb2 <_realloc_r+0x5a>
  421e1c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  421e20:	eba9 0a01 	sub.w	sl, r9, r1
  421e24:	f8da 1004 	ldr.w	r1, [sl, #4]
  421e28:	f021 0103 	bic.w	r1, r1, #3
  421e2c:	448b      	add	fp, r1
  421e2e:	4558      	cmp	r0, fp
  421e30:	dce2      	bgt.n	421df8 <_realloc_r+0x1a0>
  421e32:	4656      	mov	r6, sl
  421e34:	f8da 100c 	ldr.w	r1, [sl, #12]
  421e38:	f856 0f08 	ldr.w	r0, [r6, #8]!
  421e3c:	1f22      	subs	r2, r4, #4
  421e3e:	2a24      	cmp	r2, #36	; 0x24
  421e40:	60c1      	str	r1, [r0, #12]
  421e42:	6088      	str	r0, [r1, #8]
  421e44:	f200 808f 	bhi.w	421f66 <_realloc_r+0x30e>
  421e48:	2a13      	cmp	r2, #19
  421e4a:	f240 808a 	bls.w	421f62 <_realloc_r+0x30a>
  421e4e:	6829      	ldr	r1, [r5, #0]
  421e50:	f8ca 1008 	str.w	r1, [sl, #8]
  421e54:	6869      	ldr	r1, [r5, #4]
  421e56:	f8ca 100c 	str.w	r1, [sl, #12]
  421e5a:	2a1b      	cmp	r2, #27
  421e5c:	f200 808a 	bhi.w	421f74 <_realloc_r+0x31c>
  421e60:	3508      	adds	r5, #8
  421e62:	f10a 0210 	add.w	r2, sl, #16
  421e66:	6829      	ldr	r1, [r5, #0]
  421e68:	6011      	str	r1, [r2, #0]
  421e6a:	6869      	ldr	r1, [r5, #4]
  421e6c:	6051      	str	r1, [r2, #4]
  421e6e:	68a9      	ldr	r1, [r5, #8]
  421e70:	6091      	str	r1, [r2, #8]
  421e72:	eb0a 0107 	add.w	r1, sl, r7
  421e76:	ebab 0207 	sub.w	r2, fp, r7
  421e7a:	f042 0201 	orr.w	r2, r2, #1
  421e7e:	6099      	str	r1, [r3, #8]
  421e80:	604a      	str	r2, [r1, #4]
  421e82:	f8da 3004 	ldr.w	r3, [sl, #4]
  421e86:	f003 0301 	and.w	r3, r3, #1
  421e8a:	431f      	orrs	r7, r3
  421e8c:	4640      	mov	r0, r8
  421e8e:	f8ca 7004 	str.w	r7, [sl, #4]
  421e92:	f7fd fe59 	bl	41fb48 <__malloc_unlock>
  421e96:	e751      	b.n	421d3c <_realloc_r+0xe4>
  421e98:	682b      	ldr	r3, [r5, #0]
  421e9a:	6003      	str	r3, [r0, #0]
  421e9c:	686b      	ldr	r3, [r5, #4]
  421e9e:	6043      	str	r3, [r0, #4]
  421ea0:	2a1b      	cmp	r2, #27
  421ea2:	d82d      	bhi.n	421f00 <_realloc_r+0x2a8>
  421ea4:	f100 0308 	add.w	r3, r0, #8
  421ea8:	f105 0208 	add.w	r2, r5, #8
  421eac:	e71b      	b.n	421ce6 <_realloc_r+0x8e>
  421eae:	4632      	mov	r2, r6
  421eb0:	6829      	ldr	r1, [r5, #0]
  421eb2:	6011      	str	r1, [r2, #0]
  421eb4:	6869      	ldr	r1, [r5, #4]
  421eb6:	6051      	str	r1, [r2, #4]
  421eb8:	68a9      	ldr	r1, [r5, #8]
  421eba:	6091      	str	r1, [r2, #8]
  421ebc:	461c      	mov	r4, r3
  421ebe:	46d1      	mov	r9, sl
  421ec0:	e72a      	b.n	421d18 <_realloc_r+0xc0>
  421ec2:	eb09 0107 	add.w	r1, r9, r7
  421ec6:	ebab 0b07 	sub.w	fp, fp, r7
  421eca:	f04b 0201 	orr.w	r2, fp, #1
  421ece:	6099      	str	r1, [r3, #8]
  421ed0:	604a      	str	r2, [r1, #4]
  421ed2:	f855 3c04 	ldr.w	r3, [r5, #-4]
  421ed6:	f003 0301 	and.w	r3, r3, #1
  421eda:	431f      	orrs	r7, r3
  421edc:	4640      	mov	r0, r8
  421ede:	f845 7c04 	str.w	r7, [r5, #-4]
  421ee2:	f7fd fe31 	bl	41fb48 <__malloc_unlock>
  421ee6:	462e      	mov	r6, r5
  421ee8:	e728      	b.n	421d3c <_realloc_r+0xe4>
  421eea:	4629      	mov	r1, r5
  421eec:	f7ff fe50 	bl	421b90 <memmove>
  421ef0:	e6ff      	b.n	421cf2 <_realloc_r+0x9a>
  421ef2:	4629      	mov	r1, r5
  421ef4:	4630      	mov	r0, r6
  421ef6:	461c      	mov	r4, r3
  421ef8:	46d1      	mov	r9, sl
  421efa:	f7ff fe49 	bl	421b90 <memmove>
  421efe:	e70b      	b.n	421d18 <_realloc_r+0xc0>
  421f00:	68ab      	ldr	r3, [r5, #8]
  421f02:	6083      	str	r3, [r0, #8]
  421f04:	68eb      	ldr	r3, [r5, #12]
  421f06:	60c3      	str	r3, [r0, #12]
  421f08:	2a24      	cmp	r2, #36	; 0x24
  421f0a:	d017      	beq.n	421f3c <_realloc_r+0x2e4>
  421f0c:	f100 0310 	add.w	r3, r0, #16
  421f10:	f105 0210 	add.w	r2, r5, #16
  421f14:	e6e7      	b.n	421ce6 <_realloc_r+0x8e>
  421f16:	f850 3c04 	ldr.w	r3, [r0, #-4]
  421f1a:	f023 0303 	bic.w	r3, r3, #3
  421f1e:	441c      	add	r4, r3
  421f20:	462e      	mov	r6, r5
  421f22:	e6f9      	b.n	421d18 <_realloc_r+0xc0>
  421f24:	68a9      	ldr	r1, [r5, #8]
  421f26:	f8ca 1010 	str.w	r1, [sl, #16]
  421f2a:	68e9      	ldr	r1, [r5, #12]
  421f2c:	f8ca 1014 	str.w	r1, [sl, #20]
  421f30:	2a24      	cmp	r2, #36	; 0x24
  421f32:	d00c      	beq.n	421f4e <_realloc_r+0x2f6>
  421f34:	3510      	adds	r5, #16
  421f36:	f10a 0218 	add.w	r2, sl, #24
  421f3a:	e7b9      	b.n	421eb0 <_realloc_r+0x258>
  421f3c:	692b      	ldr	r3, [r5, #16]
  421f3e:	6103      	str	r3, [r0, #16]
  421f40:	696b      	ldr	r3, [r5, #20]
  421f42:	6143      	str	r3, [r0, #20]
  421f44:	f105 0218 	add.w	r2, r5, #24
  421f48:	f100 0318 	add.w	r3, r0, #24
  421f4c:	e6cb      	b.n	421ce6 <_realloc_r+0x8e>
  421f4e:	692a      	ldr	r2, [r5, #16]
  421f50:	f8ca 2018 	str.w	r2, [sl, #24]
  421f54:	696a      	ldr	r2, [r5, #20]
  421f56:	f8ca 201c 	str.w	r2, [sl, #28]
  421f5a:	3518      	adds	r5, #24
  421f5c:	f10a 0220 	add.w	r2, sl, #32
  421f60:	e7a6      	b.n	421eb0 <_realloc_r+0x258>
  421f62:	4632      	mov	r2, r6
  421f64:	e77f      	b.n	421e66 <_realloc_r+0x20e>
  421f66:	4629      	mov	r1, r5
  421f68:	4630      	mov	r0, r6
  421f6a:	9301      	str	r3, [sp, #4]
  421f6c:	f7ff fe10 	bl	421b90 <memmove>
  421f70:	9b01      	ldr	r3, [sp, #4]
  421f72:	e77e      	b.n	421e72 <_realloc_r+0x21a>
  421f74:	68a9      	ldr	r1, [r5, #8]
  421f76:	f8ca 1010 	str.w	r1, [sl, #16]
  421f7a:	68e9      	ldr	r1, [r5, #12]
  421f7c:	f8ca 1014 	str.w	r1, [sl, #20]
  421f80:	2a24      	cmp	r2, #36	; 0x24
  421f82:	d003      	beq.n	421f8c <_realloc_r+0x334>
  421f84:	3510      	adds	r5, #16
  421f86:	f10a 0218 	add.w	r2, sl, #24
  421f8a:	e76c      	b.n	421e66 <_realloc_r+0x20e>
  421f8c:	692a      	ldr	r2, [r5, #16]
  421f8e:	f8ca 2018 	str.w	r2, [sl, #24]
  421f92:	696a      	ldr	r2, [r5, #20]
  421f94:	f8ca 201c 	str.w	r2, [sl, #28]
  421f98:	3518      	adds	r5, #24
  421f9a:	f10a 0220 	add.w	r2, sl, #32
  421f9e:	e762      	b.n	421e66 <_realloc_r+0x20e>
  421fa0:	20400490 	.word	0x20400490

00421fa4 <__sread>:
  421fa4:	b510      	push	{r4, lr}
  421fa6:	460c      	mov	r4, r1
  421fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  421fac:	f000 f9f6 	bl	42239c <_read_r>
  421fb0:	2800      	cmp	r0, #0
  421fb2:	db03      	blt.n	421fbc <__sread+0x18>
  421fb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  421fb6:	4403      	add	r3, r0
  421fb8:	6523      	str	r3, [r4, #80]	; 0x50
  421fba:	bd10      	pop	{r4, pc}
  421fbc:	89a3      	ldrh	r3, [r4, #12]
  421fbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  421fc2:	81a3      	strh	r3, [r4, #12]
  421fc4:	bd10      	pop	{r4, pc}
  421fc6:	bf00      	nop

00421fc8 <__swrite>:
  421fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  421fcc:	4616      	mov	r6, r2
  421fce:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  421fd2:	461f      	mov	r7, r3
  421fd4:	05d3      	lsls	r3, r2, #23
  421fd6:	460c      	mov	r4, r1
  421fd8:	4605      	mov	r5, r0
  421fda:	d507      	bpl.n	421fec <__swrite+0x24>
  421fdc:	2200      	movs	r2, #0
  421fde:	2302      	movs	r3, #2
  421fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  421fe4:	f000 f9c4 	bl	422370 <_lseek_r>
  421fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  421fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  421ff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  421ff4:	81a2      	strh	r2, [r4, #12]
  421ff6:	463b      	mov	r3, r7
  421ff8:	4632      	mov	r2, r6
  421ffa:	4628      	mov	r0, r5
  421ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  422000:	f000 b8a4 	b.w	42214c <_write_r>

00422004 <__sseek>:
  422004:	b510      	push	{r4, lr}
  422006:	460c      	mov	r4, r1
  422008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  42200c:	f000 f9b0 	bl	422370 <_lseek_r>
  422010:	89a3      	ldrh	r3, [r4, #12]
  422012:	1c42      	adds	r2, r0, #1
  422014:	bf0e      	itee	eq
  422016:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  42201a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  42201e:	6520      	strne	r0, [r4, #80]	; 0x50
  422020:	81a3      	strh	r3, [r4, #12]
  422022:	bd10      	pop	{r4, pc}

00422024 <__sclose>:
  422024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  422028:	f000 b908 	b.w	42223c <_close_r>

0042202c <__swbuf_r>:
  42202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42202e:	460d      	mov	r5, r1
  422030:	4614      	mov	r4, r2
  422032:	4606      	mov	r6, r0
  422034:	b110      	cbz	r0, 42203c <__swbuf_r+0x10>
  422036:	6b83      	ldr	r3, [r0, #56]	; 0x38
  422038:	2b00      	cmp	r3, #0
  42203a:	d04b      	beq.n	4220d4 <__swbuf_r+0xa8>
  42203c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  422040:	69a3      	ldr	r3, [r4, #24]
  422042:	60a3      	str	r3, [r4, #8]
  422044:	b291      	uxth	r1, r2
  422046:	0708      	lsls	r0, r1, #28
  422048:	d539      	bpl.n	4220be <__swbuf_r+0x92>
  42204a:	6923      	ldr	r3, [r4, #16]
  42204c:	2b00      	cmp	r3, #0
  42204e:	d036      	beq.n	4220be <__swbuf_r+0x92>
  422050:	b2ed      	uxtb	r5, r5
  422052:	0489      	lsls	r1, r1, #18
  422054:	462f      	mov	r7, r5
  422056:	d515      	bpl.n	422084 <__swbuf_r+0x58>
  422058:	6822      	ldr	r2, [r4, #0]
  42205a:	6961      	ldr	r1, [r4, #20]
  42205c:	1ad3      	subs	r3, r2, r3
  42205e:	428b      	cmp	r3, r1
  422060:	da1c      	bge.n	42209c <__swbuf_r+0x70>
  422062:	3301      	adds	r3, #1
  422064:	68a1      	ldr	r1, [r4, #8]
  422066:	1c50      	adds	r0, r2, #1
  422068:	3901      	subs	r1, #1
  42206a:	60a1      	str	r1, [r4, #8]
  42206c:	6020      	str	r0, [r4, #0]
  42206e:	7015      	strb	r5, [r2, #0]
  422070:	6962      	ldr	r2, [r4, #20]
  422072:	429a      	cmp	r2, r3
  422074:	d01a      	beq.n	4220ac <__swbuf_r+0x80>
  422076:	89a3      	ldrh	r3, [r4, #12]
  422078:	07db      	lsls	r3, r3, #31
  42207a:	d501      	bpl.n	422080 <__swbuf_r+0x54>
  42207c:	2d0a      	cmp	r5, #10
  42207e:	d015      	beq.n	4220ac <__swbuf_r+0x80>
  422080:	4638      	mov	r0, r7
  422082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  422084:	6e61      	ldr	r1, [r4, #100]	; 0x64
  422086:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  42208a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  42208e:	81a2      	strh	r2, [r4, #12]
  422090:	6822      	ldr	r2, [r4, #0]
  422092:	6661      	str	r1, [r4, #100]	; 0x64
  422094:	6961      	ldr	r1, [r4, #20]
  422096:	1ad3      	subs	r3, r2, r3
  422098:	428b      	cmp	r3, r1
  42209a:	dbe2      	blt.n	422062 <__swbuf_r+0x36>
  42209c:	4621      	mov	r1, r4
  42209e:	4630      	mov	r0, r6
  4220a0:	f7ff f87a 	bl	421198 <_fflush_r>
  4220a4:	b940      	cbnz	r0, 4220b8 <__swbuf_r+0x8c>
  4220a6:	6822      	ldr	r2, [r4, #0]
  4220a8:	2301      	movs	r3, #1
  4220aa:	e7db      	b.n	422064 <__swbuf_r+0x38>
  4220ac:	4621      	mov	r1, r4
  4220ae:	4630      	mov	r0, r6
  4220b0:	f7ff f872 	bl	421198 <_fflush_r>
  4220b4:	2800      	cmp	r0, #0
  4220b6:	d0e3      	beq.n	422080 <__swbuf_r+0x54>
  4220b8:	f04f 37ff 	mov.w	r7, #4294967295
  4220bc:	e7e0      	b.n	422080 <__swbuf_r+0x54>
  4220be:	4621      	mov	r1, r4
  4220c0:	4630      	mov	r0, r6
  4220c2:	f7fe ff55 	bl	420f70 <__swsetup_r>
  4220c6:	2800      	cmp	r0, #0
  4220c8:	d1f6      	bne.n	4220b8 <__swbuf_r+0x8c>
  4220ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4220ce:	6923      	ldr	r3, [r4, #16]
  4220d0:	b291      	uxth	r1, r2
  4220d2:	e7bd      	b.n	422050 <__swbuf_r+0x24>
  4220d4:	f7ff f8b8 	bl	421248 <__sinit>
  4220d8:	e7b0      	b.n	42203c <__swbuf_r+0x10>
  4220da:	bf00      	nop

004220dc <_wcrtomb_r>:
  4220dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4220de:	4606      	mov	r6, r0
  4220e0:	b085      	sub	sp, #20
  4220e2:	461f      	mov	r7, r3
  4220e4:	b189      	cbz	r1, 42210a <_wcrtomb_r+0x2e>
  4220e6:	4c10      	ldr	r4, [pc, #64]	; (422128 <_wcrtomb_r+0x4c>)
  4220e8:	4d10      	ldr	r5, [pc, #64]	; (42212c <_wcrtomb_r+0x50>)
  4220ea:	6824      	ldr	r4, [r4, #0]
  4220ec:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4220ee:	2c00      	cmp	r4, #0
  4220f0:	bf08      	it	eq
  4220f2:	462c      	moveq	r4, r5
  4220f4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4220f8:	47a0      	blx	r4
  4220fa:	1c43      	adds	r3, r0, #1
  4220fc:	d103      	bne.n	422106 <_wcrtomb_r+0x2a>
  4220fe:	2200      	movs	r2, #0
  422100:	238a      	movs	r3, #138	; 0x8a
  422102:	603a      	str	r2, [r7, #0]
  422104:	6033      	str	r3, [r6, #0]
  422106:	b005      	add	sp, #20
  422108:	bdf0      	pop	{r4, r5, r6, r7, pc}
  42210a:	460c      	mov	r4, r1
  42210c:	4906      	ldr	r1, [pc, #24]	; (422128 <_wcrtomb_r+0x4c>)
  42210e:	4a07      	ldr	r2, [pc, #28]	; (42212c <_wcrtomb_r+0x50>)
  422110:	6809      	ldr	r1, [r1, #0]
  422112:	6b49      	ldr	r1, [r1, #52]	; 0x34
  422114:	2900      	cmp	r1, #0
  422116:	bf08      	it	eq
  422118:	4611      	moveq	r1, r2
  42211a:	4622      	mov	r2, r4
  42211c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  422120:	a901      	add	r1, sp, #4
  422122:	47a0      	blx	r4
  422124:	e7e9      	b.n	4220fa <_wcrtomb_r+0x1e>
  422126:	bf00      	nop
  422128:	20400060 	.word	0x20400060
  42212c:	204008a4 	.word	0x204008a4

00422130 <__ascii_wctomb>:
  422130:	b121      	cbz	r1, 42213c <__ascii_wctomb+0xc>
  422132:	2aff      	cmp	r2, #255	; 0xff
  422134:	d804      	bhi.n	422140 <__ascii_wctomb+0x10>
  422136:	700a      	strb	r2, [r1, #0]
  422138:	2001      	movs	r0, #1
  42213a:	4770      	bx	lr
  42213c:	4608      	mov	r0, r1
  42213e:	4770      	bx	lr
  422140:	238a      	movs	r3, #138	; 0x8a
  422142:	6003      	str	r3, [r0, #0]
  422144:	f04f 30ff 	mov.w	r0, #4294967295
  422148:	4770      	bx	lr
  42214a:	bf00      	nop

0042214c <_write_r>:
  42214c:	b570      	push	{r4, r5, r6, lr}
  42214e:	460d      	mov	r5, r1
  422150:	4c08      	ldr	r4, [pc, #32]	; (422174 <_write_r+0x28>)
  422152:	4611      	mov	r1, r2
  422154:	4606      	mov	r6, r0
  422156:	461a      	mov	r2, r3
  422158:	4628      	mov	r0, r5
  42215a:	2300      	movs	r3, #0
  42215c:	6023      	str	r3, [r4, #0]
  42215e:	f7fb f987 	bl	41d470 <_write>
  422162:	1c43      	adds	r3, r0, #1
  422164:	d000      	beq.n	422168 <_write_r+0x1c>
  422166:	bd70      	pop	{r4, r5, r6, pc}
  422168:	6823      	ldr	r3, [r4, #0]
  42216a:	2b00      	cmp	r3, #0
  42216c:	d0fb      	beq.n	422166 <_write_r+0x1a>
  42216e:	6033      	str	r3, [r6, #0]
  422170:	bd70      	pop	{r4, r5, r6, pc}
  422172:	bf00      	nop
  422174:	2043a32c 	.word	0x2043a32c

00422178 <__register_exitproc>:
  422178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  42217c:	4d2c      	ldr	r5, [pc, #176]	; (422230 <__register_exitproc+0xb8>)
  42217e:	4606      	mov	r6, r0
  422180:	6828      	ldr	r0, [r5, #0]
  422182:	4698      	mov	r8, r3
  422184:	460f      	mov	r7, r1
  422186:	4691      	mov	r9, r2
  422188:	f7ff fc1e 	bl	4219c8 <__retarget_lock_acquire_recursive>
  42218c:	4b29      	ldr	r3, [pc, #164]	; (422234 <__register_exitproc+0xbc>)
  42218e:	681c      	ldr	r4, [r3, #0]
  422190:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  422194:	2b00      	cmp	r3, #0
  422196:	d03e      	beq.n	422216 <__register_exitproc+0x9e>
  422198:	685a      	ldr	r2, [r3, #4]
  42219a:	2a1f      	cmp	r2, #31
  42219c:	dc1c      	bgt.n	4221d8 <__register_exitproc+0x60>
  42219e:	f102 0e01 	add.w	lr, r2, #1
  4221a2:	b176      	cbz	r6, 4221c2 <__register_exitproc+0x4a>
  4221a4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4221a8:	2401      	movs	r4, #1
  4221aa:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4221ae:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4221b2:	4094      	lsls	r4, r2
  4221b4:	4320      	orrs	r0, r4
  4221b6:	2e02      	cmp	r6, #2
  4221b8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4221bc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4221c0:	d023      	beq.n	42220a <__register_exitproc+0x92>
  4221c2:	3202      	adds	r2, #2
  4221c4:	f8c3 e004 	str.w	lr, [r3, #4]
  4221c8:	6828      	ldr	r0, [r5, #0]
  4221ca:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4221ce:	f7ff fbfd 	bl	4219cc <__retarget_lock_release_recursive>
  4221d2:	2000      	movs	r0, #0
  4221d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4221d8:	4b17      	ldr	r3, [pc, #92]	; (422238 <__register_exitproc+0xc0>)
  4221da:	b30b      	cbz	r3, 422220 <__register_exitproc+0xa8>
  4221dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4221e0:	f7fd f8dc 	bl	41f39c <malloc>
  4221e4:	4603      	mov	r3, r0
  4221e6:	b1d8      	cbz	r0, 422220 <__register_exitproc+0xa8>
  4221e8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4221ec:	6002      	str	r2, [r0, #0]
  4221ee:	2100      	movs	r1, #0
  4221f0:	6041      	str	r1, [r0, #4]
  4221f2:	460a      	mov	r2, r1
  4221f4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4221f8:	f04f 0e01 	mov.w	lr, #1
  4221fc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  422200:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  422204:	2e00      	cmp	r6, #0
  422206:	d0dc      	beq.n	4221c2 <__register_exitproc+0x4a>
  422208:	e7cc      	b.n	4221a4 <__register_exitproc+0x2c>
  42220a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  42220e:	430c      	orrs	r4, r1
  422210:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  422214:	e7d5      	b.n	4221c2 <__register_exitproc+0x4a>
  422216:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  42221a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  42221e:	e7bb      	b.n	422198 <__register_exitproc+0x20>
  422220:	6828      	ldr	r0, [r5, #0]
  422222:	f7ff fbd3 	bl	4219cc <__retarget_lock_release_recursive>
  422226:	f04f 30ff 	mov.w	r0, #4294967295
  42222a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42222e:	bf00      	nop
  422230:	204008a0 	.word	0x204008a0
  422234:	00428c94 	.word	0x00428c94
  422238:	0041f39d 	.word	0x0041f39d

0042223c <_close_r>:
  42223c:	b538      	push	{r3, r4, r5, lr}
  42223e:	4c07      	ldr	r4, [pc, #28]	; (42225c <_close_r+0x20>)
  422240:	2300      	movs	r3, #0
  422242:	4605      	mov	r5, r0
  422244:	4608      	mov	r0, r1
  422246:	6023      	str	r3, [r4, #0]
  422248:	f7fb ffb8 	bl	41e1bc <_close>
  42224c:	1c43      	adds	r3, r0, #1
  42224e:	d000      	beq.n	422252 <_close_r+0x16>
  422250:	bd38      	pop	{r3, r4, r5, pc}
  422252:	6823      	ldr	r3, [r4, #0]
  422254:	2b00      	cmp	r3, #0
  422256:	d0fb      	beq.n	422250 <_close_r+0x14>
  422258:	602b      	str	r3, [r5, #0]
  42225a:	bd38      	pop	{r3, r4, r5, pc}
  42225c:	2043a32c 	.word	0x2043a32c

00422260 <_fclose_r>:
  422260:	b570      	push	{r4, r5, r6, lr}
  422262:	b159      	cbz	r1, 42227c <_fclose_r+0x1c>
  422264:	4605      	mov	r5, r0
  422266:	460c      	mov	r4, r1
  422268:	b110      	cbz	r0, 422270 <_fclose_r+0x10>
  42226a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  42226c:	2b00      	cmp	r3, #0
  42226e:	d03c      	beq.n	4222ea <_fclose_r+0x8a>
  422270:	6e63      	ldr	r3, [r4, #100]	; 0x64
  422272:	07d8      	lsls	r0, r3, #31
  422274:	d505      	bpl.n	422282 <_fclose_r+0x22>
  422276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42227a:	b92b      	cbnz	r3, 422288 <_fclose_r+0x28>
  42227c:	2600      	movs	r6, #0
  42227e:	4630      	mov	r0, r6
  422280:	bd70      	pop	{r4, r5, r6, pc}
  422282:	89a3      	ldrh	r3, [r4, #12]
  422284:	0599      	lsls	r1, r3, #22
  422286:	d53c      	bpl.n	422302 <_fclose_r+0xa2>
  422288:	4621      	mov	r1, r4
  42228a:	4628      	mov	r0, r5
  42228c:	f7fe fee4 	bl	421058 <__sflush_r>
  422290:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  422292:	4606      	mov	r6, r0
  422294:	b133      	cbz	r3, 4222a4 <_fclose_r+0x44>
  422296:	69e1      	ldr	r1, [r4, #28]
  422298:	4628      	mov	r0, r5
  42229a:	4798      	blx	r3
  42229c:	2800      	cmp	r0, #0
  42229e:	bfb8      	it	lt
  4222a0:	f04f 36ff 	movlt.w	r6, #4294967295
  4222a4:	89a3      	ldrh	r3, [r4, #12]
  4222a6:	061a      	lsls	r2, r3, #24
  4222a8:	d422      	bmi.n	4222f0 <_fclose_r+0x90>
  4222aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4222ac:	b141      	cbz	r1, 4222c0 <_fclose_r+0x60>
  4222ae:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4222b2:	4299      	cmp	r1, r3
  4222b4:	d002      	beq.n	4222bc <_fclose_r+0x5c>
  4222b6:	4628      	mov	r0, r5
  4222b8:	f7ff f8ec 	bl	421494 <_free_r>
  4222bc:	2300      	movs	r3, #0
  4222be:	6323      	str	r3, [r4, #48]	; 0x30
  4222c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
  4222c2:	b121      	cbz	r1, 4222ce <_fclose_r+0x6e>
  4222c4:	4628      	mov	r0, r5
  4222c6:	f7ff f8e5 	bl	421494 <_free_r>
  4222ca:	2300      	movs	r3, #0
  4222cc:	6463      	str	r3, [r4, #68]	; 0x44
  4222ce:	f7fe ffe7 	bl	4212a0 <__sfp_lock_acquire>
  4222d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4222d4:	2200      	movs	r2, #0
  4222d6:	07db      	lsls	r3, r3, #31
  4222d8:	81a2      	strh	r2, [r4, #12]
  4222da:	d50e      	bpl.n	4222fa <_fclose_r+0x9a>
  4222dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4222de:	f7ff fb71 	bl	4219c4 <__retarget_lock_close_recursive>
  4222e2:	f7fe ffe3 	bl	4212ac <__sfp_lock_release>
  4222e6:	4630      	mov	r0, r6
  4222e8:	bd70      	pop	{r4, r5, r6, pc}
  4222ea:	f7fe ffad 	bl	421248 <__sinit>
  4222ee:	e7bf      	b.n	422270 <_fclose_r+0x10>
  4222f0:	6921      	ldr	r1, [r4, #16]
  4222f2:	4628      	mov	r0, r5
  4222f4:	f7ff f8ce 	bl	421494 <_free_r>
  4222f8:	e7d7      	b.n	4222aa <_fclose_r+0x4a>
  4222fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4222fc:	f7ff fb66 	bl	4219cc <__retarget_lock_release_recursive>
  422300:	e7ec      	b.n	4222dc <_fclose_r+0x7c>
  422302:	6da0      	ldr	r0, [r4, #88]	; 0x58
  422304:	f7ff fb60 	bl	4219c8 <__retarget_lock_acquire_recursive>
  422308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42230c:	2b00      	cmp	r3, #0
  42230e:	d1bb      	bne.n	422288 <_fclose_r+0x28>
  422310:	6e66      	ldr	r6, [r4, #100]	; 0x64
  422312:	f016 0601 	ands.w	r6, r6, #1
  422316:	d1b1      	bne.n	42227c <_fclose_r+0x1c>
  422318:	6da0      	ldr	r0, [r4, #88]	; 0x58
  42231a:	f7ff fb57 	bl	4219cc <__retarget_lock_release_recursive>
  42231e:	4630      	mov	r0, r6
  422320:	bd70      	pop	{r4, r5, r6, pc}
  422322:	bf00      	nop

00422324 <_fstat_r>:
  422324:	b538      	push	{r3, r4, r5, lr}
  422326:	460b      	mov	r3, r1
  422328:	4c07      	ldr	r4, [pc, #28]	; (422348 <_fstat_r+0x24>)
  42232a:	4605      	mov	r5, r0
  42232c:	4611      	mov	r1, r2
  42232e:	4618      	mov	r0, r3
  422330:	2300      	movs	r3, #0
  422332:	6023      	str	r3, [r4, #0]
  422334:	f7fb ff45 	bl	41e1c2 <_fstat>
  422338:	1c43      	adds	r3, r0, #1
  42233a:	d000      	beq.n	42233e <_fstat_r+0x1a>
  42233c:	bd38      	pop	{r3, r4, r5, pc}
  42233e:	6823      	ldr	r3, [r4, #0]
  422340:	2b00      	cmp	r3, #0
  422342:	d0fb      	beq.n	42233c <_fstat_r+0x18>
  422344:	602b      	str	r3, [r5, #0]
  422346:	bd38      	pop	{r3, r4, r5, pc}
  422348:	2043a32c 	.word	0x2043a32c

0042234c <_isatty_r>:
  42234c:	b538      	push	{r3, r4, r5, lr}
  42234e:	4c07      	ldr	r4, [pc, #28]	; (42236c <_isatty_r+0x20>)
  422350:	2300      	movs	r3, #0
  422352:	4605      	mov	r5, r0
  422354:	4608      	mov	r0, r1
  422356:	6023      	str	r3, [r4, #0]
  422358:	f7fb ff38 	bl	41e1cc <_isatty>
  42235c:	1c43      	adds	r3, r0, #1
  42235e:	d000      	beq.n	422362 <_isatty_r+0x16>
  422360:	bd38      	pop	{r3, r4, r5, pc}
  422362:	6823      	ldr	r3, [r4, #0]
  422364:	2b00      	cmp	r3, #0
  422366:	d0fb      	beq.n	422360 <_isatty_r+0x14>
  422368:	602b      	str	r3, [r5, #0]
  42236a:	bd38      	pop	{r3, r4, r5, pc}
  42236c:	2043a32c 	.word	0x2043a32c

00422370 <_lseek_r>:
  422370:	b570      	push	{r4, r5, r6, lr}
  422372:	460d      	mov	r5, r1
  422374:	4c08      	ldr	r4, [pc, #32]	; (422398 <_lseek_r+0x28>)
  422376:	4611      	mov	r1, r2
  422378:	4606      	mov	r6, r0
  42237a:	461a      	mov	r2, r3
  42237c:	4628      	mov	r0, r5
  42237e:	2300      	movs	r3, #0
  422380:	6023      	str	r3, [r4, #0]
  422382:	f7fb ff25 	bl	41e1d0 <_lseek>
  422386:	1c43      	adds	r3, r0, #1
  422388:	d000      	beq.n	42238c <_lseek_r+0x1c>
  42238a:	bd70      	pop	{r4, r5, r6, pc}
  42238c:	6823      	ldr	r3, [r4, #0]
  42238e:	2b00      	cmp	r3, #0
  422390:	d0fb      	beq.n	42238a <_lseek_r+0x1a>
  422392:	6033      	str	r3, [r6, #0]
  422394:	bd70      	pop	{r4, r5, r6, pc}
  422396:	bf00      	nop
  422398:	2043a32c 	.word	0x2043a32c

0042239c <_read_r>:
  42239c:	b570      	push	{r4, r5, r6, lr}
  42239e:	460d      	mov	r5, r1
  4223a0:	4c08      	ldr	r4, [pc, #32]	; (4223c4 <_read_r+0x28>)
  4223a2:	4611      	mov	r1, r2
  4223a4:	4606      	mov	r6, r0
  4223a6:	461a      	mov	r2, r3
  4223a8:	4628      	mov	r0, r5
  4223aa:	2300      	movs	r3, #0
  4223ac:	6023      	str	r3, [r4, #0]
  4223ae:	f7fb f845 	bl	41d43c <_read>
  4223b2:	1c43      	adds	r3, r0, #1
  4223b4:	d000      	beq.n	4223b8 <_read_r+0x1c>
  4223b6:	bd70      	pop	{r4, r5, r6, pc}
  4223b8:	6823      	ldr	r3, [r4, #0]
  4223ba:	2b00      	cmp	r3, #0
  4223bc:	d0fb      	beq.n	4223b6 <_read_r+0x1a>
  4223be:	6033      	str	r3, [r6, #0]
  4223c0:	bd70      	pop	{r4, r5, r6, pc}
  4223c2:	bf00      	nop
  4223c4:	2043a32c 	.word	0x2043a32c
  4223c8:	00474345 	.word	0x00474345

004223cc <logo>:
  4223cc:	0600c004 00001200 004223d8              .........#B.

004223d8 <logo_map>:
  4223d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4223e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4223f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422408:	ffffffff ffffffff ffffffff ffffffff     ................
  422418:	ffffffff ffffffff ffffffff ffffffff     ................
  422428:	ffffffff ffffffff ffffffff ffffffff     ................
  422438:	ffffffff ffffffff ffffffff ffffffff     ................
  422448:	ffffffff ffffffff ffffffff ffffffff     ................
  422458:	ffffffff ffffffff ffffffff ffffffff     ................
  422468:	ffffffff ffffffff ffffffff ffffffff     ................
  422478:	ffffffff ffffffff ffffffff ffffffff     ................
  422488:	ffffffff ffffffff ffffffff ffffffff     ................
  422498:	ffffffff ffffffff ffffffff ffffffff     ................
  4224a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4224b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4224c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4224d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4224e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4224f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422508:	ffffffff ffffffff ffffffff ffffffff     ................
  422518:	ffffffff ffffffff ffffffff ffffffff     ................
  422528:	ffffffff ffffffff ffffffff ffffffff     ................
  422538:	ffffffff ffffffff ffffffff ffffffff     ................
  422548:	ffffffff ffffffff ffffffff ffffffff     ................
  422558:	ffffffff ffffffff ffffffff ffffffff     ................
  422568:	ffffffff ffffffff ffffffff ffffffff     ................
  422578:	ffffffff ffffffff ffffffff ffffffff     ................
  422588:	ffffffff ffffffff ffffffff ffffffff     ................
  422598:	ffffffff ffffffff ffffffff ffffffff     ................
  4225a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4225b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4225c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4225d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4225e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4225f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422608:	ffffffff ffffffff ffffffff ffffffff     ................
  422618:	ffffffff ffffffff ffffffff ffffffff     ................
  422628:	ffffffff ffffffff ffffffff ffffffff     ................
  422638:	ffffffff ffffffff ffffffff ffffffff     ................
  422648:	ffffffff ffffffff ffffffff ffffffff     ................
  422658:	ffffffff ffffffff ffffffff ffffffff     ................
  422668:	ffffffff ffffffff ffffffff ffffffff     ................
  422678:	ffffffff ffffffff ffffffff ffffffff     ................
  422688:	ffffffff ffffffff ffffffff ffffffff     ................
  422698:	ffffffff ffffffff ffffffff ffffffff     ................
  4226a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4226b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4226c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4226d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4226e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4226f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422708:	ffffffff ffffffff ffffffff ffffffff     ................
  422718:	ffffffff ffffffff ffffffff ffffffff     ................
  422728:	ffffffff ffffffff ffffffff ffffffff     ................
  422738:	ffffffff ffffffff ffffffff ffffffff     ................
  422748:	ffffffff ffffffff ffffffff ffffffff     ................
  422758:	ffffffff ffffffff ffffffff ffffffff     ................
  422768:	ffffffff ffffffff ffffffff ffffffff     ................
  422778:	ffffffff ffffffff ffffffff ffffffff     ................
  422788:	ffffffff ffffffff ffffffff ffffffff     ................
  422798:	ffffffff ffffffff ffffffff ffffffff     ................
  4227a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4227b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4227c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4227d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4227e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4227f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422808:	ffffffff ffffffff ffffffff ffffffff     ................
  422818:	ffffffff ffffffff ffffffff ffffffff     ................
  422828:	ffffffff ffffffff ffffffff ffffffff     ................
  422838:	ffffffff ffffffff ffffffff ffffffff     ................
  422848:	ffffffff ffffffff ffffffff ffffffff     ................
  422858:	ffffffff ffffffff ffffffff ffffffff     ................
  422868:	ffffffff ffffffff ffffffff ffffffff     ................
  422878:	ffffffff ffffffff ffffffff ffffffff     ................
  422888:	ffffffff ffffffff ffffffff ffffffff     ................
  422898:	ffffffff ffffffff ffffffff ffffffff     ................
  4228a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4228b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4228c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4228d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4228e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4228f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422908:	ffffffff ffffffff ffffffff ffffffff     ................
  422918:	ffffffff ffffffff ffffffff ffffffff     ................
  422928:	ffffffff ffffffff ffffffff ffffffff     ................
  422938:	ffffffff ffffffff ffffffff ffffffff     ................
  422948:	ffffffff e4a0e4a0 ffffffff ffffffff     ................
  422958:	ffffffff ffffffff ffffffff ffffffff     ................
  422968:	ffffffff ffffffff ffffffff ffffffff     ................
  422978:	ffffffff ffffffff ffffffff ffffffff     ................
  422988:	ffffffff ffffffff ffffffff ffffffff     ................
  422998:	ffffffff ffffffff ffffffff ffffffff     ................
  4229a8:	ffffffff e4a8e4a8 dfffb7e5 ffffffff     ................
  4229b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4229c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4229d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4229e8:	ffffffff ffffffff 0df3ffff fffff0f3     ................
  4229f8:	ffffffff ffffffff ffffffff ffffffff     ................
  422a08:	ffffffff e4b0e4b0 8ed304b1 ffffffff     ................
  422a18:	ffffffff ffffffff ffffffff ffffffff     ................
  422a28:	ffffffff ffffffff ffffffff ffffffff     ................
  422a38:	ffffffff ffffffff ffffffff ffffffff     ................
  422a48:	ffffffff ffffffff e4e0ffff 66e9e4e0     ...............f
  422a58:	ffff18fe ffffffff ffffffff ffffffff     ................
  422a68:	ffffffff e4c0e4c0 6ed325c9 ffffffff     .........%.n....
  422a78:	ffffffff ffffffff ffffffff ffffffff     ................
  422a88:	ffffffff ffffffff ffffffff ffffffff     ................
  422a98:	ffffffff ffffffff ffffffff ffffffff     ................
  422aa8:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  422ab8:	ffff29e2 ffffffff ffffffff ffffffff     .)..............
  422ac8:	ffffffff e4d0e4d0 55cd14ed ffffffff     ...........U....
  422ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  422ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  422af8:	ffffffff ffffffff ffffffff ffffffff     ................
  422b08:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  422b18:	ffffe4d8 ffffffff ffffffff ffffffff     ................
  422b28:	ffffffff 66e1e4e0 e478d7d5 ffffffff     .......f..x.....
  422b38:	ffffffff ffffffff ffffffff ffffffff     ................
  422b48:	ffffffff ffffffff ffffffff ffffffff     ................
  422b58:	ffffffff ffffffff ffffffff ffffffff     ................
  422b68:	ffffffff ffffffff e4d0ffff e4d0e4d0     ................
  422b78:	ffffe4d0 ffffffff ffffffff ffffffff     ................
  422b88:	ffffffff 55f5a7e9 6270698a ffffffff     .......U.ipb....
  422b98:	ffffffff ffffffff ffffffff ffffffff     ................
  422ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  422bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  422bc8:	ffffffff ffffffff e4c8ffff e4c8e4c8     ................
  422bd8:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  422be8:	ffffffff 7df7ffff 82886260 ffffffff     .......}`b......
  422bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  422c08:	ffffffff ffffffff ffffffff ffffffff     ................
  422c18:	ffffffff ffffffff ffffffff ffffffff     ................
  422c28:	ffffffff ffffffff e4c8ffff e4c0e4c8     ................
  422c38:	29c2e4c0 8ec3ecc2 18e6b3d4 38e639e6     ...).........9.8
  422c48:	96d538de 6260298a a3a06268 ffffffff     .8...)`bhb......
  422c58:	ffffffff ffffffff ffffffff ffffffff     ................
  422c68:	ffffffff ffffffff ffffffff ffffffff     ................
  422c78:	ffffffff ffffffff ffffffff ffffffff     ................
  422c88:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  422c98:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  422ca8:	62688270 62606260 c4b06270 ffffffff     p.hb`b`bpb......
  422cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  422cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  422cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  422ce8:	ffffffff ffffffff e4b8ffff e4c0e4c0     ................
  422cf8:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  422d08:	62688270 62606260 e4c8a3a0 ffffffff     p.hb`b`b........
  422d18:	ffffffff ffffffff ffffffff ffffffff     ................
  422d28:	ffffffff ffffffff ffffffff ffffffff     ................
  422d38:	ffffffff ffffffff ffffffff ffffffff     ................
  422d48:	ffffffff ffffffff e4c0ffff e4c0e4e0     ................
  422d58:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  422d68:	62688270 62686260 e4c0e4c0 ffffffff     p.hb`bhb........
  422d78:	ffffffff ffffffff ffffffff ffffffff     ................
  422d88:	ffffffff ffffffff ffffffff ffffffff     ................
  422d98:	ffffffff ffffffff ffffffff ffffffff     ................
  422da8:	ffffffff ffffffff e4d8ffff cfe3e4e0     ................
  422db8:	bfffdbfe dfffdfff 9effbfff 9aee9eff     ................
  422dc8:	d7d5d7d5 e4b8c4a8 e4b8e4b8 ffffffff     ................
  422dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  422de8:	ffffffff ffffffff ffffffff ffffffff     ................
  422df8:	ffffffff ffffffff ffffffff ffffffff     ................
  422e08:	ffffffff ffffffff 04e9ffff ffffe4e0     ................
  422e18:	ffffffff ffffffff ffffffff ffffffff     ................
  422e28:	ffffffff e4b8e4b8 e4b8e4b8 ffffffff     ................
  422e38:	ffffffff ffffffff ffffffff ffffffff     ................
  422e48:	ffffffff ffffffff ffffffff ffffffff     ................
  422e58:	ffffffff ffffffff ffffffff ffffffff     ................
  422e68:	ffffffff ffffffff 04e9ffff 71d40deb     ...............q
  422e78:	ffff0cbb ffffffff ffffffff ffffffff     ................
  422e88:	ffffffff e4b0e4b0 e4b0e4b0 ffffffff     ................
  422e98:	ffffffff ffffffff ffffffff ffffffff     ................
  422ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  422eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  422ec8:	ffffffff ffffffff 0debffff e4a89eff     ................
  422ed8:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  422ee8:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  422ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  422f08:	ffffffff ffffffff ffffffff ffffffff     ................
  422f18:	ffffffff ffffffff ffffffff ffffffff     ................
  422f28:	ffffffff ffffffff bbfeffff e4a8f4dc     ................
  422f38:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  422f48:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  422f58:	ffffffff ffffffff ffffffff ffffffff     ................
  422f68:	ffffffff ffffffff ffffffff ffffffff     ................
  422f78:	ffffffff ffffffff ffffffff ffffffff     ................
  422f88:	ffffffff ffffffff efdbffff e4b8e4b8     ................
  422f98:	ffffe4b8 ffffffff ffffffff ffffffff     ................
  422fa8:	ffffffff e4a0ccc2 e4a0e4a0 ffffffff     ................
  422fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  422fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  422fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  422fe8:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  422ff8:	ffffe4c0 ffffffff ffffffff ffffffff     ................
  423008:	ffffffff 29b2ffff e4a0e4a0 ffffffff     .......)........
  423018:	ffffffff ffffffff ffffffff ffffffff     ................
  423028:	ffffffff ffffffff ffffffff ffffffff     ................
  423038:	ffffffff ffffffff ffffffff ffffffff     ................
  423048:	ffffffff ffffffff 05d1ffff e4c8e4c8     ................
  423058:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  423068:	ffffffff 3cf7ffff 86a1e8a9 ffffffff     .......<........
  423078:	ffffffff ffffffff ffffffff ffffffff     ................
  423088:	ffffffff ffffffff ffffffff ffffffff     ................
  423098:	ffffffff ffffffff ffffffff ffffffff     ................
  4230a8:	ffffffff ffffffff ffffffff 87e9ffff     ................
  4230b8:	ffff46e9 ffffffff ffffffff ffffffff     .F..............
  4230c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4230d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4230e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4230f8:	ffffffff ffffffff ffffffff ffffffff     ................
  423108:	ffffffff ffffffff ffffffff 9afeffff     ................
  423118:	ffff96fd ffffffff ffffffff ffffffff     ................
  423128:	ffffffff ffffffff ffffffff ffffffff     ................
  423138:	ffffffff ffffffff ffffffff ffffffff     ................
  423148:	ffffffff ffffffff ffffffff ffffffff     ................
  423158:	ffffffff ffffffff ffffffff ffffffff     ................
  423168:	ffffffff ffffffff ffffffff ffffffff     ................
  423178:	ffffffff ffffffff ffffffff ffffffff     ................
  423188:	ffffffff ffffffff ffffffff ffffffff     ................
  423198:	ffffffff ffffffff ffffffff ffffffff     ................
  4231a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4231b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4231c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4231d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4231e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4231f8:	ffffffff ffffffff ffffffff ffffffff     ................
  423208:	ffffffff ffffffff ffffffff ffffffff     ................
  423218:	ffffffff ffffffff ffffffff ffffffff     ................
  423228:	ffffffff ffffffff ffffffff ffffffff     ................
  423238:	ffffffff ffffffff ffffffff ffffffff     ................
  423248:	ffffffff ffffffff ffffffff ffffffff     ................
  423258:	ffffffff ffffffff ffffffff ffffffff     ................
  423268:	ffffffff ffffffff ffffffff ffffffff     ................
  423278:	ffffffff ffffffff ffffffff ffffffff     ................
  423288:	ffffffff ffffffff ffffffff ffffffff     ................
  423298:	ffffffff ffffffff ffffffff ffffffff     ................
  4232a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4232b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4232c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4232d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4232e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4232f8:	ffffffff ffffffff ffffffff ffffffff     ................
  423308:	ffffffff ffffffff ffffffff ffffffff     ................
  423318:	ffffffff ffffffff ffffffff ffffffff     ................
  423328:	ffffffff ffffffff ffffffff ffffffff     ................
  423338:	ffffffff ffffffff ffffffff ffffffff     ................
  423348:	ffffffff ffffffff ffffffff ffffffff     ................
  423358:	ffffffff ffffffff ffffffff ffffffff     ................
  423368:	ffffffff ffffffff ffffffff ffffffff     ................
  423378:	ffffffff ffffffff ffffffff ffffffff     ................
  423388:	ffffffff ffffffff ffffffff ffffffff     ................
  423398:	ffffffff ffffffff ffffffff ffffffff     ................
  4233a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4233b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4233c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4233d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4233e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4233f8:	ffffffff ffffffff ffffffff ffffffff     ................
  423408:	ffffffff ffffffff ffffffff ffffffff     ................
  423418:	ffffffff ffffffff ffffffff ffffffff     ................
  423428:	ffffffff ffffffff ffffffff ffffffff     ................
  423438:	ffffffff ffffffff ffffffff ffffffff     ................
  423448:	ffffffff ffffffff ffffffff ffffffff     ................
  423458:	ffffffff ffffffff ffffffff ffffffff     ................
  423468:	ffffffff ffffffff ffffffff ffffffff     ................
  423478:	ffffffff ffffffff ffffffff ffffffff     ................
  423488:	ffffffff ffffffff ffffffff ffffffff     ................
  423498:	ffffffff ffffffff ffffffff ffffffff     ................
  4234a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4234b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4234c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4234d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4234e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4234f8:	ffffffff ffffffff ffffffff ffffffff     ................
  423508:	ffffffff ffffffff ffffffff ffffffff     ................
  423518:	ffffffff ffffffff ffffffff ffffffff     ................
  423528:	ffffffff ffffffff ffffffff ffffffff     ................
  423538:	ffffffff ffffffff ffffffff ffffffff     ................
  423548:	ffffffff ffffffff ffffffff ffffffff     ................
  423558:	ffffffff ffffffff ffffffff ffffffff     ................
  423568:	ffffffff ffffffff ffffffff ffffffff     ................
  423578:	ffffffff ffffffff ffffffff ffffffff     ................
  423588:	ffffffff ffffffff ffffffff ffffffff     ................
  423598:	ffffffff ffffffff ffffffff ffffffff     ................
  4235a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4235b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4235c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4235d8:	454c4449 00000000 51726d54 00000000     IDLE....TmrQ....
  4235e8:	20726d54 00637653 2074754f 6d20666f     Tmr Svc.Out of m
  4235f8:	726f6d65 00000079 0000ffff 4c4c554e     emory.......NULL
  423608:	696f7020 7265746e 00000000 6f5f766c      pointer....lv_o
  423618:	00006a62 0000ffff 640a6f4e 00617461     bj......No.data.

00423628 <_lv_bpp1_opa_table>:
  423628:	0000ff00                                ....

0042362c <_lv_bpp2_opa_table>:
  42362c:	ffaa5500                                .U..

00423630 <_lv_bpp4_opa_table>:
  423630:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

00423640 <_lv_bpp8_opa_table>:
  423640:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  423650:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  423660:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  423670:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  423680:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  423690:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  4236a0:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  4236b0:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  4236c0:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  4236d0:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  4236e0:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  4236f0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  423700:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  423710:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  423720:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  423730:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00423740 <wcorr.10557>:
  423740:	81808080 83828281 87868584 8d8c8a89     ................
  423750:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  423760:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  423770:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  423780:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  423790:	006e6962                                bin.

00423794 <cmaps>:
  423794:	00000020 0001005f 00000000 00000000      ..._...........
  4237a4:	00020000 000000b0 0060f7f3 00426b28     ..........`.(kB.
  4237b4:	00000000 0003003b                       ....;...

004237bc <glyph_dsc>:
	...
  4237c4:	03c00000 00000000 03c00000 00000a03     ................
  4237d4:	0580000f 05000505 09d0001c 00000a0a     ................
  4237e4:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  4237f4:	09a000ce ff000b0a 02f00105 05000503     ................
  423804:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  423814:	05a00145 05000606 08200157 02000708     E.......W. .....
  423824:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  423834:	03300183 00000303 04f00188 ffff0e07     ..0.............
  423844:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  423854:	081001fa 00000a08 08000222 00000a08     ........".......
  423864:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  423874:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  423884:	090002f9 00000a09 08a00326 00000a08     ........&.......
  423894:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  4238a4:	0820036b 01000808 0820038b 02000608     k. ....... .....
  4238b4:	082003a3 01000808 080003c3 00000a08     .. .............
  4238c4:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  4238d4:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  4238e4:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  4238f4:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  423904:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  423914:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  423924:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  423934:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  423944:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  423954:	0a300764 00010a09 08b00791 00000a09     d.0.............
  423964:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  423974:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  423984:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  423994:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  4239a4:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  4239b4:	0830099e 02010607 070009b3 ff000107     ..0.............
  4239c4:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  4239d4:	099009dc 00010b08 08000a08 00000808     ................
  4239e4:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  4239f4:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  423a04:	09900acd 00010b08 03e00af9 00010b02     ................
  423a14:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  423a24:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  423a34:	09900b92 00010808 08e00bb2 00000809     ................
  423a44:	09900bd6 fd010b08 09900c02 fd000b09     ................
  423a54:	05c00c34 00010805 07000c48 00000807     4.......H.......
  423a64:	05d00c64 00000a06 09800c82 00010808     d...............
  423a74:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  423a84:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  423a94:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  423aa4:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  423ab4:	08200dbc 03000308 05e00dc8 06000506     .. .............
  423ac4:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  423ad4:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  423ae4:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  423af4:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  423b04:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  423b14:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  423b24:	070011de ff000c07 0a801208 ff000c0b     ................
  423b34:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  423b44:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  423b54:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  423b64:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  423b74:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  423b84:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  423b94:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  423ba4:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  423bb4:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  423bc4:	11801801 00000b12 0e001864 00000b0e     ........d.......
  423bd4:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  423be4:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  423bf4:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  423c04:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  423c14:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  423c24:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  423c34:	11801d3e 00000a12 11801d98 00000a12     >...............
  423c44:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  423c54:	11801ea6 00000a12 11801f00 ff000c12     ................
  423c64:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  423c74:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  423c84:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

00423c94 <gylph_bitmap>:
  423c94:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  423ca4:	88f09109 f080081f 00000088 3c200d00     .............. <
  423cb4:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  423cc4:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  423cd4:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  423ce4:	00000070 0000000e 0000e000 30eaef19     p..............0
  423cf4:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  423d04:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  423d14:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  423d24:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  423d34:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  423d44:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  423d54:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  423d64:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  423d74:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  423d84:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  423d94:	00000000 f0011f00 00f0001f 0bf10300     ................
  423da4:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  423db4:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  423dc4:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  423dd4:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  423de4:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  423df4:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  423e04:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  423e14:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  423e24:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  423e34:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  423e44:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  423e54:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  423e64:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  423e74:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  423e84:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  423e94:	0001c07e 0000f106 0000f006 0000900d     ~...............
  423ea4:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  423eb4:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  423ec4:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  423ed4:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  423ee4:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  423ef4:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  423f04:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  423f14:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  423f24:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  423f34:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  423f44:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  423f54:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  423f64:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  423f74:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  423f84:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  423f94:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  423fa4:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  423fb4:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  423fc4:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  423fd4:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  423fe4:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  423ff4:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  424004:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  424014:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  424024:	00303333 00000000 1f000000 03f3ffff     330.............
  424034:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  424044:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  424054:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  424064:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  424074:	00000000 0000800b 0000900c daef6c00     .............l..
  424084:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  424094:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  4240a4:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  4240b4:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  4240c4:	00e50190 00000000 10a43d00 00000028     .........=..(...
  4240d4:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  4240e4:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  4240f4:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  424104:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  424114:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  424124:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  424134:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  424144:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  424154:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  424164:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  424174:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  424184:	0000008e 00008eda 008e9d00 8e9d0000     ................
  424194:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  4241a4:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  4241b4:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  4241c4:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  4241d4:	8e414444 8e000000 8e000000 8f000000     DDA.............
  4241e4:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  4241f4:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  424204:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  424214:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  424224:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  424234:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  424244:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  424254:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  424264:	00bc4404 00c00900 00009c00 0000c009     .D..............
  424274:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  424284:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  424294:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  4242a4:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  4242b4:	00008ea0 00008e00 00008e00 00008e00     ................
  4242c4:	00008e00 00008e00 00008e00 00008e00     ................
  4242d4:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  4242e4:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  4242f4:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  424304:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  424314:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  424324:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  424334:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  424344:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  424354:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  424364:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  424374:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  424384:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  424394:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  4243a4:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  4243b4:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  4243c4:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  4243d4:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  4243e4:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  4243f4:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  424404:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  424414:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  424424:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  424434:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  424444:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  424454:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  424464:	00c00900 009c0000 c0090000 9c000000     ................
  424474:	09000000 000000c0 9c00009c a90b0000     ................
  424484:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  424494:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  4244a4:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  4244b4:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  4244c4:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  4244d4:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  4244e4:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  4244f4:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  424504:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  424514:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  424524:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  424534:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  424544:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  424554:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  424564:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  424574:	e8000090 0000f105 00e6f305 fd0c0000     ................
  424584:	00000000 0000403f 00f30200 2f000000     ....?@........./
  424594:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  4245a4:	030000f3 010000f6 000000ea 000000cc     ................
  4245b4:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  4245c4:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  4245d4:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  4245e4:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  4245f4:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  424604:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  424614:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  424624:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  424634:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  424644:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  424654:	b05d740b f0040000 f2eece04 f214821f     .t].............
  424664:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  424674:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  424684:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  424694:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  4246a4:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  4246b4:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  4246c4:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  4246d4:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  4246e4:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  4246f4:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  424704:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  424714:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  424724:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  424734:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  424744:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  424754:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  424764:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  424774:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  424784:	0000baf5 0000baf5 00a8baf5 babababa     ................
  424794:	babababa 00b00a00 00000099 0a00ab00     ................
  4247a4:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  4247b4:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  4247c4:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  4247d4:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  4247e4:	baf30700 babababa babababa 9eb9baba     ................
  4247f4:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  424804:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  424814:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  424824:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  424834:	00baf400 00baf500 00baf500 00baf500     ................
  424844:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  424854:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  424864:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  424874:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  424884:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  424894:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  4248a4:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  4248b4:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  4248c4:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  4248d4:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  4248e4:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  4248f4:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  424904:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  424914:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  424924:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  424934:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  424944:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  424954:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  424964:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  424974:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  424984:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  424994:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  4249a4:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  4249b4:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  4249c4:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  4249d4:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  4249e4:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  4249f4:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  424a04:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  424a14:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  424a24:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  424a34:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  424a44:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  424a54:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  424a64:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  424a7c:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  424a8c:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  424a9c:	0000ed10 000094af 0a00d00e 000000f1     ................
  424aac:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  424abc:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  424acc:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  424adc:	000000a3 18500000 84888888 ddbffa05     ......P.........
  424aec:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  424afc:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  424b0c:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  424b1c:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  424b2c:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  424b3c:	2fffffff ffffffff ff0effef 01feffff     .../............
  424b4c:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  424b5c:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  424b6c:	87688688 88888807 1fffff86 ffffffff     ..h.............
  424b7c:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  424b8c:	01000000 00000050 f81d0000 00000000     ....P...........
  424b9c:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  424bac:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  424bbc:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  424bcc:	000000e2 207d0000 00000000 00000000     ......} ........
  424bdc:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  424bec:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  424bfc:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  424c0c:	00006003 00001100 00000000 000000ff     .`..............
  424c1c:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  424c2c:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  424c3c:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  424c4c:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  424c5c:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  424c6c:	0050fdff 44020000 00000020 00000000     ..P....D .......
  424c7c:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  424c8c:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  424c9c:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  424cac:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  424cbc:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  424ccc:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  424cdc:	00004077 03000000 00410310 9f000000     w@........A.....
  424cec:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  424cfc:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  424d0c:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  424d1c:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  424d2c:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  424d3c:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  424d4c:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  424d5c:	0c000000 0000c0ff ff0c0000 000000c0     ................
  424d6c:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  424d7c:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  424d8c:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  424d9c:	ffffffff ffffffff faffffff ccaccfb3     ................
  424dac:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  424dbc:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  424dcc:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  424ddc:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  424dec:	ffff8b98 fffffffc ffffffff fffffffc     ................
  424dfc:	ffffffff ffff9ffb ffffffff 000000f6     ................
  424e0c:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  424e1c:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  424e2c:	0100c06f 8effffff de010050 0000edee     o.......P.......
  424e3c:	00000000 22222200 21000000 10ffffff     ....."""...!....
  424e4c:	fff80800 0010bcfb fcfff41e df010010     ................
  424e5c:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  424e6c:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  424e7c:	fffffffd ffffffff ffffffff ffffffff     ................
  424e8c:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  424e9c:	70020000 02000000 000000ef 00f0ef02     ...p............
  424eac:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  424ebc:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  424ecc:	05000000 000000ff 00c00500 00000000     ................
  424edc:	00000000 07000000 00000070 05007002     ........p....p..
  424eec:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  424efc:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  424f0c:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  424f1c:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  424f2c:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  424f3c:	000010bf 09000000 000000e3 02000000     ................
  424f4c:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  424f5c:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  424f6c:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  424f7c:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  424f8c:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  424f9c:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  424fac:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  424fbc:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  424fcc:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  424fdc:	00000000 00000200 0c000000 000020fb     ............. ..
  424fec:	ffff0000 00000090 e6ffff0f ff000000     ................
  424ffc:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  42500c:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  42501c:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  42502c:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  42503c:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  42504c:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  42505c:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  42506c:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  42507c:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  42508c:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  42509c:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  4250ac:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  4250bc:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  4250cc:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  4250dc:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  4250ec:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  4250fc:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  42510c:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  42511c:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  42512c:	0000fa03 00000000 00120000 00000000     ................
  42513c:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  42514c:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  42515c:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  42516c:	99999999 88055099 88888888 ffff0f70     .....P......p...
  42517c:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  42518c:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  42519c:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  4251ac:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  4251bc:	00f4cf00 e0cf0000 a4000000 00000000     ................
  4251cc:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  4251dc:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  4251ec:	ff080090 ff080090 ff080090 ff020090     ................
  4251fc:	07000090 00000080 50040000 00000000     ...........P....
  42520c:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  42521c:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  42522c:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  42523c:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  42524c:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  42525c:	0f989999 ffffffff ffdff3ff ffffffff     ................
  42526c:	00000020 00000000 64560100 00000000      .........Vd....
  42527c:	effebf03 000010f9 0310fa7f 0800e4df     ................
  42528c:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  42529c:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  4252ac:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  4252bc:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  4252d4:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  4252e4:	ef040000 ffefffac 00000091 00a1ff1c     ................
  4252f4:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  425304:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  425314:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  425324:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  425334:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  425344:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  42535c:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  42536c:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  42537c:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  42538c:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  42539c:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  4253ac:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  4253bc:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  4253cc:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  4253dc:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  4253ec:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  4253fc:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  42540c:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  42541c:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  42542c:	07000000 000000a0 b0ff0800 08000000     ................
  42543c:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  42544c:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  42545c:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  42546c:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  42547c:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  42548c:	00000000 00001300 30080000 00000000     ...........0....
  42549c:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  4254ac:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  4254bc:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  4254cc:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  4254dc:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  4254ec:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  4254fc:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  42550c:	ffffffb6 ffffffff ffffffff ffffffff     ................
  42551c:	ffffffff ffffffff ffffffff ffffffff     ................
  42552c:	ffffffff ffffffff ffffffff ffffffff     ................
  42553c:	ffafffff ffffffff 000000f9 00000000     ................
  42554c:	dd010000 00000010 d1ff1d00 01000000     ................
  42555c:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  42556c:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  42557c:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  42558c:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  42559c:	ffffefdd ffffffff accfb3fa cccccccc     ................
  4255ac:	0000cacc 02000000 00000000 ff040000     ................
  4255bc:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  4255cc:	00000000 c0ffff06 00000000 00f7ff08     ................
  4255dc:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  4255ec:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  4255fc:	00fbef15 ffffef00 0000faff ffffff0b     ................
  42560c:	000000f7 a2ffff7f 02000000 000085ba     ................
  42561c:	04000000 00000086 faff0610 d1df0200     ................
  42562c:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  42563c:	0000fadf fbffff8d 06000000 0000fdff     ................
  42564c:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  42565c:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  42566c:	10da08f1 00620200 00000000 00000000     ......b.........
  42567c:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  42568c:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  42569c:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  4256ac:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  4256bc:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  4256cc:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  4256dc:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  4256ec:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  4256fc:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  42570c:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  42571c:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  42572c:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  42573c:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  42574c:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  42575c:	7f000000 000000f3 0000a0bf 0010ff00     ................
  42576c:	00f80300 c0030000 00000000 00000020     ............ ...
  42577c:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  42578c:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  42579c:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  4257ac:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  4257bc:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  4257cc:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  4257dc:	00000000 0000af00 8f010000 000030fa     .............0..
  4257ec:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  4257fc:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  42580c:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  42581c:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  42582c:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  42583c:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  42584c:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  42585c:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  42586c:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  42587c:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  42588c:	ffffffff 0000f6ff 00000000 00000002     ................
  42589c:	05000000 0000b0df ef070000 0000d0ff     ................
  4258ac:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  4258bc:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  4258cc:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  4258dc:	fbff0e00 00000000 f4ff0e00 00000000     ................
  4258ec:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  4258fc:	00fd0d00 00000000 00b30400 55350000     ..............5U
  42590c:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  42591c:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  42592c:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  42593c:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  42594c:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  42595c:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  42596c:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  42597c:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  42598c:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  42599c:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  4259ac:	00000000 00960200 00000000 ff0d0000     ................
  4259bc:	00000050 0e000000 000060ff 00000000     P........`......
  4259cc:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  4259dc:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  4259ec:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  4259fc:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  425a0c:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  425a1c:	ffffffff 0050ffff 00000000 00000000     ......P.........
  425a2c:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  425a3c:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  425a4c:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  425a5c:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  425a6c:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  425a7c:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  425a8c:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  425a9c:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  425aac:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  425abc:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  425acc:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  425adc:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  425aec:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  425afc:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  425b0c:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  425b1c:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  425b2c:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  425b3c:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  425b4c:	000000fc 0f000000 0000fcf7 00000000     ................
  425b5c:	00fcfa0c 00000000 fcfa0100 00000000     ................
  425b6c:	fa070000 000000fc 0f000000 bbbbfefa     ................
  425b7c:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  425b98:	0000b207 00000000 00fadf0a 00000000     ................
  425ba8:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  425bb8:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  425bc8:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  425bd8:	00100000 00000000 00e83ec4 00000000     .........>......
  425be8:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  425c00:	10010000 07000000 00b3ffef 8ffdaf00     ................
  425c10:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  425c20:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  425c30:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  425c40:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  425c50:	10febffe dcac0300 00000081 00004334     ............4C..
  425c60:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  425c70:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  425c80:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  425c90:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  425ca0:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  425cb0:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  425cc0:	00200100 00000000 0050ff04 02000000     .. .......P.....
  425cd0:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  425ce0:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  425cf0:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  425d00:	ffffff04 040000b0 b0ffffff bf000000     ................
  425d10:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  425d20:	000000b0 60a80900 00000000 17000000     .......`........
  425d30:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  425d40:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  425d50:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  425d60:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  425d70:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  425d80:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  425d90:	00000000 ef030000 03e2ffff bfcefbfb     ................
  425da0:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  425db0:	fffffffa ffafffff faffffff ffffffff     ................
  425dc0:	ffffafff fffaffff ffffffff ffffffaf     ................
  425dd0:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  425de0:	0000a8aa 00000000 00000300 00000000     ................
  425df0:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  425e00:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  425e10:	ffffff8f 00fdffff 0000f77f 00000000     ................
  425e20:	0000606f 00000000 00000030 00000000     o`......0.......

00425e30 <kern_class_values>:
  425e30:	00000100 00000000 00000100 00000002     ................
  425e40:	00000200 00000000 00000000 00000000     ................
  425e50:	00010000 00000000 00000000 00000000     ................
  425e60:	000a0100 0000fb06 f3f40000 04050b02     ................
  425e70:	010b02f7 00070209 00000000 00000000     ................
  425e80:	020d0000 000000fe 00000000 00000000     ................
  425e90:	f9000400 00000000 0404fc00 00fe0000     ................
  425ea0:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  425eb0:	fe0000fd 0000fc00 00000000 fe000000     ................
  425ec0:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  425ed0:	04070202 000004fc 000000f3 00000000     ................
  425ee0:	00000000 000000f8 00000000 00000000     ................
  425ef0:	fa000000 f700f5fd 000000fe 00090000     ................
  425f00:	01fffef9 0000fc00 0000effe 00000000     ................
  425f10:	00000000 09feee00 00000000 00000000     ................
  425f20:	00000000 000000f7 00000000 07000000     ................
  425f30:	00000200 000000fc 00000000 00000000     ................
  425f40:	00000000 02090000 00000001 00000000     ................
	...
  425f70:	000000f8 00000000 00000000 00000000     ................
  425f80:	00000000 02000000 fe070204 fe040000     ................
  425f90:	0602e1f9 00fd0004 00070008 00eb0007     ................
  425fa0:	070007fd 000204fe 00fe0100 0012fc00     ................
  425fb0:	00070012 07040309 f8000000 00000000     ................
  425fc0:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  425fd8:	0000f100 00000000 00000000 00000000     ................
  425fe8:	00f40100 000000f2 1600fe00 0202fdfd     ................
  425ff8:	02fd00fe 00f40000 00000000 00000000     ................
  426008:	00ea0000 00000002 00000000 00000000     ................
  426018:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  426028:	0300f100 00fd00fb 00000000 00000000     ................
  426038:	06000000 0000e507 00000000 00000000     ................
  426048:	000b0000 00000002 02020000 ff00fcfd     ................
  426058:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  426068:	00fcf9f9 00fc00fc fe000000 00020000     ................
  426078:	0100fe02 02000000 000000fe ff0202fe     ................
  426088:	fc000000 0000ff00 01000000 00fe0300     ................
  426098:	00fc00fd 0700fe00 00fe0000 00000000     ................
  4260a8:	fefe01ff 00fe0000 000000fe 00000000     ................
  4260b8:	ffff0000 00fdfe00 00000000 fe000001     ................
  4260c8:	fefefe00 00000000 00000000 0000ff00     ................
  4260d8:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  4260e8:	fffa0006 f5ff00fd f402fe02 01000002     ................
  4260f8:	fef400f4 f500feed 00060400 00000003     ................
  426108:	fc000000 00f900fd 00fe0000 00fe0000     ................
  426118:	00000000 ff00ffff 000000fd 00000000     ................
  426128:	fe00fefe 0000fefd 000000fe 00000000     ................
  426138:	00000000 fd00fefe fc00fe00 fd000002     ................
  426148:	00020201 00000000 0000fe00 02000000     ................
  426158:	00fe0000 00fdfefe 00000000 00020000     ................
  426168:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  426178:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  426188:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  426198:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  4261a8:	02000200 00000000 00000000 fe000000     ................
  4261b8:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  4261c8:	00fe0000 01000000 000000ff 00000002     ................
  4261d8:	00000000 00000b00 00000000 00000002     ................
  4261e8:	000000fe 00000000 00000000 000200fc     ................
	...
  426204:	000000fe 000000fc 00f9f500 f5fd0000     ................
  426214:	02fe0000 0000fa00 00000000 00000000     ................
  426224:	fc0000fc 00000000 00000000 00000000     ................
  426234:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  426244:	00000000 00f90000 fefd00fe f9fafb00     ................
  426254:	00fc00fe 000000f9 00001200 fd000001     ................
  426264:	f6000200 00000000 07fceb00 00f7fe07     ................
  426274:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  426284:	f30000f7 00000d00 000000ff fafeffff     ................
  426294:	00eb00f9 00000000 00000000 00000001     ................
	...
  4262b0:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  4262c8:	00ff0000 040000fc fb0003ff fafffe02     ................
  4262d8:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  4262e8:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  4262f8:	00000002 00000000 0002fc00 fdfe00fd     ................
  426308:	fefefef9 fffdfeff 00000000 fefefe00     ................
  426318:	00000000 fe00fe03 fe000000 fdfefefd     ................
  426328:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  426338:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  426348:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  426358:	0007fcfc 00000000 00000000 00000002     ................
	...
  42637c:	000000fc 00000000 00000000 00000000     ................
	...
  4263a8:	000000fe 00000000 00000000 00000000     ................
	...
  4263c4:	fefe0000 00000000 00000000 00000000     ................
  4263d4:	fd0000fd fefe0000 00000000 000000fe     ................
  4263e4:	0000ff00 fe000000 00000000 00fc00fd     ................
  4263f4:	00f90000 0004fb02 0000f5fe f700fefb     ................
  426404:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  426414:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  426424:	fef00000 f8fb0507 00f90100 04fefef5     ................
  426434:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  426444:	0000fe00 feff0000 f100fef7 00000000     ................
  426454:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  426464:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  426474:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  426484:	03000000 09fc0200 fdfefe00 00000000     ................
  426494:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  4264a4:	00000009 00001200 fd000001 00000200     ................
	...
  4264c0:	0000fcfe ff000000 fe000000 fc0000fe     ................
  4264d0:	fc0000fe 00ff0400 00000000 00000100     ................
  4264e0:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  4264f0:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  426500:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  426510:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  426520:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  426530:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  426540:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  426550:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  426560:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  426570:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  426580:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  426590:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  4265a0:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  4265b0:	04fc0204 fff90000 0100ff00 0000fe01     ................
  4265c0:	00000000 000000fe 00070200 0000fd00     ................
  4265d0:	fefe0000 000000fd 00000201 00020000     ................
  4265e0:	000900fe fd010104 00000400 00000200     ................
	...
  4265f8:	06000700 00000000 00000000 00000000     ................
  426608:	00f30000 070004fe 03160000 0202fcfc     ................
  426618:	00f501fe 00f30b00 00000000 00000000     ................
  426628:	09f10000 0000001f 00000000 00000000     ................
  426638:	0000f300 00000000 00000000 00000000     ................
	...
  426654:	fc0000fc 000000fe 00000000 00000000     ................
	...
  42666c:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  42667c:	02020000 000000fd 00000000 00000000     ................
  42668c:	000006e3 00000000 00000000 00000000     ................
  42669c:	fa000000 fa000000 00000000 0000fffb     ................
  4266ac:	fd00fb00 0000f500 00000000 00000000     ................
  4266bc:	0000f100 00010000 00000000 0000fe00     ................
  4266cc:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  4266dc:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  4266ec:	00f10000 0000fffa 00000000 fcfd0000     ................
  4266fc:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  42670c:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  42671c:	f5fe00fb fe0000fe 000000fe fe000200     ................
  42672c:	0004fefc 00000000 00000000 00000000     ................
	...
  426758:	00030000 00000000 fe00fb00 fc000000     ................
  426768:	00000002 00fcfefa fe00fa00 0000f500     ................
  426778:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  426788:	00000000 fffdfe00 000001fd 0700fd04     ................
  426798:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  4267b0:	0b0e0000 fe00fefc 00120a12 00020000     ................
  4267c0:	00000800 000000fc 00000000 00fe0000     ................
  4267d0:	00000000 03000000 00000000 f7fefded     ................
  4267e0:	f10000f5 00000000 00000000 00000000     ................
  4267f0:	00000000 0000fc00 00000000 fe000000     ................
	...
  426808:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  426828:	000000fe fe0002fb f9020402 02fe0000     ................
  426838:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  426848:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  426860:	0000fe00 00000000 00030000 ed000000     ................
  426870:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  426888:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  426898:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  4268a8:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  4268c0:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  4268d8:	000000f3 00000000 00000000 fd00fefe     ................
  4268e8:	00000000 fc0000fe fc0002fe fa00fefc     ................
  4268f8:	fdfefbfe 0000fc00 00000000 00000000     ................
  426908:	0700f100 00fc0000 fd000000 0000fe00     ................
  426918:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  426928:	020302fa fe070207 f70000fa faf90000     ................
  426938:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  426948:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  426958:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  426968:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  426978:	0002fe00 fe000000 fd020000 fd000001     ................
  426988:	00fd00fe 00000000 00000000 00000000     ................
  426998:	00000000 000500f2 0000fe00 00000000     ................
  4269a8:	0000fefe 05000400 00000000 01f3f200     ................
  4269b8:	f704070a 08000902 00000400 00000000     ................
  4269c8:	00000000 00000c00 00000000 00000000     ................
	...

004269e0 <kern_classes>:
  4269e0:	00425e30 004269f0 00426a8c 0000313d     0^B..iB..jB.=1..

004269f0 <kern_left_class_mapping>:
  4269f0:	02010000 05040300 08070602 0a090a09     ................
  426a00:	0d000c0b 11100f0e 140c1312 00000014     ................
  426a10:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  426a20:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  426a30:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  426a40:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  426a50:	0000093d 00000000 00000000 00000000     =...............
	...

00426a8c <kern_right_class_mapping>:
  426a8c:	02010000 05040300 08070602 0a090a09     ................
  426a9c:	0e0d0c0b 0c11100f 15141312 00000015     ................
  426aac:	19181716 19191917 1a191917 19191919     ................
  426abc:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  426acc:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  426adc:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  426aec:	00000931 00000000 00000000 00000000     1...............
	...

00426b28 <unicode_list_1>:
  426b28:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  426b38:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  426b48:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  426b58:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  426b68:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  426b78:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  426b88:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  426b98:	f712f4aa 0000f7f2 0000ffff              ............

00426ba4 <lv_anim_path_def>:
  426ba4:	00414841 00000000 0000ffff              AHA.........

00426bb0 <hex.5775>:
  426bb0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  426bc0:	00000000                                ....

00426bc4 <sin0_90_table>:
  426bc4:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  426bd4:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  426be4:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  426bf4:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  426c04:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  426c14:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  426c24:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  426c34:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  426c44:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  426c54:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  426c64:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  426c74:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  426c84:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  426c94:	7461636f 20612065 2077656e 66667562     ocate a new buff
  426ca4:	28207265 72636e69 65736165 756f7920     er (increase you
  426cb4:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  426cc4:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  426cd4:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  426ce4:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  426cf4:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  426d04:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  426d14:	008c80ef 695f766c 0000676d 0001c200     ....lv_img......
  426d24:	000000c0 00000800 00000000 0000ffff     ................

00426d34 <ecg>:
  426d34:	0000050a 00000508 00000506 00000505     ................
  426d44:	00000503 00000501 00000500 000004fe     ................
  426d54:	000004fc 000004fb 000004f9 000004f8     ................
  426d64:	000004f6 000004f5 000004f3 000004f2     ................
  426d74:	000004f1 000004ef 000004ee 000004ed     ................
  426d84:	000004eb 000004ea 000004e9 000004e7     ................
  426d94:	000004e6 000004e5 000004e3 000004e2     ................
  426da4:	000004e1 000004e0 000004df 000004de     ................
  426db4:	000004dd 000004dc 000004db 000004da     ................
  426dc4:	000004d9 000004d8 000004d8 000004d7     ................
  426dd4:	000004d7 000004d6 000004d6 000004d5     ................
  426de4:	000004d5 000004d5 000004d4 000004d4     ................
  426df4:	000004d4 000004d4 000004d3 000004d3     ................
  426e04:	000004d3 000004d3 000004d2 000004d2     ................
  426e14:	000004d1 000004d1 000004d0 000004d0     ................
  426e24:	000004cf 000004ce 000004cd 000004cc     ................
  426e34:	000004cb 000004ca 000004c8 000004c7     ................
  426e44:	000004c6 000004c4 000004c3 000004c2     ................
  426e54:	000004c1 000004bf 000004be 000004bd     ................
  426e64:	000004bc 000004bb 000004ba 000004b9     ................
  426e74:	000004b8 000004b8 000004b7 000004b7     ................
  426e84:	000004b6 000004b6 000004b6 000004b6     ................
  426e94:	000004b6 000004b6 000004b6 000004b6     ................
  426ea4:	000004b6 000004b6 000004b6 000004b6     ................
  426eb4:	000004b6 000004b5 000004b5 000004b5     ................
  426ec4:	000004b5 000004b5 000004b4 000004b4     ................
  426ed4:	000004b3 000004b2 000004b2 000004b1     ................
  426ee4:	000004b0 000004af 000004ae 000004ad     ................
  426ef4:	000004ad 000004ab 000004aa 000004a9     ................
  426f04:	000004a8 000004a7 000004a6 000004a5     ................
  426f14:	000004a3 000004a2 000004a1 000004a0     ................
  426f24:	0000049f 0000049d 0000049c 0000049b     ................
  426f34:	0000049a 00000498 00000497 00000496     ................
  426f44:	00000495 00000493 00000492 00000491     ................
  426f54:	00000490 0000048e 0000048d 0000048c     ................
  426f64:	0000048b 0000048a 00000489 00000487     ................
  426f74:	00000486 00000485 00000484 00000483     ................
  426f84:	00000482 00000480 0000047f 0000047e     ............~...
  426f94:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  426fa4:	00000476 00000474 00000472 00000470     v...t...r...p...
  426fb4:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  426fc4:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  426fd4:	00000459 00000456 00000453 00000450     Y...V...S...P...
  426fe4:	0000044d 00000449 00000446 00000443     M...I...F...C...
  426ff4:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  427004:	00000431 0000042e 0000042a 00000427     1.......*...'...
  427014:	00000423 00000420 0000041c 00000418     #... ...........
  427024:	00000415 00000411 0000040d 00000409     ................
  427034:	00000405 00000401 000003fd 000003f9     ................
  427044:	000003f5 000003f1 000003ec 000003e8     ................
  427054:	000003e4 000003df 000003da 000003d6     ................
  427064:	000003d1 000003cc 000003c7 000003c2     ................
  427074:	000003bd 000003b8 000003b3 000003ad     ................
  427084:	000003a8 000003a2 0000039d 00000397     ................
  427094:	00000391 0000038b 00000385 0000037f     ................
  4270a4:	00000379 00000373 0000036d 00000366     y...s...m...f...
  4270b4:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  4270c4:	00000346 0000033f 00000339 00000332     F...?...9...2...
  4270d4:	0000032b 00000325 0000031e 00000318     +...%...........
  4270e4:	00000311 0000030b 00000305 000002fe     ................
  4270f4:	000002f8 000002f2 000002ec 000002e6     ................
  427104:	000002e1 000002db 000002d5 000002d0     ................
  427114:	000002ca 000002c5 000002bf 000002ba     ................
  427124:	000002b5 000002af 000002aa 000002a5     ................
  427134:	000002a0 0000029a 00000295 00000290     ................
  427144:	0000028a 00000285 00000280 0000027a     ............z...
  427154:	00000275 00000270 0000026a 00000265     u...p...j...e...
  427164:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  427174:	00000249 00000243 0000023d 00000237     I...C...=...7...
  427184:	00000232 0000022c 00000226 00000220     2...,...&... ...
  427194:	0000021a 00000214 0000020e 00000208     ................
  4271a4:	00000202 000001fc 000001f6 000001ef     ................
  4271b4:	000001e9 000001e3 000001dd 000001d7     ................
  4271c4:	000001d0 000001ca 000001c4 000001be     ................
  4271d4:	000001b8 000001b2 000001ab 000001a5     ................
  4271e4:	0000019f 00000199 00000193 0000018d     ................
  4271f4:	00000187 00000182 0000017c 00000176     ........|...v...
  427204:	00000170 0000016b 00000165 00000160     p...k...e...`...
  427214:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  427224:	00000146 00000142 0000013d 00000138     F...B...=...8...
  427234:	00000134 00000130 0000012c 00000128     4...0...,...(...
  427244:	00000124 00000120 0000011c 00000119     $... ...........
  427254:	00000115 00000112 0000010e 0000010a     ................
  427264:	00000107 00000103 00000100 000000fc     ................
  427274:	000000f8 000000f4 000000f0 000000ec     ................
  427284:	000000e8 000000e3 000000df 000000da     ................
  427294:	000000d5 000000d0 000000cb 000000c6     ................
  4272a4:	000000c0 000000bb 000000b6 000000b0     ................
  4272b4:	000000ab 000000a6 000000a1 0000009c     ................
  4272c4:	00000097 00000093 0000008e 0000008a     ................
  4272d4:	00000086 00000082 0000007e 0000007b     ........~...{...
  4272e4:	00000078 00000075 00000073 00000070     x...u...s...p...
  4272f4:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  427304:	00000066 00000064 00000062 00000060     f...d...b...`...
  427314:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  427324:	00000057 00000055 00000052 00000050     W...U...R...P...
  427334:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  427344:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  427354:	00000038 00000035 00000032 00000030     8...5...2...0...
  427364:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  427374:	00000024 00000023 00000021 0000001f     $...#...!.......
  427384:	0000001e 0000001d 0000001c 0000001b     ................
  427394:	0000001a 00000019 00000019 00000018     ................
  4273a4:	00000017 00000017 00000016 00000016     ................
  4273b4:	00000015 00000015 00000014 00000013     ................
  4273c4:	00000012 00000012 00000011 0000000f     ................
  4273d4:	0000000e 0000000d 0000000c 0000000a     ................
  4273e4:	00000009 00000007 00000006 00000005     ................
  4273f4:	00000004 00000003 00000002 00000001     ................
	...
  42741c:	00000001 00000002 00000004 00000005     ................
  42742c:	00000007 00000009 0000000b 0000000e     ................
  42743c:	00000010 00000013 00000016 00000019     ................
  42744c:	0000001b 0000001e 00000021 00000024     ........!...$...
  42745c:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  42746c:	00000031 00000033 00000036 00000038     1...3...6...8...
  42747c:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  42748c:	00000040 00000042 00000043 00000045     @...B...C...E...
  42749c:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  4274ac:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  4274bc:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  4274cc:	00000060 00000063 00000066 00000069     `...c...f...i...
  4274dc:	0000006c 00000070 00000073 00000076     l...p...s...v...
  4274ec:	00000079 0000007c 00000080 00000083     y...|...........
  4274fc:	00000086 00000089 0000008c 0000008f     ................
  42750c:	00000091 00000094 00000097 00000099     ................
  42751c:	0000009b 0000009e 000000a0 000000a2     ................
  42752c:	000000a4 000000a6 000000a8 000000aa     ................
  42753c:	000000ac 000000ae 000000b0 000000b3     ................
  42754c:	000000b5 000000b7 000000ba 000000bc     ................
  42755c:	000000bf 000000c1 000000c4 000000c7     ................
  42756c:	000000ca 000000cd 000000d0 000000d3     ................
  42757c:	000000d7 000000da 000000dd 000000e1     ................
  42758c:	000000e4 000000e8 000000eb 000000ef     ................
  42759c:	000000f2 000000f6 000000f9 000000fc     ................
  4275ac:	00000100 00000103 00000106 00000109     ................
  4275bc:	0000010d 00000110 00000113 00000116     ................
  4275cc:	00000119 0000011c 00000120 00000123     ........ ...#...
  4275dc:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  4275ec:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  4275fc:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  42760c:	00000154 00000158 0000015d 00000161     T...X...]...a...
  42761c:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  42762c:	00000179 0000017d 00000182 00000187     y...}...........
  42763c:	0000018b 00000190 00000195 00000199     ................
  42764c:	0000019e 000001a2 000001a6 000001aa     ................
  42765c:	000001ae 000001b3 000001b7 000001bb     ................
  42766c:	000001bf 000001c3 000001c7 000001cb     ................
  42767c:	000001cf 000001d3 000001d7 000001db     ................
  42768c:	000001df 000001e3 000001e8 000001ec     ................
  42769c:	000001f0 000001f5 000001fa 000001ff     ................
  4276ac:	00000203 00000208 0000020d 00000212     ................
  4276bc:	00000217 0000021d 00000222 00000227     ........"...'...
  4276cc:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  4276dc:	00000241 00000246 0000024b 00000250     A...F...K...P...
  4276ec:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  4276fc:	00000267 0000026b 00000270 00000274     g...k...p...t...
  42770c:	00000278 0000027d 00000281 00000285     x...}...........
  42771c:	00000289 0000028e 00000292 00000296     ................
  42772c:	0000029a 0000029f 000002a3 000002a7     ................
  42773c:	000002ac 000002b0 000002b5 000002b9     ................
  42774c:	000002be 000002c3 000002c7 000002cc     ................
  42775c:	000002d1 000002d6 000002db 000002e0     ................
  42776c:	000002e5 000002ea 000002ef 000002f4     ................
  42777c:	000002f9 000002fe 00000303 00000309     ................
  42778c:	0000030e 00000313 00000318 0000031d     ................
  42779c:	00000323 00000328 0000032d 00000333     #...(...-...3...
  4277ac:	00000338 0000033d 00000343 00000348     8...=...C...H...
  4277bc:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  4277cc:	00000363 00000368 0000036e 00000373     c...h...n...s...
  4277dc:	00000379 0000037e 00000384 00000389     y...~...........
  4277ec:	0000038f 00000394 0000039a 0000039f     ................
  4277fc:	000003a5 000003aa 000003b0 000003b5     ................
  42780c:	000003bb 000003c0 000003c6 000003cb     ................
  42781c:	000003d1 000003d6 000003dc 000003e1     ................
  42782c:	000003e6 000003ec 000003f1 000003f7     ................
  42783c:	000003fc 00000401 00000407 0000040c     ................
  42784c:	00000411 00000416 0000041c 00000421     ............!...
  42785c:	00000426 0000042c 00000431 00000436     &...,...1...6...
  42786c:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  42787c:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  42788c:	00000467 0000046d 00000472 00000478     g...m...r...x...
  42789c:	0000047e 00000483 00000489 0000048f     ~...............
  4278ac:	00000494 0000049a 000004a0 000004a6     ................
  4278bc:	000004ab 000004b1 000004b7 000004bd     ................
  4278cc:	000004c3 000004c8 000004ce 000004d4     ................
  4278dc:	000004da 000004df 000004e5 000004eb     ................
  4278ec:	000004f1 000004f7 000004fc 00000502     ................
  4278fc:	00000508 0000050e 00000514 0000051a     ................
  42790c:	00000520 00000526 0000052c 00000532      ...&...,...2...
  42791c:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  42792c:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  42793c:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  42794c:	00000584 0000058b 00000592 00000598     ................
  42795c:	0000059f 000005a6 000005ac 000005b3     ................
  42796c:	000005ba 000005c1 000005c8 000005cf     ................
  42797c:	000005d6 000005dd 000005e4 000005ec     ................
  42798c:	000005f3 000005fa 00000601 00000609     ................
  42799c:	00000610 00000617 0000061f 00000626     ............&...
  4279ac:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  4279bc:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  4279cc:	0000066a 00000672 0000067a 00000681     j...r...z.......
  4279dc:	00000689 00000691 00000699 000006a1     ................
  4279ec:	000006a9 000006b1 000006b9 000006c1     ................
  4279fc:	000006c9 000006d1 000006d9 000006e1     ................
  427a0c:	000006ea 000006f2 000006fb 00000703     ................
  427a1c:	0000070c 00000715 0000071d 00000726     ............&...
  427a2c:	0000072f 00000738 00000740 00000749     /...8...@...I...
  427a3c:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  427a4c:	00000775 0000077e 00000787 00000790     u...~...........
  427a5c:	00000798 000007a1 000007aa 000007b2     ................
  427a6c:	000007bb 000007c3 000007cc 000007d4     ................
  427a7c:	000007dc 000007e5 000007ed 000007f6     ................
  427a8c:	000007fe 00000806 0000080f 00000817     ................
  427a9c:	00000820 00000829 00000831 0000083a      ...)...1...:...
  427aac:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  427abc:	00000867 00000870 00000879 00000883     g...p...y.......
  427acc:	0000088c 00000895 0000089e 000008a7     ................
  427adc:	000008b0 000008b9 000008c2 000008cb     ................
  427aec:	000008d3 000008dc 000008e4 000008ec     ................
  427afc:	000008f4 000008fc 00000903 0000090a     ................
  427b0c:	00000911 00000918 0000091f 00000925     ............%...
  427b1c:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  427b2c:	00000943 00000949 0000094e 00000954     C...I...N...T...
  427b3c:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  427b4c:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  427b5c:	00000985 0000098b 00000990 00000996     ................
  427b6c:	0000099b 000009a1 000009a6 000009ac     ................
  427b7c:	000009b1 000009b7 000009bc 000009c1     ................
  427b8c:	000009c6 000009cb 000009cf 000009d4     ................
  427b9c:	000009d8 000009dc 000009e0 000009e4     ................
  427bac:	000009e8 000009eb 000009ee 000009f1     ................
  427bbc:	000009f4 000009f7 000009f9 000009fb     ................
  427bcc:	000009fe 00000a00 00000a02 00000a03     ................
  427bdc:	00000a05 00000a07 00000a08 00000a0a     ................
  427bec:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  427bfc:	00000a0f 00000a10 00000a11 00000a12     ................
  427c0c:	00000a13 00000a14 00000a14 00000a15     ................
  427c1c:	00000a16 00000a16 00000a16 00000a17     ................
  427c2c:	00000a17 00000a17 00000a17 00000a17     ................
  427c3c:	00000a16 00000a16 00000a16 00000a15     ................
  427c4c:	00000a15 00000a14 00000a13 00000a12     ................
  427c5c:	00000a11 00000a10 00000a0f 00000a0e     ................
  427c6c:	00000a0c 00000a0b 00000a09 00000a08     ................
  427c7c:	00000a06 00000a04 00000a02 00000a01     ................
  427c8c:	000009ff 000009fc 000009fa 000009f8     ................
  427c9c:	000009f6 000009f4 000009f1 000009ef     ................
  427cac:	000009ec 000009ea 000009e7 000009e5     ................
  427cbc:	000009e2 000009e0 000009dd 000009db     ................
  427ccc:	000009d8 000009d6 000009d3 000009d1     ................
  427cdc:	000009ce 000009cc 000009c9 000009c7     ................
  427cec:	000009c4 000009c2 000009c0 000009be     ................
  427cfc:	000009bc 000009b9 000009b7 000009b5     ................
  427d0c:	000009b3 000009b1 000009af 000009ad     ................
  427d1c:	000009ab 000009a9 000009a7 000009a5     ................
  427d2c:	000009a3 000009a1 0000099f 0000099d     ................
  427d3c:	0000099b 00000999 00000997 00000995     ................
  427d4c:	00000993 00000991 0000098f 0000098d     ................
  427d5c:	0000098b 00000989 00000987 00000985     ................
  427d6c:	00000983 00000981 0000097f 0000097d     ............}...
  427d7c:	0000097b 00000979 00000977 00000975     {...y...w...u...
  427d8c:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  427d9c:	0000096b 00000969 00000967 00000965     k...i...g...e...
  427dac:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  427dbc:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  427dcc:	00000955 00000953 00000952 00000950     U...S...R...P...
  427ddc:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  427dec:	00000949 00000948 00000947 00000946     I...H...G...F...
  427dfc:	00000945 00000943 00000942 00000941     E...C...B...A...
  427e0c:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  427e1c:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  427e2c:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  427e3c:	00000939 00000938 00000937 00000936     9...8...7...6...
  427e4c:	00000935 00000934 00000932 00000930     5...4...2...0...
  427e5c:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  427e6c:	00000924 00000920 0000091d 00000919     $... ...........
  427e7c:	00000915 00000910 0000090b 00000906     ................
  427e8c:	00000901 000008fc 000008f6 000008f0     ................
  427e9c:	000008ea 000008e4 000008de 000008d8     ................
  427eac:	000008d1 000008cb 000008c5 000008be     ................
  427ebc:	000008b8 000008b2 000008ac 000008a6     ................
  427ecc:	000008a0 0000089a 00000894 0000088f     ................
  427edc:	00000889 00000884 0000087e 00000879     ........~...y...
  427eec:	00000873 0000086d 00000868 00000862     s...m...h...b...
  427efc:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  427f0c:	00000844 0000083d 00000837 00000830     D...=...7...0...
  427f1c:	00000829 00000821 0000081a 00000812     )...!...........
  427f2c:	0000080a 00000802 000007fa 000007f2     ................
  427f3c:	000007eb 000007e4 000007dd 000007d7     ................
  427f4c:	000007d2 000007cd 000007c9 000007c6     ................
  427f5c:	000007c3 000007c2 000007c2 000007c3     ................
  427f6c:	000007c5 000007c8 000007cd 000007d3     ................
  427f7c:	000007da 000007e2 000007eb 000007f6     ................
  427f8c:	00000802 0000080f 0000081e 0000082e     ................
  427f9c:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  427fac:	00000890 000008a7 000008c0 000008da     ................
  427fbc:	000008f4 00000910 0000092d 0000094c     ........-...L...
  427fcc:	0000096b 0000098b 000009ad 000009cf     k...............
  427fdc:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  427fec:	00000a8a 00000ab2 00000adb 00000b05     ................
  427ffc:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  42800c:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  42801c:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  42802c:	00000d51 00000d80 00000dad 00000ddb     Q...............
  42803c:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  42804c:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  42805c:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  42806c:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  42807c:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  42808c:	00000fff 00000ffd 00000ff9 00000ff1     ................
  42809c:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  4280ac:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  4280bc:	00000f38 00000f17 00000ef3 00000ecd     8...............
  4280cc:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  4280dc:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  4280ec:	00000d29 00000cf4 00000cbd 00000c86     )...............
  4280fc:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  42810c:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  42811c:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  42812c:	000009ab 00000976 00000942 0000090e     ....v...B.......
  42813c:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  42814c:	00000821 000007f6 000007cc 000007a4     !...............
  42815c:	0000077d 00000758 00000734 00000712     }...X...4.......
  42816c:	000006f1 000006d2 000006b4 00000698     ................
  42817c:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  42818c:	00000621 0000060e 000005fb 000005ea     !...............
  42819c:	000005da 000005cc 000005be 000005b2     ................
  4281ac:	000005a7 0000059e 00000595 0000058e     ................
  4281bc:	00000588 00000583 0000057e 0000057b     ........~...{...
  4281cc:	00000579 00000577 00000576 00000576     y...w...v...v...
  4281dc:	00000576 00000577 00000579 0000057b     v...w...y...{...
  4281ec:	0000057e 00000582 00000585 0000058a     ~...............
  4281fc:	0000058e 00000593 00000598 0000059e     ................
  42820c:	000005a3 000005a9 000005af 000005b5     ................
  42821c:	000005bb 000005c1 000005c7 000005cd     ................
  42822c:	000005d3 000005d9 000005df 000005e5     ................
  42823c:	000005eb 000005f0 000005f6 000005fb     ................
  42824c:	00000600 00000604 00000609 0000060d     ................
  42825c:	00000611 00000615 00000618 0000061c     ................
  42826c:	0000061f 00000621 00000624 00000626     ....!...$...&...
  42827c:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  42828c:	0000062d 0000062d 0000062e 0000062e     -...-...........
  42829c:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  4282ac:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  4282bc:	00000627 00000625 00000623 00000621     '...%...#...!...
  4282cc:	0000061f 0000061d 0000061b 00000618     ................
  4282dc:	00000616 00000613 00000610 0000060d     ................
  4282ec:	0000060a 00000606 00000603 000005ff     ................
  4282fc:	000005fc 000005f8 000005f4 000005f1     ................
  42830c:	000005ed 000005e9 000005e5 000005e0     ................
  42831c:	000005dc 000005d8 000005d4 000005d0     ................
  42832c:	000005cb 000005c7 000005c3 000005be     ................
  42833c:	000005ba 000005b5 000005b1 000005ad     ................
  42834c:	000005a8 000005a4 0000059f 0000059b     ................
  42835c:	00000597 00000592 0000058e 0000058a     ................
  42836c:	00000586 00000582 0000057e 0000057a     ........~...z...
  42837c:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  42838c:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  42839c:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  4283ac:	0000054a 00000547 00000544 00000540     J...G...D...@...
  4283bc:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  4283cc:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  4283dc:	00000522 0000051e 0000051b 00000517     "...............
  4283ec:	00000514 00000510 0000050d 00000509     ................

004283fc <g_ecgSize>:
  4283fc:	000005b2 0044434c 6c696146 74206465     ....LCD.Failed t
  42840c:	7263206f 65746165 64636c20 73617420     o create lcd tas
  42841c:	000a0d6b 32535041 00000000 6c696146     k...APS2....Fail
  42842c:	74206465 7263206f 65746165 53504120     ed to create APS
  42843c:	73617420 000a0d6b 6e69616d 00000000      task...main....
  42844c:	6c696146 74206465 7263206f 65746165     Failed to create
  42845c:	69614d20 6174206e 0a0d6b73 00000000      Main task......
  42846c:	203a786f 0a206425 00000000 63617473     ox: %d .....stac
  42847c:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  42848c:	00000a0d                                ....

00428490 <sinTable_f32>:
  428490:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  4284a0:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  4284b0:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  4284c0:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  4284d0:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  4284e0:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  4284f0:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  428500:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  428510:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  428520:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  428530:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  428540:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  428550:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  428560:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  428570:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  428580:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  428590:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  4285a0:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  4285b0:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  4285c0:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  4285d0:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  4285e0:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  4285f0:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  428600:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  428610:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  428620:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  428630:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  428640:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  428650:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  428660:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  428670:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  428680:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  428690:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  4286a0:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  4286b0:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  4286c0:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  4286d0:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  4286e0:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  4286f0:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  428700:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  428710:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  428720:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  428730:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  428740:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  428750:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  428760:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  428770:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  428780:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  428790:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  4287a0:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  4287b0:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  4287c0:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  4287d0:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  4287e0:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  4287f0:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  428800:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  428810:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  428820:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  428830:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  428840:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  428850:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  428860:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  428870:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  428880:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  428890:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  4288a0:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  4288b0:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  4288c0:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  4288d0:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  4288e0:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  4288f0:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  428900:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  428910:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  428920:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  428930:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  428940:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  428950:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  428960:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  428970:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  428980:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  428990:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  4289a0:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  4289b0:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  4289c0:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  4289d0:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  4289e0:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  4289f0:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  428a00:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  428a10:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  428a20:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  428a30:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  428a40:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  428a50:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  428a60:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  428a70:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  428a80:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  428a90:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  428aa0:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  428ab0:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  428ac0:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  428ad0:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  428ae0:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  428af0:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  428b00:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  428b10:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  428b20:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  428b30:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  428b40:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  428b50:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  428b60:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  428b70:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  428b80:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  428b90:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  428ba0:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  428bb0:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  428bc0:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  428bd0:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  428be0:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  428bf0:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  428c00:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  428c10:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  428c20:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  428c30:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  428c40:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  428c50:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  428c60:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  428c70:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  428c80:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  428c90:	80000000                                ....

00428c94 <_global_impure_ptr>:
  428c94:	20400068 33323130 37363534 42413938     h.@ 0123456789AB
  428ca4:	46454443 00000000 33323130 37363534     CDEF....01234567
  428cb4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  428cc4:	0000296c                                l)..

00428cc8 <blanks.7217>:
  428cc8:	20202020 20202020 20202020 20202020                     

00428cd8 <zeroes.7218>:
  428cd8:	30303030 30303030 30303030 30303030     0000000000000000
  428ce8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00428cf8 <_ctype_>:
  428cf8:	20202000 20202020 28282020 20282828     .         ((((( 
  428d08:	20202020 20202020 20202020 20202020                     
  428d18:	10108820 10101010 10101010 10101010      ...............
  428d28:	04040410 04040404 10040404 10101010     ................
  428d38:	41411010 41414141 01010101 01010101     ..AAAAAA........
  428d48:	01010101 01010101 01010101 10101010     ................
  428d58:	42421010 42424242 02020202 02020202     ..BBBBBB........
  428d68:	02020202 02020202 02020202 10101010     ................
  428d78:	00000020 00000000 00000000 00000000      ...............
	...

00428dfc <_init>:
  428dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  428dfe:	bf00      	nop
  428e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
  428e02:	bc08      	pop	{r3}
  428e04:	469e      	mov	lr, r3
  428e06:	4770      	bx	lr

00428e08 <__init_array_start>:
  428e08:	00421039 	.word	0x00421039

00428e0c <__frame_dummy_init_array_entry>:
  428e0c:	0040018d                                ..@.

00428e10 <_fini>:
  428e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  428e12:	bf00      	nop
  428e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
  428e16:	bc08      	pop	{r3}
  428e18:	469e      	mov	lr, r3
  428e1a:	4770      	bx	lr

00428e1c <__fini_array_start>:
  428e1c:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <font_dsc>:
20400010:	3c94 0042 37bc 0042 3794 0042 69e0 0042     .<B..7B..7B..iB.
20400020:	0010 2802 0000 0000 0000 0000               ...(........

2040002c <lv_font_montserrat_14>:
2040002c:	42c1 0041 41b5 0041 0010 0003 ff00 0001     .BA..AA.........
2040003c:	0010 2040                                   ..@ 

20400040 <mem_buf_small>:
20400040:	c750 2040 0010 0000 c760 2040 0010 0000     P.@ ....`.@ ....

20400050 <_lv_txt_encoded_get_char_id>:
20400050:	6745 0041                                   EgA.

20400054 <_lv_txt_encoded_next>:
20400054:	6645 0041                                   EfA.

20400058 <g_interrupt_enabled>:
20400058:	0001 0000                                   ....

2040005c <SystemCoreClock>:
2040005c:	0900 003d                                   ..=.

20400060 <_impure_ptr>:
20400060:	0068 2040 0000 0000                         h.@ ....

20400068 <impure_data>:
20400068:	0000 0000 0354 2040 03bc 2040 0424 2040     ....T.@ ..@ $.@ 
	...
20400110:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400120:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400490 <__malloc_av_>:
	...
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 

20400898 <__malloc_sbrk_base>:
20400898:	ffff ffff                                   ....

2040089c <__malloc_trim_threshold>:
2040089c:	0000 0002                                   ....

204008a0 <__atexit_recursive_mutex>:
204008a0:	a308 2043                                   ..C 

204008a4 <__global_locale>:
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400964:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400984:	2131 0042 1ac1 0042 0000 0000 8cf8 0042     1!B...B.......B.
20400994:	8cf4 0042 8468 0042 8468 0042 8468 0042     ..B.h.B.h.B.h.B.
204009a4:	8468 0042 8468 0042 8468 0042 8468 0042     h.B.h.B.h.B.h.B.
204009b4:	8468 0042 8468 0042 ffff ffff ffff ffff     h.B.h.B.........
204009c4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ec:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
