
RTOS-TFT-LCD-ILI9341-lvgl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0002b944  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0042b944  0042b944  0003b944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a20  20400000  0042b94c  00040000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00039940  20400a20  0042c36c  00040a20  2**2
                  ALLOC
  4 .stack        00002000  2043a360  00465cac  00040a20  2**0
                  ALLOC
  5 .heap         00000200  2043c360  00467cac  00040a20  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00040a20  2**0
                  CONTENTS, READONLY
  7 .comment      000000b4  00000000  00000000  00040a4c  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a9071  00000000  00000000  00040b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000eb3e  00000000  00000000  000e9b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0004ab75  00000000  00000000  000f86af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c90  00000000  00000000  00143224  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005788  00000000  00000000  00145eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031928  00000000  00000000  0014b63c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00041de0  00000000  00000000  0017cf64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000af62c  00000000  00000000  001bed44  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008f88  00000000  00000000  0026e370  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 c3 43 20 35 08 42 00 31 08 42 00 31 08 42 00     `.C 5.B.1.B.1.B.
  400010:	31 08 42 00 31 08 42 00 31 08 42 00 00 00 00 00     1.B.1.B.1.B.....
	...
  40002c:	49 15 40 00 31 08 42 00 00 00 00 00 e9 15 40 00     I.@.1.B.......@.
  40003c:	51 16 40 00 31 08 42 00 31 08 42 00 31 08 42 00     Q.@.1.B.1.B.1.B.
  40004c:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40005c:	31 08 42 00 31 08 42 00 00 00 00 00 bd 03 42 00     1.B.1.B.......B.
  40006c:	d1 03 42 00 e5 03 42 00 31 08 42 00 31 08 42 00     ..B...B.1.B.1.B.
  40007c:	31 08 42 00 f9 03 42 00 0d 04 42 00 31 08 42 00     1.B...B...B.1.B.
  40008c:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40009c:	55 02 40 00 31 08 42 00 31 08 42 00 31 08 42 00     U.@.1.B.1.B.1.B.
  4000ac:	31 08 42 00 31 08 42 00 9d 13 40 00 31 08 42 00     1.B.1.B...@.1.B.
  4000bc:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  4000cc:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  4000dc:	31 08 42 00 b1 13 40 00 31 08 42 00 31 08 42 00     1.B...@.1.B.1.B.
  4000ec:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  4000fc:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40010c:	31 08 42 00 31 08 42 00 00 00 00 00 00 00 00 00     1.B.1.B.........
  40011c:	00 00 00 00 31 08 42 00 31 08 42 00 31 08 42 00     ....1.B.1.B.1.B.
  40012c:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40013c:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40014c:	31 08 42 00 31 08 42 00 31 08 42 00 31 08 42 00     1.B.1.B.1.B.1.B.
  40015c:	31 08 42 00 31 08 42 00 31 08 42 00                 1.B.1.B.1.B.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	20400a20 	.word	0x20400a20
  400184:	00000000 	.word	0x00000000
  400188:	0042b94c 	.word	0x0042b94c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0042b94c 	.word	0x0042b94c
  4001c8:	20400a24 	.word	0x20400a24
  4001cc:	0042b94c 	.word	0x0042b94c
  4001d0:	00000000 	.word	0x00000000

004001d4 <vTimerEcgCallback>:
  4001d4:	b508      	push	{r3, lr}
  4001d6:	4b08      	ldr	r3, [pc, #32]	; (4001f8 <vTimerEcgCallback+0x24>)
  4001d8:	4798      	blx	r3
  4001da:	4a08      	ldr	r2, [pc, #32]	; (4001fc <vTimerEcgCallback+0x28>)
  4001dc:	fb82 3200 	smull	r3, r2, r2, r0
  4001e0:	17c3      	asrs	r3, r0, #31
  4001e2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
  4001e6:	f240 122d 	movw	r2, #301	; 0x12d
  4001ea:	fb02 0313 	mls	r3, r2, r3, r0
  4001ee:	33c8      	adds	r3, #200	; 0xc8
  4001f0:	4a03      	ldr	r2, [pc, #12]	; (400200 <vTimerEcgCallback+0x2c>)
  4001f2:	6013      	str	r3, [r2, #0]
  4001f4:	bd08      	pop	{r3, pc}
  4001f6:	bf00      	nop
  4001f8:	004225e1 	.word	0x004225e1
  4001fc:	1b37484b 	.word	0x1b37484b
  400200:	2043a094 	.word	0x2043a094

00400204 <config_DAC>:
  400204:	b510      	push	{r4, lr}
  400206:	201e      	movs	r0, #30
  400208:	4b0b      	ldr	r3, [pc, #44]	; (400238 <config_DAC+0x34>)
  40020a:	4798      	blx	r3
  40020c:	4c0b      	ldr	r4, [pc, #44]	; (40023c <config_DAC+0x38>)
  40020e:	4620      	mov	r0, r4
  400210:	4b0b      	ldr	r3, [pc, #44]	; (400240 <config_DAC+0x3c>)
  400212:	4798      	blx	r3
  400214:	2100      	movs	r1, #0
  400216:	4620      	mov	r0, r4
  400218:	4b0a      	ldr	r3, [pc, #40]	; (400244 <config_DAC+0x40>)
  40021a:	4798      	blx	r3
  40021c:	2205      	movs	r2, #5
  40021e:	2100      	movs	r1, #0
  400220:	4620      	mov	r0, r4
  400222:	4b09      	ldr	r3, [pc, #36]	; (400248 <config_DAC+0x44>)
  400224:	4798      	blx	r3
  400226:	2100      	movs	r1, #0
  400228:	4620      	mov	r0, r4
  40022a:	4b08      	ldr	r3, [pc, #32]	; (40024c <config_DAC+0x48>)
  40022c:	4798      	blx	r3
  40022e:	210a      	movs	r1, #10
  400230:	4620      	mov	r0, r4
  400232:	4b07      	ldr	r3, [pc, #28]	; (400250 <config_DAC+0x4c>)
  400234:	4798      	blx	r3
  400236:	bd10      	pop	{r4, pc}
  400238:	00420535 	.word	0x00420535
  40023c:	40040000 	.word	0x40040000
  400240:	004004bd 	.word	0x004004bd
  400244:	004004c3 	.word	0x004004c3
  400248:	004004d9 	.word	0x004004d9
  40024c:	0040050d 	.word	0x0040050d
  400250:	00400521 	.word	0x00400521

00400254 <TC0_Handler>:
  400254:	b500      	push	{lr}
  400256:	b083      	sub	sp, #12
  400258:	2100      	movs	r1, #0
  40025a:	4815      	ldr	r0, [pc, #84]	; (4002b0 <TC0_Handler+0x5c>)
  40025c:	4b15      	ldr	r3, [pc, #84]	; (4002b4 <TC0_Handler+0x60>)
  40025e:	4798      	blx	r3
  400260:	9001      	str	r0, [sp, #4]
  400262:	4b15      	ldr	r3, [pc, #84]	; (4002b8 <TC0_Handler+0x64>)
  400264:	681a      	ldr	r2, [r3, #0]
  400266:	4b15      	ldr	r3, [pc, #84]	; (4002bc <TC0_Handler+0x68>)
  400268:	681b      	ldr	r3, [r3, #0]
  40026a:	429a      	cmp	r2, r3
  40026c:	db06      	blt.n	40027c <TC0_Handler+0x28>
  40026e:	2200      	movs	r2, #0
  400270:	4b11      	ldr	r3, [pc, #68]	; (4002b8 <TC0_Handler+0x64>)
  400272:	601a      	str	r2, [r3, #0]
  400274:	4b12      	ldr	r3, [pc, #72]	; (4002c0 <TC0_Handler+0x6c>)
  400276:	681a      	ldr	r2, [r3, #0]
  400278:	4b12      	ldr	r3, [pc, #72]	; (4002c4 <TC0_Handler+0x70>)
  40027a:	601a      	str	r2, [r3, #0]
  40027c:	4b11      	ldr	r3, [pc, #68]	; (4002c4 <TC0_Handler+0x70>)
  40027e:	681b      	ldr	r3, [r3, #0]
  400280:	2b00      	cmp	r3, #0
  400282:	dd0f      	ble.n	4002a4 <TC0_Handler+0x50>
  400284:	4a0f      	ldr	r2, [pc, #60]	; (4002c4 <TC0_Handler+0x70>)
  400286:	6813      	ldr	r3, [r2, #0]
  400288:	3b01      	subs	r3, #1
  40028a:	6013      	str	r3, [r2, #0]
  40028c:	4b0a      	ldr	r3, [pc, #40]	; (4002b8 <TC0_Handler+0x64>)
  40028e:	6819      	ldr	r1, [r3, #0]
  400290:	2200      	movs	r2, #0
  400292:	4b0d      	ldr	r3, [pc, #52]	; (4002c8 <TC0_Handler+0x74>)
  400294:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
  400298:	480c      	ldr	r0, [pc, #48]	; (4002cc <TC0_Handler+0x78>)
  40029a:	4b0d      	ldr	r3, [pc, #52]	; (4002d0 <TC0_Handler+0x7c>)
  40029c:	4798      	blx	r3
  40029e:	b003      	add	sp, #12
  4002a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4002a4:	4a04      	ldr	r2, [pc, #16]	; (4002b8 <TC0_Handler+0x64>)
  4002a6:	6813      	ldr	r3, [r2, #0]
  4002a8:	3301      	adds	r3, #1
  4002aa:	6013      	str	r3, [r2, #0]
  4002ac:	e7ee      	b.n	40028c <TC0_Handler+0x38>
  4002ae:	bf00      	nop
  4002b0:	4000c000 	.word	0x4000c000
  4002b4:	0040055b 	.word	0x0040055b
  4002b8:	2043a08c 	.word	0x2043a08c
  4002bc:	0042aee0 	.word	0x0042aee0
  4002c0:	2043a094 	.word	0x2043a094
  4002c4:	2043a090 	.word	0x2043a090
  4002c8:	00429818 	.word	0x00429818
  4002cc:	40040000 	.word	0x40040000
  4002d0:	004004cf 	.word	0x004004cf

004002d4 <TC_init_modificado>:
  4002d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002d8:	b084      	sub	sp, #16
  4002da:	4605      	mov	r5, r0
  4002dc:	460c      	mov	r4, r1
  4002de:	4616      	mov	r6, r2
  4002e0:	461f      	mov	r7, r3
  4002e2:	4608      	mov	r0, r1
  4002e4:	4b1c      	ldr	r3, [pc, #112]	; (400358 <TC_init_modificado+0x84>)
  4002e6:	4798      	blx	r3
  4002e8:	491c      	ldr	r1, [pc, #112]	; (40035c <TC_init_modificado+0x88>)
  4002ea:	9100      	str	r1, [sp, #0]
  4002ec:	ab02      	add	r3, sp, #8
  4002ee:	aa03      	add	r2, sp, #12
  4002f0:	4638      	mov	r0, r7
  4002f2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400380 <TC_init_modificado+0xac>
  4002f6:	47c0      	blx	r8
  4002f8:	f244 0201 	movw	r2, #16385	; 0x4001
  4002fc:	4631      	mov	r1, r6
  4002fe:	4628      	mov	r0, r5
  400300:	4b17      	ldr	r3, [pc, #92]	; (400360 <TC_init_modificado+0x8c>)
  400302:	4798      	blx	r3
  400304:	4a17      	ldr	r2, [pc, #92]	; (400364 <TC_init_modificado+0x90>)
  400306:	fbb2 f2f7 	udiv	r2, r2, r7
  40030a:	4631      	mov	r1, r6
  40030c:	4628      	mov	r0, r5
  40030e:	4b16      	ldr	r3, [pc, #88]	; (400368 <TC_init_modificado+0x94>)
  400310:	4798      	blx	r3
  400312:	b263      	sxtb	r3, r4
  400314:	2b00      	cmp	r3, #0
  400316:	db17      	blt.n	400348 <TC_init_modificado+0x74>
  400318:	4a14      	ldr	r2, [pc, #80]	; (40036c <TC_init_modificado+0x98>)
  40031a:	2180      	movs	r1, #128	; 0x80
  40031c:	54d1      	strb	r1, [r2, r3]
  40031e:	095b      	lsrs	r3, r3, #5
  400320:	f004 041f 	and.w	r4, r4, #31
  400324:	2201      	movs	r2, #1
  400326:	fa02 f404 	lsl.w	r4, r2, r4
  40032a:	4a11      	ldr	r2, [pc, #68]	; (400370 <TC_init_modificado+0x9c>)
  40032c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  400330:	2210      	movs	r2, #16
  400332:	4631      	mov	r1, r6
  400334:	4628      	mov	r0, r5
  400336:	4b0f      	ldr	r3, [pc, #60]	; (400374 <TC_init_modificado+0xa0>)
  400338:	4798      	blx	r3
  40033a:	4631      	mov	r1, r6
  40033c:	4628      	mov	r0, r5
  40033e:	4b0e      	ldr	r3, [pc, #56]	; (400378 <TC_init_modificado+0xa4>)
  400340:	4798      	blx	r3
  400342:	b004      	add	sp, #16
  400344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400348:	f004 010f 	and.w	r1, r4, #15
  40034c:	4a0b      	ldr	r2, [pc, #44]	; (40037c <TC_init_modificado+0xa8>)
  40034e:	440a      	add	r2, r1
  400350:	2180      	movs	r1, #128	; 0x80
  400352:	7611      	strb	r1, [r2, #24]
  400354:	e7e3      	b.n	40031e <TC_init_modificado+0x4a>
  400356:	bf00      	nop
  400358:	00420535 	.word	0x00420535
  40035c:	11e1a300 	.word	0x11e1a300
  400360:	00400529 	.word	0x00400529
  400364:	011e1a30 	.word	0x011e1a30
  400368:	0040054b 	.word	0x0040054b
  40036c:	e000e400 	.word	0xe000e400
  400370:	e000e100 	.word	0xe000e100
  400374:	00400553 	.word	0x00400553
  400378:	00400543 	.word	0x00400543
  40037c:	e000ecfc 	.word	0xe000ecfc
  400380:	00400563 	.word	0x00400563
  400384:	00000000 	.word	0x00000000

00400388 <task_aps2>:
  400388:	b570      	push	{r4, r5, r6, lr}
  40038a:	ed2d 8b02 	vpush	{d8}
  40038e:	b084      	sub	sp, #16
  400390:	22c8      	movs	r2, #200	; 0xc8
  400392:	4b31      	ldr	r3, [pc, #196]	; (400458 <task_aps2+0xd0>)
  400394:	601a      	str	r2, [r3, #0]
  400396:	4b31      	ldr	r3, [pc, #196]	; (40045c <task_aps2+0xd4>)
  400398:	4798      	blx	r3
  40039a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  40039e:	2200      	movs	r2, #0
  4003a0:	2117      	movs	r1, #23
  4003a2:	482f      	ldr	r0, [pc, #188]	; (400460 <task_aps2+0xd8>)
  4003a4:	4c2f      	ldr	r4, [pc, #188]	; (400464 <task_aps2+0xdc>)
  4003a6:	47a0      	blx	r4
  4003a8:	4b2f      	ldr	r3, [pc, #188]	; (400468 <task_aps2+0xe0>)
  4003aa:	9300      	str	r3, [sp, #0]
  4003ac:	2300      	movs	r3, #0
  4003ae:	2201      	movs	r2, #1
  4003b0:	f242 7110 	movw	r1, #10000	; 0x2710
  4003b4:	482d      	ldr	r0, [pc, #180]	; (40046c <task_aps2+0xe4>)
  4003b6:	4c2e      	ldr	r4, [pc, #184]	; (400470 <task_aps2+0xe8>)
  4003b8:	47a0      	blx	r4
  4003ba:	4604      	mov	r4, r0
  4003bc:	4b2d      	ldr	r3, [pc, #180]	; (400474 <task_aps2+0xec>)
  4003be:	6018      	str	r0, [r3, #0]
  4003c0:	4b2d      	ldr	r3, [pc, #180]	; (400478 <task_aps2+0xf0>)
  4003c2:	4798      	blx	r3
  4003c4:	2300      	movs	r3, #0
  4003c6:	9300      	str	r3, [sp, #0]
  4003c8:	4602      	mov	r2, r0
  4003ca:	2101      	movs	r1, #1
  4003cc:	4620      	mov	r0, r4
  4003ce:	4c2b      	ldr	r4, [pc, #172]	; (40047c <task_aps2+0xf4>)
  4003d0:	47a0      	blx	r4
  4003d2:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 400480 <task_aps2+0xf8>
  4003d6:	e02e      	b.n	400436 <task_aps2+0xae>
  4003d8:	ee18 0a10 	vmov	r0, s16
  4003dc:	4b29      	ldr	r3, [pc, #164]	; (400484 <task_aps2+0xfc>)
  4003de:	4798      	blx	r3
  4003e0:	4e29      	ldr	r6, [pc, #164]	; (400488 <task_aps2+0x100>)
  4003e2:	47b0      	blx	r6
  4003e4:	4d29      	ldr	r5, [pc, #164]	; (40048c <task_aps2+0x104>)
  4003e6:	2200      	movs	r2, #0
  4003e8:	4b29      	ldr	r3, [pc, #164]	; (400490 <task_aps2+0x108>)
  4003ea:	47a8      	blx	r5
  4003ec:	4c29      	ldr	r4, [pc, #164]	; (400494 <task_aps2+0x10c>)
  4003ee:	2200      	movs	r2, #0
  4003f0:	4b29      	ldr	r3, [pc, #164]	; (400498 <task_aps2+0x110>)
  4003f2:	47a0      	blx	r4
  4003f4:	2200      	movs	r2, #0
  4003f6:	4b29      	ldr	r3, [pc, #164]	; (40049c <task_aps2+0x114>)
  4003f8:	47a0      	blx	r4
  4003fa:	2200      	movs	r2, #0
  4003fc:	4b28      	ldr	r3, [pc, #160]	; (4004a0 <task_aps2+0x118>)
  4003fe:	47a8      	blx	r5
  400400:	4b28      	ldr	r3, [pc, #160]	; (4004a4 <task_aps2+0x11c>)
  400402:	4798      	blx	r3
  400404:	ac04      	add	r4, sp, #16
  400406:	f804 0d01 	strb.w	r0, [r4, #-1]!
  40040a:	ee18 0a10 	vmov	r0, s16
  40040e:	47b0      	blx	r6
  400410:	a30f      	add	r3, pc, #60	; (adr r3, 400450 <task_aps2+0xc8>)
  400412:	e9d3 2300 	ldrd	r2, r3, [r3]
  400416:	47a8      	blx	r5
  400418:	4b23      	ldr	r3, [pc, #140]	; (4004a8 <task_aps2+0x120>)
  40041a:	4798      	blx	r3
  40041c:	ee08 0a10 	vmov	s16, r0
  400420:	2300      	movs	r3, #0
  400422:	2264      	movs	r2, #100	; 0x64
  400424:	4621      	mov	r1, r4
  400426:	4821      	ldr	r0, [pc, #132]	; (4004ac <task_aps2+0x124>)
  400428:	6800      	ldr	r0, [r0, #0]
  40042a:	4c21      	ldr	r4, [pc, #132]	; (4004b0 <task_aps2+0x128>)
  40042c:	47a0      	blx	r4
  40042e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  400432:	4b20      	ldr	r3, [pc, #128]	; (4004b4 <task_aps2+0x12c>)
  400434:	4798      	blx	r3
  400436:	eddf 7a20 	vldr	s15, [pc, #128]	; 4004b8 <task_aps2+0x130>
  40043a:	eeb4 8ae7 	vcmpe.f32	s16, s15
  40043e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  400442:	ddc9      	ble.n	4003d8 <task_aps2+0x50>
  400444:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 400480 <task_aps2+0xf8>
  400448:	e7c6      	b.n	4003d8 <task_aps2+0x50>
  40044a:	bf00      	nop
  40044c:	f3af 8000 	nop.w
  400450:	33333333 	.word	0x33333333
  400454:	3fd33333 	.word	0x3fd33333
  400458:	2043a094 	.word	0x2043a094
  40045c:	00400205 	.word	0x00400205
  400460:	4000c000 	.word	0x4000c000
  400464:	004002d5 	.word	0x004002d5
  400468:	004001d5 	.word	0x004001d5
  40046c:	00424e88 	.word	0x00424e88
  400470:	00402e2d 	.word	0x00402e2d
  400474:	2043a330 	.word	0x2043a330
  400478:	00402455 	.word	0x00402455
  40047c:	00402e8d 	.word	0x00402e8d
  400480:	00000000 	.word	0x00000000
  400484:	004211ad 	.word	0x004211ad
  400488:	004214f5 	.word	0x004214f5
  40048c:	00421239 	.word	0x00421239
  400490:	3ff00000 	.word	0x3ff00000
  400494:	0042159d 	.word	0x0042159d
  400498:	40280000 	.word	0x40280000
  40049c:	3fe00000 	.word	0x3fe00000
  4004a0:	40560000 	.word	0x40560000
  4004a4:	004219c1 	.word	0x004219c1
  4004a8:	00421a01 	.word	0x00421a01
  4004ac:	2043a334 	.word	0x2043a334
  4004b0:	00401b79 	.word	0x00401b79
  4004b4:	004026b5 	.word	0x004026b5
  4004b8:	40c90fdb 	.word	0x40c90fdb

004004bc <dacc_reset>:
  4004bc:	2301      	movs	r3, #1
  4004be:	6003      	str	r3, [r0, #0]
  4004c0:	4770      	bx	lr

004004c2 <dacc_set_transfer_mode>:
  4004c2:	b911      	cbnz	r1, 4004ca <dacc_set_transfer_mode+0x8>
  4004c4:	6041      	str	r1, [r0, #4]
  4004c6:	2000      	movs	r0, #0
  4004c8:	4770      	bx	lr
  4004ca:	6041      	str	r1, [r0, #4]
  4004cc:	e7fb      	b.n	4004c6 <dacc_set_transfer_mode+0x4>

004004ce <dacc_write_conversion_data>:
  4004ce:	3206      	adds	r2, #6
  4004d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  4004d4:	6051      	str	r1, [r2, #4]
  4004d6:	4770      	bx	lr

004004d8 <dacc_set_osr>:
  4004d8:	6883      	ldr	r3, [r0, #8]
  4004da:	b139      	cbz	r1, 4004ec <dacc_set_osr+0x14>
  4004dc:	b410      	push	{r4}
  4004de:	2901      	cmp	r1, #1
  4004e0:	d00d      	beq.n	4004fe <dacc_set_osr+0x26>
  4004e2:	6083      	str	r3, [r0, #8]
  4004e4:	2000      	movs	r0, #0
  4004e6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004ea:	4770      	bx	lr
  4004ec:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
  4004f0:	0412      	lsls	r2, r2, #16
  4004f2:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4004f6:	4313      	orrs	r3, r2
  4004f8:	6083      	str	r3, [r0, #8]
  4004fa:	2000      	movs	r0, #0
  4004fc:	4770      	bx	lr
  4004fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
  400502:	0512      	lsls	r2, r2, #20
  400504:	f402 02e0 	and.w	r2, r2, #7340032	; 0x700000
  400508:	4313      	orrs	r3, r2
  40050a:	e7ea      	b.n	4004e2 <dacc_set_osr+0xa>

0040050c <dacc_enable_channel>:
  40050c:	2901      	cmp	r1, #1
  40050e:	d901      	bls.n	400514 <dacc_enable_channel+0x8>
  400510:	2001      	movs	r0, #1
  400512:	4770      	bx	lr
  400514:	2301      	movs	r3, #1
  400516:	fa03 f101 	lsl.w	r1, r3, r1
  40051a:	6101      	str	r1, [r0, #16]
  40051c:	2000      	movs	r0, #0
  40051e:	4770      	bx	lr

00400520 <dacc_set_analog_control>:
  400520:	f8c0 1094 	str.w	r1, [r0, #148]	; 0x94
  400524:	2000      	movs	r0, #0
  400526:	4770      	bx	lr

00400528 <tc_init>:
  400528:	b410      	push	{r4}
  40052a:	0189      	lsls	r1, r1, #6
  40052c:	1843      	adds	r3, r0, r1
  40052e:	2402      	movs	r4, #2
  400530:	5044      	str	r4, [r0, r1]
  400532:	f04f 31ff 	mov.w	r1, #4294967295
  400536:	6299      	str	r1, [r3, #40]	; 0x28
  400538:	6a19      	ldr	r1, [r3, #32]
  40053a:	605a      	str	r2, [r3, #4]
  40053c:	f85d 4b04 	ldr.w	r4, [sp], #4
  400540:	4770      	bx	lr

00400542 <tc_start>:
  400542:	0189      	lsls	r1, r1, #6
  400544:	2305      	movs	r3, #5
  400546:	5043      	str	r3, [r0, r1]
  400548:	4770      	bx	lr

0040054a <tc_write_rc>:
  40054a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40054e:	61ca      	str	r2, [r1, #28]
  400550:	4770      	bx	lr

00400552 <tc_enable_interrupt>:
  400552:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400556:	624a      	str	r2, [r1, #36]	; 0x24
  400558:	4770      	bx	lr

0040055a <tc_get_status>:
  40055a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40055e:	6a08      	ldr	r0, [r1, #32]
  400560:	4770      	bx	lr

00400562 <tc_find_mck_divisor>:
  400562:	b470      	push	{r4, r5, r6}
  400564:	b087      	sub	sp, #28
  400566:	2402      	movs	r4, #2
  400568:	9401      	str	r4, [sp, #4]
  40056a:	2408      	movs	r4, #8
  40056c:	9402      	str	r4, [sp, #8]
  40056e:	2420      	movs	r4, #32
  400570:	9403      	str	r4, [sp, #12]
  400572:	2480      	movs	r4, #128	; 0x80
  400574:	9404      	str	r4, [sp, #16]
  400576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400578:	0be4      	lsrs	r4, r4, #15
  40057a:	9405      	str	r4, [sp, #20]
  40057c:	2500      	movs	r5, #0
  40057e:	2d04      	cmp	r5, #4
  400580:	d80d      	bhi.n	40059e <tc_find_mck_divisor+0x3c>
  400582:	ac06      	add	r4, sp, #24
  400584:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  400588:	f854 4c14 	ldr.w	r4, [r4, #-20]
  40058c:	fbb1 f4f4 	udiv	r4, r1, r4
  400590:	0c26      	lsrs	r6, r4, #16
  400592:	4284      	cmp	r4, r0
  400594:	d312      	bcc.n	4005bc <tc_find_mck_divisor+0x5a>
  400596:	4286      	cmp	r6, r0
  400598:	d901      	bls.n	40059e <tc_find_mck_divisor+0x3c>
  40059a:	3501      	adds	r5, #1
  40059c:	e7ef      	b.n	40057e <tc_find_mck_divisor+0x1c>
  40059e:	2d04      	cmp	r5, #4
  4005a0:	d80e      	bhi.n	4005c0 <tc_find_mck_divisor+0x5e>
  4005a2:	b12a      	cbz	r2, 4005b0 <tc_find_mck_divisor+0x4e>
  4005a4:	a906      	add	r1, sp, #24
  4005a6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  4005aa:	f851 1c14 	ldr.w	r1, [r1, #-20]
  4005ae:	6011      	str	r1, [r2, #0]
  4005b0:	b143      	cbz	r3, 4005c4 <tc_find_mck_divisor+0x62>
  4005b2:	601d      	str	r5, [r3, #0]
  4005b4:	2001      	movs	r0, #1
  4005b6:	b007      	add	sp, #28
  4005b8:	bc70      	pop	{r4, r5, r6}
  4005ba:	4770      	bx	lr
  4005bc:	2000      	movs	r0, #0
  4005be:	e7fa      	b.n	4005b6 <tc_find_mck_divisor+0x54>
  4005c0:	2000      	movs	r0, #0
  4005c2:	e7f8      	b.n	4005b6 <tc_find_mck_divisor+0x54>
  4005c4:	2001      	movs	r0, #1
  4005c6:	e7f6      	b.n	4005b6 <tc_find_mck_divisor+0x54>

004005c8 <insert_sort>:
  4005c8:	b430      	push	{r4, r5}
  4005ca:	2501      	movs	r5, #1
  4005cc:	e00e      	b.n	4005ec <insert_sort+0x24>
  4005ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  4005d2:	3b01      	subs	r3, #1
  4005d4:	b2db      	uxtb	r3, r3
  4005d6:	b133      	cbz	r3, 4005e6 <insert_sort+0x1e>
  4005d8:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
  4005dc:	441a      	add	r2, r3
  4005de:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
  4005e2:	4294      	cmp	r4, r2
  4005e4:	dbf3      	blt.n	4005ce <insert_sort+0x6>
  4005e6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
  4005ea:	3501      	adds	r5, #1
  4005ec:	428d      	cmp	r5, r1
  4005ee:	da03      	bge.n	4005f8 <insert_sort+0x30>
  4005f0:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
  4005f4:	b2eb      	uxtb	r3, r5
  4005f6:	e7ee      	b.n	4005d6 <insert_sort+0xe>
  4005f8:	bc30      	pop	{r4, r5}
  4005fa:	4770      	bx	lr

004005fc <config_AFEC_touch>:
  4005fc:	b530      	push	{r4, r5, lr}
  4005fe:	b089      	sub	sp, #36	; 0x24
  400600:	4604      	mov	r4, r0
  400602:	4615      	mov	r5, r2
  400604:	a802      	add	r0, sp, #8
  400606:	4b13      	ldr	r3, [pc, #76]	; (400654 <config_AFEC_touch+0x58>)
  400608:	4798      	blx	r3
  40060a:	a902      	add	r1, sp, #8
  40060c:	4620      	mov	r0, r4
  40060e:	4b12      	ldr	r3, [pc, #72]	; (400658 <config_AFEC_touch+0x5c>)
  400610:	4798      	blx	r3
  400612:	6863      	ldr	r3, [r4, #4]
  400614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  400618:	6063      	str	r3, [r4, #4]
  40061a:	a801      	add	r0, sp, #4
  40061c:	4b0f      	ldr	r3, [pc, #60]	; (40065c <config_AFEC_touch+0x60>)
  40061e:	4798      	blx	r3
  400620:	2300      	movs	r3, #0
  400622:	f88d 3005 	strb.w	r3, [sp, #5]
  400626:	b2ad      	uxth	r5, r5
  400628:	aa01      	add	r2, sp, #4
  40062a:	4629      	mov	r1, r5
  40062c:	4620      	mov	r0, r4
  40062e:	4b0c      	ldr	r3, [pc, #48]	; (400660 <config_AFEC_touch+0x64>)
  400630:	4798      	blx	r3
  400632:	6665      	str	r5, [r4, #100]	; 0x64
  400634:	f44f 7300 	mov.w	r3, #512	; 0x200
  400638:	66e3      	str	r3, [r4, #108]	; 0x6c
  40063a:	f640 73ff 	movw	r3, #4095	; 0xfff
  40063e:	429d      	cmp	r5, r3
  400640:	d005      	beq.n	40064e <config_AFEC_touch+0x52>
  400642:	2301      	movs	r3, #1
  400644:	fa03 f505 	lsl.w	r5, r3, r5
  400648:	6165      	str	r5, [r4, #20]
  40064a:	b009      	add	sp, #36	; 0x24
  40064c:	bd30      	pop	{r4, r5, pc}
  40064e:	f640 75ff 	movw	r5, #4095	; 0xfff
  400652:	e7f9      	b.n	400648 <config_AFEC_touch+0x4c>
  400654:	004012f9 	.word	0x004012f9
  400658:	00401335 	.word	0x00401335
  40065c:	00401329 	.word	0x00401329
  400660:	004012c5 	.word	0x004012c5

00400664 <configure_touch>:
  400664:	b570      	push	{r4, r5, r6, lr}
  400666:	200c      	movs	r0, #12
  400668:	4c0d      	ldr	r4, [pc, #52]	; (4006a0 <configure_touch+0x3c>)
  40066a:	47a0      	blx	r4
  40066c:	2010      	movs	r0, #16
  40066e:	47a0      	blx	r4
  400670:	200c      	movs	r0, #12
  400672:	47a0      	blx	r4
  400674:	2010      	movs	r0, #16
  400676:	47a0      	blx	r4
  400678:	4d0a      	ldr	r5, [pc, #40]	; (4006a4 <configure_touch+0x40>)
  40067a:	4628      	mov	r0, r5
  40067c:	4e0a      	ldr	r6, [pc, #40]	; (4006a8 <configure_touch+0x44>)
  40067e:	47b0      	blx	r6
  400680:	4c0a      	ldr	r4, [pc, #40]	; (4006ac <configure_touch+0x48>)
  400682:	4620      	mov	r0, r4
  400684:	47b0      	blx	r6
  400686:	2300      	movs	r3, #0
  400688:	461a      	mov	r2, r3
  40068a:	211d      	movs	r1, #29
  40068c:	4620      	mov	r0, r4
  40068e:	4c08      	ldr	r4, [pc, #32]	; (4006b0 <configure_touch+0x4c>)
  400690:	47a0      	blx	r4
  400692:	2300      	movs	r3, #0
  400694:	2201      	movs	r2, #1
  400696:	2128      	movs	r1, #40	; 0x28
  400698:	4628      	mov	r0, r5
  40069a:	47a0      	blx	r4
  40069c:	bd70      	pop	{r4, r5, r6, pc}
  40069e:	bf00      	nop
  4006a0:	00420535 	.word	0x00420535
  4006a4:	40064000 	.word	0x40064000
  4006a8:	004013c5 	.word	0x004013c5
  4006ac:	4003c000 	.word	0x4003c000
  4006b0:	004005fd 	.word	0x004005fd

004006b4 <readYp>:
  4006b4:	4b02      	ldr	r3, [pc, #8]	; (4006c0 <readYp+0xc>)
  4006b6:	2200      	movs	r2, #0
  4006b8:	665a      	str	r2, [r3, #100]	; 0x64
  4006ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4006bc:	4770      	bx	lr
  4006be:	bf00      	nop
  4006c0:	4003c000 	.word	0x4003c000

004006c4 <readXm>:
  4006c4:	4b02      	ldr	r3, [pc, #8]	; (4006d0 <readXm+0xc>)
  4006c6:	2201      	movs	r2, #1
  4006c8:	665a      	str	r2, [r3, #100]	; 0x64
  4006ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
  4006cc:	4770      	bx	lr
  4006ce:	bf00      	nop
  4006d0:	40064000 	.word	0x40064000

004006d4 <configReadTouchX>:
  4006d4:	b538      	push	{r3, r4, r5, lr}
  4006d6:	2201      	movs	r2, #1
  4006d8:	4b14      	ldr	r3, [pc, #80]	; (40072c <configReadTouchX+0x58>)
  4006da:	615a      	str	r2, [r3, #20]
  4006dc:	2202      	movs	r2, #2
  4006de:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  4006e2:	619a      	str	r2, [r3, #24]
  4006e4:	4d12      	ldr	r5, [pc, #72]	; (400730 <configReadTouchX+0x5c>)
  4006e6:	2300      	movs	r3, #0
  4006e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4006ec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4006f0:	4628      	mov	r0, r5
  4006f2:	4c10      	ldr	r4, [pc, #64]	; (400734 <configReadTouchX+0x60>)
  4006f4:	47a0      	blx	r4
  4006f6:	2300      	movs	r3, #0
  4006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4006fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400700:	4628      	mov	r0, r5
  400702:	47a0      	blx	r4
  400704:	f505 7500 	add.w	r5, r5, #512	; 0x200
  400708:	2300      	movs	r3, #0
  40070a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40070e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400712:	4628      	mov	r0, r5
  400714:	47a0      	blx	r4
  400716:	2300      	movs	r3, #0
  400718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  40071c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400720:	4628      	mov	r0, r5
  400722:	47a0      	blx	r4
  400724:	4804      	ldr	r0, [pc, #16]	; (400738 <configReadTouchX+0x64>)
  400726:	4b05      	ldr	r3, [pc, #20]	; (40073c <configReadTouchX+0x68>)
  400728:	4798      	blx	r3
  40072a:	bd38      	pop	{r3, r4, r5, pc}
  40072c:	4003c000 	.word	0x4003c000
  400730:	400e1200 	.word	0x400e1200
  400734:	0042017d 	.word	0x0042017d
  400738:	0003dbc2 	.word	0x0003dbc2
  40073c:	20400001 	.word	0x20400001

00400740 <configReadTouchY>:
  400740:	b538      	push	{r3, r4, r5, lr}
  400742:	2201      	movs	r2, #1
  400744:	4b14      	ldr	r3, [pc, #80]	; (400798 <configReadTouchY+0x58>)
  400746:	619a      	str	r2, [r3, #24]
  400748:	2202      	movs	r2, #2
  40074a:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  40074e:	615a      	str	r2, [r3, #20]
  400750:	4d12      	ldr	r5, [pc, #72]	; (40079c <configReadTouchY+0x5c>)
  400752:	2300      	movs	r3, #0
  400754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400758:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40075c:	4628      	mov	r0, r5
  40075e:	4c10      	ldr	r4, [pc, #64]	; (4007a0 <configReadTouchY+0x60>)
  400760:	47a0      	blx	r4
  400762:	2300      	movs	r3, #0
  400764:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400768:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40076c:	4628      	mov	r0, r5
  40076e:	47a0      	blx	r4
  400770:	f5a5 7500 	sub.w	r5, r5, #512	; 0x200
  400774:	2300      	movs	r3, #0
  400776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40077a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40077e:	4628      	mov	r0, r5
  400780:	47a0      	blx	r4
  400782:	2300      	movs	r3, #0
  400784:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400788:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40078c:	4628      	mov	r0, r5
  40078e:	47a0      	blx	r4
  400790:	4804      	ldr	r0, [pc, #16]	; (4007a4 <configReadTouchY+0x64>)
  400792:	4b05      	ldr	r3, [pc, #20]	; (4007a8 <configReadTouchY+0x68>)
  400794:	4798      	blx	r3
  400796:	bd38      	pop	{r3, r4, r5, pc}
  400798:	4003c000 	.word	0x4003c000
  40079c:	400e1400 	.word	0x400e1400
  4007a0:	0042017d 	.word	0x0042017d
  4007a4:	0003dbc2 	.word	0x0003dbc2
  4007a8:	20400001 	.word	0x20400001

004007ac <readTouchZ>:
  4007ac:	b570      	push	{r4, r5, r6, lr}
  4007ae:	ed2d 8b04 	vpush	{d8-d9}
  4007b2:	ee08 0a10 	vmov	s16, r0
  4007b6:	4d2e      	ldr	r5, [pc, #184]	; (400870 <readTouchZ+0xc4>)
  4007b8:	2300      	movs	r3, #0
  4007ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  4007be:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  4007c2:	4628      	mov	r0, r5
  4007c4:	4c2b      	ldr	r4, [pc, #172]	; (400874 <readTouchZ+0xc8>)
  4007c6:	47a0      	blx	r4
  4007c8:	4e2b      	ldr	r6, [pc, #172]	; (400878 <readTouchZ+0xcc>)
  4007ca:	2300      	movs	r3, #0
  4007cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4007d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4007d4:	4630      	mov	r0, r6
  4007d6:	47a0      	blx	r4
  4007d8:	2300      	movs	r3, #0
  4007da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4007de:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007e2:	4630      	mov	r0, r6
  4007e4:	47a0      	blx	r4
  4007e6:	2300      	movs	r3, #0
  4007e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4007ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4007f0:	4628      	mov	r0, r5
  4007f2:	47a0      	blx	r4
  4007f4:	2201      	movs	r2, #1
  4007f6:	4b21      	ldr	r3, [pc, #132]	; (40087c <readTouchZ+0xd0>)
  4007f8:	615a      	str	r2, [r3, #20]
  4007fa:	2202      	movs	r2, #2
  4007fc:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
  400800:	615a      	str	r2, [r3, #20]
  400802:	481f      	ldr	r0, [pc, #124]	; (400880 <readTouchZ+0xd4>)
  400804:	4b1f      	ldr	r3, [pc, #124]	; (400884 <readTouchZ+0xd8>)
  400806:	4798      	blx	r3
  400808:	4c1f      	ldr	r4, [pc, #124]	; (400888 <readTouchZ+0xdc>)
  40080a:	47a0      	blx	r4
  40080c:	ee08 0a90 	vmov	s17, r0
  400810:	4b1e      	ldr	r3, [pc, #120]	; (40088c <readTouchZ+0xe0>)
  400812:	4798      	blx	r3
  400814:	ee09 0a10 	vmov	s18, r0
  400818:	4b1d      	ldr	r3, [pc, #116]	; (400890 <readTouchZ+0xe4>)
  40081a:	4798      	blx	r3
  40081c:	47a0      	blx	r4
  40081e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
  400822:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  400826:	ee89 7a28 	vdiv.f32	s14, s18, s17
  40082a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  40082e:	ee37 7a67 	vsub.f32	s14, s14, s15
  400832:	ee07 0a90 	vmov	s15, r0
  400836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  40083a:	ee27 7a87 	vmul.f32	s14, s15, s14
  40083e:	eef8 7ac8 	vcvt.f32.s32	s15, s16
  400842:	ee67 7a87 	vmul.f32	s15, s15, s14
  400846:	ed9f 7a13 	vldr	s14, [pc, #76]	; 400894 <readTouchZ+0xe8>
  40084a:	ee67 7a87 	vmul.f32	s15, s15, s14
  40084e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 400898 <readTouchZ+0xec>
  400852:	eef4 7ac7 	vcmpe.f32	s15, s14
  400856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  40085a:	d501      	bpl.n	400860 <readTouchZ+0xb4>
  40085c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 40089c <readTouchZ+0xf0>
  400860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  400864:	ee17 0a90 	vmov	r0, s15
  400868:	ecbd 8b04 	vpop	{d8-d9}
  40086c:	bd70      	pop	{r4, r5, r6, pc}
  40086e:	bf00      	nop
  400870:	400e1200 	.word	0x400e1200
  400874:	0042017d 	.word	0x0042017d
  400878:	400e1400 	.word	0x400e1400
  40087c:	4003c000 	.word	0x4003c000
  400880:	0003dbc2 	.word	0x0003dbc2
  400884:	20400001 	.word	0x20400001
  400888:	004006c5 	.word	0x004006c5
  40088c:	004006b5 	.word	0x004006b5
  400890:	004006d5 	.word	0x004006d5
  400894:	3a800000 	.word	0x3a800000
  400898:	42c80000 	.word	0x42c80000
  40089c:	44800000 	.word	0x44800000

004008a0 <readTouchX>:
  4008a0:	b508      	push	{r3, lr}
  4008a2:	4b01      	ldr	r3, [pc, #4]	; (4008a8 <readTouchX+0x8>)
  4008a4:	4798      	blx	r3
  4008a6:	bd08      	pop	{r3, pc}
  4008a8:	004006b5 	.word	0x004006b5

004008ac <readTouchY>:
  4008ac:	b508      	push	{r3, lr}
  4008ae:	4b01      	ldr	r3, [pc, #4]	; (4008b4 <readTouchY+0x8>)
  4008b0:	4798      	blx	r3
  4008b2:	bd08      	pop	{r3, pc}
  4008b4:	004006c5 	.word	0x004006c5

004008b8 <readRawPoint>:
  4008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4008ba:	b0c1      	sub	sp, #260	; 0x104
  4008bc:	4607      	mov	r7, r0
  4008be:	460e      	mov	r6, r1
  4008c0:	4615      	mov	r5, r2
  4008c2:	4b16      	ldr	r3, [pc, #88]	; (40091c <readRawPoint+0x64>)
  4008c4:	4798      	blx	r3
  4008c6:	2400      	movs	r4, #0
  4008c8:	e007      	b.n	4008da <readRawPoint+0x22>
  4008ca:	2033      	movs	r0, #51	; 0x33
  4008cc:	4b14      	ldr	r3, [pc, #80]	; (400920 <readRawPoint+0x68>)
  4008ce:	4798      	blx	r3
  4008d0:	4b14      	ldr	r3, [pc, #80]	; (400924 <readRawPoint+0x6c>)
  4008d2:	4798      	blx	r3
  4008d4:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  4008d8:	3401      	adds	r4, #1
  4008da:	2c3f      	cmp	r4, #63	; 0x3f
  4008dc:	ddf5      	ble.n	4008ca <readRawPoint+0x12>
  4008de:	2140      	movs	r1, #64	; 0x40
  4008e0:	4668      	mov	r0, sp
  4008e2:	4b11      	ldr	r3, [pc, #68]	; (400928 <readRawPoint+0x70>)
  4008e4:	4798      	blx	r3
  4008e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
  4008e8:	603b      	str	r3, [r7, #0]
  4008ea:	4b10      	ldr	r3, [pc, #64]	; (40092c <readRawPoint+0x74>)
  4008ec:	4798      	blx	r3
  4008ee:	2400      	movs	r4, #0
  4008f0:	e004      	b.n	4008fc <readRawPoint+0x44>
  4008f2:	4b0f      	ldr	r3, [pc, #60]	; (400930 <readRawPoint+0x78>)
  4008f4:	4798      	blx	r3
  4008f6:	f84d 0024 	str.w	r0, [sp, r4, lsl #2]
  4008fa:	3401      	adds	r4, #1
  4008fc:	2c3f      	cmp	r4, #63	; 0x3f
  4008fe:	ddf8      	ble.n	4008f2 <readRawPoint+0x3a>
  400900:	2140      	movs	r1, #64	; 0x40
  400902:	4668      	mov	r0, sp
  400904:	4b08      	ldr	r3, [pc, #32]	; (400928 <readRawPoint+0x70>)
  400906:	4798      	blx	r3
  400908:	9b20      	ldr	r3, [sp, #128]	; 0x80
  40090a:	6033      	str	r3, [r6, #0]
  40090c:	f44f 7096 	mov.w	r0, #300	; 0x12c
  400910:	4b08      	ldr	r3, [pc, #32]	; (400934 <readRawPoint+0x7c>)
  400912:	4798      	blx	r3
  400914:	6028      	str	r0, [r5, #0]
  400916:	b041      	add	sp, #260	; 0x104
  400918:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40091a:	bf00      	nop
  40091c:	004006d5 	.word	0x004006d5
  400920:	20400001 	.word	0x20400001
  400924:	004008a1 	.word	0x004008a1
  400928:	004005c9 	.word	0x004005c9
  40092c:	00400741 	.word	0x00400741
  400930:	004008ad 	.word	0x004008ad
  400934:	004007ad 	.word	0x004007ad

00400938 <pointToCoordinate>:
  400938:	b510      	push	{r4, lr}
  40093a:	f2a0 20ee 	subw	r0, r0, #750	; 0x2ee
  40093e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  400942:	0104      	lsls	r4, r0, #4
  400944:	4818      	ldr	r0, [pc, #96]	; (4009a8 <pointToCoordinate+0x70>)
  400946:	fb80 e004 	smull	lr, r0, r0, r4
  40094a:	4420      	add	r0, r4
  40094c:	17e4      	asrs	r4, r4, #31
  40094e:	ebc4 24e0 	rsb	r4, r4, r0, asr #11
  400952:	2cf0      	cmp	r4, #240	; 0xf0
  400954:	dd00      	ble.n	400958 <pointToCoordinate+0x20>
  400956:	24f0      	movs	r4, #240	; 0xf0
  400958:	2c00      	cmp	r4, #0
  40095a:	db1e      	blt.n	40099a <pointToCoordinate+0x62>
  40095c:	9802      	ldr	r0, [sp, #8]
  40095e:	6004      	str	r4, [r0, #0]
  400960:	f5a1 711b 	sub.w	r1, r1, #620	; 0x26c
  400964:	ebc1 6001 	rsb	r0, r1, r1, lsl #24
  400968:	ebc1 0180 	rsb	r1, r1, r0, lsl #2
  40096c:	0188      	lsls	r0, r1, #6
  40096e:	490f      	ldr	r1, [pc, #60]	; (4009ac <pointToCoordinate+0x74>)
  400970:	fb81 4100 	smull	r4, r1, r1, r0
  400974:	4401      	add	r1, r0
  400976:	17c0      	asrs	r0, r0, #31
  400978:	ebc0 20e1 	rsb	r0, r0, r1, asr #11
  40097c:	f500 70a0 	add.w	r0, r0, #320	; 0x140
  400980:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  400984:	dd01      	ble.n	40098a <pointToCoordinate+0x52>
  400986:	f44f 70a0 	mov.w	r0, #320	; 0x140
  40098a:	2800      	cmp	r0, #0
  40098c:	db07      	blt.n	40099e <pointToCoordinate+0x66>
  40098e:	6018      	str	r0, [r3, #0]
  400990:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400994:	db05      	blt.n	4009a2 <pointToCoordinate+0x6a>
  400996:	2000      	movs	r0, #0
  400998:	bd10      	pop	{r4, pc}
  40099a:	2400      	movs	r4, #0
  40099c:	e7de      	b.n	40095c <pointToCoordinate+0x24>
  40099e:	2000      	movs	r0, #0
  4009a0:	e7f5      	b.n	40098e <pointToCoordinate+0x56>
  4009a2:	2001      	movs	r0, #1
  4009a4:	bd10      	pop	{r4, pc}
  4009a6:	bf00      	nop
  4009a8:	cd9a6735 	.word	0xcd9a6735
  4009ac:	bc97c21f 	.word	0xbc97c21f

004009b0 <readPoint>:
  4009b0:	b530      	push	{r4, r5, lr}
  4009b2:	b087      	sub	sp, #28
  4009b4:	4604      	mov	r4, r0
  4009b6:	460d      	mov	r5, r1
  4009b8:	aa03      	add	r2, sp, #12
  4009ba:	a904      	add	r1, sp, #16
  4009bc:	a805      	add	r0, sp, #20
  4009be:	4b05      	ldr	r3, [pc, #20]	; (4009d4 <readPoint+0x24>)
  4009c0:	4798      	blx	r3
  4009c2:	9500      	str	r5, [sp, #0]
  4009c4:	4623      	mov	r3, r4
  4009c6:	9a03      	ldr	r2, [sp, #12]
  4009c8:	9904      	ldr	r1, [sp, #16]
  4009ca:	9805      	ldr	r0, [sp, #20]
  4009cc:	4c02      	ldr	r4, [pc, #8]	; (4009d8 <readPoint+0x28>)
  4009ce:	47a0      	blx	r4
  4009d0:	b007      	add	sp, #28
  4009d2:	bd30      	pop	{r4, r5, pc}
  4009d4:	004008b9 	.word	0x004008b9
  4009d8:	00400939 	.word	0x00400939

004009dc <ili9341_send_command>:
  4009dc:	2240      	movs	r2, #64	; 0x40
  4009de:	4b10      	ldr	r3, [pc, #64]	; (400a20 <ili9341_send_command+0x44>)
  4009e0:	635a      	str	r2, [r3, #52]	; 0x34
  4009e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4009e6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
  4009ea:	635a      	str	r2, [r3, #52]	; 0x34
  4009ec:	4b0d      	ldr	r3, [pc, #52]	; (400a24 <ili9341_send_command+0x48>)
  4009ee:	691b      	ldr	r3, [r3, #16]
  4009f0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4009f4:	d110      	bne.n	400a18 <ili9341_send_command+0x3c>
  4009f6:	2300      	movs	r3, #0
  4009f8:	2b00      	cmp	r3, #0
  4009fa:	d0f7      	beq.n	4009ec <ili9341_send_command+0x10>
  4009fc:	4b09      	ldr	r3, [pc, #36]	; (400a24 <ili9341_send_command+0x48>)
  4009fe:	60d8      	str	r0, [r3, #12]
  400a00:	4b08      	ldr	r3, [pc, #32]	; (400a24 <ili9341_send_command+0x48>)
  400a02:	691b      	ldr	r3, [r3, #16]
  400a04:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a08:	d108      	bne.n	400a1c <ili9341_send_command+0x40>
  400a0a:	2300      	movs	r3, #0
  400a0c:	2b00      	cmp	r3, #0
  400a0e:	d0f7      	beq.n	400a00 <ili9341_send_command+0x24>
  400a10:	2240      	movs	r2, #64	; 0x40
  400a12:	4b03      	ldr	r3, [pc, #12]	; (400a20 <ili9341_send_command+0x44>)
  400a14:	631a      	str	r2, [r3, #48]	; 0x30
  400a16:	4770      	bx	lr
  400a18:	2301      	movs	r3, #1
  400a1a:	e7ed      	b.n	4009f8 <ili9341_send_command+0x1c>
  400a1c:	2301      	movs	r3, #1
  400a1e:	e7f5      	b.n	400a0c <ili9341_send_command+0x30>
  400a20:	400e0e00 	.word	0x400e0e00
  400a24:	40008000 	.word	0x40008000

00400a28 <ili9341_send_draw_limits>:
  400a28:	b510      	push	{r4, lr}
  400a2a:	4604      	mov	r4, r0
  400a2c:	202a      	movs	r0, #42	; 0x2a
  400a2e:	4b4e      	ldr	r3, [pc, #312]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400a30:	4798      	blx	r3
  400a32:	4b4e      	ldr	r3, [pc, #312]	; (400b6c <ili9341_send_draw_limits+0x144>)
  400a34:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a38:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400a3c:	4b4c      	ldr	r3, [pc, #304]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a3e:	691b      	ldr	r3, [r3, #16]
  400a40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a44:	d17b      	bne.n	400b3e <ili9341_send_draw_limits+0x116>
  400a46:	2300      	movs	r3, #0
  400a48:	2b00      	cmp	r3, #0
  400a4a:	d0f7      	beq.n	400a3c <ili9341_send_draw_limits+0x14>
  400a4c:	4b48      	ldr	r3, [pc, #288]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a4e:	60d9      	str	r1, [r3, #12]
  400a50:	b2d2      	uxtb	r2, r2
  400a52:	4b47      	ldr	r3, [pc, #284]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a54:	691b      	ldr	r3, [r3, #16]
  400a56:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a5a:	d172      	bne.n	400b42 <ili9341_send_draw_limits+0x11a>
  400a5c:	2300      	movs	r3, #0
  400a5e:	2b00      	cmp	r3, #0
  400a60:	d0f7      	beq.n	400a52 <ili9341_send_draw_limits+0x2a>
  400a62:	4b43      	ldr	r3, [pc, #268]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a64:	60da      	str	r2, [r3, #12]
  400a66:	b1cc      	cbz	r4, 400a9c <ili9341_send_draw_limits+0x74>
  400a68:	4b42      	ldr	r3, [pc, #264]	; (400b74 <ili9341_send_draw_limits+0x14c>)
  400a6a:	f9b3 2000 	ldrsh.w	r2, [r3]
  400a6e:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400a72:	4b3f      	ldr	r3, [pc, #252]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a74:	691b      	ldr	r3, [r3, #16]
  400a76:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a7a:	d164      	bne.n	400b46 <ili9341_send_draw_limits+0x11e>
  400a7c:	2300      	movs	r3, #0
  400a7e:	2b00      	cmp	r3, #0
  400a80:	d0f7      	beq.n	400a72 <ili9341_send_draw_limits+0x4a>
  400a82:	4b3b      	ldr	r3, [pc, #236]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a84:	60d9      	str	r1, [r3, #12]
  400a86:	b2d2      	uxtb	r2, r2
  400a88:	4b39      	ldr	r3, [pc, #228]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a8a:	691b      	ldr	r3, [r3, #16]
  400a8c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400a90:	d15b      	bne.n	400b4a <ili9341_send_draw_limits+0x122>
  400a92:	2300      	movs	r3, #0
  400a94:	2b00      	cmp	r3, #0
  400a96:	d0f7      	beq.n	400a88 <ili9341_send_draw_limits+0x60>
  400a98:	4b35      	ldr	r3, [pc, #212]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9a:	60da      	str	r2, [r3, #12]
  400a9c:	4b34      	ldr	r3, [pc, #208]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400a9e:	691b      	ldr	r3, [r3, #16]
  400aa0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400aa4:	d153      	bne.n	400b4e <ili9341_send_draw_limits+0x126>
  400aa6:	2300      	movs	r3, #0
  400aa8:	2b00      	cmp	r3, #0
  400aaa:	d0f7      	beq.n	400a9c <ili9341_send_draw_limits+0x74>
  400aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ab0:	4b31      	ldr	r3, [pc, #196]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400ab2:	631a      	str	r2, [r3, #48]	; 0x30
  400ab4:	202b      	movs	r0, #43	; 0x2b
  400ab6:	4b2c      	ldr	r3, [pc, #176]	; (400b68 <ili9341_send_draw_limits+0x140>)
  400ab8:	4798      	blx	r3
  400aba:	4b30      	ldr	r3, [pc, #192]	; (400b7c <ili9341_send_draw_limits+0x154>)
  400abc:	f9b3 2000 	ldrsh.w	r2, [r3]
  400ac0:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400ac4:	4b2a      	ldr	r3, [pc, #168]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ac6:	691b      	ldr	r3, [r3, #16]
  400ac8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400acc:	d141      	bne.n	400b52 <ili9341_send_draw_limits+0x12a>
  400ace:	2300      	movs	r3, #0
  400ad0:	2b00      	cmp	r3, #0
  400ad2:	d0f7      	beq.n	400ac4 <ili9341_send_draw_limits+0x9c>
  400ad4:	4b26      	ldr	r3, [pc, #152]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400ad6:	60d9      	str	r1, [r3, #12]
  400ad8:	b2d2      	uxtb	r2, r2
  400ada:	4b25      	ldr	r3, [pc, #148]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400adc:	691b      	ldr	r3, [r3, #16]
  400ade:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ae2:	d138      	bne.n	400b56 <ili9341_send_draw_limits+0x12e>
  400ae4:	2300      	movs	r3, #0
  400ae6:	2b00      	cmp	r3, #0
  400ae8:	d0f7      	beq.n	400ada <ili9341_send_draw_limits+0xb2>
  400aea:	4b21      	ldr	r3, [pc, #132]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400aec:	60da      	str	r2, [r3, #12]
  400aee:	b1cc      	cbz	r4, 400b24 <ili9341_send_draw_limits+0xfc>
  400af0:	4b23      	ldr	r3, [pc, #140]	; (400b80 <ili9341_send_draw_limits+0x158>)
  400af2:	f9b3 2000 	ldrsh.w	r2, [r3]
  400af6:	f3c2 2107 	ubfx	r1, r2, #8, #8
  400afa:	4b1d      	ldr	r3, [pc, #116]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400afc:	691b      	ldr	r3, [r3, #16]
  400afe:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b02:	d12a      	bne.n	400b5a <ili9341_send_draw_limits+0x132>
  400b04:	2300      	movs	r3, #0
  400b06:	2b00      	cmp	r3, #0
  400b08:	d0f7      	beq.n	400afa <ili9341_send_draw_limits+0xd2>
  400b0a:	4b19      	ldr	r3, [pc, #100]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b0c:	60d9      	str	r1, [r3, #12]
  400b0e:	b2d2      	uxtb	r2, r2
  400b10:	4b17      	ldr	r3, [pc, #92]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b12:	691b      	ldr	r3, [r3, #16]
  400b14:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b18:	d121      	bne.n	400b5e <ili9341_send_draw_limits+0x136>
  400b1a:	2300      	movs	r3, #0
  400b1c:	2b00      	cmp	r3, #0
  400b1e:	d0f7      	beq.n	400b10 <ili9341_send_draw_limits+0xe8>
  400b20:	4b13      	ldr	r3, [pc, #76]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b22:	60da      	str	r2, [r3, #12]
  400b24:	4b12      	ldr	r3, [pc, #72]	; (400b70 <ili9341_send_draw_limits+0x148>)
  400b26:	691b      	ldr	r3, [r3, #16]
  400b28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400b2c:	d119      	bne.n	400b62 <ili9341_send_draw_limits+0x13a>
  400b2e:	2300      	movs	r3, #0
  400b30:	2b00      	cmp	r3, #0
  400b32:	d0f7      	beq.n	400b24 <ili9341_send_draw_limits+0xfc>
  400b34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400b38:	4b0f      	ldr	r3, [pc, #60]	; (400b78 <ili9341_send_draw_limits+0x150>)
  400b3a:	631a      	str	r2, [r3, #48]	; 0x30
  400b3c:	bd10      	pop	{r4, pc}
  400b3e:	2301      	movs	r3, #1
  400b40:	e782      	b.n	400a48 <ili9341_send_draw_limits+0x20>
  400b42:	2301      	movs	r3, #1
  400b44:	e78b      	b.n	400a5e <ili9341_send_draw_limits+0x36>
  400b46:	2301      	movs	r3, #1
  400b48:	e799      	b.n	400a7e <ili9341_send_draw_limits+0x56>
  400b4a:	2301      	movs	r3, #1
  400b4c:	e7a2      	b.n	400a94 <ili9341_send_draw_limits+0x6c>
  400b4e:	2301      	movs	r3, #1
  400b50:	e7aa      	b.n	400aa8 <ili9341_send_draw_limits+0x80>
  400b52:	2301      	movs	r3, #1
  400b54:	e7bc      	b.n	400ad0 <ili9341_send_draw_limits+0xa8>
  400b56:	2301      	movs	r3, #1
  400b58:	e7c5      	b.n	400ae6 <ili9341_send_draw_limits+0xbe>
  400b5a:	2301      	movs	r3, #1
  400b5c:	e7d3      	b.n	400b06 <ili9341_send_draw_limits+0xde>
  400b5e:	2301      	movs	r3, #1
  400b60:	e7dc      	b.n	400b1c <ili9341_send_draw_limits+0xf4>
  400b62:	2301      	movs	r3, #1
  400b64:	e7e4      	b.n	400b30 <ili9341_send_draw_limits+0x108>
  400b66:	bf00      	nop
  400b68:	004009dd 	.word	0x004009dd
  400b6c:	20400a40 	.word	0x20400a40
  400b70:	40008000 	.word	0x40008000
  400b74:	20400a3c 	.word	0x20400a3c
  400b78:	400e1400 	.word	0x400e1400
  400b7c:	20400a42 	.word	0x20400a42
  400b80:	20400a3e 	.word	0x20400a3e

00400b84 <ili9341_interface_init>:
  400b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400b88:	b084      	sub	sp, #16
  400b8a:	2703      	movs	r7, #3
  400b8c:	ad04      	add	r5, sp, #16
  400b8e:	f845 7d04 	str.w	r7, [r5, #-4]!
  400b92:	4c10      	ldr	r4, [pc, #64]	; (400bd4 <ili9341_interface_init+0x50>)
  400b94:	4620      	mov	r0, r4
  400b96:	4b10      	ldr	r3, [pc, #64]	; (400bd8 <ili9341_interface_init+0x54>)
  400b98:	4798      	blx	r3
  400b9a:	2600      	movs	r6, #0
  400b9c:	9600      	str	r6, [sp, #0]
  400b9e:	4b0f      	ldr	r3, [pc, #60]	; (400bdc <ili9341_interface_init+0x58>)
  400ba0:	4632      	mov	r2, r6
  400ba2:	4629      	mov	r1, r5
  400ba4:	4620      	mov	r0, r4
  400ba6:	f8df 8048 	ldr.w	r8, [pc, #72]	; 400bf0 <ili9341_interface_init+0x6c>
  400baa:	47c0      	blx	r8
  400bac:	4632      	mov	r2, r6
  400bae:	4639      	mov	r1, r7
  400bb0:	4620      	mov	r0, r4
  400bb2:	4b0b      	ldr	r3, [pc, #44]	; (400be0 <ili9341_interface_init+0x5c>)
  400bb4:	4798      	blx	r3
  400bb6:	2601      	movs	r6, #1
  400bb8:	6026      	str	r6, [r4, #0]
  400bba:	4629      	mov	r1, r5
  400bbc:	4620      	mov	r0, r4
  400bbe:	4b09      	ldr	r3, [pc, #36]	; (400be4 <ili9341_interface_init+0x60>)
  400bc0:	4798      	blx	r3
  400bc2:	23f0      	movs	r3, #240	; 0xf0
  400bc4:	60e3      	str	r3, [r4, #12]
  400bc6:	60e6      	str	r6, [r4, #12]
  400bc8:	4807      	ldr	r0, [pc, #28]	; (400be8 <ili9341_interface_init+0x64>)
  400bca:	4b08      	ldr	r3, [pc, #32]	; (400bec <ili9341_interface_init+0x68>)
  400bcc:	4798      	blx	r3
  400bce:	b004      	add	sp, #16
  400bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400bd4:	40008000 	.word	0x40008000
  400bd8:	0041fc2d 	.word	0x0041fc2d
  400bdc:	02625a00 	.word	0x02625a00
  400be0:	004205ed 	.word	0x004205ed
  400be4:	0041fd01 	.word	0x0041fd01
  400be8:	0073c0b7 	.word	0x0073c0b7
  400bec:	20400001 	.word	0x20400001
  400bf0:	0041fc81 	.word	0x0041fc81

00400bf4 <ili9341_reset_display>:
  400bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400bf6:	4d07      	ldr	r5, [pc, #28]	; (400c14 <ili9341_reset_display+0x20>)
  400bf8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
  400bfc:	632e      	str	r6, [r5, #48]	; 0x30
  400bfe:	4f06      	ldr	r7, [pc, #24]	; (400c18 <ili9341_reset_display+0x24>)
  400c00:	4638      	mov	r0, r7
  400c02:	4c06      	ldr	r4, [pc, #24]	; (400c1c <ili9341_reset_display+0x28>)
  400c04:	47a0      	blx	r4
  400c06:	636e      	str	r6, [r5, #52]	; 0x34
  400c08:	4638      	mov	r0, r7
  400c0a:	47a0      	blx	r4
  400c0c:	632e      	str	r6, [r5, #48]	; 0x30
  400c0e:	4804      	ldr	r0, [pc, #16]	; (400c20 <ili9341_reset_display+0x2c>)
  400c10:	47a0      	blx	r4
  400c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400c14:	400e0e00 	.word	0x400e0e00
  400c18:	0007b784 	.word	0x0007b784
  400c1c:	20400001 	.word	0x20400001
  400c20:	0073c0b7 	.word	0x0073c0b7

00400c24 <ili9341_exit_standby>:
  400c24:	b570      	push	{r4, r5, r6, lr}
  400c26:	2011      	movs	r0, #17
  400c28:	4e06      	ldr	r6, [pc, #24]	; (400c44 <ili9341_exit_standby+0x20>)
  400c2a:	47b0      	blx	r6
  400c2c:	4c06      	ldr	r4, [pc, #24]	; (400c48 <ili9341_exit_standby+0x24>)
  400c2e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
  400c32:	6325      	str	r5, [r4, #48]	; 0x30
  400c34:	4805      	ldr	r0, [pc, #20]	; (400c4c <ili9341_exit_standby+0x28>)
  400c36:	4b06      	ldr	r3, [pc, #24]	; (400c50 <ili9341_exit_standby+0x2c>)
  400c38:	4798      	blx	r3
  400c3a:	2029      	movs	r0, #41	; 0x29
  400c3c:	47b0      	blx	r6
  400c3e:	6325      	str	r5, [r4, #48]	; 0x30
  400c40:	bd70      	pop	{r4, r5, r6, pc}
  400c42:	bf00      	nop
  400c44:	004009dd 	.word	0x004009dd
  400c48:	400e1400 	.word	0x400e1400
  400c4c:	0073c0b7 	.word	0x0073c0b7
  400c50:	20400001 	.word	0x20400001

00400c54 <ili9341_set_top_left_limit>:
  400c54:	b508      	push	{r3, lr}
  400c56:	4b04      	ldr	r3, [pc, #16]	; (400c68 <ili9341_set_top_left_limit+0x14>)
  400c58:	8018      	strh	r0, [r3, #0]
  400c5a:	4b04      	ldr	r3, [pc, #16]	; (400c6c <ili9341_set_top_left_limit+0x18>)
  400c5c:	8019      	strh	r1, [r3, #0]
  400c5e:	2000      	movs	r0, #0
  400c60:	4b03      	ldr	r3, [pc, #12]	; (400c70 <ili9341_set_top_left_limit+0x1c>)
  400c62:	4798      	blx	r3
  400c64:	bd08      	pop	{r3, pc}
  400c66:	bf00      	nop
  400c68:	20400a40 	.word	0x20400a40
  400c6c:	20400a42 	.word	0x20400a42
  400c70:	00400a29 	.word	0x00400a29

00400c74 <ili9341_set_bottom_right_limit>:
  400c74:	b508      	push	{r3, lr}
  400c76:	4b04      	ldr	r3, [pc, #16]	; (400c88 <ili9341_set_bottom_right_limit+0x14>)
  400c78:	8018      	strh	r0, [r3, #0]
  400c7a:	4b04      	ldr	r3, [pc, #16]	; (400c8c <ili9341_set_bottom_right_limit+0x18>)
  400c7c:	8019      	strh	r1, [r3, #0]
  400c7e:	2001      	movs	r0, #1
  400c80:	4b03      	ldr	r3, [pc, #12]	; (400c90 <ili9341_set_bottom_right_limit+0x1c>)
  400c82:	4798      	blx	r3
  400c84:	bd08      	pop	{r3, pc}
  400c86:	bf00      	nop
  400c88:	20400a3c 	.word	0x20400a3c
  400c8c:	20400a3e 	.word	0x20400a3e
  400c90:	00400a29 	.word	0x00400a29

00400c94 <ili9341_set_limits>:
  400c94:	b510      	push	{r4, lr}
  400c96:	4c06      	ldr	r4, [pc, #24]	; (400cb0 <ili9341_set_limits+0x1c>)
  400c98:	8020      	strh	r0, [r4, #0]
  400c9a:	4806      	ldr	r0, [pc, #24]	; (400cb4 <ili9341_set_limits+0x20>)
  400c9c:	8001      	strh	r1, [r0, #0]
  400c9e:	4906      	ldr	r1, [pc, #24]	; (400cb8 <ili9341_set_limits+0x24>)
  400ca0:	800a      	strh	r2, [r1, #0]
  400ca2:	4a06      	ldr	r2, [pc, #24]	; (400cbc <ili9341_set_limits+0x28>)
  400ca4:	8013      	strh	r3, [r2, #0]
  400ca6:	2001      	movs	r0, #1
  400ca8:	4b05      	ldr	r3, [pc, #20]	; (400cc0 <ili9341_set_limits+0x2c>)
  400caa:	4798      	blx	r3
  400cac:	bd10      	pop	{r4, pc}
  400cae:	bf00      	nop
  400cb0:	20400a40 	.word	0x20400a40
  400cb4:	20400a42 	.word	0x20400a42
  400cb8:	20400a3c 	.word	0x20400a3c
  400cbc:	20400a3e 	.word	0x20400a3e
  400cc0:	00400a29 	.word	0x00400a29

00400cc4 <ili9341_copy_pixels_to_screen>:
  400cc4:	b538      	push	{r3, r4, r5, lr}
  400cc6:	4605      	mov	r5, r0
  400cc8:	460c      	mov	r4, r1
  400cca:	202c      	movs	r0, #44	; 0x2c
  400ccc:	4b18      	ldr	r3, [pc, #96]	; (400d30 <ili9341_copy_pixels_to_screen+0x6c>)
  400cce:	4798      	blx	r3
  400cd0:	e018      	b.n	400d04 <ili9341_copy_pixels_to_screen+0x40>
  400cd2:	782a      	ldrb	r2, [r5, #0]
  400cd4:	4b17      	ldr	r3, [pc, #92]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cd6:	691b      	ldr	r3, [r3, #16]
  400cd8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cdc:	d122      	bne.n	400d24 <ili9341_copy_pixels_to_screen+0x60>
  400cde:	2300      	movs	r3, #0
  400ce0:	2b00      	cmp	r3, #0
  400ce2:	d0f7      	beq.n	400cd4 <ili9341_copy_pixels_to_screen+0x10>
  400ce4:	4b13      	ldr	r3, [pc, #76]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400ce6:	60da      	str	r2, [r3, #12]
  400ce8:	882a      	ldrh	r2, [r5, #0]
  400cea:	0a12      	lsrs	r2, r2, #8
  400cec:	4b11      	ldr	r3, [pc, #68]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cee:	691b      	ldr	r3, [r3, #16]
  400cf0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400cf4:	d118      	bne.n	400d28 <ili9341_copy_pixels_to_screen+0x64>
  400cf6:	2300      	movs	r3, #0
  400cf8:	2b00      	cmp	r3, #0
  400cfa:	d0f7      	beq.n	400cec <ili9341_copy_pixels_to_screen+0x28>
  400cfc:	4b0d      	ldr	r3, [pc, #52]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400cfe:	60da      	str	r2, [r3, #12]
  400d00:	3502      	adds	r5, #2
  400d02:	460c      	mov	r4, r1
  400d04:	1e61      	subs	r1, r4, #1
  400d06:	2c00      	cmp	r4, #0
  400d08:	d1e3      	bne.n	400cd2 <ili9341_copy_pixels_to_screen+0xe>
  400d0a:	4b0a      	ldr	r3, [pc, #40]	; (400d34 <ili9341_copy_pixels_to_screen+0x70>)
  400d0c:	691b      	ldr	r3, [r3, #16]
  400d0e:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d12:	d10b      	bne.n	400d2c <ili9341_copy_pixels_to_screen+0x68>
  400d14:	4623      	mov	r3, r4
  400d16:	2b00      	cmp	r3, #0
  400d18:	d0f7      	beq.n	400d0a <ili9341_copy_pixels_to_screen+0x46>
  400d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d1e:	4b06      	ldr	r3, [pc, #24]	; (400d38 <ili9341_copy_pixels_to_screen+0x74>)
  400d20:	631a      	str	r2, [r3, #48]	; 0x30
  400d22:	bd38      	pop	{r3, r4, r5, pc}
  400d24:	2301      	movs	r3, #1
  400d26:	e7db      	b.n	400ce0 <ili9341_copy_pixels_to_screen+0x1c>
  400d28:	2301      	movs	r3, #1
  400d2a:	e7e5      	b.n	400cf8 <ili9341_copy_pixels_to_screen+0x34>
  400d2c:	2301      	movs	r3, #1
  400d2e:	e7f2      	b.n	400d16 <ili9341_copy_pixels_to_screen+0x52>
  400d30:	004009dd 	.word	0x004009dd
  400d34:	40008000 	.word	0x40008000
  400d38:	400e1400 	.word	0x400e1400

00400d3c <ili9341_set_orientation>:
  400d3c:	b510      	push	{r4, lr}
  400d3e:	f080 0005 	eor.w	r0, r0, #5
  400d42:	f010 0f01 	tst.w	r0, #1
  400d46:	d124      	bne.n	400d92 <ili9341_set_orientation+0x56>
  400d48:	2448      	movs	r4, #72	; 0x48
  400d4a:	f010 0f02 	tst.w	r0, #2
  400d4e:	d001      	beq.n	400d54 <ili9341_set_orientation+0x18>
  400d50:	f044 0480 	orr.w	r4, r4, #128	; 0x80
  400d54:	f010 0f04 	tst.w	r0, #4
  400d58:	d001      	beq.n	400d5e <ili9341_set_orientation+0x22>
  400d5a:	f044 0420 	orr.w	r4, r4, #32
  400d5e:	2036      	movs	r0, #54	; 0x36
  400d60:	4b0f      	ldr	r3, [pc, #60]	; (400da0 <ili9341_set_orientation+0x64>)
  400d62:	4798      	blx	r3
  400d64:	4b0f      	ldr	r3, [pc, #60]	; (400da4 <ili9341_set_orientation+0x68>)
  400d66:	691b      	ldr	r3, [r3, #16]
  400d68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d6c:	d113      	bne.n	400d96 <ili9341_set_orientation+0x5a>
  400d6e:	2300      	movs	r3, #0
  400d70:	2b00      	cmp	r3, #0
  400d72:	d0f7      	beq.n	400d64 <ili9341_set_orientation+0x28>
  400d74:	4b0b      	ldr	r3, [pc, #44]	; (400da4 <ili9341_set_orientation+0x68>)
  400d76:	60dc      	str	r4, [r3, #12]
  400d78:	4b0a      	ldr	r3, [pc, #40]	; (400da4 <ili9341_set_orientation+0x68>)
  400d7a:	691b      	ldr	r3, [r3, #16]
  400d7c:	f413 7f00 	tst.w	r3, #512	; 0x200
  400d80:	d10b      	bne.n	400d9a <ili9341_set_orientation+0x5e>
  400d82:	2300      	movs	r3, #0
  400d84:	2b00      	cmp	r3, #0
  400d86:	d0f7      	beq.n	400d78 <ili9341_set_orientation+0x3c>
  400d88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400d8c:	4b06      	ldr	r3, [pc, #24]	; (400da8 <ili9341_set_orientation+0x6c>)
  400d8e:	631a      	str	r2, [r3, #48]	; 0x30
  400d90:	bd10      	pop	{r4, pc}
  400d92:	2408      	movs	r4, #8
  400d94:	e7d9      	b.n	400d4a <ili9341_set_orientation+0xe>
  400d96:	2301      	movs	r3, #1
  400d98:	e7ea      	b.n	400d70 <ili9341_set_orientation+0x34>
  400d9a:	2301      	movs	r3, #1
  400d9c:	e7f2      	b.n	400d84 <ili9341_set_orientation+0x48>
  400d9e:	bf00      	nop
  400da0:	004009dd 	.word	0x004009dd
  400da4:	40008000 	.word	0x40008000
  400da8:	400e1400 	.word	0x400e1400

00400dac <ili9341_controller_init_registers>:
  400dac:	b510      	push	{r4, lr}
  400dae:	20cd      	movs	r0, #205	; 0xcd
  400db0:	4ba9      	ldr	r3, [pc, #676]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400db2:	4798      	blx	r3
  400db4:	4ba9      	ldr	r3, [pc, #676]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400db6:	691b      	ldr	r3, [r3, #16]
  400db8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dbc:	f040 8195 	bne.w	4010ea <ili9341_controller_init_registers+0x33e>
  400dc0:	2300      	movs	r3, #0
  400dc2:	2b00      	cmp	r3, #0
  400dc4:	d0f6      	beq.n	400db4 <ili9341_controller_init_registers+0x8>
  400dc6:	2239      	movs	r2, #57	; 0x39
  400dc8:	4ba4      	ldr	r3, [pc, #656]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dca:	60da      	str	r2, [r3, #12]
  400dcc:	4ba3      	ldr	r3, [pc, #652]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dce:	691b      	ldr	r3, [r3, #16]
  400dd0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dd4:	f040 818b 	bne.w	4010ee <ili9341_controller_init_registers+0x342>
  400dd8:	2300      	movs	r3, #0
  400dda:	2b00      	cmp	r3, #0
  400ddc:	d0f6      	beq.n	400dcc <ili9341_controller_init_registers+0x20>
  400dde:	222c      	movs	r2, #44	; 0x2c
  400de0:	4b9e      	ldr	r3, [pc, #632]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de2:	60da      	str	r2, [r3, #12]
  400de4:	4b9d      	ldr	r3, [pc, #628]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400de6:	691b      	ldr	r3, [r3, #16]
  400de8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400dec:	f040 8181 	bne.w	4010f2 <ili9341_controller_init_registers+0x346>
  400df0:	2300      	movs	r3, #0
  400df2:	2b00      	cmp	r3, #0
  400df4:	d0f6      	beq.n	400de4 <ili9341_controller_init_registers+0x38>
  400df6:	2200      	movs	r2, #0
  400df8:	4b98      	ldr	r3, [pc, #608]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfa:	60da      	str	r2, [r3, #12]
  400dfc:	4b97      	ldr	r3, [pc, #604]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400dfe:	691b      	ldr	r3, [r3, #16]
  400e00:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e04:	f040 8177 	bne.w	4010f6 <ili9341_controller_init_registers+0x34a>
  400e08:	2300      	movs	r3, #0
  400e0a:	2b00      	cmp	r3, #0
  400e0c:	d0f6      	beq.n	400dfc <ili9341_controller_init_registers+0x50>
  400e0e:	2234      	movs	r2, #52	; 0x34
  400e10:	4b92      	ldr	r3, [pc, #584]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e12:	60da      	str	r2, [r3, #12]
  400e14:	4b91      	ldr	r3, [pc, #580]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e16:	691b      	ldr	r3, [r3, #16]
  400e18:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e1c:	f040 816d 	bne.w	4010fa <ili9341_controller_init_registers+0x34e>
  400e20:	2300      	movs	r3, #0
  400e22:	2b00      	cmp	r3, #0
  400e24:	d0f6      	beq.n	400e14 <ili9341_controller_init_registers+0x68>
  400e26:	2202      	movs	r2, #2
  400e28:	4b8c      	ldr	r3, [pc, #560]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2a:	60da      	str	r2, [r3, #12]
  400e2c:	4b8b      	ldr	r3, [pc, #556]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e2e:	691b      	ldr	r3, [r3, #16]
  400e30:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e34:	f040 8163 	bne.w	4010fe <ili9341_controller_init_registers+0x352>
  400e38:	2300      	movs	r3, #0
  400e3a:	2b00      	cmp	r3, #0
  400e3c:	d0f6      	beq.n	400e2c <ili9341_controller_init_registers+0x80>
  400e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400e42:	4b87      	ldr	r3, [pc, #540]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400e44:	631a      	str	r2, [r3, #48]	; 0x30
  400e46:	20cf      	movs	r0, #207	; 0xcf
  400e48:	4b83      	ldr	r3, [pc, #524]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400e4a:	4798      	blx	r3
  400e4c:	4b83      	ldr	r3, [pc, #524]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e4e:	691b      	ldr	r3, [r3, #16]
  400e50:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e54:	f040 8155 	bne.w	401102 <ili9341_controller_init_registers+0x356>
  400e58:	2300      	movs	r3, #0
  400e5a:	2b00      	cmp	r3, #0
  400e5c:	d0f6      	beq.n	400e4c <ili9341_controller_init_registers+0xa0>
  400e5e:	2200      	movs	r2, #0
  400e60:	4b7e      	ldr	r3, [pc, #504]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e62:	60da      	str	r2, [r3, #12]
  400e64:	4b7d      	ldr	r3, [pc, #500]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e66:	691b      	ldr	r3, [r3, #16]
  400e68:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e6c:	f040 814b 	bne.w	401106 <ili9341_controller_init_registers+0x35a>
  400e70:	2300      	movs	r3, #0
  400e72:	2b00      	cmp	r3, #0
  400e74:	d0f6      	beq.n	400e64 <ili9341_controller_init_registers+0xb8>
  400e76:	22aa      	movs	r2, #170	; 0xaa
  400e78:	4b78      	ldr	r3, [pc, #480]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7a:	60da      	str	r2, [r3, #12]
  400e7c:	4b77      	ldr	r3, [pc, #476]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e7e:	691b      	ldr	r3, [r3, #16]
  400e80:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e84:	f040 8141 	bne.w	40110a <ili9341_controller_init_registers+0x35e>
  400e88:	2300      	movs	r3, #0
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d0f6      	beq.n	400e7c <ili9341_controller_init_registers+0xd0>
  400e8e:	22b0      	movs	r2, #176	; 0xb0
  400e90:	4b72      	ldr	r3, [pc, #456]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e92:	60da      	str	r2, [r3, #12]
  400e94:	4b71      	ldr	r3, [pc, #452]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400e96:	691b      	ldr	r3, [r3, #16]
  400e98:	f413 7f00 	tst.w	r3, #512	; 0x200
  400e9c:	f040 8137 	bne.w	40110e <ili9341_controller_init_registers+0x362>
  400ea0:	2300      	movs	r3, #0
  400ea2:	2b00      	cmp	r3, #0
  400ea4:	d0f6      	beq.n	400e94 <ili9341_controller_init_registers+0xe8>
  400ea6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400eaa:	4b6d      	ldr	r3, [pc, #436]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400eac:	631a      	str	r2, [r3, #48]	; 0x30
  400eae:	20f7      	movs	r0, #247	; 0xf7
  400eb0:	4b69      	ldr	r3, [pc, #420]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eb2:	4798      	blx	r3
  400eb4:	4b69      	ldr	r3, [pc, #420]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eb6:	691b      	ldr	r3, [r3, #16]
  400eb8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ebc:	f040 8129 	bne.w	401112 <ili9341_controller_init_registers+0x366>
  400ec0:	2300      	movs	r3, #0
  400ec2:	2b00      	cmp	r3, #0
  400ec4:	d0f6      	beq.n	400eb4 <ili9341_controller_init_registers+0x108>
  400ec6:	2230      	movs	r2, #48	; 0x30
  400ec8:	4b64      	ldr	r3, [pc, #400]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eca:	60da      	str	r2, [r3, #12]
  400ecc:	4b63      	ldr	r3, [pc, #396]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ece:	691b      	ldr	r3, [r3, #16]
  400ed0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ed4:	f040 811f 	bne.w	401116 <ili9341_controller_init_registers+0x36a>
  400ed8:	2300      	movs	r3, #0
  400eda:	2b00      	cmp	r3, #0
  400edc:	d0f6      	beq.n	400ecc <ili9341_controller_init_registers+0x120>
  400ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400ee2:	4b5f      	ldr	r3, [pc, #380]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400ee4:	631a      	str	r2, [r3, #48]	; 0x30
  400ee6:	20c0      	movs	r0, #192	; 0xc0
  400ee8:	4b5b      	ldr	r3, [pc, #364]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400eea:	4798      	blx	r3
  400eec:	4b5b      	ldr	r3, [pc, #364]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400eee:	691b      	ldr	r3, [r3, #16]
  400ef0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400ef4:	f040 8111 	bne.w	40111a <ili9341_controller_init_registers+0x36e>
  400ef8:	2300      	movs	r3, #0
  400efa:	2b00      	cmp	r3, #0
  400efc:	d0f6      	beq.n	400eec <ili9341_controller_init_registers+0x140>
  400efe:	2225      	movs	r2, #37	; 0x25
  400f00:	4b56      	ldr	r3, [pc, #344]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f02:	60da      	str	r2, [r3, #12]
  400f04:	4b55      	ldr	r3, [pc, #340]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f06:	691b      	ldr	r3, [r3, #16]
  400f08:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f0c:	f040 8107 	bne.w	40111e <ili9341_controller_init_registers+0x372>
  400f10:	2300      	movs	r3, #0
  400f12:	2b00      	cmp	r3, #0
  400f14:	d0f6      	beq.n	400f04 <ili9341_controller_init_registers+0x158>
  400f16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f1a:	4b51      	ldr	r3, [pc, #324]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f1c:	631a      	str	r2, [r3, #48]	; 0x30
  400f1e:	20c1      	movs	r0, #193	; 0xc1
  400f20:	4b4d      	ldr	r3, [pc, #308]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f22:	4798      	blx	r3
  400f24:	4b4d      	ldr	r3, [pc, #308]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f26:	691b      	ldr	r3, [r3, #16]
  400f28:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f2c:	f040 80f9 	bne.w	401122 <ili9341_controller_init_registers+0x376>
  400f30:	2300      	movs	r3, #0
  400f32:	2b00      	cmp	r3, #0
  400f34:	d0f6      	beq.n	400f24 <ili9341_controller_init_registers+0x178>
  400f36:	2211      	movs	r2, #17
  400f38:	4b48      	ldr	r3, [pc, #288]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3a:	60da      	str	r2, [r3, #12]
  400f3c:	4b47      	ldr	r3, [pc, #284]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f3e:	691b      	ldr	r3, [r3, #16]
  400f40:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f44:	f040 80ef 	bne.w	401126 <ili9341_controller_init_registers+0x37a>
  400f48:	2300      	movs	r3, #0
  400f4a:	2b00      	cmp	r3, #0
  400f4c:	d0f6      	beq.n	400f3c <ili9341_controller_init_registers+0x190>
  400f4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400f52:	4b43      	ldr	r3, [pc, #268]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400f54:	631a      	str	r2, [r3, #48]	; 0x30
  400f56:	20c5      	movs	r0, #197	; 0xc5
  400f58:	4b3f      	ldr	r3, [pc, #252]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400f5a:	4798      	blx	r3
  400f5c:	4b3f      	ldr	r3, [pc, #252]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f5e:	691b      	ldr	r3, [r3, #16]
  400f60:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f64:	f040 80e1 	bne.w	40112a <ili9341_controller_init_registers+0x37e>
  400f68:	2300      	movs	r3, #0
  400f6a:	2b00      	cmp	r3, #0
  400f6c:	d0f6      	beq.n	400f5c <ili9341_controller_init_registers+0x1b0>
  400f6e:	225c      	movs	r2, #92	; 0x5c
  400f70:	4b3a      	ldr	r3, [pc, #232]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f72:	60da      	str	r2, [r3, #12]
  400f74:	4b39      	ldr	r3, [pc, #228]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f76:	691b      	ldr	r3, [r3, #16]
  400f78:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f7c:	f040 80d7 	bne.w	40112e <ili9341_controller_init_registers+0x382>
  400f80:	2300      	movs	r3, #0
  400f82:	2b00      	cmp	r3, #0
  400f84:	d0f6      	beq.n	400f74 <ili9341_controller_init_registers+0x1c8>
  400f86:	224c      	movs	r2, #76	; 0x4c
  400f88:	4b34      	ldr	r3, [pc, #208]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8a:	60da      	str	r2, [r3, #12]
  400f8c:	4b33      	ldr	r3, [pc, #204]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400f8e:	691b      	ldr	r3, [r3, #16]
  400f90:	f413 7f00 	tst.w	r3, #512	; 0x200
  400f94:	f040 80cd 	bne.w	401132 <ili9341_controller_init_registers+0x386>
  400f98:	2300      	movs	r3, #0
  400f9a:	2b00      	cmp	r3, #0
  400f9c:	d0f6      	beq.n	400f8c <ili9341_controller_init_registers+0x1e0>
  400f9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fa2:	4b2f      	ldr	r3, [pc, #188]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fa4:	631a      	str	r2, [r3, #48]	; 0x30
  400fa6:	20c7      	movs	r0, #199	; 0xc7
  400fa8:	4b2b      	ldr	r3, [pc, #172]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400faa:	4798      	blx	r3
  400fac:	4b2b      	ldr	r3, [pc, #172]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fae:	691b      	ldr	r3, [r3, #16]
  400fb0:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fb4:	f040 80bf 	bne.w	401136 <ili9341_controller_init_registers+0x38a>
  400fb8:	2300      	movs	r3, #0
  400fba:	2b00      	cmp	r3, #0
  400fbc:	d0f6      	beq.n	400fac <ili9341_controller_init_registers+0x200>
  400fbe:	2294      	movs	r2, #148	; 0x94
  400fc0:	4b26      	ldr	r3, [pc, #152]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc2:	60da      	str	r2, [r3, #12]
  400fc4:	4b25      	ldr	r3, [pc, #148]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fc6:	691b      	ldr	r3, [r3, #16]
  400fc8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fcc:	f040 80b5 	bne.w	40113a <ili9341_controller_init_registers+0x38e>
  400fd0:	2300      	movs	r3, #0
  400fd2:	2b00      	cmp	r3, #0
  400fd4:	d0f6      	beq.n	400fc4 <ili9341_controller_init_registers+0x218>
  400fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  400fda:	4b21      	ldr	r3, [pc, #132]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  400fdc:	631a      	str	r2, [r3, #48]	; 0x30
  400fde:	20e8      	movs	r0, #232	; 0xe8
  400fe0:	4b1d      	ldr	r3, [pc, #116]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  400fe2:	4798      	blx	r3
  400fe4:	4b1d      	ldr	r3, [pc, #116]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400fe6:	691b      	ldr	r3, [r3, #16]
  400fe8:	f413 7f00 	tst.w	r3, #512	; 0x200
  400fec:	f040 80a7 	bne.w	40113e <ili9341_controller_init_registers+0x392>
  400ff0:	2300      	movs	r3, #0
  400ff2:	2b00      	cmp	r3, #0
  400ff4:	d0f6      	beq.n	400fe4 <ili9341_controller_init_registers+0x238>
  400ff6:	2285      	movs	r2, #133	; 0x85
  400ff8:	4b18      	ldr	r3, [pc, #96]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffa:	60da      	str	r2, [r3, #12]
  400ffc:	4b17      	ldr	r3, [pc, #92]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  400ffe:	691b      	ldr	r3, [r3, #16]
  401000:	f413 7f00 	tst.w	r3, #512	; 0x200
  401004:	f040 809d 	bne.w	401142 <ili9341_controller_init_registers+0x396>
  401008:	2300      	movs	r3, #0
  40100a:	2b00      	cmp	r3, #0
  40100c:	d0f6      	beq.n	400ffc <ili9341_controller_init_registers+0x250>
  40100e:	2201      	movs	r2, #1
  401010:	4b12      	ldr	r3, [pc, #72]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401012:	60da      	str	r2, [r3, #12]
  401014:	4b11      	ldr	r3, [pc, #68]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  401016:	691b      	ldr	r3, [r3, #16]
  401018:	f413 7f00 	tst.w	r3, #512	; 0x200
  40101c:	f040 8093 	bne.w	401146 <ili9341_controller_init_registers+0x39a>
  401020:	2300      	movs	r3, #0
  401022:	2b00      	cmp	r3, #0
  401024:	d0f6      	beq.n	401014 <ili9341_controller_init_registers+0x268>
  401026:	2278      	movs	r2, #120	; 0x78
  401028:	4b0c      	ldr	r3, [pc, #48]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102a:	60da      	str	r2, [r3, #12]
  40102c:	4b0b      	ldr	r3, [pc, #44]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40102e:	691b      	ldr	r3, [r3, #16]
  401030:	f413 7f00 	tst.w	r3, #512	; 0x200
  401034:	f040 8089 	bne.w	40114a <ili9341_controller_init_registers+0x39e>
  401038:	2300      	movs	r3, #0
  40103a:	2b00      	cmp	r3, #0
  40103c:	d0f6      	beq.n	40102c <ili9341_controller_init_registers+0x280>
  40103e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  401042:	4b07      	ldr	r3, [pc, #28]	; (401060 <ili9341_controller_init_registers+0x2b4>)
  401044:	631a      	str	r2, [r3, #48]	; 0x30
  401046:	20ea      	movs	r0, #234	; 0xea
  401048:	4b03      	ldr	r3, [pc, #12]	; (401058 <ili9341_controller_init_registers+0x2ac>)
  40104a:	4798      	blx	r3
  40104c:	4b03      	ldr	r3, [pc, #12]	; (40105c <ili9341_controller_init_registers+0x2b0>)
  40104e:	691b      	ldr	r3, [r3, #16]
  401050:	f413 7f00 	tst.w	r3, #512	; 0x200
  401054:	e006      	b.n	401064 <ili9341_controller_init_registers+0x2b8>
  401056:	bf00      	nop
  401058:	004009dd 	.word	0x004009dd
  40105c:	40008000 	.word	0x40008000
  401060:	400e1400 	.word	0x400e1400
  401064:	d173      	bne.n	40114e <ili9341_controller_init_registers+0x3a2>
  401066:	2300      	movs	r3, #0
  401068:	2b00      	cmp	r3, #0
  40106a:	d0ef      	beq.n	40104c <ili9341_controller_init_registers+0x2a0>
  40106c:	2200      	movs	r2, #0
  40106e:	4b3d      	ldr	r3, [pc, #244]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401070:	60da      	str	r2, [r3, #12]
  401072:	4b3c      	ldr	r3, [pc, #240]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401074:	691b      	ldr	r3, [r3, #16]
  401076:	f413 7f00 	tst.w	r3, #512	; 0x200
  40107a:	d16a      	bne.n	401152 <ili9341_controller_init_registers+0x3a6>
  40107c:	2300      	movs	r3, #0
  40107e:	2b00      	cmp	r3, #0
  401080:	d0f7      	beq.n	401072 <ili9341_controller_init_registers+0x2c6>
  401082:	2200      	movs	r2, #0
  401084:	4b37      	ldr	r3, [pc, #220]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  401086:	60da      	str	r2, [r3, #12]
  401088:	4b36      	ldr	r3, [pc, #216]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  40108a:	691b      	ldr	r3, [r3, #16]
  40108c:	f413 7f00 	tst.w	r3, #512	; 0x200
  401090:	d161      	bne.n	401156 <ili9341_controller_init_registers+0x3aa>
  401092:	2300      	movs	r3, #0
  401094:	2b00      	cmp	r3, #0
  401096:	d0f7      	beq.n	401088 <ili9341_controller_init_registers+0x2dc>
  401098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  40109c:	4b32      	ldr	r3, [pc, #200]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  40109e:	631a      	str	r2, [r3, #48]	; 0x30
  4010a0:	203a      	movs	r0, #58	; 0x3a
  4010a2:	4b32      	ldr	r3, [pc, #200]	; (40116c <ili9341_controller_init_registers+0x3c0>)
  4010a4:	4798      	blx	r3
  4010a6:	4b2f      	ldr	r3, [pc, #188]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010a8:	691b      	ldr	r3, [r3, #16]
  4010aa:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010ae:	d154      	bne.n	40115a <ili9341_controller_init_registers+0x3ae>
  4010b0:	2300      	movs	r3, #0
  4010b2:	2b00      	cmp	r3, #0
  4010b4:	d0f7      	beq.n	4010a6 <ili9341_controller_init_registers+0x2fa>
  4010b6:	2255      	movs	r2, #85	; 0x55
  4010b8:	4b2a      	ldr	r3, [pc, #168]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010ba:	60da      	str	r2, [r3, #12]
  4010bc:	4b29      	ldr	r3, [pc, #164]	; (401164 <ili9341_controller_init_registers+0x3b8>)
  4010be:	691b      	ldr	r3, [r3, #16]
  4010c0:	f413 7f00 	tst.w	r3, #512	; 0x200
  4010c4:	d14b      	bne.n	40115e <ili9341_controller_init_registers+0x3b2>
  4010c6:	2300      	movs	r3, #0
  4010c8:	2b00      	cmp	r3, #0
  4010ca:	d0f7      	beq.n	4010bc <ili9341_controller_init_registers+0x310>
  4010cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4010d0:	4b25      	ldr	r3, [pc, #148]	; (401168 <ili9341_controller_init_registers+0x3bc>)
  4010d2:	631a      	str	r2, [r3, #48]	; 0x30
  4010d4:	2000      	movs	r0, #0
  4010d6:	4b26      	ldr	r3, [pc, #152]	; (401170 <ili9341_controller_init_registers+0x3c4>)
  4010d8:	4798      	blx	r3
  4010da:	23f0      	movs	r3, #240	; 0xf0
  4010dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4010e0:	2100      	movs	r1, #0
  4010e2:	4608      	mov	r0, r1
  4010e4:	4c23      	ldr	r4, [pc, #140]	; (401174 <ili9341_controller_init_registers+0x3c8>)
  4010e6:	47a0      	blx	r4
  4010e8:	bd10      	pop	{r4, pc}
  4010ea:	2301      	movs	r3, #1
  4010ec:	e669      	b.n	400dc2 <ili9341_controller_init_registers+0x16>
  4010ee:	2301      	movs	r3, #1
  4010f0:	e673      	b.n	400dda <ili9341_controller_init_registers+0x2e>
  4010f2:	2301      	movs	r3, #1
  4010f4:	e67d      	b.n	400df2 <ili9341_controller_init_registers+0x46>
  4010f6:	2301      	movs	r3, #1
  4010f8:	e687      	b.n	400e0a <ili9341_controller_init_registers+0x5e>
  4010fa:	2301      	movs	r3, #1
  4010fc:	e691      	b.n	400e22 <ili9341_controller_init_registers+0x76>
  4010fe:	2301      	movs	r3, #1
  401100:	e69b      	b.n	400e3a <ili9341_controller_init_registers+0x8e>
  401102:	2301      	movs	r3, #1
  401104:	e6a9      	b.n	400e5a <ili9341_controller_init_registers+0xae>
  401106:	2301      	movs	r3, #1
  401108:	e6b3      	b.n	400e72 <ili9341_controller_init_registers+0xc6>
  40110a:	2301      	movs	r3, #1
  40110c:	e6bd      	b.n	400e8a <ili9341_controller_init_registers+0xde>
  40110e:	2301      	movs	r3, #1
  401110:	e6c7      	b.n	400ea2 <ili9341_controller_init_registers+0xf6>
  401112:	2301      	movs	r3, #1
  401114:	e6d5      	b.n	400ec2 <ili9341_controller_init_registers+0x116>
  401116:	2301      	movs	r3, #1
  401118:	e6df      	b.n	400eda <ili9341_controller_init_registers+0x12e>
  40111a:	2301      	movs	r3, #1
  40111c:	e6ed      	b.n	400efa <ili9341_controller_init_registers+0x14e>
  40111e:	2301      	movs	r3, #1
  401120:	e6f7      	b.n	400f12 <ili9341_controller_init_registers+0x166>
  401122:	2301      	movs	r3, #1
  401124:	e705      	b.n	400f32 <ili9341_controller_init_registers+0x186>
  401126:	2301      	movs	r3, #1
  401128:	e70f      	b.n	400f4a <ili9341_controller_init_registers+0x19e>
  40112a:	2301      	movs	r3, #1
  40112c:	e71d      	b.n	400f6a <ili9341_controller_init_registers+0x1be>
  40112e:	2301      	movs	r3, #1
  401130:	e727      	b.n	400f82 <ili9341_controller_init_registers+0x1d6>
  401132:	2301      	movs	r3, #1
  401134:	e731      	b.n	400f9a <ili9341_controller_init_registers+0x1ee>
  401136:	2301      	movs	r3, #1
  401138:	e73f      	b.n	400fba <ili9341_controller_init_registers+0x20e>
  40113a:	2301      	movs	r3, #1
  40113c:	e749      	b.n	400fd2 <ili9341_controller_init_registers+0x226>
  40113e:	2301      	movs	r3, #1
  401140:	e757      	b.n	400ff2 <ili9341_controller_init_registers+0x246>
  401142:	2301      	movs	r3, #1
  401144:	e761      	b.n	40100a <ili9341_controller_init_registers+0x25e>
  401146:	2301      	movs	r3, #1
  401148:	e76b      	b.n	401022 <ili9341_controller_init_registers+0x276>
  40114a:	2301      	movs	r3, #1
  40114c:	e775      	b.n	40103a <ili9341_controller_init_registers+0x28e>
  40114e:	2301      	movs	r3, #1
  401150:	e78a      	b.n	401068 <ili9341_controller_init_registers+0x2bc>
  401152:	2301      	movs	r3, #1
  401154:	e793      	b.n	40107e <ili9341_controller_init_registers+0x2d2>
  401156:	2301      	movs	r3, #1
  401158:	e79c      	b.n	401094 <ili9341_controller_init_registers+0x2e8>
  40115a:	2301      	movs	r3, #1
  40115c:	e7a9      	b.n	4010b2 <ili9341_controller_init_registers+0x306>
  40115e:	2301      	movs	r3, #1
  401160:	e7b2      	b.n	4010c8 <ili9341_controller_init_registers+0x31c>
  401162:	bf00      	nop
  401164:	40008000 	.word	0x40008000
  401168:	400e1400 	.word	0x400e1400
  40116c:	004009dd 	.word	0x004009dd
  401170:	00400d3d 	.word	0x00400d3d
  401174:	00400c95 	.word	0x00400c95

00401178 <ili9341_init>:
  401178:	b508      	push	{r3, lr}
  40117a:	4b04      	ldr	r3, [pc, #16]	; (40118c <ili9341_init+0x14>)
  40117c:	4798      	blx	r3
  40117e:	4b04      	ldr	r3, [pc, #16]	; (401190 <ili9341_init+0x18>)
  401180:	4798      	blx	r3
  401182:	4b04      	ldr	r3, [pc, #16]	; (401194 <ili9341_init+0x1c>)
  401184:	4798      	blx	r3
  401186:	4b04      	ldr	r3, [pc, #16]	; (401198 <ili9341_init+0x20>)
  401188:	4798      	blx	r3
  40118a:	bd08      	pop	{r3, pc}
  40118c:	00400b85 	.word	0x00400b85
  401190:	00400bf5 	.word	0x00400bf5
  401194:	00400c25 	.word	0x00400c25
  401198:	00400dad 	.word	0x00400dad

0040119c <afec_find_inst_num>:
  40119c:	4b03      	ldr	r3, [pc, #12]	; (4011ac <afec_find_inst_num+0x10>)
  40119e:	4298      	cmp	r0, r3
  4011a0:	d001      	beq.n	4011a6 <afec_find_inst_num+0xa>
  4011a2:	2000      	movs	r0, #0
  4011a4:	4770      	bx	lr
  4011a6:	2001      	movs	r0, #1
  4011a8:	4770      	bx	lr
  4011aa:	bf00      	nop
  4011ac:	40064000 	.word	0x40064000

004011b0 <afec_find_pid>:
  4011b0:	4b03      	ldr	r3, [pc, #12]	; (4011c0 <afec_find_pid+0x10>)
  4011b2:	4298      	cmp	r0, r3
  4011b4:	d001      	beq.n	4011ba <afec_find_pid+0xa>
  4011b6:	201d      	movs	r0, #29
  4011b8:	4770      	bx	lr
  4011ba:	2028      	movs	r0, #40	; 0x28
  4011bc:	4770      	bx	lr
  4011be:	bf00      	nop
  4011c0:	40064000 	.word	0x40064000

004011c4 <afec_set_config>:
  4011c4:	b410      	push	{r4}
  4011c6:	7ccb      	ldrb	r3, [r1, #19]
  4011c8:	b373      	cbz	r3, 401228 <afec_set_config+0x64>
  4011ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  4011ce:	684a      	ldr	r2, [r1, #4]
  4011d0:	688c      	ldr	r4, [r1, #8]
  4011d2:	fbb2 f2f4 	udiv	r2, r2, r4
  4011d6:	3a01      	subs	r2, #1
  4011d8:	0212      	lsls	r2, r2, #8
  4011da:	b292      	uxth	r2, r2
  4011dc:	4313      	orrs	r3, r2
  4011de:	7c0a      	ldrb	r2, [r1, #16]
  4011e0:	0612      	lsls	r2, r2, #24
  4011e2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  4011e6:	4313      	orrs	r3, r2
  4011e8:	7c4a      	ldrb	r2, [r1, #17]
  4011ea:	0712      	lsls	r2, r2, #28
  4011ec:	f002 5240 	and.w	r2, r2, #805306368	; 0x30000000
  4011f0:	4313      	orrs	r3, r2
  4011f2:	68ca      	ldr	r2, [r1, #12]
  4011f4:	4313      	orrs	r3, r2
  4011f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  4011fa:	6043      	str	r3, [r0, #4]
  4011fc:	7d0b      	ldrb	r3, [r1, #20]
  4011fe:	b1ab      	cbz	r3, 40122c <afec_set_config+0x68>
  401200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401204:	680a      	ldr	r2, [r1, #0]
  401206:	431a      	orrs	r2, r3
  401208:	7d4b      	ldrb	r3, [r1, #21]
  40120a:	b98b      	cbnz	r3, 401230 <afec_set_config+0x6c>
  40120c:	2300      	movs	r3, #0
  40120e:	4313      	orrs	r3, r2
  401210:	6083      	str	r3, [r0, #8]
  401212:	7d8b      	ldrb	r3, [r1, #22]
  401214:	021b      	lsls	r3, r3, #8
  401216:	f403 7340 	and.w	r3, r3, #768	; 0x300
  40121a:	f043 030c 	orr.w	r3, r3, #12
  40121e:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  401222:	f85d 4b04 	ldr.w	r4, [sp], #4
  401226:	4770      	bx	lr
  401228:	2300      	movs	r3, #0
  40122a:	e7d0      	b.n	4011ce <afec_set_config+0xa>
  40122c:	2300      	movs	r3, #0
  40122e:	e7e9      	b.n	401204 <afec_set_config+0x40>
  401230:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  401234:	e7eb      	b.n	40120e <afec_set_config+0x4a>
	...

00401238 <afec_interrupt>:
  401238:	b508      	push	{r3, lr}
  40123a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
  40123e:	4b03      	ldr	r3, [pc, #12]	; (40124c <afec_interrupt+0x14>)
  401240:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
  401244:	b103      	cbz	r3, 401248 <afec_interrupt+0x10>
  401246:	4798      	blx	r3
  401248:	bd08      	pop	{r3, pc}
  40124a:	bf00      	nop
  40124c:	2043a0dc 	.word	0x2043a0dc

00401250 <afec_process_callback>:
  401250:	b530      	push	{r4, r5, lr}
  401252:	b083      	sub	sp, #12
  401254:	6b01      	ldr	r1, [r0, #48]	; 0x30
  401256:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  401258:	400b      	ands	r3, r1
  40125a:	9301      	str	r3, [sp, #4]
  40125c:	4b17      	ldr	r3, [pc, #92]	; (4012bc <afec_process_callback+0x6c>)
  40125e:	4798      	blx	r3
  401260:	4605      	mov	r5, r0
  401262:	2400      	movs	r4, #0
  401264:	e009      	b.n	40127a <afec_process_callback+0x2a>
  401266:	2c0e      	cmp	r4, #14
  401268:	d81a      	bhi.n	4012a0 <afec_process_callback+0x50>
  40126a:	f104 020c 	add.w	r2, r4, #12
  40126e:	2301      	movs	r3, #1
  401270:	4093      	lsls	r3, r2
  401272:	9a01      	ldr	r2, [sp, #4]
  401274:	4213      	tst	r3, r2
  401276:	d10e      	bne.n	401296 <afec_process_callback+0x46>
  401278:	3401      	adds	r4, #1
  40127a:	2c0f      	cmp	r4, #15
  40127c:	d81c      	bhi.n	4012b8 <afec_process_callback+0x68>
  40127e:	2c0b      	cmp	r4, #11
  401280:	d8f1      	bhi.n	401266 <afec_process_callback+0x16>
  401282:	2301      	movs	r3, #1
  401284:	40a3      	lsls	r3, r4
  401286:	9a01      	ldr	r2, [sp, #4]
  401288:	4213      	tst	r3, r2
  40128a:	d0f5      	beq.n	401278 <afec_process_callback+0x28>
  40128c:	4621      	mov	r1, r4
  40128e:	b2e8      	uxtb	r0, r5
  401290:	4b0b      	ldr	r3, [pc, #44]	; (4012c0 <afec_process_callback+0x70>)
  401292:	4798      	blx	r3
  401294:	e7f0      	b.n	401278 <afec_process_callback+0x28>
  401296:	4621      	mov	r1, r4
  401298:	b2e8      	uxtb	r0, r5
  40129a:	4b09      	ldr	r3, [pc, #36]	; (4012c0 <afec_process_callback+0x70>)
  40129c:	4798      	blx	r3
  40129e:	e7eb      	b.n	401278 <afec_process_callback+0x28>
  4012a0:	f104 020f 	add.w	r2, r4, #15
  4012a4:	2301      	movs	r3, #1
  4012a6:	4093      	lsls	r3, r2
  4012a8:	9a01      	ldr	r2, [sp, #4]
  4012aa:	4213      	tst	r3, r2
  4012ac:	d0e4      	beq.n	401278 <afec_process_callback+0x28>
  4012ae:	4621      	mov	r1, r4
  4012b0:	b2e8      	uxtb	r0, r5
  4012b2:	4b03      	ldr	r3, [pc, #12]	; (4012c0 <afec_process_callback+0x70>)
  4012b4:	4798      	blx	r3
  4012b6:	e7df      	b.n	401278 <afec_process_callback+0x28>
  4012b8:	b003      	add	sp, #12
  4012ba:	bd30      	pop	{r4, r5, pc}
  4012bc:	0040119d 	.word	0x0040119d
  4012c0:	00401239 	.word	0x00401239

004012c4 <afec_ch_set_config>:
  4012c4:	b430      	push	{r4, r5}
  4012c6:	6e04      	ldr	r4, [r0, #96]	; 0x60
  4012c8:	2301      	movs	r3, #1
  4012ca:	408b      	lsls	r3, r1
  4012cc:	ea24 0403 	bic.w	r4, r4, r3
  4012d0:	7815      	ldrb	r5, [r2, #0]
  4012d2:	b175      	cbz	r5, 4012f2 <afec_ch_set_config+0x2e>
  4012d4:	4323      	orrs	r3, r4
  4012d6:	6603      	str	r3, [r0, #96]	; 0x60
  4012d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
  4012da:	004c      	lsls	r4, r1, #1
  4012dc:	2103      	movs	r1, #3
  4012de:	40a1      	lsls	r1, r4
  4012e0:	ea23 0101 	bic.w	r1, r3, r1
  4012e4:	7853      	ldrb	r3, [r2, #1]
  4012e6:	fa03 f404 	lsl.w	r4, r3, r4
  4012ea:	4321      	orrs	r1, r4
  4012ec:	6541      	str	r1, [r0, #84]	; 0x54
  4012ee:	bc30      	pop	{r4, r5}
  4012f0:	4770      	bx	lr
  4012f2:	2300      	movs	r3, #0
  4012f4:	e7ee      	b.n	4012d4 <afec_ch_set_config+0x10>
	...

004012f8 <afec_get_config_defaults>:
  4012f8:	2200      	movs	r2, #0
  4012fa:	6002      	str	r2, [r0, #0]
  4012fc:	4b08      	ldr	r3, [pc, #32]	; (401320 <afec_get_config_defaults+0x28>)
  4012fe:	6043      	str	r3, [r0, #4]
  401300:	4b08      	ldr	r3, [pc, #32]	; (401324 <afec_get_config_defaults+0x2c>)
  401302:	6083      	str	r3, [r0, #8]
  401304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  401308:	60c3      	str	r3, [r0, #12]
  40130a:	2302      	movs	r3, #2
  40130c:	7403      	strb	r3, [r0, #16]
  40130e:	2301      	movs	r3, #1
  401310:	7443      	strb	r3, [r0, #17]
  401312:	7483      	strb	r3, [r0, #18]
  401314:	74c2      	strb	r2, [r0, #19]
  401316:	7503      	strb	r3, [r0, #20]
  401318:	7543      	strb	r3, [r0, #21]
  40131a:	7583      	strb	r3, [r0, #22]
  40131c:	4770      	bx	lr
  40131e:	bf00      	nop
  401320:	11e1a300 	.word	0x11e1a300
  401324:	005b8d80 	.word	0x005b8d80

00401328 <afec_ch_get_config_defaults>:
  401328:	2300      	movs	r3, #0
  40132a:	7003      	strb	r3, [r0, #0]
  40132c:	2301      	movs	r3, #1
  40132e:	7043      	strb	r3, [r0, #1]
  401330:	4770      	bx	lr
	...

00401334 <afec_init>:
  401334:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401336:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40133a:	d001      	beq.n	401340 <afec_init+0xc>
  40133c:	2019      	movs	r0, #25
  40133e:	4770      	bx	lr
  401340:	b510      	push	{r4, lr}
  401342:	4604      	mov	r4, r0
  401344:	2301      	movs	r3, #1
  401346:	6003      	str	r3, [r0, #0]
  401348:	4b10      	ldr	r3, [pc, #64]	; (40138c <afec_init+0x58>)
  40134a:	4798      	blx	r3
  40134c:	4b10      	ldr	r3, [pc, #64]	; (401390 <afec_init+0x5c>)
  40134e:	429c      	cmp	r4, r3
  401350:	d00c      	beq.n	40136c <afec_init+0x38>
  401352:	4b10      	ldr	r3, [pc, #64]	; (401394 <afec_init+0x60>)
  401354:	429c      	cmp	r4, r3
  401356:	d00b      	beq.n	401370 <afec_init+0x3c>
  401358:	2000      	movs	r0, #0
  40135a:	bd10      	pop	{r4, pc}
  40135c:	2100      	movs	r1, #0
  40135e:	4a0e      	ldr	r2, [pc, #56]	; (401398 <afec_init+0x64>)
  401360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  401364:	3301      	adds	r3, #1
  401366:	2b0f      	cmp	r3, #15
  401368:	d9f8      	bls.n	40135c <afec_init+0x28>
  40136a:	e7f2      	b.n	401352 <afec_init+0x1e>
  40136c:	2300      	movs	r3, #0
  40136e:	e7fa      	b.n	401366 <afec_init+0x32>
  401370:	2300      	movs	r3, #0
  401372:	2b0f      	cmp	r3, #15
  401374:	d807      	bhi.n	401386 <afec_init+0x52>
  401376:	f103 0110 	add.w	r1, r3, #16
  40137a:	2000      	movs	r0, #0
  40137c:	4a06      	ldr	r2, [pc, #24]	; (401398 <afec_init+0x64>)
  40137e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  401382:	3301      	adds	r3, #1
  401384:	e7f5      	b.n	401372 <afec_init+0x3e>
  401386:	2000      	movs	r0, #0
  401388:	bd10      	pop	{r4, pc}
  40138a:	bf00      	nop
  40138c:	004011c5 	.word	0x004011c5
  401390:	4003c000 	.word	0x4003c000
  401394:	40064000 	.word	0x40064000
  401398:	2043a0dc 	.word	0x2043a0dc

0040139c <AFEC0_Handler>:
  40139c:	b508      	push	{r3, lr}
  40139e:	4802      	ldr	r0, [pc, #8]	; (4013a8 <AFEC0_Handler+0xc>)
  4013a0:	4b02      	ldr	r3, [pc, #8]	; (4013ac <AFEC0_Handler+0x10>)
  4013a2:	4798      	blx	r3
  4013a4:	bd08      	pop	{r3, pc}
  4013a6:	bf00      	nop
  4013a8:	4003c000 	.word	0x4003c000
  4013ac:	00401251 	.word	0x00401251

004013b0 <AFEC1_Handler>:
  4013b0:	b508      	push	{r3, lr}
  4013b2:	4802      	ldr	r0, [pc, #8]	; (4013bc <AFEC1_Handler+0xc>)
  4013b4:	4b02      	ldr	r3, [pc, #8]	; (4013c0 <AFEC1_Handler+0x10>)
  4013b6:	4798      	blx	r3
  4013b8:	bd08      	pop	{r3, pc}
  4013ba:	bf00      	nop
  4013bc:	40064000 	.word	0x40064000
  4013c0:	00401251 	.word	0x00401251

004013c4 <afec_enable>:
  4013c4:	b500      	push	{lr}
  4013c6:	b083      	sub	sp, #12
  4013c8:	4b11      	ldr	r3, [pc, #68]	; (401410 <afec_enable+0x4c>)
  4013ca:	4798      	blx	r3
  4013cc:	4b11      	ldr	r3, [pc, #68]	; (401414 <afec_enable+0x50>)
  4013ce:	4798      	blx	r3
  4013d0:	4b11      	ldr	r3, [pc, #68]	; (401418 <afec_enable+0x54>)
  4013d2:	789b      	ldrb	r3, [r3, #2]
  4013d4:	2bff      	cmp	r3, #255	; 0xff
  4013d6:	d01a      	beq.n	40140e <afec_enable+0x4a>
  4013d8:	f3ef 8310 	mrs	r3, PRIMASK
  4013dc:	fab3 f383 	clz	r3, r3
  4013e0:	095b      	lsrs	r3, r3, #5
  4013e2:	9301      	str	r3, [sp, #4]
  4013e4:	b672      	cpsid	i
  4013e6:	f3bf 8f5f 	dmb	sy
  4013ea:	2200      	movs	r2, #0
  4013ec:	4b0b      	ldr	r3, [pc, #44]	; (40141c <afec_enable+0x58>)
  4013ee:	701a      	strb	r2, [r3, #0]
  4013f0:	9901      	ldr	r1, [sp, #4]
  4013f2:	4a09      	ldr	r2, [pc, #36]	; (401418 <afec_enable+0x54>)
  4013f4:	7893      	ldrb	r3, [r2, #2]
  4013f6:	3301      	adds	r3, #1
  4013f8:	7093      	strb	r3, [r2, #2]
  4013fa:	b129      	cbz	r1, 401408 <afec_enable+0x44>
  4013fc:	2201      	movs	r2, #1
  4013fe:	4b07      	ldr	r3, [pc, #28]	; (40141c <afec_enable+0x58>)
  401400:	701a      	strb	r2, [r3, #0]
  401402:	f3bf 8f5f 	dmb	sy
  401406:	b662      	cpsie	i
  401408:	b003      	add	sp, #12
  40140a:	f85d fb04 	ldr.w	pc, [sp], #4
  40140e:	e7fe      	b.n	40140e <afec_enable+0x4a>
  401410:	004011b1 	.word	0x004011b1
  401414:	00420535 	.word	0x00420535
  401418:	2043a0d4 	.word	0x2043a0d4
  40141c:	20400068 	.word	0x20400068

00401420 <vListInitialise>:
  401420:	f100 0308 	add.w	r3, r0, #8
  401424:	6043      	str	r3, [r0, #4]
  401426:	f04f 32ff 	mov.w	r2, #4294967295
  40142a:	6082      	str	r2, [r0, #8]
  40142c:	60c3      	str	r3, [r0, #12]
  40142e:	6103      	str	r3, [r0, #16]
  401430:	2300      	movs	r3, #0
  401432:	6003      	str	r3, [r0, #0]
  401434:	4770      	bx	lr

00401436 <vListInitialiseItem>:
  401436:	2300      	movs	r3, #0
  401438:	6103      	str	r3, [r0, #16]
  40143a:	4770      	bx	lr

0040143c <vListInsertEnd>:
  40143c:	6843      	ldr	r3, [r0, #4]
  40143e:	604b      	str	r3, [r1, #4]
  401440:	689a      	ldr	r2, [r3, #8]
  401442:	608a      	str	r2, [r1, #8]
  401444:	689a      	ldr	r2, [r3, #8]
  401446:	6051      	str	r1, [r2, #4]
  401448:	6099      	str	r1, [r3, #8]
  40144a:	6108      	str	r0, [r1, #16]
  40144c:	6803      	ldr	r3, [r0, #0]
  40144e:	3301      	adds	r3, #1
  401450:	6003      	str	r3, [r0, #0]
  401452:	4770      	bx	lr

00401454 <vListInsert>:
  401454:	b430      	push	{r4, r5}
  401456:	680d      	ldr	r5, [r1, #0]
  401458:	f1b5 3fff 	cmp.w	r5, #4294967295
  40145c:	d002      	beq.n	401464 <vListInsert+0x10>
  40145e:	f100 0208 	add.w	r2, r0, #8
  401462:	e002      	b.n	40146a <vListInsert+0x16>
  401464:	6902      	ldr	r2, [r0, #16]
  401466:	e004      	b.n	401472 <vListInsert+0x1e>
  401468:	461a      	mov	r2, r3
  40146a:	6853      	ldr	r3, [r2, #4]
  40146c:	681c      	ldr	r4, [r3, #0]
  40146e:	42a5      	cmp	r5, r4
  401470:	d2fa      	bcs.n	401468 <vListInsert+0x14>
  401472:	6853      	ldr	r3, [r2, #4]
  401474:	604b      	str	r3, [r1, #4]
  401476:	6099      	str	r1, [r3, #8]
  401478:	608a      	str	r2, [r1, #8]
  40147a:	6051      	str	r1, [r2, #4]
  40147c:	6108      	str	r0, [r1, #16]
  40147e:	6803      	ldr	r3, [r0, #0]
  401480:	3301      	adds	r3, #1
  401482:	6003      	str	r3, [r0, #0]
  401484:	bc30      	pop	{r4, r5}
  401486:	4770      	bx	lr

00401488 <uxListRemove>:
  401488:	6903      	ldr	r3, [r0, #16]
  40148a:	6842      	ldr	r2, [r0, #4]
  40148c:	6881      	ldr	r1, [r0, #8]
  40148e:	6091      	str	r1, [r2, #8]
  401490:	6882      	ldr	r2, [r0, #8]
  401492:	6841      	ldr	r1, [r0, #4]
  401494:	6051      	str	r1, [r2, #4]
  401496:	685a      	ldr	r2, [r3, #4]
  401498:	4290      	cmp	r0, r2
  40149a:	d005      	beq.n	4014a8 <uxListRemove+0x20>
  40149c:	2200      	movs	r2, #0
  40149e:	6102      	str	r2, [r0, #16]
  4014a0:	6818      	ldr	r0, [r3, #0]
  4014a2:	3801      	subs	r0, #1
  4014a4:	6018      	str	r0, [r3, #0]
  4014a6:	4770      	bx	lr
  4014a8:	6882      	ldr	r2, [r0, #8]
  4014aa:	605a      	str	r2, [r3, #4]
  4014ac:	e7f6      	b.n	40149c <uxListRemove+0x14>
	...

004014b0 <prvTaskExitError>:
  4014b0:	4b0d      	ldr	r3, [pc, #52]	; (4014e8 <prvTaskExitError+0x38>)
  4014b2:	681b      	ldr	r3, [r3, #0]
  4014b4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4014b8:	d00a      	beq.n	4014d0 <prvTaskExitError+0x20>
  4014ba:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014be:	b672      	cpsid	i
  4014c0:	f383 8811 	msr	BASEPRI, r3
  4014c4:	f3bf 8f6f 	isb	sy
  4014c8:	f3bf 8f4f 	dsb	sy
  4014cc:	b662      	cpsie	i
  4014ce:	e7fe      	b.n	4014ce <prvTaskExitError+0x1e>
  4014d0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014d4:	b672      	cpsid	i
  4014d6:	f383 8811 	msr	BASEPRI, r3
  4014da:	f3bf 8f6f 	isb	sy
  4014de:	f3bf 8f4f 	dsb	sy
  4014e2:	b662      	cpsie	i
  4014e4:	e7fe      	b.n	4014e4 <prvTaskExitError+0x34>
  4014e6:	bf00      	nop
  4014e8:	2040000c 	.word	0x2040000c

004014ec <prvPortStartFirstTask>:
  4014ec:	4806      	ldr	r0, [pc, #24]	; (401508 <prvPortStartFirstTask+0x1c>)
  4014ee:	6800      	ldr	r0, [r0, #0]
  4014f0:	6800      	ldr	r0, [r0, #0]
  4014f2:	f380 8808 	msr	MSP, r0
  4014f6:	b662      	cpsie	i
  4014f8:	b661      	cpsie	f
  4014fa:	f3bf 8f4f 	dsb	sy
  4014fe:	f3bf 8f6f 	isb	sy
  401502:	df00      	svc	0
  401504:	bf00      	nop
  401506:	0000      	.short	0x0000
  401508:	e000ed08 	.word	0xe000ed08

0040150c <vPortEnableVFP>:
  40150c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 40151c <vPortEnableVFP+0x10>
  401510:	6801      	ldr	r1, [r0, #0]
  401512:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401516:	6001      	str	r1, [r0, #0]
  401518:	4770      	bx	lr
  40151a:	0000      	.short	0x0000
  40151c:	e000ed88 	.word	0xe000ed88

00401520 <pxPortInitialiseStack>:
  401520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401524:	f840 3c04 	str.w	r3, [r0, #-4]
  401528:	f840 1c08 	str.w	r1, [r0, #-8]
  40152c:	4b05      	ldr	r3, [pc, #20]	; (401544 <pxPortInitialiseStack+0x24>)
  40152e:	f840 3c0c 	str.w	r3, [r0, #-12]
  401532:	f840 2c20 	str.w	r2, [r0, #-32]
  401536:	f06f 0302 	mvn.w	r3, #2
  40153a:	f840 3c24 	str.w	r3, [r0, #-36]
  40153e:	3844      	subs	r0, #68	; 0x44
  401540:	4770      	bx	lr
  401542:	bf00      	nop
  401544:	004014b1 	.word	0x004014b1

00401548 <SVC_Handler>:
  401548:	4b06      	ldr	r3, [pc, #24]	; (401564 <pxCurrentTCBConst2>)
  40154a:	6819      	ldr	r1, [r3, #0]
  40154c:	6808      	ldr	r0, [r1, #0]
  40154e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401552:	f380 8809 	msr	PSP, r0
  401556:	f3bf 8f6f 	isb	sy
  40155a:	f04f 0000 	mov.w	r0, #0
  40155e:	f380 8811 	msr	BASEPRI, r0
  401562:	4770      	bx	lr

00401564 <pxCurrentTCBConst2>:
  401564:	2040c254 	.word	0x2040c254
  401568:	4770      	bx	lr
  40156a:	bf00      	nop

0040156c <vPortEnterCritical>:
  40156c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401570:	b672      	cpsid	i
  401572:	f383 8811 	msr	BASEPRI, r3
  401576:	f3bf 8f6f 	isb	sy
  40157a:	f3bf 8f4f 	dsb	sy
  40157e:	b662      	cpsie	i
  401580:	4a0b      	ldr	r2, [pc, #44]	; (4015b0 <vPortEnterCritical+0x44>)
  401582:	6813      	ldr	r3, [r2, #0]
  401584:	3301      	adds	r3, #1
  401586:	6013      	str	r3, [r2, #0]
  401588:	2b01      	cmp	r3, #1
  40158a:	d10f      	bne.n	4015ac <vPortEnterCritical+0x40>
  40158c:	4b09      	ldr	r3, [pc, #36]	; (4015b4 <vPortEnterCritical+0x48>)
  40158e:	681b      	ldr	r3, [r3, #0]
  401590:	f013 0fff 	tst.w	r3, #255	; 0xff
  401594:	d00a      	beq.n	4015ac <vPortEnterCritical+0x40>
  401596:	f04f 0380 	mov.w	r3, #128	; 0x80
  40159a:	b672      	cpsid	i
  40159c:	f383 8811 	msr	BASEPRI, r3
  4015a0:	f3bf 8f6f 	isb	sy
  4015a4:	f3bf 8f4f 	dsb	sy
  4015a8:	b662      	cpsie	i
  4015aa:	e7fe      	b.n	4015aa <vPortEnterCritical+0x3e>
  4015ac:	4770      	bx	lr
  4015ae:	bf00      	nop
  4015b0:	2040000c 	.word	0x2040000c
  4015b4:	e000ed04 	.word	0xe000ed04

004015b8 <vPortExitCritical>:
  4015b8:	4b0a      	ldr	r3, [pc, #40]	; (4015e4 <vPortExitCritical+0x2c>)
  4015ba:	681b      	ldr	r3, [r3, #0]
  4015bc:	b953      	cbnz	r3, 4015d4 <vPortExitCritical+0x1c>
  4015be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015c2:	b672      	cpsid	i
  4015c4:	f383 8811 	msr	BASEPRI, r3
  4015c8:	f3bf 8f6f 	isb	sy
  4015cc:	f3bf 8f4f 	dsb	sy
  4015d0:	b662      	cpsie	i
  4015d2:	e7fe      	b.n	4015d2 <vPortExitCritical+0x1a>
  4015d4:	3b01      	subs	r3, #1
  4015d6:	4a03      	ldr	r2, [pc, #12]	; (4015e4 <vPortExitCritical+0x2c>)
  4015d8:	6013      	str	r3, [r2, #0]
  4015da:	b90b      	cbnz	r3, 4015e0 <vPortExitCritical+0x28>
  4015dc:	f383 8811 	msr	BASEPRI, r3
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	2040000c 	.word	0x2040000c

004015e8 <PendSV_Handler>:
  4015e8:	f3ef 8009 	mrs	r0, PSP
  4015ec:	f3bf 8f6f 	isb	sy
  4015f0:	4b15      	ldr	r3, [pc, #84]	; (401648 <pxCurrentTCBConst>)
  4015f2:	681a      	ldr	r2, [r3, #0]
  4015f4:	f01e 0f10 	tst.w	lr, #16
  4015f8:	bf08      	it	eq
  4015fa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  4015fe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401602:	6010      	str	r0, [r2, #0]
  401604:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401608:	f04f 0080 	mov.w	r0, #128	; 0x80
  40160c:	b672      	cpsid	i
  40160e:	f380 8811 	msr	BASEPRI, r0
  401612:	f3bf 8f4f 	dsb	sy
  401616:	f3bf 8f6f 	isb	sy
  40161a:	b662      	cpsie	i
  40161c:	f001 f8e6 	bl	4027ec <vTaskSwitchContext>
  401620:	f04f 0000 	mov.w	r0, #0
  401624:	f380 8811 	msr	BASEPRI, r0
  401628:	bc08      	pop	{r3}
  40162a:	6819      	ldr	r1, [r3, #0]
  40162c:	6808      	ldr	r0, [r1, #0]
  40162e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401632:	f01e 0f10 	tst.w	lr, #16
  401636:	bf08      	it	eq
  401638:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40163c:	f380 8809 	msr	PSP, r0
  401640:	f3bf 8f6f 	isb	sy
  401644:	4770      	bx	lr
  401646:	bf00      	nop

00401648 <pxCurrentTCBConst>:
  401648:	2040c254 	.word	0x2040c254
  40164c:	4770      	bx	lr
  40164e:	bf00      	nop

00401650 <SysTick_Handler>:
  401650:	b508      	push	{r3, lr}
  401652:	f3ef 8311 	mrs	r3, BASEPRI
  401656:	f04f 0280 	mov.w	r2, #128	; 0x80
  40165a:	b672      	cpsid	i
  40165c:	f382 8811 	msr	BASEPRI, r2
  401660:	f3bf 8f6f 	isb	sy
  401664:	f3bf 8f4f 	dsb	sy
  401668:	b662      	cpsie	i
  40166a:	4b05      	ldr	r3, [pc, #20]	; (401680 <SysTick_Handler+0x30>)
  40166c:	4798      	blx	r3
  40166e:	b118      	cbz	r0, 401678 <SysTick_Handler+0x28>
  401670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401674:	4b03      	ldr	r3, [pc, #12]	; (401684 <SysTick_Handler+0x34>)
  401676:	601a      	str	r2, [r3, #0]
  401678:	2300      	movs	r3, #0
  40167a:	f383 8811 	msr	BASEPRI, r3
  40167e:	bd08      	pop	{r3, pc}
  401680:	00402461 	.word	0x00402461
  401684:	e000ed04 	.word	0xe000ed04

00401688 <vPortSetupTimerInterrupt>:
  401688:	4a03      	ldr	r2, [pc, #12]	; (401698 <vPortSetupTimerInterrupt+0x10>)
  40168a:	4b04      	ldr	r3, [pc, #16]	; (40169c <vPortSetupTimerInterrupt+0x14>)
  40168c:	601a      	str	r2, [r3, #0]
  40168e:	2207      	movs	r2, #7
  401690:	3b04      	subs	r3, #4
  401692:	601a      	str	r2, [r3, #0]
  401694:	4770      	bx	lr
  401696:	bf00      	nop
  401698:	0003a97f 	.word	0x0003a97f
  40169c:	e000e014 	.word	0xe000e014

004016a0 <xPortStartScheduler>:
  4016a0:	b500      	push	{lr}
  4016a2:	b083      	sub	sp, #12
  4016a4:	4b22      	ldr	r3, [pc, #136]	; (401730 <xPortStartScheduler+0x90>)
  4016a6:	781a      	ldrb	r2, [r3, #0]
  4016a8:	b2d2      	uxtb	r2, r2
  4016aa:	9201      	str	r2, [sp, #4]
  4016ac:	22ff      	movs	r2, #255	; 0xff
  4016ae:	701a      	strb	r2, [r3, #0]
  4016b0:	781b      	ldrb	r3, [r3, #0]
  4016b2:	b2db      	uxtb	r3, r3
  4016b4:	f88d 3003 	strb.w	r3, [sp, #3]
  4016b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4016c0:	4a1c      	ldr	r2, [pc, #112]	; (401734 <xPortStartScheduler+0x94>)
  4016c2:	7013      	strb	r3, [r2, #0]
  4016c4:	2207      	movs	r2, #7
  4016c6:	4b1c      	ldr	r3, [pc, #112]	; (401738 <xPortStartScheduler+0x98>)
  4016c8:	601a      	str	r2, [r3, #0]
  4016ca:	e009      	b.n	4016e0 <xPortStartScheduler+0x40>
  4016cc:	4a1a      	ldr	r2, [pc, #104]	; (401738 <xPortStartScheduler+0x98>)
  4016ce:	6813      	ldr	r3, [r2, #0]
  4016d0:	3b01      	subs	r3, #1
  4016d2:	6013      	str	r3, [r2, #0]
  4016d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016d8:	005b      	lsls	r3, r3, #1
  4016da:	b2db      	uxtb	r3, r3
  4016dc:	f88d 3003 	strb.w	r3, [sp, #3]
  4016e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4016e4:	f013 0f80 	tst.w	r3, #128	; 0x80
  4016e8:	d1f0      	bne.n	4016cc <xPortStartScheduler+0x2c>
  4016ea:	4a13      	ldr	r2, [pc, #76]	; (401738 <xPortStartScheduler+0x98>)
  4016ec:	6813      	ldr	r3, [r2, #0]
  4016ee:	021b      	lsls	r3, r3, #8
  4016f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  4016f4:	6013      	str	r3, [r2, #0]
  4016f6:	9b01      	ldr	r3, [sp, #4]
  4016f8:	b2db      	uxtb	r3, r3
  4016fa:	4a0d      	ldr	r2, [pc, #52]	; (401730 <xPortStartScheduler+0x90>)
  4016fc:	7013      	strb	r3, [r2, #0]
  4016fe:	4b0f      	ldr	r3, [pc, #60]	; (40173c <xPortStartScheduler+0x9c>)
  401700:	681a      	ldr	r2, [r3, #0]
  401702:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401706:	601a      	str	r2, [r3, #0]
  401708:	681a      	ldr	r2, [r3, #0]
  40170a:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40170e:	601a      	str	r2, [r3, #0]
  401710:	4b0b      	ldr	r3, [pc, #44]	; (401740 <xPortStartScheduler+0xa0>)
  401712:	4798      	blx	r3
  401714:	2200      	movs	r2, #0
  401716:	4b0b      	ldr	r3, [pc, #44]	; (401744 <xPortStartScheduler+0xa4>)
  401718:	601a      	str	r2, [r3, #0]
  40171a:	4b0b      	ldr	r3, [pc, #44]	; (401748 <xPortStartScheduler+0xa8>)
  40171c:	4798      	blx	r3
  40171e:	4a0b      	ldr	r2, [pc, #44]	; (40174c <xPortStartScheduler+0xac>)
  401720:	6813      	ldr	r3, [r2, #0]
  401722:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401726:	6013      	str	r3, [r2, #0]
  401728:	4b09      	ldr	r3, [pc, #36]	; (401750 <xPortStartScheduler+0xb0>)
  40172a:	4798      	blx	r3
  40172c:	4b09      	ldr	r3, [pc, #36]	; (401754 <xPortStartScheduler+0xb4>)
  40172e:	4798      	blx	r3
  401730:	e000e400 	.word	0xe000e400
  401734:	20400a44 	.word	0x20400a44
  401738:	20400a48 	.word	0x20400a48
  40173c:	e000ed20 	.word	0xe000ed20
  401740:	00401689 	.word	0x00401689
  401744:	2040000c 	.word	0x2040000c
  401748:	0040150d 	.word	0x0040150d
  40174c:	e000ef34 	.word	0xe000ef34
  401750:	004014ed 	.word	0x004014ed
  401754:	004014b1 	.word	0x004014b1

00401758 <vPortValidateInterruptPriority>:
  401758:	f3ef 8305 	mrs	r3, IPSR
  40175c:	2b0f      	cmp	r3, #15
  40175e:	d911      	bls.n	401784 <vPortValidateInterruptPriority+0x2c>
  401760:	4a12      	ldr	r2, [pc, #72]	; (4017ac <vPortValidateInterruptPriority+0x54>)
  401762:	5c9b      	ldrb	r3, [r3, r2]
  401764:	b2db      	uxtb	r3, r3
  401766:	4a12      	ldr	r2, [pc, #72]	; (4017b0 <vPortValidateInterruptPriority+0x58>)
  401768:	7812      	ldrb	r2, [r2, #0]
  40176a:	4293      	cmp	r3, r2
  40176c:	d20a      	bcs.n	401784 <vPortValidateInterruptPriority+0x2c>
  40176e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401772:	b672      	cpsid	i
  401774:	f383 8811 	msr	BASEPRI, r3
  401778:	f3bf 8f6f 	isb	sy
  40177c:	f3bf 8f4f 	dsb	sy
  401780:	b662      	cpsie	i
  401782:	e7fe      	b.n	401782 <vPortValidateInterruptPriority+0x2a>
  401784:	4b0b      	ldr	r3, [pc, #44]	; (4017b4 <vPortValidateInterruptPriority+0x5c>)
  401786:	681b      	ldr	r3, [r3, #0]
  401788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40178c:	4a0a      	ldr	r2, [pc, #40]	; (4017b8 <vPortValidateInterruptPriority+0x60>)
  40178e:	6812      	ldr	r2, [r2, #0]
  401790:	4293      	cmp	r3, r2
  401792:	d90a      	bls.n	4017aa <vPortValidateInterruptPriority+0x52>
  401794:	f04f 0380 	mov.w	r3, #128	; 0x80
  401798:	b672      	cpsid	i
  40179a:	f383 8811 	msr	BASEPRI, r3
  40179e:	f3bf 8f6f 	isb	sy
  4017a2:	f3bf 8f4f 	dsb	sy
  4017a6:	b662      	cpsie	i
  4017a8:	e7fe      	b.n	4017a8 <vPortValidateInterruptPriority+0x50>
  4017aa:	4770      	bx	lr
  4017ac:	e000e3f0 	.word	0xe000e3f0
  4017b0:	20400a44 	.word	0x20400a44
  4017b4:	e000ed0c 	.word	0xe000ed0c
  4017b8:	20400a48 	.word	0x20400a48

004017bc <pvPortMalloc>:
  4017bc:	b538      	push	{r3, r4, r5, lr}
  4017be:	4604      	mov	r4, r0
  4017c0:	f010 0f07 	tst.w	r0, #7
  4017c4:	d002      	beq.n	4017cc <pvPortMalloc+0x10>
  4017c6:	f020 0407 	bic.w	r4, r0, #7
  4017ca:	3408      	adds	r4, #8
  4017cc:	4b12      	ldr	r3, [pc, #72]	; (401818 <pvPortMalloc+0x5c>)
  4017ce:	4798      	blx	r3
  4017d0:	4b12      	ldr	r3, [pc, #72]	; (40181c <pvPortMalloc+0x60>)
  4017d2:	681b      	ldr	r3, [r3, #0]
  4017d4:	b193      	cbz	r3, 4017fc <pvPortMalloc+0x40>
  4017d6:	4b12      	ldr	r3, [pc, #72]	; (401820 <pvPortMalloc+0x64>)
  4017d8:	681b      	ldr	r3, [r3, #0]
  4017da:	441c      	add	r4, r3
  4017dc:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  4017e0:	4294      	cmp	r4, r2
  4017e2:	d811      	bhi.n	401808 <pvPortMalloc+0x4c>
  4017e4:	42a3      	cmp	r3, r4
  4017e6:	d211      	bcs.n	40180c <pvPortMalloc+0x50>
  4017e8:	4a0c      	ldr	r2, [pc, #48]	; (40181c <pvPortMalloc+0x60>)
  4017ea:	6815      	ldr	r5, [r2, #0]
  4017ec:	441d      	add	r5, r3
  4017ee:	4b0c      	ldr	r3, [pc, #48]	; (401820 <pvPortMalloc+0x64>)
  4017f0:	601c      	str	r4, [r3, #0]
  4017f2:	4b0c      	ldr	r3, [pc, #48]	; (401824 <pvPortMalloc+0x68>)
  4017f4:	4798      	blx	r3
  4017f6:	b15d      	cbz	r5, 401810 <pvPortMalloc+0x54>
  4017f8:	4628      	mov	r0, r5
  4017fa:	bd38      	pop	{r3, r4, r5, pc}
  4017fc:	4b0a      	ldr	r3, [pc, #40]	; (401828 <pvPortMalloc+0x6c>)
  4017fe:	f023 0307 	bic.w	r3, r3, #7
  401802:	4a06      	ldr	r2, [pc, #24]	; (40181c <pvPortMalloc+0x60>)
  401804:	6013      	str	r3, [r2, #0]
  401806:	e7e6      	b.n	4017d6 <pvPortMalloc+0x1a>
  401808:	2500      	movs	r5, #0
  40180a:	e7f2      	b.n	4017f2 <pvPortMalloc+0x36>
  40180c:	2500      	movs	r5, #0
  40180e:	e7f0      	b.n	4017f2 <pvPortMalloc+0x36>
  401810:	4b06      	ldr	r3, [pc, #24]	; (40182c <pvPortMalloc+0x70>)
  401812:	4798      	blx	r3
  401814:	e7f0      	b.n	4017f8 <pvPortMalloc+0x3c>
  401816:	bf00      	nop
  401818:	00402445 	.word	0x00402445
  40181c:	20400a4c 	.word	0x20400a4c
  401820:	2040c250 	.word	0x2040c250
  401824:	004025a5 	.word	0x004025a5
  401828:	20400a58 	.word	0x20400a58
  40182c:	00420e7f 	.word	0x00420e7f

00401830 <vPortFree>:
  401830:	b150      	cbz	r0, 401848 <vPortFree+0x18>
  401832:	f04f 0380 	mov.w	r3, #128	; 0x80
  401836:	b672      	cpsid	i
  401838:	f383 8811 	msr	BASEPRI, r3
  40183c:	f3bf 8f6f 	isb	sy
  401840:	f3bf 8f4f 	dsb	sy
  401844:	b662      	cpsie	i
  401846:	e7fe      	b.n	401846 <vPortFree+0x16>
  401848:	4770      	bx	lr
	...

0040184c <prvIsQueueFull>:
  40184c:	b510      	push	{r4, lr}
  40184e:	4604      	mov	r4, r0
  401850:	4b06      	ldr	r3, [pc, #24]	; (40186c <prvIsQueueFull+0x20>)
  401852:	4798      	blx	r3
  401854:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401856:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401858:	429a      	cmp	r2, r3
  40185a:	d004      	beq.n	401866 <prvIsQueueFull+0x1a>
  40185c:	2400      	movs	r4, #0
  40185e:	4b04      	ldr	r3, [pc, #16]	; (401870 <prvIsQueueFull+0x24>)
  401860:	4798      	blx	r3
  401862:	4620      	mov	r0, r4
  401864:	bd10      	pop	{r4, pc}
  401866:	2401      	movs	r4, #1
  401868:	e7f9      	b.n	40185e <prvIsQueueFull+0x12>
  40186a:	bf00      	nop
  40186c:	0040156d 	.word	0x0040156d
  401870:	004015b9 	.word	0x004015b9

00401874 <prvIsQueueEmpty>:
  401874:	b510      	push	{r4, lr}
  401876:	4604      	mov	r4, r0
  401878:	4b05      	ldr	r3, [pc, #20]	; (401890 <prvIsQueueEmpty+0x1c>)
  40187a:	4798      	blx	r3
  40187c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40187e:	b123      	cbz	r3, 40188a <prvIsQueueEmpty+0x16>
  401880:	2400      	movs	r4, #0
  401882:	4b04      	ldr	r3, [pc, #16]	; (401894 <prvIsQueueEmpty+0x20>)
  401884:	4798      	blx	r3
  401886:	4620      	mov	r0, r4
  401888:	bd10      	pop	{r4, pc}
  40188a:	2401      	movs	r4, #1
  40188c:	e7f9      	b.n	401882 <prvIsQueueEmpty+0xe>
  40188e:	bf00      	nop
  401890:	0040156d 	.word	0x0040156d
  401894:	004015b9 	.word	0x004015b9

00401898 <prvCopyDataToQueue>:
  401898:	b538      	push	{r3, r4, r5, lr}
  40189a:	4604      	mov	r4, r0
  40189c:	4615      	mov	r5, r2
  40189e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4018a0:	b95a      	cbnz	r2, 4018ba <prvCopyDataToQueue+0x22>
  4018a2:	6803      	ldr	r3, [r0, #0]
  4018a4:	2b00      	cmp	r3, #0
  4018a6:	d12e      	bne.n	401906 <prvCopyDataToQueue+0x6e>
  4018a8:	6840      	ldr	r0, [r0, #4]
  4018aa:	4b1b      	ldr	r3, [pc, #108]	; (401918 <prvCopyDataToQueue+0x80>)
  4018ac:	4798      	blx	r3
  4018ae:	2300      	movs	r3, #0
  4018b0:	6063      	str	r3, [r4, #4]
  4018b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018b4:	3301      	adds	r3, #1
  4018b6:	63a3      	str	r3, [r4, #56]	; 0x38
  4018b8:	bd38      	pop	{r3, r4, r5, pc}
  4018ba:	b96d      	cbnz	r5, 4018d8 <prvCopyDataToQueue+0x40>
  4018bc:	6880      	ldr	r0, [r0, #8]
  4018be:	4b17      	ldr	r3, [pc, #92]	; (40191c <prvCopyDataToQueue+0x84>)
  4018c0:	4798      	blx	r3
  4018c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4018c4:	68a3      	ldr	r3, [r4, #8]
  4018c6:	4413      	add	r3, r2
  4018c8:	60a3      	str	r3, [r4, #8]
  4018ca:	6862      	ldr	r2, [r4, #4]
  4018cc:	4293      	cmp	r3, r2
  4018ce:	d31c      	bcc.n	40190a <prvCopyDataToQueue+0x72>
  4018d0:	6823      	ldr	r3, [r4, #0]
  4018d2:	60a3      	str	r3, [r4, #8]
  4018d4:	2000      	movs	r0, #0
  4018d6:	e7ec      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  4018d8:	68c0      	ldr	r0, [r0, #12]
  4018da:	4b10      	ldr	r3, [pc, #64]	; (40191c <prvCopyDataToQueue+0x84>)
  4018dc:	4798      	blx	r3
  4018de:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4018e0:	425b      	negs	r3, r3
  4018e2:	68e2      	ldr	r2, [r4, #12]
  4018e4:	441a      	add	r2, r3
  4018e6:	60e2      	str	r2, [r4, #12]
  4018e8:	6821      	ldr	r1, [r4, #0]
  4018ea:	428a      	cmp	r2, r1
  4018ec:	d202      	bcs.n	4018f4 <prvCopyDataToQueue+0x5c>
  4018ee:	6862      	ldr	r2, [r4, #4]
  4018f0:	4413      	add	r3, r2
  4018f2:	60e3      	str	r3, [r4, #12]
  4018f4:	2d02      	cmp	r5, #2
  4018f6:	d10a      	bne.n	40190e <prvCopyDataToQueue+0x76>
  4018f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fa:	b153      	cbz	r3, 401912 <prvCopyDataToQueue+0x7a>
  4018fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4018fe:	3b01      	subs	r3, #1
  401900:	63a3      	str	r3, [r4, #56]	; 0x38
  401902:	2000      	movs	r0, #0
  401904:	e7d5      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401906:	2000      	movs	r0, #0
  401908:	e7d3      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190a:	2000      	movs	r0, #0
  40190c:	e7d1      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  40190e:	2000      	movs	r0, #0
  401910:	e7cf      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401912:	2000      	movs	r0, #0
  401914:	e7cd      	b.n	4018b2 <prvCopyDataToQueue+0x1a>
  401916:	bf00      	nop
  401918:	00402bf9 	.word	0x00402bf9
  40191c:	004223f9 	.word	0x004223f9

00401920 <prvNotifyQueueSetContainer>:
  401920:	b530      	push	{r4, r5, lr}
  401922:	b083      	sub	sp, #12
  401924:	9001      	str	r0, [sp, #4]
  401926:	6d44      	ldr	r4, [r0, #84]	; 0x54
  401928:	b174      	cbz	r4, 401948 <prvNotifyQueueSetContainer+0x28>
  40192a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40192c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40192e:	429a      	cmp	r2, r3
  401930:	d315      	bcc.n	40195e <prvNotifyQueueSetContainer+0x3e>
  401932:	f04f 0380 	mov.w	r3, #128	; 0x80
  401936:	b672      	cpsid	i
  401938:	f383 8811 	msr	BASEPRI, r3
  40193c:	f3bf 8f6f 	isb	sy
  401940:	f3bf 8f4f 	dsb	sy
  401944:	b662      	cpsie	i
  401946:	e7fe      	b.n	401946 <prvNotifyQueueSetContainer+0x26>
  401948:	f04f 0380 	mov.w	r3, #128	; 0x80
  40194c:	b672      	cpsid	i
  40194e:	f383 8811 	msr	BASEPRI, r3
  401952:	f3bf 8f6f 	isb	sy
  401956:	f3bf 8f4f 	dsb	sy
  40195a:	b662      	cpsie	i
  40195c:	e7fe      	b.n	40195c <prvNotifyQueueSetContainer+0x3c>
  40195e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401960:	4293      	cmp	r3, r2
  401962:	d803      	bhi.n	40196c <prvNotifyQueueSetContainer+0x4c>
  401964:	2500      	movs	r5, #0
  401966:	4628      	mov	r0, r5
  401968:	b003      	add	sp, #12
  40196a:	bd30      	pop	{r4, r5, pc}
  40196c:	460a      	mov	r2, r1
  40196e:	a901      	add	r1, sp, #4
  401970:	4620      	mov	r0, r4
  401972:	4b0b      	ldr	r3, [pc, #44]	; (4019a0 <prvNotifyQueueSetContainer+0x80>)
  401974:	4798      	blx	r3
  401976:	4605      	mov	r5, r0
  401978:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40197a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40197e:	d10a      	bne.n	401996 <prvNotifyQueueSetContainer+0x76>
  401980:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401982:	2b00      	cmp	r3, #0
  401984:	d0ef      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
  401986:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40198a:	4b06      	ldr	r3, [pc, #24]	; (4019a4 <prvNotifyQueueSetContainer+0x84>)
  40198c:	4798      	blx	r3
  40198e:	2800      	cmp	r0, #0
  401990:	d0e9      	beq.n	401966 <prvNotifyQueueSetContainer+0x46>
  401992:	2501      	movs	r5, #1
  401994:	e7e7      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
  401996:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401998:	3301      	adds	r3, #1
  40199a:	64a3      	str	r3, [r4, #72]	; 0x48
  40199c:	e7e3      	b.n	401966 <prvNotifyQueueSetContainer+0x46>
  40199e:	bf00      	nop
  4019a0:	00401899 	.word	0x00401899
  4019a4:	004029c5 	.word	0x004029c5

004019a8 <prvCopyDataFromQueue>:
  4019a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4019aa:	b172      	cbz	r2, 4019ca <prvCopyDataFromQueue+0x22>
  4019ac:	b510      	push	{r4, lr}
  4019ae:	4603      	mov	r3, r0
  4019b0:	68c4      	ldr	r4, [r0, #12]
  4019b2:	4414      	add	r4, r2
  4019b4:	60c4      	str	r4, [r0, #12]
  4019b6:	6840      	ldr	r0, [r0, #4]
  4019b8:	4284      	cmp	r4, r0
  4019ba:	d301      	bcc.n	4019c0 <prvCopyDataFromQueue+0x18>
  4019bc:	6818      	ldr	r0, [r3, #0]
  4019be:	60d8      	str	r0, [r3, #12]
  4019c0:	4608      	mov	r0, r1
  4019c2:	68d9      	ldr	r1, [r3, #12]
  4019c4:	4b01      	ldr	r3, [pc, #4]	; (4019cc <prvCopyDataFromQueue+0x24>)
  4019c6:	4798      	blx	r3
  4019c8:	bd10      	pop	{r4, pc}
  4019ca:	4770      	bx	lr
  4019cc:	004223f9 	.word	0x004223f9

004019d0 <prvUnlockQueue>:
  4019d0:	b510      	push	{r4, lr}
  4019d2:	4604      	mov	r4, r0
  4019d4:	4b1e      	ldr	r3, [pc, #120]	; (401a50 <prvUnlockQueue+0x80>)
  4019d6:	4798      	blx	r3
  4019d8:	e009      	b.n	4019ee <prvUnlockQueue+0x1e>
  4019da:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4019dc:	b1cb      	cbz	r3, 401a12 <prvUnlockQueue+0x42>
  4019de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4019e2:	4b1c      	ldr	r3, [pc, #112]	; (401a54 <prvUnlockQueue+0x84>)
  4019e4:	4798      	blx	r3
  4019e6:	b988      	cbnz	r0, 401a0c <prvUnlockQueue+0x3c>
  4019e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019ea:	3b01      	subs	r3, #1
  4019ec:	64a3      	str	r3, [r4, #72]	; 0x48
  4019ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f0:	2b00      	cmp	r3, #0
  4019f2:	dd0e      	ble.n	401a12 <prvUnlockQueue+0x42>
  4019f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d0ef      	beq.n	4019da <prvUnlockQueue+0xa>
  4019fa:	2100      	movs	r1, #0
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b16      	ldr	r3, [pc, #88]	; (401a58 <prvUnlockQueue+0x88>)
  401a00:	4798      	blx	r3
  401a02:	2801      	cmp	r0, #1
  401a04:	d1f0      	bne.n	4019e8 <prvUnlockQueue+0x18>
  401a06:	4b15      	ldr	r3, [pc, #84]	; (401a5c <prvUnlockQueue+0x8c>)
  401a08:	4798      	blx	r3
  401a0a:	e7ed      	b.n	4019e8 <prvUnlockQueue+0x18>
  401a0c:	4b13      	ldr	r3, [pc, #76]	; (401a5c <prvUnlockQueue+0x8c>)
  401a0e:	4798      	blx	r3
  401a10:	e7ea      	b.n	4019e8 <prvUnlockQueue+0x18>
  401a12:	f04f 33ff 	mov.w	r3, #4294967295
  401a16:	64a3      	str	r3, [r4, #72]	; 0x48
  401a18:	4b11      	ldr	r3, [pc, #68]	; (401a60 <prvUnlockQueue+0x90>)
  401a1a:	4798      	blx	r3
  401a1c:	4b0c      	ldr	r3, [pc, #48]	; (401a50 <prvUnlockQueue+0x80>)
  401a1e:	4798      	blx	r3
  401a20:	e002      	b.n	401a28 <prvUnlockQueue+0x58>
  401a22:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a24:	3b01      	subs	r3, #1
  401a26:	6463      	str	r3, [r4, #68]	; 0x44
  401a28:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401a2a:	2b00      	cmp	r3, #0
  401a2c:	dd0a      	ble.n	401a44 <prvUnlockQueue+0x74>
  401a2e:	6923      	ldr	r3, [r4, #16]
  401a30:	b143      	cbz	r3, 401a44 <prvUnlockQueue+0x74>
  401a32:	f104 0010 	add.w	r0, r4, #16
  401a36:	4b07      	ldr	r3, [pc, #28]	; (401a54 <prvUnlockQueue+0x84>)
  401a38:	4798      	blx	r3
  401a3a:	2800      	cmp	r0, #0
  401a3c:	d0f1      	beq.n	401a22 <prvUnlockQueue+0x52>
  401a3e:	4b07      	ldr	r3, [pc, #28]	; (401a5c <prvUnlockQueue+0x8c>)
  401a40:	4798      	blx	r3
  401a42:	e7ee      	b.n	401a22 <prvUnlockQueue+0x52>
  401a44:	f04f 33ff 	mov.w	r3, #4294967295
  401a48:	6463      	str	r3, [r4, #68]	; 0x44
  401a4a:	4b05      	ldr	r3, [pc, #20]	; (401a60 <prvUnlockQueue+0x90>)
  401a4c:	4798      	blx	r3
  401a4e:	bd10      	pop	{r4, pc}
  401a50:	0040156d 	.word	0x0040156d
  401a54:	004029c5 	.word	0x004029c5
  401a58:	00401921 	.word	0x00401921
  401a5c:	00402b21 	.word	0x00402b21
  401a60:	004015b9 	.word	0x004015b9

00401a64 <xQueueGenericReset>:
  401a64:	b538      	push	{r3, r4, r5, lr}
  401a66:	b308      	cbz	r0, 401aac <xQueueGenericReset+0x48>
  401a68:	4604      	mov	r4, r0
  401a6a:	460d      	mov	r5, r1
  401a6c:	4b1d      	ldr	r3, [pc, #116]	; (401ae4 <xQueueGenericReset+0x80>)
  401a6e:	4798      	blx	r3
  401a70:	6821      	ldr	r1, [r4, #0]
  401a72:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401a74:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401a76:	fb03 1002 	mla	r0, r3, r2, r1
  401a7a:	6060      	str	r0, [r4, #4]
  401a7c:	2000      	movs	r0, #0
  401a7e:	63a0      	str	r0, [r4, #56]	; 0x38
  401a80:	60a1      	str	r1, [r4, #8]
  401a82:	3a01      	subs	r2, #1
  401a84:	fb02 1303 	mla	r3, r2, r3, r1
  401a88:	60e3      	str	r3, [r4, #12]
  401a8a:	f04f 33ff 	mov.w	r3, #4294967295
  401a8e:	6463      	str	r3, [r4, #68]	; 0x44
  401a90:	64a3      	str	r3, [r4, #72]	; 0x48
  401a92:	b9fd      	cbnz	r5, 401ad4 <xQueueGenericReset+0x70>
  401a94:	6923      	ldr	r3, [r4, #16]
  401a96:	b12b      	cbz	r3, 401aa4 <xQueueGenericReset+0x40>
  401a98:	f104 0010 	add.w	r0, r4, #16
  401a9c:	4b12      	ldr	r3, [pc, #72]	; (401ae8 <xQueueGenericReset+0x84>)
  401a9e:	4798      	blx	r3
  401aa0:	2801      	cmp	r0, #1
  401aa2:	d00e      	beq.n	401ac2 <xQueueGenericReset+0x5e>
  401aa4:	4b11      	ldr	r3, [pc, #68]	; (401aec <xQueueGenericReset+0x88>)
  401aa6:	4798      	blx	r3
  401aa8:	2001      	movs	r0, #1
  401aaa:	bd38      	pop	{r3, r4, r5, pc}
  401aac:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab0:	b672      	cpsid	i
  401ab2:	f383 8811 	msr	BASEPRI, r3
  401ab6:	f3bf 8f6f 	isb	sy
  401aba:	f3bf 8f4f 	dsb	sy
  401abe:	b662      	cpsie	i
  401ac0:	e7fe      	b.n	401ac0 <xQueueGenericReset+0x5c>
  401ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401ac6:	4b0a      	ldr	r3, [pc, #40]	; (401af0 <xQueueGenericReset+0x8c>)
  401ac8:	601a      	str	r2, [r3, #0]
  401aca:	f3bf 8f4f 	dsb	sy
  401ace:	f3bf 8f6f 	isb	sy
  401ad2:	e7e7      	b.n	401aa4 <xQueueGenericReset+0x40>
  401ad4:	f104 0010 	add.w	r0, r4, #16
  401ad8:	4d06      	ldr	r5, [pc, #24]	; (401af4 <xQueueGenericReset+0x90>)
  401ada:	47a8      	blx	r5
  401adc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401ae0:	47a8      	blx	r5
  401ae2:	e7df      	b.n	401aa4 <xQueueGenericReset+0x40>
  401ae4:	0040156d 	.word	0x0040156d
  401ae8:	004029c5 	.word	0x004029c5
  401aec:	004015b9 	.word	0x004015b9
  401af0:	e000ed04 	.word	0xe000ed04
  401af4:	00401421 	.word	0x00401421

00401af8 <xQueueGenericCreate>:
  401af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401afa:	b950      	cbnz	r0, 401b12 <xQueueGenericCreate+0x1a>
  401afc:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b00:	b672      	cpsid	i
  401b02:	f383 8811 	msr	BASEPRI, r3
  401b06:	f3bf 8f6f 	isb	sy
  401b0a:	f3bf 8f4f 	dsb	sy
  401b0e:	b662      	cpsie	i
  401b10:	e7fe      	b.n	401b10 <xQueueGenericCreate+0x18>
  401b12:	4606      	mov	r6, r0
  401b14:	b119      	cbz	r1, 401b1e <xQueueGenericCreate+0x26>
  401b16:	fb01 f000 	mul.w	r0, r1, r0
  401b1a:	3001      	adds	r0, #1
  401b1c:	e000      	b.n	401b20 <xQueueGenericCreate+0x28>
  401b1e:	2000      	movs	r0, #0
  401b20:	4617      	mov	r7, r2
  401b22:	460d      	mov	r5, r1
  401b24:	3058      	adds	r0, #88	; 0x58
  401b26:	4b12      	ldr	r3, [pc, #72]	; (401b70 <xQueueGenericCreate+0x78>)
  401b28:	4798      	blx	r3
  401b2a:	4604      	mov	r4, r0
  401b2c:	b190      	cbz	r0, 401b54 <xQueueGenericCreate+0x5c>
  401b2e:	b96d      	cbnz	r5, 401b4c <xQueueGenericCreate+0x54>
  401b30:	6020      	str	r0, [r4, #0]
  401b32:	63e6      	str	r6, [r4, #60]	; 0x3c
  401b34:	6425      	str	r5, [r4, #64]	; 0x40
  401b36:	2101      	movs	r1, #1
  401b38:	4620      	mov	r0, r4
  401b3a:	4b0e      	ldr	r3, [pc, #56]	; (401b74 <xQueueGenericCreate+0x7c>)
  401b3c:	4798      	blx	r3
  401b3e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
  401b42:	2300      	movs	r3, #0
  401b44:	6563      	str	r3, [r4, #84]	; 0x54
  401b46:	4620      	mov	r0, r4
  401b48:	b130      	cbz	r0, 401b58 <xQueueGenericCreate+0x60>
  401b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401b4c:	f100 0358 	add.w	r3, r0, #88	; 0x58
  401b50:	6003      	str	r3, [r0, #0]
  401b52:	e7ee      	b.n	401b32 <xQueueGenericCreate+0x3a>
  401b54:	2000      	movs	r0, #0
  401b56:	e7f7      	b.n	401b48 <xQueueGenericCreate+0x50>
  401b58:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b5c:	b672      	cpsid	i
  401b5e:	f383 8811 	msr	BASEPRI, r3
  401b62:	f3bf 8f6f 	isb	sy
  401b66:	f3bf 8f4f 	dsb	sy
  401b6a:	b662      	cpsie	i
  401b6c:	e7fe      	b.n	401b6c <xQueueGenericCreate+0x74>
  401b6e:	bf00      	nop
  401b70:	004017bd 	.word	0x004017bd
  401b74:	00401a65 	.word	0x00401a65

00401b78 <xQueueGenericSend>:
  401b78:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b7a:	b085      	sub	sp, #20
  401b7c:	9201      	str	r2, [sp, #4]
  401b7e:	b170      	cbz	r0, 401b9e <xQueueGenericSend+0x26>
  401b80:	4604      	mov	r4, r0
  401b82:	b1b9      	cbz	r1, 401bb4 <xQueueGenericSend+0x3c>
  401b84:	2501      	movs	r5, #1
  401b86:	b9dd      	cbnz	r5, 401bc0 <xQueueGenericSend+0x48>
  401b88:	f04f 0380 	mov.w	r3, #128	; 0x80
  401b8c:	b672      	cpsid	i
  401b8e:	f383 8811 	msr	BASEPRI, r3
  401b92:	f3bf 8f6f 	isb	sy
  401b96:	f3bf 8f4f 	dsb	sy
  401b9a:	b662      	cpsie	i
  401b9c:	e7fe      	b.n	401b9c <xQueueGenericSend+0x24>
  401b9e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ba2:	b672      	cpsid	i
  401ba4:	f383 8811 	msr	BASEPRI, r3
  401ba8:	f3bf 8f6f 	isb	sy
  401bac:	f3bf 8f4f 	dsb	sy
  401bb0:	b662      	cpsie	i
  401bb2:	e7fe      	b.n	401bb2 <xQueueGenericSend+0x3a>
  401bb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401bb6:	b90a      	cbnz	r2, 401bbc <xQueueGenericSend+0x44>
  401bb8:	2501      	movs	r5, #1
  401bba:	e7e4      	b.n	401b86 <xQueueGenericSend+0xe>
  401bbc:	2500      	movs	r5, #0
  401bbe:	e7e2      	b.n	401b86 <xQueueGenericSend+0xe>
  401bc0:	2b02      	cmp	r3, #2
  401bc2:	d00b      	beq.n	401bdc <xQueueGenericSend+0x64>
  401bc4:	b97d      	cbnz	r5, 401be6 <xQueueGenericSend+0x6e>
  401bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bca:	b672      	cpsid	i
  401bcc:	f383 8811 	msr	BASEPRI, r3
  401bd0:	f3bf 8f6f 	isb	sy
  401bd4:	f3bf 8f4f 	dsb	sy
  401bd8:	b662      	cpsie	i
  401bda:	e7fe      	b.n	401bda <xQueueGenericSend+0x62>
  401bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401bde:	2a01      	cmp	r2, #1
  401be0:	d0f0      	beq.n	401bc4 <xQueueGenericSend+0x4c>
  401be2:	2500      	movs	r5, #0
  401be4:	e7ee      	b.n	401bc4 <xQueueGenericSend+0x4c>
  401be6:	461e      	mov	r6, r3
  401be8:	460f      	mov	r7, r1
  401bea:	4b4e      	ldr	r3, [pc, #312]	; (401d24 <xQueueGenericSend+0x1ac>)
  401bec:	4798      	blx	r3
  401bee:	b910      	cbnz	r0, 401bf6 <xQueueGenericSend+0x7e>
  401bf0:	9b01      	ldr	r3, [sp, #4]
  401bf2:	b103      	cbz	r3, 401bf6 <xQueueGenericSend+0x7e>
  401bf4:	2500      	movs	r5, #0
  401bf6:	b955      	cbnz	r5, 401c0e <xQueueGenericSend+0x96>
  401bf8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bfc:	b672      	cpsid	i
  401bfe:	f383 8811 	msr	BASEPRI, r3
  401c02:	f3bf 8f6f 	isb	sy
  401c06:	f3bf 8f4f 	dsb	sy
  401c0a:	b662      	cpsie	i
  401c0c:	e7fe      	b.n	401c0c <xQueueGenericSend+0x94>
  401c0e:	2500      	movs	r5, #0
  401c10:	e03e      	b.n	401c90 <xQueueGenericSend+0x118>
  401c12:	4632      	mov	r2, r6
  401c14:	4639      	mov	r1, r7
  401c16:	4620      	mov	r0, r4
  401c18:	4b43      	ldr	r3, [pc, #268]	; (401d28 <xQueueGenericSend+0x1b0>)
  401c1a:	4798      	blx	r3
  401c1c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401c1e:	b193      	cbz	r3, 401c46 <xQueueGenericSend+0xce>
  401c20:	4631      	mov	r1, r6
  401c22:	4620      	mov	r0, r4
  401c24:	4b41      	ldr	r3, [pc, #260]	; (401d2c <xQueueGenericSend+0x1b4>)
  401c26:	4798      	blx	r3
  401c28:	2801      	cmp	r0, #1
  401c2a:	d107      	bne.n	401c3c <xQueueGenericSend+0xc4>
  401c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c30:	4b3f      	ldr	r3, [pc, #252]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c32:	601a      	str	r2, [r3, #0]
  401c34:	f3bf 8f4f 	dsb	sy
  401c38:	f3bf 8f6f 	isb	sy
  401c3c:	4b3d      	ldr	r3, [pc, #244]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c3e:	4798      	blx	r3
  401c40:	2001      	movs	r0, #1
  401c42:	b005      	add	sp, #20
  401c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401c48:	b173      	cbz	r3, 401c68 <xQueueGenericSend+0xf0>
  401c4a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401c4e:	4b3a      	ldr	r3, [pc, #232]	; (401d38 <xQueueGenericSend+0x1c0>)
  401c50:	4798      	blx	r3
  401c52:	2801      	cmp	r0, #1
  401c54:	d1f2      	bne.n	401c3c <xQueueGenericSend+0xc4>
  401c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c5a:	4b35      	ldr	r3, [pc, #212]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c5c:	601a      	str	r2, [r3, #0]
  401c5e:	f3bf 8f4f 	dsb	sy
  401c62:	f3bf 8f6f 	isb	sy
  401c66:	e7e9      	b.n	401c3c <xQueueGenericSend+0xc4>
  401c68:	2800      	cmp	r0, #0
  401c6a:	d0e7      	beq.n	401c3c <xQueueGenericSend+0xc4>
  401c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c70:	4b2f      	ldr	r3, [pc, #188]	; (401d30 <xQueueGenericSend+0x1b8>)
  401c72:	601a      	str	r2, [r3, #0]
  401c74:	f3bf 8f4f 	dsb	sy
  401c78:	f3bf 8f6f 	isb	sy
  401c7c:	e7de      	b.n	401c3c <xQueueGenericSend+0xc4>
  401c7e:	4b2d      	ldr	r3, [pc, #180]	; (401d34 <xQueueGenericSend+0x1bc>)
  401c80:	4798      	blx	r3
  401c82:	2000      	movs	r0, #0
  401c84:	e7dd      	b.n	401c42 <xQueueGenericSend+0xca>
  401c86:	4620      	mov	r0, r4
  401c88:	4b2c      	ldr	r3, [pc, #176]	; (401d3c <xQueueGenericSend+0x1c4>)
  401c8a:	4798      	blx	r3
  401c8c:	4b2c      	ldr	r3, [pc, #176]	; (401d40 <xQueueGenericSend+0x1c8>)
  401c8e:	4798      	blx	r3
  401c90:	4b2c      	ldr	r3, [pc, #176]	; (401d44 <xQueueGenericSend+0x1cc>)
  401c92:	4798      	blx	r3
  401c94:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401c96:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401c98:	429a      	cmp	r2, r3
  401c9a:	d3ba      	bcc.n	401c12 <xQueueGenericSend+0x9a>
  401c9c:	2e02      	cmp	r6, #2
  401c9e:	d0b8      	beq.n	401c12 <xQueueGenericSend+0x9a>
  401ca0:	9b01      	ldr	r3, [sp, #4]
  401ca2:	2b00      	cmp	r3, #0
  401ca4:	d0eb      	beq.n	401c7e <xQueueGenericSend+0x106>
  401ca6:	b91d      	cbnz	r5, 401cb0 <xQueueGenericSend+0x138>
  401ca8:	a802      	add	r0, sp, #8
  401caa:	4b27      	ldr	r3, [pc, #156]	; (401d48 <xQueueGenericSend+0x1d0>)
  401cac:	4798      	blx	r3
  401cae:	2501      	movs	r5, #1
  401cb0:	4b20      	ldr	r3, [pc, #128]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cb2:	4798      	blx	r3
  401cb4:	4b25      	ldr	r3, [pc, #148]	; (401d4c <xQueueGenericSend+0x1d4>)
  401cb6:	4798      	blx	r3
  401cb8:	4b22      	ldr	r3, [pc, #136]	; (401d44 <xQueueGenericSend+0x1cc>)
  401cba:	4798      	blx	r3
  401cbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cc2:	d101      	bne.n	401cc8 <xQueueGenericSend+0x150>
  401cc4:	2300      	movs	r3, #0
  401cc6:	6463      	str	r3, [r4, #68]	; 0x44
  401cc8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401cca:	f1b3 3fff 	cmp.w	r3, #4294967295
  401cce:	d101      	bne.n	401cd4 <xQueueGenericSend+0x15c>
  401cd0:	2300      	movs	r3, #0
  401cd2:	64a3      	str	r3, [r4, #72]	; 0x48
  401cd4:	4b17      	ldr	r3, [pc, #92]	; (401d34 <xQueueGenericSend+0x1bc>)
  401cd6:	4798      	blx	r3
  401cd8:	a901      	add	r1, sp, #4
  401cda:	a802      	add	r0, sp, #8
  401cdc:	4b1c      	ldr	r3, [pc, #112]	; (401d50 <xQueueGenericSend+0x1d8>)
  401cde:	4798      	blx	r3
  401ce0:	b9c8      	cbnz	r0, 401d16 <xQueueGenericSend+0x19e>
  401ce2:	4620      	mov	r0, r4
  401ce4:	4b1b      	ldr	r3, [pc, #108]	; (401d54 <xQueueGenericSend+0x1dc>)
  401ce6:	4798      	blx	r3
  401ce8:	2800      	cmp	r0, #0
  401cea:	d0cc      	beq.n	401c86 <xQueueGenericSend+0x10e>
  401cec:	9901      	ldr	r1, [sp, #4]
  401cee:	f104 0010 	add.w	r0, r4, #16
  401cf2:	4b19      	ldr	r3, [pc, #100]	; (401d58 <xQueueGenericSend+0x1e0>)
  401cf4:	4798      	blx	r3
  401cf6:	4620      	mov	r0, r4
  401cf8:	4b10      	ldr	r3, [pc, #64]	; (401d3c <xQueueGenericSend+0x1c4>)
  401cfa:	4798      	blx	r3
  401cfc:	4b10      	ldr	r3, [pc, #64]	; (401d40 <xQueueGenericSend+0x1c8>)
  401cfe:	4798      	blx	r3
  401d00:	2800      	cmp	r0, #0
  401d02:	d1c5      	bne.n	401c90 <xQueueGenericSend+0x118>
  401d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d08:	4b09      	ldr	r3, [pc, #36]	; (401d30 <xQueueGenericSend+0x1b8>)
  401d0a:	601a      	str	r2, [r3, #0]
  401d0c:	f3bf 8f4f 	dsb	sy
  401d10:	f3bf 8f6f 	isb	sy
  401d14:	e7bc      	b.n	401c90 <xQueueGenericSend+0x118>
  401d16:	4620      	mov	r0, r4
  401d18:	4b08      	ldr	r3, [pc, #32]	; (401d3c <xQueueGenericSend+0x1c4>)
  401d1a:	4798      	blx	r3
  401d1c:	4b08      	ldr	r3, [pc, #32]	; (401d40 <xQueueGenericSend+0x1c8>)
  401d1e:	4798      	blx	r3
  401d20:	2000      	movs	r0, #0
  401d22:	e78e      	b.n	401c42 <xQueueGenericSend+0xca>
  401d24:	00402b2d 	.word	0x00402b2d
  401d28:	00401899 	.word	0x00401899
  401d2c:	00401921 	.word	0x00401921
  401d30:	e000ed04 	.word	0xe000ed04
  401d34:	004015b9 	.word	0x004015b9
  401d38:	004029c5 	.word	0x004029c5
  401d3c:	004019d1 	.word	0x004019d1
  401d40:	004025a5 	.word	0x004025a5
  401d44:	0040156d 	.word	0x0040156d
  401d48:	00402a5d 	.word	0x00402a5d
  401d4c:	00402445 	.word	0x00402445
  401d50:	00402a8d 	.word	0x00402a8d
  401d54:	0040184d 	.word	0x0040184d
  401d58:	004028c1 	.word	0x004028c1

00401d5c <xQueueGenericSendFromISR>:
  401d5c:	b180      	cbz	r0, 401d80 <xQueueGenericSendFromISR+0x24>
  401d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401d62:	4604      	mov	r4, r0
  401d64:	b1b9      	cbz	r1, 401d96 <xQueueGenericSendFromISR+0x3a>
  401d66:	2001      	movs	r0, #1
  401d68:	b9d8      	cbnz	r0, 401da2 <xQueueGenericSendFromISR+0x46>
  401d6a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d6e:	b672      	cpsid	i
  401d70:	f383 8811 	msr	BASEPRI, r3
  401d74:	f3bf 8f6f 	isb	sy
  401d78:	f3bf 8f4f 	dsb	sy
  401d7c:	b662      	cpsie	i
  401d7e:	e7fe      	b.n	401d7e <xQueueGenericSendFromISR+0x22>
  401d80:	f04f 0380 	mov.w	r3, #128	; 0x80
  401d84:	b672      	cpsid	i
  401d86:	f383 8811 	msr	BASEPRI, r3
  401d8a:	f3bf 8f6f 	isb	sy
  401d8e:	f3bf 8f4f 	dsb	sy
  401d92:	b662      	cpsie	i
  401d94:	e7fe      	b.n	401d94 <xQueueGenericSendFromISR+0x38>
  401d96:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401d98:	b908      	cbnz	r0, 401d9e <xQueueGenericSendFromISR+0x42>
  401d9a:	2001      	movs	r0, #1
  401d9c:	e7e4      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
  401d9e:	2000      	movs	r0, #0
  401da0:	e7e2      	b.n	401d68 <xQueueGenericSendFromISR+0xc>
  401da2:	2b02      	cmp	r3, #2
  401da4:	d00b      	beq.n	401dbe <xQueueGenericSendFromISR+0x62>
  401da6:	b978      	cbnz	r0, 401dc8 <xQueueGenericSendFromISR+0x6c>
  401da8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dac:	b672      	cpsid	i
  401dae:	f383 8811 	msr	BASEPRI, r3
  401db2:	f3bf 8f6f 	isb	sy
  401db6:	f3bf 8f4f 	dsb	sy
  401dba:	b662      	cpsie	i
  401dbc:	e7fe      	b.n	401dbc <xQueueGenericSendFromISR+0x60>
  401dbe:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  401dc0:	2d01      	cmp	r5, #1
  401dc2:	d0f0      	beq.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc4:	2000      	movs	r0, #0
  401dc6:	e7ee      	b.n	401da6 <xQueueGenericSendFromISR+0x4a>
  401dc8:	461e      	mov	r6, r3
  401dca:	4615      	mov	r5, r2
  401dcc:	4688      	mov	r8, r1
  401dce:	4b23      	ldr	r3, [pc, #140]	; (401e5c <xQueueGenericSendFromISR+0x100>)
  401dd0:	4798      	blx	r3
  401dd2:	f3ef 8711 	mrs	r7, BASEPRI
  401dd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401dda:	b672      	cpsid	i
  401ddc:	f383 8811 	msr	BASEPRI, r3
  401de0:	f3bf 8f6f 	isb	sy
  401de4:	f3bf 8f4f 	dsb	sy
  401de8:	b662      	cpsie	i
  401dea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401dec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401dee:	429a      	cmp	r2, r3
  401df0:	d301      	bcc.n	401df6 <xQueueGenericSendFromISR+0x9a>
  401df2:	2e02      	cmp	r6, #2
  401df4:	d126      	bne.n	401e44 <xQueueGenericSendFromISR+0xe8>
  401df6:	4632      	mov	r2, r6
  401df8:	4641      	mov	r1, r8
  401dfa:	4620      	mov	r0, r4
  401dfc:	4b18      	ldr	r3, [pc, #96]	; (401e60 <xQueueGenericSendFromISR+0x104>)
  401dfe:	4798      	blx	r3
  401e00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e02:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e06:	d118      	bne.n	401e3a <xQueueGenericSendFromISR+0xde>
  401e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401e0a:	b15b      	cbz	r3, 401e24 <xQueueGenericSendFromISR+0xc8>
  401e0c:	4631      	mov	r1, r6
  401e0e:	4620      	mov	r0, r4
  401e10:	4b14      	ldr	r3, [pc, #80]	; (401e64 <xQueueGenericSendFromISR+0x108>)
  401e12:	4798      	blx	r3
  401e14:	2801      	cmp	r0, #1
  401e16:	d117      	bne.n	401e48 <xQueueGenericSendFromISR+0xec>
  401e18:	b1c5      	cbz	r5, 401e4c <xQueueGenericSendFromISR+0xf0>
  401e1a:	6028      	str	r0, [r5, #0]
  401e1c:	f387 8811 	msr	BASEPRI, r7
  401e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401e26:	b19b      	cbz	r3, 401e50 <xQueueGenericSendFromISR+0xf4>
  401e28:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e2c:	4b0e      	ldr	r3, [pc, #56]	; (401e68 <xQueueGenericSendFromISR+0x10c>)
  401e2e:	4798      	blx	r3
  401e30:	b180      	cbz	r0, 401e54 <xQueueGenericSendFromISR+0xf8>
  401e32:	b18d      	cbz	r5, 401e58 <xQueueGenericSendFromISR+0xfc>
  401e34:	2001      	movs	r0, #1
  401e36:	6028      	str	r0, [r5, #0]
  401e38:	e7f0      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401e3c:	3301      	adds	r3, #1
  401e3e:	64a3      	str	r3, [r4, #72]	; 0x48
  401e40:	2001      	movs	r0, #1
  401e42:	e7eb      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e44:	2000      	movs	r0, #0
  401e46:	e7e9      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e48:	2001      	movs	r0, #1
  401e4a:	e7e7      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e4c:	2001      	movs	r0, #1
  401e4e:	e7e5      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e50:	2001      	movs	r0, #1
  401e52:	e7e3      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e54:	2001      	movs	r0, #1
  401e56:	e7e1      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e58:	2001      	movs	r0, #1
  401e5a:	e7df      	b.n	401e1c <xQueueGenericSendFromISR+0xc0>
  401e5c:	00401759 	.word	0x00401759
  401e60:	00401899 	.word	0x00401899
  401e64:	00401921 	.word	0x00401921
  401e68:	004029c5 	.word	0x004029c5

00401e6c <xQueueGenericReceive>:
  401e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  401e6e:	b085      	sub	sp, #20
  401e70:	9201      	str	r2, [sp, #4]
  401e72:	b170      	cbz	r0, 401e92 <xQueueGenericReceive+0x26>
  401e74:	4604      	mov	r4, r0
  401e76:	b1b9      	cbz	r1, 401ea8 <xQueueGenericReceive+0x3c>
  401e78:	2501      	movs	r5, #1
  401e7a:	b9dd      	cbnz	r5, 401eb4 <xQueueGenericReceive+0x48>
  401e7c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e80:	b672      	cpsid	i
  401e82:	f383 8811 	msr	BASEPRI, r3
  401e86:	f3bf 8f6f 	isb	sy
  401e8a:	f3bf 8f4f 	dsb	sy
  401e8e:	b662      	cpsie	i
  401e90:	e7fe      	b.n	401e90 <xQueueGenericReceive+0x24>
  401e92:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e96:	b672      	cpsid	i
  401e98:	f383 8811 	msr	BASEPRI, r3
  401e9c:	f3bf 8f6f 	isb	sy
  401ea0:	f3bf 8f4f 	dsb	sy
  401ea4:	b662      	cpsie	i
  401ea6:	e7fe      	b.n	401ea6 <xQueueGenericReceive+0x3a>
  401ea8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401eaa:	b90a      	cbnz	r2, 401eb0 <xQueueGenericReceive+0x44>
  401eac:	2501      	movs	r5, #1
  401eae:	e7e4      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb0:	2500      	movs	r5, #0
  401eb2:	e7e2      	b.n	401e7a <xQueueGenericReceive+0xe>
  401eb4:	461f      	mov	r7, r3
  401eb6:	460e      	mov	r6, r1
  401eb8:	4b52      	ldr	r3, [pc, #328]	; (402004 <xQueueGenericReceive+0x198>)
  401eba:	4798      	blx	r3
  401ebc:	b910      	cbnz	r0, 401ec4 <xQueueGenericReceive+0x58>
  401ebe:	9b01      	ldr	r3, [sp, #4]
  401ec0:	b103      	cbz	r3, 401ec4 <xQueueGenericReceive+0x58>
  401ec2:	2500      	movs	r5, #0
  401ec4:	b955      	cbnz	r5, 401edc <xQueueGenericReceive+0x70>
  401ec6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eca:	b672      	cpsid	i
  401ecc:	f383 8811 	msr	BASEPRI, r3
  401ed0:	f3bf 8f6f 	isb	sy
  401ed4:	f3bf 8f4f 	dsb	sy
  401ed8:	b662      	cpsie	i
  401eda:	e7fe      	b.n	401eda <xQueueGenericReceive+0x6e>
  401edc:	2500      	movs	r5, #0
  401ede:	e046      	b.n	401f6e <xQueueGenericReceive+0x102>
  401ee0:	68e5      	ldr	r5, [r4, #12]
  401ee2:	4631      	mov	r1, r6
  401ee4:	4620      	mov	r0, r4
  401ee6:	4b48      	ldr	r3, [pc, #288]	; (402008 <xQueueGenericReceive+0x19c>)
  401ee8:	4798      	blx	r3
  401eea:	b9e7      	cbnz	r7, 401f26 <xQueueGenericReceive+0xba>
  401eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401eee:	3b01      	subs	r3, #1
  401ef0:	63a3      	str	r3, [r4, #56]	; 0x38
  401ef2:	6823      	ldr	r3, [r4, #0]
  401ef4:	b913      	cbnz	r3, 401efc <xQueueGenericReceive+0x90>
  401ef6:	4b45      	ldr	r3, [pc, #276]	; (40200c <xQueueGenericReceive+0x1a0>)
  401ef8:	4798      	blx	r3
  401efa:	6060      	str	r0, [r4, #4]
  401efc:	6923      	ldr	r3, [r4, #16]
  401efe:	b16b      	cbz	r3, 401f1c <xQueueGenericReceive+0xb0>
  401f00:	f104 0010 	add.w	r0, r4, #16
  401f04:	4b42      	ldr	r3, [pc, #264]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f06:	4798      	blx	r3
  401f08:	2801      	cmp	r0, #1
  401f0a:	d107      	bne.n	401f1c <xQueueGenericReceive+0xb0>
  401f0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f10:	4b40      	ldr	r3, [pc, #256]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f12:	601a      	str	r2, [r3, #0]
  401f14:	f3bf 8f4f 	dsb	sy
  401f18:	f3bf 8f6f 	isb	sy
  401f1c:	4b3e      	ldr	r3, [pc, #248]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f1e:	4798      	blx	r3
  401f20:	2001      	movs	r0, #1
  401f22:	b005      	add	sp, #20
  401f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401f26:	60e5      	str	r5, [r4, #12]
  401f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401f2a:	2b00      	cmp	r3, #0
  401f2c:	d0f6      	beq.n	401f1c <xQueueGenericReceive+0xb0>
  401f2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401f32:	4b37      	ldr	r3, [pc, #220]	; (402010 <xQueueGenericReceive+0x1a4>)
  401f34:	4798      	blx	r3
  401f36:	2800      	cmp	r0, #0
  401f38:	d0f0      	beq.n	401f1c <xQueueGenericReceive+0xb0>
  401f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401f3e:	4b35      	ldr	r3, [pc, #212]	; (402014 <xQueueGenericReceive+0x1a8>)
  401f40:	601a      	str	r2, [r3, #0]
  401f42:	f3bf 8f4f 	dsb	sy
  401f46:	f3bf 8f6f 	isb	sy
  401f4a:	e7e7      	b.n	401f1c <xQueueGenericReceive+0xb0>
  401f4c:	4b32      	ldr	r3, [pc, #200]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f4e:	4798      	blx	r3
  401f50:	2000      	movs	r0, #0
  401f52:	e7e6      	b.n	401f22 <xQueueGenericReceive+0xb6>
  401f54:	4b31      	ldr	r3, [pc, #196]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f56:	4798      	blx	r3
  401f58:	6860      	ldr	r0, [r4, #4]
  401f5a:	4b31      	ldr	r3, [pc, #196]	; (402020 <xQueueGenericReceive+0x1b4>)
  401f5c:	4798      	blx	r3
  401f5e:	4b2e      	ldr	r3, [pc, #184]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f60:	4798      	blx	r3
  401f62:	e032      	b.n	401fca <xQueueGenericReceive+0x15e>
  401f64:	4620      	mov	r0, r4
  401f66:	4b2f      	ldr	r3, [pc, #188]	; (402024 <xQueueGenericReceive+0x1b8>)
  401f68:	4798      	blx	r3
  401f6a:	4b2f      	ldr	r3, [pc, #188]	; (402028 <xQueueGenericReceive+0x1bc>)
  401f6c:	4798      	blx	r3
  401f6e:	4b2b      	ldr	r3, [pc, #172]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f70:	4798      	blx	r3
  401f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401f74:	2b00      	cmp	r3, #0
  401f76:	d1b3      	bne.n	401ee0 <xQueueGenericReceive+0x74>
  401f78:	9b01      	ldr	r3, [sp, #4]
  401f7a:	2b00      	cmp	r3, #0
  401f7c:	d0e6      	beq.n	401f4c <xQueueGenericReceive+0xe0>
  401f7e:	b91d      	cbnz	r5, 401f88 <xQueueGenericReceive+0x11c>
  401f80:	a802      	add	r0, sp, #8
  401f82:	4b2a      	ldr	r3, [pc, #168]	; (40202c <xQueueGenericReceive+0x1c0>)
  401f84:	4798      	blx	r3
  401f86:	2501      	movs	r5, #1
  401f88:	4b23      	ldr	r3, [pc, #140]	; (402018 <xQueueGenericReceive+0x1ac>)
  401f8a:	4798      	blx	r3
  401f8c:	4b28      	ldr	r3, [pc, #160]	; (402030 <xQueueGenericReceive+0x1c4>)
  401f8e:	4798      	blx	r3
  401f90:	4b22      	ldr	r3, [pc, #136]	; (40201c <xQueueGenericReceive+0x1b0>)
  401f92:	4798      	blx	r3
  401f94:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401f96:	f1b3 3fff 	cmp.w	r3, #4294967295
  401f9a:	d101      	bne.n	401fa0 <xQueueGenericReceive+0x134>
  401f9c:	2300      	movs	r3, #0
  401f9e:	6463      	str	r3, [r4, #68]	; 0x44
  401fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
  401fa6:	d101      	bne.n	401fac <xQueueGenericReceive+0x140>
  401fa8:	2300      	movs	r3, #0
  401faa:	64a3      	str	r3, [r4, #72]	; 0x48
  401fac:	4b1a      	ldr	r3, [pc, #104]	; (402018 <xQueueGenericReceive+0x1ac>)
  401fae:	4798      	blx	r3
  401fb0:	a901      	add	r1, sp, #4
  401fb2:	a802      	add	r0, sp, #8
  401fb4:	4b1f      	ldr	r3, [pc, #124]	; (402034 <xQueueGenericReceive+0x1c8>)
  401fb6:	4798      	blx	r3
  401fb8:	b9e0      	cbnz	r0, 401ff4 <xQueueGenericReceive+0x188>
  401fba:	4620      	mov	r0, r4
  401fbc:	4b1e      	ldr	r3, [pc, #120]	; (402038 <xQueueGenericReceive+0x1cc>)
  401fbe:	4798      	blx	r3
  401fc0:	2800      	cmp	r0, #0
  401fc2:	d0cf      	beq.n	401f64 <xQueueGenericReceive+0xf8>
  401fc4:	6823      	ldr	r3, [r4, #0]
  401fc6:	2b00      	cmp	r3, #0
  401fc8:	d0c4      	beq.n	401f54 <xQueueGenericReceive+0xe8>
  401fca:	9901      	ldr	r1, [sp, #4]
  401fcc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401fd0:	4b1a      	ldr	r3, [pc, #104]	; (40203c <xQueueGenericReceive+0x1d0>)
  401fd2:	4798      	blx	r3
  401fd4:	4620      	mov	r0, r4
  401fd6:	4b13      	ldr	r3, [pc, #76]	; (402024 <xQueueGenericReceive+0x1b8>)
  401fd8:	4798      	blx	r3
  401fda:	4b13      	ldr	r3, [pc, #76]	; (402028 <xQueueGenericReceive+0x1bc>)
  401fdc:	4798      	blx	r3
  401fde:	2800      	cmp	r0, #0
  401fe0:	d1c5      	bne.n	401f6e <xQueueGenericReceive+0x102>
  401fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401fe6:	4b0b      	ldr	r3, [pc, #44]	; (402014 <xQueueGenericReceive+0x1a8>)
  401fe8:	601a      	str	r2, [r3, #0]
  401fea:	f3bf 8f4f 	dsb	sy
  401fee:	f3bf 8f6f 	isb	sy
  401ff2:	e7bc      	b.n	401f6e <xQueueGenericReceive+0x102>
  401ff4:	4620      	mov	r0, r4
  401ff6:	4b0b      	ldr	r3, [pc, #44]	; (402024 <xQueueGenericReceive+0x1b8>)
  401ff8:	4798      	blx	r3
  401ffa:	4b0b      	ldr	r3, [pc, #44]	; (402028 <xQueueGenericReceive+0x1bc>)
  401ffc:	4798      	blx	r3
  401ffe:	2000      	movs	r0, #0
  402000:	e78f      	b.n	401f22 <xQueueGenericReceive+0xb6>
  402002:	bf00      	nop
  402004:	00402b2d 	.word	0x00402b2d
  402008:	004019a9 	.word	0x004019a9
  40200c:	00402cbd 	.word	0x00402cbd
  402010:	004029c5 	.word	0x004029c5
  402014:	e000ed04 	.word	0xe000ed04
  402018:	004015b9 	.word	0x004015b9
  40201c:	0040156d 	.word	0x0040156d
  402020:	00402b4d 	.word	0x00402b4d
  402024:	004019d1 	.word	0x004019d1
  402028:	004025a5 	.word	0x004025a5
  40202c:	00402a5d 	.word	0x00402a5d
  402030:	00402445 	.word	0x00402445
  402034:	00402a8d 	.word	0x00402a8d
  402038:	00401875 	.word	0x00401875
  40203c:	004028c1 	.word	0x004028c1

00402040 <vQueueAddToRegistry>:
  402040:	2300      	movs	r3, #0
  402042:	2b07      	cmp	r3, #7
  402044:	d80c      	bhi.n	402060 <vQueueAddToRegistry+0x20>
  402046:	4a07      	ldr	r2, [pc, #28]	; (402064 <vQueueAddToRegistry+0x24>)
  402048:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40204c:	b10a      	cbz	r2, 402052 <vQueueAddToRegistry+0x12>
  40204e:	3301      	adds	r3, #1
  402050:	e7f7      	b.n	402042 <vQueueAddToRegistry+0x2>
  402052:	4a04      	ldr	r2, [pc, #16]	; (402064 <vQueueAddToRegistry+0x24>)
  402054:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  402058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  40205c:	6058      	str	r0, [r3, #4]
  40205e:	4770      	bx	lr
  402060:	4770      	bx	lr
  402062:	bf00      	nop
  402064:	2043a15c 	.word	0x2043a15c

00402068 <vQueueWaitForMessageRestricted>:
  402068:	b570      	push	{r4, r5, r6, lr}
  40206a:	4604      	mov	r4, r0
  40206c:	460d      	mov	r5, r1
  40206e:	4616      	mov	r6, r2
  402070:	4b0f      	ldr	r3, [pc, #60]	; (4020b0 <vQueueWaitForMessageRestricted+0x48>)
  402072:	4798      	blx	r3
  402074:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402076:	f1b3 3fff 	cmp.w	r3, #4294967295
  40207a:	d00b      	beq.n	402094 <vQueueWaitForMessageRestricted+0x2c>
  40207c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40207e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402082:	d00a      	beq.n	40209a <vQueueWaitForMessageRestricted+0x32>
  402084:	4b0b      	ldr	r3, [pc, #44]	; (4020b4 <vQueueWaitForMessageRestricted+0x4c>)
  402086:	4798      	blx	r3
  402088:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40208a:	b14b      	cbz	r3, 4020a0 <vQueueWaitForMessageRestricted+0x38>
  40208c:	4620      	mov	r0, r4
  40208e:	4b0a      	ldr	r3, [pc, #40]	; (4020b8 <vQueueWaitForMessageRestricted+0x50>)
  402090:	4798      	blx	r3
  402092:	bd70      	pop	{r4, r5, r6, pc}
  402094:	2300      	movs	r3, #0
  402096:	6463      	str	r3, [r4, #68]	; 0x44
  402098:	e7f0      	b.n	40207c <vQueueWaitForMessageRestricted+0x14>
  40209a:	2300      	movs	r3, #0
  40209c:	64a3      	str	r3, [r4, #72]	; 0x48
  40209e:	e7f1      	b.n	402084 <vQueueWaitForMessageRestricted+0x1c>
  4020a0:	4632      	mov	r2, r6
  4020a2:	4629      	mov	r1, r5
  4020a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4020a8:	4b04      	ldr	r3, [pc, #16]	; (4020bc <vQueueWaitForMessageRestricted+0x54>)
  4020aa:	4798      	blx	r3
  4020ac:	e7ee      	b.n	40208c <vQueueWaitForMessageRestricted+0x24>
  4020ae:	bf00      	nop
  4020b0:	0040156d 	.word	0x0040156d
  4020b4:	004015b9 	.word	0x004015b9
  4020b8:	004019d1 	.word	0x004019d1
  4020bc:	00402945 	.word	0x00402945

004020c0 <prvResetNextTaskUnblockTime>:
  4020c0:	4b0a      	ldr	r3, [pc, #40]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020c2:	681b      	ldr	r3, [r3, #0]
  4020c4:	681b      	ldr	r3, [r3, #0]
  4020c6:	b94b      	cbnz	r3, 4020dc <prvResetNextTaskUnblockTime+0x1c>
  4020c8:	2301      	movs	r3, #1
  4020ca:	b94b      	cbnz	r3, 4020e0 <prvResetNextTaskUnblockTime+0x20>
  4020cc:	4b07      	ldr	r3, [pc, #28]	; (4020ec <prvResetNextTaskUnblockTime+0x2c>)
  4020ce:	681b      	ldr	r3, [r3, #0]
  4020d0:	68db      	ldr	r3, [r3, #12]
  4020d2:	68db      	ldr	r3, [r3, #12]
  4020d4:	685a      	ldr	r2, [r3, #4]
  4020d6:	4b06      	ldr	r3, [pc, #24]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020d8:	601a      	str	r2, [r3, #0]
  4020da:	4770      	bx	lr
  4020dc:	2300      	movs	r3, #0
  4020de:	e7f4      	b.n	4020ca <prvResetNextTaskUnblockTime+0xa>
  4020e0:	f04f 32ff 	mov.w	r2, #4294967295
  4020e4:	4b02      	ldr	r3, [pc, #8]	; (4020f0 <prvResetNextTaskUnblockTime+0x30>)
  4020e6:	601a      	str	r2, [r3, #0]
  4020e8:	4770      	bx	lr
  4020ea:	bf00      	nop
  4020ec:	2040c258 	.word	0x2040c258
  4020f0:	2040c304 	.word	0x2040c304

004020f4 <prvDeleteTCB>:
  4020f4:	b538      	push	{r3, r4, r5, lr}
  4020f6:	4605      	mov	r5, r0
  4020f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
  4020fa:	4c02      	ldr	r4, [pc, #8]	; (402104 <prvDeleteTCB+0x10>)
  4020fc:	47a0      	blx	r4
  4020fe:	4628      	mov	r0, r5
  402100:	47a0      	blx	r4
  402102:	bd38      	pop	{r3, r4, r5, pc}
  402104:	00401831 	.word	0x00401831

00402108 <prvAllocateTCBAndStack>:
  402108:	b570      	push	{r4, r5, r6, lr}
  40210a:	4606      	mov	r6, r0
  40210c:	460c      	mov	r4, r1
  40210e:	b919      	cbnz	r1, 402118 <prvAllocateTCBAndStack+0x10>
  402110:	0080      	lsls	r0, r0, #2
  402112:	4b0c      	ldr	r3, [pc, #48]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  402114:	4798      	blx	r3
  402116:	4604      	mov	r4, r0
  402118:	b18c      	cbz	r4, 40213e <prvAllocateTCBAndStack+0x36>
  40211a:	2058      	movs	r0, #88	; 0x58
  40211c:	4b09      	ldr	r3, [pc, #36]	; (402144 <prvAllocateTCBAndStack+0x3c>)
  40211e:	4798      	blx	r3
  402120:	4605      	mov	r5, r0
  402122:	b140      	cbz	r0, 402136 <prvAllocateTCBAndStack+0x2e>
  402124:	6304      	str	r4, [r0, #48]	; 0x30
  402126:	b125      	cbz	r5, 402132 <prvAllocateTCBAndStack+0x2a>
  402128:	00b2      	lsls	r2, r6, #2
  40212a:	21a5      	movs	r1, #165	; 0xa5
  40212c:	6b28      	ldr	r0, [r5, #48]	; 0x30
  40212e:	4b06      	ldr	r3, [pc, #24]	; (402148 <prvAllocateTCBAndStack+0x40>)
  402130:	4798      	blx	r3
  402132:	4628      	mov	r0, r5
  402134:	bd70      	pop	{r4, r5, r6, pc}
  402136:	4620      	mov	r0, r4
  402138:	4b04      	ldr	r3, [pc, #16]	; (40214c <prvAllocateTCBAndStack+0x44>)
  40213a:	4798      	blx	r3
  40213c:	e7f3      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
  40213e:	2500      	movs	r5, #0
  402140:	e7f1      	b.n	402126 <prvAllocateTCBAndStack+0x1e>
  402142:	bf00      	nop
  402144:	004017bd 	.word	0x004017bd
  402148:	0042252d 	.word	0x0042252d
  40214c:	00401831 	.word	0x00401831

00402150 <prvInitialiseTCBVariables>:
  402150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402152:	4604      	mov	r4, r0
  402154:	4615      	mov	r5, r2
  402156:	2300      	movs	r3, #0
  402158:	2b09      	cmp	r3, #9
  40215a:	d918      	bls.n	40218e <prvInitialiseTCBVariables+0x3e>
  40215c:	2300      	movs	r3, #0
  40215e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  402162:	2d04      	cmp	r5, #4
  402164:	d900      	bls.n	402168 <prvInitialiseTCBVariables+0x18>
  402166:	2504      	movs	r5, #4
  402168:	62e5      	str	r5, [r4, #44]	; 0x2c
  40216a:	64a5      	str	r5, [r4, #72]	; 0x48
  40216c:	2600      	movs	r6, #0
  40216e:	64e6      	str	r6, [r4, #76]	; 0x4c
  402170:	1d20      	adds	r0, r4, #4
  402172:	4f0b      	ldr	r7, [pc, #44]	; (4021a0 <prvInitialiseTCBVariables+0x50>)
  402174:	47b8      	blx	r7
  402176:	f104 0018 	add.w	r0, r4, #24
  40217a:	47b8      	blx	r7
  40217c:	6124      	str	r4, [r4, #16]
  40217e:	f1c5 0505 	rsb	r5, r5, #5
  402182:	61a5      	str	r5, [r4, #24]
  402184:	6264      	str	r4, [r4, #36]	; 0x24
  402186:	6526      	str	r6, [r4, #80]	; 0x50
  402188:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
  40218c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40218e:	5cc8      	ldrb	r0, [r1, r3]
  402190:	18e2      	adds	r2, r4, r3
  402192:	f882 0034 	strb.w	r0, [r2, #52]	; 0x34
  402196:	5cca      	ldrb	r2, [r1, r3]
  402198:	2a00      	cmp	r2, #0
  40219a:	d0df      	beq.n	40215c <prvInitialiseTCBVariables+0xc>
  40219c:	3301      	adds	r3, #1
  40219e:	e7db      	b.n	402158 <prvInitialiseTCBVariables+0x8>
  4021a0:	00401437 	.word	0x00401437

004021a4 <prvInitialiseTaskLists>:
  4021a4:	b570      	push	{r4, r5, r6, lr}
  4021a6:	2400      	movs	r4, #0
  4021a8:	2c04      	cmp	r4, #4
  4021aa:	d911      	bls.n	4021d0 <prvInitialiseTaskLists+0x2c>
  4021ac:	4e0c      	ldr	r6, [pc, #48]	; (4021e0 <prvInitialiseTaskLists+0x3c>)
  4021ae:	4630      	mov	r0, r6
  4021b0:	4c0c      	ldr	r4, [pc, #48]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021b2:	47a0      	blx	r4
  4021b4:	4d0c      	ldr	r5, [pc, #48]	; (4021e8 <prvInitialiseTaskLists+0x44>)
  4021b6:	4628      	mov	r0, r5
  4021b8:	47a0      	blx	r4
  4021ba:	480c      	ldr	r0, [pc, #48]	; (4021ec <prvInitialiseTaskLists+0x48>)
  4021bc:	47a0      	blx	r4
  4021be:	480c      	ldr	r0, [pc, #48]	; (4021f0 <prvInitialiseTaskLists+0x4c>)
  4021c0:	47a0      	blx	r4
  4021c2:	480c      	ldr	r0, [pc, #48]	; (4021f4 <prvInitialiseTaskLists+0x50>)
  4021c4:	47a0      	blx	r4
  4021c6:	4b0c      	ldr	r3, [pc, #48]	; (4021f8 <prvInitialiseTaskLists+0x54>)
  4021c8:	601e      	str	r6, [r3, #0]
  4021ca:	4b0c      	ldr	r3, [pc, #48]	; (4021fc <prvInitialiseTaskLists+0x58>)
  4021cc:	601d      	str	r5, [r3, #0]
  4021ce:	bd70      	pop	{r4, r5, r6, pc}
  4021d0:	2014      	movs	r0, #20
  4021d2:	4b0b      	ldr	r3, [pc, #44]	; (402200 <prvInitialiseTaskLists+0x5c>)
  4021d4:	fb00 3004 	mla	r0, r0, r4, r3
  4021d8:	4b02      	ldr	r3, [pc, #8]	; (4021e4 <prvInitialiseTaskLists+0x40>)
  4021da:	4798      	blx	r3
  4021dc:	3401      	adds	r4, #1
  4021de:	e7e3      	b.n	4021a8 <prvInitialiseTaskLists+0x4>
  4021e0:	2040c2dc 	.word	0x2040c2dc
  4021e4:	00401421 	.word	0x00401421
  4021e8:	2040c2f0 	.word	0x2040c2f0
  4021ec:	2040c30c 	.word	0x2040c30c
  4021f0:	2040c338 	.word	0x2040c338
  4021f4:	2040c324 	.word	0x2040c324
  4021f8:	2040c258 	.word	0x2040c258
  4021fc:	2040c25c 	.word	0x2040c25c
  402200:	2040c260 	.word	0x2040c260

00402204 <prvAddCurrentTaskToDelayedList>:
  402204:	b510      	push	{r4, lr}
  402206:	4b0f      	ldr	r3, [pc, #60]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402208:	681b      	ldr	r3, [r3, #0]
  40220a:	6058      	str	r0, [r3, #4]
  40220c:	4b0e      	ldr	r3, [pc, #56]	; (402248 <prvAddCurrentTaskToDelayedList+0x44>)
  40220e:	681b      	ldr	r3, [r3, #0]
  402210:	4298      	cmp	r0, r3
  402212:	d30e      	bcc.n	402232 <prvAddCurrentTaskToDelayedList+0x2e>
  402214:	4604      	mov	r4, r0
  402216:	4b0d      	ldr	r3, [pc, #52]	; (40224c <prvAddCurrentTaskToDelayedList+0x48>)
  402218:	6818      	ldr	r0, [r3, #0]
  40221a:	4b0a      	ldr	r3, [pc, #40]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  40221c:	6819      	ldr	r1, [r3, #0]
  40221e:	3104      	adds	r1, #4
  402220:	4b0b      	ldr	r3, [pc, #44]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  402222:	4798      	blx	r3
  402224:	4b0b      	ldr	r3, [pc, #44]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  402226:	681b      	ldr	r3, [r3, #0]
  402228:	429c      	cmp	r4, r3
  40222a:	d201      	bcs.n	402230 <prvAddCurrentTaskToDelayedList+0x2c>
  40222c:	4b09      	ldr	r3, [pc, #36]	; (402254 <prvAddCurrentTaskToDelayedList+0x50>)
  40222e:	601c      	str	r4, [r3, #0]
  402230:	bd10      	pop	{r4, pc}
  402232:	4b09      	ldr	r3, [pc, #36]	; (402258 <prvAddCurrentTaskToDelayedList+0x54>)
  402234:	6818      	ldr	r0, [r3, #0]
  402236:	4b03      	ldr	r3, [pc, #12]	; (402244 <prvAddCurrentTaskToDelayedList+0x40>)
  402238:	6819      	ldr	r1, [r3, #0]
  40223a:	3104      	adds	r1, #4
  40223c:	4b04      	ldr	r3, [pc, #16]	; (402250 <prvAddCurrentTaskToDelayedList+0x4c>)
  40223e:	4798      	blx	r3
  402240:	bd10      	pop	{r4, pc}
  402242:	bf00      	nop
  402244:	2040c254 	.word	0x2040c254
  402248:	2040c34c 	.word	0x2040c34c
  40224c:	2040c258 	.word	0x2040c258
  402250:	00401455 	.word	0x00401455
  402254:	2040c304 	.word	0x2040c304
  402258:	2040c25c 	.word	0x2040c25c

0040225c <xTaskGenericCreate>:
  40225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402260:	b083      	sub	sp, #12
  402262:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  402264:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  402268:	b168      	cbz	r0, 402286 <xTaskGenericCreate+0x2a>
  40226a:	4680      	mov	r8, r0
  40226c:	2f04      	cmp	r7, #4
  40226e:	d915      	bls.n	40229c <xTaskGenericCreate+0x40>
  402270:	f04f 0380 	mov.w	r3, #128	; 0x80
  402274:	b672      	cpsid	i
  402276:	f383 8811 	msr	BASEPRI, r3
  40227a:	f3bf 8f6f 	isb	sy
  40227e:	f3bf 8f4f 	dsb	sy
  402282:	b662      	cpsie	i
  402284:	e7fe      	b.n	402284 <xTaskGenericCreate+0x28>
  402286:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228a:	b672      	cpsid	i
  40228c:	f383 8811 	msr	BASEPRI, r3
  402290:	f3bf 8f6f 	isb	sy
  402294:	f3bf 8f4f 	dsb	sy
  402298:	b662      	cpsie	i
  40229a:	e7fe      	b.n	40229a <xTaskGenericCreate+0x3e>
  40229c:	4699      	mov	r9, r3
  40229e:	4616      	mov	r6, r2
  4022a0:	468a      	mov	sl, r1
  4022a2:	990e      	ldr	r1, [sp, #56]	; 0x38
  4022a4:	4610      	mov	r0, r2
  4022a6:	4b35      	ldr	r3, [pc, #212]	; (40237c <xTaskGenericCreate+0x120>)
  4022a8:	4798      	blx	r3
  4022aa:	4604      	mov	r4, r0
  4022ac:	2800      	cmp	r0, #0
  4022ae:	d062      	beq.n	402376 <xTaskGenericCreate+0x11a>
  4022b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4022b2:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
  4022b6:	4435      	add	r5, r6
  4022b8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
  4022bc:	f023 0507 	bic.w	r5, r3, #7
  4022c0:	9600      	str	r6, [sp, #0]
  4022c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4022c4:	463a      	mov	r2, r7
  4022c6:	4651      	mov	r1, sl
  4022c8:	4e2d      	ldr	r6, [pc, #180]	; (402380 <xTaskGenericCreate+0x124>)
  4022ca:	47b0      	blx	r6
  4022cc:	464a      	mov	r2, r9
  4022ce:	4641      	mov	r1, r8
  4022d0:	4628      	mov	r0, r5
  4022d2:	4b2c      	ldr	r3, [pc, #176]	; (402384 <xTaskGenericCreate+0x128>)
  4022d4:	4798      	blx	r3
  4022d6:	6020      	str	r0, [r4, #0]
  4022d8:	f1bb 0f00 	cmp.w	fp, #0
  4022dc:	d001      	beq.n	4022e2 <xTaskGenericCreate+0x86>
  4022de:	f8cb 4000 	str.w	r4, [fp]
  4022e2:	4b29      	ldr	r3, [pc, #164]	; (402388 <xTaskGenericCreate+0x12c>)
  4022e4:	4798      	blx	r3
  4022e6:	4a29      	ldr	r2, [pc, #164]	; (40238c <xTaskGenericCreate+0x130>)
  4022e8:	6813      	ldr	r3, [r2, #0]
  4022ea:	3301      	adds	r3, #1
  4022ec:	6013      	str	r3, [r2, #0]
  4022ee:	4b28      	ldr	r3, [pc, #160]	; (402390 <xTaskGenericCreate+0x134>)
  4022f0:	681b      	ldr	r3, [r3, #0]
  4022f2:	2b00      	cmp	r3, #0
  4022f4:	d133      	bne.n	40235e <xTaskGenericCreate+0x102>
  4022f6:	4b26      	ldr	r3, [pc, #152]	; (402390 <xTaskGenericCreate+0x134>)
  4022f8:	601c      	str	r4, [r3, #0]
  4022fa:	6813      	ldr	r3, [r2, #0]
  4022fc:	2b01      	cmp	r3, #1
  4022fe:	d101      	bne.n	402304 <xTaskGenericCreate+0xa8>
  402300:	4b24      	ldr	r3, [pc, #144]	; (402394 <xTaskGenericCreate+0x138>)
  402302:	4798      	blx	r3
  402304:	4a24      	ldr	r2, [pc, #144]	; (402398 <xTaskGenericCreate+0x13c>)
  402306:	6813      	ldr	r3, [r2, #0]
  402308:	3301      	adds	r3, #1
  40230a:	6013      	str	r3, [r2, #0]
  40230c:	6423      	str	r3, [r4, #64]	; 0x40
  40230e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402310:	2501      	movs	r5, #1
  402312:	fa05 f203 	lsl.w	r2, r5, r3
  402316:	4921      	ldr	r1, [pc, #132]	; (40239c <xTaskGenericCreate+0x140>)
  402318:	6808      	ldr	r0, [r1, #0]
  40231a:	4302      	orrs	r2, r0
  40231c:	600a      	str	r2, [r1, #0]
  40231e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402322:	009a      	lsls	r2, r3, #2
  402324:	1d21      	adds	r1, r4, #4
  402326:	481e      	ldr	r0, [pc, #120]	; (4023a0 <xTaskGenericCreate+0x144>)
  402328:	4410      	add	r0, r2
  40232a:	4b1e      	ldr	r3, [pc, #120]	; (4023a4 <xTaskGenericCreate+0x148>)
  40232c:	4798      	blx	r3
  40232e:	4b1e      	ldr	r3, [pc, #120]	; (4023a8 <xTaskGenericCreate+0x14c>)
  402330:	4798      	blx	r3
  402332:	4628      	mov	r0, r5
  402334:	2801      	cmp	r0, #1
  402336:	d10f      	bne.n	402358 <xTaskGenericCreate+0xfc>
  402338:	4b1c      	ldr	r3, [pc, #112]	; (4023ac <xTaskGenericCreate+0x150>)
  40233a:	681b      	ldr	r3, [r3, #0]
  40233c:	b163      	cbz	r3, 402358 <xTaskGenericCreate+0xfc>
  40233e:	4b14      	ldr	r3, [pc, #80]	; (402390 <xTaskGenericCreate+0x134>)
  402340:	681b      	ldr	r3, [r3, #0]
  402342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402344:	429f      	cmp	r7, r3
  402346:	d907      	bls.n	402358 <xTaskGenericCreate+0xfc>
  402348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40234c:	4b18      	ldr	r3, [pc, #96]	; (4023b0 <xTaskGenericCreate+0x154>)
  40234e:	601a      	str	r2, [r3, #0]
  402350:	f3bf 8f4f 	dsb	sy
  402354:	f3bf 8f6f 	isb	sy
  402358:	b003      	add	sp, #12
  40235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40235e:	4b13      	ldr	r3, [pc, #76]	; (4023ac <xTaskGenericCreate+0x150>)
  402360:	681b      	ldr	r3, [r3, #0]
  402362:	2b00      	cmp	r3, #0
  402364:	d1ce      	bne.n	402304 <xTaskGenericCreate+0xa8>
  402366:	4b0a      	ldr	r3, [pc, #40]	; (402390 <xTaskGenericCreate+0x134>)
  402368:	681b      	ldr	r3, [r3, #0]
  40236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40236c:	429f      	cmp	r7, r3
  40236e:	d3c9      	bcc.n	402304 <xTaskGenericCreate+0xa8>
  402370:	4b07      	ldr	r3, [pc, #28]	; (402390 <xTaskGenericCreate+0x134>)
  402372:	601c      	str	r4, [r3, #0]
  402374:	e7c6      	b.n	402304 <xTaskGenericCreate+0xa8>
  402376:	f04f 30ff 	mov.w	r0, #4294967295
  40237a:	e7db      	b.n	402334 <xTaskGenericCreate+0xd8>
  40237c:	00402109 	.word	0x00402109
  402380:	00402151 	.word	0x00402151
  402384:	00401521 	.word	0x00401521
  402388:	0040156d 	.word	0x0040156d
  40238c:	2040c2c4 	.word	0x2040c2c4
  402390:	2040c254 	.word	0x2040c254
  402394:	004021a5 	.word	0x004021a5
  402398:	2040c2d0 	.word	0x2040c2d0
  40239c:	2040c2d8 	.word	0x2040c2d8
  4023a0:	2040c260 	.word	0x2040c260
  4023a4:	0040143d 	.word	0x0040143d
  4023a8:	004015b9 	.word	0x004015b9
  4023ac:	2040c320 	.word	0x2040c320
  4023b0:	e000ed04 	.word	0xe000ed04

004023b4 <vTaskStartScheduler>:
  4023b4:	b510      	push	{r4, lr}
  4023b6:	b084      	sub	sp, #16
  4023b8:	2300      	movs	r3, #0
  4023ba:	9303      	str	r3, [sp, #12]
  4023bc:	9302      	str	r3, [sp, #8]
  4023be:	9301      	str	r3, [sp, #4]
  4023c0:	9300      	str	r3, [sp, #0]
  4023c2:	2282      	movs	r2, #130	; 0x82
  4023c4:	4917      	ldr	r1, [pc, #92]	; (402424 <vTaskStartScheduler+0x70>)
  4023c6:	4818      	ldr	r0, [pc, #96]	; (402428 <vTaskStartScheduler+0x74>)
  4023c8:	4c18      	ldr	r4, [pc, #96]	; (40242c <vTaskStartScheduler+0x78>)
  4023ca:	47a0      	blx	r4
  4023cc:	2801      	cmp	r0, #1
  4023ce:	d00d      	beq.n	4023ec <vTaskStartScheduler+0x38>
  4023d0:	2801      	cmp	r0, #1
  4023d2:	d00e      	beq.n	4023f2 <vTaskStartScheduler+0x3e>
  4023d4:	bb18      	cbnz	r0, 40241e <vTaskStartScheduler+0x6a>
  4023d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023da:	b672      	cpsid	i
  4023dc:	f383 8811 	msr	BASEPRI, r3
  4023e0:	f3bf 8f6f 	isb	sy
  4023e4:	f3bf 8f4f 	dsb	sy
  4023e8:	b662      	cpsie	i
  4023ea:	e7fe      	b.n	4023ea <vTaskStartScheduler+0x36>
  4023ec:	4b10      	ldr	r3, [pc, #64]	; (402430 <vTaskStartScheduler+0x7c>)
  4023ee:	4798      	blx	r3
  4023f0:	e7ee      	b.n	4023d0 <vTaskStartScheduler+0x1c>
  4023f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023f6:	b672      	cpsid	i
  4023f8:	f383 8811 	msr	BASEPRI, r3
  4023fc:	f3bf 8f6f 	isb	sy
  402400:	f3bf 8f4f 	dsb	sy
  402404:	b662      	cpsie	i
  402406:	f04f 32ff 	mov.w	r2, #4294967295
  40240a:	4b0a      	ldr	r3, [pc, #40]	; (402434 <vTaskStartScheduler+0x80>)
  40240c:	601a      	str	r2, [r3, #0]
  40240e:	2201      	movs	r2, #1
  402410:	4b09      	ldr	r3, [pc, #36]	; (402438 <vTaskStartScheduler+0x84>)
  402412:	601a      	str	r2, [r3, #0]
  402414:	2200      	movs	r2, #0
  402416:	4b09      	ldr	r3, [pc, #36]	; (40243c <vTaskStartScheduler+0x88>)
  402418:	601a      	str	r2, [r3, #0]
  40241a:	4b09      	ldr	r3, [pc, #36]	; (402440 <vTaskStartScheduler+0x8c>)
  40241c:	4798      	blx	r3
  40241e:	b004      	add	sp, #16
  402420:	bd10      	pop	{r4, pc}
  402422:	bf00      	nop
  402424:	00426098 	.word	0x00426098
  402428:	004027c1 	.word	0x004027c1
  40242c:	0040225d 	.word	0x0040225d
  402430:	00402dd1 	.word	0x00402dd1
  402434:	2040c304 	.word	0x2040c304
  402438:	2040c320 	.word	0x2040c320
  40243c:	2040c34c 	.word	0x2040c34c
  402440:	004016a1 	.word	0x004016a1

00402444 <vTaskSuspendAll>:
  402444:	4a02      	ldr	r2, [pc, #8]	; (402450 <vTaskSuspendAll+0xc>)
  402446:	6813      	ldr	r3, [r2, #0]
  402448:	3301      	adds	r3, #1
  40244a:	6013      	str	r3, [r2, #0]
  40244c:	4770      	bx	lr
  40244e:	bf00      	nop
  402450:	2040c2cc 	.word	0x2040c2cc

00402454 <xTaskGetTickCount>:
  402454:	4b01      	ldr	r3, [pc, #4]	; (40245c <xTaskGetTickCount+0x8>)
  402456:	6818      	ldr	r0, [r3, #0]
  402458:	4770      	bx	lr
  40245a:	bf00      	nop
  40245c:	2040c34c 	.word	0x2040c34c

00402460 <xTaskIncrementTick>:
  402460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402462:	4b41      	ldr	r3, [pc, #260]	; (402568 <xTaskIncrementTick+0x108>)
  402464:	681b      	ldr	r3, [r3, #0]
  402466:	2b00      	cmp	r3, #0
  402468:	d175      	bne.n	402556 <xTaskIncrementTick+0xf6>
  40246a:	4b40      	ldr	r3, [pc, #256]	; (40256c <xTaskIncrementTick+0x10c>)
  40246c:	681a      	ldr	r2, [r3, #0]
  40246e:	3201      	adds	r2, #1
  402470:	601a      	str	r2, [r3, #0]
  402472:	681e      	ldr	r6, [r3, #0]
  402474:	b9d6      	cbnz	r6, 4024ac <xTaskIncrementTick+0x4c>
  402476:	4b3e      	ldr	r3, [pc, #248]	; (402570 <xTaskIncrementTick+0x110>)
  402478:	681b      	ldr	r3, [r3, #0]
  40247a:	681b      	ldr	r3, [r3, #0]
  40247c:	b153      	cbz	r3, 402494 <xTaskIncrementTick+0x34>
  40247e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402482:	b672      	cpsid	i
  402484:	f383 8811 	msr	BASEPRI, r3
  402488:	f3bf 8f6f 	isb	sy
  40248c:	f3bf 8f4f 	dsb	sy
  402490:	b662      	cpsie	i
  402492:	e7fe      	b.n	402492 <xTaskIncrementTick+0x32>
  402494:	4a36      	ldr	r2, [pc, #216]	; (402570 <xTaskIncrementTick+0x110>)
  402496:	6811      	ldr	r1, [r2, #0]
  402498:	4b36      	ldr	r3, [pc, #216]	; (402574 <xTaskIncrementTick+0x114>)
  40249a:	6818      	ldr	r0, [r3, #0]
  40249c:	6010      	str	r0, [r2, #0]
  40249e:	6019      	str	r1, [r3, #0]
  4024a0:	4a35      	ldr	r2, [pc, #212]	; (402578 <xTaskIncrementTick+0x118>)
  4024a2:	6813      	ldr	r3, [r2, #0]
  4024a4:	3301      	adds	r3, #1
  4024a6:	6013      	str	r3, [r2, #0]
  4024a8:	4b34      	ldr	r3, [pc, #208]	; (40257c <xTaskIncrementTick+0x11c>)
  4024aa:	4798      	blx	r3
  4024ac:	4b34      	ldr	r3, [pc, #208]	; (402580 <xTaskIncrementTick+0x120>)
  4024ae:	681b      	ldr	r3, [r3, #0]
  4024b0:	429e      	cmp	r6, r3
  4024b2:	d244      	bcs.n	40253e <xTaskIncrementTick+0xde>
  4024b4:	2400      	movs	r4, #0
  4024b6:	4b33      	ldr	r3, [pc, #204]	; (402584 <xTaskIncrementTick+0x124>)
  4024b8:	681b      	ldr	r3, [r3, #0]
  4024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4024c0:	009a      	lsls	r2, r3, #2
  4024c2:	4b31      	ldr	r3, [pc, #196]	; (402588 <xTaskIncrementTick+0x128>)
  4024c4:	589b      	ldr	r3, [r3, r2]
  4024c6:	2b01      	cmp	r3, #1
  4024c8:	d900      	bls.n	4024cc <xTaskIncrementTick+0x6c>
  4024ca:	2401      	movs	r4, #1
  4024cc:	4b2f      	ldr	r3, [pc, #188]	; (40258c <xTaskIncrementTick+0x12c>)
  4024ce:	681b      	ldr	r3, [r3, #0]
  4024d0:	b90b      	cbnz	r3, 4024d6 <xTaskIncrementTick+0x76>
  4024d2:	4b2f      	ldr	r3, [pc, #188]	; (402590 <xTaskIncrementTick+0x130>)
  4024d4:	4798      	blx	r3
  4024d6:	4b2f      	ldr	r3, [pc, #188]	; (402594 <xTaskIncrementTick+0x134>)
  4024d8:	681b      	ldr	r3, [r3, #0]
  4024da:	b103      	cbz	r3, 4024de <xTaskIncrementTick+0x7e>
  4024dc:	2401      	movs	r4, #1
  4024de:	4620      	mov	r0, r4
  4024e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4024e2:	2401      	movs	r4, #1
  4024e4:	4b22      	ldr	r3, [pc, #136]	; (402570 <xTaskIncrementTick+0x110>)
  4024e6:	681b      	ldr	r3, [r3, #0]
  4024e8:	681b      	ldr	r3, [r3, #0]
  4024ea:	b353      	cbz	r3, 402542 <xTaskIncrementTick+0xe2>
  4024ec:	2300      	movs	r3, #0
  4024ee:	bb53      	cbnz	r3, 402546 <xTaskIncrementTick+0xe6>
  4024f0:	4b1f      	ldr	r3, [pc, #124]	; (402570 <xTaskIncrementTick+0x110>)
  4024f2:	681b      	ldr	r3, [r3, #0]
  4024f4:	68db      	ldr	r3, [r3, #12]
  4024f6:	68dd      	ldr	r5, [r3, #12]
  4024f8:	686b      	ldr	r3, [r5, #4]
  4024fa:	429e      	cmp	r6, r3
  4024fc:	d328      	bcc.n	402550 <xTaskIncrementTick+0xf0>
  4024fe:	1d2f      	adds	r7, r5, #4
  402500:	4638      	mov	r0, r7
  402502:	4b25      	ldr	r3, [pc, #148]	; (402598 <xTaskIncrementTick+0x138>)
  402504:	4798      	blx	r3
  402506:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402508:	b11b      	cbz	r3, 402512 <xTaskIncrementTick+0xb2>
  40250a:	f105 0018 	add.w	r0, r5, #24
  40250e:	4b22      	ldr	r3, [pc, #136]	; (402598 <xTaskIncrementTick+0x138>)
  402510:	4798      	blx	r3
  402512:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  402514:	2201      	movs	r2, #1
  402516:	409a      	lsls	r2, r3
  402518:	4920      	ldr	r1, [pc, #128]	; (40259c <xTaskIncrementTick+0x13c>)
  40251a:	6808      	ldr	r0, [r1, #0]
  40251c:	4302      	orrs	r2, r0
  40251e:	600a      	str	r2, [r1, #0]
  402520:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402524:	009a      	lsls	r2, r3, #2
  402526:	4639      	mov	r1, r7
  402528:	4817      	ldr	r0, [pc, #92]	; (402588 <xTaskIncrementTick+0x128>)
  40252a:	4410      	add	r0, r2
  40252c:	4b1c      	ldr	r3, [pc, #112]	; (4025a0 <xTaskIncrementTick+0x140>)
  40252e:	4798      	blx	r3
  402530:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402532:	4b14      	ldr	r3, [pc, #80]	; (402584 <xTaskIncrementTick+0x124>)
  402534:	681b      	ldr	r3, [r3, #0]
  402536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402538:	429a      	cmp	r2, r3
  40253a:	d2d2      	bcs.n	4024e2 <xTaskIncrementTick+0x82>
  40253c:	e7d2      	b.n	4024e4 <xTaskIncrementTick+0x84>
  40253e:	2400      	movs	r4, #0
  402540:	e7d0      	b.n	4024e4 <xTaskIncrementTick+0x84>
  402542:	2301      	movs	r3, #1
  402544:	e7d3      	b.n	4024ee <xTaskIncrementTick+0x8e>
  402546:	f04f 32ff 	mov.w	r2, #4294967295
  40254a:	4b0d      	ldr	r3, [pc, #52]	; (402580 <xTaskIncrementTick+0x120>)
  40254c:	601a      	str	r2, [r3, #0]
  40254e:	e7b2      	b.n	4024b6 <xTaskIncrementTick+0x56>
  402550:	4a0b      	ldr	r2, [pc, #44]	; (402580 <xTaskIncrementTick+0x120>)
  402552:	6013      	str	r3, [r2, #0]
  402554:	e7af      	b.n	4024b6 <xTaskIncrementTick+0x56>
  402556:	4a0d      	ldr	r2, [pc, #52]	; (40258c <xTaskIncrementTick+0x12c>)
  402558:	6813      	ldr	r3, [r2, #0]
  40255a:	3301      	adds	r3, #1
  40255c:	6013      	str	r3, [r2, #0]
  40255e:	4b0c      	ldr	r3, [pc, #48]	; (402590 <xTaskIncrementTick+0x130>)
  402560:	4798      	blx	r3
  402562:	2400      	movs	r4, #0
  402564:	e7b7      	b.n	4024d6 <xTaskIncrementTick+0x76>
  402566:	bf00      	nop
  402568:	2040c2cc 	.word	0x2040c2cc
  40256c:	2040c34c 	.word	0x2040c34c
  402570:	2040c258 	.word	0x2040c258
  402574:	2040c25c 	.word	0x2040c25c
  402578:	2040c308 	.word	0x2040c308
  40257c:	004020c1 	.word	0x004020c1
  402580:	2040c304 	.word	0x2040c304
  402584:	2040c254 	.word	0x2040c254
  402588:	2040c260 	.word	0x2040c260
  40258c:	2040c2c8 	.word	0x2040c2c8
  402590:	00420e7d 	.word	0x00420e7d
  402594:	2040c350 	.word	0x2040c350
  402598:	00401489 	.word	0x00401489
  40259c:	2040c2d8 	.word	0x2040c2d8
  4025a0:	0040143d 	.word	0x0040143d

004025a4 <xTaskResumeAll>:
  4025a4:	4b35      	ldr	r3, [pc, #212]	; (40267c <xTaskResumeAll+0xd8>)
  4025a6:	681b      	ldr	r3, [r3, #0]
  4025a8:	b953      	cbnz	r3, 4025c0 <xTaskResumeAll+0x1c>
  4025aa:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ae:	b672      	cpsid	i
  4025b0:	f383 8811 	msr	BASEPRI, r3
  4025b4:	f3bf 8f6f 	isb	sy
  4025b8:	f3bf 8f4f 	dsb	sy
  4025bc:	b662      	cpsie	i
  4025be:	e7fe      	b.n	4025be <xTaskResumeAll+0x1a>
  4025c0:	b570      	push	{r4, r5, r6, lr}
  4025c2:	4b2f      	ldr	r3, [pc, #188]	; (402680 <xTaskResumeAll+0xdc>)
  4025c4:	4798      	blx	r3
  4025c6:	4b2d      	ldr	r3, [pc, #180]	; (40267c <xTaskResumeAll+0xd8>)
  4025c8:	681a      	ldr	r2, [r3, #0]
  4025ca:	3a01      	subs	r2, #1
  4025cc:	601a      	str	r2, [r3, #0]
  4025ce:	681b      	ldr	r3, [r3, #0]
  4025d0:	2b00      	cmp	r3, #0
  4025d2:	d14f      	bne.n	402674 <xTaskResumeAll+0xd0>
  4025d4:	4b2b      	ldr	r3, [pc, #172]	; (402684 <xTaskResumeAll+0xe0>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	bb1b      	cbnz	r3, 402622 <xTaskResumeAll+0x7e>
  4025da:	2400      	movs	r4, #0
  4025dc:	4b2a      	ldr	r3, [pc, #168]	; (402688 <xTaskResumeAll+0xe4>)
  4025de:	4798      	blx	r3
  4025e0:	4620      	mov	r0, r4
  4025e2:	bd70      	pop	{r4, r5, r6, pc}
  4025e4:	4b29      	ldr	r3, [pc, #164]	; (40268c <xTaskResumeAll+0xe8>)
  4025e6:	68db      	ldr	r3, [r3, #12]
  4025e8:	68dc      	ldr	r4, [r3, #12]
  4025ea:	f104 0018 	add.w	r0, r4, #24
  4025ee:	4e28      	ldr	r6, [pc, #160]	; (402690 <xTaskResumeAll+0xec>)
  4025f0:	47b0      	blx	r6
  4025f2:	1d25      	adds	r5, r4, #4
  4025f4:	4628      	mov	r0, r5
  4025f6:	47b0      	blx	r6
  4025f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4025fa:	2201      	movs	r2, #1
  4025fc:	409a      	lsls	r2, r3
  4025fe:	4925      	ldr	r1, [pc, #148]	; (402694 <xTaskResumeAll+0xf0>)
  402600:	6808      	ldr	r0, [r1, #0]
  402602:	4302      	orrs	r2, r0
  402604:	600a      	str	r2, [r1, #0]
  402606:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40260a:	009a      	lsls	r2, r3, #2
  40260c:	4629      	mov	r1, r5
  40260e:	4822      	ldr	r0, [pc, #136]	; (402698 <xTaskResumeAll+0xf4>)
  402610:	4410      	add	r0, r2
  402612:	4b22      	ldr	r3, [pc, #136]	; (40269c <xTaskResumeAll+0xf8>)
  402614:	4798      	blx	r3
  402616:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402618:	4b21      	ldr	r3, [pc, #132]	; (4026a0 <xTaskResumeAll+0xfc>)
  40261a:	681b      	ldr	r3, [r3, #0]
  40261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40261e:	429a      	cmp	r2, r3
  402620:	d214      	bcs.n	40264c <xTaskResumeAll+0xa8>
  402622:	4b1a      	ldr	r3, [pc, #104]	; (40268c <xTaskResumeAll+0xe8>)
  402624:	681b      	ldr	r3, [r3, #0]
  402626:	2b00      	cmp	r3, #0
  402628:	d1dc      	bne.n	4025e4 <xTaskResumeAll+0x40>
  40262a:	4b1e      	ldr	r3, [pc, #120]	; (4026a4 <xTaskResumeAll+0x100>)
  40262c:	681b      	ldr	r3, [r3, #0]
  40262e:	b9ab      	cbnz	r3, 40265c <xTaskResumeAll+0xb8>
  402630:	4b1d      	ldr	r3, [pc, #116]	; (4026a8 <xTaskResumeAll+0x104>)
  402632:	681b      	ldr	r3, [r3, #0]
  402634:	2b01      	cmp	r3, #1
  402636:	d11f      	bne.n	402678 <xTaskResumeAll+0xd4>
  402638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40263c:	4b1b      	ldr	r3, [pc, #108]	; (4026ac <xTaskResumeAll+0x108>)
  40263e:	601a      	str	r2, [r3, #0]
  402640:	f3bf 8f4f 	dsb	sy
  402644:	f3bf 8f6f 	isb	sy
  402648:	2401      	movs	r4, #1
  40264a:	e7c7      	b.n	4025dc <xTaskResumeAll+0x38>
  40264c:	2201      	movs	r2, #1
  40264e:	4b16      	ldr	r3, [pc, #88]	; (4026a8 <xTaskResumeAll+0x104>)
  402650:	601a      	str	r2, [r3, #0]
  402652:	e7e6      	b.n	402622 <xTaskResumeAll+0x7e>
  402654:	4a13      	ldr	r2, [pc, #76]	; (4026a4 <xTaskResumeAll+0x100>)
  402656:	6813      	ldr	r3, [r2, #0]
  402658:	3b01      	subs	r3, #1
  40265a:	6013      	str	r3, [r2, #0]
  40265c:	4b11      	ldr	r3, [pc, #68]	; (4026a4 <xTaskResumeAll+0x100>)
  40265e:	681b      	ldr	r3, [r3, #0]
  402660:	2b00      	cmp	r3, #0
  402662:	d0e5      	beq.n	402630 <xTaskResumeAll+0x8c>
  402664:	4b12      	ldr	r3, [pc, #72]	; (4026b0 <xTaskResumeAll+0x10c>)
  402666:	4798      	blx	r3
  402668:	2800      	cmp	r0, #0
  40266a:	d0f3      	beq.n	402654 <xTaskResumeAll+0xb0>
  40266c:	2201      	movs	r2, #1
  40266e:	4b0e      	ldr	r3, [pc, #56]	; (4026a8 <xTaskResumeAll+0x104>)
  402670:	601a      	str	r2, [r3, #0]
  402672:	e7ef      	b.n	402654 <xTaskResumeAll+0xb0>
  402674:	2400      	movs	r4, #0
  402676:	e7b1      	b.n	4025dc <xTaskResumeAll+0x38>
  402678:	2400      	movs	r4, #0
  40267a:	e7af      	b.n	4025dc <xTaskResumeAll+0x38>
  40267c:	2040c2cc 	.word	0x2040c2cc
  402680:	0040156d 	.word	0x0040156d
  402684:	2040c2c4 	.word	0x2040c2c4
  402688:	004015b9 	.word	0x004015b9
  40268c:	2040c30c 	.word	0x2040c30c
  402690:	00401489 	.word	0x00401489
  402694:	2040c2d8 	.word	0x2040c2d8
  402698:	2040c260 	.word	0x2040c260
  40269c:	0040143d 	.word	0x0040143d
  4026a0:	2040c254 	.word	0x2040c254
  4026a4:	2040c2c8 	.word	0x2040c2c8
  4026a8:	2040c350 	.word	0x2040c350
  4026ac:	e000ed04 	.word	0xe000ed04
  4026b0:	00402461 	.word	0x00402461

004026b4 <vTaskDelay>:
  4026b4:	b510      	push	{r4, lr}
  4026b6:	2800      	cmp	r0, #0
  4026b8:	d02a      	beq.n	402710 <vTaskDelay+0x5c>
  4026ba:	4604      	mov	r4, r0
  4026bc:	4b1a      	ldr	r3, [pc, #104]	; (402728 <vTaskDelay+0x74>)
  4026be:	681b      	ldr	r3, [r3, #0]
  4026c0:	b153      	cbz	r3, 4026d8 <vTaskDelay+0x24>
  4026c2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026c6:	b672      	cpsid	i
  4026c8:	f383 8811 	msr	BASEPRI, r3
  4026cc:	f3bf 8f6f 	isb	sy
  4026d0:	f3bf 8f4f 	dsb	sy
  4026d4:	b662      	cpsie	i
  4026d6:	e7fe      	b.n	4026d6 <vTaskDelay+0x22>
  4026d8:	4b14      	ldr	r3, [pc, #80]	; (40272c <vTaskDelay+0x78>)
  4026da:	4798      	blx	r3
  4026dc:	4b14      	ldr	r3, [pc, #80]	; (402730 <vTaskDelay+0x7c>)
  4026de:	681b      	ldr	r3, [r3, #0]
  4026e0:	441c      	add	r4, r3
  4026e2:	4b14      	ldr	r3, [pc, #80]	; (402734 <vTaskDelay+0x80>)
  4026e4:	6818      	ldr	r0, [r3, #0]
  4026e6:	3004      	adds	r0, #4
  4026e8:	4b13      	ldr	r3, [pc, #76]	; (402738 <vTaskDelay+0x84>)
  4026ea:	4798      	blx	r3
  4026ec:	b950      	cbnz	r0, 402704 <vTaskDelay+0x50>
  4026ee:	4b11      	ldr	r3, [pc, #68]	; (402734 <vTaskDelay+0x80>)
  4026f0:	681b      	ldr	r3, [r3, #0]
  4026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4026f4:	2301      	movs	r3, #1
  4026f6:	fa03 f202 	lsl.w	r2, r3, r2
  4026fa:	4910      	ldr	r1, [pc, #64]	; (40273c <vTaskDelay+0x88>)
  4026fc:	680b      	ldr	r3, [r1, #0]
  4026fe:	ea23 0302 	bic.w	r3, r3, r2
  402702:	600b      	str	r3, [r1, #0]
  402704:	4620      	mov	r0, r4
  402706:	4b0e      	ldr	r3, [pc, #56]	; (402740 <vTaskDelay+0x8c>)
  402708:	4798      	blx	r3
  40270a:	4b0e      	ldr	r3, [pc, #56]	; (402744 <vTaskDelay+0x90>)
  40270c:	4798      	blx	r3
  40270e:	e000      	b.n	402712 <vTaskDelay+0x5e>
  402710:	2000      	movs	r0, #0
  402712:	b938      	cbnz	r0, 402724 <vTaskDelay+0x70>
  402714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402718:	4b0b      	ldr	r3, [pc, #44]	; (402748 <vTaskDelay+0x94>)
  40271a:	601a      	str	r2, [r3, #0]
  40271c:	f3bf 8f4f 	dsb	sy
  402720:	f3bf 8f6f 	isb	sy
  402724:	bd10      	pop	{r4, pc}
  402726:	bf00      	nop
  402728:	2040c2cc 	.word	0x2040c2cc
  40272c:	00402445 	.word	0x00402445
  402730:	2040c34c 	.word	0x2040c34c
  402734:	2040c254 	.word	0x2040c254
  402738:	00401489 	.word	0x00401489
  40273c:	2040c2d8 	.word	0x2040c2d8
  402740:	00402205 	.word	0x00402205
  402744:	004025a5 	.word	0x004025a5
  402748:	e000ed04 	.word	0xe000ed04

0040274c <prvCheckTasksWaitingTermination>:
  40274c:	4b13      	ldr	r3, [pc, #76]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  40274e:	681b      	ldr	r3, [r3, #0]
  402750:	b313      	cbz	r3, 402798 <prvCheckTasksWaitingTermination+0x4c>
  402752:	b510      	push	{r4, lr}
  402754:	4b12      	ldr	r3, [pc, #72]	; (4027a0 <prvCheckTasksWaitingTermination+0x54>)
  402756:	4798      	blx	r3
  402758:	4b12      	ldr	r3, [pc, #72]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  40275a:	681c      	ldr	r4, [r3, #0]
  40275c:	4b12      	ldr	r3, [pc, #72]	; (4027a8 <prvCheckTasksWaitingTermination+0x5c>)
  40275e:	4798      	blx	r3
  402760:	b924      	cbnz	r4, 40276c <prvCheckTasksWaitingTermination+0x20>
  402762:	4b0e      	ldr	r3, [pc, #56]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402764:	681b      	ldr	r3, [r3, #0]
  402766:	2b00      	cmp	r3, #0
  402768:	d1f4      	bne.n	402754 <prvCheckTasksWaitingTermination+0x8>
  40276a:	bd10      	pop	{r4, pc}
  40276c:	4b0f      	ldr	r3, [pc, #60]	; (4027ac <prvCheckTasksWaitingTermination+0x60>)
  40276e:	4798      	blx	r3
  402770:	4b0c      	ldr	r3, [pc, #48]	; (4027a4 <prvCheckTasksWaitingTermination+0x58>)
  402772:	68db      	ldr	r3, [r3, #12]
  402774:	68dc      	ldr	r4, [r3, #12]
  402776:	1d20      	adds	r0, r4, #4
  402778:	4b0d      	ldr	r3, [pc, #52]	; (4027b0 <prvCheckTasksWaitingTermination+0x64>)
  40277a:	4798      	blx	r3
  40277c:	4a0d      	ldr	r2, [pc, #52]	; (4027b4 <prvCheckTasksWaitingTermination+0x68>)
  40277e:	6813      	ldr	r3, [r2, #0]
  402780:	3b01      	subs	r3, #1
  402782:	6013      	str	r3, [r2, #0]
  402784:	4a05      	ldr	r2, [pc, #20]	; (40279c <prvCheckTasksWaitingTermination+0x50>)
  402786:	6813      	ldr	r3, [r2, #0]
  402788:	3b01      	subs	r3, #1
  40278a:	6013      	str	r3, [r2, #0]
  40278c:	4b0a      	ldr	r3, [pc, #40]	; (4027b8 <prvCheckTasksWaitingTermination+0x6c>)
  40278e:	4798      	blx	r3
  402790:	4620      	mov	r0, r4
  402792:	4b0a      	ldr	r3, [pc, #40]	; (4027bc <prvCheckTasksWaitingTermination+0x70>)
  402794:	4798      	blx	r3
  402796:	e7e4      	b.n	402762 <prvCheckTasksWaitingTermination+0x16>
  402798:	4770      	bx	lr
  40279a:	bf00      	nop
  40279c:	2040c2d4 	.word	0x2040c2d4
  4027a0:	00402445 	.word	0x00402445
  4027a4:	2040c338 	.word	0x2040c338
  4027a8:	004025a5 	.word	0x004025a5
  4027ac:	0040156d 	.word	0x0040156d
  4027b0:	00401489 	.word	0x00401489
  4027b4:	2040c2c4 	.word	0x2040c2c4
  4027b8:	004015b9 	.word	0x004015b9
  4027bc:	004020f5 	.word	0x004020f5

004027c0 <prvIdleTask>:
  4027c0:	b508      	push	{r3, lr}
  4027c2:	4b07      	ldr	r3, [pc, #28]	; (4027e0 <prvIdleTask+0x20>)
  4027c4:	4798      	blx	r3
  4027c6:	4b07      	ldr	r3, [pc, #28]	; (4027e4 <prvIdleTask+0x24>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	2b01      	cmp	r3, #1
  4027cc:	d9f9      	bls.n	4027c2 <prvIdleTask+0x2>
  4027ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4027d2:	4b05      	ldr	r3, [pc, #20]	; (4027e8 <prvIdleTask+0x28>)
  4027d4:	601a      	str	r2, [r3, #0]
  4027d6:	f3bf 8f4f 	dsb	sy
  4027da:	f3bf 8f6f 	isb	sy
  4027de:	e7f0      	b.n	4027c2 <prvIdleTask+0x2>
  4027e0:	0040274d 	.word	0x0040274d
  4027e4:	2040c260 	.word	0x2040c260
  4027e8:	e000ed04 	.word	0xe000ed04

004027ec <vTaskSwitchContext>:
  4027ec:	4b2e      	ldr	r3, [pc, #184]	; (4028a8 <vTaskSwitchContext+0xbc>)
  4027ee:	681b      	ldr	r3, [r3, #0]
  4027f0:	2b00      	cmp	r3, #0
  4027f2:	d12c      	bne.n	40284e <vTaskSwitchContext+0x62>
  4027f4:	b510      	push	{r4, lr}
  4027f6:	2200      	movs	r2, #0
  4027f8:	4b2c      	ldr	r3, [pc, #176]	; (4028ac <vTaskSwitchContext+0xc0>)
  4027fa:	601a      	str	r2, [r3, #0]
  4027fc:	4b2c      	ldr	r3, [pc, #176]	; (4028b0 <vTaskSwitchContext+0xc4>)
  4027fe:	681b      	ldr	r3, [r3, #0]
  402800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402802:	681a      	ldr	r2, [r3, #0]
  402804:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402808:	d103      	bne.n	402812 <vTaskSwitchContext+0x26>
  40280a:	685a      	ldr	r2, [r3, #4]
  40280c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402810:	d021      	beq.n	402856 <vTaskSwitchContext+0x6a>
  402812:	4b27      	ldr	r3, [pc, #156]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402814:	6818      	ldr	r0, [r3, #0]
  402816:	6819      	ldr	r1, [r3, #0]
  402818:	3134      	adds	r1, #52	; 0x34
  40281a:	4b26      	ldr	r3, [pc, #152]	; (4028b4 <vTaskSwitchContext+0xc8>)
  40281c:	4798      	blx	r3
  40281e:	4b26      	ldr	r3, [pc, #152]	; (4028b8 <vTaskSwitchContext+0xcc>)
  402820:	681b      	ldr	r3, [r3, #0]
  402822:	fab3 f383 	clz	r3, r3
  402826:	b2db      	uxtb	r3, r3
  402828:	f1c3 031f 	rsb	r3, r3, #31
  40282c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402830:	008a      	lsls	r2, r1, #2
  402832:	4922      	ldr	r1, [pc, #136]	; (4028bc <vTaskSwitchContext+0xd0>)
  402834:	588a      	ldr	r2, [r1, r2]
  402836:	b9ba      	cbnz	r2, 402868 <vTaskSwitchContext+0x7c>
  402838:	f04f 0380 	mov.w	r3, #128	; 0x80
  40283c:	b672      	cpsid	i
  40283e:	f383 8811 	msr	BASEPRI, r3
  402842:	f3bf 8f6f 	isb	sy
  402846:	f3bf 8f4f 	dsb	sy
  40284a:	b662      	cpsie	i
  40284c:	e7fe      	b.n	40284c <vTaskSwitchContext+0x60>
  40284e:	2201      	movs	r2, #1
  402850:	4b16      	ldr	r3, [pc, #88]	; (4028ac <vTaskSwitchContext+0xc0>)
  402852:	601a      	str	r2, [r3, #0]
  402854:	4770      	bx	lr
  402856:	689a      	ldr	r2, [r3, #8]
  402858:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40285c:	d1d9      	bne.n	402812 <vTaskSwitchContext+0x26>
  40285e:	68db      	ldr	r3, [r3, #12]
  402860:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402864:	d1d5      	bne.n	402812 <vTaskSwitchContext+0x26>
  402866:	e7da      	b.n	40281e <vTaskSwitchContext+0x32>
  402868:	4814      	ldr	r0, [pc, #80]	; (4028bc <vTaskSwitchContext+0xd0>)
  40286a:	009a      	lsls	r2, r3, #2
  40286c:	18d4      	adds	r4, r2, r3
  40286e:	00a1      	lsls	r1, r4, #2
  402870:	4401      	add	r1, r0
  402872:	684c      	ldr	r4, [r1, #4]
  402874:	6864      	ldr	r4, [r4, #4]
  402876:	604c      	str	r4, [r1, #4]
  402878:	441a      	add	r2, r3
  40287a:	0091      	lsls	r1, r2, #2
  40287c:	3108      	adds	r1, #8
  40287e:	4408      	add	r0, r1
  402880:	4284      	cmp	r4, r0
  402882:	d009      	beq.n	402898 <vTaskSwitchContext+0xac>
  402884:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402888:	009a      	lsls	r2, r3, #2
  40288a:	4b0c      	ldr	r3, [pc, #48]	; (4028bc <vTaskSwitchContext+0xd0>)
  40288c:	4413      	add	r3, r2
  40288e:	685b      	ldr	r3, [r3, #4]
  402890:	68da      	ldr	r2, [r3, #12]
  402892:	4b07      	ldr	r3, [pc, #28]	; (4028b0 <vTaskSwitchContext+0xc4>)
  402894:	601a      	str	r2, [r3, #0]
  402896:	bd10      	pop	{r4, pc}
  402898:	6860      	ldr	r0, [r4, #4]
  40289a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  40289e:	0091      	lsls	r1, r2, #2
  4028a0:	4a06      	ldr	r2, [pc, #24]	; (4028bc <vTaskSwitchContext+0xd0>)
  4028a2:	440a      	add	r2, r1
  4028a4:	6050      	str	r0, [r2, #4]
  4028a6:	e7ed      	b.n	402884 <vTaskSwitchContext+0x98>
  4028a8:	2040c2cc 	.word	0x2040c2cc
  4028ac:	2040c350 	.word	0x2040c350
  4028b0:	2040c254 	.word	0x2040c254
  4028b4:	00420e65 	.word	0x00420e65
  4028b8:	2040c2d8 	.word	0x2040c2d8
  4028bc:	2040c260 	.word	0x2040c260

004028c0 <vTaskPlaceOnEventList>:
  4028c0:	b538      	push	{r3, r4, r5, lr}
  4028c2:	b1e8      	cbz	r0, 402900 <vTaskPlaceOnEventList+0x40>
  4028c4:	460c      	mov	r4, r1
  4028c6:	4d17      	ldr	r5, [pc, #92]	; (402924 <vTaskPlaceOnEventList+0x64>)
  4028c8:	6829      	ldr	r1, [r5, #0]
  4028ca:	3118      	adds	r1, #24
  4028cc:	4b16      	ldr	r3, [pc, #88]	; (402928 <vTaskPlaceOnEventList+0x68>)
  4028ce:	4798      	blx	r3
  4028d0:	6828      	ldr	r0, [r5, #0]
  4028d2:	3004      	adds	r0, #4
  4028d4:	4b15      	ldr	r3, [pc, #84]	; (40292c <vTaskPlaceOnEventList+0x6c>)
  4028d6:	4798      	blx	r3
  4028d8:	b948      	cbnz	r0, 4028ee <vTaskPlaceOnEventList+0x2e>
  4028da:	682b      	ldr	r3, [r5, #0]
  4028dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4028de:	2301      	movs	r3, #1
  4028e0:	fa03 f202 	lsl.w	r2, r3, r2
  4028e4:	4912      	ldr	r1, [pc, #72]	; (402930 <vTaskPlaceOnEventList+0x70>)
  4028e6:	680b      	ldr	r3, [r1, #0]
  4028e8:	ea23 0302 	bic.w	r3, r3, r2
  4028ec:	600b      	str	r3, [r1, #0]
  4028ee:	f1b4 3fff 	cmp.w	r4, #4294967295
  4028f2:	d010      	beq.n	402916 <vTaskPlaceOnEventList+0x56>
  4028f4:	4b0f      	ldr	r3, [pc, #60]	; (402934 <vTaskPlaceOnEventList+0x74>)
  4028f6:	6818      	ldr	r0, [r3, #0]
  4028f8:	4420      	add	r0, r4
  4028fa:	4b0f      	ldr	r3, [pc, #60]	; (402938 <vTaskPlaceOnEventList+0x78>)
  4028fc:	4798      	blx	r3
  4028fe:	bd38      	pop	{r3, r4, r5, pc}
  402900:	f04f 0380 	mov.w	r3, #128	; 0x80
  402904:	b672      	cpsid	i
  402906:	f383 8811 	msr	BASEPRI, r3
  40290a:	f3bf 8f6f 	isb	sy
  40290e:	f3bf 8f4f 	dsb	sy
  402912:	b662      	cpsie	i
  402914:	e7fe      	b.n	402914 <vTaskPlaceOnEventList+0x54>
  402916:	4b03      	ldr	r3, [pc, #12]	; (402924 <vTaskPlaceOnEventList+0x64>)
  402918:	6819      	ldr	r1, [r3, #0]
  40291a:	3104      	adds	r1, #4
  40291c:	4807      	ldr	r0, [pc, #28]	; (40293c <vTaskPlaceOnEventList+0x7c>)
  40291e:	4b08      	ldr	r3, [pc, #32]	; (402940 <vTaskPlaceOnEventList+0x80>)
  402920:	4798      	blx	r3
  402922:	bd38      	pop	{r3, r4, r5, pc}
  402924:	2040c254 	.word	0x2040c254
  402928:	00401455 	.word	0x00401455
  40292c:	00401489 	.word	0x00401489
  402930:	2040c2d8 	.word	0x2040c2d8
  402934:	2040c34c 	.word	0x2040c34c
  402938:	00402205 	.word	0x00402205
  40293c:	2040c324 	.word	0x2040c324
  402940:	0040143d 	.word	0x0040143d

00402944 <vTaskPlaceOnEventListRestricted>:
  402944:	b1f0      	cbz	r0, 402984 <vTaskPlaceOnEventListRestricted+0x40>
  402946:	b570      	push	{r4, r5, r6, lr}
  402948:	4615      	mov	r5, r2
  40294a:	460c      	mov	r4, r1
  40294c:	4e16      	ldr	r6, [pc, #88]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40294e:	6831      	ldr	r1, [r6, #0]
  402950:	3118      	adds	r1, #24
  402952:	4b16      	ldr	r3, [pc, #88]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  402954:	4798      	blx	r3
  402956:	6830      	ldr	r0, [r6, #0]
  402958:	3004      	adds	r0, #4
  40295a:	4b15      	ldr	r3, [pc, #84]	; (4029b0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40295c:	4798      	blx	r3
  40295e:	b948      	cbnz	r0, 402974 <vTaskPlaceOnEventListRestricted+0x30>
  402960:	6833      	ldr	r3, [r6, #0]
  402962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402964:	2301      	movs	r3, #1
  402966:	fa03 f202 	lsl.w	r2, r3, r2
  40296a:	4912      	ldr	r1, [pc, #72]	; (4029b4 <vTaskPlaceOnEventListRestricted+0x70>)
  40296c:	680b      	ldr	r3, [r1, #0]
  40296e:	ea23 0302 	bic.w	r3, r3, r2
  402972:	600b      	str	r3, [r1, #0]
  402974:	2d01      	cmp	r5, #1
  402976:	d010      	beq.n	40299a <vTaskPlaceOnEventListRestricted+0x56>
  402978:	4b0f      	ldr	r3, [pc, #60]	; (4029b8 <vTaskPlaceOnEventListRestricted+0x74>)
  40297a:	6818      	ldr	r0, [r3, #0]
  40297c:	4420      	add	r0, r4
  40297e:	4b0f      	ldr	r3, [pc, #60]	; (4029bc <vTaskPlaceOnEventListRestricted+0x78>)
  402980:	4798      	blx	r3
  402982:	bd70      	pop	{r4, r5, r6, pc}
  402984:	f04f 0380 	mov.w	r3, #128	; 0x80
  402988:	b672      	cpsid	i
  40298a:	f383 8811 	msr	BASEPRI, r3
  40298e:	f3bf 8f6f 	isb	sy
  402992:	f3bf 8f4f 	dsb	sy
  402996:	b662      	cpsie	i
  402998:	e7fe      	b.n	402998 <vTaskPlaceOnEventListRestricted+0x54>
  40299a:	4b03      	ldr	r3, [pc, #12]	; (4029a8 <vTaskPlaceOnEventListRestricted+0x64>)
  40299c:	6819      	ldr	r1, [r3, #0]
  40299e:	3104      	adds	r1, #4
  4029a0:	4807      	ldr	r0, [pc, #28]	; (4029c0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4029a2:	4b02      	ldr	r3, [pc, #8]	; (4029ac <vTaskPlaceOnEventListRestricted+0x68>)
  4029a4:	4798      	blx	r3
  4029a6:	bd70      	pop	{r4, r5, r6, pc}
  4029a8:	2040c254 	.word	0x2040c254
  4029ac:	0040143d 	.word	0x0040143d
  4029b0:	00401489 	.word	0x00401489
  4029b4:	2040c2d8 	.word	0x2040c2d8
  4029b8:	2040c34c 	.word	0x2040c34c
  4029bc:	00402205 	.word	0x00402205
  4029c0:	2040c324 	.word	0x2040c324

004029c4 <xTaskRemoveFromEventList>:
  4029c4:	b538      	push	{r3, r4, r5, lr}
  4029c6:	68c3      	ldr	r3, [r0, #12]
  4029c8:	68dc      	ldr	r4, [r3, #12]
  4029ca:	b324      	cbz	r4, 402a16 <xTaskRemoveFromEventList+0x52>
  4029cc:	f104 0518 	add.w	r5, r4, #24
  4029d0:	4628      	mov	r0, r5
  4029d2:	4b1a      	ldr	r3, [pc, #104]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029d4:	4798      	blx	r3
  4029d6:	4b1a      	ldr	r3, [pc, #104]	; (402a40 <xTaskRemoveFromEventList+0x7c>)
  4029d8:	681b      	ldr	r3, [r3, #0]
  4029da:	bb3b      	cbnz	r3, 402a2c <xTaskRemoveFromEventList+0x68>
  4029dc:	1d25      	adds	r5, r4, #4
  4029de:	4628      	mov	r0, r5
  4029e0:	4b16      	ldr	r3, [pc, #88]	; (402a3c <xTaskRemoveFromEventList+0x78>)
  4029e2:	4798      	blx	r3
  4029e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4029e6:	2201      	movs	r2, #1
  4029e8:	409a      	lsls	r2, r3
  4029ea:	4916      	ldr	r1, [pc, #88]	; (402a44 <xTaskRemoveFromEventList+0x80>)
  4029ec:	6808      	ldr	r0, [r1, #0]
  4029ee:	4302      	orrs	r2, r0
  4029f0:	600a      	str	r2, [r1, #0]
  4029f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4029f6:	009a      	lsls	r2, r3, #2
  4029f8:	4629      	mov	r1, r5
  4029fa:	4813      	ldr	r0, [pc, #76]	; (402a48 <xTaskRemoveFromEventList+0x84>)
  4029fc:	4410      	add	r0, r2
  4029fe:	4b13      	ldr	r3, [pc, #76]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a00:	4798      	blx	r3
  402a02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402a04:	4b12      	ldr	r3, [pc, #72]	; (402a50 <xTaskRemoveFromEventList+0x8c>)
  402a06:	681b      	ldr	r3, [r3, #0]
  402a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402a0a:	429a      	cmp	r2, r3
  402a0c:	d913      	bls.n	402a36 <xTaskRemoveFromEventList+0x72>
  402a0e:	2001      	movs	r0, #1
  402a10:	4b10      	ldr	r3, [pc, #64]	; (402a54 <xTaskRemoveFromEventList+0x90>)
  402a12:	6018      	str	r0, [r3, #0]
  402a14:	bd38      	pop	{r3, r4, r5, pc}
  402a16:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a1a:	b672      	cpsid	i
  402a1c:	f383 8811 	msr	BASEPRI, r3
  402a20:	f3bf 8f6f 	isb	sy
  402a24:	f3bf 8f4f 	dsb	sy
  402a28:	b662      	cpsie	i
  402a2a:	e7fe      	b.n	402a2a <xTaskRemoveFromEventList+0x66>
  402a2c:	4629      	mov	r1, r5
  402a2e:	480a      	ldr	r0, [pc, #40]	; (402a58 <xTaskRemoveFromEventList+0x94>)
  402a30:	4b06      	ldr	r3, [pc, #24]	; (402a4c <xTaskRemoveFromEventList+0x88>)
  402a32:	4798      	blx	r3
  402a34:	e7e5      	b.n	402a02 <xTaskRemoveFromEventList+0x3e>
  402a36:	2000      	movs	r0, #0
  402a38:	bd38      	pop	{r3, r4, r5, pc}
  402a3a:	bf00      	nop
  402a3c:	00401489 	.word	0x00401489
  402a40:	2040c2cc 	.word	0x2040c2cc
  402a44:	2040c2d8 	.word	0x2040c2d8
  402a48:	2040c260 	.word	0x2040c260
  402a4c:	0040143d 	.word	0x0040143d
  402a50:	2040c254 	.word	0x2040c254
  402a54:	2040c350 	.word	0x2040c350
  402a58:	2040c30c 	.word	0x2040c30c

00402a5c <vTaskSetTimeOutState>:
  402a5c:	b130      	cbz	r0, 402a6c <vTaskSetTimeOutState+0x10>
  402a5e:	4a09      	ldr	r2, [pc, #36]	; (402a84 <vTaskSetTimeOutState+0x28>)
  402a60:	6812      	ldr	r2, [r2, #0]
  402a62:	6002      	str	r2, [r0, #0]
  402a64:	4a08      	ldr	r2, [pc, #32]	; (402a88 <vTaskSetTimeOutState+0x2c>)
  402a66:	6812      	ldr	r2, [r2, #0]
  402a68:	6042      	str	r2, [r0, #4]
  402a6a:	4770      	bx	lr
  402a6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a70:	b672      	cpsid	i
  402a72:	f383 8811 	msr	BASEPRI, r3
  402a76:	f3bf 8f6f 	isb	sy
  402a7a:	f3bf 8f4f 	dsb	sy
  402a7e:	b662      	cpsie	i
  402a80:	e7fe      	b.n	402a80 <vTaskSetTimeOutState+0x24>
  402a82:	bf00      	nop
  402a84:	2040c308 	.word	0x2040c308
  402a88:	2040c34c 	.word	0x2040c34c

00402a8c <xTaskCheckForTimeOut>:
  402a8c:	b538      	push	{r3, r4, r5, lr}
  402a8e:	b1c0      	cbz	r0, 402ac2 <xTaskCheckForTimeOut+0x36>
  402a90:	4604      	mov	r4, r0
  402a92:	b309      	cbz	r1, 402ad8 <xTaskCheckForTimeOut+0x4c>
  402a94:	460d      	mov	r5, r1
  402a96:	4b1d      	ldr	r3, [pc, #116]	; (402b0c <xTaskCheckForTimeOut+0x80>)
  402a98:	4798      	blx	r3
  402a9a:	4b1d      	ldr	r3, [pc, #116]	; (402b10 <xTaskCheckForTimeOut+0x84>)
  402a9c:	6819      	ldr	r1, [r3, #0]
  402a9e:	682b      	ldr	r3, [r5, #0]
  402aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
  402aa4:	d02e      	beq.n	402b04 <xTaskCheckForTimeOut+0x78>
  402aa6:	6820      	ldr	r0, [r4, #0]
  402aa8:	4a1a      	ldr	r2, [pc, #104]	; (402b14 <xTaskCheckForTimeOut+0x88>)
  402aaa:	6812      	ldr	r2, [r2, #0]
  402aac:	4290      	cmp	r0, r2
  402aae:	d002      	beq.n	402ab6 <xTaskCheckForTimeOut+0x2a>
  402ab0:	6862      	ldr	r2, [r4, #4]
  402ab2:	4291      	cmp	r1, r2
  402ab4:	d228      	bcs.n	402b08 <xTaskCheckForTimeOut+0x7c>
  402ab6:	6862      	ldr	r2, [r4, #4]
  402ab8:	1a88      	subs	r0, r1, r2
  402aba:	4283      	cmp	r3, r0
  402abc:	d817      	bhi.n	402aee <xTaskCheckForTimeOut+0x62>
  402abe:	2401      	movs	r4, #1
  402ac0:	e01c      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402ac2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ac6:	b672      	cpsid	i
  402ac8:	f383 8811 	msr	BASEPRI, r3
  402acc:	f3bf 8f6f 	isb	sy
  402ad0:	f3bf 8f4f 	dsb	sy
  402ad4:	b662      	cpsie	i
  402ad6:	e7fe      	b.n	402ad6 <xTaskCheckForTimeOut+0x4a>
  402ad8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402adc:	b672      	cpsid	i
  402ade:	f383 8811 	msr	BASEPRI, r3
  402ae2:	f3bf 8f6f 	isb	sy
  402ae6:	f3bf 8f4f 	dsb	sy
  402aea:	b662      	cpsie	i
  402aec:	e7fe      	b.n	402aec <xTaskCheckForTimeOut+0x60>
  402aee:	1a52      	subs	r2, r2, r1
  402af0:	4413      	add	r3, r2
  402af2:	602b      	str	r3, [r5, #0]
  402af4:	4620      	mov	r0, r4
  402af6:	4b08      	ldr	r3, [pc, #32]	; (402b18 <xTaskCheckForTimeOut+0x8c>)
  402af8:	4798      	blx	r3
  402afa:	2400      	movs	r4, #0
  402afc:	4b07      	ldr	r3, [pc, #28]	; (402b1c <xTaskCheckForTimeOut+0x90>)
  402afe:	4798      	blx	r3
  402b00:	4620      	mov	r0, r4
  402b02:	bd38      	pop	{r3, r4, r5, pc}
  402b04:	2400      	movs	r4, #0
  402b06:	e7f9      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402b08:	2401      	movs	r4, #1
  402b0a:	e7f7      	b.n	402afc <xTaskCheckForTimeOut+0x70>
  402b0c:	0040156d 	.word	0x0040156d
  402b10:	2040c34c 	.word	0x2040c34c
  402b14:	2040c308 	.word	0x2040c308
  402b18:	00402a5d 	.word	0x00402a5d
  402b1c:	004015b9 	.word	0x004015b9

00402b20 <vTaskMissedYield>:
  402b20:	2201      	movs	r2, #1
  402b22:	4b01      	ldr	r3, [pc, #4]	; (402b28 <vTaskMissedYield+0x8>)
  402b24:	601a      	str	r2, [r3, #0]
  402b26:	4770      	bx	lr
  402b28:	2040c350 	.word	0x2040c350

00402b2c <xTaskGetSchedulerState>:
  402b2c:	4b05      	ldr	r3, [pc, #20]	; (402b44 <xTaskGetSchedulerState+0x18>)
  402b2e:	681b      	ldr	r3, [r3, #0]
  402b30:	b123      	cbz	r3, 402b3c <xTaskGetSchedulerState+0x10>
  402b32:	4b05      	ldr	r3, [pc, #20]	; (402b48 <xTaskGetSchedulerState+0x1c>)
  402b34:	681b      	ldr	r3, [r3, #0]
  402b36:	b91b      	cbnz	r3, 402b40 <xTaskGetSchedulerState+0x14>
  402b38:	2002      	movs	r0, #2
  402b3a:	4770      	bx	lr
  402b3c:	2001      	movs	r0, #1
  402b3e:	4770      	bx	lr
  402b40:	2000      	movs	r0, #0
  402b42:	4770      	bx	lr
  402b44:	2040c320 	.word	0x2040c320
  402b48:	2040c2cc 	.word	0x2040c2cc

00402b4c <vTaskPriorityInherit>:
  402b4c:	2800      	cmp	r0, #0
  402b4e:	d047      	beq.n	402be0 <vTaskPriorityInherit+0x94>
  402b50:	b538      	push	{r3, r4, r5, lr}
  402b52:	4604      	mov	r4, r0
  402b54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  402b56:	4923      	ldr	r1, [pc, #140]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b58:	6809      	ldr	r1, [r1, #0]
  402b5a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b5c:	428b      	cmp	r3, r1
  402b5e:	d216      	bcs.n	402b8e <vTaskPriorityInherit+0x42>
  402b60:	6981      	ldr	r1, [r0, #24]
  402b62:	2900      	cmp	r1, #0
  402b64:	db05      	blt.n	402b72 <vTaskPriorityInherit+0x26>
  402b66:	491f      	ldr	r1, [pc, #124]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b68:	6809      	ldr	r1, [r1, #0]
  402b6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402b6c:	f1c1 0105 	rsb	r1, r1, #5
  402b70:	6181      	str	r1, [r0, #24]
  402b72:	6960      	ldr	r0, [r4, #20]
  402b74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402b78:	0099      	lsls	r1, r3, #2
  402b7a:	4b1b      	ldr	r3, [pc, #108]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402b7c:	440b      	add	r3, r1
  402b7e:	4298      	cmp	r0, r3
  402b80:	d006      	beq.n	402b90 <vTaskPriorityInherit+0x44>
  402b82:	2300      	movs	r3, #0
  402b84:	b933      	cbnz	r3, 402b94 <vTaskPriorityInherit+0x48>
  402b86:	4b17      	ldr	r3, [pc, #92]	; (402be4 <vTaskPriorityInherit+0x98>)
  402b88:	681b      	ldr	r3, [r3, #0]
  402b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402b8c:	62e3      	str	r3, [r4, #44]	; 0x2c
  402b8e:	bd38      	pop	{r3, r4, r5, pc}
  402b90:	2301      	movs	r3, #1
  402b92:	e7f7      	b.n	402b84 <vTaskPriorityInherit+0x38>
  402b94:	1d25      	adds	r5, r4, #4
  402b96:	4628      	mov	r0, r5
  402b98:	4b14      	ldr	r3, [pc, #80]	; (402bec <vTaskPriorityInherit+0xa0>)
  402b9a:	4798      	blx	r3
  402b9c:	b968      	cbnz	r0, 402bba <vTaskPriorityInherit+0x6e>
  402b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402ba0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402ba4:	008a      	lsls	r2, r1, #2
  402ba6:	4910      	ldr	r1, [pc, #64]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402ba8:	588a      	ldr	r2, [r1, r2]
  402baa:	b932      	cbnz	r2, 402bba <vTaskPriorityInherit+0x6e>
  402bac:	2201      	movs	r2, #1
  402bae:	409a      	lsls	r2, r3
  402bb0:	490f      	ldr	r1, [pc, #60]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bb2:	680b      	ldr	r3, [r1, #0]
  402bb4:	ea23 0302 	bic.w	r3, r3, r2
  402bb8:	600b      	str	r3, [r1, #0]
  402bba:	4b0a      	ldr	r3, [pc, #40]	; (402be4 <vTaskPriorityInherit+0x98>)
  402bbc:	681b      	ldr	r3, [r3, #0]
  402bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402bc0:	62e3      	str	r3, [r4, #44]	; 0x2c
  402bc2:	2201      	movs	r2, #1
  402bc4:	409a      	lsls	r2, r3
  402bc6:	490a      	ldr	r1, [pc, #40]	; (402bf0 <vTaskPriorityInherit+0xa4>)
  402bc8:	6808      	ldr	r0, [r1, #0]
  402bca:	4302      	orrs	r2, r0
  402bcc:	600a      	str	r2, [r1, #0]
  402bce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402bd2:	009a      	lsls	r2, r3, #2
  402bd4:	4629      	mov	r1, r5
  402bd6:	4804      	ldr	r0, [pc, #16]	; (402be8 <vTaskPriorityInherit+0x9c>)
  402bd8:	4410      	add	r0, r2
  402bda:	4b06      	ldr	r3, [pc, #24]	; (402bf4 <vTaskPriorityInherit+0xa8>)
  402bdc:	4798      	blx	r3
  402bde:	bd38      	pop	{r3, r4, r5, pc}
  402be0:	4770      	bx	lr
  402be2:	bf00      	nop
  402be4:	2040c254 	.word	0x2040c254
  402be8:	2040c260 	.word	0x2040c260
  402bec:	00401489 	.word	0x00401489
  402bf0:	2040c2d8 	.word	0x2040c2d8
  402bf4:	0040143d 	.word	0x0040143d

00402bf8 <xTaskPriorityDisinherit>:
  402bf8:	2800      	cmp	r0, #0
  402bfa:	d04f      	beq.n	402c9c <xTaskPriorityDisinherit+0xa4>
  402bfc:	b538      	push	{r3, r4, r5, lr}
  402bfe:	4604      	mov	r4, r0
  402c00:	4a29      	ldr	r2, [pc, #164]	; (402ca8 <xTaskPriorityDisinherit+0xb0>)
  402c02:	6812      	ldr	r2, [r2, #0]
  402c04:	4290      	cmp	r0, r2
  402c06:	d00a      	beq.n	402c1e <xTaskPriorityDisinherit+0x26>
  402c08:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c0c:	b672      	cpsid	i
  402c0e:	f383 8811 	msr	BASEPRI, r3
  402c12:	f3bf 8f6f 	isb	sy
  402c16:	f3bf 8f4f 	dsb	sy
  402c1a:	b662      	cpsie	i
  402c1c:	e7fe      	b.n	402c1c <xTaskPriorityDisinherit+0x24>
  402c1e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402c20:	b952      	cbnz	r2, 402c38 <xTaskPriorityDisinherit+0x40>
  402c22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c26:	b672      	cpsid	i
  402c28:	f383 8811 	msr	BASEPRI, r3
  402c2c:	f3bf 8f6f 	isb	sy
  402c30:	f3bf 8f4f 	dsb	sy
  402c34:	b662      	cpsie	i
  402c36:	e7fe      	b.n	402c36 <xTaskPriorityDisinherit+0x3e>
  402c38:	3a01      	subs	r2, #1
  402c3a:	64c2      	str	r2, [r0, #76]	; 0x4c
  402c3c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402c3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  402c40:	4288      	cmp	r0, r1
  402c42:	d02d      	beq.n	402ca0 <xTaskPriorityDisinherit+0xa8>
  402c44:	2a00      	cmp	r2, #0
  402c46:	d12d      	bne.n	402ca4 <xTaskPriorityDisinherit+0xac>
  402c48:	1d25      	adds	r5, r4, #4
  402c4a:	4628      	mov	r0, r5
  402c4c:	4b17      	ldr	r3, [pc, #92]	; (402cac <xTaskPriorityDisinherit+0xb4>)
  402c4e:	4798      	blx	r3
  402c50:	b970      	cbnz	r0, 402c70 <xTaskPriorityDisinherit+0x78>
  402c52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402c54:	eb02 0182 	add.w	r1, r2, r2, lsl #2
  402c58:	008b      	lsls	r3, r1, #2
  402c5a:	4915      	ldr	r1, [pc, #84]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c5c:	58cb      	ldr	r3, [r1, r3]
  402c5e:	b93b      	cbnz	r3, 402c70 <xTaskPriorityDisinherit+0x78>
  402c60:	2301      	movs	r3, #1
  402c62:	fa03 f202 	lsl.w	r2, r3, r2
  402c66:	4913      	ldr	r1, [pc, #76]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c68:	680b      	ldr	r3, [r1, #0]
  402c6a:	ea23 0302 	bic.w	r3, r3, r2
  402c6e:	600b      	str	r3, [r1, #0]
  402c70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402c72:	62e3      	str	r3, [r4, #44]	; 0x2c
  402c74:	f1c3 0205 	rsb	r2, r3, #5
  402c78:	61a2      	str	r2, [r4, #24]
  402c7a:	2401      	movs	r4, #1
  402c7c:	fa04 f203 	lsl.w	r2, r4, r3
  402c80:	490c      	ldr	r1, [pc, #48]	; (402cb4 <xTaskPriorityDisinherit+0xbc>)
  402c82:	6808      	ldr	r0, [r1, #0]
  402c84:	4302      	orrs	r2, r0
  402c86:	600a      	str	r2, [r1, #0]
  402c88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402c8c:	009a      	lsls	r2, r3, #2
  402c8e:	4629      	mov	r1, r5
  402c90:	4807      	ldr	r0, [pc, #28]	; (402cb0 <xTaskPriorityDisinherit+0xb8>)
  402c92:	4410      	add	r0, r2
  402c94:	4b08      	ldr	r3, [pc, #32]	; (402cb8 <xTaskPriorityDisinherit+0xc0>)
  402c96:	4798      	blx	r3
  402c98:	4620      	mov	r0, r4
  402c9a:	bd38      	pop	{r3, r4, r5, pc}
  402c9c:	2000      	movs	r0, #0
  402c9e:	4770      	bx	lr
  402ca0:	2000      	movs	r0, #0
  402ca2:	bd38      	pop	{r3, r4, r5, pc}
  402ca4:	2000      	movs	r0, #0
  402ca6:	bd38      	pop	{r3, r4, r5, pc}
  402ca8:	2040c254 	.word	0x2040c254
  402cac:	00401489 	.word	0x00401489
  402cb0:	2040c260 	.word	0x2040c260
  402cb4:	2040c2d8 	.word	0x2040c2d8
  402cb8:	0040143d 	.word	0x0040143d

00402cbc <pvTaskIncrementMutexHeldCount>:
  402cbc:	4b05      	ldr	r3, [pc, #20]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cbe:	681b      	ldr	r3, [r3, #0]
  402cc0:	b123      	cbz	r3, 402ccc <pvTaskIncrementMutexHeldCount+0x10>
  402cc2:	4b04      	ldr	r3, [pc, #16]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cc4:	681a      	ldr	r2, [r3, #0]
  402cc6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402cc8:	3301      	adds	r3, #1
  402cca:	64d3      	str	r3, [r2, #76]	; 0x4c
  402ccc:	4b01      	ldr	r3, [pc, #4]	; (402cd4 <pvTaskIncrementMutexHeldCount+0x18>)
  402cce:	6818      	ldr	r0, [r3, #0]
  402cd0:	4770      	bx	lr
  402cd2:	bf00      	nop
  402cd4:	2040c254 	.word	0x2040c254

00402cd8 <prvGetNextExpireTime>:
  402cd8:	4b06      	ldr	r3, [pc, #24]	; (402cf4 <prvGetNextExpireTime+0x1c>)
  402cda:	681a      	ldr	r2, [r3, #0]
  402cdc:	6813      	ldr	r3, [r2, #0]
  402cde:	fab3 f383 	clz	r3, r3
  402ce2:	095b      	lsrs	r3, r3, #5
  402ce4:	6003      	str	r3, [r0, #0]
  402ce6:	b913      	cbnz	r3, 402cee <prvGetNextExpireTime+0x16>
  402ce8:	68d3      	ldr	r3, [r2, #12]
  402cea:	6818      	ldr	r0, [r3, #0]
  402cec:	4770      	bx	lr
  402cee:	2000      	movs	r0, #0
  402cf0:	4770      	bx	lr
  402cf2:	bf00      	nop
  402cf4:	2040c354 	.word	0x2040c354

00402cf8 <prvInsertTimerInActiveList>:
  402cf8:	b508      	push	{r3, lr}
  402cfa:	6041      	str	r1, [r0, #4]
  402cfc:	6100      	str	r0, [r0, #16]
  402cfe:	4291      	cmp	r1, r2
  402d00:	d80c      	bhi.n	402d1c <prvInsertTimerInActiveList+0x24>
  402d02:	1ad2      	subs	r2, r2, r3
  402d04:	6983      	ldr	r3, [r0, #24]
  402d06:	429a      	cmp	r2, r3
  402d08:	d301      	bcc.n	402d0e <prvInsertTimerInActiveList+0x16>
  402d0a:	2001      	movs	r0, #1
  402d0c:	bd08      	pop	{r3, pc}
  402d0e:	1d01      	adds	r1, r0, #4
  402d10:	4b0b      	ldr	r3, [pc, #44]	; (402d40 <prvInsertTimerInActiveList+0x48>)
  402d12:	6818      	ldr	r0, [r3, #0]
  402d14:	4b0b      	ldr	r3, [pc, #44]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d16:	4798      	blx	r3
  402d18:	2000      	movs	r0, #0
  402d1a:	bd08      	pop	{r3, pc}
  402d1c:	429a      	cmp	r2, r3
  402d1e:	bf2c      	ite	cs
  402d20:	2200      	movcs	r2, #0
  402d22:	2201      	movcc	r2, #1
  402d24:	4299      	cmp	r1, r3
  402d26:	bf38      	it	cc
  402d28:	2200      	movcc	r2, #0
  402d2a:	b10a      	cbz	r2, 402d30 <prvInsertTimerInActiveList+0x38>
  402d2c:	2001      	movs	r0, #1
  402d2e:	bd08      	pop	{r3, pc}
  402d30:	1d01      	adds	r1, r0, #4
  402d32:	4b05      	ldr	r3, [pc, #20]	; (402d48 <prvInsertTimerInActiveList+0x50>)
  402d34:	6818      	ldr	r0, [r3, #0]
  402d36:	4b03      	ldr	r3, [pc, #12]	; (402d44 <prvInsertTimerInActiveList+0x4c>)
  402d38:	4798      	blx	r3
  402d3a:	2000      	movs	r0, #0
  402d3c:	bd08      	pop	{r3, pc}
  402d3e:	bf00      	nop
  402d40:	2040c358 	.word	0x2040c358
  402d44:	00401455 	.word	0x00401455
  402d48:	2040c354 	.word	0x2040c354

00402d4c <prvCheckForValidListAndQueue>:
  402d4c:	b570      	push	{r4, r5, r6, lr}
  402d4e:	4b15      	ldr	r3, [pc, #84]	; (402da4 <prvCheckForValidListAndQueue+0x58>)
  402d50:	4798      	blx	r3
  402d52:	4b15      	ldr	r3, [pc, #84]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d54:	681b      	ldr	r3, [r3, #0]
  402d56:	b113      	cbz	r3, 402d5e <prvCheckForValidListAndQueue+0x12>
  402d58:	4b14      	ldr	r3, [pc, #80]	; (402dac <prvCheckForValidListAndQueue+0x60>)
  402d5a:	4798      	blx	r3
  402d5c:	bd70      	pop	{r4, r5, r6, pc}
  402d5e:	4d14      	ldr	r5, [pc, #80]	; (402db0 <prvCheckForValidListAndQueue+0x64>)
  402d60:	4628      	mov	r0, r5
  402d62:	4e14      	ldr	r6, [pc, #80]	; (402db4 <prvCheckForValidListAndQueue+0x68>)
  402d64:	47b0      	blx	r6
  402d66:	4c14      	ldr	r4, [pc, #80]	; (402db8 <prvCheckForValidListAndQueue+0x6c>)
  402d68:	4620      	mov	r0, r4
  402d6a:	47b0      	blx	r6
  402d6c:	4b13      	ldr	r3, [pc, #76]	; (402dbc <prvCheckForValidListAndQueue+0x70>)
  402d6e:	601d      	str	r5, [r3, #0]
  402d70:	4b13      	ldr	r3, [pc, #76]	; (402dc0 <prvCheckForValidListAndQueue+0x74>)
  402d72:	601c      	str	r4, [r3, #0]
  402d74:	2200      	movs	r2, #0
  402d76:	2110      	movs	r1, #16
  402d78:	2005      	movs	r0, #5
  402d7a:	4b12      	ldr	r3, [pc, #72]	; (402dc4 <prvCheckForValidListAndQueue+0x78>)
  402d7c:	4798      	blx	r3
  402d7e:	4b0a      	ldr	r3, [pc, #40]	; (402da8 <prvCheckForValidListAndQueue+0x5c>)
  402d80:	6018      	str	r0, [r3, #0]
  402d82:	b118      	cbz	r0, 402d8c <prvCheckForValidListAndQueue+0x40>
  402d84:	4910      	ldr	r1, [pc, #64]	; (402dc8 <prvCheckForValidListAndQueue+0x7c>)
  402d86:	4b11      	ldr	r3, [pc, #68]	; (402dcc <prvCheckForValidListAndQueue+0x80>)
  402d88:	4798      	blx	r3
  402d8a:	e7e5      	b.n	402d58 <prvCheckForValidListAndQueue+0xc>
  402d8c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d90:	b672      	cpsid	i
  402d92:	f383 8811 	msr	BASEPRI, r3
  402d96:	f3bf 8f6f 	isb	sy
  402d9a:	f3bf 8f4f 	dsb	sy
  402d9e:	b662      	cpsie	i
  402da0:	e7fe      	b.n	402da0 <prvCheckForValidListAndQueue+0x54>
  402da2:	bf00      	nop
  402da4:	0040156d 	.word	0x0040156d
  402da8:	2040c388 	.word	0x2040c388
  402dac:	004015b9 	.word	0x004015b9
  402db0:	2040c35c 	.word	0x2040c35c
  402db4:	00401421 	.word	0x00401421
  402db8:	2040c370 	.word	0x2040c370
  402dbc:	2040c354 	.word	0x2040c354
  402dc0:	2040c358 	.word	0x2040c358
  402dc4:	00401af9 	.word	0x00401af9
  402dc8:	004260a0 	.word	0x004260a0
  402dcc:	00402041 	.word	0x00402041

00402dd0 <xTimerCreateTimerTask>:
  402dd0:	b510      	push	{r4, lr}
  402dd2:	b084      	sub	sp, #16
  402dd4:	4b10      	ldr	r3, [pc, #64]	; (402e18 <xTimerCreateTimerTask+0x48>)
  402dd6:	4798      	blx	r3
  402dd8:	4b10      	ldr	r3, [pc, #64]	; (402e1c <xTimerCreateTimerTask+0x4c>)
  402dda:	681b      	ldr	r3, [r3, #0]
  402ddc:	b1bb      	cbz	r3, 402e0e <xTimerCreateTimerTask+0x3e>
  402dde:	2300      	movs	r3, #0
  402de0:	9303      	str	r3, [sp, #12]
  402de2:	9302      	str	r3, [sp, #8]
  402de4:	9301      	str	r3, [sp, #4]
  402de6:	2204      	movs	r2, #4
  402de8:	9200      	str	r2, [sp, #0]
  402dea:	f44f 7282 	mov.w	r2, #260	; 0x104
  402dee:	490c      	ldr	r1, [pc, #48]	; (402e20 <xTimerCreateTimerTask+0x50>)
  402df0:	480c      	ldr	r0, [pc, #48]	; (402e24 <xTimerCreateTimerTask+0x54>)
  402df2:	4c0d      	ldr	r4, [pc, #52]	; (402e28 <xTimerCreateTimerTask+0x58>)
  402df4:	47a0      	blx	r4
  402df6:	b960      	cbnz	r0, 402e12 <xTimerCreateTimerTask+0x42>
  402df8:	f04f 0380 	mov.w	r3, #128	; 0x80
  402dfc:	b672      	cpsid	i
  402dfe:	f383 8811 	msr	BASEPRI, r3
  402e02:	f3bf 8f6f 	isb	sy
  402e06:	f3bf 8f4f 	dsb	sy
  402e0a:	b662      	cpsie	i
  402e0c:	e7fe      	b.n	402e0c <xTimerCreateTimerTask+0x3c>
  402e0e:	2000      	movs	r0, #0
  402e10:	e7f1      	b.n	402df6 <xTimerCreateTimerTask+0x26>
  402e12:	b004      	add	sp, #16
  402e14:	bd10      	pop	{r4, pc}
  402e16:	bf00      	nop
  402e18:	00402d4d 	.word	0x00402d4d
  402e1c:	2040c388 	.word	0x2040c388
  402e20:	004260a8 	.word	0x004260a8
  402e24:	004031d5 	.word	0x004031d5
  402e28:	0040225d 	.word	0x0040225d

00402e2c <xTimerCreate>:
  402e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402e30:	460d      	mov	r5, r1
  402e32:	b1f9      	cbz	r1, 402e74 <xTimerCreate+0x48>
  402e34:	4680      	mov	r8, r0
  402e36:	4617      	mov	r7, r2
  402e38:	461e      	mov	r6, r3
  402e3a:	202c      	movs	r0, #44	; 0x2c
  402e3c:	4b10      	ldr	r3, [pc, #64]	; (402e80 <xTimerCreate+0x54>)
  402e3e:	4798      	blx	r3
  402e40:	4604      	mov	r4, r0
  402e42:	b158      	cbz	r0, 402e5c <xTimerCreate+0x30>
  402e44:	4b0f      	ldr	r3, [pc, #60]	; (402e84 <xTimerCreate+0x58>)
  402e46:	4798      	blx	r3
  402e48:	f8c4 8000 	str.w	r8, [r4]
  402e4c:	61a5      	str	r5, [r4, #24]
  402e4e:	61e7      	str	r7, [r4, #28]
  402e50:	6226      	str	r6, [r4, #32]
  402e52:	9b06      	ldr	r3, [sp, #24]
  402e54:	6263      	str	r3, [r4, #36]	; 0x24
  402e56:	1d20      	adds	r0, r4, #4
  402e58:	4b0b      	ldr	r3, [pc, #44]	; (402e88 <xTimerCreate+0x5c>)
  402e5a:	4798      	blx	r3
  402e5c:	b965      	cbnz	r5, 402e78 <xTimerCreate+0x4c>
  402e5e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402e62:	b672      	cpsid	i
  402e64:	f383 8811 	msr	BASEPRI, r3
  402e68:	f3bf 8f6f 	isb	sy
  402e6c:	f3bf 8f4f 	dsb	sy
  402e70:	b662      	cpsie	i
  402e72:	e7fe      	b.n	402e72 <xTimerCreate+0x46>
  402e74:	2400      	movs	r4, #0
  402e76:	e7f1      	b.n	402e5c <xTimerCreate+0x30>
  402e78:	4620      	mov	r0, r4
  402e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  402e7e:	bf00      	nop
  402e80:	004017bd 	.word	0x004017bd
  402e84:	00402d4d 	.word	0x00402d4d
  402e88:	00401437 	.word	0x00401437

00402e8c <xTimerGenericCommand>:
  402e8c:	b1c8      	cbz	r0, 402ec2 <xTimerGenericCommand+0x36>
  402e8e:	b530      	push	{r4, r5, lr}
  402e90:	b085      	sub	sp, #20
  402e92:	4615      	mov	r5, r2
  402e94:	4604      	mov	r4, r0
  402e96:	4a18      	ldr	r2, [pc, #96]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402e98:	6810      	ldr	r0, [r2, #0]
  402e9a:	2800      	cmp	r0, #0
  402e9c:	d02a      	beq.n	402ef4 <xTimerGenericCommand+0x68>
  402e9e:	461a      	mov	r2, r3
  402ea0:	9100      	str	r1, [sp, #0]
  402ea2:	9501      	str	r5, [sp, #4]
  402ea4:	9402      	str	r4, [sp, #8]
  402ea6:	2905      	cmp	r1, #5
  402ea8:	dc1e      	bgt.n	402ee8 <xTimerGenericCommand+0x5c>
  402eaa:	4b14      	ldr	r3, [pc, #80]	; (402efc <xTimerGenericCommand+0x70>)
  402eac:	4798      	blx	r3
  402eae:	2802      	cmp	r0, #2
  402eb0:	d012      	beq.n	402ed8 <xTimerGenericCommand+0x4c>
  402eb2:	2300      	movs	r3, #0
  402eb4:	461a      	mov	r2, r3
  402eb6:	4669      	mov	r1, sp
  402eb8:	480f      	ldr	r0, [pc, #60]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402eba:	6800      	ldr	r0, [r0, #0]
  402ebc:	4c10      	ldr	r4, [pc, #64]	; (402f00 <xTimerGenericCommand+0x74>)
  402ebe:	47a0      	blx	r4
  402ec0:	e016      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ec2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ec6:	b672      	cpsid	i
  402ec8:	f383 8811 	msr	BASEPRI, r3
  402ecc:	f3bf 8f6f 	isb	sy
  402ed0:	f3bf 8f4f 	dsb	sy
  402ed4:	b662      	cpsie	i
  402ed6:	e7fe      	b.n	402ed6 <xTimerGenericCommand+0x4a>
  402ed8:	2300      	movs	r3, #0
  402eda:	9a08      	ldr	r2, [sp, #32]
  402edc:	4669      	mov	r1, sp
  402ede:	4806      	ldr	r0, [pc, #24]	; (402ef8 <xTimerGenericCommand+0x6c>)
  402ee0:	6800      	ldr	r0, [r0, #0]
  402ee2:	4c07      	ldr	r4, [pc, #28]	; (402f00 <xTimerGenericCommand+0x74>)
  402ee4:	47a0      	blx	r4
  402ee6:	e003      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ee8:	2300      	movs	r3, #0
  402eea:	4669      	mov	r1, sp
  402eec:	4c05      	ldr	r4, [pc, #20]	; (402f04 <xTimerGenericCommand+0x78>)
  402eee:	47a0      	blx	r4
  402ef0:	b005      	add	sp, #20
  402ef2:	bd30      	pop	{r4, r5, pc}
  402ef4:	2000      	movs	r0, #0
  402ef6:	e7fb      	b.n	402ef0 <xTimerGenericCommand+0x64>
  402ef8:	2040c388 	.word	0x2040c388
  402efc:	00402b2d 	.word	0x00402b2d
  402f00:	00401b79 	.word	0x00401b79
  402f04:	00401d5d 	.word	0x00401d5d

00402f08 <prvSwitchTimerLists>:
  402f08:	b570      	push	{r4, r5, r6, lr}
  402f0a:	b082      	sub	sp, #8
  402f0c:	4b1c      	ldr	r3, [pc, #112]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f0e:	681b      	ldr	r3, [r3, #0]
  402f10:	681a      	ldr	r2, [r3, #0]
  402f12:	2a00      	cmp	r2, #0
  402f14:	d02c      	beq.n	402f70 <prvSwitchTimerLists+0x68>
  402f16:	68db      	ldr	r3, [r3, #12]
  402f18:	681e      	ldr	r6, [r3, #0]
  402f1a:	68dc      	ldr	r4, [r3, #12]
  402f1c:	1d25      	adds	r5, r4, #4
  402f1e:	4628      	mov	r0, r5
  402f20:	4b18      	ldr	r3, [pc, #96]	; (402f84 <prvSwitchTimerLists+0x7c>)
  402f22:	4798      	blx	r3
  402f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402f26:	4620      	mov	r0, r4
  402f28:	4798      	blx	r3
  402f2a:	69e3      	ldr	r3, [r4, #28]
  402f2c:	2b01      	cmp	r3, #1
  402f2e:	d1ed      	bne.n	402f0c <prvSwitchTimerLists+0x4>
  402f30:	69a3      	ldr	r3, [r4, #24]
  402f32:	4433      	add	r3, r6
  402f34:	429e      	cmp	r6, r3
  402f36:	d207      	bcs.n	402f48 <prvSwitchTimerLists+0x40>
  402f38:	6063      	str	r3, [r4, #4]
  402f3a:	6124      	str	r4, [r4, #16]
  402f3c:	4629      	mov	r1, r5
  402f3e:	4b10      	ldr	r3, [pc, #64]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f40:	6818      	ldr	r0, [r3, #0]
  402f42:	4b11      	ldr	r3, [pc, #68]	; (402f88 <prvSwitchTimerLists+0x80>)
  402f44:	4798      	blx	r3
  402f46:	e7e1      	b.n	402f0c <prvSwitchTimerLists+0x4>
  402f48:	2100      	movs	r1, #0
  402f4a:	9100      	str	r1, [sp, #0]
  402f4c:	460b      	mov	r3, r1
  402f4e:	4632      	mov	r2, r6
  402f50:	4620      	mov	r0, r4
  402f52:	4c0e      	ldr	r4, [pc, #56]	; (402f8c <prvSwitchTimerLists+0x84>)
  402f54:	47a0      	blx	r4
  402f56:	2800      	cmp	r0, #0
  402f58:	d1d8      	bne.n	402f0c <prvSwitchTimerLists+0x4>
  402f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f5e:	b672      	cpsid	i
  402f60:	f383 8811 	msr	BASEPRI, r3
  402f64:	f3bf 8f6f 	isb	sy
  402f68:	f3bf 8f4f 	dsb	sy
  402f6c:	b662      	cpsie	i
  402f6e:	e7fe      	b.n	402f6e <prvSwitchTimerLists+0x66>
  402f70:	4a07      	ldr	r2, [pc, #28]	; (402f90 <prvSwitchTimerLists+0x88>)
  402f72:	6810      	ldr	r0, [r2, #0]
  402f74:	4902      	ldr	r1, [pc, #8]	; (402f80 <prvSwitchTimerLists+0x78>)
  402f76:	6008      	str	r0, [r1, #0]
  402f78:	6013      	str	r3, [r2, #0]
  402f7a:	b002      	add	sp, #8
  402f7c:	bd70      	pop	{r4, r5, r6, pc}
  402f7e:	bf00      	nop
  402f80:	2040c354 	.word	0x2040c354
  402f84:	00401489 	.word	0x00401489
  402f88:	00401455 	.word	0x00401455
  402f8c:	00402e8d 	.word	0x00402e8d
  402f90:	2040c358 	.word	0x2040c358

00402f94 <prvSampleTimeNow>:
  402f94:	b538      	push	{r3, r4, r5, lr}
  402f96:	4605      	mov	r5, r0
  402f98:	4b08      	ldr	r3, [pc, #32]	; (402fbc <prvSampleTimeNow+0x28>)
  402f9a:	4798      	blx	r3
  402f9c:	4604      	mov	r4, r0
  402f9e:	4b08      	ldr	r3, [pc, #32]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fa0:	681b      	ldr	r3, [r3, #0]
  402fa2:	4298      	cmp	r0, r3
  402fa4:	d305      	bcc.n	402fb2 <prvSampleTimeNow+0x1e>
  402fa6:	2300      	movs	r3, #0
  402fa8:	602b      	str	r3, [r5, #0]
  402faa:	4b05      	ldr	r3, [pc, #20]	; (402fc0 <prvSampleTimeNow+0x2c>)
  402fac:	601c      	str	r4, [r3, #0]
  402fae:	4620      	mov	r0, r4
  402fb0:	bd38      	pop	{r3, r4, r5, pc}
  402fb2:	4b04      	ldr	r3, [pc, #16]	; (402fc4 <prvSampleTimeNow+0x30>)
  402fb4:	4798      	blx	r3
  402fb6:	2301      	movs	r3, #1
  402fb8:	602b      	str	r3, [r5, #0]
  402fba:	e7f6      	b.n	402faa <prvSampleTimeNow+0x16>
  402fbc:	00402455 	.word	0x00402455
  402fc0:	2040c384 	.word	0x2040c384
  402fc4:	00402f09 	.word	0x00402f09

00402fc8 <prvProcessExpiredTimer>:
  402fc8:	b570      	push	{r4, r5, r6, lr}
  402fca:	b082      	sub	sp, #8
  402fcc:	4605      	mov	r5, r0
  402fce:	460e      	mov	r6, r1
  402fd0:	4b15      	ldr	r3, [pc, #84]	; (403028 <prvProcessExpiredTimer+0x60>)
  402fd2:	681b      	ldr	r3, [r3, #0]
  402fd4:	68db      	ldr	r3, [r3, #12]
  402fd6:	68dc      	ldr	r4, [r3, #12]
  402fd8:	1d20      	adds	r0, r4, #4
  402fda:	4b14      	ldr	r3, [pc, #80]	; (40302c <prvProcessExpiredTimer+0x64>)
  402fdc:	4798      	blx	r3
  402fde:	69e3      	ldr	r3, [r4, #28]
  402fe0:	2b01      	cmp	r3, #1
  402fe2:	d004      	beq.n	402fee <prvProcessExpiredTimer+0x26>
  402fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402fe6:	4620      	mov	r0, r4
  402fe8:	4798      	blx	r3
  402fea:	b002      	add	sp, #8
  402fec:	bd70      	pop	{r4, r5, r6, pc}
  402fee:	69a1      	ldr	r1, [r4, #24]
  402ff0:	462b      	mov	r3, r5
  402ff2:	4632      	mov	r2, r6
  402ff4:	4429      	add	r1, r5
  402ff6:	4620      	mov	r0, r4
  402ff8:	4e0d      	ldr	r6, [pc, #52]	; (403030 <prvProcessExpiredTimer+0x68>)
  402ffa:	47b0      	blx	r6
  402ffc:	2801      	cmp	r0, #1
  402ffe:	d1f1      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
  403000:	2100      	movs	r1, #0
  403002:	9100      	str	r1, [sp, #0]
  403004:	460b      	mov	r3, r1
  403006:	462a      	mov	r2, r5
  403008:	4620      	mov	r0, r4
  40300a:	4d0a      	ldr	r5, [pc, #40]	; (403034 <prvProcessExpiredTimer+0x6c>)
  40300c:	47a8      	blx	r5
  40300e:	2800      	cmp	r0, #0
  403010:	d1e8      	bne.n	402fe4 <prvProcessExpiredTimer+0x1c>
  403012:	f04f 0380 	mov.w	r3, #128	; 0x80
  403016:	b672      	cpsid	i
  403018:	f383 8811 	msr	BASEPRI, r3
  40301c:	f3bf 8f6f 	isb	sy
  403020:	f3bf 8f4f 	dsb	sy
  403024:	b662      	cpsie	i
  403026:	e7fe      	b.n	403026 <prvProcessExpiredTimer+0x5e>
  403028:	2040c354 	.word	0x2040c354
  40302c:	00401489 	.word	0x00401489
  403030:	00402cf9 	.word	0x00402cf9
  403034:	00402e8d 	.word	0x00402e8d

00403038 <prvProcessTimerOrBlockTask>:
  403038:	b570      	push	{r4, r5, r6, lr}
  40303a:	b082      	sub	sp, #8
  40303c:	4606      	mov	r6, r0
  40303e:	460c      	mov	r4, r1
  403040:	4b17      	ldr	r3, [pc, #92]	; (4030a0 <prvProcessTimerOrBlockTask+0x68>)
  403042:	4798      	blx	r3
  403044:	a801      	add	r0, sp, #4
  403046:	4b17      	ldr	r3, [pc, #92]	; (4030a4 <prvProcessTimerOrBlockTask+0x6c>)
  403048:	4798      	blx	r3
  40304a:	9b01      	ldr	r3, [sp, #4]
  40304c:	bb23      	cbnz	r3, 403098 <prvProcessTimerOrBlockTask+0x60>
  40304e:	4605      	mov	r5, r0
  403050:	42b0      	cmp	r0, r6
  403052:	bf28      	it	cs
  403054:	2c00      	cmpcs	r4, #0
  403056:	d018      	beq.n	40308a <prvProcessTimerOrBlockTask+0x52>
  403058:	b12c      	cbz	r4, 403066 <prvProcessTimerOrBlockTask+0x2e>
  40305a:	4b13      	ldr	r3, [pc, #76]	; (4030a8 <prvProcessTimerOrBlockTask+0x70>)
  40305c:	681b      	ldr	r3, [r3, #0]
  40305e:	681c      	ldr	r4, [r3, #0]
  403060:	fab4 f484 	clz	r4, r4
  403064:	0964      	lsrs	r4, r4, #5
  403066:	4622      	mov	r2, r4
  403068:	1b71      	subs	r1, r6, r5
  40306a:	4b10      	ldr	r3, [pc, #64]	; (4030ac <prvProcessTimerOrBlockTask+0x74>)
  40306c:	6818      	ldr	r0, [r3, #0]
  40306e:	4b10      	ldr	r3, [pc, #64]	; (4030b0 <prvProcessTimerOrBlockTask+0x78>)
  403070:	4798      	blx	r3
  403072:	4b10      	ldr	r3, [pc, #64]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  403074:	4798      	blx	r3
  403076:	b988      	cbnz	r0, 40309c <prvProcessTimerOrBlockTask+0x64>
  403078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40307c:	4b0e      	ldr	r3, [pc, #56]	; (4030b8 <prvProcessTimerOrBlockTask+0x80>)
  40307e:	601a      	str	r2, [r3, #0]
  403080:	f3bf 8f4f 	dsb	sy
  403084:	f3bf 8f6f 	isb	sy
  403088:	e008      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
  40308a:	4b0a      	ldr	r3, [pc, #40]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40308c:	4798      	blx	r3
  40308e:	4629      	mov	r1, r5
  403090:	4630      	mov	r0, r6
  403092:	4b0a      	ldr	r3, [pc, #40]	; (4030bc <prvProcessTimerOrBlockTask+0x84>)
  403094:	4798      	blx	r3
  403096:	e001      	b.n	40309c <prvProcessTimerOrBlockTask+0x64>
  403098:	4b06      	ldr	r3, [pc, #24]	; (4030b4 <prvProcessTimerOrBlockTask+0x7c>)
  40309a:	4798      	blx	r3
  40309c:	b002      	add	sp, #8
  40309e:	bd70      	pop	{r4, r5, r6, pc}
  4030a0:	00402445 	.word	0x00402445
  4030a4:	00402f95 	.word	0x00402f95
  4030a8:	2040c358 	.word	0x2040c358
  4030ac:	2040c388 	.word	0x2040c388
  4030b0:	00402069 	.word	0x00402069
  4030b4:	004025a5 	.word	0x004025a5
  4030b8:	e000ed04 	.word	0xe000ed04
  4030bc:	00402fc9 	.word	0x00402fc9

004030c0 <prvProcessReceivedCommands>:
  4030c0:	b530      	push	{r4, r5, lr}
  4030c2:	b089      	sub	sp, #36	; 0x24
  4030c4:	e002      	b.n	4030cc <prvProcessReceivedCommands+0xc>
  4030c6:	9b04      	ldr	r3, [sp, #16]
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	da10      	bge.n	4030ee <prvProcessReceivedCommands+0x2e>
  4030cc:	2300      	movs	r3, #0
  4030ce:	461a      	mov	r2, r3
  4030d0:	a904      	add	r1, sp, #16
  4030d2:	4839      	ldr	r0, [pc, #228]	; (4031b8 <prvProcessReceivedCommands+0xf8>)
  4030d4:	6800      	ldr	r0, [r0, #0]
  4030d6:	4c39      	ldr	r4, [pc, #228]	; (4031bc <prvProcessReceivedCommands+0xfc>)
  4030d8:	47a0      	blx	r4
  4030da:	2800      	cmp	r0, #0
  4030dc:	d069      	beq.n	4031b2 <prvProcessReceivedCommands+0xf2>
  4030de:	9b04      	ldr	r3, [sp, #16]
  4030e0:	2b00      	cmp	r3, #0
  4030e2:	daf0      	bge.n	4030c6 <prvProcessReceivedCommands+0x6>
  4030e4:	9907      	ldr	r1, [sp, #28]
  4030e6:	9806      	ldr	r0, [sp, #24]
  4030e8:	9b05      	ldr	r3, [sp, #20]
  4030ea:	4798      	blx	r3
  4030ec:	e7eb      	b.n	4030c6 <prvProcessReceivedCommands+0x6>
  4030ee:	9c06      	ldr	r4, [sp, #24]
  4030f0:	6963      	ldr	r3, [r4, #20]
  4030f2:	b113      	cbz	r3, 4030fa <prvProcessReceivedCommands+0x3a>
  4030f4:	1d20      	adds	r0, r4, #4
  4030f6:	4b32      	ldr	r3, [pc, #200]	; (4031c0 <prvProcessReceivedCommands+0x100>)
  4030f8:	4798      	blx	r3
  4030fa:	a803      	add	r0, sp, #12
  4030fc:	4b31      	ldr	r3, [pc, #196]	; (4031c4 <prvProcessReceivedCommands+0x104>)
  4030fe:	4798      	blx	r3
  403100:	9b04      	ldr	r3, [sp, #16]
  403102:	2b09      	cmp	r3, #9
  403104:	d8e2      	bhi.n	4030cc <prvProcessReceivedCommands+0xc>
  403106:	a201      	add	r2, pc, #4	; (adr r2, 40310c <prvProcessReceivedCommands+0x4c>)
  403108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40310c:	00403135 	.word	0x00403135
  403110:	00403135 	.word	0x00403135
  403114:	00403135 	.word	0x00403135
  403118:	004030cd 	.word	0x004030cd
  40311c:	00403181 	.word	0x00403181
  403120:	004031ab 	.word	0x004031ab
  403124:	00403135 	.word	0x00403135
  403128:	00403135 	.word	0x00403135
  40312c:	004030cd 	.word	0x004030cd
  403130:	00403181 	.word	0x00403181
  403134:	9905      	ldr	r1, [sp, #20]
  403136:	69a5      	ldr	r5, [r4, #24]
  403138:	460b      	mov	r3, r1
  40313a:	4602      	mov	r2, r0
  40313c:	4429      	add	r1, r5
  40313e:	4620      	mov	r0, r4
  403140:	4d21      	ldr	r5, [pc, #132]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403142:	47a8      	blx	r5
  403144:	2801      	cmp	r0, #1
  403146:	d1c1      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
  403148:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40314a:	4620      	mov	r0, r4
  40314c:	4798      	blx	r3
  40314e:	69e3      	ldr	r3, [r4, #28]
  403150:	2b01      	cmp	r3, #1
  403152:	d1bb      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
  403154:	69a2      	ldr	r2, [r4, #24]
  403156:	2100      	movs	r1, #0
  403158:	9100      	str	r1, [sp, #0]
  40315a:	460b      	mov	r3, r1
  40315c:	9805      	ldr	r0, [sp, #20]
  40315e:	4402      	add	r2, r0
  403160:	4620      	mov	r0, r4
  403162:	4c1a      	ldr	r4, [pc, #104]	; (4031cc <prvProcessReceivedCommands+0x10c>)
  403164:	47a0      	blx	r4
  403166:	2800      	cmp	r0, #0
  403168:	d1b0      	bne.n	4030cc <prvProcessReceivedCommands+0xc>
  40316a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40316e:	b672      	cpsid	i
  403170:	f383 8811 	msr	BASEPRI, r3
  403174:	f3bf 8f6f 	isb	sy
  403178:	f3bf 8f4f 	dsb	sy
  40317c:	b662      	cpsie	i
  40317e:	e7fe      	b.n	40317e <prvProcessReceivedCommands+0xbe>
  403180:	9905      	ldr	r1, [sp, #20]
  403182:	61a1      	str	r1, [r4, #24]
  403184:	b131      	cbz	r1, 403194 <prvProcessReceivedCommands+0xd4>
  403186:	4603      	mov	r3, r0
  403188:	4602      	mov	r2, r0
  40318a:	4401      	add	r1, r0
  40318c:	4620      	mov	r0, r4
  40318e:	4c0e      	ldr	r4, [pc, #56]	; (4031c8 <prvProcessReceivedCommands+0x108>)
  403190:	47a0      	blx	r4
  403192:	e79b      	b.n	4030cc <prvProcessReceivedCommands+0xc>
  403194:	f04f 0380 	mov.w	r3, #128	; 0x80
  403198:	b672      	cpsid	i
  40319a:	f383 8811 	msr	BASEPRI, r3
  40319e:	f3bf 8f6f 	isb	sy
  4031a2:	f3bf 8f4f 	dsb	sy
  4031a6:	b662      	cpsie	i
  4031a8:	e7fe      	b.n	4031a8 <prvProcessReceivedCommands+0xe8>
  4031aa:	4620      	mov	r0, r4
  4031ac:	4b08      	ldr	r3, [pc, #32]	; (4031d0 <prvProcessReceivedCommands+0x110>)
  4031ae:	4798      	blx	r3
  4031b0:	e78c      	b.n	4030cc <prvProcessReceivedCommands+0xc>
  4031b2:	b009      	add	sp, #36	; 0x24
  4031b4:	bd30      	pop	{r4, r5, pc}
  4031b6:	bf00      	nop
  4031b8:	2040c388 	.word	0x2040c388
  4031bc:	00401e6d 	.word	0x00401e6d
  4031c0:	00401489 	.word	0x00401489
  4031c4:	00402f95 	.word	0x00402f95
  4031c8:	00402cf9 	.word	0x00402cf9
  4031cc:	00402e8d 	.word	0x00402e8d
  4031d0:	00401831 	.word	0x00401831

004031d4 <prvTimerTask>:
  4031d4:	b500      	push	{lr}
  4031d6:	b083      	sub	sp, #12
  4031d8:	a801      	add	r0, sp, #4
  4031da:	4b04      	ldr	r3, [pc, #16]	; (4031ec <prvTimerTask+0x18>)
  4031dc:	4798      	blx	r3
  4031de:	9901      	ldr	r1, [sp, #4]
  4031e0:	4b03      	ldr	r3, [pc, #12]	; (4031f0 <prvTimerTask+0x1c>)
  4031e2:	4798      	blx	r3
  4031e4:	4b03      	ldr	r3, [pc, #12]	; (4031f4 <prvTimerTask+0x20>)
  4031e6:	4798      	blx	r3
  4031e8:	e7f6      	b.n	4031d8 <prvTimerTask+0x4>
  4031ea:	bf00      	nop
  4031ec:	00402cd9 	.word	0x00402cd9
  4031f0:	00403039 	.word	0x00403039
  4031f4:	004030c1 	.word	0x004030c1

004031f8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
  4031f8:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  4031fa:	4603      	mov	r3, r0
  4031fc:	b110      	cbz	r0, 403204 <lv_disp_get_scr_act+0xc>
    if(!disp) {
  4031fe:	b12b      	cbz	r3, 40320c <lv_disp_get_scr_act+0x14>
        LV_LOG_WARN("no display registered to get its active screen");
        return NULL;
    }

    return disp->act_scr;
  403200:	6c58      	ldr	r0, [r3, #68]	; 0x44
  403202:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403204:	4b02      	ldr	r3, [pc, #8]	; (403210 <lv_disp_get_scr_act+0x18>)
  403206:	4798      	blx	r3
  403208:	4603      	mov	r3, r0
  40320a:	e7f8      	b.n	4031fe <lv_disp_get_scr_act+0x6>
        return NULL;
  40320c:	2000      	movs	r0, #0
}
  40320e:	bd08      	pop	{r3, pc}
  403210:	00414625 	.word	0x00414625

00403214 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
  403214:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403216:	4603      	mov	r3, r0
  403218:	b110      	cbz	r0, 403220 <lv_disp_get_scr_prev+0xc>
    if(!disp) {
  40321a:	b12b      	cbz	r3, 403228 <lv_disp_get_scr_prev+0x14>
        LV_LOG_WARN("no display registered to get its previous screen");
        return NULL;
    }

    return disp->prev_scr;
  40321c:	6c98      	ldr	r0, [r3, #72]	; 0x48
  40321e:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403220:	4b02      	ldr	r3, [pc, #8]	; (40322c <lv_disp_get_scr_prev+0x18>)
  403222:	4798      	blx	r3
  403224:	4603      	mov	r3, r0
  403226:	e7f8      	b.n	40321a <lv_disp_get_scr_prev+0x6>
        return NULL;
  403228:	2000      	movs	r0, #0
}
  40322a:	bd08      	pop	{r3, pc}
  40322c:	00414625 	.word	0x00414625

00403230 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
  403230:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  403232:	4603      	mov	r3, r0
  403234:	b110      	cbz	r0, 40323c <lv_disp_get_layer_top+0xc>
    if(!disp) {
  403236:	b12b      	cbz	r3, 403244 <lv_disp_get_layer_top+0x14>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
        return NULL;
    }

    return disp->top_layer;
  403238:	6d18      	ldr	r0, [r3, #80]	; 0x50
  40323a:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  40323c:	4b02      	ldr	r3, [pc, #8]	; (403248 <lv_disp_get_layer_top+0x18>)
  40323e:	4798      	blx	r3
  403240:	4603      	mov	r3, r0
  403242:	e7f8      	b.n	403236 <lv_disp_get_layer_top+0x6>
        return NULL;
  403244:	2000      	movs	r0, #0
}
  403246:	bd08      	pop	{r3, pc}
  403248:	00414625 	.word	0x00414625

0040324c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
  40324c:	b508      	push	{r3, lr}
    if(!disp) disp = lv_disp_get_default();
  40324e:	4603      	mov	r3, r0
  403250:	b110      	cbz	r0, 403258 <lv_disp_get_layer_sys+0xc>
    if(!disp) {
  403252:	b12b      	cbz	r3, 403260 <lv_disp_get_layer_sys+0x14>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
        return NULL;
    }

    return disp->sys_layer;
  403254:	6d58      	ldr	r0, [r3, #84]	; 0x54
  403256:	bd08      	pop	{r3, pc}
    if(!disp) disp = lv_disp_get_default();
  403258:	4b02      	ldr	r3, [pc, #8]	; (403264 <lv_disp_get_layer_sys+0x18>)
  40325a:	4798      	blx	r3
  40325c:	4603      	mov	r3, r0
  40325e:	e7f8      	b.n	403252 <lv_disp_get_layer_sys+0x6>
        return NULL;
  403260:	2000      	movs	r0, #0
}
  403262:	bd08      	pop	{r3, pc}
  403264:	00414625 	.word	0x00414625

00403268 <obj_to_foreground>:

    if(group->focus_cb) group->focus_cb(group);
}

static void obj_to_foreground(lv_obj_t * obj)
{
  403268:	b510      	push	{r4, lr}
    /*Search for 'top' attribute*/
    lv_obj_t * i        = obj;
    lv_obj_t * last_top = NULL;
  40326a:	2400      	movs	r4, #0
    while(i != NULL) {
  40326c:	e001      	b.n	403272 <obj_to_foreground+0xa>
        if(i->top != 0) last_top = i;
        i = lv_obj_get_parent(i);
  40326e:	4b07      	ldr	r3, [pc, #28]	; (40328c <obj_to_foreground+0x24>)
  403270:	4798      	blx	r3
    while(i != NULL) {
  403272:	b130      	cbz	r0, 403282 <obj_to_foreground+0x1a>
        if(i->top != 0) last_top = i;
  403274:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403278:	f013 0f20 	tst.w	r3, #32
  40327c:	d0f7      	beq.n	40326e <obj_to_foreground+0x6>
  40327e:	4604      	mov	r4, r0
  403280:	e7f5      	b.n	40326e <obj_to_foreground+0x6>
    }

    if(last_top != NULL) {
  403282:	b114      	cbz	r4, 40328a <obj_to_foreground+0x22>
        /*Move the last_top object to the foreground*/
        lv_obj_move_foreground(last_top);
  403284:	4620      	mov	r0, r4
  403286:	4b02      	ldr	r3, [pc, #8]	; (403290 <obj_to_foreground+0x28>)
  403288:	4798      	blx	r3
  40328a:	bd10      	pop	{r4, pc}
  40328c:	004054f5 	.word	0x004054f5
  403290:	00405b1d 	.word	0x00405b1d

00403294 <focus_next_core>:
{
  403294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(group->frozen) return;
  403298:	7d03      	ldrb	r3, [r0, #20]
  40329a:	f013 0f01 	tst.w	r3, #1
  40329e:	d15f      	bne.n	403360 <focus_next_core+0xcc>
  4032a0:	4690      	mov	r8, r2
  4032a2:	4689      	mov	r9, r1
  4032a4:	4606      	mov	r6, r0
    lv_obj_t ** obj_next     = group->obj_focus;
  4032a6:	68c4      	ldr	r4, [r0, #12]
    bool can_begin           = true;
  4032a8:	2701      	movs	r7, #1
    lv_obj_t ** obj_sentinel = NULL;
  4032aa:	2500      	movs	r5, #0
        if(obj_next == NULL) {
  4032ac:	2c00      	cmp	r4, #0
  4032ae:	d042      	beq.n	403336 <focus_next_core+0xa2>
  4032b0:	2301      	movs	r3, #1
        if(obj_sentinel == NULL) {
  4032b2:	2d00      	cmp	r5, #0
  4032b4:	d04b      	beq.n	40334e <focus_next_core+0xba>
        if(can_move) {
  4032b6:	2b00      	cmp	r3, #0
  4032b8:	d14c      	bne.n	403354 <focus_next_core+0xc0>
        if(obj_next == NULL) continue;
  4032ba:	2c00      	cmp	r4, #0
  4032bc:	d0f6      	beq.n	4032ac <focus_next_core+0x18>
        if(lv_obj_get_state(*obj_next, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) continue;
  4032be:	2100      	movs	r1, #0
  4032c0:	6820      	ldr	r0, [r4, #0]
  4032c2:	4b28      	ldr	r3, [pc, #160]	; (403364 <focus_next_core+0xd0>)
  4032c4:	4798      	blx	r3
  4032c6:	f010 0f20 	tst.w	r0, #32
  4032ca:	d1ef      	bne.n	4032ac <focus_next_core+0x18>
        if(!lv_obj_get_hidden(*obj_next)) break;
  4032cc:	6820      	ldr	r0, [r4, #0]
  4032ce:	4b26      	ldr	r3, [pc, #152]	; (403368 <focus_next_core+0xd4>)
  4032d0:	4798      	blx	r3
  4032d2:	2800      	cmp	r0, #0
  4032d4:	d1ea      	bne.n	4032ac <focus_next_core+0x18>
    if(obj_next == group->obj_focus) return; /*There's only one visible object and it's already focused*/
  4032d6:	68f3      	ldr	r3, [r6, #12]
  4032d8:	429c      	cmp	r4, r3
  4032da:	d041      	beq.n	403360 <focus_next_core+0xcc>
    if(group->obj_focus) {
  4032dc:	b183      	cbz	r3, 403300 <focus_next_core+0x6c>
        (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4032de:	6818      	ldr	r0, [r3, #0]
  4032e0:	69c3      	ldr	r3, [r0, #28]
  4032e2:	2200      	movs	r2, #0
  4032e4:	2117      	movs	r1, #23
  4032e6:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  4032e8:	68f3      	ldr	r3, [r6, #12]
  4032ea:	2200      	movs	r2, #0
  4032ec:	210e      	movs	r1, #14
  4032ee:	6818      	ldr	r0, [r3, #0]
  4032f0:	4b1e      	ldr	r3, [pc, #120]	; (40336c <focus_next_core+0xd8>)
  4032f2:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4032f4:	2801      	cmp	r0, #1
  4032f6:	d133      	bne.n	403360 <focus_next_core+0xcc>
        lv_obj_invalidate(*group->obj_focus);
  4032f8:	68f3      	ldr	r3, [r6, #12]
  4032fa:	6818      	ldr	r0, [r3, #0]
  4032fc:	4b1c      	ldr	r3, [pc, #112]	; (403370 <focus_next_core+0xdc>)
  4032fe:	4798      	blx	r3
    group->obj_focus = obj_next;
  403300:	60f4      	str	r4, [r6, #12]
    (*group->obj_focus)->signal_cb(*group->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403302:	6820      	ldr	r0, [r4, #0]
  403304:	69c3      	ldr	r3, [r0, #28]
  403306:	2200      	movs	r2, #0
  403308:	2116      	movs	r1, #22
  40330a:	4798      	blx	r3
    lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40330c:	68f3      	ldr	r3, [r6, #12]
  40330e:	2200      	movs	r2, #0
  403310:	210d      	movs	r1, #13
  403312:	6818      	ldr	r0, [r3, #0]
  403314:	4b15      	ldr	r3, [pc, #84]	; (40336c <focus_next_core+0xd8>)
  403316:	4798      	blx	r3
    if(res != LV_RES_OK) return;
  403318:	2801      	cmp	r0, #1
  40331a:	d121      	bne.n	403360 <focus_next_core+0xcc>
    obj_to_foreground(*group->obj_focus);
  40331c:	68f3      	ldr	r3, [r6, #12]
  40331e:	6818      	ldr	r0, [r3, #0]
  403320:	4b14      	ldr	r3, [pc, #80]	; (403374 <focus_next_core+0xe0>)
  403322:	4798      	blx	r3
    lv_obj_invalidate(*group->obj_focus);
  403324:	68f3      	ldr	r3, [r6, #12]
  403326:	6818      	ldr	r0, [r3, #0]
  403328:	4b11      	ldr	r3, [pc, #68]	; (403370 <focus_next_core+0xdc>)
  40332a:	4798      	blx	r3
    if(group->focus_cb) group->focus_cb(group);
  40332c:	6933      	ldr	r3, [r6, #16]
  40332e:	b1bb      	cbz	r3, 403360 <focus_next_core+0xcc>
  403330:	4630      	mov	r0, r6
  403332:	4798      	blx	r3
  403334:	e014      	b.n	403360 <focus_next_core+0xcc>
            if(group->wrap || obj_sentinel == NULL) {
  403336:	7d33      	ldrb	r3, [r6, #20]
  403338:	f013 0f10 	tst.w	r3, #16
  40333c:	d100      	bne.n	403340 <focus_next_core+0xac>
  40333e:	b97d      	cbnz	r5, 403360 <focus_next_core+0xcc>
                if(!can_begin) return;
  403340:	b177      	cbz	r7, 403360 <focus_next_core+0xcc>
                obj_next  = begin(&group->obj_ll);
  403342:	4630      	mov	r0, r6
  403344:	47c8      	blx	r9
  403346:	4604      	mov	r4, r0
                can_begin = false;
  403348:	2700      	movs	r7, #0
                can_move  = false;
  40334a:	463b      	mov	r3, r7
                can_begin = false;
  40334c:	e7b1      	b.n	4032b2 <focus_next_core+0x1e>
            if(obj_sentinel == NULL) return; /*Group is empty*/
  40334e:	b13c      	cbz	r4, 403360 <focus_next_core+0xcc>
            obj_sentinel = obj_next;
  403350:	4625      	mov	r5, r4
  403352:	e7b0      	b.n	4032b6 <focus_next_core+0x22>
            obj_next = move(&group->obj_ll, obj_next);
  403354:	4621      	mov	r1, r4
  403356:	4630      	mov	r0, r6
  403358:	47c0      	blx	r8
  40335a:	4604      	mov	r4, r0
            if(obj_next == obj_sentinel) return;
  40335c:	4285      	cmp	r5, r0
  40335e:	d1ac      	bne.n	4032ba <focus_next_core+0x26>
  403360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  403364:	00406929 	.word	0x00406929
  403368:	00405911 	.word	0x00405911
  40336c:	004053e5 	.word	0x004053e5
  403370:	00405aa1 	.word	0x00405aa1
  403374:	00403269 	.word	0x00403269

00403378 <_lv_group_init>:
{
  403378:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_group_ll), sizeof(lv_group_t));
  40337a:	2118      	movs	r1, #24
  40337c:	4801      	ldr	r0, [pc, #4]	; (403384 <_lv_group_init+0xc>)
  40337e:	4b02      	ldr	r3, [pc, #8]	; (403388 <_lv_group_init+0x10>)
  403380:	4798      	blx	r3
  403382:	bd08      	pop	{r3, pc}
  403384:	2043a30c 	.word	0x2043a30c
  403388:	00415a1f 	.word	0x00415a1f

0040338c <lv_group_focus_next>:
{
  40338c:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_head, _lv_ll_get_next);
  40338e:	4a02      	ldr	r2, [pc, #8]	; (403398 <lv_group_focus_next+0xc>)
  403390:	4902      	ldr	r1, [pc, #8]	; (40339c <lv_group_focus_next+0x10>)
  403392:	4b03      	ldr	r3, [pc, #12]	; (4033a0 <lv_group_focus_next+0x14>)
  403394:	4798      	blx	r3
  403396:	bd08      	pop	{r3, pc}
  403398:	00415add 	.word	0x00415add
  40339c:	00415ac9 	.word	0x00415ac9
  4033a0:	00403295 	.word	0x00403295

004033a4 <lv_group_focus_prev>:
{
  4033a4:	b508      	push	{r3, lr}
    focus_next_core(group, _lv_ll_get_tail, _lv_ll_get_prev);
  4033a6:	4a02      	ldr	r2, [pc, #8]	; (4033b0 <lv_group_focus_prev+0xc>)
  4033a8:	4902      	ldr	r1, [pc, #8]	; (4033b4 <lv_group_focus_prev+0x10>)
  4033aa:	4b03      	ldr	r3, [pc, #12]	; (4033b8 <lv_group_focus_prev+0x14>)
  4033ac:	4798      	blx	r3
  4033ae:	bd08      	pop	{r3, pc}
  4033b0:	00415aeb 	.word	0x00415aeb
  4033b4:	00415ad3 	.word	0x00415ad3
  4033b8:	00403295 	.word	0x00403295

004033bc <lv_group_refocus>:
{
  4033bc:	b538      	push	{r3, r4, r5, lr}
  4033be:	4604      	mov	r4, r0
    uint8_t temp_wrap = g->wrap;
  4033c0:	7d03      	ldrb	r3, [r0, #20]
  4033c2:	f3c3 1500 	ubfx	r5, r3, #4, #1
    g->wrap           = 1;
  4033c6:	f043 0310 	orr.w	r3, r3, #16
  4033ca:	7503      	strb	r3, [r0, #20]
    if(g->refocus_policy == LV_GROUP_REFOCUS_POLICY_NEXT)
  4033cc:	f013 0f08 	tst.w	r3, #8
  4033d0:	d006      	beq.n	4033e0 <lv_group_refocus+0x24>
        lv_group_focus_prev(g);
  4033d2:	4b05      	ldr	r3, [pc, #20]	; (4033e8 <lv_group_refocus+0x2c>)
  4033d4:	4798      	blx	r3
    g->wrap = temp_wrap;
  4033d6:	7d23      	ldrb	r3, [r4, #20]
  4033d8:	f365 1304 	bfi	r3, r5, #4, #1
  4033dc:	7523      	strb	r3, [r4, #20]
  4033de:	bd38      	pop	{r3, r4, r5, pc}
        lv_group_focus_next(g);
  4033e0:	4b02      	ldr	r3, [pc, #8]	; (4033ec <lv_group_refocus+0x30>)
  4033e2:	4798      	blx	r3
  4033e4:	e7f7      	b.n	4033d6 <lv_group_refocus+0x1a>
  4033e6:	bf00      	nop
  4033e8:	004033a5 	.word	0x004033a5
  4033ec:	0040338d 	.word	0x0040338d

004033f0 <lv_group_add_obj>:
    if(group == NULL) return;
  4033f0:	2800      	cmp	r0, #0
  4033f2:	d031      	beq.n	403458 <lv_group_add_obj+0x68>
{
  4033f4:	b570      	push	{r4, r5, r6, lr}
  4033f6:	4605      	mov	r5, r0
  4033f8:	460c      	mov	r4, r1
    _LV_LL_READ(group->obj_ll, obj_i) {
  4033fa:	4606      	mov	r6, r0
  4033fc:	4b17      	ldr	r3, [pc, #92]	; (40345c <lv_group_add_obj+0x6c>)
  4033fe:	4798      	blx	r3
  403400:	b138      	cbz	r0, 403412 <lv_group_add_obj+0x22>
        if((*obj_i) == obj) {
  403402:	6803      	ldr	r3, [r0, #0]
  403404:	42a3      	cmp	r3, r4
  403406:	d01c      	beq.n	403442 <lv_group_add_obj+0x52>
    _LV_LL_READ(group->obj_ll, obj_i) {
  403408:	4601      	mov	r1, r0
  40340a:	4630      	mov	r0, r6
  40340c:	4b14      	ldr	r3, [pc, #80]	; (403460 <lv_group_add_obj+0x70>)
  40340e:	4798      	blx	r3
  403410:	e7f6      	b.n	403400 <lv_group_add_obj+0x10>
    if(obj->group_p) {
  403412:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  403414:	b133      	cbz	r3, 403424 <lv_group_add_obj+0x34>
        if(lv_obj_is_focused(obj)) {
  403416:	4620      	mov	r0, r4
  403418:	4b12      	ldr	r3, [pc, #72]	; (403464 <lv_group_add_obj+0x74>)
  40341a:	4798      	blx	r3
  40341c:	b110      	cbz	r0, 403424 <lv_group_add_obj+0x34>
            lv_group_refocus(obj->group_p);
  40341e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  403420:	4b11      	ldr	r3, [pc, #68]	; (403468 <lv_group_add_obj+0x78>)
  403422:	4798      	blx	r3
    obj->group_p     = group;
  403424:	63a5      	str	r5, [r4, #56]	; 0x38
    lv_obj_t ** next = _lv_ll_ins_tail(&group->obj_ll);
  403426:	4628      	mov	r0, r5
  403428:	4b10      	ldr	r3, [pc, #64]	; (40346c <lv_group_add_obj+0x7c>)
  40342a:	4798      	blx	r3
  40342c:	4606      	mov	r6, r0
    LV_ASSERT_MEM(next);
  40342e:	4b10      	ldr	r3, [pc, #64]	; (403470 <lv_group_add_obj+0x80>)
  403430:	4798      	blx	r3
  403432:	b138      	cbz	r0, 403444 <lv_group_add_obj+0x54>
    if(next == NULL) return;
  403434:	b12e      	cbz	r6, 403442 <lv_group_add_obj+0x52>
    *next = obj;
  403436:	6034      	str	r4, [r6, #0]
    if(_lv_ll_get_head(&group->obj_ll) == next) {
  403438:	4628      	mov	r0, r5
  40343a:	4b08      	ldr	r3, [pc, #32]	; (40345c <lv_group_add_obj+0x6c>)
  40343c:	4798      	blx	r3
  40343e:	4286      	cmp	r6, r0
  403440:	d006      	beq.n	403450 <lv_group_add_obj+0x60>
  403442:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(next);
  403444:	4632      	mov	r2, r6
  403446:	2300      	movs	r3, #0
  403448:	480a      	ldr	r0, [pc, #40]	; (403474 <lv_group_add_obj+0x84>)
  40344a:	490b      	ldr	r1, [pc, #44]	; (403478 <lv_group_add_obj+0x88>)
  40344c:	4788      	blx	r1
  40344e:	e7fe      	b.n	40344e <lv_group_add_obj+0x5e>
        lv_group_refocus(group);
  403450:	4628      	mov	r0, r5
  403452:	4b05      	ldr	r3, [pc, #20]	; (403468 <lv_group_add_obj+0x78>)
  403454:	4798      	blx	r3
  403456:	e7f4      	b.n	403442 <lv_group_add_obj+0x52>
  403458:	4770      	bx	lr
  40345a:	bf00      	nop
  40345c:	00415ac9 	.word	0x00415ac9
  403460:	00415add 	.word	0x00415add
  403464:	00407d39 	.word	0x00407d39
  403468:	004033bd 	.word	0x004033bd
  40346c:	00415a7d 	.word	0x00415a7d
  403470:	004157b9 	.word	0x004157b9
  403474:	004260b0 	.word	0x004260b0
  403478:	004157c5 	.word	0x004157c5

0040347c <lv_group_remove_obj>:
{
  40347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lv_group_t * g = obj->group_p;
  40347e:	6b87      	ldr	r7, [r0, #56]	; 0x38
    if(g == NULL) return;
  403480:	2f00      	cmp	r7, #0
  403482:	d043      	beq.n	40350c <lv_group_remove_obj+0x90>
  403484:	4605      	mov	r5, r0
    if(*g->obj_focus == obj) {
  403486:	68fb      	ldr	r3, [r7, #12]
  403488:	681b      	ldr	r3, [r3, #0]
  40348a:	4298      	cmp	r0, r3
  40348c:	d013      	beq.n	4034b6 <lv_group_remove_obj+0x3a>
    if(*g->obj_focus == obj) {
  40348e:	68fb      	ldr	r3, [r7, #12]
  403490:	681b      	ldr	r3, [r3, #0]
  403492:	429d      	cmp	r5, r3
  403494:	d02d      	beq.n	4034f2 <lv_group_remove_obj+0x76>
    _LV_LL_READ(g->obj_ll, i) {
  403496:	463e      	mov	r6, r7
  403498:	4638      	mov	r0, r7
  40349a:	4b1d      	ldr	r3, [pc, #116]	; (403510 <lv_group_remove_obj+0x94>)
  40349c:	4798      	blx	r3
  40349e:	4604      	mov	r4, r0
  4034a0:	2c00      	cmp	r4, #0
  4034a2:	d033      	beq.n	40350c <lv_group_remove_obj+0x90>
        if(*i == obj) {
  4034a4:	6823      	ldr	r3, [r4, #0]
  4034a6:	429d      	cmp	r5, r3
  4034a8:	d026      	beq.n	4034f8 <lv_group_remove_obj+0x7c>
    _LV_LL_READ(g->obj_ll, i) {
  4034aa:	4621      	mov	r1, r4
  4034ac:	4630      	mov	r0, r6
  4034ae:	4b19      	ldr	r3, [pc, #100]	; (403514 <lv_group_remove_obj+0x98>)
  4034b0:	4798      	blx	r3
  4034b2:	4604      	mov	r4, r0
  4034b4:	e7f4      	b.n	4034a0 <lv_group_remove_obj+0x24>
        if(g->frozen) g->frozen = 0;
  4034b6:	7d3b      	ldrb	r3, [r7, #20]
  4034b8:	f013 0f01 	tst.w	r3, #1
  4034bc:	d003      	beq.n	4034c6 <lv_group_remove_obj+0x4a>
  4034be:	7d3b      	ldrb	r3, [r7, #20]
  4034c0:	f36f 0300 	bfc	r3, #0, #1
  4034c4:	753b      	strb	r3, [r7, #20]
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4034c6:	4638      	mov	r0, r7
  4034c8:	4b11      	ldr	r3, [pc, #68]	; (403510 <lv_group_remove_obj+0x94>)
  4034ca:	4798      	blx	r3
  4034cc:	68fb      	ldr	r3, [r7, #12]
  4034ce:	4283      	cmp	r3, r0
  4034d0:	d003      	beq.n	4034da <lv_group_remove_obj+0x5e>
            lv_group_refocus(g);
  4034d2:	4638      	mov	r0, r7
  4034d4:	4b10      	ldr	r3, [pc, #64]	; (403518 <lv_group_remove_obj+0x9c>)
  4034d6:	4798      	blx	r3
  4034d8:	e7d9      	b.n	40348e <lv_group_remove_obj+0x12>
        if(_lv_ll_get_head(&g->obj_ll) == g->obj_focus && _lv_ll_get_tail(&g->obj_ll) == g->obj_focus) {
  4034da:	4638      	mov	r0, r7
  4034dc:	4b0f      	ldr	r3, [pc, #60]	; (40351c <lv_group_remove_obj+0xa0>)
  4034de:	4798      	blx	r3
  4034e0:	68fb      	ldr	r3, [r7, #12]
  4034e2:	4283      	cmp	r3, r0
  4034e4:	d1f5      	bne.n	4034d2 <lv_group_remove_obj+0x56>
            (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  4034e6:	6818      	ldr	r0, [r3, #0]
  4034e8:	69c3      	ldr	r3, [r0, #28]
  4034ea:	2200      	movs	r2, #0
  4034ec:	2117      	movs	r1, #23
  4034ee:	4798      	blx	r3
  4034f0:	e7cd      	b.n	40348e <lv_group_remove_obj+0x12>
        g->obj_focus = NULL;
  4034f2:	2300      	movs	r3, #0
  4034f4:	60fb      	str	r3, [r7, #12]
  4034f6:	e7ce      	b.n	403496 <lv_group_remove_obj+0x1a>
            _lv_ll_remove(&g->obj_ll, i);
  4034f8:	4621      	mov	r1, r4
  4034fa:	4638      	mov	r0, r7
  4034fc:	4b08      	ldr	r3, [pc, #32]	; (403520 <lv_group_remove_obj+0xa4>)
  4034fe:	4798      	blx	r3
            lv_mem_free(i);
  403500:	4620      	mov	r0, r4
  403502:	4b08      	ldr	r3, [pc, #32]	; (403524 <lv_group_remove_obj+0xa8>)
  403504:	4798      	blx	r3
            obj->group_p = NULL;
  403506:	2300      	movs	r3, #0
  403508:	63ab      	str	r3, [r5, #56]	; 0x38
            break;
  40350a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40350c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40350e:	bf00      	nop
  403510:	00415ac9 	.word	0x00415ac9
  403514:	00415add 	.word	0x00415add
  403518:	004033bd 	.word	0x004033bd
  40351c:	00415ad3 	.word	0x00415ad3
  403520:	00415b85 	.word	0x00415b85
  403524:	00415f85 	.word	0x00415f85

00403528 <lv_group_get_focused>:
    if(!group) return NULL;
  403528:	b118      	cbz	r0, 403532 <lv_group_get_focused+0xa>
    if(group->obj_focus == NULL) return NULL;
  40352a:	68c3      	ldr	r3, [r0, #12]
  40352c:	b11b      	cbz	r3, 403536 <lv_group_get_focused+0xe>
    return *group->obj_focus;
  40352e:	6818      	ldr	r0, [r3, #0]
  403530:	4770      	bx	lr
    if(!group) return NULL;
  403532:	2000      	movs	r0, #0
  403534:	4770      	bx	lr
    if(group->obj_focus == NULL) return NULL;
  403536:	2000      	movs	r0, #0
}
  403538:	4770      	bx	lr
	...

0040353c <lv_group_send_data>:
{
  40353c:	b510      	push	{r4, lr}
  40353e:	b082      	sub	sp, #8
  403540:	9101      	str	r1, [sp, #4]
    lv_obj_t * act = lv_group_get_focused(group);
  403542:	4b0a      	ldr	r3, [pc, #40]	; (40356c <lv_group_send_data+0x30>)
  403544:	4798      	blx	r3
    if(act == NULL) return LV_RES_OK;
  403546:	b170      	cbz	r0, 403566 <lv_group_send_data+0x2a>
  403548:	4604      	mov	r4, r0
    res = act->signal_cb(act, LV_SIGNAL_CONTROL, &c);
  40354a:	69c3      	ldr	r3, [r0, #28]
  40354c:	aa01      	add	r2, sp, #4
  40354e:	2118      	movs	r1, #24
  403550:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
  403552:	2801      	cmp	r0, #1
  403554:	d001      	beq.n	40355a <lv_group_send_data+0x1e>
}
  403556:	b002      	add	sp, #8
  403558:	bd10      	pop	{r4, pc}
    res = lv_event_send(act, LV_EVENT_KEY, &c);
  40355a:	aa01      	add	r2, sp, #4
  40355c:	210c      	movs	r1, #12
  40355e:	4620      	mov	r0, r4
  403560:	4b03      	ldr	r3, [pc, #12]	; (403570 <lv_group_send_data+0x34>)
  403562:	4798      	blx	r3
  403564:	e7f7      	b.n	403556 <lv_group_send_data+0x1a>
    if(act == NULL) return LV_RES_OK;
  403566:	2001      	movs	r0, #1
  403568:	e7f5      	b.n	403556 <lv_group_send_data+0x1a>
  40356a:	bf00      	nop
  40356c:	00403529 	.word	0x00403529
  403570:	004053e5 	.word	0x004053e5

00403574 <lv_group_set_editing>:
    if(group == NULL) return;
  403574:	b1f8      	cbz	r0, 4035b6 <lv_group_set_editing+0x42>
{
  403576:	b538      	push	{r3, r4, r5, lr}
  403578:	4604      	mov	r4, r0
    if(en_val == group->editing) return; /*Do not set the same mode again*/
  40357a:	7d03      	ldrb	r3, [r0, #20]
  40357c:	f3c3 0340 	ubfx	r3, r3, #1, #1
  403580:	4299      	cmp	r1, r3
  403582:	d013      	beq.n	4035ac <lv_group_set_editing+0x38>
    group->editing     = en_val;
  403584:	7d03      	ldrb	r3, [r0, #20]
  403586:	f361 0341 	bfi	r3, r1, #1, #1
  40358a:	7503      	strb	r3, [r0, #20]
    lv_obj_t * focused = lv_group_get_focused(group);
  40358c:	4b0a      	ldr	r3, [pc, #40]	; (4035b8 <lv_group_set_editing+0x44>)
  40358e:	4798      	blx	r3
    if(focused) {
  403590:	4605      	mov	r5, r0
  403592:	b158      	cbz	r0, 4035ac <lv_group_set_editing+0x38>
        focused->signal_cb(focused, LV_SIGNAL_FOCUS, NULL); /*Focus again to properly leave/open edit/navigate mode*/
  403594:	69c3      	ldr	r3, [r0, #28]
  403596:	2200      	movs	r2, #0
  403598:	2116      	movs	r1, #22
  40359a:	4798      	blx	r3
        lv_res_t res = lv_event_send(*group->obj_focus, LV_EVENT_FOCUSED, NULL);
  40359c:	68e3      	ldr	r3, [r4, #12]
  40359e:	2200      	movs	r2, #0
  4035a0:	210d      	movs	r1, #13
  4035a2:	6818      	ldr	r0, [r3, #0]
  4035a4:	4b05      	ldr	r3, [pc, #20]	; (4035bc <lv_group_set_editing+0x48>)
  4035a6:	4798      	blx	r3
        if(res != LV_RES_OK) return;
  4035a8:	2801      	cmp	r0, #1
  4035aa:	d000      	beq.n	4035ae <lv_group_set_editing+0x3a>
  4035ac:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(focused);
  4035ae:	4628      	mov	r0, r5
  4035b0:	4b03      	ldr	r3, [pc, #12]	; (4035c0 <lv_group_set_editing+0x4c>)
  4035b2:	4798      	blx	r3
  4035b4:	e7fa      	b.n	4035ac <lv_group_set_editing+0x38>
  4035b6:	4770      	bx	lr
  4035b8:	00403529 	.word	0x00403529
  4035bc:	004053e5 	.word	0x004053e5
  4035c0:	00405aa1 	.word	0x00405aa1

004035c4 <lv_group_focus_obj>:
    if(obj == NULL) return;
  4035c4:	2800      	cmp	r0, #0
  4035c6:	d04e      	beq.n	403666 <lv_group_focus_obj+0xa2>
{
  4035c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4035ca:	4605      	mov	r5, r0
    lv_group_t * g = obj->group_p;
  4035cc:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if(g == NULL) return;
  4035ce:	b356      	cbz	r6, 403626 <lv_group_focus_obj+0x62>
    if(g->frozen != 0) return;
  4035d0:	7d33      	ldrb	r3, [r6, #20]
  4035d2:	f013 0f01 	tst.w	r3, #1
  4035d6:	d126      	bne.n	403626 <lv_group_focus_obj+0x62>
    if(g->obj_focus != NULL && obj == *g->obj_focus) return;
  4035d8:	68f3      	ldr	r3, [r6, #12]
  4035da:	b113      	cbz	r3, 4035e2 <lv_group_focus_obj+0x1e>
  4035dc:	681b      	ldr	r3, [r3, #0]
  4035de:	4298      	cmp	r0, r3
  4035e0:	d021      	beq.n	403626 <lv_group_focus_obj+0x62>
    lv_group_set_editing(g, false);
  4035e2:	2100      	movs	r1, #0
  4035e4:	4630      	mov	r0, r6
  4035e6:	4b20      	ldr	r3, [pc, #128]	; (403668 <lv_group_focus_obj+0xa4>)
  4035e8:	4798      	blx	r3
    _LV_LL_READ(g->obj_ll, i) {
  4035ea:	4637      	mov	r7, r6
  4035ec:	4630      	mov	r0, r6
  4035ee:	4b1f      	ldr	r3, [pc, #124]	; (40366c <lv_group_focus_obj+0xa8>)
  4035f0:	4798      	blx	r3
  4035f2:	4604      	mov	r4, r0
  4035f4:	b1bc      	cbz	r4, 403626 <lv_group_focus_obj+0x62>
        if(*i == obj) {
  4035f6:	6823      	ldr	r3, [r4, #0]
  4035f8:	429d      	cmp	r5, r3
  4035fa:	d005      	beq.n	403608 <lv_group_focus_obj+0x44>
    _LV_LL_READ(g->obj_ll, i) {
  4035fc:	4621      	mov	r1, r4
  4035fe:	4638      	mov	r0, r7
  403600:	4b1b      	ldr	r3, [pc, #108]	; (403670 <lv_group_focus_obj+0xac>)
  403602:	4798      	blx	r3
  403604:	4604      	mov	r4, r0
  403606:	e7f5      	b.n	4035f4 <lv_group_focus_obj+0x30>
            if(g->obj_focus != NULL) {
  403608:	68f3      	ldr	r3, [r6, #12]
  40360a:	b18b      	cbz	r3, 403630 <lv_group_focus_obj+0x6c>
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_DEFOCUS, NULL);
  40360c:	6818      	ldr	r0, [r3, #0]
  40360e:	69c3      	ldr	r3, [r0, #28]
  403610:	2200      	movs	r2, #0
  403612:	2117      	movs	r1, #23
  403614:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_DEFOCUSED, NULL);
  403616:	68f3      	ldr	r3, [r6, #12]
  403618:	2200      	movs	r2, #0
  40361a:	210e      	movs	r1, #14
  40361c:	6818      	ldr	r0, [r3, #0]
  40361e:	4b15      	ldr	r3, [pc, #84]	; (403674 <lv_group_focus_obj+0xb0>)
  403620:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403622:	2801      	cmp	r0, #1
  403624:	d000      	beq.n	403628 <lv_group_focus_obj+0x64>
  403626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_obj_invalidate(*g->obj_focus);
  403628:	68f3      	ldr	r3, [r6, #12]
  40362a:	6818      	ldr	r0, [r3, #0]
  40362c:	4b12      	ldr	r3, [pc, #72]	; (403678 <lv_group_focus_obj+0xb4>)
  40362e:	4798      	blx	r3
            g->obj_focus = i;
  403630:	60f4      	str	r4, [r6, #12]
                (*g->obj_focus)->signal_cb(*g->obj_focus, LV_SIGNAL_FOCUS, NULL);
  403632:	6820      	ldr	r0, [r4, #0]
  403634:	69c3      	ldr	r3, [r0, #28]
  403636:	2200      	movs	r2, #0
  403638:	2116      	movs	r1, #22
  40363a:	4798      	blx	r3
                if(g->focus_cb) g->focus_cb(g);
  40363c:	6933      	ldr	r3, [r6, #16]
  40363e:	b10b      	cbz	r3, 403644 <lv_group_focus_obj+0x80>
  403640:	4630      	mov	r0, r6
  403642:	4798      	blx	r3
                lv_res_t res = lv_event_send(*g->obj_focus, LV_EVENT_FOCUSED, NULL);
  403644:	68f3      	ldr	r3, [r6, #12]
  403646:	2200      	movs	r2, #0
  403648:	210d      	movs	r1, #13
  40364a:	6818      	ldr	r0, [r3, #0]
  40364c:	4b09      	ldr	r3, [pc, #36]	; (403674 <lv_group_focus_obj+0xb0>)
  40364e:	4798      	blx	r3
                if(res != LV_RES_OK) return;
  403650:	2801      	cmp	r0, #1
  403652:	d1e8      	bne.n	403626 <lv_group_focus_obj+0x62>
                lv_obj_invalidate(*g->obj_focus);
  403654:	68f3      	ldr	r3, [r6, #12]
  403656:	6818      	ldr	r0, [r3, #0]
  403658:	4b07      	ldr	r3, [pc, #28]	; (403678 <lv_group_focus_obj+0xb4>)
  40365a:	4798      	blx	r3
                obj_to_foreground(*g->obj_focus);
  40365c:	68f3      	ldr	r3, [r6, #12]
  40365e:	6818      	ldr	r0, [r3, #0]
  403660:	4b06      	ldr	r3, [pc, #24]	; (40367c <lv_group_focus_obj+0xb8>)
  403662:	4798      	blx	r3
  403664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403666:	4770      	bx	lr
  403668:	00403575 	.word	0x00403575
  40366c:	00415ac9 	.word	0x00415ac9
  403670:	00415add 	.word	0x00415add
  403674:	004053e5 	.word	0x004053e5
  403678:	00405aa1 	.word	0x00405aa1
  40367c:	00403269 	.word	0x00403269

00403680 <lv_group_get_editing>:
    if(!group) return false;
  403680:	b118      	cbz	r0, 40368a <lv_group_get_editing+0xa>
    return group->editing ? true : false;
  403682:	7d00      	ldrb	r0, [r0, #20]
  403684:	f3c0 0040 	ubfx	r0, r0, #1, #1
  403688:	4770      	bx	lr
    if(!group) return false;
  40368a:	2000      	movs	r0, #0
}
  40368c:	4770      	bx	lr
	...

00403690 <indev_proc_reset_query_handler>:
 * Reset input device if a reset query has been sent to it
 * @param indev pointer to an input device
 */
static void indev_proc_reset_query_handler(lv_indev_t * indev)
{
    if(indev->proc.reset_query) {
  403690:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  403694:	f013 0f02 	tst.w	r3, #2
  403698:	d022      	beq.n	4036e0 <indev_proc_reset_query_handler+0x50>
{
  40369a:	b410      	push	{r4}
        indev->proc.types.pointer.act_obj           = NULL;
  40369c:	2300      	movs	r3, #0
  40369e:	6343      	str	r3, [r0, #52]	; 0x34
        indev->proc.types.pointer.last_obj          = NULL;
  4036a0:	6383      	str	r3, [r0, #56]	; 0x38
        indev->proc.types.pointer.drag_limit_out    = 0;
  4036a2:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_in_prog      = 0;
        indev->proc.long_pr_sent                    = 0;
  4036a6:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
        indev->proc.pr_timestamp                    = 0;
  4036aa:	6483      	str	r3, [r0, #72]	; 0x48
        indev->proc.longpr_rep_timestamp            = 0;
  4036ac:	64c3      	str	r3, [r0, #76]	; 0x4c
        indev->proc.types.pointer.drag_sum.x        = 0;
  4036ae:	8583      	strh	r3, [r0, #44]	; 0x2c
        indev->proc.types.pointer.drag_sum.y        = 0;
  4036b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
        indev->proc.types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  4036b2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  4036b6:	2403      	movs	r4, #3
  4036b8:	f364 0184 	bfi	r1, r4, #2, #3
  4036bc:	f880 1046 	strb.w	r1, [r0, #70]	; 0x46
        indev->proc.types.pointer.drag_throw_vect.x = 0;
  4036c0:	8603      	strh	r3, [r0, #48]	; 0x30
        indev->proc.types.pointer.drag_throw_vect.y = 0;
  4036c2:	8643      	strh	r3, [r0, #50]	; 0x32
        indev->proc.types.pointer.gesture_sum.x     = 0;
  4036c4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
        indev->proc.types.pointer.gesture_sum.y     = 0;
  4036c8:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
        indev->proc.reset_query                     = 0;
  4036cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  4036d0:	f363 0241 	bfi	r2, r3, #1, #1
  4036d4:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        indev_obj_act                               = NULL;
  4036d8:	4a02      	ldr	r2, [pc, #8]	; (4036e4 <indev_proc_reset_query_handler+0x54>)
  4036da:	6013      	str	r3, [r2, #0]
    }
}
  4036dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4036e0:	4770      	bx	lr
  4036e2:	bf00      	nop
  4036e4:	2040c390 	.word	0x2040c390

004036e8 <indev_reset_check>:
 * @param proc pointer to an input device 'proc'
 * @return true if indev query should be immediately truncated.
 */
static bool indev_reset_check(lv_indev_proc_t * proc)
{
    if(proc->reset_query) {
  4036e8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
  4036ec:	f010 0002 	ands.w	r0, r0, #2
  4036f0:	d002      	beq.n	4036f8 <indev_reset_check+0x10>
        indev_obj_act = NULL;
  4036f2:	2200      	movs	r2, #0
  4036f4:	4b02      	ldr	r3, [pc, #8]	; (403700 <indev_reset_check+0x18>)
  4036f6:	601a      	str	r2, [r3, #0]
    }

    return proc->reset_query ? true : false;
}
  4036f8:	3000      	adds	r0, #0
  4036fa:	bf18      	it	ne
  4036fc:	2001      	movne	r0, #1
  4036fe:	4770      	bx	lr
  403700:	2040c390 	.word	0x2040c390

00403704 <get_dragged_obj>:
{
  403704:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  403706:	4604      	mov	r4, r0
  403708:	b920      	cbnz	r0, 403714 <get_dragged_obj+0x10>
  40370a:	e009      	b.n	403720 <get_dragged_obj+0x1c>
        drag_obj = lv_obj_get_parent(drag_obj);
  40370c:	4620      	mov	r0, r4
  40370e:	4b05      	ldr	r3, [pc, #20]	; (403724 <get_dragged_obj+0x20>)
  403710:	4798      	blx	r3
  403712:	4604      	mov	r4, r0
    while(lv_obj_get_drag_parent(drag_obj) != false && drag_obj != NULL) {
  403714:	4620      	mov	r0, r4
  403716:	4b04      	ldr	r3, [pc, #16]	; (403728 <get_dragged_obj+0x24>)
  403718:	4798      	blx	r3
  40371a:	b108      	cbz	r0, 403720 <get_dragged_obj+0x1c>
  40371c:	2c00      	cmp	r4, #0
  40371e:	d1f5      	bne.n	40370c <get_dragged_obj+0x8>
}
  403720:	4620      	mov	r0, r4
  403722:	bd10      	pop	{r4, pc}
  403724:	004054f5 	.word	0x004054f5
  403728:	00406315 	.word	0x00406315

0040372c <indev_drag_throw>:
    if(proc->types.pointer.drag_in_prog == 0) return;
  40372c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403730:	f013 0f02 	tst.w	r3, #2
  403734:	d100      	bne.n	403738 <indev_drag_throw+0xc>
  403736:	4770      	bx	lr
{
  403738:	b5f0      	push	{r4, r5, r6, r7, lr}
  40373a:	b085      	sub	sp, #20
  40373c:	4604      	mov	r4, r0
    lv_obj_t * drag_obj = get_dragged_obj(proc->types.pointer.last_obj);
  40373e:	69c0      	ldr	r0, [r0, #28]
  403740:	4b64      	ldr	r3, [pc, #400]	; (4038d4 <indev_drag_throw+0x1a8>)
  403742:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403744:	4605      	mov	r5, r0
  403746:	b190      	cbz	r0, 40376e <indev_drag_throw+0x42>
    if(lv_obj_get_drag_throw(drag_obj) == false) {
  403748:	4b63      	ldr	r3, [pc, #396]	; (4038d8 <indev_drag_throw+0x1ac>)
  40374a:	4798      	blx	r3
  40374c:	b9b8      	cbnz	r0, 40377e <indev_drag_throw+0x52>
        proc->types.pointer.drag_in_prog = 0;
  40374e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403752:	f36f 0341 	bfc	r3, #1, #1
  403756:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  40375a:	69eb      	ldr	r3, [r5, #28]
  40375c:	4a5f      	ldr	r2, [pc, #380]	; (4038dc <indev_drag_throw+0x1b0>)
  40375e:	6812      	ldr	r2, [r2, #0]
  403760:	2113      	movs	r1, #19
  403762:	4628      	mov	r0, r5
  403764:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403766:	4620      	mov	r0, r4
  403768:	4b5d      	ldr	r3, [pc, #372]	; (4038e0 <indev_drag_throw+0x1b4>)
  40376a:	4798      	blx	r3
  40376c:	b108      	cbz	r0, 403772 <indev_drag_throw+0x46>
}
  40376e:	b005      	add	sp, #20
  403770:	bdf0      	pop	{r4, r5, r6, r7, pc}
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403772:	2200      	movs	r2, #0
  403774:	2109      	movs	r1, #9
  403776:	4628      	mov	r0, r5
  403778:	4b5a      	ldr	r3, [pc, #360]	; (4038e4 <indev_drag_throw+0x1b8>)
  40377a:	4798      	blx	r3
        return;
  40377c:	e7f7      	b.n	40376e <indev_drag_throw+0x42>
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  40377e:	4628      	mov	r0, r5
  403780:	4b59      	ldr	r3, [pc, #356]	; (4038e8 <indev_drag_throw+0x1bc>)
  403782:	4798      	blx	r3
  403784:	4606      	mov	r6, r0
        proc->types.pointer.drag_throw_vect.x * (100 - indev_act->driver.drag_throw) / 100;
  403786:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  40378a:	4a54      	ldr	r2, [pc, #336]	; (4038dc <indev_drag_throw+0x1b0>)
  40378c:	6812      	ldr	r2, [r2, #0]
  40378e:	7d51      	ldrb	r1, [r2, #21]
  403790:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
  403794:	fb01 f103 	mul.w	r1, r1, r3
  403798:	4854      	ldr	r0, [pc, #336]	; (4038ec <indev_drag_throw+0x1c0>)
  40379a:	fb80 7301 	smull	r7, r3, r0, r1
  40379e:	17c9      	asrs	r1, r1, #31
  4037a0:	ebc1 1163 	rsb	r1, r1, r3, asr #5
    proc->types.pointer.drag_throw_vect.x =
  4037a4:	82a1      	strh	r1, [r4, #20]
        proc->types.pointer.drag_throw_vect.y * (100 - indev_act->driver.drag_throw) / 100;
  4037a6:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
  4037aa:	7d53      	ldrb	r3, [r2, #21]
  4037ac:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  4037b0:	fb03 f301 	mul.w	r3, r3, r1
  4037b4:	fb80 1003 	smull	r1, r0, r0, r3
  4037b8:	17db      	asrs	r3, r3, #31
  4037ba:	ebc3 1360 	rsb	r3, r3, r0, asr #5
    proc->types.pointer.drag_throw_vect.y =
  4037be:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x != 0 || proc->types.pointer.drag_throw_vect.y != 0) {
  4037c0:	6963      	ldr	r3, [r4, #20]
  4037c2:	2b00      	cmp	r3, #0
  4037c4:	d06c      	beq.n	4038a0 <indev_drag_throw+0x174>
        lv_obj_get_coords(drag_obj, &coords_ori);
  4037c6:	4669      	mov	r1, sp
  4037c8:	4628      	mov	r0, r5
  4037ca:	4b49      	ldr	r3, [pc, #292]	; (4038f0 <indev_drag_throw+0x1c4>)
  4037cc:	4798      	blx	r3
        lv_coord_t act_x = lv_obj_get_x(drag_obj) + proc->types.pointer.drag_throw_vect.x;
  4037ce:	4628      	mov	r0, r5
  4037d0:	4b48      	ldr	r3, [pc, #288]	; (4038f4 <indev_drag_throw+0x1c8>)
  4037d2:	4798      	blx	r3
  4037d4:	8aa3      	ldrh	r3, [r4, #20]
  4037d6:	fa13 f080 	uxtah	r0, r3, r0
  4037da:	b207      	sxth	r7, r0
        lv_coord_t act_y = lv_obj_get_y(drag_obj) + proc->types.pointer.drag_throw_vect.y;
  4037dc:	4628      	mov	r0, r5
  4037de:	4b46      	ldr	r3, [pc, #280]	; (4038f8 <indev_drag_throw+0x1cc>)
  4037e0:	4798      	blx	r3
  4037e2:	8ae2      	ldrh	r2, [r4, #22]
  4037e4:	fa12 f280 	uxtah	r2, r2, r0
  4037e8:	b212      	sxth	r2, r2
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  4037ea:	2e03      	cmp	r6, #3
  4037ec:	d03c      	beq.n	403868 <indev_drag_throw+0x13c>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  4037ee:	2e01      	cmp	r6, #1
  4037f0:	d03f      	beq.n	403872 <indev_drag_throw+0x146>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  4037f2:	2e02      	cmp	r6, #2
  4037f4:	d042      	beq.n	40387c <indev_drag_throw+0x150>
        else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  4037f6:	2e04      	cmp	r6, #4
  4037f8:	d045      	beq.n	403886 <indev_drag_throw+0x15a>
        lv_obj_get_coords(drag_obj, &coord_new);
  4037fa:	a902      	add	r1, sp, #8
  4037fc:	4628      	mov	r0, r5
  4037fe:	4b3c      	ldr	r3, [pc, #240]	; (4038f0 <indev_drag_throw+0x1c4>)
  403800:	4798      	blx	r3
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  403802:	f9bd 2000 	ldrsh.w	r2, [sp]
  403806:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
  40380a:	429a      	cmp	r2, r3
  40380c:	d003      	beq.n	403816 <indev_drag_throw+0xea>
  40380e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
  403812:	2b00      	cmp	r3, #0
  403814:	d1ab      	bne.n	40376e <indev_drag_throw+0x42>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403816:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  40381a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
        if((coords_ori.x1 == coord_new.x1 || proc->types.pointer.drag_throw_vect.x == 0) &&
  40381e:	429a      	cmp	r2, r3
  403820:	d003      	beq.n	40382a <indev_drag_throw+0xfe>
           (coords_ori.y1 == coord_new.y1 || proc->types.pointer.drag_throw_vect.y == 0)) {
  403822:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  403826:	2b00      	cmp	r3, #0
  403828:	d1a1      	bne.n	40376e <indev_drag_throw+0x42>
            proc->types.pointer.drag_in_prog      = 0;
  40382a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  40382e:	f36f 0341 	bfc	r3, #1, #1
  403832:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            proc->types.pointer.vect.x            = 0;
  403836:	2300      	movs	r3, #0
  403838:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y            = 0;
  40383a:	81e3      	strh	r3, [r4, #14]
            proc->types.pointer.drag_throw_vect.x = 0;
  40383c:	82a3      	strh	r3, [r4, #20]
            proc->types.pointer.drag_throw_vect.y = 0;
  40383e:	82e3      	strh	r3, [r4, #22]
            drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  403840:	69eb      	ldr	r3, [r5, #28]
  403842:	4a26      	ldr	r2, [pc, #152]	; (4038dc <indev_drag_throw+0x1b0>)
  403844:	6812      	ldr	r2, [r2, #0]
  403846:	2113      	movs	r1, #19
  403848:	4628      	mov	r0, r5
  40384a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  40384c:	4620      	mov	r0, r4
  40384e:	4b24      	ldr	r3, [pc, #144]	; (4038e0 <indev_drag_throw+0x1b4>)
  403850:	4798      	blx	r3
  403852:	2800      	cmp	r0, #0
  403854:	d18b      	bne.n	40376e <indev_drag_throw+0x42>
            lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  403856:	2200      	movs	r2, #0
  403858:	2109      	movs	r1, #9
  40385a:	4628      	mov	r0, r5
  40385c:	4b21      	ldr	r3, [pc, #132]	; (4038e4 <indev_drag_throw+0x1b8>)
  40385e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403860:	4620      	mov	r0, r4
  403862:	4b1f      	ldr	r3, [pc, #124]	; (4038e0 <indev_drag_throw+0x1b4>)
  403864:	4798      	blx	r3
  403866:	e782      	b.n	40376e <indev_drag_throw+0x42>
        if(allowed_dirs == LV_DRAG_DIR_BOTH) lv_obj_set_pos(drag_obj, act_x, act_y);
  403868:	4639      	mov	r1, r7
  40386a:	4628      	mov	r0, r5
  40386c:	4b23      	ldr	r3, [pc, #140]	; (4038fc <indev_drag_throw+0x1d0>)
  40386e:	4798      	blx	r3
  403870:	e7c3      	b.n	4037fa <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_HOR) lv_obj_set_x(drag_obj, act_x);
  403872:	4639      	mov	r1, r7
  403874:	4628      	mov	r0, r5
  403876:	4b22      	ldr	r3, [pc, #136]	; (403900 <indev_drag_throw+0x1d4>)
  403878:	4798      	blx	r3
  40387a:	e7be      	b.n	4037fa <indev_drag_throw+0xce>
        else if(allowed_dirs == LV_DRAG_DIR_VER) lv_obj_set_y(drag_obj, act_y);
  40387c:	4611      	mov	r1, r2
  40387e:	4628      	mov	r0, r5
  403880:	4b20      	ldr	r3, [pc, #128]	; (403904 <indev_drag_throw+0x1d8>)
  403882:	4798      	blx	r3
  403884:	e7b9      	b.n	4037fa <indev_drag_throw+0xce>
            if(proc->types.pointer.drag_sum.x) lv_obj_set_x(drag_obj, act_x);
  403886:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  40388a:	b123      	cbz	r3, 403896 <indev_drag_throw+0x16a>
  40388c:	4639      	mov	r1, r7
  40388e:	4628      	mov	r0, r5
  403890:	4b1b      	ldr	r3, [pc, #108]	; (403900 <indev_drag_throw+0x1d4>)
  403892:	4798      	blx	r3
  403894:	e7b1      	b.n	4037fa <indev_drag_throw+0xce>
            else lv_obj_set_y(drag_obj, act_y);
  403896:	4611      	mov	r1, r2
  403898:	4628      	mov	r0, r5
  40389a:	4b1a      	ldr	r3, [pc, #104]	; (403904 <indev_drag_throw+0x1d8>)
  40389c:	4798      	blx	r3
  40389e:	e7ac      	b.n	4037fa <indev_drag_throw+0xce>
        proc->types.pointer.drag_in_prog = 0;
  4038a0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4038a4:	f36f 0341 	bfc	r3, #1, #1
  4038a8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_END, indev_act);
  4038ac:	69eb      	ldr	r3, [r5, #28]
  4038ae:	2113      	movs	r1, #19
  4038b0:	4628      	mov	r0, r5
  4038b2:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4038b4:	4620      	mov	r0, r4
  4038b6:	4b0a      	ldr	r3, [pc, #40]	; (4038e0 <indev_drag_throw+0x1b4>)
  4038b8:	4798      	blx	r3
  4038ba:	2800      	cmp	r0, #0
  4038bc:	f47f af57 	bne.w	40376e <indev_drag_throw+0x42>
        lv_event_send(drag_obj, LV_EVENT_DRAG_END, NULL);
  4038c0:	2200      	movs	r2, #0
  4038c2:	2109      	movs	r1, #9
  4038c4:	4628      	mov	r0, r5
  4038c6:	4b07      	ldr	r3, [pc, #28]	; (4038e4 <indev_drag_throw+0x1b8>)
  4038c8:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  4038ca:	4620      	mov	r0, r4
  4038cc:	4b04      	ldr	r3, [pc, #16]	; (4038e0 <indev_drag_throw+0x1b4>)
  4038ce:	4798      	blx	r3
  4038d0:	e74d      	b.n	40376e <indev_drag_throw+0x42>
  4038d2:	bf00      	nop
  4038d4:	00403705 	.word	0x00403705
  4038d8:	004062e9 	.word	0x004062e9
  4038dc:	2040c38c 	.word	0x2040c38c
  4038e0:	004036e9 	.word	0x004036e9
  4038e4:	004053e5 	.word	0x004053e5
  4038e8:	004062bd 	.word	0x004062bd
  4038ec:	51eb851f 	.word	0x51eb851f
  4038f0:	00405609 	.word	0x00405609
  4038f4:	00405649 	.word	0x00405649
  4038f8:	00405689 	.word	0x00405689
  4038fc:	00405b85 	.word	0x00405b85
  403900:	00405c3d 	.word	0x00405c3d
  403904:	00405c7d 	.word	0x00405c7d

00403908 <indev_proc_release>:
{
  403908:	b538      	push	{r3, r4, r5, lr}
  40390a:	4604      	mov	r4, r0
    if(proc->wait_until_release != 0) {
  40390c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  403910:	f013 0f08 	tst.w	r3, #8
  403914:	d00a      	beq.n	40392c <indev_proc_release+0x24>
        proc->types.pointer.act_obj  = NULL;
  403916:	2300      	movs	r3, #0
  403918:	6183      	str	r3, [r0, #24]
        proc->types.pointer.last_obj = NULL;
  40391a:	61c3      	str	r3, [r0, #28]
        proc->pr_timestamp           = 0;
  40391c:	62c3      	str	r3, [r0, #44]	; 0x2c
        proc->longpr_rep_timestamp   = 0;
  40391e:	6303      	str	r3, [r0, #48]	; 0x30
        proc->wait_until_release     = 0;
  403920:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  403924:	f363 02c3 	bfi	r2, r3, #3, #1
  403928:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    indev_obj_act = proc->types.pointer.act_obj;
  40392c:	69a0      	ldr	r0, [r4, #24]
  40392e:	4b59      	ldr	r3, [pc, #356]	; (403a94 <indev_proc_release+0x18c>)
  403930:	6018      	str	r0, [r3, #0]
    if(indev_obj_act) {
  403932:	2800      	cmp	r0, #0
  403934:	f000 8093 	beq.w	403a5e <indev_proc_release+0x156>
        if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST)) {
  403938:	2110      	movs	r1, #16
  40393a:	4b57      	ldr	r3, [pc, #348]	; (403a98 <indev_proc_release+0x190>)
  40393c:	4798      	blx	r3
  40393e:	2800      	cmp	r0, #0
  403940:	d038      	beq.n	4039b4 <indev_proc_release+0xac>
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  403942:	4b54      	ldr	r3, [pc, #336]	; (403a94 <indev_proc_release+0x18c>)
  403944:	6818      	ldr	r0, [r3, #0]
  403946:	69c3      	ldr	r3, [r0, #28]
  403948:	4a54      	ldr	r2, [pc, #336]	; (403a9c <indev_proc_release+0x194>)
  40394a:	6812      	ldr	r2, [r2, #0]
  40394c:	210e      	movs	r1, #14
  40394e:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403950:	4620      	mov	r0, r4
  403952:	4b53      	ldr	r3, [pc, #332]	; (403aa0 <indev_proc_release+0x198>)
  403954:	4798      	blx	r3
  403956:	2800      	cmp	r0, #0
  403958:	f040 8088 	bne.w	403a6c <indev_proc_release+0x164>
            if(proc->types.pointer.drag_in_prog == 0) {
  40395c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403960:	f013 0f02 	tst.w	r3, #2
  403964:	d11a      	bne.n	40399c <indev_proc_release+0x94>
                if(proc->long_pr_sent == 0) {
  403966:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40396a:	f013 0f01 	tst.w	r3, #1
  40396e:	d10a      	bne.n	403986 <indev_proc_release+0x7e>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403970:	2200      	movs	r2, #0
  403972:	2103      	movs	r1, #3
  403974:	4b47      	ldr	r3, [pc, #284]	; (403a94 <indev_proc_release+0x18c>)
  403976:	6818      	ldr	r0, [r3, #0]
  403978:	4b4a      	ldr	r3, [pc, #296]	; (403aa4 <indev_proc_release+0x19c>)
  40397a:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  40397c:	4620      	mov	r0, r4
  40397e:	4b48      	ldr	r3, [pc, #288]	; (403aa0 <indev_proc_release+0x198>)
  403980:	4798      	blx	r3
  403982:	2800      	cmp	r0, #0
  403984:	d172      	bne.n	403a6c <indev_proc_release+0x164>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  403986:	2200      	movs	r2, #0
  403988:	2106      	movs	r1, #6
  40398a:	4b42      	ldr	r3, [pc, #264]	; (403a94 <indev_proc_release+0x18c>)
  40398c:	6818      	ldr	r0, [r3, #0]
  40398e:	4b45      	ldr	r3, [pc, #276]	; (403aa4 <indev_proc_release+0x19c>)
  403990:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403992:	4620      	mov	r0, r4
  403994:	4b42      	ldr	r3, [pc, #264]	; (403aa0 <indev_proc_release+0x198>)
  403996:	4798      	blx	r3
  403998:	2800      	cmp	r0, #0
  40399a:	d167      	bne.n	403a6c <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40399c:	2200      	movs	r2, #0
  40399e:	2107      	movs	r1, #7
  4039a0:	4b3c      	ldr	r3, [pc, #240]	; (403a94 <indev_proc_release+0x18c>)
  4039a2:	6818      	ldr	r0, [r3, #0]
  4039a4:	4b3f      	ldr	r3, [pc, #252]	; (403aa4 <indev_proc_release+0x19c>)
  4039a6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4039a8:	4620      	mov	r0, r4
  4039aa:	4b3d      	ldr	r3, [pc, #244]	; (403aa0 <indev_proc_release+0x198>)
  4039ac:	4798      	blx	r3
  4039ae:	2800      	cmp	r0, #0
  4039b0:	d030      	beq.n	403a14 <indev_proc_release+0x10c>
  4039b2:	bd38      	pop	{r3, r4, r5, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, indev_act);
  4039b4:	4b37      	ldr	r3, [pc, #220]	; (403a94 <indev_proc_release+0x18c>)
  4039b6:	6818      	ldr	r0, [r3, #0]
  4039b8:	69c3      	ldr	r3, [r0, #28]
  4039ba:	4a38      	ldr	r2, [pc, #224]	; (403a9c <indev_proc_release+0x194>)
  4039bc:	6812      	ldr	r2, [r2, #0]
  4039be:	210e      	movs	r1, #14
  4039c0:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4039c2:	4620      	mov	r0, r4
  4039c4:	4b36      	ldr	r3, [pc, #216]	; (403aa0 <indev_proc_release+0x198>)
  4039c6:	4798      	blx	r3
  4039c8:	2800      	cmp	r0, #0
  4039ca:	d14f      	bne.n	403a6c <indev_proc_release+0x164>
            if(proc->long_pr_sent == 0 && proc->types.pointer.drag_in_prog == 0) {
  4039cc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4039d0:	f013 0f01 	tst.w	r3, #1
  4039d4:	d104      	bne.n	4039e0 <indev_proc_release+0xd8>
  4039d6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039da:	f013 0f02 	tst.w	r3, #2
  4039de:	d046      	beq.n	403a6e <indev_proc_release+0x166>
            if(proc->types.pointer.drag_in_prog == 0) {
  4039e0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  4039e4:	f013 0f02 	tst.w	r3, #2
  4039e8:	d10a      	bne.n	403a00 <indev_proc_release+0xf8>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4039ea:	2200      	movs	r2, #0
  4039ec:	2106      	movs	r1, #6
  4039ee:	4b29      	ldr	r3, [pc, #164]	; (403a94 <indev_proc_release+0x18c>)
  4039f0:	6818      	ldr	r0, [r3, #0]
  4039f2:	4b2c      	ldr	r3, [pc, #176]	; (403aa4 <indev_proc_release+0x19c>)
  4039f4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  4039f6:	4620      	mov	r0, r4
  4039f8:	4b29      	ldr	r3, [pc, #164]	; (403aa0 <indev_proc_release+0x198>)
  4039fa:	4798      	blx	r3
  4039fc:	2800      	cmp	r0, #0
  4039fe:	d135      	bne.n	403a6c <indev_proc_release+0x164>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  403a00:	2200      	movs	r2, #0
  403a02:	2107      	movs	r1, #7
  403a04:	4b23      	ldr	r3, [pc, #140]	; (403a94 <indev_proc_release+0x18c>)
  403a06:	6818      	ldr	r0, [r3, #0]
  403a08:	4b26      	ldr	r3, [pc, #152]	; (403aa4 <indev_proc_release+0x19c>)
  403a0a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  403a0c:	4620      	mov	r0, r4
  403a0e:	4b24      	ldr	r3, [pc, #144]	; (403aa0 <indev_proc_release+0x198>)
  403a10:	4798      	blx	r3
  403a12:	bb58      	cbnz	r0, 403a6c <indev_proc_release+0x164>
        lv_obj_t * drag_obj = get_dragged_obj(indev_obj_act);
  403a14:	4b1f      	ldr	r3, [pc, #124]	; (403a94 <indev_proc_release+0x18c>)
  403a16:	6818      	ldr	r0, [r3, #0]
  403a18:	4b23      	ldr	r3, [pc, #140]	; (403aa8 <indev_proc_release+0x1a0>)
  403a1a:	4798      	blx	r3
        if(drag_obj) {
  403a1c:	4605      	mov	r5, r0
  403a1e:	b1d0      	cbz	r0, 403a56 <indev_proc_release+0x14e>
            if(lv_obj_get_drag_throw(drag_obj) && proc->types.pointer.drag_in_prog) {
  403a20:	4b22      	ldr	r3, [pc, #136]	; (403aac <indev_proc_release+0x1a4>)
  403a22:	4798      	blx	r3
  403a24:	b1b8      	cbz	r0, 403a56 <indev_proc_release+0x14e>
  403a26:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403a2a:	f013 0f02 	tst.w	r3, #2
  403a2e:	d012      	beq.n	403a56 <indev_proc_release+0x14e>
                if(drag_obj->signal_cb) drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_THROW_BEGIN, NULL);
  403a30:	69eb      	ldr	r3, [r5, #28]
  403a32:	b11b      	cbz	r3, 403a3c <indev_proc_release+0x134>
  403a34:	2200      	movs	r2, #0
  403a36:	2112      	movs	r1, #18
  403a38:	4628      	mov	r0, r5
  403a3a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a3c:	4620      	mov	r0, r4
  403a3e:	4b18      	ldr	r3, [pc, #96]	; (403aa0 <indev_proc_release+0x198>)
  403a40:	4798      	blx	r3
  403a42:	b998      	cbnz	r0, 403a6c <indev_proc_release+0x164>
                lv_event_send(drag_obj, LV_EVENT_DRAG_THROW_BEGIN, NULL);
  403a44:	2200      	movs	r2, #0
  403a46:	210a      	movs	r1, #10
  403a48:	4628      	mov	r0, r5
  403a4a:	4b16      	ldr	r3, [pc, #88]	; (403aa4 <indev_proc_release+0x19c>)
  403a4c:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a4e:	4620      	mov	r0, r4
  403a50:	4b13      	ldr	r3, [pc, #76]	; (403aa0 <indev_proc_release+0x198>)
  403a52:	4798      	blx	r3
  403a54:	b950      	cbnz	r0, 403a6c <indev_proc_release+0x164>
        proc->types.pointer.act_obj = NULL;
  403a56:	2300      	movs	r3, #0
  403a58:	61a3      	str	r3, [r4, #24]
        proc->pr_timestamp          = 0;
  403a5a:	62e3      	str	r3, [r4, #44]	; 0x2c
        proc->longpr_rep_timestamp  = 0;
  403a5c:	6323      	str	r3, [r4, #48]	; 0x30
    if(proc->types.pointer.last_obj != NULL && proc->reset_query == 0) {
  403a5e:	69e3      	ldr	r3, [r4, #28]
  403a60:	b123      	cbz	r3, 403a6c <indev_proc_release+0x164>
  403a62:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  403a66:	f013 0f02 	tst.w	r3, #2
  403a6a:	d00c      	beq.n	403a86 <indev_proc_release+0x17e>
  403a6c:	bd38      	pop	{r3, r4, r5, pc}
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  403a6e:	2200      	movs	r2, #0
  403a70:	2103      	movs	r1, #3
  403a72:	4b08      	ldr	r3, [pc, #32]	; (403a94 <indev_proc_release+0x18c>)
  403a74:	6818      	ldr	r0, [r3, #0]
  403a76:	4b0b      	ldr	r3, [pc, #44]	; (403aa4 <indev_proc_release+0x19c>)
  403a78:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403a7a:	4620      	mov	r0, r4
  403a7c:	4b08      	ldr	r3, [pc, #32]	; (403aa0 <indev_proc_release+0x198>)
  403a7e:	4798      	blx	r3
  403a80:	2800      	cmp	r0, #0
  403a82:	d0ad      	beq.n	4039e0 <indev_proc_release+0xd8>
  403a84:	e7f2      	b.n	403a6c <indev_proc_release+0x164>
        indev_drag_throw(proc);
  403a86:	4620      	mov	r0, r4
  403a88:	4b09      	ldr	r3, [pc, #36]	; (403ab0 <indev_proc_release+0x1a8>)
  403a8a:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403a8c:	4620      	mov	r0, r4
  403a8e:	4b04      	ldr	r3, [pc, #16]	; (403aa0 <indev_proc_release+0x198>)
  403a90:	4798      	blx	r3
  403a92:	e7eb      	b.n	403a6c <indev_proc_release+0x164>
  403a94:	2040c390 	.word	0x2040c390
  403a98:	004068f5 	.word	0x004068f5
  403a9c:	2040c38c 	.word	0x2040c38c
  403aa0:	004036e9 	.word	0x004036e9
  403aa4:	004053e5 	.word	0x004053e5
  403aa8:	00403705 	.word	0x00403705
  403aac:	004062e9 	.word	0x004062e9
  403ab0:	0040372d 	.word	0x0040372d

00403ab4 <indev_click_focus>:
{
  403ab4:	b570      	push	{r4, r5, r6, lr}
  403ab6:	4604      	mov	r4, r0
    lv_obj_t * obj_to_focus = lv_obj_get_focused_obj(indev_obj_act);
  403ab8:	4d58      	ldr	r5, [pc, #352]	; (403c1c <indev_click_focus+0x168>)
  403aba:	6828      	ldr	r0, [r5, #0]
  403abc:	4b58      	ldr	r3, [pc, #352]	; (403c20 <indev_click_focus+0x16c>)
  403abe:	4798      	blx	r3
  403ac0:	4606      	mov	r6, r0
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403ac2:	2120      	movs	r1, #32
  403ac4:	6828      	ldr	r0, [r5, #0]
  403ac6:	4b57      	ldr	r3, [pc, #348]	; (403c24 <indev_click_focus+0x170>)
  403ac8:	4798      	blx	r3
  403aca:	b9e8      	cbnz	r0, 403b08 <indev_click_focus+0x54>
       proc->types.pointer.last_pressed != obj_to_focus) {
  403acc:	6a23      	ldr	r3, [r4, #32]
    if(lv_obj_is_protected(indev_obj_act, LV_PROTECT_CLICK_FOCUS) == false &&
  403ace:	429e      	cmp	r6, r3
  403ad0:	d01a      	beq.n	403b08 <indev_click_focus+0x54>
        lv_group_t * g_act = lv_obj_get_group(obj_to_focus);
  403ad2:	4630      	mov	r0, r6
  403ad4:	4b54      	ldr	r3, [pc, #336]	; (403c28 <indev_click_focus+0x174>)
  403ad6:	4798      	blx	r3
  403ad8:	4605      	mov	r5, r0
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403ada:	6a20      	ldr	r0, [r4, #32]
  403adc:	b1a8      	cbz	r0, 403b0a <indev_click_focus+0x56>
  403ade:	4b52      	ldr	r3, [pc, #328]	; (403c28 <indev_click_focus+0x174>)
  403ae0:	4798      	blx	r3
  403ae2:	4603      	mov	r3, r0
        if(g_act == g_prev) {
  403ae4:	42ab      	cmp	r3, r5
  403ae6:	d012      	beq.n	403b0e <indev_click_focus+0x5a>
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403ae8:	2b00      	cmp	r3, #0
  403aea:	d044      	beq.n	403b76 <indev_click_focus+0xc2>
                if(proc->types.pointer.last_pressed) {
  403aec:	6a20      	ldr	r0, [r4, #32]
  403aee:	2800      	cmp	r0, #0
  403af0:	d074      	beq.n	403bdc <indev_click_focus+0x128>
                    if(g_prev == NULL) {
  403af2:	2b00      	cmp	r3, #0
  403af4:	d055      	beq.n	403ba2 <indev_click_focus+0xee>
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_LEAVE, NULL);
  403af6:	2200      	movs	r2, #0
  403af8:	2115      	movs	r1, #21
  403afa:	4b4c      	ldr	r3, [pc, #304]	; (403c2c <indev_click_focus+0x178>)
  403afc:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403afe:	4620      	mov	r0, r4
  403b00:	4b4b      	ldr	r3, [pc, #300]	; (403c30 <indev_click_focus+0x17c>)
  403b02:	4798      	blx	r3
  403b04:	2800      	cmp	r0, #0
  403b06:	d05f      	beq.n	403bc8 <indev_click_focus+0x114>
  403b08:	bd70      	pop	{r4, r5, r6, pc}
        lv_group_t * g_prev = proc->types.pointer.last_pressed ? lv_obj_get_group(proc->types.pointer.last_pressed) : NULL;
  403b0a:	2300      	movs	r3, #0
  403b0c:	e7ea      	b.n	403ae4 <indev_click_focus+0x30>
            if(g_act) {
  403b0e:	b145      	cbz	r5, 403b22 <indev_click_focus+0x6e>
                lv_group_focus_obj(obj_to_focus);
  403b10:	4630      	mov	r0, r6
  403b12:	4b48      	ldr	r3, [pc, #288]	; (403c34 <indev_click_focus+0x180>)
  403b14:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b16:	4620      	mov	r0, r4
  403b18:	4b45      	ldr	r3, [pc, #276]	; (403c30 <indev_click_focus+0x17c>)
  403b1a:	4798      	blx	r3
  403b1c:	2800      	cmp	r0, #0
  403b1e:	d065      	beq.n	403bec <indev_click_focus+0x138>
  403b20:	bd70      	pop	{r4, r5, r6, pc}
                if(proc->types.pointer.last_pressed) {
  403b22:	6a20      	ldr	r0, [r4, #32]
  403b24:	b190      	cbz	r0, 403b4c <indev_click_focus+0x98>
                    lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403b26:	2200      	movs	r2, #0
  403b28:	2117      	movs	r1, #23
  403b2a:	4b40      	ldr	r3, [pc, #256]	; (403c2c <indev_click_focus+0x178>)
  403b2c:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403b2e:	4620      	mov	r0, r4
  403b30:	4b3f      	ldr	r3, [pc, #252]	; (403c30 <indev_click_focus+0x17c>)
  403b32:	4798      	blx	r3
  403b34:	2800      	cmp	r0, #0
  403b36:	d1e7      	bne.n	403b08 <indev_click_focus+0x54>
                    lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403b38:	2200      	movs	r2, #0
  403b3a:	210e      	movs	r1, #14
  403b3c:	6a20      	ldr	r0, [r4, #32]
  403b3e:	4b3e      	ldr	r3, [pc, #248]	; (403c38 <indev_click_focus+0x184>)
  403b40:	4798      	blx	r3
                    if(indev_reset_check(proc)) return;
  403b42:	4620      	mov	r0, r4
  403b44:	4b3a      	ldr	r3, [pc, #232]	; (403c30 <indev_click_focus+0x17c>)
  403b46:	4798      	blx	r3
  403b48:	2800      	cmp	r0, #0
  403b4a:	d1dd      	bne.n	403b08 <indev_click_focus+0x54>
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403b4c:	2200      	movs	r2, #0
  403b4e:	2116      	movs	r1, #22
  403b50:	4630      	mov	r0, r6
  403b52:	4b36      	ldr	r3, [pc, #216]	; (403c2c <indev_click_focus+0x178>)
  403b54:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b56:	4620      	mov	r0, r4
  403b58:	4b35      	ldr	r3, [pc, #212]	; (403c30 <indev_click_focus+0x17c>)
  403b5a:	4798      	blx	r3
  403b5c:	2800      	cmp	r0, #0
  403b5e:	d1d3      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403b60:	2200      	movs	r2, #0
  403b62:	210d      	movs	r1, #13
  403b64:	4630      	mov	r0, r6
  403b66:	4b34      	ldr	r3, [pc, #208]	; (403c38 <indev_click_focus+0x184>)
  403b68:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b6a:	4620      	mov	r0, r4
  403b6c:	4b30      	ldr	r3, [pc, #192]	; (403c30 <indev_click_focus+0x17c>)
  403b6e:	4798      	blx	r3
  403b70:	2800      	cmp	r0, #0
  403b72:	d03b      	beq.n	403bec <indev_click_focus+0x138>
  403b74:	bd70      	pop	{r4, r5, r6, pc}
            if(g_prev == NULL && proc->types.pointer.last_pressed) {
  403b76:	6a20      	ldr	r0, [r4, #32]
  403b78:	2800      	cmp	r0, #0
  403b7a:	d0b7      	beq.n	403aec <indev_click_focus+0x38>
                lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403b7c:	2200      	movs	r2, #0
  403b7e:	2117      	movs	r1, #23
  403b80:	4b2a      	ldr	r3, [pc, #168]	; (403c2c <indev_click_focus+0x178>)
  403b82:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b84:	4620      	mov	r0, r4
  403b86:	4b2a      	ldr	r3, [pc, #168]	; (403c30 <indev_click_focus+0x17c>)
  403b88:	4798      	blx	r3
  403b8a:	2800      	cmp	r0, #0
  403b8c:	d1bc      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403b8e:	2200      	movs	r2, #0
  403b90:	210e      	movs	r1, #14
  403b92:	6a20      	ldr	r0, [r4, #32]
  403b94:	4b28      	ldr	r3, [pc, #160]	; (403c38 <indev_click_focus+0x184>)
  403b96:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403b98:	4620      	mov	r0, r4
  403b9a:	4b25      	ldr	r3, [pc, #148]	; (403c30 <indev_click_focus+0x17c>)
  403b9c:	4798      	blx	r3
  403b9e:	b1e8      	cbz	r0, 403bdc <indev_click_focus+0x128>
  403ba0:	bd70      	pop	{r4, r5, r6, pc}
                        lv_signal_send(proc->types.pointer.last_pressed, LV_SIGNAL_DEFOCUS, NULL);
  403ba2:	2200      	movs	r2, #0
  403ba4:	2117      	movs	r1, #23
  403ba6:	4b21      	ldr	r3, [pc, #132]	; (403c2c <indev_click_focus+0x178>)
  403ba8:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403baa:	4620      	mov	r0, r4
  403bac:	4b20      	ldr	r3, [pc, #128]	; (403c30 <indev_click_focus+0x17c>)
  403bae:	4798      	blx	r3
  403bb0:	2800      	cmp	r0, #0
  403bb2:	d1a9      	bne.n	403b08 <indev_click_focus+0x54>
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_DEFOCUSED, NULL);
  403bb4:	2200      	movs	r2, #0
  403bb6:	210e      	movs	r1, #14
  403bb8:	6a20      	ldr	r0, [r4, #32]
  403bba:	4b1f      	ldr	r3, [pc, #124]	; (403c38 <indev_click_focus+0x184>)
  403bbc:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403bbe:	4620      	mov	r0, r4
  403bc0:	4b1b      	ldr	r3, [pc, #108]	; (403c30 <indev_click_focus+0x17c>)
  403bc2:	4798      	blx	r3
  403bc4:	b150      	cbz	r0, 403bdc <indev_click_focus+0x128>
  403bc6:	bd70      	pop	{r4, r5, r6, pc}
                        lv_event_send(proc->types.pointer.last_pressed, LV_EVENT_LEAVE, NULL);
  403bc8:	2200      	movs	r2, #0
  403bca:	210f      	movs	r1, #15
  403bcc:	6a20      	ldr	r0, [r4, #32]
  403bce:	4b1a      	ldr	r3, [pc, #104]	; (403c38 <indev_click_focus+0x184>)
  403bd0:	4798      	blx	r3
                        if(indev_reset_check(proc)) return;
  403bd2:	4620      	mov	r0, r4
  403bd4:	4b16      	ldr	r3, [pc, #88]	; (403c30 <indev_click_focus+0x17c>)
  403bd6:	4798      	blx	r3
  403bd8:	2800      	cmp	r0, #0
  403bda:	d195      	bne.n	403b08 <indev_click_focus+0x54>
            if(g_act) {
  403bdc:	b14d      	cbz	r5, 403bf2 <indev_click_focus+0x13e>
                lv_group_focus_obj(obj_to_focus);
  403bde:	4630      	mov	r0, r6
  403be0:	4b14      	ldr	r3, [pc, #80]	; (403c34 <indev_click_focus+0x180>)
  403be2:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403be4:	4620      	mov	r0, r4
  403be6:	4b12      	ldr	r3, [pc, #72]	; (403c30 <indev_click_focus+0x17c>)
  403be8:	4798      	blx	r3
  403bea:	b908      	cbnz	r0, 403bf0 <indev_click_focus+0x13c>
        proc->types.pointer.last_pressed = obj_to_focus;
  403bec:	6226      	str	r6, [r4, #32]
  403bee:	e78b      	b.n	403b08 <indev_click_focus+0x54>
  403bf0:	bd70      	pop	{r4, r5, r6, pc}
                lv_signal_send(obj_to_focus, LV_SIGNAL_FOCUS, NULL);
  403bf2:	2200      	movs	r2, #0
  403bf4:	2116      	movs	r1, #22
  403bf6:	4630      	mov	r0, r6
  403bf8:	4b0c      	ldr	r3, [pc, #48]	; (403c2c <indev_click_focus+0x178>)
  403bfa:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403bfc:	4620      	mov	r0, r4
  403bfe:	4b0c      	ldr	r3, [pc, #48]	; (403c30 <indev_click_focus+0x17c>)
  403c00:	4798      	blx	r3
  403c02:	2800      	cmp	r0, #0
  403c04:	d180      	bne.n	403b08 <indev_click_focus+0x54>
                lv_event_send(obj_to_focus, LV_EVENT_FOCUSED, NULL);
  403c06:	2200      	movs	r2, #0
  403c08:	210d      	movs	r1, #13
  403c0a:	4630      	mov	r0, r6
  403c0c:	4b0a      	ldr	r3, [pc, #40]	; (403c38 <indev_click_focus+0x184>)
  403c0e:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403c10:	4620      	mov	r0, r4
  403c12:	4b07      	ldr	r3, [pc, #28]	; (403c30 <indev_click_focus+0x17c>)
  403c14:	4798      	blx	r3
  403c16:	2800      	cmp	r0, #0
  403c18:	d0e8      	beq.n	403bec <indev_click_focus+0x138>
  403c1a:	e775      	b.n	403b08 <indev_click_focus+0x54>
  403c1c:	2040c390 	.word	0x2040c390
  403c20:	00408cf9 	.word	0x00408cf9
  403c24:	004068f5 	.word	0x004068f5
  403c28:	00407b85 	.word	0x00407b85
  403c2c:	0040544d 	.word	0x0040544d
  403c30:	004036e9 	.word	0x004036e9
  403c34:	004035c5 	.word	0x004035c5
  403c38:	004053e5 	.word	0x004053e5

00403c3c <indev_drag>:
{
  403c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403c40:	b083      	sub	sp, #12
  403c42:	4604      	mov	r4, r0
    lv_obj_t * drag_obj    = get_dragged_obj(proc->types.pointer.act_obj);
  403c44:	6980      	ldr	r0, [r0, #24]
  403c46:	4bb3      	ldr	r3, [pc, #716]	; (403f14 <indev_drag+0x2d8>)
  403c48:	4798      	blx	r3
    if(drag_obj == NULL) return;
  403c4a:	b120      	cbz	r0, 403c56 <indev_drag+0x1a>
  403c4c:	4605      	mov	r5, r0
    if(lv_obj_get_drag(drag_obj) == false) return;
  403c4e:	4bb2      	ldr	r3, [pc, #712]	; (403f18 <indev_drag+0x2dc>)
  403c50:	4798      	blx	r3
  403c52:	4680      	mov	r8, r0
  403c54:	b910      	cbnz	r0, 403c5c <indev_drag+0x20>
}
  403c56:	b003      	add	sp, #12
  403c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_drag_dir_t allowed_dirs = lv_obj_get_drag_dir(drag_obj);
  403c5c:	4628      	mov	r0, r5
  403c5e:	4baf      	ldr	r3, [pc, #700]	; (403f1c <indev_drag+0x2e0>)
  403c60:	4798      	blx	r3
  403c62:	4606      	mov	r6, r0
    if(proc->types.pointer.drag_limit_out == 0) {
  403c64:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403c68:	f013 0f01 	tst.w	r3, #1
  403c6c:	d142      	bne.n	403cf4 <indev_drag+0xb8>
        proc->types.pointer.drag_sum.x += proc->types.pointer.vect.x;
  403c6e:	89a3      	ldrh	r3, [r4, #12]
  403c70:	8a22      	ldrh	r2, [r4, #16]
  403c72:	4413      	add	r3, r2
  403c74:	b21b      	sxth	r3, r3
  403c76:	8223      	strh	r3, [r4, #16]
        proc->types.pointer.drag_sum.y += proc->types.pointer.vect.y;
  403c78:	89e2      	ldrh	r2, [r4, #14]
  403c7a:	8a61      	ldrh	r1, [r4, #18]
  403c7c:	440a      	add	r2, r1
  403c7e:	b211      	sxth	r1, r2
  403c80:	8261      	strh	r1, [r4, #18]
        if(allowed_dirs == LV_DRAG_DIR_HOR || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403c82:	2803      	cmp	r0, #3
  403c84:	bf18      	it	ne
  403c86:	2801      	cmpne	r0, #1
  403c88:	bf0c      	ite	eq
  403c8a:	2001      	moveq	r0, #1
  403c8c:	2000      	movne	r0, #0
        if(allowed_dirs == LV_DRAG_DIR_VER || allowed_dirs == LV_DRAG_DIR_BOTH) {
  403c8e:	1eb2      	subs	r2, r6, #2
  403c90:	b2d2      	uxtb	r2, r2
  403c92:	2a01      	cmp	r2, #1
  403c94:	d91e      	bls.n	403cd4 <indev_drag+0x98>
        bool ver_en = false;
  403c96:	2700      	movs	r7, #0
        if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403c98:	2e04      	cmp	r6, #4
  403c9a:	d01d      	beq.n	403cd8 <indev_drag+0x9c>
        if((hor_en && LV_MATH_ABS(proc->types.pointer.drag_sum.x) >= indev_act->driver.drag_limit) ||
  403c9c:	b138      	cbz	r0, 403cae <indev_drag+0x72>
  403c9e:	2b00      	cmp	r3, #0
  403ca0:	bfb8      	it	lt
  403ca2:	425b      	neglt	r3, r3
  403ca4:	4a9e      	ldr	r2, [pc, #632]	; (403f20 <indev_drag+0x2e4>)
  403ca6:	6812      	ldr	r2, [r2, #0]
  403ca8:	7d12      	ldrb	r2, [r2, #20]
  403caa:	4293      	cmp	r3, r2
  403cac:	da0a      	bge.n	403cc4 <indev_drag+0x88>
  403cae:	b317      	cbz	r7, 403cf6 <indev_drag+0xba>
           (ver_en && LV_MATH_ABS(proc->types.pointer.drag_sum.y) >= indev_act->driver.drag_limit)) {
  403cb0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403cb4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403cb8:	4b99      	ldr	r3, [pc, #612]	; (403f20 <indev_drag+0x2e4>)
  403cba:	681b      	ldr	r3, [r3, #0]
  403cbc:	7d1b      	ldrb	r3, [r3, #20]
  403cbe:	429a      	cmp	r2, r3
  403cc0:	f2c0 808d 	blt.w	403dde <indev_drag+0x1a2>
            proc->types.pointer.drag_limit_out = 1;
  403cc4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cc8:	f043 0301 	orr.w	r3, r3, #1
  403ccc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            drag_just_started                   = true;
  403cd0:	4647      	mov	r7, r8
  403cd2:	e010      	b.n	403cf6 <indev_drag+0xba>
            ver_en = true;
  403cd4:	4647      	mov	r7, r8
  403cd6:	e7df      	b.n	403c98 <indev_drag+0x5c>
            if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403cd8:	ea83 7ee3 	eor.w	lr, r3, r3, asr #31
  403cdc:	ebae 7ee3 	sub.w	lr, lr, r3, asr #31
  403ce0:	ea81 72e1 	eor.w	r2, r1, r1, asr #31
  403ce4:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
  403ce8:	4596      	cmp	lr, r2
  403cea:	dd01      	ble.n	403cf0 <indev_drag+0xb4>
                hor_en = true;
  403cec:	4640      	mov	r0, r8
  403cee:	e7d5      	b.n	403c9c <indev_drag+0x60>
                ver_en = true;
  403cf0:	4647      	mov	r7, r8
  403cf2:	e7d3      	b.n	403c9c <indev_drag+0x60>
    bool drag_just_started = false;
  403cf4:	2700      	movs	r7, #0
    if(proc->types.pointer.drag_limit_out != 0) {
  403cf6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403cfa:	f013 0f01 	tst.w	r3, #1
  403cfe:	d0aa      	beq.n	403c56 <indev_drag+0x1a>
        if(proc->types.pointer.vect.x != 0 || proc->types.pointer.vect.y != 0) {
  403d00:	68e3      	ldr	r3, [r4, #12]
  403d02:	2b00      	cmp	r3, #0
  403d04:	d0a7      	beq.n	403c56 <indev_drag+0x1a>
            lv_coord_t prev_x     = drag_obj->coords.x1;
  403d06:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
            lv_coord_t prev_y     = drag_obj->coords.y1;
  403d0a:	f9b5 b012 	ldrsh.w	fp, [r5, #18]
            lv_coord_t prev_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403d0e:	4628      	mov	r0, r5
  403d10:	f8df 8234 	ldr.w	r8, [pc, #564]	; 403f48 <indev_drag+0x30c>
  403d14:	47c0      	blx	r8
  403d16:	4b83      	ldr	r3, [pc, #524]	; (403f24 <indev_drag+0x2e8>)
  403d18:	4798      	blx	r3
  403d1a:	9000      	str	r0, [sp, #0]
            lv_coord_t prev_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403d1c:	4628      	mov	r0, r5
  403d1e:	47c0      	blx	r8
  403d20:	4b81      	ldr	r3, [pc, #516]	; (403f28 <indev_drag+0x2ec>)
  403d22:	4798      	blx	r3
  403d24:	9001      	str	r0, [sp, #4]
            lv_coord_t act_x = lv_obj_get_x(drag_obj);
  403d26:	4628      	mov	r0, r5
  403d28:	4b80      	ldr	r3, [pc, #512]	; (403f2c <indev_drag+0x2f0>)
  403d2a:	4798      	blx	r3
  403d2c:	4680      	mov	r8, r0
            lv_coord_t act_y = lv_obj_get_y(drag_obj);
  403d2e:	4628      	mov	r0, r5
  403d30:	4b7f      	ldr	r3, [pc, #508]	; (403f30 <indev_drag+0x2f4>)
  403d32:	4798      	blx	r3
  403d34:	4681      	mov	r9, r0
            if(allowed_dirs == LV_DRAG_DIR_BOTH) {
  403d36:	2e03      	cmp	r6, #3
  403d38:	d053      	beq.n	403de2 <indev_drag+0x1a6>
            else if(allowed_dirs == LV_DRAG_DIR_HOR) {
  403d3a:	2e01      	cmp	r6, #1
  403d3c:	d063      	beq.n	403e06 <indev_drag+0x1ca>
            else if(allowed_dirs == LV_DRAG_DIR_VER) {
  403d3e:	2e02      	cmp	r6, #2
  403d40:	d071      	beq.n	403e26 <indev_drag+0x1ea>
            else if(allowed_dirs == LV_DRAG_DIR_ONE) {
  403d42:	2e04      	cmp	r6, #4
  403d44:	d07f      	beq.n	403e46 <indev_drag+0x20a>
            if(allowed_dirs == LV_DRAG_DIR_HOR ||
  403d46:	2e03      	cmp	r6, #3
  403d48:	bf18      	it	ne
  403d4a:	2e01      	cmpne	r6, #1
  403d4c:	d00d      	beq.n	403d6a <indev_drag+0x12e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403d4e:	2e04      	cmp	r6, #4
  403d50:	d10f      	bne.n	403d72 <indev_drag+0x136>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403d52:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403d56:	2a00      	cmp	r2, #0
  403d58:	bfb8      	it	lt
  403d5a:	4252      	neglt	r2, r2
  403d5c:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403d60:	2b00      	cmp	r3, #0
  403d62:	bfb8      	it	lt
  403d64:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403d66:	429a      	cmp	r2, r3
  403d68:	dd03      	ble.n	403d72 <indev_drag+0x136>
                act_x += proc->types.pointer.vect.x;
  403d6a:	89a3      	ldrh	r3, [r4, #12]
  403d6c:	4498      	add	r8, r3
  403d6e:	fa0f f888 	sxth.w	r8, r8
            if(allowed_dirs == LV_DRAG_DIR_VER ||
  403d72:	1eb3      	subs	r3, r6, #2
  403d74:	b2db      	uxtb	r3, r3
  403d76:	2b01      	cmp	r3, #1
  403d78:	f240 809f 	bls.w	403eba <indev_drag+0x27e>
               allowed_dirs == LV_DRAG_DIR_BOTH ||
  403d7c:	2e04      	cmp	r6, #4
  403d7e:	f000 808f 	beq.w	403ea0 <indev_drag+0x264>
                lv_disp_get_inv_buf_size(indev_act->driver.disp); /*Get the number of currently invalidated areas*/
  403d82:	4b67      	ldr	r3, [pc, #412]	; (403f20 <indev_drag+0x2e4>)
  403d84:	681b      	ldr	r3, [r3, #0]
            uint16_t inv_buf_size =
  403d86:	68d8      	ldr	r0, [r3, #12]
  403d88:	4b6a      	ldr	r3, [pc, #424]	; (403f34 <indev_drag+0x2f8>)
  403d8a:	4798      	blx	r3
  403d8c:	4606      	mov	r6, r0
            lv_obj_set_pos(drag_obj, act_x, act_y);
  403d8e:	464a      	mov	r2, r9
  403d90:	4641      	mov	r1, r8
  403d92:	4628      	mov	r0, r5
  403d94:	4b68      	ldr	r3, [pc, #416]	; (403f38 <indev_drag+0x2fc>)
  403d96:	4798      	blx	r3
            proc->types.pointer.drag_in_prog = 1;
  403d98:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403d9c:	f043 0302 	orr.w	r3, r3, #2
  403da0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403da4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  403da8:	459a      	cmp	sl, r3
  403daa:	f000 808b 	beq.w	403ec4 <indev_drag+0x288>
            if(drag_just_started) {
  403dae:	2f00      	cmp	r7, #0
  403db0:	f43f af51 	beq.w	403c56 <indev_drag+0x1a>
                drag_obj->signal_cb(drag_obj, LV_SIGNAL_DRAG_BEGIN, indev_act);
  403db4:	69eb      	ldr	r3, [r5, #28]
  403db6:	4a5a      	ldr	r2, [pc, #360]	; (403f20 <indev_drag+0x2e4>)
  403db8:	6812      	ldr	r2, [r2, #0]
  403dba:	2111      	movs	r1, #17
  403dbc:	4628      	mov	r0, r5
  403dbe:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403dc0:	4620      	mov	r0, r4
  403dc2:	4b5e      	ldr	r3, [pc, #376]	; (403f3c <indev_drag+0x300>)
  403dc4:	4798      	blx	r3
  403dc6:	2800      	cmp	r0, #0
  403dc8:	f47f af45 	bne.w	403c56 <indev_drag+0x1a>
                lv_event_send(drag_obj, LV_EVENT_DRAG_BEGIN, NULL);
  403dcc:	2200      	movs	r2, #0
  403dce:	2108      	movs	r1, #8
  403dd0:	4628      	mov	r0, r5
  403dd2:	4b5b      	ldr	r3, [pc, #364]	; (403f40 <indev_drag+0x304>)
  403dd4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  403dd6:	4620      	mov	r0, r4
  403dd8:	4b58      	ldr	r3, [pc, #352]	; (403f3c <indev_drag+0x300>)
  403dda:	4798      	blx	r3
  403ddc:	e73b      	b.n	403c56 <indev_drag+0x1a>
    bool drag_just_started = false;
  403dde:	2700      	movs	r7, #0
  403de0:	e789      	b.n	403cf6 <indev_drag+0xba>
                if(drag_just_started) {
  403de2:	2f00      	cmp	r7, #0
  403de4:	d0af      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  403de6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403dea:	2203      	movs	r2, #3
  403dec:	f362 0384 	bfi	r3, r2, #2, #3
  403df0:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    act_x += proc->types.pointer.drag_sum.x;
  403df4:	8a23      	ldrh	r3, [r4, #16]
  403df6:	4498      	add	r8, r3
  403df8:	fa0f f888 	sxth.w	r8, r8
                    act_y += proc->types.pointer.drag_sum.y;
  403dfc:	8a63      	ldrh	r3, [r4, #18]
  403dfe:	4499      	add	r9, r3
  403e00:	fa0f f989 	sxth.w	r9, r9
  403e04:	e79f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e06:	2f00      	cmp	r7, #0
  403e08:	d09d      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403e0a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e0e:	2201      	movs	r2, #1
  403e10:	f362 0384 	bfi	r3, r2, #2, #3
  403e14:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.y = 0;
  403e18:	2300      	movs	r3, #0
  403e1a:	8263      	strh	r3, [r4, #18]
                    act_x += proc->types.pointer.drag_sum.x;
  403e1c:	8a23      	ldrh	r3, [r4, #16]
  403e1e:	4498      	add	r8, r3
  403e20:	fa0f f888 	sxth.w	r8, r8
  403e24:	e78f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e26:	2f00      	cmp	r7, #0
  403e28:	d08d      	beq.n	403d46 <indev_drag+0x10a>
                    proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403e2a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e2e:	2202      	movs	r2, #2
  403e30:	f362 0384 	bfi	r3, r2, #2, #3
  403e34:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                    proc->types.pointer.drag_sum.x = 0;
  403e38:	2300      	movs	r3, #0
  403e3a:	8223      	strh	r3, [r4, #16]
                    act_y += proc->types.pointer.drag_sum.y;
  403e3c:	8a63      	ldrh	r3, [r4, #18]
  403e3e:	4499      	add	r9, r3
  403e40:	fa0f f989 	sxth.w	r9, r9
  403e44:	e77f      	b.n	403d46 <indev_drag+0x10a>
                if(drag_just_started) {
  403e46:	2f00      	cmp	r7, #0
  403e48:	f43f af7d 	beq.w	403d46 <indev_drag+0x10a>
                    if(LV_MATH_ABS(proc->types.pointer.drag_sum.x) > LV_MATH_ABS(proc->types.pointer.drag_sum.y)) {
  403e4c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403e50:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
  403e54:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
  403e58:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403e5c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
  403e60:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
  403e64:	4288      	cmp	r0, r1
  403e66:	dd0d      	ble.n	403e84 <indev_drag+0x248>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_HOR;
  403e68:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  403e6c:	2101      	movs	r1, #1
  403e6e:	f361 0384 	bfi	r3, r1, #2, #3
  403e72:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.y = 0;
  403e76:	2300      	movs	r3, #0
  403e78:	8263      	strh	r3, [r4, #18]
                        act_x += proc->types.pointer.drag_sum.x;
  403e7a:	fa18 f882 	uxtah	r8, r8, r2
  403e7e:	fa0f f888 	sxth.w	r8, r8
  403e82:	e760      	b.n	403d46 <indev_drag+0x10a>
                        proc->types.pointer.drag_dir = LV_DRAG_DIR_VER;
  403e84:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  403e88:	2102      	movs	r1, #2
  403e8a:	f361 0284 	bfi	r2, r1, #2, #3
  403e8e:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
                        proc->types.pointer.drag_sum.x = 0;
  403e92:	2200      	movs	r2, #0
  403e94:	8222      	strh	r2, [r4, #16]
                        act_y += proc->types.pointer.drag_sum.y;
  403e96:	fa19 f983 	uxtah	r9, r9, r3
  403e9a:	fa0f f989 	sxth.w	r9, r9
  403e9e:	e752      	b.n	403d46 <indev_drag+0x10a>
                LV_MATH_ABS(proc->types.pointer.drag_sum.x) < LV_MATH_ABS(proc->types.pointer.drag_sum.y))) {
  403ea0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  403ea4:	2a00      	cmp	r2, #0
  403ea6:	bfb8      	it	lt
  403ea8:	4252      	neglt	r2, r2
  403eaa:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  403eae:	2b00      	cmp	r3, #0
  403eb0:	bfb8      	it	lt
  403eb2:	425b      	neglt	r3, r3
               (allowed_dirs == LV_DRAG_DIR_ONE &&
  403eb4:	429a      	cmp	r2, r3
  403eb6:	f6bf af64 	bge.w	403d82 <indev_drag+0x146>
                act_y += proc->types.pointer.vect.y;
  403eba:	89e3      	ldrh	r3, [r4, #14]
  403ebc:	4499      	add	r9, r3
  403ebe:	fa0f f989 	sxth.w	r9, r9
  403ec2:	e75e      	b.n	403d82 <indev_drag+0x146>
            if(drag_obj->coords.x1 == prev_x && drag_obj->coords.y1 == prev_y) {
  403ec4:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
  403ec8:	459b      	cmp	fp, r3
  403eca:	f47f af70 	bne.w	403dae <indev_drag+0x172>
                lv_coord_t act_par_w = lv_obj_get_width(lv_obj_get_parent(drag_obj));
  403ece:	4628      	mov	r0, r5
  403ed0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 403f48 <indev_drag+0x30c>
  403ed4:	47c0      	blx	r8
  403ed6:	4b13      	ldr	r3, [pc, #76]	; (403f24 <indev_drag+0x2e8>)
  403ed8:	4798      	blx	r3
  403eda:	4681      	mov	r9, r0
                lv_coord_t act_par_h = lv_obj_get_height(lv_obj_get_parent(drag_obj));
  403edc:	4628      	mov	r0, r5
  403ede:	47c0      	blx	r8
  403ee0:	4b11      	ldr	r3, [pc, #68]	; (403f28 <indev_drag+0x2ec>)
  403ee2:	4798      	blx	r3
                if(act_par_w == prev_par_w && act_par_h == prev_par_h) {
  403ee4:	9b00      	ldr	r3, [sp, #0]
  403ee6:	461a      	mov	r2, r3
  403ee8:	9b01      	ldr	r3, [sp, #4]
  403eea:	454a      	cmp	r2, r9
  403eec:	bf08      	it	eq
  403eee:	4283      	cmpeq	r3, r0
  403ef0:	f47f af5d 	bne.w	403dae <indev_drag+0x172>
                    uint16_t new_inv_buf_size = lv_disp_get_inv_buf_size(indev_act->driver.disp);
  403ef4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 403f20 <indev_drag+0x2e4>
  403ef8:	f8d8 3000 	ldr.w	r3, [r8]
  403efc:	68d8      	ldr	r0, [r3, #12]
  403efe:	4b0d      	ldr	r3, [pc, #52]	; (403f34 <indev_drag+0x2f8>)
  403f00:	4798      	blx	r3
                    _lv_disp_pop_from_inv_buf(indev_act->driver.disp, new_inv_buf_size - inv_buf_size);
  403f02:	f8d8 3000 	ldr.w	r3, [r8]
  403f06:	1b81      	subs	r1, r0, r6
  403f08:	b289      	uxth	r1, r1
  403f0a:	68d8      	ldr	r0, [r3, #12]
  403f0c:	4b0d      	ldr	r3, [pc, #52]	; (403f44 <indev_drag+0x308>)
  403f0e:	4798      	blx	r3
  403f10:	e74d      	b.n	403dae <indev_drag+0x172>
  403f12:	bf00      	nop
  403f14:	00403705 	.word	0x00403705
  403f18:	00406291 	.word	0x00406291
  403f1c:	004062bd 	.word	0x004062bd
  403f20:	2040c38c 	.word	0x2040c38c
  403f24:	004056c9 	.word	0x004056c9
  403f28:	004056f9 	.word	0x004056f9
  403f2c:	00405649 	.word	0x00405649
  403f30:	00405689 	.word	0x00405689
  403f34:	00414739 	.word	0x00414739
  403f38:	00405b85 	.word	0x00405b85
  403f3c:	004036e9 	.word	0x004036e9
  403f40:	004053e5 	.word	0x004053e5
  403f44:	00414743 	.word	0x00414743
  403f48:	004054f5 	.word	0x004054f5

00403f4c <indev_gesture>:
{
  403f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(proc->types.pointer.gesture_sent) return;
  403f4e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
  403f52:	f013 0f20 	tst.w	r3, #32
  403f56:	d153      	bne.n	404000 <indev_gesture+0xb4>
  403f58:	4605      	mov	r5, r0
    lv_obj_t * gesture_obj = proc->types.pointer.act_obj;
  403f5a:	6984      	ldr	r4, [r0, #24]
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403f5c:	e003      	b.n	403f66 <indev_gesture+0x1a>
        gesture_obj = lv_obj_get_parent(gesture_obj);
  403f5e:	4620      	mov	r0, r4
  403f60:	4b33      	ldr	r3, [pc, #204]	; (404030 <indev_gesture+0xe4>)
  403f62:	4798      	blx	r3
  403f64:	4604      	mov	r4, r0
    while(gesture_obj && lv_obj_get_gesture_parent(gesture_obj)) {
  403f66:	b124      	cbz	r4, 403f72 <indev_gesture+0x26>
  403f68:	4620      	mov	r0, r4
  403f6a:	4b32      	ldr	r3, [pc, #200]	; (404034 <indev_gesture+0xe8>)
  403f6c:	4798      	blx	r3
  403f6e:	2800      	cmp	r0, #0
  403f70:	d1f5      	bne.n	403f5e <indev_gesture+0x12>
    if(gesture_obj == NULL) return;
  403f72:	2c00      	cmp	r4, #0
  403f74:	d044      	beq.n	404000 <indev_gesture+0xb4>
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403f76:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  403f7a:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
  403f7e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
  403f82:	4a2d      	ldr	r2, [pc, #180]	; (404038 <indev_gesture+0xec>)
  403f84:	6812      	ldr	r2, [r2, #0]
  403f86:	7d91      	ldrb	r1, [r2, #22]
  403f88:	4288      	cmp	r0, r1
  403f8a:	da09      	bge.n	403fa0 <indev_gesture+0x54>
       (LV_MATH_ABS(proc->types.pointer.vect.y) < indev_act->driver.gesture_min_velocity)) {
  403f8c:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
  403f90:	2800      	cmp	r0, #0
  403f92:	bfb8      	it	lt
  403f94:	4240      	neglt	r0, r0
    if((LV_MATH_ABS(proc->types.pointer.vect.x) < indev_act->driver.gesture_min_velocity) &&
  403f96:	4281      	cmp	r1, r0
  403f98:	dd02      	ble.n	403fa0 <indev_gesture+0x54>
        proc->types.pointer.gesture_sum.x = 0;
  403f9a:	2100      	movs	r1, #0
  403f9c:	84e9      	strh	r1, [r5, #38]	; 0x26
        proc->types.pointer.gesture_sum.y = 0;
  403f9e:	8529      	strh	r1, [r5, #40]	; 0x28
    proc->types.pointer.gesture_sum.x += proc->types.pointer.vect.x;
  403fa0:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
  403fa2:	fa11 f383 	uxtah	r3, r1, r3
  403fa6:	b21b      	sxth	r3, r3
  403fa8:	84eb      	strh	r3, [r5, #38]	; 0x26
    proc->types.pointer.gesture_sum.y += proc->types.pointer.vect.y;
  403faa:	89e9      	ldrh	r1, [r5, #14]
  403fac:	8d28      	ldrh	r0, [r5, #40]	; 0x28
  403fae:	4401      	add	r1, r0
  403fb0:	b209      	sxth	r1, r1
  403fb2:	8529      	strh	r1, [r5, #40]	; 0x28
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403fb4:	ea83 76e3 	eor.w	r6, r3, r3, asr #31
  403fb8:	eba6 76e3 	sub.w	r6, r6, r3, asr #31
  403fbc:	7dd0      	ldrb	r0, [r2, #23]
  403fbe:	4286      	cmp	r6, r0
  403fc0:	dc05      	bgt.n	403fce <indev_gesture+0x82>
       (LV_MATH_ABS(proc->types.pointer.gesture_sum.y) > indev_act->driver.gesture_limit)) {
  403fc2:	ea81 77e1 	eor.w	r7, r1, r1, asr #31
  403fc6:	eba7 77e1 	sub.w	r7, r7, r1, asr #31
    if((LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > indev_act->driver.gesture_limit) ||
  403fca:	42b8      	cmp	r0, r7
  403fcc:	da18      	bge.n	404000 <indev_gesture+0xb4>
        proc->types.pointer.gesture_sent = 1;
  403fce:	f895 002a 	ldrb.w	r0, [r5, #42]	; 0x2a
  403fd2:	f040 0020 	orr.w	r0, r0, #32
  403fd6:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
        if(LV_MATH_ABS(proc->types.pointer.gesture_sum.x) > LV_MATH_ABS(proc->types.pointer.gesture_sum.y)) {
  403fda:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
  403fde:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
  403fe2:	4286      	cmp	r6, r0
  403fe4:	dd11      	ble.n	40400a <indev_gesture+0xbe>
            if(proc->types.pointer.gesture_sum.x > 0)
  403fe6:	2b00      	cmp	r3, #0
  403fe8:	dd0b      	ble.n	404002 <indev_gesture+0xb6>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_RIGHT;
  403fea:	2303      	movs	r3, #3
  403fec:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        gesture_obj->signal_cb(gesture_obj, LV_SIGNAL_GESTURE, indev_act);
  403ff0:	69e3      	ldr	r3, [r4, #28]
  403ff2:	2114      	movs	r1, #20
  403ff4:	4620      	mov	r0, r4
  403ff6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  403ff8:	4628      	mov	r0, r5
  403ffa:	4b10      	ldr	r3, [pc, #64]	; (40403c <indev_gesture+0xf0>)
  403ffc:	4798      	blx	r3
  403ffe:	b170      	cbz	r0, 40401e <indev_gesture+0xd2>
  404000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_LEFT;
  404002:	2302      	movs	r3, #2
  404004:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404008:	e7f2      	b.n	403ff0 <indev_gesture+0xa4>
            if(proc->types.pointer.gesture_sum.y > 0)
  40400a:	2900      	cmp	r1, #0
  40400c:	dd03      	ble.n	404016 <indev_gesture+0xca>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_BOTTOM;
  40400e:	2301      	movs	r3, #1
  404010:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  404014:	e7ec      	b.n	403ff0 <indev_gesture+0xa4>
                proc->types.pointer.gesture_dir = LV_GESTURE_DIR_TOP;
  404016:	2300      	movs	r3, #0
  404018:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  40401c:	e7e8      	b.n	403ff0 <indev_gesture+0xa4>
        lv_event_send(gesture_obj, LV_EVENT_GESTURE, NULL);
  40401e:	2200      	movs	r2, #0
  404020:	210b      	movs	r1, #11
  404022:	4620      	mov	r0, r4
  404024:	4b06      	ldr	r3, [pc, #24]	; (404040 <indev_gesture+0xf4>)
  404026:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404028:	4628      	mov	r0, r5
  40402a:	4b04      	ldr	r3, [pc, #16]	; (40403c <indev_gesture+0xf0>)
  40402c:	4798      	blx	r3
  40402e:	e7e7      	b.n	404000 <indev_gesture+0xb4>
  404030:	004054f5 	.word	0x004054f5
  404034:	0040631f 	.word	0x0040631f
  404038:	2040c38c 	.word	0x2040c38c
  40403c:	004036e9 	.word	0x004036e9
  404040:	004053e5 	.word	0x004053e5

00404044 <indev_keypad_proc>:
{
  404044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404046:	7b8b      	ldrb	r3, [r1, #14]
  404048:	2b01      	cmp	r3, #1
  40404a:	d02f      	beq.n	4040ac <indev_keypad_proc+0x68>
    if(i->proc.wait_until_release) {
  40404c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404050:	f013 0f08 	tst.w	r3, #8
  404054:	d00b      	beq.n	40406e <indev_keypad_proc+0x2a>
        i->proc.wait_until_release      = 0;
  404056:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  40405a:	2200      	movs	r2, #0
  40405c:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  40405e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404062:	f362 0300 	bfi	r3, r2, #0, #1
  404066:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  40406a:	f880 2020 	strb.w	r2, [r0, #32]
    lv_group_t * g = i->group;
  40406e:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  404070:	b1de      	cbz	r6, 4040aa <indev_keypad_proc+0x66>
  404072:	460d      	mov	r5, r1
  404074:	4604      	mov	r4, r0
    indev_obj_act = lv_group_get_focused(g);
  404076:	4630      	mov	r0, r6
  404078:	4b95      	ldr	r3, [pc, #596]	; (4042d0 <indev_keypad_proc+0x28c>)
  40407a:	4798      	blx	r3
  40407c:	4b95      	ldr	r3, [pc, #596]	; (4042d4 <indev_keypad_proc+0x290>)
  40407e:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  404080:	b198      	cbz	r0, 4040aa <indev_keypad_proc+0x66>
    uint32_t prev_key = i->proc.types.keypad.last_key;
  404082:	6a61      	ldr	r1, [r4, #36]	; 0x24
    i->proc.types.keypad.last_key = data->key;
  404084:	686b      	ldr	r3, [r5, #4]
  404086:	6263      	str	r3, [r4, #36]	; 0x24
    uint32_t prev_state             = i->proc.types.keypad.last_state;
  404088:	f894 2020 	ldrb.w	r2, [r4, #32]
    i->proc.types.keypad.last_state = data->state;
  40408c:	7bab      	ldrb	r3, [r5, #14]
  40408e:	f884 3020 	strb.w	r3, [r4, #32]
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  404092:	7bab      	ldrb	r3, [r5, #14]
  404094:	2b01      	cmp	r3, #1
  404096:	d00f      	beq.n	4040b8 <indev_keypad_proc+0x74>
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  404098:	2b01      	cmp	r3, #1
  40409a:	d066      	beq.n	40416a <indev_keypad_proc+0x126>
    else if(data->state == LV_INDEV_STATE_REL && prev_state == LV_INDEV_STATE_PR) {
  40409c:	b913      	cbnz	r3, 4040a4 <indev_keypad_proc+0x60>
  40409e:	2a01      	cmp	r2, #1
  4040a0:	f000 810a 	beq.w	4042b8 <indev_keypad_proc+0x274>
    indev_obj_act = NULL;
  4040a4:	2200      	movs	r2, #0
  4040a6:	4b8b      	ldr	r3, [pc, #556]	; (4042d4 <indev_keypad_proc+0x290>)
  4040a8:	601a      	str	r2, [r3, #0]
  4040aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4040ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4040b0:	f013 0f08 	tst.w	r3, #8
  4040b4:	d0ca      	beq.n	40404c <indev_keypad_proc+0x8>
  4040b6:	e7f8      	b.n	4040aa <indev_keypad_proc+0x66>
    if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_REL) {
  4040b8:	2a00      	cmp	r2, #0
  4040ba:	d1ed      	bne.n	404098 <indev_keypad_proc+0x54>
        i->proc.pr_timestamp = lv_tick_get();
  4040bc:	4b86      	ldr	r3, [pc, #536]	; (4042d8 <indev_keypad_proc+0x294>)
  4040be:	4798      	blx	r3
  4040c0:	64a0      	str	r0, [r4, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  4040c2:	6869      	ldr	r1, [r5, #4]
  4040c4:	290a      	cmp	r1, #10
  4040c6:	d009      	beq.n	4040dc <indev_keypad_proc+0x98>
        else if(data->key == LV_KEY_ESC) {
  4040c8:	291b      	cmp	r1, #27
  4040ca:	d022      	beq.n	404112 <indev_keypad_proc+0xce>
        else if(data->key == LV_KEY_NEXT) {
  4040cc:	2909      	cmp	r1, #9
  4040ce:	d030      	beq.n	404132 <indev_keypad_proc+0xee>
        else if(data->key == LV_KEY_PREV) {
  4040d0:	290b      	cmp	r1, #11
  4040d2:	d03c      	beq.n	40414e <indev_keypad_proc+0x10a>
            lv_group_send_data(g, data->key);
  4040d4:	4630      	mov	r0, r6
  4040d6:	4b81      	ldr	r3, [pc, #516]	; (4042dc <indev_keypad_proc+0x298>)
  4040d8:	4798      	blx	r3
  4040da:	e7e3      	b.n	4040a4 <indev_keypad_proc+0x60>
            lv_group_send_data(g, LV_KEY_ENTER);
  4040dc:	4630      	mov	r0, r6
  4040de:	4b7f      	ldr	r3, [pc, #508]	; (4042dc <indev_keypad_proc+0x298>)
  4040e0:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  4040e2:	4b7c      	ldr	r3, [pc, #496]	; (4042d4 <indev_keypad_proc+0x290>)
  4040e4:	6818      	ldr	r0, [r3, #0]
  4040e6:	69c3      	ldr	r3, [r0, #28]
  4040e8:	2200      	movs	r2, #0
  4040ea:	210b      	movs	r1, #11
  4040ec:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4040ee:	341c      	adds	r4, #28
  4040f0:	4620      	mov	r0, r4
  4040f2:	4b7b      	ldr	r3, [pc, #492]	; (4042e0 <indev_keypad_proc+0x29c>)
  4040f4:	4798      	blx	r3
  4040f6:	2800      	cmp	r0, #0
  4040f8:	d1d7      	bne.n	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  4040fa:	2200      	movs	r2, #0
  4040fc:	4611      	mov	r1, r2
  4040fe:	4b75      	ldr	r3, [pc, #468]	; (4042d4 <indev_keypad_proc+0x290>)
  404100:	6818      	ldr	r0, [r3, #0]
  404102:	4b78      	ldr	r3, [pc, #480]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404104:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404106:	4620      	mov	r0, r4
  404108:	4b75      	ldr	r3, [pc, #468]	; (4042e0 <indev_keypad_proc+0x29c>)
  40410a:	4798      	blx	r3
  40410c:	2800      	cmp	r0, #0
  40410e:	d0c9      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_send_data(g, LV_KEY_ESC);
  404112:	4630      	mov	r0, r6
  404114:	4b71      	ldr	r3, [pc, #452]	; (4042dc <indev_keypad_proc+0x298>)
  404116:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404118:	2200      	movs	r2, #0
  40411a:	2114      	movs	r1, #20
  40411c:	4b6d      	ldr	r3, [pc, #436]	; (4042d4 <indev_keypad_proc+0x290>)
  40411e:	6818      	ldr	r0, [r3, #0]
  404120:	4b70      	ldr	r3, [pc, #448]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404122:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404124:	f104 001c 	add.w	r0, r4, #28
  404128:	4b6d      	ldr	r3, [pc, #436]	; (4042e0 <indev_keypad_proc+0x29c>)
  40412a:	4798      	blx	r3
  40412c:	2800      	cmp	r0, #0
  40412e:	d0b9      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  404132:	2100      	movs	r1, #0
  404134:	4630      	mov	r0, r6
  404136:	4b6c      	ldr	r3, [pc, #432]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404138:	4798      	blx	r3
            lv_group_focus_next(g);
  40413a:	4630      	mov	r0, r6
  40413c:	4b6b      	ldr	r3, [pc, #428]	; (4042ec <indev_keypad_proc+0x2a8>)
  40413e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404140:	f104 001c 	add.w	r0, r4, #28
  404144:	4b66      	ldr	r3, [pc, #408]	; (4042e0 <indev_keypad_proc+0x29c>)
  404146:	4798      	blx	r3
  404148:	2800      	cmp	r0, #0
  40414a:	d0ab      	beq.n	4040a4 <indev_keypad_proc+0x60>
  40414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40414e:	2100      	movs	r1, #0
  404150:	4630      	mov	r0, r6
  404152:	4b65      	ldr	r3, [pc, #404]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404154:	4798      	blx	r3
            lv_group_focus_prev(g);
  404156:	4630      	mov	r0, r6
  404158:	4b65      	ldr	r3, [pc, #404]	; (4042f0 <indev_keypad_proc+0x2ac>)
  40415a:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40415c:	f104 001c 	add.w	r0, r4, #28
  404160:	4b5f      	ldr	r3, [pc, #380]	; (4042e0 <indev_keypad_proc+0x29c>)
  404162:	4798      	blx	r3
  404164:	2800      	cmp	r0, #0
  404166:	d09d      	beq.n	4040a4 <indev_keypad_proc+0x60>
  404168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(data->state == LV_INDEV_STATE_PR && prev_state == LV_INDEV_STATE_PR) {
  40416a:	2a01      	cmp	r2, #1
  40416c:	d196      	bne.n	40409c <indev_keypad_proc+0x58>
        if(data->key == LV_KEY_ENTER) {
  40416e:	686b      	ldr	r3, [r5, #4]
  404170:	2b0a      	cmp	r3, #10
  404172:	d024      	beq.n	4041be <indev_keypad_proc+0x17a>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  404174:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404178:	f013 0f01 	tst.w	r3, #1
  40417c:	d037      	beq.n	4041ee <indev_keypad_proc+0x1aa>
        else if(i->proc.long_pr_sent != 0 &&
  40417e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404182:	f013 0f01 	tst.w	r3, #1
  404186:	d08d      	beq.n	4040a4 <indev_keypad_proc+0x60>
                lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  404188:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
  40418a:	4b5a      	ldr	r3, [pc, #360]	; (4042f4 <indev_keypad_proc+0x2b0>)
  40418c:	4798      	blx	r3
  40418e:	8b63      	ldrh	r3, [r4, #26]
        else if(i->proc.long_pr_sent != 0 &&
  404190:	4298      	cmp	r0, r3
  404192:	d987      	bls.n	4040a4 <indev_keypad_proc+0x60>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404194:	4b50      	ldr	r3, [pc, #320]	; (4042d8 <indev_keypad_proc+0x294>)
  404196:	4798      	blx	r3
  404198:	64e0      	str	r0, [r4, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40419a:	6869      	ldr	r1, [r5, #4]
  40419c:	290a      	cmp	r1, #10
  40419e:	d053      	beq.n	404248 <indev_keypad_proc+0x204>
            else if(data->key == LV_KEY_NEXT) {
  4041a0:	2909      	cmp	r1, #9
  4041a2:	d06b      	beq.n	40427c <indev_keypad_proc+0x238>
            else if(data->key == LV_KEY_PREV) {
  4041a4:	290b      	cmp	r1, #11
  4041a6:	d078      	beq.n	40429a <indev_keypad_proc+0x256>
                lv_group_send_data(g, data->key);
  4041a8:	4630      	mov	r0, r6
  4041aa:	4b4c      	ldr	r3, [pc, #304]	; (4042dc <indev_keypad_proc+0x298>)
  4041ac:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4041ae:	f104 001c 	add.w	r0, r4, #28
  4041b2:	4b4b      	ldr	r3, [pc, #300]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041b4:	4798      	blx	r3
  4041b6:	2800      	cmp	r0, #0
  4041b8:	f43f af74 	beq.w	4040a4 <indev_keypad_proc+0x60>
  4041bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, NULL);
  4041be:	69c3      	ldr	r3, [r0, #28]
  4041c0:	2200      	movs	r2, #0
  4041c2:	210c      	movs	r1, #12
  4041c4:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4041c6:	f104 071c 	add.w	r7, r4, #28
  4041ca:	4638      	mov	r0, r7
  4041cc:	4b44      	ldr	r3, [pc, #272]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041ce:	4798      	blx	r3
  4041d0:	2800      	cmp	r0, #0
  4041d2:	f47f af6a 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  4041d6:	2200      	movs	r2, #0
  4041d8:	2101      	movs	r1, #1
  4041da:	4b3e      	ldr	r3, [pc, #248]	; (4042d4 <indev_keypad_proc+0x290>)
  4041dc:	6818      	ldr	r0, [r3, #0]
  4041de:	4b41      	ldr	r3, [pc, #260]	; (4042e4 <indev_keypad_proc+0x2a0>)
  4041e0:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4041e2:	4638      	mov	r0, r7
  4041e4:	4b3e      	ldr	r3, [pc, #248]	; (4042e0 <indev_keypad_proc+0x29c>)
  4041e6:	4798      	blx	r3
  4041e8:	2800      	cmp	r0, #0
  4041ea:	d0c3      	beq.n	404174 <indev_keypad_proc+0x130>
  4041ec:	e75d      	b.n	4040aa <indev_keypad_proc+0x66>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4041ee:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  4041f0:	4b40      	ldr	r3, [pc, #256]	; (4042f4 <indev_keypad_proc+0x2b0>)
  4041f2:	4798      	blx	r3
  4041f4:	8b23      	ldrh	r3, [r4, #24]
  4041f6:	4298      	cmp	r0, r3
  4041f8:	d9c1      	bls.n	40417e <indev_keypad_proc+0x13a>
            i->proc.long_pr_sent = 1;
  4041fa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4041fe:	f043 0301 	orr.w	r3, r3, #1
  404202:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
            if(data->key == LV_KEY_ENTER) {
  404206:	686b      	ldr	r3, [r5, #4]
  404208:	2b0a      	cmp	r3, #10
  40420a:	f47f af4b 	bne.w	4040a4 <indev_keypad_proc+0x60>
                i->proc.longpr_rep_timestamp = lv_tick_get();
  40420e:	4b32      	ldr	r3, [pc, #200]	; (4042d8 <indev_keypad_proc+0x294>)
  404210:	4798      	blx	r3
  404212:	64e0      	str	r0, [r4, #76]	; 0x4c
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404214:	4b2f      	ldr	r3, [pc, #188]	; (4042d4 <indev_keypad_proc+0x290>)
  404216:	6818      	ldr	r0, [r3, #0]
  404218:	69c3      	ldr	r3, [r0, #28]
  40421a:	2200      	movs	r2, #0
  40421c:	210f      	movs	r1, #15
  40421e:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404220:	341c      	adds	r4, #28
  404222:	4620      	mov	r0, r4
  404224:	4b2e      	ldr	r3, [pc, #184]	; (4042e0 <indev_keypad_proc+0x29c>)
  404226:	4798      	blx	r3
  404228:	2800      	cmp	r0, #0
  40422a:	f47f af3e 	bne.w	4040aa <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  40422e:	2200      	movs	r2, #0
  404230:	2104      	movs	r1, #4
  404232:	4b28      	ldr	r3, [pc, #160]	; (4042d4 <indev_keypad_proc+0x290>)
  404234:	6818      	ldr	r0, [r3, #0]
  404236:	4b2b      	ldr	r3, [pc, #172]	; (4042e4 <indev_keypad_proc+0x2a0>)
  404238:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40423a:	4620      	mov	r0, r4
  40423c:	4b28      	ldr	r3, [pc, #160]	; (4042e0 <indev_keypad_proc+0x29c>)
  40423e:	4798      	blx	r3
  404240:	2800      	cmp	r0, #0
  404242:	f43f af2f 	beq.w	4040a4 <indev_keypad_proc+0x60>
  404246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404248:	4b22      	ldr	r3, [pc, #136]	; (4042d4 <indev_keypad_proc+0x290>)
  40424a:	6818      	ldr	r0, [r3, #0]
  40424c:	69c3      	ldr	r3, [r0, #28]
  40424e:	2200      	movs	r2, #0
  404250:	2110      	movs	r1, #16
  404252:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404254:	341c      	adds	r4, #28
  404256:	4620      	mov	r0, r4
  404258:	4b21      	ldr	r3, [pc, #132]	; (4042e0 <indev_keypad_proc+0x29c>)
  40425a:	4798      	blx	r3
  40425c:	2800      	cmp	r0, #0
  40425e:	f47f af24 	bne.w	4040aa <indev_keypad_proc+0x66>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404262:	2200      	movs	r2, #0
  404264:	2105      	movs	r1, #5
  404266:	4b1b      	ldr	r3, [pc, #108]	; (4042d4 <indev_keypad_proc+0x290>)
  404268:	6818      	ldr	r0, [r3, #0]
  40426a:	4b1e      	ldr	r3, [pc, #120]	; (4042e4 <indev_keypad_proc+0x2a0>)
  40426c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40426e:	4620      	mov	r0, r4
  404270:	4b1b      	ldr	r3, [pc, #108]	; (4042e0 <indev_keypad_proc+0x29c>)
  404272:	4798      	blx	r3
  404274:	2800      	cmp	r0, #0
  404276:	f43f af15 	beq.w	4040a4 <indev_keypad_proc+0x60>
  40427a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40427c:	2100      	movs	r1, #0
  40427e:	4630      	mov	r0, r6
  404280:	4b19      	ldr	r3, [pc, #100]	; (4042e8 <indev_keypad_proc+0x2a4>)
  404282:	4798      	blx	r3
                lv_group_focus_next(g);
  404284:	4630      	mov	r0, r6
  404286:	4b19      	ldr	r3, [pc, #100]	; (4042ec <indev_keypad_proc+0x2a8>)
  404288:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40428a:	f104 001c 	add.w	r0, r4, #28
  40428e:	4b14      	ldr	r3, [pc, #80]	; (4042e0 <indev_keypad_proc+0x29c>)
  404290:	4798      	blx	r3
  404292:	2800      	cmp	r0, #0
  404294:	f43f af06 	beq.w	4040a4 <indev_keypad_proc+0x60>
  404298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lv_group_set_editing(g, false); /*Editing is not used by KEYPAD is be sure it is disabled*/
  40429a:	2100      	movs	r1, #0
  40429c:	4630      	mov	r0, r6
  40429e:	4b12      	ldr	r3, [pc, #72]	; (4042e8 <indev_keypad_proc+0x2a4>)
  4042a0:	4798      	blx	r3
                lv_group_focus_prev(g);
  4042a2:	4630      	mov	r0, r6
  4042a4:	4b12      	ldr	r3, [pc, #72]	; (4042f0 <indev_keypad_proc+0x2ac>)
  4042a6:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4042a8:	f104 001c 	add.w	r0, r4, #28
  4042ac:	4b0c      	ldr	r3, [pc, #48]	; (4042e0 <indev_keypad_proc+0x29c>)
  4042ae:	4798      	blx	r3
  4042b0:	2800      	cmp	r0, #0
  4042b2:	f43f aef7 	beq.w	4040a4 <indev_keypad_proc+0x60>
  4042b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        data->key = prev_key;
  4042b8:	6069      	str	r1, [r5, #4]
        if(data->key == LV_KEY_ENTER) {
  4042ba:	290a      	cmp	r1, #10
  4042bc:	d01c      	beq.n	4042f8 <indev_keypad_proc+0x2b4>
        i->proc.pr_timestamp = 0;
  4042be:	2200      	movs	r2, #0
  4042c0:	64a2      	str	r2, [r4, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  4042c2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  4042c6:	f362 0300 	bfi	r3, r2, #0, #1
  4042ca:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  4042ce:	e6e9      	b.n	4040a4 <indev_keypad_proc+0x60>
  4042d0:	00403529 	.word	0x00403529
  4042d4:	2040c390 	.word	0x2040c390
  4042d8:	00414a3d 	.word	0x00414a3d
  4042dc:	0040353d 	.word	0x0040353d
  4042e0:	004036e9 	.word	0x004036e9
  4042e4:	004053e5 	.word	0x004053e5
  4042e8:	00403575 	.word	0x00403575
  4042ec:	0040338d 	.word	0x0040338d
  4042f0:	004033a5 	.word	0x004033a5
  4042f4:	00414a59 	.word	0x00414a59
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4042f8:	69c3      	ldr	r3, [r0, #28]
  4042fa:	2200      	movs	r2, #0
  4042fc:	210e      	movs	r1, #14
  4042fe:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404300:	f104 051c 	add.w	r5, r4, #28
  404304:	4628      	mov	r0, r5
  404306:	4b17      	ldr	r3, [pc, #92]	; (404364 <indev_keypad_proc+0x320>)
  404308:	4798      	blx	r3
  40430a:	2800      	cmp	r0, #0
  40430c:	f47f aecd 	bne.w	4040aa <indev_keypad_proc+0x66>
            if(i->proc.long_pr_sent == 0) {
  404310:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  404314:	f013 0f01 	tst.w	r3, #1
  404318:	d10b      	bne.n	404332 <indev_keypad_proc+0x2ee>
                lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40431a:	2200      	movs	r2, #0
  40431c:	2103      	movs	r1, #3
  40431e:	4b12      	ldr	r3, [pc, #72]	; (404368 <indev_keypad_proc+0x324>)
  404320:	6818      	ldr	r0, [r3, #0]
  404322:	4b12      	ldr	r3, [pc, #72]	; (40436c <indev_keypad_proc+0x328>)
  404324:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404326:	4628      	mov	r0, r5
  404328:	4b0e      	ldr	r3, [pc, #56]	; (404364 <indev_keypad_proc+0x320>)
  40432a:	4798      	blx	r3
  40432c:	2800      	cmp	r0, #0
  40432e:	f47f aebc 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404332:	2200      	movs	r2, #0
  404334:	2106      	movs	r1, #6
  404336:	4b0c      	ldr	r3, [pc, #48]	; (404368 <indev_keypad_proc+0x324>)
  404338:	6818      	ldr	r0, [r3, #0]
  40433a:	4b0c      	ldr	r3, [pc, #48]	; (40436c <indev_keypad_proc+0x328>)
  40433c:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  40433e:	4628      	mov	r0, r5
  404340:	4b08      	ldr	r3, [pc, #32]	; (404364 <indev_keypad_proc+0x320>)
  404342:	4798      	blx	r3
  404344:	2800      	cmp	r0, #0
  404346:	f47f aeb0 	bne.w	4040aa <indev_keypad_proc+0x66>
            lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40434a:	2200      	movs	r2, #0
  40434c:	2107      	movs	r1, #7
  40434e:	4b06      	ldr	r3, [pc, #24]	; (404368 <indev_keypad_proc+0x324>)
  404350:	6818      	ldr	r0, [r3, #0]
  404352:	4b06      	ldr	r3, [pc, #24]	; (40436c <indev_keypad_proc+0x328>)
  404354:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  404356:	4628      	mov	r0, r5
  404358:	4b02      	ldr	r3, [pc, #8]	; (404364 <indev_keypad_proc+0x320>)
  40435a:	4798      	blx	r3
  40435c:	2800      	cmp	r0, #0
  40435e:	d0ae      	beq.n	4042be <indev_keypad_proc+0x27a>
  404360:	e6a3      	b.n	4040aa <indev_keypad_proc+0x66>
  404362:	bf00      	nop
  404364:	004036e9 	.word	0x004036e9
  404368:	2040c390 	.word	0x2040c390
  40436c:	004053e5 	.word	0x004053e5

00404370 <indev_encoder_proc>:
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  404370:	7b8b      	ldrb	r3, [r1, #14]
  404372:	2b01      	cmp	r3, #1
  404374:	d040      	beq.n	4043f8 <indev_encoder_proc+0x88>
{
  404376:	b5f0      	push	{r4, r5, r6, r7, lr}
  404378:	b083      	sub	sp, #12
    if(i->proc.wait_until_release) {
  40437a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40437e:	f013 0f08 	tst.w	r3, #8
  404382:	d00b      	beq.n	40439c <indev_encoder_proc+0x2c>
        i->proc.wait_until_release      = 0;
  404384:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
        i->proc.pr_timestamp            = 0;
  404388:	2200      	movs	r2, #0
  40438a:	6482      	str	r2, [r0, #72]	; 0x48
        i->proc.long_pr_sent            = 0;
  40438c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  404390:	f362 0300 	bfi	r3, r2, #0, #1
  404394:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
        i->proc.types.keypad.last_state = LV_INDEV_STATE_REL; /*To skip the processing of release*/
  404398:	f880 2020 	strb.w	r2, [r0, #32]
    lv_indev_state_t last_state     = i->proc.types.keypad.last_state;
  40439c:	f890 7020 	ldrb.w	r7, [r0, #32]
    i->proc.types.keypad.last_state = data->state;
  4043a0:	7b8b      	ldrb	r3, [r1, #14]
  4043a2:	f880 3020 	strb.w	r3, [r0, #32]
    i->proc.types.keypad.last_key   = data->key;
  4043a6:	684b      	ldr	r3, [r1, #4]
  4043a8:	6243      	str	r3, [r0, #36]	; 0x24
    lv_group_t * g = i->group;
  4043aa:	6d86      	ldr	r6, [r0, #88]	; 0x58
    if(g == NULL) return;
  4043ac:	b316      	cbz	r6, 4043f4 <indev_encoder_proc+0x84>
  4043ae:	460c      	mov	r4, r1
  4043b0:	4605      	mov	r5, r0
    indev_obj_act = lv_group_get_focused(g);
  4043b2:	4630      	mov	r0, r6
  4043b4:	4b90      	ldr	r3, [pc, #576]	; (4045f8 <indev_encoder_proc+0x288>)
  4043b6:	4798      	blx	r3
  4043b8:	4b90      	ldr	r3, [pc, #576]	; (4045fc <indev_encoder_proc+0x28c>)
  4043ba:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4043bc:	b1d0      	cbz	r0, 4043f4 <indev_encoder_proc+0x84>
    if(data->state != LV_INDEV_STATE_REL) {
  4043be:	7ba3      	ldrb	r3, [r4, #14]
  4043c0:	b10b      	cbz	r3, 4043c6 <indev_encoder_proc+0x56>
        data->enc_diff = 0;
  4043c2:	2300      	movs	r3, #0
  4043c4:	81a3      	strh	r3, [r4, #12]
    indev_obj_act = lv_group_get_focused(g);
  4043c6:	4630      	mov	r0, r6
  4043c8:	4b8b      	ldr	r3, [pc, #556]	; (4045f8 <indev_encoder_proc+0x288>)
  4043ca:	4798      	blx	r3
  4043cc:	4b8b      	ldr	r3, [pc, #556]	; (4045fc <indev_encoder_proc+0x28c>)
  4043ce:	6018      	str	r0, [r3, #0]
    if(indev_obj_act == NULL) return;
  4043d0:	b180      	cbz	r0, 4043f4 <indev_encoder_proc+0x84>
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  4043d2:	7ba3      	ldrb	r3, [r4, #14]
  4043d4:	2b01      	cmp	r3, #1
  4043d6:	d015      	beq.n	404404 <indev_encoder_proc+0x94>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  4043d8:	2b01      	cmp	r3, #1
  4043da:	d068      	beq.n	4044ae <indev_encoder_proc+0x13e>
    else if(data->state == LV_INDEV_STATE_REL && last_state == LV_INDEV_STATE_PR) {
  4043dc:	b913      	cbnz	r3, 4043e4 <indev_encoder_proc+0x74>
  4043de:	2f01      	cmp	r7, #1
  4043e0:	f000 80fe 	beq.w	4045e0 <indev_encoder_proc+0x270>
    indev_obj_act = NULL;
  4043e4:	2200      	movs	r2, #0
  4043e6:	4b85      	ldr	r3, [pc, #532]	; (4045fc <indev_encoder_proc+0x28c>)
  4043e8:	601a      	str	r2, [r3, #0]
    if(data->enc_diff != 0) {
  4043ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043ee:	2b00      	cmp	r3, #0
  4043f0:	f040 81aa 	bne.w	404748 <indev_encoder_proc+0x3d8>
}
  4043f4:	b003      	add	sp, #12
  4043f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data->state == LV_INDEV_STATE_PR && i->proc.wait_until_release) return;
  4043f8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  4043fc:	f013 0f08 	tst.w	r3, #8
  404400:	d0b9      	beq.n	404376 <indev_encoder_proc+0x6>
  404402:	4770      	bx	lr
    if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_REL) {
  404404:	2f00      	cmp	r7, #0
  404406:	d1e7      	bne.n	4043d8 <indev_encoder_proc+0x68>
        i->proc.pr_timestamp = lv_tick_get();
  404408:	4b7d      	ldr	r3, [pc, #500]	; (404600 <indev_encoder_proc+0x290>)
  40440a:	4798      	blx	r3
  40440c:	64a8      	str	r0, [r5, #72]	; 0x48
        if(data->key == LV_KEY_ENTER) {
  40440e:	6861      	ldr	r1, [r4, #4]
  404410:	290a      	cmp	r1, #10
  404412:	d009      	beq.n	404428 <indev_encoder_proc+0xb8>
        else if(data->key == LV_KEY_LEFT) {
  404414:	2914      	cmp	r1, #20
  404416:	d030      	beq.n	40447a <indev_encoder_proc+0x10a>
        else if(data->key == LV_KEY_RIGHT) {
  404418:	2913      	cmp	r1, #19
  40441a:	d033      	beq.n	404484 <indev_encoder_proc+0x114>
        else if(data->key == LV_KEY_ESC) {
  40441c:	291b      	cmp	r1, #27
  40441e:	d036      	beq.n	40448e <indev_encoder_proc+0x11e>
            lv_group_send_data(g, data->key);
  404420:	4630      	mov	r0, r6
  404422:	4b78      	ldr	r3, [pc, #480]	; (404604 <indev_encoder_proc+0x294>)
  404424:	4798      	blx	r3
  404426:	e7dd      	b.n	4043e4 <indev_encoder_proc+0x74>
            bool editable = false;
  404428:	aa02      	add	r2, sp, #8
  40442a:	2300      	movs	r3, #0
  40442c:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404430:	4b72      	ldr	r3, [pc, #456]	; (4045fc <indev_encoder_proc+0x28c>)
  404432:	6818      	ldr	r0, [r3, #0]
  404434:	69c3      	ldr	r3, [r0, #28]
  404436:	2119      	movs	r1, #25
  404438:	4798      	blx	r3
            if(lv_group_get_editing(g) == true || editable == false) {
  40443a:	4630      	mov	r0, r6
  40443c:	4b72      	ldr	r3, [pc, #456]	; (404608 <indev_encoder_proc+0x298>)
  40443e:	4798      	blx	r3
  404440:	b918      	cbnz	r0, 40444a <indev_encoder_proc+0xda>
  404442:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404446:	2b00      	cmp	r3, #0
  404448:	d1cc      	bne.n	4043e4 <indev_encoder_proc+0x74>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, NULL);
  40444a:	4b6c      	ldr	r3, [pc, #432]	; (4045fc <indev_encoder_proc+0x28c>)
  40444c:	6818      	ldr	r0, [r3, #0]
  40444e:	69c3      	ldr	r3, [r0, #28]
  404450:	2200      	movs	r2, #0
  404452:	210b      	movs	r1, #11
  404454:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404456:	351c      	adds	r5, #28
  404458:	4628      	mov	r0, r5
  40445a:	4b6c      	ldr	r3, [pc, #432]	; (40460c <indev_encoder_proc+0x29c>)
  40445c:	4798      	blx	r3
  40445e:	2800      	cmp	r0, #0
  404460:	d1c8      	bne.n	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404462:	2200      	movs	r2, #0
  404464:	4611      	mov	r1, r2
  404466:	4b65      	ldr	r3, [pc, #404]	; (4045fc <indev_encoder_proc+0x28c>)
  404468:	6818      	ldr	r0, [r3, #0]
  40446a:	4b69      	ldr	r3, [pc, #420]	; (404610 <indev_encoder_proc+0x2a0>)
  40446c:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  40446e:	4628      	mov	r0, r5
  404470:	4b66      	ldr	r3, [pc, #408]	; (40460c <indev_encoder_proc+0x29c>)
  404472:	4798      	blx	r3
  404474:	2800      	cmp	r0, #0
  404476:	d0b5      	beq.n	4043e4 <indev_encoder_proc+0x74>
  404478:	e7bc      	b.n	4043f4 <indev_encoder_proc+0x84>
            data->enc_diff--;
  40447a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40447e:	3b01      	subs	r3, #1
  404480:	81a3      	strh	r3, [r4, #12]
  404482:	e7af      	b.n	4043e4 <indev_encoder_proc+0x74>
            data->enc_diff++;
  404484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404488:	3301      	adds	r3, #1
  40448a:	81a3      	strh	r3, [r4, #12]
  40448c:	e7aa      	b.n	4043e4 <indev_encoder_proc+0x74>
            lv_group_send_data(g, LV_KEY_ESC);
  40448e:	4630      	mov	r0, r6
  404490:	4b5c      	ldr	r3, [pc, #368]	; (404604 <indev_encoder_proc+0x294>)
  404492:	4798      	blx	r3
            lv_event_send(indev_obj_act, LV_EVENT_CANCEL, NULL);
  404494:	2200      	movs	r2, #0
  404496:	2114      	movs	r1, #20
  404498:	4b58      	ldr	r3, [pc, #352]	; (4045fc <indev_encoder_proc+0x28c>)
  40449a:	6818      	ldr	r0, [r3, #0]
  40449c:	4b5c      	ldr	r3, [pc, #368]	; (404610 <indev_encoder_proc+0x2a0>)
  40449e:	4798      	blx	r3
            if(indev_reset_check(&i->proc)) return;
  4044a0:	f105 001c 	add.w	r0, r5, #28
  4044a4:	4b59      	ldr	r3, [pc, #356]	; (40460c <indev_encoder_proc+0x29c>)
  4044a6:	4798      	blx	r3
  4044a8:	2800      	cmp	r0, #0
  4044aa:	d09b      	beq.n	4043e4 <indev_encoder_proc+0x74>
  4044ac:	e7a2      	b.n	4043f4 <indev_encoder_proc+0x84>
    else if(data->state == LV_INDEV_STATE_PR && last_state == LV_INDEV_STATE_PR) {
  4044ae:	2f01      	cmp	r7, #1
  4044b0:	d194      	bne.n	4043dc <indev_encoder_proc+0x6c>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4044b2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4044b6:	f013 0f01 	tst.w	r3, #1
  4044ba:	d01f      	beq.n	4044fc <indev_encoder_proc+0x18c>
        else if(i->proc.long_pr_sent != 0 && lv_tick_elaps(i->proc.longpr_rep_timestamp) > i->driver.long_press_rep_time) {
  4044bc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4044c0:	f013 0f01 	tst.w	r3, #1
  4044c4:	d08e      	beq.n	4043e4 <indev_encoder_proc+0x74>
  4044c6:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
  4044c8:	4b52      	ldr	r3, [pc, #328]	; (404614 <indev_encoder_proc+0x2a4>)
  4044ca:	4798      	blx	r3
  4044cc:	8b6b      	ldrh	r3, [r5, #26]
  4044ce:	4298      	cmp	r0, r3
  4044d0:	d988      	bls.n	4043e4 <indev_encoder_proc+0x74>
            i->proc.longpr_rep_timestamp = lv_tick_get();
  4044d2:	4b4b      	ldr	r3, [pc, #300]	; (404600 <indev_encoder_proc+0x290>)
  4044d4:	4798      	blx	r3
  4044d6:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  4044d8:	6861      	ldr	r1, [r4, #4]
  4044da:	290a      	cmp	r1, #10
  4044dc:	d05c      	beq.n	404598 <indev_encoder_proc+0x228>
            else if(data->key == LV_KEY_LEFT) {
  4044de:	2914      	cmp	r1, #20
  4044e0:	d074      	beq.n	4045cc <indev_encoder_proc+0x25c>
            else if(data->key == LV_KEY_RIGHT) {
  4044e2:	2913      	cmp	r1, #19
  4044e4:	d077      	beq.n	4045d6 <indev_encoder_proc+0x266>
                lv_group_send_data(g, data->key);
  4044e6:	4630      	mov	r0, r6
  4044e8:	4b46      	ldr	r3, [pc, #280]	; (404604 <indev_encoder_proc+0x294>)
  4044ea:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4044ec:	f105 001c 	add.w	r0, r5, #28
  4044f0:	4b46      	ldr	r3, [pc, #280]	; (40460c <indev_encoder_proc+0x29c>)
  4044f2:	4798      	blx	r3
  4044f4:	2800      	cmp	r0, #0
  4044f6:	f43f af75 	beq.w	4043e4 <indev_encoder_proc+0x74>
  4044fa:	e77b      	b.n	4043f4 <indev_encoder_proc+0x84>
        if(i->proc.long_pr_sent == 0 && lv_tick_elaps(i->proc.pr_timestamp) > i->driver.long_press_time) {
  4044fc:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  4044fe:	4b45      	ldr	r3, [pc, #276]	; (404614 <indev_encoder_proc+0x2a4>)
  404500:	4798      	blx	r3
  404502:	8b2b      	ldrh	r3, [r5, #24]
  404504:	4298      	cmp	r0, r3
  404506:	d9d9      	bls.n	4044bc <indev_encoder_proc+0x14c>
            i->proc.long_pr_sent = 1;
  404508:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  40450c:	f043 0301 	orr.w	r3, r3, #1
  404510:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
            i->proc.longpr_rep_timestamp = lv_tick_get();
  404514:	4b3a      	ldr	r3, [pc, #232]	; (404600 <indev_encoder_proc+0x290>)
  404516:	4798      	blx	r3
  404518:	64e8      	str	r0, [r5, #76]	; 0x4c
            if(data->key == LV_KEY_ENTER) {
  40451a:	6863      	ldr	r3, [r4, #4]
  40451c:	2b0a      	cmp	r3, #10
  40451e:	d006      	beq.n	40452e <indev_encoder_proc+0x1be>
            i->proc.long_pr_sent = 1;
  404520:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404524:	f043 0301 	orr.w	r3, r3, #1
  404528:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  40452c:	e75a      	b.n	4043e4 <indev_encoder_proc+0x74>
                bool editable = false;
  40452e:	aa02      	add	r2, sp, #8
  404530:	2300      	movs	r3, #0
  404532:	f802 3d01 	strb.w	r3, [r2, #-1]!
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404536:	4b31      	ldr	r3, [pc, #196]	; (4045fc <indev_encoder_proc+0x28c>)
  404538:	6818      	ldr	r0, [r3, #0]
  40453a:	69c3      	ldr	r3, [r0, #28]
  40453c:	2119      	movs	r1, #25
  40453e:	4798      	blx	r3
                if(editable) {
  404540:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404544:	b173      	cbz	r3, 404564 <indev_encoder_proc+0x1f4>
                    if(_lv_ll_get_len(&g->obj_ll) > 1) {
  404546:	4630      	mov	r0, r6
  404548:	4b33      	ldr	r3, [pc, #204]	; (404618 <indev_encoder_proc+0x2a8>)
  40454a:	4798      	blx	r3
  40454c:	2801      	cmp	r0, #1
  40454e:	d9e7      	bls.n	404520 <indev_encoder_proc+0x1b0>
                        lv_group_set_editing(g, lv_group_get_editing(g) ? false : true); /*Toggle edit mode on long press*/
  404550:	4630      	mov	r0, r6
  404552:	4b2d      	ldr	r3, [pc, #180]	; (404608 <indev_encoder_proc+0x298>)
  404554:	4798      	blx	r3
  404556:	f080 0101 	eor.w	r1, r0, #1
  40455a:	b2c9      	uxtb	r1, r1
  40455c:	4630      	mov	r0, r6
  40455e:	4b2f      	ldr	r3, [pc, #188]	; (40461c <indev_encoder_proc+0x2ac>)
  404560:	4798      	blx	r3
  404562:	e7dd      	b.n	404520 <indev_encoder_proc+0x1b0>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, NULL);
  404564:	4b25      	ldr	r3, [pc, #148]	; (4045fc <indev_encoder_proc+0x28c>)
  404566:	6818      	ldr	r0, [r3, #0]
  404568:	69c3      	ldr	r3, [r0, #28]
  40456a:	2200      	movs	r2, #0
  40456c:	210f      	movs	r1, #15
  40456e:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404570:	f105 071c 	add.w	r7, r5, #28
  404574:	4638      	mov	r0, r7
  404576:	4b25      	ldr	r3, [pc, #148]	; (40460c <indev_encoder_proc+0x29c>)
  404578:	4798      	blx	r3
  40457a:	2800      	cmp	r0, #0
  40457c:	f47f af3a 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404580:	2200      	movs	r2, #0
  404582:	2104      	movs	r1, #4
  404584:	4b1d      	ldr	r3, [pc, #116]	; (4045fc <indev_encoder_proc+0x28c>)
  404586:	6818      	ldr	r0, [r3, #0]
  404588:	4b21      	ldr	r3, [pc, #132]	; (404610 <indev_encoder_proc+0x2a0>)
  40458a:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40458c:	4638      	mov	r0, r7
  40458e:	4b1f      	ldr	r3, [pc, #124]	; (40460c <indev_encoder_proc+0x29c>)
  404590:	4798      	blx	r3
  404592:	2800      	cmp	r0, #0
  404594:	d0c4      	beq.n	404520 <indev_encoder_proc+0x1b0>
  404596:	e72d      	b.n	4043f4 <indev_encoder_proc+0x84>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, NULL);
  404598:	4b18      	ldr	r3, [pc, #96]	; (4045fc <indev_encoder_proc+0x28c>)
  40459a:	6818      	ldr	r0, [r3, #0]
  40459c:	69c3      	ldr	r3, [r0, #28]
  40459e:	2200      	movs	r2, #0
  4045a0:	2110      	movs	r1, #16
  4045a2:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045a4:	351c      	adds	r5, #28
  4045a6:	4628      	mov	r0, r5
  4045a8:	4b18      	ldr	r3, [pc, #96]	; (40460c <indev_encoder_proc+0x29c>)
  4045aa:	4798      	blx	r3
  4045ac:	2800      	cmp	r0, #0
  4045ae:	f47f af21 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  4045b2:	2200      	movs	r2, #0
  4045b4:	2105      	movs	r1, #5
  4045b6:	4b11      	ldr	r3, [pc, #68]	; (4045fc <indev_encoder_proc+0x28c>)
  4045b8:	6818      	ldr	r0, [r3, #0]
  4045ba:	4b15      	ldr	r3, [pc, #84]	; (404610 <indev_encoder_proc+0x2a0>)
  4045bc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4045be:	4628      	mov	r0, r5
  4045c0:	4b12      	ldr	r3, [pc, #72]	; (40460c <indev_encoder_proc+0x29c>)
  4045c2:	4798      	blx	r3
  4045c4:	2800      	cmp	r0, #0
  4045c6:	f43f af0d 	beq.w	4043e4 <indev_encoder_proc+0x74>
  4045ca:	e713      	b.n	4043f4 <indev_encoder_proc+0x84>
                data->enc_diff--;
  4045cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045d0:	3b01      	subs	r3, #1
  4045d2:	81a3      	strh	r3, [r4, #12]
  4045d4:	e706      	b.n	4043e4 <indev_encoder_proc+0x74>
                data->enc_diff++;
  4045d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4045da:	3301      	adds	r3, #1
  4045dc:	81a3      	strh	r3, [r4, #12]
  4045de:	e701      	b.n	4043e4 <indev_encoder_proc+0x74>
        if(data->key == LV_KEY_ENTER) {
  4045e0:	6863      	ldr	r3, [r4, #4]
  4045e2:	2b0a      	cmp	r3, #10
  4045e4:	d01c      	beq.n	404620 <indev_encoder_proc+0x2b0>
        i->proc.pr_timestamp = 0;
  4045e6:	2200      	movs	r2, #0
  4045e8:	64aa      	str	r2, [r5, #72]	; 0x48
        i->proc.long_pr_sent = 0;
  4045ea:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4045ee:	f362 0300 	bfi	r3, r2, #0, #1
  4045f2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
  4045f6:	e6f5      	b.n	4043e4 <indev_encoder_proc+0x74>
  4045f8:	00403529 	.word	0x00403529
  4045fc:	2040c390 	.word	0x2040c390
  404600:	00414a3d 	.word	0x00414a3d
  404604:	0040353d 	.word	0x0040353d
  404608:	00403681 	.word	0x00403681
  40460c:	004036e9 	.word	0x004036e9
  404610:	004053e5 	.word	0x004053e5
  404614:	00414a59 	.word	0x00414a59
  404618:	00415c91 	.word	0x00415c91
  40461c:	00403575 	.word	0x00403575
            bool editable = false;
  404620:	aa02      	add	r2, sp, #8
  404622:	2300      	movs	r3, #0
  404624:	f802 3d01 	strb.w	r3, [r2, #-1]!
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_GET_EDITABLE, &editable);
  404628:	69c3      	ldr	r3, [r0, #28]
  40462a:	2119      	movs	r1, #25
  40462c:	4798      	blx	r3
            if(editable == false) {
  40462e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  404632:	2b00      	cmp	r3, #0
  404634:	d044      	beq.n	4046c0 <indev_encoder_proc+0x350>
            else if(g->editing) {
  404636:	7d33      	ldrb	r3, [r6, #20]
  404638:	f013 0f02 	tst.w	r3, #2
  40463c:	d079      	beq.n	404732 <indev_encoder_proc+0x3c2>
                if(!i->proc.long_pr_sent || _lv_ll_get_len(&g->obj_ll) <= 1) {
  40463e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404642:	f013 0f01 	tst.w	r3, #1
  404646:	d004      	beq.n	404652 <indev_encoder_proc+0x2e2>
  404648:	4630      	mov	r0, r6
  40464a:	4b60      	ldr	r3, [pc, #384]	; (4047cc <indev_encoder_proc+0x45c>)
  40464c:	4798      	blx	r3
  40464e:	2801      	cmp	r0, #1
  404650:	d8c9      	bhi.n	4045e6 <indev_encoder_proc+0x276>
                    indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  404652:	4b5f      	ldr	r3, [pc, #380]	; (4047d0 <indev_encoder_proc+0x460>)
  404654:	6818      	ldr	r0, [r3, #0]
  404656:	69c3      	ldr	r3, [r0, #28]
  404658:	2200      	movs	r2, #0
  40465a:	210e      	movs	r1, #14
  40465c:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40465e:	f105 071c 	add.w	r7, r5, #28
  404662:	4638      	mov	r0, r7
  404664:	4b5b      	ldr	r3, [pc, #364]	; (4047d4 <indev_encoder_proc+0x464>)
  404666:	4798      	blx	r3
  404668:	2800      	cmp	r0, #0
  40466a:	f47f aec3 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  40466e:	2200      	movs	r2, #0
  404670:	2103      	movs	r1, #3
  404672:	4b57      	ldr	r3, [pc, #348]	; (4047d0 <indev_encoder_proc+0x460>)
  404674:	6818      	ldr	r0, [r3, #0]
  404676:	4b58      	ldr	r3, [pc, #352]	; (4047d8 <indev_encoder_proc+0x468>)
  404678:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  40467a:	4638      	mov	r0, r7
  40467c:	4b55      	ldr	r3, [pc, #340]	; (4047d4 <indev_encoder_proc+0x464>)
  40467e:	4798      	blx	r3
  404680:	2800      	cmp	r0, #0
  404682:	f47f aeb7 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  404686:	2200      	movs	r2, #0
  404688:	2106      	movs	r1, #6
  40468a:	4b51      	ldr	r3, [pc, #324]	; (4047d0 <indev_encoder_proc+0x460>)
  40468c:	6818      	ldr	r0, [r3, #0]
  40468e:	4b52      	ldr	r3, [pc, #328]	; (4047d8 <indev_encoder_proc+0x468>)
  404690:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  404692:	4638      	mov	r0, r7
  404694:	4b4f      	ldr	r3, [pc, #316]	; (4047d4 <indev_encoder_proc+0x464>)
  404696:	4798      	blx	r3
  404698:	2800      	cmp	r0, #0
  40469a:	f47f aeab 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40469e:	2200      	movs	r2, #0
  4046a0:	2107      	movs	r1, #7
  4046a2:	4b4b      	ldr	r3, [pc, #300]	; (4047d0 <indev_encoder_proc+0x460>)
  4046a4:	6818      	ldr	r0, [r3, #0]
  4046a6:	4b4c      	ldr	r3, [pc, #304]	; (4047d8 <indev_encoder_proc+0x468>)
  4046a8:	4798      	blx	r3
                    if(indev_reset_check(&i->proc)) return;
  4046aa:	4638      	mov	r0, r7
  4046ac:	4b49      	ldr	r3, [pc, #292]	; (4047d4 <indev_encoder_proc+0x464>)
  4046ae:	4798      	blx	r3
  4046b0:	2800      	cmp	r0, #0
  4046b2:	f47f ae9f 	bne.w	4043f4 <indev_encoder_proc+0x84>
                    lv_group_send_data(g, LV_KEY_ENTER);
  4046b6:	210a      	movs	r1, #10
  4046b8:	4630      	mov	r0, r6
  4046ba:	4b48      	ldr	r3, [pc, #288]	; (4047dc <indev_encoder_proc+0x46c>)
  4046bc:	4798      	blx	r3
  4046be:	e792      	b.n	4045e6 <indev_encoder_proc+0x276>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_RELEASED, NULL);
  4046c0:	4b43      	ldr	r3, [pc, #268]	; (4047d0 <indev_encoder_proc+0x460>)
  4046c2:	6818      	ldr	r0, [r3, #0]
  4046c4:	69c3      	ldr	r3, [r0, #28]
  4046c6:	2200      	movs	r2, #0
  4046c8:	210e      	movs	r1, #14
  4046ca:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046cc:	f105 071c 	add.w	r7, r5, #28
  4046d0:	4638      	mov	r0, r7
  4046d2:	4b40      	ldr	r3, [pc, #256]	; (4047d4 <indev_encoder_proc+0x464>)
  4046d4:	4798      	blx	r3
  4046d6:	2800      	cmp	r0, #0
  4046d8:	f47f ae8c 	bne.w	4043f4 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  4046dc:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4046e0:	f013 0f01 	tst.w	r3, #1
  4046e4:	d01e      	beq.n	404724 <indev_encoder_proc+0x3b4>
                if(indev_reset_check(&i->proc)) return;
  4046e6:	4638      	mov	r0, r7
  4046e8:	4b3a      	ldr	r3, [pc, #232]	; (4047d4 <indev_encoder_proc+0x464>)
  4046ea:	4798      	blx	r3
  4046ec:	2800      	cmp	r0, #0
  4046ee:	f47f ae81 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_CLICKED, NULL);
  4046f2:	2200      	movs	r2, #0
  4046f4:	2106      	movs	r1, #6
  4046f6:	4b36      	ldr	r3, [pc, #216]	; (4047d0 <indev_encoder_proc+0x460>)
  4046f8:	6818      	ldr	r0, [r3, #0]
  4046fa:	4b37      	ldr	r3, [pc, #220]	; (4047d8 <indev_encoder_proc+0x468>)
  4046fc:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  4046fe:	4638      	mov	r0, r7
  404700:	4b34      	ldr	r3, [pc, #208]	; (4047d4 <indev_encoder_proc+0x464>)
  404702:	4798      	blx	r3
  404704:	2800      	cmp	r0, #0
  404706:	f47f ae75 	bne.w	4043f4 <indev_encoder_proc+0x84>
                lv_event_send(indev_obj_act, LV_EVENT_RELEASED, NULL);
  40470a:	2200      	movs	r2, #0
  40470c:	2107      	movs	r1, #7
  40470e:	4b30      	ldr	r3, [pc, #192]	; (4047d0 <indev_encoder_proc+0x460>)
  404710:	6818      	ldr	r0, [r3, #0]
  404712:	4b31      	ldr	r3, [pc, #196]	; (4047d8 <indev_encoder_proc+0x468>)
  404714:	4798      	blx	r3
                if(indev_reset_check(&i->proc)) return;
  404716:	4638      	mov	r0, r7
  404718:	4b2e      	ldr	r3, [pc, #184]	; (4047d4 <indev_encoder_proc+0x464>)
  40471a:	4798      	blx	r3
  40471c:	2800      	cmp	r0, #0
  40471e:	f43f af62 	beq.w	4045e6 <indev_encoder_proc+0x276>
  404722:	e667      	b.n	4043f4 <indev_encoder_proc+0x84>
                if(i->proc.long_pr_sent == 0) lv_event_send(indev_obj_act, LV_EVENT_SHORT_CLICKED, NULL);
  404724:	2200      	movs	r2, #0
  404726:	2103      	movs	r1, #3
  404728:	4b29      	ldr	r3, [pc, #164]	; (4047d0 <indev_encoder_proc+0x460>)
  40472a:	6818      	ldr	r0, [r3, #0]
  40472c:	4b2a      	ldr	r3, [pc, #168]	; (4047d8 <indev_encoder_proc+0x468>)
  40472e:	4798      	blx	r3
  404730:	e7d9      	b.n	4046e6 <indev_encoder_proc+0x376>
            else if(editable && !g->editing && !i->proc.long_pr_sent) {
  404732:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  404736:	f013 0f01 	tst.w	r3, #1
  40473a:	f47f af54 	bne.w	4045e6 <indev_encoder_proc+0x276>
                lv_group_set_editing(g, true); /*Set edit mode*/
  40473e:	2101      	movs	r1, #1
  404740:	4630      	mov	r0, r6
  404742:	4b27      	ldr	r3, [pc, #156]	; (4047e0 <indev_encoder_proc+0x470>)
  404744:	4798      	blx	r3
  404746:	e74e      	b.n	4045e6 <indev_encoder_proc+0x276>
        if(lv_group_get_editing(g)) {
  404748:	4630      	mov	r0, r6
  40474a:	4b26      	ldr	r3, [pc, #152]	; (4047e4 <indev_encoder_proc+0x474>)
  40474c:	4798      	blx	r3
  40474e:	b1f8      	cbz	r0, 404790 <indev_encoder_proc+0x420>
            if(data->enc_diff < 0) {
  404750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404754:	2b00      	cmp	r3, #0
  404756:	db0f      	blt.n	404778 <indev_encoder_proc+0x408>
            else if(data->enc_diff > 0) {
  404758:	2b00      	cmp	r3, #0
  40475a:	f77f ae4b 	ble.w	4043f4 <indev_encoder_proc+0x84>
  40475e:	2500      	movs	r5, #0
  404760:	e011      	b.n	404786 <indev_encoder_proc+0x416>
                for(s = 0; s < -data->enc_diff; s++) lv_group_send_data(g, LV_KEY_LEFT);
  404762:	2114      	movs	r1, #20
  404764:	4630      	mov	r0, r6
  404766:	4b1d      	ldr	r3, [pc, #116]	; (4047dc <indev_encoder_proc+0x46c>)
  404768:	4798      	blx	r3
  40476a:	3501      	adds	r5, #1
  40476c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404770:	425b      	negs	r3, r3
  404772:	429d      	cmp	r5, r3
  404774:	dbf5      	blt.n	404762 <indev_encoder_proc+0x3f2>
  404776:	e63d      	b.n	4043f4 <indev_encoder_proc+0x84>
  404778:	2500      	movs	r5, #0
  40477a:	e7f7      	b.n	40476c <indev_encoder_proc+0x3fc>
                for(s = 0; s < data->enc_diff; s++) lv_group_send_data(g, LV_KEY_RIGHT);
  40477c:	2113      	movs	r1, #19
  40477e:	4630      	mov	r0, r6
  404780:	4b16      	ldr	r3, [pc, #88]	; (4047dc <indev_encoder_proc+0x46c>)
  404782:	4798      	blx	r3
  404784:	3501      	adds	r5, #1
  404786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40478a:	429d      	cmp	r5, r3
  40478c:	dbf6      	blt.n	40477c <indev_encoder_proc+0x40c>
  40478e:	e631      	b.n	4043f4 <indev_encoder_proc+0x84>
            if(data->enc_diff < 0) {
  404790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404794:	2b00      	cmp	r3, #0
  404796:	db0e      	blt.n	4047b6 <indev_encoder_proc+0x446>
            else if(data->enc_diff > 0) {
  404798:	2b00      	cmp	r3, #0
  40479a:	f77f ae2b 	ble.w	4043f4 <indev_encoder_proc+0x84>
  40479e:	2500      	movs	r5, #0
  4047a0:	e00f      	b.n	4047c2 <indev_encoder_proc+0x452>
                for(s = 0; s < -data->enc_diff; s++) lv_group_focus_prev(g);
  4047a2:	4630      	mov	r0, r6
  4047a4:	4b10      	ldr	r3, [pc, #64]	; (4047e8 <indev_encoder_proc+0x478>)
  4047a6:	4798      	blx	r3
  4047a8:	3501      	adds	r5, #1
  4047aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047ae:	425b      	negs	r3, r3
  4047b0:	429d      	cmp	r5, r3
  4047b2:	dbf6      	blt.n	4047a2 <indev_encoder_proc+0x432>
  4047b4:	e61e      	b.n	4043f4 <indev_encoder_proc+0x84>
  4047b6:	2500      	movs	r5, #0
  4047b8:	e7f7      	b.n	4047aa <indev_encoder_proc+0x43a>
                for(s = 0; s < data->enc_diff; s++) lv_group_focus_next(g);
  4047ba:	4630      	mov	r0, r6
  4047bc:	4b0b      	ldr	r3, [pc, #44]	; (4047ec <indev_encoder_proc+0x47c>)
  4047be:	4798      	blx	r3
  4047c0:	3501      	adds	r5, #1
  4047c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4047c6:	429d      	cmp	r5, r3
  4047c8:	dbf7      	blt.n	4047ba <indev_encoder_proc+0x44a>
  4047ca:	e613      	b.n	4043f4 <indev_encoder_proc+0x84>
  4047cc:	00415c91 	.word	0x00415c91
  4047d0:	2040c390 	.word	0x2040c390
  4047d4:	004036e9 	.word	0x004036e9
  4047d8:	004053e5 	.word	0x004053e5
  4047dc:	0040353d 	.word	0x0040353d
  4047e0:	00403575 	.word	0x00403575
  4047e4:	00403681 	.word	0x00403681
  4047e8:	004033a5 	.word	0x004033a5
  4047ec:	0040338d 	.word	0x0040338d

004047f0 <lv_indev_get_act>:
}
  4047f0:	4b01      	ldr	r3, [pc, #4]	; (4047f8 <lv_indev_get_act+0x8>)
  4047f2:	6818      	ldr	r0, [r3, #0]
  4047f4:	4770      	bx	lr
  4047f6:	bf00      	nop
  4047f8:	2040c38c 	.word	0x2040c38c

004047fc <lv_indev_reset>:
    if(indev) {
  4047fc:	b1b0      	cbz	r0, 40482c <lv_indev_reset+0x30>
  4047fe:	4603      	mov	r3, r0
        indev->proc.reset_query = 1;
  404800:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
  404804:	f042 0202 	orr.w	r2, r2, #2
  404808:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
        if(indev_act == indev) indev_obj_act = NULL;
  40480c:	4a17      	ldr	r2, [pc, #92]	; (40486c <lv_indev_reset+0x70>)
  40480e:	6812      	ldr	r2, [r2, #0]
  404810:	4290      	cmp	r0, r2
  404812:	d004      	beq.n	40481e <lv_indev_reset+0x22>
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
  404814:	b139      	cbz	r1, 404826 <lv_indev_reset+0x2a>
  404816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  404818:	4291      	cmp	r1, r2
  40481a:	d004      	beq.n	404826 <lv_indev_reset+0x2a>
  40481c:	4770      	bx	lr
        if(indev_act == indev) indev_obj_act = NULL;
  40481e:	2000      	movs	r0, #0
  404820:	4a13      	ldr	r2, [pc, #76]	; (404870 <lv_indev_reset+0x74>)
  404822:	6010      	str	r0, [r2, #0]
  404824:	e7f6      	b.n	404814 <lv_indev_reset+0x18>
            indev->proc.types.pointer.last_pressed = NULL;
  404826:	2200      	movs	r2, #0
  404828:	63da      	str	r2, [r3, #60]	; 0x3c
  40482a:	4770      	bx	lr
{
  40482c:	b510      	push	{r4, lr}
  40482e:	460c      	mov	r4, r1
        lv_indev_t * i = lv_indev_get_next(NULL);
  404830:	2000      	movs	r0, #0
  404832:	4b10      	ldr	r3, [pc, #64]	; (404874 <lv_indev_reset+0x78>)
  404834:	4798      	blx	r3
        while(i) {
  404836:	e007      	b.n	404848 <lv_indev_reset+0x4c>
            if(indev_act == i) indev_obj_act = NULL;
  404838:	2200      	movs	r2, #0
  40483a:	4b0d      	ldr	r3, [pc, #52]	; (404870 <lv_indev_reset+0x74>)
  40483c:	601a      	str	r2, [r3, #0]
  40483e:	e00e      	b.n	40485e <lv_indev_reset+0x62>
                i->proc.types.pointer.last_pressed = NULL;
  404840:	2300      	movs	r3, #0
  404842:	63c3      	str	r3, [r0, #60]	; 0x3c
            i = lv_indev_get_next(i);
  404844:	4b0b      	ldr	r3, [pc, #44]	; (404874 <lv_indev_reset+0x78>)
  404846:	4798      	blx	r3
        while(i) {
  404848:	b178      	cbz	r0, 40486a <lv_indev_reset+0x6e>
            i->proc.reset_query = 1;
  40484a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  40484e:	f043 0302 	orr.w	r3, r3, #2
  404852:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
            if(indev_act == i) indev_obj_act = NULL;
  404856:	4b05      	ldr	r3, [pc, #20]	; (40486c <lv_indev_reset+0x70>)
  404858:	681b      	ldr	r3, [r3, #0]
  40485a:	4298      	cmp	r0, r3
  40485c:	d0ec      	beq.n	404838 <lv_indev_reset+0x3c>
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
  40485e:	2c00      	cmp	r4, #0
  404860:	d0ee      	beq.n	404840 <lv_indev_reset+0x44>
  404862:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  404864:	429c      	cmp	r4, r3
  404866:	d1ed      	bne.n	404844 <lv_indev_reset+0x48>
  404868:	e7ea      	b.n	404840 <lv_indev_reset+0x44>
  40486a:	bd10      	pop	{r4, pc}
  40486c:	2040c38c 	.word	0x2040c38c
  404870:	2040c390 	.word	0x2040c390
  404874:	004149b1 	.word	0x004149b1

00404878 <_lv_indev_init>:
{
  404878:	b508      	push	{r3, lr}
    lv_indev_reset(NULL, NULL); /*Reset all input devices*/
  40487a:	2100      	movs	r1, #0
  40487c:	4608      	mov	r0, r1
  40487e:	4b01      	ldr	r3, [pc, #4]	; (404884 <_lv_indev_init+0xc>)
  404880:	4798      	blx	r3
  404882:	bd08      	pop	{r3, pc}
  404884:	004047fd 	.word	0x004047fd

00404888 <lv_indev_is_dragging>:
    if(indev == NULL) return false;
  404888:	b148      	cbz	r0, 40489e <lv_indev_is_dragging+0x16>
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  40488a:	7803      	ldrb	r3, [r0, #0]
  40488c:	2b01      	cmp	r3, #1
  40488e:	bf18      	it	ne
  404890:	2b03      	cmpne	r3, #3
  404892:	d106      	bne.n	4048a2 <lv_indev_is_dragging+0x1a>
    return indev->proc.types.pointer.drag_in_prog == 0 ? false : true;
  404894:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
  404898:	f3c0 0040 	ubfx	r0, r0, #1, #1
  40489c:	4770      	bx	lr
    if(indev == NULL) return false;
  40489e:	2000      	movs	r0, #0
  4048a0:	4770      	bx	lr
    if(indev->driver.type != LV_INDEV_TYPE_POINTER && indev->driver.type != LV_INDEV_TYPE_BUTTON) return false;
  4048a2:	2000      	movs	r0, #0
}
  4048a4:	4770      	bx	lr
	...

004048a8 <lv_indev_get_obj_act>:
}
  4048a8:	4b01      	ldr	r3, [pc, #4]	; (4048b0 <lv_indev_get_obj_act+0x8>)
  4048aa:	6818      	ldr	r0, [r3, #0]
  4048ac:	4770      	bx	lr
  4048ae:	bf00      	nop
  4048b0:	2040c390 	.word	0x2040c390

004048b4 <lv_indev_search_obj>:
{
  4048b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4048b8:	4680      	mov	r8, r0
  4048ba:	460f      	mov	r7, r1
    if(lv_obj_hittest(obj, point)) {
  4048bc:	4b21      	ldr	r3, [pc, #132]	; (404944 <lv_indev_search_obj+0x90>)
  4048be:	4798      	blx	r3
  4048c0:	2800      	cmp	r0, #0
  4048c2:	d03c      	beq.n	40493e <lv_indev_search_obj+0x8a>
        _LV_LL_READ(obj->child_ll, i) {
  4048c4:	f108 0604 	add.w	r6, r8, #4
  4048c8:	4630      	mov	r0, r6
  4048ca:	4b1f      	ldr	r3, [pc, #124]	; (404948 <lv_indev_search_obj+0x94>)
  4048cc:	4798      	blx	r3
  4048ce:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  4048d0:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  4048d2:	b15c      	cbz	r4, 4048ec <lv_indev_search_obj+0x38>
            found_p = lv_indev_search_obj(i, point);
  4048d4:	4639      	mov	r1, r7
  4048d6:	4620      	mov	r0, r4
  4048d8:	f7ff ffec 	bl	4048b4 <lv_indev_search_obj>
            if(found_p != NULL) {
  4048dc:	4605      	mov	r5, r0
  4048de:	b928      	cbnz	r0, 4048ec <lv_indev_search_obj+0x38>
        _LV_LL_READ(obj->child_ll, i) {
  4048e0:	4621      	mov	r1, r4
  4048e2:	4630      	mov	r0, r6
  4048e4:	4b19      	ldr	r3, [pc, #100]	; (40494c <lv_indev_search_obj+0x98>)
  4048e6:	4798      	blx	r3
  4048e8:	4604      	mov	r4, r0
  4048ea:	e7f2      	b.n	4048d2 <lv_indev_search_obj+0x1e>
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  4048ec:	b115      	cbz	r5, 4048f4 <lv_indev_search_obj+0x40>
}
  4048ee:	4628      	mov	r0, r5
  4048f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(found_p == NULL && lv_obj_get_click(obj) != false) {
  4048f4:	4640      	mov	r0, r8
  4048f6:	4b16      	ldr	r3, [pc, #88]	; (404950 <lv_indev_search_obj+0x9c>)
  4048f8:	4798      	blx	r3
  4048fa:	2800      	cmp	r0, #0
  4048fc:	d0f7      	beq.n	4048ee <lv_indev_search_obj+0x3a>
  4048fe:	4644      	mov	r4, r8
  404900:	e003      	b.n	40490a <lv_indev_search_obj+0x56>
                hidden_i = lv_obj_get_parent(hidden_i);
  404902:	4620      	mov	r0, r4
  404904:	4b13      	ldr	r3, [pc, #76]	; (404954 <lv_indev_search_obj+0xa0>)
  404906:	4798      	blx	r3
  404908:	4604      	mov	r4, r0
            while(hidden_i != NULL) {
  40490a:	b124      	cbz	r4, 404916 <lv_indev_search_obj+0x62>
                if(lv_obj_get_hidden(hidden_i) == true) break;
  40490c:	4620      	mov	r0, r4
  40490e:	4b12      	ldr	r3, [pc, #72]	; (404958 <lv_indev_search_obj+0xa4>)
  404910:	4798      	blx	r3
  404912:	2800      	cmp	r0, #0
  404914:	d0f5      	beq.n	404902 <lv_indev_search_obj+0x4e>
            if(lv_obj_is_protected(obj, LV_PROTECT_EVENT_TO_DISABLED) == false) {
  404916:	2140      	movs	r1, #64	; 0x40
  404918:	4640      	mov	r0, r8
  40491a:	4b10      	ldr	r3, [pc, #64]	; (40495c <lv_indev_search_obj+0xa8>)
  40491c:	4798      	blx	r3
  40491e:	b950      	cbnz	r0, 404936 <lv_indev_search_obj+0x82>
                if(hidden_i == NULL && (lv_obj_get_state(obj, LV_OBJ_PART_MAIN) & LV_STATE_DISABLED) == false) found_p = obj;
  404920:	2c00      	cmp	r4, #0
  404922:	d1e4      	bne.n	4048ee <lv_indev_search_obj+0x3a>
  404924:	2100      	movs	r1, #0
  404926:	4640      	mov	r0, r8
  404928:	4b0d      	ldr	r3, [pc, #52]	; (404960 <lv_indev_search_obj+0xac>)
  40492a:	4798      	blx	r3
  40492c:	f010 0f20 	tst.w	r0, #32
  404930:	d1dd      	bne.n	4048ee <lv_indev_search_obj+0x3a>
  404932:	4645      	mov	r5, r8
  404934:	e7db      	b.n	4048ee <lv_indev_search_obj+0x3a>
                if(hidden_i == NULL) found_p = obj;
  404936:	2c00      	cmp	r4, #0
  404938:	d1d9      	bne.n	4048ee <lv_indev_search_obj+0x3a>
  40493a:	4645      	mov	r5, r8
    return found_p;
  40493c:	e7d7      	b.n	4048ee <lv_indev_search_obj+0x3a>
    lv_obj_t * found_p = NULL;
  40493e:	2500      	movs	r5, #0
  404940:	e7d5      	b.n	4048ee <lv_indev_search_obj+0x3a>
  404942:	bf00      	nop
  404944:	00407db9 	.word	0x00407db9
  404948:	00415ac9 	.word	0x00415ac9
  40494c:	00415add 	.word	0x00415add
  404950:	00406265 	.word	0x00406265
  404954:	004054f5 	.word	0x004054f5
  404958:	00405911 	.word	0x00405911
  40495c:	004068f5 	.word	0x004068f5
  404960:	00406929 	.word	0x00406929

00404964 <indev_proc_press>:
    indev_obj_act = proc->types.pointer.act_obj;
  404964:	6983      	ldr	r3, [r0, #24]
  404966:	4a5d      	ldr	r2, [pc, #372]	; (404adc <indev_proc_press+0x178>)
  404968:	6013      	str	r3, [r2, #0]
    if(proc->wait_until_release != 0) return;
  40496a:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
  40496e:	f012 0f08 	tst.w	r2, #8
  404972:	f040 81bc 	bne.w	404cee <indev_proc_press+0x38a>
{
  404976:	b570      	push	{r4, r5, r6, lr}
  404978:	4604      	mov	r4, r0
    lv_disp_t * disp = indev_act->driver.disp;
  40497a:	4a59      	ldr	r2, [pc, #356]	; (404ae0 <indev_proc_press+0x17c>)
  40497c:	6812      	ldr	r2, [r2, #0]
  40497e:	68d5      	ldr	r5, [r2, #12]
    if(indev_obj_act == NULL) {
  404980:	b343      	cbz	r3, 4049d4 <indev_proc_press+0x70>
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404982:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
  404986:	f012 0f02 	tst.w	r2, #2
  40498a:	d045      	beq.n	404a18 <indev_proc_press+0xb4>
    bool new_obj_searched = false;
  40498c:	2300      	movs	r3, #0
    if(new_obj_searched && proc->types.pointer.last_obj) {
  40498e:	b13b      	cbz	r3, 4049a0 <indev_proc_press+0x3c>
  404990:	69e3      	ldr	r3, [r4, #28]
  404992:	b12b      	cbz	r3, 4049a0 <indev_proc_press+0x3c>
        proc->types.pointer.drag_throw_vect.x = 0;
  404994:	2300      	movs	r3, #0
  404996:	82a3      	strh	r3, [r4, #20]
        proc->types.pointer.drag_throw_vect.y = 0;
  404998:	82e3      	strh	r3, [r4, #22]
        indev_drag_throw(proc);
  40499a:	4620      	mov	r0, r4
  40499c:	4b51      	ldr	r3, [pc, #324]	; (404ae4 <indev_proc_press+0x180>)
  40499e:	4798      	blx	r3
    if(indev_obj_act != proc->types.pointer.act_obj) {
  4049a0:	69a5      	ldr	r5, [r4, #24]
  4049a2:	4b4e      	ldr	r3, [pc, #312]	; (404adc <indev_proc_press+0x178>)
  4049a4:	681b      	ldr	r3, [r3, #0]
  4049a6:	429d      	cmp	r5, r3
  4049a8:	f000 80de 	beq.w	404b68 <indev_proc_press+0x204>
        proc->types.pointer.last_point.x = proc->types.pointer.act_point.x;
  4049ac:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  4049b0:	8123      	strh	r3, [r4, #8]
        proc->types.pointer.last_point.y = proc->types.pointer.act_point.y;
  4049b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  4049b6:	8163      	strh	r3, [r4, #10]
        if(proc->types.pointer.act_obj != NULL) {
  4049b8:	2d00      	cmp	r5, #0
  4049ba:	d060      	beq.n	404a7e <indev_proc_press+0x11a>
            last_obj->signal_cb(last_obj, LV_SIGNAL_PRESS_LOST, indev_act);
  4049bc:	69eb      	ldr	r3, [r5, #28]
  4049be:	4a48      	ldr	r2, [pc, #288]	; (404ae0 <indev_proc_press+0x17c>)
  4049c0:	6812      	ldr	r2, [r2, #0]
  4049c2:	210d      	movs	r1, #13
  4049c4:	4628      	mov	r0, r5
  4049c6:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  4049c8:	4620      	mov	r0, r4
  4049ca:	4b47      	ldr	r3, [pc, #284]	; (404ae8 <indev_proc_press+0x184>)
  4049cc:	4798      	blx	r3
  4049ce:	2800      	cmp	r0, #0
  4049d0:	d04b      	beq.n	404a6a <indev_proc_press+0x106>
  4049d2:	bd70      	pop	{r4, r5, r6, pc}
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  4049d4:	4628      	mov	r0, r5
  4049d6:	4b45      	ldr	r3, [pc, #276]	; (404aec <indev_proc_press+0x188>)
  4049d8:	4798      	blx	r3
  4049da:	1d26      	adds	r6, r4, #4
  4049dc:	4631      	mov	r1, r6
  4049de:	4b44      	ldr	r3, [pc, #272]	; (404af0 <indev_proc_press+0x18c>)
  4049e0:	4798      	blx	r3
  4049e2:	4b3e      	ldr	r3, [pc, #248]	; (404adc <indev_proc_press+0x178>)
  4049e4:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  4049e6:	b120      	cbz	r0, 4049f2 <indev_proc_press+0x8e>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  4049e8:	4b3c      	ldr	r3, [pc, #240]	; (404adc <indev_proc_press+0x178>)
  4049ea:	681b      	ldr	r3, [r3, #0]
  4049ec:	b153      	cbz	r3, 404a04 <indev_proc_press+0xa0>
        new_obj_searched = true;
  4049ee:	2301      	movs	r3, #1
  4049f0:	e7cd      	b.n	40498e <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  4049f2:	4628      	mov	r0, r5
  4049f4:	4b3f      	ldr	r3, [pc, #252]	; (404af4 <indev_proc_press+0x190>)
  4049f6:	4798      	blx	r3
  4049f8:	4631      	mov	r1, r6
  4049fa:	4b3d      	ldr	r3, [pc, #244]	; (404af0 <indev_proc_press+0x18c>)
  4049fc:	4798      	blx	r3
  4049fe:	4b37      	ldr	r3, [pc, #220]	; (404adc <indev_proc_press+0x178>)
  404a00:	6018      	str	r0, [r3, #0]
  404a02:	e7f1      	b.n	4049e8 <indev_proc_press+0x84>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404a04:	4628      	mov	r0, r5
  404a06:	4b3c      	ldr	r3, [pc, #240]	; (404af8 <indev_proc_press+0x194>)
  404a08:	4798      	blx	r3
  404a0a:	4631      	mov	r1, r6
  404a0c:	4b38      	ldr	r3, [pc, #224]	; (404af0 <indev_proc_press+0x18c>)
  404a0e:	4798      	blx	r3
  404a10:	4b32      	ldr	r3, [pc, #200]	; (404adc <indev_proc_press+0x178>)
  404a12:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404a14:	2301      	movs	r3, #1
  404a16:	e7ba      	b.n	40498e <indev_proc_press+0x2a>
            lv_obj_is_protected(indev_obj_act, LV_PROTECT_PRESS_LOST) == false) {
  404a18:	2110      	movs	r1, #16
  404a1a:	4618      	mov	r0, r3
  404a1c:	4b37      	ldr	r3, [pc, #220]	; (404afc <indev_proc_press+0x198>)
  404a1e:	4798      	blx	r3
    else if(proc->types.pointer.drag_in_prog == 0 &&
  404a20:	b108      	cbz	r0, 404a26 <indev_proc_press+0xc2>
    bool new_obj_searched = false;
  404a22:	2300      	movs	r3, #0
  404a24:	e7b3      	b.n	40498e <indev_proc_press+0x2a>
        indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_sys(disp), &proc->types.pointer.act_point);
  404a26:	4628      	mov	r0, r5
  404a28:	4b30      	ldr	r3, [pc, #192]	; (404aec <indev_proc_press+0x188>)
  404a2a:	4798      	blx	r3
  404a2c:	1d26      	adds	r6, r4, #4
  404a2e:	4631      	mov	r1, r6
  404a30:	4b2f      	ldr	r3, [pc, #188]	; (404af0 <indev_proc_press+0x18c>)
  404a32:	4798      	blx	r3
  404a34:	4b29      	ldr	r3, [pc, #164]	; (404adc <indev_proc_press+0x178>)
  404a36:	6018      	str	r0, [r3, #0]
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404a38:	b120      	cbz	r0, 404a44 <indev_proc_press+0xe0>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404a3a:	4b28      	ldr	r3, [pc, #160]	; (404adc <indev_proc_press+0x178>)
  404a3c:	681b      	ldr	r3, [r3, #0]
  404a3e:	b153      	cbz	r3, 404a56 <indev_proc_press+0xf2>
        new_obj_searched = true;
  404a40:	2301      	movs	r3, #1
  404a42:	e7a4      	b.n	40498e <indev_proc_press+0x2a>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_layer_top(disp),
  404a44:	4628      	mov	r0, r5
  404a46:	4b2b      	ldr	r3, [pc, #172]	; (404af4 <indev_proc_press+0x190>)
  404a48:	4798      	blx	r3
  404a4a:	4631      	mov	r1, r6
  404a4c:	4b28      	ldr	r3, [pc, #160]	; (404af0 <indev_proc_press+0x18c>)
  404a4e:	4798      	blx	r3
  404a50:	4b22      	ldr	r3, [pc, #136]	; (404adc <indev_proc_press+0x178>)
  404a52:	6018      	str	r0, [r3, #0]
  404a54:	e7f1      	b.n	404a3a <indev_proc_press+0xd6>
        if(indev_obj_act == NULL) indev_obj_act = lv_indev_search_obj(lv_disp_get_scr_act(disp),
  404a56:	4628      	mov	r0, r5
  404a58:	4b27      	ldr	r3, [pc, #156]	; (404af8 <indev_proc_press+0x194>)
  404a5a:	4798      	blx	r3
  404a5c:	4631      	mov	r1, r6
  404a5e:	4b24      	ldr	r3, [pc, #144]	; (404af0 <indev_proc_press+0x18c>)
  404a60:	4798      	blx	r3
  404a62:	4b1e      	ldr	r3, [pc, #120]	; (404adc <indev_proc_press+0x178>)
  404a64:	6018      	str	r0, [r3, #0]
        new_obj_searched = true;
  404a66:	2301      	movs	r3, #1
  404a68:	e791      	b.n	40498e <indev_proc_press+0x2a>
            lv_event_send(last_obj, LV_EVENT_PRESS_LOST, NULL);
  404a6a:	2200      	movs	r2, #0
  404a6c:	2102      	movs	r1, #2
  404a6e:	4628      	mov	r0, r5
  404a70:	4b23      	ldr	r3, [pc, #140]	; (404b00 <indev_proc_press+0x19c>)
  404a72:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404a74:	4620      	mov	r0, r4
  404a76:	4b1c      	ldr	r3, [pc, #112]	; (404ae8 <indev_proc_press+0x184>)
  404a78:	4798      	blx	r3
  404a7a:	2800      	cmp	r0, #0
  404a7c:	d1a9      	bne.n	4049d2 <indev_proc_press+0x6e>
        proc->types.pointer.act_obj  = indev_obj_act; /*Save the pressed object*/
  404a7e:	4b17      	ldr	r3, [pc, #92]	; (404adc <indev_proc_press+0x178>)
  404a80:	681b      	ldr	r3, [r3, #0]
  404a82:	61a3      	str	r3, [r4, #24]
        proc->types.pointer.last_obj = indev_obj_act;
  404a84:	61e3      	str	r3, [r4, #28]
        if(indev_obj_act != NULL) {
  404a86:	2b00      	cmp	r3, #0
  404a88:	d06e      	beq.n	404b68 <indev_proc_press+0x204>
            proc->pr_timestamp                 = lv_tick_get();
  404a8a:	4b1e      	ldr	r3, [pc, #120]	; (404b04 <indev_proc_press+0x1a0>)
  404a8c:	4798      	blx	r3
  404a8e:	62e0      	str	r0, [r4, #44]	; 0x2c
            proc->long_pr_sent                 = 0;
  404a90:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404a94:	f36f 0300 	bfc	r3, #0, #1
  404a98:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            proc->types.pointer.drag_limit_out = 0;
  404a9c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.drag_sum.x     = 0;
  404aa0:	2300      	movs	r3, #0
  404aa2:	8223      	strh	r3, [r4, #16]
            proc->types.pointer.drag_sum.y     = 0;
  404aa4:	8263      	strh	r3, [r4, #18]
            proc->types.pointer.drag_dir = LV_DRAG_DIR_BOTH;
  404aa6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  404aaa:	2103      	movs	r1, #3
  404aac:	f361 0284 	bfi	r2, r1, #2, #3
            proc->types.pointer.gesture_sent   = 0;
  404ab0:	f363 1245 	bfi	r2, r3, #5, #1
  404ab4:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            proc->types.pointer.gesture_sum.x  = 0;
  404ab8:	84e3      	strh	r3, [r4, #38]	; 0x26
            proc->types.pointer.gesture_sum.y  = 0;
  404aba:	8523      	strh	r3, [r4, #40]	; 0x28
            proc->types.pointer.vect.x         = 0;
  404abc:	81a3      	strh	r3, [r4, #12]
            proc->types.pointer.vect.y         = 0;
  404abe:	81e3      	strh	r3, [r4, #14]
            lv_obj_t * i        = indev_obj_act;
  404ac0:	4a06      	ldr	r2, [pc, #24]	; (404adc <indev_proc_press+0x178>)
  404ac2:	6810      	ldr	r0, [r2, #0]
            lv_obj_t * last_top = NULL;
  404ac4:	461d      	mov	r5, r3
            while(i != NULL) {
  404ac6:	e001      	b.n	404acc <indev_proc_press+0x168>
                i = lv_obj_get_parent(i);
  404ac8:	4b0f      	ldr	r3, [pc, #60]	; (404b08 <indev_proc_press+0x1a4>)
  404aca:	4798      	blx	r3
            while(i != NULL) {
  404acc:	b1f0      	cbz	r0, 404b0c <indev_proc_press+0x1a8>
                if(i->top) last_top = i;
  404ace:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  404ad2:	f013 0f20 	tst.w	r3, #32
  404ad6:	d0f7      	beq.n	404ac8 <indev_proc_press+0x164>
  404ad8:	4605      	mov	r5, r0
  404ada:	e7f5      	b.n	404ac8 <indev_proc_press+0x164>
  404adc:	2040c390 	.word	0x2040c390
  404ae0:	2040c38c 	.word	0x2040c38c
  404ae4:	0040372d 	.word	0x0040372d
  404ae8:	004036e9 	.word	0x004036e9
  404aec:	0040324d 	.word	0x0040324d
  404af0:	004048b5 	.word	0x004048b5
  404af4:	00403231 	.word	0x00403231
  404af8:	004031f9 	.word	0x004031f9
  404afc:	004068f5 	.word	0x004068f5
  404b00:	004053e5 	.word	0x004053e5
  404b04:	00414a3d 	.word	0x00414a3d
  404b08:	004054f5 	.word	0x004054f5
            if(last_top != NULL) {
  404b0c:	b115      	cbz	r5, 404b14 <indev_proc_press+0x1b0>
                lv_obj_move_foreground(last_top);
  404b0e:	4628      	mov	r0, r5
  404b10:	4b77      	ldr	r3, [pc, #476]	; (404cf0 <indev_proc_press+0x38c>)
  404b12:	4798      	blx	r3
            indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSED, indev_act);
  404b14:	4b77      	ldr	r3, [pc, #476]	; (404cf4 <indev_proc_press+0x390>)
  404b16:	6818      	ldr	r0, [r3, #0]
  404b18:	69c3      	ldr	r3, [r0, #28]
  404b1a:	4a77      	ldr	r2, [pc, #476]	; (404cf8 <indev_proc_press+0x394>)
  404b1c:	6812      	ldr	r2, [r2, #0]
  404b1e:	210b      	movs	r1, #11
  404b20:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b22:	4620      	mov	r0, r4
  404b24:	4b75      	ldr	r3, [pc, #468]	; (404cfc <indev_proc_press+0x398>)
  404b26:	4798      	blx	r3
  404b28:	2800      	cmp	r0, #0
  404b2a:	f47f af52 	bne.w	4049d2 <indev_proc_press+0x6e>
            lv_event_send(indev_obj_act, LV_EVENT_PRESSED, NULL);
  404b2e:	2200      	movs	r2, #0
  404b30:	4611      	mov	r1, r2
  404b32:	4b70      	ldr	r3, [pc, #448]	; (404cf4 <indev_proc_press+0x390>)
  404b34:	6818      	ldr	r0, [r3, #0]
  404b36:	4b72      	ldr	r3, [pc, #456]	; (404d00 <indev_proc_press+0x39c>)
  404b38:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b3a:	4620      	mov	r0, r4
  404b3c:	4b6f      	ldr	r3, [pc, #444]	; (404cfc <indev_proc_press+0x398>)
  404b3e:	4798      	blx	r3
  404b40:	2800      	cmp	r0, #0
  404b42:	f47f af46 	bne.w	4049d2 <indev_proc_press+0x6e>
            if(indev_act->proc.wait_until_release) return;
  404b46:	4b6c      	ldr	r3, [pc, #432]	; (404cf8 <indev_proc_press+0x394>)
  404b48:	6818      	ldr	r0, [r3, #0]
  404b4a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  404b4e:	f013 0f08 	tst.w	r3, #8
  404b52:	f47f af3e 	bne.w	4049d2 <indev_proc_press+0x6e>
            indev_click_focus(&indev_act->proc);
  404b56:	301c      	adds	r0, #28
  404b58:	4b6a      	ldr	r3, [pc, #424]	; (404d04 <indev_proc_press+0x3a0>)
  404b5a:	4798      	blx	r3
            if(indev_reset_check(proc)) return;
  404b5c:	4620      	mov	r0, r4
  404b5e:	4b67      	ldr	r3, [pc, #412]	; (404cfc <indev_proc_press+0x398>)
  404b60:	4798      	blx	r3
  404b62:	2800      	cmp	r0, #0
  404b64:	f47f af35 	bne.w	4049d2 <indev_proc_press+0x6e>
    proc->types.pointer.vect.x = proc->types.pointer.act_point.x - proc->types.pointer.last_point.x;
  404b68:	88a0      	ldrh	r0, [r4, #4]
  404b6a:	8923      	ldrh	r3, [r4, #8]
  404b6c:	1ac0      	subs	r0, r0, r3
  404b6e:	b200      	sxth	r0, r0
  404b70:	81a0      	strh	r0, [r4, #12]
    proc->types.pointer.vect.y = proc->types.pointer.act_point.y - proc->types.pointer.last_point.y;
  404b72:	88e1      	ldrh	r1, [r4, #6]
  404b74:	8963      	ldrh	r3, [r4, #10]
  404b76:	1ac9      	subs	r1, r1, r3
  404b78:	b209      	sxth	r1, r1
  404b7a:	81e1      	strh	r1, [r4, #14]
    proc->types.pointer.drag_throw_vect.x = (proc->types.pointer.drag_throw_vect.x * 5) >> 3;
  404b7c:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  404b80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  404b84:	10d2      	asrs	r2, r2, #3
  404b86:	82a2      	strh	r2, [r4, #20]
    proc->types.pointer.drag_throw_vect.y = (proc->types.pointer.drag_throw_vect.y * 5) >> 3;
  404b88:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
  404b8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  404b90:	10db      	asrs	r3, r3, #3
  404b92:	82e3      	strh	r3, [r4, #22]
    if(proc->types.pointer.drag_throw_vect.x < 0)
  404b94:	2a00      	cmp	r2, #0
  404b96:	db7b      	blt.n	404c90 <indev_proc_press+0x32c>
    else if(proc->types.pointer.drag_throw_vect.x > 0)
  404b98:	2a00      	cmp	r2, #0
  404b9a:	dd01      	ble.n	404ba0 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.x--;
  404b9c:	3a01      	subs	r2, #1
  404b9e:	82a2      	strh	r2, [r4, #20]
    if(proc->types.pointer.drag_throw_vect.y < 0)
  404ba0:	2b00      	cmp	r3, #0
  404ba2:	db78      	blt.n	404c96 <indev_proc_press+0x332>
    else if(proc->types.pointer.drag_throw_vect.y > 0)
  404ba4:	2b00      	cmp	r3, #0
  404ba6:	dd01      	ble.n	404bac <indev_proc_press+0x248>
        proc->types.pointer.drag_throw_vect.y--;
  404ba8:	3b01      	subs	r3, #1
  404baa:	82e3      	strh	r3, [r4, #22]
    proc->types.pointer.drag_throw_vect.x += (proc->types.pointer.vect.x * 4) >> 3;
  404bac:	8aa3      	ldrh	r3, [r4, #20]
  404bae:	eb03 0060 	add.w	r0, r3, r0, asr #1
  404bb2:	82a0      	strh	r0, [r4, #20]
    proc->types.pointer.drag_throw_vect.y += (proc->types.pointer.vect.y * 4) >> 3;
  404bb4:	8ae3      	ldrh	r3, [r4, #22]
  404bb6:	eb03 0161 	add.w	r1, r3, r1, asr #1
  404bba:	82e1      	strh	r1, [r4, #22]
    if(indev_obj_act != NULL) {
  404bbc:	4b4d      	ldr	r3, [pc, #308]	; (404cf4 <indev_proc_press+0x390>)
  404bbe:	6818      	ldr	r0, [r3, #0]
  404bc0:	2800      	cmp	r0, #0
  404bc2:	f43f af06 	beq.w	4049d2 <indev_proc_press+0x6e>
        indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_PRESSING, indev_act);
  404bc6:	69c3      	ldr	r3, [r0, #28]
  404bc8:	4a4b      	ldr	r2, [pc, #300]	; (404cf8 <indev_proc_press+0x394>)
  404bca:	6812      	ldr	r2, [r2, #0]
  404bcc:	210c      	movs	r1, #12
  404bce:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404bd0:	4620      	mov	r0, r4
  404bd2:	4b4a      	ldr	r3, [pc, #296]	; (404cfc <indev_proc_press+0x398>)
  404bd4:	4798      	blx	r3
  404bd6:	2800      	cmp	r0, #0
  404bd8:	f47f aefb 	bne.w	4049d2 <indev_proc_press+0x6e>
        lv_event_send(indev_obj_act, LV_EVENT_PRESSING, NULL);
  404bdc:	2200      	movs	r2, #0
  404bde:	2101      	movs	r1, #1
  404be0:	4b44      	ldr	r3, [pc, #272]	; (404cf4 <indev_proc_press+0x390>)
  404be2:	6818      	ldr	r0, [r3, #0]
  404be4:	4b46      	ldr	r3, [pc, #280]	; (404d00 <indev_proc_press+0x39c>)
  404be6:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404be8:	4620      	mov	r0, r4
  404bea:	4b44      	ldr	r3, [pc, #272]	; (404cfc <indev_proc_press+0x398>)
  404bec:	4798      	blx	r3
  404bee:	2800      	cmp	r0, #0
  404bf0:	f47f aeef 	bne.w	4049d2 <indev_proc_press+0x6e>
        if(indev_act->proc.wait_until_release) return;
  404bf4:	4b40      	ldr	r3, [pc, #256]	; (404cf8 <indev_proc_press+0x394>)
  404bf6:	681b      	ldr	r3, [r3, #0]
  404bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404bfc:	f013 0f08 	tst.w	r3, #8
  404c00:	f47f aee7 	bne.w	4049d2 <indev_proc_press+0x6e>
        indev_drag(proc);
  404c04:	4620      	mov	r0, r4
  404c06:	4b40      	ldr	r3, [pc, #256]	; (404d08 <indev_proc_press+0x3a4>)
  404c08:	4798      	blx	r3
        indev_gesture(proc);
  404c0a:	4620      	mov	r0, r4
  404c0c:	4b3f      	ldr	r3, [pc, #252]	; (404d0c <indev_proc_press+0x3a8>)
  404c0e:	4798      	blx	r3
        if(indev_reset_check(proc)) return;
  404c10:	4620      	mov	r0, r4
  404c12:	4b3a      	ldr	r3, [pc, #232]	; (404cfc <indev_proc_press+0x398>)
  404c14:	4798      	blx	r3
  404c16:	2800      	cmp	r0, #0
  404c18:	f47f aedb 	bne.w	4049d2 <indev_proc_press+0x6e>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 0) {
  404c1c:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404c20:	f013 0f02 	tst.w	r3, #2
  404c24:	d104      	bne.n	404c30 <indev_proc_press+0x2cc>
  404c26:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404c2a:	f013 0f01 	tst.w	r3, #1
  404c2e:	d035      	beq.n	404c9c <indev_proc_press+0x338>
        if(proc->types.pointer.drag_in_prog == 0 && proc->long_pr_sent == 1) {
  404c30:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  404c34:	f013 0f02 	tst.w	r3, #2
  404c38:	f47f aecb 	bne.w	4049d2 <indev_proc_press+0x6e>
  404c3c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404c40:	f013 0f01 	tst.w	r3, #1
  404c44:	f43f aec5 	beq.w	4049d2 <indev_proc_press+0x6e>
            if(lv_tick_elaps(proc->longpr_rep_timestamp) > indev_act->driver.long_press_rep_time) {
  404c48:	6b20      	ldr	r0, [r4, #48]	; 0x30
  404c4a:	4b31      	ldr	r3, [pc, #196]	; (404d10 <indev_proc_press+0x3ac>)
  404c4c:	4798      	blx	r3
  404c4e:	4b2a      	ldr	r3, [pc, #168]	; (404cf8 <indev_proc_press+0x394>)
  404c50:	681a      	ldr	r2, [r3, #0]
  404c52:	8b53      	ldrh	r3, [r2, #26]
  404c54:	4298      	cmp	r0, r3
  404c56:	f67f aebc 	bls.w	4049d2 <indev_proc_press+0x6e>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS_REP, indev_act);
  404c5a:	4b26      	ldr	r3, [pc, #152]	; (404cf4 <indev_proc_press+0x390>)
  404c5c:	6818      	ldr	r0, [r3, #0]
  404c5e:	69c3      	ldr	r3, [r0, #28]
  404c60:	2110      	movs	r1, #16
  404c62:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404c64:	4620      	mov	r0, r4
  404c66:	4b25      	ldr	r3, [pc, #148]	; (404cfc <indev_proc_press+0x398>)
  404c68:	4798      	blx	r3
  404c6a:	2800      	cmp	r0, #0
  404c6c:	f47f aeb1 	bne.w	4049d2 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED_REPEAT, NULL);
  404c70:	2200      	movs	r2, #0
  404c72:	2105      	movs	r1, #5
  404c74:	4b1f      	ldr	r3, [pc, #124]	; (404cf4 <indev_proc_press+0x390>)
  404c76:	6818      	ldr	r0, [r3, #0]
  404c78:	4b21      	ldr	r3, [pc, #132]	; (404d00 <indev_proc_press+0x39c>)
  404c7a:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404c7c:	4620      	mov	r0, r4
  404c7e:	4b1f      	ldr	r3, [pc, #124]	; (404cfc <indev_proc_press+0x398>)
  404c80:	4798      	blx	r3
  404c82:	2800      	cmp	r0, #0
  404c84:	f47f aea5 	bne.w	4049d2 <indev_proc_press+0x6e>
                proc->longpr_rep_timestamp = lv_tick_get();
  404c88:	4b22      	ldr	r3, [pc, #136]	; (404d14 <indev_proc_press+0x3b0>)
  404c8a:	4798      	blx	r3
  404c8c:	6320      	str	r0, [r4, #48]	; 0x30
  404c8e:	e6a0      	b.n	4049d2 <indev_proc_press+0x6e>
        proc->types.pointer.drag_throw_vect.x++;
  404c90:	3201      	adds	r2, #1
  404c92:	82a2      	strh	r2, [r4, #20]
  404c94:	e784      	b.n	404ba0 <indev_proc_press+0x23c>
        proc->types.pointer.drag_throw_vect.y++;
  404c96:	3301      	adds	r3, #1
  404c98:	82e3      	strh	r3, [r4, #22]
  404c9a:	e787      	b.n	404bac <indev_proc_press+0x248>
            if(lv_tick_elaps(proc->pr_timestamp) > indev_act->driver.long_press_time) {
  404c9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  404c9e:	4b1c      	ldr	r3, [pc, #112]	; (404d10 <indev_proc_press+0x3ac>)
  404ca0:	4798      	blx	r3
  404ca2:	4b15      	ldr	r3, [pc, #84]	; (404cf8 <indev_proc_press+0x394>)
  404ca4:	681a      	ldr	r2, [r3, #0]
  404ca6:	8b13      	ldrh	r3, [r2, #24]
  404ca8:	4298      	cmp	r0, r3
  404caa:	d9c1      	bls.n	404c30 <indev_proc_press+0x2cc>
                indev_obj_act->signal_cb(indev_obj_act, LV_SIGNAL_LONG_PRESS, indev_act);
  404cac:	4b11      	ldr	r3, [pc, #68]	; (404cf4 <indev_proc_press+0x390>)
  404cae:	6818      	ldr	r0, [r3, #0]
  404cb0:	69c3      	ldr	r3, [r0, #28]
  404cb2:	210f      	movs	r1, #15
  404cb4:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404cb6:	4620      	mov	r0, r4
  404cb8:	4b10      	ldr	r3, [pc, #64]	; (404cfc <indev_proc_press+0x398>)
  404cba:	4798      	blx	r3
  404cbc:	2800      	cmp	r0, #0
  404cbe:	f47f ae88 	bne.w	4049d2 <indev_proc_press+0x6e>
                lv_event_send(indev_obj_act, LV_EVENT_LONG_PRESSED, NULL);
  404cc2:	2200      	movs	r2, #0
  404cc4:	2104      	movs	r1, #4
  404cc6:	4b0b      	ldr	r3, [pc, #44]	; (404cf4 <indev_proc_press+0x390>)
  404cc8:	6818      	ldr	r0, [r3, #0]
  404cca:	4b0d      	ldr	r3, [pc, #52]	; (404d00 <indev_proc_press+0x39c>)
  404ccc:	4798      	blx	r3
                if(indev_reset_check(proc)) return;
  404cce:	4620      	mov	r0, r4
  404cd0:	4b0a      	ldr	r3, [pc, #40]	; (404cfc <indev_proc_press+0x398>)
  404cd2:	4798      	blx	r3
  404cd4:	2800      	cmp	r0, #0
  404cd6:	f47f ae7c 	bne.w	4049d2 <indev_proc_press+0x6e>
                proc->long_pr_sent = 1;
  404cda:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  404cde:	f043 0301 	orr.w	r3, r3, #1
  404ce2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                proc->longpr_rep_timestamp = lv_tick_get();
  404ce6:	4b0b      	ldr	r3, [pc, #44]	; (404d14 <indev_proc_press+0x3b0>)
  404ce8:	4798      	blx	r3
  404cea:	6320      	str	r0, [r4, #48]	; 0x30
  404cec:	e7a0      	b.n	404c30 <indev_proc_press+0x2cc>
  404cee:	4770      	bx	lr
  404cf0:	00405b1d 	.word	0x00405b1d
  404cf4:	2040c390 	.word	0x2040c390
  404cf8:	2040c38c 	.word	0x2040c38c
  404cfc:	004036e9 	.word	0x004036e9
  404d00:	004053e5 	.word	0x004053e5
  404d04:	00403ab5 	.word	0x00403ab5
  404d08:	00403c3d 	.word	0x00403c3d
  404d0c:	00403f4d 	.word	0x00403f4d
  404d10:	00414a59 	.word	0x00414a59
  404d14:	00414a3d 	.word	0x00414a3d

00404d18 <indev_pointer_proc>:
{
  404d18:	b538      	push	{r3, r4, r5, lr}
  404d1a:	4604      	mov	r4, r0
  404d1c:	460d      	mov	r5, r1
    if(i->cursor != NULL &&
  404d1e:	6d40      	ldr	r0, [r0, #84]	; 0x54
  404d20:	b148      	cbz	r0, 404d36 <indev_pointer_proc+0x1e>
       (i->proc.types.pointer.last_point.x != data->point.x || i->proc.types.pointer.last_point.y != data->point.y)) {
  404d22:	6a62      	ldr	r2, [r4, #36]	; 0x24
  404d24:	680b      	ldr	r3, [r1, #0]
    if(i->cursor != NULL &&
  404d26:	429a      	cmp	r2, r3
  404d28:	d005      	beq.n	404d36 <indev_pointer_proc+0x1e>
        lv_obj_set_pos(i->cursor, data->point.x, data->point.y);
  404d2a:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  404d2e:	f9b1 1000 	ldrsh.w	r1, [r1]
  404d32:	4b0d      	ldr	r3, [pc, #52]	; (404d68 <indev_pointer_proc+0x50>)
  404d34:	4798      	blx	r3
    i->proc.types.pointer.act_point.x = data->point.x;
  404d36:	f9b5 3000 	ldrsh.w	r3, [r5]
  404d3a:	8423      	strh	r3, [r4, #32]
    i->proc.types.pointer.act_point.y = data->point.y;
  404d3c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  404d40:	8463      	strh	r3, [r4, #34]	; 0x22
    if(i->proc.state == LV_INDEV_STATE_PR) {
  404d42:	7f23      	ldrb	r3, [r4, #28]
  404d44:	2b01      	cmp	r3, #1
  404d46:	d00a      	beq.n	404d5e <indev_pointer_proc+0x46>
        indev_proc_release(&i->proc);
  404d48:	f104 001c 	add.w	r0, r4, #28
  404d4c:	4b07      	ldr	r3, [pc, #28]	; (404d6c <indev_pointer_proc+0x54>)
  404d4e:	4798      	blx	r3
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404d50:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404d54:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404d56:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404d5a:	84e3      	strh	r3, [r4, #38]	; 0x26
  404d5c:	bd38      	pop	{r3, r4, r5, pc}
        indev_proc_press(&i->proc);
  404d5e:	f104 001c 	add.w	r0, r4, #28
  404d62:	4b03      	ldr	r3, [pc, #12]	; (404d70 <indev_pointer_proc+0x58>)
  404d64:	4798      	blx	r3
  404d66:	e7f3      	b.n	404d50 <indev_pointer_proc+0x38>
  404d68:	00405b85 	.word	0x00405b85
  404d6c:	00403909 	.word	0x00403909
  404d70:	00404965 	.word	0x00404965

00404d74 <indev_button_proc>:
    if(i->btn_points == NULL) {
  404d74:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  404d76:	2b00      	cmp	r3, #0
  404d78:	d03a      	beq.n	404df0 <indev_button_proc+0x7c>
{
  404d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404d7e:	460d      	mov	r5, r1
  404d80:	4604      	mov	r4, r0
    lv_coord_t x = i->btn_points[data->btn_id].x;
  404d82:	688a      	ldr	r2, [r1, #8]
  404d84:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404d88:	f933 7022 	ldrsh.w	r7, [r3, r2, lsl #2]
    lv_coord_t y = i->btn_points[data->btn_id].y;
  404d8c:	f9b1 8002 	ldrsh.w	r8, [r1, #2]
    if(data->state == LV_INDEV_STATE_PR) {
  404d90:	7bab      	ldrb	r3, [r5, #14]
  404d92:	2b01      	cmp	r3, #1
  404d94:	d01a      	beq.n	404dcc <indev_button_proc+0x58>
    if(indev_reset_check(&i->proc)) return;
  404d96:	f104 061c 	add.w	r6, r4, #28
  404d9a:	4630      	mov	r0, r6
  404d9c:	4b15      	ldr	r3, [pc, #84]	; (404df4 <indev_button_proc+0x80>)
  404d9e:	4798      	blx	r3
  404da0:	b990      	cbnz	r0, 404dc8 <indev_button_proc+0x54>
    i->proc.types.pointer.act_point.x = x;
  404da2:	8427      	strh	r7, [r4, #32]
    i->proc.types.pointer.act_point.y = y;
  404da4:	f8a4 8022 	strh.w	r8, [r4, #34]	; 0x22
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404da8:	7bab      	ldrb	r3, [r5, #14]
  404daa:	2b01      	cmp	r3, #1
  404dac:	d01c      	beq.n	404de8 <indev_button_proc+0x74>
    else indev_proc_release(&i->proc);
  404dae:	4630      	mov	r0, r6
  404db0:	4b11      	ldr	r3, [pc, #68]	; (404df8 <indev_button_proc+0x84>)
  404db2:	4798      	blx	r3
    if(indev_reset_check(&i->proc)) return;
  404db4:	4630      	mov	r0, r6
  404db6:	4b0f      	ldr	r3, [pc, #60]	; (404df4 <indev_button_proc+0x80>)
  404db8:	4798      	blx	r3
  404dba:	b928      	cbnz	r0, 404dc8 <indev_button_proc+0x54>
    i->proc.types.pointer.last_point.x = i->proc.types.pointer.act_point.x;
  404dbc:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  404dc0:	84a3      	strh	r3, [r4, #36]	; 0x24
    i->proc.types.pointer.last_point.y = i->proc.types.pointer.act_point.y;
  404dc2:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  404dc6:	84e3      	strh	r3, [r4, #38]	; 0x26
  404dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(i->proc.types.pointer.last_point.x != x ||
  404dcc:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
  404dd0:	429f      	cmp	r7, r3
  404dd2:	d004      	beq.n	404dde <indev_button_proc+0x6a>
            indev_proc_release(&i->proc);
  404dd4:	f104 001c 	add.w	r0, r4, #28
  404dd8:	4b07      	ldr	r3, [pc, #28]	; (404df8 <indev_button_proc+0x84>)
  404dda:	4798      	blx	r3
  404ddc:	e7db      	b.n	404d96 <indev_button_proc+0x22>
           i->proc.types.pointer.last_point.y != y) {
  404dde:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
        if(i->proc.types.pointer.last_point.x != x ||
  404de2:	4598      	cmp	r8, r3
  404de4:	d1f6      	bne.n	404dd4 <indev_button_proc+0x60>
  404de6:	e7d6      	b.n	404d96 <indev_button_proc+0x22>
    if(data->state == LV_INDEV_STATE_PR) indev_proc_press(&i->proc);
  404de8:	4630      	mov	r0, r6
  404dea:	4b04      	ldr	r3, [pc, #16]	; (404dfc <indev_button_proc+0x88>)
  404dec:	4798      	blx	r3
  404dee:	e7e1      	b.n	404db4 <indev_button_proc+0x40>
  404df0:	4770      	bx	lr
  404df2:	bf00      	nop
  404df4:	004036e9 	.word	0x004036e9
  404df8:	00403909 	.word	0x00403909
  404dfc:	00404965 	.word	0x00404965

00404e00 <_lv_indev_read_task>:
    indev_act = task->user_data;
  404e00:	68c0      	ldr	r0, [r0, #12]
  404e02:	4b2e      	ldr	r3, [pc, #184]	; (404ebc <_lv_indev_read_task+0xbc>)
  404e04:	6018      	str	r0, [r3, #0]
    if(indev_act->driver.disp == NULL) return; /*Not assigned to any displays*/
  404e06:	68c3      	ldr	r3, [r0, #12]
  404e08:	2b00      	cmp	r3, #0
  404e0a:	d055      	beq.n	404eb8 <_lv_indev_read_task+0xb8>
{
  404e0c:	b530      	push	{r4, r5, lr}
  404e0e:	b085      	sub	sp, #20
    indev_proc_reset_query_handler(indev_act);
  404e10:	4b2b      	ldr	r3, [pc, #172]	; (404ec0 <_lv_indev_read_task+0xc0>)
  404e12:	4798      	blx	r3
    if(indev_act->proc.disabled) return;
  404e14:	4b29      	ldr	r3, [pc, #164]	; (404ebc <_lv_indev_read_task+0xbc>)
  404e16:	681b      	ldr	r3, [r3, #0]
  404e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
  404e1c:	f013 0f04 	tst.w	r3, #4
  404e20:	d018      	beq.n	404e54 <_lv_indev_read_task+0x54>
}
  404e22:	b005      	add	sp, #20
  404e24:	bd30      	pop	{r4, r5, pc}
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404e26:	68dc      	ldr	r4, [r3, #12]
  404e28:	4b26      	ldr	r3, [pc, #152]	; (404ec4 <_lv_indev_read_task+0xc4>)
  404e2a:	4798      	blx	r3
  404e2c:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404e30:	e025      	b.n	404e7e <_lv_indev_read_task+0x7e>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404e32:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  404e36:	b312      	cbz	r2, 404e7e <_lv_indev_read_task+0x7e>
            indev_act->driver.disp->last_activity_time = lv_tick_get();
  404e38:	68dc      	ldr	r4, [r3, #12]
  404e3a:	4b22      	ldr	r3, [pc, #136]	; (404ec4 <_lv_indev_read_task+0xc4>)
  404e3c:	4798      	blx	r3
  404e3e:	f8c4 0184 	str.w	r0, [r4, #388]	; 0x184
  404e42:	e01c      	b.n	404e7e <_lv_indev_read_task+0x7e>
            indev_pointer_proc(indev_act, &data);
  404e44:	4669      	mov	r1, sp
  404e46:	4b20      	ldr	r3, [pc, #128]	; (404ec8 <_lv_indev_read_task+0xc8>)
  404e48:	4798      	blx	r3
        indev_proc_reset_query_handler(indev_act);
  404e4a:	4b1c      	ldr	r3, [pc, #112]	; (404ebc <_lv_indev_read_task+0xbc>)
  404e4c:	6818      	ldr	r0, [r3, #0]
  404e4e:	4b1c      	ldr	r3, [pc, #112]	; (404ec0 <_lv_indev_read_task+0xc0>)
  404e50:	4798      	blx	r3
    } while(more_to_read);
  404e52:	b35d      	cbz	r5, 404eac <_lv_indev_read_task+0xac>
        more_to_read = _lv_indev_read(indev_act, &data);
  404e54:	4c19      	ldr	r4, [pc, #100]	; (404ebc <_lv_indev_read_task+0xbc>)
  404e56:	4669      	mov	r1, sp
  404e58:	6820      	ldr	r0, [r4, #0]
  404e5a:	4b1c      	ldr	r3, [pc, #112]	; (404ecc <_lv_indev_read_task+0xcc>)
  404e5c:	4798      	blx	r3
  404e5e:	4605      	mov	r5, r0
        indev_proc_reset_query_handler(indev_act);
  404e60:	6820      	ldr	r0, [r4, #0]
  404e62:	4b17      	ldr	r3, [pc, #92]	; (404ec0 <_lv_indev_read_task+0xc0>)
  404e64:	4798      	blx	r3
        indev_obj_act = NULL;
  404e66:	2200      	movs	r2, #0
  404e68:	4b19      	ldr	r3, [pc, #100]	; (404ed0 <_lv_indev_read_task+0xd0>)
  404e6a:	601a      	str	r2, [r3, #0]
        indev_act->proc.state = data.state;
  404e6c:	6823      	ldr	r3, [r4, #0]
  404e6e:	f89d 200e 	ldrb.w	r2, [sp, #14]
  404e72:	771a      	strb	r2, [r3, #28]
        if(indev_act->proc.state == LV_INDEV_STATE_PR) {
  404e74:	2a01      	cmp	r2, #1
  404e76:	d0d6      	beq.n	404e26 <_lv_indev_read_task+0x26>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER && data.enc_diff) {
  404e78:	781a      	ldrb	r2, [r3, #0]
  404e7a:	2a04      	cmp	r2, #4
  404e7c:	d0d9      	beq.n	404e32 <_lv_indev_read_task+0x32>
        if(indev_act->driver.type == LV_INDEV_TYPE_POINTER) {
  404e7e:	4b0f      	ldr	r3, [pc, #60]	; (404ebc <_lv_indev_read_task+0xbc>)
  404e80:	6818      	ldr	r0, [r3, #0]
  404e82:	7803      	ldrb	r3, [r0, #0]
  404e84:	2b01      	cmp	r3, #1
  404e86:	d0dd      	beq.n	404e44 <_lv_indev_read_task+0x44>
        else if(indev_act->driver.type == LV_INDEV_TYPE_KEYPAD) {
  404e88:	2b02      	cmp	r3, #2
  404e8a:	d007      	beq.n	404e9c <_lv_indev_read_task+0x9c>
        else if(indev_act->driver.type == LV_INDEV_TYPE_ENCODER) {
  404e8c:	2b04      	cmp	r3, #4
  404e8e:	d009      	beq.n	404ea4 <_lv_indev_read_task+0xa4>
        else if(indev_act->driver.type == LV_INDEV_TYPE_BUTTON) {
  404e90:	2b03      	cmp	r3, #3
  404e92:	d1da      	bne.n	404e4a <_lv_indev_read_task+0x4a>
            indev_button_proc(indev_act, &data);
  404e94:	4669      	mov	r1, sp
  404e96:	4b0f      	ldr	r3, [pc, #60]	; (404ed4 <_lv_indev_read_task+0xd4>)
  404e98:	4798      	blx	r3
  404e9a:	e7d6      	b.n	404e4a <_lv_indev_read_task+0x4a>
            indev_keypad_proc(indev_act, &data);
  404e9c:	4669      	mov	r1, sp
  404e9e:	4b0e      	ldr	r3, [pc, #56]	; (404ed8 <_lv_indev_read_task+0xd8>)
  404ea0:	4798      	blx	r3
  404ea2:	e7d2      	b.n	404e4a <_lv_indev_read_task+0x4a>
            indev_encoder_proc(indev_act, &data);
  404ea4:	4669      	mov	r1, sp
  404ea6:	4b0d      	ldr	r3, [pc, #52]	; (404edc <_lv_indev_read_task+0xdc>)
  404ea8:	4798      	blx	r3
  404eaa:	e7ce      	b.n	404e4a <_lv_indev_read_task+0x4a>
    indev_act     = NULL;
  404eac:	2300      	movs	r3, #0
  404eae:	4a03      	ldr	r2, [pc, #12]	; (404ebc <_lv_indev_read_task+0xbc>)
  404eb0:	6013      	str	r3, [r2, #0]
    indev_obj_act = NULL;
  404eb2:	4a07      	ldr	r2, [pc, #28]	; (404ed0 <_lv_indev_read_task+0xd0>)
  404eb4:	6013      	str	r3, [r2, #0]
  404eb6:	e7b4      	b.n	404e22 <_lv_indev_read_task+0x22>
  404eb8:	4770      	bx	lr
  404eba:	bf00      	nop
  404ebc:	2040c38c 	.word	0x2040c38c
  404ec0:	00403691 	.word	0x00403691
  404ec4:	00414a3d 	.word	0x00414a3d
  404ec8:	00404d19 	.word	0x00404d19
  404ecc:	004149d5 	.word	0x004149d5
  404ed0:	2040c390 	.word	0x2040c390
  404ed4:	00404d75 	.word	0x00404d75
  404ed8:	00404045 	.word	0x00404045
  404edc:	00404371 	.word	0x00404371

00404ee0 <lv_event_mark_deleted>:

#endif

static void lv_event_mark_deleted(lv_obj_t * obj)
{
    lv_event_temp_data_t * t = event_temp_data_head;
  404ee0:	4b05      	ldr	r3, [pc, #20]	; (404ef8 <lv_event_mark_deleted+0x18>)
  404ee2:	681b      	ldr	r3, [r3, #0]

    while(t) {
  404ee4:	e000      	b.n	404ee8 <lv_event_mark_deleted+0x8>
        if(t->obj == obj) t->deleted = true;
        t = t->prev;
  404ee6:	689b      	ldr	r3, [r3, #8]
    while(t) {
  404ee8:	b12b      	cbz	r3, 404ef6 <lv_event_mark_deleted+0x16>
        if(t->obj == obj) t->deleted = true;
  404eea:	681a      	ldr	r2, [r3, #0]
  404eec:	4282      	cmp	r2, r0
  404eee:	d1fa      	bne.n	404ee6 <lv_event_mark_deleted+0x6>
  404ef0:	2201      	movs	r2, #1
  404ef2:	711a      	strb	r2, [r3, #4]
  404ef4:	e7f7      	b.n	404ee6 <lv_event_mark_deleted+0x6>
    }
}
  404ef6:	4770      	bx	lr
  404ef8:	2040c398 	.word	0x2040c398

00404efc <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
  404efc:	2850      	cmp	r0, #80	; 0x50
  404efe:	d017      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f00:	d90c      	bls.n	404f1c <style_prop_is_cacheble+0x20>
  404f02:	28ff      	cmp	r0, #255	; 0xff
  404f04:	d014      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f06:	d82e      	bhi.n	404f66 <style_prop_is_cacheble+0x6a>
  404f08:	286e      	cmp	r0, #110	; 0x6e
  404f0a:	d011      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f0c:	d926      	bls.n	404f5c <style_prop_is_cacheble+0x60>
  404f0e:	287f      	cmp	r0, #127	; 0x7f
  404f10:	d00e      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f12:	2891      	cmp	r0, #145	; 0x91
  404f14:	d00c      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f16:	2872      	cmp	r0, #114	; 0x72
  404f18:	d115      	bne.n	404f46 <style_prop_is_cacheble+0x4a>
  404f1a:	e009      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f1c:	2818      	cmp	r0, #24
  404f1e:	d909      	bls.n	404f34 <style_prop_is_cacheble+0x38>
  404f20:	2833      	cmp	r0, #51	; 0x33
  404f22:	d816      	bhi.n	404f52 <style_prop_is_cacheble+0x56>
  404f24:	2830      	cmp	r0, #48	; 0x30
  404f26:	d203      	bcs.n	404f30 <style_prop_is_cacheble+0x34>
  404f28:	2820      	cmp	r0, #32
  404f2a:	d001      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f2c:	282c      	cmp	r0, #44	; 0x2c
  404f2e:	d10a      	bne.n	404f46 <style_prop_is_cacheble+0x4a>
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
  404f30:	2001      	movs	r0, #1
  404f32:	4770      	bx	lr
    switch(prop) {
  404f34:	2815      	cmp	r0, #21
  404f36:	d2fb      	bcs.n	404f30 <style_prop_is_cacheble+0x34>
  404f38:	2807      	cmp	r0, #7
  404f3a:	d806      	bhi.n	404f4a <style_prop_is_cacheble+0x4e>
  404f3c:	2804      	cmp	r0, #4
  404f3e:	d2f7      	bcs.n	404f30 <style_prop_is_cacheble+0x34>
  404f40:	3801      	subs	r0, #1
  404f42:	2801      	cmp	r0, #1
  404f44:	d9f4      	bls.n	404f30 <style_prop_is_cacheble+0x34>
            break;
        default:
            return false;
  404f46:	2000      	movs	r0, #0
    }
}
  404f48:	4770      	bx	lr
    switch(prop) {
  404f4a:	3810      	subs	r0, #16
  404f4c:	2803      	cmp	r0, #3
  404f4e:	d8fa      	bhi.n	404f46 <style_prop_is_cacheble+0x4a>
  404f50:	e7ee      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f52:	2840      	cmp	r0, #64	; 0x40
  404f54:	d0ec      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f56:	2842      	cmp	r0, #66	; 0x42
  404f58:	d1f5      	bne.n	404f46 <style_prop_is_cacheble+0x4a>
  404f5a:	e7e9      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f5c:	2854      	cmp	r0, #84	; 0x54
  404f5e:	d0e7      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f60:	2860      	cmp	r0, #96	; 0x60
  404f62:	d1f0      	bne.n	404f46 <style_prop_is_cacheble+0x4a>
  404f64:	e7e4      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f66:	f248 0383 	movw	r3, #32899	; 0x8083
  404f6a:	4298      	cmp	r0, r3
  404f6c:	d0e0      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f6e:	d90c      	bls.n	404f8a <style_prop_is_cacheble+0x8e>
  404f70:	f248 03a0 	movw	r3, #32928	; 0x80a0
  404f74:	4298      	cmp	r0, r3
  404f76:	d0db      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f78:	f248 03ad 	movw	r3, #32941	; 0x80ad
  404f7c:	4298      	cmp	r0, r3
  404f7e:	d0d7      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f80:	f248 038e 	movw	r3, #32910	; 0x808e
  404f84:	4298      	cmp	r0, r3
  404f86:	d1de      	bne.n	404f46 <style_prop_is_cacheble+0x4a>
  404f88:	e7d2      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f8a:	f248 030c 	movw	r3, #32780	; 0x800c
  404f8e:	4298      	cmp	r0, r3
  404f90:	d0ce      	beq.n	404f30 <style_prop_is_cacheble+0x34>
  404f92:	d3d8      	bcc.n	404f46 <style_prop_is_cacheble+0x4a>
  404f94:	4b02      	ldr	r3, [pc, #8]	; (404fa0 <style_prop_is_cacheble+0xa4>)
  404f96:	4403      	add	r3, r0
  404f98:	2b01      	cmp	r3, #1
  404f9a:	d8d4      	bhi.n	404f46 <style_prop_is_cacheble+0x4a>
  404f9c:	e7c8      	b.n	404f30 <style_prop_is_cacheble+0x34>
  404f9e:	bf00      	nop
  404fa0:	ffff7f80 	.word	0xffff7f80

00404fa4 <refresh_children_position>:
{
  404fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  404fa6:	460e      	mov	r6, r1
  404fa8:	4615      	mov	r5, r2
    _LV_LL_READ(obj->child_ll, i) {
  404faa:	1d07      	adds	r7, r0, #4
  404fac:	4638      	mov	r0, r7
  404fae:	4b0f      	ldr	r3, [pc, #60]	; (404fec <refresh_children_position+0x48>)
  404fb0:	4798      	blx	r3
  404fb2:	4604      	mov	r4, r0
  404fb4:	e017      	b.n	404fe6 <refresh_children_position+0x42>
        i->coords.x1 += x_diff;
  404fb6:	b2b2      	uxth	r2, r6
  404fb8:	8a23      	ldrh	r3, [r4, #16]
  404fba:	4413      	add	r3, r2
  404fbc:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
  404fbe:	b2ab      	uxth	r3, r5
  404fc0:	8a61      	ldrh	r1, [r4, #18]
  404fc2:	4419      	add	r1, r3
  404fc4:	8261      	strh	r1, [r4, #18]
        i->coords.x2 += x_diff;
  404fc6:	8aa1      	ldrh	r1, [r4, #20]
  404fc8:	440a      	add	r2, r1
  404fca:	82a2      	strh	r2, [r4, #20]
        i->coords.y2 += y_diff;
  404fcc:	8ae2      	ldrh	r2, [r4, #22]
  404fce:	4413      	add	r3, r2
  404fd0:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
  404fd2:	462a      	mov	r2, r5
  404fd4:	4631      	mov	r1, r6
  404fd6:	4620      	mov	r0, r4
  404fd8:	f7ff ffe4 	bl	404fa4 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
  404fdc:	4621      	mov	r1, r4
  404fde:	4638      	mov	r0, r7
  404fe0:	4b03      	ldr	r3, [pc, #12]	; (404ff0 <refresh_children_position+0x4c>)
  404fe2:	4798      	blx	r3
  404fe4:	4604      	mov	r4, r0
  404fe6:	2c00      	cmp	r4, #0
  404fe8:	d1e5      	bne.n	404fb6 <refresh_children_position+0x12>
}
  404fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  404fec:	00415ac9 	.word	0x00415ac9
  404ff0:	00415add 	.word	0x00415add

00404ff4 <style_snapshot_compare>:
    _lv_obj_disable_style_caching(obj, false);
    list->skip_trans = trans_ori;
}

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
  404ff4:	b538      	push	{r3, r4, r5, lr}
  404ff6:	4604      	mov	r4, r0
  404ff8:	460d      	mov	r5, r1
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  404ffa:	22bc      	movs	r2, #188	; 0xbc
  404ffc:	4b55      	ldr	r3, [pc, #340]	; (405154 <style_snapshot_compare+0x160>)
  404ffe:	4798      	blx	r3
  405000:	2800      	cmp	r0, #0
  405002:	f000 8086 	beq.w	405112 <style_snapshot_compare+0x11e>

    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
  405006:	f9b4 2092 	ldrsh.w	r2, [r4, #146]	; 0x92
  40500a:	f9b5 3092 	ldrsh.w	r3, [r5, #146]	; 0x92
  40500e:	429a      	cmp	r2, r3
  405010:	d001      	beq.n	405016 <style_snapshot_compare+0x22>
  405012:	2002      	movs	r0, #2
  405014:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
  405016:	f9b4 2094 	ldrsh.w	r2, [r4, #148]	; 0x94
  40501a:	f9b5 3094 	ldrsh.w	r3, [r5, #148]	; 0x94
  40501e:	429a      	cmp	r2, r3
  405020:	d001      	beq.n	405026 <style_snapshot_compare+0x32>
  405022:	2002      	movs	r0, #2
  405024:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405026:	f9b4 2098 	ldrsh.w	r2, [r4, #152]	; 0x98
  40502a:	f9b5 3096 	ldrsh.w	r3, [r5, #150]	; 0x96
  40502e:	429a      	cmp	r2, r3
  405030:	d001      	beq.n	405036 <style_snapshot_compare+0x42>
  405032:	2002      	movs	r0, #2
  405034:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
  405036:	f9b4 2096 	ldrsh.w	r2, [r4, #150]	; 0x96
  40503a:	4293      	cmp	r3, r2
  40503c:	d001      	beq.n	405042 <style_snapshot_compare+0x4e>
  40503e:	2002      	movs	r0, #2
  405040:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
  405042:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
  405046:	f9b5 309a 	ldrsh.w	r3, [r5, #154]	; 0x9a
  40504a:	429a      	cmp	r2, r3
  40504c:	d001      	beq.n	405052 <style_snapshot_compare+0x5e>
  40504e:	2002      	movs	r0, #2
  405050:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
  405052:	f9b4 209c 	ldrsh.w	r2, [r4, #156]	; 0x9c
  405056:	f9b5 309c 	ldrsh.w	r3, [r5, #156]	; 0x9c
  40505a:	429a      	cmp	r2, r3
  40505c:	d001      	beq.n	405062 <style_snapshot_compare+0x6e>
  40505e:	2002      	movs	r0, #2
  405060:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  405062:	f9b4 209e 	ldrsh.w	r2, [r4, #158]	; 0x9e
  405066:	f9b5 309e 	ldrsh.w	r3, [r5, #158]	; 0x9e
  40506a:	429a      	cmp	r2, r3
  40506c:	d153      	bne.n	405116 <style_snapshot_compare+0x122>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40506e:	f9b4 20a0 	ldrsh.w	r2, [r4, #160]	; 0xa0
  405072:	f9b5 30a2 	ldrsh.w	r3, [r5, #162]	; 0xa2
  405076:	429a      	cmp	r2, r3
  405078:	d14f      	bne.n	40511a <style_snapshot_compare+0x126>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40507a:	f9b4 20a2 	ldrsh.w	r2, [r4, #162]	; 0xa2
  40507e:	4293      	cmp	r3, r2
  405080:	d14d      	bne.n	40511e <style_snapshot_compare+0x12a>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  405082:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
  405086:	f9b5 30a6 	ldrsh.w	r3, [r5, #166]	; 0xa6
  40508a:	429a      	cmp	r2, r3
  40508c:	d149      	bne.n	405122 <style_snapshot_compare+0x12e>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  40508e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
  405092:	f9b5 30a8 	ldrsh.w	r3, [r5, #168]	; 0xa8
  405096:	429a      	cmp	r2, r3
  405098:	d145      	bne.n	405126 <style_snapshot_compare+0x132>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40509a:	f9b4 20aa 	ldrsh.w	r2, [r4, #170]	; 0xaa
  40509e:	f9b5 30aa 	ldrsh.w	r3, [r5, #170]	; 0xaa
  4050a2:	429a      	cmp	r2, r3
  4050a4:	d141      	bne.n	40512a <style_snapshot_compare+0x136>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  4050a6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
  4050aa:	f9b5 30ac 	ldrsh.w	r3, [r5, #172]	; 0xac
  4050ae:	429a      	cmp	r2, r3
  4050b0:	d13d      	bne.n	40512e <style_snapshot_compare+0x13a>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  4050b2:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
  4050b6:	f9b5 301a 	ldrsh.w	r3, [r5, #26]
  4050ba:	429a      	cmp	r2, r3
  4050bc:	d139      	bne.n	405132 <style_snapshot_compare+0x13e>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  4050be:	f9b4 201c 	ldrsh.w	r2, [r4, #28]
  4050c2:	f9b5 301c 	ldrsh.w	r3, [r5, #28]
  4050c6:	429a      	cmp	r2, r3
  4050c8:	d135      	bne.n	405136 <style_snapshot_compare+0x142>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  4050ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4050cc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  4050ce:	429a      	cmp	r2, r3
  4050d0:	d133      	bne.n	40513a <style_snapshot_compare+0x146>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  4050d2:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  4050d6:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  4050da:	429a      	cmp	r2, r3
  4050dc:	d12f      	bne.n	40513e <style_snapshot_compare+0x14a>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  4050de:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
  4050e2:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  4050e6:	429a      	cmp	r2, r3
  4050e8:	d12b      	bne.n	405142 <style_snapshot_compare+0x14e>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  4050ea:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
  4050ee:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
  4050f2:	429a      	cmp	r2, r3
  4050f4:	d127      	bne.n	405146 <style_snapshot_compare+0x152>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  4050f6:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
  4050fa:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
  4050fe:	429a      	cmp	r2, r3
  405100:	d123      	bne.n	40514a <style_snapshot_compare+0x156>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
  405102:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
  405106:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
  40510a:	429a      	cmp	r2, r3
  40510c:	d01f      	beq.n	40514e <style_snapshot_compare+0x15a>
  40510e:	2002      	movs	r0, #2
  405110:	bd38      	pop	{r3, r4, r5, pc}
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
  405112:	2000      	movs	r0, #0
  405114:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
  405116:	2002      	movs	r0, #2
  405118:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40511a:	2002      	movs	r0, #2
  40511c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
  40511e:	2002      	movs	r0, #2
  405120:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
  405122:	2002      	movs	r0, #2
  405124:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
  405126:	2002      	movs	r0, #2
  405128:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
  40512a:	2002      	movs	r0, #2
  40512c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
  40512e:	2002      	movs	r0, #2
  405130:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
  405132:	2002      	movs	r0, #2
  405134:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
  405136:	2002      	movs	r0, #2
  405138:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
  40513a:	2002      	movs	r0, #2
  40513c:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
  40513e:	2002      	movs	r0, #2
  405140:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
  405142:	2002      	movs	r0, #2
  405144:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
  405146:	2002      	movs	r0, #2
  405148:	bd38      	pop	{r3, r4, r5, pc}
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
  40514a:	2002      	movs	r0, #2
  40514c:	bd38      	pop	{r3, r4, r5, pc}

    /*If not returned earlier its just a visual difference, a simple redraw is enough*/
    return STYLE_COMPARE_VISUAL_DIFF;
  40514e:	2001      	movs	r0, #1
}
  405150:	bd38      	pop	{r3, r4, r5, pc}
  405152:	bf00      	nop
  405154:	00422399 	.word	0x00422399

00405158 <lv_init>:
    if(lv_initialized) {
  405158:	4b22      	ldr	r3, [pc, #136]	; (4051e4 <lv_init+0x8c>)
  40515a:	781b      	ldrb	r3, [r3, #0]
  40515c:	b103      	cbz	r3, 405160 <lv_init+0x8>
  40515e:	4770      	bx	lr
{
  405160:	b510      	push	{r4, lr}
  405162:	b084      	sub	sp, #16
    _lv_mem_init();
  405164:	4b20      	ldr	r3, [pc, #128]	; (4051e8 <lv_init+0x90>)
  405166:	4798      	blx	r3
    _lv_task_core_init();
  405168:	4b20      	ldr	r3, [pc, #128]	; (4051ec <lv_init+0x94>)
  40516a:	4798      	blx	r3
    _lv_fs_init();
  40516c:	4b20      	ldr	r3, [pc, #128]	; (4051f0 <lv_init+0x98>)
  40516e:	4798      	blx	r3
    _lv_anim_core_init();
  405170:	4b20      	ldr	r3, [pc, #128]	; (4051f4 <lv_init+0x9c>)
  405172:	4798      	blx	r3
    _lv_group_init();
  405174:	4b20      	ldr	r3, [pc, #128]	; (4051f8 <lv_init+0xa0>)
  405176:	4798      	blx	r3
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
  405178:	2110      	movs	r1, #16
  40517a:	4820      	ldr	r0, [pc, #128]	; (4051fc <lv_init+0xa4>)
  40517c:	4c20      	ldr	r4, [pc, #128]	; (405200 <lv_init+0xa8>)
  40517e:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
  405180:	f44f 71c4 	mov.w	r1, #392	; 0x188
  405184:	481f      	ldr	r0, [pc, #124]	; (405204 <lv_init+0xac>)
  405186:	47a0      	blx	r4
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
  405188:	2160      	movs	r1, #96	; 0x60
  40518a:	481f      	ldr	r0, [pc, #124]	; (405208 <lv_init+0xb0>)
  40518c:	47a0      	blx	r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40518e:	f04f 0000 	mov.w	r0, #0
  405192:	2316      	movs	r3, #22
  405194:	f363 00c7 	bfi	r0, r3, #3, #5
  405198:	2214      	movs	r2, #20
  40519a:	f362 200c 	bfi	r0, r2, #8, #5
  40519e:	f36f 304f 	bfc	r0, #13, #3
  4051a2:	f04f 0100 	mov.w	r1, #0
  4051a6:	220d      	movs	r2, #13
  4051a8:	f362 01c7 	bfi	r1, r2, #3, #5
  4051ac:	f363 210c 	bfi	r1, r3, #8, #5
  4051b0:	f36f 314f 	bfc	r1, #13, #3
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
  4051b4:	4b15      	ldr	r3, [pc, #84]	; (40520c <lv_init+0xb4>)
  4051b6:	9302      	str	r3, [sp, #8]
  4051b8:	9301      	str	r3, [sp, #4]
  4051ba:	9300      	str	r3, [sp, #0]
  4051bc:	2202      	movs	r2, #2
  4051be:	4c14      	ldr	r4, [pc, #80]	; (405210 <lv_init+0xb8>)
  4051c0:	47a0      	blx	r4
    lv_theme_set_act(th);
  4051c2:	4b14      	ldr	r3, [pc, #80]	; (405214 <lv_init+0xbc>)
  4051c4:	4798      	blx	r3
    _lv_refr_init();
  4051c6:	4b14      	ldr	r3, [pc, #80]	; (405218 <lv_init+0xc0>)
  4051c8:	4798      	blx	r3
    _lv_indev_init();
  4051ca:	4b14      	ldr	r3, [pc, #80]	; (40521c <lv_init+0xc4>)
  4051cc:	4798      	blx	r3
    _lv_img_decoder_init();
  4051ce:	4b14      	ldr	r3, [pc, #80]	; (405220 <lv_init+0xc8>)
  4051d0:	4798      	blx	r3
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
  4051d2:	2001      	movs	r0, #1
  4051d4:	4b13      	ldr	r3, [pc, #76]	; (405224 <lv_init+0xcc>)
  4051d6:	4798      	blx	r3
    lv_initialized = true;
  4051d8:	2201      	movs	r2, #1
  4051da:	4b02      	ldr	r3, [pc, #8]	; (4051e4 <lv_init+0x8c>)
  4051dc:	701a      	strb	r2, [r3, #0]
}
  4051de:	b004      	add	sp, #16
  4051e0:	bd10      	pop	{r4, pc}
  4051e2:	bf00      	nop
  4051e4:	2040c39c 	.word	0x2040c39c
  4051e8:	00415e9d 	.word	0x00415e9d
  4051ec:	004168b1 	.word	0x004168b1
  4051f0:	00415849 	.word	0x00415849
  4051f4:	00414c79 	.word	0x00414c79
  4051f8:	00403379 	.word	0x00403379
  4051fc:	2043a25c 	.word	0x2043a25c
  405200:	00415a1f 	.word	0x00415a1f
  405204:	2043a1b8 	.word	0x2043a1b8
  405208:	2043a1ac 	.word	0x2043a1ac
  40520c:	2040002c 	.word	0x2040002c
  405210:	0041c859 	.word	0x0041c859
  405214:	00417221 	.word	0x00417221
  405218:	00409159 	.word	0x00409159
  40521c:	00404879 	.word	0x00404879
  405220:	004133ed 	.word	0x004133ed
  405224:	004129dd 	.word	0x004129dd

00405228 <lv_obj_set_adv_hittest>:
{
  405228:	b538      	push	{r3, r4, r5, lr}
  40522a:	4604      	mov	r4, r0
  40522c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40522e:	4b0a      	ldr	r3, [pc, #40]	; (405258 <lv_obj_set_adv_hittest+0x30>)
  405230:	4798      	blx	r3
  405232:	b140      	cbz	r0, 405246 <lv_obj_set_adv_hittest+0x1e>
    obj->adv_hittest = en == false ? 0 : 1;
  405234:	b96d      	cbnz	r5, 405252 <lv_obj_set_adv_hittest+0x2a>
  405236:	2200      	movs	r2, #0
  405238:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40523c:	f362 13c7 	bfi	r3, r2, #7, #1
  405240:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  405244:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405246:	4622      	mov	r2, r4
  405248:	2300      	movs	r3, #0
  40524a:	4804      	ldr	r0, [pc, #16]	; (40525c <lv_obj_set_adv_hittest+0x34>)
  40524c:	4904      	ldr	r1, [pc, #16]	; (405260 <lv_obj_set_adv_hittest+0x38>)
  40524e:	4788      	blx	r1
  405250:	e7fe      	b.n	405250 <lv_obj_set_adv_hittest+0x28>
    obj->adv_hittest = en == false ? 0 : 1;
  405252:	2201      	movs	r2, #1
  405254:	e7f0      	b.n	405238 <lv_obj_set_adv_hittest+0x10>
  405256:	bf00      	nop
  405258:	004157b9 	.word	0x004157b9
  40525c:	004260c4 	.word	0x004260c4
  405260:	004157c5 	.word	0x004157c5

00405264 <lv_obj_set_click>:
{
  405264:	b538      	push	{r3, r4, r5, lr}
  405266:	4604      	mov	r4, r0
  405268:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40526a:	4b08      	ldr	r3, [pc, #32]	; (40528c <lv_obj_set_click+0x28>)
  40526c:	4798      	blx	r3
  40526e:	b130      	cbz	r0, 40527e <lv_obj_set_click+0x1a>
    obj->click = (en == true ? 1 : 0);
  405270:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  405274:	f365 0300 	bfi	r3, r5, #0, #1
  405278:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  40527c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40527e:	4622      	mov	r2, r4
  405280:	2300      	movs	r3, #0
  405282:	4803      	ldr	r0, [pc, #12]	; (405290 <lv_obj_set_click+0x2c>)
  405284:	4903      	ldr	r1, [pc, #12]	; (405294 <lv_obj_set_click+0x30>)
  405286:	4788      	blx	r1
  405288:	e7fe      	b.n	405288 <lv_obj_set_click+0x24>
  40528a:	bf00      	nop
  40528c:	004157b9 	.word	0x004157b9
  405290:	004260c4 	.word	0x004260c4
  405294:	004157c5 	.word	0x004157c5

00405298 <lv_obj_add_protect>:
{
  405298:	b538      	push	{r3, r4, r5, lr}
  40529a:	4604      	mov	r4, r0
  40529c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40529e:	4b07      	ldr	r3, [pc, #28]	; (4052bc <lv_obj_add_protect+0x24>)
  4052a0:	4798      	blx	r3
  4052a2:	b128      	cbz	r0, 4052b0 <lv_obj_add_protect+0x18>
    obj->protect |= prot;
  4052a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  4052a8:	431d      	orrs	r5, r3
  4052aa:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  4052ae:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052b0:	4622      	mov	r2, r4
  4052b2:	2300      	movs	r3, #0
  4052b4:	4802      	ldr	r0, [pc, #8]	; (4052c0 <lv_obj_add_protect+0x28>)
  4052b6:	4903      	ldr	r1, [pc, #12]	; (4052c4 <lv_obj_add_protect+0x2c>)
  4052b8:	4788      	blx	r1
  4052ba:	e7fe      	b.n	4052ba <lv_obj_add_protect+0x22>
  4052bc:	004157b9 	.word	0x004157b9
  4052c0:	004260c4 	.word	0x004260c4
  4052c4:	004157c5 	.word	0x004157c5

004052c8 <lv_obj_clear_protect>:
{
  4052c8:	b538      	push	{r3, r4, r5, lr}
  4052ca:	4604      	mov	r4, r0
  4052cc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052ce:	4b08      	ldr	r3, [pc, #32]	; (4052f0 <lv_obj_clear_protect+0x28>)
  4052d0:	4798      	blx	r3
  4052d2:	b130      	cbz	r0, 4052e2 <lv_obj_clear_protect+0x1a>
    obj->protect &= prot;
  4052d4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  4052d8:	ea23 0305 	bic.w	r3, r3, r5
  4052dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  4052e0:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4052e2:	4622      	mov	r2, r4
  4052e4:	2300      	movs	r3, #0
  4052e6:	4803      	ldr	r0, [pc, #12]	; (4052f4 <lv_obj_clear_protect+0x2c>)
  4052e8:	4903      	ldr	r1, [pc, #12]	; (4052f8 <lv_obj_clear_protect+0x30>)
  4052ea:	4788      	blx	r1
  4052ec:	e7fe      	b.n	4052ec <lv_obj_clear_protect+0x24>
  4052ee:	bf00      	nop
  4052f0:	004157b9 	.word	0x004157b9
  4052f4:	004260c4 	.word	0x004260c4
  4052f8:	004157c5 	.word	0x004157c5

004052fc <lv_obj_set_event_cb>:
{
  4052fc:	b538      	push	{r3, r4, r5, lr}
  4052fe:	4604      	mov	r4, r0
  405300:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405302:	4b05      	ldr	r3, [pc, #20]	; (405318 <lv_obj_set_event_cb+0x1c>)
  405304:	4798      	blx	r3
  405306:	b108      	cbz	r0, 40530c <lv_obj_set_event_cb+0x10>
    obj->event_cb = event_cb;
  405308:	61a5      	str	r5, [r4, #24]
  40530a:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40530c:	4622      	mov	r2, r4
  40530e:	2300      	movs	r3, #0
  405310:	4802      	ldr	r0, [pc, #8]	; (40531c <lv_obj_set_event_cb+0x20>)
  405312:	4903      	ldr	r1, [pc, #12]	; (405320 <lv_obj_set_event_cb+0x24>)
  405314:	4788      	blx	r1
  405316:	e7fe      	b.n	405316 <lv_obj_set_event_cb+0x1a>
  405318:	004157b9 	.word	0x004157b9
  40531c:	004260c4 	.word	0x004260c4
  405320:	004157c5 	.word	0x004157c5

00405324 <lv_event_send_func>:
{
  405324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405328:	b084      	sub	sp, #16
  40532a:	4607      	mov	r7, r0
  40532c:	4615      	mov	r5, r2
  40532e:	461e      	mov	r6, r3
    if(obj != NULL) {
  405330:	460c      	mov	r4, r1
  405332:	b121      	cbz	r1, 40533e <lv_event_send_func+0x1a>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405334:	4608      	mov	r0, r1
  405336:	4b24      	ldr	r3, [pc, #144]	; (4053c8 <lv_event_send_func+0xa4>)
  405338:	4798      	blx	r3
  40533a:	2800      	cmp	r0, #0
  40533c:	d034      	beq.n	4053a8 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
  40533e:	9401      	str	r4, [sp, #4]
    event_temp_data.deleted = false;
  405340:	2300      	movs	r3, #0
  405342:	f88d 3008 	strb.w	r3, [sp, #8]
    event_temp_data.prev    = NULL;
  405346:	9303      	str	r3, [sp, #12]
    if(event_temp_data_head) {
  405348:	4b20      	ldr	r3, [pc, #128]	; (4053cc <lv_event_send_func+0xa8>)
  40534a:	681b      	ldr	r3, [r3, #0]
  40534c:	b103      	cbz	r3, 405350 <lv_event_send_func+0x2c>
        event_temp_data.prev = event_temp_data_head;
  40534e:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
  405350:	aa01      	add	r2, sp, #4
  405352:	4b1e      	ldr	r3, [pc, #120]	; (4053cc <lv_event_send_func+0xa8>)
  405354:	601a      	str	r2, [r3, #0]
    const void * event_act_data_save = event_act_data;
  405356:	4b1e      	ldr	r3, [pc, #120]	; (4053d0 <lv_event_send_func+0xac>)
  405358:	f8d3 8000 	ldr.w	r8, [r3]
    event_act_data                   = data;
  40535c:	601e      	str	r6, [r3, #0]
    lv_indev_t * indev_act = lv_indev_get_act();
  40535e:	4b1d      	ldr	r3, [pc, #116]	; (4053d4 <lv_event_send_func+0xb0>)
  405360:	4798      	blx	r3
    if(indev_act) {
  405362:	b118      	cbz	r0, 40536c <lv_event_send_func+0x48>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
  405364:	6883      	ldr	r3, [r0, #8]
  405366:	b10b      	cbz	r3, 40536c <lv_event_send_func+0x48>
  405368:	4629      	mov	r1, r5
  40536a:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
  40536c:	b117      	cbz	r7, 405374 <lv_event_send_func+0x50>
  40536e:	4629      	mov	r1, r5
  405370:	4620      	mov	r0, r4
  405372:	47b8      	blx	r7
    event_act_data = event_act_data_save;
  405374:	4b16      	ldr	r3, [pc, #88]	; (4053d0 <lv_event_send_func+0xac>)
  405376:	f8c3 8000 	str.w	r8, [r3]
    event_temp_data_head = event_temp_data_head->prev;
  40537a:	4b14      	ldr	r3, [pc, #80]	; (4053cc <lv_event_send_func+0xa8>)
  40537c:	681a      	ldr	r2, [r3, #0]
  40537e:	6892      	ldr	r2, [r2, #8]
  405380:	601a      	str	r2, [r3, #0]
    if(event_temp_data.deleted) {
  405382:	f89d 3008 	ldrb.w	r3, [sp, #8]
  405386:	b9ab      	cbnz	r3, 4053b4 <lv_event_send_func+0x90>
    if(obj) {
  405388:	b1c4      	cbz	r4, 4053bc <lv_event_send_func+0x98>
        if(obj->parent_event && obj->parent) {
  40538a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40538e:	f013 0f40 	tst.w	r3, #64	; 0x40
  405392:	d015      	beq.n	4053c0 <lv_event_send_func+0x9c>
  405394:	6820      	ldr	r0, [r4, #0]
  405396:	b1a8      	cbz	r0, 4053c4 <lv_event_send_func+0xa0>
            lv_res_t res = lv_event_send(obj->parent, event, data);
  405398:	4632      	mov	r2, r6
  40539a:	4629      	mov	r1, r5
  40539c:	4b0e      	ldr	r3, [pc, #56]	; (4053d8 <lv_event_send_func+0xb4>)
  40539e:	4798      	blx	r3
            if(res != LV_RES_OK) {
  4053a0:	2801      	cmp	r0, #1
  4053a2:	d008      	beq.n	4053b6 <lv_event_send_func+0x92>
                return LV_RES_INV;
  4053a4:	2000      	movs	r0, #0
  4053a6:	e006      	b.n	4053b6 <lv_event_send_func+0x92>
        LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053a8:	4622      	mov	r2, r4
  4053aa:	2300      	movs	r3, #0
  4053ac:	480b      	ldr	r0, [pc, #44]	; (4053dc <lv_event_send_func+0xb8>)
  4053ae:	490c      	ldr	r1, [pc, #48]	; (4053e0 <lv_event_send_func+0xbc>)
  4053b0:	4788      	blx	r1
  4053b2:	e7fe      	b.n	4053b2 <lv_event_send_func+0x8e>
        return LV_RES_INV;
  4053b4:	2000      	movs	r0, #0
}
  4053b6:	b004      	add	sp, #16
  4053b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return LV_RES_OK;
  4053bc:	2001      	movs	r0, #1
  4053be:	e7fa      	b.n	4053b6 <lv_event_send_func+0x92>
  4053c0:	2001      	movs	r0, #1
  4053c2:	e7f8      	b.n	4053b6 <lv_event_send_func+0x92>
  4053c4:	2001      	movs	r0, #1
  4053c6:	e7f6      	b.n	4053b6 <lv_event_send_func+0x92>
  4053c8:	004157b9 	.word	0x004157b9
  4053cc:	2040c398 	.word	0x2040c398
  4053d0:	2040c394 	.word	0x2040c394
  4053d4:	004047f1 	.word	0x004047f1
  4053d8:	004053e5 	.word	0x004053e5
  4053dc:	004260c4 	.word	0x004260c4
  4053e0:	004157c5 	.word	0x004157c5

004053e4 <lv_event_send>:
    if(obj == NULL) return LV_RES_OK;
  4053e4:	b198      	cbz	r0, 40540e <lv_event_send+0x2a>
{
  4053e6:	b570      	push	{r4, r5, r6, lr}
  4053e8:	4604      	mov	r4, r0
  4053ea:	4616      	mov	r6, r2
  4053ec:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4053ee:	4b09      	ldr	r3, [pc, #36]	; (405414 <lv_event_send+0x30>)
  4053f0:	4798      	blx	r3
  4053f2:	b928      	cbnz	r0, 405400 <lv_event_send+0x1c>
  4053f4:	4622      	mov	r2, r4
  4053f6:	2300      	movs	r3, #0
  4053f8:	4807      	ldr	r0, [pc, #28]	; (405418 <lv_event_send+0x34>)
  4053fa:	4908      	ldr	r1, [pc, #32]	; (40541c <lv_event_send+0x38>)
  4053fc:	4788      	blx	r1
  4053fe:	e7fe      	b.n	4053fe <lv_event_send+0x1a>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
  405400:	4633      	mov	r3, r6
  405402:	462a      	mov	r2, r5
  405404:	4621      	mov	r1, r4
  405406:	69a0      	ldr	r0, [r4, #24]
  405408:	4c05      	ldr	r4, [pc, #20]	; (405420 <lv_event_send+0x3c>)
  40540a:	47a0      	blx	r4
    return res;
  40540c:	bd70      	pop	{r4, r5, r6, pc}
    if(obj == NULL) return LV_RES_OK;
  40540e:	2001      	movs	r0, #1
  405410:	4770      	bx	lr
  405412:	bf00      	nop
  405414:	004157b9 	.word	0x004157b9
  405418:	004260c4 	.word	0x004260c4
  40541c:	004157c5 	.word	0x004157c5
  405420:	00405325 	.word	0x00405325

00405424 <lv_obj_set_signal_cb>:
{
  405424:	b538      	push	{r3, r4, r5, lr}
  405426:	4604      	mov	r4, r0
  405428:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40542a:	4b05      	ldr	r3, [pc, #20]	; (405440 <lv_obj_set_signal_cb+0x1c>)
  40542c:	4798      	blx	r3
  40542e:	b108      	cbz	r0, 405434 <lv_obj_set_signal_cb+0x10>
    obj->signal_cb = signal_cb;
  405430:	61e5      	str	r5, [r4, #28]
  405432:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405434:	4622      	mov	r2, r4
  405436:	2300      	movs	r3, #0
  405438:	4802      	ldr	r0, [pc, #8]	; (405444 <lv_obj_set_signal_cb+0x20>)
  40543a:	4903      	ldr	r1, [pc, #12]	; (405448 <lv_obj_set_signal_cb+0x24>)
  40543c:	4788      	blx	r1
  40543e:	e7fe      	b.n	40543e <lv_obj_set_signal_cb+0x1a>
  405440:	004157b9 	.word	0x004157b9
  405444:	004260c4 	.word	0x004260c4
  405448:	004157c5 	.word	0x004157c5

0040544c <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
  40544c:	b120      	cbz	r0, 405458 <lv_signal_send+0xc>
{
  40544e:	b510      	push	{r4, lr}
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
  405450:	69c4      	ldr	r4, [r0, #28]
  405452:	b11c      	cbz	r4, 40545c <lv_signal_send+0x10>
  405454:	47a0      	blx	r4
  405456:	bd10      	pop	{r4, pc}
    if(obj == NULL) return LV_RES_OK;
  405458:	2001      	movs	r0, #1
  40545a:	4770      	bx	lr
    lv_res_t res = LV_RES_OK;
  40545c:	2001      	movs	r0, #1
}
  40545e:	bd10      	pop	{r4, pc}

00405460 <lv_obj_set_design_cb>:
{
  405460:	b538      	push	{r3, r4, r5, lr}
  405462:	4604      	mov	r4, r0
  405464:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405466:	4b05      	ldr	r3, [pc, #20]	; (40547c <lv_obj_set_design_cb+0x1c>)
  405468:	4798      	blx	r3
  40546a:	b108      	cbz	r0, 405470 <lv_obj_set_design_cb+0x10>
    obj->design_cb = design_cb;
  40546c:	6225      	str	r5, [r4, #32]
  40546e:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405470:	4622      	mov	r2, r4
  405472:	2300      	movs	r3, #0
  405474:	4802      	ldr	r0, [pc, #8]	; (405480 <lv_obj_set_design_cb+0x20>)
  405476:	4903      	ldr	r1, [pc, #12]	; (405484 <lv_obj_set_design_cb+0x24>)
  405478:	4788      	blx	r1
  40547a:	e7fe      	b.n	40547a <lv_obj_set_design_cb+0x1a>
  40547c:	004157b9 	.word	0x004157b9
  405480:	004260c4 	.word	0x004260c4
  405484:	004157c5 	.word	0x004157c5

00405488 <lv_obj_allocate_ext_attr>:
{
  405488:	b538      	push	{r3, r4, r5, lr}
  40548a:	4604      	mov	r4, r0
  40548c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40548e:	4b09      	ldr	r3, [pc, #36]	; (4054b4 <lv_obj_allocate_ext_attr+0x2c>)
  405490:	4798      	blx	r3
  405492:	b928      	cbnz	r0, 4054a0 <lv_obj_allocate_ext_attr+0x18>
  405494:	4622      	mov	r2, r4
  405496:	2300      	movs	r3, #0
  405498:	4807      	ldr	r0, [pc, #28]	; (4054b8 <lv_obj_allocate_ext_attr+0x30>)
  40549a:	4908      	ldr	r1, [pc, #32]	; (4054bc <lv_obj_allocate_ext_attr+0x34>)
  40549c:	4788      	blx	r1
  40549e:	e7fe      	b.n	40549e <lv_obj_allocate_ext_attr+0x16>
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
  4054a0:	4629      	mov	r1, r5
  4054a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
  4054a4:	4b06      	ldr	r3, [pc, #24]	; (4054c0 <lv_obj_allocate_ext_attr+0x38>)
  4054a6:	4798      	blx	r3
    if(new_ext == NULL) return NULL;
  4054a8:	4603      	mov	r3, r0
  4054aa:	b100      	cbz	r0, 4054ae <lv_obj_allocate_ext_attr+0x26>
    obj->ext_attr = new_ext;
  4054ac:	6260      	str	r0, [r4, #36]	; 0x24
}
  4054ae:	4618      	mov	r0, r3
  4054b0:	bd38      	pop	{r3, r4, r5, pc}
  4054b2:	bf00      	nop
  4054b4:	004157b9 	.word	0x004157b9
  4054b8:	004260c4 	.word	0x004260c4
  4054bc:	004157c5 	.word	0x004157c5
  4054c0:	004161f1 	.word	0x004161f1

004054c4 <lv_obj_refresh_ext_draw_pad>:
{
  4054c4:	b510      	push	{r4, lr}
  4054c6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054c8:	4b07      	ldr	r3, [pc, #28]	; (4054e8 <lv_obj_refresh_ext_draw_pad+0x24>)
  4054ca:	4798      	blx	r3
  4054cc:	b928      	cbnz	r0, 4054da <lv_obj_refresh_ext_draw_pad+0x16>
  4054ce:	4622      	mov	r2, r4
  4054d0:	2300      	movs	r3, #0
  4054d2:	4806      	ldr	r0, [pc, #24]	; (4054ec <lv_obj_refresh_ext_draw_pad+0x28>)
  4054d4:	4906      	ldr	r1, [pc, #24]	; (4054f0 <lv_obj_refresh_ext_draw_pad+0x2c>)
  4054d6:	4788      	blx	r1
  4054d8:	e7fe      	b.n	4054d8 <lv_obj_refresh_ext_draw_pad+0x14>
    obj->ext_draw_pad = 0;
  4054da:	2200      	movs	r2, #0
  4054dc:	8662      	strh	r2, [r4, #50]	; 0x32
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
  4054de:	69e3      	ldr	r3, [r4, #28]
  4054e0:	2106      	movs	r1, #6
  4054e2:	4620      	mov	r0, r4
  4054e4:	4798      	blx	r3
  4054e6:	bd10      	pop	{r4, pc}
  4054e8:	004157b9 	.word	0x004157b9
  4054ec:	004260c4 	.word	0x004260c4
  4054f0:	004157c5 	.word	0x004157c5

004054f4 <lv_obj_get_parent>:
{
  4054f4:	b510      	push	{r4, lr}
  4054f6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4054f8:	4b05      	ldr	r3, [pc, #20]	; (405510 <lv_obj_get_parent+0x1c>)
  4054fa:	4798      	blx	r3
  4054fc:	b108      	cbz	r0, 405502 <lv_obj_get_parent+0xe>
}
  4054fe:	6820      	ldr	r0, [r4, #0]
  405500:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405502:	4622      	mov	r2, r4
  405504:	2300      	movs	r3, #0
  405506:	4803      	ldr	r0, [pc, #12]	; (405514 <lv_obj_get_parent+0x20>)
  405508:	4903      	ldr	r1, [pc, #12]	; (405518 <lv_obj_get_parent+0x24>)
  40550a:	4788      	blx	r1
  40550c:	e7fe      	b.n	40550c <lv_obj_get_parent+0x18>
  40550e:	bf00      	nop
  405510:	004157b9 	.word	0x004157b9
  405514:	004260c4 	.word	0x004260c4
  405518:	004157c5 	.word	0x004157c5

0040551c <lv_obj_get_screen>:
{
  40551c:	b510      	push	{r4, lr}
  40551e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405520:	4b08      	ldr	r3, [pc, #32]	; (405544 <lv_obj_get_screen+0x28>)
  405522:	4798      	blx	r3
  405524:	b930      	cbnz	r0, 405534 <lv_obj_get_screen+0x18>
  405526:	4622      	mov	r2, r4
  405528:	2300      	movs	r3, #0
  40552a:	4807      	ldr	r0, [pc, #28]	; (405548 <lv_obj_get_screen+0x2c>)
  40552c:	4907      	ldr	r1, [pc, #28]	; (40554c <lv_obj_get_screen+0x30>)
  40552e:	4788      	blx	r1
  405530:	e7fe      	b.n	405530 <lv_obj_get_screen+0x14>
        par   = lv_obj_get_parent(act_p);
  405532:	461c      	mov	r4, r3
  405534:	4620      	mov	r0, r4
  405536:	4b06      	ldr	r3, [pc, #24]	; (405550 <lv_obj_get_screen+0x34>)
  405538:	4798      	blx	r3
    } while(par != NULL);
  40553a:	4603      	mov	r3, r0
  40553c:	2800      	cmp	r0, #0
  40553e:	d1f8      	bne.n	405532 <lv_obj_get_screen+0x16>
}
  405540:	4620      	mov	r0, r4
  405542:	bd10      	pop	{r4, pc}
  405544:	004157b9 	.word	0x004157b9
  405548:	004260c4 	.word	0x004260c4
  40554c:	004157c5 	.word	0x004157c5
  405550:	004054f5 	.word	0x004054f5

00405554 <lv_obj_get_disp>:
{
  405554:	b570      	push	{r4, r5, r6, lr}
  405556:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405558:	4b14      	ldr	r3, [pc, #80]	; (4055ac <lv_obj_get_disp+0x58>)
  40555a:	4798      	blx	r3
  40555c:	b1b8      	cbz	r0, 40558e <lv_obj_get_disp+0x3a>
    if(obj->parent == NULL)
  40555e:	6823      	ldr	r3, [r4, #0]
  405560:	b11b      	cbz	r3, 40556a <lv_obj_get_disp+0x16>
        scr = lv_obj_get_screen(obj); /*get the screen of `obj`*/
  405562:	4620      	mov	r0, r4
  405564:	4b12      	ldr	r3, [pc, #72]	; (4055b0 <lv_obj_get_disp+0x5c>)
  405566:	4798      	blx	r3
  405568:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  40556a:	4812      	ldr	r0, [pc, #72]	; (4055b4 <lv_obj_get_disp+0x60>)
  40556c:	4b12      	ldr	r3, [pc, #72]	; (4055b8 <lv_obj_get_disp+0x64>)
  40556e:	4798      	blx	r3
  405570:	4605      	mov	r5, r0
  405572:	b1c5      	cbz	r5, 4055a6 <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405574:	f105 0638 	add.w	r6, r5, #56	; 0x38
  405578:	4630      	mov	r0, r6
  40557a:	4b0f      	ldr	r3, [pc, #60]	; (4055b8 <lv_obj_get_disp+0x64>)
  40557c:	4798      	blx	r3
  40557e:	b160      	cbz	r0, 40559a <lv_obj_get_disp+0x46>
            if(s == scr) return d;
  405580:	4284      	cmp	r4, r0
  405582:	d010      	beq.n	4055a6 <lv_obj_get_disp+0x52>
        _LV_LL_READ(d->scr_ll, s) {
  405584:	4601      	mov	r1, r0
  405586:	4630      	mov	r0, r6
  405588:	4b0c      	ldr	r3, [pc, #48]	; (4055bc <lv_obj_get_disp+0x68>)
  40558a:	4798      	blx	r3
  40558c:	e7f7      	b.n	40557e <lv_obj_get_disp+0x2a>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40558e:	4622      	mov	r2, r4
  405590:	2300      	movs	r3, #0
  405592:	480b      	ldr	r0, [pc, #44]	; (4055c0 <lv_obj_get_disp+0x6c>)
  405594:	490b      	ldr	r1, [pc, #44]	; (4055c4 <lv_obj_get_disp+0x70>)
  405596:	4788      	blx	r1
  405598:	e7fe      	b.n	405598 <lv_obj_get_disp+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
  40559a:	4629      	mov	r1, r5
  40559c:	4805      	ldr	r0, [pc, #20]	; (4055b4 <lv_obj_get_disp+0x60>)
  40559e:	4b07      	ldr	r3, [pc, #28]	; (4055bc <lv_obj_get_disp+0x68>)
  4055a0:	4798      	blx	r3
  4055a2:	4605      	mov	r5, r0
  4055a4:	e7e5      	b.n	405572 <lv_obj_get_disp+0x1e>
}
  4055a6:	4628      	mov	r0, r5
  4055a8:	bd70      	pop	{r4, r5, r6, pc}
  4055aa:	bf00      	nop
  4055ac:	004157b9 	.word	0x004157b9
  4055b0:	0040551d 	.word	0x0040551d
  4055b4:	2043a1b8 	.word	0x2043a1b8
  4055b8:	00415ac9 	.word	0x00415ac9
  4055bc:	00415add 	.word	0x00415add
  4055c0:	004260c4 	.word	0x004260c4
  4055c4:	004157c5 	.word	0x004157c5

004055c8 <lv_obj_get_child>:
{
  4055c8:	b538      	push	{r3, r4, r5, lr}
  4055ca:	4604      	mov	r4, r0
  4055cc:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055ce:	4b09      	ldr	r3, [pc, #36]	; (4055f4 <lv_obj_get_child+0x2c>)
  4055d0:	4798      	blx	r3
  4055d2:	b128      	cbz	r0, 4055e0 <lv_obj_get_child+0x18>
    if(child == NULL) {
  4055d4:	b155      	cbz	r5, 4055ec <lv_obj_get_child+0x24>
        result = _lv_ll_get_next(&obj->child_ll, child);
  4055d6:	4629      	mov	r1, r5
  4055d8:	1d20      	adds	r0, r4, #4
  4055da:	4b07      	ldr	r3, [pc, #28]	; (4055f8 <lv_obj_get_child+0x30>)
  4055dc:	4798      	blx	r3
}
  4055de:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4055e0:	4622      	mov	r2, r4
  4055e2:	2300      	movs	r3, #0
  4055e4:	4805      	ldr	r0, [pc, #20]	; (4055fc <lv_obj_get_child+0x34>)
  4055e6:	4906      	ldr	r1, [pc, #24]	; (405600 <lv_obj_get_child+0x38>)
  4055e8:	4788      	blx	r1
  4055ea:	e7fe      	b.n	4055ea <lv_obj_get_child+0x22>
        result = _lv_ll_get_head(&obj->child_ll);
  4055ec:	1d20      	adds	r0, r4, #4
  4055ee:	4b05      	ldr	r3, [pc, #20]	; (405604 <lv_obj_get_child+0x3c>)
  4055f0:	4798      	blx	r3
  4055f2:	bd38      	pop	{r3, r4, r5, pc}
  4055f4:	004157b9 	.word	0x004157b9
  4055f8:	00415add 	.word	0x00415add
  4055fc:	004260c4 	.word	0x004260c4
  405600:	004157c5 	.word	0x004157c5
  405604:	00415ac9 	.word	0x00415ac9

00405608 <lv_obj_get_coords>:
{
  405608:	b538      	push	{r3, r4, r5, lr}
  40560a:	4604      	mov	r4, r0
  40560c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40560e:	4b0b      	ldr	r3, [pc, #44]	; (40563c <lv_obj_get_coords+0x34>)
  405610:	4798      	blx	r3
  405612:	b120      	cbz	r0, 40561e <lv_obj_get_coords+0x16>
    lv_area_copy(cords_p, &obj->coords);
  405614:	f104 0310 	add.w	r3, r4, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  405618:	4629      	mov	r1, r5
  40561a:	2208      	movs	r2, #8
  40561c:	e00a      	b.n	405634 <lv_obj_get_coords+0x2c>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40561e:	4622      	mov	r2, r4
  405620:	2300      	movs	r3, #0
  405622:	4807      	ldr	r0, [pc, #28]	; (405640 <lv_obj_get_coords+0x38>)
  405624:	4907      	ldr	r1, [pc, #28]	; (405644 <lv_obj_get_coords+0x3c>)
  405626:	4788      	blx	r1
  405628:	e7fe      	b.n	405628 <lv_obj_get_coords+0x20>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40562a:	f813 0b01 	ldrb.w	r0, [r3], #1
  40562e:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  405632:	3a01      	subs	r2, #1
    while(len) {
  405634:	2a00      	cmp	r2, #0
  405636:	d1f8      	bne.n	40562a <lv_obj_get_coords+0x22>
}
  405638:	bd38      	pop	{r3, r4, r5, pc}
  40563a:	bf00      	nop
  40563c:	004157b9 	.word	0x004157b9
  405640:	004260c4 	.word	0x004260c4
  405644:	004157c5 	.word	0x004157c5

00405648 <lv_obj_get_x>:
{
  405648:	b510      	push	{r4, lr}
  40564a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40564c:	4b0a      	ldr	r3, [pc, #40]	; (405678 <lv_obj_get_x+0x30>)
  40564e:	4798      	blx	r3
  405650:	b928      	cbnz	r0, 40565e <lv_obj_get_x+0x16>
  405652:	4622      	mov	r2, r4
  405654:	2300      	movs	r3, #0
  405656:	4809      	ldr	r0, [pc, #36]	; (40567c <lv_obj_get_x+0x34>)
  405658:	4909      	ldr	r1, [pc, #36]	; (405680 <lv_obj_get_x+0x38>)
  40565a:	4788      	blx	r1
  40565c:	e7fe      	b.n	40565c <lv_obj_get_x+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  40565e:	4620      	mov	r0, r4
  405660:	4b08      	ldr	r3, [pc, #32]	; (405684 <lv_obj_get_x+0x3c>)
  405662:	4798      	blx	r3
    if(parent) {
  405664:	4603      	mov	r3, r0
  405666:	b120      	cbz	r0, 405672 <lv_obj_get_x+0x2a>
        rel_x             = obj->coords.x1 - parent->coords.x1;
  405668:	8a20      	ldrh	r0, [r4, #16]
  40566a:	8a1b      	ldrh	r3, [r3, #16]
  40566c:	1ac0      	subs	r0, r0, r3
  40566e:	b200      	sxth	r0, r0
  405670:	bd10      	pop	{r4, pc}
        rel_x = obj->coords.x1;
  405672:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
}
  405676:	bd10      	pop	{r4, pc}
  405678:	004157b9 	.word	0x004157b9
  40567c:	004260c4 	.word	0x004260c4
  405680:	004157c5 	.word	0x004157c5
  405684:	004054f5 	.word	0x004054f5

00405688 <lv_obj_get_y>:
{
  405688:	b510      	push	{r4, lr}
  40568a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40568c:	4b0a      	ldr	r3, [pc, #40]	; (4056b8 <lv_obj_get_y+0x30>)
  40568e:	4798      	blx	r3
  405690:	b928      	cbnz	r0, 40569e <lv_obj_get_y+0x16>
  405692:	4622      	mov	r2, r4
  405694:	2300      	movs	r3, #0
  405696:	4809      	ldr	r0, [pc, #36]	; (4056bc <lv_obj_get_y+0x34>)
  405698:	4909      	ldr	r1, [pc, #36]	; (4056c0 <lv_obj_get_y+0x38>)
  40569a:	4788      	blx	r1
  40569c:	e7fe      	b.n	40569c <lv_obj_get_y+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  40569e:	4620      	mov	r0, r4
  4056a0:	4b08      	ldr	r3, [pc, #32]	; (4056c4 <lv_obj_get_y+0x3c>)
  4056a2:	4798      	blx	r3
    if(parent) {
  4056a4:	4603      	mov	r3, r0
  4056a6:	b120      	cbz	r0, 4056b2 <lv_obj_get_y+0x2a>
        rel_y             = obj->coords.y1 - parent->coords.y1;
  4056a8:	8a60      	ldrh	r0, [r4, #18]
  4056aa:	8a5b      	ldrh	r3, [r3, #18]
  4056ac:	1ac0      	subs	r0, r0, r3
  4056ae:	b200      	sxth	r0, r0
  4056b0:	bd10      	pop	{r4, pc}
        rel_y = obj->coords.y1;
  4056b2:	f9b4 0012 	ldrsh.w	r0, [r4, #18]
}
  4056b6:	bd10      	pop	{r4, pc}
  4056b8:	004157b9 	.word	0x004157b9
  4056bc:	004260c4 	.word	0x004260c4
  4056c0:	004157c5 	.word	0x004157c5
  4056c4:	004054f5 	.word	0x004054f5

004056c8 <lv_obj_get_width>:
{
  4056c8:	b510      	push	{r4, lr}
  4056ca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056cc:	4b07      	ldr	r3, [pc, #28]	; (4056ec <lv_obj_get_width+0x24>)
  4056ce:	4798      	blx	r3
  4056d0:	b130      	cbz	r0, 4056e0 <lv_obj_get_width+0x18>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4056d2:	8aa0      	ldrh	r0, [r4, #20]
  4056d4:	8a23      	ldrh	r3, [r4, #16]
  4056d6:	1ac0      	subs	r0, r0, r3
  4056d8:	b280      	uxth	r0, r0
  4056da:	3001      	adds	r0, #1
}
  4056dc:	b200      	sxth	r0, r0
  4056de:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056e0:	4622      	mov	r2, r4
  4056e2:	2300      	movs	r3, #0
  4056e4:	4802      	ldr	r0, [pc, #8]	; (4056f0 <lv_obj_get_width+0x28>)
  4056e6:	4903      	ldr	r1, [pc, #12]	; (4056f4 <lv_obj_get_width+0x2c>)
  4056e8:	4788      	blx	r1
  4056ea:	e7fe      	b.n	4056ea <lv_obj_get_width+0x22>
  4056ec:	004157b9 	.word	0x004157b9
  4056f0:	004260c4 	.word	0x004260c4
  4056f4:	004157c5 	.word	0x004157c5

004056f8 <lv_obj_get_height>:
{
  4056f8:	b510      	push	{r4, lr}
  4056fa:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4056fc:	4b07      	ldr	r3, [pc, #28]	; (40571c <lv_obj_get_height+0x24>)
  4056fe:	4798      	blx	r3
  405700:	b130      	cbz	r0, 405710 <lv_obj_get_height+0x18>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  405702:	8ae0      	ldrh	r0, [r4, #22]
  405704:	8a63      	ldrh	r3, [r4, #18]
  405706:	1ac0      	subs	r0, r0, r3
  405708:	b280      	uxth	r0, r0
  40570a:	3001      	adds	r0, #1
}
  40570c:	b200      	sxth	r0, r0
  40570e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405710:	4622      	mov	r2, r4
  405712:	2300      	movs	r3, #0
  405714:	4802      	ldr	r0, [pc, #8]	; (405720 <lv_obj_get_height+0x28>)
  405716:	4903      	ldr	r1, [pc, #12]	; (405724 <lv_obj_get_height+0x2c>)
  405718:	4788      	blx	r1
  40571a:	e7fe      	b.n	40571a <lv_obj_get_height+0x22>
  40571c:	004157b9 	.word	0x004157b9
  405720:	004260c4 	.word	0x004260c4
  405724:	004157c5 	.word	0x004157c5

00405728 <lv_obj_get_auto_realign>:
{
  405728:	b510      	push	{r4, lr}
  40572a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40572c:	4b06      	ldr	r3, [pc, #24]	; (405748 <lv_obj_get_auto_realign+0x20>)
  40572e:	4798      	blx	r3
  405730:	b120      	cbz	r0, 40573c <lv_obj_get_auto_realign+0x14>
    return obj->realign.auto_realign ? true : false;
  405732:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
}
  405736:	f000 0001 	and.w	r0, r0, #1
  40573a:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40573c:	4622      	mov	r2, r4
  40573e:	2300      	movs	r3, #0
  405740:	4802      	ldr	r0, [pc, #8]	; (40574c <lv_obj_get_auto_realign+0x24>)
  405742:	4903      	ldr	r1, [pc, #12]	; (405750 <lv_obj_get_auto_realign+0x28>)
  405744:	4788      	blx	r1
  405746:	e7fe      	b.n	405746 <lv_obj_get_auto_realign+0x1e>
  405748:	004157b9 	.word	0x004157b9
  40574c:	004260c4 	.word	0x004260c4
  405750:	004157c5 	.word	0x004157c5

00405754 <lv_obj_get_style_list>:
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
  405754:	b909      	cbnz	r1, 40575a <lv_obj_get_style_list+0x6>
  405756:	3028      	adds	r0, #40	; 0x28
  405758:	4770      	bx	lr
{
  40575a:	b500      	push	{lr}
  40575c:	b083      	sub	sp, #12
    info.part = part;
  40575e:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
  405762:	2300      	movs	r3, #0
  405764:	9301      	str	r3, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
  405766:	466a      	mov	r2, sp
  405768:	2108      	movs	r1, #8
  40576a:	4b05      	ldr	r3, [pc, #20]	; (405780 <lv_obj_get_style_list+0x2c>)
  40576c:	4798      	blx	r3
    if(res != LV_RES_OK) return NULL;
  40576e:	2801      	cmp	r0, #1
  405770:	d103      	bne.n	40577a <lv_obj_get_style_list+0x26>
    return info.result;
  405772:	9801      	ldr	r0, [sp, #4]
}
  405774:	b003      	add	sp, #12
  405776:	f85d fb04 	ldr.w	pc, [sp], #4
    if(res != LV_RES_OK) return NULL;
  40577a:	2000      	movs	r0, #0
  40577c:	e7fa      	b.n	405774 <lv_obj_get_style_list+0x20>
  40577e:	bf00      	nop
  405780:	0040544d 	.word	0x0040544d

00405784 <trans_del>:
{
  405784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405788:	4607      	mov	r7, r0
  40578a:	4688      	mov	r8, r1
  40578c:	4691      	mov	r9, r2
  40578e:	461e      	mov	r6, r3
    tr = _lv_ll_get_tail(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  405790:	4819      	ldr	r0, [pc, #100]	; (4057f8 <trans_del+0x74>)
  405792:	4b1a      	ldr	r3, [pc, #104]	; (4057fc <trans_del+0x78>)
  405794:	4798      	blx	r3
  405796:	4604      	mov	r4, r0
    while(tr != NULL) {
  405798:	e006      	b.n	4057a8 <trans_del+0x24>
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  40579a:	88a3      	ldrh	r3, [r4, #4]
  40579c:	454b      	cmp	r3, r9
  40579e:	d015      	beq.n	4057cc <trans_del+0x48>
  4057a0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
  4057a4:	d012      	beq.n	4057cc <trans_del+0x48>
{
  4057a6:	462c      	mov	r4, r5
    while(tr != NULL) {
  4057a8:	b31c      	cbz	r4, 4057f2 <trans_del+0x6e>
        if(tr == tr_limit) break;
  4057aa:	42b4      	cmp	r4, r6
  4057ac:	d021      	beq.n	4057f2 <trans_del+0x6e>
        tr_prev = _lv_ll_get_prev(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4057ae:	4621      	mov	r1, r4
  4057b0:	4811      	ldr	r0, [pc, #68]	; (4057f8 <trans_del+0x74>)
  4057b2:	4b13      	ldr	r3, [pc, #76]	; (405800 <trans_del+0x7c>)
  4057b4:	4798      	blx	r3
  4057b6:	4605      	mov	r5, r0
        if(tr->obj == obj && (part == tr->part || part == 0xFF) && (prop == tr->prop || prop == 0xFF)) {
  4057b8:	6820      	ldr	r0, [r4, #0]
  4057ba:	42b8      	cmp	r0, r7
  4057bc:	d1f3      	bne.n	4057a6 <trans_del+0x22>
  4057be:	79a1      	ldrb	r1, [r4, #6]
  4057c0:	4541      	cmp	r1, r8
  4057c2:	d0ea      	beq.n	40579a <trans_del+0x16>
  4057c4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  4057c8:	d1ed      	bne.n	4057a6 <trans_del+0x22>
  4057ca:	e7e6      	b.n	40579a <trans_del+0x16>
            lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  4057cc:	4b0d      	ldr	r3, [pc, #52]	; (405804 <trans_del+0x80>)
  4057ce:	4798      	blx	r3
            lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  4057d0:	4b0d      	ldr	r3, [pc, #52]	; (405808 <trans_del+0x84>)
  4057d2:	4798      	blx	r3
            lv_style_remove_prop(style_trans, tr->prop);
  4057d4:	88a1      	ldrh	r1, [r4, #4]
  4057d6:	4b0d      	ldr	r3, [pc, #52]	; (40580c <trans_del+0x88>)
  4057d8:	4798      	blx	r3
            lv_anim_del(tr, NULL);
  4057da:	2100      	movs	r1, #0
  4057dc:	4620      	mov	r0, r4
  4057de:	4b0c      	ldr	r3, [pc, #48]	; (405810 <trans_del+0x8c>)
  4057e0:	4798      	blx	r3
            _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4057e2:	4621      	mov	r1, r4
  4057e4:	4804      	ldr	r0, [pc, #16]	; (4057f8 <trans_del+0x74>)
  4057e6:	4b0b      	ldr	r3, [pc, #44]	; (405814 <trans_del+0x90>)
  4057e8:	4798      	blx	r3
            lv_mem_free(tr);
  4057ea:	4620      	mov	r0, r4
  4057ec:	4b0a      	ldr	r3, [pc, #40]	; (405818 <trans_del+0x94>)
  4057ee:	4798      	blx	r3
  4057f0:	e7d9      	b.n	4057a6 <trans_del+0x22>
  4057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4057f6:	bf00      	nop
  4057f8:	2043a25c 	.word	0x2043a25c
  4057fc:	00415ad3 	.word	0x00415ad3
  405800:	00415aeb 	.word	0x00415aeb
  405804:	00405755 	.word	0x00405755
  405808:	0040a6f5 	.word	0x0040a6f5
  40580c:	00409b51 	.word	0x00409b51
  405810:	00414d19 	.word	0x00414d19
  405814:	00415b85 	.word	0x00415b85
  405818:	00415f85 	.word	0x00415f85

0040581c <lv_obj_clean_style_list>:
{
  40581c:	b538      	push	{r3, r4, r5, lr}
  40581e:	4604      	mov	r4, r0
  405820:	460d      	mov	r5, r1
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  405822:	4b06      	ldr	r3, [pc, #24]	; (40583c <lv_obj_clean_style_list+0x20>)
  405824:	4798      	blx	r3
    if(style_dsc == NULL) {
  405826:	b138      	cbz	r0, 405838 <lv_obj_clean_style_list+0x1c>
    _lv_style_list_reset(style_dsc);
  405828:	4b05      	ldr	r3, [pc, #20]	; (405840 <lv_obj_clean_style_list+0x24>)
  40582a:	4798      	blx	r3
    trans_del(obj, part, 0xFF, NULL);
  40582c:	2300      	movs	r3, #0
  40582e:	22ff      	movs	r2, #255	; 0xff
  405830:	4629      	mov	r1, r5
  405832:	4620      	mov	r0, r4
  405834:	4c03      	ldr	r4, [pc, #12]	; (405844 <lv_obj_clean_style_list+0x28>)
  405836:	47a0      	blx	r4
  405838:	bd38      	pop	{r3, r4, r5, pc}
  40583a:	bf00      	nop
  40583c:	00405755 	.word	0x00405755
  405840:	0040a709 	.word	0x0040a709
  405844:	00405785 	.word	0x00405785

00405848 <_lv_obj_disable_style_caching>:
{
  405848:	b570      	push	{r4, r5, r6, lr}
  40584a:	4605      	mov	r5, r0
  40584c:	460e      	mov	r6, r1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40584e:	2400      	movs	r4, #0
  405850:	2c3f      	cmp	r4, #63	; 0x3f
  405852:	d80b      	bhi.n	40586c <_lv_obj_disable_style_caching+0x24>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405854:	4621      	mov	r1, r4
  405856:	4628      	mov	r0, r5
  405858:	4b0c      	ldr	r3, [pc, #48]	; (40588c <_lv_obj_disable_style_caching+0x44>)
  40585a:	4798      	blx	r3
        if(list == NULL) break;
  40585c:	b130      	cbz	r0, 40586c <_lv_obj_disable_style_caching+0x24>
        list->ignore_cache = dis;
  40585e:	7942      	ldrb	r2, [r0, #5]
  405860:	f366 02c3 	bfi	r2, r6, #3, #1
  405864:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  405866:	3401      	adds	r4, #1
  405868:	b2e4      	uxtb	r4, r4
  40586a:	e7f1      	b.n	405850 <_lv_obj_disable_style_caching+0x8>
  40586c:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  40586e:	2cff      	cmp	r4, #255	; 0xff
  405870:	d00b      	beq.n	40588a <_lv_obj_disable_style_caching+0x42>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  405872:	4621      	mov	r1, r4
  405874:	4628      	mov	r0, r5
  405876:	4b05      	ldr	r3, [pc, #20]	; (40588c <_lv_obj_disable_style_caching+0x44>)
  405878:	4798      	blx	r3
        if(list == NULL) break;
  40587a:	b130      	cbz	r0, 40588a <_lv_obj_disable_style_caching+0x42>
        list->ignore_cache = dis;
  40587c:	7942      	ldrb	r2, [r0, #5]
  40587e:	f366 02c3 	bfi	r2, r6, #3, #1
  405882:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  405884:	3401      	adds	r4, #1
  405886:	b2e4      	uxtb	r4, r4
  405888:	e7f1      	b.n	40586e <_lv_obj_disable_style_caching+0x26>
  40588a:	bd70      	pop	{r4, r5, r6, pc}
  40588c:	00405755 	.word	0x00405755

00405890 <trans_anim_ready_cb>:
{
  405890:	b538      	push	{r3, r4, r5, lr}
    lv_style_trans_t * tr = a->var;
  405892:	6804      	ldr	r4, [r0, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  405894:	4816      	ldr	r0, [pc, #88]	; (4058f0 <trans_anim_ready_cb+0x60>)
  405896:	4b17      	ldr	r3, [pc, #92]	; (4058f4 <trans_anim_ready_cb+0x64>)
  405898:	4798      	blx	r3
    bool running = false;
  40589a:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_obj_style_trans_ll), tr_i) {
  40589c:	e003      	b.n	4058a6 <trans_anim_ready_cb+0x16>
  40589e:	4601      	mov	r1, r0
  4058a0:	4813      	ldr	r0, [pc, #76]	; (4058f0 <trans_anim_ready_cb+0x60>)
  4058a2:	4b15      	ldr	r3, [pc, #84]	; (4058f8 <trans_anim_ready_cb+0x68>)
  4058a4:	4798      	blx	r3
  4058a6:	b178      	cbz	r0, 4058c8 <trans_anim_ready_cb+0x38>
        if(tr_i != tr && tr_i->obj == tr->obj && tr_i->part == tr->part && tr_i->prop == tr->prop) {
  4058a8:	42a0      	cmp	r0, r4
  4058aa:	d0f8      	beq.n	40589e <trans_anim_ready_cb+0xe>
  4058ac:	6802      	ldr	r2, [r0, #0]
  4058ae:	6823      	ldr	r3, [r4, #0]
  4058b0:	429a      	cmp	r2, r3
  4058b2:	d1f4      	bne.n	40589e <trans_anim_ready_cb+0xe>
  4058b4:	6843      	ldr	r3, [r0, #4]
  4058b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  4058ba:	6863      	ldr	r3, [r4, #4]
  4058bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  4058c0:	429a      	cmp	r2, r3
  4058c2:	d1ec      	bne.n	40589e <trans_anim_ready_cb+0xe>
            running = true;
  4058c4:	2501      	movs	r5, #1
  4058c6:	e7ea      	b.n	40589e <trans_anim_ready_cb+0xe>
    if(!running) {
  4058c8:	b13d      	cbz	r5, 4058da <trans_anim_ready_cb+0x4a>
    _lv_ll_remove(&LV_GC_ROOT(_lv_obj_style_trans_ll), tr);
  4058ca:	4621      	mov	r1, r4
  4058cc:	4808      	ldr	r0, [pc, #32]	; (4058f0 <trans_anim_ready_cb+0x60>)
  4058ce:	4b0b      	ldr	r3, [pc, #44]	; (4058fc <trans_anim_ready_cb+0x6c>)
  4058d0:	4798      	blx	r3
    lv_mem_free(tr);
  4058d2:	4620      	mov	r0, r4
  4058d4:	4b0a      	ldr	r3, [pc, #40]	; (405900 <trans_anim_ready_cb+0x70>)
  4058d6:	4798      	blx	r3
  4058d8:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  4058da:	79a1      	ldrb	r1, [r4, #6]
  4058dc:	6820      	ldr	r0, [r4, #0]
  4058de:	4b09      	ldr	r3, [pc, #36]	; (405904 <trans_anim_ready_cb+0x74>)
  4058e0:	4798      	blx	r3
        lv_style_t * style_trans = _lv_style_list_get_transition_style(list);
  4058e2:	4b09      	ldr	r3, [pc, #36]	; (405908 <trans_anim_ready_cb+0x78>)
  4058e4:	4798      	blx	r3
        lv_style_remove_prop(style_trans, tr->prop);
  4058e6:	88a1      	ldrh	r1, [r4, #4]
  4058e8:	4b08      	ldr	r3, [pc, #32]	; (40590c <trans_anim_ready_cb+0x7c>)
  4058ea:	4798      	blx	r3
  4058ec:	e7ed      	b.n	4058ca <trans_anim_ready_cb+0x3a>
  4058ee:	bf00      	nop
  4058f0:	2043a25c 	.word	0x2043a25c
  4058f4:	00415ac9 	.word	0x00415ac9
  4058f8:	00415add 	.word	0x00415add
  4058fc:	00415b85 	.word	0x00415b85
  405900:	00415f85 	.word	0x00415f85
  405904:	00405755 	.word	0x00405755
  405908:	0040a6f5 	.word	0x0040a6f5
  40590c:	00409b51 	.word	0x00409b51

00405910 <lv_obj_get_hidden>:
{
  405910:	b510      	push	{r4, lr}
  405912:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405914:	4b06      	ldr	r3, [pc, #24]	; (405930 <lv_obj_get_hidden+0x20>)
  405916:	4798      	blx	r3
  405918:	b120      	cbz	r0, 405924 <lv_obj_get_hidden+0x14>
    return obj->hidden == 0 ? false : true;
  40591a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40591e:	f3c0 1000 	ubfx	r0, r0, #4, #1
  405922:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405924:	4622      	mov	r2, r4
  405926:	2300      	movs	r3, #0
  405928:	4802      	ldr	r0, [pc, #8]	; (405934 <lv_obj_get_hidden+0x24>)
  40592a:	4903      	ldr	r1, [pc, #12]	; (405938 <lv_obj_get_hidden+0x28>)
  40592c:	4788      	blx	r1
  40592e:	e7fe      	b.n	40592e <lv_obj_get_hidden+0x1e>
  405930:	004157b9 	.word	0x004157b9
  405934:	004260c4 	.word	0x004260c4
  405938:	004157c5 	.word	0x004157c5

0040593c <lv_obj_area_is_visible>:
{
  40593c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405940:	b082      	sub	sp, #8
  405942:	4604      	mov	r4, r0
  405944:	460d      	mov	r5, r1
    if(lv_obj_get_hidden(obj)) return false;
  405946:	4b34      	ldr	r3, [pc, #208]	; (405a18 <lv_obj_area_is_visible+0xdc>)
  405948:	4798      	blx	r3
  40594a:	b120      	cbz	r0, 405956 <lv_obj_area_is_visible+0x1a>
  40594c:	2600      	movs	r6, #0
}
  40594e:	4630      	mov	r0, r6
  405950:	b002      	add	sp, #8
  405952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405956:	4606      	mov	r6, r0
    lv_obj_t * obj_scr = lv_obj_get_screen(obj);
  405958:	4620      	mov	r0, r4
  40595a:	4b30      	ldr	r3, [pc, #192]	; (405a1c <lv_obj_area_is_visible+0xe0>)
  40595c:	4798      	blx	r3
  40595e:	4607      	mov	r7, r0
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
  405960:	4b2f      	ldr	r3, [pc, #188]	; (405a20 <lv_obj_area_is_visible+0xe4>)
  405962:	4798      	blx	r3
  405964:	4680      	mov	r8, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405966:	4b2f      	ldr	r3, [pc, #188]	; (405a24 <lv_obj_area_is_visible+0xe8>)
  405968:	4798      	blx	r3
  40596a:	4287      	cmp	r7, r0
  40596c:	d010      	beq.n	405990 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_scr_prev(disp) ||
  40596e:	4640      	mov	r0, r8
  405970:	4b2d      	ldr	r3, [pc, #180]	; (405a28 <lv_obj_area_is_visible+0xec>)
  405972:	4798      	blx	r3
    if(obj_scr == lv_disp_get_scr_act(disp) ||
  405974:	4287      	cmp	r7, r0
  405976:	d00b      	beq.n	405990 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_top(disp) ||
  405978:	4640      	mov	r0, r8
  40597a:	4b2c      	ldr	r3, [pc, #176]	; (405a2c <lv_obj_area_is_visible+0xf0>)
  40597c:	4798      	blx	r3
       obj_scr == lv_disp_get_scr_prev(disp) ||
  40597e:	4287      	cmp	r7, r0
  405980:	d006      	beq.n	405990 <lv_obj_area_is_visible+0x54>
       obj_scr == lv_disp_get_layer_sys(disp)) {
  405982:	4640      	mov	r0, r8
  405984:	4b2a      	ldr	r3, [pc, #168]	; (405a30 <lv_obj_area_is_visible+0xf4>)
  405986:	4798      	blx	r3
       obj_scr == lv_disp_get_layer_top(disp) ||
  405988:	4287      	cmp	r7, r0
  40598a:	d001      	beq.n	405990 <lv_obj_area_is_visible+0x54>
    return true;
  40598c:	2601      	movs	r6, #1
  40598e:	e7de      	b.n	40594e <lv_obj_area_is_visible+0x12>
        lv_coord_t ext_size = obj->ext_draw_pad;
  405990:	f9b4 7032 	ldrsh.w	r7, [r4, #50]	; 0x32
        lv_area_copy(&obj_coords, &obj->coords);
  405994:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405998:	466a      	mov	r2, sp
  40599a:	2308      	movs	r3, #8
  40599c:	e004      	b.n	4059a8 <lv_obj_area_is_visible+0x6c>
        *d8 = *s8;
  40599e:	f811 0b01 	ldrb.w	r0, [r1], #1
  4059a2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4059a6:	3b01      	subs	r3, #1
    while(len) {
  4059a8:	2b00      	cmp	r3, #0
  4059aa:	d1f8      	bne.n	40599e <lv_obj_area_is_visible+0x62>
        obj_coords.x1 -= ext_size;
  4059ac:	b2bb      	uxth	r3, r7
  4059ae:	f8bd 2000 	ldrh.w	r2, [sp]
  4059b2:	1ad2      	subs	r2, r2, r3
  4059b4:	f8ad 2000 	strh.w	r2, [sp]
        obj_coords.y1 -= ext_size;
  4059b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  4059bc:	1ad2      	subs	r2, r2, r3
  4059be:	f8ad 2002 	strh.w	r2, [sp, #2]
        obj_coords.x2 += ext_size;
  4059c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4059c6:	441a      	add	r2, r3
  4059c8:	f8ad 2004 	strh.w	r2, [sp, #4]
        obj_coords.y2 += ext_size;
  4059cc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  4059d0:	4413      	add	r3, r2
  4059d2:	f8ad 3006 	strh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
  4059d6:	466a      	mov	r2, sp
  4059d8:	4629      	mov	r1, r5
  4059da:	4628      	mov	r0, r5
  4059dc:	4b15      	ldr	r3, [pc, #84]	; (405a34 <lv_obj_area_is_visible+0xf8>)
  4059de:	4798      	blx	r3
        if(is_common == false) return false;  /*The area is not on the object*/
  4059e0:	4607      	mov	r7, r0
  4059e2:	2800      	cmp	r0, #0
  4059e4:	d0b3      	beq.n	40594e <lv_obj_area_is_visible+0x12>
        lv_obj_t * par = lv_obj_get_parent(obj);
  4059e6:	4620      	mov	r0, r4
  4059e8:	4b13      	ldr	r3, [pc, #76]	; (405a38 <lv_obj_area_is_visible+0xfc>)
  4059ea:	4798      	blx	r3
  4059ec:	4604      	mov	r4, r0
        while(par != NULL) {
  4059ee:	b18c      	cbz	r4, 405a14 <lv_obj_area_is_visible+0xd8>
            is_common = _lv_area_intersect(area, area, &par->coords);
  4059f0:	f104 0210 	add.w	r2, r4, #16
  4059f4:	4629      	mov	r1, r5
  4059f6:	4628      	mov	r0, r5
  4059f8:	4b0e      	ldr	r3, [pc, #56]	; (405a34 <lv_obj_area_is_visible+0xf8>)
  4059fa:	4798      	blx	r3
            if(is_common == false) return false;       /*If no common parts with parent break;*/
  4059fc:	2800      	cmp	r0, #0
  4059fe:	d0a6      	beq.n	40594e <lv_obj_area_is_visible+0x12>
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
  405a00:	4620      	mov	r0, r4
  405a02:	4b05      	ldr	r3, [pc, #20]	; (405a18 <lv_obj_area_is_visible+0xdc>)
  405a04:	4798      	blx	r3
  405a06:	2800      	cmp	r0, #0
  405a08:	d1a1      	bne.n	40594e <lv_obj_area_is_visible+0x12>
            par = lv_obj_get_parent(par);
  405a0a:	4620      	mov	r0, r4
  405a0c:	4b0a      	ldr	r3, [pc, #40]	; (405a38 <lv_obj_area_is_visible+0xfc>)
  405a0e:	4798      	blx	r3
  405a10:	4604      	mov	r4, r0
  405a12:	e7ec      	b.n	4059ee <lv_obj_area_is_visible+0xb2>
    return true;
  405a14:	463e      	mov	r6, r7
  405a16:	e79a      	b.n	40594e <lv_obj_area_is_visible+0x12>
  405a18:	00405911 	.word	0x00405911
  405a1c:	0040551d 	.word	0x0040551d
  405a20:	00405555 	.word	0x00405555
  405a24:	004031f9 	.word	0x004031f9
  405a28:	00403215 	.word	0x00403215
  405a2c:	00403231 	.word	0x00403231
  405a30:	0040324d 	.word	0x0040324d
  405a34:	00414ef3 	.word	0x00414ef3
  405a38:	004054f5 	.word	0x004054f5

00405a3c <lv_obj_invalidate_area>:
{
  405a3c:	b530      	push	{r4, r5, lr}
  405a3e:	b083      	sub	sp, #12
  405a40:	4605      	mov	r5, r0
  405a42:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405a44:	4b10      	ldr	r3, [pc, #64]	; (405a88 <lv_obj_invalidate_area+0x4c>)
  405a46:	4798      	blx	r3
  405a48:	b118      	cbz	r0, 405a52 <lv_obj_invalidate_area+0x16>
  405a4a:	4622      	mov	r2, r4
  405a4c:	4669      	mov	r1, sp
  405a4e:	2308      	movs	r3, #8
  405a50:	e00a      	b.n	405a68 <lv_obj_invalidate_area+0x2c>
  405a52:	462a      	mov	r2, r5
  405a54:	2300      	movs	r3, #0
  405a56:	480d      	ldr	r0, [pc, #52]	; (405a8c <lv_obj_invalidate_area+0x50>)
  405a58:	490d      	ldr	r1, [pc, #52]	; (405a90 <lv_obj_invalidate_area+0x54>)
  405a5a:	4788      	blx	r1
  405a5c:	e7fe      	b.n	405a5c <lv_obj_invalidate_area+0x20>
        *d8 = *s8;
  405a5e:	f812 0b01 	ldrb.w	r0, [r2], #1
  405a62:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  405a66:	3b01      	subs	r3, #1
    while(len) {
  405a68:	2b00      	cmp	r3, #0
  405a6a:	d1f8      	bne.n	405a5e <lv_obj_invalidate_area+0x22>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
  405a6c:	4669      	mov	r1, sp
  405a6e:	4628      	mov	r0, r5
  405a70:	4b08      	ldr	r3, [pc, #32]	; (405a94 <lv_obj_invalidate_area+0x58>)
  405a72:	4798      	blx	r3
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
  405a74:	b128      	cbz	r0, 405a82 <lv_obj_invalidate_area+0x46>
  405a76:	4628      	mov	r0, r5
  405a78:	4b07      	ldr	r3, [pc, #28]	; (405a98 <lv_obj_invalidate_area+0x5c>)
  405a7a:	4798      	blx	r3
  405a7c:	4669      	mov	r1, sp
  405a7e:	4b07      	ldr	r3, [pc, #28]	; (405a9c <lv_obj_invalidate_area+0x60>)
  405a80:	4798      	blx	r3
}
  405a82:	b003      	add	sp, #12
  405a84:	bd30      	pop	{r4, r5, pc}
  405a86:	bf00      	nop
  405a88:	004157b9 	.word	0x004157b9
  405a8c:	004260c4 	.word	0x004260c4
  405a90:	004157c5 	.word	0x004157c5
  405a94:	0040593d 	.word	0x0040593d
  405a98:	00405555 	.word	0x00405555
  405a9c:	0040915d 	.word	0x0040915d

00405aa0 <lv_obj_invalidate>:
{
  405aa0:	b530      	push	{r4, r5, lr}
  405aa2:	b083      	sub	sp, #12
  405aa4:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405aa6:	4b19      	ldr	r3, [pc, #100]	; (405b0c <lv_obj_invalidate+0x6c>)
  405aa8:	4798      	blx	r3
  405aaa:	b130      	cbz	r0, 405aba <lv_obj_invalidate+0x1a>
    lv_coord_t ext_size = obj->ext_draw_pad;
  405aac:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    lv_area_copy(&obj_coords, &obj->coords);
  405ab0:	f104 0010 	add.w	r0, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  405ab4:	4669      	mov	r1, sp
  405ab6:	2208      	movs	r2, #8
  405ab8:	e00a      	b.n	405ad0 <lv_obj_invalidate+0x30>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405aba:	4622      	mov	r2, r4
  405abc:	2300      	movs	r3, #0
  405abe:	4814      	ldr	r0, [pc, #80]	; (405b10 <lv_obj_invalidate+0x70>)
  405ac0:	4914      	ldr	r1, [pc, #80]	; (405b14 <lv_obj_invalidate+0x74>)
  405ac2:	4788      	blx	r1
  405ac4:	e7fe      	b.n	405ac4 <lv_obj_invalidate+0x24>
        *d8 = *s8;
  405ac6:	f810 5b01 	ldrb.w	r5, [r0], #1
  405aca:	f801 5b01 	strb.w	r5, [r1], #1
        len--;
  405ace:	3a01      	subs	r2, #1
    while(len) {
  405ad0:	2a00      	cmp	r2, #0
  405ad2:	d1f8      	bne.n	405ac6 <lv_obj_invalidate+0x26>
    obj_coords.x1 -= ext_size;
  405ad4:	b29b      	uxth	r3, r3
  405ad6:	f8bd 2000 	ldrh.w	r2, [sp]
  405ada:	1ad2      	subs	r2, r2, r3
  405adc:	f8ad 2000 	strh.w	r2, [sp]
    obj_coords.y1 -= ext_size;
  405ae0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
  405ae4:	1ad2      	subs	r2, r2, r3
  405ae6:	f8ad 2002 	strh.w	r2, [sp, #2]
    obj_coords.x2 += ext_size;
  405aea:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405aee:	441a      	add	r2, r3
  405af0:	f8ad 2004 	strh.w	r2, [sp, #4]
    obj_coords.y2 += ext_size;
  405af4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  405af8:	4413      	add	r3, r2
  405afa:	f8ad 3006 	strh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
  405afe:	4669      	mov	r1, sp
  405b00:	4620      	mov	r0, r4
  405b02:	4b05      	ldr	r3, [pc, #20]	; (405b18 <lv_obj_invalidate+0x78>)
  405b04:	4798      	blx	r3
}
  405b06:	b003      	add	sp, #12
  405b08:	bd30      	pop	{r4, r5, pc}
  405b0a:	bf00      	nop
  405b0c:	004157b9 	.word	0x004157b9
  405b10:	004260c4 	.word	0x004260c4
  405b14:	004157c5 	.word	0x004157c5
  405b18:	00405a3d 	.word	0x00405a3d

00405b1c <lv_obj_move_foreground>:
{
  405b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405b1e:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b20:	4b11      	ldr	r3, [pc, #68]	; (405b68 <lv_obj_move_foreground+0x4c>)
  405b22:	4798      	blx	r3
  405b24:	b928      	cbnz	r0, 405b32 <lv_obj_move_foreground+0x16>
  405b26:	462a      	mov	r2, r5
  405b28:	2300      	movs	r3, #0
  405b2a:	4810      	ldr	r0, [pc, #64]	; (405b6c <lv_obj_move_foreground+0x50>)
  405b2c:	4910      	ldr	r1, [pc, #64]	; (405b70 <lv_obj_move_foreground+0x54>)
  405b2e:	4788      	blx	r1
  405b30:	e7fe      	b.n	405b30 <lv_obj_move_foreground+0x14>
    lv_obj_t * parent = lv_obj_get_parent(obj);
  405b32:	4628      	mov	r0, r5
  405b34:	4b0f      	ldr	r3, [pc, #60]	; (405b74 <lv_obj_move_foreground+0x58>)
  405b36:	4798      	blx	r3
  405b38:	4604      	mov	r4, r0
    if(_lv_ll_get_head(&parent->child_ll) == obj) return;
  405b3a:	1d06      	adds	r6, r0, #4
  405b3c:	4630      	mov	r0, r6
  405b3e:	4b0e      	ldr	r3, [pc, #56]	; (405b78 <lv_obj_move_foreground+0x5c>)
  405b40:	4798      	blx	r3
  405b42:	4285      	cmp	r5, r0
  405b44:	d00f      	beq.n	405b66 <lv_obj_move_foreground+0x4a>
    lv_obj_invalidate(parent);
  405b46:	4620      	mov	r0, r4
  405b48:	4f0c      	ldr	r7, [pc, #48]	; (405b7c <lv_obj_move_foreground+0x60>)
  405b4a:	47b8      	blx	r7
    _lv_ll_chg_list(&parent->child_ll, &parent->child_ll, obj, true);
  405b4c:	2301      	movs	r3, #1
  405b4e:	462a      	mov	r2, r5
  405b50:	4631      	mov	r1, r6
  405b52:	4630      	mov	r0, r6
  405b54:	4e0a      	ldr	r6, [pc, #40]	; (405b80 <lv_obj_move_foreground+0x64>)
  405b56:	47b0      	blx	r6
    parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, obj);
  405b58:	69e3      	ldr	r3, [r4, #28]
  405b5a:	462a      	mov	r2, r5
  405b5c:	2101      	movs	r1, #1
  405b5e:	4620      	mov	r0, r4
  405b60:	4798      	blx	r3
    lv_obj_invalidate(parent);
  405b62:	4620      	mov	r0, r4
  405b64:	47b8      	blx	r7
  405b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405b68:	004157b9 	.word	0x004157b9
  405b6c:	004260c4 	.word	0x004260c4
  405b70:	004157c5 	.word	0x004157c5
  405b74:	004054f5 	.word	0x004054f5
  405b78:	00415ac9 	.word	0x00415ac9
  405b7c:	00405aa1 	.word	0x00405aa1
  405b80:	00415c1d 	.word	0x00415c1d

00405b84 <lv_obj_set_pos>:
{
  405b84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405b88:	b083      	sub	sp, #12
  405b8a:	4604      	mov	r4, r0
  405b8c:	460f      	mov	r7, r1
  405b8e:	4615      	mov	r5, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405b90:	4b24      	ldr	r3, [pc, #144]	; (405c24 <lv_obj_set_pos+0xa0>)
  405b92:	4798      	blx	r3
  405b94:	2800      	cmp	r0, #0
  405b96:	d03f      	beq.n	405c18 <lv_obj_set_pos+0x94>
    lv_obj_t * par = obj->parent;
  405b98:	6826      	ldr	r6, [r4, #0]
    if(par) {
  405b9a:	b12e      	cbz	r6, 405ba8 <lv_obj_set_pos+0x24>
        x = x + par->coords.x1;
  405b9c:	8a33      	ldrh	r3, [r6, #16]
  405b9e:	441f      	add	r7, r3
  405ba0:	b23f      	sxth	r7, r7
        y = y + par->coords.y1;
  405ba2:	8a73      	ldrh	r3, [r6, #18]
  405ba4:	441d      	add	r5, r3
  405ba6:	b22d      	sxth	r5, r5
    diff.x = x - obj->coords.x1;
  405ba8:	8a23      	ldrh	r3, [r4, #16]
  405baa:	1afb      	subs	r3, r7, r3
  405bac:	fa1f f883 	uxth.w	r8, r3
  405bb0:	fa0f f788 	sxth.w	r7, r8
    diff.y = y - obj->coords.y1;
  405bb4:	8a63      	ldrh	r3, [r4, #18]
  405bb6:	1aed      	subs	r5, r5, r3
  405bb8:	b2ad      	uxth	r5, r5
  405bba:	fa0f f985 	sxth.w	r9, r5
    if(diff.x == 0 && diff.y == 0) return;
  405bbe:	b917      	cbnz	r7, 405bc6 <lv_obj_set_pos+0x42>
  405bc0:	f1b9 0f00 	cmp.w	r9, #0
  405bc4:	d025      	beq.n	405c12 <lv_obj_set_pos+0x8e>
    lv_obj_invalidate(obj);
  405bc6:	4620      	mov	r0, r4
  405bc8:	4b17      	ldr	r3, [pc, #92]	; (405c28 <lv_obj_set_pos+0xa4>)
  405bca:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  405bcc:	4669      	mov	r1, sp
  405bce:	4620      	mov	r0, r4
  405bd0:	4b16      	ldr	r3, [pc, #88]	; (405c2c <lv_obj_set_pos+0xa8>)
  405bd2:	4798      	blx	r3
    obj->coords.x1 += diff.x;
  405bd4:	8a23      	ldrh	r3, [r4, #16]
  405bd6:	4443      	add	r3, r8
  405bd8:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
  405bda:	8a63      	ldrh	r3, [r4, #18]
  405bdc:	442b      	add	r3, r5
  405bde:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
  405be0:	8aa3      	ldrh	r3, [r4, #20]
  405be2:	4443      	add	r3, r8
  405be4:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
  405be6:	8ae3      	ldrh	r3, [r4, #22]
  405be8:	441d      	add	r5, r3
  405bea:	82e5      	strh	r5, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
  405bec:	464a      	mov	r2, r9
  405bee:	4639      	mov	r1, r7
  405bf0:	4620      	mov	r0, r4
  405bf2:	4b0f      	ldr	r3, [pc, #60]	; (405c30 <lv_obj_set_pos+0xac>)
  405bf4:	4798      	blx	r3
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  405bf6:	69e3      	ldr	r3, [r4, #28]
  405bf8:	466a      	mov	r2, sp
  405bfa:	2102      	movs	r1, #2
  405bfc:	4620      	mov	r0, r4
  405bfe:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  405c00:	b126      	cbz	r6, 405c0c <lv_obj_set_pos+0x88>
  405c02:	69f3      	ldr	r3, [r6, #28]
  405c04:	4622      	mov	r2, r4
  405c06:	2101      	movs	r1, #1
  405c08:	4630      	mov	r0, r6
  405c0a:	4798      	blx	r3
    lv_obj_invalidate(obj);
  405c0c:	4620      	mov	r0, r4
  405c0e:	4b06      	ldr	r3, [pc, #24]	; (405c28 <lv_obj_set_pos+0xa4>)
  405c10:	4798      	blx	r3
}
  405c12:	b003      	add	sp, #12
  405c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c18:	4622      	mov	r2, r4
  405c1a:	2300      	movs	r3, #0
  405c1c:	4805      	ldr	r0, [pc, #20]	; (405c34 <lv_obj_set_pos+0xb0>)
  405c1e:	4906      	ldr	r1, [pc, #24]	; (405c38 <lv_obj_set_pos+0xb4>)
  405c20:	4788      	blx	r1
  405c22:	e7fe      	b.n	405c22 <lv_obj_set_pos+0x9e>
  405c24:	004157b9 	.word	0x004157b9
  405c28:	00405aa1 	.word	0x00405aa1
  405c2c:	00405609 	.word	0x00405609
  405c30:	00404fa5 	.word	0x00404fa5
  405c34:	004260c4 	.word	0x004260c4
  405c38:	004157c5 	.word	0x004157c5

00405c3c <lv_obj_set_x>:
{
  405c3c:	b538      	push	{r3, r4, r5, lr}
  405c3e:	4604      	mov	r4, r0
  405c40:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c42:	4b09      	ldr	r3, [pc, #36]	; (405c68 <lv_obj_set_x+0x2c>)
  405c44:	4798      	blx	r3
  405c46:	b928      	cbnz	r0, 405c54 <lv_obj_set_x+0x18>
  405c48:	4622      	mov	r2, r4
  405c4a:	2300      	movs	r3, #0
  405c4c:	4807      	ldr	r0, [pc, #28]	; (405c6c <lv_obj_set_x+0x30>)
  405c4e:	4908      	ldr	r1, [pc, #32]	; (405c70 <lv_obj_set_x+0x34>)
  405c50:	4788      	blx	r1
  405c52:	e7fe      	b.n	405c52 <lv_obj_set_x+0x16>
    lv_obj_set_pos(obj, x, lv_obj_get_y(obj));
  405c54:	4620      	mov	r0, r4
  405c56:	4b07      	ldr	r3, [pc, #28]	; (405c74 <lv_obj_set_x+0x38>)
  405c58:	4798      	blx	r3
  405c5a:	4602      	mov	r2, r0
  405c5c:	4629      	mov	r1, r5
  405c5e:	4620      	mov	r0, r4
  405c60:	4b05      	ldr	r3, [pc, #20]	; (405c78 <lv_obj_set_x+0x3c>)
  405c62:	4798      	blx	r3
  405c64:	bd38      	pop	{r3, r4, r5, pc}
  405c66:	bf00      	nop
  405c68:	004157b9 	.word	0x004157b9
  405c6c:	004260c4 	.word	0x004260c4
  405c70:	004157c5 	.word	0x004157c5
  405c74:	00405689 	.word	0x00405689
  405c78:	00405b85 	.word	0x00405b85

00405c7c <lv_obj_set_y>:
{
  405c7c:	b538      	push	{r3, r4, r5, lr}
  405c7e:	4604      	mov	r4, r0
  405c80:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405c82:	4b09      	ldr	r3, [pc, #36]	; (405ca8 <lv_obj_set_y+0x2c>)
  405c84:	4798      	blx	r3
  405c86:	b928      	cbnz	r0, 405c94 <lv_obj_set_y+0x18>
  405c88:	4622      	mov	r2, r4
  405c8a:	2300      	movs	r3, #0
  405c8c:	4807      	ldr	r0, [pc, #28]	; (405cac <lv_obj_set_y+0x30>)
  405c8e:	4908      	ldr	r1, [pc, #32]	; (405cb0 <lv_obj_set_y+0x34>)
  405c90:	4788      	blx	r1
  405c92:	e7fe      	b.n	405c92 <lv_obj_set_y+0x16>
    lv_obj_set_pos(obj, lv_obj_get_x(obj), y);
  405c94:	4620      	mov	r0, r4
  405c96:	4b07      	ldr	r3, [pc, #28]	; (405cb4 <lv_obj_set_y+0x38>)
  405c98:	4798      	blx	r3
  405c9a:	462a      	mov	r2, r5
  405c9c:	4601      	mov	r1, r0
  405c9e:	4620      	mov	r0, r4
  405ca0:	4b05      	ldr	r3, [pc, #20]	; (405cb8 <lv_obj_set_y+0x3c>)
  405ca2:	4798      	blx	r3
  405ca4:	bd38      	pop	{r3, r4, r5, pc}
  405ca6:	bf00      	nop
  405ca8:	004157b9 	.word	0x004157b9
  405cac:	004260c4 	.word	0x004260c4
  405cb0:	004157c5 	.word	0x004157c5
  405cb4:	00405649 	.word	0x00405649
  405cb8:	00405b85 	.word	0x00405b85

00405cbc <obj_align_core>:
{
  405cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  405cbe:	b083      	sub	sp, #12
  405cc0:	4604      	mov	r4, r0
  405cc2:	461d      	mov	r5, r3
  405cc4:	f89d 6020 	ldrb.w	r6, [sp, #32]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
  405cc8:	f101 0010 	add.w	r0, r1, #16
  405ccc:	ab01      	add	r3, sp, #4
  405cce:	f104 0110 	add.w	r1, r4, #16
  405cd2:	4f18      	ldr	r7, [pc, #96]	; (405d34 <obj_align_core+0x78>)
  405cd4:	47b8      	blx	r7
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405cd6:	4620      	mov	r0, r4
  405cd8:	4b17      	ldr	r3, [pc, #92]	; (405d38 <obj_align_core+0x7c>)
  405cda:	4798      	blx	r3
    lv_coord_t par_abs_x  = par->coords.x1;
  405cdc:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405ce0:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_pos.x += x_ofs;
  405ce4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  405ce8:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  405cec:	4411      	add	r1, r2
  405cee:	b289      	uxth	r1, r1
    new_pos.y += y_ofs;
  405cf0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  405cf4:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
  405cf8:	4402      	add	r2, r0
  405cfa:	b292      	uxth	r2, r2
    new_pos.x -= par_abs_x;
  405cfc:	1bc9      	subs	r1, r1, r7
  405cfe:	b209      	sxth	r1, r1
  405d00:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
  405d04:	1ad2      	subs	r2, r2, r3
  405d06:	b212      	sxth	r2, r2
  405d08:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405d0c:	4235      	tst	r5, r6
  405d0e:	d103      	bne.n	405d18 <obj_align_core+0x5c>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405d10:	b935      	cbnz	r5, 405d20 <obj_align_core+0x64>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405d12:	b94e      	cbnz	r6, 405d28 <obj_align_core+0x6c>
}
  405d14:	b003      	add	sp, #12
  405d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
  405d18:	4620      	mov	r0, r4
  405d1a:	4b08      	ldr	r3, [pc, #32]	; (405d3c <obj_align_core+0x80>)
  405d1c:	4798      	blx	r3
  405d1e:	e7f9      	b.n	405d14 <obj_align_core+0x58>
    else if(x_set) lv_obj_set_x(obj, new_pos.x);
  405d20:	4620      	mov	r0, r4
  405d22:	4b07      	ldr	r3, [pc, #28]	; (405d40 <obj_align_core+0x84>)
  405d24:	4798      	blx	r3
  405d26:	e7f5      	b.n	405d14 <obj_align_core+0x58>
    else if(y_set) lv_obj_set_y(obj, new_pos.y);
  405d28:	4611      	mov	r1, r2
  405d2a:	4620      	mov	r0, r4
  405d2c:	4b05      	ldr	r3, [pc, #20]	; (405d44 <obj_align_core+0x88>)
  405d2e:	4798      	blx	r3
}
  405d30:	e7f0      	b.n	405d14 <obj_align_core+0x58>
  405d32:	bf00      	nop
  405d34:	00415231 	.word	0x00415231
  405d38:	004054f5 	.word	0x004054f5
  405d3c:	00405b85 	.word	0x00405b85
  405d40:	00405c3d 	.word	0x00405c3d
  405d44:	00405c7d 	.word	0x00405c7d

00405d48 <lv_obj_align>:
{
  405d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  405d4c:	b085      	sub	sp, #20
  405d4e:	4604      	mov	r4, r0
  405d50:	460d      	mov	r5, r1
  405d52:	4690      	mov	r8, r2
  405d54:	461f      	mov	r7, r3
  405d56:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  405d5a:	4b19      	ldr	r3, [pc, #100]	; (405dc0 <lv_obj_align+0x78>)
  405d5c:	4798      	blx	r3
  405d5e:	b928      	cbnz	r0, 405d6c <lv_obj_align+0x24>
  405d60:	4622      	mov	r2, r4
  405d62:	2300      	movs	r3, #0
  405d64:	4817      	ldr	r0, [pc, #92]	; (405dc4 <lv_obj_align+0x7c>)
  405d66:	4918      	ldr	r1, [pc, #96]	; (405dc8 <lv_obj_align+0x80>)
  405d68:	4788      	blx	r1
  405d6a:	e7fe      	b.n	405d6a <lv_obj_align+0x22>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405d6c:	b14d      	cbz	r5, 405d82 <lv_obj_align+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  405d6e:	4628      	mov	r0, r5
  405d70:	4b13      	ldr	r3, [pc, #76]	; (405dc0 <lv_obj_align+0x78>)
  405d72:	4798      	blx	r3
  405d74:	b950      	cbnz	r0, 405d8c <lv_obj_align+0x44>
  405d76:	462a      	mov	r2, r5
  405d78:	2300      	movs	r3, #0
  405d7a:	4812      	ldr	r0, [pc, #72]	; (405dc4 <lv_obj_align+0x7c>)
  405d7c:	4912      	ldr	r1, [pc, #72]	; (405dc8 <lv_obj_align+0x80>)
  405d7e:	4788      	blx	r1
  405d80:	e7fe      	b.n	405d80 <lv_obj_align+0x38>
    if(base == NULL) base = lv_obj_get_parent(obj);
  405d82:	4620      	mov	r0, r4
  405d84:	4b11      	ldr	r3, [pc, #68]	; (405dcc <lv_obj_align+0x84>)
  405d86:	4798      	blx	r3
  405d88:	4605      	mov	r5, r0
  405d8a:	e7f0      	b.n	405d6e <lv_obj_align+0x26>
    obj_align_core(obj, base, align, true, true, x_ofs, y_ofs);
  405d8c:	9602      	str	r6, [sp, #8]
  405d8e:	9701      	str	r7, [sp, #4]
  405d90:	2301      	movs	r3, #1
  405d92:	9300      	str	r3, [sp, #0]
  405d94:	4642      	mov	r2, r8
  405d96:	4629      	mov	r1, r5
  405d98:	4620      	mov	r0, r4
  405d9a:	f8df 9034 	ldr.w	r9, [pc, #52]	; 405dd0 <lv_obj_align+0x88>
  405d9e:	47c8      	blx	r9
    obj->realign.align       = align;
  405da0:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  405da4:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  405da8:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  405dac:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 0;
  405dae:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  405db2:	f36f 0341 	bfc	r3, #1, #1
  405db6:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  405dba:	b005      	add	sp, #20
  405dbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  405dc0:	004157b9 	.word	0x004157b9
  405dc4:	004260c4 	.word	0x004260c4
  405dc8:	004157c5 	.word	0x004157c5
  405dcc:	004054f5 	.word	0x004054f5
  405dd0:	00405cbd 	.word	0x00405cbd

00405dd4 <obj_align_mid_core>:
{
  405dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405dd8:	b083      	sub	sp, #12
  405dda:	4680      	mov	r8, r0
  405ddc:	9001      	str	r0, [sp, #4]
  405dde:	460f      	mov	r7, r1
  405de0:	4616      	mov	r6, r2
  405de2:	469a      	mov	sl, r3
  405de4:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    lv_coord_t new_x = lv_obj_get_x(obj);
  405de8:	4ba4      	ldr	r3, [pc, #656]	; (40607c <obj_align_mid_core+0x2a8>)
  405dea:	4798      	blx	r3
  405dec:	4605      	mov	r5, r0
    lv_coord_t new_y = lv_obj_get_y(obj);
  405dee:	4640      	mov	r0, r8
  405df0:	4ba3      	ldr	r3, [pc, #652]	; (406080 <obj_align_mid_core+0x2ac>)
  405df2:	4798      	blx	r3
  405df4:	4604      	mov	r4, r0
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405df6:	4640      	mov	r0, r8
  405df8:	4ba2      	ldr	r3, [pc, #648]	; (406084 <obj_align_mid_core+0x2b0>)
  405dfa:	4798      	blx	r3
  405dfc:	4681      	mov	r9, r0
  405dfe:	2800      	cmp	r0, #0
  405e00:	db22      	blt.n	405e48 <obj_align_mid_core+0x74>
  405e02:	f349 094f 	sbfx	r9, r9, #1, #16
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405e06:	9801      	ldr	r0, [sp, #4]
  405e08:	4b9f      	ldr	r3, [pc, #636]	; (406088 <obj_align_mid_core+0x2b4>)
  405e0a:	4798      	blx	r3
  405e0c:	4680      	mov	r8, r0
  405e0e:	2800      	cmp	r0, #0
  405e10:	db1d      	blt.n	405e4e <obj_align_mid_core+0x7a>
  405e12:	f348 084f 	sbfx	r8, r8, #1, #16
    switch(align) {
  405e16:	2e14      	cmp	r6, #20
  405e18:	d82e      	bhi.n	405e78 <obj_align_mid_core+0xa4>
  405e1a:	e8df f016 	tbh	[pc, r6, lsl #1]
  405e1e:	001b      	.short	0x001b
  405e20:	0062005b 	.word	0x0062005b
  405e24:	007c0071 	.word	0x007c0071
  405e28:	009a0087 	.word	0x009a0087
  405e2c:	00b800a9 	.word	0x00b800a9
  405e30:	00d200cb 	.word	0x00d200cb
  405e34:	00ec00e1 	.word	0x00ec00e1
  405e38:	010a00f7 	.word	0x010a00f7
  405e3c:	01200119 	.word	0x01200119
  405e40:	01440139 	.word	0x01440139
  405e44:	0162014f 	.word	0x0162014f
    lv_coord_t obj_w_half = lv_obj_get_width(obj) / 2;
  405e48:	f100 0901 	add.w	r9, r0, #1
  405e4c:	e7d9      	b.n	405e02 <obj_align_mid_core+0x2e>
    lv_coord_t obj_h_half = lv_obj_get_height(obj) / 2;
  405e4e:	f100 0801 	add.w	r8, r0, #1
  405e52:	e7de      	b.n	405e12 <obj_align_mid_core+0x3e>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405e54:	4638      	mov	r0, r7
  405e56:	4b8b      	ldr	r3, [pc, #556]	; (406084 <obj_align_mid_core+0x2b0>)
  405e58:	4798      	blx	r3
  405e5a:	4605      	mov	r5, r0
  405e5c:	2800      	cmp	r0, #0
  405e5e:	db35      	blt.n	405ecc <obj_align_mid_core+0xf8>
  405e60:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405e64:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405e66:	4638      	mov	r0, r7
  405e68:	4b87      	ldr	r3, [pc, #540]	; (406088 <obj_align_mid_core+0x2b4>)
  405e6a:	4798      	blx	r3
  405e6c:	4604      	mov	r4, r0
  405e6e:	2800      	cmp	r0, #0
  405e70:	db2e      	blt.n	405ed0 <obj_align_mid_core+0xfc>
  405e72:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405e76:	b224      	sxth	r4, r4
    lv_obj_t * par        = lv_obj_get_parent(obj);
  405e78:	9801      	ldr	r0, [sp, #4]
  405e7a:	4b84      	ldr	r3, [pc, #528]	; (40608c <obj_align_mid_core+0x2b8>)
  405e7c:	4798      	blx	r3
    lv_coord_t base_abs_x = base->coords.x1;
  405e7e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
    lv_coord_t base_abs_y = base->coords.y1;
  405e82:	f9b7 e012 	ldrsh.w	lr, [r7, #18]
    lv_coord_t par_abs_x  = par->coords.x1;
  405e86:	f9b0 7010 	ldrsh.w	r7, [r0, #16]
    lv_coord_t par_abs_y  = par->coords.y1;
  405e8a:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
    new_x += x_ofs + base_abs_x;
  405e8e:	f9bd 1034 	ldrsh.w	r1, [sp, #52]	; 0x34
  405e92:	4411      	add	r1, r2
  405e94:	fa15 f181 	uxtah	r1, r5, r1
  405e98:	b289      	uxth	r1, r1
    new_y += y_ofs + base_abs_y;
  405e9a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  405e9e:	4472      	add	r2, lr
  405ea0:	fa14 f282 	uxtah	r2, r4, r2
  405ea4:	b292      	uxth	r2, r2
    new_x -= par_abs_x;
  405ea6:	1bc9      	subs	r1, r1, r7
  405ea8:	b209      	sxth	r1, r1
    new_y -= par_abs_y;
  405eaa:	1ad2      	subs	r2, r2, r3
  405eac:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  405eae:	ea1a 0f0b 	tst.w	sl, fp
  405eb2:	f040 8125 	bne.w	406100 <obj_align_mid_core+0x32c>
    else if(x_set) lv_obj_set_x(obj, new_x);
  405eb6:	f1ba 0f00 	cmp.w	sl, #0
  405eba:	f040 8125 	bne.w	406108 <obj_align_mid_core+0x334>
    else if(y_set) lv_obj_set_y(obj, new_y);
  405ebe:	f1bb 0f00 	cmp.w	fp, #0
  405ec2:	f040 8125 	bne.w	406110 <obj_align_mid_core+0x33c>
}
  405ec6:	b003      	add	sp, #12
  405ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405ecc:	1c45      	adds	r5, r0, #1
  405ece:	e7c7      	b.n	405e60 <obj_align_mid_core+0x8c>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405ed0:	1c44      	adds	r4, r0, #1
  405ed2:	e7ce      	b.n	405e72 <obj_align_mid_core+0x9e>
            new_x = -obj_w_half;
  405ed4:	f1c9 0500 	rsb	r5, r9, #0
  405ed8:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405eda:	f1c8 0400 	rsb	r4, r8, #0
  405ede:	b224      	sxth	r4, r4
            break;
  405ee0:	e7ca      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405ee2:	4638      	mov	r0, r7
  405ee4:	4b67      	ldr	r3, [pc, #412]	; (406084 <obj_align_mid_core+0x2b0>)
  405ee6:	4798      	blx	r3
  405ee8:	4605      	mov	r5, r0
  405eea:	2800      	cmp	r0, #0
  405eec:	db06      	blt.n	405efc <obj_align_mid_core+0x128>
  405eee:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405ef2:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405ef4:	f1c8 0400 	rsb	r4, r8, #0
  405ef8:	b224      	sxth	r4, r4
            break;
  405efa:	e7bd      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405efc:	1c45      	adds	r5, r0, #1
  405efe:	e7f6      	b.n	405eee <obj_align_mid_core+0x11a>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405f00:	4638      	mov	r0, r7
  405f02:	4b60      	ldr	r3, [pc, #384]	; (406084 <obj_align_mid_core+0x2b0>)
  405f04:	4798      	blx	r3
  405f06:	b285      	uxth	r5, r0
  405f08:	eba5 0509 	sub.w	r5, r5, r9
  405f0c:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405f0e:	f1c8 0400 	rsb	r4, r8, #0
  405f12:	b224      	sxth	r4, r4
            break;
  405f14:	e7b0      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405f16:	f1c9 0500 	rsb	r5, r9, #0
  405f1a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f1c:	4638      	mov	r0, r7
  405f1e:	4b5a      	ldr	r3, [pc, #360]	; (406088 <obj_align_mid_core+0x2b4>)
  405f20:	4798      	blx	r3
  405f22:	b284      	uxth	r4, r0
  405f24:	eba4 0408 	sub.w	r4, r4, r8
  405f28:	b224      	sxth	r4, r4
            break;
  405f2a:	e7a5      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405f2c:	4638      	mov	r0, r7
  405f2e:	4b55      	ldr	r3, [pc, #340]	; (406084 <obj_align_mid_core+0x2b0>)
  405f30:	4798      	blx	r3
  405f32:	4605      	mov	r5, r0
  405f34:	2800      	cmp	r0, #0
  405f36:	db0a      	blt.n	405f4e <obj_align_mid_core+0x17a>
  405f38:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405f3c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f3e:	4638      	mov	r0, r7
  405f40:	4b51      	ldr	r3, [pc, #324]	; (406088 <obj_align_mid_core+0x2b4>)
  405f42:	4798      	blx	r3
  405f44:	b284      	uxth	r4, r0
  405f46:	eba4 0408 	sub.w	r4, r4, r8
  405f4a:	b224      	sxth	r4, r4
            break;
  405f4c:	e794      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405f4e:	1c45      	adds	r5, r0, #1
  405f50:	e7f2      	b.n	405f38 <obj_align_mid_core+0x164>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405f52:	4638      	mov	r0, r7
  405f54:	4b4b      	ldr	r3, [pc, #300]	; (406084 <obj_align_mid_core+0x2b0>)
  405f56:	4798      	blx	r3
  405f58:	b285      	uxth	r5, r0
  405f5a:	eba5 0509 	sub.w	r5, r5, r9
  405f5e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405f60:	4638      	mov	r0, r7
  405f62:	4b49      	ldr	r3, [pc, #292]	; (406088 <obj_align_mid_core+0x2b4>)
  405f64:	4798      	blx	r3
  405f66:	b284      	uxth	r4, r0
  405f68:	eba4 0408 	sub.w	r4, r4, r8
  405f6c:	b224      	sxth	r4, r4
            break;
  405f6e:	e783      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405f70:	f1c9 0500 	rsb	r5, r9, #0
  405f74:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405f76:	4638      	mov	r0, r7
  405f78:	4b43      	ldr	r3, [pc, #268]	; (406088 <obj_align_mid_core+0x2b4>)
  405f7a:	4798      	blx	r3
  405f7c:	4604      	mov	r4, r0
  405f7e:	2800      	cmp	r0, #0
  405f80:	db03      	blt.n	405f8a <obj_align_mid_core+0x1b6>
  405f82:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405f86:	b224      	sxth	r4, r4
            break;
  405f88:	e776      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405f8a:	1c44      	adds	r4, r0, #1
  405f8c:	e7f9      	b.n	405f82 <obj_align_mid_core+0x1ae>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405f8e:	4638      	mov	r0, r7
  405f90:	4b3c      	ldr	r3, [pc, #240]	; (406084 <obj_align_mid_core+0x2b0>)
  405f92:	4798      	blx	r3
  405f94:	b285      	uxth	r5, r0
  405f96:	eba5 0509 	sub.w	r5, r5, r9
  405f9a:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405f9c:	4638      	mov	r0, r7
  405f9e:	4b3a      	ldr	r3, [pc, #232]	; (406088 <obj_align_mid_core+0x2b4>)
  405fa0:	4798      	blx	r3
  405fa2:	4604      	mov	r4, r0
  405fa4:	2800      	cmp	r0, #0
  405fa6:	db03      	blt.n	405fb0 <obj_align_mid_core+0x1dc>
  405fa8:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  405fac:	b224      	sxth	r4, r4
            break;
  405fae:	e763      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  405fb0:	1c44      	adds	r4, r0, #1
  405fb2:	e7f9      	b.n	405fa8 <obj_align_mid_core+0x1d4>
            new_x = -obj_w_half;
  405fb4:	f1c9 0500 	rsb	r5, r9, #0
  405fb8:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405fba:	f1c8 0400 	rsb	r4, r8, #0
  405fbe:	b224      	sxth	r4, r4
            break;
  405fc0:	e75a      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405fc2:	4638      	mov	r0, r7
  405fc4:	4b2f      	ldr	r3, [pc, #188]	; (406084 <obj_align_mid_core+0x2b0>)
  405fc6:	4798      	blx	r3
  405fc8:	4605      	mov	r5, r0
  405fca:	2800      	cmp	r0, #0
  405fcc:	db06      	blt.n	405fdc <obj_align_mid_core+0x208>
  405fce:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  405fd2:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405fd4:	f1c8 0400 	rsb	r4, r8, #0
  405fd8:	b224      	sxth	r4, r4
            break;
  405fda:	e74d      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  405fdc:	1c45      	adds	r5, r0, #1
  405fde:	e7f6      	b.n	405fce <obj_align_mid_core+0x1fa>
            new_x = lv_obj_get_width(base) - obj_w_half;
  405fe0:	4638      	mov	r0, r7
  405fe2:	4b28      	ldr	r3, [pc, #160]	; (406084 <obj_align_mid_core+0x2b0>)
  405fe4:	4798      	blx	r3
  405fe6:	b285      	uxth	r5, r0
  405fe8:	eba5 0509 	sub.w	r5, r5, r9
  405fec:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  405fee:	f1c8 0400 	rsb	r4, r8, #0
  405ff2:	b224      	sxth	r4, r4
            break;
  405ff4:	e740      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  405ff6:	f1c9 0500 	rsb	r5, r9, #0
  405ffa:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  405ffc:	4638      	mov	r0, r7
  405ffe:	4b22      	ldr	r3, [pc, #136]	; (406088 <obj_align_mid_core+0x2b4>)
  406000:	4798      	blx	r3
  406002:	b284      	uxth	r4, r0
  406004:	eba4 0408 	sub.w	r4, r4, r8
  406008:	b224      	sxth	r4, r4
            break;
  40600a:	e735      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40600c:	4638      	mov	r0, r7
  40600e:	4b1d      	ldr	r3, [pc, #116]	; (406084 <obj_align_mid_core+0x2b0>)
  406010:	4798      	blx	r3
  406012:	4605      	mov	r5, r0
  406014:	2800      	cmp	r0, #0
  406016:	db0a      	blt.n	40602e <obj_align_mid_core+0x25a>
  406018:	ebc9 0565 	rsb	r5, r9, r5, asr #1
  40601c:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  40601e:	4638      	mov	r0, r7
  406020:	4b19      	ldr	r3, [pc, #100]	; (406088 <obj_align_mid_core+0x2b4>)
  406022:	4798      	blx	r3
  406024:	b284      	uxth	r4, r0
  406026:	eba4 0408 	sub.w	r4, r4, r8
  40602a:	b224      	sxth	r4, r4
            break;
  40602c:	e724      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) / 2 - obj_w_half;
  40602e:	1c45      	adds	r5, r0, #1
  406030:	e7f2      	b.n	406018 <obj_align_mid_core+0x244>
            new_x = lv_obj_get_width(base) - obj_w_half;
  406032:	4638      	mov	r0, r7
  406034:	4b13      	ldr	r3, [pc, #76]	; (406084 <obj_align_mid_core+0x2b0>)
  406036:	4798      	blx	r3
  406038:	b285      	uxth	r5, r0
  40603a:	eba5 0509 	sub.w	r5, r5, r9
  40603e:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406040:	4638      	mov	r0, r7
  406042:	4b11      	ldr	r3, [pc, #68]	; (406088 <obj_align_mid_core+0x2b4>)
  406044:	4798      	blx	r3
  406046:	b284      	uxth	r4, r0
  406048:	eba4 0408 	sub.w	r4, r4, r8
  40604c:	b224      	sxth	r4, r4
            break;
  40604e:	e713      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  406050:	f1c9 0500 	rsb	r5, r9, #0
  406054:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  406056:	f1c8 0400 	rsb	r4, r8, #0
  40605a:	b224      	sxth	r4, r4
            break;
  40605c:	e70c      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = -obj_w_half;
  40605e:	f1c9 0500 	rsb	r5, r9, #0
  406062:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406064:	4638      	mov	r0, r7
  406066:	4b08      	ldr	r3, [pc, #32]	; (406088 <obj_align_mid_core+0x2b4>)
  406068:	4798      	blx	r3
  40606a:	4604      	mov	r4, r0
  40606c:	2800      	cmp	r0, #0
  40606e:	db03      	blt.n	406078 <obj_align_mid_core+0x2a4>
  406070:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  406074:	b224      	sxth	r4, r4
            break;
  406076:	e6ff      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  406078:	1c44      	adds	r4, r0, #1
  40607a:	e7f9      	b.n	406070 <obj_align_mid_core+0x29c>
  40607c:	00405649 	.word	0x00405649
  406080:	00405689 	.word	0x00405689
  406084:	004056c9 	.word	0x004056c9
  406088:	004056f9 	.word	0x004056f9
  40608c:	004054f5 	.word	0x004054f5
            new_x = -obj_w_half;
  406090:	f1c9 0500 	rsb	r5, r9, #0
  406094:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  406096:	4638      	mov	r0, r7
  406098:	4b20      	ldr	r3, [pc, #128]	; (40611c <obj_align_mid_core+0x348>)
  40609a:	4798      	blx	r3
  40609c:	b284      	uxth	r4, r0
  40609e:	eba4 0408 	sub.w	r4, r4, r8
  4060a2:	b224      	sxth	r4, r4
            break;
  4060a4:	e6e8      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4060a6:	4638      	mov	r0, r7
  4060a8:	4b1d      	ldr	r3, [pc, #116]	; (406120 <obj_align_mid_core+0x34c>)
  4060aa:	4798      	blx	r3
  4060ac:	b285      	uxth	r5, r0
  4060ae:	eba5 0509 	sub.w	r5, r5, r9
  4060b2:	b22d      	sxth	r5, r5
            new_y = -obj_h_half;
  4060b4:	f1c8 0400 	rsb	r4, r8, #0
  4060b8:	b224      	sxth	r4, r4
            break;
  4060ba:	e6dd      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4060bc:	4638      	mov	r0, r7
  4060be:	4b18      	ldr	r3, [pc, #96]	; (406120 <obj_align_mid_core+0x34c>)
  4060c0:	4798      	blx	r3
  4060c2:	b285      	uxth	r5, r0
  4060c4:	eba5 0509 	sub.w	r5, r5, r9
  4060c8:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4060ca:	4638      	mov	r0, r7
  4060cc:	4b13      	ldr	r3, [pc, #76]	; (40611c <obj_align_mid_core+0x348>)
  4060ce:	4798      	blx	r3
  4060d0:	4604      	mov	r4, r0
  4060d2:	2800      	cmp	r0, #0
  4060d4:	db03      	blt.n	4060de <obj_align_mid_core+0x30a>
  4060d6:	ebc8 0464 	rsb	r4, r8, r4, asr #1
  4060da:	b224      	sxth	r4, r4
            break;
  4060dc:	e6cc      	b.n	405e78 <obj_align_mid_core+0xa4>
            new_y = lv_obj_get_height(base) / 2 - obj_h_half;
  4060de:	1c44      	adds	r4, r0, #1
  4060e0:	e7f9      	b.n	4060d6 <obj_align_mid_core+0x302>
            new_x = lv_obj_get_width(base) - obj_w_half;
  4060e2:	4638      	mov	r0, r7
  4060e4:	4b0e      	ldr	r3, [pc, #56]	; (406120 <obj_align_mid_core+0x34c>)
  4060e6:	4798      	blx	r3
  4060e8:	b285      	uxth	r5, r0
  4060ea:	eba5 0509 	sub.w	r5, r5, r9
  4060ee:	b22d      	sxth	r5, r5
            new_y = lv_obj_get_height(base) - obj_h_half;
  4060f0:	4638      	mov	r0, r7
  4060f2:	4b0a      	ldr	r3, [pc, #40]	; (40611c <obj_align_mid_core+0x348>)
  4060f4:	4798      	blx	r3
  4060f6:	b284      	uxth	r4, r0
  4060f8:	eba4 0408 	sub.w	r4, r4, r8
  4060fc:	b224      	sxth	r4, r4
            break;
  4060fe:	e6bb      	b.n	405e78 <obj_align_mid_core+0xa4>
    if(x_set && y_set) lv_obj_set_pos(obj, new_x, new_y);
  406100:	9801      	ldr	r0, [sp, #4]
  406102:	4b08      	ldr	r3, [pc, #32]	; (406124 <obj_align_mid_core+0x350>)
  406104:	4798      	blx	r3
  406106:	e6de      	b.n	405ec6 <obj_align_mid_core+0xf2>
    else if(x_set) lv_obj_set_x(obj, new_x);
  406108:	9801      	ldr	r0, [sp, #4]
  40610a:	4b07      	ldr	r3, [pc, #28]	; (406128 <obj_align_mid_core+0x354>)
  40610c:	4798      	blx	r3
  40610e:	e6da      	b.n	405ec6 <obj_align_mid_core+0xf2>
    else if(y_set) lv_obj_set_y(obj, new_y);
  406110:	4611      	mov	r1, r2
  406112:	9801      	ldr	r0, [sp, #4]
  406114:	4b05      	ldr	r3, [pc, #20]	; (40612c <obj_align_mid_core+0x358>)
  406116:	4798      	blx	r3
}
  406118:	e6d5      	b.n	405ec6 <obj_align_mid_core+0xf2>
  40611a:	bf00      	nop
  40611c:	004056f9 	.word	0x004056f9
  406120:	004056c9 	.word	0x004056c9
  406124:	00405b85 	.word	0x00405b85
  406128:	00405c3d 	.word	0x00405c3d
  40612c:	00405c7d 	.word	0x00405c7d

00406130 <lv_obj_align_mid>:
{
  406130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406134:	b085      	sub	sp, #20
  406136:	4604      	mov	r4, r0
  406138:	460d      	mov	r5, r1
  40613a:	4690      	mov	r8, r2
  40613c:	461f      	mov	r7, r3
  40613e:	f9bd 6030 	ldrsh.w	r6, [sp, #48]	; 0x30
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406142:	4b19      	ldr	r3, [pc, #100]	; (4061a8 <lv_obj_align_mid+0x78>)
  406144:	4798      	blx	r3
  406146:	b928      	cbnz	r0, 406154 <lv_obj_align_mid+0x24>
  406148:	4622      	mov	r2, r4
  40614a:	2300      	movs	r3, #0
  40614c:	4817      	ldr	r0, [pc, #92]	; (4061ac <lv_obj_align_mid+0x7c>)
  40614e:	4918      	ldr	r1, [pc, #96]	; (4061b0 <lv_obj_align_mid+0x80>)
  406150:	4788      	blx	r1
  406152:	e7fe      	b.n	406152 <lv_obj_align_mid+0x22>
    if(base == NULL) {
  406154:	b14d      	cbz	r5, 40616a <lv_obj_align_mid+0x3a>
    LV_ASSERT_OBJ(base, LV_OBJX_NAME);
  406156:	4628      	mov	r0, r5
  406158:	4b13      	ldr	r3, [pc, #76]	; (4061a8 <lv_obj_align_mid+0x78>)
  40615a:	4798      	blx	r3
  40615c:	b950      	cbnz	r0, 406174 <lv_obj_align_mid+0x44>
  40615e:	462a      	mov	r2, r5
  406160:	2300      	movs	r3, #0
  406162:	4812      	ldr	r0, [pc, #72]	; (4061ac <lv_obj_align_mid+0x7c>)
  406164:	4912      	ldr	r1, [pc, #72]	; (4061b0 <lv_obj_align_mid+0x80>)
  406166:	4788      	blx	r1
  406168:	e7fe      	b.n	406168 <lv_obj_align_mid+0x38>
        base = lv_obj_get_parent(obj);
  40616a:	4620      	mov	r0, r4
  40616c:	4b11      	ldr	r3, [pc, #68]	; (4061b4 <lv_obj_align_mid+0x84>)
  40616e:	4798      	blx	r3
  406170:	4605      	mov	r5, r0
  406172:	e7f0      	b.n	406156 <lv_obj_align_mid+0x26>
    obj_align_mid_core(obj, base, align, true, true, x_ofs, y_ofs);
  406174:	9602      	str	r6, [sp, #8]
  406176:	9701      	str	r7, [sp, #4]
  406178:	2301      	movs	r3, #1
  40617a:	9300      	str	r3, [sp, #0]
  40617c:	4642      	mov	r2, r8
  40617e:	4629      	mov	r1, r5
  406180:	4620      	mov	r0, r4
  406182:	f8df 9034 	ldr.w	r9, [pc, #52]	; 4061b8 <lv_obj_align_mid+0x88>
  406186:	47c8      	blx	r9
    obj->realign.align       = align;
  406188:	f884 8048 	strb.w	r8, [r4, #72]	; 0x48
    obj->realign.xofs        = x_ofs;
  40618c:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
    obj->realign.yofs        = y_ofs;
  406190:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
    obj->realign.base        = base;
  406194:	6425      	str	r5, [r4, #64]	; 0x40
    obj->realign.mid_align = 1;
  406196:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  40619a:	f043 0302 	orr.w	r3, r3, #2
  40619e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
  4061a2:	b005      	add	sp, #20
  4061a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4061a8:	004157b9 	.word	0x004157b9
  4061ac:	004260c4 	.word	0x004260c4
  4061b0:	004157c5 	.word	0x004157c5
  4061b4:	004054f5 	.word	0x004054f5
  4061b8:	00405dd5 	.word	0x00405dd5

004061bc <lv_obj_realign>:
{
  4061bc:	b510      	push	{r4, lr}
  4061be:	b082      	sub	sp, #8
  4061c0:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061c2:	4b13      	ldr	r3, [pc, #76]	; (406210 <lv_obj_realign+0x54>)
  4061c4:	4798      	blx	r3
  4061c6:	b188      	cbz	r0, 4061ec <lv_obj_realign+0x30>
    if(obj->realign.mid_align)
  4061c8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  4061cc:	f013 0f02 	tst.w	r3, #2
  4061d0:	d012      	beq.n	4061f8 <lv_obj_realign+0x3c>
        lv_obj_align_mid(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4061d2:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4061d6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  4061da:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  4061de:	9100      	str	r1, [sp, #0]
  4061e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4061e2:	4620      	mov	r0, r4
  4061e4:	4c0b      	ldr	r4, [pc, #44]	; (406214 <lv_obj_realign+0x58>)
  4061e6:	47a0      	blx	r4
}
  4061e8:	b002      	add	sp, #8
  4061ea:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4061ec:	4622      	mov	r2, r4
  4061ee:	2300      	movs	r3, #0
  4061f0:	4809      	ldr	r0, [pc, #36]	; (406218 <lv_obj_realign+0x5c>)
  4061f2:	490a      	ldr	r1, [pc, #40]	; (40621c <lv_obj_realign+0x60>)
  4061f4:	4788      	blx	r1
  4061f6:	e7fe      	b.n	4061f6 <lv_obj_realign+0x3a>
        lv_obj_align(obj, obj->realign.base, obj->realign.align, obj->realign.xofs, obj->realign.yofs);
  4061f8:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
  4061fc:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  406200:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
  406204:	9100      	str	r1, [sp, #0]
  406206:	6c21      	ldr	r1, [r4, #64]	; 0x40
  406208:	4620      	mov	r0, r4
  40620a:	4c05      	ldr	r4, [pc, #20]	; (406220 <lv_obj_realign+0x64>)
  40620c:	47a0      	blx	r4
}
  40620e:	e7eb      	b.n	4061e8 <lv_obj_realign+0x2c>
  406210:	004157b9 	.word	0x004157b9
  406214:	00406131 	.word	0x00406131
  406218:	004260c4 	.word	0x004260c4
  40621c:	004157c5 	.word	0x004157c5
  406220:	00405d49 	.word	0x00405d49

00406224 <refresh_children_style>:
{
  406224:	b570      	push	{r4, r5, r6, lr}
  406226:	4606      	mov	r6, r0
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  406228:	2100      	movs	r1, #0
  40622a:	4b0c      	ldr	r3, [pc, #48]	; (40625c <refresh_children_style+0x38>)
  40622c:	4798      	blx	r3
  40622e:	4604      	mov	r4, r0
    while(child != NULL) {
  406230:	e011      	b.n	406256 <refresh_children_style+0x32>
        lv_obj_invalidate(child);
  406232:	4620      	mov	r0, r4
  406234:	4d0a      	ldr	r5, [pc, #40]	; (406260 <refresh_children_style+0x3c>)
  406236:	47a8      	blx	r5
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
  406238:	69e3      	ldr	r3, [r4, #28]
  40623a:	2200      	movs	r2, #0
  40623c:	2104      	movs	r1, #4
  40623e:	4620      	mov	r0, r4
  406240:	4798      	blx	r3
        lv_obj_invalidate(child);
  406242:	4620      	mov	r0, r4
  406244:	47a8      	blx	r5
        refresh_children_style(child); /*Check children too*/
  406246:	4620      	mov	r0, r4
  406248:	f7ff ffec 	bl	406224 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
  40624c:	4621      	mov	r1, r4
  40624e:	4630      	mov	r0, r6
  406250:	4b02      	ldr	r3, [pc, #8]	; (40625c <refresh_children_style+0x38>)
  406252:	4798      	blx	r3
  406254:	4604      	mov	r4, r0
    while(child != NULL) {
  406256:	2c00      	cmp	r4, #0
  406258:	d1eb      	bne.n	406232 <refresh_children_style+0xe>
}
  40625a:	bd70      	pop	{r4, r5, r6, pc}
  40625c:	004055c9 	.word	0x004055c9
  406260:	00405aa1 	.word	0x00405aa1

00406264 <lv_obj_get_click>:
{
  406264:	b510      	push	{r4, lr}
  406266:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406268:	4b06      	ldr	r3, [pc, #24]	; (406284 <lv_obj_get_click+0x20>)
  40626a:	4798      	blx	r3
  40626c:	b120      	cbz	r0, 406278 <lv_obj_get_click+0x14>
    return obj->click == 0 ? false : true;
  40626e:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  406272:	f000 0001 	and.w	r0, r0, #1
  406276:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406278:	4622      	mov	r2, r4
  40627a:	2300      	movs	r3, #0
  40627c:	4802      	ldr	r0, [pc, #8]	; (406288 <lv_obj_get_click+0x24>)
  40627e:	4903      	ldr	r1, [pc, #12]	; (40628c <lv_obj_get_click+0x28>)
  406280:	4788      	blx	r1
  406282:	e7fe      	b.n	406282 <lv_obj_get_click+0x1e>
  406284:	004157b9 	.word	0x004157b9
  406288:	004260c4 	.word	0x004260c4
  40628c:	004157c5 	.word	0x004157c5

00406290 <lv_obj_get_drag>:
{
  406290:	b510      	push	{r4, lr}
  406292:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406294:	4b06      	ldr	r3, [pc, #24]	; (4062b0 <lv_obj_get_drag+0x20>)
  406296:	4798      	blx	r3
  406298:	b120      	cbz	r0, 4062a4 <lv_obj_get_drag+0x14>
    return obj->drag == 0 ? false : true;
  40629a:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  40629e:	f3c0 0040 	ubfx	r0, r0, #1, #1
  4062a2:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062a4:	4622      	mov	r2, r4
  4062a6:	2300      	movs	r3, #0
  4062a8:	4802      	ldr	r0, [pc, #8]	; (4062b4 <lv_obj_get_drag+0x24>)
  4062aa:	4903      	ldr	r1, [pc, #12]	; (4062b8 <lv_obj_get_drag+0x28>)
  4062ac:	4788      	blx	r1
  4062ae:	e7fe      	b.n	4062ae <lv_obj_get_drag+0x1e>
  4062b0:	004157b9 	.word	0x004157b9
  4062b4:	004260c4 	.word	0x004260c4
  4062b8:	004157c5 	.word	0x004157c5

004062bc <lv_obj_get_drag_dir>:
{
  4062bc:	b510      	push	{r4, lr}
  4062be:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062c0:	4b06      	ldr	r3, [pc, #24]	; (4062dc <lv_obj_get_drag_dir+0x20>)
  4062c2:	4798      	blx	r3
  4062c4:	b120      	cbz	r0, 4062d0 <lv_obj_get_drag_dir+0x14>
    return obj->drag_dir;
  4062c6:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
}
  4062ca:	f3c0 0082 	ubfx	r0, r0, #2, #3
  4062ce:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062d0:	4622      	mov	r2, r4
  4062d2:	2300      	movs	r3, #0
  4062d4:	4802      	ldr	r0, [pc, #8]	; (4062e0 <lv_obj_get_drag_dir+0x24>)
  4062d6:	4903      	ldr	r1, [pc, #12]	; (4062e4 <lv_obj_get_drag_dir+0x28>)
  4062d8:	4788      	blx	r1
  4062da:	e7fe      	b.n	4062da <lv_obj_get_drag_dir+0x1e>
  4062dc:	004157b9 	.word	0x004157b9
  4062e0:	004260c4 	.word	0x004260c4
  4062e4:	004157c5 	.word	0x004157c5

004062e8 <lv_obj_get_drag_throw>:
{
  4062e8:	b510      	push	{r4, lr}
  4062ea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062ec:	4b06      	ldr	r3, [pc, #24]	; (406308 <lv_obj_get_drag_throw+0x20>)
  4062ee:	4798      	blx	r3
  4062f0:	b120      	cbz	r0, 4062fc <lv_obj_get_drag_throw+0x14>
    return obj->drag_throw == 0 ? false : true;
  4062f2:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
}
  4062f6:	f3c0 0080 	ubfx	r0, r0, #2, #1
  4062fa:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4062fc:	4622      	mov	r2, r4
  4062fe:	2300      	movs	r3, #0
  406300:	4802      	ldr	r0, [pc, #8]	; (40630c <lv_obj_get_drag_throw+0x24>)
  406302:	4903      	ldr	r1, [pc, #12]	; (406310 <lv_obj_get_drag_throw+0x28>)
  406304:	4788      	blx	r1
  406306:	e7fe      	b.n	406306 <lv_obj_get_drag_throw+0x1e>
  406308:	004157b9 	.word	0x004157b9
  40630c:	004260c4 	.word	0x004260c4
  406310:	004157c5 	.word	0x004157c5

00406314 <lv_obj_get_drag_parent>:
    return obj->drag_parent == 0 ? false : true;
  406314:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
}
  406318:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  40631c:	4770      	bx	lr

0040631e <lv_obj_get_gesture_parent>:
    return obj->gesture_parent == 0 ? false : true;
  40631e:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  406322:	f000 0001 	and.w	r0, r0, #1
  406326:	4770      	bx	lr

00406328 <lv_obj_get_focus_parent>:
    return obj->focus_parent == 0 ? false : true;
  406328:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
  40632c:	f3c0 0040 	ubfx	r0, r0, #1, #1
  406330:	4770      	bx	lr
	...

00406334 <lv_obj_get_base_dir>:
{
  406334:	b510      	push	{r4, lr}
  406336:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406338:	4b05      	ldr	r3, [pc, #20]	; (406350 <lv_obj_get_base_dir+0x1c>)
  40633a:	4798      	blx	r3
  40633c:	b108      	cbz	r0, 406342 <lv_obj_get_base_dir+0xe>
}
  40633e:	2000      	movs	r0, #0
  406340:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406342:	4622      	mov	r2, r4
  406344:	2300      	movs	r3, #0
  406346:	4803      	ldr	r0, [pc, #12]	; (406354 <lv_obj_get_base_dir+0x20>)
  406348:	4903      	ldr	r1, [pc, #12]	; (406358 <lv_obj_get_base_dir+0x24>)
  40634a:	4788      	blx	r1
  40634c:	e7fe      	b.n	40634c <lv_obj_get_base_dir+0x18>
  40634e:	bf00      	nop
  406350:	004157b9 	.word	0x004157b9
  406354:	004260c4 	.word	0x004260c4
  406358:	004157c5 	.word	0x004157c5

0040635c <lv_obj_create>:
{
  40635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40635e:	460d      	mov	r5, r1
    if(parent == NULL) {
  406360:	4606      	mov	r6, r0
  406362:	b150      	cbz	r0, 40637a <lv_obj_create+0x1e>
        LV_ASSERT_OBJ(parent, LV_OBJX_NAME);
  406364:	4b8e      	ldr	r3, [pc, #568]	; (4065a0 <lv_obj_create+0x244>)
  406366:	4798      	blx	r3
  406368:	2800      	cmp	r0, #0
  40636a:	f040 8086 	bne.w	40647a <lv_obj_create+0x11e>
  40636e:	4632      	mov	r2, r6
  406370:	2300      	movs	r3, #0
  406372:	488c      	ldr	r0, [pc, #560]	; (4065a4 <lv_obj_create+0x248>)
  406374:	498c      	ldr	r1, [pc, #560]	; (4065a8 <lv_obj_create+0x24c>)
  406376:	4788      	blx	r1
  406378:	e7fe      	b.n	406378 <lv_obj_create+0x1c>
        lv_disp_t * disp = lv_disp_get_default();
  40637a:	4b8c      	ldr	r3, [pc, #560]	; (4065ac <lv_obj_create+0x250>)
  40637c:	4798      	blx	r3
        if(!disp) {
  40637e:	2800      	cmp	r0, #0
  406380:	f000 81f0 	beq.w	406764 <lv_obj_create+0x408>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
  406384:	3038      	adds	r0, #56	; 0x38
  406386:	4b8a      	ldr	r3, [pc, #552]	; (4065b0 <lv_obj_create+0x254>)
  406388:	4798      	blx	r3
  40638a:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  40638c:	4b84      	ldr	r3, [pc, #528]	; (4065a0 <lv_obj_create+0x244>)
  40638e:	4798      	blx	r3
  406390:	b928      	cbnz	r0, 40639e <lv_obj_create+0x42>
  406392:	4622      	mov	r2, r4
  406394:	2300      	movs	r3, #0
  406396:	4887      	ldr	r0, [pc, #540]	; (4065b4 <lv_obj_create+0x258>)
  406398:	4983      	ldr	r1, [pc, #524]	; (4065a8 <lv_obj_create+0x24c>)
  40639a:	4788      	blx	r1
  40639c:	e7fe      	b.n	40639c <lv_obj_create+0x40>
        if(new_obj == NULL) return NULL;
  40639e:	2c00      	cmp	r4, #0
  4063a0:	f000 81de 	beq.w	406760 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  4063a4:	214c      	movs	r1, #76	; 0x4c
  4063a6:	4620      	mov	r0, r4
  4063a8:	4b83      	ldr	r3, [pc, #524]	; (4065b8 <lv_obj_create+0x25c>)
  4063aa:	4798      	blx	r3
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  4063ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  4063b0:	f36f 1346 	bfc	r3, #5, #2
  4063b4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4063b8:	4b80      	ldr	r3, [pc, #512]	; (4065bc <lv_obj_create+0x260>)
  4063ba:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4063bc:	4b80      	ldr	r3, [pc, #512]	; (4065c0 <lv_obj_create+0x264>)
  4063be:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4063c0:	2700      	movs	r7, #0
  4063c2:	61a7      	str	r7, [r4, #24]
        new_obj->coords.x1    = 0;
  4063c4:	8227      	strh	r7, [r4, #16]
        new_obj->coords.y1    = 0;
  4063c6:	8267      	strh	r7, [r4, #18]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
  4063c8:	4638      	mov	r0, r7
  4063ca:	4b7e      	ldr	r3, [pc, #504]	; (4065c4 <lv_obj_create+0x268>)
  4063cc:	4798      	blx	r3
  4063ce:	b283      	uxth	r3, r0
  4063d0:	3b01      	subs	r3, #1
  4063d2:	82a3      	strh	r3, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
  4063d4:	4638      	mov	r0, r7
  4063d6:	4b7c      	ldr	r3, [pc, #496]	; (4065c8 <lv_obj_create+0x26c>)
  4063d8:	4798      	blx	r3
  4063da:	b283      	uxth	r3, r0
  4063dc:	3b01      	subs	r3, #1
  4063de:	82e3      	strh	r3, [r4, #22]
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
  4063e0:	214c      	movs	r1, #76	; 0x4c
  4063e2:	1d20      	adds	r0, r4, #4
  4063e4:	4b79      	ldr	r3, [pc, #484]	; (4065cc <lv_obj_create+0x270>)
  4063e6:	4798      	blx	r3
    new_obj->ext_draw_pad = 0;
  4063e8:	2300      	movs	r3, #0
  4063ea:	8663      	strh	r3, [r4, #50]	; 0x32
    new_obj->ext_click_pad_hor = 0;
  4063ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    new_obj->ext_click_pad_ver = 0;
  4063f0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    new_obj->realign.align        = LV_ALIGN_CENTER;
  4063f4:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    new_obj->realign.xofs         = 0;
  4063f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    new_obj->realign.yofs         = 0;
  4063fc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    new_obj->realign.base         = NULL;
  406400:	6423      	str	r3, [r4, #64]	; 0x40
    new_obj->realign.auto_realign = 0;
  406402:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
  406406:	f363 0200 	bfi	r2, r3, #0, #1
  40640a:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
    new_obj->group_p = NULL;
  40640e:	63a3      	str	r3, [r4, #56]	; 0x38
    new_obj->adv_hittest  = 0;
  406410:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
    new_obj->click        = 1;
  406414:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    new_obj->drag         = 0;
  406418:	f041 0101 	orr.w	r1, r1, #1
    new_obj->drag_dir     = LV_DRAG_DIR_BOTH;
  40641c:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406420:	2003      	movs	r0, #3
  406422:	f360 0284 	bfi	r2, r0, #2, #3
    new_obj->protect      = LV_PROTECT_NONE;
  406426:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    new_obj->parent_event = 0;
  40642a:	f001 01c1 	and.w	r1, r1, #193	; 0xc1
  40642e:	f363 1186 	bfi	r1, r3, #6, #1
  406432:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    new_obj->gesture_parent = parent ? 1 : 0;
  406436:	1af1      	subs	r1, r6, r3
  406438:	bf18      	it	ne
  40643a:	2101      	movne	r1, #1
  40643c:	f361 0200 	bfi	r2, r1, #0, #1
    new_obj->focus_parent  = 0;
  406440:	f363 0241 	bfi	r2, r3, #1, #1
  406444:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    new_obj->state = LV_STATE_DEFAULT;
  406448:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    new_obj->ext_attr = NULL;
  40644c:	6263      	str	r3, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
  40644e:	f104 0728 	add.w	r7, r4, #40	; 0x28
  406452:	4638      	mov	r0, r7
  406454:	4b5e      	ldr	r3, [pc, #376]	; (4065d0 <lv_obj_create+0x274>)
  406456:	4798      	blx	r3
    if(copy == NULL) {
  406458:	2d00      	cmp	r5, #0
  40645a:	f000 8096 	beq.w	40658a <lv_obj_create+0x22e>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
  40645e:	f105 0128 	add.w	r1, r5, #40	; 0x28
  406462:	4638      	mov	r0, r7
  406464:	4b5b      	ldr	r3, [pc, #364]	; (4065d4 <lv_obj_create+0x278>)
  406466:	4798      	blx	r3
    if(copy != NULL) {
  406468:	2d00      	cmp	r5, #0
  40646a:	f000 8170 	beq.w	40674e <lv_obj_create+0x3f2>
        lv_area_copy(&new_obj->coords, &copy->coords);
  40646e:	f105 0110 	add.w	r1, r5, #16
    uint8_t * d8 = (uint8_t *)dst;
  406472:	f104 0210 	add.w	r2, r4, #16
  406476:	2308      	movs	r3, #8
  406478:	e0bb      	b.n	4065f2 <lv_obj_create+0x296>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
  40647a:	1d30      	adds	r0, r6, #4
  40647c:	4b4c      	ldr	r3, [pc, #304]	; (4065b0 <lv_obj_create+0x254>)
  40647e:	4798      	blx	r3
  406480:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_obj);
  406482:	4b47      	ldr	r3, [pc, #284]	; (4065a0 <lv_obj_create+0x244>)
  406484:	4798      	blx	r3
  406486:	2800      	cmp	r0, #0
  406488:	d047      	beq.n	40651a <lv_obj_create+0x1be>
        if(new_obj == NULL) return NULL;
  40648a:	2c00      	cmp	r4, #0
  40648c:	f000 8168 	beq.w	406760 <lv_obj_create+0x404>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
  406490:	214c      	movs	r1, #76	; 0x4c
  406492:	4620      	mov	r0, r4
  406494:	4b48      	ldr	r3, [pc, #288]	; (4065b8 <lv_obj_create+0x25c>)
  406496:	4798      	blx	r3
        new_obj->parent = parent;
  406498:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
  40649a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  40649e:	f36f 1346 	bfc	r3, #5, #2
  4064a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->signal_cb = lv_obj_signal;
  4064a6:	4b45      	ldr	r3, [pc, #276]	; (4065bc <lv_obj_create+0x260>)
  4064a8:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
  4064aa:	4b45      	ldr	r3, [pc, #276]	; (4065c0 <lv_obj_create+0x264>)
  4064ac:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
  4064ae:	2000      	movs	r0, #0
  4064b0:	61a0      	str	r0, [r4, #24]
        new_obj->coords.y1    = parent->coords.y1;
  4064b2:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  4064b6:	8263      	strh	r3, [r4, #18]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  4064b8:	8a77      	ldrh	r7, [r6, #18]
  4064ba:	4b47      	ldr	r3, [pc, #284]	; (4065d8 <lv_obj_create+0x27c>)
  4064bc:	4798      	blx	r3
  4064be:	2332      	movs	r3, #50	; 0x32
  4064c0:	fb03 f300 	mul.w	r3, r3, r0
  4064c4:	3350      	adds	r3, #80	; 0x50
  4064c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4064ca:	da2c      	bge.n	406526 <lv_obj_create+0x1ca>
  4064cc:	2301      	movs	r3, #1
  4064ce:	443b      	add	r3, r7
  4064d0:	82e3      	strh	r3, [r4, #22]
        if(lv_obj_get_base_dir(new_obj) == LV_BIDI_DIR_RTL) {
  4064d2:	4620      	mov	r0, r4
  4064d4:	4b41      	ldr	r3, [pc, #260]	; (4065dc <lv_obj_create+0x280>)
  4064d6:	4798      	blx	r3
  4064d8:	2801      	cmp	r0, #1
  4064da:	d033      	beq.n	406544 <lv_obj_create+0x1e8>
            new_obj->coords.x1    = parent->coords.x1;
  4064dc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  4064e0:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  4064e2:	8a37      	ldrh	r7, [r6, #16]
  4064e4:	2000      	movs	r0, #0
  4064e6:	4b3c      	ldr	r3, [pc, #240]	; (4065d8 <lv_obj_create+0x27c>)
  4064e8:	4798      	blx	r3
  4064ea:	2364      	movs	r3, #100	; 0x64
  4064ec:	fb03 f300 	mul.w	r3, r3, r0
  4064f0:	3350      	adds	r3, #80	; 0x50
  4064f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  4064f6:	db46      	blt.n	406586 <lv_obj_create+0x22a>
  4064f8:	2000      	movs	r0, #0
  4064fa:	4b37      	ldr	r3, [pc, #220]	; (4065d8 <lv_obj_create+0x27c>)
  4064fc:	4798      	blx	r3
  4064fe:	2364      	movs	r3, #100	; 0x64
  406500:	fb03 f300 	mul.w	r3, r3, r0
  406504:	3350      	adds	r3, #80	; 0x50
  406506:	4a36      	ldr	r2, [pc, #216]	; (4065e0 <lv_obj_create+0x284>)
  406508:	fb82 1203 	smull	r1, r2, r2, r3
  40650c:	17db      	asrs	r3, r3, #31
  40650e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406512:	b29b      	uxth	r3, r3
  406514:	443b      	add	r3, r7
  406516:	82a3      	strh	r3, [r4, #20]
  406518:	e762      	b.n	4063e0 <lv_obj_create+0x84>
        LV_ASSERT_MEM(new_obj);
  40651a:	4622      	mov	r2, r4
  40651c:	2300      	movs	r3, #0
  40651e:	4825      	ldr	r0, [pc, #148]	; (4065b4 <lv_obj_create+0x258>)
  406520:	4921      	ldr	r1, [pc, #132]	; (4065a8 <lv_obj_create+0x24c>)
  406522:	4788      	blx	r1
  406524:	e7fe      	b.n	406524 <lv_obj_create+0x1c8>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
  406526:	2000      	movs	r0, #0
  406528:	4b2b      	ldr	r3, [pc, #172]	; (4065d8 <lv_obj_create+0x27c>)
  40652a:	4798      	blx	r3
  40652c:	2332      	movs	r3, #50	; 0x32
  40652e:	fb03 f300 	mul.w	r3, r3, r0
  406532:	3350      	adds	r3, #80	; 0x50
  406534:	4a2a      	ldr	r2, [pc, #168]	; (4065e0 <lv_obj_create+0x284>)
  406536:	fb82 1203 	smull	r1, r2, r2, r3
  40653a:	17db      	asrs	r3, r3, #31
  40653c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  406540:	b29b      	uxth	r3, r3
  406542:	e7c4      	b.n	4064ce <lv_obj_create+0x172>
            new_obj->coords.x2    = parent->coords.x2;
  406544:	f9b6 3014 	ldrsh.w	r3, [r6, #20]
  406548:	82a3      	strh	r3, [r4, #20]
            new_obj->coords.x1    = parent->coords.x2 - LV_OBJ_DEF_WIDTH;
  40654a:	8ab7      	ldrh	r7, [r6, #20]
  40654c:	2000      	movs	r0, #0
  40654e:	4b22      	ldr	r3, [pc, #136]	; (4065d8 <lv_obj_create+0x27c>)
  406550:	4798      	blx	r3
  406552:	2364      	movs	r3, #100	; 0x64
  406554:	fb03 f300 	mul.w	r3, r3, r0
  406558:	3350      	adds	r3, #80	; 0x50
  40655a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  40655e:	db10      	blt.n	406582 <lv_obj_create+0x226>
  406560:	2000      	movs	r0, #0
  406562:	4b1d      	ldr	r3, [pc, #116]	; (4065d8 <lv_obj_create+0x27c>)
  406564:	4798      	blx	r3
  406566:	2364      	movs	r3, #100	; 0x64
  406568:	fb03 f300 	mul.w	r3, r3, r0
  40656c:	3350      	adds	r3, #80	; 0x50
  40656e:	4a1c      	ldr	r2, [pc, #112]	; (4065e0 <lv_obj_create+0x284>)
  406570:	fb82 1203 	smull	r1, r2, r2, r3
  406574:	17db      	asrs	r3, r3, #31
  406576:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
  40657a:	b29b      	uxth	r3, r3
  40657c:	1afb      	subs	r3, r7, r3
  40657e:	8223      	strh	r3, [r4, #16]
  406580:	e72e      	b.n	4063e0 <lv_obj_create+0x84>
  406582:	2301      	movs	r3, #1
  406584:	e7fa      	b.n	40657c <lv_obj_create+0x220>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
  406586:	2301      	movs	r3, #1
  406588:	e7c4      	b.n	406514 <lv_obj_create+0x1b8>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
  40658a:	b126      	cbz	r6, 406596 <lv_obj_create+0x23a>
  40658c:	2102      	movs	r1, #2
  40658e:	4620      	mov	r0, r4
  406590:	4b14      	ldr	r3, [pc, #80]	; (4065e4 <lv_obj_create+0x288>)
  406592:	4798      	blx	r3
  406594:	e768      	b.n	406468 <lv_obj_create+0x10c>
        else lv_theme_apply(new_obj, LV_THEME_SCR);
  406596:	2101      	movs	r1, #1
  406598:	4620      	mov	r0, r4
  40659a:	4b12      	ldr	r3, [pc, #72]	; (4065e4 <lv_obj_create+0x288>)
  40659c:	4798      	blx	r3
  40659e:	e763      	b.n	406468 <lv_obj_create+0x10c>
  4065a0:	004157b9 	.word	0x004157b9
  4065a4:	004260c4 	.word	0x004260c4
  4065a8:	004157c5 	.word	0x004157c5
  4065ac:	00414625 	.word	0x00414625
  4065b0:	00415a31 	.word	0x00415a31
  4065b4:	004260b0 	.word	0x004260b0
  4065b8:	004163f5 	.word	0x004163f5
  4065bc:	00408d29 	.word	0x00408d29
  4065c0:	00408159 	.word	0x00408159
  4065c4:	00414631 	.word	0x00414631
  4065c8:	00414661 	.word	0x00414661
  4065cc:	00415a1f 	.word	0x00415a1f
  4065d0:	004098a9 	.word	0x004098a9
  4065d4:	0040a785 	.word	0x0040a785
  4065d8:	0041468d 	.word	0x0041468d
  4065dc:	00406335 	.word	0x00406335
  4065e0:	66666667 	.word	0x66666667
  4065e4:	0041722d 	.word	0x0041722d
        *d8 = *s8;
  4065e8:	f811 0b01 	ldrb.w	r0, [r1], #1
  4065ec:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4065f0:	3b01      	subs	r3, #1
    while(len) {
  4065f2:	2b00      	cmp	r3, #0
  4065f4:	d1f8      	bne.n	4065e8 <lv_obj_create+0x28c>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
  4065f6:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
  4065fa:	8663      	strh	r3, [r4, #50]	; 0x32
        new_obj->ext_click_pad_hor = copy->ext_click_pad_hor;
  4065fc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
  406600:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        new_obj->ext_click_pad_ver = copy->ext_click_pad_ver;
  406604:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
  406608:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
        new_obj->base_dir = copy->base_dir;
  40660c:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406610:	f3c3 1341 	ubfx	r3, r3, #5, #2
  406614:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406618:	f363 1246 	bfi	r2, r3, #5, #2
  40661c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->realign.align        = copy->realign.align;
  406620:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
  406624:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        new_obj->realign.xofs         = copy->realign.xofs;
  406628:	f9b5 3044 	ldrsh.w	r3, [r5, #68]	; 0x44
  40662c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
        new_obj->realign.yofs         = copy->realign.yofs;
  406630:	f9b5 3046 	ldrsh.w	r3, [r5, #70]	; 0x46
  406634:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        new_obj->realign.base         = copy->realign.base;
  406638:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  40663a:	6423      	str	r3, [r4, #64]	; 0x40
        new_obj->realign.auto_realign = copy->realign.auto_realign;
  40663c:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
  406640:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406644:	f362 0300 	bfi	r3, r2, #0, #1
  406648:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
        new_obj->event_cb = copy->event_cb;
  40664c:	69ab      	ldr	r3, [r5, #24]
  40664e:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
  406650:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406654:	09db      	lsrs	r3, r3, #7
  406656:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40665a:	f363 12c7 	bfi	r2, r3, #7, #1
  40665e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->click        = copy->click;
  406662:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
  406666:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  40666a:	f362 0300 	bfi	r3, r2, #0, #1
  40666e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->drag         = copy->drag;
  406672:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  406676:	f3c3 0340 	ubfx	r3, r3, #1, #1
  40667a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  40667e:	f363 0241 	bfi	r2, r3, #1, #1
  406682:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_dir     = copy->drag_dir;
  406686:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  40668a:	f3c3 0382 	ubfx	r3, r3, #2, #3
  40668e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  406692:	f363 0284 	bfi	r2, r3, #2, #3
  406696:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        new_obj->drag_throw   = copy->drag_throw;
  40669a:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  40669e:	f3c3 0380 	ubfx	r3, r3, #2, #1
  4066a2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
  4066a6:	f363 0282 	bfi	r2, r3, #2, #1
  4066aa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->drag_parent  = copy->drag_parent;
  4066ae:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4066b2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  4066b6:	b2d2      	uxtb	r2, r2
  4066b8:	f363 02c3 	bfi	r2, r3, #3, #1
  4066bc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->hidden       = copy->hidden;
  4066c0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4066c4:	f3c3 1300 	ubfx	r3, r3, #4, #1
  4066c8:	b2d2      	uxtb	r2, r2
  4066ca:	f363 1204 	bfi	r2, r3, #4, #1
  4066ce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->top          = copy->top;
  4066d2:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4066d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
  4066da:	b2d2      	uxtb	r2, r2
  4066dc:	f363 1245 	bfi	r2, r3, #5, #1
  4066e0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->parent_event = copy->parent_event;
  4066e4:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
  4066e8:	f3c3 1380 	ubfx	r3, r3, #6, #1
  4066ec:	b2d2      	uxtb	r2, r2
  4066ee:	f363 1286 	bfi	r2, r3, #6, #1
  4066f2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        new_obj->protect      = copy->protect;
  4066f6:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
  4066fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        new_obj->gesture_parent = copy->gesture_parent;
  4066fe:	f895 2035 	ldrb.w	r2, [r5, #53]	; 0x35
  406702:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  406706:	f362 0300 	bfi	r3, r2, #0, #1
  40670a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        new_obj->focus_parent = copy->focus_parent;
  40670e:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  406712:	f3c3 0340 	ubfx	r3, r3, #1, #1
  406716:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  40671a:	f363 0241 	bfi	r2, r3, #1, #1
  40671e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(copy->group_p != NULL) {
  406722:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  406724:	b110      	cbz	r0, 40672c <lv_obj_create+0x3d0>
            lv_group_add_obj(copy->group_p, new_obj);
  406726:	4621      	mov	r1, r4
  406728:	4b0f      	ldr	r3, [pc, #60]	; (406768 <lv_obj_create+0x40c>)
  40672a:	4798      	blx	r3
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
  40672c:	4628      	mov	r0, r5
  40672e:	4b0f      	ldr	r3, [pc, #60]	; (40676c <lv_obj_create+0x410>)
  406730:	4798      	blx	r3
  406732:	b160      	cbz	r0, 40674e <lv_obj_create+0x3f2>
  406734:	b15e      	cbz	r6, 40674e <lv_obj_create+0x3f2>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
  406736:	4628      	mov	r0, r5
  406738:	4b0d      	ldr	r3, [pc, #52]	; (406770 <lv_obj_create+0x414>)
  40673a:	4798      	blx	r3
  40673c:	4607      	mov	r7, r0
  40673e:	4628      	mov	r0, r5
  406740:	4b0c      	ldr	r3, [pc, #48]	; (406774 <lv_obj_create+0x418>)
  406742:	4798      	blx	r3
  406744:	4602      	mov	r2, r0
  406746:	4639      	mov	r1, r7
  406748:	4620      	mov	r0, r4
  40674a:	4b0b      	ldr	r3, [pc, #44]	; (406778 <lv_obj_create+0x41c>)
  40674c:	4798      	blx	r3
    if(parent != NULL) {
  40674e:	b13e      	cbz	r6, 406760 <lv_obj_create+0x404>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
  406750:	69f3      	ldr	r3, [r6, #28]
  406752:	4622      	mov	r2, r4
  406754:	2101      	movs	r1, #1
  406756:	4630      	mov	r0, r6
  406758:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
  40675a:	4620      	mov	r0, r4
  40675c:	4b07      	ldr	r3, [pc, #28]	; (40677c <lv_obj_create+0x420>)
  40675e:	4798      	blx	r3
}
  406760:	4620      	mov	r0, r4
  406762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NULL;
  406764:	4634      	mov	r4, r6
  406766:	e7fb      	b.n	406760 <lv_obj_create+0x404>
  406768:	004033f1 	.word	0x004033f1
  40676c:	004054f5 	.word	0x004054f5
  406770:	00405649 	.word	0x00405649
  406774:	00405689 	.word	0x00405689
  406778:	00405b85 	.word	0x00405b85
  40677c:	00405aa1 	.word	0x00405aa1

00406780 <lv_obj_set_size>:
{
  406780:	b570      	push	{r4, r5, r6, lr}
  406782:	b082      	sub	sp, #8
  406784:	4604      	mov	r4, r0
  406786:	460d      	mov	r5, r1
  406788:	4616      	mov	r6, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40678a:	4b2e      	ldr	r3, [pc, #184]	; (406844 <lv_obj_set_size+0xc4>)
  40678c:	4798      	blx	r3
  40678e:	b928      	cbnz	r0, 40679c <lv_obj_set_size+0x1c>
  406790:	4622      	mov	r2, r4
  406792:	2300      	movs	r3, #0
  406794:	482c      	ldr	r0, [pc, #176]	; (406848 <lv_obj_set_size+0xc8>)
  406796:	492d      	ldr	r1, [pc, #180]	; (40684c <lv_obj_set_size+0xcc>)
  406798:	4788      	blx	r1
  40679a:	e7fe      	b.n	40679a <lv_obj_set_size+0x1a>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  40679c:	4620      	mov	r0, r4
  40679e:	4b2c      	ldr	r3, [pc, #176]	; (406850 <lv_obj_set_size+0xd0>)
  4067a0:	4798      	blx	r3
  4067a2:	42a8      	cmp	r0, r5
  4067a4:	d028      	beq.n	4067f8 <lv_obj_set_size+0x78>
    lv_obj_invalidate(obj);
  4067a6:	4620      	mov	r0, r4
  4067a8:	4b2a      	ldr	r3, [pc, #168]	; (406854 <lv_obj_set_size+0xd4>)
  4067aa:	4798      	blx	r3
    lv_obj_get_coords(obj, &ori);
  4067ac:	4669      	mov	r1, sp
  4067ae:	4620      	mov	r0, r4
  4067b0:	4b29      	ldr	r3, [pc, #164]	; (406858 <lv_obj_set_size+0xd8>)
  4067b2:	4798      	blx	r3
    obj->coords.y2 = obj->coords.y1 + h - 1;
  4067b4:	8a63      	ldrh	r3, [r4, #18]
  4067b6:	4433      	add	r3, r6
  4067b8:	b29b      	uxth	r3, r3
  4067ba:	3b01      	subs	r3, #1
  4067bc:	82e3      	strh	r3, [r4, #22]
    if(lv_obj_get_base_dir(obj) == LV_BIDI_DIR_RTL) {
  4067be:	4620      	mov	r0, r4
  4067c0:	4b26      	ldr	r3, [pc, #152]	; (40685c <lv_obj_set_size+0xdc>)
  4067c2:	4798      	blx	r3
  4067c4:	2801      	cmp	r0, #1
  4067c6:	d01d      	beq.n	406804 <lv_obj_set_size+0x84>
        obj->coords.x2 = obj->coords.x1 + w - 1;
  4067c8:	8a23      	ldrh	r3, [r4, #16]
  4067ca:	442b      	add	r3, r5
  4067cc:	b29b      	uxth	r3, r3
  4067ce:	3b01      	subs	r3, #1
  4067d0:	82a3      	strh	r3, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
  4067d2:	69e3      	ldr	r3, [r4, #28]
  4067d4:	466a      	mov	r2, sp
  4067d6:	2102      	movs	r1, #2
  4067d8:	4620      	mov	r0, r4
  4067da:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  4067dc:	4620      	mov	r0, r4
  4067de:	4b20      	ldr	r3, [pc, #128]	; (406860 <lv_obj_set_size+0xe0>)
  4067e0:	4798      	blx	r3
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
  4067e2:	b118      	cbz	r0, 4067ec <lv_obj_set_size+0x6c>
  4067e4:	69c5      	ldr	r5, [r0, #28]
  4067e6:	4622      	mov	r2, r4
  4067e8:	2101      	movs	r1, #1
  4067ea:	47a8      	blx	r5
    _LV_LL_READ(obj->child_ll, i) {
  4067ec:	1d26      	adds	r6, r4, #4
  4067ee:	4630      	mov	r0, r6
  4067f0:	4b1c      	ldr	r3, [pc, #112]	; (406864 <lv_obj_set_size+0xe4>)
  4067f2:	4798      	blx	r3
  4067f4:	4605      	mov	r5, r0
  4067f6:	e015      	b.n	406824 <lv_obj_set_size+0xa4>
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
  4067f8:	4620      	mov	r0, r4
  4067fa:	4b1b      	ldr	r3, [pc, #108]	; (406868 <lv_obj_set_size+0xe8>)
  4067fc:	4798      	blx	r3
  4067fe:	42b0      	cmp	r0, r6
  406800:	d1d1      	bne.n	4067a6 <lv_obj_set_size+0x26>
  406802:	e019      	b.n	406838 <lv_obj_set_size+0xb8>
        obj->coords.x1 = obj->coords.x2 - w + 1;
  406804:	8aa3      	ldrh	r3, [r4, #20]
  406806:	1b5b      	subs	r3, r3, r5
  406808:	b29b      	uxth	r3, r3
  40680a:	3301      	adds	r3, #1
  40680c:	8223      	strh	r3, [r4, #16]
  40680e:	e7e0      	b.n	4067d2 <lv_obj_set_size+0x52>
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
  406810:	69eb      	ldr	r3, [r5, #28]
  406812:	466a      	mov	r2, sp
  406814:	2103      	movs	r1, #3
  406816:	4628      	mov	r0, r5
  406818:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
  40681a:	4629      	mov	r1, r5
  40681c:	4630      	mov	r0, r6
  40681e:	4b13      	ldr	r3, [pc, #76]	; (40686c <lv_obj_set_size+0xec>)
  406820:	4798      	blx	r3
  406822:	4605      	mov	r5, r0
  406824:	2d00      	cmp	r5, #0
  406826:	d1f3      	bne.n	406810 <lv_obj_set_size+0x90>
    lv_obj_invalidate(obj);
  406828:	4620      	mov	r0, r4
  40682a:	4b0a      	ldr	r3, [pc, #40]	; (406854 <lv_obj_set_size+0xd4>)
  40682c:	4798      	blx	r3
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  40682e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
  406832:	f013 0f01 	tst.w	r3, #1
  406836:	d101      	bne.n	40683c <lv_obj_set_size+0xbc>
}
  406838:	b002      	add	sp, #8
  40683a:	bd70      	pop	{r4, r5, r6, pc}
    if(obj->realign.auto_realign) lv_obj_realign(obj);
  40683c:	4620      	mov	r0, r4
  40683e:	4b0c      	ldr	r3, [pc, #48]	; (406870 <lv_obj_set_size+0xf0>)
  406840:	4798      	blx	r3
  406842:	e7f9      	b.n	406838 <lv_obj_set_size+0xb8>
  406844:	004157b9 	.word	0x004157b9
  406848:	004260c4 	.word	0x004260c4
  40684c:	004157c5 	.word	0x004157c5
  406850:	004056c9 	.word	0x004056c9
  406854:	00405aa1 	.word	0x00405aa1
  406858:	00405609 	.word	0x00405609
  40685c:	00406335 	.word	0x00406335
  406860:	004054f5 	.word	0x004054f5
  406864:	00415ac9 	.word	0x00415ac9
  406868:	004056f9 	.word	0x004056f9
  40686c:	00415add 	.word	0x00415add
  406870:	004061bd 	.word	0x004061bd

00406874 <lv_obj_set_width>:
{
  406874:	b538      	push	{r3, r4, r5, lr}
  406876:	4604      	mov	r4, r0
  406878:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40687a:	4b09      	ldr	r3, [pc, #36]	; (4068a0 <lv_obj_set_width+0x2c>)
  40687c:	4798      	blx	r3
  40687e:	b928      	cbnz	r0, 40688c <lv_obj_set_width+0x18>
  406880:	4622      	mov	r2, r4
  406882:	2300      	movs	r3, #0
  406884:	4807      	ldr	r0, [pc, #28]	; (4068a4 <lv_obj_set_width+0x30>)
  406886:	4908      	ldr	r1, [pc, #32]	; (4068a8 <lv_obj_set_width+0x34>)
  406888:	4788      	blx	r1
  40688a:	e7fe      	b.n	40688a <lv_obj_set_width+0x16>
    lv_obj_set_size(obj, w, lv_obj_get_height(obj));
  40688c:	4620      	mov	r0, r4
  40688e:	4b07      	ldr	r3, [pc, #28]	; (4068ac <lv_obj_set_width+0x38>)
  406890:	4798      	blx	r3
  406892:	4602      	mov	r2, r0
  406894:	4629      	mov	r1, r5
  406896:	4620      	mov	r0, r4
  406898:	4b05      	ldr	r3, [pc, #20]	; (4068b0 <lv_obj_set_width+0x3c>)
  40689a:	4798      	blx	r3
  40689c:	bd38      	pop	{r3, r4, r5, pc}
  40689e:	bf00      	nop
  4068a0:	004157b9 	.word	0x004157b9
  4068a4:	004260c4 	.word	0x004260c4
  4068a8:	004157c5 	.word	0x004157c5
  4068ac:	004056f9 	.word	0x004056f9
  4068b0:	00406781 	.word	0x00406781

004068b4 <lv_obj_set_height>:
{
  4068b4:	b538      	push	{r3, r4, r5, lr}
  4068b6:	4604      	mov	r4, r0
  4068b8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4068ba:	4b09      	ldr	r3, [pc, #36]	; (4068e0 <lv_obj_set_height+0x2c>)
  4068bc:	4798      	blx	r3
  4068be:	b928      	cbnz	r0, 4068cc <lv_obj_set_height+0x18>
  4068c0:	4622      	mov	r2, r4
  4068c2:	2300      	movs	r3, #0
  4068c4:	4807      	ldr	r0, [pc, #28]	; (4068e4 <lv_obj_set_height+0x30>)
  4068c6:	4908      	ldr	r1, [pc, #32]	; (4068e8 <lv_obj_set_height+0x34>)
  4068c8:	4788      	blx	r1
  4068ca:	e7fe      	b.n	4068ca <lv_obj_set_height+0x16>
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
  4068cc:	4620      	mov	r0, r4
  4068ce:	4b07      	ldr	r3, [pc, #28]	; (4068ec <lv_obj_set_height+0x38>)
  4068d0:	4798      	blx	r3
  4068d2:	462a      	mov	r2, r5
  4068d4:	4601      	mov	r1, r0
  4068d6:	4620      	mov	r0, r4
  4068d8:	4b05      	ldr	r3, [pc, #20]	; (4068f0 <lv_obj_set_height+0x3c>)
  4068da:	4798      	blx	r3
  4068dc:	bd38      	pop	{r3, r4, r5, pc}
  4068de:	bf00      	nop
  4068e0:	004157b9 	.word	0x004157b9
  4068e4:	004260c4 	.word	0x004260c4
  4068e8:	004157c5 	.word	0x004157c5
  4068ec:	004056c9 	.word	0x004056c9
  4068f0:	00406781 	.word	0x00406781

004068f4 <lv_obj_is_protected>:
{
  4068f4:	b538      	push	{r3, r4, r5, lr}
  4068f6:	4604      	mov	r4, r0
  4068f8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4068fa:	4b08      	ldr	r3, [pc, #32]	; (40691c <lv_obj_is_protected+0x28>)
  4068fc:	4798      	blx	r3
  4068fe:	b130      	cbz	r0, 40690e <lv_obj_is_protected+0x1a>
    return (obj->protect & prot) == 0 ? false : true;
  406900:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
  406904:	422b      	tst	r3, r5
}
  406906:	bf14      	ite	ne
  406908:	2001      	movne	r0, #1
  40690a:	2000      	moveq	r0, #0
  40690c:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  40690e:	4622      	mov	r2, r4
  406910:	2300      	movs	r3, #0
  406912:	4803      	ldr	r0, [pc, #12]	; (406920 <lv_obj_is_protected+0x2c>)
  406914:	4903      	ldr	r1, [pc, #12]	; (406924 <lv_obj_is_protected+0x30>)
  406916:	4788      	blx	r1
  406918:	e7fe      	b.n	406918 <lv_obj_is_protected+0x24>
  40691a:	bf00      	nop
  40691c:	004157b9 	.word	0x004157b9
  406920:	004260c4 	.word	0x004260c4
  406924:	004157c5 	.word	0x004157c5

00406928 <lv_obj_get_state>:
{
  406928:	b530      	push	{r4, r5, lr}
  40692a:	b083      	sub	sp, #12
  40692c:	4604      	mov	r4, r0
  40692e:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406930:	4b0d      	ldr	r3, [pc, #52]	; (406968 <lv_obj_get_state+0x40>)
  406932:	4798      	blx	r3
  406934:	b128      	cbz	r0, 406942 <lv_obj_get_state+0x1a>
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
  406936:	2d3f      	cmp	r5, #63	; 0x3f
  406938:	d809      	bhi.n	40694e <lv_obj_get_state+0x26>
  40693a:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
}
  40693e:	b003      	add	sp, #12
  406940:	bd30      	pop	{r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  406942:	4622      	mov	r2, r4
  406944:	2300      	movs	r3, #0
  406946:	4809      	ldr	r0, [pc, #36]	; (40696c <lv_obj_get_state+0x44>)
  406948:	4909      	ldr	r1, [pc, #36]	; (406970 <lv_obj_get_state+0x48>)
  40694a:	4788      	blx	r1
  40694c:	e7fe      	b.n	40694c <lv_obj_get_state+0x24>
    info.part = part;
  40694e:	f88d 5004 	strb.w	r5, [sp, #4]
    info.result = LV_STATE_DEFAULT;
  406952:	2300      	movs	r3, #0
  406954:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
  406958:	aa01      	add	r2, sp, #4
  40695a:	2109      	movs	r1, #9
  40695c:	4620      	mov	r0, r4
  40695e:	4b05      	ldr	r3, [pc, #20]	; (406974 <lv_obj_get_state+0x4c>)
  406960:	4798      	blx	r3
    return info.result;
  406962:	f89d 0005 	ldrb.w	r0, [sp, #5]
  406966:	e7ea      	b.n	40693e <lv_obj_get_state+0x16>
  406968:	004157b9 	.word	0x004157b9
  40696c:	004260c4 	.word	0x004260c4
  406970:	004157c5 	.word	0x004157c5
  406974:	0040544d 	.word	0x0040544d

00406978 <_lv_obj_get_style_color>:
{
  406978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40697c:	b083      	sub	sp, #12
  40697e:	4606      	mov	r6, r0
  406980:	460d      	mov	r5, r1
  406982:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406984:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406988:	4614      	mov	r4, r2
  40698a:	e006      	b.n	40699a <_lv_obj_get_style_color+0x22>
        if(res == LV_RES_OK) return value_act;
  40698c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  406990:	e026      	b.n	4069e0 <_lv_obj_get_style_color+0x68>
        parent = lv_obj_get_parent(parent);
  406992:	4630      	mov	r0, r6
  406994:	4b15      	ldr	r3, [pc, #84]	; (4069ec <_lv_obj_get_style_color+0x74>)
  406996:	4798      	blx	r3
  406998:	4606      	mov	r6, r0
    while(parent) {
  40699a:	b1d6      	cbz	r6, 4069d2 <_lv_obj_get_style_color+0x5a>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  40699c:	4629      	mov	r1, r5
  40699e:	4630      	mov	r0, r6
  4069a0:	4b13      	ldr	r3, [pc, #76]	; (4069f0 <_lv_obj_get_style_color+0x78>)
  4069a2:	4798      	blx	r3
  4069a4:	4607      	mov	r7, r0
        lv_state_t state = lv_obj_get_state(parent, part);
  4069a6:	4629      	mov	r1, r5
  4069a8:	4630      	mov	r0, r6
  4069aa:	4b12      	ldr	r3, [pc, #72]	; (4069f4 <_lv_obj_get_style_color+0x7c>)
  4069ac:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  4069ae:	0204      	lsls	r4, r0, #8
  4069b0:	b2a4      	uxth	r4, r4
  4069b2:	4444      	add	r4, r8
  4069b4:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
  4069b6:	aa01      	add	r2, sp, #4
  4069b8:	4621      	mov	r1, r4
  4069ba:	4638      	mov	r0, r7
  4069bc:	4b0e      	ldr	r3, [pc, #56]	; (4069f8 <_lv_obj_get_style_color+0x80>)
  4069be:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  4069c0:	2801      	cmp	r0, #1
  4069c2:	d0e3      	beq.n	40698c <_lv_obj_get_style_color+0x14>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  4069c4:	f019 0f80 	tst.w	r9, #128	; 0x80
  4069c8:	d003      	beq.n	4069d2 <_lv_obj_get_style_color+0x5a>
        if(part != LV_OBJ_PART_MAIN) {
  4069ca:	2d00      	cmp	r5, #0
  4069cc:	d0e1      	beq.n	406992 <_lv_obj_get_style_color+0x1a>
            part = LV_OBJ_PART_MAIN;
  4069ce:	2500      	movs	r5, #0
  4069d0:	e7e3      	b.n	40699a <_lv_obj_get_style_color+0x22>
    prop = prop & (~LV_STYLE_STATE_MASK);
  4069d2:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
  4069d6:	3c29      	subs	r4, #41	; 0x29
  4069d8:	2c01      	cmp	r4, #1
  4069da:	d904      	bls.n	4069e6 <_lv_obj_get_style_color+0x6e>
    return LV_COLOR_BLACK;
  4069dc:	f04f 0000 	mov.w	r0, #0
}
  4069e0:	b003      	add	sp, #12
  4069e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return LV_COLOR_WHITE;
  4069e6:	4b05      	ldr	r3, [pc, #20]	; (4069fc <_lv_obj_get_style_color+0x84>)
  4069e8:	8818      	ldrh	r0, [r3, #0]
  4069ea:	e7f9      	b.n	4069e0 <_lv_obj_get_style_color+0x68>
  4069ec:	004054f5 	.word	0x004054f5
  4069f0:	00405755 	.word	0x00405755
  4069f4:	00406929 	.word	0x00406929
  4069f8:	0040aa19 	.word	0x0040aa19
  4069fc:	004260c0 	.word	0x004260c0

00406a00 <_lv_obj_get_style_opa>:
{
  406a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406a04:	b083      	sub	sp, #12
  406a06:	4607      	mov	r7, r0
  406a08:	460e      	mov	r6, r1
  406a0a:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406a0c:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406a10:	4614      	mov	r4, r2
  406a12:	e023      	b.n	406a5c <_lv_obj_get_style_opa+0x5c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406a14:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406a18:	4631      	mov	r1, r6
  406a1a:	4638      	mov	r0, r7
  406a1c:	4b37      	ldr	r3, [pc, #220]	; (406afc <_lv_obj_get_style_opa+0xfc>)
  406a1e:	4798      	blx	r3
  406a20:	e02e      	b.n	406a80 <_lv_obj_get_style_opa+0x80>
                    if(list->opa_scale_cover) def = true;
  406a22:	796b      	ldrb	r3, [r5, #5]
  406a24:	f013 0f20 	tst.w	r3, #32
  406a28:	d147      	bne.n	406aba <_lv_obj_get_style_opa+0xba>
            bool def = false;
  406a2a:	2300      	movs	r3, #0
            if(def) {
  406a2c:	2b00      	cmp	r3, #0
  406a2e:	d152      	bne.n	406ad6 <_lv_obj_get_style_opa+0xd6>
        lv_state_t state = lv_obj_get_state(parent, part);
  406a30:	4631      	mov	r1, r6
  406a32:	4638      	mov	r0, r7
  406a34:	4b32      	ldr	r3, [pc, #200]	; (406b00 <_lv_obj_get_style_opa+0x100>)
  406a36:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406a38:	0204      	lsls	r4, r0, #8
  406a3a:	b2a4      	uxth	r4, r4
  406a3c:	4444      	add	r4, r8
  406a3e:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
  406a40:	f10d 0207 	add.w	r2, sp, #7
  406a44:	4621      	mov	r1, r4
  406a46:	4628      	mov	r0, r5
  406a48:	4b2e      	ldr	r3, [pc, #184]	; (406b04 <_lv_obj_get_style_opa+0x104>)
  406a4a:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  406a4c:	2801      	cmp	r0, #1
  406a4e:	d03a      	beq.n	406ac6 <_lv_obj_get_style_opa+0xc6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406a50:	f019 0f80 	tst.w	r9, #128	; 0x80
  406a54:	d03f      	beq.n	406ad6 <_lv_obj_get_style_opa+0xd6>
        if(part != LV_OBJ_PART_MAIN) {
  406a56:	2e00      	cmp	r6, #0
  406a58:	d038      	beq.n	406acc <_lv_obj_get_style_opa+0xcc>
            part = LV_OBJ_PART_MAIN;
  406a5a:	2600      	movs	r6, #0
    while(parent) {
  406a5c:	2f00      	cmp	r7, #0
  406a5e:	d03a      	beq.n	406ad6 <_lv_obj_get_style_opa+0xd6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406a60:	4631      	mov	r1, r6
  406a62:	4638      	mov	r0, r7
  406a64:	4b28      	ldr	r3, [pc, #160]	; (406b08 <_lv_obj_get_style_opa+0x108>)
  406a66:	4798      	blx	r3
  406a68:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406a6a:	7943      	ldrb	r3, [r0, #5]
  406a6c:	f013 0f08 	tst.w	r3, #8
  406a70:	d1de      	bne.n	406a30 <_lv_obj_get_style_opa+0x30>
  406a72:	7902      	ldrb	r2, [r0, #4]
  406a74:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406a78:	d0da      	beq.n	406a30 <_lv_obj_get_style_opa+0x30>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406a7a:	f013 0f04 	tst.w	r3, #4
  406a7e:	d0c9      	beq.n	406a14 <_lv_obj_get_style_opa+0x14>
            switch(prop & (~LV_STYLE_STATE_MASK)) {
  406a80:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406a84:	f248 020c 	movw	r2, #32780	; 0x800c
  406a88:	4293      	cmp	r3, r2
  406a8a:	d0ca      	beq.n	406a22 <_lv_obj_get_style_opa+0x22>
  406a8c:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406a90:	4293      	cmp	r3, r2
  406a92:	d00c      	beq.n	406aae <_lv_obj_get_style_opa+0xae>
  406a94:	2b2c      	cmp	r3, #44	; 0x2c
  406a96:	d001      	beq.n	406a9c <_lv_obj_get_style_opa+0x9c>
            bool def = false;
  406a98:	2300      	movs	r3, #0
  406a9a:	e7c7      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406a9c:	79ab      	ldrb	r3, [r5, #6]
  406a9e:	f013 0f10 	tst.w	r3, #16
  406aa2:	d127      	bne.n	406af4 <_lv_obj_get_style_opa+0xf4>
                    if(list->bg_opa_transp) def = true;
  406aa4:	f013 0f08 	tst.w	r3, #8
  406aa8:	d109      	bne.n	406abe <_lv_obj_get_style_opa+0xbe>
            bool def = false;
  406aaa:	2300      	movs	r3, #0
  406aac:	e7be      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406aae:	79eb      	ldrb	r3, [r5, #7]
  406ab0:	f013 0f10 	tst.w	r3, #16
  406ab4:	d105      	bne.n	406ac2 <_lv_obj_get_style_opa+0xc2>
            bool def = false;
  406ab6:	2300      	movs	r3, #0
  406ab8:	e7b8      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
                    if(list->opa_scale_cover) def = true;
  406aba:	2301      	movs	r3, #1
  406abc:	e7b6      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
                    if(list->bg_opa_transp) def = true;
  406abe:	2301      	movs	r3, #1
  406ac0:	e7b4      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
                    if(list->img_recolor_opa_transp) def = true;
  406ac2:	2301      	movs	r3, #1
  406ac4:	e7b2      	b.n	406a2c <_lv_obj_get_style_opa+0x2c>
        if(res == LV_RES_OK) return value_act;
  406ac6:	f89d 0007 	ldrb.w	r0, [sp, #7]
  406aca:	e014      	b.n	406af6 <_lv_obj_get_style_opa+0xf6>
        parent = lv_obj_get_parent(parent);
  406acc:	4638      	mov	r0, r7
  406ace:	4b0f      	ldr	r3, [pc, #60]	; (406b0c <_lv_obj_get_style_opa+0x10c>)
  406ad0:	4798      	blx	r3
  406ad2:	4607      	mov	r7, r0
  406ad4:	e7c2      	b.n	406a5c <_lv_obj_get_style_opa+0x5c>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406ad6:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406ada:	b2a4      	uxth	r4, r4
    switch(prop) {
  406adc:	2c6d      	cmp	r4, #109	; 0x6d
  406ade:	d007      	beq.n	406af0 <_lv_obj_get_style_opa+0xf0>
  406ae0:	f248 03ad 	movw	r3, #32941	; 0x80ad
  406ae4:	429c      	cmp	r4, r3
  406ae6:	d003      	beq.n	406af0 <_lv_obj_get_style_opa+0xf0>
  406ae8:	2c2c      	cmp	r4, #44	; 0x2c
  406aea:	d001      	beq.n	406af0 <_lv_obj_get_style_opa+0xf0>
    return LV_OPA_COVER;
  406aec:	20ff      	movs	r0, #255	; 0xff
  406aee:	e002      	b.n	406af6 <_lv_obj_get_style_opa+0xf6>
            return LV_OPA_TRANSP;
  406af0:	2000      	movs	r0, #0
  406af2:	e000      	b.n	406af6 <_lv_obj_get_style_opa+0xf6>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
  406af4:	20ff      	movs	r0, #255	; 0xff
}
  406af6:	b003      	add	sp, #12
  406af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  406afc:	00406b11 	.word	0x00406b11
  406b00:	00406929 	.word	0x00406929
  406b04:	0040aae9 	.word	0x0040aae9
  406b08:	00405755 	.word	0x00405755
  406b0c:	004054f5 	.word	0x004054f5

00406b10 <update_style_cache>:
{
  406b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406b14:	4605      	mov	r5, r0
  406b16:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
  406b18:	4610      	mov	r0, r2
  406b1a:	4baf      	ldr	r3, [pc, #700]	; (406dd8 <update_style_cache+0x2c8>)
  406b1c:	4798      	blx	r3
  406b1e:	b908      	cbnz	r0, 406b24 <update_style_cache+0x14>
  406b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  406b24:	4631      	mov	r1, r6
  406b26:	4628      	mov	r0, r5
  406b28:	4bac      	ldr	r3, [pc, #688]	; (406ddc <update_style_cache+0x2cc>)
  406b2a:	4798      	blx	r3
  406b2c:	4604      	mov	r4, r0
    bool ignore_cache_ori = list->ignore_cache;
  406b2e:	7943      	ldrb	r3, [r0, #5]
  406b30:	f3c3 08c0 	ubfx	r8, r3, #3, #1
    list->ignore_cache = 1;
  406b34:	f043 0308 	orr.w	r3, r3, #8
  406b38:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  406b3a:	f248 020c 	movw	r2, #32780	; 0x800c
  406b3e:	4631      	mov	r1, r6
  406b40:	4628      	mov	r0, r5
  406b42:	4ba7      	ldr	r3, [pc, #668]	; (406de0 <update_style_cache+0x2d0>)
  406b44:	4798      	blx	r3
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  406b46:	28ff      	cmp	r0, #255	; 0xff
  406b48:	bf14      	ite	ne
  406b4a:	2000      	movne	r0, #0
  406b4c:	2001      	moveq	r0, #1
  406b4e:	7963      	ldrb	r3, [r4, #5]
  406b50:	f360 1345 	bfi	r3, r0, #5, #1
  406b54:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  406b56:	f248 0282 	movw	r2, #32898	; 0x8082
  406b5a:	4631      	mov	r1, r6
  406b5c:	4628      	mov	r0, r5
  406b5e:	4fa1      	ldr	r7, [pc, #644]	; (406de4 <update_style_cache+0x2d4>)
  406b60:	47b8      	blx	r7
  406b62:	b2c0      	uxtb	r0, r0
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  406b64:	fab0 f080 	clz	r0, r0
  406b68:	0940      	lsrs	r0, r0, #5
  406b6a:	79e3      	ldrb	r3, [r4, #7]
  406b6c:	f360 1386 	bfi	r3, r0, #6, #1
  406b70:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  406b72:	f248 028e 	movw	r2, #32910	; 0x808e
  406b76:	4631      	mov	r1, r6
  406b78:	4628      	mov	r0, r5
  406b7a:	4b9b      	ldr	r3, [pc, #620]	; (406de8 <update_style_cache+0x2d8>)
  406b7c:	4798      	blx	r3
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;
  406b7e:	4b9b      	ldr	r3, [pc, #620]	; (406dec <update_style_cache+0x2dc>)
  406b80:	4283      	cmp	r3, r0
  406b82:	bf14      	ite	ne
  406b84:	2000      	movne	r0, #0
  406b86:	2001      	moveq	r0, #1
  406b88:	79e3      	ldrb	r3, [r4, #7]
  406b8a:	f360 13c7 	bfi	r3, r0, #7, #1
    list->text_space_zero = 1;
  406b8e:	b2db      	uxtb	r3, r3
  406b90:	f043 0320 	orr.w	r3, r3, #32
  406b94:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  406b96:	f248 0280 	movw	r2, #32896	; 0x8080
  406b9a:	4631      	mov	r1, r6
  406b9c:	4628      	mov	r0, r5
  406b9e:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406ba0:	2800      	cmp	r0, #0
  406ba2:	f000 80cf 	beq.w	406d44 <update_style_cache+0x234>
        list->text_space_zero = 0;
  406ba6:	79e3      	ldrb	r3, [r4, #7]
  406ba8:	f36f 1345 	bfc	r3, #5, #1
  406bac:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  406bae:	222c      	movs	r2, #44	; 0x2c
  406bb0:	4631      	mov	r1, r6
  406bb2:	4628      	mov	r0, r5
  406bb4:	f8df 9228 	ldr.w	r9, [pc, #552]	; 406de0 <update_style_cache+0x2d0>
  406bb8:	47c8      	blx	r9
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
  406bba:	fab0 f280 	clz	r2, r0
  406bbe:	0952      	lsrs	r2, r2, #5
  406bc0:	79a3      	ldrb	r3, [r4, #6]
  406bc2:	f362 03c3 	bfi	r3, r2, #3, #1
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
  406bc6:	28ff      	cmp	r0, #255	; 0xff
  406bc8:	bf14      	ite	ne
  406bca:	2000      	movne	r0, #0
  406bcc:	2001      	moveq	r0, #1
  406bce:	f360 1304 	bfi	r3, r0, #4, #1
  406bd2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  406bd4:	2230      	movs	r2, #48	; 0x30
  406bd6:	4631      	mov	r1, r6
  406bd8:	4628      	mov	r0, r5
  406bda:	4f82      	ldr	r7, [pc, #520]	; (406de4 <update_style_cache+0x2d4>)
  406bdc:	47b8      	blx	r7
    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
  406bde:	fab0 f080 	clz	r0, r0
  406be2:	0940      	lsrs	r0, r0, #5
  406be4:	79a3      	ldrb	r3, [r4, #6]
  406be6:	f360 1345 	bfi	r3, r0, #5, #1
  406bea:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  406bec:	2231      	movs	r2, #49	; 0x31
  406bee:	4631      	mov	r1, r6
  406bf0:	4628      	mov	r0, r5
  406bf2:	47b8      	blx	r7
  406bf4:	b2c0      	uxtb	r0, r0
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
  406bf6:	280f      	cmp	r0, #15
  406bf8:	bf14      	ite	ne
  406bfa:	2000      	movne	r0, #0
  406bfc:	2001      	moveq	r0, #1
  406bfe:	79a3      	ldrb	r3, [r4, #6]
  406c00:	f360 1386 	bfi	r3, r0, #6, #1
  406c04:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  406c06:	2233      	movs	r2, #51	; 0x33
  406c08:	4631      	mov	r1, r6
  406c0a:	4628      	mov	r0, r5
  406c0c:	47b8      	blx	r7
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
  406c0e:	fab0 f080 	clz	r0, r0
  406c12:	0940      	lsrs	r0, r0, #5
  406c14:	79a3      	ldrb	r3, [r4, #6]
  406c16:	f360 13c7 	bfi	r3, r0, #7, #1
  406c1a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  406c1c:	2202      	movs	r2, #2
  406c1e:	4631      	mov	r1, r6
  406c20:	4628      	mov	r0, r5
  406c22:	47b8      	blx	r7
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
  406c24:	fab0 f080 	clz	r0, r0
  406c28:	0940      	lsrs	r0, r0, #5
  406c2a:	7963      	ldrb	r3, [r4, #5]
  406c2c:	f360 1386 	bfi	r3, r0, #6, #1
  406c30:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  406c32:	f248 02ad 	movw	r2, #32941	; 0x80ad
  406c36:	4631      	mov	r1, r6
  406c38:	4628      	mov	r0, r5
  406c3a:	47c8      	blx	r9
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  406c3c:	fab0 f080 	clz	r0, r0
  406c40:	0940      	lsrs	r0, r0, #5
  406c42:	79e3      	ldrb	r3, [r4, #7]
  406c44:	f360 1304 	bfi	r3, r0, #4, #1
  406c48:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  406c4a:	2240      	movs	r2, #64	; 0x40
  406c4c:	4631      	mov	r1, r6
  406c4e:	4628      	mov	r0, r5
  406c50:	47b8      	blx	r7
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
  406c52:	fab0 f080 	clz	r0, r0
  406c56:	0940      	lsrs	r0, r0, #5
  406c58:	79e3      	ldrb	r3, [r4, #7]
  406c5a:	f360 0300 	bfi	r3, r0, #0, #1
  406c5e:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  406c60:	226e      	movs	r2, #110	; 0x6e
  406c62:	4631      	mov	r1, r6
  406c64:	4628      	mov	r0, r5
  406c66:	f8df 9180 	ldr.w	r9, [pc, #384]	; 406de8 <update_style_cache+0x2d8>
  406c6a:	47c8      	blx	r9
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
  406c6c:	fab0 f080 	clz	r0, r0
  406c70:	0940      	lsrs	r0, r0, #5
  406c72:	79e3      	ldrb	r3, [r4, #7]
  406c74:	f360 0341 	bfi	r3, r0, #1, #1
  406c78:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  406c7a:	2201      	movs	r2, #1
  406c7c:	4631      	mov	r1, r6
  406c7e:	4628      	mov	r0, r5
  406c80:	47b8      	blx	r7
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
  406c82:	fab0 f080 	clz	r0, r0
  406c86:	0940      	lsrs	r0, r0, #5
  406c88:	7963      	ldrb	r3, [r4, #5]
  406c8a:	f360 1304 	bfi	r3, r0, #4, #1
  406c8e:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  406c90:	2250      	movs	r2, #80	; 0x50
  406c92:	4631      	mov	r1, r6
  406c94:	4628      	mov	r0, r5
  406c96:	47b8      	blx	r7
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
  406c98:	fab0 f080 	clz	r0, r0
  406c9c:	0940      	lsrs	r0, r0, #5
  406c9e:	79e3      	ldrb	r3, [r4, #7]
  406ca0:	f360 0382 	bfi	r3, r0, #2, #1
  406ca4:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  406ca6:	227f      	movs	r2, #127	; 0x7f
  406ca8:	4631      	mov	r1, r6
  406caa:	4628      	mov	r0, r5
  406cac:	47c8      	blx	r9
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
  406cae:	fab0 f080 	clz	r0, r0
  406cb2:	0940      	lsrs	r0, r0, #5
  406cb4:	79e3      	ldrb	r3, [r4, #7]
  406cb6:	f360 03c3 	bfi	r3, r0, #3, #1
  406cba:	71e3      	strb	r3, [r4, #7]
    list->transform_all_zero  = 1;
  406cbc:	7963      	ldrb	r3, [r4, #5]
  406cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406cc2:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  406cc4:	2206      	movs	r2, #6
  406cc6:	4631      	mov	r1, r6
  406cc8:	4628      	mov	r0, r5
  406cca:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406ccc:	2800      	cmp	r0, #0
  406cce:	d042      	beq.n	406d56 <update_style_cache+0x246>
        list->transform_all_zero  = 0;
  406cd0:	7963      	ldrb	r3, [r4, #5]
  406cd2:	f36f 13c7 	bfc	r3, #7, #1
  406cd6:	7163      	strb	r3, [r4, #5]
    list->pad_all_zero  = 1;
  406cd8:	79a3      	ldrb	r3, [r4, #6]
  406cda:	f043 0301 	orr.w	r3, r3, #1
  406cde:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  406ce0:	2210      	movs	r2, #16
  406ce2:	4631      	mov	r1, r6
  406ce4:	4628      	mov	r0, r5
  406ce6:	4b3f      	ldr	r3, [pc, #252]	; (406de4 <update_style_cache+0x2d4>)
  406ce8:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406cea:	2800      	cmp	r0, #0
  406cec:	d047      	beq.n	406d7e <update_style_cache+0x26e>
        list->pad_all_zero  = 0;
  406cee:	79a3      	ldrb	r3, [r4, #6]
  406cf0:	f36f 0300 	bfc	r3, #0, #1
  406cf4:	71a3      	strb	r3, [r4, #6]
    list->margin_all_zero  = 1;
  406cf6:	79a3      	ldrb	r3, [r4, #6]
  406cf8:	f043 0302 	orr.w	r3, r3, #2
  406cfc:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  406cfe:	2215      	movs	r2, #21
  406d00:	4631      	mov	r1, r6
  406d02:	4628      	mov	r0, r5
  406d04:	4b37      	ldr	r3, [pc, #220]	; (406de4 <update_style_cache+0x2d4>)
  406d06:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406d08:	2800      	cmp	r0, #0
  406d0a:	d04e      	beq.n	406daa <update_style_cache+0x29a>
        list->margin_all_zero  = 0;
  406d0c:	79a3      	ldrb	r3, [r4, #6]
  406d0e:	f36f 0341 	bfc	r3, #1, #1
  406d12:	71a3      	strb	r3, [r4, #6]
    list->blend_mode_all_normal = 1;
  406d14:	79a3      	ldrb	r3, [r4, #6]
  406d16:	f043 0304 	orr.w	r3, r3, #4
  406d1a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  406d1c:	2220      	movs	r2, #32
  406d1e:	4631      	mov	r1, r6
  406d20:	4628      	mov	r0, r5
  406d22:	4b30      	ldr	r3, [pc, #192]	; (406de4 <update_style_cache+0x2d4>)
  406d24:	4798      	blx	r3
  406d26:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406d28:	2800      	cmp	r0, #0
  406d2a:	d061      	beq.n	406df0 <update_style_cache+0x2e0>
        list->blend_mode_all_normal = 0;
  406d2c:	79a3      	ldrb	r3, [r4, #6]
  406d2e:	f36f 0382 	bfc	r3, #2, #1
  406d32:	71a3      	strb	r3, [r4, #6]
    list->ignore_cache = ignore_cache_ori;
  406d34:	7963      	ldrb	r3, [r4, #5]
  406d36:	f368 03c3 	bfi	r3, r8, #3, #1
    list->valid_cache = 1;
  406d3a:	b2db      	uxtb	r3, r3
  406d3c:	f043 0304 	orr.w	r3, r3, #4
  406d40:	7163      	strb	r3, [r4, #5]
  406d42:	e6ed      	b.n	406b20 <update_style_cache+0x10>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  406d44:	f248 0281 	movw	r2, #32897	; 0x8081
  406d48:	4631      	mov	r1, r6
  406d4a:	4628      	mov	r0, r5
  406d4c:	47b8      	blx	r7
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  406d4e:	2800      	cmp	r0, #0
  406d50:	f43f af2d 	beq.w	406bae <update_style_cache+0x9e>
  406d54:	e727      	b.n	406ba6 <update_style_cache+0x96>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  406d56:	2204      	movs	r2, #4
  406d58:	4631      	mov	r1, r6
  406d5a:	4628      	mov	r0, r5
  406d5c:	47b8      	blx	r7
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
  406d5e:	2800      	cmp	r0, #0
  406d60:	d1b6      	bne.n	406cd0 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  406d62:	2205      	movs	r2, #5
  406d64:	4631      	mov	r1, r6
  406d66:	4628      	mov	r0, r5
  406d68:	47b8      	blx	r7
       lv_obj_get_style_transform_width(obj, part) != 0 ||
  406d6a:	2800      	cmp	r0, #0
  406d6c:	d1b0      	bne.n	406cd0 <update_style_cache+0x1c0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  406d6e:	2207      	movs	r2, #7
  406d70:	4631      	mov	r1, r6
  406d72:	4628      	mov	r0, r5
  406d74:	47b8      	blx	r7
       lv_obj_get_style_transform_height(obj, part) != 0 ||
  406d76:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  406d7a:	d1a9      	bne.n	406cd0 <update_style_cache+0x1c0>
  406d7c:	e7ac      	b.n	406cd8 <update_style_cache+0x1c8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  406d7e:	2211      	movs	r2, #17
  406d80:	4631      	mov	r1, r6
  406d82:	4628      	mov	r0, r5
  406d84:	4b17      	ldr	r3, [pc, #92]	; (406de4 <update_style_cache+0x2d4>)
  406d86:	4798      	blx	r3
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
  406d88:	2800      	cmp	r0, #0
  406d8a:	d1b0      	bne.n	406cee <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  406d8c:	2212      	movs	r2, #18
  406d8e:	4631      	mov	r1, r6
  406d90:	4628      	mov	r0, r5
  406d92:	4b14      	ldr	r3, [pc, #80]	; (406de4 <update_style_cache+0x2d4>)
  406d94:	4798      	blx	r3
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
  406d96:	2800      	cmp	r0, #0
  406d98:	d1a9      	bne.n	406cee <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  406d9a:	2213      	movs	r2, #19
  406d9c:	4631      	mov	r1, r6
  406d9e:	4628      	mov	r0, r5
  406da0:	4b10      	ldr	r3, [pc, #64]	; (406de4 <update_style_cache+0x2d4>)
  406da2:	4798      	blx	r3
       lv_obj_get_style_pad_left(obj, part) != 0 ||
  406da4:	2800      	cmp	r0, #0
  406da6:	d0a6      	beq.n	406cf6 <update_style_cache+0x1e6>
  406da8:	e7a1      	b.n	406cee <update_style_cache+0x1de>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  406daa:	2216      	movs	r2, #22
  406dac:	4631      	mov	r1, r6
  406dae:	4628      	mov	r0, r5
  406db0:	4b0c      	ldr	r3, [pc, #48]	; (406de4 <update_style_cache+0x2d4>)
  406db2:	4798      	blx	r3
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
  406db4:	2800      	cmp	r0, #0
  406db6:	d1a9      	bne.n	406d0c <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  406db8:	2217      	movs	r2, #23
  406dba:	4631      	mov	r1, r6
  406dbc:	4628      	mov	r0, r5
  406dbe:	4b09      	ldr	r3, [pc, #36]	; (406de4 <update_style_cache+0x2d4>)
  406dc0:	4798      	blx	r3
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
  406dc2:	2800      	cmp	r0, #0
  406dc4:	d1a2      	bne.n	406d0c <update_style_cache+0x1fc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  406dc6:	2218      	movs	r2, #24
  406dc8:	4631      	mov	r1, r6
  406dca:	4628      	mov	r0, r5
  406dcc:	4b05      	ldr	r3, [pc, #20]	; (406de4 <update_style_cache+0x2d4>)
  406dce:	4798      	blx	r3
       lv_obj_get_style_margin_left(obj, part) != 0 ||
  406dd0:	2800      	cmp	r0, #0
  406dd2:	d09f      	beq.n	406d14 <update_style_cache+0x204>
  406dd4:	e79a      	b.n	406d0c <update_style_cache+0x1fc>
  406dd6:	bf00      	nop
  406dd8:	00404efd 	.word	0x00404efd
  406ddc:	00405755 	.word	0x00405755
  406de0:	00406a01 	.word	0x00406a01
  406de4:	00406f8d 	.word	0x00406f8d
  406de8:	00406e85 	.word	0x00406e85
  406dec:	2040002c 	.word	0x2040002c
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  406df0:	2232      	movs	r2, #50	; 0x32
  406df2:	4631      	mov	r1, r6
  406df4:	4628      	mov	r0, r5
  406df6:	4b22      	ldr	r3, [pc, #136]	; (406e80 <update_style_cache+0x370>)
  406df8:	4798      	blx	r3
  406dfa:	b2c0      	uxtb	r0, r0
    if(lv_obj_get_style_bg_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406dfc:	2800      	cmp	r0, #0
  406dfe:	d195      	bne.n	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  406e00:	2260      	movs	r2, #96	; 0x60
  406e02:	4631      	mov	r1, r6
  406e04:	4628      	mov	r0, r5
  406e06:	4b1e      	ldr	r3, [pc, #120]	; (406e80 <update_style_cache+0x370>)
  406e08:	4798      	blx	r3
  406e0a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_border_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e0c:	2800      	cmp	r0, #0
  406e0e:	d18d      	bne.n	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  406e10:	2242      	movs	r2, #66	; 0x42
  406e12:	4631      	mov	r1, r6
  406e14:	4628      	mov	r0, r5
  406e16:	4b1a      	ldr	r3, [pc, #104]	; (406e80 <update_style_cache+0x370>)
  406e18:	4798      	blx	r3
  406e1a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_pattern_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e1c:	2800      	cmp	r0, #0
  406e1e:	d185      	bne.n	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  406e20:	2272      	movs	r2, #114	; 0x72
  406e22:	4631      	mov	r1, r6
  406e24:	4628      	mov	r0, r5
  406e26:	4b16      	ldr	r3, [pc, #88]	; (406e80 <update_style_cache+0x370>)
  406e28:	4798      	blx	r3
  406e2a:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_outline_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e2c:	2800      	cmp	r0, #0
  406e2e:	f47f af7d 	bne.w	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  406e32:	f248 0283 	movw	r2, #32899	; 0x8083
  406e36:	4631      	mov	r1, r6
  406e38:	4628      	mov	r0, r5
  406e3a:	4b11      	ldr	r3, [pc, #68]	; (406e80 <update_style_cache+0x370>)
  406e3c:	4798      	blx	r3
  406e3e:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_value_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e40:	2800      	cmp	r0, #0
  406e42:	f47f af73 	bne.w	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  406e46:	2291      	movs	r2, #145	; 0x91
  406e48:	4631      	mov	r1, r6
  406e4a:	4628      	mov	r0, r5
  406e4c:	4b0c      	ldr	r3, [pc, #48]	; (406e80 <update_style_cache+0x370>)
  406e4e:	4798      	blx	r3
  406e50:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_text_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e52:	2800      	cmp	r0, #0
  406e54:	f47f af6a 	bne.w	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  406e58:	f248 02a0 	movw	r2, #32928	; 0x80a0
  406e5c:	4631      	mov	r1, r6
  406e5e:	4628      	mov	r0, r5
  406e60:	4b07      	ldr	r3, [pc, #28]	; (406e80 <update_style_cache+0x370>)
  406e62:	4798      	blx	r3
  406e64:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_line_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e66:	2800      	cmp	r0, #0
  406e68:	f47f af60 	bne.w	406d2c <update_style_cache+0x21c>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  406e6c:	2254      	movs	r2, #84	; 0x54
  406e6e:	4631      	mov	r1, r6
  406e70:	4628      	mov	r0, r5
  406e72:	4b03      	ldr	r3, [pc, #12]	; (406e80 <update_style_cache+0x370>)
  406e74:	4798      	blx	r3
  406e76:	b2c0      	uxtb	r0, r0
       lv_obj_get_style_image_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL ||
  406e78:	2800      	cmp	r0, #0
  406e7a:	f43f af5b 	beq.w	406d34 <update_style_cache+0x224>
  406e7e:	e755      	b.n	406d2c <update_style_cache+0x21c>
  406e80:	00406f8d 	.word	0x00406f8d

00406e84 <_lv_obj_get_style_ptr>:
{
  406e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406e88:	b083      	sub	sp, #12
  406e8a:	4607      	mov	r7, r0
  406e8c:	460e      	mov	r6, r1
  406e8e:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406e90:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406e94:	4614      	mov	r4, r2
  406e96:	e02d      	b.n	406ef4 <_lv_obj_get_style_ptr+0x70>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406e98:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406e9c:	4631      	mov	r1, r6
  406e9e:	4638      	mov	r0, r7
  406ea0:	4b33      	ldr	r3, [pc, #204]	; (406f70 <_lv_obj_get_style_ptr+0xec>)
  406ea2:	4798      	blx	r3
  406ea4:	e037      	b.n	406f16 <_lv_obj_get_style_ptr+0x92>
                    if(list->value_txt_str) def = true;
  406ea6:	79eb      	ldrb	r3, [r5, #7]
  406ea8:	f013 0f08 	tst.w	r3, #8
  406eac:	d13f      	bne.n	406f2e <_lv_obj_get_style_ptr+0xaa>
            bool def = false;
  406eae:	2300      	movs	r3, #0
  406eb0:	e00a      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406eb2:	79eb      	ldrb	r3, [r5, #7]
  406eb4:	f013 0f02 	tst.w	r3, #2
  406eb8:	d13b      	bne.n	406f32 <_lv_obj_get_style_ptr+0xae>
            bool def = false;
  406eba:	2300      	movs	r3, #0
  406ebc:	e004      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406ebe:	f995 3007 	ldrsb.w	r3, [r5, #7]
  406ec2:	2b00      	cmp	r3, #0
  406ec4:	db37      	blt.n	406f36 <_lv_obj_get_style_ptr+0xb2>
            bool def = false;
  406ec6:	2300      	movs	r3, #0
            if(def) {
  406ec8:	2b00      	cmp	r3, #0
  406eca:	d13f      	bne.n	406f4c <_lv_obj_get_style_ptr+0xc8>
        lv_state_t state = lv_obj_get_state(parent, part);
  406ecc:	4631      	mov	r1, r6
  406ece:	4638      	mov	r0, r7
  406ed0:	4b28      	ldr	r3, [pc, #160]	; (406f74 <_lv_obj_get_style_ptr+0xf0>)
  406ed2:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  406ed4:	0204      	lsls	r4, r0, #8
  406ed6:	b2a4      	uxth	r4, r4
  406ed8:	4444      	add	r4, r8
  406eda:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
  406edc:	aa01      	add	r2, sp, #4
  406ede:	4621      	mov	r1, r4
  406ee0:	4628      	mov	r0, r5
  406ee2:	4b25      	ldr	r3, [pc, #148]	; (406f78 <_lv_obj_get_style_ptr+0xf4>)
  406ee4:	4798      	blx	r3
        if(res == LV_RES_OK)  return value_act;
  406ee6:	2801      	cmp	r0, #1
  406ee8:	d027      	beq.n	406f3a <_lv_obj_get_style_ptr+0xb6>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  406eea:	f019 0f80 	tst.w	r9, #128	; 0x80
  406eee:	d02d      	beq.n	406f4c <_lv_obj_get_style_ptr+0xc8>
        if(part != LV_OBJ_PART_MAIN) {
  406ef0:	b33e      	cbz	r6, 406f42 <_lv_obj_get_style_ptr+0xbe>
            part = LV_OBJ_PART_MAIN;
  406ef2:	2600      	movs	r6, #0
    while(parent) {
  406ef4:	b357      	cbz	r7, 406f4c <_lv_obj_get_style_ptr+0xc8>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  406ef6:	4631      	mov	r1, r6
  406ef8:	4638      	mov	r0, r7
  406efa:	4b20      	ldr	r3, [pc, #128]	; (406f7c <_lv_obj_get_style_ptr+0xf8>)
  406efc:	4798      	blx	r3
  406efe:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  406f00:	7943      	ldrb	r3, [r0, #5]
  406f02:	f013 0f08 	tst.w	r3, #8
  406f06:	d1e1      	bne.n	406ecc <_lv_obj_get_style_ptr+0x48>
  406f08:	7902      	ldrb	r2, [r0, #4]
  406f0a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  406f0e:	d0dd      	beq.n	406ecc <_lv_obj_get_style_ptr+0x48>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406f10:	f013 0f04 	tst.w	r3, #4
  406f14:	d0c0      	beq.n	406e98 <_lv_obj_get_style_ptr+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406f16:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  406f1a:	2b7f      	cmp	r3, #127	; 0x7f
  406f1c:	d0c3      	beq.n	406ea6 <_lv_obj_get_style_ptr+0x22>
  406f1e:	f248 028e 	movw	r2, #32910	; 0x808e
  406f22:	4293      	cmp	r3, r2
  406f24:	d0cb      	beq.n	406ebe <_lv_obj_get_style_ptr+0x3a>
  406f26:	2b6e      	cmp	r3, #110	; 0x6e
  406f28:	d0c3      	beq.n	406eb2 <_lv_obj_get_style_ptr+0x2e>
            bool def = false;
  406f2a:	2300      	movs	r3, #0
  406f2c:	e7cc      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
                    if(list->value_txt_str) def = true;
  406f2e:	2301      	movs	r3, #1
  406f30:	e7ca      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
                    if(list->pattern_img_null) def = true;
  406f32:	2301      	movs	r3, #1
  406f34:	e7c8      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
                    if(list->text_font_normal) def = true;
  406f36:	2301      	movs	r3, #1
  406f38:	e7c6      	b.n	406ec8 <_lv_obj_get_style_ptr+0x44>
        if(res == LV_RES_OK)  return value_act;
  406f3a:	9801      	ldr	r0, [sp, #4]
}
  406f3c:	b003      	add	sp, #12
  406f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  406f42:	4638      	mov	r0, r7
  406f44:	4b0e      	ldr	r3, [pc, #56]	; (406f80 <_lv_obj_get_style_ptr+0xfc>)
  406f46:	4798      	blx	r3
  406f48:	4607      	mov	r7, r0
  406f4a:	e7d3      	b.n	406ef4 <_lv_obj_get_style_ptr+0x70>
    prop = prop & (~LV_STYLE_STATE_MASK);
  406f4c:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  406f50:	b2a4      	uxth	r4, r4
    switch(prop) {
  406f52:	2cbe      	cmp	r4, #190	; 0xbe
  406f54:	d007      	beq.n	406f66 <_lv_obj_get_style_ptr+0xe2>
  406f56:	f248 038e 	movw	r3, #32910	; 0x808e
  406f5a:	429c      	cmp	r4, r3
  406f5c:	d005      	beq.n	406f6a <_lv_obj_get_style_ptr+0xe6>
  406f5e:	2c7e      	cmp	r4, #126	; 0x7e
  406f60:	d003      	beq.n	406f6a <_lv_obj_get_style_ptr+0xe6>
    return NULL;
  406f62:	2000      	movs	r0, #0
  406f64:	e7ea      	b.n	406f3c <_lv_obj_get_style_ptr+0xb8>
            return &lv_anim_path_def;
  406f66:	4807      	ldr	r0, [pc, #28]	; (406f84 <_lv_obj_get_style_ptr+0x100>)
  406f68:	e7e8      	b.n	406f3c <_lv_obj_get_style_ptr+0xb8>
            return lv_theme_get_font_normal();
  406f6a:	4b07      	ldr	r3, [pc, #28]	; (406f88 <_lv_obj_get_style_ptr+0x104>)
  406f6c:	4798      	blx	r3
  406f6e:	e7e5      	b.n	406f3c <_lv_obj_get_style_ptr+0xb8>
  406f70:	00406b11 	.word	0x00406b11
  406f74:	00406929 	.word	0x00406929
  406f78:	0040abbd 	.word	0x0040abbd
  406f7c:	00405755 	.word	0x00405755
  406f80:	004054f5 	.word	0x004054f5
  406f84:	00429664 	.word	0x00429664
  406f88:	00417251 	.word	0x00417251

00406f8c <_lv_obj_get_style_int>:
{
  406f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  406f90:	b083      	sub	sp, #12
  406f92:	4607      	mov	r7, r0
  406f94:	460e      	mov	r6, r1
  406f96:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
  406f98:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
  406f9c:	4614      	mov	r4, r2
  406f9e:	e078      	b.n	407092 <_lv_obj_get_style_int+0x106>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  406fa0:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  406fa4:	4631      	mov	r1, r6
  406fa6:	4638      	mov	r0, r7
  406fa8:	4b82      	ldr	r3, [pc, #520]	; (4071b4 <_lv_obj_get_style_int+0x228>)
  406faa:	4798      	blx	r3
  406fac:	e084      	b.n	4070b8 <_lv_obj_get_style_int+0x12c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406fae:	3b04      	subs	r3, #4
  406fb0:	2b03      	cmp	r3, #3
  406fb2:	d854      	bhi.n	40705e <_lv_obj_get_style_int+0xd2>
                    if(list->transform_all_zero) def = true;
  406fb4:	f995 3005 	ldrsb.w	r3, [r5, #5]
  406fb8:	2b00      	cmp	r3, #0
  406fba:	f2c0 80c0 	blt.w	40713e <_lv_obj_get_style_int+0x1b2>
            bool def = false;
  406fbe:	2300      	movs	r3, #0
  406fc0:	e04e      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406fc2:	2b20      	cmp	r3, #32
  406fc4:	d029      	beq.n	40701a <_lv_obj_get_style_int+0x8e>
  406fc6:	dd0c      	ble.n	406fe2 <_lv_obj_get_style_int+0x56>
  406fc8:	2b31      	cmp	r3, #49	; 0x31
  406fca:	f000 809c 	beq.w	407106 <_lv_obj_get_style_int+0x17a>
  406fce:	dc24      	bgt.n	40701a <_lv_obj_get_style_int+0x8e>
  406fd0:	2b30      	cmp	r3, #48	; 0x30
  406fd2:	d144      	bne.n	40705e <_lv_obj_get_style_int+0xd2>
                    if(list->border_width_zero) def = true;
  406fd4:	79ab      	ldrb	r3, [r5, #6]
  406fd6:	f013 0f20 	tst.w	r3, #32
  406fda:	f040 80b2 	bne.w	407142 <_lv_obj_get_style_int+0x1b6>
            bool def = false;
  406fde:	2300      	movs	r3, #0
  406fe0:	e03e      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406fe2:	3b15      	subs	r3, #21
  406fe4:	2b03      	cmp	r3, #3
  406fe6:	d83a      	bhi.n	40705e <_lv_obj_get_style_int+0xd2>
                    if(list->margin_all_zero) def = true;
  406fe8:	79ab      	ldrb	r3, [r5, #6]
  406fea:	f013 0f02 	tst.w	r3, #2
  406fee:	f040 80b6 	bne.w	40715e <_lv_obj_get_style_int+0x1d2>
            bool def = false;
  406ff2:	2300      	movs	r3, #0
  406ff4:	e034      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  406ff6:	2b72      	cmp	r3, #114	; 0x72
  406ff8:	d00f      	beq.n	40701a <_lv_obj_get_style_int+0x8e>
  406ffa:	dc1a      	bgt.n	407032 <_lv_obj_get_style_int+0xa6>
  406ffc:	2b50      	cmp	r3, #80	; 0x50
  406ffe:	f000 808e 	beq.w	40711e <_lv_obj_get_style_int+0x192>
  407002:	dc11      	bgt.n	407028 <_lv_obj_get_style_int+0x9c>
  407004:	2b40      	cmp	r3, #64	; 0x40
  407006:	d106      	bne.n	407016 <_lv_obj_get_style_int+0x8a>
                    if(list->outline_width_zero) def = true;
  407008:	79eb      	ldrb	r3, [r5, #7]
  40700a:	f013 0f01 	tst.w	r3, #1
  40700e:	f040 809e 	bne.w	40714e <_lv_obj_get_style_int+0x1c2>
            bool def = false;
  407012:	2300      	movs	r3, #0
  407014:	e024      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407016:	2b42      	cmp	r3, #66	; 0x42
  407018:	d121      	bne.n	40705e <_lv_obj_get_style_int+0xd2>
                    if(list->blend_mode_all_normal) def = true;
  40701a:	79ab      	ldrb	r3, [r5, #6]
  40701c:	f013 0f04 	tst.w	r3, #4
  407020:	f040 809f 	bne.w	407162 <_lv_obj_get_style_int+0x1d6>
            bool def = false;
  407024:	2300      	movs	r3, #0
  407026:	e01b      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407028:	2b54      	cmp	r3, #84	; 0x54
  40702a:	d0f6      	beq.n	40701a <_lv_obj_get_style_int+0x8e>
  40702c:	2b60      	cmp	r3, #96	; 0x60
  40702e:	d116      	bne.n	40705e <_lv_obj_get_style_int+0xd2>
  407030:	e7f3      	b.n	40701a <_lv_obj_get_style_int+0x8e>
  407032:	f248 0281 	movw	r2, #32897	; 0x8081
  407036:	4293      	cmp	r3, r2
  407038:	dd0b      	ble.n	407052 <_lv_obj_get_style_int+0xc6>
  40703a:	f248 0283 	movw	r2, #32899	; 0x8083
  40703e:	4293      	cmp	r3, r2
  407040:	d0eb      	beq.n	40701a <_lv_obj_get_style_int+0x8e>
  407042:	da4f      	bge.n	4070e4 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
  407044:	79eb      	ldrb	r3, [r5, #7]
  407046:	f013 0f40 	tst.w	r3, #64	; 0x40
  40704a:	f040 808c 	bne.w	407166 <_lv_obj_get_style_int+0x1da>
            bool def = false;
  40704e:	2300      	movs	r3, #0
  407050:	e006      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  407052:	f248 0280 	movw	r2, #32896	; 0x8080
  407056:	4293      	cmp	r3, r2
  407058:	da4f      	bge.n	4070fa <_lv_obj_get_style_int+0x16e>
  40705a:	2b91      	cmp	r3, #145	; 0x91
  40705c:	d0dd      	beq.n	40701a <_lv_obj_get_style_int+0x8e>
            bool def = false;
  40705e:	2300      	movs	r3, #0
            if(def) {
  407060:	2b00      	cmp	r3, #0
  407062:	f040 808c 	bne.w	40717e <_lv_obj_get_style_int+0x1f2>
        lv_state_t state = lv_obj_get_state(parent, part);
  407066:	4631      	mov	r1, r6
  407068:	4638      	mov	r0, r7
  40706a:	4b53      	ldr	r3, [pc, #332]	; (4071b8 <_lv_obj_get_style_int+0x22c>)
  40706c:	4798      	blx	r3
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
  40706e:	0204      	lsls	r4, r0, #8
  407070:	b2a4      	uxth	r4, r4
  407072:	4444      	add	r4, r8
  407074:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_int(list, prop, &value_act);
  407076:	f10d 0206 	add.w	r2, sp, #6
  40707a:	4621      	mov	r1, r4
  40707c:	4628      	mov	r0, r5
  40707e:	4b4f      	ldr	r3, [pc, #316]	; (4071bc <_lv_obj_get_style_int+0x230>)
  407080:	4798      	blx	r3
        if(res == LV_RES_OK) return value_act;
  407082:	2801      	cmp	r0, #1
  407084:	d071      	beq.n	40716a <_lv_obj_get_style_int+0x1de>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
  407086:	f019 0f80 	tst.w	r9, #128	; 0x80
  40708a:	d078      	beq.n	40717e <_lv_obj_get_style_int+0x1f2>
        if(part != LV_OBJ_PART_MAIN) {
  40708c:	2e00      	cmp	r6, #0
  40708e:	d071      	beq.n	407174 <_lv_obj_get_style_int+0x1e8>
            part = LV_OBJ_PART_MAIN;
  407090:	2600      	movs	r6, #0
    while(parent) {
  407092:	2f00      	cmp	r7, #0
  407094:	d073      	beq.n	40717e <_lv_obj_get_style_int+0x1f2>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
  407096:	4631      	mov	r1, r6
  407098:	4638      	mov	r0, r7
  40709a:	4b49      	ldr	r3, [pc, #292]	; (4071c0 <_lv_obj_get_style_int+0x234>)
  40709c:	4798      	blx	r3
  40709e:	4605      	mov	r5, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
  4070a0:	7943      	ldrb	r3, [r0, #5]
  4070a2:	f013 0f08 	tst.w	r3, #8
  4070a6:	d1de      	bne.n	407066 <_lv_obj_get_style_int+0xda>
  4070a8:	7902      	ldrb	r2, [r0, #4]
  4070aa:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  4070ae:	d0da      	beq.n	407066 <_lv_obj_get_style_int+0xda>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
  4070b0:	f013 0f04 	tst.w	r3, #4
  4070b4:	f43f af74 	beq.w	406fa0 <_lv_obj_get_style_int+0x14>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4070b8:	f424 43fe 	bic.w	r3, r4, #32512	; 0x7f00
  4070bc:	2b33      	cmp	r3, #51	; 0x33
  4070be:	d028      	beq.n	407112 <_lv_obj_get_style_int+0x186>
  4070c0:	dc99      	bgt.n	406ff6 <_lv_obj_get_style_int+0x6a>
  4070c2:	2b13      	cmp	r3, #19
  4070c4:	f73f af7d 	bgt.w	406fc2 <_lv_obj_get_style_int+0x36>
  4070c8:	2b10      	cmp	r3, #16
  4070ca:	da2e      	bge.n	40712a <_lv_obj_get_style_int+0x19e>
  4070cc:	2b02      	cmp	r3, #2
  4070ce:	d00e      	beq.n	4070ee <_lv_obj_get_style_int+0x162>
  4070d0:	f73f af6d 	bgt.w	406fae <_lv_obj_get_style_int+0x22>
  4070d4:	2b01      	cmp	r3, #1
  4070d6:	d1c2      	bne.n	40705e <_lv_obj_get_style_int+0xd2>
                    if(list->radius_zero) def = true;
  4070d8:	796b      	ldrb	r3, [r5, #5]
  4070da:	f013 0f10 	tst.w	r3, #16
  4070de:	d138      	bne.n	407152 <_lv_obj_get_style_int+0x1c6>
            bool def = false;
  4070e0:	2300      	movs	r3, #0
  4070e2:	e7bd      	b.n	407060 <_lv_obj_get_style_int+0xd4>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
  4070e4:	f248 02a0 	movw	r2, #32928	; 0x80a0
  4070e8:	4293      	cmp	r3, r2
  4070ea:	d1b8      	bne.n	40705e <_lv_obj_get_style_int+0xd2>
  4070ec:	e795      	b.n	40701a <_lv_obj_get_style_int+0x8e>
                    if(list->clip_corner_off) def = true;
  4070ee:	796b      	ldrb	r3, [r5, #5]
  4070f0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4070f4:	d11f      	bne.n	407136 <_lv_obj_get_style_int+0x1aa>
            bool def = false;
  4070f6:	2300      	movs	r3, #0
  4070f8:	e7b2      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  4070fa:	79eb      	ldrb	r3, [r5, #7]
  4070fc:	f013 0f20 	tst.w	r3, #32
  407100:	d11b      	bne.n	40713a <_lv_obj_get_style_int+0x1ae>
            bool def = false;
  407102:	2300      	movs	r3, #0
  407104:	e7ac      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  407106:	79ab      	ldrb	r3, [r5, #6]
  407108:	f013 0f40 	tst.w	r3, #64	; 0x40
  40710c:	d11b      	bne.n	407146 <_lv_obj_get_style_int+0x1ba>
            bool def = false;
  40710e:	2300      	movs	r3, #0
  407110:	e7a6      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  407112:	f995 3006 	ldrsb.w	r3, [r5, #6]
  407116:	2b00      	cmp	r3, #0
  407118:	db17      	blt.n	40714a <_lv_obj_get_style_int+0x1be>
            bool def = false;
  40711a:	2300      	movs	r3, #0
  40711c:	e7a0      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  40711e:	79eb      	ldrb	r3, [r5, #7]
  407120:	f013 0f04 	tst.w	r3, #4
  407124:	d117      	bne.n	407156 <_lv_obj_get_style_int+0x1ca>
            bool def = false;
  407126:	2300      	movs	r3, #0
  407128:	e79a      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  40712a:	79ab      	ldrb	r3, [r5, #6]
  40712c:	f013 0f01 	tst.w	r3, #1
  407130:	d113      	bne.n	40715a <_lv_obj_get_style_int+0x1ce>
            bool def = false;
  407132:	2300      	movs	r3, #0
  407134:	e794      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->clip_corner_off) def = true;
  407136:	2301      	movs	r3, #1
  407138:	e792      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->text_space_zero) def = true;
  40713a:	2301      	movs	r3, #1
  40713c:	e790      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->transform_all_zero) def = true;
  40713e:	2301      	movs	r3, #1
  407140:	e78e      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->border_width_zero) def = true;
  407142:	2301      	movs	r3, #1
  407144:	e78c      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->border_side_full) def = true;
  407146:	2301      	movs	r3, #1
  407148:	e78a      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->border_post_off) def = true;
  40714a:	2301      	movs	r3, #1
  40714c:	e788      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->outline_width_zero) def = true;
  40714e:	2301      	movs	r3, #1
  407150:	e786      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->radius_zero) def = true;
  407152:	2301      	movs	r3, #1
  407154:	e784      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->shadow_width_zero) def = true;
  407156:	2301      	movs	r3, #1
  407158:	e782      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->pad_all_zero) def = true;
  40715a:	2301      	movs	r3, #1
  40715c:	e780      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->margin_all_zero) def = true;
  40715e:	2301      	movs	r3, #1
  407160:	e77e      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->blend_mode_all_normal) def = true;
  407162:	2301      	movs	r3, #1
  407164:	e77c      	b.n	407060 <_lv_obj_get_style_int+0xd4>
                    if(list->text_decor_none) def = true;
  407166:	2301      	movs	r3, #1
  407168:	e77a      	b.n	407060 <_lv_obj_get_style_int+0xd4>
        if(res == LV_RES_OK) return value_act;
  40716a:	f9bd 0006 	ldrsh.w	r0, [sp, #6]
}
  40716e:	b003      	add	sp, #12
  407170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        parent = lv_obj_get_parent(parent);
  407174:	4638      	mov	r0, r7
  407176:	4b13      	ldr	r3, [pc, #76]	; (4071c4 <_lv_obj_get_style_int+0x238>)
  407178:	4798      	blx	r3
  40717a:	4607      	mov	r7, r0
  40717c:	e789      	b.n	407092 <_lv_obj_get_style_int+0x106>
    prop = prop & (~LV_STYLE_STATE_MASK);
  40717e:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
  407182:	b2a4      	uxth	r4, r4
    switch(prop) {
  407184:	2c22      	cmp	r4, #34	; 0x22
  407186:	d00f      	beq.n	4071a8 <_lv_obj_get_style_int+0x21c>
  407188:	d806      	bhi.n	407198 <_lv_obj_get_style_int+0x20c>
  40718a:	2c03      	cmp	r4, #3
  40718c:	d010      	beq.n	4071b0 <_lv_obj_get_style_int+0x224>
  40718e:	2c07      	cmp	r4, #7
  407190:	d10c      	bne.n	4071ac <_lv_obj_get_style_int+0x220>
            return LV_IMG_ZOOM_NONE;
  407192:	f44f 7080 	mov.w	r0, #256	; 0x100
  407196:	e7ea      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
    switch(prop) {
  407198:	2c31      	cmp	r4, #49	; 0x31
  40719a:	d003      	beq.n	4071a4 <_lv_obj_get_style_int+0x218>
  40719c:	2cc0      	cmp	r4, #192	; 0xc0
  40719e:	d105      	bne.n	4071ac <_lv_obj_get_style_int+0x220>
            return LV_DPI / 8;
  4071a0:	2012      	movs	r0, #18
  4071a2:	e7e4      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
            return LV_BORDER_SIDE_FULL;
  4071a4:	200f      	movs	r0, #15
  4071a6:	e7e2      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
            return 255;
  4071a8:	20ff      	movs	r0, #255	; 0xff
  4071aa:	e7e0      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
    return 0;
  4071ac:	2000      	movs	r0, #0
  4071ae:	e7de      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
            return LV_DPI / 20;
  4071b0:	2007      	movs	r0, #7
  4071b2:	e7dc      	b.n	40716e <_lv_obj_get_style_int+0x1e2>
  4071b4:	00406b11 	.word	0x00406b11
  4071b8:	00406929 	.word	0x00406929
  4071bc:	0040a945 	.word	0x0040a945
  4071c0:	00405755 	.word	0x00405755
  4071c4:	004054f5 	.word	0x004054f5

004071c8 <lv_obj_get_width_fit>:
{
  4071c8:	b570      	push	{r4, r5, r6, lr}
  4071ca:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4071cc:	4b0e      	ldr	r3, [pc, #56]	; (407208 <lv_obj_get_width_fit+0x40>)
  4071ce:	4798      	blx	r3
  4071d0:	b928      	cbnz	r0, 4071de <lv_obj_get_width_fit+0x16>
  4071d2:	4622      	mov	r2, r4
  4071d4:	2300      	movs	r3, #0
  4071d6:	480d      	ldr	r0, [pc, #52]	; (40720c <lv_obj_get_width_fit+0x44>)
  4071d8:	490d      	ldr	r1, [pc, #52]	; (407210 <lv_obj_get_width_fit+0x48>)
  4071da:	4788      	blx	r1
  4071dc:	e7fe      	b.n	4071dc <lv_obj_get_width_fit+0x14>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4071de:	2212      	movs	r2, #18
  4071e0:	2100      	movs	r1, #0
  4071e2:	4620      	mov	r0, r4
  4071e4:	4d0b      	ldr	r5, [pc, #44]	; (407214 <lv_obj_get_width_fit+0x4c>)
  4071e6:	47a8      	blx	r5
  4071e8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4071ea:	2213      	movs	r2, #19
  4071ec:	2100      	movs	r1, #0
  4071ee:	4620      	mov	r0, r4
  4071f0:	47a8      	blx	r5
  4071f2:	4605      	mov	r5, r0
    return lv_obj_get_width(obj) - left - right;
  4071f4:	4620      	mov	r0, r4
  4071f6:	4b08      	ldr	r3, [pc, #32]	; (407218 <lv_obj_get_width_fit+0x50>)
  4071f8:	4798      	blx	r3
  4071fa:	b280      	uxth	r0, r0
  4071fc:	1b80      	subs	r0, r0, r6
  4071fe:	b280      	uxth	r0, r0
  407200:	1b40      	subs	r0, r0, r5
}
  407202:	b200      	sxth	r0, r0
  407204:	bd70      	pop	{r4, r5, r6, pc}
  407206:	bf00      	nop
  407208:	004157b9 	.word	0x004157b9
  40720c:	004260c4 	.word	0x004260c4
  407210:	004157c5 	.word	0x004157c5
  407214:	00406f8d 	.word	0x00406f8d
  407218:	004056c9 	.word	0x004056c9

0040721c <update_style_cache_children>:
{
  40721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407220:	4606      	mov	r6, r0
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407222:	2500      	movs	r5, #0
  407224:	e009      	b.n	40723a <update_style_cache_children+0x1e>
            list->text_space_zero = 0;
  407226:	79e3      	ldrb	r3, [r4, #7]
  407228:	f36f 1345 	bfc	r3, #5, #1
  40722c:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
  40722e:	7963      	ldrb	r3, [r4, #5]
  407230:	f368 03c3 	bfi	r3, r8, #3, #1
  407234:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  407236:	3501      	adds	r5, #1
  407238:	b2ed      	uxtb	r5, r5
  40723a:	2d40      	cmp	r5, #64	; 0x40
  40723c:	d058      	beq.n	4072f0 <update_style_cache_children+0xd4>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40723e:	4629      	mov	r1, r5
  407240:	4630      	mov	r0, r6
  407242:	4b34      	ldr	r3, [pc, #208]	; (407314 <update_style_cache_children+0xf8>)
  407244:	4798      	blx	r3
        if(list == NULL) break;
  407246:	4604      	mov	r4, r0
  407248:	2800      	cmp	r0, #0
  40724a:	d051      	beq.n	4072f0 <update_style_cache_children+0xd4>
        bool ignore_cache_ori = list->ignore_cache;
  40724c:	7943      	ldrb	r3, [r0, #5]
  40724e:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
  407252:	f043 0308 	orr.w	r3, r3, #8
  407256:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407258:	f248 020c 	movw	r2, #32780	; 0x800c
  40725c:	4629      	mov	r1, r5
  40725e:	4630      	mov	r0, r6
  407260:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 407328 <update_style_cache_children+0x10c>
  407264:	47c8      	blx	r9
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
  407266:	28ff      	cmp	r0, #255	; 0xff
  407268:	bf14      	ite	ne
  40726a:	2000      	movne	r0, #0
  40726c:	2001      	moveq	r0, #1
  40726e:	7963      	ldrb	r3, [r4, #5]
  407270:	f360 1345 	bfi	r3, r0, #5, #1
  407274:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  407276:	f248 0282 	movw	r2, #32898	; 0x8082
  40727a:	4629      	mov	r1, r5
  40727c:	4630      	mov	r0, r6
  40727e:	4f26      	ldr	r7, [pc, #152]	; (407318 <update_style_cache_children+0xfc>)
  407280:	47b8      	blx	r7
  407282:	b2c0      	uxtb	r0, r0
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
  407284:	fab0 f080 	clz	r0, r0
  407288:	0940      	lsrs	r0, r0, #5
  40728a:	79e3      	ldrb	r3, [r4, #7]
  40728c:	f360 1386 	bfi	r3, r0, #6, #1
  407290:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  407292:	f248 028e 	movw	r2, #32910	; 0x808e
  407296:	4629      	mov	r1, r5
  407298:	4630      	mov	r0, r6
  40729a:	4b20      	ldr	r3, [pc, #128]	; (40731c <update_style_cache_children+0x100>)
  40729c:	4798      	blx	r3
  40729e:	4682      	mov	sl, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
  4072a0:	4b1f      	ldr	r3, [pc, #124]	; (407320 <update_style_cache_children+0x104>)
  4072a2:	4798      	blx	r3
  4072a4:	4582      	cmp	sl, r0
  4072a6:	bf14      	ite	ne
  4072a8:	2000      	movne	r0, #0
  4072aa:	2001      	moveq	r0, #1
  4072ac:	79e3      	ldrb	r3, [r4, #7]
  4072ae:	f360 13c7 	bfi	r3, r0, #7, #1
  4072b2:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  4072b4:	f248 02ad 	movw	r2, #32941	; 0x80ad
  4072b8:	4629      	mov	r1, r5
  4072ba:	4630      	mov	r0, r6
  4072bc:	47c8      	blx	r9
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
  4072be:	fab0 f080 	clz	r0, r0
  4072c2:	0940      	lsrs	r0, r0, #5
  4072c4:	79e3      	ldrb	r3, [r4, #7]
  4072c6:	f360 1304 	bfi	r3, r0, #4, #1
        list->text_space_zero = 1;
  4072ca:	b2db      	uxtb	r3, r3
  4072cc:	f043 0320 	orr.w	r3, r3, #32
  4072d0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  4072d2:	f248 0280 	movw	r2, #32896	; 0x8080
  4072d6:	4629      	mov	r1, r5
  4072d8:	4630      	mov	r0, r6
  4072da:	47b8      	blx	r7
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
  4072dc:	2800      	cmp	r0, #0
  4072de:	d1a2      	bne.n	407226 <update_style_cache_children+0xa>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  4072e0:	f248 0281 	movw	r2, #32897	; 0x8081
  4072e4:	4629      	mov	r1, r5
  4072e6:	4630      	mov	r0, r6
  4072e8:	47b8      	blx	r7
  4072ea:	2800      	cmp	r0, #0
  4072ec:	d09f      	beq.n	40722e <update_style_cache_children+0x12>
  4072ee:	e79a      	b.n	407226 <update_style_cache_children+0xa>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4072f0:	2100      	movs	r1, #0
  4072f2:	4630      	mov	r0, r6
  4072f4:	4b0b      	ldr	r3, [pc, #44]	; (407324 <update_style_cache_children+0x108>)
  4072f6:	4798      	blx	r3
  4072f8:	4604      	mov	r4, r0
    while(child) {
  4072fa:	e007      	b.n	40730c <update_style_cache_children+0xf0>
        update_style_cache_children(child);
  4072fc:	4620      	mov	r0, r4
  4072fe:	f7ff ff8d 	bl	40721c <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
  407302:	4621      	mov	r1, r4
  407304:	4630      	mov	r0, r6
  407306:	4b07      	ldr	r3, [pc, #28]	; (407324 <update_style_cache_children+0x108>)
  407308:	4798      	blx	r3
  40730a:	4604      	mov	r4, r0
    while(child) {
  40730c:	2c00      	cmp	r4, #0
  40730e:	d1f5      	bne.n	4072fc <update_style_cache_children+0xe0>
}
  407310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407314:	00405755 	.word	0x00405755
  407318:	00406f8d 	.word	0x00406f8d
  40731c:	00406e85 	.word	0x00406e85
  407320:	00417251 	.word	0x00417251
  407324:	004055c9 	.word	0x004055c9
  407328:	00406a01 	.word	0x00406a01

0040732c <invalidate_style_cache>:
{
  40732c:	b538      	push	{r3, r4, r5, lr}
  40732e:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
  407330:	4610      	mov	r0, r2
  407332:	4b19      	ldr	r3, [pc, #100]	; (407398 <invalidate_style_cache+0x6c>)
  407334:	4798      	blx	r3
  407336:	b170      	cbz	r0, 407356 <invalidate_style_cache+0x2a>
  407338:	2400      	movs	r4, #0
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40733a:	2c3f      	cmp	r4, #63	; 0x3f
  40733c:	d80c      	bhi.n	407358 <invalidate_style_cache+0x2c>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40733e:	4621      	mov	r1, r4
  407340:	4628      	mov	r0, r5
  407342:	4b16      	ldr	r3, [pc, #88]	; (40739c <invalidate_style_cache+0x70>)
  407344:	4798      	blx	r3
        if(list == NULL) break;
  407346:	b138      	cbz	r0, 407358 <invalidate_style_cache+0x2c>
        list->valid_cache = 0;
  407348:	7942      	ldrb	r2, [r0, #5]
  40734a:	f36f 0282 	bfc	r2, #2, #1
  40734e:	7142      	strb	r2, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  407350:	3401      	adds	r4, #1
  407352:	b2e4      	uxtb	r4, r4
  407354:	e7f1      	b.n	40733a <invalidate_style_cache+0xe>
  407356:	bd38      	pop	{r3, r4, r5, pc}
  407358:	2440      	movs	r4, #64	; 0x40
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  40735a:	2cff      	cmp	r4, #255	; 0xff
  40735c:	d00b      	beq.n	407376 <invalidate_style_cache+0x4a>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  40735e:	4621      	mov	r1, r4
  407360:	4628      	mov	r0, r5
  407362:	4b0e      	ldr	r3, [pc, #56]	; (40739c <invalidate_style_cache+0x70>)
  407364:	4798      	blx	r3
        if(list == NULL) break;
  407366:	b130      	cbz	r0, 407376 <invalidate_style_cache+0x4a>
        list->valid_cache = 0;
  407368:	7942      	ldrb	r2, [r0, #5]
  40736a:	f36f 0282 	bfc	r2, #2, #1
  40736e:	7142      	strb	r2, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
  407370:	3401      	adds	r4, #1
  407372:	b2e4      	uxtb	r4, r4
  407374:	e7f1      	b.n	40735a <invalidate_style_cache+0x2e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  407376:	2100      	movs	r1, #0
  407378:	4628      	mov	r0, r5
  40737a:	4b09      	ldr	r3, [pc, #36]	; (4073a0 <invalidate_style_cache+0x74>)
  40737c:	4798      	blx	r3
  40737e:	4604      	mov	r4, r0
    while(child) {
  407380:	e007      	b.n	407392 <invalidate_style_cache+0x66>
        update_style_cache_children(child);
  407382:	4620      	mov	r0, r4
  407384:	4b07      	ldr	r3, [pc, #28]	; (4073a4 <invalidate_style_cache+0x78>)
  407386:	4798      	blx	r3
        child = lv_obj_get_child(obj, child);
  407388:	4621      	mov	r1, r4
  40738a:	4628      	mov	r0, r5
  40738c:	4b04      	ldr	r3, [pc, #16]	; (4073a0 <invalidate_style_cache+0x74>)
  40738e:	4798      	blx	r3
  407390:	4604      	mov	r4, r0
    while(child) {
  407392:	2c00      	cmp	r4, #0
  407394:	d1f5      	bne.n	407382 <invalidate_style_cache+0x56>
  407396:	bd38      	pop	{r3, r4, r5, pc}
  407398:	00404efd 	.word	0x00404efd
  40739c:	00405755 	.word	0x00405755
  4073a0:	004055c9 	.word	0x004055c9
  4073a4:	0040721d 	.word	0x0040721d

004073a8 <lv_obj_refresh_style>:
{
  4073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4073aa:	4605      	mov	r5, r0
  4073ac:	460f      	mov	r7, r1
  4073ae:	4614      	mov	r4, r2
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  4073b0:	4b37      	ldr	r3, [pc, #220]	; (407490 <lv_obj_refresh_style+0xe8>)
  4073b2:	4798      	blx	r3
  4073b4:	b928      	cbnz	r0, 4073c2 <lv_obj_refresh_style+0x1a>
  4073b6:	462a      	mov	r2, r5
  4073b8:	2300      	movs	r3, #0
  4073ba:	4836      	ldr	r0, [pc, #216]	; (407494 <lv_obj_refresh_style+0xec>)
  4073bc:	4936      	ldr	r1, [pc, #216]	; (407498 <lv_obj_refresh_style+0xf0>)
  4073be:	4788      	blx	r1
  4073c0:	e7fe      	b.n	4073c0 <lv_obj_refresh_style+0x18>
  4073c2:	4606      	mov	r6, r0
    invalidate_style_cache(obj, part, prop);
  4073c4:	4622      	mov	r2, r4
  4073c6:	4639      	mov	r1, r7
  4073c8:	4628      	mov	r0, r5
  4073ca:	4b34      	ldr	r3, [pc, #208]	; (40749c <lv_obj_refresh_style+0xf4>)
  4073cc:	4798      	blx	r3
    switch(prop) {
  4073ce:	2c71      	cmp	r4, #113	; 0x71
  4073d0:	d83c      	bhi.n	40744c <lv_obj_refresh_style+0xa4>
  4073d2:	2c70      	cmp	r4, #112	; 0x70
  4073d4:	d20c      	bcs.n	4073f0 <lv_obj_refresh_style+0x48>
  4073d6:	2c41      	cmp	r4, #65	; 0x41
  4073d8:	d82e      	bhi.n	407438 <lv_obj_refresh_style+0x90>
  4073da:	2c40      	cmp	r4, #64	; 0x40
  4073dc:	d208      	bcs.n	4073f0 <lv_obj_refresh_style+0x48>
  4073de:	2c02      	cmp	r4, #2
  4073e0:	d305      	bcc.n	4073ee <lv_obj_refresh_style+0x46>
  4073e2:	2c07      	cmp	r4, #7
  4073e4:	d904      	bls.n	4073f0 <lv_obj_refresh_style+0x48>
  4073e6:	f1a4 0310 	sub.w	r3, r4, #16
  4073ea:	2b08      	cmp	r3, #8
  4073ec:	d900      	bls.n	4073f0 <lv_obj_refresh_style+0x48>
            real_refr = false;
  4073ee:	2600      	movs	r6, #0
    if(real_refr) {
  4073f0:	2e00      	cmp	r6, #0
  4073f2:	d048      	beq.n	407486 <lv_obj_refresh_style+0xde>
        lv_obj_invalidate(obj);
  4073f4:	4628      	mov	r0, r5
  4073f6:	4b2a      	ldr	r3, [pc, #168]	; (4074a0 <lv_obj_refresh_style+0xf8>)
  4073f8:	4798      	blx	r3
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
  4073fa:	69eb      	ldr	r3, [r5, #28]
  4073fc:	2200      	movs	r2, #0
  4073fe:	2104      	movs	r1, #4
  407400:	4628      	mov	r0, r5
  407402:	4798      	blx	r3
        switch(prop) {
  407404:	2c15      	cmp	r4, #21
  407406:	d309      	bcc.n	40741c <lv_obj_refresh_style+0x74>
  407408:	2c18      	cmp	r4, #24
  40740a:	d901      	bls.n	407410 <lv_obj_refresh_style+0x68>
  40740c:	2cff      	cmp	r4, #255	; 0xff
  40740e:	d105      	bne.n	40741c <lv_obj_refresh_style+0x74>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
  407410:	6828      	ldr	r0, [r5, #0]
  407412:	b118      	cbz	r0, 40741c <lv_obj_refresh_style+0x74>
  407414:	69c3      	ldr	r3, [r0, #28]
  407416:	2200      	movs	r2, #0
  407418:	2101      	movs	r1, #1
  40741a:	4798      	blx	r3
        lv_obj_invalidate(obj);
  40741c:	4628      	mov	r0, r5
  40741e:	4b20      	ldr	r3, [pc, #128]	; (4074a0 <lv_obj_refresh_style+0xf8>)
  407420:	4798      	blx	r3
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
  407422:	0be3      	lsrs	r3, r4, #15
  407424:	2cff      	cmp	r4, #255	; 0xff
  407426:	bf14      	ite	ne
  407428:	461c      	movne	r4, r3
  40742a:	f043 0401 	orreq.w	r4, r3, #1
  40742e:	b36c      	cbz	r4, 40748c <lv_obj_refresh_style+0xe4>
  407430:	4628      	mov	r0, r5
  407432:	4b1c      	ldr	r3, [pc, #112]	; (4074a4 <lv_obj_refresh_style+0xfc>)
  407434:	4798      	blx	r3
  407436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(prop) {
  407438:	2c53      	cmp	r4, #83	; 0x53
  40743a:	d804      	bhi.n	407446 <lv_obj_refresh_style+0x9e>
  40743c:	2c50      	cmp	r4, #80	; 0x50
  40743e:	d2d7      	bcs.n	4073f0 <lv_obj_refresh_style+0x48>
  407440:	2c4c      	cmp	r4, #76	; 0x4c
  407442:	d1d4      	bne.n	4073ee <lv_obj_refresh_style+0x46>
  407444:	e7d4      	b.n	4073f0 <lv_obj_refresh_style+0x48>
  407446:	2c5c      	cmp	r4, #92	; 0x5c
  407448:	d1d1      	bne.n	4073ee <lv_obj_refresh_style+0x46>
  40744a:	e7d1      	b.n	4073f0 <lv_obj_refresh_style+0x48>
  40744c:	2c7f      	cmp	r4, #127	; 0x7f
  40744e:	d90c      	bls.n	40746a <lv_obj_refresh_style+0xc2>
  407450:	f248 0381 	movw	r3, #32897	; 0x8081
  407454:	429c      	cmp	r4, r3
  407456:	d811      	bhi.n	40747c <lv_obj_refresh_style+0xd4>
  407458:	f248 0380 	movw	r3, #32896	; 0x8080
  40745c:	429c      	cmp	r4, r3
  40745e:	d2c7      	bcs.n	4073f0 <lv_obj_refresh_style+0x48>
  407460:	2c90      	cmp	r4, #144	; 0x90
  407462:	d0c5      	beq.n	4073f0 <lv_obj_refresh_style+0x48>
  407464:	2cff      	cmp	r4, #255	; 0xff
  407466:	d1c2      	bne.n	4073ee <lv_obj_refresh_style+0x46>
  407468:	e7c2      	b.n	4073f0 <lv_obj_refresh_style+0x48>
  40746a:	2c7e      	cmp	r4, #126	; 0x7e
  40746c:	d2c0      	bcs.n	4073f0 <lv_obj_refresh_style+0x48>
  40746e:	2c73      	cmp	r4, #115	; 0x73
  407470:	d3bd      	bcc.n	4073ee <lv_obj_refresh_style+0x46>
  407472:	2c75      	cmp	r4, #117	; 0x75
  407474:	d9bc      	bls.n	4073f0 <lv_obj_refresh_style+0x48>
  407476:	2c7c      	cmp	r4, #124	; 0x7c
  407478:	d1b9      	bne.n	4073ee <lv_obj_refresh_style+0x46>
  40747a:	e7b9      	b.n	4073f0 <lv_obj_refresh_style+0x48>
  40747c:	f248 038e 	movw	r3, #32910	; 0x808e
  407480:	429c      	cmp	r4, r3
  407482:	d1b4      	bne.n	4073ee <lv_obj_refresh_style+0x46>
  407484:	e7b4      	b.n	4073f0 <lv_obj_refresh_style+0x48>
        lv_obj_invalidate(obj);
  407486:	4628      	mov	r0, r5
  407488:	4b05      	ldr	r3, [pc, #20]	; (4074a0 <lv_obj_refresh_style+0xf8>)
  40748a:	4798      	blx	r3
  40748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40748e:	bf00      	nop
  407490:	004157b9 	.word	0x004157b9
  407494:	004260c4 	.word	0x004260c4
  407498:	004157c5 	.word	0x004157c5
  40749c:	0040732d 	.word	0x0040732d
  4074a0:	00405aa1 	.word	0x00405aa1
  4074a4:	00406225 	.word	0x00406225

004074a8 <lv_obj_reset_style_list>:
{
  4074a8:	b538      	push	{r3, r4, r5, lr}
  4074aa:	4604      	mov	r4, r0
  4074ac:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
  4074ae:	4b04      	ldr	r3, [pc, #16]	; (4074c0 <lv_obj_reset_style_list+0x18>)
  4074b0:	4798      	blx	r3
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  4074b2:	22ff      	movs	r2, #255	; 0xff
  4074b4:	4629      	mov	r1, r5
  4074b6:	4620      	mov	r0, r4
  4074b8:	4b02      	ldr	r3, [pc, #8]	; (4074c4 <lv_obj_reset_style_list+0x1c>)
  4074ba:	4798      	blx	r3
  4074bc:	bd38      	pop	{r3, r4, r5, pc}
  4074be:	bf00      	nop
  4074c0:	0040581d 	.word	0x0040581d
  4074c4:	004073a9 	.word	0x004073a9

004074c8 <_lv_obj_set_style_local_int>:
{
  4074c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4074ca:	4605      	mov	r5, r0
  4074cc:	460e      	mov	r6, r1
  4074ce:	4614      	mov	r4, r2
  4074d0:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  4074d2:	4b09      	ldr	r3, [pc, #36]	; (4074f8 <_lv_obj_set_style_local_int+0x30>)
  4074d4:	4798      	blx	r3
    _lv_style_list_set_local_int(style_dsc, prop, value);
  4074d6:	463a      	mov	r2, r7
  4074d8:	4621      	mov	r1, r4
  4074da:	4b08      	ldr	r3, [pc, #32]	; (4074fc <_lv_obj_set_style_local_int+0x34>)
  4074dc:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  4074de:	2300      	movs	r3, #0
  4074e0:	4622      	mov	r2, r4
  4074e2:	4631      	mov	r1, r6
  4074e4:	4628      	mov	r0, r5
  4074e6:	4f06      	ldr	r7, [pc, #24]	; (407500 <_lv_obj_set_style_local_int+0x38>)
  4074e8:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  4074ea:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  4074ee:	4631      	mov	r1, r6
  4074f0:	4628      	mov	r0, r5
  4074f2:	4b04      	ldr	r3, [pc, #16]	; (407504 <_lv_obj_set_style_local_int+0x3c>)
  4074f4:	4798      	blx	r3
  4074f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4074f8:	00405755 	.word	0x00405755
  4074fc:	0040a90d 	.word	0x0040a90d
  407500:	00405785 	.word	0x00405785
  407504:	004073a9 	.word	0x004073a9

00407508 <_lv_obj_set_style_local_color>:
{
  407508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40750a:	4605      	mov	r5, r0
  40750c:	460e      	mov	r6, r1
  40750e:	4614      	mov	r4, r2
  407510:	461f      	mov	r7, r3
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
  407512:	4b09      	ldr	r3, [pc, #36]	; (407538 <_lv_obj_set_style_local_color+0x30>)
  407514:	4798      	blx	r3
    _lv_style_list_set_local_color(style_dsc, prop, color);
  407516:	463a      	mov	r2, r7
  407518:	4621      	mov	r1, r4
  40751a:	4b08      	ldr	r3, [pc, #32]	; (40753c <_lv_obj_set_style_local_color+0x34>)
  40751c:	4798      	blx	r3
    trans_del(obj, part, prop, NULL);
  40751e:	2300      	movs	r3, #0
  407520:	4622      	mov	r2, r4
  407522:	4631      	mov	r1, r6
  407524:	4628      	mov	r0, r5
  407526:	4f06      	ldr	r7, [pc, #24]	; (407540 <_lv_obj_set_style_local_color+0x38>)
  407528:	47b8      	blx	r7
    lv_obj_refresh_style(obj, part, prop & (~LV_STYLE_STATE_MASK));
  40752a:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
  40752e:	4631      	mov	r1, r6
  407530:	4628      	mov	r0, r5
  407532:	4b04      	ldr	r3, [pc, #16]	; (407544 <_lv_obj_set_style_local_color+0x3c>)
  407534:	4798      	blx	r3
  407536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407538:	00405755 	.word	0x00405755
  40753c:	0040a929 	.word	0x0040a929
  407540:	00405785 	.word	0x00405785
  407544:	004073a9 	.word	0x004073a9

00407548 <report_style_mod_core>:
{
  407548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40754a:	4604      	mov	r4, r0
  40754c:	460e      	mov	r6, r1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  40754e:	2500      	movs	r5, #0
  407550:	e028      	b.n	4075a4 <report_style_mod_core+0x5c>
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
  407552:	1c59      	adds	r1, r3, #1
  407554:	b2c9      	uxtb	r1, r1
  407556:	e012      	b.n	40757e <report_style_mod_core+0x36>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407558:	2200      	movs	r2, #0
            if(_class == style || style == NULL) {
  40755a:	2c00      	cmp	r4, #0
  40755c:	bf18      	it	ne
  40755e:	4294      	cmpne	r4, r2
  407560:	d019      	beq.n	407596 <report_style_mod_core+0x4e>
        for(ci = 0; ci < list->style_cnt; ci++) {
  407562:	3301      	adds	r3, #1
  407564:	b2db      	uxtb	r3, r3
  407566:	793a      	ldrb	r2, [r7, #4]
  407568:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40756c:	4293      	cmp	r3, r2
  40756e:	da17      	bge.n	4075a0 <report_style_mod_core+0x58>
    if(list->has_trans && list->skip_trans) id++;
  407570:	88b9      	ldrh	r1, [r7, #4]
  407572:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  407576:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  40757a:	d0ea      	beq.n	407552 <report_style_mod_core+0xa>
  40757c:	4619      	mov	r1, r3
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40757e:	7938      	ldrb	r0, [r7, #4]
  407580:	f010 0f3f 	tst.w	r0, #63	; 0x3f
  407584:	d0e8      	beq.n	407558 <report_style_mod_core+0x10>
  407586:	428a      	cmp	r2, r1
  407588:	dd03      	ble.n	407592 <report_style_mod_core+0x4a>
    return list->style_list[id];
  40758a:	683a      	ldr	r2, [r7, #0]
  40758c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  407590:	e7e3      	b.n	40755a <report_style_mod_core+0x12>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  407592:	2200      	movs	r2, #0
  407594:	e7e1      	b.n	40755a <report_style_mod_core+0x12>
                lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  407596:	22ff      	movs	r2, #255	; 0xff
  407598:	4629      	mov	r1, r5
  40759a:	4630      	mov	r0, r6
  40759c:	4b0f      	ldr	r3, [pc, #60]	; (4075dc <report_style_mod_core+0x94>)
  40759e:	4798      	blx	r3
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
  4075a0:	3501      	adds	r5, #1
  4075a2:	b2ed      	uxtb	r5, r5
  4075a4:	2d40      	cmp	r5, #64	; 0x40
  4075a6:	d007      	beq.n	4075b8 <report_style_mod_core+0x70>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  4075a8:	4629      	mov	r1, r5
  4075aa:	4630      	mov	r0, r6
  4075ac:	4b0c      	ldr	r3, [pc, #48]	; (4075e0 <report_style_mod_core+0x98>)
  4075ae:	4798      	blx	r3
        if(list == NULL) break;
  4075b0:	4607      	mov	r7, r0
  4075b2:	b108      	cbz	r0, 4075b8 <report_style_mod_core+0x70>
  4075b4:	2300      	movs	r3, #0
  4075b6:	e7d6      	b.n	407566 <report_style_mod_core+0x1e>
    lv_obj_t * child = lv_obj_get_child(obj, NULL);
  4075b8:	2100      	movs	r1, #0
  4075ba:	4630      	mov	r0, r6
  4075bc:	4b09      	ldr	r3, [pc, #36]	; (4075e4 <report_style_mod_core+0x9c>)
  4075be:	4798      	blx	r3
  4075c0:	4605      	mov	r5, r0
    while(child) {
  4075c2:	e008      	b.n	4075d6 <report_style_mod_core+0x8e>
        report_style_mod_core(style, child);
  4075c4:	4629      	mov	r1, r5
  4075c6:	4620      	mov	r0, r4
  4075c8:	f7ff ffbe 	bl	407548 <report_style_mod_core>
        child = lv_obj_get_child(obj, child);
  4075cc:	4629      	mov	r1, r5
  4075ce:	4630      	mov	r0, r6
  4075d0:	4b04      	ldr	r3, [pc, #16]	; (4075e4 <report_style_mod_core+0x9c>)
  4075d2:	4798      	blx	r3
  4075d4:	4605      	mov	r5, r0
    while(child) {
  4075d6:	2d00      	cmp	r5, #0
  4075d8:	d1f4      	bne.n	4075c4 <report_style_mod_core+0x7c>
}
  4075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4075dc:	004073a9 	.word	0x004073a9
  4075e0:	00405755 	.word	0x00405755
  4075e4:	004055c9 	.word	0x004055c9

004075e8 <lv_obj_report_style_mod>:
{
  4075e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4075ea:	4606      	mov	r6, r0
    lv_disp_t * d = lv_disp_get_next(NULL);
  4075ec:	2000      	movs	r0, #0
  4075ee:	4b0e      	ldr	r3, [pc, #56]	; (407628 <lv_obj_report_style_mod+0x40>)
  4075f0:	4798      	blx	r3
  4075f2:	4607      	mov	r7, r0
    while(d) {
  4075f4:	e00e      	b.n	407614 <lv_obj_report_style_mod+0x2c>
            report_style_mod_core(style, i);
  4075f6:	4621      	mov	r1, r4
  4075f8:	4630      	mov	r0, r6
  4075fa:	4b0c      	ldr	r3, [pc, #48]	; (40762c <lv_obj_report_style_mod+0x44>)
  4075fc:	4798      	blx	r3
        _LV_LL_READ(d->scr_ll, i) {
  4075fe:	4621      	mov	r1, r4
  407600:	4628      	mov	r0, r5
  407602:	4b0b      	ldr	r3, [pc, #44]	; (407630 <lv_obj_report_style_mod+0x48>)
  407604:	4798      	blx	r3
  407606:	4604      	mov	r4, r0
  407608:	2c00      	cmp	r4, #0
  40760a:	d1f4      	bne.n	4075f6 <lv_obj_report_style_mod+0xe>
        d = lv_disp_get_next(d);
  40760c:	4638      	mov	r0, r7
  40760e:	4b06      	ldr	r3, [pc, #24]	; (407628 <lv_obj_report_style_mod+0x40>)
  407610:	4798      	blx	r3
  407612:	4607      	mov	r7, r0
    while(d) {
  407614:	b137      	cbz	r7, 407624 <lv_obj_report_style_mod+0x3c>
        _LV_LL_READ(d->scr_ll, i) {
  407616:	f107 0538 	add.w	r5, r7, #56	; 0x38
  40761a:	4628      	mov	r0, r5
  40761c:	4b05      	ldr	r3, [pc, #20]	; (407634 <lv_obj_report_style_mod+0x4c>)
  40761e:	4798      	blx	r3
  407620:	4604      	mov	r4, r0
  407622:	e7f1      	b.n	407608 <lv_obj_report_style_mod+0x20>
}
  407624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407626:	bf00      	nop
  407628:	00414711 	.word	0x00414711
  40762c:	00407549 	.word	0x00407549
  407630:	00415add 	.word	0x00415add
  407634:	00415ac9 	.word	0x00415ac9

00407638 <trans_anim_cb>:
{
  407638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40763c:	4604      	mov	r4, r0
  40763e:	460d      	mov	r5, r1
    lv_style_list_t * list = lv_obj_get_style_list(tr->obj, tr->part);
  407640:	7981      	ldrb	r1, [r0, #6]
  407642:	6800      	ldr	r0, [r0, #0]
  407644:	4b4b      	ldr	r3, [pc, #300]	; (407774 <trans_anim_cb+0x13c>)
  407646:	4798      	blx	r3
    lv_style_t * style = _lv_style_list_get_transition_style(list);
  407648:	4b4b      	ldr	r3, [pc, #300]	; (407778 <trans_anim_cb+0x140>)
  40764a:	4798      	blx	r3
    if((tr->prop & 0xF) < LV_STYLE_ID_COLOR) { /*Value*/
  40764c:	88a1      	ldrh	r1, [r4, #4]
  40764e:	f001 030f 	and.w	r3, r1, #15
  407652:	2b08      	cmp	r3, #8
  407654:	dc1c      	bgt.n	407690 <trans_anim_cb+0x58>
        if(v == 0) x = tr->start_value._int;
  407656:	b955      	cbnz	r5, 40766e <trans_anim_cb+0x36>
  407658:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
        _lv_style_set_int(style, tr->prop, x);
  40765c:	4b47      	ldr	r3, [pc, #284]	; (40777c <trans_anim_cb+0x144>)
  40765e:	4798      	blx	r3
    lv_obj_refresh_style(tr->obj, tr->part, tr->prop);
  407660:	88a2      	ldrh	r2, [r4, #4]
  407662:	79a1      	ldrb	r1, [r4, #6]
  407664:	6820      	ldr	r0, [r4, #0]
  407666:	4b46      	ldr	r3, [pc, #280]	; (407780 <trans_anim_cb+0x148>)
  407668:	4798      	blx	r3
  40766a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if(v == 255) x = tr->end_value._int;
  40766e:	2dff      	cmp	r5, #255	; 0xff
  407670:	d00b      	beq.n	40768a <trans_anim_cb+0x52>
        else x = tr->start_value._int + ((int32_t)((int32_t)(tr->end_value._int - tr->start_value._int) * v) >> 8);
  407672:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
  407676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40767a:	1a9b      	subs	r3, r3, r2
  40767c:	fb03 f505 	mul.w	r5, r3, r5
  407680:	122d      	asrs	r5, r5, #8
  407682:	fa15 f282 	uxtah	r2, r5, r2
  407686:	b212      	sxth	r2, r2
  407688:	e7e8      	b.n	40765c <trans_anim_cb+0x24>
        else if(v == 255) x = tr->end_value._int;
  40768a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40768e:	e7e5      	b.n	40765c <trans_anim_cb+0x24>
    else if((tr->prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407690:	2b0b      	cmp	r3, #11
  407692:	dc50      	bgt.n	407736 <trans_anim_cb+0xfe>
        if(v <= 0) x = tr->start_value._color;
  407694:	2d00      	cmp	r5, #0
  407696:	dd05      	ble.n	4076a4 <trans_anim_cb+0x6c>
        else if(v >= 255) x = tr->end_value._color;
  407698:	2dfe      	cmp	r5, #254	; 0xfe
  40769a:	dd05      	ble.n	4076a8 <trans_anim_cb+0x70>
  40769c:	89a2      	ldrh	r2, [r4, #12]
        _lv_style_set_color(style, tr->prop, x);
  40769e:	4b39      	ldr	r3, [pc, #228]	; (407784 <trans_anim_cb+0x14c>)
  4076a0:	4798      	blx	r3
  4076a2:	e7dd      	b.n	407660 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._color;
  4076a4:	8922      	ldrh	r2, [r4, #8]
  4076a6:	e7fa      	b.n	40769e <trans_anim_cb+0x66>
        else x = lv_color_mix(tr->end_value._color, tr->start_value._color, v);
  4076a8:	b2ed      	uxtb	r5, r5
  4076aa:	89a7      	ldrh	r7, [r4, #12]
  4076ac:	8926      	ldrh	r6, [r4, #8]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4076ae:	f3c7 03c4 	ubfx	r3, r7, #3, #5
  4076b2:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  4076b6:	f1c5 0eff 	rsb	lr, r5, #255	; 0xff
  4076ba:	fb0e f202 	mul.w	r2, lr, r2
  4076be:	fb05 2303 	mla	r3, r5, r3, r2
  4076c2:	3380      	adds	r3, #128	; 0x80
  4076c4:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4076c8:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4076cc:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4076d0:	f04f 0200 	mov.w	r2, #0
  4076d4:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4076d8:	f007 0c07 	and.w	ip, r7, #7
  4076dc:	f3c7 3342 	ubfx	r3, r7, #13, #3
  4076e0:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
  4076e4:	f006 0807 	and.w	r8, r6, #7
  4076e8:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  4076ec:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
  4076f0:	fb0c fc0e 	mul.w	ip, ip, lr
  4076f4:	fb03 c305 	mla	r3, r3, r5, ip
  4076f8:	3380      	adds	r3, #128	; 0x80
  4076fa:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  4076fe:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  407702:	f3c3 6c82 	ubfx	ip, r3, #26, #3
  407706:	f36c 0202 	bfi	r2, ip, #0, #3
  40770a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40770e:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  407712:	f3c7 2704 	ubfx	r7, r7, #8, #5
  407716:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40771a:	fb06 fe0e 	mul.w	lr, r6, lr
  40771e:	fb07 e505 	mla	r5, r7, r5, lr
  407722:	3580      	adds	r5, #128	; 0x80
  407724:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  407728:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  40772c:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  407730:	f365 220c 	bfi	r2, r5, #8, #5
  407734:	e7b3      	b.n	40769e <trans_anim_cb+0x66>
    else if((tr->prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  407736:	2b0d      	cmp	r3, #13
  407738:	dc13      	bgt.n	407762 <trans_anim_cb+0x12a>
        if(v <= 0) x = tr->start_value._opa;
  40773a:	2d00      	cmp	r5, #0
  40773c:	dd05      	ble.n	40774a <trans_anim_cb+0x112>
        else if(v >= 255) x = tr->end_value._opa;
  40773e:	2dfe      	cmp	r5, #254	; 0xfe
  407740:	dd05      	ble.n	40774e <trans_anim_cb+0x116>
  407742:	7b22      	ldrb	r2, [r4, #12]
        _lv_style_set_opa(style, tr->prop, x);
  407744:	4b10      	ldr	r3, [pc, #64]	; (407788 <trans_anim_cb+0x150>)
  407746:	4798      	blx	r3
  407748:	e78a      	b.n	407660 <trans_anim_cb+0x28>
        if(v <= 0) x = tr->start_value._opa;
  40774a:	7a22      	ldrb	r2, [r4, #8]
  40774c:	e7fa      	b.n	407744 <trans_anim_cb+0x10c>
        else x = tr->start_value._opa + (((tr->end_value._opa - tr->start_value._opa) * v) >> 8);
  40774e:	7a22      	ldrb	r2, [r4, #8]
  407750:	7b23      	ldrb	r3, [r4, #12]
  407752:	1a9b      	subs	r3, r3, r2
  407754:	fb03 f505 	mul.w	r5, r3, r5
  407758:	f3c5 2507 	ubfx	r5, r5, #8, #8
  40775c:	442a      	add	r2, r5
  40775e:	b2d2      	uxtb	r2, r2
  407760:	e7f0      	b.n	407744 <trans_anim_cb+0x10c>
        if(v < 128) x = tr->start_value._ptr;
  407762:	2d7f      	cmp	r5, #127	; 0x7f
  407764:	dc03      	bgt.n	40776e <trans_anim_cb+0x136>
  407766:	68a2      	ldr	r2, [r4, #8]
        _lv_style_set_ptr(style, tr->prop, x);
  407768:	4b08      	ldr	r3, [pc, #32]	; (40778c <trans_anim_cb+0x154>)
  40776a:	4798      	blx	r3
  40776c:	e778      	b.n	407660 <trans_anim_cb+0x28>
        else x = tr->end_value._ptr;
  40776e:	68e2      	ldr	r2, [r4, #12]
  407770:	e7fa      	b.n	407768 <trans_anim_cb+0x130>
  407772:	bf00      	nop
  407774:	00405755 	.word	0x00405755
  407778:	0040a6f5 	.word	0x0040a6f5
  40777c:	00409c81 	.word	0x00409c81
  407780:	004073a9 	.word	0x004073a9
  407784:	00409e11 	.word	0x00409e11
  407788:	00409fa1 	.word	0x00409fa1
  40778c:	0040a131 	.word	0x0040a131

00407790 <trans_anim_start_cb>:
{
  407790:	b570      	push	{r4, r5, r6, lr}
    lv_style_trans_t * tr = a->var;
  407792:	6804      	ldr	r4, [r0, #0]
    lv_style_property_t prop_tmp = tr->prop;
  407794:	88a5      	ldrh	r5, [r4, #4]
    if((prop_tmp & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  407796:	f005 030f 	and.w	r3, r5, #15
  40779a:	2b08      	cmp	r3, #8
  40779c:	dd13      	ble.n	4077c6 <trans_anim_start_cb+0x36>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  40779e:	2b0b      	cmp	r3, #11
  4077a0:	dd18      	ble.n	4077d4 <trans_anim_start_cb+0x44>
    else if((prop_tmp & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  4077a2:	2b0d      	cmp	r3, #13
  4077a4:	dd1d      	ble.n	4077e2 <trans_anim_start_cb+0x52>
        tr->start_value._ptr = _lv_obj_get_style_ptr(tr->obj, tr->part, prop_tmp);
  4077a6:	462a      	mov	r2, r5
  4077a8:	79a1      	ldrb	r1, [r4, #6]
  4077aa:	6820      	ldr	r0, [r4, #0]
  4077ac:	4b10      	ldr	r3, [pc, #64]	; (4077f0 <trans_anim_start_cb+0x60>)
  4077ae:	4798      	blx	r3
  4077b0:	60a0      	str	r0, [r4, #8]
    tr->prop = 0;
  4077b2:	2300      	movs	r3, #0
  4077b4:	80a3      	strh	r3, [r4, #4]
    trans_del(tr->obj, tr->part, prop_tmp, tr);
  4077b6:	4623      	mov	r3, r4
  4077b8:	462a      	mov	r2, r5
  4077ba:	79a1      	ldrb	r1, [r4, #6]
  4077bc:	6820      	ldr	r0, [r4, #0]
  4077be:	4e0d      	ldr	r6, [pc, #52]	; (4077f4 <trans_anim_start_cb+0x64>)
  4077c0:	47b0      	blx	r6
    tr->prop = prop_tmp;
  4077c2:	80a5      	strh	r5, [r4, #4]
  4077c4:	bd70      	pop	{r4, r5, r6, pc}
        tr->start_value._int = _lv_obj_get_style_int(tr->obj, tr->part, prop_tmp);
  4077c6:	462a      	mov	r2, r5
  4077c8:	79a1      	ldrb	r1, [r4, #6]
  4077ca:	6820      	ldr	r0, [r4, #0]
  4077cc:	4b0a      	ldr	r3, [pc, #40]	; (4077f8 <trans_anim_start_cb+0x68>)
  4077ce:	4798      	blx	r3
  4077d0:	8120      	strh	r0, [r4, #8]
  4077d2:	e7ee      	b.n	4077b2 <trans_anim_start_cb+0x22>
        tr->start_value._color = _lv_obj_get_style_color(tr->obj, tr->part, prop_tmp);
  4077d4:	462a      	mov	r2, r5
  4077d6:	79a1      	ldrb	r1, [r4, #6]
  4077d8:	6820      	ldr	r0, [r4, #0]
  4077da:	4b08      	ldr	r3, [pc, #32]	; (4077fc <trans_anim_start_cb+0x6c>)
  4077dc:	4798      	blx	r3
  4077de:	8120      	strh	r0, [r4, #8]
  4077e0:	e7e7      	b.n	4077b2 <trans_anim_start_cb+0x22>
        tr->start_value._opa = _lv_obj_get_style_opa(tr->obj, tr->part, prop_tmp);
  4077e2:	462a      	mov	r2, r5
  4077e4:	79a1      	ldrb	r1, [r4, #6]
  4077e6:	6820      	ldr	r0, [r4, #0]
  4077e8:	4b05      	ldr	r3, [pc, #20]	; (407800 <trans_anim_start_cb+0x70>)
  4077ea:	4798      	blx	r3
  4077ec:	7220      	strb	r0, [r4, #8]
  4077ee:	e7e0      	b.n	4077b2 <trans_anim_start_cb+0x22>
  4077f0:	00406e85 	.word	0x00406e85
  4077f4:	00405785 	.word	0x00405785
  4077f8:	00406f8d 	.word	0x00406f8d
  4077fc:	00406979 	.word	0x00406979
  407800:	00406a01 	.word	0x00406a01

00407804 <trans_create>:
{
  407804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407808:	b085      	sub	sp, #20
  40780a:	4604      	mov	r4, r0
  40780c:	460d      	mov	r5, r1
  40780e:	4617      	mov	r7, r2
  407810:	4699      	mov	r9, r3
  407812:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  407816:	4611      	mov	r1, r2
  407818:	4bab      	ldr	r3, [pc, #684]	; (407ac8 <trans_create+0x2c4>)
  40781a:	4798      	blx	r3
  40781c:	4606      	mov	r6, r0
    lv_style_t * style_trans = _lv_style_list_get_transition_style(style_list);
  40781e:	4bab      	ldr	r3, [pc, #684]	; (407acc <trans_create+0x2c8>)
  407820:	4798      	blx	r3
  407822:	9000      	str	r0, [sp, #0]
    bool cache_ori = style_list->ignore_cache;
  407824:	f896 a005 	ldrb.w	sl, [r6, #5]
  407828:	f3ca 0ac0 	ubfx	sl, sl, #3, #1
    if((prop & 0xF) < LV_STYLE_ID_COLOR) { /*Int*/
  40782c:	f005 030f 	and.w	r3, r5, #15
  407830:	2b08      	cmp	r3, #8
  407832:	dd41      	ble.n	4078b8 <trans_create+0xb4>
    else if((prop & 0xF) < LV_STYLE_ID_OPA) { /*Color*/
  407834:	2b0b      	cmp	r3, #11
  407836:	f340 80b2 	ble.w	40799e <trans_create+0x19a>
    else if((prop & 0xF) < LV_STYLE_ID_PTR) { /*Opa*/
  40783a:	2b0d      	cmp	r3, #13
  40783c:	f300 80fb 	bgt.w	407a36 <trans_create+0x232>
        style_list->skip_trans = 1;
  407840:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407842:	f043 0309 	orr.w	r3, r3, #9
  407846:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  407848:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_opa_t o1 = _lv_obj_get_style_opa(obj, part, prop);
  40784c:	462a      	mov	r2, r5
  40784e:	4639      	mov	r1, r7
  407850:	4620      	mov	r0, r4
  407852:	f8df b27c 	ldr.w	fp, [pc, #636]	; 407ad0 <trans_create+0x2cc>
  407856:	47d8      	blx	fp
  407858:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  40785a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_opa_t o2 =  _lv_obj_get_style_opa(obj, part, prop);
  40785e:	462a      	mov	r2, r5
  407860:	4639      	mov	r1, r7
  407862:	4620      	mov	r0, r4
  407864:	47d8      	blx	fp
  407866:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  407868:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  40786a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  40786e:	f36a 03c3 	bfi	r3, sl, #3, #1
  407872:	7173      	strb	r3, [r6, #5]
        if(o1 == o2) return NULL;
  407874:	9b01      	ldr	r3, [sp, #4]
  407876:	4283      	cmp	r3, r0
  407878:	f000 8123 	beq.w	407ac2 <trans_create+0x2be>
        obj->state = prev_state;
  40787c:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        o1 = _lv_obj_get_style_opa(obj, part, prop);
  407880:	462a      	mov	r2, r5
  407882:	4639      	mov	r1, r7
  407884:	4620      	mov	r0, r4
  407886:	4b92      	ldr	r3, [pc, #584]	; (407ad0 <trans_create+0x2cc>)
  407888:	4798      	blx	r3
  40788a:	4606      	mov	r6, r0
        obj->state = new_state;
  40788c:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_opa(style_trans, prop, o1);   /*Be sure `trans_style` has a valid value */
  407890:	4602      	mov	r2, r0
  407892:	4629      	mov	r1, r5
  407894:	9800      	ldr	r0, [sp, #0]
  407896:	4b8f      	ldr	r3, [pc, #572]	; (407ad4 <trans_create+0x2d0>)
  407898:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  40789a:	488f      	ldr	r0, [pc, #572]	; (407ad8 <trans_create+0x2d4>)
  40789c:	4b8f      	ldr	r3, [pc, #572]	; (407adc <trans_create+0x2d8>)
  40789e:	4798      	blx	r3
  4078a0:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  4078a2:	4b8f      	ldr	r3, [pc, #572]	; (407ae0 <trans_create+0x2dc>)
  4078a4:	4798      	blx	r3
  4078a6:	2800      	cmp	r0, #0
  4078a8:	f000 80bf 	beq.w	407a2a <trans_create+0x226>
        if(tr == NULL) return NULL;
  4078ac:	2c00      	cmp	r4, #0
  4078ae:	d03d      	beq.n	40792c <trans_create+0x128>
        tr->start_value._opa = o1;
  4078b0:	7226      	strb	r6, [r4, #8]
        tr->end_value._opa = o2;
  4078b2:	f884 b00c 	strb.w	fp, [r4, #12]
  4078b6:	e039      	b.n	40792c <trans_create+0x128>
        style_list->skip_trans = 1;
  4078b8:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4078ba:	f043 0309 	orr.w	r3, r3, #9
  4078be:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  4078c0:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_style_int_t int1 = _lv_obj_get_style_int(obj, part, prop);
  4078c4:	462a      	mov	r2, r5
  4078c6:	4639      	mov	r1, r7
  4078c8:	4620      	mov	r0, r4
  4078ca:	f8df b218 	ldr.w	fp, [pc, #536]	; 407ae4 <trans_create+0x2e0>
  4078ce:	47d8      	blx	fp
  4078d0:	9001      	str	r0, [sp, #4]
        obj->state = new_state;
  4078d2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_style_int_t int2 =  _lv_obj_get_style_int(obj, part, prop);
  4078d6:	462a      	mov	r2, r5
  4078d8:	4639      	mov	r1, r7
  4078da:	4620      	mov	r0, r4
  4078dc:	47d8      	blx	fp
  4078de:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  4078e0:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4078e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4078e6:	f36a 03c3 	bfi	r3, sl, #3, #1
  4078ea:	7173      	strb	r3, [r6, #5]
        if(int1 == int2)  return NULL;
  4078ec:	9b01      	ldr	r3, [sp, #4]
  4078ee:	4283      	cmp	r3, r0
  4078f0:	f000 80e5 	beq.w	407abe <trans_create+0x2ba>
        obj->state = prev_state;
  4078f4:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        int1 = _lv_obj_get_style_int(obj, part, prop);
  4078f8:	462a      	mov	r2, r5
  4078fa:	4639      	mov	r1, r7
  4078fc:	4620      	mov	r0, r4
  4078fe:	4b79      	ldr	r3, [pc, #484]	; (407ae4 <trans_create+0x2e0>)
  407900:	4798      	blx	r3
  407902:	4606      	mov	r6, r0
        obj->state = new_state;
  407904:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_int(style_trans, prop, int1);   /*Be sure `trans_style` has a valid value */
  407908:	4602      	mov	r2, r0
  40790a:	4629      	mov	r1, r5
  40790c:	9800      	ldr	r0, [sp, #0]
  40790e:	4b76      	ldr	r3, [pc, #472]	; (407ae8 <trans_create+0x2e4>)
  407910:	4798      	blx	r3
        if(prop == LV_STYLE_RADIUS) {
  407912:	2d01      	cmp	r5, #1
  407914:	d00e      	beq.n	407934 <trans_create+0x130>
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407916:	4870      	ldr	r0, [pc, #448]	; (407ad8 <trans_create+0x2d4>)
  407918:	4b70      	ldr	r3, [pc, #448]	; (407adc <trans_create+0x2d8>)
  40791a:	4798      	blx	r3
  40791c:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  40791e:	4b70      	ldr	r3, [pc, #448]	; (407ae0 <trans_create+0x2dc>)
  407920:	4798      	blx	r3
  407922:	b3b0      	cbz	r0, 407992 <trans_create+0x18e>
        if(tr == NULL) return NULL;
  407924:	b114      	cbz	r4, 40792c <trans_create+0x128>
        tr->start_value._int = int1;
  407926:	8126      	strh	r6, [r4, #8]
        tr->end_value._int = int2;
  407928:	f8a4 b00c 	strh.w	fp, [r4, #12]
}
  40792c:	4620      	mov	r0, r4
  40792e:	b005      	add	sp, #20
  407930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(int1 == LV_RADIUS_CIRCLE || int2 == LV_RADIUS_CIRCLE) {
  407934:	f647 73ff 	movw	r3, #32767	; 0x7fff
  407938:	459b      	cmp	fp, r3
  40793a:	bf18      	it	ne
  40793c:	429e      	cmpne	r6, r3
  40793e:	d1ea      	bne.n	407916 <trans_create+0x112>
                lv_coord_t whalf = lv_obj_get_width(obj) / 2;
  407940:	4620      	mov	r0, r4
  407942:	4b6a      	ldr	r3, [pc, #424]	; (407aec <trans_create+0x2e8>)
  407944:	4798      	blx	r3
  407946:	4605      	mov	r5, r0
  407948:	2800      	cmp	r0, #0
  40794a:	da00      	bge.n	40794e <trans_create+0x14a>
  40794c:	1c45      	adds	r5, r0, #1
  40794e:	f345 054f 	sbfx	r5, r5, #1, #16
                lv_coord_t hhalf = lv_obj_get_width(obj) / 2;
  407952:	4620      	mov	r0, r4
  407954:	4b65      	ldr	r3, [pc, #404]	; (407aec <trans_create+0x2e8>)
  407956:	4798      	blx	r3
  407958:	4603      	mov	r3, r0
  40795a:	2800      	cmp	r0, #0
  40795c:	da00      	bge.n	407960 <trans_create+0x15c>
  40795e:	1c43      	adds	r3, r0, #1
  407960:	f343 034f 	sbfx	r3, r3, #1, #16
                if(int1 == LV_RADIUS_CIRCLE) int1 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407964:	f647 72ff 	movw	r2, #32767	; 0x7fff
  407968:	4296      	cmp	r6, r2
  40796a:	d105      	bne.n	407978 <trans_create+0x174>
  40796c:	1c5e      	adds	r6, r3, #1
  40796e:	1c6a      	adds	r2, r5, #1
  407970:	4296      	cmp	r6, r2
  407972:	bfa8      	it	ge
  407974:	4616      	movge	r6, r2
  407976:	b236      	sxth	r6, r6
                if(int2 == LV_RADIUS_CIRCLE) int2 = LV_MATH_MIN(whalf + 1, hhalf + 1);
  407978:	f647 72ff 	movw	r2, #32767	; 0x7fff
  40797c:	4593      	cmp	fp, r2
  40797e:	d1ca      	bne.n	407916 <trans_create+0x112>
  407980:	f103 0b01 	add.w	fp, r3, #1
  407984:	3501      	adds	r5, #1
  407986:	45ab      	cmp	fp, r5
  407988:	bfa8      	it	ge
  40798a:	46ab      	movge	fp, r5
  40798c:	fa0f fb8b 	sxth.w	fp, fp
  407990:	e7c1      	b.n	407916 <trans_create+0x112>
        LV_ASSERT_MEM(tr);
  407992:	4622      	mov	r2, r4
  407994:	2300      	movs	r3, #0
  407996:	4856      	ldr	r0, [pc, #344]	; (407af0 <trans_create+0x2ec>)
  407998:	4956      	ldr	r1, [pc, #344]	; (407af4 <trans_create+0x2f0>)
  40799a:	4788      	blx	r1
  40799c:	e7fe      	b.n	40799c <trans_create+0x198>
        style_list->skip_trans = 1;
  40799e:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  4079a0:	f043 0309 	orr.w	r3, r3, #9
  4079a4:	7173      	strb	r3, [r6, #5]
        obj->state = prev_state;
  4079a6:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        lv_color_t c1 = _lv_obj_get_style_color(obj, part, prop);
  4079aa:	462a      	mov	r2, r5
  4079ac:	4639      	mov	r1, r7
  4079ae:	4620      	mov	r0, r4
  4079b0:	f8df b144 	ldr.w	fp, [pc, #324]	; 407af8 <trans_create+0x2f4>
  4079b4:	47d8      	blx	fp
  4079b6:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  4079ba:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        lv_color_t c2 =  _lv_obj_get_style_color(obj, part, prop);
  4079be:	462a      	mov	r2, r5
  4079c0:	4639      	mov	r1, r7
  4079c2:	4620      	mov	r0, r4
  4079c4:	47d8      	blx	fp
  4079c6:	4683      	mov	fp, r0
        style_list->skip_trans = 0;
  4079c8:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  4079ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  4079ce:	f36a 03c3 	bfi	r3, sl, #3, #1
  4079d2:	7173      	strb	r3, [r6, #5]
        if(c1.full == c2.full) return NULL;
  4079d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
  4079d8:	b283      	uxth	r3, r0
  4079da:	429a      	cmp	r2, r3
  4079dc:	d023      	beq.n	407a26 <trans_create+0x222>
        obj->state = prev_state;
  4079de:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        c1 = _lv_obj_get_style_color(obj, part, prop);
  4079e2:	462a      	mov	r2, r5
  4079e4:	4639      	mov	r1, r7
  4079e6:	4620      	mov	r0, r4
  4079e8:	4b43      	ldr	r3, [pc, #268]	; (407af8 <trans_create+0x2f4>)
  4079ea:	4798      	blx	r3
  4079ec:	4602      	mov	r2, r0
  4079ee:	f8ad 0004 	strh.w	r0, [sp, #4]
        obj->state = new_state;
  4079f2:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_color(style_trans, prop, c1);    /*Be sure `trans_style` has a valid value */
  4079f6:	4629      	mov	r1, r5
  4079f8:	9800      	ldr	r0, [sp, #0]
  4079fa:	4b40      	ldr	r3, [pc, #256]	; (407afc <trans_create+0x2f8>)
  4079fc:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  4079fe:	4836      	ldr	r0, [pc, #216]	; (407ad8 <trans_create+0x2d4>)
  407a00:	4b36      	ldr	r3, [pc, #216]	; (407adc <trans_create+0x2d8>)
  407a02:	4798      	blx	r3
  407a04:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407a06:	4b36      	ldr	r3, [pc, #216]	; (407ae0 <trans_create+0x2dc>)
  407a08:	4798      	blx	r3
  407a0a:	b928      	cbnz	r0, 407a18 <trans_create+0x214>
  407a0c:	4622      	mov	r2, r4
  407a0e:	2300      	movs	r3, #0
  407a10:	4837      	ldr	r0, [pc, #220]	; (407af0 <trans_create+0x2ec>)
  407a12:	4938      	ldr	r1, [pc, #224]	; (407af4 <trans_create+0x2f0>)
  407a14:	4788      	blx	r1
  407a16:	e7fe      	b.n	407a16 <trans_create+0x212>
        if(tr == NULL) return NULL;
  407a18:	b12c      	cbz	r4, 407a26 <trans_create+0x222>
        tr->start_value._color = c1;
  407a1a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  407a1e:	8123      	strh	r3, [r4, #8]
        tr->end_value._color = c2;
  407a20:	f8a4 b00c 	strh.w	fp, [r4, #12]
  407a24:	e782      	b.n	40792c <trans_create+0x128>
        if(c1.full == c2.full) return NULL;
  407a26:	2400      	movs	r4, #0
  407a28:	e780      	b.n	40792c <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407a2a:	4622      	mov	r2, r4
  407a2c:	2300      	movs	r3, #0
  407a2e:	4830      	ldr	r0, [pc, #192]	; (407af0 <trans_create+0x2ec>)
  407a30:	4930      	ldr	r1, [pc, #192]	; (407af4 <trans_create+0x2f0>)
  407a32:	4788      	blx	r1
  407a34:	e7fe      	b.n	407a34 <trans_create+0x230>
        obj->state = prev_state;
  407a36:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        style_list->skip_trans = 1;
  407a3a:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = 1;
  407a3c:	f043 0309 	orr.w	r3, r3, #9
  407a40:	7173      	strb	r3, [r6, #5]
        const void * p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407a42:	462a      	mov	r2, r5
  407a44:	4639      	mov	r1, r7
  407a46:	4620      	mov	r0, r4
  407a48:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 407b08 <trans_create+0x304>
  407a4c:	47d8      	blx	fp
  407a4e:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407a50:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        const void * p2 = _lv_obj_get_style_ptr(obj, part, prop);
  407a54:	462a      	mov	r2, r5
  407a56:	4639      	mov	r1, r7
  407a58:	4620      	mov	r0, r4
  407a5a:	47d8      	blx	fp
  407a5c:	a904      	add	r1, sp, #16
  407a5e:	f841 0d04 	str.w	r0, [r1, #-4]!
        style_list->skip_trans = 0;
  407a62:	7973      	ldrb	r3, [r6, #5]
        style_list->ignore_cache = cache_ori;
  407a64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  407a68:	f36a 03c3 	bfi	r3, sl, #3, #1
  407a6c:	7173      	strb	r3, [r6, #5]
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407a6e:	2204      	movs	r2, #4
  407a70:	a802      	add	r0, sp, #8
  407a72:	4b23      	ldr	r3, [pc, #140]	; (407b00 <trans_create+0x2fc>)
  407a74:	4798      	blx	r3
  407a76:	b300      	cbz	r0, 407aba <trans_create+0x2b6>
        obj->state = prev_state;
  407a78:	f884 903d 	strb.w	r9, [r4, #61]	; 0x3d
        p1 = _lv_obj_get_style_ptr(obj, part, prop);
  407a7c:	462a      	mov	r2, r5
  407a7e:	4639      	mov	r1, r7
  407a80:	4620      	mov	r0, r4
  407a82:	47d8      	blx	fp
  407a84:	4602      	mov	r2, r0
  407a86:	9002      	str	r0, [sp, #8]
        obj->state = new_state;
  407a88:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        _lv_style_set_ptr(style_trans, prop, p1);   /*Be sure `trans_style` has a valid value */
  407a8c:	4629      	mov	r1, r5
  407a8e:	9800      	ldr	r0, [sp, #0]
  407a90:	4b1c      	ldr	r3, [pc, #112]	; (407b04 <trans_create+0x300>)
  407a92:	4798      	blx	r3
        tr = _lv_ll_ins_head(&LV_GC_ROOT(_lv_obj_style_trans_ll));
  407a94:	4810      	ldr	r0, [pc, #64]	; (407ad8 <trans_create+0x2d4>)
  407a96:	4b11      	ldr	r3, [pc, #68]	; (407adc <trans_create+0x2d8>)
  407a98:	4798      	blx	r3
  407a9a:	4604      	mov	r4, r0
        LV_ASSERT_MEM(tr);
  407a9c:	4b10      	ldr	r3, [pc, #64]	; (407ae0 <trans_create+0x2dc>)
  407a9e:	4798      	blx	r3
  407aa0:	b128      	cbz	r0, 407aae <trans_create+0x2aa>
        if(tr == NULL) return NULL;
  407aa2:	b154      	cbz	r4, 407aba <trans_create+0x2b6>
        tr->start_value._ptr = p1;
  407aa4:	9b02      	ldr	r3, [sp, #8]
  407aa6:	60a3      	str	r3, [r4, #8]
        tr->end_value._ptr = p2;
  407aa8:	9b03      	ldr	r3, [sp, #12]
  407aaa:	60e3      	str	r3, [r4, #12]
  407aac:	e73e      	b.n	40792c <trans_create+0x128>
        LV_ASSERT_MEM(tr);
  407aae:	4622      	mov	r2, r4
  407ab0:	2300      	movs	r3, #0
  407ab2:	480f      	ldr	r0, [pc, #60]	; (407af0 <trans_create+0x2ec>)
  407ab4:	490f      	ldr	r1, [pc, #60]	; (407af4 <trans_create+0x2f0>)
  407ab6:	4788      	blx	r1
  407ab8:	e7fe      	b.n	407ab8 <trans_create+0x2b4>
        if(memcmp(&p1, &p2, sizeof(const void *)) == 0)  return NULL;
  407aba:	2400      	movs	r4, #0
  407abc:	e736      	b.n	40792c <trans_create+0x128>
        if(int1 == int2)  return NULL;
  407abe:	2400      	movs	r4, #0
  407ac0:	e734      	b.n	40792c <trans_create+0x128>
        if(o1 == o2) return NULL;
  407ac2:	2400      	movs	r4, #0
  407ac4:	e732      	b.n	40792c <trans_create+0x128>
  407ac6:	bf00      	nop
  407ac8:	00405755 	.word	0x00405755
  407acc:	0040a6f5 	.word	0x0040a6f5
  407ad0:	00406a01 	.word	0x00406a01
  407ad4:	00409fa1 	.word	0x00409fa1
  407ad8:	2043a25c 	.word	0x2043a25c
  407adc:	00415a31 	.word	0x00415a31
  407ae0:	004157b9 	.word	0x004157b9
  407ae4:	00406f8d 	.word	0x00406f8d
  407ae8:	00409c81 	.word	0x00409c81
  407aec:	004056c9 	.word	0x004056c9
  407af0:	004260b0 	.word	0x004260b0
  407af4:	004157c5 	.word	0x004157c5
  407af8:	00406979 	.word	0x00406979
  407afc:	00409e11 	.word	0x00409e11
  407b00:	00422399 	.word	0x00422399
  407b04:	0040a131 	.word	0x0040a131
  407b08:	00406e85 	.word	0x00406e85

00407b0c <lv_obj_get_signal_cb>:
{
  407b0c:	b510      	push	{r4, lr}
  407b0e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b10:	4b05      	ldr	r3, [pc, #20]	; (407b28 <lv_obj_get_signal_cb+0x1c>)
  407b12:	4798      	blx	r3
  407b14:	b108      	cbz	r0, 407b1a <lv_obj_get_signal_cb+0xe>
}
  407b16:	69e0      	ldr	r0, [r4, #28]
  407b18:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b1a:	4622      	mov	r2, r4
  407b1c:	2300      	movs	r3, #0
  407b1e:	4803      	ldr	r0, [pc, #12]	; (407b2c <lv_obj_get_signal_cb+0x20>)
  407b20:	4903      	ldr	r1, [pc, #12]	; (407b30 <lv_obj_get_signal_cb+0x24>)
  407b22:	4788      	blx	r1
  407b24:	e7fe      	b.n	407b24 <lv_obj_get_signal_cb+0x18>
  407b26:	bf00      	nop
  407b28:	004157b9 	.word	0x004157b9
  407b2c:	004260c4 	.word	0x004260c4
  407b30:	004157c5 	.word	0x004157c5

00407b34 <lv_obj_get_design_cb>:
{
  407b34:	b510      	push	{r4, lr}
  407b36:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b38:	4b05      	ldr	r3, [pc, #20]	; (407b50 <lv_obj_get_design_cb+0x1c>)
  407b3a:	4798      	blx	r3
  407b3c:	b108      	cbz	r0, 407b42 <lv_obj_get_design_cb+0xe>
}
  407b3e:	6a20      	ldr	r0, [r4, #32]
  407b40:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b42:	4622      	mov	r2, r4
  407b44:	2300      	movs	r3, #0
  407b46:	4803      	ldr	r0, [pc, #12]	; (407b54 <lv_obj_get_design_cb+0x20>)
  407b48:	4903      	ldr	r1, [pc, #12]	; (407b58 <lv_obj_get_design_cb+0x24>)
  407b4a:	4788      	blx	r1
  407b4c:	e7fe      	b.n	407b4c <lv_obj_get_design_cb+0x18>
  407b4e:	bf00      	nop
  407b50:	004157b9 	.word	0x004157b9
  407b54:	004260c4 	.word	0x004260c4
  407b58:	004157c5 	.word	0x004157c5

00407b5c <lv_obj_get_ext_attr>:
{
  407b5c:	b510      	push	{r4, lr}
  407b5e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b60:	4b05      	ldr	r3, [pc, #20]	; (407b78 <lv_obj_get_ext_attr+0x1c>)
  407b62:	4798      	blx	r3
  407b64:	b108      	cbz	r0, 407b6a <lv_obj_get_ext_attr+0xe>
}
  407b66:	6a60      	ldr	r0, [r4, #36]	; 0x24
  407b68:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b6a:	4622      	mov	r2, r4
  407b6c:	2300      	movs	r3, #0
  407b6e:	4803      	ldr	r0, [pc, #12]	; (407b7c <lv_obj_get_ext_attr+0x20>)
  407b70:	4903      	ldr	r1, [pc, #12]	; (407b80 <lv_obj_get_ext_attr+0x24>)
  407b72:	4788      	blx	r1
  407b74:	e7fe      	b.n	407b74 <lv_obj_get_ext_attr+0x18>
  407b76:	bf00      	nop
  407b78:	004157b9 	.word	0x004157b9
  407b7c:	004260c4 	.word	0x004260c4
  407b80:	004157c5 	.word	0x004157c5

00407b84 <lv_obj_get_group>:
{
  407b84:	b510      	push	{r4, lr}
  407b86:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b88:	4b05      	ldr	r3, [pc, #20]	; (407ba0 <lv_obj_get_group+0x1c>)
  407b8a:	4798      	blx	r3
  407b8c:	b108      	cbz	r0, 407b92 <lv_obj_get_group+0xe>
}
  407b8e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  407b90:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407b92:	4622      	mov	r2, r4
  407b94:	2300      	movs	r3, #0
  407b96:	4803      	ldr	r0, [pc, #12]	; (407ba4 <lv_obj_get_group+0x20>)
  407b98:	4903      	ldr	r1, [pc, #12]	; (407ba8 <lv_obj_get_group+0x24>)
  407b9a:	4788      	blx	r1
  407b9c:	e7fe      	b.n	407b9c <lv_obj_get_group+0x18>
  407b9e:	bf00      	nop
  407ba0:	004157b9 	.word	0x004157b9
  407ba4:	004260c4 	.word	0x004260c4
  407ba8:	004157c5 	.word	0x004157c5

00407bac <obj_del_core>:
{
  407bac:	b570      	push	{r4, r5, r6, lr}
  407bae:	4605      	mov	r5, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
  407bb0:	2200      	movs	r2, #0
  407bb2:	2115      	movs	r1, #21
  407bb4:	4b33      	ldr	r3, [pc, #204]	; (407c84 <obj_del_core+0xd8>)
  407bb6:	4798      	blx	r3
    lv_group_t * group = lv_obj_get_group(obj);
  407bb8:	4628      	mov	r0, r5
  407bba:	4b33      	ldr	r3, [pc, #204]	; (407c88 <obj_del_core+0xdc>)
  407bbc:	4798      	blx	r3
    if(group) lv_group_remove_obj(obj);
  407bbe:	4606      	mov	r6, r0
  407bc0:	b110      	cbz	r0, 407bc8 <obj_del_core+0x1c>
  407bc2:	4628      	mov	r0, r5
  407bc4:	4b31      	ldr	r3, [pc, #196]	; (407c8c <obj_del_core+0xe0>)
  407bc6:	4798      	blx	r3
    lv_anim_del(obj, NULL);
  407bc8:	2100      	movs	r1, #0
  407bca:	4628      	mov	r0, r5
  407bcc:	4b30      	ldr	r3, [pc, #192]	; (407c90 <obj_del_core+0xe4>)
  407bce:	4798      	blx	r3
    trans_del(obj, 0xFF, 0xFF, NULL);
  407bd0:	2300      	movs	r3, #0
  407bd2:	22ff      	movs	r2, #255	; 0xff
  407bd4:	4611      	mov	r1, r2
  407bd6:	4628      	mov	r0, r5
  407bd8:	4c2e      	ldr	r4, [pc, #184]	; (407c94 <obj_del_core+0xe8>)
  407bda:	47a0      	blx	r4
    i = _lv_ll_get_head(&(obj->child_ll));
  407bdc:	1d2c      	adds	r4, r5, #4
  407bde:	4620      	mov	r0, r4
  407be0:	4b2d      	ldr	r3, [pc, #180]	; (407c98 <obj_del_core+0xec>)
  407be2:	4798      	blx	r3
    while(i != NULL) {
  407be4:	e004      	b.n	407bf0 <obj_del_core+0x44>
        obj_del_core(i);
  407be6:	f7ff ffe1 	bl	407bac <obj_del_core>
        i = _lv_ll_get_head(&(obj->child_ll));
  407bea:	4620      	mov	r0, r4
  407bec:	4b2a      	ldr	r3, [pc, #168]	; (407c98 <obj_del_core+0xec>)
  407bee:	4798      	blx	r3
    while(i != NULL) {
  407bf0:	2800      	cmp	r0, #0
  407bf2:	d1f8      	bne.n	407be6 <obj_del_core+0x3a>
    lv_event_mark_deleted(obj);
  407bf4:	4628      	mov	r0, r5
  407bf6:	4b29      	ldr	r3, [pc, #164]	; (407c9c <obj_del_core+0xf0>)
  407bf8:	4798      	blx	r3
    lv_indev_t * indev = lv_indev_get_next(NULL);
  407bfa:	2000      	movs	r0, #0
  407bfc:	4b28      	ldr	r3, [pc, #160]	; (407ca0 <obj_del_core+0xf4>)
  407bfe:	4798      	blx	r3
  407c00:	4604      	mov	r4, r0
    while(indev) {
  407c02:	e00d      	b.n	407c20 <obj_del_core+0x74>
            lv_indev_reset(indev, obj);
  407c04:	4629      	mov	r1, r5
  407c06:	4620      	mov	r0, r4
  407c08:	4b26      	ldr	r3, [pc, #152]	; (407ca4 <obj_del_core+0xf8>)
  407c0a:	4798      	blx	r3
        if(indev->proc.types.pointer.last_pressed == obj) {
  407c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  407c0e:	429d      	cmp	r5, r3
  407c10:	d00e      	beq.n	407c30 <obj_del_core+0x84>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407c12:	6da3      	ldr	r3, [r4, #88]	; 0x58
  407c14:	429e      	cmp	r6, r3
  407c16:	d00e      	beq.n	407c36 <obj_del_core+0x8a>
        indev = lv_indev_get_next(indev);
  407c18:	4620      	mov	r0, r4
  407c1a:	4b21      	ldr	r3, [pc, #132]	; (407ca0 <obj_del_core+0xf4>)
  407c1c:	4798      	blx	r3
  407c1e:	4604      	mov	r4, r0
    while(indev) {
  407c20:	b194      	cbz	r4, 407c48 <obj_del_core+0x9c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
  407c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
  407c24:	429d      	cmp	r5, r3
  407c26:	d0ed      	beq.n	407c04 <obj_del_core+0x58>
  407c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  407c2a:	429d      	cmp	r5, r3
  407c2c:	d1ee      	bne.n	407c0c <obj_del_core+0x60>
  407c2e:	e7e9      	b.n	407c04 <obj_del_core+0x58>
            indev->proc.types.pointer.last_pressed = NULL;
  407c30:	2300      	movs	r3, #0
  407c32:	63e3      	str	r3, [r4, #60]	; 0x3c
  407c34:	e7ed      	b.n	407c12 <obj_del_core+0x66>
        if(indev->group == group && obj == lv_indev_get_obj_act()) {
  407c36:	4b1c      	ldr	r3, [pc, #112]	; (407ca8 <obj_del_core+0xfc>)
  407c38:	4798      	blx	r3
  407c3a:	4285      	cmp	r5, r0
  407c3c:	d1ec      	bne.n	407c18 <obj_del_core+0x6c>
            lv_indev_reset(indev, obj);
  407c3e:	4629      	mov	r1, r5
  407c40:	4620      	mov	r0, r4
  407c42:	4b18      	ldr	r3, [pc, #96]	; (407ca4 <obj_del_core+0xf8>)
  407c44:	4798      	blx	r3
  407c46:	e7e7      	b.n	407c18 <obj_del_core+0x6c>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
  407c48:	69eb      	ldr	r3, [r5, #28]
  407c4a:	2200      	movs	r2, #0
  407c4c:	4611      	mov	r1, r2
  407c4e:	4628      	mov	r0, r5
  407c50:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407c52:	4628      	mov	r0, r5
  407c54:	4b15      	ldr	r3, [pc, #84]	; (407cac <obj_del_core+0x100>)
  407c56:	4798      	blx	r3
    if(par == NULL) { /*It is a screen*/
  407c58:	b158      	cbz	r0, 407c72 <obj_del_core+0xc6>
        _lv_ll_remove(&(par->child_ll), obj);
  407c5a:	4629      	mov	r1, r5
  407c5c:	3004      	adds	r0, #4
  407c5e:	4b14      	ldr	r3, [pc, #80]	; (407cb0 <obj_del_core+0x104>)
  407c60:	4798      	blx	r3
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
  407c62:	6a68      	ldr	r0, [r5, #36]	; 0x24
  407c64:	b108      	cbz	r0, 407c6a <obj_del_core+0xbe>
  407c66:	4b13      	ldr	r3, [pc, #76]	; (407cb4 <obj_del_core+0x108>)
  407c68:	4798      	blx	r3
    lv_mem_free(obj); /*Free the object itself*/
  407c6a:	4628      	mov	r0, r5
  407c6c:	4b11      	ldr	r3, [pc, #68]	; (407cb4 <obj_del_core+0x108>)
  407c6e:	4798      	blx	r3
  407c70:	bd70      	pop	{r4, r5, r6, pc}
        lv_disp_t * d = lv_obj_get_disp(obj);
  407c72:	4628      	mov	r0, r5
  407c74:	4b10      	ldr	r3, [pc, #64]	; (407cb8 <obj_del_core+0x10c>)
  407c76:	4798      	blx	r3
        _lv_ll_remove(&d->scr_ll, obj);
  407c78:	4629      	mov	r1, r5
  407c7a:	3038      	adds	r0, #56	; 0x38
  407c7c:	4b0c      	ldr	r3, [pc, #48]	; (407cb0 <obj_del_core+0x104>)
  407c7e:	4798      	blx	r3
  407c80:	e7ef      	b.n	407c62 <obj_del_core+0xb6>
  407c82:	bf00      	nop
  407c84:	004053e5 	.word	0x004053e5
  407c88:	00407b85 	.word	0x00407b85
  407c8c:	0040347d 	.word	0x0040347d
  407c90:	00414d19 	.word	0x00414d19
  407c94:	00405785 	.word	0x00405785
  407c98:	00415ac9 	.word	0x00415ac9
  407c9c:	00404ee1 	.word	0x00404ee1
  407ca0:	004149b1 	.word	0x004149b1
  407ca4:	004047fd 	.word	0x004047fd
  407ca8:	004048a9 	.word	0x004048a9
  407cac:	004054f5 	.word	0x004054f5
  407cb0:	00415b85 	.word	0x00415b85
  407cb4:	00415f85 	.word	0x00415f85
  407cb8:	00405555 	.word	0x00405555

00407cbc <lv_obj_del>:
{
  407cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cbe:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407cc0:	4b16      	ldr	r3, [pc, #88]	; (407d1c <lv_obj_del+0x60>)
  407cc2:	4798      	blx	r3
  407cc4:	b928      	cbnz	r0, 407cd2 <lv_obj_del+0x16>
  407cc6:	4622      	mov	r2, r4
  407cc8:	2300      	movs	r3, #0
  407cca:	4815      	ldr	r0, [pc, #84]	; (407d20 <lv_obj_del+0x64>)
  407ccc:	4915      	ldr	r1, [pc, #84]	; (407d24 <lv_obj_del+0x68>)
  407cce:	4788      	blx	r1
  407cd0:	e7fe      	b.n	407cd0 <lv_obj_del+0x14>
  407cd2:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
  407cd4:	4620      	mov	r0, r4
  407cd6:	4b14      	ldr	r3, [pc, #80]	; (407d28 <lv_obj_del+0x6c>)
  407cd8:	4798      	blx	r3
    lv_obj_t * par = lv_obj_get_parent(obj);
  407cda:	4620      	mov	r0, r4
  407cdc:	4b13      	ldr	r3, [pc, #76]	; (407d2c <lv_obj_del+0x70>)
  407cde:	4798      	blx	r3
    if(par == NULL) {
  407ce0:	4607      	mov	r7, r0
  407ce2:	b178      	cbz	r0, 407d04 <lv_obj_del+0x48>
    bool act_scr_del = false;
  407ce4:	2500      	movs	r5, #0
    lv_disp_t * disp = NULL;
  407ce6:	462e      	mov	r6, r5
    obj_del_core(obj);
  407ce8:	4620      	mov	r0, r4
  407cea:	4b11      	ldr	r3, [pc, #68]	; (407d30 <lv_obj_del+0x74>)
  407cec:	4798      	blx	r3
    if(par) {
  407cee:	b127      	cbz	r7, 407cfa <lv_obj_del+0x3e>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
  407cf0:	69fb      	ldr	r3, [r7, #28]
  407cf2:	2200      	movs	r2, #0
  407cf4:	2101      	movs	r1, #1
  407cf6:	4638      	mov	r0, r7
  407cf8:	4798      	blx	r3
    if(act_scr_del)  {
  407cfa:	b10d      	cbz	r5, 407d00 <lv_obj_del+0x44>
        disp->act_scr = NULL;
  407cfc:	2300      	movs	r3, #0
  407cfe:	6473      	str	r3, [r6, #68]	; 0x44
}
  407d00:	2000      	movs	r0, #0
  407d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        disp = lv_obj_get_disp(obj);
  407d04:	4620      	mov	r0, r4
  407d06:	4b0b      	ldr	r3, [pc, #44]	; (407d34 <lv_obj_del+0x78>)
  407d08:	4798      	blx	r3
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
  407d0a:	4606      	mov	r6, r0
  407d0c:	2800      	cmp	r0, #0
  407d0e:	d0f7      	beq.n	407d00 <lv_obj_del+0x44>
        if(disp->act_scr == obj) act_scr_del = true;
  407d10:	6c43      	ldr	r3, [r0, #68]	; 0x44
  407d12:	429c      	cmp	r4, r3
  407d14:	d0e8      	beq.n	407ce8 <lv_obj_del+0x2c>
    bool act_scr_del = false;
  407d16:	2500      	movs	r5, #0
  407d18:	e7e6      	b.n	407ce8 <lv_obj_del+0x2c>
  407d1a:	bf00      	nop
  407d1c:	004157b9 	.word	0x004157b9
  407d20:	004260c4 	.word	0x004260c4
  407d24:	004157c5 	.word	0x004157c5
  407d28:	00405aa1 	.word	0x00405aa1
  407d2c:	004054f5 	.word	0x004054f5
  407d30:	00407bad 	.word	0x00407bad
  407d34:	00405555 	.word	0x00405555

00407d38 <lv_obj_is_focused>:
{
  407d38:	b538      	push	{r3, r4, r5, lr}
  407d3a:	4605      	mov	r5, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407d3c:	4b0a      	ldr	r3, [pc, #40]	; (407d68 <lv_obj_is_focused+0x30>)
  407d3e:	4798      	blx	r3
  407d40:	b148      	cbz	r0, 407d56 <lv_obj_is_focused+0x1e>
  407d42:	4604      	mov	r4, r0
    if(obj->group_p) {
  407d44:	6ba8      	ldr	r0, [r5, #56]	; 0x38
  407d46:	b160      	cbz	r0, 407d62 <lv_obj_is_focused+0x2a>
        if(lv_group_get_focused(obj->group_p) == obj) return true;
  407d48:	4b08      	ldr	r3, [pc, #32]	; (407d6c <lv_obj_is_focused+0x34>)
  407d4a:	4798      	blx	r3
  407d4c:	4285      	cmp	r5, r0
  407d4e:	d000      	beq.n	407d52 <lv_obj_is_focused+0x1a>
    return false;
  407d50:	2400      	movs	r4, #0
}
  407d52:	4620      	mov	r0, r4
  407d54:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  407d56:	462a      	mov	r2, r5
  407d58:	2300      	movs	r3, #0
  407d5a:	4805      	ldr	r0, [pc, #20]	; (407d70 <lv_obj_is_focused+0x38>)
  407d5c:	4905      	ldr	r1, [pc, #20]	; (407d74 <lv_obj_is_focused+0x3c>)
  407d5e:	4788      	blx	r1
  407d60:	e7fe      	b.n	407d60 <lv_obj_is_focused+0x28>
    return false;
  407d62:	2400      	movs	r4, #0
  407d64:	e7f5      	b.n	407d52 <lv_obj_is_focused+0x1a>
  407d66:	bf00      	nop
  407d68:	004157b9 	.word	0x004157b9
  407d6c:	00403529 	.word	0x00403529
  407d70:	004260c4 	.word	0x004260c4
  407d74:	004157c5 	.word	0x004157c5

00407d78 <lv_obj_is_point_on_coords>:
{
  407d78:	b500      	push	{lr}
  407d7a:	b083      	sub	sp, #12
    ext_area.x1 = obj->coords.x1 - obj->ext_click_pad_hor;
  407d7c:	8a02      	ldrh	r2, [r0, #16]
  407d7e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
  407d82:	1ad2      	subs	r2, r2, r3
  407d84:	f8ad 2000 	strh.w	r2, [sp]
    ext_area.x2 = obj->coords.x2 + obj->ext_click_pad_hor;
  407d88:	8a82      	ldrh	r2, [r0, #20]
  407d8a:	4413      	add	r3, r2
  407d8c:	f8ad 3004 	strh.w	r3, [sp, #4]
    ext_area.y1 = obj->coords.y1 - obj->ext_click_pad_ver;
  407d90:	8a42      	ldrh	r2, [r0, #18]
  407d92:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
  407d96:	1ad2      	subs	r2, r2, r3
  407d98:	f8ad 2002 	strh.w	r2, [sp, #2]
    ext_area.y2 = obj->coords.y2 + obj->ext_click_pad_ver;
  407d9c:	8ac2      	ldrh	r2, [r0, #22]
  407d9e:	4413      	add	r3, r2
  407da0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(!_lv_area_is_point_on(&ext_area, point, 0)) {
  407da4:	2200      	movs	r2, #0
  407da6:	4668      	mov	r0, sp
  407da8:	4b02      	ldr	r3, [pc, #8]	; (407db4 <lv_obj_is_point_on_coords+0x3c>)
  407daa:	4798      	blx	r3
}
  407dac:	b003      	add	sp, #12
  407dae:	f85d fb04 	ldr.w	pc, [sp], #4
  407db2:	bf00      	nop
  407db4:	00414f95 	.word	0x00414f95

00407db8 <lv_obj_hittest>:
{
  407db8:	b500      	push	{lr}
  407dba:	b083      	sub	sp, #12
    if(obj->adv_hittest) {
  407dbc:	f990 3034 	ldrsb.w	r3, [r0, #52]	; 0x34
  407dc0:	2b00      	cmp	r3, #0
  407dc2:	db04      	blt.n	407dce <lv_obj_hittest+0x16>
        return lv_obj_is_point_on_coords(obj, point);
  407dc4:	4b07      	ldr	r3, [pc, #28]	; (407de4 <lv_obj_hittest+0x2c>)
  407dc6:	4798      	blx	r3
}
  407dc8:	b003      	add	sp, #12
  407dca:	f85d fb04 	ldr.w	pc, [sp], #4
        hit_info.point = point;
  407dce:	9100      	str	r1, [sp, #0]
        hit_info.result = true;
  407dd0:	2301      	movs	r3, #1
  407dd2:	f88d 3004 	strb.w	r3, [sp, #4]
        obj->signal_cb(obj, LV_SIGNAL_HIT_TEST, &hit_info);
  407dd6:	69c3      	ldr	r3, [r0, #28]
  407dd8:	466a      	mov	r2, sp
  407dda:	210a      	movs	r1, #10
  407ddc:	4798      	blx	r3
        return hit_info.result;
  407dde:	f89d 0004 	ldrb.w	r0, [sp, #4]
  407de2:	e7f1      	b.n	407dc8 <lv_obj_hittest+0x10>
  407de4:	00407d79 	.word	0x00407d79

00407de8 <lv_obj_handle_get_type_signal>:
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407de8:	2300      	movs	r3, #0
  407dea:	2b06      	cmp	r3, #6
  407dec:	d805      	bhi.n	407dfa <lv_obj_handle_get_type_signal+0x12>
        if(buf->type[i] == NULL) break;
  407dee:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
  407df2:	b112      	cbz	r2, 407dfa <lv_obj_handle_get_type_signal+0x12>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
  407df4:	3301      	adds	r3, #1
  407df6:	b2db      	uxtb	r3, r3
  407df8:	e7f7      	b.n	407dea <lv_obj_handle_get_type_signal+0x2>
    buf->type[i] = name;
  407dfa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
  407dfe:	2001      	movs	r0, #1
  407e00:	4770      	bx	lr
	...

00407e04 <lv_obj_init_draw_rect_dsc>:
{
  407e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407e08:	4605      	mov	r5, r0
  407e0a:	460e      	mov	r6, r1
  407e0c:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  407e0e:	2201      	movs	r2, #1
  407e10:	4ba9      	ldr	r3, [pc, #676]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407e12:	4798      	blx	r3
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
  407e14:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  407e16:	f248 020c 	movw	r2, #32780	; 0x800c
  407e1a:	4631      	mov	r1, r6
  407e1c:	4628      	mov	r0, r5
  407e1e:	4ba7      	ldr	r3, [pc, #668]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407e20:	4798      	blx	r3
    if(opa_scale <= LV_OPA_MIN) {
  407e22:	2802      	cmp	r0, #2
  407e24:	d966      	bls.n	407ef4 <lv_obj_init_draw_rect_dsc+0xf0>
  407e26:	4607      	mov	r7, r0
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
  407e28:	7b23      	ldrb	r3, [r4, #12]
  407e2a:	2b00      	cmp	r3, #0
  407e2c:	d16d      	bne.n	407f0a <lv_obj_init_draw_rect_dsc+0x106>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  407e2e:	2230      	movs	r2, #48	; 0x30
  407e30:	4631      	mov	r1, r6
  407e32:	4628      	mov	r0, r5
  407e34:	4ba0      	ldr	r3, [pc, #640]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407e36:	4798      	blx	r3
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
  407e38:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
  407e3a:	b118      	cbz	r0, 407e44 <lv_obj_init_draw_rect_dsc+0x40>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
  407e3c:	7d23      	ldrb	r3, [r4, #20]
  407e3e:	2b00      	cmp	r3, #0
  407e40:	f040 8093 	bne.w	407f6a <lv_obj_init_draw_rect_dsc+0x166>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  407e44:	2240      	movs	r2, #64	; 0x40
  407e46:	4631      	mov	r1, r6
  407e48:	4628      	mov	r0, r5
  407e4a:	4b9b      	ldr	r3, [pc, #620]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407e4c:	4798      	blx	r3
    draw_dsc->outline_width = lv_obj_get_style_outline_width(obj, part);
  407e4e:	8360      	strh	r0, [r4, #26]
    if(draw_dsc->outline_width) {
  407e50:	b118      	cbz	r0, 407e5a <lv_obj_init_draw_rect_dsc+0x56>
        if(draw_dsc->outline_opa != LV_OPA_TRANSP) {
  407e52:	7fa3      	ldrb	r3, [r4, #30]
  407e54:	2b00      	cmp	r3, #0
  407e56:	f040 80a5 	bne.w	407fa4 <lv_obj_init_draw_rect_dsc+0x1a0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  407e5a:	226e      	movs	r2, #110	; 0x6e
  407e5c:	4631      	mov	r1, r6
  407e5e:	4628      	mov	r0, r5
  407e60:	4b97      	ldr	r3, [pc, #604]	; (4080c0 <lv_obj_init_draw_rect_dsc+0x2bc>)
  407e62:	4798      	blx	r3
    draw_dsc->pattern_image = lv_obj_get_style_pattern_image(obj, part);
  407e64:	62e0      	str	r0, [r4, #44]	; 0x2c
    if(draw_dsc->pattern_image) {
  407e66:	b120      	cbz	r0, 407e72 <lv_obj_init_draw_rect_dsc+0x6e>
        if(draw_dsc->pattern_opa != LV_OPA_TRANSP) {
  407e68:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  407e6c:	2b00      	cmp	r3, #0
  407e6e:	f040 80b5 	bne.w	407fdc <lv_obj_init_draw_rect_dsc+0x1d8>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  407e72:	2250      	movs	r2, #80	; 0x50
  407e74:	4631      	mov	r1, r6
  407e76:	4628      	mov	r0, r5
  407e78:	4b8f      	ldr	r3, [pc, #572]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407e7a:	4798      	blx	r3
    draw_dsc->shadow_width = lv_obj_get_style_shadow_width(obj, part);
  407e7c:	8460      	strh	r0, [r4, #34]	; 0x22
    if(draw_dsc->shadow_width) {
  407e7e:	b120      	cbz	r0, 407e8a <lv_obj_init_draw_rect_dsc+0x86>
        if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  407e80:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407e84:	2b02      	cmp	r3, #2
  407e86:	f200 80ee 	bhi.w	408066 <lv_obj_init_draw_rect_dsc+0x262>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  407e8a:	227f      	movs	r2, #127	; 0x7f
  407e8c:	4631      	mov	r1, r6
  407e8e:	4628      	mov	r0, r5
  407e90:	4b8b      	ldr	r3, [pc, #556]	; (4080c0 <lv_obj_init_draw_rect_dsc+0x2bc>)
  407e92:	4798      	blx	r3
    draw_dsc->value_str = lv_obj_get_style_value_str(obj, part);
  407e94:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(draw_dsc->value_str) {
  407e96:	b120      	cbz	r0, 407ea2 <lv_obj_init_draw_rect_dsc+0x9e>
        if(draw_dsc->value_opa > LV_OPA_MIN) {
  407e98:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407e9c:	2b02      	cmp	r3, #2
  407e9e:	f200 8115 	bhi.w	4080cc <lv_obj_init_draw_rect_dsc+0x2c8>
    if(opa_scale < LV_OPA_MAX) {
  407ea2:	2ffc      	cmp	r7, #252	; 0xfc
  407ea4:	d824      	bhi.n	407ef0 <lv_obj_init_draw_rect_dsc+0xec>
        draw_dsc->bg_opa = (uint16_t)((uint16_t)draw_dsc->bg_opa * opa_scale) >> 8;
  407ea6:	7b23      	ldrb	r3, [r4, #12]
  407ea8:	b2bf      	uxth	r7, r7
  407eaa:	fb13 f307 	smulbb	r3, r3, r7
  407eae:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407eb2:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = (uint16_t)((uint16_t)draw_dsc->border_opa * opa_scale) >> 8;
  407eb4:	7d23      	ldrb	r3, [r4, #20]
  407eb6:	fb17 f303 	smulbb	r3, r7, r3
  407eba:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407ebe:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = (uint16_t)((uint16_t)draw_dsc->shadow_opa * opa_scale) >> 8;
  407ec0:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
  407ec4:	fb17 f303 	smulbb	r3, r7, r3
  407ec8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407ecc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = (uint16_t)((uint16_t)draw_dsc->pattern_opa * opa_scale) >> 8;
  407ed0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  407ed4:	fb17 f303 	smulbb	r3, r7, r3
  407ed8:	f3c3 2307 	ubfx	r3, r3, #8, #8
  407edc:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = (uint16_t)((uint16_t)draw_dsc->value_opa * opa_scale) >> 8;
  407ee0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  407ee4:	fb17 f703 	smulbb	r7, r7, r3
  407ee8:	f3c7 2707 	ubfx	r7, r7, #8, #8
  407eec:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
  407ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        draw_dsc->bg_opa = LV_OPA_TRANSP;
  407ef4:	2300      	movs	r3, #0
  407ef6:	7323      	strb	r3, [r4, #12]
        draw_dsc->border_opa = LV_OPA_TRANSP;
  407ef8:	7523      	strb	r3, [r4, #20]
        draw_dsc->shadow_opa = LV_OPA_TRANSP;
  407efa:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
        draw_dsc->pattern_opa = LV_OPA_TRANSP;
  407efe:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        draw_dsc->value_opa = LV_OPA_TRANSP;
  407f02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        return;
  407f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  407f0a:	222c      	movs	r2, #44	; 0x2c
  407f0c:	4631      	mov	r1, r6
  407f0e:	4628      	mov	r0, r5
  407f10:	4b6a      	ldr	r3, [pc, #424]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407f12:	4798      	blx	r3
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
  407f14:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
  407f16:	2802      	cmp	r0, #2
  407f18:	d989      	bls.n	407e2e <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  407f1a:	2229      	movs	r2, #41	; 0x29
  407f1c:	4631      	mov	r1, r6
  407f1e:	4628      	mov	r0, r5
  407f20:	4b68      	ldr	r3, [pc, #416]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407f22:	4798      	blx	r3
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
  407f24:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
  407f26:	2223      	movs	r2, #35	; 0x23
  407f28:	4631      	mov	r1, r6
  407f2a:	4628      	mov	r0, r5
  407f2c:	4b62      	ldr	r3, [pc, #392]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407f2e:	4798      	blx	r3
  407f30:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
  407f32:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
  407f34:	b930      	cbnz	r0, 407f44 <lv_obj_init_draw_rect_dsc+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  407f36:	2220      	movs	r2, #32
  407f38:	4631      	mov	r1, r6
  407f3a:	4628      	mov	r0, r5
  407f3c:	4b5e      	ldr	r3, [pc, #376]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407f3e:	4798      	blx	r3
            draw_dsc->bg_blend_mode = lv_obj_get_style_bg_blend_mode(obj, part);
  407f40:	7360      	strb	r0, [r4, #13]
  407f42:	e774      	b.n	407e2e <lv_obj_init_draw_rect_dsc+0x2a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
  407f44:	222a      	movs	r2, #42	; 0x2a
  407f46:	4631      	mov	r1, r6
  407f48:	4628      	mov	r0, r5
  407f4a:	4b5e      	ldr	r3, [pc, #376]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407f4c:	4798      	blx	r3
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
  407f4e:	80a0      	strh	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
  407f50:	2221      	movs	r2, #33	; 0x21
  407f52:	4631      	mov	r1, r6
  407f54:	4628      	mov	r0, r5
  407f56:	f8df 8160 	ldr.w	r8, [pc, #352]	; 4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>
  407f5a:	47c0      	blx	r8
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
  407f5c:	8120      	strh	r0, [r4, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
  407f5e:	2222      	movs	r2, #34	; 0x22
  407f60:	4631      	mov	r1, r6
  407f62:	4628      	mov	r0, r5
  407f64:	47c0      	blx	r8
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
  407f66:	8160      	strh	r0, [r4, #10]
  407f68:	e7e5      	b.n	407f36 <lv_obj_init_draw_rect_dsc+0x132>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  407f6a:	223c      	movs	r2, #60	; 0x3c
  407f6c:	4631      	mov	r1, r6
  407f6e:	4628      	mov	r0, r5
  407f70:	4b52      	ldr	r3, [pc, #328]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407f72:	4798      	blx	r3
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
  407f74:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
  407f76:	2802      	cmp	r0, #2
  407f78:	d806      	bhi.n	407f88 <lv_obj_init_draw_rect_dsc+0x184>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  407f7a:	2232      	movs	r2, #50	; 0x32
  407f7c:	4631      	mov	r1, r6
  407f7e:	4628      	mov	r0, r5
  407f80:	4b4d      	ldr	r3, [pc, #308]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407f82:	4798      	blx	r3
            draw_dsc->border_blend_mode = lv_obj_get_style_border_blend_mode(obj, part);
  407f84:	7560      	strb	r0, [r4, #21]
  407f86:	e75d      	b.n	407e44 <lv_obj_init_draw_rect_dsc+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  407f88:	2231      	movs	r2, #49	; 0x31
  407f8a:	4631      	mov	r1, r6
  407f8c:	4628      	mov	r0, r5
  407f8e:	4b4a      	ldr	r3, [pc, #296]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407f90:	4798      	blx	r3
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
  407f92:	b2c0      	uxtb	r0, r0
  407f94:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  407f96:	2239      	movs	r2, #57	; 0x39
  407f98:	4631      	mov	r1, r6
  407f9a:	4628      	mov	r0, r5
  407f9c:	4b49      	ldr	r3, [pc, #292]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407f9e:	4798      	blx	r3
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
  407fa0:	81e0      	strh	r0, [r4, #14]
  407fa2:	e7ea      	b.n	407f7a <lv_obj_init_draw_rect_dsc+0x176>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  407fa4:	224c      	movs	r2, #76	; 0x4c
  407fa6:	4631      	mov	r1, r6
  407fa8:	4628      	mov	r0, r5
  407faa:	4b44      	ldr	r3, [pc, #272]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407fac:	4798      	blx	r3
            draw_dsc->outline_opa = lv_obj_get_style_outline_opa(obj, part);
  407fae:	77a0      	strb	r0, [r4, #30]
            if(draw_dsc->outline_opa > LV_OPA_MIN) {
  407fb0:	2802      	cmp	r0, #2
  407fb2:	d806      	bhi.n	407fc2 <lv_obj_init_draw_rect_dsc+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_BLEND_MODE, outline_blend_mode, lv_blend_mode_t, _int, scalar)
  407fb4:	2242      	movs	r2, #66	; 0x42
  407fb6:	4631      	mov	r1, r6
  407fb8:	4628      	mov	r0, r5
  407fba:	4b3f      	ldr	r3, [pc, #252]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407fbc:	4798      	blx	r3
            draw_dsc->outline_blend_mode = lv_obj_get_style_outline_blend_mode(obj, part);
  407fbe:	77e0      	strb	r0, [r4, #31]
  407fc0:	e74b      	b.n	407e5a <lv_obj_init_draw_rect_dsc+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  407fc2:	2241      	movs	r2, #65	; 0x41
  407fc4:	4631      	mov	r1, r6
  407fc6:	4628      	mov	r0, r5
  407fc8:	4b3b      	ldr	r3, [pc, #236]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  407fca:	4798      	blx	r3
                draw_dsc->outline_pad = lv_obj_get_style_outline_pad(obj, part);
  407fcc:	83a0      	strh	r0, [r4, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  407fce:	2249      	movs	r2, #73	; 0x49
  407fd0:	4631      	mov	r1, r6
  407fd2:	4628      	mov	r0, r5
  407fd4:	4b3b      	ldr	r3, [pc, #236]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  407fd6:	4798      	blx	r3
                draw_dsc->outline_color = lv_obj_get_style_outline_color(obj, part);
  407fd8:	8320      	strh	r0, [r4, #24]
  407fda:	e7eb      	b.n	407fb4 <lv_obj_init_draw_rect_dsc+0x1b0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  407fdc:	226c      	movs	r2, #108	; 0x6c
  407fde:	4631      	mov	r1, r6
  407fe0:	4628      	mov	r0, r5
  407fe2:	4b36      	ldr	r3, [pc, #216]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407fe4:	4798      	blx	r3
            draw_dsc->pattern_opa = lv_obj_get_style_pattern_opa(obj, part);
  407fe6:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
            if(draw_dsc->pattern_opa > LV_OPA_MIN) {
  407fea:	2802      	cmp	r0, #2
  407fec:	f67f af41 	bls.w	407e72 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR_OPA, pattern_recolor_opa, lv_opa_t, _opa, scalar)
  407ff0:	226d      	movs	r2, #109	; 0x6d
  407ff2:	4631      	mov	r1, r6
  407ff4:	4628      	mov	r0, r5
  407ff6:	4b31      	ldr	r3, [pc, #196]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  407ff8:	4798      	blx	r3
                draw_dsc->pattern_recolor_opa = lv_obj_get_style_pattern_recolor_opa(obj, part);
  407ffa:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_REPEAT, pattern_repeat, bool, _int, scalar)
  407ffe:	2261      	movs	r2, #97	; 0x61
  408000:	4631      	mov	r1, r6
  408002:	4628      	mov	r0, r5
  408004:	4b2c      	ldr	r3, [pc, #176]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408006:	4798      	blx	r3
  408008:	3000      	adds	r0, #0
  40800a:	bf18      	it	ne
  40800c:	2001      	movne	r0, #1
                draw_dsc->pattern_repeat = lv_obj_get_style_pattern_repeat(obj, part);
  40800e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  408012:	f360 0300 	bfi	r3, r0, #0, #1
  408016:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                if(lv_img_src_get_type(draw_dsc->pattern_image) == LV_IMG_SRC_SYMBOL) {
  40801a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40801c:	4b2a      	ldr	r3, [pc, #168]	; (4080c8 <lv_obj_init_draw_rect_dsc+0x2c4>)
  40801e:	4798      	blx	r3
  408020:	2802      	cmp	r0, #2
  408022:	d00b      	beq.n	40803c <lv_obj_init_draw_rect_dsc+0x238>
                else if(draw_dsc->pattern_recolor_opa > LV_OPA_MIN) {
  408024:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  408028:	2b02      	cmp	r3, #2
  40802a:	d815      	bhi.n	408058 <lv_obj_init_draw_rect_dsc+0x254>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_BLEND_MODE, pattern_blend_mode, lv_blend_mode_t, _int, scalar)
  40802c:	2260      	movs	r2, #96	; 0x60
  40802e:	4631      	mov	r1, r6
  408030:	4628      	mov	r0, r5
  408032:	4b21      	ldr	r3, [pc, #132]	; (4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>)
  408034:	4798      	blx	r3
                draw_dsc->pattern_blend_mode = lv_obj_get_style_pattern_blend_mode(obj, part);
  408036:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  40803a:	e71a      	b.n	407e72 <lv_obj_init_draw_rect_dsc+0x6e>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  40803c:	2269      	movs	r2, #105	; 0x69
  40803e:	4631      	mov	r1, r6
  408040:	4628      	mov	r0, r5
  408042:	4b20      	ldr	r3, [pc, #128]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  408044:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  408046:	86a0      	strh	r0, [r4, #52]	; 0x34
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  408048:	f248 028e 	movw	r2, #32910	; 0x808e
  40804c:	4631      	mov	r1, r6
  40804e:	4628      	mov	r0, r5
  408050:	4b1b      	ldr	r3, [pc, #108]	; (4080c0 <lv_obj_init_draw_rect_dsc+0x2bc>)
  408052:	4798      	blx	r3
                    draw_dsc->pattern_font = lv_obj_get_style_text_font(obj, part);
  408054:	6320      	str	r0, [r4, #48]	; 0x30
  408056:	e7e9      	b.n	40802c <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  408058:	2269      	movs	r2, #105	; 0x69
  40805a:	4631      	mov	r1, r6
  40805c:	4628      	mov	r0, r5
  40805e:	4b19      	ldr	r3, [pc, #100]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  408060:	4798      	blx	r3
                    draw_dsc->pattern_recolor = lv_obj_get_style_pattern_recolor(obj, part);
  408062:	86a0      	strh	r0, [r4, #52]	; 0x34
  408064:	e7e2      	b.n	40802c <lv_obj_init_draw_rect_dsc+0x228>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408066:	225c      	movs	r2, #92	; 0x5c
  408068:	4631      	mov	r1, r6
  40806a:	4628      	mov	r0, r5
  40806c:	4b13      	ldr	r3, [pc, #76]	; (4080bc <lv_obj_init_draw_rect_dsc+0x2b8>)
  40806e:	4798      	blx	r3
            draw_dsc->shadow_opa = lv_obj_get_style_shadow_opa(obj, part);
  408070:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
            if(draw_dsc->shadow_opa > LV_OPA_MIN) {
  408074:	2802      	cmp	r0, #2
  408076:	f67f af08 	bls.w	407e8a <lv_obj_init_draw_rect_dsc+0x86>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  40807a:	2251      	movs	r2, #81	; 0x51
  40807c:	4631      	mov	r1, r6
  40807e:	4628      	mov	r0, r5
  408080:	f8df 8034 	ldr.w	r8, [pc, #52]	; 4080b8 <lv_obj_init_draw_rect_dsc+0x2b4>
  408084:	47c0      	blx	r8
                draw_dsc->shadow_ofs_x = lv_obj_get_style_shadow_ofs_x(obj, part);
  408086:	84a0      	strh	r0, [r4, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408088:	2252      	movs	r2, #82	; 0x52
  40808a:	4631      	mov	r1, r6
  40808c:	4628      	mov	r0, r5
  40808e:	47c0      	blx	r8
                draw_dsc->shadow_ofs_y = lv_obj_get_style_shadow_ofs_y(obj, part);
  408090:	84e0      	strh	r0, [r4, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408092:	2253      	movs	r2, #83	; 0x53
  408094:	4631      	mov	r1, r6
  408096:	4628      	mov	r0, r5
  408098:	47c0      	blx	r8
                draw_dsc->shadow_spread = lv_obj_get_style_shadow_spread(obj, part);
  40809a:	8520      	strh	r0, [r4, #40]	; 0x28
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  40809c:	2259      	movs	r2, #89	; 0x59
  40809e:	4631      	mov	r1, r6
  4080a0:	4628      	mov	r0, r5
  4080a2:	4b08      	ldr	r3, [pc, #32]	; (4080c4 <lv_obj_init_draw_rect_dsc+0x2c0>)
  4080a4:	4798      	blx	r3
                draw_dsc->shadow_color = lv_obj_get_style_shadow_color(obj, part);
  4080a6:	8420      	strh	r0, [r4, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_BLEND_MODE, shadow_blend_mode, lv_blend_mode_t, _int, scalar)
  4080a8:	2254      	movs	r2, #84	; 0x54
  4080aa:	4631      	mov	r1, r6
  4080ac:	4628      	mov	r0, r5
  4080ae:	47c0      	blx	r8
                draw_dsc->shadow_blend_mode = lv_obj_get_style_shadow_blend_mode(obj, part);
  4080b0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  4080b4:	e6e9      	b.n	407e8a <lv_obj_init_draw_rect_dsc+0x86>
  4080b6:	bf00      	nop
  4080b8:	00406f8d 	.word	0x00406f8d
  4080bc:	00406a01 	.word	0x00406a01
  4080c0:	00406e85 	.word	0x00406e85
  4080c4:	00406979 	.word	0x00406979
  4080c8:	0040d0bd 	.word	0x0040d0bd
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  4080cc:	227c      	movs	r2, #124	; 0x7c
  4080ce:	4631      	mov	r1, r6
  4080d0:	4628      	mov	r0, r5
  4080d2:	4b1d      	ldr	r3, [pc, #116]	; (408148 <lv_obj_init_draw_rect_dsc+0x344>)
  4080d4:	4798      	blx	r3
            draw_dsc->value_opa = lv_obj_get_style_value_opa(obj, part);
  4080d6:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
            if(draw_dsc->value_opa > LV_OPA_MIN) {
  4080da:	2802      	cmp	r0, #2
  4080dc:	f67f aee1 	bls.w	407ea2 <lv_obj_init_draw_rect_dsc+0x9e>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  4080e0:	2273      	movs	r2, #115	; 0x73
  4080e2:	4631      	mov	r1, r6
  4080e4:	4628      	mov	r0, r5
  4080e6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 408154 <lv_obj_init_draw_rect_dsc+0x350>
  4080ea:	47c0      	blx	r8
                draw_dsc->value_ofs_x = lv_obj_get_style_value_ofs_x(obj, part);
  4080ec:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  4080f0:	2274      	movs	r2, #116	; 0x74
  4080f2:	4631      	mov	r1, r6
  4080f4:	4628      	mov	r0, r5
  4080f6:	47c0      	blx	r8
                draw_dsc->value_ofs_y = lv_obj_get_style_value_ofs_y(obj, part);
  4080f8:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4080fc:	2279      	movs	r2, #121	; 0x79
  4080fe:	4631      	mov	r1, r6
  408100:	4628      	mov	r0, r5
  408102:	4b12      	ldr	r3, [pc, #72]	; (40814c <lv_obj_init_draw_rect_dsc+0x348>)
  408104:	4798      	blx	r3
                draw_dsc->value_color = lv_obj_get_style_value_color(obj, part);
  408106:	f8a4 0046 	strh.w	r0, [r4, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  40810a:	227e      	movs	r2, #126	; 0x7e
  40810c:	4631      	mov	r1, r6
  40810e:	4628      	mov	r0, r5
  408110:	4b0f      	ldr	r3, [pc, #60]	; (408150 <lv_obj_init_draw_rect_dsc+0x34c>)
  408112:	4798      	blx	r3
                draw_dsc->value_font = lv_obj_get_style_value_font(obj, part);
  408114:	6420      	str	r0, [r4, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  408116:	2270      	movs	r2, #112	; 0x70
  408118:	4631      	mov	r1, r6
  40811a:	4628      	mov	r0, r5
  40811c:	47c0      	blx	r8
                draw_dsc->value_letter_space = lv_obj_get_style_value_letter_space(obj, part);
  40811e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
  408122:	2271      	movs	r2, #113	; 0x71
  408124:	4631      	mov	r1, r6
  408126:	4628      	mov	r0, r5
  408128:	47c0      	blx	r8
                draw_dsc->value_line_space = lv_obj_get_style_value_line_space(obj, part);
  40812a:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  40812e:	2275      	movs	r2, #117	; 0x75
  408130:	4631      	mov	r1, r6
  408132:	4628      	mov	r0, r5
  408134:	47c0      	blx	r8
                draw_dsc->value_align = lv_obj_get_style_value_align(obj, part);
  408136:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
  40813a:	2272      	movs	r2, #114	; 0x72
  40813c:	4631      	mov	r1, r6
  40813e:	4628      	mov	r0, r5
  408140:	47c0      	blx	r8
                draw_dsc->value_blend_mode = lv_obj_get_style_value_blend_mode(obj, part);
  408142:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  408146:	e6ac      	b.n	407ea2 <lv_obj_init_draw_rect_dsc+0x9e>
  408148:	00406a01 	.word	0x00406a01
  40814c:	00406979 	.word	0x00406979
  408150:	00406e85 	.word	0x00406e85
  408154:	00406f8d 	.word	0x00406f8d

00408158 <lv_obj_design>:
{
  408158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40815c:	b09a      	sub	sp, #104	; 0x68
  40815e:	4604      	mov	r4, r0
  408160:	460e      	mov	r6, r1
    if(mode == LV_DESIGN_COVER_CHK) {
  408162:	2a02      	cmp	r2, #2
  408164:	d008      	beq.n	408178 <lv_obj_design+0x20>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  408166:	2a00      	cmp	r2, #0
  408168:	d06d      	beq.n	408246 <lv_obj_design+0xee>
    else if(mode == LV_DESIGN_DRAW_POST) {
  40816a:	2a01      	cmp	r2, #1
  40816c:	f000 80f4 	beq.w	408358 <lv_obj_design+0x200>
    return LV_DESIGN_RES_OK;
  408170:	2000      	movs	r0, #0
}
  408172:	b01a      	add	sp, #104	; 0x68
  408174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408178:	2100      	movs	r1, #0
  40817a:	4ba3      	ldr	r3, [pc, #652]	; (408408 <lv_obj_design+0x2b0>)
  40817c:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  40817e:	b108      	cbz	r0, 408184 <lv_obj_design+0x2c>
  408180:	2003      	movs	r0, #3
  408182:	e7f6      	b.n	408172 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  408184:	2201      	movs	r2, #1
  408186:	2100      	movs	r1, #0
  408188:	4620      	mov	r0, r4
  40818a:	4d9f      	ldr	r5, [pc, #636]	; (408408 <lv_obj_design+0x2b0>)
  40818c:	47a8      	blx	r5
  40818e:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408190:	2204      	movs	r2, #4
  408192:	2100      	movs	r1, #0
  408194:	4620      	mov	r0, r4
  408196:	47a8      	blx	r5
  408198:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40819a:	2205      	movs	r2, #5
  40819c:	2100      	movs	r1, #0
  40819e:	4620      	mov	r0, r4
  4081a0:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  4081a2:	f104 0110 	add.w	r1, r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4081a6:	aa05      	add	r2, sp, #20
  4081a8:	2308      	movs	r3, #8
    while(len) {
  4081aa:	b12b      	cbz	r3, 4081b8 <lv_obj_design+0x60>
        *d8 = *s8;
  4081ac:	f811 5b01 	ldrb.w	r5, [r1], #1
  4081b0:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  4081b4:	3b01      	subs	r3, #1
  4081b6:	e7f8      	b.n	4081aa <lv_obj_design+0x52>
        coords.x1 -= w;
  4081b8:	fa1f f888 	uxth.w	r8, r8
  4081bc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  4081c0:	eba3 0308 	sub.w	r3, r3, r8
  4081c4:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
  4081c8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  4081cc:	4498      	add	r8, r3
  4081ce:	f8ad 8018 	strh.w	r8, [sp, #24]
        coords.y1 -= h;
  4081d2:	b280      	uxth	r0, r0
  4081d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  4081d8:	1a1b      	subs	r3, r3, r0
  4081da:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
  4081de:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  4081e2:	4418      	add	r0, r3
  4081e4:	f8ad 001a 	strh.w	r0, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
  4081e8:	463a      	mov	r2, r7
  4081ea:	a905      	add	r1, sp, #20
  4081ec:	4630      	mov	r0, r6
  4081ee:	4b87      	ldr	r3, [pc, #540]	; (40840c <lv_obj_design+0x2b4>)
  4081f0:	4798      	blx	r3
  4081f2:	b908      	cbnz	r0, 4081f8 <lv_obj_design+0xa0>
  4081f4:	2002      	movs	r0, #2
  4081f6:	e7bc      	b.n	408172 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4081f8:	222c      	movs	r2, #44	; 0x2c
  4081fa:	2100      	movs	r1, #0
  4081fc:	4620      	mov	r0, r4
  4081fe:	4b84      	ldr	r3, [pc, #528]	; (408410 <lv_obj_design+0x2b8>)
  408200:	4798      	blx	r3
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408202:	28fc      	cmp	r0, #252	; 0xfc
  408204:	d801      	bhi.n	40820a <lv_obj_design+0xb2>
  408206:	2002      	movs	r0, #2
  408208:	e7b3      	b.n	408172 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  40820a:	2220      	movs	r2, #32
  40820c:	2100      	movs	r1, #0
  40820e:	4620      	mov	r0, r4
  408210:	4b7d      	ldr	r3, [pc, #500]	; (408408 <lv_obj_design+0x2b0>)
  408212:	4798      	blx	r3
  408214:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408216:	b108      	cbz	r0, 40821c <lv_obj_design+0xc4>
  408218:	2002      	movs	r0, #2
  40821a:	e7aa      	b.n	408172 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
  40821c:	2232      	movs	r2, #50	; 0x32
  40821e:	2100      	movs	r1, #0
  408220:	4620      	mov	r0, r4
  408222:	4b79      	ldr	r3, [pc, #484]	; (408408 <lv_obj_design+0x2b0>)
  408224:	4798      	blx	r3
  408226:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  408228:	b108      	cbz	r0, 40822e <lv_obj_design+0xd6>
  40822a:	2002      	movs	r0, #2
  40822c:	e7a1      	b.n	408172 <lv_obj_design+0x1a>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40822e:	f248 020c 	movw	r2, #32780	; 0x800c
  408232:	2100      	movs	r1, #0
  408234:	4620      	mov	r0, r4
  408236:	4b76      	ldr	r3, [pc, #472]	; (408410 <lv_obj_design+0x2b8>)
  408238:	4798      	blx	r3
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  40823a:	28fc      	cmp	r0, #252	; 0xfc
  40823c:	d901      	bls.n	408242 <lv_obj_design+0xea>
        return LV_DESIGN_RES_COVER;
  40823e:	2001      	movs	r0, #1
  408240:	e797      	b.n	408172 <lv_obj_design+0x1a>
        if(lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
  408242:	2002      	movs	r0, #2
  408244:	e795      	b.n	408172 <lv_obj_design+0x1a>
        lv_draw_rect_dsc_init(&draw_dsc);
  408246:	a805      	add	r0, sp, #20
  408248:	4b72      	ldr	r3, [pc, #456]	; (408414 <lv_obj_design+0x2bc>)
  40824a:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  40824c:	2233      	movs	r2, #51	; 0x33
  40824e:	2100      	movs	r1, #0
  408250:	4620      	mov	r0, r4
  408252:	4b6d      	ldr	r3, [pc, #436]	; (408408 <lv_obj_design+0x2b0>)
  408254:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  408256:	b128      	cbz	r0, 408264 <lv_obj_design+0x10c>
            draw_dsc.border_post = 1;
  408258:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  40825c:	f043 0301 	orr.w	r3, r3, #1
  408260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408264:	aa05      	add	r2, sp, #20
  408266:	2100      	movs	r1, #0
  408268:	4620      	mov	r0, r4
  40826a:	4b6b      	ldr	r3, [pc, #428]	; (408418 <lv_obj_design+0x2c0>)
  40826c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40826e:	2204      	movs	r2, #4
  408270:	2100      	movs	r1, #0
  408272:	4620      	mov	r0, r4
  408274:	4d64      	ldr	r5, [pc, #400]	; (408408 <lv_obj_design+0x2b0>)
  408276:	47a8      	blx	r5
  408278:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40827a:	2205      	movs	r2, #5
  40827c:	2100      	movs	r1, #0
  40827e:	4620      	mov	r0, r4
  408280:	47a8      	blx	r5
        lv_area_copy(&coords, &obj->coords);
  408282:	f104 0710 	add.w	r7, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  408286:	4639      	mov	r1, r7
    uint8_t * d8 = (uint8_t *)dst;
  408288:	aa01      	add	r2, sp, #4
  40828a:	2308      	movs	r3, #8
  40828c:	e004      	b.n	408298 <lv_obj_design+0x140>
        *d8 = *s8;
  40828e:	f811 5b01 	ldrb.w	r5, [r1], #1
  408292:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  408296:	3b01      	subs	r3, #1
    while(len) {
  408298:	2b00      	cmp	r3, #0
  40829a:	d1f8      	bne.n	40828e <lv_obj_design+0x136>
        coords.x1 -= w;
  40829c:	fa1f f888 	uxth.w	r8, r8
  4082a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  4082a4:	eba3 0308 	sub.w	r3, r3, r8
  4082a8:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
  4082ac:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  4082b0:	4498      	add	r8, r3
  4082b2:	f8ad 8008 	strh.w	r8, [sp, #8]
        coords.y1 -= h;
  4082b6:	b280      	uxth	r0, r0
  4082b8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  4082bc:	1a1b      	subs	r3, r3, r0
  4082be:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
  4082c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
  4082c6:	4418      	add	r0, r3
  4082c8:	f8ad 000a 	strh.w	r0, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
  4082cc:	aa05      	add	r2, sp, #20
  4082ce:	4631      	mov	r1, r6
  4082d0:	a801      	add	r0, sp, #4
  4082d2:	4b52      	ldr	r3, [pc, #328]	; (40841c <lv_obj_design+0x2c4>)
  4082d4:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4082d6:	2202      	movs	r2, #2
  4082d8:	2100      	movs	r1, #0
  4082da:	4620      	mov	r0, r4
  4082dc:	4b4a      	ldr	r3, [pc, #296]	; (408408 <lv_obj_design+0x2b0>)
  4082de:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  4082e0:	b908      	cbnz	r0, 4082e6 <lv_obj_design+0x18e>
    return LV_DESIGN_RES_OK;
  4082e2:	2000      	movs	r0, #0
  4082e4:	e745      	b.n	408172 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  4082e6:	201c      	movs	r0, #28
  4082e8:	4b4d      	ldr	r3, [pc, #308]	; (408420 <lv_obj_design+0x2c8>)
  4082ea:	4798      	blx	r3
  4082ec:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4082ee:	2201      	movs	r2, #1
  4082f0:	2100      	movs	r1, #0
  4082f2:	4620      	mov	r0, r4
  4082f4:	4b44      	ldr	r3, [pc, #272]	; (408408 <lv_obj_design+0x2b0>)
  4082f6:	4798      	blx	r3
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  4082f8:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
  4082fc:	f013 0f01 	tst.w	r3, #1
  408300:	d01e      	beq.n	408340 <lv_obj_design+0x1e8>
  408302:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
  408306:	2b01      	cmp	r3, #1
  408308:	d91a      	bls.n	408340 <lv_obj_design+0x1e8>
  40830a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40830e:	2b00      	cmp	r3, #0
  408310:	dd16      	ble.n	408340 <lv_obj_design+0x1e8>
                cc_area.x1 = obj->coords.x1 + 1;
  408312:	8a23      	ldrh	r3, [r4, #16]
  408314:	3301      	adds	r3, #1
  408316:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
  40831a:	8a63      	ldrh	r3, [r4, #18]
  40831c:	3301      	adds	r3, #1
  40831e:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
  408322:	8aa3      	ldrh	r3, [r4, #20]
  408324:	3b01      	subs	r3, #1
  408326:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
  40832a:	8ae3      	ldrh	r3, [r4, #22]
  40832c:	3b01      	subs	r3, #1
  40832e:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
  408332:	2300      	movs	r3, #0
  408334:	4602      	mov	r2, r0
  408336:	a903      	add	r1, sp, #12
  408338:	4628      	mov	r0, r5
  40833a:	4e3a      	ldr	r6, [pc, #232]	; (408424 <lv_obj_design+0x2cc>)
  40833c:	47b0      	blx	r6
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
  40833e:	e005      	b.n	40834c <lv_obj_design+0x1f4>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
  408340:	2300      	movs	r3, #0
  408342:	4602      	mov	r2, r0
  408344:	4639      	mov	r1, r7
  408346:	4628      	mov	r0, r5
  408348:	4e36      	ldr	r6, [pc, #216]	; (408424 <lv_obj_design+0x2cc>)
  40834a:	47b0      	blx	r6
            lv_draw_mask_add(mp, obj + 8);
  40834c:	f504 7118 	add.w	r1, r4, #608	; 0x260
  408350:	4628      	mov	r0, r5
  408352:	4b35      	ldr	r3, [pc, #212]	; (408428 <lv_obj_design+0x2d0>)
  408354:	4798      	blx	r3
  408356:	e7c4      	b.n	4082e2 <lv_obj_design+0x18a>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  408358:	2202      	movs	r2, #2
  40835a:	2100      	movs	r1, #0
  40835c:	4b2a      	ldr	r3, [pc, #168]	; (408408 <lv_obj_design+0x2b0>)
  40835e:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
  408360:	b938      	cbnz	r0, 408372 <lv_obj_design+0x21a>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  408362:	2233      	movs	r2, #51	; 0x33
  408364:	2100      	movs	r1, #0
  408366:	4620      	mov	r0, r4
  408368:	4b27      	ldr	r3, [pc, #156]	; (408408 <lv_obj_design+0x2b0>)
  40836a:	4798      	blx	r3
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
  40836c:	b940      	cbnz	r0, 408380 <lv_obj_design+0x228>
    return LV_DESIGN_RES_OK;
  40836e:	2000      	movs	r0, #0
  408370:	e6ff      	b.n	408172 <lv_obj_design+0x1a>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
  408372:	f504 7018 	add.w	r0, r4, #608	; 0x260
  408376:	4b2d      	ldr	r3, [pc, #180]	; (40842c <lv_obj_design+0x2d4>)
  408378:	4798      	blx	r3
            _lv_mem_buf_release(param);
  40837a:	4b2d      	ldr	r3, [pc, #180]	; (408430 <lv_obj_design+0x2d8>)
  40837c:	4798      	blx	r3
  40837e:	e7f0      	b.n	408362 <lv_obj_design+0x20a>
            lv_draw_rect_dsc_init(&draw_dsc);
  408380:	a805      	add	r0, sp, #20
  408382:	4b24      	ldr	r3, [pc, #144]	; (408414 <lv_obj_design+0x2bc>)
  408384:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  408386:	2500      	movs	r5, #0
  408388:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  40838c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  408390:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
  408394:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
  408398:	aa05      	add	r2, sp, #20
  40839a:	4629      	mov	r1, r5
  40839c:	4620      	mov	r0, r4
  40839e:	4b1e      	ldr	r3, [pc, #120]	; (408418 <lv_obj_design+0x2c0>)
  4083a0:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  4083a2:	2204      	movs	r2, #4
  4083a4:	4629      	mov	r1, r5
  4083a6:	4620      	mov	r0, r4
  4083a8:	4f17      	ldr	r7, [pc, #92]	; (408408 <lv_obj_design+0x2b0>)
  4083aa:	47b8      	blx	r7
  4083ac:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  4083ae:	2205      	movs	r2, #5
  4083b0:	4629      	mov	r1, r5
  4083b2:	4620      	mov	r0, r4
  4083b4:	47b8      	blx	r7
            lv_area_copy(&coords, &obj->coords);
  4083b6:	3410      	adds	r4, #16
    uint8_t * d8 = (uint8_t *)dst;
  4083b8:	aa03      	add	r2, sp, #12
  4083ba:	2308      	movs	r3, #8
  4083bc:	e004      	b.n	4083c8 <lv_obj_design+0x270>
        *d8 = *s8;
  4083be:	f814 1b01 	ldrb.w	r1, [r4], #1
  4083c2:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  4083c6:	3b01      	subs	r3, #1
    while(len) {
  4083c8:	2b00      	cmp	r3, #0
  4083ca:	d1f8      	bne.n	4083be <lv_obj_design+0x266>
            coords.x1 -= w;
  4083cc:	fa1f f788 	uxth.w	r7, r8
  4083d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4083d4:	1bdb      	subs	r3, r3, r7
  4083d6:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
  4083da:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  4083de:	441f      	add	r7, r3
  4083e0:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
  4083e4:	b280      	uxth	r0, r0
  4083e6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  4083ea:	1a1b      	subs	r3, r3, r0
  4083ec:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
  4083f0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  4083f4:	4418      	add	r0, r3
  4083f6:	f8ad 0012 	strh.w	r0, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
  4083fa:	aa05      	add	r2, sp, #20
  4083fc:	4631      	mov	r1, r6
  4083fe:	a803      	add	r0, sp, #12
  408400:	4b06      	ldr	r3, [pc, #24]	; (40841c <lv_obj_design+0x2c4>)
  408402:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  408404:	2000      	movs	r0, #0
  408406:	e6b4      	b.n	408172 <lv_obj_design+0x1a>
  408408:	00406f8d 	.word	0x00406f8d
  40840c:	00415169 	.word	0x00415169
  408410:	00406a01 	.word	0x00406a01
  408414:	00411d9d 	.word	0x00411d9d
  408418:	00407e05 	.word	0x00407e05
  40841c:	00411de9 	.word	0x00411de9
  408420:	00416269 	.word	0x00416269
  408424:	0040f7a5 	.word	0x0040f7a5
  408428:	0040f529 	.word	0x0040f529
  40842c:	0040f5d1 	.word	0x0040f5d1
  408430:	00416019 	.word	0x00416019

00408434 <lv_obj_init_draw_label_dsc>:
{
  408434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408436:	4605      	mov	r5, r0
  408438:	460e      	mov	r6, r1
  40843a:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
  40843c:	f248 028c 	movw	r2, #32908	; 0x808c
  408440:	4b2a      	ldr	r3, [pc, #168]	; (4084ec <lv_obj_init_draw_label_dsc+0xb8>)
  408442:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
  408444:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408446:	2802      	cmp	r0, #2
  408448:	d800      	bhi.n	40844c <lv_obj_init_draw_label_dsc+0x18>
  40844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  40844c:	f248 020c 	movw	r2, #32780	; 0x800c
  408450:	4631      	mov	r1, r6
  408452:	4628      	mov	r0, r5
  408454:	4b25      	ldr	r3, [pc, #148]	; (4084ec <lv_obj_init_draw_label_dsc+0xb8>)
  408456:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408458:	28fc      	cmp	r0, #252	; 0xfc
  40845a:	d805      	bhi.n	408468 <lv_obj_init_draw_label_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  40845c:	7b23      	ldrb	r3, [r4, #12]
  40845e:	fb10 f003 	smulbb	r0, r0, r3
  408462:	f3c0 2007 	ubfx	r0, r0, #8, #8
  408466:	7320      	strb	r0, [r4, #12]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
  408468:	7b23      	ldrb	r3, [r4, #12]
  40846a:	2b02      	cmp	r3, #2
  40846c:	d9ed      	bls.n	40844a <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  40846e:	f248 0289 	movw	r2, #32905	; 0x8089
  408472:	4631      	mov	r1, r6
  408474:	4628      	mov	r0, r5
  408476:	4b1e      	ldr	r3, [pc, #120]	; (4084f0 <lv_obj_init_draw_label_dsc+0xbc>)
  408478:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
  40847a:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  40847c:	f248 0280 	movw	r2, #32896	; 0x8080
  408480:	4631      	mov	r1, r6
  408482:	4628      	mov	r0, r5
  408484:	4f1b      	ldr	r7, [pc, #108]	; (4084f4 <lv_obj_init_draw_label_dsc+0xc0>)
  408486:	47b8      	blx	r7
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
  408488:	8220      	strh	r0, [r4, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  40848a:	f248 0281 	movw	r2, #32897	; 0x8081
  40848e:	4631      	mov	r1, r6
  408490:	4628      	mov	r0, r5
  408492:	47b8      	blx	r7
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
  408494:	81e0      	strh	r0, [r4, #14]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
  408496:	f248 0282 	movw	r2, #32898	; 0x8082
  40849a:	4631      	mov	r1, r6
  40849c:	4628      	mov	r0, r5
  40849e:	47b8      	blx	r7
    draw_dsc->decor = lv_obj_get_style_text_decor(obj, part);
  4084a0:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
  4084a4:	f248 0283 	movw	r2, #32899	; 0x8083
  4084a8:	4631      	mov	r1, r6
  4084aa:	4628      	mov	r0, r5
  4084ac:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_text_blend_mode(obj, part);
  4084ae:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  4084b2:	f248 028e 	movw	r2, #32910	; 0x808e
  4084b6:	4631      	mov	r1, r6
  4084b8:	4628      	mov	r0, r5
  4084ba:	4b0f      	ldr	r3, [pc, #60]	; (4084f8 <lv_obj_init_draw_label_dsc+0xc4>)
  4084bc:	4798      	blx	r3
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
  4084be:	60a0      	str	r0, [r4, #8]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
  4084c0:	6962      	ldr	r2, [r4, #20]
  4084c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4084c6:	429a      	cmp	r2, r3
  4084c8:	d0bf      	beq.n	40844a <lv_obj_init_draw_label_dsc+0x16>
  4084ca:	69a2      	ldr	r2, [r4, #24]
  4084cc:	429a      	cmp	r2, r3
  4084ce:	d0bc      	beq.n	40844a <lv_obj_init_draw_label_dsc+0x16>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  4084d0:	f248 028a 	movw	r2, #32906	; 0x808a
  4084d4:	4631      	mov	r1, r6
  4084d6:	4628      	mov	r0, r5
  4084d8:	4f05      	ldr	r7, [pc, #20]	; (4084f0 <lv_obj_init_draw_label_dsc+0xbc>)
  4084da:	47b8      	blx	r7
        draw_dsc->sel_color = lv_obj_get_style_text_sel_color(obj, part);
  4084dc:	8060      	strh	r0, [r4, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  4084de:	f248 028b 	movw	r2, #32907	; 0x808b
  4084e2:	4631      	mov	r1, r6
  4084e4:	4628      	mov	r0, r5
  4084e6:	47b8      	blx	r7
        draw_dsc->sel_bg_color = lv_obj_get_style_text_sel_bg_color(obj, part);
  4084e8:	80a0      	strh	r0, [r4, #4]
  4084ea:	e7ae      	b.n	40844a <lv_obj_init_draw_label_dsc+0x16>
  4084ec:	00406a01 	.word	0x00406a01
  4084f0:	00406979 	.word	0x00406979
  4084f4:	00406f8d 	.word	0x00406f8d
  4084f8:	00406e85 	.word	0x00406e85

004084fc <lv_obj_init_draw_img_dsc>:
{
  4084fc:	b570      	push	{r4, r5, r6, lr}
  4084fe:	4605      	mov	r5, r0
  408500:	460e      	mov	r6, r1
  408502:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  408504:	f248 02ac 	movw	r2, #32940	; 0x80ac
  408508:	4b25      	ldr	r3, [pc, #148]	; (4085a0 <lv_obj_init_draw_img_dsc+0xa4>)
  40850a:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
  40850c:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  40850e:	2802      	cmp	r0, #2
  408510:	d800      	bhi.n	408514 <lv_obj_init_draw_img_dsc+0x18>
  408512:	bd70      	pop	{r4, r5, r6, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408514:	f248 020c 	movw	r2, #32780	; 0x800c
  408518:	4631      	mov	r1, r6
  40851a:	4628      	mov	r0, r5
  40851c:	4b20      	ldr	r3, [pc, #128]	; (4085a0 <lv_obj_init_draw_img_dsc+0xa4>)
  40851e:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  408520:	28fc      	cmp	r0, #252	; 0xfc
  408522:	d805      	bhi.n	408530 <lv_obj_init_draw_img_dsc+0x34>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  408524:	7823      	ldrb	r3, [r4, #0]
  408526:	fb10 f003 	smulbb	r0, r0, r3
  40852a:	f3c0 2007 	ubfx	r0, r0, #8, #8
  40852e:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  408530:	7823      	ldrb	r3, [r4, #0]
  408532:	2b02      	cmp	r3, #2
  408534:	d9ed      	bls.n	408512 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->angle = 0;
  408536:	2300      	movs	r3, #0
  408538:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
  40853a:	f44f 7380 	mov.w	r3, #256	; 0x100
  40853e:	8123      	strh	r3, [r4, #8]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  408540:	8aab      	ldrh	r3, [r5, #20]
  408542:	8a2a      	ldrh	r2, [r5, #16]
  408544:	1a9b      	subs	r3, r3, r2
  408546:	b29b      	uxth	r3, r3
  408548:	3301      	adds	r3, #1
  40854a:	b21b      	sxth	r3, r3
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  40854c:	2b00      	cmp	r3, #0
  40854e:	db1b      	blt.n	408588 <lv_obj_init_draw_img_dsc+0x8c>
  408550:	105b      	asrs	r3, r3, #1
  408552:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  408554:	8aeb      	ldrh	r3, [r5, #22]
  408556:	8a6a      	ldrh	r2, [r5, #18]
  408558:	1a9b      	subs	r3, r3, r2
  40855a:	b29b      	uxth	r3, r3
  40855c:	3301      	adds	r3, #1
  40855e:	b21b      	sxth	r3, r3
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  408560:	2b00      	cmp	r3, #0
  408562:	db13      	blt.n	40858c <lv_obj_init_draw_img_dsc+0x90>
  408564:	105b      	asrs	r3, r3, #1
  408566:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
  408568:	f248 02ad 	movw	r2, #32941	; 0x80ad
  40856c:	4631      	mov	r1, r6
  40856e:	4628      	mov	r0, r5
  408570:	4b0b      	ldr	r3, [pc, #44]	; (4085a0 <lv_obj_init_draw_img_dsc+0xa4>)
  408572:	4798      	blx	r3
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
  408574:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
  408576:	b958      	cbnz	r0, 408590 <lv_obj_init_draw_img_dsc+0x94>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  408578:	f248 02a0 	movw	r2, #32928	; 0x80a0
  40857c:	4631      	mov	r1, r6
  40857e:	4628      	mov	r0, r5
  408580:	4b08      	ldr	r3, [pc, #32]	; (4085a4 <lv_obj_init_draw_img_dsc+0xa8>)
  408582:	4798      	blx	r3
    draw_dsc->blend_mode = lv_obj_get_style_image_blend_mode(obj, part);
  408584:	73a0      	strb	r0, [r4, #14]
  408586:	e7c4      	b.n	408512 <lv_obj_init_draw_img_dsc+0x16>
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
  408588:	3301      	adds	r3, #1
  40858a:	e7e1      	b.n	408550 <lv_obj_init_draw_img_dsc+0x54>
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
  40858c:	3301      	adds	r3, #1
  40858e:	e7e9      	b.n	408564 <lv_obj_init_draw_img_dsc+0x68>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  408590:	f248 02a9 	movw	r2, #32937	; 0x80a9
  408594:	4631      	mov	r1, r6
  408596:	4628      	mov	r0, r5
  408598:	4b03      	ldr	r3, [pc, #12]	; (4085a8 <lv_obj_init_draw_img_dsc+0xac>)
  40859a:	4798      	blx	r3
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
  40859c:	81a0      	strh	r0, [r4, #12]
  40859e:	e7eb      	b.n	408578 <lv_obj_init_draw_img_dsc+0x7c>
  4085a0:	00406a01 	.word	0x00406a01
  4085a4:	00406f8d 	.word	0x00406f8d
  4085a8:	00406979 	.word	0x00406979

004085ac <lv_obj_init_draw_line_dsc>:
{
  4085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4085ae:	4605      	mov	r5, r0
  4085b0:	460e      	mov	r6, r1
  4085b2:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4085b4:	2290      	movs	r2, #144	; 0x90
  4085b6:	4b24      	ldr	r3, [pc, #144]	; (408648 <lv_obj_init_draw_line_dsc+0x9c>)
  4085b8:	4798      	blx	r3
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
  4085ba:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
  4085bc:	b900      	cbnz	r0, 4085c0 <lv_obj_init_draw_line_dsc+0x14>
  4085be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
  4085c0:	229c      	movs	r2, #156	; 0x9c
  4085c2:	4631      	mov	r1, r6
  4085c4:	4628      	mov	r0, r5
  4085c6:	4b21      	ldr	r3, [pc, #132]	; (40864c <lv_obj_init_draw_line_dsc+0xa0>)
  4085c8:	4798      	blx	r3
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
  4085ca:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4085cc:	2802      	cmp	r0, #2
  4085ce:	d9f6      	bls.n	4085be <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4085d0:	f248 020c 	movw	r2, #32780	; 0x800c
  4085d4:	4631      	mov	r1, r6
  4085d6:	4628      	mov	r0, r5
  4085d8:	4b1c      	ldr	r3, [pc, #112]	; (40864c <lv_obj_init_draw_line_dsc+0xa0>)
  4085da:	4798      	blx	r3
    if(opa_scale < LV_OPA_MAX) {
  4085dc:	28fc      	cmp	r0, #252	; 0xfc
  4085de:	d805      	bhi.n	4085ec <lv_obj_init_draw_line_dsc+0x40>
        draw_dsc->opa = (uint16_t)((uint16_t)draw_dsc->opa * opa_scale) >> 8;
  4085e0:	7a23      	ldrb	r3, [r4, #8]
  4085e2:	fb10 f003 	smulbb	r0, r0, r3
  4085e6:	f3c0 2007 	ubfx	r0, r0, #8, #8
  4085ea:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
  4085ec:	7a23      	ldrb	r3, [r4, #8]
  4085ee:	2b02      	cmp	r3, #2
  4085f0:	d9e5      	bls.n	4085be <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4085f2:	2299      	movs	r2, #153	; 0x99
  4085f4:	4631      	mov	r1, r6
  4085f6:	4628      	mov	r0, r5
  4085f8:	4b15      	ldr	r3, [pc, #84]	; (408650 <lv_obj_init_draw_line_dsc+0xa4>)
  4085fa:	4798      	blx	r3
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
  4085fc:	8020      	strh	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  4085fe:	2292      	movs	r2, #146	; 0x92
  408600:	4631      	mov	r1, r6
  408602:	4628      	mov	r0, r5
  408604:	4b10      	ldr	r3, [pc, #64]	; (408648 <lv_obj_init_draw_line_dsc+0x9c>)
  408606:	4798      	blx	r3
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
  408608:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
  40860a:	b9b0      	cbnz	r0, 40863a <lv_obj_init_draw_line_dsc+0x8e>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  40860c:	2294      	movs	r2, #148	; 0x94
  40860e:	4631      	mov	r1, r6
  408610:	4628      	mov	r0, r5
  408612:	4f0d      	ldr	r7, [pc, #52]	; (408648 <lv_obj_init_draw_line_dsc+0x9c>)
  408614:	47b8      	blx	r7
  408616:	3000      	adds	r0, #0
  408618:	bf18      	it	ne
  40861a:	2001      	movne	r0, #1
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
  40861c:	7a63      	ldrb	r3, [r4, #9]
  40861e:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
  408622:	f360 03c3 	bfi	r3, r0, #3, #1
  408626:	7263      	strb	r3, [r4, #9]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_BLEND_MODE, line_blend_mode, lv_blend_mode_t, _int, scalar)
  408628:	2291      	movs	r2, #145	; 0x91
  40862a:	4631      	mov	r1, r6
  40862c:	4628      	mov	r0, r5
  40862e:	47b8      	blx	r7
    draw_dsc->blend_mode = lv_obj_get_style_line_blend_mode(obj, part);
  408630:	7a63      	ldrb	r3, [r4, #9]
  408632:	f360 0301 	bfi	r3, r0, #0, #2
  408636:	7263      	strb	r3, [r4, #9]
  408638:	e7c1      	b.n	4085be <lv_obj_init_draw_line_dsc+0x12>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  40863a:	2293      	movs	r2, #147	; 0x93
  40863c:	4631      	mov	r1, r6
  40863e:	4628      	mov	r0, r5
  408640:	4b01      	ldr	r3, [pc, #4]	; (408648 <lv_obj_init_draw_line_dsc+0x9c>)
  408642:	4798      	blx	r3
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
  408644:	80e0      	strh	r0, [r4, #6]
  408646:	e7e1      	b.n	40860c <lv_obj_init_draw_line_dsc+0x60>
  408648:	00406f8d 	.word	0x00406f8d
  40864c:	00406a01 	.word	0x00406a01
  408650:	00406979 	.word	0x00406979

00408654 <style_snapshot>:
{
  408654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408658:	b083      	sub	sp, #12
  40865a:	4605      	mov	r5, r0
  40865c:	4689      	mov	r9, r1
  40865e:	4614      	mov	r4, r2
    _lv_obj_disable_style_caching(obj, true);
  408660:	2101      	movs	r1, #1
  408662:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 408854 <style_snapshot+0x200>
  408666:	47c0      	blx	r8
    _lv_memset_00(shot, sizeof(style_snapshot_t));
  408668:	21bc      	movs	r1, #188	; 0xbc
  40866a:	4620      	mov	r0, r4
  40866c:	4b6d      	ldr	r3, [pc, #436]	; (408824 <style_snapshot+0x1d0>)
  40866e:	4798      	blx	r3
    lv_draw_rect_dsc_init(&shot->rect);
  408670:	4620      	mov	r0, r4
  408672:	4b6d      	ldr	r3, [pc, #436]	; (408828 <style_snapshot+0x1d4>)
  408674:	4798      	blx	r3
    lv_draw_label_dsc_init(&shot->label);
  408676:	f104 0a54 	add.w	sl, r4, #84	; 0x54
  40867a:	4650      	mov	r0, sl
  40867c:	4b6b      	ldr	r3, [pc, #428]	; (40882c <style_snapshot+0x1d8>)
  40867e:	4798      	blx	r3
    lv_draw_img_dsc_init(&shot->img);
  408680:	f104 0382 	add.w	r3, r4, #130	; 0x82
  408684:	9301      	str	r3, [sp, #4]
  408686:	4618      	mov	r0, r3
  408688:	4b69      	ldr	r3, [pc, #420]	; (408830 <style_snapshot+0x1dc>)
  40868a:	4798      	blx	r3
    lv_draw_line_dsc_init(&shot->line);
  40868c:	f104 0678 	add.w	r6, r4, #120	; 0x78
  408690:	4630      	mov	r0, r6
  408692:	4b68      	ldr	r3, [pc, #416]	; (408834 <style_snapshot+0x1e0>)
  408694:	4798      	blx	r3
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
  408696:	4649      	mov	r1, r9
  408698:	4628      	mov	r0, r5
  40869a:	4b67      	ldr	r3, [pc, #412]	; (408838 <style_snapshot+0x1e4>)
  40869c:	4798      	blx	r3
  40869e:	4607      	mov	r7, r0
    bool trans_ori = list->skip_trans;
  4086a0:	7943      	ldrb	r3, [r0, #5]
  4086a2:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
  4086a6:	f043 0301 	orr.w	r3, r3, #1
  4086aa:	7143      	strb	r3, [r0, #5]
    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
  4086ac:	4622      	mov	r2, r4
  4086ae:	4649      	mov	r1, r9
  4086b0:	4628      	mov	r0, r5
  4086b2:	4b62      	ldr	r3, [pc, #392]	; (40883c <style_snapshot+0x1e8>)
  4086b4:	4798      	blx	r3
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
  4086b6:	4652      	mov	r2, sl
  4086b8:	4649      	mov	r1, r9
  4086ba:	4628      	mov	r0, r5
  4086bc:	4b60      	ldr	r3, [pc, #384]	; (408840 <style_snapshot+0x1ec>)
  4086be:	4798      	blx	r3
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
  4086c0:	9a01      	ldr	r2, [sp, #4]
  4086c2:	4649      	mov	r1, r9
  4086c4:	4628      	mov	r0, r5
  4086c6:	4b5f      	ldr	r3, [pc, #380]	; (408844 <style_snapshot+0x1f0>)
  4086c8:	4798      	blx	r3
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
  4086ca:	4632      	mov	r2, r6
  4086cc:	4649      	mov	r1, r9
  4086ce:	4628      	mov	r0, r5
  4086d0:	4b5d      	ldr	r3, [pc, #372]	; (408848 <style_snapshot+0x1f4>)
  4086d2:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4086d4:	2210      	movs	r2, #16
  4086d6:	4649      	mov	r1, r9
  4086d8:	4628      	mov	r0, r5
  4086da:	4e5c      	ldr	r6, [pc, #368]	; (40884c <style_snapshot+0x1f8>)
  4086dc:	47b0      	blx	r6
    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
  4086de:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4086e2:	2211      	movs	r2, #17
  4086e4:	4649      	mov	r1, r9
  4086e6:	4628      	mov	r0, r5
  4086e8:	47b0      	blx	r6
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
  4086ea:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4086ee:	2213      	movs	r2, #19
  4086f0:	4649      	mov	r1, r9
  4086f2:	4628      	mov	r0, r5
  4086f4:	47b0      	blx	r6
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
  4086f6:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4086fa:	2212      	movs	r2, #18
  4086fc:	4649      	mov	r1, r9
  4086fe:	4628      	mov	r0, r5
  408700:	47b0      	blx	r6
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
  408702:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  408706:	2214      	movs	r2, #20
  408708:	4649      	mov	r1, r9
  40870a:	4628      	mov	r0, r5
  40870c:	47b0      	blx	r6
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
  40870e:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  408712:	2215      	movs	r2, #21
  408714:	4649      	mov	r1, r9
  408716:	4628      	mov	r0, r5
  408718:	47b0      	blx	r6
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
  40871a:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  40871e:	2216      	movs	r2, #22
  408720:	4649      	mov	r1, r9
  408722:	4628      	mov	r0, r5
  408724:	47b0      	blx	r6
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
  408726:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  40872a:	2217      	movs	r2, #23
  40872c:	4649      	mov	r1, r9
  40872e:	4628      	mov	r0, r5
  408730:	47b0      	blx	r6
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
  408732:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  408736:	2218      	movs	r2, #24
  408738:	4649      	mov	r1, r9
  40873a:	4628      	mov	r0, r5
  40873c:	47b0      	blx	r6
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
  40873e:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  408742:	2203      	movs	r2, #3
  408744:	4649      	mov	r1, r9
  408746:	4628      	mov	r0, r5
  408748:	47b0      	blx	r6
    shot->size = lv_obj_get_style_size(obj, part);
  40874a:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  40874e:	2204      	movs	r2, #4
  408750:	4649      	mov	r1, r9
  408752:	4628      	mov	r0, r5
  408754:	47b0      	blx	r6
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
  408756:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  40875a:	2205      	movs	r2, #5
  40875c:	4649      	mov	r1, r9
  40875e:	4628      	mov	r0, r5
  408760:	47b0      	blx	r6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
  408762:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  408766:	2206      	movs	r2, #6
  408768:	4649      	mov	r1, r9
  40876a:	4628      	mov	r0, r5
  40876c:	47b0      	blx	r6
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
  40876e:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  408772:	2207      	movs	r2, #7
  408774:	4649      	mov	r1, r9
  408776:	4628      	mov	r0, r5
  408778:	47b0      	blx	r6
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
  40877a:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  40877e:	22c0      	movs	r2, #192	; 0xc0
  408780:	4649      	mov	r1, r9
  408782:	4628      	mov	r0, r5
  408784:	47b0      	blx	r6
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
  408786:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
  40878a:	22c1      	movs	r2, #193	; 0xc1
  40878c:	4649      	mov	r1, r9
  40878e:	4628      	mov	r0, r5
  408790:	47b0      	blx	r6
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
  408792:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  408796:	22c2      	movs	r2, #194	; 0xc2
  408798:	4649      	mov	r1, r9
  40879a:	4628      	mov	r0, r5
  40879c:	47b0      	blx	r6
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
  40879e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4087a2:	22c3      	movs	r2, #195	; 0xc3
  4087a4:	4649      	mov	r1, r9
  4087a6:	4628      	mov	r0, r5
  4087a8:	47b0      	blx	r6
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
  4087aa:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  4087ae:	22c9      	movs	r2, #201	; 0xc9
  4087b0:	4649      	mov	r1, r9
  4087b2:	4628      	mov	r0, r5
  4087b4:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 408858 <style_snapshot+0x204>
  4087b8:	47d0      	blx	sl
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
  4087ba:	f8a4 00b6 	strh.w	r0, [r4, #182]	; 0xb6
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4087be:	22ca      	movs	r2, #202	; 0xca
  4087c0:	4649      	mov	r1, r9
  4087c2:	4628      	mov	r0, r5
  4087c4:	47d0      	blx	sl
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
  4087c6:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  4087ca:	f248 020c 	movw	r2, #32780	; 0x800c
  4087ce:	4649      	mov	r1, r9
  4087d0:	4628      	mov	r0, r5
  4087d2:	4b1f      	ldr	r3, [pc, #124]	; (408850 <style_snapshot+0x1fc>)
  4087d4:	4798      	blx	r3
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
  4087d6:	f884 00ba 	strb.w	r0, [r4, #186]	; 0xba
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  4087da:	2202      	movs	r2, #2
  4087dc:	4649      	mov	r1, r9
  4087de:	4628      	mov	r0, r5
  4087e0:	47b0      	blx	r6
  4087e2:	3000      	adds	r0, #0
  4087e4:	bf18      	it	ne
  4087e6:	2001      	movne	r0, #1
    shot->clip_corner = lv_obj_get_style_clip_corner(obj, part);
  4087e8:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  4087ec:	f360 0300 	bfi	r3, r0, #0, #1
  4087f0:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  4087f4:	2233      	movs	r2, #51	; 0x33
  4087f6:	4649      	mov	r1, r9
  4087f8:	4628      	mov	r0, r5
  4087fa:	47b0      	blx	r6
  4087fc:	3000      	adds	r0, #0
  4087fe:	bf18      	it	ne
  408800:	2001      	movne	r0, #1
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
  408802:	f894 30bb 	ldrb.w	r3, [r4, #187]	; 0xbb
  408806:	f360 0341 	bfi	r3, r0, #1, #1
  40880a:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
    _lv_obj_disable_style_caching(obj, false);
  40880e:	2100      	movs	r1, #0
  408810:	4628      	mov	r0, r5
  408812:	47c0      	blx	r8
    list->skip_trans = trans_ori;
  408814:	797b      	ldrb	r3, [r7, #5]
  408816:	f36b 0300 	bfi	r3, fp, #0, #1
  40881a:	717b      	strb	r3, [r7, #5]
}
  40881c:	b003      	add	sp, #12
  40881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408822:	bf00      	nop
  408824:	004163f5 	.word	0x004163f5
  408828:	00411d9d 	.word	0x00411d9d
  40882c:	0040d965 	.word	0x0040d965
  408830:	0040cdd1 	.word	0x0040cdd1
  408834:	0040e7b5 	.word	0x0040e7b5
  408838:	00405755 	.word	0x00405755
  40883c:	00407e05 	.word	0x00407e05
  408840:	00408435 	.word	0x00408435
  408844:	004084fd 	.word	0x004084fd
  408848:	004085ad 	.word	0x004085ad
  40884c:	00406f8d 	.word	0x00406f8d
  408850:	00406a01 	.word	0x00406a01
  408854:	00405849 	.word	0x00405849
  408858:	00406979 	.word	0x00406979

0040885c <lv_obj_set_state>:
    if(obj->state == new_state) return;
  40885c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  408860:	428b      	cmp	r3, r1
  408862:	f000 80e4 	beq.w	408a2e <lv_obj_set_state+0x1d2>
{
  408866:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40886a:	b0e5      	sub	sp, #404	; 0x194
  40886c:	4688      	mov	r8, r1
  40886e:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408870:	4b6f      	ldr	r3, [pc, #444]	; (408a30 <lv_obj_set_state+0x1d4>)
  408872:	4798      	blx	r3
  408874:	b120      	cbz	r0, 408880 <lv_obj_set_state+0x24>
    lv_state_t prev_state = obj->state;
  408876:	f894 a03d 	ldrb.w	sl, [r4, #61]	; 0x3d
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40887a:	2500      	movs	r5, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
  40887c:	46ab      	mov	fp, r5
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40887e:	e007      	b.n	408890 <lv_obj_set_state+0x34>
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408880:	4622      	mov	r2, r4
  408882:	2300      	movs	r3, #0
  408884:	486b      	ldr	r0, [pc, #428]	; (408a34 <lv_obj_set_state+0x1d8>)
  408886:	496c      	ldr	r1, [pc, #432]	; (408a38 <lv_obj_set_state+0x1dc>)
  408888:	4788      	blx	r1
  40888a:	e7fe      	b.n	40888a <lv_obj_set_state+0x2e>
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
  40888c:	3501      	adds	r5, #1
  40888e:	b2ed      	uxtb	r5, r5
  408890:	2d3f      	cmp	r5, #63	; 0x3f
  408892:	d81c      	bhi.n	4088ce <lv_obj_set_state+0x72>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  408894:	4629      	mov	r1, r5
  408896:	4620      	mov	r0, r4
  408898:	4b68      	ldr	r3, [pc, #416]	; (408a3c <lv_obj_set_state+0x1e0>)
  40889a:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  40889c:	b1b8      	cbz	r0, 4088ce <lv_obj_set_state+0x72>
        obj->state = prev_state;
  40889e:	f884 a03d 	strb.w	sl, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_pre);
  4088a2:	aa06      	add	r2, sp, #24
  4088a4:	4629      	mov	r1, r5
  4088a6:	4620      	mov	r0, r4
  4088a8:	4e65      	ldr	r6, [pc, #404]	; (408a40 <lv_obj_set_state+0x1e4>)
  4088aa:	47b0      	blx	r6
        obj->state = new_state;
  4088ac:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
        style_snapshot(obj, part, &shot_post);
  4088b0:	aa35      	add	r2, sp, #212	; 0xd4
  4088b2:	4629      	mov	r1, r5
  4088b4:	4620      	mov	r0, r4
  4088b6:	47b0      	blx	r6
        style_snapshot_res_t r = style_snapshot_compare(&shot_pre, &shot_post);
  4088b8:	a935      	add	r1, sp, #212	; 0xd4
  4088ba:	a806      	add	r0, sp, #24
  4088bc:	4b61      	ldr	r3, [pc, #388]	; (408a44 <lv_obj_set_state+0x1e8>)
  4088be:	4798      	blx	r3
        if(r == STYLE_COMPARE_DIFF) {
  4088c0:	2802      	cmp	r0, #2
  4088c2:	d003      	beq.n	4088cc <lv_obj_set_state+0x70>
        if(r == STYLE_COMPARE_VISUAL_DIFF) {
  4088c4:	2801      	cmp	r0, #1
  4088c6:	d1e1      	bne.n	40888c <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
  4088c8:	4683      	mov	fp, r0
  4088ca:	e7df      	b.n	40888c <lv_obj_set_state+0x30>
            cmp_res = STYLE_COMPARE_DIFF;
  4088cc:	4683      	mov	fp, r0
    obj->state = new_state;
  4088ce:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d
    if(cmp_res == STYLE_COMPARE_SAME) {
  4088d2:	f1bb 0f00 	cmp.w	fp, #0
  4088d6:	f000 80a3 	beq.w	408a20 <lv_obj_set_state+0x1c4>
  4088da:	2500      	movs	r5, #0
  4088dc:	f8cd a014 	str.w	sl, [sp, #20]
  4088e0:	e04b      	b.n	40897a <lv_obj_set_state+0x11e>
                    a.early_apply = 0;
  4088e2:	f89d 310e 	ldrb.w	r3, [sp, #270]	; 0x10e
  4088e6:	f36f 0300 	bfc	r3, #0, #1
  4088ea:	f88d 310e 	strb.w	r3, [sp, #270]	; 0x10e
                    lv_anim_start(&a);
  4088ee:	a835      	add	r0, sp, #212	; 0xd4
  4088f0:	4b55      	ldr	r3, [pc, #340]	; (408a48 <lv_obj_set_state+0x1ec>)
  4088f2:	4798      	blx	r3
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  4088f4:	3601      	adds	r6, #1
  4088f6:	b2f6      	uxtb	r6, r6
  4088f8:	2e05      	cmp	r6, #5
  4088fa:	d836      	bhi.n	40896a <lv_obj_set_state+0x10e>
            if(props[i] != 0) {
  4088fc:	ab06      	add	r3, sp, #24
  4088fe:	f833 7016 	ldrh.w	r7, [r3, r6, lsl #1]
  408902:	2f00      	cmp	r7, #0
  408904:	d0f6      	beq.n	4088f4 <lv_obj_set_state+0x98>
                _lv_style_list_add_trans_style(style_list);
  408906:	4650      	mov	r0, sl
  408908:	4b50      	ldr	r3, [pc, #320]	; (408a4c <lv_obj_set_state+0x1f0>)
  40890a:	4798      	blx	r3
                lv_style_trans_t * tr = trans_create(obj, props[i], part, prev_state, new_state);
  40890c:	f8cd 8000 	str.w	r8, [sp]
  408910:	9b05      	ldr	r3, [sp, #20]
  408912:	462a      	mov	r2, r5
  408914:	4639      	mov	r1, r7
  408916:	4620      	mov	r0, r4
  408918:	f8df 9158 	ldr.w	r9, [pc, #344]	; 408a74 <lv_obj_set_state+0x218>
  40891c:	47c8      	blx	r9
                if(tr) {
  40891e:	4681      	mov	r9, r0
  408920:	2800      	cmp	r0, #0
  408922:	d0e7      	beq.n	4088f4 <lv_obj_set_state+0x98>
                    tr->obj = obj;
  408924:	6004      	str	r4, [r0, #0]
                    tr->prop = props[i];
  408926:	8087      	strh	r7, [r0, #4]
                    tr->part = part;
  408928:	7185      	strb	r5, [r0, #6]
                    lv_anim_init(&a);
  40892a:	a835      	add	r0, sp, #212	; 0xd4
  40892c:	4b48      	ldr	r3, [pc, #288]	; (408a50 <lv_obj_set_state+0x1f4>)
  40892e:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  408930:	f8cd 90d4 	str.w	r9, [sp, #212]	; 0xd4
 *                LittelvGL's built-in functions can be used.
 *                E.g. lv_obj_set_x
 */
static inline void lv_anim_set_exec_cb(lv_anim_t * a, lv_anim_exec_xcb_t exec_cb)
{
    a->exec_cb = exec_cb;
  408934:	4b47      	ldr	r3, [pc, #284]	; (408a54 <lv_obj_set_state+0x1f8>)
  408936:	9336      	str	r3, [sp, #216]	; 0xd8
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param start_cb a function call when the animation starts
 */
static inline void lv_anim_set_start_cb(lv_anim_t * a, lv_anim_ready_cb_t start_cb)
{
    a->start_cb = start_cb;
  408938:	4b47      	ldr	r3, [pc, #284]	; (408a58 <lv_obj_set_state+0x1fc>)
  40893a:	9337      	str	r3, [sp, #220]	; 0xdc
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param ready_cb a function call when the animation is ready
 */
static inline void lv_anim_set_ready_cb(lv_anim_t * a, lv_anim_ready_cb_t ready_cb)
{
    a->ready_cb = ready_cb;
  40893c:	4b47      	ldr	r3, [pc, #284]	; (408a5c <lv_obj_set_state+0x200>)
  40893e:	9338      	str	r3, [sp, #224]	; 0xe0
    a->start = start;
  408940:	2300      	movs	r3, #0
  408942:	933b      	str	r3, [sp, #236]	; 0xec
    a->current = start;
  408944:	933c      	str	r3, [sp, #240]	; 0xf0
    a->end   = end;
  408946:	23ff      	movs	r3, #255	; 0xff
  408948:	933d      	str	r3, [sp, #244]	; 0xf4
    a->time     = duration;
  40894a:	9b04      	ldr	r3, [sp, #16]
  40894c:	933e      	str	r3, [sp, #248]	; 0xf8
    a->act_time = -(int32_t)(delay);
  40894e:	9b03      	ldr	r3, [sp, #12]
  408950:	425b      	negs	r3, r3
  408952:	933f      	str	r3, [sp, #252]	; 0xfc
    const uint8_t * s8 = (const uint8_t *)src;
  408954:	9902      	ldr	r1, [sp, #8]
    uint8_t * d8 = (uint8_t *)dst;
  408956:	aa39      	add	r2, sp, #228	; 0xe4
  408958:	2308      	movs	r3, #8
    while(len) {
  40895a:	2b00      	cmp	r3, #0
  40895c:	d0c1      	beq.n	4088e2 <lv_obj_set_state+0x86>
        *d8 = *s8;
  40895e:	f811 0b01 	ldrb.w	r0, [r1], #1
  408962:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408966:	3b01      	subs	r3, #1
  408968:	e7f7      	b.n	40895a <lv_obj_set_state+0xfe>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  40896a:	f1bb 0f02 	cmp.w	fp, #2
  40896e:	d048      	beq.n	408a02 <lv_obj_set_state+0x1a6>
        if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408970:	f1bb 0f01 	cmp.w	fp, #1
  408974:	d04b      	beq.n	408a0e <lv_obj_set_state+0x1b2>
    for(part = 0; part < _LV_OBJ_PART_REAL_LAST; part++) {
  408976:	3501      	adds	r5, #1
  408978:	b2ed      	uxtb	r5, r5
  40897a:	2d3f      	cmp	r5, #63	; 0x3f
  40897c:	d84d      	bhi.n	408a1a <lv_obj_set_state+0x1be>
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
  40897e:	4629      	mov	r1, r5
  408980:	4620      	mov	r0, r4
  408982:	4b2e      	ldr	r3, [pc, #184]	; (408a3c <lv_obj_set_state+0x1e0>)
  408984:	4798      	blx	r3
        if(style_list == NULL) break;   /*No more style lists*/
  408986:	4682      	mov	sl, r0
  408988:	2800      	cmp	r0, #0
  40898a:	d046      	beq.n	408a1a <lv_obj_set_state+0x1be>
        if(style_list->ignore_trans) continue;
  40898c:	7943      	ldrb	r3, [r0, #5]
  40898e:	f013 0f02 	tst.w	r3, #2
  408992:	d1f0      	bne.n	408976 <lv_obj_set_state+0x11a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  408994:	22b0      	movs	r2, #176	; 0xb0
  408996:	4629      	mov	r1, r5
  408998:	4620      	mov	r0, r4
  40899a:	4e31      	ldr	r6, [pc, #196]	; (408a60 <lv_obj_set_state+0x204>)
  40899c:	47b0      	blx	r6
  40899e:	9004      	str	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  4089a0:	22b1      	movs	r2, #177	; 0xb1
  4089a2:	4629      	mov	r1, r5
  4089a4:	4620      	mov	r0, r4
  4089a6:	47b0      	blx	r6
  4089a8:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
  4089aa:	22be      	movs	r2, #190	; 0xbe
  4089ac:	4629      	mov	r1, r5
  4089ae:	4620      	mov	r0, r4
  4089b0:	4b2c      	ldr	r3, [pc, #176]	; (408a64 <lv_obj_set_state+0x208>)
  4089b2:	4798      	blx	r3
  4089b4:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
  4089b6:	22b2      	movs	r2, #178	; 0xb2
  4089b8:	4629      	mov	r1, r5
  4089ba:	4620      	mov	r0, r4
  4089bc:	47b0      	blx	r6
        props[0] = lv_obj_get_style_transition_prop_1(obj, part);
  4089be:	f8ad 0018 	strh.w	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
  4089c2:	22b3      	movs	r2, #179	; 0xb3
  4089c4:	4629      	mov	r1, r5
  4089c6:	4620      	mov	r0, r4
  4089c8:	47b0      	blx	r6
        props[1] = lv_obj_get_style_transition_prop_2(obj, part);
  4089ca:	f8ad 001a 	strh.w	r0, [sp, #26]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  4089ce:	22b4      	movs	r2, #180	; 0xb4
  4089d0:	4629      	mov	r1, r5
  4089d2:	4620      	mov	r0, r4
  4089d4:	47b0      	blx	r6
        props[2] = lv_obj_get_style_transition_prop_3(obj, part);
  4089d6:	f8ad 001c 	strh.w	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  4089da:	22b5      	movs	r2, #181	; 0xb5
  4089dc:	4629      	mov	r1, r5
  4089de:	4620      	mov	r0, r4
  4089e0:	47b0      	blx	r6
        props[3] = lv_obj_get_style_transition_prop_4(obj, part);
  4089e2:	f8ad 001e 	strh.w	r0, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  4089e6:	22b6      	movs	r2, #182	; 0xb6
  4089e8:	4629      	mov	r1, r5
  4089ea:	4620      	mov	r0, r4
  4089ec:	47b0      	blx	r6
        props[4] = lv_obj_get_style_transition_prop_5(obj, part);
  4089ee:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4089f2:	22b7      	movs	r2, #183	; 0xb7
  4089f4:	4629      	mov	r1, r5
  4089f6:	4620      	mov	r0, r4
  4089f8:	47b0      	blx	r6
        props[5] = lv_obj_get_style_transition_prop_6(obj, part);
  4089fa:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        for(i = 0; i < LV_STYLE_TRANS_NUM_MAX; i++) {
  4089fe:	2600      	movs	r6, #0
  408a00:	e77a      	b.n	4088f8 <lv_obj_set_state+0x9c>
        if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
  408a02:	22ff      	movs	r2, #255	; 0xff
  408a04:	4629      	mov	r1, r5
  408a06:	4620      	mov	r0, r4
  408a08:	4b17      	ldr	r3, [pc, #92]	; (408a68 <lv_obj_set_state+0x20c>)
  408a0a:	4798      	blx	r3
  408a0c:	e7b0      	b.n	408970 <lv_obj_set_state+0x114>
            invalidate_style_cache(obj, part, LV_STYLE_PROP_ALL);
  408a0e:	22ff      	movs	r2, #255	; 0xff
  408a10:	4629      	mov	r1, r5
  408a12:	4620      	mov	r0, r4
  408a14:	4b15      	ldr	r3, [pc, #84]	; (408a6c <lv_obj_set_state+0x210>)
  408a16:	4798      	blx	r3
  408a18:	e7ad      	b.n	408976 <lv_obj_set_state+0x11a>
    if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) {
  408a1a:	f1bb 0f01 	cmp.w	fp, #1
  408a1e:	d002      	beq.n	408a26 <lv_obj_set_state+0x1ca>
}
  408a20:	b065      	add	sp, #404	; 0x194
  408a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        lv_obj_invalidate(obj);
  408a26:	4620      	mov	r0, r4
  408a28:	4b11      	ldr	r3, [pc, #68]	; (408a70 <lv_obj_set_state+0x214>)
  408a2a:	4798      	blx	r3
  408a2c:	e7f8      	b.n	408a20 <lv_obj_set_state+0x1c4>
  408a2e:	4770      	bx	lr
  408a30:	004157b9 	.word	0x004157b9
  408a34:	004260c4 	.word	0x004260c4
  408a38:	004157c5 	.word	0x004157c5
  408a3c:	00405755 	.word	0x00405755
  408a40:	00408655 	.word	0x00408655
  408a44:	00404ff5 	.word	0x00404ff5
  408a48:	00414d85 	.word	0x00414d85
  408a4c:	0040a895 	.word	0x0040a895
  408a50:	00414ccd 	.word	0x00414ccd
  408a54:	00407639 	.word	0x00407639
  408a58:	00407791 	.word	0x00407791
  408a5c:	00405891 	.word	0x00405891
  408a60:	00406f8d 	.word	0x00406f8d
  408a64:	00406e85 	.word	0x00406e85
  408a68:	004073a9 	.word	0x004073a9
  408a6c:	0040732d 	.word	0x0040732d
  408a70:	00405aa1 	.word	0x00405aa1
  408a74:	00407805 	.word	0x00407805

00408a78 <lv_obj_add_state>:
{
  408a78:	b538      	push	{r3, r4, r5, lr}
  408a7a:	4605      	mov	r5, r0
  408a7c:	460c      	mov	r4, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408a7e:	4b09      	ldr	r3, [pc, #36]	; (408aa4 <lv_obj_add_state+0x2c>)
  408a80:	4798      	blx	r3
  408a82:	b148      	cbz	r0, 408a98 <lv_obj_add_state+0x20>
    lv_state_t new_state = obj->state | state;
  408a84:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
  408a88:	ea43 0104 	orr.w	r1, r3, r4
    if(obj->state != new_state) {
  408a8c:	428b      	cmp	r3, r1
  408a8e:	d002      	beq.n	408a96 <lv_obj_add_state+0x1e>
        lv_obj_set_state(obj, new_state);
  408a90:	4628      	mov	r0, r5
  408a92:	4b05      	ldr	r3, [pc, #20]	; (408aa8 <lv_obj_add_state+0x30>)
  408a94:	4798      	blx	r3
  408a96:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408a98:	462a      	mov	r2, r5
  408a9a:	2300      	movs	r3, #0
  408a9c:	4803      	ldr	r0, [pc, #12]	; (408aac <lv_obj_add_state+0x34>)
  408a9e:	4904      	ldr	r1, [pc, #16]	; (408ab0 <lv_obj_add_state+0x38>)
  408aa0:	4788      	blx	r1
  408aa2:	e7fe      	b.n	408aa2 <lv_obj_add_state+0x2a>
  408aa4:	004157b9 	.word	0x004157b9
  408aa8:	0040885d 	.word	0x0040885d
  408aac:	004260c4 	.word	0x004260c4
  408ab0:	004157c5 	.word	0x004157c5

00408ab4 <lv_obj_clear_state>:
{
  408ab4:	b538      	push	{r3, r4, r5, lr}
  408ab6:	4604      	mov	r4, r0
  408ab8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408aba:	4b0a      	ldr	r3, [pc, #40]	; (408ae4 <lv_obj_clear_state+0x30>)
  408abc:	4798      	blx	r3
  408abe:	b158      	cbz	r0, 408ad8 <lv_obj_clear_state+0x24>
    lv_state_t new_state = obj->state & (~state);
  408ac0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  408ac4:	b259      	sxtb	r1, r3
  408ac6:	ea21 0105 	bic.w	r1, r1, r5
  408aca:	b2c9      	uxtb	r1, r1
    if(obj->state != new_state) {
  408acc:	428b      	cmp	r3, r1
  408ace:	d002      	beq.n	408ad6 <lv_obj_clear_state+0x22>
        lv_obj_set_state(obj, new_state);
  408ad0:	4620      	mov	r0, r4
  408ad2:	4b05      	ldr	r3, [pc, #20]	; (408ae8 <lv_obj_clear_state+0x34>)
  408ad4:	4798      	blx	r3
  408ad6:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);
  408ad8:	4622      	mov	r2, r4
  408ada:	2300      	movs	r3, #0
  408adc:	4803      	ldr	r0, [pc, #12]	; (408aec <lv_obj_clear_state+0x38>)
  408ade:	4904      	ldr	r1, [pc, #16]	; (408af0 <lv_obj_clear_state+0x3c>)
  408ae0:	4788      	blx	r1
  408ae2:	e7fe      	b.n	408ae2 <lv_obj_clear_state+0x2e>
  408ae4:	004157b9 	.word	0x004157b9
  408ae8:	0040885d 	.word	0x0040885d
  408aec:	004260c4 	.word	0x004260c4
  408af0:	004157c5 	.word	0x004157c5

00408af4 <lv_obj_get_draw_rect_ext_pad_size>:
{
  408af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408af8:	b089      	sub	sp, #36	; 0x24
  408afa:	4604      	mov	r4, r0
  408afc:	460e      	mov	r6, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  408afe:	2250      	movs	r2, #80	; 0x50
  408b00:	4b78      	ldr	r3, [pc, #480]	; (408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408b02:	4798      	blx	r3
    if(sh_width) {
  408b04:	4607      	mov	r7, r0
  408b06:	bb68      	cbnz	r0, 408b64 <lv_obj_get_draw_rect_ext_pad_size+0x70>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
  408b08:	227f      	movs	r2, #127	; 0x7f
  408b0a:	4631      	mov	r1, r6
  408b0c:	4620      	mov	r0, r4
  408b0e:	4b76      	ldr	r3, [pc, #472]	; (408ce8 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408b10:	4798      	blx	r3
    if(value_str) {
  408b12:	4605      	mov	r5, r0
  408b14:	b130      	cbz	r0, 408b24 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
  408b16:	227c      	movs	r2, #124	; 0x7c
  408b18:	4631      	mov	r1, r6
  408b1a:	4620      	mov	r0, r4
  408b1c:	4b73      	ldr	r3, [pc, #460]	; (408cec <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408b1e:	4798      	blx	r3
        if(value_opa > LV_OPA_MIN) {
  408b20:	2802      	cmp	r0, #2
  408b22:	d851      	bhi.n	408bc8 <lv_obj_get_draw_rect_ext_pad_size+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  408b24:	2240      	movs	r2, #64	; 0x40
  408b26:	4631      	mov	r1, r6
  408b28:	4620      	mov	r0, r4
  408b2a:	4b6e      	ldr	r3, [pc, #440]	; (408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408b2c:	4798      	blx	r3
    if(outline_width) {
  408b2e:	4605      	mov	r5, r0
  408b30:	2800      	cmp	r0, #0
  408b32:	f040 80c4 	bne.w	408cbe <lv_obj_get_draw_rect_ext_pad_size+0x1ca>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  408b36:	2204      	movs	r2, #4
  408b38:	4631      	mov	r1, r6
  408b3a:	4620      	mov	r0, r4
  408b3c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408b40:	47c0      	blx	r8
  408b42:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  408b44:	2205      	movs	r2, #5
  408b46:	4631      	mov	r1, r6
  408b48:	4620      	mov	r0, r4
  408b4a:	47c0      	blx	r8
    lv_coord_t wh = LV_MATH_MAX(w, h);
  408b4c:	42a8      	cmp	r0, r5
  408b4e:	bfb8      	it	lt
  408b50:	4628      	movlt	r0, r5
  408b52:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
  408b54:	2800      	cmp	r0, #0
  408b56:	dd01      	ble.n	408b5c <lv_obj_get_draw_rect_ext_pad_size+0x68>
  408b58:	4438      	add	r0, r7
  408b5a:	b207      	sxth	r7, r0
}
  408b5c:	4638      	mov	r0, r7
  408b5e:	b009      	add	sp, #36	; 0x24
  408b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
  408b64:	225c      	movs	r2, #92	; 0x5c
  408b66:	4631      	mov	r1, r6
  408b68:	4620      	mov	r0, r4
  408b6a:	4b60      	ldr	r3, [pc, #384]	; (408cec <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408b6c:	4798      	blx	r3
        if(sh_opa > LV_OPA_MIN) {
  408b6e:	2802      	cmp	r0, #2
  408b70:	d801      	bhi.n	408b76 <lv_obj_get_draw_rect_ext_pad_size+0x82>
    lv_coord_t s = 0;
  408b72:	2700      	movs	r7, #0
  408b74:	e7c8      	b.n	408b08 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408b76:	463b      	mov	r3, r7
  408b78:	2f00      	cmp	r7, #0
  408b7a:	db23      	blt.n	408bc4 <lv_obj_get_draw_rect_ext_pad_size+0xd0>
  408b7c:	f343 074f 	sbfx	r7, r3, #1, #16
            sh_width++;
  408b80:	3701      	adds	r7, #1
  408b82:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  408b84:	2253      	movs	r2, #83	; 0x53
  408b86:	4631      	mov	r1, r6
  408b88:	4620      	mov	r0, r4
  408b8a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408b8e:	47c0      	blx	r8
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
  408b90:	fa17 f780 	uxtah	r7, r7, r0
  408b94:	b2bf      	uxth	r7, r7
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
  408b96:	2251      	movs	r2, #81	; 0x51
  408b98:	4631      	mov	r1, r6
  408b9a:	4620      	mov	r0, r4
  408b9c:	47c0      	blx	r8
  408b9e:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
  408ba0:	2252      	movs	r2, #82	; 0x52
  408ba2:	4631      	mov	r1, r6
  408ba4:	4620      	mov	r0, r4
  408ba6:	47c0      	blx	r8
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
  408ba8:	2800      	cmp	r0, #0
  408baa:	bfb8      	it	lt
  408bac:	4240      	neglt	r0, r0
  408bae:	2d00      	cmp	r5, #0
  408bb0:	bfb8      	it	lt
  408bb2:	426d      	neglt	r5, r5
  408bb4:	42a8      	cmp	r0, r5
  408bb6:	bfac      	ite	ge
  408bb8:	183f      	addge	r7, r7, r0
  408bba:	197f      	addlt	r7, r7, r5
  408bbc:	b238      	sxth	r0, r7
            s = LV_MATH_MAX(s, sh_width);
  408bbe:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
  408bc2:	e7a1      	b.n	408b08 <lv_obj_get_draw_rect_ext_pad_size+0x14>
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
  408bc4:	1c7b      	adds	r3, r7, #1
  408bc6:	e7d9      	b.n	408b7c <lv_obj_get_draw_rect_ext_pad_size+0x88>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
  408bc8:	2270      	movs	r2, #112	; 0x70
  408bca:	4631      	mov	r1, r6
  408bcc:	4620      	mov	r0, r4
  408bce:	f8df 8114 	ldr.w	r8, [pc, #276]	; 408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>
  408bd2:	47c0      	blx	r8
  408bd4:	4682      	mov	sl, r0
  408bd6:	2270      	movs	r2, #112	; 0x70
  408bd8:	4631      	mov	r1, r6
  408bda:	4620      	mov	r0, r4
  408bdc:	47c0      	blx	r8
  408bde:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  408be0:	227e      	movs	r2, #126	; 0x7e
  408be2:	4631      	mov	r1, r6
  408be4:	4620      	mov	r0, r4
  408be6:	4b40      	ldr	r3, [pc, #256]	; (408ce8 <lv_obj_get_draw_rect_ext_pad_size+0x1f4>)
  408be8:	4798      	blx	r3
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
  408bea:	f04f 0900 	mov.w	r9, #0
  408bee:	f8cd 9008 	str.w	r9, [sp, #8]
  408bf2:	f647 4318 	movw	r3, #31768	; 0x7c18
  408bf6:	9301      	str	r3, [sp, #4]
  408bf8:	f8cd b000 	str.w	fp, [sp]
  408bfc:	4653      	mov	r3, sl
  408bfe:	4602      	mov	r2, r0
  408c00:	4629      	mov	r1, r5
  408c02:	a804      	add	r0, sp, #16
  408c04:	4d3a      	ldr	r5, [pc, #232]	; (408cf0 <lv_obj_get_draw_rect_ext_pad_size+0x1fc>)
  408c06:	47a8      	blx	r5
            value_area.x1 = 0;
  408c08:	f8ad 9018 	strh.w	r9, [sp, #24]
            value_area.y1 = 0;
  408c0c:	f8ad 901a 	strh.w	r9, [sp, #26]
            value_area.x2 = txt_size.x - 1;
  408c10:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  408c14:	3b01      	subs	r3, #1
  408c16:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
  408c1a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  408c1e:	3b01      	subs	r3, #1
  408c20:	f8ad 301e 	strh.w	r3, [sp, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
  408c24:	2275      	movs	r2, #117	; 0x75
  408c26:	4631      	mov	r1, r6
  408c28:	4620      	mov	r0, r4
  408c2a:	47c0      	blx	r8
  408c2c:	fa5f f980 	uxtb.w	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
  408c30:	2273      	movs	r2, #115	; 0x73
  408c32:	4631      	mov	r1, r6
  408c34:	4620      	mov	r0, r4
  408c36:	47c0      	blx	r8
  408c38:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
  408c3a:	2274      	movs	r2, #116	; 0x74
  408c3c:	4631      	mov	r1, r6
  408c3e:	4620      	mov	r0, r4
  408c40:	47c0      	blx	r8
  408c42:	4680      	mov	r8, r0
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
  408c44:	ab05      	add	r3, sp, #20
  408c46:	464a      	mov	r2, r9
  408c48:	a906      	add	r1, sp, #24
  408c4a:	f104 0010 	add.w	r0, r4, #16
  408c4e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 408cf4 <lv_obj_get_draw_rect_ext_pad_size+0x200>
  408c52:	47c8      	blx	r9
            value_area.x1 += p_align.x + xofs;
  408c54:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  408c58:	442a      	add	r2, r5
  408c5a:	b292      	uxth	r2, r2
  408c5c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  408c60:	4410      	add	r0, r2
  408c62:	b205      	sxth	r5, r0
            value_area.y1 += p_align.y + yofs;
  408c64:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  408c68:	4443      	add	r3, r8
  408c6a:	b29b      	uxth	r3, r3
  408c6c:	f8bd 101a 	ldrh.w	r1, [sp, #26]
  408c70:	4419      	add	r1, r3
  408c72:	b209      	sxth	r1, r1
            value_area.x2 += p_align.x + xofs;
  408c74:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  408c78:	4402      	add	r2, r0
  408c7a:	b212      	sxth	r2, r2
            value_area.y2 += p_align.y + yofs;
  408c7c:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  408c80:	4403      	add	r3, r0
  408c82:	b21b      	sxth	r3, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
  408c84:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
  408c88:	1b40      	subs	r0, r0, r5
  408c8a:	42b8      	cmp	r0, r7
  408c8c:	bfb8      	it	lt
  408c8e:	4638      	movlt	r0, r7
  408c90:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
  408c92:	f9b4 5012 	ldrsh.w	r5, [r4, #18]
  408c96:	1a69      	subs	r1, r5, r1
  408c98:	4288      	cmp	r0, r1
  408c9a:	bfb8      	it	lt
  408c9c:	4608      	movlt	r0, r1
  408c9e:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
  408ca0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  408ca4:	1a52      	subs	r2, r2, r1
  408ca6:	4290      	cmp	r0, r2
  408ca8:	bfb8      	it	lt
  408caa:	4610      	movlt	r0, r2
  408cac:	b200      	sxth	r0, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
  408cae:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
  408cb2:	1bdf      	subs	r7, r3, r7
  408cb4:	42b8      	cmp	r0, r7
  408cb6:	bfb8      	it	lt
  408cb8:	4638      	movlt	r0, r7
  408cba:	b207      	sxth	r7, r0
  408cbc:	e732      	b.n	408b24 <lv_obj_get_draw_rect_ext_pad_size+0x30>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  408cbe:	224c      	movs	r2, #76	; 0x4c
  408cc0:	4631      	mov	r1, r6
  408cc2:	4620      	mov	r0, r4
  408cc4:	4b09      	ldr	r3, [pc, #36]	; (408cec <lv_obj_get_draw_rect_ext_pad_size+0x1f8>)
  408cc6:	4798      	blx	r3
        if(outline_opa > LV_OPA_MIN) {
  408cc8:	2802      	cmp	r0, #2
  408cca:	f67f af34 	bls.w	408b36 <lv_obj_get_draw_rect_ext_pad_size+0x42>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  408cce:	2241      	movs	r2, #65	; 0x41
  408cd0:	4631      	mov	r1, r6
  408cd2:	4620      	mov	r0, r4
  408cd4:	4b03      	ldr	r3, [pc, #12]	; (408ce4 <lv_obj_get_draw_rect_ext_pad_size+0x1f0>)
  408cd6:	4798      	blx	r3
            s = LV_MATH_MAX(s, outline_pad + outline_width);
  408cd8:	4428      	add	r0, r5
  408cda:	42b8      	cmp	r0, r7
  408cdc:	bfb8      	it	lt
  408cde:	4638      	movlt	r0, r7
  408ce0:	b207      	sxth	r7, r0
  408ce2:	e728      	b.n	408b36 <lv_obj_get_draw_rect_ext_pad_size+0x42>
  408ce4:	00406f8d 	.word	0x00406f8d
  408ce8:	00406e85 	.word	0x00406e85
  408cec:	00406a01 	.word	0x00406a01
  408cf0:	00416e21 	.word	0x00416e21
  408cf4:	00415231 	.word	0x00415231

00408cf8 <lv_obj_get_focused_obj>:
{
  408cf8:	b510      	push	{r4, lr}
    if(obj == NULL) return NULL;
  408cfa:	4604      	mov	r4, r0
  408cfc:	b928      	cbnz	r0, 408d0a <lv_obj_get_focused_obj+0x12>
  408cfe:	2000      	movs	r0, #0
  408d00:	bd10      	pop	{r4, pc}
        focus_obj = lv_obj_get_parent(focus_obj);
  408d02:	4620      	mov	r0, r4
  408d04:	4b06      	ldr	r3, [pc, #24]	; (408d20 <lv_obj_get_focused_obj+0x28>)
  408d06:	4798      	blx	r3
  408d08:	4604      	mov	r4, r0
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
  408d0a:	4620      	mov	r0, r4
  408d0c:	4b05      	ldr	r3, [pc, #20]	; (408d24 <lv_obj_get_focused_obj+0x2c>)
  408d0e:	4798      	blx	r3
  408d10:	b118      	cbz	r0, 408d1a <lv_obj_get_focused_obj+0x22>
  408d12:	2c00      	cmp	r4, #0
  408d14:	d1f5      	bne.n	408d02 <lv_obj_get_focused_obj+0xa>
    return (lv_obj_t *)focus_obj;
  408d16:	4620      	mov	r0, r4
  408d18:	bd10      	pop	{r4, pc}
  408d1a:	4620      	mov	r0, r4
}
  408d1c:	bd10      	pop	{r4, pc}
  408d1e:	bf00      	nop
  408d20:	004054f5 	.word	0x004054f5
  408d24:	00406329 	.word	0x00406329

00408d28 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
  408d28:	2908      	cmp	r1, #8
  408d2a:	d01a      	beq.n	408d62 <lv_obj_signal+0x3a>
{
  408d2c:	b510      	push	{r4, lr}
  408d2e:	4604      	mov	r4, r0
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408d30:	2907      	cmp	r1, #7
  408d32:	d020      	beq.n	408d76 <lv_obj_signal+0x4e>
    if(sign == LV_SIGNAL_CHILD_CHG) {
  408d34:	2901      	cmp	r1, #1
  408d36:	d023      	beq.n	408d80 <lv_obj_signal+0x58>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  408d38:	2906      	cmp	r1, #6
  408d3a:	d027      	beq.n	408d8c <lv_obj_signal+0x64>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  408d3c:	2903      	cmp	r1, #3
  408d3e:	d030      	beq.n	408da2 <lv_obj_signal+0x7a>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  408d40:	2904      	cmp	r1, #4
  408d42:	d039      	beq.n	408db8 <lv_obj_signal+0x90>
    else if(sign == LV_SIGNAL_PRESSED) {
  408d44:	290b      	cmp	r1, #11
  408d46:	d03b      	beq.n	408dc0 <lv_obj_signal+0x98>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
  408d48:	f1a1 030d 	sub.w	r3, r1, #13
  408d4c:	b2db      	uxtb	r3, r3
  408d4e:	2b01      	cmp	r3, #1
  408d50:	d93b      	bls.n	408dca <lv_obj_signal+0xa2>
    else if(sign == LV_SIGNAL_FOCUS) {
  408d52:	2916      	cmp	r1, #22
  408d54:	d03e      	beq.n	408dd4 <lv_obj_signal+0xac>
    else if(sign == LV_SIGNAL_DEFOCUS) {
  408d56:	2917      	cmp	r1, #23
  408d58:	d056      	beq.n	408e08 <lv_obj_signal+0xe0>
    else if(sign == LV_SIGNAL_CLEANUP) {
  408d5a:	2900      	cmp	r1, #0
  408d5c:	d05b      	beq.n	408e16 <lv_obj_signal+0xee>
    lv_res_t res = LV_RES_OK;
  408d5e:	2001      	movs	r0, #1
}
  408d60:	bd10      	pop	{r4, pc}
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
  408d62:	7813      	ldrb	r3, [r2, #0]
  408d64:	b91b      	cbnz	r3, 408d6e <lv_obj_signal+0x46>
  408d66:	3028      	adds	r0, #40	; 0x28
  408d68:	6050      	str	r0, [r2, #4]
        return LV_RES_OK;
  408d6a:	2001      	movs	r0, #1
  408d6c:	4770      	bx	lr
        else info->result = NULL;
  408d6e:	2300      	movs	r3, #0
  408d70:	6053      	str	r3, [r2, #4]
        return LV_RES_OK;
  408d72:	2001      	movs	r0, #1
  408d74:	4770      	bx	lr
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  408d76:	492b      	ldr	r1, [pc, #172]	; (408e24 <lv_obj_signal+0xfc>)
  408d78:	4610      	mov	r0, r2
  408d7a:	4b2b      	ldr	r3, [pc, #172]	; (408e28 <lv_obj_signal+0x100>)
  408d7c:	4798      	blx	r3
  408d7e:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  408d80:	4b2a      	ldr	r3, [pc, #168]	; (408e2c <lv_obj_signal+0x104>)
  408d82:	4798      	blx	r3
  408d84:	2800      	cmp	r0, #0
  408d86:	d14a      	bne.n	408e1e <lv_obj_signal+0xf6>
    lv_res_t res = LV_RES_OK;
  408d88:	2001      	movs	r0, #1
  408d8a:	bd10      	pop	{r4, pc}
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
  408d8c:	2100      	movs	r1, #0
  408d8e:	4b28      	ldr	r3, [pc, #160]	; (408e30 <lv_obj_signal+0x108>)
  408d90:	4798      	blx	r3
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
  408d92:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  408d96:	4298      	cmp	r0, r3
  408d98:	bfb8      	it	lt
  408d9a:	4618      	movlt	r0, r3
  408d9c:	8660      	strh	r0, [r4, #50]	; 0x32
    lv_res_t res = LV_RES_OK;
  408d9e:	2001      	movs	r0, #1
  408da0:	bd10      	pop	{r4, pc}
        if(obj->realign.auto_realign) {
  408da2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
  408da6:	f013 0f01 	tst.w	r3, #1
  408daa:	d101      	bne.n	408db0 <lv_obj_signal+0x88>
    lv_res_t res = LV_RES_OK;
  408dac:	2001      	movs	r0, #1
  408dae:	bd10      	pop	{r4, pc}
            lv_obj_realign(obj);
  408db0:	4b20      	ldr	r3, [pc, #128]	; (408e34 <lv_obj_signal+0x10c>)
  408db2:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408db4:	2001      	movs	r0, #1
  408db6:	bd10      	pop	{r4, pc}
        lv_obj_refresh_ext_draw_pad(obj);
  408db8:	4b1f      	ldr	r3, [pc, #124]	; (408e38 <lv_obj_signal+0x110>)
  408dba:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408dbc:	2001      	movs	r0, #1
  408dbe:	bd10      	pop	{r4, pc}
        lv_obj_add_state(obj, LV_STATE_PRESSED);
  408dc0:	2110      	movs	r1, #16
  408dc2:	4b1e      	ldr	r3, [pc, #120]	; (408e3c <lv_obj_signal+0x114>)
  408dc4:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408dc6:	2001      	movs	r0, #1
  408dc8:	bd10      	pop	{r4, pc}
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
  408dca:	2110      	movs	r1, #16
  408dcc:	4b1c      	ldr	r3, [pc, #112]	; (408e40 <lv_obj_signal+0x118>)
  408dce:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408dd0:	2001      	movs	r0, #1
  408dd2:	bd10      	pop	{r4, pc}
        editing = lv_group_get_editing(lv_obj_get_group(obj));
  408dd4:	4b1b      	ldr	r3, [pc, #108]	; (408e44 <lv_obj_signal+0x11c>)
  408dd6:	4798      	blx	r3
  408dd8:	4b1b      	ldr	r3, [pc, #108]	; (408e48 <lv_obj_signal+0x120>)
  408dda:	4798      	blx	r3
        if(editing) {
  408ddc:	b138      	cbz	r0, 408dee <lv_obj_signal+0xc6>
            obj = lv_obj_get_focused_obj(obj);
  408dde:	4620      	mov	r0, r4
  408de0:	4b1a      	ldr	r3, [pc, #104]	; (408e4c <lv_obj_signal+0x124>)
  408de2:	4798      	blx	r3
            lv_obj_add_state(obj, state);
  408de4:	2106      	movs	r1, #6
  408de6:	4b15      	ldr	r3, [pc, #84]	; (408e3c <lv_obj_signal+0x114>)
  408de8:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408dea:	2001      	movs	r0, #1
  408dec:	bd10      	pop	{r4, pc}
            obj = lv_obj_get_focused_obj(obj);
  408dee:	4620      	mov	r0, r4
  408df0:	4b16      	ldr	r3, [pc, #88]	; (408e4c <lv_obj_signal+0x124>)
  408df2:	4798      	blx	r3
  408df4:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
  408df6:	2102      	movs	r1, #2
  408df8:	4b10      	ldr	r3, [pc, #64]	; (408e3c <lv_obj_signal+0x114>)
  408dfa:	4798      	blx	r3
            lv_obj_clear_state(obj, LV_STATE_EDITED);
  408dfc:	2104      	movs	r1, #4
  408dfe:	4620      	mov	r0, r4
  408e00:	4b0f      	ldr	r3, [pc, #60]	; (408e40 <lv_obj_signal+0x118>)
  408e02:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408e04:	2001      	movs	r0, #1
  408e06:	bd10      	pop	{r4, pc}
        obj = lv_obj_get_focused_obj(obj);
  408e08:	4b10      	ldr	r3, [pc, #64]	; (408e4c <lv_obj_signal+0x124>)
  408e0a:	4798      	blx	r3
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
  408e0c:	2106      	movs	r1, #6
  408e0e:	4b0c      	ldr	r3, [pc, #48]	; (408e40 <lv_obj_signal+0x118>)
  408e10:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408e12:	2001      	movs	r0, #1
  408e14:	bd10      	pop	{r4, pc}
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  408e16:	4b0e      	ldr	r3, [pc, #56]	; (408e50 <lv_obj_signal+0x128>)
  408e18:	4798      	blx	r3
    lv_res_t res = LV_RES_OK;
  408e1a:	2001      	movs	r0, #1
  408e1c:	bd10      	pop	{r4, pc}
        if(lv_obj_is_protected(obj, LV_PROTECT_CHILD_CHG) != false) res = LV_RES_INV;
  408e1e:	2000      	movs	r0, #0
  408e20:	bd10      	pop	{r4, pc}
  408e22:	bf00      	nop
  408e24:	004260d4 	.word	0x004260d4
  408e28:	00407de9 	.word	0x00407de9
  408e2c:	004068f5 	.word	0x004068f5
  408e30:	00408af5 	.word	0x00408af5
  408e34:	004061bd 	.word	0x004061bd
  408e38:	004054c5 	.word	0x004054c5
  408e3c:	00408a79 	.word	0x00408a79
  408e40:	00408ab5 	.word	0x00408ab5
  408e44:	00407b85 	.word	0x00407b85
  408e48:	00403681 	.word	0x00403681
  408e4c:	00408cf9 	.word	0x00408cf9
  408e50:	0040581d 	.word	0x0040581d

00408e54 <lv_refr_join_area>:

/**
 * Join the areas which has got common parts
 */
static void lv_refr_join_area(void)
{
  408e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  408e58:	b082      	sub	sp, #8
    uint32_t join_from;
    uint32_t join_in;
    lv_area_t joined_area;
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  408e5a:	2500      	movs	r5, #0
  408e5c:	e057      	b.n	408f0e <lv_refr_join_area+0xba>
        *d8 = *s8;
  408e5e:	f811 0b01 	ldrb.w	r0, [r1], #1
  408e62:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  408e66:	3b01      	subs	r3, #1
    while(len) {
  408e68:	2b00      	cmp	r3, #0
  408e6a:	d1f8      	bne.n	408e5e <lv_refr_join_area+0xa>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);

                /*Mark 'join_form' is joined into 'join_in'*/
                disp_refr->inv_area_joined[join_from] = 1;
  408e6c:	4426      	add	r6, r4
  408e6e:	2301      	movs	r3, #1
  408e70:	f886 3162 	strb.w	r3, [r6, #354]	; 0x162
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
  408e74:	3401      	adds	r4, #1
  408e76:	4b2f      	ldr	r3, [pc, #188]	; (408f34 <lv_refr_join_area+0xe0>)
  408e78:	6819      	ldr	r1, [r3, #0]
  408e7a:	f8b1 3182 	ldrh.w	r3, [r1, #386]	; 0x182
  408e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
  408e82:	429c      	cmp	r4, r3
  408e84:	d242      	bcs.n	408f0c <lv_refr_join_area+0xb8>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
  408e86:	190b      	adds	r3, r1, r4
  408e88:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408e8c:	2b00      	cmp	r3, #0
  408e8e:	d1f1      	bne.n	408e74 <lv_refr_join_area+0x20>
  408e90:	42ac      	cmp	r4, r5
  408e92:	d0ef      	beq.n	408e74 <lv_refr_join_area+0x20>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
  408e94:	f105 000c 	add.w	r0, r5, #12
  408e98:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
  408e9c:	f104 030c 	add.w	r3, r4, #12
  408ea0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  408ea4:	3102      	adds	r1, #2
  408ea6:	3002      	adds	r0, #2
  408ea8:	4b23      	ldr	r3, [pc, #140]	; (408f38 <lv_refr_join_area+0xe4>)
  408eaa:	4798      	blx	r3
  408eac:	2800      	cmp	r0, #0
  408eae:	d0e1      	beq.n	408e74 <lv_refr_join_area+0x20>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
  408eb0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 408f34 <lv_refr_join_area+0xe0>
  408eb4:	f8d8 2000 	ldr.w	r2, [r8]
  408eb8:	f105 070c 	add.w	r7, r5, #12
  408ebc:	00ff      	lsls	r7, r7, #3
  408ebe:	19d1      	adds	r1, r2, r7
  408ec0:	f104 060c 	add.w	r6, r4, #12
  408ec4:	00f6      	lsls	r6, r6, #3
  408ec6:	4432      	add	r2, r6
  408ec8:	3202      	adds	r2, #2
  408eca:	3102      	adds	r1, #2
  408ecc:	4668      	mov	r0, sp
  408ece:	4b1b      	ldr	r3, [pc, #108]	; (408f3c <lv_refr_join_area+0xe8>)
  408ed0:	4798      	blx	r3
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408ed2:	4668      	mov	r0, sp
  408ed4:	f8df a068 	ldr.w	sl, [pc, #104]	; 408f40 <lv_refr_join_area+0xec>
  408ed8:	47d0      	blx	sl
  408eda:	4681      	mov	r9, r0
  408edc:	f8d8 0000 	ldr.w	r0, [r8]
  408ee0:	4438      	add	r0, r7
  408ee2:	3002      	adds	r0, #2
  408ee4:	47d0      	blx	sl
  408ee6:	4607      	mov	r7, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
  408ee8:	f8d8 0000 	ldr.w	r0, [r8]
  408eec:	4430      	add	r0, r6
  408eee:	3002      	adds	r0, #2
  408ef0:	47d0      	blx	sl
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
  408ef2:	4438      	add	r0, r7
  408ef4:	4581      	cmp	r9, r0
  408ef6:	d2bd      	bcs.n	408e74 <lv_refr_join_area+0x20>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
  408ef8:	f8d8 6000 	ldr.w	r6, [r8]
  408efc:	f105 020c 	add.w	r2, r5, #12
  408f00:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
  408f04:	3202      	adds	r2, #2
    const uint8_t * s8 = (const uint8_t *)src;
  408f06:	4669      	mov	r1, sp
  408f08:	2308      	movs	r3, #8
  408f0a:	e7ad      	b.n	408e68 <lv_refr_join_area+0x14>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
  408f0c:	3501      	adds	r5, #1
  408f0e:	4b09      	ldr	r3, [pc, #36]	; (408f34 <lv_refr_join_area+0xe0>)
  408f10:	681b      	ldr	r3, [r3, #0]
  408f12:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  408f16:	f3c2 0209 	ubfx	r2, r2, #0, #10
  408f1a:	4295      	cmp	r5, r2
  408f1c:	d206      	bcs.n	408f2c <lv_refr_join_area+0xd8>
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
  408f1e:	442b      	add	r3, r5
  408f20:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  408f24:	2b00      	cmp	r3, #0
  408f26:	d1f1      	bne.n	408f0c <lv_refr_join_area+0xb8>
  408f28:	2400      	movs	r4, #0
  408f2a:	e7a4      	b.n	408e76 <lv_refr_join_area+0x22>
            }
        }
    }
}
  408f2c:	b002      	add	sp, #8
  408f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  408f32:	bf00      	nop
  408f34:	2040c3a0 	.word	0x2040c3a0
  408f38:	00415125 	.word	0x00415125
  408f3c:	00414f4b 	.word	0x00414f4b
  408f40:	00414ed7 	.word	0x00414ed7

00408f44 <lv_refr_get_top_obj>:
 * @param area_p pointer to an area
 * @param obj the first object to start the searching (typically a screen)
 * @return
 */
static lv_obj_t * lv_refr_get_top_obj(const lv_area_t * area_p, lv_obj_t * obj)
{
  408f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408f48:	4606      	mov	r6, r0
  408f4a:	4688      	mov	r8, r1
    lv_obj_t * found_p = NULL;

    /*If this object is fully cover the draw area check the children too */
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
  408f4c:	2200      	movs	r2, #0
  408f4e:	3110      	adds	r1, #16
  408f50:	4b20      	ldr	r3, [pc, #128]	; (408fd4 <lv_refr_get_top_obj+0x90>)
  408f52:	4798      	blx	r3
  408f54:	b3b8      	cbz	r0, 408fc6 <lv_refr_get_top_obj+0x82>
  408f56:	f898 3034 	ldrb.w	r3, [r8, #52]	; 0x34
  408f5a:	f013 0f10 	tst.w	r3, #16
  408f5e:	d134      	bne.n	408fca <lv_refr_get_top_obj+0x86>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
  408f60:	f8d8 3020 	ldr.w	r3, [r8, #32]
  408f64:	2202      	movs	r2, #2
  408f66:	4631      	mov	r1, r6
  408f68:	4640      	mov	r0, r8
  408f6a:	4798      	blx	r3
  408f6c:	4681      	mov	r9, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408f6e:	2803      	cmp	r0, #3
  408f70:	d02d      	beq.n	408fce <lv_refr_get_top_obj+0x8a>

#if LV_USE_OPA_SCALE
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408f72:	2801      	cmp	r0, #1
  408f74:	d013      	beq.n	408f9e <lv_refr_get_top_obj+0x5a>
            design_res = LV_DESIGN_RES_NOT_COVER;
        }
#endif

        lv_obj_t * i;
        _LV_LL_READ(obj->child_ll, i) {
  408f76:	f108 0704 	add.w	r7, r8, #4
  408f7a:	4638      	mov	r0, r7
  408f7c:	4b16      	ldr	r3, [pc, #88]	; (408fd8 <lv_refr_get_top_obj+0x94>)
  408f7e:	4798      	blx	r3
  408f80:	4604      	mov	r4, r0
    lv_obj_t * found_p = NULL;
  408f82:	2500      	movs	r5, #0
        _LV_LL_READ(obj->child_ll, i) {
  408f84:	b1b4      	cbz	r4, 408fb4 <lv_refr_get_top_obj+0x70>
            found_p = lv_refr_get_top_obj(area_p, i);
  408f86:	4621      	mov	r1, r4
  408f88:	4630      	mov	r0, r6
  408f8a:	f7ff ffdb 	bl	408f44 <lv_refr_get_top_obj>

            /*If a children is ok then break*/
            if(found_p != NULL) {
  408f8e:	4605      	mov	r5, r0
  408f90:	b980      	cbnz	r0, 408fb4 <lv_refr_get_top_obj+0x70>
        _LV_LL_READ(obj->child_ll, i) {
  408f92:	4621      	mov	r1, r4
  408f94:	4638      	mov	r0, r7
  408f96:	4b11      	ldr	r3, [pc, #68]	; (408fdc <lv_refr_get_top_obj+0x98>)
  408f98:	4798      	blx	r3
  408f9a:	4604      	mov	r4, r0
  408f9c:	e7f2      	b.n	408f84 <lv_refr_get_top_obj+0x40>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
  408f9e:	f248 020c 	movw	r2, #32780	; 0x800c
  408fa2:	2100      	movs	r1, #0
  408fa4:	4640      	mov	r0, r8
  408fa6:	4b0e      	ldr	r3, [pc, #56]	; (408fe0 <lv_refr_get_top_obj+0x9c>)
  408fa8:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_COVER && lv_obj_get_style_opa_scale(obj, LV_OBJ_PART_MAIN) != LV_OPA_COVER) {
  408faa:	28ff      	cmp	r0, #255	; 0xff
  408fac:	d0e3      	beq.n	408f76 <lv_refr_get_top_obj+0x32>
            design_res = LV_DESIGN_RES_NOT_COVER;
  408fae:	f04f 0902 	mov.w	r9, #2
  408fb2:	e7e0      	b.n	408f76 <lv_refr_get_top_obj+0x32>
                break;
            }
        }

        /*If no better children use this object*/
        if(found_p == NULL) {
  408fb4:	b115      	cbz	r5, 408fbc <lv_refr_get_top_obj+0x78>
            }
        }
    }

    return found_p;
}
  408fb6:	4628      	mov	r0, r5
  408fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if(design_res == LV_DESIGN_RES_COVER) {
  408fbc:	f1b9 0f01 	cmp.w	r9, #1
  408fc0:	d1f9      	bne.n	408fb6 <lv_refr_get_top_obj+0x72>
                found_p = obj;
  408fc2:	4645      	mov	r5, r8
  408fc4:	e7f7      	b.n	408fb6 <lv_refr_get_top_obj+0x72>
    lv_obj_t * found_p = NULL;
  408fc6:	2500      	movs	r5, #0
  408fc8:	e7f5      	b.n	408fb6 <lv_refr_get_top_obj+0x72>
  408fca:	2500      	movs	r5, #0
  408fcc:	e7f3      	b.n	408fb6 <lv_refr_get_top_obj+0x72>
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
  408fce:	2500      	movs	r5, #0
  408fd0:	e7f1      	b.n	408fb6 <lv_refr_get_top_obj+0x72>
  408fd2:	bf00      	nop
  408fd4:	00415169 	.word	0x00415169
  408fd8:	00415ac9 	.word	0x00415ac9
  408fdc:	00415add 	.word	0x00415add
  408fe0:	00406a01 	.word	0x00406a01

00408fe4 <lv_refr_obj>:
 * @param mask_ori_p pointer to an area, the objects will be drawn only here
 */
static void lv_refr_obj(lv_obj_t * obj, const lv_area_t * mask_ori_p)
{
    /*Do not refresh hidden objects*/
    if(obj->hidden != 0) return;
  408fe4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
  408fe8:	f013 0f10 	tst.w	r3, #16
  408fec:	d000      	beq.n	408ff0 <lv_refr_obj+0xc>
  408fee:	4770      	bx	lr
{
  408ff0:	b570      	push	{r4, r5, r6, lr}
  408ff2:	b08a      	sub	sp, #40	; 0x28
  408ff4:	460e      	mov	r6, r1
  408ff6:	4605      	mov	r5, r0
    /* Truncate the original mask to the coordinates of the parent
     * because the parent and its children are visible only here */
    lv_area_t obj_mask;
    lv_area_t obj_ext_mask;
    lv_area_t obj_area;
    lv_coord_t ext_size = obj->ext_draw_pad;
  408ff8:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
    lv_obj_get_coords(obj, &obj_area);
  408ffc:	a904      	add	r1, sp, #16
  408ffe:	4b33      	ldr	r3, [pc, #204]	; (4090cc <lv_refr_obj+0xe8>)
  409000:	4798      	blx	r3
    obj_area.x1 -= ext_size;
  409002:	b2a3      	uxth	r3, r4
  409004:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  409008:	1ad2      	subs	r2, r2, r3
  40900a:	f8ad 2010 	strh.w	r2, [sp, #16]
    obj_area.y1 -= ext_size;
  40900e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  409012:	1ad2      	subs	r2, r2, r3
  409014:	f8ad 2012 	strh.w	r2, [sp, #18]
    obj_area.x2 += ext_size;
  409018:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40901c:	441a      	add	r2, r3
  40901e:	f8ad 2014 	strh.w	r2, [sp, #20]
    obj_area.y2 += ext_size;
  409022:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  409026:	4413      	add	r3, r2
  409028:	f8ad 3016 	strh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
  40902c:	aa04      	add	r2, sp, #16
  40902e:	4631      	mov	r1, r6
  409030:	a806      	add	r0, sp, #24
  409032:	4b27      	ldr	r3, [pc, #156]	; (4090d0 <lv_refr_obj+0xec>)
  409034:	4798      	blx	r3

    /*Draw the parent and its children only if they ore on 'mask_parent'*/
    if(union_ok != false) {
  409036:	b1a8      	cbz	r0, 409064 <lv_refr_obj+0x80>

        /* Redraw the object */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
  409038:	6a2b      	ldr	r3, [r5, #32]
  40903a:	b11b      	cbz	r3, 409044 <lv_refr_obj+0x60>
  40903c:	2200      	movs	r2, #0
  40903e:	a906      	add	r1, sp, #24
  409040:	4628      	mov	r0, r5
  409042:	4798      	blx	r3
#if LV_COLOR_DEPTH == 32
        debug_color.ch.alpha = 0xff;
#endif
#endif
        /*Create a new 'obj_mask' without 'ext_size' because the children can't be visible there*/
        lv_obj_get_coords(obj, &obj_area);
  409044:	a904      	add	r1, sp, #16
  409046:	4628      	mov	r0, r5
  409048:	4b20      	ldr	r3, [pc, #128]	; (4090cc <lv_refr_obj+0xe8>)
  40904a:	4798      	blx	r3
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
  40904c:	aa04      	add	r2, sp, #16
  40904e:	4631      	mov	r1, r6
  409050:	a808      	add	r0, sp, #32
  409052:	4b1f      	ldr	r3, [pc, #124]	; (4090d0 <lv_refr_obj+0xec>)
  409054:	4798      	blx	r3
        if(union_ok != false) {
  409056:	b938      	cbnz	r0, 409068 <lv_refr_obj+0x84>
                }
            }
        }

        /* If all the children are redrawn make 'post draw' design */
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
  409058:	6a2b      	ldr	r3, [r5, #32]
  40905a:	b11b      	cbz	r3, 409064 <lv_refr_obj+0x80>
  40905c:	2201      	movs	r2, #1
  40905e:	a906      	add	r1, sp, #24
  409060:	4628      	mov	r0, r5
  409062:	4798      	blx	r3
    }
}
  409064:	b00a      	add	sp, #40	; 0x28
  409066:	bd70      	pop	{r4, r5, r6, pc}
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
  409068:	1d2e      	adds	r6, r5, #4
  40906a:	4630      	mov	r0, r6
  40906c:	4b19      	ldr	r3, [pc, #100]	; (4090d4 <lv_refr_obj+0xf0>)
  40906e:	4798      	blx	r3
  409070:	4604      	mov	r4, r0
  409072:	e004      	b.n	40907e <lv_refr_obj+0x9a>
  409074:	4621      	mov	r1, r4
  409076:	4630      	mov	r0, r6
  409078:	4b17      	ldr	r3, [pc, #92]	; (4090d8 <lv_refr_obj+0xf4>)
  40907a:	4798      	blx	r3
  40907c:	4604      	mov	r4, r0
  40907e:	2c00      	cmp	r4, #0
  409080:	d0ea      	beq.n	409058 <lv_refr_obj+0x74>
                lv_obj_get_coords(child_p, &child_area);
  409082:	a902      	add	r1, sp, #8
  409084:	4620      	mov	r0, r4
  409086:	4b11      	ldr	r3, [pc, #68]	; (4090cc <lv_refr_obj+0xe8>)
  409088:	4798      	blx	r3
                child_area.x1 -= ext_size;
  40908a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  40908c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  409090:	1ad2      	subs	r2, r2, r3
  409092:	f8ad 2008 	strh.w	r2, [sp, #8]
                child_area.y1 -= ext_size;
  409096:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  40909a:	1ad2      	subs	r2, r2, r3
  40909c:	f8ad 200a 	strh.w	r2, [sp, #10]
                child_area.x2 += ext_size;
  4090a0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4090a4:	441a      	add	r2, r3
  4090a6:	f8ad 200c 	strh.w	r2, [sp, #12]
                child_area.y2 += ext_size;
  4090aa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  4090ae:	4413      	add	r3, r2
  4090b0:	f8ad 300e 	strh.w	r3, [sp, #14]
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
  4090b4:	aa02      	add	r2, sp, #8
  4090b6:	a908      	add	r1, sp, #32
  4090b8:	4668      	mov	r0, sp
  4090ba:	4b05      	ldr	r3, [pc, #20]	; (4090d0 <lv_refr_obj+0xec>)
  4090bc:	4798      	blx	r3
                if(union_ok) {
  4090be:	2800      	cmp	r0, #0
  4090c0:	d0d8      	beq.n	409074 <lv_refr_obj+0x90>
                    lv_refr_obj(child_p, &mask_child);
  4090c2:	4669      	mov	r1, sp
  4090c4:	4620      	mov	r0, r4
  4090c6:	f7ff ff8d 	bl	408fe4 <lv_refr_obj>
  4090ca:	e7d3      	b.n	409074 <lv_refr_obj+0x90>
  4090cc:	00405609 	.word	0x00405609
  4090d0:	00414ef3 	.word	0x00414ef3
  4090d4:	00415ad3 	.word	0x00415ad3
  4090d8:	00415aeb 	.word	0x00415aeb

004090dc <lv_refr_obj_and_children>:
{
  4090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4090de:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4090e0:	4604      	mov	r4, r0
  4090e2:	b150      	cbz	r0, 4090fa <lv_refr_obj_and_children+0x1e>
    if(top_p == NULL) return;  /*Shouldn't happen*/
  4090e4:	2c00      	cmp	r4, #0
  4090e6:	d02c      	beq.n	409142 <lv_refr_obj_and_children+0x66>
    lv_refr_obj(top_p, mask_p);
  4090e8:	4631      	mov	r1, r6
  4090ea:	4620      	mov	r0, r4
  4090ec:	4b15      	ldr	r3, [pc, #84]	; (409144 <lv_refr_obj_and_children+0x68>)
  4090ee:	4798      	blx	r3
    par = lv_obj_get_parent(top_p);
  4090f0:	4620      	mov	r0, r4
  4090f2:	4b15      	ldr	r3, [pc, #84]	; (409148 <lv_refr_obj_and_children+0x6c>)
  4090f4:	4798      	blx	r3
  4090f6:	4607      	mov	r7, r0
    while(par != NULL) {
  4090f8:	e01b      	b.n	409132 <lv_refr_obj_and_children+0x56>
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
  4090fa:	4b14      	ldr	r3, [pc, #80]	; (40914c <lv_refr_obj_and_children+0x70>)
  4090fc:	6818      	ldr	r0, [r3, #0]
  4090fe:	4b14      	ldr	r3, [pc, #80]	; (409150 <lv_refr_obj_and_children+0x74>)
  409100:	4798      	blx	r3
  409102:	4604      	mov	r4, r0
  409104:	e7ee      	b.n	4090e4 <lv_refr_obj_and_children+0x8>
            lv_refr_obj(i, mask_p);
  409106:	4631      	mov	r1, r6
  409108:	4620      	mov	r0, r4
  40910a:	4b0e      	ldr	r3, [pc, #56]	; (409144 <lv_refr_obj_and_children+0x68>)
  40910c:	4798      	blx	r3
            i = _lv_ll_get_prev(&(par->child_ll), i);
  40910e:	4621      	mov	r1, r4
  409110:	4628      	mov	r0, r5
  409112:	4b10      	ldr	r3, [pc, #64]	; (409154 <lv_refr_obj_and_children+0x78>)
  409114:	4798      	blx	r3
  409116:	4604      	mov	r4, r0
        while(i != NULL) {
  409118:	2c00      	cmp	r4, #0
  40911a:	d1f4      	bne.n	409106 <lv_refr_obj_and_children+0x2a>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
  40911c:	6a3b      	ldr	r3, [r7, #32]
  40911e:	b11b      	cbz	r3, 409128 <lv_refr_obj_and_children+0x4c>
  409120:	2201      	movs	r2, #1
  409122:	4631      	mov	r1, r6
  409124:	4638      	mov	r0, r7
  409126:	4798      	blx	r3
        par = lv_obj_get_parent(par);
  409128:	4638      	mov	r0, r7
  40912a:	4b07      	ldr	r3, [pc, #28]	; (409148 <lv_refr_obj_and_children+0x6c>)
  40912c:	4798      	blx	r3
        border_p = par;
  40912e:	463c      	mov	r4, r7
        par = lv_obj_get_parent(par);
  409130:	4607      	mov	r7, r0
    while(par != NULL) {
  409132:	b137      	cbz	r7, 409142 <lv_refr_obj_and_children+0x66>
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
  409134:	1d3d      	adds	r5, r7, #4
  409136:	4621      	mov	r1, r4
  409138:	4628      	mov	r0, r5
  40913a:	4b06      	ldr	r3, [pc, #24]	; (409154 <lv_refr_obj_and_children+0x78>)
  40913c:	4798      	blx	r3
  40913e:	4604      	mov	r4, r0
        while(i != NULL) {
  409140:	e7ea      	b.n	409118 <lv_refr_obj_and_children+0x3c>
  409142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409144:	00408fe5 	.word	0x00408fe5
  409148:	004054f5 	.word	0x004054f5
  40914c:	2040c3a0 	.word	0x2040c3a0
  409150:	004031f9 	.word	0x004031f9
  409154:	00415aeb 	.word	0x00415aeb

00409158 <_lv_refr_init>:
{
  409158:	4770      	bx	lr
	...

0040915c <_lv_inv_area>:
{
  40915c:	b530      	push	{r4, r5, lr}
  40915e:	b085      	sub	sp, #20
  409160:	460c      	mov	r4, r1
    if(!disp) disp = lv_disp_get_default();
  409162:	4605      	mov	r5, r0
  409164:	2800      	cmp	r0, #0
  409166:	d035      	beq.n	4091d4 <_lv_inv_area+0x78>
    if(!disp) return;
  409168:	2d00      	cmp	r5, #0
  40916a:	d03d      	beq.n	4091e8 <_lv_inv_area+0x8c>
    if(area_p == NULL) {
  40916c:	2c00      	cmp	r4, #0
  40916e:	d035      	beq.n	4091dc <_lv_inv_area+0x80>
    scr_area.x1 = 0;
  409170:	2300      	movs	r3, #0
  409172:	f8ad 3008 	strh.w	r3, [sp, #8]
    scr_area.y1 = 0;
  409176:	f8ad 300a 	strh.w	r3, [sp, #10]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
  40917a:	4628      	mov	r0, r5
  40917c:	4b34      	ldr	r3, [pc, #208]	; (409250 <_lv_inv_area+0xf4>)
  40917e:	4798      	blx	r3
  409180:	b280      	uxth	r0, r0
  409182:	3801      	subs	r0, #1
  409184:	f8ad 000c 	strh.w	r0, [sp, #12]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
  409188:	4628      	mov	r0, r5
  40918a:	4b32      	ldr	r3, [pc, #200]	; (409254 <_lv_inv_area+0xf8>)
  40918c:	4798      	blx	r3
  40918e:	b280      	uxth	r0, r0
  409190:	3801      	subs	r0, #1
  409192:	f8ad 000e 	strh.w	r0, [sp, #14]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
  409196:	aa02      	add	r2, sp, #8
  409198:	4621      	mov	r1, r4
  40919a:	4668      	mov	r0, sp
  40919c:	4b2e      	ldr	r3, [pc, #184]	; (409258 <_lv_inv_area+0xfc>)
  40919e:	4798      	blx	r3
    if(suc != false) {
  4091a0:	b310      	cbz	r0, 4091e8 <_lv_inv_area+0x8c>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
  4091a2:	692b      	ldr	r3, [r5, #16]
  4091a4:	b113      	cbz	r3, 4091ac <_lv_inv_area+0x50>
  4091a6:	4669      	mov	r1, sp
  4091a8:	4628      	mov	r0, r5
  4091aa:	4798      	blx	r3
{
  4091ac:	2400      	movs	r4, #0
        for(i = 0; i < disp->inv_p; i++) {
  4091ae:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4091b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4091b6:	429c      	cmp	r4, r3
  4091b8:	da18      	bge.n	4091ec <_lv_inv_area+0x90>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
  4091ba:	f104 010c 	add.w	r1, r4, #12
  4091be:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
  4091c2:	2200      	movs	r2, #0
  4091c4:	3102      	adds	r1, #2
  4091c6:	4668      	mov	r0, sp
  4091c8:	4b24      	ldr	r3, [pc, #144]	; (40925c <_lv_inv_area+0x100>)
  4091ca:	4798      	blx	r3
  4091cc:	b960      	cbnz	r0, 4091e8 <_lv_inv_area+0x8c>
        for(i = 0; i < disp->inv_p; i++) {
  4091ce:	3401      	adds	r4, #1
  4091d0:	b2a4      	uxth	r4, r4
  4091d2:	e7ec      	b.n	4091ae <_lv_inv_area+0x52>
    if(!disp) disp = lv_disp_get_default();
  4091d4:	4b22      	ldr	r3, [pc, #136]	; (409260 <_lv_inv_area+0x104>)
  4091d6:	4798      	blx	r3
  4091d8:	4605      	mov	r5, r0
  4091da:	e7c5      	b.n	409168 <_lv_inv_area+0xc>
        disp->inv_p = 0;
  4091dc:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  4091e0:	f36f 0309 	bfc	r3, #0, #10
  4091e4:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
}
  4091e8:	b005      	add	sp, #20
  4091ea:	bd30      	pop	{r4, r5, pc}
        if(disp->inv_p < LV_INV_BUF_SIZE) {
  4091ec:	2b1f      	cmp	r3, #31
  4091ee:	dc1b      	bgt.n	409228 <_lv_inv_area+0xcc>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
  4091f0:	330c      	adds	r3, #12
  4091f2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
  4091f6:	3302      	adds	r3, #2
  4091f8:	4669      	mov	r1, sp
  4091fa:	2208      	movs	r2, #8
  4091fc:	e004      	b.n	409208 <_lv_inv_area+0xac>
        *d8 = *s8;
  4091fe:	f811 0b01 	ldrb.w	r0, [r1], #1
  409202:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409206:	3a01      	subs	r2, #1
    while(len) {
  409208:	2a00      	cmp	r2, #0
  40920a:	d1f8      	bne.n	4091fe <_lv_inv_area+0xa2>
        disp->inv_p++;
  40920c:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  409210:	f3c3 0209 	ubfx	r2, r3, #0, #10
  409214:	3201      	adds	r2, #1
  409216:	f362 0309 	bfi	r3, r2, #0, #10
  40921a:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
  40921e:	2103      	movs	r1, #3
  409220:	6b68      	ldr	r0, [r5, #52]	; 0x34
  409222:	4b10      	ldr	r3, [pc, #64]	; (409264 <_lv_inv_area+0x108>)
  409224:	4798      	blx	r3
  409226:	e7df      	b.n	4091e8 <_lv_inv_area+0x8c>
            disp->inv_p = 0;
  409228:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
  40922c:	f36f 0309 	bfc	r3, #0, #10
  409230:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
            lv_area_copy(&disp->inv_areas[disp->inv_p], &scr_area);
  409234:	f105 0162 	add.w	r1, r5, #98	; 0x62
    const uint8_t * s8 = (const uint8_t *)src;
  409238:	aa02      	add	r2, sp, #8
  40923a:	2308      	movs	r3, #8
  40923c:	e004      	b.n	409248 <_lv_inv_area+0xec>
        *d8 = *s8;
  40923e:	f812 0b01 	ldrb.w	r0, [r2], #1
  409242:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  409246:	3b01      	subs	r3, #1
    while(len) {
  409248:	2b00      	cmp	r3, #0
  40924a:	d1f8      	bne.n	40923e <_lv_inv_area+0xe2>
  40924c:	e7de      	b.n	40920c <_lv_inv_area+0xb0>
  40924e:	bf00      	nop
  409250:	00414631 	.word	0x00414631
  409254:	00414661 	.word	0x00414661
  409258:	00414ef3 	.word	0x00414ef3
  40925c:	00415169 	.word	0x00415169
  409260:	00414625 	.word	0x00414625
  409264:	00416819 	.word	0x00416819

00409268 <_lv_refr_get_disp_refreshing>:
}
  409268:	4b01      	ldr	r3, [pc, #4]	; (409270 <_lv_refr_get_disp_refreshing+0x8>)
  40926a:	6818      	ldr	r0, [r3, #0]
  40926c:	4770      	bx	lr
  40926e:	bf00      	nop
  409270:	2040c3a0 	.word	0x2040c3a0

00409274 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
  409274:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409276:	4d1e      	ldr	r5, [pc, #120]	; (4092f0 <lv_refr_vdb_flush+0x7c>)
  409278:	6828      	ldr	r0, [r5, #0]
  40927a:	4b1e      	ldr	r3, [pc, #120]	; (4092f4 <lv_refr_vdb_flush+0x80>)
  40927c:	4798      	blx	r3
  40927e:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
  409280:	6828      	ldr	r0, [r5, #0]
  409282:	4b1d      	ldr	r3, [pc, #116]	; (4092f8 <lv_refr_vdb_flush+0x84>)
  409284:	4798      	blx	r3
  409286:	b978      	cbnz	r0, 4092a8 <lv_refr_vdb_flush+0x34>
        while(vdb->flushing) {
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
        }
    }

    vdb->flushing = 1;
  409288:	2301      	movs	r3, #1
  40928a:	61a3      	str	r3, [r4, #24]

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
  40928c:	4b18      	ldr	r3, [pc, #96]	; (4092f0 <lv_refr_vdb_flush+0x7c>)
  40928e:	681b      	ldr	r3, [r3, #0]
  409290:	685b      	ldr	r3, [r3, #4]
  409292:	6a1a      	ldr	r2, [r3, #32]
  409294:	f012 0f01 	tst.w	r2, #1
  409298:	d010      	beq.n	4092bc <lv_refr_vdb_flush+0x48>
  40929a:	6a1b      	ldr	r3, [r3, #32]
  40929c:	f013 0f02 	tst.w	r3, #2
  4092a0:	d00c      	beq.n	4092bc <lv_refr_vdb_flush+0x48>
  4092a2:	2301      	movs	r3, #1
  4092a4:	61e3      	str	r3, [r4, #28]
  4092a6:	e00b      	b.n	4092c0 <lv_refr_vdb_flush+0x4c>
        while(vdb->flushing) {
  4092a8:	69a3      	ldr	r3, [r4, #24]
  4092aa:	2b00      	cmp	r3, #0
  4092ac:	d0ec      	beq.n	409288 <lv_refr_vdb_flush+0x14>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  4092ae:	4b10      	ldr	r3, [pc, #64]	; (4092f0 <lv_refr_vdb_flush+0x7c>)
  4092b0:	6818      	ldr	r0, [r3, #0]
  4092b2:	69c3      	ldr	r3, [r0, #28]
  4092b4:	2b00      	cmp	r3, #0
  4092b6:	d0f7      	beq.n	4092a8 <lv_refr_vdb_flush+0x34>
  4092b8:	4798      	blx	r3
  4092ba:	e7f5      	b.n	4092a8 <lv_refr_vdb_flush+0x34>
    else vdb->flushing_last = 0;
  4092bc:	2300      	movs	r3, #0
  4092be:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  4092c0:	4b0e      	ldr	r3, [pc, #56]	; (4092fc <lv_refr_vdb_flush+0x88>)
  4092c2:	4798      	blx	r3
  4092c4:	4605      	mov	r5, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  4092c6:	6a43      	ldr	r3, [r0, #36]	; 0x24
  4092c8:	b103      	cbz	r3, 4092cc <lv_refr_vdb_flush+0x58>
  4092ca:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
  4092cc:	68eb      	ldr	r3, [r5, #12]
  4092ce:	b123      	cbz	r3, 4092da <lv_refr_vdb_flush+0x66>
  4092d0:	68a2      	ldr	r2, [r4, #8]
  4092d2:	f104 0110 	add.w	r1, r4, #16
  4092d6:	4628      	mov	r0, r5
  4092d8:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
  4092da:	6823      	ldr	r3, [r4, #0]
  4092dc:	b12b      	cbz	r3, 4092ea <lv_refr_vdb_flush+0x76>
  4092de:	6862      	ldr	r2, [r4, #4]
  4092e0:	b11a      	cbz	r2, 4092ea <lv_refr_vdb_flush+0x76>
        if(vdb->buf_act == vdb->buf1)
  4092e2:	68a1      	ldr	r1, [r4, #8]
  4092e4:	428b      	cmp	r3, r1
  4092e6:	d001      	beq.n	4092ec <lv_refr_vdb_flush+0x78>
            vdb->buf_act = vdb->buf2;
        else
            vdb->buf_act = vdb->buf1;
  4092e8:	60a3      	str	r3, [r4, #8]
  4092ea:	bd38      	pop	{r3, r4, r5, pc}
            vdb->buf_act = vdb->buf2;
  4092ec:	60a2      	str	r2, [r4, #8]
  4092ee:	bd38      	pop	{r3, r4, r5, pc}
  4092f0:	2040c3a0 	.word	0x2040c3a0
  4092f4:	00414735 	.word	0x00414735
  4092f8:	0041476d 	.word	0x0041476d
  4092fc:	00409269 	.word	0x00409269

00409300 <lv_refr_area_part>:
{
  409300:	b570      	push	{r4, r5, r6, lr}
  409302:	b09c      	sub	sp, #112	; 0x70
  409304:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409306:	4d4c      	ldr	r5, [pc, #304]	; (409438 <lv_refr_area_part+0x138>)
  409308:	6828      	ldr	r0, [r5, #0]
  40930a:	4b4c      	ldr	r3, [pc, #304]	; (40943c <lv_refr_area_part+0x13c>)
  40930c:	4798      	blx	r3
  40930e:	4604      	mov	r4, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
  409310:	6828      	ldr	r0, [r5, #0]
  409312:	4b4b      	ldr	r3, [pc, #300]	; (409440 <lv_refr_area_part+0x140>)
  409314:	4798      	blx	r3
  409316:	b940      	cbnz	r0, 40932a <lv_refr_area_part+0x2a>
        while(vdb->flushing) {
  409318:	69a3      	ldr	r3, [r4, #24]
  40931a:	b133      	cbz	r3, 40932a <lv_refr_area_part+0x2a>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
  40931c:	4b46      	ldr	r3, [pc, #280]	; (409438 <lv_refr_area_part+0x138>)
  40931e:	6818      	ldr	r0, [r3, #0]
  409320:	69c3      	ldr	r3, [r0, #28]
  409322:	2b00      	cmp	r3, #0
  409324:	d0f8      	beq.n	409318 <lv_refr_area_part+0x18>
  409326:	4798      	blx	r3
  409328:	e7f6      	b.n	409318 <lv_refr_area_part+0x18>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
  40932a:	f104 0210 	add.w	r2, r4, #16
  40932e:	4631      	mov	r1, r6
  409330:	a81a      	add	r0, sp, #104	; 0x68
  409332:	4b44      	ldr	r3, [pc, #272]	; (409444 <lv_refr_area_part+0x144>)
  409334:	4798      	blx	r3
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
  409336:	4d40      	ldr	r5, [pc, #256]	; (409438 <lv_refr_area_part+0x138>)
  409338:	6828      	ldr	r0, [r5, #0]
  40933a:	4b43      	ldr	r3, [pc, #268]	; (409448 <lv_refr_area_part+0x148>)
  40933c:	4798      	blx	r3
  40933e:	4601      	mov	r1, r0
  409340:	a81a      	add	r0, sp, #104	; 0x68
  409342:	4b42      	ldr	r3, [pc, #264]	; (40944c <lv_refr_area_part+0x14c>)
  409344:	4798      	blx	r3
  409346:	4604      	mov	r4, r0
    if(disp_refr->prev_scr) {
  409348:	682b      	ldr	r3, [r5, #0]
  40934a:	6c99      	ldr	r1, [r3, #72]	; 0x48
  40934c:	2900      	cmp	r1, #0
  40934e:	d03d      	beq.n	4093cc <lv_refr_area_part+0xcc>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
  409350:	a81a      	add	r0, sp, #104	; 0x68
  409352:	4b3e      	ldr	r3, [pc, #248]	; (40944c <lv_refr_area_part+0x14c>)
  409354:	4798      	blx	r3
  409356:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
  409358:	2c00      	cmp	r4, #0
  40935a:	bf08      	it	eq
  40935c:	2d00      	cmpeq	r5, #0
  40935e:	d113      	bne.n	409388 <lv_refr_area_part+0x88>
        if(disp_refr->bg_img) {
  409360:	4b35      	ldr	r3, [pc, #212]	; (409438 <lv_refr_area_part+0x138>)
  409362:	681b      	ldr	r3, [r3, #0]
  409364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  409366:	2b00      	cmp	r3, #0
  409368:	d04a      	beq.n	409400 <lv_refr_area_part+0x100>
            lv_draw_img_dsc_init(&dsc);
  40936a:	a805      	add	r0, sp, #20
  40936c:	4b38      	ldr	r3, [pc, #224]	; (409450 <lv_refr_area_part+0x150>)
  40936e:	4798      	blx	r3
            dsc.opa = disp_refr->bg_opa;
  409370:	4b31      	ldr	r3, [pc, #196]	; (409438 <lv_refr_area_part+0x138>)
  409372:	681b      	ldr	r3, [r3, #0]
  409374:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
  409378:	f88d 2014 	strb.w	r2, [sp, #20]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
  40937c:	a902      	add	r1, sp, #8
  40937e:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
  409380:	4b34      	ldr	r3, [pc, #208]	; (409454 <lv_refr_area_part+0x154>)
  409382:	4798      	blx	r3
            if(res == LV_RES_OK) {
  409384:	2801      	cmp	r0, #1
  409386:	d023      	beq.n	4093d0 <lv_refr_area_part+0xd0>
    if(disp_refr->prev_scr) {
  409388:	4b2b      	ldr	r3, [pc, #172]	; (409438 <lv_refr_area_part+0x138>)
  40938a:	681b      	ldr	r3, [r3, #0]
  40938c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  40938e:	b12b      	cbz	r3, 40939c <lv_refr_area_part+0x9c>
        if(top_prev_scr == NULL) {
  409390:	2d00      	cmp	r5, #0
  409392:	d048      	beq.n	409426 <lv_refr_area_part+0x126>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
  409394:	a91a      	add	r1, sp, #104	; 0x68
  409396:	4628      	mov	r0, r5
  409398:	4b2f      	ldr	r3, [pc, #188]	; (409458 <lv_refr_area_part+0x158>)
  40939a:	4798      	blx	r3
    if(top_act_scr == NULL) {
  40939c:	2c00      	cmp	r4, #0
  40939e:	d044      	beq.n	40942a <lv_refr_area_part+0x12a>
    lv_refr_obj_and_children(top_act_scr, &start_mask);
  4093a0:	a91a      	add	r1, sp, #104	; 0x68
  4093a2:	4620      	mov	r0, r4
  4093a4:	4d2c      	ldr	r5, [pc, #176]	; (409458 <lv_refr_area_part+0x158>)
  4093a6:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
  4093a8:	4c23      	ldr	r4, [pc, #140]	; (409438 <lv_refr_area_part+0x138>)
  4093aa:	6820      	ldr	r0, [r4, #0]
  4093ac:	4b2b      	ldr	r3, [pc, #172]	; (40945c <lv_refr_area_part+0x15c>)
  4093ae:	4798      	blx	r3
  4093b0:	a91a      	add	r1, sp, #104	; 0x68
  4093b2:	47a8      	blx	r5
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
  4093b4:	6820      	ldr	r0, [r4, #0]
  4093b6:	4b2a      	ldr	r3, [pc, #168]	; (409460 <lv_refr_area_part+0x160>)
  4093b8:	4798      	blx	r3
  4093ba:	a91a      	add	r1, sp, #104	; 0x68
  4093bc:	47a8      	blx	r5
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
  4093be:	6820      	ldr	r0, [r4, #0]
  4093c0:	4b28      	ldr	r3, [pc, #160]	; (409464 <lv_refr_area_part+0x164>)
  4093c2:	4798      	blx	r3
  4093c4:	2800      	cmp	r0, #0
  4093c6:	d034      	beq.n	409432 <lv_refr_area_part+0x132>
}
  4093c8:	b01c      	add	sp, #112	; 0x70
  4093ca:	bd70      	pop	{r4, r5, r6, pc}
    lv_obj_t * top_prev_scr = NULL;
  4093cc:	2500      	movs	r5, #0
  4093ce:	e7c3      	b.n	409358 <lv_refr_area_part+0x58>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
  4093d0:	9b02      	ldr	r3, [sp, #8]
  4093d2:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4093d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
  4093da:	f3c2 124a 	ubfx	r2, r2, #5, #11
  4093de:	3a01      	subs	r2, #1
  4093e0:	9200      	str	r2, [sp, #0]
  4093e2:	3b01      	subs	r3, #1
  4093e4:	2200      	movs	r2, #0
  4093e6:	4611      	mov	r1, r2
  4093e8:	a803      	add	r0, sp, #12
  4093ea:	4e1f      	ldr	r6, [pc, #124]	; (409468 <lv_refr_area_part+0x168>)
  4093ec:	47b0      	blx	r6
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
  4093ee:	4b12      	ldr	r3, [pc, #72]	; (409438 <lv_refr_area_part+0x138>)
  4093f0:	681a      	ldr	r2, [r3, #0]
  4093f2:	ab05      	add	r3, sp, #20
  4093f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  4093f6:	a91a      	add	r1, sp, #104	; 0x68
  4093f8:	a803      	add	r0, sp, #12
  4093fa:	4e1c      	ldr	r6, [pc, #112]	; (40946c <lv_refr_area_part+0x16c>)
  4093fc:	47b0      	blx	r6
  4093fe:	e7c3      	b.n	409388 <lv_refr_area_part+0x88>
            lv_draw_rect_dsc_init(&dsc);
  409400:	a805      	add	r0, sp, #20
  409402:	4b1b      	ldr	r3, [pc, #108]	; (409470 <lv_refr_area_part+0x170>)
  409404:	4798      	blx	r3
            dsc.bg_color = disp_refr->bg_color;
  409406:	4b0c      	ldr	r3, [pc, #48]	; (409438 <lv_refr_area_part+0x138>)
  409408:	681b      	ldr	r3, [r3, #0]
  40940a:	f8b3 205a 	ldrh.w	r2, [r3, #90]	; 0x5a
  40940e:	f8ad 2016 	strh.w	r2, [sp, #22]
            dsc.bg_opa = disp_refr->bg_opa;
  409412:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
  409416:	f88d 3020 	strb.w	r3, [sp, #32]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
  40941a:	aa05      	add	r2, sp, #20
  40941c:	a91a      	add	r1, sp, #104	; 0x68
  40941e:	4608      	mov	r0, r1
  409420:	4b14      	ldr	r3, [pc, #80]	; (409474 <lv_refr_area_part+0x174>)
  409422:	4798      	blx	r3
  409424:	e7b0      	b.n	409388 <lv_refr_area_part+0x88>
            top_prev_scr = disp_refr->prev_scr;
  409426:	461d      	mov	r5, r3
  409428:	e7b4      	b.n	409394 <lv_refr_area_part+0x94>
        top_act_scr = disp_refr->act_scr;
  40942a:	4b03      	ldr	r3, [pc, #12]	; (409438 <lv_refr_area_part+0x138>)
  40942c:	681b      	ldr	r3, [r3, #0]
  40942e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  409430:	e7b6      	b.n	4093a0 <lv_refr_area_part+0xa0>
        lv_refr_vdb_flush();
  409432:	4b11      	ldr	r3, [pc, #68]	; (409478 <lv_refr_area_part+0x178>)
  409434:	4798      	blx	r3
}
  409436:	e7c7      	b.n	4093c8 <lv_refr_area_part+0xc8>
  409438:	2040c3a0 	.word	0x2040c3a0
  40943c:	00414735 	.word	0x00414735
  409440:	0041476d 	.word	0x0041476d
  409444:	00414ef3 	.word	0x00414ef3
  409448:	004031f9 	.word	0x004031f9
  40944c:	00408f45 	.word	0x00408f45
  409450:	0040cdd1 	.word	0x0040cdd1
  409454:	00413249 	.word	0x00413249
  409458:	004090dd 	.word	0x004090dd
  40945c:	00403231 	.word	0x00403231
  409460:	0040324d 	.word	0x0040324d
  409464:	00414785 	.word	0x00414785
  409468:	00414ebd 	.word	0x00414ebd
  40946c:	0040d07d 	.word	0x0040d07d
  409470:	00411d9d 	.word	0x00411d9d
  409474:	00411de9 	.word	0x00411de9
  409478:	00409275 	.word	0x00409275

0040947c <lv_refr_area>:
{
  40947c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  409480:	b083      	sub	sp, #12
  409482:	4606      	mov	r6, r0
    if(lv_disp_is_true_double_buf(disp_refr)) {
  409484:	4b62      	ldr	r3, [pc, #392]	; (409610 <lv_refr_area+0x194>)
  409486:	6818      	ldr	r0, [r3, #0]
  409488:	4b62      	ldr	r3, [pc, #392]	; (409614 <lv_refr_area+0x198>)
  40948a:	4798      	blx	r3
  40948c:	2800      	cmp	r0, #0
  40948e:	d157      	bne.n	409540 <lv_refr_area+0xc4>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409490:	f8df 917c 	ldr.w	r9, [pc, #380]	; 409610 <lv_refr_area+0x194>
  409494:	f8d9 0000 	ldr.w	r0, [r9]
  409498:	4b5f      	ldr	r3, [pc, #380]	; (409618 <lv_refr_area+0x19c>)
  40949a:	4798      	blx	r3
  40949c:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40949e:	f8b6 8004 	ldrh.w	r8, [r6, #4]
  4094a2:	8833      	ldrh	r3, [r6, #0]
  4094a4:	eba8 0803 	sub.w	r8, r8, r3
  4094a8:	fa1f f888 	uxth.w	r8, r8
  4094ac:	f108 0801 	add.w	r8, r8, #1
  4094b0:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4094b4:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
  4094b8:	b2bc      	uxth	r4, r7
  4094ba:	8873      	ldrh	r3, [r6, #2]
  4094bc:	1ae4      	subs	r4, r4, r3
  4094be:	b2a4      	uxth	r4, r4
  4094c0:	3401      	adds	r4, #1
  4094c2:	b224      	sxth	r4, r4
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  4094c4:	f8d9 0000 	ldr.w	r0, [r9]
  4094c8:	4b54      	ldr	r3, [pc, #336]	; (40961c <lv_refr_area+0x1a0>)
  4094ca:	4798      	blx	r3
        lv_coord_t y2 =
  4094cc:	42b8      	cmp	r0, r7
  4094ce:	dd59      	ble.n	409584 <lv_refr_area+0x108>
  4094d0:	f9b6 7006 	ldrsh.w	r7, [r6, #6]
        int32_t max_row = (uint32_t)vdb->size / w;
  4094d4:	68eb      	ldr	r3, [r5, #12]
  4094d6:	fbb3 f3f8 	udiv	r3, r3, r8
        if(max_row > h) max_row = h;
  4094da:	46a0      	mov	r8, r4
  4094dc:	42a3      	cmp	r3, r4
  4094de:	dc00      	bgt.n	4094e2 <lv_refr_area+0x66>
        int32_t max_row = (uint32_t)vdb->size / w;
  4094e0:	4698      	mov	r8, r3
        if(disp_refr->driver.rounder_cb) {
  4094e2:	4b4b      	ldr	r3, [pc, #300]	; (409610 <lv_refr_area+0x194>)
  4094e4:	681b      	ldr	r3, [r3, #0]
  4094e6:	691b      	ldr	r3, [r3, #16]
  4094e8:	b32b      	cbz	r3, 409536 <lv_refr_area+0xba>
            tmp.x1 = 0;
  4094ea:	2300      	movs	r3, #0
  4094ec:	f8ad 3000 	strh.w	r3, [sp]
            tmp.x2 = 0;
  4094f0:	f8ad 3004 	strh.w	r3, [sp, #4]
            tmp.y1 = 0;
  4094f4:	f8ad 3002 	strh.w	r3, [sp, #2]
            lv_coord_t h_tmp = max_row;
  4094f8:	fa0f f988 	sxth.w	r9, r8
                tmp.y2 = h_tmp - 1;
  4094fc:	f109 34ff 	add.w	r4, r9, #4294967295
  409500:	b224      	sxth	r4, r4
  409502:	f8ad 4006 	strh.w	r4, [sp, #6]
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
  409506:	4b42      	ldr	r3, [pc, #264]	; (409610 <lv_refr_area+0x194>)
  409508:	6818      	ldr	r0, [r3, #0]
  40950a:	6903      	ldr	r3, [r0, #16]
  40950c:	4669      	mov	r1, sp
  40950e:	4798      	blx	r3
  409510:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  409514:	b293      	uxth	r3, r2
  409516:	f8bd 1002 	ldrh.w	r1, [sp, #2]
  40951a:	1a5b      	subs	r3, r3, r1
  40951c:	b29b      	uxth	r3, r3
  40951e:	3301      	adds	r3, #1
  409520:	b21b      	sxth	r3, r3
                if(lv_area_get_height(&tmp) <= max_row) break;
  409522:	4598      	cmp	r8, r3
  409524:	da02      	bge.n	40952c <lv_refr_area+0xb0>
                h_tmp--;
  409526:	46a1      	mov	r9, r4
            } while(h_tmp > 0);
  409528:	2c00      	cmp	r4, #0
  40952a:	dce7      	bgt.n	4094fc <lv_refr_area+0x80>
            if(h_tmp <= 0) {
  40952c:	f1b9 0f00 	cmp.w	r9, #0
  409530:	dd25      	ble.n	40957e <lv_refr_area+0x102>
                max_row = tmp.y2 + 1;
  409532:	f102 0801 	add.w	r8, r2, #1
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  409536:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
        lv_coord_t row_last = 0;
  40953a:	f04f 0900 	mov.w	r9, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  40953e:	e031      	b.n	4095a4 <lv_refr_area+0x128>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  409540:	4c33      	ldr	r4, [pc, #204]	; (409610 <lv_refr_area+0x194>)
  409542:	6820      	ldr	r0, [r4, #0]
  409544:	4b34      	ldr	r3, [pc, #208]	; (409618 <lv_refr_area+0x19c>)
  409546:	4798      	blx	r3
  409548:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
  40954a:	2700      	movs	r7, #0
  40954c:	8207      	strh	r7, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
  40954e:	6820      	ldr	r0, [r4, #0]
  409550:	4b33      	ldr	r3, [pc, #204]	; (409620 <lv_refr_area+0x1a4>)
  409552:	4798      	blx	r3
  409554:	b280      	uxth	r0, r0
  409556:	3801      	subs	r0, #1
  409558:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
  40955a:	826f      	strh	r7, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
  40955c:	6820      	ldr	r0, [r4, #0]
  40955e:	4b2f      	ldr	r3, [pc, #188]	; (40961c <lv_refr_area+0x1a0>)
  409560:	4798      	blx	r3
  409562:	b280      	uxth	r0, r0
  409564:	3801      	subs	r0, #1
  409566:	82e8      	strh	r0, [r5, #22]
        disp_refr->driver.buffer->last_part = 1;
  409568:	6823      	ldr	r3, [r4, #0]
  40956a:	685a      	ldr	r2, [r3, #4]
  40956c:	f892 3020 	ldrb.w	r3, [r2, #32]
  409570:	f043 0302 	orr.w	r3, r3, #2
  409574:	f882 3020 	strb.w	r3, [r2, #32]
        lv_refr_area_part(area_p);
  409578:	4630      	mov	r0, r6
  40957a:	4b2a      	ldr	r3, [pc, #168]	; (409624 <lv_refr_area+0x1a8>)
  40957c:	4798      	blx	r3
}
  40957e:	b003      	add	sp, #12
  409580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
  409584:	f8d9 0000 	ldr.w	r0, [r9]
  409588:	4b24      	ldr	r3, [pc, #144]	; (40961c <lv_refr_area+0x1a0>)
  40958a:	4798      	blx	r3
  40958c:	b287      	uxth	r7, r0
  40958e:	3f01      	subs	r7, #1
        lv_coord_t y2 =
  409590:	b23f      	sxth	r7, r7
  409592:	e79f      	b.n	4094d4 <lv_refr_area+0x58>
            row_last = vdb->area.y2;
  409594:	f9b5 9016 	ldrsh.w	r9, [r5, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  409598:	454f      	cmp	r7, r9
  40959a:	d018      	beq.n	4095ce <lv_refr_area+0x152>
            lv_refr_area_part(area_p);
  40959c:	4630      	mov	r0, r6
  40959e:	4b21      	ldr	r3, [pc, #132]	; (409624 <lv_refr_area+0x1a8>)
  4095a0:	4798      	blx	r3
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
  4095a2:	b223      	sxth	r3, r4
  4095a4:	eb03 0208 	add.w	r2, r3, r8
  4095a8:	3a01      	subs	r2, #1
  4095aa:	42ba      	cmp	r2, r7
  4095ac:	dc19      	bgt.n	4095e2 <lv_refr_area+0x166>
            vdb->area.x1 = area_p->x1;
  4095ae:	f9b6 2000 	ldrsh.w	r2, [r6]
  4095b2:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  4095b4:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  4095b8:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  4095ba:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = row + max_row - 1;
  4095bc:	4443      	add	r3, r8
  4095be:	b29c      	uxth	r4, r3
  4095c0:	1e63      	subs	r3, r4, #1
  4095c2:	b21b      	sxth	r3, r3
  4095c4:	82eb      	strh	r3, [r5, #22]
            if(vdb->area.y2 > y2) vdb->area.y2 = y2;
  4095c6:	429f      	cmp	r7, r3
  4095c8:	dae4      	bge.n	409594 <lv_refr_area+0x118>
  4095ca:	82ef      	strh	r7, [r5, #22]
  4095cc:	e7e2      	b.n	409594 <lv_refr_area+0x118>
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
  4095ce:	4b10      	ldr	r3, [pc, #64]	; (409610 <lv_refr_area+0x194>)
  4095d0:	681b      	ldr	r3, [r3, #0]
  4095d2:	685a      	ldr	r2, [r3, #4]
  4095d4:	f892 3020 	ldrb.w	r3, [r2, #32]
  4095d8:	f043 0302 	orr.w	r3, r3, #2
  4095dc:	f882 3020 	strb.w	r3, [r2, #32]
  4095e0:	e7dc      	b.n	40959c <lv_refr_area+0x120>
        if(y2 != row_last) {
  4095e2:	45b9      	cmp	r9, r7
  4095e4:	d0cb      	beq.n	40957e <lv_refr_area+0x102>
            vdb->area.x1 = area_p->x1;
  4095e6:	f9b6 2000 	ldrsh.w	r2, [r6]
  4095ea:	822a      	strh	r2, [r5, #16]
            vdb->area.x2 = area_p->x2;
  4095ec:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
  4095f0:	82aa      	strh	r2, [r5, #20]
            vdb->area.y1 = row;
  4095f2:	826b      	strh	r3, [r5, #18]
            vdb->area.y2 = y2;
  4095f4:	82ef      	strh	r7, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
  4095f6:	4b06      	ldr	r3, [pc, #24]	; (409610 <lv_refr_area+0x194>)
  4095f8:	681b      	ldr	r3, [r3, #0]
  4095fa:	685a      	ldr	r2, [r3, #4]
  4095fc:	f892 3020 	ldrb.w	r3, [r2, #32]
  409600:	f043 0302 	orr.w	r3, r3, #2
  409604:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
  409608:	4630      	mov	r0, r6
  40960a:	4b06      	ldr	r3, [pc, #24]	; (409624 <lv_refr_area+0x1a8>)
  40960c:	4798      	blx	r3
  40960e:	e7b6      	b.n	40957e <lv_refr_area+0x102>
  409610:	2040c3a0 	.word	0x2040c3a0
  409614:	00414785 	.word	0x00414785
  409618:	00414735 	.word	0x00414735
  40961c:	00414661 	.word	0x00414661
  409620:	00414631 	.word	0x00414631
  409624:	00409301 	.word	0x00409301

00409628 <lv_refr_areas>:
    px_num = 0;
  409628:	2200      	movs	r2, #0
  40962a:	4b2b      	ldr	r3, [pc, #172]	; (4096d8 <lv_refr_areas+0xb0>)
  40962c:	601a      	str	r2, [r3, #0]
    if(disp_refr->inv_p == 0) return;
  40962e:	4b2b      	ldr	r3, [pc, #172]	; (4096dc <lv_refr_areas+0xb4>)
  409630:	681a      	ldr	r2, [r3, #0]
  409632:	f8b2 3182 	ldrh.w	r3, [r2, #386]	; 0x182
  409636:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40963a:	2b00      	cmp	r3, #0
  40963c:	d04b      	beq.n	4096d6 <lv_refr_areas+0xae>
{
  40963e:	b570      	push	{r4, r5, r6, lr}
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  409640:	1e5e      	subs	r6, r3, #1
  409642:	2e00      	cmp	r6, #0
  409644:	db05      	blt.n	409652 <lv_refr_areas+0x2a>
        if(disp_refr->inv_area_joined[i] == 0) {
  409646:	1993      	adds	r3, r2, r6
  409648:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  40964c:	b113      	cbz	r3, 409654 <lv_refr_areas+0x2c>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
  40964e:	3e01      	subs	r6, #1
  409650:	e7f7      	b.n	409642 <lv_refr_areas+0x1a>
    int32_t last_i = 0;
  409652:	2600      	movs	r6, #0
    disp_refr->driver.buffer->last_area = 0;
  409654:	6851      	ldr	r1, [r2, #4]
  409656:	f891 3020 	ldrb.w	r3, [r1, #32]
  40965a:	f36f 0300 	bfc	r3, #0, #1
  40965e:	f881 3020 	strb.w	r3, [r1, #32]
    disp_refr->driver.buffer->last_part = 0;
  409662:	6852      	ldr	r2, [r2, #4]
  409664:	f892 3020 	ldrb.w	r3, [r2, #32]
  409668:	f36f 0341 	bfc	r3, #1, #1
  40966c:	f882 3020 	strb.w	r3, [r2, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
  409670:	2400      	movs	r4, #0
  409672:	e01f      	b.n	4096b4 <lv_refr_areas+0x8c>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  409674:	6842      	ldr	r2, [r0, #4]
  409676:	f892 3020 	ldrb.w	r3, [r2, #32]
  40967a:	f043 0301 	orr.w	r3, r3, #1
  40967e:	f882 3020 	strb.w	r3, [r2, #32]
            disp_refr->driver.buffer->last_part = 0;
  409682:	6842      	ldr	r2, [r0, #4]
  409684:	f892 3020 	ldrb.w	r3, [r2, #32]
  409688:	f36f 0341 	bfc	r3, #1, #1
  40968c:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
  409690:	f104 050c 	add.w	r5, r4, #12
  409694:	00ed      	lsls	r5, r5, #3
  409696:	4428      	add	r0, r5
  409698:	3002      	adds	r0, #2
  40969a:	4b11      	ldr	r3, [pc, #68]	; (4096e0 <lv_refr_areas+0xb8>)
  40969c:	4798      	blx	r3
            px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
  40969e:	4b0f      	ldr	r3, [pc, #60]	; (4096dc <lv_refr_areas+0xb4>)
  4096a0:	6818      	ldr	r0, [r3, #0]
  4096a2:	4428      	add	r0, r5
  4096a4:	3002      	adds	r0, #2
  4096a6:	4b0f      	ldr	r3, [pc, #60]	; (4096e4 <lv_refr_areas+0xbc>)
  4096a8:	4798      	blx	r3
  4096aa:	4a0b      	ldr	r2, [pc, #44]	; (4096d8 <lv_refr_areas+0xb0>)
  4096ac:	6813      	ldr	r3, [r2, #0]
  4096ae:	4418      	add	r0, r3
  4096b0:	6010      	str	r0, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
  4096b2:	3401      	adds	r4, #1
  4096b4:	4b09      	ldr	r3, [pc, #36]	; (4096dc <lv_refr_areas+0xb4>)
  4096b6:	6818      	ldr	r0, [r3, #0]
  4096b8:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  4096bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4096c0:	429c      	cmp	r4, r3
  4096c2:	da07      	bge.n	4096d4 <lv_refr_areas+0xac>
        if(disp_refr->inv_area_joined[i] == 0) {
  4096c4:	1903      	adds	r3, r0, r4
  4096c6:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
  4096ca:	2b00      	cmp	r3, #0
  4096cc:	d1f1      	bne.n	4096b2 <lv_refr_areas+0x8a>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
  4096ce:	42b4      	cmp	r4, r6
  4096d0:	d1d7      	bne.n	409682 <lv_refr_areas+0x5a>
  4096d2:	e7cf      	b.n	409674 <lv_refr_areas+0x4c>
  4096d4:	bd70      	pop	{r4, r5, r6, pc}
  4096d6:	4770      	bx	lr
  4096d8:	2040c3a4 	.word	0x2040c3a4
  4096dc:	2040c3a0 	.word	0x2040c3a0
  4096e0:	0040947d 	.word	0x0040947d
  4096e4:	00414ed7 	.word	0x00414ed7

004096e8 <_lv_disp_refr_task>:
{
  4096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4096ec:	b085      	sub	sp, #20
  4096ee:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
  4096f0:	4b58      	ldr	r3, [pc, #352]	; (409854 <_lv_disp_refr_task+0x16c>)
  4096f2:	4798      	blx	r3
  4096f4:	9001      	str	r0, [sp, #4]
    disp_refr = task->user_data;
  4096f6:	68eb      	ldr	r3, [r5, #12]
  4096f8:	4c57      	ldr	r4, [pc, #348]	; (409858 <_lv_disp_refr_task+0x170>)
  4096fa:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
  4096fc:	2100      	movs	r1, #0
  4096fe:	4628      	mov	r0, r5
  409700:	4b56      	ldr	r3, [pc, #344]	; (40985c <_lv_disp_refr_task+0x174>)
  409702:	4798      	blx	r3
    if(disp_refr->act_scr == NULL) {
  409704:	6823      	ldr	r3, [r4, #0]
  409706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  409708:	b18a      	cbz	r2, 40972e <_lv_disp_refr_task+0x46>
    lv_refr_join_area();
  40970a:	4b55      	ldr	r3, [pc, #340]	; (409860 <_lv_disp_refr_task+0x178>)
  40970c:	4798      	blx	r3
    lv_refr_areas();
  40970e:	4b55      	ldr	r3, [pc, #340]	; (409864 <_lv_disp_refr_task+0x17c>)
  409710:	4798      	blx	r3
    if(disp_refr->inv_p != 0) {
  409712:	4b51      	ldr	r3, [pc, #324]	; (409858 <_lv_disp_refr_task+0x170>)
  409714:	6818      	ldr	r0, [r3, #0]
  409716:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  40971a:	f3c3 0309 	ubfx	r3, r3, #0, #10
  40971e:	b96b      	cbnz	r3, 40973c <_lv_disp_refr_task+0x54>
    _lv_mem_buf_free_all();
  409720:	4b51      	ldr	r3, [pc, #324]	; (409868 <_lv_disp_refr_task+0x180>)
  409722:	4798      	blx	r3
    _lv_font_clean_up_fmt_txt();
  409724:	4b51      	ldr	r3, [pc, #324]	; (40986c <_lv_disp_refr_task+0x184>)
  409726:	4798      	blx	r3
}
  409728:	b005      	add	sp, #20
  40972a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        disp_refr->inv_p = 0;
  40972e:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409732:	f36f 0209 	bfc	r2, #0, #10
  409736:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        return;
  40973a:	e7f5      	b.n	409728 <_lv_disp_refr_task+0x40>
        if(lv_disp_is_true_double_buf(disp_refr)) {
  40973c:	4b4c      	ldr	r3, [pc, #304]	; (409870 <_lv_disp_refr_task+0x188>)
  40973e:	4798      	blx	r3
  409740:	b118      	cbz	r0, 40974a <_lv_disp_refr_task+0x62>
            if(disp_refr->driver.set_px_cb) {
  409742:	4b45      	ldr	r3, [pc, #276]	; (409858 <_lv_disp_refr_task+0x170>)
  409744:	6818      	ldr	r0, [r3, #0]
  409746:	6943      	ldr	r3, [r0, #20]
  409748:	b1fb      	cbz	r3, 40978a <_lv_disp_refr_task+0xa2>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
  40974a:	4c43      	ldr	r4, [pc, #268]	; (409858 <_lv_disp_refr_task+0x170>)
  40974c:	6820      	ldr	r0, [r4, #0]
  40974e:	f44f 7180 	mov.w	r1, #256	; 0x100
  409752:	3062      	adds	r0, #98	; 0x62
  409754:	4d47      	ldr	r5, [pc, #284]	; (409874 <_lv_disp_refr_task+0x18c>)
  409756:	47a8      	blx	r5
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
  409758:	6820      	ldr	r0, [r4, #0]
  40975a:	2120      	movs	r1, #32
  40975c:	f500 70b1 	add.w	r0, r0, #354	; 0x162
  409760:	47a8      	blx	r5
        disp_refr->inv_p = 0;
  409762:	6823      	ldr	r3, [r4, #0]
  409764:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  409768:	f36f 0209 	bfc	r2, #0, #10
  40976c:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
        elaps = lv_tick_elaps(start);
  409770:	9801      	ldr	r0, [sp, #4]
  409772:	4b41      	ldr	r3, [pc, #260]	; (409878 <_lv_disp_refr_task+0x190>)
  409774:	4798      	blx	r3
        if(disp_refr->driver.monitor_cb) {
  409776:	6824      	ldr	r4, [r4, #0]
  409778:	69a3      	ldr	r3, [r4, #24]
  40977a:	2b00      	cmp	r3, #0
  40977c:	d0d0      	beq.n	409720 <_lv_disp_refr_task+0x38>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
  40977e:	4a3f      	ldr	r2, [pc, #252]	; (40987c <_lv_disp_refr_task+0x194>)
  409780:	6812      	ldr	r2, [r2, #0]
  409782:	4601      	mov	r1, r0
  409784:	4620      	mov	r0, r4
  409786:	4798      	blx	r3
  409788:	e7ca      	b.n	409720 <_lv_disp_refr_task+0x38>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
  40978a:	4b3d      	ldr	r3, [pc, #244]	; (409880 <_lv_disp_refr_task+0x198>)
  40978c:	4798      	blx	r3
  40978e:	4604      	mov	r4, r0
                lv_refr_vdb_flush();
  409790:	4b3c      	ldr	r3, [pc, #240]	; (409884 <_lv_disp_refr_task+0x19c>)
  409792:	4798      	blx	r3
                while(vdb->flushing);
  409794:	69a3      	ldr	r3, [r4, #24]
  409796:	2b00      	cmp	r3, #0
  409798:	d1fc      	bne.n	409794 <_lv_disp_refr_task+0xac>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
  40979a:	4b2f      	ldr	r3, [pc, #188]	; (409858 <_lv_disp_refr_task+0x170>)
  40979c:	681b      	ldr	r3, [r3, #0]
  40979e:	f9b3 0000 	ldrsh.w	r0, [r3]
  4097a2:	0040      	lsls	r0, r0, #1
  4097a4:	4b38      	ldr	r3, [pc, #224]	; (409888 <_lv_disp_refr_task+0x1a0>)
  4097a6:	4798      	blx	r3
  4097a8:	9003      	str	r0, [sp, #12]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
  4097aa:	f8d4 b008 	ldr.w	fp, [r4, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  4097ae:	f8d4 a000 	ldr.w	sl, [r4]
  4097b2:	45d3      	cmp	fp, sl
  4097b4:	d006      	beq.n	4097c4 <_lv_disp_refr_task+0xdc>
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
  4097b6:	4b28      	ldr	r3, [pc, #160]	; (409858 <_lv_disp_refr_task+0x170>)
  4097b8:	6818      	ldr	r0, [r3, #0]
  4097ba:	4b34      	ldr	r3, [pc, #208]	; (40988c <_lv_disp_refr_task+0x1a4>)
  4097bc:	4798      	blx	r3
  4097be:	4681      	mov	r9, r0
                for(a = 0; a < disp_refr->inv_p; a++) {
  4097c0:	2600      	movs	r6, #0
  4097c2:	e01d      	b.n	409800 <_lv_disp_refr_task+0x118>
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
  4097c4:	f8d4 a004 	ldr.w	sl, [r4, #4]
  4097c8:	e7f5      	b.n	4097b6 <_lv_disp_refr_task+0xce>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
  4097ca:	9a02      	ldr	r2, [sp, #8]
  4097cc:	eb0a 0105 	add.w	r1, sl, r5
  4097d0:	9803      	ldr	r0, [sp, #12]
  4097d2:	4f2f      	ldr	r7, [pc, #188]	; (409890 <_lv_disp_refr_task+0x1a8>)
  4097d4:	47b8      	blx	r7
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
  4097d6:	9a02      	ldr	r2, [sp, #8]
  4097d8:	9903      	ldr	r1, [sp, #12]
  4097da:	eb0b 0005 	add.w	r0, fp, r5
  4097de:	47b8      	blx	r7
                            start_offs += hres * sizeof(lv_color_t);
  4097e0:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  4097e4:	3401      	adds	r4, #1
  4097e6:	b224      	sxth	r4, r4
  4097e8:	4b1b      	ldr	r3, [pc, #108]	; (409858 <_lv_disp_refr_task+0x170>)
  4097ea:	681b      	ldr	r3, [r3, #0]
  4097ec:	f108 020c 	add.w	r2, r8, #12
  4097f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4097f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  4097f8:	429c      	cmp	r4, r3
  4097fa:	dde6      	ble.n	4097ca <_lv_disp_refr_task+0xe2>
                for(a = 0; a < disp_refr->inv_p; a++) {
  4097fc:	3601      	adds	r6, #1
  4097fe:	b2b6      	uxth	r6, r6
  409800:	46b0      	mov	r8, r6
  409802:	4b15      	ldr	r3, [pc, #84]	; (409858 <_lv_disp_refr_task+0x170>)
  409804:	681b      	ldr	r3, [r3, #0]
  409806:	f8b3 2182 	ldrh.w	r2, [r3, #386]	; 0x182
  40980a:	f3c2 0209 	ubfx	r2, r2, #0, #10
  40980e:	4296      	cmp	r6, r2
  409810:	da18      	bge.n	409844 <_lv_disp_refr_task+0x15c>
                    if(disp_refr->inv_area_joined[a] == 0) {
  409812:	199a      	adds	r2, r3, r6
  409814:	f892 2162 	ldrb.w	r2, [r2, #354]	; 0x162
  409818:	2a00      	cmp	r2, #0
  40981a:	d1ef      	bne.n	4097fc <_lv_disp_refr_task+0x114>
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
  40981c:	f108 020c 	add.w	r2, r8, #12
  409820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  409824:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  409828:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40982c:	fb04 2509 	mla	r5, r4, r9, r2
                        uint32_t start_offs =
  409830:	006d      	lsls	r5, r5, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  409832:	88db      	ldrh	r3, [r3, #6]
  409834:	b292      	uxth	r2, r2
  409836:	1a9b      	subs	r3, r3, r2
  409838:	b29b      	uxth	r3, r3
  40983a:	3301      	adds	r3, #1
  40983c:	b21b      	sxth	r3, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
  40983e:	005b      	lsls	r3, r3, #1
  409840:	9302      	str	r3, [sp, #8]
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
  409842:	e7d1      	b.n	4097e8 <_lv_disp_refr_task+0x100>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
  409844:	9b03      	ldr	r3, [sp, #12]
  409846:	2b00      	cmp	r3, #0
  409848:	f43f af7f 	beq.w	40974a <_lv_disp_refr_task+0x62>
  40984c:	4618      	mov	r0, r3
  40984e:	4b11      	ldr	r3, [pc, #68]	; (409894 <_lv_disp_refr_task+0x1ac>)
  409850:	4798      	blx	r3
  409852:	e77a      	b.n	40974a <_lv_disp_refr_task+0x62>
  409854:	00414a3d 	.word	0x00414a3d
  409858:	2040c3a0 	.word	0x2040c3a0
  40985c:	00416819 	.word	0x00416819
  409860:	00408e55 	.word	0x00408e55
  409864:	00409629 	.word	0x00409629
  409868:	00416075 	.word	0x00416075
  40986c:	00414591 	.word	0x00414591
  409870:	00414785 	.word	0x00414785
  409874:	004163f5 	.word	0x004163f5
  409878:	00414a59 	.word	0x00414a59
  40987c:	2040c3a4 	.word	0x2040c3a4
  409880:	00414735 	.word	0x00414735
  409884:	00409275 	.word	0x00409275
  409888:	00416269 	.word	0x00416269
  40988c:	00414631 	.word	0x00414631
  409890:	004160d1 	.word	0x004160d1
  409894:	00416019 	.word	0x00416019

00409898 <lv_style_init>:
/**
 * Initialize a style
 * @param style pointer to a style to initialize
 */
void lv_style_init(lv_style_t * style)
{
  409898:	b508      	push	{r3, lr}
    _lv_memset_00(style, sizeof(lv_style_t));
  40989a:	2104      	movs	r1, #4
  40989c:	4b01      	ldr	r3, [pc, #4]	; (4098a4 <lv_style_init+0xc>)
  40989e:	4798      	blx	r3
  4098a0:	bd08      	pop	{r3, pc}
  4098a2:	bf00      	nop
  4098a4:	004163f5 	.word	0x004163f5

004098a8 <lv_style_list_init>:
/**
 * Initialize a style list
 * @param list a style list to initialize
 */
void lv_style_list_init(lv_style_list_t * list)
{
  4098a8:	b508      	push	{r3, lr}
    _lv_memset_00(list, sizeof(lv_style_list_t));
  4098aa:	2108      	movs	r1, #8
  4098ac:	4b01      	ldr	r3, [pc, #4]	; (4098b4 <lv_style_list_init+0xc>)
  4098ae:	4798      	blx	r3
  4098b0:	bd08      	pop	{r3, pc}
  4098b2:	bf00      	nop
  4098b4:	004163f5 	.word	0x004163f5

004098b8 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
  4098b8:	b570      	push	{r4, r5, r6, lr}
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
  4098ba:	7903      	ldrb	r3, [r0, #4]
  4098bc:	f013 063f 	ands.w	r6, r3, #63	; 0x3f
  4098c0:	d051      	beq.n	409966 <_lv_style_list_remove_style+0xae>
  4098c2:	2300      	movs	r3, #0

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
  4098c4:	7902      	ldrb	r2, [r0, #4]
  4098c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  4098ca:	4293      	cmp	r3, r2
  4098cc:	da07      	bge.n	4098de <_lv_style_list_remove_style+0x26>
        if(list->style_list[i] == style) {
  4098ce:	6804      	ldr	r4, [r0, #0]
  4098d0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  4098d4:	428c      	cmp	r4, r1
  4098d6:	d016      	beq.n	409906 <_lv_style_list_remove_style+0x4e>
    for(i = 0; i < list->style_cnt; i++) {
  4098d8:	3301      	adds	r3, #1
  4098da:	b2db      	uxtb	r3, r3
  4098dc:	e7f2      	b.n	4098c4 <_lv_style_list_remove_style+0xc>
    bool found = false;
  4098de:	2300      	movs	r3, #0
            found = true;
            break;
        }
    }
    if(found == false) return;
  4098e0:	2b00      	cmp	r3, #0
  4098e2:	d040      	beq.n	409966 <_lv_style_list_remove_style+0xae>
  4098e4:	460d      	mov	r5, r1
  4098e6:	4604      	mov	r4, r0

    if(list->style_cnt == 1) {
  4098e8:	2e01      	cmp	r6, #1
  4098ea:	d00e      	beq.n	40990a <_lv_style_list_remove_style+0x52>
        list->style_cnt = 0;
        list->has_local = 0;
        return;
    }

    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
  4098ec:	3a01      	subs	r2, #1
  4098ee:	0090      	lsls	r0, r2, #2
  4098f0:	4b1d      	ldr	r3, [pc, #116]	; (409968 <_lv_style_list_remove_style+0xb0>)
  4098f2:	4798      	blx	r3
  4098f4:	4606      	mov	r6, r0
    LV_ASSERT_MEM(new_classes);
  4098f6:	4b1d      	ldr	r3, [pc, #116]	; (40996c <_lv_style_list_remove_style+0xb4>)
  4098f8:	4798      	blx	r3
  4098fa:	b190      	cbz	r0, 409922 <_lv_style_list_remove_style+0x6a>
    if(new_classes == NULL) {
  4098fc:	2e00      	cmp	r6, #0
  4098fe:	d032      	beq.n	409966 <_lv_style_list_remove_style+0xae>
  409900:	2100      	movs	r1, #0
  409902:	460b      	mov	r3, r1
  409904:	e015      	b.n	409932 <_lv_style_list_remove_style+0x7a>
            found = true;
  409906:	2301      	movs	r3, #1
  409908:	e7ea      	b.n	4098e0 <_lv_style_list_remove_style+0x28>
        lv_mem_free(list->style_list);
  40990a:	6800      	ldr	r0, [r0, #0]
  40990c:	4b18      	ldr	r3, [pc, #96]	; (409970 <_lv_style_list_remove_style+0xb8>)
  40990e:	4798      	blx	r3
        list->style_list = NULL;
  409910:	2200      	movs	r2, #0
  409912:	6022      	str	r2, [r4, #0]
        list->style_cnt = 0;
  409914:	7923      	ldrb	r3, [r4, #4]
        list->has_local = 0;
  409916:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  40991a:	f362 1386 	bfi	r3, r2, #6, #1
  40991e:	7123      	strb	r3, [r4, #4]
        return;
  409920:	bd70      	pop	{r4, r5, r6, pc}
    LV_ASSERT_MEM(new_classes);
  409922:	4632      	mov	r2, r6
  409924:	2300      	movs	r3, #0
  409926:	4813      	ldr	r0, [pc, #76]	; (409974 <_lv_style_list_remove_style+0xbc>)
  409928:	4913      	ldr	r1, [pc, #76]	; (409978 <_lv_style_list_remove_style+0xc0>)
  40992a:	4788      	blx	r1
  40992c:	e7fe      	b.n	40992c <_lv_style_list_remove_style+0x74>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
        return;
    }
    uint8_t j;
    for(i = 0, j = 0; i < list->style_cnt; i++) {
  40992e:	3301      	adds	r3, #1
  409930:	b2db      	uxtb	r3, r3
  409932:	7922      	ldrb	r2, [r4, #4]
  409934:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409938:	4293      	cmp	r3, r2
  40993a:	da09      	bge.n	409950 <_lv_style_list_remove_style+0x98>
        if(list->style_list[i] == style) continue;
  40993c:	6822      	ldr	r2, [r4, #0]
  40993e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  409942:	4295      	cmp	r5, r2
  409944:	d0f3      	beq.n	40992e <_lv_style_list_remove_style+0x76>
        new_classes[j] = list->style_list[i];
  409946:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
        j++;
  40994a:	3101      	adds	r1, #1
  40994c:	b2c9      	uxtb	r1, r1
  40994e:	e7ee      	b.n	40992e <_lv_style_list_remove_style+0x76>

    }

    lv_mem_free(list->style_list);
  409950:	6820      	ldr	r0, [r4, #0]
  409952:	4b07      	ldr	r3, [pc, #28]	; (409970 <_lv_style_list_remove_style+0xb8>)
  409954:	4798      	blx	r3

    list->style_cnt--;
  409956:	7923      	ldrb	r3, [r4, #4]
  409958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  40995c:	323f      	adds	r2, #63	; 0x3f
  40995e:	f362 0305 	bfi	r3, r2, #0, #6
  409962:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409964:	6026      	str	r6, [r4, #0]
  409966:	bd70      	pop	{r4, r5, r6, pc}
  409968:	00415ec1 	.word	0x00415ec1
  40996c:	004157b9 	.word	0x004157b9
  409970:	00415f85 	.word	0x00415f85
  409974:	004260b0 	.word	0x004260b0
  409978:	004157c5 	.word	0x004157c5

0040997c <_lv_style_list_add_style>:
    if(list == NULL) return;
  40997c:	2800      	cmp	r0, #0
  40997e:	d048      	beq.n	409a12 <_lv_style_list_add_style+0x96>
{
  409980:	b570      	push	{r4, r5, r6, lr}
  409982:	4604      	mov	r4, r0
  409984:	460e      	mov	r6, r1
    _lv_style_list_remove_style(list, style);
  409986:	4b23      	ldr	r3, [pc, #140]	; (409a14 <_lv_style_list_add_style+0x98>)
  409988:	4798      	blx	r3
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
  40998a:	7923      	ldrb	r3, [r4, #4]
  40998c:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  409990:	d117      	bne.n	4099c2 <_lv_style_list_add_style+0x46>
  409992:	2004      	movs	r0, #4
  409994:	4b20      	ldr	r3, [pc, #128]	; (409a18 <_lv_style_list_add_style+0x9c>)
  409996:	4798      	blx	r3
  409998:	4605      	mov	r5, r0
    LV_ASSERT_MEM(new_classes);
  40999a:	4628      	mov	r0, r5
  40999c:	4b1f      	ldr	r3, [pc, #124]	; (409a1c <_lv_style_list_add_style+0xa0>)
  40999e:	4798      	blx	r3
  4099a0:	b1c8      	cbz	r0, 4099d6 <_lv_style_list_add_style+0x5a>
    if(new_classes == NULL) {
  4099a2:	2d00      	cmp	r5, #0
  4099a4:	d034      	beq.n	409a10 <_lv_style_list_add_style+0x94>
    if(list->has_trans) first_style++;
  4099a6:	7923      	ldrb	r3, [r4, #4]
  4099a8:	f013 0f80 	tst.w	r3, #128	; 0x80
  4099ac:	d119      	bne.n	4099e2 <_lv_style_list_add_style+0x66>
    uint8_t first_style = 0;
  4099ae:	2200      	movs	r2, #0
    if(list->has_local) first_style++;
  4099b0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4099b4:	d001      	beq.n	4099ba <_lv_style_list_add_style+0x3e>
  4099b6:	3201      	adds	r2, #1
  4099b8:	b2d2      	uxtb	r2, r2
    for(i = list->style_cnt; i > first_style; i--) {
  4099ba:	7923      	ldrb	r3, [r4, #4]
  4099bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  4099c0:	e01a      	b.n	4099f8 <_lv_style_list_add_style+0x7c>
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
  4099c2:	7921      	ldrb	r1, [r4, #4]
  4099c4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4099c8:	3101      	adds	r1, #1
  4099ca:	0089      	lsls	r1, r1, #2
  4099cc:	6820      	ldr	r0, [r4, #0]
  4099ce:	4b14      	ldr	r3, [pc, #80]	; (409a20 <_lv_style_list_add_style+0xa4>)
  4099d0:	4798      	blx	r3
  4099d2:	4605      	mov	r5, r0
  4099d4:	e7e1      	b.n	40999a <_lv_style_list_add_style+0x1e>
    LV_ASSERT_MEM(new_classes);
  4099d6:	462a      	mov	r2, r5
  4099d8:	2300      	movs	r3, #0
  4099da:	4812      	ldr	r0, [pc, #72]	; (409a24 <_lv_style_list_add_style+0xa8>)
  4099dc:	4912      	ldr	r1, [pc, #72]	; (409a28 <_lv_style_list_add_style+0xac>)
  4099de:	4788      	blx	r1
  4099e0:	e7fe      	b.n	4099e0 <_lv_style_list_add_style+0x64>
    if(list->has_trans) first_style++;
  4099e2:	2201      	movs	r2, #1
  4099e4:	e7e4      	b.n	4099b0 <_lv_style_list_add_style+0x34>
        new_classes[i] = new_classes[i - 1];
  4099e6:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
  4099ea:	4419      	add	r1, r3
  4099ec:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
  4099f0:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
    for(i = list->style_cnt; i > first_style; i--) {
  4099f4:	3b01      	subs	r3, #1
  4099f6:	b2db      	uxtb	r3, r3
  4099f8:	4293      	cmp	r3, r2
  4099fa:	d8f4      	bhi.n	4099e6 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
  4099fc:	f845 6022 	str.w	r6, [r5, r2, lsl #2]
    list->style_cnt++;
  409a00:	7923      	ldrb	r3, [r4, #4]
  409a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  409a06:	3201      	adds	r2, #1
  409a08:	f362 0305 	bfi	r3, r2, #0, #6
  409a0c:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
  409a0e:	6025      	str	r5, [r4, #0]
  409a10:	bd70      	pop	{r4, r5, r6, pc}
  409a12:	4770      	bx	lr
  409a14:	004098b9 	.word	0x004098b9
  409a18:	00415ec1 	.word	0x00415ec1
  409a1c:	004157b9 	.word	0x004157b9
  409a20:	004161f1 	.word	0x004161f1
  409a24:	004260b0 	.word	0x004260b0
  409a28:	004157c5 	.word	0x004157c5

00409a2c <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
  409a2c:	b538      	push	{r3, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
  409a2e:	7902      	ldrb	r2, [r0, #4]
  409a30:	f012 0f40 	tst.w	r2, #64	; 0x40
  409a34:	d015      	beq.n	409a62 <get_alloc_local_style+0x36>
  409a36:	09d3      	lsrs	r3, r2, #7
    if(list->has_trans && list->skip_trans) id++;
  409a38:	8881      	ldrh	r1, [r0, #4]
  409a3a:	f401 71c0 	and.w	r1, r1, #384	; 0x180
  409a3e:	f5b1 7fc0 	cmp.w	r1, #384	; 0x180
  409a42:	d00c      	beq.n	409a5e <get_alloc_local_style+0x32>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409a44:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  409a48:	d027      	beq.n	409a9a <get_alloc_local_style+0x6e>
  409a4a:	7902      	ldrb	r2, [r0, #4]
  409a4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  409a50:	4293      	cmp	r3, r2
  409a52:	da24      	bge.n	409a9e <get_alloc_local_style+0x72>
    return list->style_list[id];
  409a54:	6802      	ldr	r2, [r0, #0]
  409a56:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
  409a5a:	4628      	mov	r0, r5
  409a5c:	bd38      	pop	{r3, r4, r5, pc}
    if(list->has_trans && list->skip_trans) id++;
  409a5e:	3301      	adds	r3, #1
  409a60:	e7f0      	b.n	409a44 <get_alloc_local_style+0x18>
  409a62:	4604      	mov	r4, r0
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
  409a64:	2004      	movs	r0, #4
  409a66:	4b0f      	ldr	r3, [pc, #60]	; (409aa4 <get_alloc_local_style+0x78>)
  409a68:	4798      	blx	r3
  409a6a:	4605      	mov	r5, r0
    LV_ASSERT_MEM(local_style);
  409a6c:	4b0e      	ldr	r3, [pc, #56]	; (409aa8 <get_alloc_local_style+0x7c>)
  409a6e:	4798      	blx	r3
  409a70:	b168      	cbz	r0, 409a8e <get_alloc_local_style+0x62>
    if(local_style == NULL) {
  409a72:	2d00      	cmp	r5, #0
  409a74:	d0f1      	beq.n	409a5a <get_alloc_local_style+0x2e>
    lv_style_init(local_style);
  409a76:	4628      	mov	r0, r5
  409a78:	4b0c      	ldr	r3, [pc, #48]	; (409aac <get_alloc_local_style+0x80>)
  409a7a:	4798      	blx	r3
    _lv_style_list_add_style(list, local_style);
  409a7c:	4629      	mov	r1, r5
  409a7e:	4620      	mov	r0, r4
  409a80:	4b0b      	ldr	r3, [pc, #44]	; (409ab0 <get_alloc_local_style+0x84>)
  409a82:	4798      	blx	r3
    list->has_local = 1;
  409a84:	7923      	ldrb	r3, [r4, #4]
  409a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  409a8a:	7123      	strb	r3, [r4, #4]
    return local_style;
  409a8c:	e7e5      	b.n	409a5a <get_alloc_local_style+0x2e>
    LV_ASSERT_MEM(local_style);
  409a8e:	462a      	mov	r2, r5
  409a90:	2300      	movs	r3, #0
  409a92:	4808      	ldr	r0, [pc, #32]	; (409ab4 <get_alloc_local_style+0x88>)
  409a94:	4908      	ldr	r1, [pc, #32]	; (409ab8 <get_alloc_local_style+0x8c>)
  409a96:	4788      	blx	r1
  409a98:	e7fe      	b.n	409a98 <get_alloc_local_style+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  409a9a:	2500      	movs	r5, #0
  409a9c:	e7dd      	b.n	409a5a <get_alloc_local_style+0x2e>
  409a9e:	2500      	movs	r5, #0
  409aa0:	e7db      	b.n	409a5a <get_alloc_local_style+0x2e>
  409aa2:	bf00      	nop
  409aa4:	00415ec1 	.word	0x00415ec1
  409aa8:	004157b9 	.word	0x004157b9
  409aac:	00409899 	.word	0x00409899
  409ab0:	0040997d 	.word	0x0040997d
  409ab4:	004260b0 	.word	0x004260b0
  409ab8:	004157c5 	.word	0x004157c5

00409abc <lv_style_reset>:
{
  409abc:	b510      	push	{r4, lr}
  409abe:	4604      	mov	r4, r0
    lv_mem_free(style->map);
  409ac0:	6800      	ldr	r0, [r0, #0]
  409ac2:	4b02      	ldr	r3, [pc, #8]	; (409acc <lv_style_reset+0x10>)
  409ac4:	4798      	blx	r3
    style->map = NULL;
  409ac6:	2300      	movs	r3, #0
  409ac8:	6023      	str	r3, [r4, #0]
  409aca:	bd10      	pop	{r4, pc}
  409acc:	00415f85 	.word	0x00415f85

00409ad0 <_lv_style_get_mem_size>:
    if(style->map == NULL) return 0;
  409ad0:	6803      	ldr	r3, [r0, #0]
  409ad2:	b30b      	cbz	r3, 409b18 <_lv_style_get_mem_size+0x48>
{
  409ad4:	b082      	sub	sp, #8
  409ad6:	2200      	movs	r2, #0
  409ad8:	e001      	b.n	409ade <_lv_style_get_mem_size+0xe>
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ada:	2304      	movs	r3, #4
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
  409adc:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409ade:	6803      	ldr	r3, [r0, #0]
  409ae0:	5c99      	ldrb	r1, [r3, r2]
  409ae2:	f88d 1006 	strb.w	r1, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409ae6:	4413      	add	r3, r2
  409ae8:	785b      	ldrb	r3, [r3, #1]
  409aea:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409aee:	b2cb      	uxtb	r3, r1
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409af0:	2bff      	cmp	r3, #255	; 0xff
  409af2:	d00d      	beq.n	409b10 <_lv_style_get_mem_size+0x40>
    prop_id &= 0xF;
  409af4:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409af8:	2b08      	cmp	r3, #8
  409afa:	d9ee      	bls.n	409ada <_lv_style_get_mem_size+0xa>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409afc:	2b0b      	cmp	r3, #11
  409afe:	d903      	bls.n	409b08 <_lv_style_get_mem_size+0x38>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409b00:	2b0d      	cmp	r3, #13
  409b02:	d803      	bhi.n	409b0c <_lv_style_get_mem_size+0x3c>
  409b04:	2303      	movs	r3, #3
  409b06:	e7e9      	b.n	409adc <_lv_style_get_mem_size+0xc>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409b08:	2304      	movs	r3, #4
  409b0a:	e7e7      	b.n	409adc <_lv_style_get_mem_size+0xc>
    else size += sizeof(const void *);
  409b0c:	2306      	movs	r3, #6
  409b0e:	e7e5      	b.n	409adc <_lv_style_get_mem_size+0xc>
    return i + sizeof(lv_style_property_t);
  409b10:	1c90      	adds	r0, r2, #2
  409b12:	b280      	uxth	r0, r0
}
  409b14:	b002      	add	sp, #8
  409b16:	4770      	bx	lr
    if(style->map == NULL) return 0;
  409b18:	2000      	movs	r0, #0
  409b1a:	4770      	bx	lr

00409b1c <lv_style_copy>:
    if(style_src == NULL) return;
  409b1c:	b181      	cbz	r1, 409b40 <lv_style_copy+0x24>
{
  409b1e:	b570      	push	{r4, r5, r6, lr}
  409b20:	460c      	mov	r4, r1
    if(style_src->map == NULL) return;
  409b22:	680a      	ldr	r2, [r1, #0]
  409b24:	b15a      	cbz	r2, 409b3e <lv_style_copy+0x22>
  409b26:	4605      	mov	r5, r0
    uint16_t size = _lv_style_get_mem_size(style_src);
  409b28:	4608      	mov	r0, r1
  409b2a:	4b06      	ldr	r3, [pc, #24]	; (409b44 <lv_style_copy+0x28>)
  409b2c:	4798      	blx	r3
  409b2e:	4606      	mov	r6, r0
    style_dest->map = lv_mem_alloc(size);
  409b30:	4b05      	ldr	r3, [pc, #20]	; (409b48 <lv_style_copy+0x2c>)
  409b32:	4798      	blx	r3
  409b34:	6028      	str	r0, [r5, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
  409b36:	4632      	mov	r2, r6
  409b38:	6821      	ldr	r1, [r4, #0]
  409b3a:	4b04      	ldr	r3, [pc, #16]	; (409b4c <lv_style_copy+0x30>)
  409b3c:	4798      	blx	r3
  409b3e:	bd70      	pop	{r4, r5, r6, pc}
  409b40:	4770      	bx	lr
  409b42:	bf00      	nop
  409b44:	00409ad1 	.word	0x00409ad1
  409b48:	00415ec1 	.word	0x00415ec1
  409b4c:	004160d1 	.word	0x004160d1

00409b50 <lv_style_remove_prop>:
    if(style == NULL) return false;
  409b50:	2800      	cmp	r0, #0
  409b52:	f000 808d 	beq.w	409c70 <lv_style_remove_prop+0x120>
{
  409b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  409b5a:	b082      	sub	sp, #8
  409b5c:	4604      	mov	r4, r0
    if(style->map == NULL) return -1;
  409b5e:	6803      	ldr	r3, [r0, #0]
  409b60:	2b00      	cmp	r3, #0
  409b62:	d05e      	beq.n	409c22 <lv_style_remove_prop+0xd2>
    uint8_t id_to_find = prop & 0xFF;
  409b64:	b2cd      	uxtb	r5, r1
    attr = (prop >> 8) & 0xFF;
  409b66:	0a0e      	lsrs	r6, r1, #8
    size_t i = 0;
  409b68:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409b6a:	f04f 37ff 	mov.w	r7, #4294967295
    int16_t weight = -1;
  409b6e:	46be      	mov	lr, r7
  409b70:	e03b      	b.n	409bea <lv_style_remove_prop+0x9a>
    prop_p[0] = style->map[idx];
  409b72:	f8d4 c000 	ldr.w	ip, [r4]
  409b76:	f81c 8002 	ldrb.w	r8, [ip, r2]
  409b7a:	f88d 8006 	strb.w	r8, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409b7e:	f81c 0000 	ldrb.w	r0, [ip, r0]
  409b82:	f88d 0007 	strb.w	r0, [sp, #7]
    return prop;
  409b86:	f8bd c006 	ldrh.w	ip, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409b8a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
  409b8e:	fa5f f08c 	uxtb.w	r0, ip
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409b92:	ea86 0800 	eor.w	r8, r6, r0
  409b96:	f018 0f7f 	tst.w	r8, #127	; 0x7f
  409b9a:	d00c      	beq.n	409bb6 <lv_style_remove_prop+0x66>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409b9c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  409ba0:	f006 087f 	and.w	r8, r6, #127	; 0x7f
  409ba4:	ea30 0808 	bics.w	r8, r0, r8
  409ba8:	d12d      	bne.n	409c06 <lv_style_remove_prop+0xb6>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409baa:	4570      	cmp	r0, lr
  409bac:	dd2b      	ble.n	409c06 <lv_style_remove_prop+0xb6>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409bae:	f00c 0e7f 	and.w	lr, ip, #127	; 0x7f
                    id_guess = i;
  409bb2:	b217      	sxth	r7, r2
  409bb4:	e027      	b.n	409c06 <lv_style_remove_prop+0xb6>
                return i;
  409bb6:	4617      	mov	r7, r2
    if(id >= 0) {
  409bb8:	2f00      	cmp	r7, #0
  409bba:	db5b      	blt.n	409c74 <lv_style_remove_prop+0x124>
        attr_found = get_style_prop_attr(style, id);
  409bbc:	463d      	mov	r5, r7
    prop_p[0] = style->map[idx];
  409bbe:	6823      	ldr	r3, [r4, #0]
  409bc0:	5dda      	ldrb	r2, [r3, r7]
  409bc2:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409bc6:	441f      	add	r7, r3
  409bc8:	787b      	ldrb	r3, [r7, #1]
  409bca:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  409bce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        attr_goal = (prop >> 8) & 0xFFU;
  409bd2:	0a0b      	lsrs	r3, r1, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409bd4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
  409bd8:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409bdc:	d024      	beq.n	409c28 <lv_style_remove_prop+0xd8>
    return false;
  409bde:	2000      	movs	r0, #0
}
  409be0:	b002      	add	sp, #8
  409be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409be6:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409be8:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409bea:	6823      	ldr	r3, [r4, #0]
  409bec:	5c98      	ldrb	r0, [r3, r2]
  409bee:	f88d 0006 	strb.w	r0, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  409bf2:	1c50      	adds	r0, r2, #1
  409bf4:	5c1b      	ldrb	r3, [r3, r0]
  409bf6:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  409bfa:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409bfe:	2bff      	cmp	r3, #255	; 0xff
  409c00:	d0da      	beq.n	409bb8 <lv_style_remove_prop+0x68>
        if(prop_id == id_to_find) {
  409c02:	429d      	cmp	r5, r3
  409c04:	d0b5      	beq.n	409b72 <lv_style_remove_prop+0x22>
    prop_id &= 0xF;
  409c06:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c0a:	2b08      	cmp	r3, #8
  409c0c:	d9eb      	bls.n	409be6 <lv_style_remove_prop+0x96>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c0e:	2b0b      	cmp	r3, #11
  409c10:	d903      	bls.n	409c1a <lv_style_remove_prop+0xca>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409c12:	2b0d      	cmp	r3, #13
  409c14:	d803      	bhi.n	409c1e <lv_style_remove_prop+0xce>
  409c16:	2303      	movs	r3, #3
  409c18:	e7e6      	b.n	409be8 <lv_style_remove_prop+0x98>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c1a:	2304      	movs	r3, #4
  409c1c:	e7e4      	b.n	409be8 <lv_style_remove_prop+0x98>
    else size += sizeof(const void *);
  409c1e:	2306      	movs	r3, #6
  409c20:	e7e2      	b.n	409be8 <lv_style_remove_prop+0x98>
    if(style->map == NULL) return -1;
  409c22:	f04f 37ff 	mov.w	r7, #4294967295
  409c26:	e7c7      	b.n	409bb8 <lv_style_remove_prop+0x68>
  409c28:	460e      	mov	r6, r1
            uint32_t map_size = _lv_style_get_mem_size(style);
  409c2a:	4620      	mov	r0, r4
  409c2c:	4b12      	ldr	r3, [pc, #72]	; (409c78 <lv_style_remove_prop+0x128>)
  409c2e:	4798      	blx	r3
    prop_id &= 0xF;
  409c30:	f006 010f 	and.w	r1, r6, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c34:	2908      	cmp	r1, #8
  409c36:	d905      	bls.n	409c44 <lv_style_remove_prop+0xf4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c38:	290b      	cmp	r1, #11
  409c3a:	d90f      	bls.n	409c5c <lv_style_remove_prop+0x10c>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409c3c:	290d      	cmp	r1, #13
  409c3e:	d80f      	bhi.n	409c60 <lv_style_remove_prop+0x110>
  409c40:	2603      	movs	r6, #3
  409c42:	e000      	b.n	409c46 <lv_style_remove_prop+0xf6>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409c44:	2604      	movs	r6, #4
            for(i = id; i < map_size - prop_size; i++) {
  409c46:	462b      	mov	r3, r5
  409c48:	b2f2      	uxtb	r2, r6
  409c4a:	1a81      	subs	r1, r0, r2
  409c4c:	428b      	cmp	r3, r1
  409c4e:	d209      	bcs.n	409c64 <lv_style_remove_prop+0x114>
                style->map[i] = style->map[i + prop_size];
  409c50:	6821      	ldr	r1, [r4, #0]
  409c52:	441a      	add	r2, r3
  409c54:	5c8a      	ldrb	r2, [r1, r2]
  409c56:	54ca      	strb	r2, [r1, r3]
            for(i = id; i < map_size - prop_size; i++) {
  409c58:	3301      	adds	r3, #1
  409c5a:	e7f5      	b.n	409c48 <lv_style_remove_prop+0xf8>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409c5c:	2604      	movs	r6, #4
  409c5e:	e7f2      	b.n	409c46 <lv_style_remove_prop+0xf6>
    else size += sizeof(const void *);
  409c60:	2606      	movs	r6, #6
  409c62:	e7f0      	b.n	409c46 <lv_style_remove_prop+0xf6>
    style->map = lv_mem_realloc(style->map, sz);
  409c64:	6820      	ldr	r0, [r4, #0]
  409c66:	4b05      	ldr	r3, [pc, #20]	; (409c7c <lv_style_remove_prop+0x12c>)
  409c68:	4798      	blx	r3
  409c6a:	6020      	str	r0, [r4, #0]
            return true;
  409c6c:	2001      	movs	r0, #1
  409c6e:	e7b7      	b.n	409be0 <lv_style_remove_prop+0x90>
    if(style == NULL) return false;
  409c70:	2000      	movs	r0, #0
  409c72:	4770      	bx	lr
    return false;
  409c74:	2000      	movs	r0, #0
  409c76:	e7b3      	b.n	409be0 <lv_style_remove_prop+0x90>
  409c78:	00409ad1 	.word	0x00409ad1
  409c7c:	004161f1 	.word	0x004161f1

00409c80 <_lv_style_set_int>:
{
  409c80:	b5f0      	push	{r4, r5, r6, r7, lr}
  409c82:	b085      	sub	sp, #20
  409c84:	f8ad 1006 	strh.w	r1, [sp, #6]
  409c88:	f8ad 2004 	strh.w	r2, [sp, #4]
    if(style->map == NULL) return -1;
  409c8c:	6803      	ldr	r3, [r0, #0]
  409c8e:	2b00      	cmp	r3, #0
  409c90:	d061      	beq.n	409d56 <_lv_style_set_int+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409c92:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409c94:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409c96:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409c98:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409c9c:	4627      	mov	r7, r4
  409c9e:	e023      	b.n	409ce8 <_lv_style_set_int+0x68>
    prop_p[0] = style->map[idx];
  409ca0:	f8d0 e000 	ldr.w	lr, [r0]
  409ca4:	f81e c002 	ldrb.w	ip, [lr, r2]
  409ca8:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409cac:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409cb0:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409cb4:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409cb8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409cbc:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409cc0:	ea85 0c01 	eor.w	ip, r5, r1
  409cc4:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409cc8:	d02b      	beq.n	409d22 <_lv_style_set_int+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409cca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409cce:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409cd2:	ea31 0c0c 	bics.w	ip, r1, ip
  409cd6:	d115      	bne.n	409d04 <_lv_style_set_int+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409cd8:	42b9      	cmp	r1, r7
  409cda:	dd13      	ble.n	409d04 <_lv_style_set_int+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409cdc:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409ce0:	b214      	sxth	r4, r2
  409ce2:	e00f      	b.n	409d04 <_lv_style_set_int+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409ce4:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409ce6:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409ce8:	6803      	ldr	r3, [r0, #0]
  409cea:	5c99      	ldrb	r1, [r3, r2]
  409cec:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409cf0:	1c51      	adds	r1, r2, #1
  409cf2:	5c5b      	ldrb	r3, [r3, r1]
  409cf4:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409cf8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409cfc:	2bff      	cmp	r3, #255	; 0xff
  409cfe:	d00f      	beq.n	409d20 <_lv_style_set_int+0xa0>
        if(prop_id == id_to_find) {
  409d00:	429e      	cmp	r6, r3
  409d02:	d0cd      	beq.n	409ca0 <_lv_style_set_int+0x20>
    prop_id &= 0xF;
  409d04:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409d08:	2b08      	cmp	r3, #8
  409d0a:	d9eb      	bls.n	409ce4 <_lv_style_set_int+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409d0c:	2b0b      	cmp	r3, #11
  409d0e:	d903      	bls.n	409d18 <_lv_style_set_int+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409d10:	2b0d      	cmp	r3, #13
  409d12:	d803      	bhi.n	409d1c <_lv_style_set_int+0x9c>
  409d14:	2303      	movs	r3, #3
  409d16:	e7e6      	b.n	409ce6 <_lv_style_set_int+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409d18:	2304      	movs	r3, #4
  409d1a:	e7e4      	b.n	409ce6 <_lv_style_set_int+0x66>
    else size += sizeof(const void *);
  409d1c:	2306      	movs	r3, #6
  409d1e:	e7e2      	b.n	409ce6 <_lv_style_set_int+0x66>
    return id_guess;
  409d20:	4622      	mov	r2, r4
    if(id >= 0) {
  409d22:	2a00      	cmp	r2, #0
  409d24:	db23      	blt.n	409d6e <_lv_style_set_int+0xee>
    prop_p[0] = style->map[idx];
  409d26:	6803      	ldr	r3, [r0, #0]
  409d28:	5c99      	ldrb	r1, [r3, r2]
  409d2a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409d2e:	4413      	add	r3, r2
  409d30:	785b      	ldrb	r3, [r3, #1]
  409d32:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409d36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409d3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409d3e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409d40:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409d44:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409d48:	d111      	bne.n	409d6e <_lv_style_set_int+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
  409d4a:	6803      	ldr	r3, [r0, #0]
  409d4c:	3202      	adds	r2, #2
  409d4e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409d50:	a901      	add	r1, sp, #4
  409d52:	2302      	movs	r3, #2
  409d54:	e007      	b.n	409d66 <_lv_style_set_int+0xe6>
    if(style->map == NULL) return -1;
  409d56:	f04f 32ff 	mov.w	r2, #4294967295
  409d5a:	e7e2      	b.n	409d22 <_lv_style_set_int+0xa2>
        *d8 = *s8;
  409d5c:	f811 0b01 	ldrb.w	r0, [r1], #1
  409d60:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409d64:	3b01      	subs	r3, #1
    while(len) {
  409d66:	2b00      	cmp	r3, #0
  409d68:	d1f8      	bne.n	409d5c <_lv_style_set_int+0xdc>
}
  409d6a:	b005      	add	sp, #20
  409d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409d6e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409d70:	23ff      	movs	r3, #255	; 0xff
  409d72:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409d76:	4b21      	ldr	r3, [pc, #132]	; (409dfc <_lv_style_set_int+0x17c>)
  409d78:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409d7a:	4603      	mov	r3, r0
  409d7c:	b908      	cbnz	r0, 409d82 <_lv_style_set_int+0x102>
  409d7e:	3302      	adds	r3, #2
  409d80:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
  409d82:	3304      	adds	r3, #4
  409d84:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409d86:	4621      	mov	r1, r4
  409d88:	6828      	ldr	r0, [r5, #0]
  409d8a:	4b1d      	ldr	r3, [pc, #116]	; (409e00 <_lv_style_set_int+0x180>)
  409d8c:	4798      	blx	r3
  409d8e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409d90:	4b1c      	ldr	r3, [pc, #112]	; (409e04 <_lv_style_set_int+0x184>)
  409d92:	4798      	blx	r3
  409d94:	b148      	cbz	r0, 409daa <_lv_style_set_int+0x12a>
    if(style == NULL) return;
  409d96:	2d00      	cmp	r5, #0
  409d98:	d0e7      	beq.n	409d6a <_lv_style_set_int+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409d9a:	682b      	ldr	r3, [r5, #0]
  409d9c:	1f20      	subs	r0, r4, #4
  409d9e:	1fa2      	subs	r2, r4, #6
  409da0:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409da2:	f10d 0106 	add.w	r1, sp, #6
  409da6:	2202      	movs	r2, #2
  409da8:	e00a      	b.n	409dc0 <_lv_style_set_int+0x140>
    LV_ASSERT_MEM(style->map);
  409daa:	682a      	ldr	r2, [r5, #0]
  409dac:	2300      	movs	r3, #0
  409dae:	4816      	ldr	r0, [pc, #88]	; (409e08 <_lv_style_set_int+0x188>)
  409db0:	4916      	ldr	r1, [pc, #88]	; (409e0c <_lv_style_set_int+0x18c>)
  409db2:	4788      	blx	r1
  409db4:	e7fe      	b.n	409db4 <_lv_style_set_int+0x134>
        *d8 = *s8;
  409db6:	f811 6b01 	ldrb.w	r6, [r1], #1
  409dba:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409dbe:	3a01      	subs	r2, #1
    while(len) {
  409dc0:	2a00      	cmp	r2, #0
  409dc2:	d1f8      	bne.n	409db6 <_lv_style_set_int+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
  409dc4:	682b      	ldr	r3, [r5, #0]
  409dc6:	3c02      	subs	r4, #2
  409dc8:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409dca:	a901      	add	r1, sp, #4
  409dcc:	2202      	movs	r2, #2
  409dce:	e004      	b.n	409dda <_lv_style_set_int+0x15a>
        *d8 = *s8;
  409dd0:	f811 0b01 	ldrb.w	r0, [r1], #1
  409dd4:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409dd8:	3a01      	subs	r2, #1
    while(len) {
  409dda:	2a00      	cmp	r2, #0
  409ddc:	d1f8      	bne.n	409dd0 <_lv_style_set_int+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409dde:	682b      	ldr	r3, [r5, #0]
  409de0:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409de2:	f10d 020e 	add.w	r2, sp, #14
  409de6:	2302      	movs	r3, #2
  409de8:	e004      	b.n	409df4 <_lv_style_set_int+0x174>
        *d8 = *s8;
  409dea:	f812 1b01 	ldrb.w	r1, [r2], #1
  409dee:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409df2:	3b01      	subs	r3, #1
    while(len) {
  409df4:	2b00      	cmp	r3, #0
  409df6:	d1f8      	bne.n	409dea <_lv_style_set_int+0x16a>
  409df8:	e7b7      	b.n	409d6a <_lv_style_set_int+0xea>
  409dfa:	bf00      	nop
  409dfc:	00409ad1 	.word	0x00409ad1
  409e00:	004161f1 	.word	0x004161f1
  409e04:	004157b9 	.word	0x004157b9
  409e08:	004260b0 	.word	0x004260b0
  409e0c:	004157c5 	.word	0x004157c5

00409e10 <_lv_style_set_color>:
{
  409e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  409e12:	b085      	sub	sp, #20
  409e14:	f8ad 2004 	strh.w	r2, [sp, #4]
  409e18:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  409e1c:	6803      	ldr	r3, [r0, #0]
  409e1e:	2b00      	cmp	r3, #0
  409e20:	d061      	beq.n	409ee6 <_lv_style_set_color+0xd6>
    uint8_t id_to_find = prop & 0xFF;
  409e22:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409e24:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409e26:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409e28:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409e2c:	4627      	mov	r7, r4
  409e2e:	e023      	b.n	409e78 <_lv_style_set_color+0x68>
    prop_p[0] = style->map[idx];
  409e30:	f8d0 e000 	ldr.w	lr, [r0]
  409e34:	f81e c002 	ldrb.w	ip, [lr, r2]
  409e38:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409e3c:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409e40:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409e44:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409e48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409e4c:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409e50:	ea85 0c01 	eor.w	ip, r5, r1
  409e54:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409e58:	d02b      	beq.n	409eb2 <_lv_style_set_color+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409e5a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409e5e:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409e62:	ea31 0c0c 	bics.w	ip, r1, ip
  409e66:	d115      	bne.n	409e94 <_lv_style_set_color+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409e68:	42b9      	cmp	r1, r7
  409e6a:	dd13      	ble.n	409e94 <_lv_style_set_color+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409e6c:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  409e70:	b214      	sxth	r4, r2
  409e72:	e00f      	b.n	409e94 <_lv_style_set_color+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409e74:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  409e76:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  409e78:	6803      	ldr	r3, [r0, #0]
  409e7a:	5c99      	ldrb	r1, [r3, r2]
  409e7c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409e80:	1c51      	adds	r1, r2, #1
  409e82:	5c5b      	ldrb	r3, [r3, r1]
  409e84:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  409e88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  409e8c:	2bff      	cmp	r3, #255	; 0xff
  409e8e:	d00f      	beq.n	409eb0 <_lv_style_set_color+0xa0>
        if(prop_id == id_to_find) {
  409e90:	429e      	cmp	r6, r3
  409e92:	d0cd      	beq.n	409e30 <_lv_style_set_color+0x20>
    prop_id &= 0xF;
  409e94:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  409e98:	2b08      	cmp	r3, #8
  409e9a:	d9eb      	bls.n	409e74 <_lv_style_set_color+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409e9c:	2b0b      	cmp	r3, #11
  409e9e:	d903      	bls.n	409ea8 <_lv_style_set_color+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  409ea0:	2b0d      	cmp	r3, #13
  409ea2:	d803      	bhi.n	409eac <_lv_style_set_color+0x9c>
  409ea4:	2303      	movs	r3, #3
  409ea6:	e7e6      	b.n	409e76 <_lv_style_set_color+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  409ea8:	2304      	movs	r3, #4
  409eaa:	e7e4      	b.n	409e76 <_lv_style_set_color+0x66>
    else size += sizeof(const void *);
  409eac:	2306      	movs	r3, #6
  409eae:	e7e2      	b.n	409e76 <_lv_style_set_color+0x66>
    return id_guess;
  409eb0:	4622      	mov	r2, r4
    if(id >= 0) {
  409eb2:	2a00      	cmp	r2, #0
  409eb4:	db23      	blt.n	409efe <_lv_style_set_color+0xee>
    prop_p[0] = style->map[idx];
  409eb6:	6803      	ldr	r3, [r0, #0]
  409eb8:	5c99      	ldrb	r1, [r3, r2]
  409eba:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409ebe:	4413      	add	r3, r2
  409ec0:	785b      	ldrb	r3, [r3, #1]
  409ec2:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  409ec6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  409eca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  409ece:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  409ed0:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  409ed4:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  409ed8:	d111      	bne.n	409efe <_lv_style_set_color+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
  409eda:	6803      	ldr	r3, [r0, #0]
  409edc:	3202      	adds	r2, #2
  409ede:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409ee0:	a901      	add	r1, sp, #4
  409ee2:	2302      	movs	r3, #2
  409ee4:	e007      	b.n	409ef6 <_lv_style_set_color+0xe6>
    if(style->map == NULL) return -1;
  409ee6:	f04f 32ff 	mov.w	r2, #4294967295
  409eea:	e7e2      	b.n	409eb2 <_lv_style_set_color+0xa2>
        *d8 = *s8;
  409eec:	f811 0b01 	ldrb.w	r0, [r1], #1
  409ef0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  409ef4:	3b01      	subs	r3, #1
    while(len) {
  409ef6:	2b00      	cmp	r3, #0
  409ef8:	d1f8      	bne.n	409eec <_lv_style_set_color+0xdc>
}
  409efa:	b005      	add	sp, #20
  409efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  409efe:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  409f00:	23ff      	movs	r3, #255	; 0xff
  409f02:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  409f06:	4b21      	ldr	r3, [pc, #132]	; (409f8c <_lv_style_set_color+0x17c>)
  409f08:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  409f0a:	4603      	mov	r3, r0
  409f0c:	b908      	cbnz	r0, 409f12 <_lv_style_set_color+0x102>
  409f0e:	3302      	adds	r3, #2
  409f10:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
  409f12:	3304      	adds	r3, #4
  409f14:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  409f16:	4621      	mov	r1, r4
  409f18:	6828      	ldr	r0, [r5, #0]
  409f1a:	4b1d      	ldr	r3, [pc, #116]	; (409f90 <_lv_style_set_color+0x180>)
  409f1c:	4798      	blx	r3
  409f1e:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  409f20:	4b1c      	ldr	r3, [pc, #112]	; (409f94 <_lv_style_set_color+0x184>)
  409f22:	4798      	blx	r3
  409f24:	b148      	cbz	r0, 409f3a <_lv_style_set_color+0x12a>
    if(style == NULL) return;
  409f26:	2d00      	cmp	r5, #0
  409f28:	d0e7      	beq.n	409efa <_lv_style_set_color+0xea>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  409f2a:	682b      	ldr	r3, [r5, #0]
  409f2c:	1f20      	subs	r0, r4, #4
  409f2e:	1fa2      	subs	r2, r4, #6
  409f30:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  409f32:	f10d 0106 	add.w	r1, sp, #6
  409f36:	2202      	movs	r2, #2
  409f38:	e00a      	b.n	409f50 <_lv_style_set_color+0x140>
    LV_ASSERT_MEM(style->map);
  409f3a:	682a      	ldr	r2, [r5, #0]
  409f3c:	2300      	movs	r3, #0
  409f3e:	4816      	ldr	r0, [pc, #88]	; (409f98 <_lv_style_set_color+0x188>)
  409f40:	4916      	ldr	r1, [pc, #88]	; (409f9c <_lv_style_set_color+0x18c>)
  409f42:	4788      	blx	r1
  409f44:	e7fe      	b.n	409f44 <_lv_style_set_color+0x134>
        *d8 = *s8;
  409f46:	f811 6b01 	ldrb.w	r6, [r1], #1
  409f4a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  409f4e:	3a01      	subs	r2, #1
    while(len) {
  409f50:	2a00      	cmp	r2, #0
  409f52:	d1f8      	bne.n	409f46 <_lv_style_set_color+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
  409f54:	682b      	ldr	r3, [r5, #0]
  409f56:	3c02      	subs	r4, #2
  409f58:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  409f5a:	a901      	add	r1, sp, #4
  409f5c:	2202      	movs	r2, #2
  409f5e:	e004      	b.n	409f6a <_lv_style_set_color+0x15a>
        *d8 = *s8;
  409f60:	f811 0b01 	ldrb.w	r0, [r1], #1
  409f64:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  409f68:	3a01      	subs	r2, #1
    while(len) {
  409f6a:	2a00      	cmp	r2, #0
  409f6c:	d1f8      	bne.n	409f60 <_lv_style_set_color+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  409f6e:	682b      	ldr	r3, [r5, #0]
  409f70:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  409f72:	f10d 020e 	add.w	r2, sp, #14
  409f76:	2302      	movs	r3, #2
  409f78:	e004      	b.n	409f84 <_lv_style_set_color+0x174>
        *d8 = *s8;
  409f7a:	f812 1b01 	ldrb.w	r1, [r2], #1
  409f7e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  409f82:	3b01      	subs	r3, #1
    while(len) {
  409f84:	2b00      	cmp	r3, #0
  409f86:	d1f8      	bne.n	409f7a <_lv_style_set_color+0x16a>
  409f88:	e7b7      	b.n	409efa <_lv_style_set_color+0xea>
  409f8a:	bf00      	nop
  409f8c:	00409ad1 	.word	0x00409ad1
  409f90:	004161f1 	.word	0x004161f1
  409f94:	004157b9 	.word	0x004157b9
  409f98:	004260b0 	.word	0x004260b0
  409f9c:	004157c5 	.word	0x004157c5

00409fa0 <_lv_style_set_opa>:
{
  409fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  409fa2:	b085      	sub	sp, #20
  409fa4:	f8ad 1006 	strh.w	r1, [sp, #6]
  409fa8:	f88d 2005 	strb.w	r2, [sp, #5]
    if(style->map == NULL) return -1;
  409fac:	6803      	ldr	r3, [r0, #0]
  409fae:	2b00      	cmp	r3, #0
  409fb0:	d064      	beq.n	40a07c <_lv_style_set_opa+0xdc>
    uint8_t id_to_find = prop & 0xFF;
  409fb2:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  409fb4:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  409fb6:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  409fb8:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  409fbc:	4627      	mov	r7, r4
  409fbe:	e023      	b.n	40a008 <_lv_style_set_opa+0x68>
    prop_p[0] = style->map[idx];
  409fc0:	f8d0 e000 	ldr.w	lr, [r0]
  409fc4:	f81e c002 	ldrb.w	ip, [lr, r2]
  409fc8:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  409fcc:	f81e 1001 	ldrb.w	r1, [lr, r1]
  409fd0:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  409fd4:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  409fd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  409fdc:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  409fe0:	ea85 0c01 	eor.w	ip, r5, r1
  409fe4:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  409fe8:	d02b      	beq.n	40a042 <_lv_style_set_opa+0xa2>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  409fea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  409fee:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  409ff2:	ea31 0c0c 	bics.w	ip, r1, ip
  409ff6:	d115      	bne.n	40a024 <_lv_style_set_opa+0x84>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  409ff8:	42b9      	cmp	r1, r7
  409ffa:	dd13      	ble.n	40a024 <_lv_style_set_opa+0x84>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  409ffc:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a000:	b214      	sxth	r4, r2
  40a002:	e00f      	b.n	40a024 <_lv_style_set_opa+0x84>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a004:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a006:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a008:	6803      	ldr	r3, [r0, #0]
  40a00a:	5c99      	ldrb	r1, [r3, r2]
  40a00c:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a010:	1c51      	adds	r1, r2, #1
  40a012:	5c5b      	ldrb	r3, [r3, r1]
  40a014:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a018:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a01c:	2bff      	cmp	r3, #255	; 0xff
  40a01e:	d00f      	beq.n	40a040 <_lv_style_set_opa+0xa0>
        if(prop_id == id_to_find) {
  40a020:	429e      	cmp	r6, r3
  40a022:	d0cd      	beq.n	409fc0 <_lv_style_set_opa+0x20>
    prop_id &= 0xF;
  40a024:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a028:	2b08      	cmp	r3, #8
  40a02a:	d9eb      	bls.n	40a004 <_lv_style_set_opa+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a02c:	2b0b      	cmp	r3, #11
  40a02e:	d903      	bls.n	40a038 <_lv_style_set_opa+0x98>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a030:	2b0d      	cmp	r3, #13
  40a032:	d803      	bhi.n	40a03c <_lv_style_set_opa+0x9c>
  40a034:	2303      	movs	r3, #3
  40a036:	e7e6      	b.n	40a006 <_lv_style_set_opa+0x66>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a038:	2304      	movs	r3, #4
  40a03a:	e7e4      	b.n	40a006 <_lv_style_set_opa+0x66>
    else size += sizeof(const void *);
  40a03c:	2306      	movs	r3, #6
  40a03e:	e7e2      	b.n	40a006 <_lv_style_set_opa+0x66>
    return id_guess;
  40a040:	4622      	mov	r2, r4
    if(id >= 0) {
  40a042:	2a00      	cmp	r2, #0
  40a044:	db23      	blt.n	40a08e <_lv_style_set_opa+0xee>
    prop_p[0] = style->map[idx];
  40a046:	6803      	ldr	r3, [r0, #0]
  40a048:	5c99      	ldrb	r1, [r3, r2]
  40a04a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a04e:	4413      	add	r3, r2
  40a050:	785b      	ldrb	r3, [r3, #1]
  40a052:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a056:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a05a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a05e:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a060:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a064:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a068:	d111      	bne.n	40a08e <_lv_style_set_opa+0xee>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
  40a06a:	6803      	ldr	r3, [r0, #0]
  40a06c:	3202      	adds	r2, #2
  40a06e:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a070:	f10d 0105 	add.w	r1, sp, #5
  40a074:	2301      	movs	r3, #1
    while(len) {
  40a076:	b923      	cbnz	r3, 40a082 <_lv_style_set_opa+0xe2>
}
  40a078:	b005      	add	sp, #20
  40a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
  40a07c:	f04f 32ff 	mov.w	r2, #4294967295
  40a080:	e7df      	b.n	40a042 <_lv_style_set_opa+0xa2>
        *d8 = *s8;
  40a082:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a086:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a08a:	3b01      	subs	r3, #1
  40a08c:	e7f3      	b.n	40a076 <_lv_style_set_opa+0xd6>
  40a08e:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a090:	23ff      	movs	r3, #255	; 0xff
  40a092:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a096:	4b21      	ldr	r3, [pc, #132]	; (40a11c <_lv_style_set_opa+0x17c>)
  40a098:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a09a:	4603      	mov	r3, r0
  40a09c:	b908      	cbnz	r0, 40a0a2 <_lv_style_set_opa+0x102>
  40a09e:	3302      	adds	r3, #2
  40a0a0:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
  40a0a2:	3303      	adds	r3, #3
  40a0a4:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a0a6:	4621      	mov	r1, r4
  40a0a8:	6828      	ldr	r0, [r5, #0]
  40a0aa:	4b1d      	ldr	r3, [pc, #116]	; (40a120 <_lv_style_set_opa+0x180>)
  40a0ac:	4798      	blx	r3
  40a0ae:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a0b0:	4b1c      	ldr	r3, [pc, #112]	; (40a124 <_lv_style_set_opa+0x184>)
  40a0b2:	4798      	blx	r3
  40a0b4:	b148      	cbz	r0, 40a0ca <_lv_style_set_opa+0x12a>
    if(style == NULL) return;
  40a0b6:	2d00      	cmp	r5, #0
  40a0b8:	d0de      	beq.n	40a078 <_lv_style_set_opa+0xd8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a0ba:	682b      	ldr	r3, [r5, #0]
  40a0bc:	1ee0      	subs	r0, r4, #3
  40a0be:	1f62      	subs	r2, r4, #5
  40a0c0:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a0c2:	f10d 0106 	add.w	r1, sp, #6
  40a0c6:	2202      	movs	r2, #2
  40a0c8:	e00a      	b.n	40a0e0 <_lv_style_set_opa+0x140>
    LV_ASSERT_MEM(style->map);
  40a0ca:	682a      	ldr	r2, [r5, #0]
  40a0cc:	2300      	movs	r3, #0
  40a0ce:	4816      	ldr	r0, [pc, #88]	; (40a128 <_lv_style_set_opa+0x188>)
  40a0d0:	4916      	ldr	r1, [pc, #88]	; (40a12c <_lv_style_set_opa+0x18c>)
  40a0d2:	4788      	blx	r1
  40a0d4:	e7fe      	b.n	40a0d4 <_lv_style_set_opa+0x134>
        *d8 = *s8;
  40a0d6:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a0da:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a0de:	3a01      	subs	r2, #1
    while(len) {
  40a0e0:	2a00      	cmp	r2, #0
  40a0e2:	d1f8      	bne.n	40a0d6 <_lv_style_set_opa+0x136>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
  40a0e4:	682b      	ldr	r3, [r5, #0]
  40a0e6:	3c02      	subs	r4, #2
  40a0e8:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a0ea:	f10d 0105 	add.w	r1, sp, #5
  40a0ee:	2201      	movs	r2, #1
    while(len) {
  40a0f0:	b92a      	cbnz	r2, 40a0fe <_lv_style_set_opa+0x15e>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a0f2:	682b      	ldr	r3, [r5, #0]
  40a0f4:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a0f6:	f10d 020e 	add.w	r2, sp, #14
  40a0fa:	2302      	movs	r3, #2
  40a0fc:	e00a      	b.n	40a114 <_lv_style_set_opa+0x174>
        *d8 = *s8;
  40a0fe:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a102:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a106:	3a01      	subs	r2, #1
  40a108:	e7f2      	b.n	40a0f0 <_lv_style_set_opa+0x150>
        *d8 = *s8;
  40a10a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a10e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a112:	3b01      	subs	r3, #1
    while(len) {
  40a114:	2b00      	cmp	r3, #0
  40a116:	d1f8      	bne.n	40a10a <_lv_style_set_opa+0x16a>
  40a118:	e7ae      	b.n	40a078 <_lv_style_set_opa+0xd8>
  40a11a:	bf00      	nop
  40a11c:	00409ad1 	.word	0x00409ad1
  40a120:	004161f1 	.word	0x004161f1
  40a124:	004157b9 	.word	0x004157b9
  40a128:	004260b0 	.word	0x004260b0
  40a12c:	004157c5 	.word	0x004157c5

0040a130 <_lv_style_set_ptr>:
{
  40a130:	b5f0      	push	{r4, r5, r6, r7, lr}
  40a132:	b085      	sub	sp, #20
  40a134:	9200      	str	r2, [sp, #0]
  40a136:	f8ad 1006 	strh.w	r1, [sp, #6]
    if(style->map == NULL) return -1;
  40a13a:	6803      	ldr	r3, [r0, #0]
  40a13c:	2b00      	cmp	r3, #0
  40a13e:	d061      	beq.n	40a204 <_lv_style_set_ptr+0xd4>
    uint8_t id_to_find = prop & 0xFF;
  40a140:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a142:	0a0d      	lsrs	r5, r1, #8
    size_t i = 0;
  40a144:	2200      	movs	r2, #0
    int16_t id_guess = -1;
  40a146:	f04f 34ff 	mov.w	r4, #4294967295
    int16_t weight = -1;
  40a14a:	4627      	mov	r7, r4
  40a14c:	e023      	b.n	40a196 <_lv_style_set_ptr+0x66>
    prop_p[0] = style->map[idx];
  40a14e:	f8d0 e000 	ldr.w	lr, [r0]
  40a152:	f81e c002 	ldrb.w	ip, [lr, r2]
  40a156:	f88d c00c 	strb.w	ip, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a15a:	f81e 1001 	ldrb.w	r1, [lr, r1]
  40a15e:	f88d 100d 	strb.w	r1, [sp, #13]
    return prop;
  40a162:	f8bd e00c 	ldrh.w	lr, [sp, #12]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a166:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
  40a16a:	fa5f f18e 	uxtb.w	r1, lr
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a16e:	ea85 0c01 	eor.w	ip, r5, r1
  40a172:	f01c 0f7f 	tst.w	ip, #127	; 0x7f
  40a176:	d02b      	beq.n	40a1d0 <_lv_style_set_ptr+0xa0>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a178:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  40a17c:	f005 0c7f 	and.w	ip, r5, #127	; 0x7f
  40a180:	ea31 0c0c 	bics.w	ip, r1, ip
  40a184:	d115      	bne.n	40a1b2 <_lv_style_set_ptr+0x82>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a186:	42b9      	cmp	r1, r7
  40a188:	dd13      	ble.n	40a1b2 <_lv_style_set_ptr+0x82>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a18a:	f00e 077f 	and.w	r7, lr, #127	; 0x7f
                    id_guess = i;
  40a18e:	b214      	sxth	r4, r2
  40a190:	e00f      	b.n	40a1b2 <_lv_style_set_ptr+0x82>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a192:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a194:	441a      	add	r2, r3
    prop_p[0] = style->map[idx];
  40a196:	6803      	ldr	r3, [r0, #0]
  40a198:	5c99      	ldrb	r1, [r3, r2]
  40a19a:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a19e:	1c51      	adds	r1, r2, #1
  40a1a0:	5c5b      	ldrb	r3, [r3, r1]
  40a1a2:	f88d 300d 	strb.w	r3, [sp, #13]
    return get_style_prop(style, idx) & 0xFF;
  40a1a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a1aa:	2bff      	cmp	r3, #255	; 0xff
  40a1ac:	d00f      	beq.n	40a1ce <_lv_style_set_ptr+0x9e>
        if(prop_id == id_to_find) {
  40a1ae:	429e      	cmp	r6, r3
  40a1b0:	d0cd      	beq.n	40a14e <_lv_style_set_ptr+0x1e>
    prop_id &= 0xF;
  40a1b2:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a1b6:	2b08      	cmp	r3, #8
  40a1b8:	d9eb      	bls.n	40a192 <_lv_style_set_ptr+0x62>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1ba:	2b0b      	cmp	r3, #11
  40a1bc:	d903      	bls.n	40a1c6 <_lv_style_set_ptr+0x96>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a1be:	2b0d      	cmp	r3, #13
  40a1c0:	d803      	bhi.n	40a1ca <_lv_style_set_ptr+0x9a>
  40a1c2:	2303      	movs	r3, #3
  40a1c4:	e7e6      	b.n	40a194 <_lv_style_set_ptr+0x64>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a1c6:	2304      	movs	r3, #4
  40a1c8:	e7e4      	b.n	40a194 <_lv_style_set_ptr+0x64>
    else size += sizeof(const void *);
  40a1ca:	2306      	movs	r3, #6
  40a1cc:	e7e2      	b.n	40a194 <_lv_style_set_ptr+0x64>
    return id_guess;
  40a1ce:	4622      	mov	r2, r4
    if(id >= 0) {
  40a1d0:	2a00      	cmp	r2, #0
  40a1d2:	db23      	blt.n	40a21c <_lv_style_set_ptr+0xec>
    prop_p[0] = style->map[idx];
  40a1d4:	6803      	ldr	r3, [r0, #0]
  40a1d6:	5c99      	ldrb	r1, [r3, r2]
  40a1d8:	f88d 100c 	strb.w	r1, [sp, #12]
    prop_p[1] = style->map[idx + 1];
  40a1dc:	4413      	add	r3, r2
  40a1de:	785b      	ldrb	r3, [r3, #1]
  40a1e0:	f88d 300d 	strb.w	r3, [sp, #13]
    return prop;
  40a1e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
        attr_goal = (prop >> 8) & 0xFFU;
  40a1e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  40a1ec:	0a1b      	lsrs	r3, r3, #8
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
  40a1ee:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
  40a1f2:	f013 0f7f 	tst.w	r3, #127	; 0x7f
  40a1f6:	d111      	bne.n	40a21c <_lv_style_set_ptr+0xec>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &p, sizeof(const void *));
  40a1f8:	6803      	ldr	r3, [r0, #0]
  40a1fa:	3202      	adds	r2, #2
  40a1fc:	441a      	add	r2, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a1fe:	4669      	mov	r1, sp
  40a200:	2304      	movs	r3, #4
  40a202:	e007      	b.n	40a214 <_lv_style_set_ptr+0xe4>
    if(style->map == NULL) return -1;
  40a204:	f04f 32ff 	mov.w	r2, #4294967295
  40a208:	e7e2      	b.n	40a1d0 <_lv_style_set_ptr+0xa0>
        *d8 = *s8;
  40a20a:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a20e:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a212:	3b01      	subs	r3, #1
    while(len) {
  40a214:	2b00      	cmp	r3, #0
  40a216:	d1f8      	bne.n	40a20a <_lv_style_set_ptr+0xda>
}
  40a218:	b005      	add	sp, #20
  40a21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40a21c:	4605      	mov	r5, r0
    lv_style_property_t end_mark = _LV_STYLE_CLOSING_PROP;
  40a21e:	23ff      	movs	r3, #255	; 0xff
  40a220:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
  40a224:	4b21      	ldr	r3, [pc, #132]	; (40a2ac <_lv_style_set_ptr+0x17c>)
  40a226:	4798      	blx	r3
    if(size == 0) size += end_mark_size;
  40a228:	4603      	mov	r3, r0
  40a22a:	b908      	cbnz	r0, 40a230 <_lv_style_set_ptr+0x100>
  40a22c:	3302      	adds	r3, #2
  40a22e:	b29b      	uxth	r3, r3
    size += sizeof(lv_style_property_t) + sizeof(const void *);
  40a230:	3306      	adds	r3, #6
  40a232:	b29c      	uxth	r4, r3
    style->map = lv_mem_realloc(style->map, sz);
  40a234:	4621      	mov	r1, r4
  40a236:	6828      	ldr	r0, [r5, #0]
  40a238:	4b1d      	ldr	r3, [pc, #116]	; (40a2b0 <_lv_style_set_ptr+0x180>)
  40a23a:	4798      	blx	r3
  40a23c:	6028      	str	r0, [r5, #0]
    LV_ASSERT_MEM(style->map);
  40a23e:	4b1d      	ldr	r3, [pc, #116]	; (40a2b4 <_lv_style_set_ptr+0x184>)
  40a240:	4798      	blx	r3
  40a242:	b150      	cbz	r0, 40a25a <_lv_style_set_ptr+0x12a>
    if(style == NULL) return;
  40a244:	2d00      	cmp	r5, #0
  40a246:	d0e7      	beq.n	40a218 <_lv_style_set_ptr+0xe8>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
  40a248:	682b      	ldr	r3, [r5, #0]
  40a24a:	1fa0      	subs	r0, r4, #6
  40a24c:	f1a4 0208 	sub.w	r2, r4, #8
  40a250:	4413      	add	r3, r2
    const uint8_t * s8 = (const uint8_t *)src;
  40a252:	f10d 0106 	add.w	r1, sp, #6
  40a256:	2202      	movs	r2, #2
  40a258:	e00a      	b.n	40a270 <_lv_style_set_ptr+0x140>
    LV_ASSERT_MEM(style->map);
  40a25a:	682a      	ldr	r2, [r5, #0]
  40a25c:	2300      	movs	r3, #0
  40a25e:	4816      	ldr	r0, [pc, #88]	; (40a2b8 <_lv_style_set_ptr+0x188>)
  40a260:	4916      	ldr	r1, [pc, #88]	; (40a2bc <_lv_style_set_ptr+0x18c>)
  40a262:	4788      	blx	r1
  40a264:	e7fe      	b.n	40a264 <_lv_style_set_ptr+0x134>
        *d8 = *s8;
  40a266:	f811 6b01 	ldrb.w	r6, [r1], #1
  40a26a:	f803 6b01 	strb.w	r6, [r3], #1
        len--;
  40a26e:	3a01      	subs	r2, #1
    while(len) {
  40a270:	2a00      	cmp	r2, #0
  40a272:	d1f8      	bne.n	40a266 <_lv_style_set_ptr+0x136>
    _lv_memcpy_small(style->map + size - sizeof(const void *) - end_mark_size, &p, sizeof(const void *));
  40a274:	682b      	ldr	r3, [r5, #0]
  40a276:	3c02      	subs	r4, #2
  40a278:	4403      	add	r3, r0
    const uint8_t * s8 = (const uint8_t *)src;
  40a27a:	4669      	mov	r1, sp
  40a27c:	2204      	movs	r2, #4
  40a27e:	e004      	b.n	40a28a <_lv_style_set_ptr+0x15a>
        *d8 = *s8;
  40a280:	f811 0b01 	ldrb.w	r0, [r1], #1
  40a284:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  40a288:	3a01      	subs	r2, #1
    while(len) {
  40a28a:	2a00      	cmp	r2, #0
  40a28c:	d1f8      	bne.n	40a280 <_lv_style_set_ptr+0x150>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
  40a28e:	682b      	ldr	r3, [r5, #0]
  40a290:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40a292:	f10d 020e 	add.w	r2, sp, #14
  40a296:	2302      	movs	r3, #2
  40a298:	e004      	b.n	40a2a4 <_lv_style_set_ptr+0x174>
        *d8 = *s8;
  40a29a:	f812 1b01 	ldrb.w	r1, [r2], #1
  40a29e:	f804 1b01 	strb.w	r1, [r4], #1
        len--;
  40a2a2:	3b01      	subs	r3, #1
    while(len) {
  40a2a4:	2b00      	cmp	r3, #0
  40a2a6:	d1f8      	bne.n	40a29a <_lv_style_set_ptr+0x16a>
  40a2a8:	e7b6      	b.n	40a218 <_lv_style_set_ptr+0xe8>
  40a2aa:	bf00      	nop
  40a2ac:	00409ad1 	.word	0x00409ad1
  40a2b0:	004161f1 	.word	0x004161f1
  40a2b4:	004157b9 	.word	0x004157b9
  40a2b8:	004260b0 	.word	0x004260b0
  40a2bc:	004157c5 	.word	0x004157c5

0040a2c0 <_lv_style_get_int>:
    if(style == NULL) return -1;
  40a2c0:	2800      	cmp	r0, #0
  40a2c2:	d077      	beq.n	40a3b4 <_lv_style_get_int+0xf4>
{
  40a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a2c8:	b082      	sub	sp, #8
  40a2ca:	4692      	mov	sl, r2
  40a2cc:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a2ce:	6803      	ldr	r3, [r0, #0]
  40a2d0:	2b00      	cmp	r3, #0
  40a2d2:	d072      	beq.n	40a3ba <_lv_style_get_int+0xfa>
    if(style->map == NULL) return -1;
  40a2d4:	2b00      	cmp	r3, #0
  40a2d6:	d051      	beq.n	40a37c <_lv_style_get_int+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a2d8:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a2da:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a2dc:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a2de:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a2e2:	46f4      	mov	ip, lr
  40a2e4:	e02e      	b.n	40a344 <_lv_style_get_int+0x84>
    prop_p[0] = style->map[idx];
  40a2e6:	682a      	ldr	r2, [r5, #0]
  40a2e8:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a2ec:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a2f0:	5d14      	ldrb	r4, [r2, r4]
  40a2f2:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a2f6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a2fa:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a2fe:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a302:	ea87 0904 	eor.w	r9, r7, r4
  40a306:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a30a:	d00d      	beq.n	40a328 <_lv_style_get_int+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a30c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a310:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a314:	ea34 0209 	bics.w	r2, r4, r9
  40a318:	d122      	bne.n	40a360 <_lv_style_get_int+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a31a:	4564      	cmp	r4, ip
  40a31c:	dd20      	ble.n	40a360 <_lv_style_get_int+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a31e:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a322:	fa0f fe80 	sxth.w	lr, r0
  40a326:	e01b      	b.n	40a360 <_lv_style_get_int+0xa0>
                return i;
  40a328:	4686      	mov	lr, r0
    if(id < 0) {
  40a32a:	f1be 0f00 	cmp.w	lr, #0
  40a32e:	db47      	blt.n	40a3c0 <_lv_style_get_int+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
  40a330:	682b      	ldr	r3, [r5, #0]
  40a332:	4674      	mov	r4, lr
  40a334:	f10e 0e02 	add.w	lr, lr, #2
  40a338:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a33a:	4652      	mov	r2, sl
  40a33c:	2302      	movs	r3, #2
  40a33e:	e025      	b.n	40a38c <_lv_style_get_int+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a340:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a342:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a344:	682b      	ldr	r3, [r5, #0]
  40a346:	5c1c      	ldrb	r4, [r3, r0]
  40a348:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a34c:	1c44      	adds	r4, r0, #1
  40a34e:	5d1b      	ldrb	r3, [r3, r4]
  40a350:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a354:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a358:	2bff      	cmp	r3, #255	; 0xff
  40a35a:	d0e6      	beq.n	40a32a <_lv_style_get_int+0x6a>
        if(prop_id == id_to_find) {
  40a35c:	429e      	cmp	r6, r3
  40a35e:	d0c2      	beq.n	40a2e6 <_lv_style_get_int+0x26>
    prop_id &= 0xF;
  40a360:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a364:	2b08      	cmp	r3, #8
  40a366:	d9eb      	bls.n	40a340 <_lv_style_get_int+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a368:	2b0b      	cmp	r3, #11
  40a36a:	d903      	bls.n	40a374 <_lv_style_get_int+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a36c:	2b0d      	cmp	r3, #13
  40a36e:	d803      	bhi.n	40a378 <_lv_style_get_int+0xb8>
  40a370:	2303      	movs	r3, #3
  40a372:	e7e6      	b.n	40a342 <_lv_style_get_int+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a374:	2304      	movs	r3, #4
  40a376:	e7e4      	b.n	40a342 <_lv_style_get_int+0x82>
    else size += sizeof(const void *);
  40a378:	2306      	movs	r3, #6
  40a37a:	e7e2      	b.n	40a342 <_lv_style_get_int+0x82>
    if(style->map == NULL) return -1;
  40a37c:	f04f 3eff 	mov.w	lr, #4294967295
  40a380:	e7d3      	b.n	40a32a <_lv_style_get_int+0x6a>
        *d8 = *s8;
  40a382:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a386:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a38a:	3b01      	subs	r3, #1
    while(len) {
  40a38c:	2b00      	cmp	r3, #0
  40a38e:	d1f8      	bne.n	40a382 <_lv_style_get_int+0xc2>
    prop_p[0] = style->map[idx];
  40a390:	682b      	ldr	r3, [r5, #0]
  40a392:	5d1a      	ldrb	r2, [r3, r4]
  40a394:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a398:	4423      	add	r3, r4
  40a39a:	785b      	ldrb	r3, [r3, #1]
  40a39c:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a3a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a3a4:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a3a6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a3aa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a3ae:	b002      	add	sp, #8
  40a3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a3b4:	f04f 30ff 	mov.w	r0, #4294967295
  40a3b8:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a3ba:	f04f 30ff 	mov.w	r0, #4294967295
  40a3be:	e7f6      	b.n	40a3ae <_lv_style_get_int+0xee>
        return -1;
  40a3c0:	f04f 30ff 	mov.w	r0, #4294967295
  40a3c4:	e7f3      	b.n	40a3ae <_lv_style_get_int+0xee>

0040a3c6 <_lv_style_get_opa>:
    if(style == NULL) return -1;
  40a3c6:	2800      	cmp	r0, #0
  40a3c8:	d076      	beq.n	40a4b8 <_lv_style_get_opa+0xf2>
{
  40a3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a3ce:	b082      	sub	sp, #8
  40a3d0:	4692      	mov	sl, r2
  40a3d2:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a3d4:	6803      	ldr	r3, [r0, #0]
  40a3d6:	2b00      	cmp	r3, #0
  40a3d8:	d071      	beq.n	40a4be <_lv_style_get_opa+0xf8>
    if(style->map == NULL) return -1;
  40a3da:	2b00      	cmp	r3, #0
  40a3dc:	d063      	beq.n	40a4a6 <_lv_style_get_opa+0xe0>
    uint8_t id_to_find = prop & 0xFF;
  40a3de:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a3e0:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a3e2:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a3e4:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a3e8:	46f4      	mov	ip, lr
  40a3ea:	e040      	b.n	40a46e <_lv_style_get_opa+0xa8>
    prop_p[0] = style->map[idx];
  40a3ec:	682a      	ldr	r2, [r5, #0]
  40a3ee:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a3f2:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a3f6:	5d14      	ldrb	r4, [r2, r4]
  40a3f8:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a3fc:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a400:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a404:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a408:	ea87 0904 	eor.w	r9, r7, r4
  40a40c:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a410:	d00d      	beq.n	40a42e <_lv_style_get_opa+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a412:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a416:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a41a:	ea34 0209 	bics.w	r2, r4, r9
  40a41e:	d134      	bne.n	40a48a <_lv_style_get_opa+0xc4>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a420:	4564      	cmp	r4, ip
  40a422:	dd32      	ble.n	40a48a <_lv_style_get_opa+0xc4>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a424:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a428:	fa0f fe80 	sxth.w	lr, r0
  40a42c:	e02d      	b.n	40a48a <_lv_style_get_opa+0xc4>
                return i;
  40a42e:	4686      	mov	lr, r0
    if(id < 0) {
  40a430:	f1be 0f00 	cmp.w	lr, #0
  40a434:	db46      	blt.n	40a4c4 <_lv_style_get_opa+0xfe>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
  40a436:	6828      	ldr	r0, [r5, #0]
  40a438:	4674      	mov	r4, lr
  40a43a:	f10e 0e02 	add.w	lr, lr, #2
  40a43e:	4486      	add	lr, r0
    uint8_t * d8 = (uint8_t *)dst;
  40a440:	4652      	mov	r2, sl
  40a442:	2301      	movs	r3, #1
    while(len) {
  40a444:	bb93      	cbnz	r3, 40a4ac <_lv_style_get_opa+0xe6>
    prop_p[0] = style->map[idx];
  40a446:	682b      	ldr	r3, [r5, #0]
  40a448:	5d1a      	ldrb	r2, [r3, r4]
  40a44a:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a44e:	4423      	add	r3, r4
  40a450:	785b      	ldrb	r3, [r3, #1]
  40a452:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a456:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a45a:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a45c:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a460:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a464:	b002      	add	sp, #8
  40a466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a46a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a46c:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a46e:	682b      	ldr	r3, [r5, #0]
  40a470:	5c1c      	ldrb	r4, [r3, r0]
  40a472:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a476:	1c44      	adds	r4, r0, #1
  40a478:	5d1b      	ldrb	r3, [r3, r4]
  40a47a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a47e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a482:	2bff      	cmp	r3, #255	; 0xff
  40a484:	d0d4      	beq.n	40a430 <_lv_style_get_opa+0x6a>
        if(prop_id == id_to_find) {
  40a486:	429e      	cmp	r6, r3
  40a488:	d0b0      	beq.n	40a3ec <_lv_style_get_opa+0x26>
    prop_id &= 0xF;
  40a48a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a48e:	2b08      	cmp	r3, #8
  40a490:	d9eb      	bls.n	40a46a <_lv_style_get_opa+0xa4>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a492:	2b0b      	cmp	r3, #11
  40a494:	d903      	bls.n	40a49e <_lv_style_get_opa+0xd8>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a496:	2b0d      	cmp	r3, #13
  40a498:	d803      	bhi.n	40a4a2 <_lv_style_get_opa+0xdc>
  40a49a:	2303      	movs	r3, #3
  40a49c:	e7e6      	b.n	40a46c <_lv_style_get_opa+0xa6>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a49e:	2304      	movs	r3, #4
  40a4a0:	e7e4      	b.n	40a46c <_lv_style_get_opa+0xa6>
    else size += sizeof(const void *);
  40a4a2:	2306      	movs	r3, #6
  40a4a4:	e7e2      	b.n	40a46c <_lv_style_get_opa+0xa6>
    if(style->map == NULL) return -1;
  40a4a6:	f04f 3eff 	mov.w	lr, #4294967295
  40a4aa:	e7c1      	b.n	40a430 <_lv_style_get_opa+0x6a>
        *d8 = *s8;
  40a4ac:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a4b0:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a4b4:	3b01      	subs	r3, #1
  40a4b6:	e7c5      	b.n	40a444 <_lv_style_get_opa+0x7e>
    if(style == NULL) return -1;
  40a4b8:	f04f 30ff 	mov.w	r0, #4294967295
  40a4bc:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a4be:	f04f 30ff 	mov.w	r0, #4294967295
  40a4c2:	e7cf      	b.n	40a464 <_lv_style_get_opa+0x9e>
        return -1;
  40a4c4:	f04f 30ff 	mov.w	r0, #4294967295
  40a4c8:	e7cc      	b.n	40a464 <_lv_style_get_opa+0x9e>

0040a4ca <_lv_style_get_color>:
    if(style == NULL) return -1;
  40a4ca:	2800      	cmp	r0, #0
  40a4cc:	d077      	beq.n	40a5be <_lv_style_get_color+0xf4>
{
  40a4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a4d2:	b082      	sub	sp, #8
  40a4d4:	4692      	mov	sl, r2
  40a4d6:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a4d8:	6803      	ldr	r3, [r0, #0]
  40a4da:	2b00      	cmp	r3, #0
  40a4dc:	d072      	beq.n	40a5c4 <_lv_style_get_color+0xfa>
    if(style->map == NULL) return -1;
  40a4de:	2b00      	cmp	r3, #0
  40a4e0:	d051      	beq.n	40a586 <_lv_style_get_color+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a4e2:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a4e4:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a4e6:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a4e8:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a4ec:	46f4      	mov	ip, lr
  40a4ee:	e02e      	b.n	40a54e <_lv_style_get_color+0x84>
    prop_p[0] = style->map[idx];
  40a4f0:	682a      	ldr	r2, [r5, #0]
  40a4f2:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a4f6:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a4fa:	5d14      	ldrb	r4, [r2, r4]
  40a4fc:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a500:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a504:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a508:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a50c:	ea87 0904 	eor.w	r9, r7, r4
  40a510:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a514:	d00d      	beq.n	40a532 <_lv_style_get_color+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a516:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a51a:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a51e:	ea34 0209 	bics.w	r2, r4, r9
  40a522:	d122      	bne.n	40a56a <_lv_style_get_color+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a524:	4564      	cmp	r4, ip
  40a526:	dd20      	ble.n	40a56a <_lv_style_get_color+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a528:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a52c:	fa0f fe80 	sxth.w	lr, r0
  40a530:	e01b      	b.n	40a56a <_lv_style_get_color+0xa0>
                return i;
  40a532:	4686      	mov	lr, r0
    if(id < 0) {
  40a534:	f1be 0f00 	cmp.w	lr, #0
  40a538:	db47      	blt.n	40a5ca <_lv_style_get_color+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_color_t));
  40a53a:	682b      	ldr	r3, [r5, #0]
  40a53c:	4674      	mov	r4, lr
  40a53e:	f10e 0e02 	add.w	lr, lr, #2
  40a542:	449e      	add	lr, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a544:	4652      	mov	r2, sl
  40a546:	2302      	movs	r3, #2
  40a548:	e025      	b.n	40a596 <_lv_style_get_color+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a54a:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a54c:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a54e:	682b      	ldr	r3, [r5, #0]
  40a550:	5c1c      	ldrb	r4, [r3, r0]
  40a552:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a556:	1c44      	adds	r4, r0, #1
  40a558:	5d1b      	ldrb	r3, [r3, r4]
  40a55a:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a55e:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a562:	2bff      	cmp	r3, #255	; 0xff
  40a564:	d0e6      	beq.n	40a534 <_lv_style_get_color+0x6a>
        if(prop_id == id_to_find) {
  40a566:	429e      	cmp	r6, r3
  40a568:	d0c2      	beq.n	40a4f0 <_lv_style_get_color+0x26>
    prop_id &= 0xF;
  40a56a:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a56e:	2b08      	cmp	r3, #8
  40a570:	d9eb      	bls.n	40a54a <_lv_style_get_color+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a572:	2b0b      	cmp	r3, #11
  40a574:	d903      	bls.n	40a57e <_lv_style_get_color+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a576:	2b0d      	cmp	r3, #13
  40a578:	d803      	bhi.n	40a582 <_lv_style_get_color+0xb8>
  40a57a:	2303      	movs	r3, #3
  40a57c:	e7e6      	b.n	40a54c <_lv_style_get_color+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a57e:	2304      	movs	r3, #4
  40a580:	e7e4      	b.n	40a54c <_lv_style_get_color+0x82>
    else size += sizeof(const void *);
  40a582:	2306      	movs	r3, #6
  40a584:	e7e2      	b.n	40a54c <_lv_style_get_color+0x82>
    if(style->map == NULL) return -1;
  40a586:	f04f 3eff 	mov.w	lr, #4294967295
  40a58a:	e7d3      	b.n	40a534 <_lv_style_get_color+0x6a>
        *d8 = *s8;
  40a58c:	f81e 0b01 	ldrb.w	r0, [lr], #1
  40a590:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40a594:	3b01      	subs	r3, #1
    while(len) {
  40a596:	2b00      	cmp	r3, #0
  40a598:	d1f8      	bne.n	40a58c <_lv_style_get_color+0xc2>
    prop_p[0] = style->map[idx];
  40a59a:	682b      	ldr	r3, [r5, #0]
  40a59c:	5d1a      	ldrb	r2, [r3, r4]
  40a59e:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a5a2:	4423      	add	r3, r4
  40a5a4:	785b      	ldrb	r3, [r3, #1]
  40a5a6:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a5aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a5ae:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a5b0:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a5b4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a5b8:	b002      	add	sp, #8
  40a5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a5be:	f04f 30ff 	mov.w	r0, #4294967295
  40a5c2:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a5c4:	f04f 30ff 	mov.w	r0, #4294967295
  40a5c8:	e7f6      	b.n	40a5b8 <_lv_style_get_color+0xee>
        return -1;
  40a5ca:	f04f 30ff 	mov.w	r0, #4294967295
  40a5ce:	e7f3      	b.n	40a5b8 <_lv_style_get_color+0xee>

0040a5d0 <_lv_style_get_ptr>:
    if(style == NULL) return -1;
  40a5d0:	2800      	cmp	r0, #0
  40a5d2:	d077      	beq.n	40a6c4 <_lv_style_get_ptr+0xf4>
{
  40a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40a5d8:	b082      	sub	sp, #8
  40a5da:	4692      	mov	sl, r2
  40a5dc:	4605      	mov	r5, r0
    if(style->map == NULL) return -1;
  40a5de:	6803      	ldr	r3, [r0, #0]
  40a5e0:	2b00      	cmp	r3, #0
  40a5e2:	d072      	beq.n	40a6ca <_lv_style_get_ptr+0xfa>
    if(style->map == NULL) return -1;
  40a5e4:	2b00      	cmp	r3, #0
  40a5e6:	d051      	beq.n	40a68c <_lv_style_get_ptr+0xbc>
    uint8_t id_to_find = prop & 0xFF;
  40a5e8:	b2ce      	uxtb	r6, r1
    attr = (prop >> 8) & 0xFF;
  40a5ea:	0a0f      	lsrs	r7, r1, #8
    size_t i = 0;
  40a5ec:	2000      	movs	r0, #0
    int16_t id_guess = -1;
  40a5ee:	f04f 3eff 	mov.w	lr, #4294967295
    int16_t weight = -1;
  40a5f2:	46f4      	mov	ip, lr
  40a5f4:	e02e      	b.n	40a654 <_lv_style_get_ptr+0x84>
    prop_p[0] = style->map[idx];
  40a5f6:	682a      	ldr	r2, [r5, #0]
  40a5f8:	f812 9000 	ldrb.w	r9, [r2, r0]
  40a5fc:	f88d 9006 	strb.w	r9, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a600:	5d14      	ldrb	r4, [r2, r4]
  40a602:	f88d 4007 	strb.w	r4, [sp, #7]
    return prop;
  40a606:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
  40a60a:	ea4f 2818 	mov.w	r8, r8, lsr #8
  40a60e:	fa5f f488 	uxtb.w	r4, r8
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
  40a612:	ea87 0904 	eor.w	r9, r7, r4
  40a616:	f019 0f7f 	tst.w	r9, #127	; 0x7f
  40a61a:	d00d      	beq.n	40a638 <_lv_style_get_ptr+0x68>
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
  40a61c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  40a620:	f007 097f 	and.w	r9, r7, #127	; 0x7f
  40a624:	ea34 0209 	bics.w	r2, r4, r9
  40a628:	d122      	bne.n	40a670 <_lv_style_get_ptr+0xa0>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
  40a62a:	4564      	cmp	r4, ip
  40a62c:	dd20      	ble.n	40a670 <_lv_style_get_ptr+0xa0>
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
  40a62e:	f008 0c7f 	and.w	ip, r8, #127	; 0x7f
                    id_guess = i;
  40a632:	fa0f fe80 	sxth.w	lr, r0
  40a636:	e01b      	b.n	40a670 <_lv_style_get_ptr+0xa0>
                return i;
  40a638:	4686      	mov	lr, r0
    if(id < 0) {
  40a63a:	f1be 0f00 	cmp.w	lr, #0
  40a63e:	db47      	blt.n	40a6d0 <_lv_style_get_ptr+0x100>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
  40a640:	682b      	ldr	r3, [r5, #0]
  40a642:	4676      	mov	r6, lr
  40a644:	f10e 0002 	add.w	r0, lr, #2
  40a648:	4418      	add	r0, r3
    uint8_t * d8 = (uint8_t *)dst;
  40a64a:	4652      	mov	r2, sl
  40a64c:	2304      	movs	r3, #4
  40a64e:	e025      	b.n	40a69c <_lv_style_get_ptr+0xcc>
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a650:	2304      	movs	r3, #4
    return idx + get_prop_size(prop_id);
  40a652:	4418      	add	r0, r3
    prop_p[0] = style->map[idx];
  40a654:	682b      	ldr	r3, [r5, #0]
  40a656:	5c1c      	ldrb	r4, [r3, r0]
  40a658:	f88d 4006 	strb.w	r4, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a65c:	1c44      	adds	r4, r0, #1
  40a65e:	5d1b      	ldrb	r3, [r3, r4]
  40a660:	f88d 3007 	strb.w	r3, [sp, #7]
    return get_style_prop(style, idx) & 0xFF;
  40a664:	f89d 3006 	ldrb.w	r3, [sp, #6]
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSING_PROP) {
  40a668:	2bff      	cmp	r3, #255	; 0xff
  40a66a:	d0e6      	beq.n	40a63a <_lv_style_get_ptr+0x6a>
        if(prop_id == id_to_find) {
  40a66c:	429e      	cmp	r6, r3
  40a66e:	d0c2      	beq.n	40a5f6 <_lv_style_get_ptr+0x26>
    prop_id &= 0xF;
  40a670:	f003 030f 	and.w	r3, r3, #15
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
  40a674:	2b08      	cmp	r3, #8
  40a676:	d9eb      	bls.n	40a650 <_lv_style_get_ptr+0x80>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a678:	2b0b      	cmp	r3, #11
  40a67a:	d903      	bls.n	40a684 <_lv_style_get_ptr+0xb4>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
  40a67c:	2b0d      	cmp	r3, #13
  40a67e:	d803      	bhi.n	40a688 <_lv_style_get_ptr+0xb8>
  40a680:	2303      	movs	r3, #3
  40a682:	e7e6      	b.n	40a652 <_lv_style_get_ptr+0x82>
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
  40a684:	2304      	movs	r3, #4
  40a686:	e7e4      	b.n	40a652 <_lv_style_get_ptr+0x82>
    else size += sizeof(const void *);
  40a688:	2306      	movs	r3, #6
  40a68a:	e7e2      	b.n	40a652 <_lv_style_get_ptr+0x82>
    if(style->map == NULL) return -1;
  40a68c:	f04f 3eff 	mov.w	lr, #4294967295
  40a690:	e7d3      	b.n	40a63a <_lv_style_get_ptr+0x6a>
        *d8 = *s8;
  40a692:	f810 4b01 	ldrb.w	r4, [r0], #1
  40a696:	f802 4b01 	strb.w	r4, [r2], #1
        len--;
  40a69a:	3b01      	subs	r3, #1
    while(len) {
  40a69c:	2b00      	cmp	r3, #0
  40a69e:	d1f8      	bne.n	40a692 <_lv_style_get_ptr+0xc2>
    prop_p[0] = style->map[idx];
  40a6a0:	682b      	ldr	r3, [r5, #0]
  40a6a2:	5d9a      	ldrb	r2, [r3, r6]
  40a6a4:	f88d 2006 	strb.w	r2, [sp, #6]
    prop_p[1] = style->map[idx + 1];
  40a6a8:	4433      	add	r3, r6
  40a6aa:	785b      	ldrb	r3, [r3, #1]
  40a6ac:	f88d 3007 	strb.w	r3, [sp, #7]
    return prop;
  40a6b0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        attr_goal = (prop >> 8) & 0xFF;
  40a6b4:	0a08      	lsrs	r0, r1, #8
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
  40a6b6:	ea00 2013 	and.w	r0, r0, r3, lsr #8
  40a6ba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}
  40a6be:	b002      	add	sp, #8
  40a6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(style == NULL) return -1;
  40a6c4:	f04f 30ff 	mov.w	r0, #4294967295
  40a6c8:	4770      	bx	lr
    if(style->map == NULL) return -1;
  40a6ca:	f04f 30ff 	mov.w	r0, #4294967295
  40a6ce:	e7f6      	b.n	40a6be <_lv_style_get_ptr+0xee>
        return -1;
  40a6d0:	f04f 30ff 	mov.w	r0, #4294967295
  40a6d4:	e7f3      	b.n	40a6be <_lv_style_get_ptr+0xee>

0040a6d6 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
  40a6d6:	7903      	ldrb	r3, [r0, #4]
  40a6d8:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a6dc:	d008      	beq.n	40a6f0 <lv_style_list_get_local_style+0x1a>
    if(list->has_trans) return list->style_list[1];
  40a6de:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a6e2:	d102      	bne.n	40a6ea <lv_style_list_get_local_style+0x14>
    else return list->style_list[0];
  40a6e4:	6803      	ldr	r3, [r0, #0]
  40a6e6:	6818      	ldr	r0, [r3, #0]
  40a6e8:	4770      	bx	lr
    if(list->has_trans) return list->style_list[1];
  40a6ea:	6803      	ldr	r3, [r0, #0]
  40a6ec:	6858      	ldr	r0, [r3, #4]
  40a6ee:	4770      	bx	lr
    if(!list->has_local) return NULL;
  40a6f0:	2000      	movs	r0, #0
}
  40a6f2:	4770      	bx	lr

0040a6f4 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
  40a6f4:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a6f8:	2b00      	cmp	r3, #0
  40a6fa:	da02      	bge.n	40a702 <_lv_style_list_get_transition_style+0xe>
    return list->style_list[0];
  40a6fc:	6803      	ldr	r3, [r0, #0]
  40a6fe:	6818      	ldr	r0, [r3, #0]
  40a700:	4770      	bx	lr
    if(!list->has_trans) return NULL;
  40a702:	2000      	movs	r0, #0
}
  40a704:	4770      	bx	lr
	...

0040a708 <_lv_style_list_reset>:
    if(list == NULL) return;
  40a708:	2800      	cmp	r0, #0
  40a70a:	d032      	beq.n	40a772 <_lv_style_list_reset+0x6a>
{
  40a70c:	b538      	push	{r3, r4, r5, lr}
  40a70e:	4604      	mov	r4, r0
    if(list->has_local) {
  40a710:	7903      	ldrb	r3, [r0, #4]
  40a712:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a716:	d008      	beq.n	40a72a <_lv_style_list_reset+0x22>
        lv_style_t * local = lv_style_list_get_local_style(list);
  40a718:	4b16      	ldr	r3, [pc, #88]	; (40a774 <_lv_style_list_reset+0x6c>)
  40a71a:	4798      	blx	r3
        if(local) {
  40a71c:	4605      	mov	r5, r0
  40a71e:	b120      	cbz	r0, 40a72a <_lv_style_list_reset+0x22>
            lv_style_reset(local);
  40a720:	4b15      	ldr	r3, [pc, #84]	; (40a778 <_lv_style_list_reset+0x70>)
  40a722:	4798      	blx	r3
            lv_mem_free(local);
  40a724:	4628      	mov	r0, r5
  40a726:	4b15      	ldr	r3, [pc, #84]	; (40a77c <_lv_style_list_reset+0x74>)
  40a728:	4798      	blx	r3
    if(list->has_trans) {
  40a72a:	f994 3004 	ldrsb.w	r3, [r4, #4]
  40a72e:	2b00      	cmp	r3, #0
  40a730:	db13      	blt.n	40a75a <_lv_style_list_reset+0x52>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
  40a732:	7923      	ldrb	r3, [r4, #4]
  40a734:	f013 0f3f 	tst.w	r3, #63	; 0x3f
  40a738:	d002      	beq.n	40a740 <_lv_style_list_reset+0x38>
  40a73a:	6820      	ldr	r0, [r4, #0]
  40a73c:	4b0f      	ldr	r3, [pc, #60]	; (40a77c <_lv_style_list_reset+0x74>)
  40a73e:	4798      	blx	r3
    list->style_list = NULL;
  40a740:	2200      	movs	r2, #0
  40a742:	6022      	str	r2, [r4, #0]
    list->style_cnt = 0;
  40a744:	7923      	ldrb	r3, [r4, #4]
    list->has_trans = 0;
  40a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40a74a:	f362 13c7 	bfi	r3, r2, #7, #1
  40a74e:	7123      	strb	r3, [r4, #4]
    list->skip_trans = 0;
  40a750:	7963      	ldrb	r3, [r4, #5]
  40a752:	f362 0300 	bfi	r3, r2, #0, #1
  40a756:	7163      	strb	r3, [r4, #5]
  40a758:	bd38      	pop	{r3, r4, r5, pc}
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
  40a75a:	4620      	mov	r0, r4
  40a75c:	4b08      	ldr	r3, [pc, #32]	; (40a780 <_lv_style_list_reset+0x78>)
  40a75e:	4798      	blx	r3
        if(trans) {
  40a760:	4605      	mov	r5, r0
  40a762:	2800      	cmp	r0, #0
  40a764:	d0e5      	beq.n	40a732 <_lv_style_list_reset+0x2a>
            lv_style_reset(trans);
  40a766:	4b04      	ldr	r3, [pc, #16]	; (40a778 <_lv_style_list_reset+0x70>)
  40a768:	4798      	blx	r3
            lv_mem_free(trans);
  40a76a:	4628      	mov	r0, r5
  40a76c:	4b03      	ldr	r3, [pc, #12]	; (40a77c <_lv_style_list_reset+0x74>)
  40a76e:	4798      	blx	r3
  40a770:	e7df      	b.n	40a732 <_lv_style_list_reset+0x2a>
  40a772:	4770      	bx	lr
  40a774:	0040a6d7 	.word	0x0040a6d7
  40a778:	00409abd 	.word	0x00409abd
  40a77c:	00415f85 	.word	0x00415f85
  40a780:	0040a6f5 	.word	0x0040a6f5

0040a784 <lv_style_list_copy>:
{
  40a784:	b570      	push	{r4, r5, r6, lr}
  40a786:	4605      	mov	r5, r0
  40a788:	460c      	mov	r4, r1
    _lv_style_list_reset(list_dest);
  40a78a:	4b3d      	ldr	r3, [pc, #244]	; (40a880 <lv_style_list_copy+0xfc>)
  40a78c:	4798      	blx	r3
    if(list_src->style_list == NULL) return;
  40a78e:	6823      	ldr	r3, [r4, #0]
  40a790:	2b00      	cmp	r3, #0
  40a792:	d059      	beq.n	40a848 <lv_style_list_copy+0xc4>
    if(list_src->has_local == 0) {
  40a794:	7923      	ldrb	r3, [r4, #4]
  40a796:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a79a:	d12f      	bne.n	40a7fc <lv_style_list_copy+0x78>
        if(list_src->has_trans) {
  40a79c:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a7a0:	d113      	bne.n	40a7ca <lv_style_list_copy+0x46>
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
  40a7a2:	7920      	ldrb	r0, [r4, #4]
  40a7a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a7a8:	0080      	lsls	r0, r0, #2
  40a7aa:	4b36      	ldr	r3, [pc, #216]	; (40a884 <lv_style_list_copy+0x100>)
  40a7ac:	4798      	blx	r3
  40a7ae:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
  40a7b0:	7922      	ldrb	r2, [r4, #4]
  40a7b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a7b6:	0092      	lsls	r2, r2, #2
  40a7b8:	6821      	ldr	r1, [r4, #0]
  40a7ba:	4b33      	ldr	r3, [pc, #204]	; (40a888 <lv_style_list_copy+0x104>)
  40a7bc:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt;
  40a7be:	7922      	ldrb	r2, [r4, #4]
  40a7c0:	792b      	ldrb	r3, [r5, #4]
  40a7c2:	f362 0305 	bfi	r3, r2, #0, #6
  40a7c6:	712b      	strb	r3, [r5, #4]
  40a7c8:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a7ca:	f003 003f 	and.w	r0, r3, #63	; 0x3f
  40a7ce:	3801      	subs	r0, #1
  40a7d0:	0080      	lsls	r0, r0, #2
  40a7d2:	4b2c      	ldr	r3, [pc, #176]	; (40a884 <lv_style_list_copy+0x100>)
  40a7d4:	4798      	blx	r3
  40a7d6:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a7d8:	6821      	ldr	r1, [r4, #0]
  40a7da:	7922      	ldrb	r2, [r4, #4]
  40a7dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a7e0:	3a01      	subs	r2, #1
  40a7e2:	0092      	lsls	r2, r2, #2
  40a7e4:	3104      	adds	r1, #4
  40a7e6:	4b28      	ldr	r3, [pc, #160]	; (40a888 <lv_style_list_copy+0x104>)
  40a7e8:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a7ea:	7923      	ldrb	r3, [r4, #4]
  40a7ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a7f0:	3b01      	subs	r3, #1
  40a7f2:	792a      	ldrb	r2, [r5, #4]
  40a7f4:	f363 0205 	bfi	r2, r3, #0, #6
  40a7f8:	712a      	strb	r2, [r5, #4]
  40a7fa:	bd70      	pop	{r4, r5, r6, pc}
        if(list_src->has_trans) {
  40a7fc:	f013 0f80 	tst.w	r3, #128	; 0x80
  40a800:	d123      	bne.n	40a84a <lv_style_list_copy+0xc6>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a802:	7920      	ldrb	r0, [r4, #4]
  40a804:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a808:	3801      	subs	r0, #1
  40a80a:	0080      	lsls	r0, r0, #2
  40a80c:	4b1d      	ldr	r3, [pc, #116]	; (40a884 <lv_style_list_copy+0x100>)
  40a80e:	4798      	blx	r3
  40a810:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
  40a812:	6821      	ldr	r1, [r4, #0]
  40a814:	7922      	ldrb	r2, [r4, #4]
  40a816:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a81a:	3a01      	subs	r2, #1
  40a81c:	0092      	lsls	r2, r2, #2
  40a81e:	3104      	adds	r1, #4
  40a820:	4b19      	ldr	r3, [pc, #100]	; (40a888 <lv_style_list_copy+0x104>)
  40a822:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 1;
  40a824:	7923      	ldrb	r3, [r4, #4]
  40a826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a82a:	3b01      	subs	r3, #1
  40a82c:	792a      	ldrb	r2, [r5, #4]
  40a82e:	f363 0205 	bfi	r2, r3, #0, #6
  40a832:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
  40a834:	4628      	mov	r0, r5
  40a836:	4d15      	ldr	r5, [pc, #84]	; (40a88c <lv_style_list_copy+0x108>)
  40a838:	47a8      	blx	r5
  40a83a:	4606      	mov	r6, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
  40a83c:	4620      	mov	r0, r4
  40a83e:	47a8      	blx	r5
  40a840:	4601      	mov	r1, r0
  40a842:	4630      	mov	r0, r6
  40a844:	4b12      	ldr	r3, [pc, #72]	; (40a890 <lv_style_list_copy+0x10c>)
  40a846:	4798      	blx	r3
  40a848:	bd70      	pop	{r4, r5, r6, pc}
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a84a:	7920      	ldrb	r0, [r4, #4]
  40a84c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  40a850:	3802      	subs	r0, #2
  40a852:	0080      	lsls	r0, r0, #2
  40a854:	4b0b      	ldr	r3, [pc, #44]	; (40a884 <lv_style_list_copy+0x100>)
  40a856:	4798      	blx	r3
  40a858:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
  40a85a:	6821      	ldr	r1, [r4, #0]
  40a85c:	7922      	ldrb	r2, [r4, #4]
  40a85e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
  40a862:	3a02      	subs	r2, #2
  40a864:	0092      	lsls	r2, r2, #2
  40a866:	3108      	adds	r1, #8
  40a868:	4b07      	ldr	r3, [pc, #28]	; (40a888 <lv_style_list_copy+0x104>)
  40a86a:	4798      	blx	r3
            list_dest->style_cnt = list_src->style_cnt - 2;
  40a86c:	7923      	ldrb	r3, [r4, #4]
  40a86e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a872:	3b02      	subs	r3, #2
  40a874:	792a      	ldrb	r2, [r5, #4]
  40a876:	f363 0205 	bfi	r2, r3, #0, #6
  40a87a:	712a      	strb	r2, [r5, #4]
  40a87c:	e7da      	b.n	40a834 <lv_style_list_copy+0xb0>
  40a87e:	bf00      	nop
  40a880:	0040a709 	.word	0x0040a709
  40a884:	00415ec1 	.word	0x00415ec1
  40a888:	004160d1 	.word	0x004160d1
  40a88c:	00409a2d 	.word	0x00409a2d
  40a890:	00409b1d 	.word	0x00409b1d

0040a894 <_lv_style_list_add_trans_style>:
{
  40a894:	b538      	push	{r3, r4, r5, lr}
  40a896:	4604      	mov	r4, r0
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a898:	f990 3004 	ldrsb.w	r3, [r0, #4]
  40a89c:	2b00      	cmp	r3, #0
  40a89e:	db1c      	blt.n	40a8da <_lv_style_list_add_trans_style+0x46>
    lv_style_t * trans_style = lv_mem_alloc(sizeof(lv_style_t));
  40a8a0:	2004      	movs	r0, #4
  40a8a2:	4b13      	ldr	r3, [pc, #76]	; (40a8f0 <_lv_style_list_add_trans_style+0x5c>)
  40a8a4:	4798      	blx	r3
  40a8a6:	4605      	mov	r5, r0
    LV_ASSERT_MEM(trans_style);
  40a8a8:	4b12      	ldr	r3, [pc, #72]	; (40a8f4 <_lv_style_list_add_trans_style+0x60>)
  40a8aa:	4798      	blx	r3
  40a8ac:	b1d0      	cbz	r0, 40a8e4 <_lv_style_list_add_trans_style+0x50>
    if(trans_style == NULL) {
  40a8ae:	b1bd      	cbz	r5, 40a8e0 <_lv_style_list_add_trans_style+0x4c>
    lv_style_init(trans_style);
  40a8b0:	4628      	mov	r0, r5
  40a8b2:	4b11      	ldr	r3, [pc, #68]	; (40a8f8 <_lv_style_list_add_trans_style+0x64>)
  40a8b4:	4798      	blx	r3
    _lv_style_list_add_style(list, trans_style);
  40a8b6:	4629      	mov	r1, r5
  40a8b8:	4620      	mov	r0, r4
  40a8ba:	4b10      	ldr	r3, [pc, #64]	; (40a8fc <_lv_style_list_add_trans_style+0x68>)
  40a8bc:	4798      	blx	r3
    list->has_trans = 1;
  40a8be:	7923      	ldrb	r3, [r4, #4]
  40a8c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40a8c4:	7123      	strb	r3, [r4, #4]
    if(list->has_local) {
  40a8c6:	f013 0f40 	tst.w	r3, #64	; 0x40
  40a8ca:	d009      	beq.n	40a8e0 <_lv_style_list_add_trans_style+0x4c>
        lv_style_t * tmp = list->style_list[0];
  40a8cc:	6823      	ldr	r3, [r4, #0]
  40a8ce:	681a      	ldr	r2, [r3, #0]
        list->style_list[0] = list->style_list[1];
  40a8d0:	6859      	ldr	r1, [r3, #4]
  40a8d2:	6019      	str	r1, [r3, #0]
        list->style_list[1] = tmp;
  40a8d4:	6823      	ldr	r3, [r4, #0]
  40a8d6:	605a      	str	r2, [r3, #4]
  40a8d8:	e002      	b.n	40a8e0 <_lv_style_list_add_trans_style+0x4c>
    if(list->has_trans) return _lv_style_list_get_transition_style(list);
  40a8da:	4b09      	ldr	r3, [pc, #36]	; (40a900 <_lv_style_list_add_trans_style+0x6c>)
  40a8dc:	4798      	blx	r3
  40a8de:	4605      	mov	r5, r0
}
  40a8e0:	4628      	mov	r0, r5
  40a8e2:	bd38      	pop	{r3, r4, r5, pc}
    LV_ASSERT_MEM(trans_style);
  40a8e4:	462a      	mov	r2, r5
  40a8e6:	2300      	movs	r3, #0
  40a8e8:	4806      	ldr	r0, [pc, #24]	; (40a904 <_lv_style_list_add_trans_style+0x70>)
  40a8ea:	4907      	ldr	r1, [pc, #28]	; (40a908 <_lv_style_list_add_trans_style+0x74>)
  40a8ec:	4788      	blx	r1
  40a8ee:	e7fe      	b.n	40a8ee <_lv_style_list_add_trans_style+0x5a>
  40a8f0:	00415ec1 	.word	0x00415ec1
  40a8f4:	004157b9 	.word	0x004157b9
  40a8f8:	00409899 	.word	0x00409899
  40a8fc:	0040997d 	.word	0x0040997d
  40a900:	0040a6f5 	.word	0x0040a6f5
  40a904:	004260b0 	.word	0x004260b0
  40a908:	004157c5 	.word	0x004157c5

0040a90c <_lv_style_list_set_local_int>:
{
  40a90c:	b538      	push	{r3, r4, r5, lr}
  40a90e:	460c      	mov	r4, r1
  40a910:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a912:	4b03      	ldr	r3, [pc, #12]	; (40a920 <_lv_style_list_set_local_int+0x14>)
  40a914:	4798      	blx	r3
    _lv_style_set_int(local, prop, value);
  40a916:	462a      	mov	r2, r5
  40a918:	4621      	mov	r1, r4
  40a91a:	4b02      	ldr	r3, [pc, #8]	; (40a924 <_lv_style_list_set_local_int+0x18>)
  40a91c:	4798      	blx	r3
  40a91e:	bd38      	pop	{r3, r4, r5, pc}
  40a920:	00409a2d 	.word	0x00409a2d
  40a924:	00409c81 	.word	0x00409c81

0040a928 <_lv_style_list_set_local_color>:
{
  40a928:	b538      	push	{r3, r4, r5, lr}
  40a92a:	460c      	mov	r4, r1
  40a92c:	4615      	mov	r5, r2
    lv_style_t * local = get_alloc_local_style(list);
  40a92e:	4b03      	ldr	r3, [pc, #12]	; (40a93c <_lv_style_list_set_local_color+0x14>)
  40a930:	4798      	blx	r3
    _lv_style_set_color(local, prop, value);
  40a932:	462a      	mov	r2, r5
  40a934:	4621      	mov	r1, r4
  40a936:	4b02      	ldr	r3, [pc, #8]	; (40a940 <_lv_style_list_set_local_color+0x18>)
  40a938:	4798      	blx	r3
  40a93a:	bd38      	pop	{r3, r4, r5, pc}
  40a93c:	00409a2d 	.word	0x00409a2d
  40a940:	00409e11 	.word	0x00409e11

0040a944 <_lv_style_list_get_int>:
    if(list == NULL) return LV_RES_INV;
  40a944:	2800      	cmp	r0, #0
  40a946:	d05e      	beq.n	40aa06 <_lv_style_list_get_int+0xc2>
{
  40a948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40a94c:	b083      	sub	sp, #12
  40a94e:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40a950:	6803      	ldr	r3, [r0, #0]
  40a952:	2b00      	cmp	r3, #0
  40a954:	d059      	beq.n	40aa0a <_lv_style_list_get_int+0xc6>
  40a956:	4691      	mov	r9, r2
  40a958:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40a95a:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_style_int_t value_act = 0;
  40a95e:	2400      	movs	r4, #0
  40a960:	f8ad 4006 	strh.w	r4, [sp, #6]
    int16_t weight = -1;
  40a964:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a968:	e017      	b.n	40a99a <_lv_style_list_get_int+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40a96a:	3101      	adds	r1, #1
  40a96c:	b2c9      	uxtb	r1, r1
  40a96e:	e020      	b.n	40a9b2 <_lv_style_list_get_int+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a970:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_int(_class, prop, &value_act);
  40a972:	f10d 0206 	add.w	r2, sp, #6
  40a976:	4639      	mov	r1, r7
  40a978:	4b26      	ldr	r3, [pc, #152]	; (40aa14 <_lv_style_list_get_int+0xd0>)
  40a97a:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40a97c:	4580      	cmp	r8, r0
  40a97e:	d024      	beq.n	40a9ca <_lv_style_list_get_int+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a980:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40a984:	2b00      	cmp	r3, #0
  40a986:	db28      	blt.n	40a9da <_lv_style_list_get_int+0x96>
        else if(weight_act > weight) {
  40a988:	4286      	cmp	r6, r0
  40a98a:	da04      	bge.n	40a996 <_lv_style_list_get_int+0x52>
            *res = value_act;
  40a98c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a990:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40a994:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40a996:	3401      	adds	r4, #1
  40a998:	b224      	sxth	r4, r4
  40a99a:	792b      	ldrb	r3, [r5, #4]
  40a99c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40a9a0:	429c      	cmp	r4, r3
  40a9a2:	da2c      	bge.n	40a9fe <_lv_style_list_get_int+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40a9a4:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40a9a6:	88aa      	ldrh	r2, [r5, #4]
  40a9a8:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40a9ac:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40a9b0:	d0db      	beq.n	40a96a <_lv_style_list_get_int+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a9b2:	792a      	ldrb	r2, [r5, #4]
  40a9b4:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40a9b8:	d0da      	beq.n	40a970 <_lv_style_list_get_int+0x2c>
  40a9ba:	428b      	cmp	r3, r1
  40a9bc:	dd03      	ble.n	40a9c6 <_lv_style_list_get_int+0x82>
    return list->style_list[id];
  40a9be:	682b      	ldr	r3, [r5, #0]
  40a9c0:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40a9c4:	e7d5      	b.n	40a972 <_lv_style_list_get_int+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40a9c6:	2000      	movs	r0, #0
  40a9c8:	e7d3      	b.n	40a972 <_lv_style_list_get_int+0x2e>
            *res = value_act;
  40a9ca:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a9ce:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a9d2:	2001      	movs	r0, #1
}
  40a9d4:	b003      	add	sp, #12
  40a9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40a9da:	fab4 f384 	clz	r3, r4
  40a9de:	095b      	lsrs	r3, r3, #5
  40a9e0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40a9e4:	d1d0      	bne.n	40a988 <_lv_style_list_get_int+0x44>
  40a9e6:	2b00      	cmp	r3, #0
  40a9e8:	d0ce      	beq.n	40a988 <_lv_style_list_get_int+0x44>
  40a9ea:	796b      	ldrb	r3, [r5, #5]
  40a9ec:	f013 0f01 	tst.w	r3, #1
  40a9f0:	d1ca      	bne.n	40a988 <_lv_style_list_get_int+0x44>
            *res = value_act;
  40a9f2:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  40a9f6:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40a9fa:	2001      	movs	r0, #1
  40a9fc:	e7ea      	b.n	40a9d4 <_lv_style_list_get_int+0x90>
    if(weight >= 0) return LV_RES_OK;
  40a9fe:	2e00      	cmp	r6, #0
  40aa00:	db05      	blt.n	40aa0e <_lv_style_list_get_int+0xca>
  40aa02:	2001      	movs	r0, #1
  40aa04:	e7e6      	b.n	40a9d4 <_lv_style_list_get_int+0x90>
    if(list == NULL) return LV_RES_INV;
  40aa06:	2000      	movs	r0, #0
  40aa08:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40aa0a:	2000      	movs	r0, #0
  40aa0c:	e7e2      	b.n	40a9d4 <_lv_style_list_get_int+0x90>
    else return LV_RES_INV;
  40aa0e:	2000      	movs	r0, #0
  40aa10:	e7e0      	b.n	40a9d4 <_lv_style_list_get_int+0x90>
  40aa12:	bf00      	nop
  40aa14:	0040a2c1 	.word	0x0040a2c1

0040aa18 <_lv_style_list_get_color>:
    if(list == NULL) return LV_RES_INV;
  40aa18:	2800      	cmp	r0, #0
  40aa1a:	d05d      	beq.n	40aad8 <_lv_style_list_get_color+0xc0>
{
  40aa1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aa20:	b083      	sub	sp, #12
  40aa22:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40aa24:	6803      	ldr	r3, [r0, #0]
  40aa26:	2b00      	cmp	r3, #0
  40aa28:	d058      	beq.n	40aadc <_lv_style_list_get_color+0xc4>
  40aa2a:	4691      	mov	r9, r2
  40aa2c:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40aa2e:	ea4f 2811 	mov.w	r8, r1, lsr #8
    value_act.full = 0;
  40aa32:	2400      	movs	r4, #0
  40aa34:	f8ad 4004 	strh.w	r4, [sp, #4]
    int16_t weight = -1;
  40aa38:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aa3c:	e016      	b.n	40aa6c <_lv_style_list_get_color+0x54>
    if(list->has_trans && list->skip_trans) id++;
  40aa3e:	3101      	adds	r1, #1
  40aa40:	b2c9      	uxtb	r1, r1
  40aa42:	e01f      	b.n	40aa84 <_lv_style_list_get_color+0x6c>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aa44:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_color(_class, prop, &value_act);
  40aa46:	aa01      	add	r2, sp, #4
  40aa48:	4639      	mov	r1, r7
  40aa4a:	4b26      	ldr	r3, [pc, #152]	; (40aae4 <_lv_style_list_get_color+0xcc>)
  40aa4c:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40aa4e:	4580      	cmp	r8, r0
  40aa50:	d024      	beq.n	40aa9c <_lv_style_list_get_color+0x84>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aa52:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40aa56:	2b00      	cmp	r3, #0
  40aa58:	db28      	blt.n	40aaac <_lv_style_list_get_color+0x94>
        else if(weight_act > weight) {
  40aa5a:	4286      	cmp	r6, r0
  40aa5c:	da04      	bge.n	40aa68 <_lv_style_list_get_color+0x50>
            *res = value_act;
  40aa5e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40aa62:	f8a9 3000 	strh.w	r3, [r9]
            weight =  weight_act;
  40aa66:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40aa68:	3401      	adds	r4, #1
  40aa6a:	b224      	sxth	r4, r4
  40aa6c:	792b      	ldrb	r3, [r5, #4]
  40aa6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40aa72:	429c      	cmp	r4, r3
  40aa74:	da2c      	bge.n	40aad0 <_lv_style_list_get_color+0xb8>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40aa76:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40aa78:	88aa      	ldrh	r2, [r5, #4]
  40aa7a:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40aa7e:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40aa82:	d0dc      	beq.n	40aa3e <_lv_style_list_get_color+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aa84:	792a      	ldrb	r2, [r5, #4]
  40aa86:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40aa8a:	d0db      	beq.n	40aa44 <_lv_style_list_get_color+0x2c>
  40aa8c:	428b      	cmp	r3, r1
  40aa8e:	dd03      	ble.n	40aa98 <_lv_style_list_get_color+0x80>
    return list->style_list[id];
  40aa90:	682b      	ldr	r3, [r5, #0]
  40aa92:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40aa96:	e7d6      	b.n	40aa46 <_lv_style_list_get_color+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40aa98:	2000      	movs	r0, #0
  40aa9a:	e7d4      	b.n	40aa46 <_lv_style_list_get_color+0x2e>
            *res = value_act;
  40aa9c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40aaa0:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40aaa4:	2001      	movs	r0, #1
}
  40aaa6:	b003      	add	sp, #12
  40aaa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40aaac:	fab4 f384 	clz	r3, r4
  40aab0:	095b      	lsrs	r3, r3, #5
  40aab2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40aab6:	d1d0      	bne.n	40aa5a <_lv_style_list_get_color+0x42>
  40aab8:	2b00      	cmp	r3, #0
  40aaba:	d0ce      	beq.n	40aa5a <_lv_style_list_get_color+0x42>
  40aabc:	796b      	ldrb	r3, [r5, #5]
  40aabe:	f013 0f01 	tst.w	r3, #1
  40aac2:	d1ca      	bne.n	40aa5a <_lv_style_list_get_color+0x42>
            *res = value_act;
  40aac4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  40aac8:	f8a9 3000 	strh.w	r3, [r9]
            return LV_RES_OK;
  40aacc:	2001      	movs	r0, #1
  40aace:	e7ea      	b.n	40aaa6 <_lv_style_list_get_color+0x8e>
    if(weight >= 0)  return LV_RES_OK;
  40aad0:	2e00      	cmp	r6, #0
  40aad2:	db05      	blt.n	40aae0 <_lv_style_list_get_color+0xc8>
  40aad4:	2001      	movs	r0, #1
  40aad6:	e7e6      	b.n	40aaa6 <_lv_style_list_get_color+0x8e>
    if(list == NULL) return LV_RES_INV;
  40aad8:	2000      	movs	r0, #0
  40aada:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40aadc:	2000      	movs	r0, #0
  40aade:	e7e2      	b.n	40aaa6 <_lv_style_list_get_color+0x8e>
    else return LV_RES_INV;
  40aae0:	2000      	movs	r0, #0
  40aae2:	e7e0      	b.n	40aaa6 <_lv_style_list_get_color+0x8e>
  40aae4:	0040a4cb 	.word	0x0040a4cb

0040aae8 <_lv_style_list_get_opa>:
    if(list == NULL) return LV_RES_INV;
  40aae8:	2800      	cmp	r0, #0
  40aaea:	d05e      	beq.n	40abaa <_lv_style_list_get_opa+0xc2>
{
  40aaec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40aaf0:	b083      	sub	sp, #12
  40aaf2:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40aaf4:	6803      	ldr	r3, [r0, #0]
  40aaf6:	2b00      	cmp	r3, #0
  40aaf8:	d059      	beq.n	40abae <_lv_style_list_get_opa+0xc6>
  40aafa:	4691      	mov	r9, r2
  40aafc:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40aafe:	ea4f 2811 	mov.w	r8, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
  40ab02:	2400      	movs	r4, #0
  40ab04:	f88d 4007 	strb.w	r4, [sp, #7]
    int16_t weight = -1;
  40ab08:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ab0c:	e017      	b.n	40ab3e <_lv_style_list_get_opa+0x56>
    if(list->has_trans && list->skip_trans) id++;
  40ab0e:	3101      	adds	r1, #1
  40ab10:	b2c9      	uxtb	r1, r1
  40ab12:	e020      	b.n	40ab56 <_lv_style_list_get_opa+0x6e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ab14:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_opa(_class, prop, &value_act);
  40ab16:	f10d 0207 	add.w	r2, sp, #7
  40ab1a:	4639      	mov	r1, r7
  40ab1c:	4b26      	ldr	r3, [pc, #152]	; (40abb8 <_lv_style_list_get_opa+0xd0>)
  40ab1e:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40ab20:	4580      	cmp	r8, r0
  40ab22:	d024      	beq.n	40ab6e <_lv_style_list_get_opa+0x86>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ab24:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40ab28:	2b00      	cmp	r3, #0
  40ab2a:	db28      	blt.n	40ab7e <_lv_style_list_get_opa+0x96>
        else if(weight_act > weight) {
  40ab2c:	4286      	cmp	r6, r0
  40ab2e:	da04      	bge.n	40ab3a <_lv_style_list_get_opa+0x52>
            *res = value_act;
  40ab30:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40ab34:	f889 3000 	strb.w	r3, [r9]
            weight =  weight_act;
  40ab38:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ab3a:	3401      	adds	r4, #1
  40ab3c:	b224      	sxth	r4, r4
  40ab3e:	792b      	ldrb	r3, [r5, #4]
  40ab40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ab44:	429c      	cmp	r4, r3
  40ab46:	da2c      	bge.n	40aba2 <_lv_style_list_get_opa+0xba>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ab48:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ab4a:	88aa      	ldrh	r2, [r5, #4]
  40ab4c:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ab50:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ab54:	d0db      	beq.n	40ab0e <_lv_style_list_get_opa+0x26>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ab56:	792a      	ldrb	r2, [r5, #4]
  40ab58:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ab5c:	d0da      	beq.n	40ab14 <_lv_style_list_get_opa+0x2c>
  40ab5e:	428b      	cmp	r3, r1
  40ab60:	dd03      	ble.n	40ab6a <_lv_style_list_get_opa+0x82>
    return list->style_list[id];
  40ab62:	682b      	ldr	r3, [r5, #0]
  40ab64:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ab68:	e7d5      	b.n	40ab16 <_lv_style_list_get_opa+0x2e>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ab6a:	2000      	movs	r0, #0
  40ab6c:	e7d3      	b.n	40ab16 <_lv_style_list_get_opa+0x2e>
            *res = value_act;
  40ab6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40ab72:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40ab76:	2001      	movs	r0, #1
}
  40ab78:	b003      	add	sp, #12
  40ab7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ab7e:	fab4 f384 	clz	r3, r4
  40ab82:	095b      	lsrs	r3, r3, #5
  40ab84:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40ab88:	d1d0      	bne.n	40ab2c <_lv_style_list_get_opa+0x44>
  40ab8a:	2b00      	cmp	r3, #0
  40ab8c:	d0ce      	beq.n	40ab2c <_lv_style_list_get_opa+0x44>
  40ab8e:	796b      	ldrb	r3, [r5, #5]
  40ab90:	f013 0f01 	tst.w	r3, #1
  40ab94:	d1ca      	bne.n	40ab2c <_lv_style_list_get_opa+0x44>
            *res = value_act;
  40ab96:	f89d 3007 	ldrb.w	r3, [sp, #7]
  40ab9a:	f889 3000 	strb.w	r3, [r9]
            return LV_RES_OK;
  40ab9e:	2001      	movs	r0, #1
  40aba0:	e7ea      	b.n	40ab78 <_lv_style_list_get_opa+0x90>
    if(weight >= 0)  return LV_RES_OK;
  40aba2:	2e00      	cmp	r6, #0
  40aba4:	db05      	blt.n	40abb2 <_lv_style_list_get_opa+0xca>
  40aba6:	2001      	movs	r0, #1
  40aba8:	e7e6      	b.n	40ab78 <_lv_style_list_get_opa+0x90>
    if(list == NULL) return LV_RES_INV;
  40abaa:	2000      	movs	r0, #0
  40abac:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40abae:	2000      	movs	r0, #0
  40abb0:	e7e2      	b.n	40ab78 <_lv_style_list_get_opa+0x90>
    else return LV_RES_INV;
  40abb2:	2000      	movs	r0, #0
  40abb4:	e7e0      	b.n	40ab78 <_lv_style_list_get_opa+0x90>
  40abb6:	bf00      	nop
  40abb8:	0040a3c7 	.word	0x0040a3c7

0040abbc <_lv_style_list_get_ptr>:
    if(list == NULL) return LV_RES_INV;
  40abbc:	2800      	cmp	r0, #0
  40abbe:	d058      	beq.n	40ac72 <_lv_style_list_get_ptr+0xb6>
{
  40abc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40abc4:	b083      	sub	sp, #12
  40abc6:	4605      	mov	r5, r0
    if(list->style_list == NULL) return LV_RES_INV;
  40abc8:	6803      	ldr	r3, [r0, #0]
  40abca:	2b00      	cmp	r3, #0
  40abcc:	d053      	beq.n	40ac76 <_lv_style_list_get_ptr+0xba>
  40abce:	4691      	mov	r9, r2
  40abd0:	460f      	mov	r7, r1
    int16_t weight_goal = attr;
  40abd2:	ea4f 2811 	mov.w	r8, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
  40abd6:	2400      	movs	r4, #0
    int16_t weight = -1;
  40abd8:	f04f 36ff 	mov.w	r6, #4294967295
    for(ci = 0; ci < list->style_cnt; ci++) {
  40abdc:	e015      	b.n	40ac0a <_lv_style_list_get_ptr+0x4e>
    if(list->has_trans && list->skip_trans) id++;
  40abde:	3101      	adds	r1, #1
  40abe0:	b2c9      	uxtb	r1, r1
  40abe2:	e01e      	b.n	40ac22 <_lv_style_list_get_ptr+0x66>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40abe4:	2000      	movs	r0, #0
        int16_t weight_act = _lv_style_get_ptr(_class, prop, &value_act);
  40abe6:	aa01      	add	r2, sp, #4
  40abe8:	4639      	mov	r1, r7
  40abea:	4b25      	ldr	r3, [pc, #148]	; (40ac80 <_lv_style_list_get_ptr+0xc4>)
  40abec:	4798      	blx	r3
        if(weight_act == weight_goal) {
  40abee:	4580      	cmp	r8, r0
  40abf0:	d023      	beq.n	40ac3a <_lv_style_list_get_ptr+0x7e>
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40abf2:	f995 3004 	ldrsb.w	r3, [r5, #4]
  40abf6:	2b00      	cmp	r3, #0
  40abf8:	db26      	blt.n	40ac48 <_lv_style_list_get_ptr+0x8c>
        else if(weight_act > weight) {
  40abfa:	4286      	cmp	r6, r0
  40abfc:	da03      	bge.n	40ac06 <_lv_style_list_get_ptr+0x4a>
            *res = value_act;
  40abfe:	9b01      	ldr	r3, [sp, #4]
  40ac00:	f8c9 3000 	str.w	r3, [r9]
            weight =  weight_act;
  40ac04:	4606      	mov	r6, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
  40ac06:	3401      	adds	r4, #1
  40ac08:	b224      	sxth	r4, r4
  40ac0a:	792b      	ldrb	r3, [r5, #4]
  40ac0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  40ac10:	429c      	cmp	r4, r3
  40ac12:	da2a      	bge.n	40ac6a <_lv_style_list_get_ptr+0xae>
        lv_style_t * _class = lv_style_list_get_style(list, ci);
  40ac14:	b2e1      	uxtb	r1, r4
    if(list->has_trans && list->skip_trans) id++;
  40ac16:	88aa      	ldrh	r2, [r5, #4]
  40ac18:	f402 72c0 	and.w	r2, r2, #384	; 0x180
  40ac1c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
  40ac20:	d0dd      	beq.n	40abde <_lv_style_list_get_ptr+0x22>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ac22:	792a      	ldrb	r2, [r5, #4]
  40ac24:	f012 0f3f 	tst.w	r2, #63	; 0x3f
  40ac28:	d0dc      	beq.n	40abe4 <_lv_style_list_get_ptr+0x28>
  40ac2a:	428b      	cmp	r3, r1
  40ac2c:	dd03      	ble.n	40ac36 <_lv_style_list_get_ptr+0x7a>
    return list->style_list[id];
  40ac2e:	682b      	ldr	r3, [r5, #0]
  40ac30:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
  40ac34:	e7d7      	b.n	40abe6 <_lv_style_list_get_ptr+0x2a>
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
  40ac36:	2000      	movs	r0, #0
  40ac38:	e7d5      	b.n	40abe6 <_lv_style_list_get_ptr+0x2a>
            *res = value_act;
  40ac3a:	9b01      	ldr	r3, [sp, #4]
  40ac3c:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40ac40:	2001      	movs	r0, #1
}
  40ac42:	b003      	add	sp, #12
  40ac44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
  40ac48:	fab4 f384 	clz	r3, r4
  40ac4c:	095b      	lsrs	r3, r3, #5
  40ac4e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
  40ac52:	d1d2      	bne.n	40abfa <_lv_style_list_get_ptr+0x3e>
  40ac54:	2b00      	cmp	r3, #0
  40ac56:	d0d0      	beq.n	40abfa <_lv_style_list_get_ptr+0x3e>
  40ac58:	796b      	ldrb	r3, [r5, #5]
  40ac5a:	f013 0f01 	tst.w	r3, #1
  40ac5e:	d1cc      	bne.n	40abfa <_lv_style_list_get_ptr+0x3e>
            *res = value_act;
  40ac60:	9b01      	ldr	r3, [sp, #4]
  40ac62:	f8c9 3000 	str.w	r3, [r9]
            return LV_RES_OK;
  40ac66:	2001      	movs	r0, #1
  40ac68:	e7eb      	b.n	40ac42 <_lv_style_list_get_ptr+0x86>
    if(weight >= 0)  return LV_RES_OK;
  40ac6a:	2e00      	cmp	r6, #0
  40ac6c:	db05      	blt.n	40ac7a <_lv_style_list_get_ptr+0xbe>
  40ac6e:	2001      	movs	r0, #1
  40ac70:	e7e7      	b.n	40ac42 <_lv_style_list_get_ptr+0x86>
    if(list == NULL) return LV_RES_INV;
  40ac72:	2000      	movs	r0, #0
  40ac74:	4770      	bx	lr
    if(list->style_list == NULL) return LV_RES_INV;
  40ac76:	2000      	movs	r0, #0
  40ac78:	e7e3      	b.n	40ac42 <_lv_style_list_get_ptr+0x86>
    else return LV_RES_INV;
  40ac7a:	2000      	movs	r0, #0
  40ac7c:	e7e1      	b.n	40ac42 <_lv_style_list_get_ptr+0x86>
  40ac7e:	bf00      	nop
  40ac80:	0040a5d1 	.word	0x0040a5d1

0040ac84 <map_blended>:
}
#if LV_USE_BLEND_MODES
static void map_blended(const lv_area_t * disp_area, lv_color_t * disp_buf,  const lv_area_t * draw_area,
                        const lv_area_t * map_area, const lv_color_t * map_buf, lv_opa_t opa,
                        const lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_blend_mode_t mode)
{
  40ac84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ac88:	b085      	sub	sp, #20
  40ac8a:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
  40ac8e:	9400      	str	r4, [sp, #0]
  40ac90:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ac94:	8884      	ldrh	r4, [r0, #4]
  40ac96:	f9b0 c000 	ldrsh.w	ip, [r0]
  40ac9a:	fa1f f58c 	uxth.w	r5, ip
  40ac9e:	1b64      	subs	r4, r4, r5
  40aca0:	b2a4      	uxth	r4, r4
  40aca2:	3401      	adds	r4, #1
  40aca4:	b224      	sxth	r4, r4
  40aca6:	9402      	str	r4, [sp, #8]
  40aca8:	8895      	ldrh	r5, [r2, #4]
  40acaa:	f9b2 4000 	ldrsh.w	r4, [r2]
  40acae:	b2a6      	uxth	r6, r4
  40acb0:	1bad      	subs	r5, r5, r6
  40acb2:	b2ad      	uxth	r5, r5
  40acb4:	3501      	adds	r5, #1
  40acb6:	b22e      	sxth	r6, r5
  40acb8:	9603      	str	r6, [sp, #12]
  40acba:	889d      	ldrh	r5, [r3, #4]
  40acbc:	f9b3 e000 	ldrsh.w	lr, [r3]
  40acc0:	fa1f f68e 	uxth.w	r6, lr
  40acc4:	1bad      	subs	r5, r5, r6
  40acc6:	b2ad      	uxth	r5, r5
  40acc8:	3501      	adds	r5, #1
  40acca:	b22e      	sxth	r6, r5
  40accc:	9601      	str	r6, [sp, #4]

    /*Get the width of the `mask_area` it will be used to go to the next line*/
    int32_t map_w = lv_area_get_width(map_area);

    /*Create a temp. disp_buf which always point to current line to draw*/
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40acce:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40acd2:	9d02      	ldr	r5, [sp, #8]
  40acd4:	fb0b f605 	mul.w	r6, fp, r5
  40acd8:	eb01 0646 	add.w	r6, r1, r6, lsl #1

    /*Create a temp. map_buf which always point to current line to draw*/
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40acdc:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40ace0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40ace4:	1aed      	subs	r5, r5, r3
  40ace6:	ebab 0505 	sub.w	r5, fp, r5
  40acea:	9b01      	ldr	r3, [sp, #4]
  40acec:	fb05 f503 	mul.w	r5, r5, r3
  40acf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40acf2:	eb03 0545 	add.w	r5, r3, r5, lsl #1

    lv_color_t (*blend_fp)(lv_color_t, lv_color_t, lv_opa_t);
    switch(mode) {
  40acf6:	2f01      	cmp	r7, #1
  40acf8:	d004      	beq.n	40ad04 <map_blended+0x80>
  40acfa:	2f02      	cmp	r7, #2
  40acfc:	d00f      	beq.n	40ad1e <map_blended+0x9a>
            disp_buf_tmp += disp_w;
            mask_tmp += draw_area_w;
            map_buf_tmp += map_w;
        }
    }
}
  40acfe:	b005      	add	sp, #20
  40ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40ad04:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 40adc8 <map_blended+0x144>
  40ad08:	4617      	mov	r7, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40ad0a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40ad0e:	2b01      	cmp	r3, #1
  40ad10:	d008      	beq.n	40ad24 <map_blended+0xa0>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40ad12:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40ad14:	eba3 0904 	sub.w	r9, r3, r4
        map_buf_tmp -= draw_area->x1;
  40ad18:	eba5 0844 	sub.w	r8, r5, r4, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad1c:	e04d      	b.n	40adba <map_blended+0x136>
            blend_fp = color_blend_true_color_subtractive;
  40ad1e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 40adcc <map_blended+0x148>
  40ad22:	e7f1      	b.n	40ad08 <map_blended+0x84>
        map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40ad24:	ebae 030c 	sub.w	r3, lr, ip
  40ad28:	1ae3      	subs	r3, r4, r3
        map_buf_tmp -= draw_area->x1;
  40ad2a:	0064      	lsls	r4, r4, #1
  40ad2c:	ebc4 0343 	rsb	r3, r4, r3, lsl #1
  40ad30:	441d      	add	r5, r3
  40ad32:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40ad36:	f8dd 8000 	ldr.w	r8, [sp]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad3a:	e013      	b.n	40ad64 <map_blended+0xe0>
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa);
  40ad3c:	4642      	mov	r2, r8
  40ad3e:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
  40ad42:	f835 0014 	ldrh.w	r0, [r5, r4, lsl #1]
  40ad46:	47d0      	blx	sl
  40ad48:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad4c:	3401      	adds	r4, #1
  40ad4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40ad52:	429c      	cmp	r4, r3
  40ad54:	ddf2      	ble.n	40ad3c <map_blended+0xb8>
            disp_buf_tmp += disp_w;
  40ad56:	eb06 0649 	add.w	r6, r6, r9, lsl #1
            map_buf_tmp += map_w;
  40ad5a:	9b01      	ldr	r3, [sp, #4]
  40ad5c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ad60:	f10b 0b01 	add.w	fp, fp, #1
  40ad64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40ad68:	459b      	cmp	fp, r3
  40ad6a:	dcc8      	bgt.n	40acfe <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad6c:	f9b7 4000 	ldrsh.w	r4, [r7]
  40ad70:	e7ed      	b.n	40ad4e <map_blended+0xca>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40ad72:	9a00      	ldr	r2, [sp, #0]
                disp_buf_tmp[x] = blend_fp(map_buf_tmp[x], disp_buf_tmp[x], opa_tmp);
  40ad74:	f836 1015 	ldrh.w	r1, [r6, r5, lsl #1]
  40ad78:	f838 0015 	ldrh.w	r0, [r8, r5, lsl #1]
  40ad7c:	47d0      	blx	sl
  40ad7e:	f826 0015 	strh.w	r0, [r6, r5, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ad82:	3401      	adds	r4, #1
  40ad84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
  40ad88:	429c      	cmp	r4, r3
  40ad8a:	dc0c      	bgt.n	40ada6 <map_blended+0x122>
                if(mask_tmp[x] == 0) continue;
  40ad8c:	4625      	mov	r5, r4
  40ad8e:	f819 2004 	ldrb.w	r2, [r9, r4]
  40ad92:	2a00      	cmp	r2, #0
  40ad94:	d0f5      	beq.n	40ad82 <map_blended+0xfe>
                lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : ((opa * mask_tmp[x]) >> 8);
  40ad96:	2afc      	cmp	r2, #252	; 0xfc
  40ad98:	d8eb      	bhi.n	40ad72 <map_blended+0xee>
  40ad9a:	9b00      	ldr	r3, [sp, #0]
  40ad9c:	fb02 f203 	mul.w	r2, r2, r3
  40ada0:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40ada4:	e7e6      	b.n	40ad74 <map_blended+0xf0>
            disp_buf_tmp += disp_w;
  40ada6:	9b02      	ldr	r3, [sp, #8]
  40ada8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
            mask_tmp += draw_area_w;
  40adac:	9b03      	ldr	r3, [sp, #12]
  40adae:	4499      	add	r9, r3
            map_buf_tmp += map_w;
  40adb0:	9b01      	ldr	r3, [sp, #4]
  40adb2:	eb08 0843 	add.w	r8, r8, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40adb6:	f10b 0b01 	add.w	fp, fp, #1
  40adba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
  40adbe:	459b      	cmp	fp, r3
  40adc0:	dc9d      	bgt.n	40acfe <map_blended+0x7a>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40adc2:	f9b7 4000 	ldrsh.w	r4, [r7]
  40adc6:	e7dd      	b.n	40ad84 <map_blended+0x100>
  40adc8:	0040bf91 	.word	0x0040bf91
  40adcc:	0040c07f 	.word	0x0040c07f

0040add0 <fill_set_px>:
{
  40add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40add4:	b089      	sub	sp, #36	; 0x24
  40add6:	4604      	mov	r4, r0
  40add8:	9106      	str	r1, [sp, #24]
  40adda:	4615      	mov	r5, r2
  40addc:	4698      	mov	r8, r3
  40adde:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40ade2:	4b33      	ldr	r3, [pc, #204]	; (40aeb0 <fill_set_px+0xe0>)
  40ade4:	4798      	blx	r3
  40ade6:	4606      	mov	r6, r0
  40ade8:	88a3      	ldrh	r3, [r4, #4]
  40adea:	8822      	ldrh	r2, [r4, #0]
  40adec:	1a9b      	subs	r3, r3, r2
  40adee:	b29b      	uxth	r3, r3
  40adf0:	3301      	adds	r3, #1
  40adf2:	b21b      	sxth	r3, r3
  40adf4:	9305      	str	r3, [sp, #20]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40adf6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
  40adfa:	2b01      	cmp	r3, #1
  40adfc:	d00d      	beq.n	40ae1a <fill_set_px+0x4a>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40adfe:	f9b5 2000 	ldrsh.w	r2, [r5]
  40ae02:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  40ae04:	1abf      	subs	r7, r7, r2
  40ae06:	88ab      	ldrh	r3, [r5, #4]
  40ae08:	b292      	uxth	r2, r2
  40ae0a:	1a9b      	subs	r3, r3, r2
  40ae0c:	b29b      	uxth	r3, r3
  40ae0e:	3301      	adds	r3, #1
  40ae10:	b21b      	sxth	r3, r3
  40ae12:	9307      	str	r3, [sp, #28]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ae14:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40ae18:	e03f      	b.n	40ae9a <fill_set_px+0xca>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ae1a:	f9b5 a002 	ldrsh.w	sl, [r5, #2]
  40ae1e:	f8dd b018 	ldr.w	fp, [sp, #24]
  40ae22:	e014      	b.n	40ae4e <fill_set_px+0x7e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
  40ae24:	f8d6 9014 	ldr.w	r9, [r6, #20]
  40ae28:	9702      	str	r7, [sp, #8]
  40ae2a:	f8ad 8004 	strh.w	r8, [sp, #4]
  40ae2e:	fa0f f38a 	sxth.w	r3, sl
  40ae32:	9300      	str	r3, [sp, #0]
  40ae34:	b223      	sxth	r3, r4
  40ae36:	9a05      	ldr	r2, [sp, #20]
  40ae38:	4659      	mov	r1, fp
  40ae3a:	4630      	mov	r0, r6
  40ae3c:	47c8      	blx	r9
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ae3e:	3401      	adds	r4, #1
  40ae40:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ae44:	429c      	cmp	r4, r3
  40ae46:	dded      	ble.n	40ae24 <fill_set_px+0x54>
  40ae48:	46b9      	mov	r9, r7
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ae4a:	f10a 0a01 	add.w	sl, sl, #1
  40ae4e:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ae52:	459a      	cmp	sl, r3
  40ae54:	dc28      	bgt.n	40aea8 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ae56:	f9b5 4000 	ldrsh.w	r4, [r5]
  40ae5a:	464f      	mov	r7, r9
  40ae5c:	e7f0      	b.n	40ae40 <fill_set_px+0x70>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40ae5e:	3401      	adds	r4, #1
  40ae60:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40ae64:	429c      	cmp	r4, r3
  40ae66:	dc14      	bgt.n	40ae92 <fill_set_px+0xc2>
                if(mask_tmp[x]) {
  40ae68:	5d3b      	ldrb	r3, [r7, r4]
  40ae6a:	2b00      	cmp	r3, #0
  40ae6c:	d0f7      	beq.n	40ae5e <fill_set_px+0x8e>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40ae6e:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40ae72:	fb03 f309 	mul.w	r3, r3, r9
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
  40ae76:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40ae7a:	9302      	str	r3, [sp, #8]
  40ae7c:	f8ad 8004 	strh.w	r8, [sp, #4]
  40ae80:	fa0f f38a 	sxth.w	r3, sl
  40ae84:	9300      	str	r3, [sp, #0]
  40ae86:	b223      	sxth	r3, r4
  40ae88:	9a05      	ldr	r2, [sp, #20]
  40ae8a:	9906      	ldr	r1, [sp, #24]
  40ae8c:	4630      	mov	r0, r6
  40ae8e:	47d8      	blx	fp
  40ae90:	e7e5      	b.n	40ae5e <fill_set_px+0x8e>
            mask_tmp += draw_area_w;
  40ae92:	9b07      	ldr	r3, [sp, #28]
  40ae94:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40ae96:	f10a 0a01 	add.w	sl, sl, #1
  40ae9a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40ae9e:	459a      	cmp	sl, r3
  40aea0:	dc02      	bgt.n	40aea8 <fill_set_px+0xd8>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40aea2:	f9b5 4000 	ldrsh.w	r4, [r5]
  40aea6:	e7db      	b.n	40ae60 <fill_set_px+0x90>
}
  40aea8:	b009      	add	sp, #36	; 0x24
  40aeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40aeae:	bf00      	nop
  40aeb0:	00409269 	.word	0x00409269

0040aeb4 <map_set_px>:
{
  40aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aeb8:	b089      	sub	sp, #36	; 0x24
  40aeba:	4604      	mov	r4, r0
  40aebc:	9105      	str	r1, [sp, #20]
  40aebe:	4615      	mov	r5, r2
  40aec0:	461f      	mov	r7, r3
  40aec2:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40aec6:	4b48      	ldr	r3, [pc, #288]	; (40afe8 <map_set_px+0x134>)
  40aec8:	4798      	blx	r3
  40aeca:	4606      	mov	r6, r0
  40aecc:	88a3      	ldrh	r3, [r4, #4]
  40aece:	f9b4 9000 	ldrsh.w	r9, [r4]
  40aed2:	fa1f f289 	uxth.w	r2, r9
  40aed6:	1a9b      	subs	r3, r3, r2
  40aed8:	b29b      	uxth	r3, r3
  40aeda:	3301      	adds	r3, #1
  40aedc:	b21b      	sxth	r3, r3
  40aede:	9304      	str	r3, [sp, #16]
  40aee0:	88ab      	ldrh	r3, [r5, #4]
  40aee2:	f9b5 2000 	ldrsh.w	r2, [r5]
  40aee6:	b291      	uxth	r1, r2
  40aee8:	1a5b      	subs	r3, r3, r1
  40aeea:	b29b      	uxth	r3, r3
  40aeec:	3301      	adds	r3, #1
  40aeee:	b21b      	sxth	r3, r3
  40aef0:	9307      	str	r3, [sp, #28]
  40aef2:	88b9      	ldrh	r1, [r7, #4]
  40aef4:	f9b7 3000 	ldrsh.w	r3, [r7]
  40aef8:	b298      	uxth	r0, r3
  40aefa:	1a09      	subs	r1, r1, r0
  40aefc:	b289      	uxth	r1, r1
  40aefe:	3101      	adds	r1, #1
  40af00:	b209      	sxth	r1, r1
  40af02:	9106      	str	r1, [sp, #24]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40af04:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
  40af08:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
  40af0c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
  40af10:	1a09      	subs	r1, r1, r0
  40af12:	eba8 0101 	sub.w	r1, r8, r1
  40af16:	9806      	ldr	r0, [sp, #24]
  40af18:	fb01 f100 	mul.w	r1, r1, r0
    map_buf_tmp += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40af1c:	eba3 0909 	sub.w	r9, r3, r9
  40af20:	eba2 0909 	sub.w	r9, r2, r9
  40af24:	ea4f 0949 	mov.w	r9, r9, lsl #1
    map_buf_tmp -= draw_area->x1;
  40af28:	eb09 0941 	add.w	r9, r9, r1, lsl #1
  40af2c:	eba9 0942 	sub.w	r9, r9, r2, lsl #1
  40af30:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40af32:	4499      	add	r9, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40af34:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  40af38:	2b01      	cmp	r3, #1
  40af3a:	d024      	beq.n	40af86 <map_set_px+0xd2>
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40af3c:	9f14      	ldr	r7, [sp, #80]	; 0x50
  40af3e:	1abf      	subs	r7, r7, r2
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40af40:	e047      	b.n	40afd2 <map_set_px+0x11e>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
  40af42:	f8d6 a014 	ldr.w	sl, [r6, #20]
  40af46:	9702      	str	r7, [sp, #8]
  40af48:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40af4c:	f8ad 3004 	strh.w	r3, [sp, #4]
  40af50:	fa0f f388 	sxth.w	r3, r8
  40af54:	9300      	str	r3, [sp, #0]
  40af56:	b223      	sxth	r3, r4
  40af58:	9a04      	ldr	r2, [sp, #16]
  40af5a:	4659      	mov	r1, fp
  40af5c:	4630      	mov	r0, r6
  40af5e:	47d0      	blx	sl
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40af60:	3401      	adds	r4, #1
  40af62:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40af66:	429c      	cmp	r4, r3
  40af68:	ddeb      	ble.n	40af42 <map_set_px+0x8e>
  40af6a:	46ba      	mov	sl, r7
            map_buf_tmp += map_w;
  40af6c:	9b06      	ldr	r3, [sp, #24]
  40af6e:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40af72:	f108 0801 	add.w	r8, r8, #1
  40af76:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40af7a:	4598      	cmp	r8, r3
  40af7c:	dc30      	bgt.n	40afe0 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40af7e:	f9b5 4000 	ldrsh.w	r4, [r5]
  40af82:	4657      	mov	r7, sl
  40af84:	e7ed      	b.n	40af62 <map_set_px+0xae>
  40af86:	f8dd b014 	ldr.w	fp, [sp, #20]
  40af8a:	e7f4      	b.n	40af76 <map_set_px+0xc2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40af8c:	3401      	adds	r4, #1
  40af8e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40af92:	429c      	cmp	r4, r3
  40af94:	dc16      	bgt.n	40afc4 <map_set_px+0x110>
                if(mask_tmp[x]) {
  40af96:	5d3b      	ldrb	r3, [r7, r4]
  40af98:	2b00      	cmp	r3, #0
  40af9a:	d0f7      	beq.n	40af8c <map_set_px+0xd8>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40af9c:	f8d6 b014 	ldr.w	fp, [r6, #20]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
  40afa0:	fb03 f30a 	mul.w	r3, r3, sl
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
  40afa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40afa8:	9302      	str	r3, [sp, #8]
  40afaa:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
  40afae:	f8ad 3004 	strh.w	r3, [sp, #4]
  40afb2:	fa0f f388 	sxth.w	r3, r8
  40afb6:	9300      	str	r3, [sp, #0]
  40afb8:	b223      	sxth	r3, r4
  40afba:	9a04      	ldr	r2, [sp, #16]
  40afbc:	9905      	ldr	r1, [sp, #20]
  40afbe:	4630      	mov	r0, r6
  40afc0:	47d8      	blx	fp
  40afc2:	e7e3      	b.n	40af8c <map_set_px+0xd8>
            mask_tmp += draw_area_w;
  40afc4:	9b07      	ldr	r3, [sp, #28]
  40afc6:	441f      	add	r7, r3
            map_buf_tmp += map_w;
  40afc8:	9b06      	ldr	r3, [sp, #24]
  40afca:	eb09 0943 	add.w	r9, r9, r3, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40afce:	f108 0801 	add.w	r8, r8, #1
  40afd2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40afd6:	4598      	cmp	r8, r3
  40afd8:	dc02      	bgt.n	40afe0 <map_set_px+0x12c>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40afda:	f9b5 4000 	ldrsh.w	r4, [r5]
  40afde:	e7d6      	b.n	40af8e <map_set_px+0xda>
}
  40afe0:	b009      	add	sp, #36	; 0x24
  40afe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40afe6:	bf00      	nop
  40afe8:	00409269 	.word	0x00409269

0040afec <map_normal>:
{
  40afec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40aff0:	b08f      	sub	sp, #60	; 0x3c
  40aff2:	4686      	mov	lr, r0
  40aff4:	4614      	mov	r4, r2
  40aff6:	9206      	str	r2, [sp, #24]
  40aff8:	f89d 7064 	ldrb.w	r7, [sp, #100]	; 0x64
  40affc:	8882      	ldrh	r2, [r0, #4]
  40affe:	f9b0 0000 	ldrsh.w	r0, [r0]
  40b002:	9003      	str	r0, [sp, #12]
  40b004:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40b008:	1a12      	subs	r2, r2, r0
  40b00a:	b292      	uxth	r2, r2
  40b00c:	3201      	adds	r2, #1
  40b00e:	b212      	sxth	r2, r2
  40b010:	9208      	str	r2, [sp, #32]
  40b012:	88a2      	ldrh	r2, [r4, #4]
  40b014:	f9b4 c000 	ldrsh.w	ip, [r4]
  40b018:	fa1f f08c 	uxth.w	r0, ip
  40b01c:	1a12      	subs	r2, r2, r0
  40b01e:	b292      	uxth	r2, r2
  40b020:	3201      	adds	r2, #1
  40b022:	b212      	sxth	r2, r2
  40b024:	9209      	str	r2, [sp, #36]	; 0x24
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b026:	4693      	mov	fp, r2
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b028:	88e0      	ldrh	r0, [r4, #6]
  40b02a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  40b02e:	b294      	uxth	r4, r2
  40b030:	1b00      	subs	r0, r0, r4
  40b032:	b280      	uxth	r0, r0
  40b034:	3001      	adds	r0, #1
  40b036:	b204      	sxth	r4, r0
  40b038:	940a      	str	r4, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40b03a:	8898      	ldrh	r0, [r3, #4]
  40b03c:	f9b3 5000 	ldrsh.w	r5, [r3]
  40b040:	b2ac      	uxth	r4, r5
  40b042:	1b00      	subs	r0, r0, r4
  40b044:	b280      	uxth	r0, r0
  40b046:	3001      	adds	r0, #1
  40b048:	b204      	sxth	r4, r0
  40b04a:	9407      	str	r4, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b04c:	9808      	ldr	r0, [sp, #32]
  40b04e:	fb02 c400 	mla	r4, r2, r0, ip
  40b052:	eb01 0444 	add.w	r4, r1, r4, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
  40b056:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  40b05a:	f9be 1002 	ldrsh.w	r1, [lr, #2]
  40b05e:	1a5b      	subs	r3, r3, r1
  40b060:	1ad3      	subs	r3, r2, r3
  40b062:	9a07      	ldr	r2, [sp, #28]
  40b064:	fb03 f302 	mul.w	r3, r3, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
  40b068:	9803      	ldr	r0, [sp, #12]
  40b06a:	1a2d      	subs	r5, r5, r0
  40b06c:	ebac 0505 	sub.w	r5, ip, r5
  40b070:	006d      	lsls	r5, r5, #1
  40b072:	eb05 0343 	add.w	r3, r5, r3, lsl #1
  40b076:	9d18      	ldr	r5, [sp, #96]	; 0x60
  40b078:	441d      	add	r5, r3
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b07a:	4b8a      	ldr	r3, [pc, #552]	; (40b2a4 <map_normal+0x2b8>)
  40b07c:	4798      	blx	r3
  40b07e:	9003      	str	r0, [sp, #12]
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b080:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
  40b084:	2b01      	cmp	r3, #1
  40b086:	d008      	beq.n	40b09a <map_normal+0xae>
        if(opa > LV_OPA_MAX) {
  40b088:	2ffd      	cmp	r7, #253	; 0xfd
  40b08a:	f240 8383 	bls.w	40b794 <map_normal+0x7a8>
            int32_t x_end4 = draw_area_w - 4;
  40b08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b090:	3b04      	subs	r3, #4
  40b092:	9303      	str	r3, [sp, #12]
            for(y = 0; y < draw_area_h; y++) {
  40b094:	2300      	movs	r3, #0
  40b096:	9306      	str	r3, [sp, #24]
  40b098:	e308      	b.n	40b6ac <map_normal+0x6c0>
        if(disp->driver.gpu_blend_cb && (lv_area_get_size(draw_area) > GPU_SIZE_LIMIT)) {
  40b09a:	6a83      	ldr	r3, [r0, #40]	; 0x28
  40b09c:	b32b      	cbz	r3, 40b0ea <map_normal+0xfe>
  40b09e:	9e06      	ldr	r6, [sp, #24]
  40b0a0:	4630      	mov	r0, r6
  40b0a2:	4b81      	ldr	r3, [pc, #516]	; (40b2a8 <map_normal+0x2bc>)
  40b0a4:	4798      	blx	r3
  40b0a6:	28f0      	cmp	r0, #240	; 0xf0
  40b0a8:	d91f      	bls.n	40b0ea <map_normal+0xfe>
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b0aa:	4631      	mov	r1, r6
  40b0ac:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
  40b0b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
  40b0b4:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b0b8:	4689      	mov	r9, r1
  40b0ba:	46bb      	mov	fp, r7
  40b0bc:	e00e      	b.n	40b0dc <map_normal+0xf0>
                disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, map_buf_first, draw_area_w, opa);
  40b0be:	f8d8 7028 	ldr.w	r7, [r8, #40]	; 0x28
  40b0c2:	f8cd b000 	str.w	fp, [sp]
  40b0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b0c8:	462a      	mov	r2, r5
  40b0ca:	4621      	mov	r1, r4
  40b0cc:	4640      	mov	r0, r8
  40b0ce:	47b8      	blx	r7
                disp_buf_first += disp_w;
  40b0d0:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b0d4:	9b07      	ldr	r3, [sp, #28]
  40b0d6:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b0da:	3601      	adds	r6, #1
  40b0dc:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
  40b0e0:	429e      	cmp	r6, r3
  40b0e2:	ddec      	ble.n	40b0be <map_normal+0xd2>
}
  40b0e4:	b00f      	add	sp, #60	; 0x3c
  40b0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(opa > LV_OPA_MAX) {
  40b0ea:	2ffd      	cmp	r7, #253	; 0xfd
  40b0ec:	d812      	bhi.n	40b114 <map_normal+0x128>
  40b0ee:	f04f 0800 	mov.w	r8, #0
  40b0f2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
  40b0f6:	e069      	b.n	40b1cc <map_normal+0x1e0>
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
  40b0f8:	ea4f 0249 	mov.w	r2, r9, lsl #1
  40b0fc:	4629      	mov	r1, r5
  40b0fe:	4620      	mov	r0, r4
  40b100:	4b6a      	ldr	r3, [pc, #424]	; (40b2ac <map_normal+0x2c0>)
  40b102:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b104:	eb04 044a 	add.w	r4, r4, sl, lsl #1
                map_buf_first += map_w;
  40b108:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b10c:	3601      	adds	r6, #1
  40b10e:	42be      	cmp	r6, r7
  40b110:	dbf2      	blt.n	40b0f8 <map_normal+0x10c>
  40b112:	e7e7      	b.n	40b0e4 <map_normal+0xf8>
  40b114:	2600      	movs	r6, #0
  40b116:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  40b118:	f8dd 801c 	ldr.w	r8, [sp, #28]
  40b11c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40b120:	f8dd a020 	ldr.w	sl, [sp, #32]
  40b124:	e7f3      	b.n	40b10e <map_normal+0x122>
  40b126:	f835 301c 	ldrh.w	r3, [r5, ip, lsl #1]
  40b12a:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix(lv_color_t c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b12e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40b132:	f3c1 06c4 	ubfx	r6, r1, #3, #5
  40b136:	f1c7 00ff 	rsb	r0, r7, #255	; 0xff
  40b13a:	fb00 f606 	mul.w	r6, r0, r6
  40b13e:	fb07 6202 	mla	r2, r7, r2, r6
  40b142:	3280      	adds	r2, #128	; 0x80
  40b144:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b148:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b14c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b150:	f362 0ac7 	bfi	sl, r2, #3, #5
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b154:	f003 0607 	and.w	r6, r3, #7
  40b158:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40b15c:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  40b160:	f001 0e07 	and.w	lr, r1, #7
  40b164:	f3c1 3642 	ubfx	r6, r1, #13, #3
  40b168:	eb06 06ce 	add.w	r6, r6, lr, lsl #3
  40b16c:	fb06 f600 	mul.w	r6, r6, r0
  40b170:	fb02 6207 	mla	r2, r2, r7, r6
  40b174:	3280      	adds	r2, #128	; 0x80
  40b176:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  40b17a:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  40b17e:	f3c2 6682 	ubfx	r6, r2, #26, #3
  40b182:	f366 0a02 	bfi	sl, r6, #0, #3
  40b186:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b18a:	f362 3a4f 	bfi	sl, r2, #13, #3
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b18e:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40b192:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b196:	fb01 f000 	mul.w	r0, r1, r0
  40b19a:	fb03 0307 	mla	r3, r3, r7, r0
  40b19e:	3380      	adds	r3, #128	; 0x80
  40b1a0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b1a4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b1a8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b1ac:	f363 2a0c 	bfi	sl, r3, #8, #5
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
  40b1b0:	f824 a01c 	strh.w	sl, [r4, ip, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b1b4:	f10c 0c01 	add.w	ip, ip, #1
  40b1b8:	45dc      	cmp	ip, fp
  40b1ba:	dbb4      	blt.n	40b126 <map_normal+0x13a>
                disp_buf_first += disp_w;
  40b1bc:	9b08      	ldr	r3, [sp, #32]
  40b1be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                map_buf_first += map_w;
  40b1c2:	9b07      	ldr	r3, [sp, #28]
  40b1c4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b1c8:	f108 0801 	add.w	r8, r8, #1
  40b1cc:	45c8      	cmp	r8, r9
  40b1ce:	da89      	bge.n	40b0e4 <map_normal+0xf8>
  40b1d0:	f04f 0c00 	mov.w	ip, #0
  40b1d4:	e7f0      	b.n	40b1b8 <map_normal+0x1cc>
                    MAP_NORMAL_MASK_PX(x)
  40b1d6:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b1da:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b1de:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40b1e0:	3301      	adds	r3, #1
  40b1e2:	455b      	cmp	r3, fp
  40b1e4:	f280 81e6 	bge.w	40b5b4 <map_normal+0x5c8>
  40b1e8:	f012 0f03 	tst.w	r2, #3
  40b1ec:	d04c      	beq.n	40b288 <map_normal+0x29c>
                    MAP_NORMAL_MASK_PX(x)
  40b1ee:	7811      	ldrb	r1, [r2, #0]
  40b1f0:	2900      	cmp	r1, #0
  40b1f2:	d0f4      	beq.n	40b1de <map_normal+0x1f2>
  40b1f4:	29ff      	cmp	r1, #255	; 0xff
  40b1f6:	d0ee      	beq.n	40b1d6 <map_normal+0x1ea>
  40b1f8:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b1fc:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b200:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b204:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b208:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b20c:	fb0e fc0c 	mul.w	ip, lr, ip
  40b210:	fb01 c000 	mla	r0, r1, r0, ip
  40b214:	3080      	adds	r0, #128	; 0x80
  40b216:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b21a:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b21e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b222:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b226:	f007 0c07 	and.w	ip, r7, #7
  40b22a:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b22e:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b232:	f006 0a07 	and.w	sl, r6, #7
  40b236:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b23a:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b23e:	fb0c fc0e 	mul.w	ip, ip, lr
  40b242:	fb00 c001 	mla	r0, r0, r1, ip
  40b246:	3080      	adds	r0, #128	; 0x80
  40b248:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b24c:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b250:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b254:	f36c 0802 	bfi	r8, ip, #0, #3
  40b258:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b25c:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b260:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b264:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b268:	fb06 fe0e 	mul.w	lr, r6, lr
  40b26c:	fb07 e101 	mla	r1, r7, r1, lr
  40b270:	3180      	adds	r1, #128	; 0x80
  40b272:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b276:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b27a:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b27e:	f361 280c 	bfi	r8, r1, #8, #5
  40b282:	f824 8013 	strh.w	r8, [r4, r3, lsl #1]
  40b286:	e7aa      	b.n	40b1de <map_normal+0x1f2>
  40b288:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b28c:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b290:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b294:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b298:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b29c:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b2a0:	e01b      	b.n	40b2da <map_normal+0x2ee>
  40b2a2:	bf00      	nop
  40b2a4:	00409269 	.word	0x00409269
  40b2a8:	00414ed7 	.word	0x00414ed7
  40b2ac:	004160d1 	.word	0x004160d1
                            disp_buf_first[x] = map_buf_first[x];
  40b2b0:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b2b4:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
  40b2b8:	1c59      	adds	r1, r3, #1
  40b2ba:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b2be:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
  40b2c2:	1c99      	adds	r1, r3, #2
  40b2c4:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b2c8:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                            disp_buf_first[x + 3] = map_buf_first[x + 3];
  40b2cc:	1cd9      	adds	r1, r3, #3
  40b2ce:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b2d2:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
                    mask32++;
  40b2d6:	3204      	adds	r2, #4
                for(; x < x_end4; x += 4) {
  40b2d8:	3304      	adds	r3, #4
  40b2da:	9903      	ldr	r1, [sp, #12]
  40b2dc:	428b      	cmp	r3, r1
  40b2de:	f280 8176 	bge.w	40b5ce <map_normal+0x5e2>
                    if(*mask32) {
  40b2e2:	6811      	ldr	r1, [r2, #0]
  40b2e4:	2900      	cmp	r1, #0
  40b2e6:	d0f6      	beq.n	40b2d6 <map_normal+0x2ea>
                        if((*mask32) == 0xFFFFFFFF) {
  40b2e8:	f1b1 3fff 	cmp.w	r1, #4294967295
  40b2ec:	d0e0      	beq.n	40b2b0 <map_normal+0x2c4>
                            MAP_NORMAL_MASK_PX(x)
  40b2ee:	7811      	ldrb	r1, [r2, #0]
  40b2f0:	2900      	cmp	r1, #0
  40b2f2:	d049      	beq.n	40b388 <map_normal+0x39c>
  40b2f4:	29ff      	cmp	r1, #255	; 0xff
  40b2f6:	f000 8146 	beq.w	40b586 <map_normal+0x59a>
  40b2fa:	f835 c013 	ldrh.w	ip, [r5, r3, lsl #1]
  40b2fe:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b302:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b306:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b30a:	f1c1 09ff 	rsb	r9, r1, #255	; 0xff
  40b30e:	fb09 f808 	mul.w	r8, r9, r8
  40b312:	fb01 8000 	mla	r0, r1, r0, r8
  40b316:	3080      	adds	r0, #128	; 0x80
  40b318:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b31c:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b320:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b324:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b328:	f00c 0807 	and.w	r8, ip, #7
  40b32c:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b330:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b334:	f006 0707 	and.w	r7, r6, #7
  40b338:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b33c:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b340:	fb08 f809 	mul.w	r8, r8, r9
  40b344:	fb00 8001 	mla	r0, r0, r1, r8
  40b348:	3080      	adds	r0, #128	; 0x80
  40b34a:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b34e:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b352:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b356:	f368 0e02 	bfi	lr, r8, #0, #3
  40b35a:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b35e:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b362:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b366:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b36a:	fb06 f609 	mul.w	r6, r6, r9
  40b36e:	fb0c 6601 	mla	r6, ip, r1, r6
  40b372:	3680      	adds	r6, #128	; 0x80
  40b374:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b378:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b37c:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b380:	f366 2e0c 	bfi	lr, r6, #8, #5
  40b384:	f824 e013 	strh.w	lr, [r4, r3, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 1)
  40b388:	7851      	ldrb	r1, [r2, #1]
  40b38a:	2900      	cmp	r1, #0
  40b38c:	d056      	beq.n	40b43c <map_normal+0x450>
  40b38e:	29ff      	cmp	r1, #255	; 0xff
  40b390:	f000 80fe 	beq.w	40b590 <map_normal+0x5a4>
  40b394:	f103 0901 	add.w	r9, r3, #1
  40b398:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b39c:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b3a0:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b3a4:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b3a8:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b3ac:	9705      	str	r7, [sp, #20]
  40b3ae:	fb07 f808 	mul.w	r8, r7, r8
  40b3b2:	fb01 8000 	mla	r0, r1, r0, r8
  40b3b6:	3080      	adds	r0, #128	; 0x80
  40b3b8:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b3bc:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b3c0:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b3c4:	9f04      	ldr	r7, [sp, #16]
  40b3c6:	f360 07c7 	bfi	r7, r0, #3, #5
  40b3ca:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b3cc:	f00c 0807 	and.w	r8, ip, #7
  40b3d0:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b3d4:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b3d8:	f006 0807 	and.w	r8, r6, #7
  40b3dc:	4647      	mov	r7, r8
  40b3de:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b3e2:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b3e6:	9f05      	ldr	r7, [sp, #20]
  40b3e8:	fb08 f807 	mul.w	r8, r8, r7
  40b3ec:	fb00 8001 	mla	r0, r0, r1, r8
  40b3f0:	3080      	adds	r0, #128	; 0x80
  40b3f2:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b3f6:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b3fa:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b3fe:	9f04      	ldr	r7, [sp, #16]
  40b400:	f368 0702 	bfi	r7, r8, #0, #3
  40b404:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b408:	f360 374f 	bfi	r7, r0, #13, #3
  40b40c:	4638      	mov	r0, r7
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b40e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b412:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b416:	9f05      	ldr	r7, [sp, #20]
  40b418:	fb06 f607 	mul.w	r6, r6, r7
  40b41c:	fb0c 6601 	mla	r6, ip, r1, r6
  40b420:	3680      	adds	r6, #128	; 0x80
  40b422:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b426:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b42a:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b42e:	4601      	mov	r1, r0
  40b430:	f366 210c 	bfi	r1, r6, #8, #5
  40b434:	f8ad 1010 	strh.w	r1, [sp, #16]
  40b438:	f824 1019 	strh.w	r1, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 2)
  40b43c:	7891      	ldrb	r1, [r2, #2]
  40b43e:	2900      	cmp	r1, #0
  40b440:	d04e      	beq.n	40b4e0 <map_normal+0x4f4>
  40b442:	29ff      	cmp	r1, #255	; 0xff
  40b444:	f000 80aa 	beq.w	40b59c <map_normal+0x5b0>
  40b448:	f103 0902 	add.w	r9, r3, #2
  40b44c:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b450:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b454:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b458:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b45c:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b460:	9705      	str	r7, [sp, #20]
  40b462:	fb07 f808 	mul.w	r8, r7, r8
  40b466:	fb01 8000 	mla	r0, r1, r0, r8
  40b46a:	3080      	adds	r0, #128	; 0x80
  40b46c:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b470:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b474:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b478:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b47c:	f00c 0807 	and.w	r8, ip, #7
  40b480:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b484:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b488:	f006 0807 	and.w	r8, r6, #7
  40b48c:	4647      	mov	r7, r8
  40b48e:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b492:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b496:	9f05      	ldr	r7, [sp, #20]
  40b498:	fb08 f807 	mul.w	r8, r8, r7
  40b49c:	fb00 8001 	mla	r0, r0, r1, r8
  40b4a0:	3080      	adds	r0, #128	; 0x80
  40b4a2:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b4a6:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b4aa:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b4ae:	f368 0a02 	bfi	sl, r8, #0, #3
  40b4b2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b4b6:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b4ba:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b4be:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b4c2:	fb06 f607 	mul.w	r6, r6, r7
  40b4c6:	fb0c 6601 	mla	r6, ip, r1, r6
  40b4ca:	3680      	adds	r6, #128	; 0x80
  40b4cc:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b4d0:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b4d4:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b4d8:	f366 2a0c 	bfi	sl, r6, #8, #5
  40b4dc:	f824 a019 	strh.w	sl, [r4, r9, lsl #1]
                            MAP_NORMAL_MASK_PX(x + 3)
  40b4e0:	78d1      	ldrb	r1, [r2, #3]
  40b4e2:	2900      	cmp	r1, #0
  40b4e4:	f43f aef7 	beq.w	40b2d6 <map_normal+0x2ea>
  40b4e8:	29ff      	cmp	r1, #255	; 0xff
  40b4ea:	d05d      	beq.n	40b5a8 <map_normal+0x5bc>
  40b4ec:	f103 0903 	add.w	r9, r3, #3
  40b4f0:	f835 c019 	ldrh.w	ip, [r5, r9, lsl #1]
  40b4f4:	f834 6019 	ldrh.w	r6, [r4, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b4f8:	f3cc 00c4 	ubfx	r0, ip, #3, #5
  40b4fc:	f3c6 08c4 	ubfx	r8, r6, #3, #5
  40b500:	f1c1 07ff 	rsb	r7, r1, #255	; 0xff
  40b504:	9705      	str	r7, [sp, #20]
  40b506:	fb07 f808 	mul.w	r8, r7, r8
  40b50a:	fb01 8000 	mla	r0, r1, r0, r8
  40b50e:	3080      	adds	r0, #128	; 0x80
  40b510:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b514:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b518:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b51c:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b520:	f00c 0807 	and.w	r8, ip, #7
  40b524:	f3cc 3042 	ubfx	r0, ip, #13, #3
  40b528:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
  40b52c:	f006 0807 	and.w	r8, r6, #7
  40b530:	4647      	mov	r7, r8
  40b532:	f3c6 3842 	ubfx	r8, r6, #13, #3
  40b536:	eb08 08c7 	add.w	r8, r8, r7, lsl #3
  40b53a:	9f05      	ldr	r7, [sp, #20]
  40b53c:	fb08 f807 	mul.w	r8, r8, r7
  40b540:	fb00 8001 	mla	r0, r0, r1, r8
  40b544:	3080      	adds	r0, #128	; 0x80
  40b546:	eb00 2800 	add.w	r8, r0, r0, lsl #8
  40b54a:	eb00 10c8 	add.w	r0, r0, r8, lsl #7
  40b54e:	f3c0 6882 	ubfx	r8, r0, #26, #3
  40b552:	f368 0b02 	bfi	fp, r8, #0, #3
  40b556:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b55a:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b55e:	f3cc 2c04 	ubfx	ip, ip, #8, #5
  40b562:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b566:	fb06 f607 	mul.w	r6, r6, r7
  40b56a:	fb0c 6601 	mla	r6, ip, r1, r6
  40b56e:	3680      	adds	r6, #128	; 0x80
  40b570:	eb06 2106 	add.w	r1, r6, r6, lsl #8
  40b574:	eb06 16c1 	add.w	r6, r6, r1, lsl #7
  40b578:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40b57c:	f366 2b0c 	bfi	fp, r6, #8, #5
  40b580:	f824 b019 	strh.w	fp, [r4, r9, lsl #1]
  40b584:	e6a7      	b.n	40b2d6 <map_normal+0x2ea>
                            MAP_NORMAL_MASK_PX(x)
  40b586:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b58a:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b58e:	e6fb      	b.n	40b388 <map_normal+0x39c>
                            MAP_NORMAL_MASK_PX(x + 1)
  40b590:	1c59      	adds	r1, r3, #1
  40b592:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b596:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b59a:	e74f      	b.n	40b43c <map_normal+0x450>
                            MAP_NORMAL_MASK_PX(x + 2)
  40b59c:	1c99      	adds	r1, r3, #2
  40b59e:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b5a2:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b5a6:	e79b      	b.n	40b4e0 <map_normal+0x4f4>
                            MAP_NORMAL_MASK_PX(x + 3)
  40b5a8:	1cd9      	adds	r1, r3, #3
  40b5aa:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
  40b5ae:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
  40b5b2:	e690      	b.n	40b2d6 <map_normal+0x2ea>
  40b5b4:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
  40b5b8:	f8ad 9034 	strh.w	r9, [sp, #52]	; 0x34
  40b5bc:	f8bd b014 	ldrh.w	fp, [sp, #20]
  40b5c0:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
  40b5c4:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
  40b5c8:	f8ad 8036 	strh.w	r8, [sp, #54]	; 0x36
  40b5cc:	e685      	b.n	40b2da <map_normal+0x2ee>
  40b5ce:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  40b5d2:	f8ad b014 	strh.w	fp, [sp, #20]
  40b5d6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40b5da:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
  40b5de:	f8ad e02e 	strh.w	lr, [sp, #46]	; 0x2e
  40b5e2:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
  40b5e6:	e005      	b.n	40b5f4 <map_normal+0x608>
                    MAP_NORMAL_MASK_PX(x)
  40b5e8:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
  40b5ec:	f824 1013 	strh.w	r1, [r4, r3, lsl #1]
  40b5f0:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40b5f2:	3301      	adds	r3, #1
  40b5f4:	455b      	cmp	r3, fp
  40b5f6:	da4c      	bge.n	40b692 <map_normal+0x6a6>
                    MAP_NORMAL_MASK_PX(x)
  40b5f8:	7811      	ldrb	r1, [r2, #0]
  40b5fa:	2900      	cmp	r1, #0
  40b5fc:	d0f8      	beq.n	40b5f0 <map_normal+0x604>
  40b5fe:	29ff      	cmp	r1, #255	; 0xff
  40b600:	d0f2      	beq.n	40b5e8 <map_normal+0x5fc>
  40b602:	f835 7013 	ldrh.w	r7, [r5, r3, lsl #1]
  40b606:	f834 6013 	ldrh.w	r6, [r4, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b60a:	f3c7 00c4 	ubfx	r0, r7, #3, #5
  40b60e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40b612:	f1c1 0eff 	rsb	lr, r1, #255	; 0xff
  40b616:	fb0e fc0c 	mul.w	ip, lr, ip
  40b61a:	fb01 c000 	mla	r0, r1, r0, ip
  40b61e:	3080      	adds	r0, #128	; 0x80
  40b620:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b624:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b628:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40b62c:	f360 09c7 	bfi	r9, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b630:	f007 0c07 	and.w	ip, r7, #7
  40b634:	f3c7 3042 	ubfx	r0, r7, #13, #3
  40b638:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
  40b63c:	f006 0a07 	and.w	sl, r6, #7
  40b640:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40b644:	eb0c 0cca 	add.w	ip, ip, sl, lsl #3
  40b648:	fb0c fc0e 	mul.w	ip, ip, lr
  40b64c:	fb00 c001 	mla	r0, r0, r1, ip
  40b650:	3080      	adds	r0, #128	; 0x80
  40b652:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40b656:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40b65a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40b65e:	f36c 0902 	bfi	r9, ip, #0, #3
  40b662:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40b666:	f360 394f 	bfi	r9, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b66a:	f3c7 2704 	ubfx	r7, r7, #8, #5
  40b66e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40b672:	fb06 fe0e 	mul.w	lr, r6, lr
  40b676:	fb07 e101 	mla	r1, r7, r1, lr
  40b67a:	3180      	adds	r1, #128	; 0x80
  40b67c:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40b680:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40b684:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40b688:	f361 290c 	bfi	r9, r1, #8, #5
  40b68c:	f824 9013 	strh.w	r9, [r4, r3, lsl #1]
  40b690:	e7ae      	b.n	40b5f0 <map_normal+0x604>
                disp_buf_first += disp_w;
  40b692:	9b08      	ldr	r3, [sp, #32]
  40b694:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b698:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40b69a:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40b69c:	4413      	add	r3, r2
  40b69e:	931a      	str	r3, [sp, #104]	; 0x68
                map_buf_first += map_w;
  40b6a0:	9b07      	ldr	r3, [sp, #28]
  40b6a2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b6a6:	9b06      	ldr	r3, [sp, #24]
  40b6a8:	3301      	adds	r3, #1
  40b6aa:	9306      	str	r3, [sp, #24]
  40b6ac:	9b06      	ldr	r3, [sp, #24]
  40b6ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b6b0:	4293      	cmp	r3, r2
  40b6b2:	f6bf ad17 	bge.w	40b0e4 <map_normal+0xf8>
  40b6b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40b6b8:	2300      	movs	r3, #0
  40b6ba:	e592      	b.n	40b1e2 <map_normal+0x1f6>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b6bc:	9b03      	ldr	r3, [sp, #12]
  40b6be:	f835 001e 	ldrh.w	r0, [r5, lr, lsl #1]
  40b6c2:	f834 101e 	ldrh.w	r1, [r4, lr, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b6c6:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  40b6ca:	f3c1 07c4 	ubfx	r7, r1, #3, #5
  40b6ce:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  40b6d2:	fb0c f707 	mul.w	r7, ip, r7
  40b6d6:	fb03 7202 	mla	r2, r3, r2, r7
  40b6da:	3280      	adds	r2, #128	; 0x80
  40b6dc:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b6e0:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b6e4:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40b6e8:	f362 06c7 	bfi	r6, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b6ec:	f000 0707 	and.w	r7, r0, #7
  40b6f0:	f3c0 3242 	ubfx	r2, r0, #13, #3
  40b6f4:	eb02 02c7 	add.w	r2, r2, r7, lsl #3
  40b6f8:	f001 0907 	and.w	r9, r1, #7
  40b6fc:	f3c1 3742 	ubfx	r7, r1, #13, #3
  40b700:	eb07 07c9 	add.w	r7, r7, r9, lsl #3
  40b704:	fb07 f70c 	mul.w	r7, r7, ip
  40b708:	fb02 7203 	mla	r2, r2, r3, r7
  40b70c:	3280      	adds	r2, #128	; 0x80
  40b70e:	eb02 2702 	add.w	r7, r2, r2, lsl #8
  40b712:	eb02 12c7 	add.w	r2, r2, r7, lsl #7
  40b716:	f3c2 6782 	ubfx	r7, r2, #26, #3
  40b71a:	f367 0602 	bfi	r6, r7, #0, #3
  40b71e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40b722:	f362 364f 	bfi	r6, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b726:	f3c0 2004 	ubfx	r0, r0, #8, #5
  40b72a:	f3c1 2104 	ubfx	r1, r1, #8, #5
  40b72e:	fb01 fc0c 	mul.w	ip, r1, ip
  40b732:	fb00 c303 	mla	r3, r0, r3, ip
  40b736:	3380      	adds	r3, #128	; 0x80
  40b738:	eb03 2c03 	add.w	ip, r3, r3, lsl #8
  40b73c:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
  40b740:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b744:	f363 260c 	bfi	r6, r3, #8, #5
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
  40b748:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
  40b74c:	f108 0801 	add.w	r8, r8, #1
  40b750:	45d8      	cmp	r8, fp
  40b752:	da0c      	bge.n	40b76e <map_normal+0x782>
                    if(mask[x]) {
  40b754:	46c6      	mov	lr, r8
  40b756:	f81a 3008 	ldrb.w	r3, [sl, r8]
  40b75a:	2b00      	cmp	r3, #0
  40b75c:	d0f6      	beq.n	40b74c <map_normal+0x760>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
  40b75e:	2bfc      	cmp	r3, #252	; 0xfc
  40b760:	d8ac      	bhi.n	40b6bc <map_normal+0x6d0>
  40b762:	9a03      	ldr	r2, [sp, #12]
  40b764:	fb03 f302 	mul.w	r3, r3, r2
  40b768:	f3c3 2307 	ubfx	r3, r3, #8, #8
  40b76c:	e7a7      	b.n	40b6be <map_normal+0x6d2>
                disp_buf_first += disp_w;
  40b76e:	9b08      	ldr	r3, [sp, #32]
  40b770:	eb04 0443 	add.w	r4, r4, r3, lsl #1
                mask += draw_area_w;
  40b774:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40b776:	449a      	add	sl, r3
                map_buf_first += map_w;
  40b778:	9b07      	ldr	r3, [sp, #28]
  40b77a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b77e:	9b04      	ldr	r3, [sp, #16]
  40b780:	3301      	adds	r3, #1
  40b782:	9304      	str	r3, [sp, #16]
  40b784:	9b04      	ldr	r3, [sp, #16]
  40b786:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b788:	4293      	cmp	r3, r2
  40b78a:	f6bf acab 	bge.w	40b0e4 <map_normal+0xf8>
  40b78e:	f04f 0800 	mov.w	r8, #0
  40b792:	e7dd      	b.n	40b750 <map_normal+0x764>
  40b794:	2300      	movs	r3, #0
  40b796:	9304      	str	r3, [sp, #16]
  40b798:	9703      	str	r7, [sp, #12]
  40b79a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
  40b79e:	e7f1      	b.n	40b784 <map_normal+0x798>

0040b7a0 <fill_normal>:
{
  40b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40b7a4:	b091      	sub	sp, #68	; 0x44
  40b7a6:	4605      	mov	r5, r0
  40b7a8:	9103      	str	r1, [sp, #12]
  40b7aa:	4616      	mov	r6, r2
  40b7ac:	920a      	str	r2, [sp, #40]	; 0x28
  40b7ae:	461c      	mov	r4, r3
  40b7b0:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
  40b7b4:	9006      	str	r0, [sp, #24]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40b7b6:	4bc5      	ldr	r3, [pc, #788]	; (40bacc <fill_normal+0x32c>)
  40b7b8:	4798      	blx	r3
  40b7ba:	900b      	str	r0, [sp, #44]	; 0x2c
  40b7bc:	88ab      	ldrh	r3, [r5, #4]
  40b7be:	882a      	ldrh	r2, [r5, #0]
  40b7c0:	1a9b      	subs	r3, r3, r2
  40b7c2:	b29b      	uxth	r3, r3
  40b7c4:	3301      	adds	r3, #1
  40b7c6:	b218      	sxth	r0, r3
  40b7c8:	4605      	mov	r5, r0
  40b7ca:	9008      	str	r0, [sp, #32]
  40b7cc:	88b3      	ldrh	r3, [r6, #4]
  40b7ce:	4630      	mov	r0, r6
  40b7d0:	f9b6 1000 	ldrsh.w	r1, [r6]
  40b7d4:	b28a      	uxth	r2, r1
  40b7d6:	1a9b      	subs	r3, r3, r2
  40b7d8:	b29b      	uxth	r3, r3
  40b7da:	3301      	adds	r3, #1
  40b7dc:	b21b      	sxth	r3, r3
  40b7de:	9307      	str	r3, [sp, #28]
    int32_t draw_area_w = lv_area_get_width(draw_area);
  40b7e0:	461e      	mov	r6, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40b7e2:	88c3      	ldrh	r3, [r0, #6]
  40b7e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  40b7e8:	b290      	uxth	r0, r2
  40b7ea:	1a1b      	subs	r3, r3, r0
  40b7ec:	b29b      	uxth	r3, r3
  40b7ee:	3301      	adds	r3, #1
  40b7f0:	b21b      	sxth	r3, r3
  40b7f2:	930d      	str	r3, [sp, #52]	; 0x34
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
  40b7f4:	4696      	mov	lr, r2
  40b7f6:	fb02 1205 	mla	r2, r2, r5, r1
  40b7fa:	9b03      	ldr	r3, [sp, #12]
  40b7fc:	eb03 0542 	add.w	r5, r3, r2, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40b800:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
  40b804:	2b01      	cmp	r3, #1
  40b806:	d00f      	beq.n	40b828 <fill_normal+0x88>
        last_dest_color.full = disp_buf_first[0].full;
  40b808:	9b03      	ldr	r3, [sp, #12]
  40b80a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
  40b80e:	461a      	mov	r2, r3
        int32_t x_end4 = draw_area_w - 4;
  40b810:	9907      	ldr	r1, [sp, #28]
  40b812:	3904      	subs	r1, #4
  40b814:	9103      	str	r1, [sp, #12]
        if(opa > LV_OPA_MAX) {
  40b816:	9906      	ldr	r1, [sp, #24]
  40b818:	29fd      	cmp	r1, #253	; 0xfd
  40b81a:	f200 8335 	bhi.w	40be88 <fill_normal+0x6e8>
  40b81e:	f04f 0800 	mov.w	r8, #0
  40b822:	4641      	mov	r1, r8
  40b824:	46a3      	mov	fp, r4
  40b826:	e3a7      	b.n	40bf78 <fill_normal+0x7d8>
        if(opa > LV_OPA_MAX) {
  40b828:	9b06      	ldr	r3, [sp, #24]
  40b82a:	2bfd      	cmp	r3, #253	; 0xfd
  40b82c:	d922      	bls.n	40b874 <fill_normal+0xd4>
            if(disp->driver.gpu_fill_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40b832:	b123      	cbz	r3, 40b83e <fill_normal+0x9e>
  40b834:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b836:	4ba6      	ldr	r3, [pc, #664]	; (40bad0 <fill_normal+0x330>)
  40b838:	4798      	blx	r3
  40b83a:	28f0      	cmp	r0, #240	; 0xf0
  40b83c:	d804      	bhi.n	40b848 <fill_normal+0xa8>
{
  40b83e:	2600      	movs	r6, #0
  40b840:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40b842:	f8dd 8020 	ldr.w	r8, [sp, #32]
  40b846:	e010      	b.n	40b86a <fill_normal+0xca>
                disp->driver.gpu_fill_cb(&disp->driver, disp_buf, disp_w, draw_area, color);
  40b848:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40b84a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  40b84c:	f8ad 4000 	strh.w	r4, [sp]
  40b850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40b852:	9a08      	ldr	r2, [sp, #32]
  40b854:	9903      	ldr	r1, [sp, #12]
  40b856:	47a8      	blx	r5
                return;
  40b858:	e009      	b.n	40b86e <fill_normal+0xce>
                lv_color_fill(disp_buf_first, color, draw_area_w);
  40b85a:	9a07      	ldr	r2, [sp, #28]
  40b85c:	4621      	mov	r1, r4
  40b85e:	4628      	mov	r0, r5
  40b860:	4b9c      	ldr	r3, [pc, #624]	; (40bad4 <fill_normal+0x334>)
  40b862:	4798      	blx	r3
                disp_buf_first += disp_w;
  40b864:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b868:	3601      	adds	r6, #1
  40b86a:	42be      	cmp	r6, r7
  40b86c:	dbf5      	blt.n	40b85a <fill_normal+0xba>
}
  40b86e:	b011      	add	sp, #68	; 0x44
  40b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(disp->driver.gpu_blend_cb && lv_area_get_size(draw_area) > GPU_SIZE_LIMIT) {
  40b874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40b876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  40b878:	b123      	cbz	r3, 40b884 <fill_normal+0xe4>
  40b87a:	980a      	ldr	r0, [sp, #40]	; 0x28
  40b87c:	4b94      	ldr	r3, [pc, #592]	; (40bad0 <fill_normal+0x330>)
  40b87e:	4798      	blx	r3
  40b880:	28f0      	cmp	r0, #240	; 0xf0
  40b882:	d864      	bhi.n	40b94e <fill_normal+0x1ae>
            lv_color_t last_dest_color = LV_COLOR_BLACK;
  40b884:	f04f 0e00 	mov.w	lr, #0
  40b888:	4670      	mov	r0, lr
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40b88a:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40b88e:	9f06      	ldr	r7, [sp, #24]
  40b890:	fb07 f303 	mul.w	r3, r7, r3
  40b894:	3380      	adds	r3, #128	; 0x80
  40b896:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b89a:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b89e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b8a2:	f04f 0200 	mov.w	r2, #0
  40b8a6:	f363 02c7 	bfi	r2, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40b8aa:	f004 0107 	and.w	r1, r4, #7
  40b8ae:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40b8b2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
  40b8b6:	fb03 f307 	mul.w	r3, r3, r7
  40b8ba:	3380      	adds	r3, #128	; 0x80
  40b8bc:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b8c0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b8c4:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40b8c8:	f361 0202 	bfi	r2, r1, #0, #3
  40b8cc:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b8d0:	f363 324f 	bfi	r2, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40b8d4:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40b8d8:	fb03 f307 	mul.w	r3, r3, r7
  40b8dc:	3380      	adds	r3, #128	; 0x80
  40b8de:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40b8e2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40b8e6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b8ea:	f363 220c 	bfi	r2, r3, #8, #5
}

LV_ATTRIBUTE_FAST_MEM static inline void lv_color_premult(lv_color_t c, uint8_t mix, uint16_t * out)
{
#if LV_COLOR_DEPTH != 1
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40b8ee:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  40b8f2:	46bc      	mov	ip, r7
  40b8f4:	b2bb      	uxth	r3, r7
  40b8f6:	fb01 f103 	mul.w	r1, r1, r3
  40b8fa:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40b8fe:	f004 0707 	and.w	r7, r4, #7
  40b902:	f3c4 3142 	ubfx	r1, r4, #13, #3
  40b906:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40b90a:	fb13 f101 	smulbb	r1, r3, r1
  40b90e:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40b912:	f3c4 2404 	ubfx	r4, r4, #8, #5
  40b916:	fb03 f304 	mul.w	r3, r3, r4
  40b91a:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            lv_opa_t opa_inv = 255 - opa;
  40b91e:	4661      	mov	r1, ip
  40b920:	43cc      	mvns	r4, r1
  40b922:	b2e4      	uxtb	r4, r4
  40b924:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
  40b928:	f8dd 8020 	ldr.w	r8, [sp, #32]
            for(y = 0; y < draw_area_h; y++) {
  40b92c:	e069      	b.n	40ba02 <fill_normal+0x262>
                for(x = 0; x < draw_area_w ; x++) blend_buf[x].full = color.full;
  40b92e:	4a6a      	ldr	r2, [pc, #424]	; (40bad8 <fill_normal+0x338>)
  40b930:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
  40b934:	3301      	adds	r3, #1
  40b936:	42b3      	cmp	r3, r6
  40b938:	dbf9      	blt.n	40b92e <fill_normal+0x18e>
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b93a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40b93c:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
  40b940:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  40b942:	f8dd 9020 	ldr.w	r9, [sp, #32]
  40b946:	4690      	mov	r8, r2
  40b948:	f8dd a018 	ldr.w	sl, [sp, #24]
  40b94c:	e00c      	b.n	40b968 <fill_normal+0x1c8>
  40b94e:	2300      	movs	r3, #0
  40b950:	e7f1      	b.n	40b936 <fill_normal+0x196>
                    disp->driver.gpu_blend_cb(&disp->driver, disp_buf_first, blend_buf, draw_area_w, opa);
  40b952:	6ab7      	ldr	r7, [r6, #40]	; 0x28
  40b954:	f8cd a000 	str.w	sl, [sp]
  40b958:	9b07      	ldr	r3, [sp, #28]
  40b95a:	4a5f      	ldr	r2, [pc, #380]	; (40bad8 <fill_normal+0x338>)
  40b95c:	4629      	mov	r1, r5
  40b95e:	4630      	mov	r0, r6
  40b960:	47b8      	blx	r7
                    disp_buf_first += disp_w;
  40b962:	eb05 0549 	add.w	r5, r5, r9, lsl #1
                for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40b966:	3401      	adds	r4, #1
  40b968:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40b96c:	429c      	cmp	r4, r3
  40b96e:	ddf0      	ble.n	40b952 <fill_normal+0x1b2>
  40b970:	e77d      	b.n	40b86e <fill_normal+0xce>
                    disp_buf_first[x] = last_res_color;
  40b972:	803a      	strh	r2, [r7, #0]
                for(x = 0; x < draw_area_w; x++) {
  40b974:	3101      	adds	r1, #1
  40b976:	42b1      	cmp	r1, r6
  40b978:	da3f      	bge.n	40b9fa <fill_normal+0x25a>
                    if(last_dest_color.full != disp_buf_first[x].full) {
  40b97a:	b283      	uxth	r3, r0
  40b97c:	eb05 0741 	add.w	r7, r5, r1, lsl #1
  40b980:	f835 9011 	ldrh.w	r9, [r5, r1, lsl #1]
  40b984:	454b      	cmp	r3, r9
  40b986:	d0f4      	beq.n	40b972 <fill_normal+0x1d2>
                        last_dest_color = disp_buf_first[x];
  40b988:	f835 0011 	ldrh.w	r0, [r5, r1, lsl #1]
LV_ATTRIBUTE_FAST_MEM static inline lv_color_t lv_color_mix_premult(uint16_t * premult_c1, lv_color_t c2, uint8_t mix)
{
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b98c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  40b990:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40b994:	fb04 2303 	mla	r3, r4, r3, r2
  40b998:	3380      	adds	r3, #128	; 0x80
  40b99a:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b99e:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b9a2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b9a6:	f363 0ac7 	bfi	sl, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b9aa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  40b9ae:	f000 0907 	and.w	r9, r0, #7
  40b9b2:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40b9b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
  40b9ba:	fb03 2304 	mla	r3, r3, r4, r2
  40b9be:	3380      	adds	r3, #128	; 0x80
  40b9c0:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b9c4:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b9c8:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40b9cc:	f362 0a02 	bfi	sl, r2, #0, #3
  40b9d0:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40b9d4:	f363 3a4f 	bfi	sl, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40b9d8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  40b9dc:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40b9e0:	fb03 2304 	mla	r3, r3, r4, r2
  40b9e4:	3380      	adds	r3, #128	; 0x80
  40b9e6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40b9ea:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40b9ee:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40b9f2:	f363 2a0c 	bfi	sl, r3, #8, #5
  40b9f6:	4652      	mov	r2, sl
  40b9f8:	e7bb      	b.n	40b972 <fill_normal+0x1d2>
                disp_buf_first += disp_w;
  40b9fa:	eb05 0548 	add.w	r5, r5, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
  40b9fe:	f10e 0e01 	add.w	lr, lr, #1
  40ba02:	45e6      	cmp	lr, ip
  40ba04:	f6bf af33 	bge.w	40b86e <fill_normal+0xce>
  40ba08:	2100      	movs	r1, #0
  40ba0a:	e7b4      	b.n	40b976 <fill_normal+0x1d6>
                    FILL_NORMAL_MASK_PX(x, color)
  40ba0c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40ba10:	3201      	adds	r2, #1
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
  40ba12:	3301      	adds	r3, #1
  40ba14:	42b3      	cmp	r3, r6
  40ba16:	f280 81c0 	bge.w	40bd9a <fill_normal+0x5fa>
  40ba1a:	f012 0f03 	tst.w	r2, #3
  40ba1e:	d04a      	beq.n	40bab6 <fill_normal+0x316>
                    FILL_NORMAL_MASK_PX(x, color)
  40ba20:	7811      	ldrb	r1, [r2, #0]
  40ba22:	2900      	cmp	r1, #0
  40ba24:	d0f4      	beq.n	40ba10 <fill_normal+0x270>
  40ba26:	29ff      	cmp	r1, #255	; 0xff
  40ba28:	d0f0      	beq.n	40ba0c <fill_normal+0x26c>
  40ba2a:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40ba2e:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40ba32:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40ba36:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40ba3a:	fb0c f909 	mul.w	r9, ip, r9
  40ba3e:	fb01 9000 	mla	r0, r1, r0, r9
  40ba42:	3080      	adds	r0, #128	; 0x80
  40ba44:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40ba48:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40ba4c:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40ba50:	f360 07c7 	bfi	r7, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40ba54:	f004 0007 	and.w	r0, r4, #7
  40ba58:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40ba5c:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40ba60:	f00e 0a07 	and.w	sl, lr, #7
  40ba64:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40ba68:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40ba6c:	fb09 f90c 	mul.w	r9, r9, ip
  40ba70:	fb00 9001 	mla	r0, r0, r1, r9
  40ba74:	3080      	adds	r0, #128	; 0x80
  40ba76:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40ba7a:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40ba7e:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40ba82:	f369 0702 	bfi	r7, r9, #0, #3
  40ba86:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40ba8a:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40ba8e:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40ba92:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40ba96:	fb0e fc0c 	mul.w	ip, lr, ip
  40ba9a:	fb00 c101 	mla	r1, r0, r1, ip
  40ba9e:	3180      	adds	r1, #128	; 0x80
  40baa0:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40baa4:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40baa8:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40baac:	f361 270c 	bfi	r7, r1, #8, #5
  40bab0:	f825 7013 	strh.w	r7, [r5, r3, lsl #1]
  40bab4:	e7ac      	b.n	40ba10 <fill_normal+0x270>
  40bab6:	960a      	str	r6, [sp, #40]	; 0x28
  40bab8:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40babc:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40bac0:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40bac4:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40bac8:	e015      	b.n	40baf6 <fill_normal+0x356>
  40baca:	bf00      	nop
  40bacc:	00409269 	.word	0x00409269
  40bad0:	00414ed7 	.word	0x00414ed7
  40bad4:	00415677 	.word	0x00415677
  40bad8:	2040c3a8 	.word	0x2040c3a8
                            disp_buf_first[x] = color;
  40badc:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
                            disp_buf_first[x + 1] = color;
  40bae0:	1c59      	adds	r1, r3, #1
  40bae2:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 2] = color;
  40bae6:	1c99      	adds	r1, r3, #2
  40bae8:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                            disp_buf_first[x + 3] = color;
  40baec:	1cd9      	adds	r1, r3, #3
  40baee:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
                    mask32++;
  40baf2:	3204      	adds	r2, #4
                for(; x <= x_end4; x += 4) {
  40baf4:	3304      	adds	r3, #4
  40baf6:	9903      	ldr	r1, [sp, #12]
  40baf8:	428b      	cmp	r3, r1
  40bafa:	f300 8158 	bgt.w	40bdae <fill_normal+0x60e>
                    if(*mask32) {
  40bafe:	6811      	ldr	r1, [r2, #0]
  40bb00:	2900      	cmp	r1, #0
  40bb02:	d0f6      	beq.n	40baf2 <fill_normal+0x352>
                        if((*mask32) == 0xFFFFFFFF) {
  40bb04:	f1b1 3fff 	cmp.w	r1, #4294967295
  40bb08:	d0e8      	beq.n	40badc <fill_normal+0x33c>
                            FILL_NORMAL_MASK_PX(x, color)
  40bb0a:	7811      	ldrb	r1, [r2, #0]
  40bb0c:	2900      	cmp	r1, #0
  40bb0e:	d047      	beq.n	40bba0 <fill_normal+0x400>
  40bb10:	29ff      	cmp	r1, #255	; 0xff
  40bb12:	f000 8133 	beq.w	40bd7c <fill_normal+0x5dc>
  40bb16:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bb1a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bb1e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bb22:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bb26:	fb08 fc0c 	mul.w	ip, r8, ip
  40bb2a:	fb01 c000 	mla	r0, r1, r0, ip
  40bb2e:	3080      	adds	r0, #128	; 0x80
  40bb30:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bb34:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bb38:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bb3c:	f360 0ec7 	bfi	lr, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bb40:	f004 0007 	and.w	r0, r4, #7
  40bb44:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bb48:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bb4c:	f006 0907 	and.w	r9, r6, #7
  40bb50:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bb54:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
  40bb58:	fb0c fc08 	mul.w	ip, ip, r8
  40bb5c:	fb00 c001 	mla	r0, r0, r1, ip
  40bb60:	3080      	adds	r0, #128	; 0x80
  40bb62:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bb66:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bb6a:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bb6e:	f36c 0e02 	bfi	lr, ip, #0, #3
  40bb72:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bb76:	f360 3e4f 	bfi	lr, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bb7a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bb7e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bb82:	fb06 f608 	mul.w	r6, r6, r8
  40bb86:	fb00 6601 	mla	r6, r0, r1, r6
  40bb8a:	3680      	adds	r6, #128	; 0x80
  40bb8c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bb90:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
  40bb94:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  40bb98:	f366 2e0c 	bfi	lr, r6, #8, #5
  40bb9c:	f825 e013 	strh.w	lr, [r5, r3, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40bba0:	7851      	ldrb	r1, [r2, #1]
  40bba2:	2900      	cmp	r1, #0
  40bba4:	d04f      	beq.n	40bc46 <fill_normal+0x4a6>
  40bba6:	29ff      	cmp	r1, #255	; 0xff
  40bba8:	f000 80eb 	beq.w	40bd82 <fill_normal+0x5e2>
  40bbac:	f103 0901 	add.w	r9, r3, #1
  40bbb0:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bbb4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bbb8:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bbbc:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bbc0:	fb08 fc0c 	mul.w	ip, r8, ip
  40bbc4:	fb01 c000 	mla	r0, r1, r0, ip
  40bbc8:	3080      	adds	r0, #128	; 0x80
  40bbca:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bbce:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bbd2:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bbd6:	9f04      	ldr	r7, [sp, #16]
  40bbd8:	f360 07c7 	bfi	r7, r0, #3, #5
  40bbdc:	9704      	str	r7, [sp, #16]
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bbde:	f004 0007 	and.w	r0, r4, #7
  40bbe2:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bbe6:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bbea:	f006 0707 	and.w	r7, r6, #7
  40bbee:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bbf2:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bbf6:	fb0c fc08 	mul.w	ip, ip, r8
  40bbfa:	fb00 c001 	mla	r0, r0, r1, ip
  40bbfe:	3080      	adds	r0, #128	; 0x80
  40bc00:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bc04:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bc08:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bc0c:	9f04      	ldr	r7, [sp, #16]
  40bc0e:	f36c 0702 	bfi	r7, ip, #0, #3
  40bc12:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bc16:	f360 374f 	bfi	r7, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bc1a:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bc1e:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bc22:	fb06 f608 	mul.w	r6, r6, r8
  40bc26:	fb00 6601 	mla	r6, r0, r1, r6
  40bc2a:	3680      	adds	r6, #128	; 0x80
  40bc2c:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bc30:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40bc34:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bc38:	4639      	mov	r1, r7
  40bc3a:	f360 210c 	bfi	r1, r0, #8, #5
  40bc3e:	f8ad 1010 	strh.w	r1, [sp, #16]
  40bc42:	f825 1019 	strh.w	r1, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40bc46:	7891      	ldrb	r1, [r2, #2]
  40bc48:	2900      	cmp	r1, #0
  40bc4a:	d049      	beq.n	40bce0 <fill_normal+0x540>
  40bc4c:	29ff      	cmp	r1, #255	; 0xff
  40bc4e:	f000 809c 	beq.w	40bd8a <fill_normal+0x5ea>
  40bc52:	f103 0902 	add.w	r9, r3, #2
  40bc56:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bc5a:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bc5e:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bc62:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bc66:	fb08 fc0c 	mul.w	ip, r8, ip
  40bc6a:	fb01 c000 	mla	r0, r1, r0, ip
  40bc6e:	3080      	adds	r0, #128	; 0x80
  40bc70:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bc74:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bc78:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bc7c:	f360 0ac7 	bfi	sl, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bc80:	f004 0007 	and.w	r0, r4, #7
  40bc84:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bc88:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bc8c:	f006 0707 	and.w	r7, r6, #7
  40bc90:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bc94:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bc98:	fb0c fc08 	mul.w	ip, ip, r8
  40bc9c:	fb00 c001 	mla	r0, r0, r1, ip
  40bca0:	3080      	adds	r0, #128	; 0x80
  40bca2:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bca6:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bcaa:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bcae:	f36c 0a02 	bfi	sl, ip, #0, #3
  40bcb2:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bcb6:	f360 3a4f 	bfi	sl, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bcba:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bcbe:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bcc2:	fb06 f608 	mul.w	r6, r6, r8
  40bcc6:	fb00 6601 	mla	r6, r0, r1, r6
  40bcca:	3680      	adds	r6, #128	; 0x80
  40bccc:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bcd0:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40bcd4:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bcd8:	f360 2a0c 	bfi	sl, r0, #8, #5
  40bcdc:	f825 a019 	strh.w	sl, [r5, r9, lsl #1]
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40bce0:	78d1      	ldrb	r1, [r2, #3]
  40bce2:	2900      	cmp	r1, #0
  40bce4:	f43f af05 	beq.w	40baf2 <fill_normal+0x352>
  40bce8:	29ff      	cmp	r1, #255	; 0xff
  40bcea:	d052      	beq.n	40bd92 <fill_normal+0x5f2>
  40bcec:	f103 0903 	add.w	r9, r3, #3
  40bcf0:	f835 6019 	ldrh.w	r6, [r5, r9, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bcf4:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bcf8:	f3c6 0cc4 	ubfx	ip, r6, #3, #5
  40bcfc:	f1c1 08ff 	rsb	r8, r1, #255	; 0xff
  40bd00:	fb08 fc0c 	mul.w	ip, r8, ip
  40bd04:	fb01 c000 	mla	r0, r1, r0, ip
  40bd08:	3080      	adds	r0, #128	; 0x80
  40bd0a:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bd0e:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bd12:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bd16:	f360 0bc7 	bfi	fp, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40bd1a:	f004 0007 	and.w	r0, r4, #7
  40bd1e:	f3c4 3c42 	ubfx	ip, r4, #13, #3
  40bd22:	eb0c 00c0 	add.w	r0, ip, r0, lsl #3
  40bd26:	f006 0707 	and.w	r7, r6, #7
  40bd2a:	f3c6 3c42 	ubfx	ip, r6, #13, #3
  40bd2e:	eb0c 0cc7 	add.w	ip, ip, r7, lsl #3
  40bd32:	fb0c fc08 	mul.w	ip, ip, r8
  40bd36:	fb00 c001 	mla	r0, r0, r1, ip
  40bd3a:	3080      	adds	r0, #128	; 0x80
  40bd3c:	eb00 2c00 	add.w	ip, r0, r0, lsl #8
  40bd40:	eb00 10cc 	add.w	r0, r0, ip, lsl #7
  40bd44:	f3c0 6c82 	ubfx	ip, r0, #26, #3
  40bd48:	f36c 0b02 	bfi	fp, ip, #0, #3
  40bd4c:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40bd50:	f360 3b4f 	bfi	fp, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bd54:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40bd58:	f3c6 2604 	ubfx	r6, r6, #8, #5
  40bd5c:	fb06 f608 	mul.w	r6, r6, r8
  40bd60:	fb00 6601 	mla	r6, r0, r1, r6
  40bd64:	3680      	adds	r6, #128	; 0x80
  40bd66:	eb06 2006 	add.w	r0, r6, r6, lsl #8
  40bd6a:	eb06 10c0 	add.w	r0, r6, r0, lsl #7
  40bd6e:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bd72:	f360 2b0c 	bfi	fp, r0, #8, #5
  40bd76:	f825 b019 	strh.w	fp, [r5, r9, lsl #1]
  40bd7a:	e6ba      	b.n	40baf2 <fill_normal+0x352>
                            FILL_NORMAL_MASK_PX(x, color)
  40bd7c:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bd80:	e70e      	b.n	40bba0 <fill_normal+0x400>
                            FILL_NORMAL_MASK_PX(x + 1, color)
  40bd82:	1c59      	adds	r1, r3, #1
  40bd84:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bd88:	e75d      	b.n	40bc46 <fill_normal+0x4a6>
                            FILL_NORMAL_MASK_PX(x + 2, color)
  40bd8a:	1c99      	adds	r1, r3, #2
  40bd8c:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bd90:	e7a6      	b.n	40bce0 <fill_normal+0x540>
                            FILL_NORMAL_MASK_PX(x + 3, color)
  40bd92:	1cd9      	adds	r1, r3, #3
  40bd94:	f825 4011 	strh.w	r4, [r5, r1, lsl #1]
  40bd98:	e6ab      	b.n	40baf2 <fill_normal+0x352>
  40bd9a:	960a      	str	r6, [sp, #40]	; 0x28
  40bd9c:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
  40bda0:	f8bd a026 	ldrh.w	sl, [sp, #38]	; 0x26
  40bda4:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  40bda8:	f8ad 7032 	strh.w	r7, [sp, #50]	; 0x32
  40bdac:	e6a3      	b.n	40baf6 <fill_normal+0x356>
  40bdae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  40bdb0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  40bdb4:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
  40bdb8:	f8ad e030 	strh.w	lr, [sp, #48]	; 0x30
  40bdbc:	f8bd 7032 	ldrh.w	r7, [sp, #50]	; 0x32
  40bdc0:	e003      	b.n	40bdca <fill_normal+0x62a>
                    FILL_NORMAL_MASK_PX(x, color)
  40bdc2:	f825 4013 	strh.w	r4, [r5, r3, lsl #1]
  40bdc6:	3201      	adds	r2, #1
                for(; x < draw_area_w ; x++) {
  40bdc8:	3301      	adds	r3, #1
  40bdca:	42b3      	cmp	r3, r6
  40bdcc:	da4a      	bge.n	40be64 <fill_normal+0x6c4>
                    FILL_NORMAL_MASK_PX(x, color)
  40bdce:	7811      	ldrb	r1, [r2, #0]
  40bdd0:	2900      	cmp	r1, #0
  40bdd2:	d0f8      	beq.n	40bdc6 <fill_normal+0x626>
  40bdd4:	29ff      	cmp	r1, #255	; 0xff
  40bdd6:	d0f4      	beq.n	40bdc2 <fill_normal+0x622>
  40bdd8:	f835 e013 	ldrh.w	lr, [r5, r3, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bddc:	f3c4 00c4 	ubfx	r0, r4, #3, #5
  40bde0:	f3ce 09c4 	ubfx	r9, lr, #3, #5
  40bde4:	f1c1 0cff 	rsb	ip, r1, #255	; 0xff
  40bde8:	fb0c f909 	mul.w	r9, ip, r9
  40bdec:	fb01 9000 	mla	r0, r1, r0, r9
  40bdf0:	3080      	adds	r0, #128	; 0x80
  40bdf2:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40bdf6:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40bdfa:	f3c0 50c4 	ubfx	r0, r0, #23, #5
  40bdfe:	f360 08c7 	bfi	r8, r0, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40be02:	f004 0007 	and.w	r0, r4, #7
  40be06:	f3c4 3942 	ubfx	r9, r4, #13, #3
  40be0a:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
  40be0e:	f00e 0a07 	and.w	sl, lr, #7
  40be12:	f3ce 3942 	ubfx	r9, lr, #13, #3
  40be16:	eb09 09ca 	add.w	r9, r9, sl, lsl #3
  40be1a:	fb09 f90c 	mul.w	r9, r9, ip
  40be1e:	fb00 9001 	mla	r0, r0, r1, r9
  40be22:	3080      	adds	r0, #128	; 0x80
  40be24:	eb00 2900 	add.w	r9, r0, r0, lsl #8
  40be28:	eb00 10c9 	add.w	r0, r0, r9, lsl #7
  40be2c:	f3c0 6982 	ubfx	r9, r0, #26, #3
  40be30:	f369 0802 	bfi	r8, r9, #0, #3
  40be34:	f3c0 50c2 	ubfx	r0, r0, #23, #3
  40be38:	f360 384f 	bfi	r8, r0, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40be3c:	f3c4 2004 	ubfx	r0, r4, #8, #5
  40be40:	f3ce 2e04 	ubfx	lr, lr, #8, #5
  40be44:	fb0e fc0c 	mul.w	ip, lr, ip
  40be48:	fb00 c101 	mla	r1, r0, r1, ip
  40be4c:	3180      	adds	r1, #128	; 0x80
  40be4e:	eb01 2001 	add.w	r0, r1, r1, lsl #8
  40be52:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  40be56:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  40be5a:	f361 280c 	bfi	r8, r1, #8, #5
  40be5e:	f825 8013 	strh.w	r8, [r5, r3, lsl #1]
  40be62:	e7b0      	b.n	40bdc6 <fill_normal+0x626>
                disp_buf_first += disp_w;
  40be64:	9b08      	ldr	r3, [sp, #32]
  40be66:	eb05 0543 	add.w	r5, r5, r3, lsl #1
                mask += draw_area_w;
  40be6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40be6c:	9a07      	ldr	r2, [sp, #28]
  40be6e:	4413      	add	r3, r2
  40be70:	931b      	str	r3, [sp, #108]	; 0x6c
            for(y = 0; y < draw_area_h; y++) {
  40be72:	9b06      	ldr	r3, [sp, #24]
  40be74:	3301      	adds	r3, #1
  40be76:	9306      	str	r3, [sp, #24]
  40be78:	9b06      	ldr	r3, [sp, #24]
  40be7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40be7c:	4293      	cmp	r3, r2
  40be7e:	f6bf acf6 	bge.w	40b86e <fill_normal+0xce>
  40be82:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40be84:	2300      	movs	r3, #0
  40be86:	e5c5      	b.n	40ba14 <fill_normal+0x274>
  40be88:	2300      	movs	r3, #0
  40be8a:	9306      	str	r3, [sp, #24]
  40be8c:	e7f4      	b.n	40be78 <fill_normal+0x6d8>
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
  40be8e:	9c06      	ldr	r4, [sp, #24]
  40be90:	fb00 f804 	mul.w	r8, r0, r4
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40be94:	f3c8 2807 	ubfx	r8, r8, #8, #8
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40be98:	4281      	cmp	r1, r0
  40be9a:	d05c      	beq.n	40bf56 <fill_normal+0x7b6>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40be9c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
  40bea0:	d05f      	beq.n	40bf62 <fill_normal+0x7c2>
  40bea2:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bea6:	f3cb 03c4 	ubfx	r3, fp, #3, #5
  40beaa:	f3c2 01c4 	ubfx	r1, r2, #3, #5
  40beae:	f1c8 04ff 	rsb	r4, r8, #255	; 0xff
  40beb2:	fb04 f101 	mul.w	r1, r4, r1
  40beb6:	fb08 1303 	mla	r3, r8, r3, r1
  40beba:	3380      	adds	r3, #128	; 0x80
  40bebc:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bec0:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bec4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40bec8:	f363 09c7 	bfi	r9, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40becc:	f00b 0307 	and.w	r3, fp, #7
  40bed0:	f3cb 3142 	ubfx	r1, fp, #13, #3
  40bed4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
  40bed8:	f002 0707 	and.w	r7, r2, #7
  40bedc:	f3c2 3142 	ubfx	r1, r2, #13, #3
  40bee0:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  40bee4:	fb01 f104 	mul.w	r1, r1, r4
  40bee8:	fb03 1308 	mla	r3, r3, r8, r1
  40beec:	3380      	adds	r3, #128	; 0x80
  40beee:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  40bef2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  40bef6:	f3c3 6182 	ubfx	r1, r3, #26, #3
  40befa:	f361 0902 	bfi	r9, r1, #0, #3
  40befe:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40bf02:	f363 394f 	bfi	r9, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40bf06:	f3cb 2304 	ubfx	r3, fp, #8, #5
  40bf0a:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40bf0e:	fb02 f204 	mul.w	r2, r2, r4
  40bf12:	fb03 2408 	mla	r4, r3, r8, r2
  40bf16:	3480      	adds	r4, #128	; 0x80
  40bf18:	eb04 2304 	add.w	r3, r4, r4, lsl #8
  40bf1c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
  40bf20:	f3c4 54c4 	ubfx	r4, r4, #23, #5
  40bf24:	f364 290c 	bfi	r9, r4, #8, #5
  40bf28:	464b      	mov	r3, r9
                            last_dest_color.full = disp_buf_first[x].full;
  40bf2a:	f835 201c 	ldrh.w	r2, [r5, ip, lsl #1]
                            last_mask = *mask_tmp_x;
  40bf2e:	4601      	mov	r1, r0
                        disp_buf_first[x] = last_res_color;
  40bf30:	f825 301c 	strh.w	r3, [r5, ip, lsl #1]
                    mask_tmp_x++;
  40bf34:	f10a 0a01 	add.w	sl, sl, #1
                for(x = 0; x < draw_area_w; x++) {
  40bf38:	f10c 0c01 	add.w	ip, ip, #1
  40bf3c:	45b4      	cmp	ip, r6
  40bf3e:	da12      	bge.n	40bf66 <fill_normal+0x7c6>
                    if(*mask_tmp_x) {
  40bf40:	f89a 0000 	ldrb.w	r0, [sl]
  40bf44:	2800      	cmp	r0, #0
  40bf46:	d0f5      	beq.n	40bf34 <fill_normal+0x794>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
  40bf48:	4281      	cmp	r1, r0
  40bf4a:	d0a5      	beq.n	40be98 <fill_normal+0x6f8>
  40bf4c:	28ff      	cmp	r0, #255	; 0xff
  40bf4e:	d19e      	bne.n	40be8e <fill_normal+0x6ee>
  40bf50:	f8dd 8018 	ldr.w	r8, [sp, #24]
  40bf54:	e7a0      	b.n	40be98 <fill_normal+0x6f8>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
  40bf56:	b294      	uxth	r4, r2
  40bf58:	f835 701c 	ldrh.w	r7, [r5, ip, lsl #1]
  40bf5c:	42bc      	cmp	r4, r7
  40bf5e:	d19d      	bne.n	40be9c <fill_normal+0x6fc>
  40bf60:	e7e6      	b.n	40bf30 <fill_normal+0x790>
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
  40bf62:	465b      	mov	r3, fp
  40bf64:	e7e1      	b.n	40bf2a <fill_normal+0x78a>
                disp_buf_first += disp_w;
  40bf66:	9808      	ldr	r0, [sp, #32]
  40bf68:	eb05 0540 	add.w	r5, r5, r0, lsl #1
                mask += draw_area_w;
  40bf6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
  40bf6e:	9c07      	ldr	r4, [sp, #28]
  40bf70:	4420      	add	r0, r4
  40bf72:	901b      	str	r0, [sp, #108]	; 0x6c
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40bf74:	f10e 0e01 	add.w	lr, lr, #1
  40bf78:	980a      	ldr	r0, [sp, #40]	; 0x28
  40bf7a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
  40bf7e:	4586      	cmp	lr, r0
  40bf80:	f73f ac75 	bgt.w	40b86e <fill_normal+0xce>
  40bf84:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
  40bf88:	f04f 0c00 	mov.w	ip, #0
  40bf8c:	e7d6      	b.n	40bf3c <fill_normal+0x79c>
  40bf8e:	bf00      	nop

0040bf90 <color_blend_true_color_additive>:

static inline lv_color_t color_blend_true_color_additive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40bf90:	2a02      	cmp	r2, #2
  40bf92:	d972      	bls.n	40c07a <color_blend_true_color_additive+0xea>
{
  40bf94:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t tmp;
#if LV_COLOR_DEPTH == 1
    tmp = bg.full + fg.full;
    fg.full = LV_MATH_MIN(tmp, 1);
#else
    tmp = bg.ch.red + fg.ch.red;
  40bf96:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40bf9a:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40bf9e:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.red = LV_MATH_MIN(tmp, 7);
#elif LV_COLOR_DEPTH == 16
    fg.ch.red = LV_MATH_MIN(tmp, 31);
  40bfa0:	2b1f      	cmp	r3, #31
  40bfa2:	bf28      	it	cs
  40bfa4:	231f      	movcs	r3, #31
  40bfa6:	f363 00c7 	bfi	r0, r3, #3, #5
#elif LV_COLOR_DEPTH == 16
#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green + fg.ch.green;
    fg.ch.green = LV_MATH_MIN(tmp, 63);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40bfaa:	f001 0307 	and.w	r3, r1, #7
  40bfae:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40bfb2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40bfb6:	f000 0407 	and.w	r4, r0, #7
  40bfba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40bfbe:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40bfc2:	4423      	add	r3, r4
    tmp = LV_MATH_MIN(tmp, 63);
  40bfc4:	2b3f      	cmp	r3, #63	; 0x3f
  40bfc6:	bf28      	it	cs
  40bfc8:	233f      	movcs	r3, #63	; 0x3f
    fg.ch.green_h = tmp >> 3;
  40bfca:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40bfce:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40bfd2:	f363 304f 	bfi	r0, r3, #13, #3

#elif LV_COLOR_DEPTH == 32
    fg.ch.green = LV_MATH_MIN(tmp, 255);
#endif

    tmp = bg.ch.blue + fg.ch.blue;
  40bfd6:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40bfda:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40bfde:	4423      	add	r3, r4
#if LV_COLOR_DEPTH == 8
    fg.ch.blue = LV_MATH_MIN(tmp, 4);
#elif LV_COLOR_DEPTH == 16
    fg.ch.blue = LV_MATH_MIN(tmp, 31);
  40bfe0:	2b1f      	cmp	r3, #31
  40bfe2:	bf28      	it	cs
  40bfe4:	231f      	movcs	r3, #31
  40bfe6:	f363 200c 	bfi	r0, r3, #8, #5
#elif LV_COLOR_DEPTH == 32
    fg.ch.blue = LV_MATH_MIN(tmp, 255);
#endif
#endif

    if(opa == LV_OPA_COVER) return fg;
  40bfea:	2aff      	cmp	r2, #255	; 0xff
  40bfec:	d043      	beq.n	40c076 <color_blend_true_color_additive+0xe6>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40bfee:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40bff2:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40bff6:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40bffa:	fb06 f404 	mul.w	r4, r6, r4
  40bffe:	fb02 4303 	mla	r3, r2, r3, r4
  40c002:	3380      	adds	r3, #128	; 0x80
  40c004:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c008:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c00c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c010:	f04f 0500 	mov.w	r5, #0
  40c014:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c018:	f000 0407 	and.w	r4, r0, #7
  40c01c:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c020:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c024:	f001 0707 	and.w	r7, r1, #7
  40c028:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c02c:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c030:	fb04 f406 	mul.w	r4, r4, r6
  40c034:	fb03 4302 	mla	r3, r3, r2, r4
  40c038:	3380      	adds	r3, #128	; 0x80
  40c03a:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c03e:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c042:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c046:	f364 0502 	bfi	r5, r4, #0, #3
  40c04a:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c04e:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c052:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c056:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c05a:	fb04 f406 	mul.w	r4, r4, r6
  40c05e:	fb03 4202 	mla	r2, r3, r2, r4
  40c062:	3280      	adds	r2, #128	; 0x80
  40c064:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c068:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c06c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c070:	f362 250c 	bfi	r5, r2, #8, #5
  40c074:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c076:	bcf0      	pop	{r4, r5, r6, r7}
  40c078:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c07a:	4608      	mov	r0, r1
  40c07c:	4770      	bx	lr

0040c07e <color_blend_true_color_subtractive>:

static inline lv_color_t color_blend_true_color_subtractive(lv_color_t fg, lv_color_t bg, lv_opa_t opa)
{

    if(opa <= LV_OPA_MIN) return bg;
  40c07e:	2a02      	cmp	r2, #2
  40c080:	d96f      	bls.n	40c162 <color_blend_true_color_subtractive+0xe4>
{
  40c082:	b4f0      	push	{r4, r5, r6, r7}

    int32_t tmp;
    tmp = bg.ch.red - fg.ch.red;
  40c084:	f3c1 03c4 	ubfx	r3, r1, #3, #5
  40c088:	f3c0 04c4 	ubfx	r4, r0, #3, #5
  40c08c:	1b1b      	subs	r3, r3, r4
    fg.ch.red = LV_MATH_MAX(tmp, 0);
  40c08e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c092:	f363 00c7 	bfi	r0, r3, #3, #5

#if LV_COLOR_16_SWAP == 0
    tmp = bg.ch.green - fg.ch.green;
    fg.ch.green = LV_MATH_MAX(tmp, 0);
#else
    tmp = (bg.ch.green_h << 3) + bg.ch.green_l + (fg.ch.green_h << 3) + fg.ch.green_l;
  40c096:	f001 0307 	and.w	r3, r1, #7
  40c09a:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c09e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
  40c0a2:	f000 0407 	and.w	r4, r0, #7
  40c0a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c0aa:	f3c0 3442 	ubfx	r4, r0, #13, #3
  40c0ae:	4423      	add	r3, r4
    tmp = LV_MATH_MAX(tmp, 0);
  40c0b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fg.ch.green_h = tmp >> 3;
  40c0b4:	f3c3 04c2 	ubfx	r4, r3, #3, #3
  40c0b8:	f364 0002 	bfi	r0, r4, #0, #3
    fg.ch.green_l = tmp & 0x7;
  40c0bc:	f363 304f 	bfi	r0, r3, #13, #3
#endif

    tmp = bg.ch.blue - fg.ch.blue;
  40c0c0:	f3c1 2304 	ubfx	r3, r1, #8, #5
  40c0c4:	f3c0 2404 	ubfx	r4, r0, #8, #5
  40c0c8:	1b1b      	subs	r3, r3, r4
    fg.ch.blue = LV_MATH_MAX(tmp, 0);
  40c0ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40c0ce:	f363 200c 	bfi	r0, r3, #8, #5

    if(opa == LV_OPA_COVER) return fg;
  40c0d2:	2aff      	cmp	r2, #255	; 0xff
  40c0d4:	d043      	beq.n	40c15e <color_blend_true_color_subtractive+0xe0>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c0d6:	f3c0 03c4 	ubfx	r3, r0, #3, #5
  40c0da:	f3c1 04c4 	ubfx	r4, r1, #3, #5
  40c0de:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
  40c0e2:	fb06 f404 	mul.w	r4, r6, r4
  40c0e6:	fb02 4303 	mla	r3, r2, r3, r4
  40c0ea:	3380      	adds	r3, #128	; 0x80
  40c0ec:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c0f0:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c0f4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c0f8:	f04f 0500 	mov.w	r5, #0
  40c0fc:	f363 05c7 	bfi	r5, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c100:	f000 0407 	and.w	r4, r0, #7
  40c104:	f3c0 3342 	ubfx	r3, r0, #13, #3
  40c108:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  40c10c:	f001 0707 	and.w	r7, r1, #7
  40c110:	f3c1 3442 	ubfx	r4, r1, #13, #3
  40c114:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
  40c118:	fb04 f406 	mul.w	r4, r4, r6
  40c11c:	fb03 4302 	mla	r3, r3, r2, r4
  40c120:	3380      	adds	r3, #128	; 0x80
  40c122:	eb03 2403 	add.w	r4, r3, r3, lsl #8
  40c126:	eb03 13c4 	add.w	r3, r3, r4, lsl #7
  40c12a:	f3c3 6482 	ubfx	r4, r3, #26, #3
  40c12e:	f364 0502 	bfi	r5, r4, #0, #3
  40c132:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c136:	f363 354f 	bfi	r5, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c13a:	f3c0 2304 	ubfx	r3, r0, #8, #5
  40c13e:	f3c1 2404 	ubfx	r4, r1, #8, #5
  40c142:	fb04 f406 	mul.w	r4, r4, r6
  40c146:	fb03 4202 	mla	r2, r3, r2, r4
  40c14a:	3280      	adds	r2, #128	; 0x80
  40c14c:	eb02 2302 	add.w	r3, r2, r2, lsl #8
  40c150:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
  40c154:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40c158:	f362 250c 	bfi	r5, r2, #8, #5
  40c15c:	4628      	mov	r0, r5

    return lv_color_mix(fg, bg, opa);
}
  40c15e:	bcf0      	pop	{r4, r5, r6, r7}
  40c160:	4770      	bx	lr
    if(opa <= LV_OPA_MIN) return bg;
  40c162:	4608      	mov	r0, r1
  40c164:	4770      	bx	lr
	...

0040c168 <fill_blended>:
{
  40c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c16c:	b085      	sub	sp, #20
  40c16e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
  40c172:	9400      	str	r4, [sp, #0]
  40c174:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c178:	8884      	ldrh	r4, [r0, #4]
  40c17a:	8800      	ldrh	r0, [r0, #0]
  40c17c:	1a20      	subs	r0, r4, r0
  40c17e:	b280      	uxth	r0, r0
  40c180:	3001      	adds	r0, #1
  40c182:	b200      	sxth	r0, r0
  40c184:	9002      	str	r0, [sp, #8]
    lv_color_t * disp_buf_tmp = disp_buf + disp_w * draw_area->y1;
  40c186:	f9b2 b002 	ldrsh.w	fp, [r2, #2]
  40c18a:	fb0b f000 	mul.w	r0, fp, r0
  40c18e:	eb01 0540 	add.w	r5, r1, r0, lsl #1
    switch(mode) {
  40c192:	2e01      	cmp	r6, #1
  40c194:	d004      	beq.n	40c1a0 <fill_blended+0x38>
  40c196:	2e02      	cmp	r6, #2
  40c198:	d01b      	beq.n	40c1d2 <fill_blended+0x6a>
}
  40c19a:	b005      	add	sp, #20
  40c19c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            blend_fp = color_blend_true_color_additive;
  40c1a0:	f8df a154 	ldr.w	sl, [pc, #340]	; 40c2f8 <fill_blended+0x190>
  40c1a4:	f8ad 3006 	strh.w	r3, [sp, #6]
  40c1a8:	4690      	mov	r8, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
  40c1aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
  40c1ae:	2b01      	cmp	r3, #1
  40c1b0:	d012      	beq.n	40c1d8 <fill_blended+0x70>
  40c1b2:	8893      	ldrh	r3, [r2, #4]
  40c1b4:	f9b2 2000 	ldrsh.w	r2, [r2]
  40c1b8:	b294      	uxth	r4, r2
  40c1ba:	1b1b      	subs	r3, r3, r4
  40c1bc:	b29b      	uxth	r3, r3
  40c1be:	3301      	adds	r3, #1
  40c1c0:	b21b      	sxth	r3, r3
  40c1c2:	9303      	str	r3, [sp, #12]
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
  40c1c4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40c1c6:	1abf      	subs	r7, r7, r2
        last_dest_color.full = disp_buf_tmp[0].full;
  40c1c8:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
  40c1cc:	4686      	mov	lr, r0
        lv_opa_t last_mask = LV_OPA_TRANSP;
  40c1ce:	2100      	movs	r1, #0
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c1d0:	e089      	b.n	40c2e6 <fill_blended+0x17e>
            blend_fp = color_blend_true_color_subtractive;
  40c1d2:	f8df a128 	ldr.w	sl, [pc, #296]	; 40c2fc <fill_blended+0x194>
  40c1d6:	e7e5      	b.n	40c1a4 <fill_blended+0x3c>
        lv_color_t last_dest_color = LV_COLOR_BLACK;
  40c1d8:	f04f 0600 	mov.w	r6, #0
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  40c1dc:	f8bd 4006 	ldrh.w	r4, [sp, #6]
  40c1e0:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  40c1e4:	9900      	ldr	r1, [sp, #0]
  40c1e6:	fb01 f303 	mul.w	r3, r1, r3
  40c1ea:	3380      	adds	r3, #128	; 0x80
  40c1ec:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c1f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c1f4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c1f8:	4630      	mov	r0, r6
  40c1fa:	f363 00c7 	bfi	r0, r3, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  40c1fe:	f004 0207 	and.w	r2, r4, #7
  40c202:	f3c4 3342 	ubfx	r3, r4, #13, #3
  40c206:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40c20a:	fb03 f301 	mul.w	r3, r3, r1
  40c20e:	3380      	adds	r3, #128	; 0x80
  40c210:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c214:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c218:	f3c3 6282 	ubfx	r2, r3, #26, #3
  40c21c:	f362 0002 	bfi	r0, r2, #0, #3
  40c220:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  40c224:	f363 304f 	bfi	r0, r3, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  40c228:	f3c4 2304 	ubfx	r3, r4, #8, #5
  40c22c:	fb03 f301 	mul.w	r3, r3, r1
  40c230:	3380      	adds	r3, #128	; 0x80
  40c232:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40c236:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40c23a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40c23e:	f363 200c 	bfi	r0, r3, #8, #5
  40c242:	f8dd 9008 	ldr.w	r9, [sp, #8]
  40c246:	e018      	b.n	40c27a <fill_blended+0x112>
                disp_buf_tmp[x] = last_res_color;
  40c248:	8038      	strh	r0, [r7, #0]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c24a:	3401      	adds	r4, #1
  40c24c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c250:	429c      	cmp	r4, r3
  40c252:	dc0e      	bgt.n	40c272 <fill_blended+0x10a>
                if(last_dest_color.full != disp_buf_tmp[x].full) {
  40c254:	b2b3      	uxth	r3, r6
  40c256:	eb05 0744 	add.w	r7, r5, r4, lsl #1
  40c25a:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
  40c25e:	4293      	cmp	r3, r2
  40c260:	d0f2      	beq.n	40c248 <fill_blended+0xe0>
                    last_dest_color = disp_buf_tmp[x];
  40c262:	f835 6014 	ldrh.w	r6, [r5, r4, lsl #1]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa);
  40c266:	9a00      	ldr	r2, [sp, #0]
  40c268:	4631      	mov	r1, r6
  40c26a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c26e:	47d0      	blx	sl
  40c270:	e7ea      	b.n	40c248 <fill_blended+0xe0>
            disp_buf_tmp += disp_w;
  40c272:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c276:	f10b 0b01 	add.w	fp, fp, #1
  40c27a:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c27e:	459b      	cmp	fp, r3
  40c280:	dc8b      	bgt.n	40c19a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c282:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c286:	e7e1      	b.n	40c24c <fill_blended+0xe4>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c288:	fa1f f38e 	uxth.w	r3, lr
  40c28c:	f835 c014 	ldrh.w	ip, [r5, r4, lsl #1]
  40c290:	4563      	cmp	r3, ip
  40c292:	d119      	bne.n	40c2c8 <fill_blended+0x160>
  40c294:	e009      	b.n	40c2aa <fill_blended+0x142>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c296:	9a00      	ldr	r2, [sp, #0]
                    last_res_color = blend_fp(color, disp_buf_tmp[x], opa_tmp);
  40c298:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
  40c29c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
  40c2a0:	47d0      	blx	sl
                    last_mask = mask_tmp[x];
  40c2a2:	f899 1000 	ldrb.w	r1, [r9]
                    last_dest_color.full = disp_buf_tmp[x].full;
  40c2a6:	f835 e016 	ldrh.w	lr, [r5, r6, lsl #1]
                disp_buf_tmp[x] = last_res_color;
  40c2aa:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c2ae:	3401      	adds	r4, #1
  40c2b0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
  40c2b4:	429c      	cmp	r4, r3
  40c2b6:	dc0f      	bgt.n	40c2d8 <fill_blended+0x170>
                if(mask_tmp[x] == 0) continue;
  40c2b8:	4626      	mov	r6, r4
  40c2ba:	eb07 0904 	add.w	r9, r7, r4
  40c2be:	5d3a      	ldrb	r2, [r7, r4]
  40c2c0:	2a00      	cmp	r2, #0
  40c2c2:	d0f4      	beq.n	40c2ae <fill_blended+0x146>
                if(mask_tmp[x] != last_mask || last_dest_color.full != disp_buf_tmp[x].full) {
  40c2c4:	4291      	cmp	r1, r2
  40c2c6:	d0df      	beq.n	40c288 <fill_blended+0x120>
                    lv_opa_t opa_tmp = mask_tmp[x] >= LV_OPA_MAX ? opa : (uint32_t)((uint32_t)mask_tmp[x] * opa) >> 8;
  40c2c8:	2afc      	cmp	r2, #252	; 0xfc
  40c2ca:	d8e4      	bhi.n	40c296 <fill_blended+0x12e>
  40c2cc:	9b00      	ldr	r3, [sp, #0]
  40c2ce:	fb02 f203 	mul.w	r2, r2, r3
  40c2d2:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40c2d6:	e7df      	b.n	40c298 <fill_blended+0x130>
            disp_buf_tmp += disp_w;
  40c2d8:	9b02      	ldr	r3, [sp, #8]
  40c2da:	eb05 0543 	add.w	r5, r5, r3, lsl #1
            mask_tmp += draw_area_w;
  40c2de:	9b03      	ldr	r3, [sp, #12]
  40c2e0:	441f      	add	r7, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
  40c2e2:	f10b 0b01 	add.w	fp, fp, #1
  40c2e6:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
  40c2ea:	459b      	cmp	fp, r3
  40c2ec:	f73f af55 	bgt.w	40c19a <fill_blended+0x32>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
  40c2f0:	f9b8 4000 	ldrsh.w	r4, [r8]
  40c2f4:	e7dc      	b.n	40c2b0 <fill_blended+0x148>
  40c2f6:	bf00      	nop
  40c2f8:	0040bf91 	.word	0x0040bf91
  40c2fc:	0040c07f 	.word	0x0040c07f

0040c300 <_lv_blend_fill>:
{
  40c300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c304:	b08b      	sub	sp, #44	; 0x2c
  40c306:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c30a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c30e:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c312:	2d01      	cmp	r5, #1
  40c314:	d900      	bls.n	40c318 <_lv_blend_fill+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c316:	b916      	cbnz	r6, 40c31e <_lv_blend_fill+0x1e>
}
  40c318:	b00b      	add	sp, #44	; 0x2c
  40c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c31e:	461c      	mov	r4, r3
  40c320:	f8ad 201e 	strh.w	r2, [sp, #30]
  40c324:	9106      	str	r1, [sp, #24]
  40c326:	9005      	str	r0, [sp, #20]
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c328:	4b37      	ldr	r3, [pc, #220]	; (40c408 <_lv_blend_fill+0x108>)
  40c32a:	4798      	blx	r3
  40c32c:	4681      	mov	r9, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c32e:	4b37      	ldr	r3, [pc, #220]	; (40c40c <_lv_blend_fill+0x10c>)
  40c330:	4798      	blx	r3
  40c332:	4680      	mov	r8, r0
    const lv_area_t * disp_area = &vdb->area;
  40c334:	f100 0a10 	add.w	sl, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c338:	f8d0 b008 	ldr.w	fp, [r0, #8]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c33c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
  40c340:	b10b      	cbz	r3, 40c346 <_lv_blend_fill+0x46>
  40c342:	4648      	mov	r0, r9
  40c344:	4798      	blx	r3
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
  40c346:	9a06      	ldr	r2, [sp, #24]
  40c348:	9905      	ldr	r1, [sp, #20]
  40c34a:	a808      	add	r0, sp, #32
  40c34c:	4b30      	ldr	r3, [pc, #192]	; (40c410 <_lv_blend_fill+0x110>)
  40c34e:	4798      	blx	r3
    if(!is_common) return;
  40c350:	2800      	cmp	r0, #0
  40c352:	d0e1      	beq.n	40c318 <_lv_blend_fill+0x18>
    draw_area.x1 -= disp_area->x1;
  40c354:	f8b8 e010 	ldrh.w	lr, [r8, #16]
  40c358:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c35c:	eba2 020e 	sub.w	r2, r2, lr
  40c360:	b292      	uxth	r2, r2
  40c362:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c366:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  40c36a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c36e:	1a09      	subs	r1, r1, r0
  40c370:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c374:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c378:	eba3 030e 	sub.w	r3, r3, lr
  40c37c:	b29b      	uxth	r3, r3
  40c37e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c382:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c386:	1a09      	subs	r1, r1, r0
  40c388:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c38c:	b1ac      	cbz	r4, 40c3ba <_lv_blend_fill+0xba>
  40c38e:	f899 1008 	ldrb.w	r1, [r9, #8]
  40c392:	f011 0f01 	tst.w	r1, #1
  40c396:	d110      	bne.n	40c3ba <_lv_blend_fill+0xba>
  40c398:	1a9a      	subs	r2, r3, r2
  40c39a:	b292      	uxth	r2, r2
  40c39c:	3201      	adds	r2, #1
  40c39e:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c3a0:	2300      	movs	r3, #0
  40c3a2:	e002      	b.n	40c3aa <_lv_blend_fill+0xaa>
  40c3a4:	2000      	movs	r0, #0
  40c3a6:	7008      	strb	r0, [r1, #0]
  40c3a8:	3301      	adds	r3, #1
  40c3aa:	4293      	cmp	r3, r2
  40c3ac:	da05      	bge.n	40c3ba <_lv_blend_fill+0xba>
  40c3ae:	18e1      	adds	r1, r4, r3
  40c3b0:	5ce0      	ldrb	r0, [r4, r3]
  40c3b2:	2880      	cmp	r0, #128	; 0x80
  40c3b4:	d9f6      	bls.n	40c3a4 <_lv_blend_fill+0xa4>
  40c3b6:	20ff      	movs	r0, #255	; 0xff
  40c3b8:	e7f5      	b.n	40c3a6 <_lv_blend_fill+0xa6>
    if(disp->driver.set_px_cb) {
  40c3ba:	f8d9 3014 	ldr.w	r3, [r9, #20]
  40c3be:	b153      	cbz	r3, 40c3d6 <_lv_blend_fill+0xd6>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c3c0:	9602      	str	r6, [sp, #8]
  40c3c2:	9401      	str	r4, [sp, #4]
  40c3c4:	9500      	str	r5, [sp, #0]
  40c3c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c3ca:	aa08      	add	r2, sp, #32
  40c3cc:	4659      	mov	r1, fp
  40c3ce:	4650      	mov	r0, sl
  40c3d0:	4c10      	ldr	r4, [pc, #64]	; (40c414 <_lv_blend_fill+0x114>)
  40c3d2:	47a0      	blx	r4
  40c3d4:	e7a0      	b.n	40c318 <_lv_blend_fill+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c3d6:	b957      	cbnz	r7, 40c3ee <_lv_blend_fill+0xee>
        fill_normal(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
  40c3d8:	9602      	str	r6, [sp, #8]
  40c3da:	9401      	str	r4, [sp, #4]
  40c3dc:	9500      	str	r5, [sp, #0]
  40c3de:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c3e2:	aa08      	add	r2, sp, #32
  40c3e4:	4659      	mov	r1, fp
  40c3e6:	4650      	mov	r0, sl
  40c3e8:	4c0b      	ldr	r4, [pc, #44]	; (40c418 <_lv_blend_fill+0x118>)
  40c3ea:	47a0      	blx	r4
  40c3ec:	e794      	b.n	40c318 <_lv_blend_fill+0x18>
        fill_blended(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res, mode);
  40c3ee:	9703      	str	r7, [sp, #12]
  40c3f0:	9602      	str	r6, [sp, #8]
  40c3f2:	9401      	str	r4, [sp, #4]
  40c3f4:	9500      	str	r5, [sp, #0]
  40c3f6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40c3fa:	aa08      	add	r2, sp, #32
  40c3fc:	4659      	mov	r1, fp
  40c3fe:	4650      	mov	r0, sl
  40c400:	4c06      	ldr	r4, [pc, #24]	; (40c41c <_lv_blend_fill+0x11c>)
  40c402:	47a0      	blx	r4
  40c404:	e788      	b.n	40c318 <_lv_blend_fill+0x18>
  40c406:	bf00      	nop
  40c408:	00409269 	.word	0x00409269
  40c40c:	00414735 	.word	0x00414735
  40c410:	00414ef3 	.word	0x00414ef3
  40c414:	0040add1 	.word	0x0040add1
  40c418:	0040b7a1 	.word	0x0040b7a1
  40c41c:	0040c169 	.word	0x0040c169

0040c420 <_lv_blend_map>:
{
  40c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c424:	b08b      	sub	sp, #44	; 0x2c
  40c426:	f89d 6050 	ldrb.w	r6, [sp, #80]	; 0x50
  40c42a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
  40c42e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    if(opa < LV_OPA_MIN) return;
  40c432:	2d01      	cmp	r5, #1
  40c434:	d900      	bls.n	40c438 <_lv_blend_map+0x18>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
  40c436:	b916      	cbnz	r6, 40c43e <_lv_blend_map+0x1e>
}
  40c438:	b00b      	add	sp, #44	; 0x2c
  40c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40c43e:	461c      	mov	r4, r3
  40c440:	4617      	mov	r7, r2
  40c442:	460a      	mov	r2, r1
  40c444:	9106      	str	r1, [sp, #24]
  40c446:	4601      	mov	r1, r0
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
  40c448:	a808      	add	r0, sp, #32
  40c44a:	4b37      	ldr	r3, [pc, #220]	; (40c528 <_lv_blend_map+0x108>)
  40c44c:	4798      	blx	r3
    if(!is_common) return;
  40c44e:	2800      	cmp	r0, #0
  40c450:	d0f2      	beq.n	40c438 <_lv_blend_map+0x18>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
  40c452:	4b36      	ldr	r3, [pc, #216]	; (40c52c <_lv_blend_map+0x10c>)
  40c454:	4798      	blx	r3
  40c456:	4682      	mov	sl, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c458:	4b35      	ldr	r3, [pc, #212]	; (40c530 <_lv_blend_map+0x110>)
  40c45a:	4798      	blx	r3
  40c45c:	4681      	mov	r9, r0
    const lv_area_t * disp_area = &vdb->area;
  40c45e:	f100 0b10 	add.w	fp, r0, #16
    lv_color_t * disp_buf = vdb->buf_act;
  40c462:	6883      	ldr	r3, [r0, #8]
  40c464:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
  40c466:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40c46a:	b10b      	cbz	r3, 40c470 <_lv_blend_map+0x50>
  40c46c:	4650      	mov	r0, sl
  40c46e:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
  40c470:	f8b9 e010 	ldrh.w	lr, [r9, #16]
  40c474:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40c478:	eba2 020e 	sub.w	r2, r2, lr
  40c47c:	b292      	uxth	r2, r2
  40c47e:	f8ad 2020 	strh.w	r2, [sp, #32]
    draw_area.y1 -= disp_area->y1;
  40c482:	f8b9 0012 	ldrh.w	r0, [r9, #18]
  40c486:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  40c48a:	1a09      	subs	r1, r1, r0
  40c48c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
    draw_area.x2 -= disp_area->x1;
  40c490:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40c494:	eba3 030e 	sub.w	r3, r3, lr
  40c498:	b29b      	uxth	r3, r3
  40c49a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y2 -= disp_area->y1;
  40c49e:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
  40c4a2:	1a09      	subs	r1, r1, r0
  40c4a4:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
    if(mask && disp->driver.antialiasing == 0)
  40c4a8:	b1ac      	cbz	r4, 40c4d6 <_lv_blend_map+0xb6>
  40c4aa:	f89a 1008 	ldrb.w	r1, [sl, #8]
  40c4ae:	f011 0f01 	tst.w	r1, #1
  40c4b2:	d110      	bne.n	40c4d6 <_lv_blend_map+0xb6>
  40c4b4:	1a9a      	subs	r2, r3, r2
  40c4b6:	b292      	uxth	r2, r2
  40c4b8:	3201      	adds	r2, #1
  40c4ba:	b212      	sxth	r2, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
  40c4bc:	2300      	movs	r3, #0
  40c4be:	e002      	b.n	40c4c6 <_lv_blend_map+0xa6>
  40c4c0:	2000      	movs	r0, #0
  40c4c2:	7008      	strb	r0, [r1, #0]
  40c4c4:	3301      	adds	r3, #1
  40c4c6:	4293      	cmp	r3, r2
  40c4c8:	da05      	bge.n	40c4d6 <_lv_blend_map+0xb6>
  40c4ca:	18e1      	adds	r1, r4, r3
  40c4cc:	5ce0      	ldrb	r0, [r4, r3]
  40c4ce:	2880      	cmp	r0, #128	; 0x80
  40c4d0:	d9f6      	bls.n	40c4c0 <_lv_blend_map+0xa0>
  40c4d2:	20ff      	movs	r0, #255	; 0xff
  40c4d4:	e7f5      	b.n	40c4c2 <_lv_blend_map+0xa2>
    if(disp->driver.set_px_cb) {
  40c4d6:	f8da 3014 	ldr.w	r3, [sl, #20]
  40c4da:	b153      	cbz	r3, 40c4f2 <_lv_blend_map+0xd2>
        map_set_px(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c4dc:	9603      	str	r6, [sp, #12]
  40c4de:	9402      	str	r4, [sp, #8]
  40c4e0:	9501      	str	r5, [sp, #4]
  40c4e2:	9700      	str	r7, [sp, #0]
  40c4e4:	9b06      	ldr	r3, [sp, #24]
  40c4e6:	aa08      	add	r2, sp, #32
  40c4e8:	9907      	ldr	r1, [sp, #28]
  40c4ea:	4658      	mov	r0, fp
  40c4ec:	4c11      	ldr	r4, [pc, #68]	; (40c534 <_lv_blend_map+0x114>)
  40c4ee:	47a0      	blx	r4
  40c4f0:	e7a2      	b.n	40c438 <_lv_blend_map+0x18>
    else if(mode == LV_BLEND_MODE_NORMAL) {
  40c4f2:	f1b8 0f00 	cmp.w	r8, #0
  40c4f6:	d10a      	bne.n	40c50e <_lv_blend_map+0xee>
        map_normal(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res);
  40c4f8:	9603      	str	r6, [sp, #12]
  40c4fa:	9402      	str	r4, [sp, #8]
  40c4fc:	9501      	str	r5, [sp, #4]
  40c4fe:	9700      	str	r7, [sp, #0]
  40c500:	9b06      	ldr	r3, [sp, #24]
  40c502:	aa08      	add	r2, sp, #32
  40c504:	9907      	ldr	r1, [sp, #28]
  40c506:	4658      	mov	r0, fp
  40c508:	4c0b      	ldr	r4, [pc, #44]	; (40c538 <_lv_blend_map+0x118>)
  40c50a:	47a0      	blx	r4
  40c50c:	e794      	b.n	40c438 <_lv_blend_map+0x18>
        map_blended(disp_area, disp_buf, &draw_area, map_area, map_buf, opa, mask, mask_res, mode);
  40c50e:	f8cd 8010 	str.w	r8, [sp, #16]
  40c512:	9603      	str	r6, [sp, #12]
  40c514:	9402      	str	r4, [sp, #8]
  40c516:	9501      	str	r5, [sp, #4]
  40c518:	9700      	str	r7, [sp, #0]
  40c51a:	9b06      	ldr	r3, [sp, #24]
  40c51c:	aa08      	add	r2, sp, #32
  40c51e:	9907      	ldr	r1, [sp, #28]
  40c520:	4658      	mov	r0, fp
  40c522:	4c06      	ldr	r4, [pc, #24]	; (40c53c <_lv_blend_map+0x11c>)
  40c524:	47a0      	blx	r4
  40c526:	e787      	b.n	40c438 <_lv_blend_map+0x18>
  40c528:	00414ef3 	.word	0x00414ef3
  40c52c:	00409269 	.word	0x00409269
  40c530:	00414735 	.word	0x00414735
  40c534:	0040aeb5 	.word	0x0040aeb5
  40c538:	0040afed 	.word	0x0040afed
  40c53c:	0040ac85 	.word	0x0040ac85

0040c540 <lv_draw_map>:
 */
LV_ATTRIBUTE_FAST_MEM static void lv_draw_map(const lv_area_t * map_area, const lv_area_t * clip_area,
                                              const uint8_t * map_p,
                                              const lv_draw_img_dsc_t * draw_dsc,
                                              bool chroma_key, bool alpha_byte)
{
  40c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40c544:	b0bd      	sub	sp, #244	; 0xf4
  40c546:	9016      	str	r0, [sp, #88]	; 0x58
  40c548:	911f      	str	r1, [sp, #124]	; 0x7c
  40c54a:	4616      	mov	r6, r2
  40c54c:	930a      	str	r3, [sp, #40]	; 0x28
  40c54e:	f89d 3118 	ldrb.w	r3, [sp, #280]	; 0x118
  40c552:	930d      	str	r3, [sp, #52]	; 0x34
  40c554:	f89d 311c 	ldrb.w	r3, [sp, #284]	; 0x11c
  40c558:	9308      	str	r3, [sp, #32]
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  40c55a:	aa3a      	add	r2, sp, #232	; 0xe8
  40c55c:	2308      	movs	r3, #8
  40c55e:	e004      	b.n	40c56a <lv_draw_map+0x2a>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  40c560:	f811 0b01 	ldrb.w	r0, [r1], #1
  40c564:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  40c568:	3b01      	subs	r3, #1
    while(len) {
  40c56a:	2b00      	cmp	r3, #0
  40c56c:	d1f8      	bne.n	40c560 <lv_draw_map+0x20>
    /* Use the clip area as draw area*/
    lv_area_t draw_area;
    lv_area_copy(&draw_area, clip_area);

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40c56e:	4ba6      	ldr	r3, [pc, #664]	; (40c808 <lv_draw_map+0x2c8>)
  40c570:	4798      	blx	r3
  40c572:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40c574:	4ba5      	ldr	r3, [pc, #660]	; (40c80c <lv_draw_map+0x2cc>)
  40c576:	4798      	blx	r3
  40c578:	9014      	str	r0, [sp, #80]	; 0x50
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
  40c57a:	8a01      	ldrh	r1, [r0, #16]
  40c57c:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40c580:	1a5b      	subs	r3, r3, r1
  40c582:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40c586:	8a42      	ldrh	r2, [r0, #18]
  40c588:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40c58c:	1a9b      	subs	r3, r3, r2
  40c58e:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40c592:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c596:	1a5b      	subs	r3, r3, r1
  40c598:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40c59c:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c5a0:	1a9b      	subs	r3, r3, r2
  40c5a2:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40c5a6:	4b9a      	ldr	r3, [pc, #616]	; (40c810 <lv_draw_map+0x2d0>)
  40c5a8:	4798      	blx	r3

    /*The simplest case just copy the pixels into the VDB*/
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
  40c5aa:	9015      	str	r0, [sp, #84]	; 0x54
  40c5ac:	b930      	cbnz	r0, 40c5bc <lv_draw_map+0x7c>
  40c5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c5b0:	8853      	ldrh	r3, [r2, #2]
  40c5b2:	b91b      	cbnz	r3, 40c5bc <lv_draw_map+0x7c>
  40c5b4:	8913      	ldrh	r3, [r2, #8]
  40c5b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c5ba:	d055      	beq.n	40c668 <lv_draw_map+0x128>
    }
#endif
    /*In the other cases every pixel need to be checked one-by-one*/
    else {
        /*The pixel size in byte is different if an alpha byte is added too*/
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c5bc:	9b08      	ldr	r3, [sp, #32]
  40c5be:	2b00      	cmp	r3, #0
  40c5c0:	d068      	beq.n	40c694 <lv_draw_map+0x154>
  40c5c2:	2303      	movs	r3, #3
  40c5c4:	9307      	str	r3, [sp, #28]
  40c5c6:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c5c8:	888d      	ldrh	r5, [r1, #4]
  40c5ca:	f9b1 2000 	ldrsh.w	r2, [r1]
  40c5ce:	b293      	uxth	r3, r2
  40c5d0:	1aed      	subs	r5, r5, r3
  40c5d2:	b2ad      	uxth	r5, r5
  40c5d4:	3501      	adds	r5, #1
  40c5d6:	b22d      	sxth	r5, r5

        /*Go to the first displayed pixel of the map*/
        int32_t map_w = lv_area_get_width(map_area);
  40c5d8:	9519      	str	r5, [sp, #100]	; 0x64
        const uint8_t * map_buf_tmp = map_p;
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
  40c5da:	f9bd 00ea 	ldrsh.w	r0, [sp, #234]	; 0xea
  40c5de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40c5e2:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40c5e4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  40c5e8:	1a5b      	subs	r3, r3, r1
  40c5ea:	1ac3      	subs	r3, r0, r3
  40c5ec:	fb03 f305 	mul.w	r3, r3, r5
  40c5f0:	9f07      	ldr	r7, [sp, #28]
  40c5f2:	971a      	str	r7, [sp, #104]	; 0x68
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
  40c5f4:	f9bd c0e8 	ldrsh.w	ip, [sp, #232]	; 0xe8
  40c5f8:	f9b4 e010 	ldrsh.w	lr, [r4, #16]
  40c5fc:	eba2 020e 	sub.w	r2, r2, lr
  40c600:	ebac 0202 	sub.w	r2, ip, r2
  40c604:	fb02 f207 	mul.w	r2, r2, r7
  40c608:	fb07 2303 	mla	r3, r7, r3, r2
  40c60c:	18f3      	adds	r3, r6, r3
  40c60e:	9311      	str	r3, [sp, #68]	; 0x44
        uint32_t px_i = 0;

        const uint8_t * map_px;

        lv_area_t blend_area;
        blend_area.x1 = draw_area.x1 + disp_area->x1;
  40c610:	fa1f f78c 	uxth.w	r7, ip
  40c614:	fa17 f38e 	uxtah	r3, r7, lr
  40c618:	b29b      	uxth	r3, r3
  40c61a:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
  40c61e:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40c622:	1bd2      	subs	r2, r2, r7
  40c624:	b292      	uxth	r2, r2
  40c626:	3201      	adds	r2, #1
  40c628:	b292      	uxth	r2, r2
  40c62a:	fa0f f982 	sxth.w	r9, r2
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
  40c62e:	4413      	add	r3, r2
  40c630:	b29b      	uxth	r3, r3
  40c632:	3b01      	subs	r3, #1
  40c634:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
        blend_area.y1 = disp_area->y1 + draw_area.y1;
  40c638:	b280      	uxth	r0, r0
  40c63a:	fa10 f381 	uxtah	r3, r0, r1
  40c63e:	b21b      	sxth	r3, r3
  40c640:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
        blend_area.y2 = blend_area.y1;
  40c644:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c648:	f8bd 30ee 	ldrh.w	r3, [sp, #238]	; 0xee
  40c64c:	1a1b      	subs	r3, r3, r0
  40c64e:	b29b      	uxth	r3, r3
  40c650:	3301      	adds	r3, #1
  40c652:	b21b      	sxth	r3, r3
  40c654:	9318      	str	r3, [sp, #96]	; 0x60

        lv_coord_t draw_area_h = lv_area_get_height(&draw_area);
        lv_coord_t draw_area_w = lv_area_get_width(&draw_area);

#if LV_USE_IMG_TRANSFORM
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c658:	8853      	ldrh	r3, [r2, #2]
  40c65a:	b9f3      	cbnz	r3, 40c69a <lv_draw_map+0x15a>
  40c65c:	8913      	ldrh	r3, [r2, #8]
  40c65e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c662:	d051      	beq.n	40c708 <lv_draw_map+0x1c8>
  40c664:	2301      	movs	r3, #1
  40c666:	e019      	b.n	40c69c <lv_draw_map+0x15c>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
  40c668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c66a:	2b00      	cmp	r3, #0
  40c66c:	d1a6      	bne.n	40c5bc <lv_draw_map+0x7c>
  40c66e:	9b08      	ldr	r3, [sp, #32]
  40c670:	2b00      	cmp	r3, #0
  40c672:	d1a3      	bne.n	40c5bc <lv_draw_map+0x7c>
  40c674:	7a93      	ldrb	r3, [r2, #10]
  40c676:	2b00      	cmp	r3, #0
  40c678:	d1a0      	bne.n	40c5bc <lv_draw_map+0x7c>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
  40c67a:	7b93      	ldrb	r3, [r2, #14]
  40c67c:	9302      	str	r3, [sp, #8]
  40c67e:	7813      	ldrb	r3, [r2, #0]
  40c680:	9301      	str	r3, [sp, #4]
  40c682:	2301      	movs	r3, #1
  40c684:	9300      	str	r3, [sp, #0]
  40c686:	2300      	movs	r3, #0
  40c688:	4632      	mov	r2, r6
  40c68a:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c68c:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c68e:	4c61      	ldr	r4, [pc, #388]	; (40c814 <lv_draw_map+0x2d4>)
  40c690:	47a0      	blx	r4
  40c692:	e368      	b.n	40cd66 <lv_draw_map+0x826>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
  40c694:	2302      	movs	r3, #2
  40c696:	9307      	str	r3, [sp, #28]
  40c698:	e795      	b.n	40c5c6 <lv_draw_map+0x86>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c69a:	2301      	movs	r3, #1
  40c69c:	9306      	str	r3, [sp, #24]
#else
        bool transform = false;
#endif
        /*Simple ARGB image. Handle it as special case because it's very common*/
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c69e:	f083 0301 	eor.w	r3, r3, #1
  40c6a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
  40c6a4:	2a00      	cmp	r2, #0
  40c6a6:	bf14      	ite	ne
  40c6a8:	2300      	movne	r3, #0
  40c6aa:	f003 0301 	andeq.w	r3, r3, #1
  40c6ae:	b133      	cbz	r3, 40c6be <lv_draw_map+0x17e>
  40c6b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c6b2:	b923      	cbnz	r3, 40c6be <lv_draw_map+0x17e>
  40c6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40c6b6:	7a9b      	ldrb	r3, [r3, #10]
  40c6b8:	b90b      	cbnz	r3, 40c6be <lv_draw_map+0x17e>
  40c6ba:	9b08      	ldr	r3, [sp, #32]
  40c6bc:	bb33      	cbnz	r3, 40c70c <lv_draw_map+0x1cc>
            _lv_mem_buf_release(map2);
        }
        /*Most complicated case: transform or other mask or chroma keyed*/
        else {
            /*Build the image and a mask line-by-line*/
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c6be:	4640      	mov	r0, r8
  40c6c0:	4b55      	ldr	r3, [pc, #340]	; (40c818 <lv_draw_map+0x2d8>)
  40c6c2:	4798      	blx	r3
  40c6c4:	4604      	mov	r4, r0
  40c6c6:	9017      	str	r0, [sp, #92]	; 0x5c
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c6c8:	a83a      	add	r0, sp, #232	; 0xe8
  40c6ca:	4b54      	ldr	r3, [pc, #336]	; (40c81c <lv_draw_map+0x2dc>)
  40c6cc:	4798      	blx	r3
  40c6ce:	4284      	cmp	r4, r0
  40c6d0:	f080 80ac 	bcs.w	40c82c <lv_draw_map+0x2ec>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c6d4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  40c6d6:	0078      	lsls	r0, r7, #1
  40c6d8:	4c51      	ldr	r4, [pc, #324]	; (40c820 <lv_draw_map+0x2e0>)
  40c6da:	47a0      	blx	r4
  40c6dc:	900b      	str	r0, [sp, #44]	; 0x2c
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c6de:	4638      	mov	r0, r7
  40c6e0:	47a0      	blx	r4
  40c6e2:	4682      	mov	sl, r0

#if LV_USE_IMG_TRANSFORM
            lv_img_transform_dsc_t trans_dsc;
            _lv_memset_00(&trans_dsc, sizeof(lv_img_transform_dsc_t));
  40c6e4:	214c      	movs	r1, #76	; 0x4c
  40c6e6:	a827      	add	r0, sp, #156	; 0x9c
  40c6e8:	4b4e      	ldr	r3, [pc, #312]	; (40c824 <lv_draw_map+0x2e4>)
  40c6ea:	4798      	blx	r3
            if(transform) {
  40c6ec:	9b06      	ldr	r3, [sp, #24]
  40c6ee:	2b00      	cmp	r3, #0
  40c6f0:	f000 80ca 	beq.w	40c888 <lv_draw_map+0x348>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c6f4:	9b08      	ldr	r3, [sp, #32]
  40c6f6:	2b00      	cmp	r3, #0
  40c6f8:	f040 809d 	bne.w	40c836 <lv_draw_map+0x2f6>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c6fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c6fe:	2b00      	cmp	r3, #0
  40c700:	f040 80f3 	bne.w	40c8ea <lv_draw_map+0x3aa>
                lv_img_cf_t cf = LV_IMG_CF_TRUE_COLOR;
  40c704:	2204      	movs	r2, #4
  40c706:	e097      	b.n	40c838 <lv_draw_map+0x2f8>
        bool transform = draw_dsc->angle != 0 || draw_dsc->zoom != LV_IMG_ZOOM_NONE ? true : false;
  40c708:	2300      	movs	r3, #0
  40c70a:	e7c7      	b.n	40c69c <lv_draw_map+0x15c>
            uint32_t hor_res = (uint32_t) lv_disp_get_hor_res(disp);
  40c70c:	4640      	mov	r0, r8
  40c70e:	4b42      	ldr	r3, [pc, #264]	; (40c818 <lv_draw_map+0x2d8>)
  40c710:	4798      	blx	r3
  40c712:	4604      	mov	r4, r0
  40c714:	4680      	mov	r8, r0
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c716:	a83a      	add	r0, sp, #232	; 0xe8
  40c718:	4b40      	ldr	r3, [pc, #256]	; (40c81c <lv_draw_map+0x2dc>)
  40c71a:	4798      	blx	r3
  40c71c:	4284      	cmp	r4, r0
  40c71e:	d20e      	bcs.n	40c73e <lv_draw_map+0x1fe>
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40c720:	ea4f 0048 	mov.w	r0, r8, lsl #1
  40c724:	4c3e      	ldr	r4, [pc, #248]	; (40c820 <lv_draw_map+0x2e0>)
  40c726:	47a0      	blx	r4
  40c728:	4605      	mov	r5, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40c72a:	4640      	mov	r0, r8
  40c72c:	47a0      	blx	r4
  40c72e:	4604      	mov	r4, r0
            for(y = 0; y < draw_area_h; y++) {
  40c730:	2600      	movs	r6, #0
        uint32_t px_i = 0;
  40c732:	4632      	mov	r2, r6
  40c734:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
  40c738:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
            for(y = 0; y < draw_area_h; y++) {
  40c73c:	e02b      	b.n	40c796 <lv_draw_map+0x256>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > (uint32_t) hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c73e:	a83a      	add	r0, sp, #232	; 0xe8
  40c740:	4b36      	ldr	r3, [pc, #216]	; (40c81c <lv_draw_map+0x2dc>)
  40c742:	4798      	blx	r3
  40c744:	4680      	mov	r8, r0
  40c746:	e7eb      	b.n	40c720 <lv_draw_map+0x1e0>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40c748:	3101      	adds	r1, #1
  40c74a:	443b      	add	r3, r7
  40c74c:	3201      	adds	r2, #1
  40c74e:	4549      	cmp	r1, r9
  40c750:	da0b      	bge.n	40c76a <lv_draw_map+0x22a>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40c752:	7898      	ldrb	r0, [r3, #2]
                    mask_buf[px_i] = px_opa;
  40c754:	54a0      	strb	r0, [r4, r2]
                    if(px_opa) {
  40c756:	2800      	cmp	r0, #0
  40c758:	d0f6      	beq.n	40c748 <lv_draw_map+0x208>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
  40c75a:	7818      	ldrb	r0, [r3, #0]
  40c75c:	f893 e001 	ldrb.w	lr, [r3, #1]
  40c760:	eb00 200e 	add.w	r0, r0, lr, lsl #8
  40c764:	f825 0012 	strh.w	r0, [r5, r2, lsl #1]
  40c768:	e7ee      	b.n	40c748 <lv_draw_map+0x208>
  40c76a:	9707      	str	r7, [sp, #28]
                map_buf_tmp += map_w * px_size_byte;
  40c76c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40c76e:	991a      	ldr	r1, [sp, #104]	; 0x68
  40c770:	fb01 aa03 	mla	sl, r1, r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40c774:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40c778:	f8bd 10e8 	ldrh.w	r1, [sp, #232]	; 0xe8
  40c77c:	1a5b      	subs	r3, r3, r1
  40c77e:	b29b      	uxth	r3, r3
  40c780:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40c782:	fa02 f383 	sxtah	r3, r2, r3
  40c786:	4598      	cmp	r8, r3
  40c788:	d90b      	bls.n	40c7a2 <lv_draw_map+0x262>
                    blend_area.y2 ++;
  40c78a:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c78e:	3301      	adds	r3, #1
  40c790:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
            for(y = 0; y < draw_area_h; y++) {
  40c794:	3601      	adds	r6, #1
  40c796:	455e      	cmp	r6, fp
  40c798:	da1a      	bge.n	40c7d0 <lv_draw_map+0x290>
  40c79a:	4653      	mov	r3, sl
  40c79c:	2100      	movs	r1, #0
  40c79e:	9f07      	ldr	r7, [sp, #28]
  40c7a0:	e7d5      	b.n	40c74e <lv_draw_map+0x20e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c7a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c7a4:	7b93      	ldrb	r3, [r2, #14]
  40c7a6:	9302      	str	r3, [sp, #8]
  40c7a8:	7813      	ldrb	r3, [r2, #0]
  40c7aa:	9301      	str	r3, [sp, #4]
  40c7ac:	2302      	movs	r3, #2
  40c7ae:	9300      	str	r3, [sp, #0]
  40c7b0:	4623      	mov	r3, r4
  40c7b2:	462a      	mov	r2, r5
  40c7b4:	a925      	add	r1, sp, #148	; 0x94
  40c7b6:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c7b8:	4f16      	ldr	r7, [pc, #88]	; (40c814 <lv_draw_map+0x2d4>)
  40c7ba:	47b8      	blx	r7
                    blend_area.y1 = blend_area.y2 + 1;
  40c7bc:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40c7c0:	3301      	adds	r3, #1
  40c7c2:	b21b      	sxth	r3, r3
  40c7c4:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40c7c8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                    px_i = 0;
  40c7cc:	2200      	movs	r2, #0
  40c7ce:	e7e1      	b.n	40c794 <lv_draw_map+0x254>
            if(blend_area.y1 != blend_area.y2) {
  40c7d0:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40c7d4:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40c7d8:	429a      	cmp	r2, r3
  40c7da:	d00f      	beq.n	40c7fc <lv_draw_map+0x2bc>
                blend_area.y2--;
  40c7dc:	3b01      	subs	r3, #1
  40c7de:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
  40c7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c7e4:	7b93      	ldrb	r3, [r2, #14]
  40c7e6:	9302      	str	r3, [sp, #8]
  40c7e8:	7813      	ldrb	r3, [r2, #0]
  40c7ea:	9301      	str	r3, [sp, #4]
  40c7ec:	2302      	movs	r3, #2
  40c7ee:	9300      	str	r3, [sp, #0]
  40c7f0:	4623      	mov	r3, r4
  40c7f2:	462a      	mov	r2, r5
  40c7f4:	a925      	add	r1, sp, #148	; 0x94
  40c7f6:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40c7f8:	4e06      	ldr	r6, [pc, #24]	; (40c814 <lv_draw_map+0x2d4>)
  40c7fa:	47b0      	blx	r6
            _lv_mem_buf_release(mask_buf);
  40c7fc:	4620      	mov	r0, r4
  40c7fe:	4c0a      	ldr	r4, [pc, #40]	; (40c828 <lv_draw_map+0x2e8>)
  40c800:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40c802:	4628      	mov	r0, r5
  40c804:	47a0      	blx	r4
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
  40c806:	e2ae      	b.n	40cd66 <lv_draw_map+0x826>
  40c808:	00409269 	.word	0x00409269
  40c80c:	00414735 	.word	0x00414735
  40c810:	0040f625 	.word	0x0040f625
  40c814:	0040c421 	.word	0x0040c421
  40c818:	00414631 	.word	0x00414631
  40c81c:	00414ed7 	.word	0x00414ed7
  40c820:	00416269 	.word	0x00416269
  40c824:	004163f5 	.word	0x004163f5
  40c828:	00416019 	.word	0x00416019
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > hor_res ? hor_res : lv_area_get_size(&draw_area);
  40c82c:	a83a      	add	r0, sp, #232	; 0xe8
  40c82e:	4bb6      	ldr	r3, [pc, #728]	; (40cb08 <lv_draw_map+0x5c8>)
  40c830:	4798      	blx	r3
  40c832:	9017      	str	r0, [sp, #92]	; 0x5c
  40c834:	e74e      	b.n	40c6d4 <lv_draw_map+0x194>
                if(alpha_byte) cf = LV_IMG_CF_TRUE_COLOR_ALPHA;
  40c836:	2205      	movs	r2, #5

                trans_dsc.cfg.angle = draw_dsc->angle;
  40c838:	980a      	ldr	r0, [sp, #40]	; 0x28
  40c83a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40c83e:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
                trans_dsc.cfg.zoom = draw_dsc->zoom;
  40c842:	8903      	ldrh	r3, [r0, #8]
  40c844:	f8ad 30aa 	strh.w	r3, [sp, #170]	; 0xaa
                trans_dsc.cfg.src = map_p;
  40c848:	9627      	str	r6, [sp, #156]	; 0x9c
                trans_dsc.cfg.src_w = map_w;
  40c84a:	f8ad 50a0 	strh.w	r5, [sp, #160]	; 0xa0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40c84e:	9916      	ldr	r1, [sp, #88]	; 0x58
  40c850:	88cb      	ldrh	r3, [r1, #6]
  40c852:	8849      	ldrh	r1, [r1, #2]
  40c854:	1a5b      	subs	r3, r3, r1
  40c856:	b29b      	uxth	r3, r3
  40c858:	3301      	adds	r3, #1
                trans_dsc.cfg.src_h = lv_area_get_height(map_area);;
  40c85a:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
                trans_dsc.cfg.cf = cf;
  40c85e:	f88d 20ae 	strb.w	r2, [sp, #174]	; 0xae
                trans_dsc.cfg.pivot_x = draw_dsc->pivot.x;
  40c862:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  40c866:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
                trans_dsc.cfg.pivot_y = draw_dsc->pivot.y;
  40c86a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  40c86e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
                trans_dsc.cfg.color = draw_dsc->recolor;
  40c872:	8983      	ldrh	r3, [r0, #12]
  40c874:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
                trans_dsc.cfg.antialias = draw_dsc->antialias;
  40c878:	7bc3      	ldrb	r3, [r0, #15]
  40c87a:	f3c3 0300 	ubfx	r3, r3, #0, #1
  40c87e:	f88d 30af 	strb.w	r3, [sp, #175]	; 0xaf

                _lv_img_buf_transform_init(&trans_dsc);
  40c882:	a827      	add	r0, sp, #156	; 0x9c
  40c884:	4ba1      	ldr	r3, [pc, #644]	; (40cb0c <lv_draw_map+0x5cc>)
  40c886:	4798      	blx	r3
            }
#endif
            uint16_t recolor_premult[3] = {0};
  40c888:	2300      	movs	r3, #0
  40c88a:	9323      	str	r3, [sp, #140]	; 0x8c
  40c88c:	f8ad 3090 	strh.w	r3, [sp, #144]	; 0x90
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
  40c890:	990a      	ldr	r1, [sp, #40]	; 0x28
  40c892:	7a8a      	ldrb	r2, [r1, #10]
  40c894:	43d3      	mvns	r3, r2
  40c896:	b2db      	uxtb	r3, r3
  40c898:	9310      	str	r3, [sp, #64]	; 0x40
            if(draw_dsc->recolor_opa != 0) {
  40c89a:	b1ba      	cbz	r2, 40c8cc <lv_draw_map+0x38c>
  40c89c:	898b      	ldrh	r3, [r1, #12]
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
  40c89e:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  40c8a2:	b292      	uxth	r2, r2
  40c8a4:	fb01 f102 	mul.w	r1, r1, r2
  40c8a8:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
  40c8ac:	f003 0007 	and.w	r0, r3, #7
  40c8b0:	f3c3 3142 	ubfx	r1, r3, #13, #3
  40c8b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
  40c8b8:	fb12 f101 	smulbb	r1, r2, r1
  40c8bc:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
  40c8c0:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40c8c4:	fb02 f203 	mul.w	r2, r2, r3
  40c8c8:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
                lv_color_premult(draw_dsc->recolor, draw_dsc->recolor_opa, recolor_premult);
            }

            lv_draw_mask_res_t mask_res;
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c8cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40c8ce:	9a08      	ldr	r2, [sp, #32]
  40c8d0:	4313      	orrs	r3, r2
  40c8d2:	9321      	str	r3, [sp, #132]	; 0x84
  40c8d4:	d10b      	bne.n	40c8ee <lv_draw_map+0x3ae>
  40c8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40c8d8:	8853      	ldrh	r3, [r2, #2]
  40c8da:	b9f3      	cbnz	r3, 40c91a <lv_draw_map+0x3da>
                        draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40c8dc:	8913      	ldrh	r3, [r2, #8]
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40c8e2:	d01d      	beq.n	40c920 <lv_draw_map+0x3e0>
  40c8e4:	2302      	movs	r3, #2
  40c8e6:	931b      	str	r3, [sp, #108]	; 0x6c
  40c8e8:	e003      	b.n	40c8f2 <lv_draw_map+0x3b2>
                else if(chroma_key) cf = LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED;
  40c8ea:	2206      	movs	r2, #6
  40c8ec:	e7a4      	b.n	40c838 <lv_draw_map+0x2f8>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c8ee:	2302      	movs	r3, #2
  40c8f0:	931b      	str	r3, [sp, #108]	; 0x6c

            /*Prepare the `mask_buf`if there are other masks*/
            if(other_mask_cnt) {
  40c8f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40c8f4:	b9bb      	cbnz	r3, 40c926 <lv_draw_map+0x3e6>
            }

            int32_t x;
            int32_t y;
#if LV_USE_IMG_TRANSFORM
            int32_t rot_y = disp_area->y1 + draw_area.y1 - map_area->y1;
  40c8f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40c8f8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
  40c8fc:	f9bd 20ea 	ldrsh.w	r2, [sp, #234]	; 0xea
  40c900:	4413      	add	r3, r2
  40c902:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40c904:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
  40c908:	1a9b      	subs	r3, r3, r2
  40c90a:	9312      	str	r3, [sp, #72]	; 0x48
#endif
            for(y = 0; y < draw_area_h; y++) {
  40c90c:	2300      	movs	r3, #0
  40c90e:	930c      	str	r3, [sp, #48]	; 0x30
        uint32_t px_i = 0;
  40c910:	9313      	str	r3, [sp, #76]	; 0x4c
  40c912:	4657      	mov	r7, sl
  40c914:	f8cd 9014 	str.w	r9, [sp, #20]
            for(y = 0; y < draw_area_h; y++) {
  40c918:	e192      	b.n	40cc40 <lv_draw_map+0x700>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40c91a:	2302      	movs	r3, #2
  40c91c:	931b      	str	r3, [sp, #108]	; 0x6c
  40c91e:	e7e8      	b.n	40c8f2 <lv_draw_map+0x3b2>
  40c920:	2301      	movs	r3, #1
  40c922:	931b      	str	r3, [sp, #108]	; 0x6c
  40c924:	e7e5      	b.n	40c8f2 <lv_draw_map+0x3b2>
                _lv_memset_ff(mask_buf, mask_buf_size);
  40c926:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40c928:	4650      	mov	r0, sl
  40c92a:	4b79      	ldr	r3, [pc, #484]	; (40cb10 <lv_draw_map+0x5d0>)
  40c92c:	4798      	blx	r3
  40c92e:	e7e2      	b.n	40c8f6 <lv_draw_map+0x3b6>
#if LV_USE_IMG_TRANSFORM
                    if(transform) {

                        /*Transform*/
                        bool ret;
                        ret = _lv_img_buf_transform(&trans_dsc, rot_x + x, rot_y + y);
  40c930:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40c932:	4443      	add	r3, r8
  40c934:	b21b      	sxth	r3, r3
  40c936:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40c938:	990c      	ldr	r1, [sp, #48]	; 0x30
  40c93a:	440a      	add	r2, r1
  40c93c:	b212      	sxth	r2, r2
 * @return true: there is valid pixel on these x/y coordinates; false: the rotated pixel was out of the image
 * @note the result is written back to `dsc->res_color` and `dsc->res_opa`
 */
static inline bool _lv_img_buf_transform(lv_img_transform_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
    const uint8_t * src_u8 = (const uint8_t *)dsc->cfg.src;
  40c93e:	9927      	ldr	r1, [sp, #156]	; 0x9c

    /*Get the target point relative coordinates to the pivot*/
    int32_t xt = x - dsc->cfg.pivot_x;
  40c940:	f9bd 40a4 	ldrsh.w	r4, [sp, #164]	; 0xa4
  40c944:	1b1b      	subs	r3, r3, r4
    int32_t yt = y - dsc->cfg.pivot_y;
  40c946:	f9bd 40a6 	ldrsh.w	r4, [sp, #166]	; 0xa6
  40c94a:	1b12      	subs	r2, r2, r4

    int32_t xs;
    int32_t ys;
    if(dsc->cfg.zoom == LV_IMG_ZOOM_NONE) {
  40c94c:	f8bd 00aa 	ldrh.w	r0, [sp, #170]	; 0xaa
  40c950:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  40c954:	d035      	beq.n	40c9c2 <lv_draw_map+0x482>
        /*Get the source pixel from the upscaled image*/
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
    }
    else if(dsc->cfg.angle == 0) {
  40c956:	f9bd 00a8 	ldrsh.w	r0, [sp, #168]	; 0xa8
  40c95a:	2800      	cmp	r0, #0
  40c95c:	d143      	bne.n	40c9e6 <lv_draw_map+0x4a6>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c95e:	9835      	ldr	r0, [sp, #212]	; 0xd4
  40c960:	fb03 f300 	mul.w	r3, r3, r0
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c964:	fb02 f200 	mul.w	r2, r2, r0
        xs = xt + dsc->tmp.pivot_x_256;
  40c968:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c96a:	eb00 1663 	add.w	r6, r0, r3, asr #5
        ys = yt + dsc->tmp.pivot_y_256;
  40c96e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40c970:	eb04 1362 	add.w	r3, r4, r2, asr #5
  40c974:	9309      	str	r3, [sp, #36]	; 0x24
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
    }

    /*Get the integer part of the source pixel*/
    int32_t xs_int = xs >> 8;
  40c976:	1235      	asrs	r5, r6, #8
    int32_t ys_int = ys >> 8;
  40c978:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40c97a:	121b      	asrs	r3, r3, #8
  40c97c:	461c      	mov	r4, r3
  40c97e:	930f      	str	r3, [sp, #60]	; 0x3c

    if(xs_int >= dsc->cfg.src_w) return false;
  40c980:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
  40c984:	429d      	cmp	r5, r3
  40c986:	f280 80b3 	bge.w	40caf0 <lv_draw_map+0x5b0>
    else if(xs_int < 0) return false;
  40c98a:	2d00      	cmp	r5, #0
  40c98c:	f2c0 80b6 	blt.w	40cafc <lv_draw_map+0x5bc>

    if(ys_int >= dsc->cfg.src_h) return false;
  40c990:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
  40c994:	4294      	cmp	r4, r2
  40c996:	f280 80b3 	bge.w	40cb00 <lv_draw_map+0x5c0>
    else if(ys_int < 0) return false;
  40c99a:	2c00      	cmp	r4, #0
  40c99c:	f2c0 80b2 	blt.w	40cb04 <lv_draw_map+0x5c4>

    uint8_t px_size;
    uint32_t pxi;
    if(dsc->tmp.native_color) {
  40c9a0:	f89d 20d0 	ldrb.w	r2, [sp, #208]	; 0xd0
  40c9a4:	f012 0f04 	tst.w	r2, #4
  40c9a8:	d075      	beq.n	40ca96 <lv_draw_map+0x556>
        if(dsc->tmp.has_alpha == 0) {
  40c9aa:	f012 0f02 	tst.w	r2, #2
  40c9ae:	d157      	bne.n	40ca60 <lv_draw_map+0x520>
            px_size = LV_COLOR_SIZE >> 3;

            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40c9b0:	fb03 5304 	mla	r3, r3, r4, r5
  40c9b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size);
  40c9b8:	4461      	add	r1, ip
    uint8_t * d8 = (uint8_t *)dst;
  40c9ba:	aa2c      	add	r2, sp, #176	; 0xb0
  40c9bc:	2302      	movs	r3, #2
  40c9be:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40c9c0:	e02f      	b.n	40ca22 <lv_draw_map+0x4e2>
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_x_256;
  40c9c2:	9d33      	ldr	r5, [sp, #204]	; 0xcc
  40c9c4:	fb05 f603 	mul.w	r6, r5, r3
  40c9c8:	9c32      	ldr	r4, [sp, #200]	; 0xc8
  40c9ca:	fb04 6612 	mls	r6, r4, r2, r6
  40c9ce:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40c9d0:	eb00 06a6 	add.w	r6, r0, r6, asr #2
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT - 8)) + dsc->tmp.pivot_y_256;
  40c9d4:	fb05 f202 	mul.w	r2, r5, r2
  40c9d8:	fb04 2403 	mla	r4, r4, r3, r2
  40c9dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
  40c9de:	eb03 03a4 	add.w	r3, r3, r4, asr #2
  40c9e2:	9309      	str	r3, [sp, #36]	; 0x24
  40c9e4:	e7c7      	b.n	40c976 <lv_draw_map+0x436>
        xt = (int32_t)((int32_t)xt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c9e6:	9c35      	ldr	r4, [sp, #212]	; 0xd4
  40c9e8:	fb03 f304 	mul.w	r3, r3, r4
  40c9ec:	115b      	asrs	r3, r3, #5
        yt = (int32_t)((int32_t)yt * dsc->tmp.zoom_inv) >> _LV_ZOOM_INV_UPSCALE;
  40c9ee:	fb02 f204 	mul.w	r2, r2, r4
  40c9f2:	1152      	asrs	r2, r2, #5
        xs = ((dsc->tmp.cosma * xt - dsc->tmp.sinma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_x_256;
  40c9f4:	9c33      	ldr	r4, [sp, #204]	; 0xcc
  40c9f6:	fb04 f603 	mul.w	r6, r4, r3
  40c9fa:	9d32      	ldr	r5, [sp, #200]	; 0xc8
  40c9fc:	fb05 6612 	mls	r6, r5, r2, r6
  40ca00:	9830      	ldr	r0, [sp, #192]	; 0xc0
  40ca02:	eb00 26a6 	add.w	r6, r0, r6, asr #10
        ys = ((dsc->tmp.sinma * xt + dsc->tmp.cosma * yt) >> (_LV_TRANSFORM_TRIGO_SHIFT)) + dsc->tmp.pivot_y_256;
  40ca06:	fb04 f402 	mul.w	r4, r4, r2
  40ca0a:	fb05 4303 	mla	r3, r5, r3, r4
  40ca0e:	9c31      	ldr	r4, [sp, #196]	; 0xc4
  40ca10:	eb04 23a3 	add.w	r3, r4, r3, asr #10
  40ca14:	9309      	str	r3, [sp, #36]	; 0x24
  40ca16:	e7ae      	b.n	40c976 <lv_draw_map+0x436>
        *d8 = *s8;
  40ca18:	f811 0b01 	ldrb.w	r0, [r1], #1
  40ca1c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ca20:	3b01      	subs	r3, #1
    while(len) {
  40ca22:	2b00      	cmp	r3, #0
  40ca24:	d1f8      	bne.n	40ca18 <lv_draw_map+0x4d8>
  40ca26:	9409      	str	r4, [sp, #36]	; 0x24
            px_size = LV_COLOR_SIZE >> 3;
  40ca28:	2202      	movs	r2, #2
        px_size = 0;    /*unused*/
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
    }

    if(dsc->tmp.chroma_keyed) {
  40ca2a:	f89d 30d0 	ldrb.w	r3, [sp, #208]	; 0xd0
  40ca2e:	f013 0f01 	tst.w	r3, #1
  40ca32:	d00f      	beq.n	40ca54 <lv_draw_map+0x514>
        lv_color_t ct = LV_COLOR_TRANSP;
  40ca34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  40ca36:	f043 0307 	orr.w	r3, r3, #7
  40ca3a:	f36f 03c7 	bfc	r3, #3, #5
  40ca3e:	f36f 230c 	bfc	r3, #8, #5
  40ca42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
  40ca46:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
        if(dsc->res.color.full == ct.full) return false;
  40ca4a:	f8bd 10b0 	ldrh.w	r1, [sp, #176]	; 0xb0
  40ca4e:	b29b      	uxth	r3, r3
  40ca50:	4299      	cmp	r1, r3
  40ca52:	d037      	beq.n	40cac4 <lv_draw_map+0x584>
    }

    if(dsc->cfg.antialias == false) return true;
  40ca54:	f89d 30af 	ldrb.w	r3, [sp, #175]	; 0xaf
  40ca58:	2b00      	cmp	r3, #0
  40ca5a:	d135      	bne.n	40cac8 <lv_draw_map+0x588>
  40ca5c:	9806      	ldr	r0, [sp, #24]
  40ca5e:	e048      	b.n	40caf2 <lv_draw_map+0x5b2>
            pxi     = dsc->cfg.src_w * ys_int * px_size + xs_int * px_size;
  40ca60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40ca62:	fb03 5302 	mla	r3, r3, r2, r5
  40ca66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40ca6a:	931e      	str	r3, [sp, #120]	; 0x78
  40ca6c:	469c      	mov	ip, r3
            _lv_memcpy_small(&dsc->res.color, &src_u8[pxi], px_size - 1);
  40ca6e:	18cb      	adds	r3, r1, r3
    uint8_t * d8 = (uint8_t *)dst;
  40ca70:	a82c      	add	r0, sp, #176	; 0xb0
  40ca72:	2202      	movs	r2, #2
  40ca74:	9c09      	ldr	r4, [sp, #36]	; 0x24
  40ca76:	e004      	b.n	40ca82 <lv_draw_map+0x542>
        *d8 = *s8;
  40ca78:	f813 eb01 	ldrb.w	lr, [r3], #1
  40ca7c:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  40ca80:	3a01      	subs	r2, #1
    while(len) {
  40ca82:	2a00      	cmp	r2, #0
  40ca84:	d1f8      	bne.n	40ca78 <lv_draw_map+0x538>
  40ca86:	9409      	str	r4, [sp, #36]	; 0x24
            dsc->res.opa = src_u8[pxi + px_size - 1];
  40ca88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
  40ca8a:	4419      	add	r1, r3
  40ca8c:	788b      	ldrb	r3, [r1, #2]
  40ca8e:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE;
  40ca92:	2203      	movs	r2, #3
  40ca94:	e7c9      	b.n	40ca2a <lv_draw_map+0x4ea>
        dsc->res.color = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, xs_int, ys_int, dsc->cfg.color);
  40ca96:	b229      	sxth	r1, r5
  40ca98:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  40ca9c:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
  40caa0:	9220      	str	r2, [sp, #128]	; 0x80
  40caa2:	911e      	str	r1, [sp, #120]	; 0x78
  40caa4:	a82d      	add	r0, sp, #180	; 0xb4
  40caa6:	4c1b      	ldr	r4, [pc, #108]	; (40cb14 <lv_draw_map+0x5d4>)
  40caa8:	47a0      	blx	r4
  40caaa:	f8ad 00b0 	strh.w	r0, [sp, #176]	; 0xb0
        dsc->res.opa = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, xs_int, ys_int);
  40caae:	9a20      	ldr	r2, [sp, #128]	; 0x80
  40cab0:	991e      	ldr	r1, [sp, #120]	; 0x78
  40cab2:	a82d      	add	r0, sp, #180	; 0xb4
  40cab4:	4b18      	ldr	r3, [pc, #96]	; (40cb18 <lv_draw_map+0x5d8>)
  40cab6:	4798      	blx	r3
  40cab8:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
        pxi = 0; /*unused*/
  40cabc:	f04f 0c00 	mov.w	ip, #0
        px_size = 0;    /*unused*/
  40cac0:	4662      	mov	r2, ip
  40cac2:	e7b2      	b.n	40ca2a <lv_draw_map+0x4ea>
        if(dsc->res.color.full == ct.full) return false;
  40cac4:	2000      	movs	r0, #0
  40cac6:	e014      	b.n	40caf2 <lv_draw_map+0x5b2>

    dsc->tmp.xs = xs;
  40cac8:	f8ad 60d8 	strh.w	r6, [sp, #216]	; 0xd8
    dsc->tmp.ys = ys;
  40cacc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40cad0:	f8ad 30da 	strh.w	r3, [sp, #218]	; 0xda
    dsc->tmp.xs_int = xs_int;
  40cad4:	f8ad 50dc 	strh.w	r5, [sp, #220]	; 0xdc
    dsc->tmp.ys_int = ys_int;
  40cad8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  40cadc:	f8ad 30de 	strh.w	r3, [sp, #222]	; 0xde
    dsc->tmp.pxi = pxi;
  40cae0:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
    dsc->tmp.px_size = px_size;
  40cae4:	f88d 20e4 	strb.w	r2, [sp, #228]	; 0xe4

    bool ret;
    ret = _lv_img_buf_transform_anti_alias(dsc);
  40cae8:	a827      	add	r0, sp, #156	; 0x9c
  40caea:	4b0c      	ldr	r3, [pc, #48]	; (40cb1c <lv_draw_map+0x5dc>)
  40caec:	4798      	blx	r3
  40caee:	e000      	b.n	40caf2 <lv_draw_map+0x5b2>
    if(xs_int >= dsc->cfg.src_w) return false;
  40caf0:	2000      	movs	r0, #0
                        if(ret == false) {
  40caf2:	b9b8      	cbnz	r0, 40cb24 <lv_draw_map+0x5e4>
                            mask_buf[px_i] = LV_OPA_TRANSP;
  40caf4:	2300      	movs	r3, #0
  40caf6:	f807 3009 	strb.w	r3, [r7, r9]
                            continue;
  40cafa:	e068      	b.n	40cbce <lv_draw_map+0x68e>
    else if(xs_int < 0) return false;
  40cafc:	2000      	movs	r0, #0
  40cafe:	e7f8      	b.n	40caf2 <lv_draw_map+0x5b2>
    if(ys_int >= dsc->cfg.src_h) return false;
  40cb00:	2000      	movs	r0, #0
  40cb02:	e7f6      	b.n	40caf2 <lv_draw_map+0x5b2>
    else if(ys_int < 0) return false;
  40cb04:	2000      	movs	r0, #0
  40cb06:	e7f4      	b.n	40caf2 <lv_draw_map+0x5b2>
  40cb08:	00414ed7 	.word	0x00414ed7
  40cb0c:	00412081 	.word	0x00412081
  40cb10:	0041644d 	.word	0x0041644d
  40cb14:	00411e61 	.word	0x00411e61
  40cb18:	00411f85 	.word	0x00411f85
  40cb1c:	00412395 	.word	0x00412395
  40cb20:	0000e007 	.word	0x0000e007
                        }
                        else {
                            mask_buf[px_i] = trans_dsc.res.opa;
  40cb24:	f89d 30b2 	ldrb.w	r3, [sp, #178]	; 0xb2
  40cb28:	f807 3009 	strb.w	r3, [r7, r9]
                            c.full = trans_dsc.res.color.full;
  40cb2c:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
  40cb30:	e010      	b.n	40cb54 <lv_draw_map+0x614>
#endif
                                continue;
                            }
                        }
                        else {
                            mask_buf[px_i] = 0xFF;
  40cb32:	23ff      	movs	r3, #255	; 0xff
  40cb34:	f807 3009 	strb.w	r3, [r7, r9]
#if LV_COLOR_DEPTH == 1
                        c.full = map_px[0];
#elif LV_COLOR_DEPTH == 8
                        c.full =  map_px[0];
#elif LV_COLOR_DEPTH == 16
                        c.full =  map_px[0] + (map_px[1] << 8);
  40cb38:	f89a 2000 	ldrb.w	r2, [sl]
  40cb3c:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40cb40:	eb02 2203 	add.w	r2, r2, r3, lsl #8
  40cb44:	b292      	uxth	r2, r2
  40cb46:	4613      	mov	r3, r2
#elif LV_COLOR_DEPTH == 32
                        c.full =  *((uint32_t *)map_px);
                        c.ch.alpha = 0xFF;
#endif
                        if(chroma_key) {
  40cb48:	990d      	ldr	r1, [sp, #52]	; 0x34
  40cb4a:	b119      	cbz	r1, 40cb54 <lv_draw_map+0x614>
                            if(c.full == chroma_keyed_color.full) {
  40cb4c:	f83f 1030 	ldrh.w	r1, [pc, #-48]	; 40cb20 <lv_draw_map+0x5e0>
  40cb50:	428a      	cmp	r2, r1
  40cb52:	d053      	beq.n	40cbfc <lv_draw_map+0x6bc>
                                continue;
                            }
                        }
                    }

                    if(draw_dsc->recolor_opa != 0) {
  40cb54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cb56:	7a92      	ldrb	r2, [r2, #10]
  40cb58:	b3b2      	cbz	r2, 40cbc8 <lv_draw_map+0x688>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255(premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40cb5a:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
  40cb5e:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  40cb62:	9c10      	ldr	r4, [sp, #64]	; 0x40
  40cb64:	fb04 1202 	mla	r2, r4, r2, r1
  40cb68:	3280      	adds	r2, #128	; 0x80
  40cb6a:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40cb6e:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40cb72:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  40cb76:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255(premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40cb7a:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  40cb7e:	f003 0007 	and.w	r0, r3, #7
  40cb82:	f3c3 3242 	ubfx	r2, r3, #13, #3
  40cb86:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
  40cb8a:	fb02 1204 	mla	r2, r2, r4, r1
  40cb8e:	3280      	adds	r2, #128	; 0x80
  40cb90:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  40cb94:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  40cb98:	f3c2 6182 	ubfx	r1, r2, #26, #3
  40cb9c:	f361 0b02 	bfi	fp, r1, #0, #3
  40cba0:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  40cba4:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255(premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
  40cba8:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
  40cbac:	f3c3 2304 	ubfx	r3, r3, #8, #5
  40cbb0:	fb03 2304 	mla	r3, r3, r4, r2
  40cbb4:	3380      	adds	r3, #128	; 0x80
  40cbb6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40cbba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40cbbe:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  40cbc2:	f363 2b0c 	bfi	fp, r3, #8, #5
  40cbc6:	465b      	mov	r3, fp
                        c = lv_color_mix_premult(recolor_premult, c, recolor_opa_inv);
                    }

                    map2[px_i].full = c.full;
  40cbc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cbca:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40cbce:	f108 0801 	add.w	r8, r8, #1
  40cbd2:	9b07      	ldr	r3, [sp, #28]
  40cbd4:	449a      	add	sl, r3
  40cbd6:	f109 0901 	add.w	r9, r9, #1
  40cbda:	9b05      	ldr	r3, [sp, #20]
  40cbdc:	4598      	cmp	r8, r3
  40cbde:	da11      	bge.n	40cc04 <lv_draw_map+0x6c4>
                    if(transform) {
  40cbe0:	9b06      	ldr	r3, [sp, #24]
  40cbe2:	2b00      	cmp	r3, #0
  40cbe4:	f47f aea4 	bne.w	40c930 <lv_draw_map+0x3f0>
                        if(alpha_byte) {
  40cbe8:	9b08      	ldr	r3, [sp, #32]
  40cbea:	2b00      	cmp	r3, #0
  40cbec:	d0a1      	beq.n	40cb32 <lv_draw_map+0x5f2>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  40cbee:	f89a 3002 	ldrb.w	r3, [sl, #2]
                            mask_buf[px_i] = px_opa;
  40cbf2:	f807 3009 	strb.w	r3, [r7, r9]
                            if(px_opa == 0) {
  40cbf6:	2b00      	cmp	r3, #0
  40cbf8:	d0e9      	beq.n	40cbce <lv_draw_map+0x68e>
  40cbfa:	e79d      	b.n	40cb38 <lv_draw_map+0x5f8>
                                mask_buf[px_i] = LV_OPA_TRANSP;
  40cbfc:	2300      	movs	r3, #0
  40cbfe:	f807 3009 	strb.w	r3, [r7, r9]
                                continue;
  40cc02:	e7e4      	b.n	40cbce <lv_draw_map+0x68e>
                }

                /*Apply the masks if any*/
                if(other_mask_cnt) {
  40cc04:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cc06:	bb8b      	cbnz	r3, 40cc6c <lv_draw_map+0x72c>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
                    }
                }

                map_buf_tmp += map_w * px_size_byte;
  40cc08:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40cc0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40cc0c:	9911      	ldr	r1, [sp, #68]	; 0x44
  40cc0e:	fb02 1303 	mla	r3, r2, r3, r1
  40cc12:	9311      	str	r3, [sp, #68]	; 0x44
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cc14:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cc18:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40cc1c:	1a9b      	subs	r3, r3, r2
  40cc1e:	b29b      	uxth	r3, r3
  40cc20:	3301      	adds	r3, #1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
  40cc22:	fa09 f383 	sxtah	r3, r9, r3
  40cc26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
  40cc28:	429a      	cmp	r2, r3
  40cc2a:	d94c      	bls.n	40ccc6 <lv_draw_map+0x786>
                    blend_area.y2 ++;
  40cc2c:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cc30:	3301      	adds	r3, #1
  40cc32:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  40cc36:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
            for(y = 0; y < draw_area_h; y++) {
  40cc3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cc3c:	3301      	adds	r3, #1
  40cc3e:	930c      	str	r3, [sp, #48]	; 0x30
  40cc40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cc42:	9a18      	ldr	r2, [sp, #96]	; 0x60
  40cc44:	4293      	cmp	r3, r2
  40cc46:	da72      	bge.n	40cd2e <lv_draw_map+0x7ee>
                int32_t rot_x = disp_area->x1 + draw_area.x1 - map_area->x1;
  40cc48:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40cc4a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
  40cc4e:	f9bd 20e8 	ldrsh.w	r2, [sp, #232]	; 0xe8
  40cc52:	4413      	add	r3, r2
  40cc54:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40cc56:	f9b2 2000 	ldrsh.w	r2, [r2]
  40cc5a:	1a9b      	subs	r3, r3, r2
  40cc5c:	930e      	str	r3, [sp, #56]	; 0x38
                map_px = map_buf_tmp;
  40cc5e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
  40cc62:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
  40cc66:	f04f 0800 	mov.w	r8, #0
  40cc6a:	e7b6      	b.n	40cbda <lv_draw_map+0x69a>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
  40cc6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40cc6e:	443b      	add	r3, r7
  40cc70:	461d      	mov	r5, r3
  40cc72:	f8bd 00e8 	ldrh.w	r0, [sp, #232]	; 0xe8
  40cc76:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40cc78:	8a21      	ldrh	r1, [r4, #16]
  40cc7a:	4401      	add	r1, r0
  40cc7c:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40cc80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40cc82:	441a      	add	r2, r3
  40cc84:	8a63      	ldrh	r3, [r4, #18]
  40cc86:	fa13 f282 	uxtah	r2, r3, r2
  40cc8a:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40cc8e:	1a1b      	subs	r3, r3, r0
  40cc90:	b29b      	uxth	r3, r3
  40cc92:	3301      	adds	r3, #1
  40cc94:	b21b      	sxth	r3, r3
  40cc96:	b212      	sxth	r2, r2
  40cc98:	b209      	sxth	r1, r1
  40cc9a:	4628      	mov	r0, r5
  40cc9c:	4c33      	ldr	r4, [pc, #204]	; (40cd6c <lv_draw_map+0x82c>)
  40cc9e:	47a0      	blx	r4
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
  40cca0:	b118      	cbz	r0, 40ccaa <lv_draw_map+0x76a>
                    else if(mask_res_sub == LV_DRAW_MASK_RES_CHANGED) {
  40cca2:	2802      	cmp	r0, #2
  40cca4:	d1b0      	bne.n	40cc08 <lv_draw_map+0x6c8>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40cca6:	901b      	str	r0, [sp, #108]	; 0x6c
  40cca8:	e7ae      	b.n	40cc08 <lv_draw_map+0x6c8>
  40ccaa:	f8bd 10ec 	ldrh.w	r1, [sp, #236]	; 0xec
  40ccae:	f8bd 30e8 	ldrh.w	r3, [sp, #232]	; 0xe8
  40ccb2:	1ac9      	subs	r1, r1, r3
  40ccb4:	b289      	uxth	r1, r1
  40ccb6:	3101      	adds	r1, #1
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
  40ccb8:	b209      	sxth	r1, r1
  40ccba:	4628      	mov	r0, r5
  40ccbc:	4b2c      	ldr	r3, [pc, #176]	; (40cd70 <lv_draw_map+0x830>)
  40ccbe:	4798      	blx	r3
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ccc0:	2302      	movs	r3, #2
  40ccc2:	931b      	str	r3, [sp, #108]	; 0x6c
  40ccc4:	e7a0      	b.n	40cc08 <lv_draw_map+0x6c8>
                }
                else {

                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40ccc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40ccc8:	7bab      	ldrb	r3, [r5, #14]
  40ccca:	9302      	str	r3, [sp, #8]
  40cccc:	782b      	ldrb	r3, [r5, #0]
  40ccce:	9301      	str	r3, [sp, #4]
  40ccd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40ccd2:	9300      	str	r3, [sp, #0]
  40ccd4:	463b      	mov	r3, r7
  40ccd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40ccd8:	a925      	add	r1, sp, #148	; 0x94
  40ccda:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40ccdc:	4c25      	ldr	r4, [pc, #148]	; (40cd74 <lv_draw_map+0x834>)
  40ccde:	47a0      	blx	r4

                    blend_area.y1 = blend_area.y2 + 1;
  40cce0:	f8bd 309a 	ldrh.w	r3, [sp, #154]	; 0x9a
  40cce4:	3301      	adds	r3, #1
  40cce6:	b21b      	sxth	r3, r3
  40cce8:	f8ad 3096 	strh.w	r3, [sp, #150]	; 0x96
                    blend_area.y2 = blend_area.y1;
  40ccec:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a

                    px_i = 0;
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ccf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
  40ccf2:	b943      	cbnz	r3, 40cd06 <lv_draw_map+0x7c6>
  40ccf4:	886b      	ldrh	r3, [r5, #2]
  40ccf6:	b96b      	cbnz	r3, 40cd14 <lv_draw_map+0x7d4>
                                draw_dsc->zoom != LV_IMG_ZOOM_NONE) ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40ccf8:	892b      	ldrh	r3, [r5, #8]
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40ccfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  40ccfe:	d00c      	beq.n	40cd1a <lv_draw_map+0x7da>
  40cd00:	2302      	movs	r3, #2
  40cd02:	931b      	str	r3, [sp, #108]	; 0x6c
  40cd04:	e001      	b.n	40cd0a <lv_draw_map+0x7ca>
  40cd06:	2302      	movs	r3, #2
  40cd08:	931b      	str	r3, [sp, #108]	; 0x6c

                    /*Prepare the `mask_buf`if there are other masks*/
                    if(other_mask_cnt) {
  40cd0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40cd0c:	b943      	cbnz	r3, 40cd20 <lv_draw_map+0x7e0>
                    px_i = 0;
  40cd0e:	2300      	movs	r3, #0
  40cd10:	9313      	str	r3, [sp, #76]	; 0x4c
  40cd12:	e792      	b.n	40cc3a <lv_draw_map+0x6fa>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
  40cd14:	2302      	movs	r3, #2
  40cd16:	931b      	str	r3, [sp, #108]	; 0x6c
  40cd18:	e7f7      	b.n	40cd0a <lv_draw_map+0x7ca>
  40cd1a:	2301      	movs	r3, #1
  40cd1c:	931b      	str	r3, [sp, #108]	; 0x6c
  40cd1e:	e7f4      	b.n	40cd0a <lv_draw_map+0x7ca>
                        _lv_memset_ff(mask_buf, mask_buf_size);
  40cd20:	9917      	ldr	r1, [sp, #92]	; 0x5c
  40cd22:	4638      	mov	r0, r7
  40cd24:	4b14      	ldr	r3, [pc, #80]	; (40cd78 <lv_draw_map+0x838>)
  40cd26:	4798      	blx	r3
                    px_i = 0;
  40cd28:	2300      	movs	r3, #0
  40cd2a:	9313      	str	r3, [sp, #76]	; 0x4c
  40cd2c:	e785      	b.n	40cc3a <lv_draw_map+0x6fa>
  40cd2e:	46ba      	mov	sl, r7
                    }
                }
            }

            /*Flush the last part*/
            if(blend_area.y1 != blend_area.y2) {
  40cd30:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
  40cd34:	f9bd 309a 	ldrsh.w	r3, [sp, #154]	; 0x9a
  40cd38:	429a      	cmp	r2, r3
  40cd3a:	d00f      	beq.n	40cd5c <lv_draw_map+0x81c>
                blend_area.y2--;
  40cd3c:	3b01      	subs	r3, #1
  40cd3e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
  40cd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40cd44:	7b93      	ldrb	r3, [r2, #14]
  40cd46:	9302      	str	r3, [sp, #8]
  40cd48:	7813      	ldrb	r3, [r2, #0]
  40cd4a:	9301      	str	r3, [sp, #4]
  40cd4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  40cd4e:	9300      	str	r3, [sp, #0]
  40cd50:	463b      	mov	r3, r7
  40cd52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40cd54:	a925      	add	r1, sp, #148	; 0x94
  40cd56:	981f      	ldr	r0, [sp, #124]	; 0x7c
  40cd58:	4c06      	ldr	r4, [pc, #24]	; (40cd74 <lv_draw_map+0x834>)
  40cd5a:	47a0      	blx	r4
            }

            _lv_mem_buf_release(mask_buf);
  40cd5c:	4650      	mov	r0, sl
  40cd5e:	4c07      	ldr	r4, [pc, #28]	; (40cd7c <lv_draw_map+0x83c>)
  40cd60:	47a0      	blx	r4
            _lv_mem_buf_release(map2);
  40cd62:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40cd64:	47a0      	blx	r4
        }
    }
}
  40cd66:	b03d      	add	sp, #244	; 0xf4
  40cd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40cd6c:	0040f55d 	.word	0x0040f55d
  40cd70:	004163f5 	.word	0x004163f5
  40cd74:	0040c421 	.word	0x0040c421
  40cd78:	0041644d 	.word	0x0041644d
  40cd7c:	00416019 	.word	0x00416019

0040cd80 <show_error>:

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
  40cd80:	b570      	push	{r4, r5, r6, lr}
  40cd82:	b0a0      	sub	sp, #128	; 0x80
  40cd84:	4604      	mov	r4, r0
  40cd86:	460d      	mov	r5, r1
  40cd88:	4616      	mov	r6, r2
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
  40cd8a:	a80b      	add	r0, sp, #44	; 0x2c
  40cd8c:	4b0b      	ldr	r3, [pc, #44]	; (40cdbc <show_error+0x3c>)
  40cd8e:	4798      	blx	r3
    rect_dsc.bg_color = LV_COLOR_WHITE;
  40cd90:	4b0b      	ldr	r3, [pc, #44]	; (40cdc0 <show_error+0x40>)
  40cd92:	881b      	ldrh	r3, [r3, #0]
  40cd94:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
  40cd98:	aa0b      	add	r2, sp, #44	; 0x2c
  40cd9a:	4629      	mov	r1, r5
  40cd9c:	4620      	mov	r0, r4
  40cd9e:	4b09      	ldr	r3, [pc, #36]	; (40cdc4 <show_error+0x44>)
  40cda0:	4798      	blx	r3

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
  40cda2:	a802      	add	r0, sp, #8
  40cda4:	4b08      	ldr	r3, [pc, #32]	; (40cdc8 <show_error+0x48>)
  40cda6:	4798      	blx	r3
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
  40cda8:	2300      	movs	r3, #0
  40cdaa:	9300      	str	r3, [sp, #0]
  40cdac:	4633      	mov	r3, r6
  40cdae:	aa02      	add	r2, sp, #8
  40cdb0:	4629      	mov	r1, r5
  40cdb2:	4620      	mov	r0, r4
  40cdb4:	4c05      	ldr	r4, [pc, #20]	; (40cdcc <show_error+0x4c>)
  40cdb6:	47a0      	blx	r4
}
  40cdb8:	b020      	add	sp, #128	; 0x80
  40cdba:	bd70      	pop	{r4, r5, r6, pc}
  40cdbc:	00411d9d 	.word	0x00411d9d
  40cdc0:	004260dc 	.word	0x004260dc
  40cdc4:	00411de9 	.word	0x00411de9
  40cdc8:	0040d965 	.word	0x0040d965
  40cdcc:	0040d9ad 	.word	0x0040d9ad

0040cdd0 <lv_draw_img_dsc_init>:
{
  40cdd0:	b510      	push	{r4, lr}
  40cdd2:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
  40cdd4:	2110      	movs	r1, #16
  40cdd6:	4b07      	ldr	r3, [pc, #28]	; (40cdf4 <lv_draw_img_dsc_init+0x24>)
  40cdd8:	4798      	blx	r3
    dsc->recolor = LV_COLOR_BLACK;
  40cdda:	2300      	movs	r3, #0
  40cddc:	81a3      	strh	r3, [r4, #12]
    dsc->opa = LV_OPA_COVER;
  40cdde:	23ff      	movs	r3, #255	; 0xff
  40cde0:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
  40cde2:	f44f 7380 	mov.w	r3, #256	; 0x100
  40cde6:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
  40cde8:	7be3      	ldrb	r3, [r4, #15]
  40cdea:	f043 0301 	orr.w	r3, r3, #1
  40cdee:	73e3      	strb	r3, [r4, #15]
  40cdf0:	bd10      	pop	{r4, pc}
  40cdf2:	bf00      	nop
  40cdf4:	004163f5 	.word	0x004163f5

0040cdf8 <lv_img_cf_get_px_size>:
    switch(cf) {
  40cdf8:	3804      	subs	r0, #4
  40cdfa:	280a      	cmp	r0, #10
  40cdfc:	d807      	bhi.n	40ce0e <lv_img_cf_get_px_size+0x16>
  40cdfe:	e8df f000 	tbb	[pc, r0]
  40ce02:	0812      	.short	0x0812
  40ce04:	0e0c0a12 	.word	0x0e0c0a12
  40ce08:	0e0c0a10 	.word	0x0e0c0a10
  40ce0c:	10          	.byte	0x10
  40ce0d:	00          	.byte	0x00
            px_size = 0;
  40ce0e:	2000      	movs	r0, #0
  40ce10:	4770      	bx	lr
            px_size = LV_IMG_PX_SIZE_ALPHA_BYTE << 3;
  40ce12:	2018      	movs	r0, #24
            break;
  40ce14:	4770      	bx	lr
            px_size = 1;
  40ce16:	2001      	movs	r0, #1
            break;
  40ce18:	4770      	bx	lr
            px_size = 2;
  40ce1a:	2002      	movs	r0, #2
            break;
  40ce1c:	4770      	bx	lr
            px_size = 4;
  40ce1e:	2004      	movs	r0, #4
            break;
  40ce20:	4770      	bx	lr
            px_size = 8;
  40ce22:	2008      	movs	r0, #8
            break;
  40ce24:	4770      	bx	lr
            px_size = LV_COLOR_SIZE;
  40ce26:	2010      	movs	r0, #16
}
  40ce28:	4770      	bx	lr

0040ce2a <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
  40ce2a:	2803      	cmp	r0, #3
  40ce2c:	d005      	beq.n	40ce3a <lv_img_cf_is_chroma_keyed+0x10>
  40ce2e:	d302      	bcc.n	40ce36 <lv_img_cf_is_chroma_keyed+0xc>
  40ce30:	3806      	subs	r0, #6
  40ce32:	2804      	cmp	r0, #4
  40ce34:	d901      	bls.n	40ce3a <lv_img_cf_is_chroma_keyed+0x10>
            is_chroma_keyed = false;
  40ce36:	2000      	movs	r0, #0
}
  40ce38:	4770      	bx	lr
            is_chroma_keyed = true;
  40ce3a:	2001      	movs	r0, #1
  40ce3c:	4770      	bx	lr

0040ce3e <lv_img_cf_has_alpha>:
    switch(cf) {
  40ce3e:	3802      	subs	r0, #2
  40ce40:	280c      	cmp	r0, #12
  40ce42:	d80a      	bhi.n	40ce5a <lv_img_cf_has_alpha+0x1c>
  40ce44:	e8df f000 	tbb	[pc, r0]
  40ce48:	07090907 	.word	0x07090907
  40ce4c:	07070709 	.word	0x07070709
  40ce50:	07070707 	.word	0x07070707
  40ce54:	07          	.byte	0x07
  40ce55:	00          	.byte	0x00
            has_alpha = true;
  40ce56:	2001      	movs	r0, #1
  40ce58:	4770      	bx	lr
            has_alpha = false;
  40ce5a:	2000      	movs	r0, #0
}
  40ce5c:	4770      	bx	lr
	...

0040ce60 <lv_img_draw_core>:
{
  40ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ce64:	b08f      	sub	sp, #60	; 0x3c
    if(draw_dsc->opa <= LV_OPA_MIN) return LV_RES_OK;
  40ce66:	781c      	ldrb	r4, [r3, #0]
  40ce68:	2c02      	cmp	r4, #2
  40ce6a:	d803      	bhi.n	40ce74 <lv_img_draw_core+0x14>
  40ce6c:	2001      	movs	r0, #1
}
  40ce6e:	b00f      	add	sp, #60	; 0x3c
  40ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40ce74:	461c      	mov	r4, r3
  40ce76:	460d      	mov	r5, r1
  40ce78:	4682      	mov	sl, r0
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
  40ce7a:	8999      	ldrh	r1, [r3, #12]
  40ce7c:	4610      	mov	r0, r2
  40ce7e:	4b73      	ldr	r3, [pc, #460]	; (40d04c <lv_img_draw_core+0x1ec>)
  40ce80:	4798      	blx	r3
    if(cdsc == NULL) return LV_RES_INV;
  40ce82:	4606      	mov	r6, r0
  40ce84:	2800      	cmp	r0, #0
  40ce86:	f000 80de 	beq.w	40d046 <lv_img_draw_core+0x1e6>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
  40ce8a:	f890 800c 	ldrb.w	r8, [r0, #12]
  40ce8e:	f008 081f 	and.w	r8, r8, #31
  40ce92:	4640      	mov	r0, r8
  40ce94:	4b6e      	ldr	r3, [pc, #440]	; (40d050 <lv_img_draw_core+0x1f0>)
  40ce96:	4798      	blx	r3
  40ce98:	4607      	mov	r7, r0
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
  40ce9a:	4640      	mov	r0, r8
  40ce9c:	4b6d      	ldr	r3, [pc, #436]	; (40d054 <lv_img_draw_core+0x1f4>)
  40ce9e:	4798      	blx	r3
  40cea0:	4680      	mov	r8, r0
    if(cdsc->dec_dsc.error_msg != NULL) {
  40cea2:	69b2      	ldr	r2, [r6, #24]
  40cea4:	b12a      	cbz	r2, 40ceb2 <lv_img_draw_core+0x52>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
  40cea6:	4629      	mov	r1, r5
  40cea8:	4650      	mov	r0, sl
  40ceaa:	4b6b      	ldr	r3, [pc, #428]	; (40d058 <lv_img_draw_core+0x1f8>)
  40ceac:	4798      	blx	r3
    return LV_RES_OK;
  40ceae:	2001      	movs	r0, #1
  40ceb0:	e7dd      	b.n	40ce6e <lv_img_draw_core+0xe>
    else if(cdsc->dec_dsc.img_data) {
  40ceb2:	6933      	ldr	r3, [r6, #16]
  40ceb4:	2b00      	cmp	r3, #0
  40ceb6:	d053      	beq.n	40cf60 <lv_img_draw_core+0x100>
  40ceb8:	4651      	mov	r1, sl
  40ceba:	aa0a      	add	r2, sp, #40	; 0x28
  40cebc:	2308      	movs	r3, #8
  40cebe:	e004      	b.n	40ceca <lv_img_draw_core+0x6a>
        *d8 = *s8;
  40cec0:	f811 0b01 	ldrb.w	r0, [r1], #1
  40cec4:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40cec8:	3b01      	subs	r3, #1
    while(len) {
  40ceca:	2b00      	cmp	r3, #0
  40cecc:	d1f8      	bne.n	40cec0 <lv_img_draw_core+0x60>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
  40cece:	8863      	ldrh	r3, [r4, #2]
  40ced0:	b91b      	cbnz	r3, 40ceda <lv_img_draw_core+0x7a>
  40ced2:	8922      	ldrh	r2, [r4, #8]
  40ced4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
  40ced8:	d030      	beq.n	40cf3c <lv_img_draw_core+0xdc>
  40ceda:	f8ba 1004 	ldrh.w	r1, [sl, #4]
  40cede:	f8ba 2000 	ldrh.w	r2, [sl]
  40cee2:	1a89      	subs	r1, r1, r2
  40cee4:	b289      	uxth	r1, r1
  40cee6:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40cee8:	f8ba 2006 	ldrh.w	r2, [sl, #6]
  40ceec:	f8ba 0002 	ldrh.w	r0, [sl, #2]
  40cef0:	1a12      	subs	r2, r2, r0
  40cef2:	b292      	uxth	r2, r2
  40cef4:	3201      	adds	r2, #1
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
  40cef6:	1d20      	adds	r0, r4, #4
  40cef8:	9001      	str	r0, [sp, #4]
  40cefa:	8920      	ldrh	r0, [r4, #8]
  40cefc:	9000      	str	r0, [sp, #0]
  40cefe:	b21b      	sxth	r3, r3
  40cf00:	b212      	sxth	r2, r2
  40cf02:	b209      	sxth	r1, r1
  40cf04:	a80a      	add	r0, sp, #40	; 0x28
  40cf06:	f8df 9170 	ldr.w	r9, [pc, #368]	; 40d078 <lv_img_draw_core+0x218>
  40cf0a:	47c8      	blx	r9
            map_area_rot.x1 += coords->x1;
  40cf0c:	f8ba 2000 	ldrh.w	r2, [sl]
  40cf10:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  40cf14:	4413      	add	r3, r2
  40cf16:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
            map_area_rot.y1 += coords->y1;
  40cf1a:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  40cf1e:	f8bd 102a 	ldrh.w	r1, [sp, #42]	; 0x2a
  40cf22:	4419      	add	r1, r3
  40cf24:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
            map_area_rot.x2 += coords->x1;
  40cf28:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
  40cf2c:	440a      	add	r2, r1
  40cf2e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
            map_area_rot.y2 += coords->y1;
  40cf32:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  40cf36:	4413      	add	r3, r2
  40cf38:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
  40cf3c:	aa0a      	add	r2, sp, #40	; 0x28
  40cf3e:	4629      	mov	r1, r5
  40cf40:	a80c      	add	r0, sp, #48	; 0x30
  40cf42:	4b46      	ldr	r3, [pc, #280]	; (40d05c <lv_img_draw_core+0x1fc>)
  40cf44:	4798      	blx	r3
        if(union_ok == false) {
  40cf46:	b908      	cbnz	r0, 40cf4c <lv_img_draw_core+0xec>
            return LV_RES_OK;
  40cf48:	2001      	movs	r0, #1
  40cf4a:	e790      	b.n	40ce6e <lv_img_draw_core+0xe>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
  40cf4c:	6932      	ldr	r2, [r6, #16]
  40cf4e:	f8cd 8004 	str.w	r8, [sp, #4]
  40cf52:	9700      	str	r7, [sp, #0]
  40cf54:	4623      	mov	r3, r4
  40cf56:	a90c      	add	r1, sp, #48	; 0x30
  40cf58:	4650      	mov	r0, sl
  40cf5a:	4c41      	ldr	r4, [pc, #260]	; (40d060 <lv_img_draw_core+0x200>)
  40cf5c:	47a0      	blx	r4
  40cf5e:	e7a6      	b.n	40ceae <lv_img_draw_core+0x4e>
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
  40cf60:	4652      	mov	r2, sl
  40cf62:	4629      	mov	r1, r5
  40cf64:	a808      	add	r0, sp, #32
  40cf66:	4b3d      	ldr	r3, [pc, #244]	; (40d05c <lv_img_draw_core+0x1fc>)
  40cf68:	4798      	blx	r3
        if(union_ok == false) {
  40cf6a:	b908      	cbnz	r0, 40cf70 <lv_img_draw_core+0x110>
            return LV_RES_OK;
  40cf6c:	2001      	movs	r0, #1
  40cf6e:	e77e      	b.n	40ce6e <lv_img_draw_core+0xe>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40cf70:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  40cf74:	f10d 0938 	add.w	r9, sp, #56	; 0x38
  40cf78:	f839 2d18 	ldrh.w	r2, [r9, #-24]!
  40cf7c:	1a9b      	subs	r3, r3, r2
  40cf7e:	b29b      	uxth	r3, r3
  40cf80:	3301      	adds	r3, #1
  40cf82:	b21b      	sxth	r3, r3
  40cf84:	9303      	str	r3, [sp, #12]
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
  40cf86:	eb03 0043 	add.w	r0, r3, r3, lsl #1
  40cf8a:	4b36      	ldr	r3, [pc, #216]	; (40d064 <lv_img_draw_core+0x204>)
  40cf8c:	4798      	blx	r3
  40cf8e:	9007      	str	r0, [sp, #28]
    uint8_t * d8 = (uint8_t *)dst;
  40cf90:	aa0a      	add	r2, sp, #40	; 0x28
  40cf92:	2308      	movs	r3, #8
  40cf94:	e004      	b.n	40cfa0 <lv_img_draw_core+0x140>
        *d8 = *s8;
  40cf96:	f819 1b01 	ldrb.w	r1, [r9], #1
  40cf9a:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  40cf9e:	3b01      	subs	r3, #1
    while(len) {
  40cfa0:	2b00      	cmp	r3, #0
  40cfa2:	d1f8      	bne.n	40cf96 <lv_img_draw_core+0x136>
        lv_area_set_height(&line, 1);
  40cfa4:	2101      	movs	r1, #1
  40cfa6:	a80a      	add	r0, sp, #40	; 0x28
  40cfa8:	4b2f      	ldr	r3, [pc, #188]	; (40d068 <lv_img_draw_core+0x208>)
  40cfaa:	4798      	blx	r3
        int32_t x = mask_com.x1 - coords->x1;
  40cfac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40cfb0:	f9ba 2000 	ldrsh.w	r2, [sl]
        int32_t y = mask_com.y1 - coords->y1;
  40cfb4:	f9bd 9022 	ldrsh.w	r9, [sp, #34]	; 0x22
  40cfb8:	f9ba a002 	ldrsh.w	sl, [sl, #2]
  40cfbc:	eba9 0a0a 	sub.w	sl, r9, sl
  40cfc0:	9604      	str	r6, [sp, #16]
  40cfc2:	9e07      	ldr	r6, [sp, #28]
  40cfc4:	469b      	mov	fp, r3
  40cfc6:	9502      	str	r5, [sp, #8]
  40cfc8:	4615      	mov	r5, r2
  40cfca:	9406      	str	r4, [sp, #24]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cfcc:	e009      	b.n	40cfe2 <lv_img_draw_core+0x182>
                lv_img_decoder_close(&cdsc->dec_dsc);
  40cfce:	9805      	ldr	r0, [sp, #20]
  40cfd0:	4b26      	ldr	r3, [pc, #152]	; (40d06c <lv_img_draw_core+0x20c>)
  40cfd2:	4798      	blx	r3
                _lv_mem_buf_release(buf);
  40cfd4:	9807      	ldr	r0, [sp, #28]
  40cfd6:	4b26      	ldr	r3, [pc, #152]	; (40d070 <lv_img_draw_core+0x210>)
  40cfd8:	4798      	blx	r3
                return LV_RES_INV;
  40cfda:	2000      	movs	r0, #0
  40cfdc:	e747      	b.n	40ce6e <lv_img_draw_core+0xe>
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
  40cfde:	f109 0901 	add.w	r9, r9, #1
  40cfe2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40cfe6:	4599      	cmp	r9, r3
  40cfe8:	dc29      	bgt.n	40d03e <lv_img_draw_core+0x1de>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
  40cfea:	aa0a      	add	r2, sp, #40	; 0x28
  40cfec:	9902      	ldr	r1, [sp, #8]
  40cfee:	a80c      	add	r0, sp, #48	; 0x30
  40cff0:	4b1a      	ldr	r3, [pc, #104]	; (40d05c <lv_img_draw_core+0x1fc>)
  40cff2:	4798      	blx	r3
            if(union_ok == false) continue;
  40cff4:	2800      	cmp	r0, #0
  40cff6:	d0f2      	beq.n	40cfde <lv_img_draw_core+0x17e>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
  40cff8:	9804      	ldr	r0, [sp, #16]
  40cffa:	9005      	str	r0, [sp, #20]
  40cffc:	ebab 0105 	sub.w	r1, fp, r5
  40d000:	9600      	str	r6, [sp, #0]
  40d002:	9b03      	ldr	r3, [sp, #12]
  40d004:	fa0f f28a 	sxth.w	r2, sl
  40d008:	b209      	sxth	r1, r1
  40d00a:	4c1a      	ldr	r4, [pc, #104]	; (40d074 <lv_img_draw_core+0x214>)
  40d00c:	47a0      	blx	r4
            if(read_res != LV_RES_OK) {
  40d00e:	2801      	cmp	r0, #1
  40d010:	d1dd      	bne.n	40cfce <lv_img_draw_core+0x16e>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
  40d012:	f8cd 8004 	str.w	r8, [sp, #4]
  40d016:	9700      	str	r7, [sp, #0]
  40d018:	9b06      	ldr	r3, [sp, #24]
  40d01a:	4632      	mov	r2, r6
  40d01c:	a90c      	add	r1, sp, #48	; 0x30
  40d01e:	a80a      	add	r0, sp, #40	; 0x28
  40d020:	4c0f      	ldr	r4, [pc, #60]	; (40d060 <lv_img_draw_core+0x200>)
  40d022:	47a0      	blx	r4
            line.y1++;
  40d024:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  40d028:	3301      	adds	r3, #1
  40d02a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
            line.y2++;
  40d02e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  40d032:	3301      	adds	r3, #1
  40d034:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            y++;
  40d038:	f10a 0a01 	add.w	sl, sl, #1
  40d03c:	e7cf      	b.n	40cfde <lv_img_draw_core+0x17e>
        _lv_mem_buf_release(buf);
  40d03e:	9807      	ldr	r0, [sp, #28]
  40d040:	4b0b      	ldr	r3, [pc, #44]	; (40d070 <lv_img_draw_core+0x210>)
  40d042:	4798      	blx	r3
  40d044:	e733      	b.n	40ceae <lv_img_draw_core+0x4e>
    if(cdsc == NULL) return LV_RES_INV;
  40d046:	2000      	movs	r0, #0
  40d048:	e711      	b.n	40ce6e <lv_img_draw_core+0xe>
  40d04a:	bf00      	nop
  40d04c:	00412821 	.word	0x00412821
  40d050:	0040ce2b 	.word	0x0040ce2b
  40d054:	0040ce3f 	.word	0x0040ce3f
  40d058:	0040cd81 	.word	0x0040cd81
  40d05c:	00414ef3 	.word	0x00414ef3
  40d060:	0040c541 	.word	0x0040c541
  40d064:	00416269 	.word	0x00416269
  40d068:	00414ecb 	.word	0x00414ecb
  40d06c:	0041336d 	.word	0x0041336d
  40d070:	00416019 	.word	0x00416019
  40d074:	00413349 	.word	0x00413349
  40d078:	004121a9 	.word	0x004121a9

0040d07c <lv_draw_img>:
{
  40d07c:	b570      	push	{r4, r5, r6, lr}
  40d07e:	4604      	mov	r4, r0
  40d080:	460d      	mov	r5, r1
    if(src == NULL) {
  40d082:	b122      	cbz	r2, 40d08e <lv_draw_img+0x12>
  40d084:	4611      	mov	r1, r2
    if(dsc->opa <= LV_OPA_MIN) return;
  40d086:	781a      	ldrb	r2, [r3, #0]
  40d088:	2a02      	cmp	r2, #2
  40d08a:	d804      	bhi.n	40d096 <lv_draw_img+0x1a>
  40d08c:	bd70      	pop	{r4, r5, r6, pc}
        show_error(coords, mask, "No\ndata");
  40d08e:	4a08      	ldr	r2, [pc, #32]	; (40d0b0 <lv_draw_img+0x34>)
  40d090:	4b08      	ldr	r3, [pc, #32]	; (40d0b4 <lv_draw_img+0x38>)
  40d092:	4798      	blx	r3
        return;
  40d094:	bd70      	pop	{r4, r5, r6, pc}
    res = lv_img_draw_core(coords, mask, src, dsc);
  40d096:	460a      	mov	r2, r1
  40d098:	4629      	mov	r1, r5
  40d09a:	4e07      	ldr	r6, [pc, #28]	; (40d0b8 <lv_draw_img+0x3c>)
  40d09c:	47b0      	blx	r6
    if(res == LV_RES_INV) {
  40d09e:	2800      	cmp	r0, #0
  40d0a0:	d1f4      	bne.n	40d08c <lv_draw_img+0x10>
        show_error(coords, mask, "No\ndata");
  40d0a2:	4a03      	ldr	r2, [pc, #12]	; (40d0b0 <lv_draw_img+0x34>)
  40d0a4:	4629      	mov	r1, r5
  40d0a6:	4620      	mov	r0, r4
  40d0a8:	4b02      	ldr	r3, [pc, #8]	; (40d0b4 <lv_draw_img+0x38>)
  40d0aa:	4798      	blx	r3
        return;
  40d0ac:	e7ee      	b.n	40d08c <lv_draw_img+0x10>
  40d0ae:	bf00      	nop
  40d0b0:	004260e0 	.word	0x004260e0
  40d0b4:	0040cd81 	.word	0x0040cd81
  40d0b8:	0040ce61 	.word	0x0040ce61

0040d0bc <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
  40d0bc:	b160      	cbz	r0, 40d0d8 <lv_img_src_get_type+0x1c>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
  40d0be:	7802      	ldrb	r2, [r0, #0]
  40d0c0:	f1a2 0320 	sub.w	r3, r2, #32
  40d0c4:	b2db      	uxtb	r3, r3
  40d0c6:	2b5f      	cmp	r3, #95	; 0x5f
  40d0c8:	d908      	bls.n	40d0dc <lv_img_src_get_type+0x20>
    else if(u8_p[0] >= 0x80) {
  40d0ca:	f012 0f80 	tst.w	r2, #128	; 0x80
  40d0ce:	d101      	bne.n	40d0d4 <lv_img_src_get_type+0x18>
        img_src_type = LV_IMG_SRC_VARIABLE; /*`lv_img_dsc_t` is design to the first byte < 0x20*/
  40d0d0:	2000      	movs	r0, #0
}
  40d0d2:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
  40d0d4:	2002      	movs	r0, #2
  40d0d6:	4770      	bx	lr
    if(src == NULL) return img_src_type;
  40d0d8:	2003      	movs	r0, #3
  40d0da:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
  40d0dc:	2001      	movs	r0, #1
  40d0de:	4770      	bx	lr

0040d0e0 <hex_char_to_num>:
 */
static uint8_t hex_char_to_num(char hex)
{
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
  40d0e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
  40d0e4:	b2db      	uxtb	r3, r3
  40d0e6:	2b09      	cmp	r3, #9
  40d0e8:	d917      	bls.n	40d11a <hex_char_to_num+0x3a>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
  40d0ea:	2860      	cmp	r0, #96	; 0x60
  40d0ec:	d901      	bls.n	40d0f2 <hex_char_to_num+0x12>
  40d0ee:	3820      	subs	r0, #32
  40d0f0:	b2c0      	uxtb	r0, r0

        switch(hex) {
  40d0f2:	3841      	subs	r0, #65	; 0x41
  40d0f4:	2805      	cmp	r0, #5
  40d0f6:	d80e      	bhi.n	40d116 <hex_char_to_num+0x36>
  40d0f8:	e8df f000 	tbb	[pc, r0]
  40d0fc:	07051103 	.word	0x07051103
  40d100:	0b09      	.short	0x0b09
            case 'A':
                result = 10;
  40d102:	200a      	movs	r0, #10
  40d104:	4770      	bx	lr
                break;
            case 'B':
                result = 11;
                break;
            case 'C':
                result = 12;
  40d106:	200c      	movs	r0, #12
                break;
  40d108:	4770      	bx	lr
            case 'D':
                result = 13;
  40d10a:	200d      	movs	r0, #13
                break;
  40d10c:	4770      	bx	lr
            case 'E':
                result = 14;
  40d10e:	200e      	movs	r0, #14
                break;
  40d110:	4770      	bx	lr
            case 'F':
                result = 15;
  40d112:	200f      	movs	r0, #15
                break;
  40d114:	4770      	bx	lr
            default:
                result = 0;
  40d116:	2000      	movs	r0, #0
                break;
  40d118:	4770      	bx	lr
        result = hex - '0';
  40d11a:	4618      	mov	r0, r3
  40d11c:	4770      	bx	lr
                result = 11;
  40d11e:	200b      	movs	r0, #11
        }
    }

    return result;
}
  40d120:	4770      	bx	lr
	...

0040d124 <draw_letter_subpx>:
{
  40d124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d128:	b09d      	sub	sp, #116	; 0x74
  40d12a:	f8bd 909c 	ldrh.w	r9, [sp, #156]	; 0x9c
  40d12e:	f89d 40a0 	ldrb.w	r4, [sp, #160]	; 0xa0
  40d132:	9409      	str	r4, [sp, #36]	; 0x24
  40d134:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
  40d138:	9416      	str	r4, [sp, #88]	; 0x58
    uint32_t bpp = g->bpp;
  40d13a:	7a95      	ldrb	r5, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d13c:	2d03      	cmp	r5, #3
  40d13e:	d00d      	beq.n	40d15c <draw_letter_subpx+0x38>
    switch(bpp) {
  40d140:	1e6c      	subs	r4, r5, #1
  40d142:	2c07      	cmp	r4, #7
  40d144:	f200 820e 	bhi.w	40d564 <draw_letter_subpx+0x440>
  40d148:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d14c:	0019000a 	.word	0x0019000a
  40d150:	000f020c 	.word	0x000f020c
  40d154:	020c020c 	.word	0x020c020c
  40d158:	0014020c 	.word	0x0014020c
    if(bpp == 3) bpp = 4;
  40d15c:	2504      	movs	r5, #4
  40d15e:	e7ef      	b.n	40d140 <draw_letter_subpx+0x1c>
            bitmask_init  = 0x80;
  40d160:	2480      	movs	r4, #128	; 0x80
  40d162:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp1_opa_table;
  40d164:	4caf      	ldr	r4, [pc, #700]	; (40d424 <draw_letter_subpx+0x300>)
  40d166:	940b      	str	r4, [sp, #44]	; 0x2c
  40d168:	e00d      	b.n	40d186 <draw_letter_subpx+0x62>
            bitmask_init  = 0xF0;
  40d16a:	24f0      	movs	r4, #240	; 0xf0
  40d16c:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp4_opa_table;
  40d16e:	4cae      	ldr	r4, [pc, #696]	; (40d428 <draw_letter_subpx+0x304>)
  40d170:	940b      	str	r4, [sp, #44]	; 0x2c
            break;
  40d172:	e008      	b.n	40d186 <draw_letter_subpx+0x62>
            bitmask_init  = 0xFF;
  40d174:	24ff      	movs	r4, #255	; 0xff
  40d176:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp8_opa_table;
  40d178:	4cac      	ldr	r4, [pc, #688]	; (40d42c <draw_letter_subpx+0x308>)
  40d17a:	940b      	str	r4, [sp, #44]	; 0x2c
            break;       /*No opa table, pixel value will be used directly*/
  40d17c:	e003      	b.n	40d186 <draw_letter_subpx+0x62>
            bitmask_init  = 0xC0;
  40d17e:	24c0      	movs	r4, #192	; 0xc0
  40d180:	940a      	str	r4, [sp, #40]	; 0x28
            bpp_opa_table = _lv_bpp2_opa_table;
  40d182:	4cab      	ldr	r4, [pc, #684]	; (40d430 <draw_letter_subpx+0x30c>)
  40d184:	940b      	str	r4, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
  40d186:	8854      	ldrh	r4, [r2, #2]
  40d188:	9411      	str	r4, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
  40d18a:	f8b2 e004 	ldrh.w	lr, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d18e:	fb05 f604 	mul.w	r6, r5, r4
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d192:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d196:	4282      	cmp	r2, r0
  40d198:	f340 8097 	ble.w	40d2ca <draw_letter_subpx+0x1a6>
  40d19c:	1a12      	subs	r2, r2, r0
  40d19e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d1a2:	920f      	str	r2, [sp, #60]	; 0x3c
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d1a4:	4aa3      	ldr	r2, [pc, #652]	; (40d434 <draw_letter_subpx+0x310>)
  40d1a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
  40d1a8:	fb82 4204 	smull	r4, r2, r2, r4
  40d1ac:	4402      	add	r2, r0
  40d1ae:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
  40d1b2:	42a2      	cmp	r2, r4
  40d1b4:	f340 808c 	ble.w	40d2d0 <draw_letter_subpx+0x1ac>
  40d1b8:	1a22      	subs	r2, r4, r0
  40d1ba:	3201      	adds	r2, #1
  40d1bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40d1c0:	9208      	str	r2, [sp, #32]
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d1c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d1c6:	428a      	cmp	r2, r1
  40d1c8:	f340 8085 	ble.w	40d2d6 <draw_letter_subpx+0x1b2>
  40d1cc:	1a52      	subs	r2, r2, r1
  40d1ce:	920d      	str	r2, [sp, #52]	; 0x34
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d1d0:	eb0e 0201 	add.w	r2, lr, r1
  40d1d4:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
  40d1d8:	42a2      	cmp	r2, r4
  40d1da:	dd7f      	ble.n	40d2dc <draw_letter_subpx+0x1b8>
  40d1dc:	1a64      	subs	r4, r4, r1
  40d1de:	1c62      	adds	r2, r4, #1
  40d1e0:	9213      	str	r2, [sp, #76]	; 0x4c
    int32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d1e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d1e4:	fb05 f402 	mul.w	r4, r5, r2
  40d1e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40d1ea:	fb06 4402 	mla	r4, r6, r2, r4
    map_p += bit_ofs >> 3;
  40d1ee:	9e26      	ldr	r6, [sp, #152]	; 0x98
  40d1f0:	eb06 06e4 	add.w	r6, r6, r4, asr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d1f4:	f004 0407 	and.w	r4, r4, #7
    int32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : g->box_w * g->box_h;
  40d1f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d1fa:	fb0e f202 	mul.w	r2, lr, r2
  40d1fe:	9212      	str	r2, [sp, #72]	; 0x48
  40d200:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
  40d204:	dd02      	ble.n	40d20c <draw_letter_subpx+0xe8>
  40d206:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40d20a:	9212      	str	r2, [sp, #72]	; 0x48
  40d20c:	9317      	str	r3, [sp, #92]	; 0x5c
  40d20e:	468a      	mov	sl, r1
  40d210:	4683      	mov	fp, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d212:	9f12      	ldr	r7, [sp, #72]	; 0x48
  40d214:	4638      	mov	r0, r7
  40d216:	f8df 822c 	ldr.w	r8, [pc, #556]	; 40d444 <draw_letter_subpx+0x320>
  40d21a:	47c0      	blx	r8
  40d21c:	900c      	str	r0, [sp, #48]	; 0x30
    lv_color_t * color_buf = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
  40d21e:	0078      	lsls	r0, r7, #1
  40d220:	47c0      	blx	r8
  40d222:	900e      	str	r0, [sp, #56]	; 0x38
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40d224:	4b84      	ldr	r3, [pc, #528]	; (40d438 <draw_letter_subpx+0x314>)
  40d226:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40d228:	4b84      	ldr	r3, [pc, #528]	; (40d43c <draw_letter_subpx+0x318>)
  40d22a:	4798      	blx	r3
  40d22c:	8a83      	ldrh	r3, [r0, #20]
  40d22e:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
  40d232:	b291      	uxth	r1, r2
  40d234:	1a5b      	subs	r3, r3, r1
  40d236:	b29b      	uxth	r3, r3
  40d238:	3301      	adds	r3, #1
  40d23a:	b21b      	sxth	r3, r3
  40d23c:	4619      	mov	r1, r3
  40d23e:	9314      	str	r3, [sp, #80]	; 0x50
    lv_color_t * vdb_buf_tmp = vdb->buf_act;
  40d240:	f8d0 8008 	ldr.w	r8, [r0, #8]
    vdb_buf_tmp += ((pos_y - vdb->area.y1) * vdb_width) + pos_x - vdb->area.x1;
  40d244:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  40d248:	ebaa 0303 	sub.w	r3, sl, r3
  40d24c:	4608      	mov	r0, r1
  40d24e:	fb03 b301 	mla	r3, r3, r1, fp
  40d252:	1a9b      	subs	r3, r3, r2
    vdb_buf_tmp += (row_start * vdb_width) + col_start / 3;
  40d254:	4a77      	ldr	r2, [pc, #476]	; (40d434 <draw_letter_subpx+0x310>)
  40d256:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  40d258:	fb82 e107 	smull	lr, r1, r2, r7
  40d25c:	eba1 71e7 	sub.w	r1, r1, r7, asr #31
  40d260:	9f0d      	ldr	r7, [sp, #52]	; 0x34
  40d262:	fb00 1007 	mla	r0, r0, r7, r1
  40d266:	0040      	lsls	r0, r0, #1
  40d268:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  40d26c:	4498      	add	r8, r3
    map_area.x1 = col_start / 3 + pos_x;
  40d26e:	fa1f f08b 	uxth.w	r0, fp
  40d272:	4401      	add	r1, r0
  40d274:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
    map_area.x2 = col_end / 3  + pos_x - 1;
  40d278:	9908      	ldr	r1, [sp, #32]
  40d27a:	fb82 2301 	smull	r2, r3, r2, r1
  40d27e:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
  40d282:	4403      	add	r3, r0
  40d284:	b29b      	uxth	r3, r3
  40d286:	3b01      	subs	r3, #1
  40d288:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
    map_area.y1 = row_start + pos_y;
  40d28c:	eb07 030a 	add.w	r3, r7, sl
  40d290:	b21b      	sxth	r3, r3
  40d292:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    map_area.y2 = map_area.y1;
  40d296:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d29a:	4b69      	ldr	r3, [pc, #420]	; (40d440 <draw_letter_subpx+0x31c>)
  40d29c:	4798      	blx	r3
  40d29e:	9015      	str	r0, [sp, #84]	; 0x54
    uint8_t txt_rgb[3] = {color.ch.red, (color.ch.green_h << 3) + color.ch.green_l, color.ch.blue};
  40d2a0:	f3c9 03c4 	ubfx	r3, r9, #3, #5
  40d2a4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
  40d2a8:	f009 0207 	and.w	r2, r9, #7
  40d2ac:	f3c9 3342 	ubfx	r3, r9, #13, #3
  40d2b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40d2b4:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
  40d2b8:	f3c9 2904 	ubfx	r9, r9, #8, #5
  40d2bc:	f88d 9062 	strb.w	r9, [sp, #98]	; 0x62
    int32_t mask_p = 0;
  40d2c0:	2300      	movs	r3, #0
  40d2c2:	9310      	str	r3, [sp, #64]	; 0x40
  40d2c4:	f8bd 7014 	ldrh.w	r7, [sp, #20]
    for(row = row_start ; row < row_end; row++) {
  40d2c8:	e0eb      	b.n	40d4a2 <draw_letter_subpx+0x37e>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : (clip_area->x1 - pos_x) * 3;
  40d2ca:	2200      	movs	r2, #0
  40d2cc:	920f      	str	r2, [sp, #60]	; 0x3c
  40d2ce:	e769      	b.n	40d1a4 <draw_letter_subpx+0x80>
    int32_t col_end   = pos_x + box_w / 3 <= clip_area->x2 ? box_w : (clip_area->x2 - pos_x + 1) * 3;
  40d2d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40d2d2:	9208      	str	r2, [sp, #32]
  40d2d4:	e775      	b.n	40d1c2 <draw_letter_subpx+0x9e>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d2d6:	2200      	movs	r2, #0
  40d2d8:	920d      	str	r2, [sp, #52]	; 0x34
  40d2da:	e779      	b.n	40d1d0 <draw_letter_subpx+0xac>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d2dc:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
  40d2e0:	e77f      	b.n	40d1e2 <draw_letter_subpx+0xbe>
                    px_opa = bpp == 8 ? letter_px : bpp_opa_table[letter_px];
  40d2e2:	2d08      	cmp	r5, #8
  40d2e4:	d00b      	beq.n	40d2fe <draw_letter_subpx+0x1da>
  40d2e6:	b2db      	uxtb	r3, r3
  40d2e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d2ea:	5cd2      	ldrb	r2, [r2, r3]
  40d2ec:	e007      	b.n	40d2fe <draw_letter_subpx+0x1da>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d2ee:	b2da      	uxtb	r2, r3
  40d2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d2f2:	fb03 f202 	mul.w	r2, r3, r2
  40d2f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d2fa:	e000      	b.n	40d2fe <draw_letter_subpx+0x1da>
                px_opa = 0;
  40d2fc:	2200      	movs	r2, #0
            font_rgb[subpx_cnt] = px_opa;
  40d2fe:	ab1c      	add	r3, sp, #112	; 0x70
  40d300:	440b      	add	r3, r1
  40d302:	f803 2c0c 	strb.w	r2, [r3, #-12]
            subpx_cnt ++;
  40d306:	3101      	adds	r1, #1
            if(subpx_cnt == 3) {
  40d308:	2903      	cmp	r1, #3
  40d30a:	d028      	beq.n	40d35e <draw_letter_subpx+0x23a>
            if(col_bit < (int32_t)(8 - bpp)) {
  40d30c:	f1c5 0308 	rsb	r3, r5, #8
  40d310:	429c      	cmp	r4, r3
  40d312:	f280 8081 	bge.w	40d418 <draw_letter_subpx+0x2f4>
                col_bit += bpp;
  40d316:	9b05      	ldr	r3, [sp, #20]
  40d318:	442b      	add	r3, r5
  40d31a:	461c      	mov	r4, r3
                bitmask = bitmask >> bpp;
  40d31c:	fa2e fe05 	lsr.w	lr, lr, r5
        for(col = col_start; col < col_end; col++) {
  40d320:	3001      	adds	r0, #1
  40d322:	9b08      	ldr	r3, [sp, #32]
  40d324:	4298      	cmp	r0, r3
  40d326:	f280 808f 	bge.w	40d448 <draw_letter_subpx+0x324>
            letter_px = (*map_p & bitmask) >> (8 - col_bit - bpp);
  40d32a:	7833      	ldrb	r3, [r6, #0]
  40d32c:	ea0e 0203 	and.w	r2, lr, r3
  40d330:	9405      	str	r4, [sp, #20]
  40d332:	426b      	negs	r3, r5
  40d334:	1b1b      	subs	r3, r3, r4
  40d336:	3308      	adds	r3, #8
  40d338:	fa22 f303 	lsr.w	r3, r2, r3
            if(letter_px != 0) {
  40d33c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
  40d340:	d0dc      	beq.n	40d2fc <draw_letter_subpx+0x1d8>
                if(opa == LV_OPA_COVER) {
  40d342:	9f09      	ldr	r7, [sp, #36]	; 0x24
  40d344:	2fff      	cmp	r7, #255	; 0xff
  40d346:	d0cc      	beq.n	40d2e2 <draw_letter_subpx+0x1be>
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d348:	2d08      	cmp	r5, #8
  40d34a:	d0d0      	beq.n	40d2ee <draw_letter_subpx+0x1ca>
                             : (uint32_t)((uint32_t)bpp_opa_table[letter_px] * opa) >> 8;
  40d34c:	b2db      	uxtb	r3, r3
  40d34e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40d350:	5cd2      	ldrb	r2, [r2, r3]
  40d352:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d354:	fb02 f203 	mul.w	r2, r2, r3
                    px_opa = bpp == 8 ? (uint32_t)((uint32_t)letter_px * opa) >> 8
  40d358:	f3c2 2207 	ubfx	r2, r2, #8, #8
  40d35c:	e7cf      	b.n	40d2fe <draw_letter_subpx+0x1da>
                uint8_t bg_rgb[3] = {vdb_buf_tmp->ch.red,
  40d35e:	f898 9000 	ldrb.w	r9, [r8]
  40d362:	ea4f 0bd9 	mov.w	fp, r9, lsr #3
                                     (vdb_buf_tmp->ch.green_h << 3) + vdb_buf_tmp->ch.green_l,
  40d366:	f009 0107 	and.w	r1, r9, #7
  40d36a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40d36e:	ea4f 1952 	mov.w	r9, r2, lsr #5
  40d372:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
                                     vdb_buf_tmp->ch.blue
  40d376:	f002 021f 	and.w	r2, r2, #31
                res_color.ch.red = (uint32_t)((uint16_t)txt_rgb[0] * font_rgb[0] + (bg_rgb[0] * (255 - font_rgb[0]))) >> 8;
  40d37a:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  40d37e:	f89d 1064 	ldrb.w	r1, [sp, #100]	; 0x64
  40d382:	f1c1 0aff 	rsb	sl, r1, #255	; 0xff
  40d386:	fb0a fa0b 	mul.w	sl, sl, fp
  40d38a:	fb01 aa03 	mla	sl, r1, r3, sl
  40d38e:	f3ca 2a04 	ubfx	sl, sl, #8, #5
  40d392:	9b06      	ldr	r3, [sp, #24]
  40d394:	f36a 03c7 	bfi	r3, sl, #3, #5
  40d398:	461f      	mov	r7, r3
                res_color.ch.blue = (uint32_t)((uint16_t)txt_rgb[2] * font_rgb[2] + (bg_rgb[2] * (255 - font_rgb[2]))) >> 8;
  40d39a:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
  40d39e:	f89d a066 	ldrb.w	sl, [sp, #102]	; 0x66
  40d3a2:	f1ca 0bff 	rsb	fp, sl, #255	; 0xff
  40d3a6:	fb0b f202 	mul.w	r2, fp, r2
  40d3aa:	fb0a 2203 	mla	r2, sl, r3, r2
  40d3ae:	f3c2 2204 	ubfx	r2, r2, #8, #5
  40d3b2:	463b      	mov	r3, r7
  40d3b4:	f362 230c 	bfi	r3, r2, #8, #5
  40d3b8:	461f      	mov	r7, r3
                uint8_t green = (uint32_t)((uint32_t)txt_rgb[1] * font_rgb[1] + (bg_rgb[1] * (255 - font_rgb[1]))) >> 8;
  40d3ba:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
  40d3be:	f89d b065 	ldrb.w	fp, [sp, #101]	; 0x65
  40d3c2:	f1cb 02ff 	rsb	r2, fp, #255	; 0xff
  40d3c6:	fb02 f909 	mul.w	r9, r2, r9
  40d3ca:	fb0b 9303 	mla	r3, fp, r3, r9
  40d3ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
                res_color.ch.green_h = green >> 3;
  40d3d2:	f3c3 02c2 	ubfx	r2, r3, #3, #3
  40d3d6:	f362 0702 	bfi	r7, r2, #0, #3
  40d3da:	463a      	mov	r2, r7
                res_color.ch.green_l = green & 0x7;
  40d3dc:	f363 324f 	bfi	r2, r3, #13, #3
  40d3e0:	9206      	str	r2, [sp, #24]
                if(font_rgb[0] == 0 && font_rgb[1] == 0 && font_rgb[2] == 0) mask_buf[mask_p] = LV_OPA_TRANSP;
  40d3e2:	b951      	cbnz	r1, 40d3fa <draw_letter_subpx+0x2d6>
  40d3e4:	f1bb 0f00 	cmp.w	fp, #0
  40d3e8:	d107      	bne.n	40d3fa <draw_letter_subpx+0x2d6>
  40d3ea:	f1ba 0f00 	cmp.w	sl, #0
  40d3ee:	d104      	bne.n	40d3fa <draw_letter_subpx+0x2d6>
  40d3f0:	2300      	movs	r3, #0
  40d3f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d3f4:	f802 300c 	strb.w	r3, [r2, ip]
  40d3f8:	e003      	b.n	40d402 <draw_letter_subpx+0x2de>
                else mask_buf[mask_p] = LV_OPA_COVER;
  40d3fa:	23ff      	movs	r3, #255	; 0xff
  40d3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d3fe:	f802 300c 	strb.w	r3, [r2, ip]
                color_buf[mask_p] = res_color;
  40d402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40d404:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  40d408:	f823 201c 	strh.w	r2, [r3, ip, lsl #1]
                mask_p++;
  40d40c:	f10c 0c01 	add.w	ip, ip, #1
                vdb_buf_tmp++;
  40d410:	f108 0802 	add.w	r8, r8, #2
                subpx_cnt = 0;
  40d414:	2100      	movs	r1, #0
  40d416:	e779      	b.n	40d30c <draw_letter_subpx+0x1e8>
                map_p++;
  40d418:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d41a:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
                col_bit = 0;
  40d41e:	2400      	movs	r4, #0
  40d420:	e77e      	b.n	40d320 <draw_letter_subpx+0x1fc>
  40d422:	bf00      	nop
  40d424:	004260e8 	.word	0x004260e8
  40d428:	004260f0 	.word	0x004260f0
  40d42c:	00426100 	.word	0x00426100
  40d430:	004260ec 	.word	0x004260ec
  40d434:	55555556 	.word	0x55555556
  40d438:	00409269 	.word	0x00409269
  40d43c:	00414735 	.word	0x00414735
  40d440:	0040f625 	.word	0x0040f625
  40d444:	00416269 	.word	0x00416269
  40d448:	46e3      	mov	fp, ip
  40d44a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
        if(other_mask_cnt) {
  40d44e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40d450:	2b00      	cmp	r3, #0
  40d452:	d134      	bne.n	40d4be <draw_letter_subpx+0x39a>
        if((int32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d454:	9b08      	ldr	r3, [sp, #32]
  40d456:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d458:	eba3 0902 	sub.w	r9, r3, r2
  40d45c:	465b      	mov	r3, fp
  40d45e:	444b      	add	r3, r9
  40d460:	9912      	ldr	r1, [sp, #72]	; 0x48
  40d462:	4299      	cmp	r1, r3
  40d464:	dd4c      	ble.n	40d500 <draw_letter_subpx+0x3dc>
            map_area.y2 ++;
  40d466:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d46a:	3301      	adds	r3, #1
  40d46c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
  40d470:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
        col_bit += ((box_w - col_end) + col_start) * bpp;
  40d474:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40d476:	9a08      	ldr	r2, [sp, #32]
  40d478:	1a9b      	subs	r3, r3, r2
  40d47a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40d47c:	4413      	add	r3, r2
  40d47e:	fb03 4405 	mla	r4, r3, r5, r4
        map_p += (col_bit >> 3);
  40d482:	eb06 06e4 	add.w	r6, r6, r4, asr #3
        col_bit = col_bit & 0x7;
  40d486:	f004 0407 	and.w	r4, r4, #7
        vdb_buf_tmp += vdb_width - (col_end - col_start) / 3;
  40d48a:	4b38      	ldr	r3, [pc, #224]	; (40d56c <draw_letter_subpx+0x448>)
  40d48c:	fb83 2309 	smull	r2, r3, r3, r9
  40d490:	ebc3 79e9 	rsb	r9, r3, r9, asr #31
  40d494:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40d496:	4499      	add	r9, r3
  40d498:	eb08 0849 	add.w	r8, r8, r9, lsl #1
    for(row = row_start ; row < row_end; row++) {
  40d49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d49e:	3301      	adds	r3, #1
  40d4a0:	930d      	str	r3, [sp, #52]	; 0x34
  40d4a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d4a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40d4a6:	4293      	cmp	r3, r2
  40d4a8:	da42      	bge.n	40d530 <draw_letter_subpx+0x40c>
        bitmask = bitmask_init >> col_bit;
  40d4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40d4ac:	fa23 fe04 	lsr.w	lr, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d4b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d4b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
        uint32_t subpx_cnt = 0;
  40d4b4:	2100      	movs	r1, #0
  40d4b6:	469c      	mov	ip, r3
  40d4b8:	f8ad 7018 	strh.w	r7, [sp, #24]
        for(col = col_start; col < col_end; col++) {
  40d4bc:	e731      	b.n	40d322 <draw_letter_subpx+0x1fe>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, map_area.x1, map_area.y2,
  40d4be:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40d4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40d4c2:	4413      	add	r3, r2
  40d4c4:	469a      	mov	sl, r3
  40d4c6:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
  40d4ca:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
  40d4ce:	b28a      	uxth	r2, r1
  40d4d0:	1a9b      	subs	r3, r3, r2
  40d4d2:	b29b      	uxth	r3, r3
  40d4d4:	3301      	adds	r3, #1
  40d4d6:	b21b      	sxth	r3, r3
  40d4d8:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
  40d4dc:	4650      	mov	r0, sl
  40d4de:	f8df 909c 	ldr.w	r9, [pc, #156]	; 40d57c <draw_letter_subpx+0x458>
  40d4e2:	47c8      	blx	r9
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d4e4:	2800      	cmp	r0, #0
  40d4e6:	d1b5      	bne.n	40d454 <draw_letter_subpx+0x330>
  40d4e8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
  40d4ec:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
  40d4f0:	1ac9      	subs	r1, r1, r3
  40d4f2:	b289      	uxth	r1, r1
  40d4f4:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&map_area));
  40d4f6:	b209      	sxth	r1, r1
  40d4f8:	4650      	mov	r0, sl
  40d4fa:	4b1d      	ldr	r3, [pc, #116]	; (40d570 <draw_letter_subpx+0x44c>)
  40d4fc:	4798      	blx	r3
  40d4fe:	e7a9      	b.n	40d454 <draw_letter_subpx+0x330>
            _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d500:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d502:	9302      	str	r3, [sp, #8]
  40d504:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d506:	9301      	str	r3, [sp, #4]
  40d508:	2302      	movs	r3, #2
  40d50a:	9300      	str	r3, [sp, #0]
  40d50c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d50e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d510:	a91a      	add	r1, sp, #104	; 0x68
  40d512:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d514:	f8df a05c 	ldr.w	sl, [pc, #92]	; 40d574 <draw_letter_subpx+0x450>
  40d518:	47d0      	blx	sl
            map_area.y1 = map_area.y2 + 1;
  40d51a:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
  40d51e:	3301      	adds	r3, #1
  40d520:	b21b      	sxth	r3, r3
  40d522:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            map_area.y2 = map_area.y1;
  40d526:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            mask_p = 0;
  40d52a:	2300      	movs	r3, #0
  40d52c:	9310      	str	r3, [sp, #64]	; 0x40
  40d52e:	e7a1      	b.n	40d474 <draw_letter_subpx+0x350>
    if(map_area.y1 != map_area.y2) {
  40d530:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
  40d534:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
  40d538:	429a      	cmp	r2, r3
  40d53a:	d00e      	beq.n	40d55a <draw_letter_subpx+0x436>
        map_area.y2--;
  40d53c:	3b01      	subs	r3, #1
  40d53e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        _lv_blend_map(clip_area, &map_area, color_buf, mask_buf, LV_DRAW_MASK_RES_CHANGED, opa, blend_mode);
  40d542:	9b16      	ldr	r3, [sp, #88]	; 0x58
  40d544:	9302      	str	r3, [sp, #8]
  40d546:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40d548:	9301      	str	r3, [sp, #4]
  40d54a:	2302      	movs	r3, #2
  40d54c:	9300      	str	r3, [sp, #0]
  40d54e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40d552:	a91a      	add	r1, sp, #104	; 0x68
  40d554:	9817      	ldr	r0, [sp, #92]	; 0x5c
  40d556:	4c07      	ldr	r4, [pc, #28]	; (40d574 <draw_letter_subpx+0x450>)
  40d558:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d55a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40d55c:	4c06      	ldr	r4, [pc, #24]	; (40d578 <draw_letter_subpx+0x454>)
  40d55e:	47a0      	blx	r4
    _lv_mem_buf_release(color_buf);
  40d560:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d562:	47a0      	blx	r4
}
  40d564:	b01d      	add	sp, #116	; 0x74
  40d566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d56a:	bf00      	nop
  40d56c:	55555556 	.word	0x55555556
  40d570:	004163f5 	.word	0x004163f5
  40d574:	0040c421 	.word	0x0040c421
  40d578:	00416019 	.word	0x00416019
  40d57c:	0040f55d 	.word	0x0040f55d

0040d580 <draw_letter_normal>:
{
  40d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d584:	b093      	sub	sp, #76	; 0x4c
  40d586:	468e      	mov	lr, r1
  40d588:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
  40d58c:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
  40d590:	910d      	str	r1, [sp, #52]	; 0x34
    uint32_t bpp = g->bpp;
  40d592:	f892 a00a 	ldrb.w	sl, [r2, #10]
    if(bpp == 3) bpp = 4;
  40d596:	f1ba 0f03 	cmp.w	sl, #3
  40d59a:	d00e      	beq.n	40d5ba <draw_letter_normal+0x3a>
    switch(bpp) {
  40d59c:	f10a 34ff 	add.w	r4, sl, #4294967295
  40d5a0:	2c07      	cmp	r4, #7
  40d5a2:	f200 8147 	bhi.w	40d834 <draw_letter_normal+0x2b4>
  40d5a6:	e8df f014 	tbh	[pc, r4, lsl #1]
  40d5aa:	000b      	.short	0x000b
  40d5ac:	0145001e 	.word	0x0145001e
  40d5b0:	01450011 	.word	0x01450011
  40d5b4:	01450145 	.word	0x01450145
  40d5b8:	0017      	.short	0x0017
    if(bpp == 3) bpp = 4;
  40d5ba:	f04f 0a04 	mov.w	sl, #4
  40d5be:	e7ed      	b.n	40d59c <draw_letter_normal+0x1c>
            shades = 2;
  40d5c0:	2702      	movs	r7, #2
            bitmask_init  = 0x80;
  40d5c2:	2180      	movs	r1, #128	; 0x80
  40d5c4:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp1_opa_table;
  40d5c6:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 40d868 <draw_letter_normal+0x2e8>
  40d5ca:	e011      	b.n	40d5f0 <draw_letter_normal+0x70>
            shades = 16;
  40d5cc:	2710      	movs	r7, #16
            bitmask_init  = 0xF0;
  40d5ce:	21f0      	movs	r1, #240	; 0xf0
  40d5d0:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp4_opa_table;
  40d5d2:	f8df b298 	ldr.w	fp, [pc, #664]	; 40d86c <draw_letter_normal+0x2ec>
            break;
  40d5d6:	e00b      	b.n	40d5f0 <draw_letter_normal+0x70>
            shades = 256;
  40d5d8:	f44f 7780 	mov.w	r7, #256	; 0x100
            bitmask_init  = 0xFF;
  40d5dc:	21ff      	movs	r1, #255	; 0xff
  40d5de:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp8_opa_table;
  40d5e0:	f8df b28c 	ldr.w	fp, [pc, #652]	; 40d870 <draw_letter_normal+0x2f0>
            break;       /*No opa table, pixel value will be used directly*/
  40d5e4:	e004      	b.n	40d5f0 <draw_letter_normal+0x70>
            shades = 4;
  40d5e6:	2704      	movs	r7, #4
            bitmask_init  = 0xC0;
  40d5e8:	21c0      	movs	r1, #192	; 0xc0
  40d5ea:	9105      	str	r1, [sp, #20]
            bpp_opa_table_p = _lv_bpp2_opa_table;
  40d5ec:	f8df b284 	ldr.w	fp, [pc, #644]	; 40d874 <draw_letter_normal+0x2f4>
    if(opa < LV_OPA_MAX) {
  40d5f0:	2efc      	cmp	r6, #252	; 0xfc
  40d5f2:	d821      	bhi.n	40d638 <draw_letter_normal+0xb8>
        if(prev_opa != opa || prev_bpp != bpp) {
  40d5f4:	4c91      	ldr	r4, [pc, #580]	; (40d83c <draw_letter_normal+0x2bc>)
  40d5f6:	7824      	ldrb	r4, [r4, #0]
  40d5f8:	42a6      	cmp	r6, r4
  40d5fa:	d001      	beq.n	40d600 <draw_letter_normal+0x80>
  40d5fc:	2500      	movs	r5, #0
  40d5fe:	e009      	b.n	40d614 <draw_letter_normal+0x94>
  40d600:	4c8f      	ldr	r4, [pc, #572]	; (40d840 <draw_letter_normal+0x2c0>)
  40d602:	6824      	ldr	r4, [r4, #0]
  40d604:	45a2      	cmp	sl, r4
  40d606:	d010      	beq.n	40d62a <draw_letter_normal+0xaa>
  40d608:	2500      	movs	r5, #0
  40d60a:	e003      	b.n	40d614 <draw_letter_normal+0x94>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d60c:	4631      	mov	r1, r6
  40d60e:	4c8d      	ldr	r4, [pc, #564]	; (40d844 <draw_letter_normal+0x2c4>)
  40d610:	5561      	strb	r1, [r4, r5]
            for(i = 0; i < shades; i++) {
  40d612:	3501      	adds	r5, #1
  40d614:	42af      	cmp	r7, r5
  40d616:	d908      	bls.n	40d62a <draw_letter_normal+0xaa>
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
  40d618:	f81b 1005 	ldrb.w	r1, [fp, r5]
  40d61c:	29ff      	cmp	r1, #255	; 0xff
  40d61e:	d0f5      	beq.n	40d60c <draw_letter_normal+0x8c>
  40d620:	fb01 f106 	mul.w	r1, r1, r6
  40d624:	f3c1 2107 	ubfx	r1, r1, #8, #8
  40d628:	e7f1      	b.n	40d60e <draw_letter_normal+0x8e>
        prev_opa = opa;
  40d62a:	4c84      	ldr	r4, [pc, #528]	; (40d83c <draw_letter_normal+0x2bc>)
  40d62c:	7026      	strb	r6, [r4, #0]
        prev_bpp = bpp;
  40d62e:	4c84      	ldr	r4, [pc, #528]	; (40d840 <draw_letter_normal+0x2c0>)
  40d630:	f8c4 a000 	str.w	sl, [r4]
        bpp_opa_table_p = opa_table;
  40d634:	f8df b20c 	ldr.w	fp, [pc, #524]	; 40d844 <draw_letter_normal+0x2c4>
    int32_t box_w = g->box_w;
  40d638:	8855      	ldrh	r5, [r2, #2]
    int32_t box_h = g->box_h;
  40d63a:	8897      	ldrh	r7, [r2, #4]
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
  40d63c:	fb0a f405 	mul.w	r4, sl, r5
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d640:	f9b3 2000 	ldrsh.w	r2, [r3]
  40d644:	4282      	cmp	r2, r0
  40d646:	dd5a      	ble.n	40d6fe <draw_letter_normal+0x17e>
  40d648:	1a12      	subs	r2, r2, r0
  40d64a:	9207      	str	r2, [sp, #28]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d64c:	182a      	adds	r2, r5, r0
  40d64e:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
  40d652:	42b2      	cmp	r2, r6
  40d654:	dd56      	ble.n	40d704 <draw_letter_normal+0x184>
  40d656:	1a36      	subs	r6, r6, r0
  40d658:	f106 0801 	add.w	r8, r6, #1
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d65c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
  40d660:	4572      	cmp	r2, lr
  40d662:	dd51      	ble.n	40d708 <draw_letter_normal+0x188>
  40d664:	eba2 020e 	sub.w	r2, r2, lr
  40d668:	9206      	str	r2, [sp, #24]
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d66a:	eb07 020e 	add.w	r2, r7, lr
  40d66e:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
  40d672:	42b2      	cmp	r2, r6
  40d674:	dd4b      	ble.n	40d70e <draw_letter_normal+0x18e>
  40d676:	eba6 060e 	sub.w	r6, r6, lr
  40d67a:	1c72      	adds	r2, r6, #1
  40d67c:	9209      	str	r2, [sp, #36]	; 0x24
  40d67e:	930e      	str	r3, [sp, #56]	; 0x38
  40d680:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
  40d684:	9008      	str	r0, [sp, #32]
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
  40d686:	9b07      	ldr	r3, [sp, #28]
  40d688:	fb0a f303 	mul.w	r3, sl, r3
  40d68c:	9a06      	ldr	r2, [sp, #24]
  40d68e:	fb04 3402 	mla	r4, r4, r2, r3
    map_p += bit_ofs >> 3;
  40d692:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  40d694:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
  40d698:	f004 0407 	and.w	r4, r4, #7
    lv_coord_t hor_res = lv_disp_get_hor_res(_lv_refr_get_disp_refreshing());
  40d69c:	4b6a      	ldr	r3, [pc, #424]	; (40d848 <draw_letter_normal+0x2c8>)
  40d69e:	4798      	blx	r3
  40d6a0:	4b6a      	ldr	r3, [pc, #424]	; (40d84c <draw_letter_normal+0x2cc>)
  40d6a2:	4798      	blx	r3
    uint32_t mask_buf_size = box_w * box_h > hor_res ? hor_res : box_w * box_h;
  40d6a4:	fb07 f705 	mul.w	r7, r7, r5
  40d6a8:	42b8      	cmp	r0, r7
  40d6aa:	bfa8      	it	ge
  40d6ac:	4638      	movge	r0, r7
  40d6ae:	900a      	str	r0, [sp, #40]	; 0x28
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40d6b0:	4b67      	ldr	r3, [pc, #412]	; (40d850 <draw_letter_normal+0x2d0>)
  40d6b2:	4798      	blx	r3
  40d6b4:	4681      	mov	r9, r0
    fill_area.x1 = col_start + pos_x;
  40d6b6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
  40d6ba:	9b07      	ldr	r3, [sp, #28]
  40d6bc:	18d3      	adds	r3, r2, r3
  40d6be:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    fill_area.x2 = col_end  + pos_x - 1;
  40d6c2:	eb02 0308 	add.w	r3, r2, r8
  40d6c6:	b29b      	uxth	r3, r3
  40d6c8:	3b01      	subs	r3, #1
  40d6ca:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = row_start + pos_y;
  40d6ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40d6d0:	9a06      	ldr	r2, [sp, #24]
  40d6d2:	4411      	add	r1, r2
  40d6d4:	b20b      	sxth	r3, r1
  40d6d6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
  40d6da:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  40d6de:	4b5d      	ldr	r3, [pc, #372]	; (40d854 <draw_letter_normal+0x2d4>)
  40d6e0:	4798      	blx	r3
  40d6e2:	900b      	str	r0, [sp, #44]	; 0x2c
    uint32_t col_bit_max = 8 - bpp;
  40d6e4:	f1ca 0708 	rsb	r7, sl, #8
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
  40d6e8:	9b07      	ldr	r3, [sp, #28]
  40d6ea:	442b      	add	r3, r5
  40d6ec:	eba3 0308 	sub.w	r3, r3, r8
  40d6f0:	fb03 f30a 	mul.w	r3, r3, sl
  40d6f4:	930c      	str	r3, [sp, #48]	; 0x30
    int32_t mask_p = 0;
  40d6f6:	f04f 0e00 	mov.w	lr, #0
  40d6fa:	9708      	str	r7, [sp, #32]
    for(row = row_start ; row < row_end; row++) {
  40d6fc:	e03f      	b.n	40d77e <draw_letter_normal+0x1fe>
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
  40d6fe:	2200      	movs	r2, #0
  40d700:	9207      	str	r2, [sp, #28]
  40d702:	e7a3      	b.n	40d64c <draw_letter_normal+0xcc>
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
  40d704:	46a8      	mov	r8, r5
  40d706:	e7a9      	b.n	40d65c <draw_letter_normal+0xdc>
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
  40d708:	2200      	movs	r2, #0
  40d70a:	9206      	str	r2, [sp, #24]
  40d70c:	e7ad      	b.n	40d66a <draw_letter_normal+0xea>
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
  40d70e:	9709      	str	r7, [sp, #36]	; 0x24
  40d710:	e7b5      	b.n	40d67e <draw_letter_normal+0xfe>
                mask_buf[mask_p] = 0;
  40d712:	2300      	movs	r3, #0
  40d714:	f809 3005 	strb.w	r3, [r9, r5]
  40d718:	e012      	b.n	40d740 <draw_letter_normal+0x1c0>
                map_p++;
  40d71a:	3601      	adds	r6, #1
                bitmask = bitmask_init;
  40d71c:	9805      	ldr	r0, [sp, #20]
                col_bit = 0;
  40d71e:	2400      	movs	r4, #0
            mask_p++;
  40d720:	3501      	adds	r5, #1
        for(col = col_start; col < col_end; col++) {
  40d722:	3101      	adds	r1, #1
  40d724:	4541      	cmp	r1, r8
  40d726:	da11      	bge.n	40d74c <draw_letter_normal+0x1cc>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
  40d728:	7833      	ldrb	r3, [r6, #0]
  40d72a:	4003      	ands	r3, r0
  40d72c:	1b3a      	subs	r2, r7, r4
  40d72e:	40d3      	lsrs	r3, r2
            if(letter_px) {
  40d730:	f013 0fff 	tst.w	r3, #255	; 0xff
  40d734:	d0ed      	beq.n	40d712 <draw_letter_normal+0x192>
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
  40d736:	b2db      	uxtb	r3, r3
  40d738:	f81b 3003 	ldrb.w	r3, [fp, r3]
  40d73c:	f809 3005 	strb.w	r3, [r9, r5]
            if(col_bit < col_bit_max) {
  40d740:	42bc      	cmp	r4, r7
  40d742:	d2ea      	bcs.n	40d71a <draw_letter_normal+0x19a>
                col_bit += bpp;
  40d744:	4454      	add	r4, sl
                bitmask = bitmask >> bpp;
  40d746:	fa20 f00a 	lsr.w	r0, r0, sl
  40d74a:	e7e9      	b.n	40d720 <draw_letter_normal+0x1a0>
  40d74c:	9708      	str	r7, [sp, #32]
        if(other_mask_cnt) {
  40d74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40d750:	bb03      	cbnz	r3, 40d794 <draw_letter_normal+0x214>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
  40d752:	9b07      	ldr	r3, [sp, #28]
  40d754:	eba8 0303 	sub.w	r3, r8, r3
  40d758:	442b      	add	r3, r5
  40d75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40d75c:	429a      	cmp	r2, r3
  40d75e:	d938      	bls.n	40d7d2 <draw_letter_normal+0x252>
            fill_area.y2 ++;
  40d760:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d764:	3301      	adds	r3, #1
  40d766:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
  40d76a:	46ae      	mov	lr, r5
        col_bit += col_bit_row_ofs;
  40d76c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40d76e:	441c      	add	r4, r3
        map_p += (col_bit >> 3);
  40d770:	eb06 06d4 	add.w	r6, r6, r4, lsr #3
        col_bit = col_bit & 0x7;
  40d774:	f004 0407 	and.w	r4, r4, #7
    for(row = row_start ; row < row_end; row++) {
  40d778:	9b06      	ldr	r3, [sp, #24]
  40d77a:	3301      	adds	r3, #1
  40d77c:	9306      	str	r3, [sp, #24]
  40d77e:	9b06      	ldr	r3, [sp, #24]
  40d780:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40d782:	4293      	cmp	r3, r2
  40d784:	da3d      	bge.n	40d802 <draw_letter_normal+0x282>
        bitmask = bitmask_init >> col_bit;
  40d786:	9b05      	ldr	r3, [sp, #20]
  40d788:	fa23 f004 	lsr.w	r0, r3, r4
        for(col = col_start; col < col_end; col++) {
  40d78c:	4675      	mov	r5, lr
  40d78e:	9907      	ldr	r1, [sp, #28]
  40d790:	9f08      	ldr	r7, [sp, #32]
  40d792:	e7c7      	b.n	40d724 <draw_letter_normal+0x1a4>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
  40d794:	eb09 030e 	add.w	r3, r9, lr
  40d798:	4618      	mov	r0, r3
  40d79a:	930f      	str	r3, [sp, #60]	; 0x3c
  40d79c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
  40d7a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  40d7a4:	b28a      	uxth	r2, r1
  40d7a6:	1a9b      	subs	r3, r3, r2
  40d7a8:	b29b      	uxth	r3, r3
  40d7aa:	3301      	adds	r3, #1
  40d7ac:	b21b      	sxth	r3, r3
  40d7ae:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40d7b2:	4f29      	ldr	r7, [pc, #164]	; (40d858 <draw_letter_normal+0x2d8>)
  40d7b4:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40d7b6:	2800      	cmp	r0, #0
  40d7b8:	d1cb      	bne.n	40d752 <draw_letter_normal+0x1d2>
  40d7ba:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  40d7be:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  40d7c2:	1ac9      	subs	r1, r1, r3
  40d7c4:	b289      	uxth	r1, r1
  40d7c6:	3101      	adds	r1, #1
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
  40d7c8:	b209      	sxth	r1, r1
  40d7ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
  40d7cc:	4b23      	ldr	r3, [pc, #140]	; (40d85c <draw_letter_normal+0x2dc>)
  40d7ce:	4798      	blx	r3
  40d7d0:	e7bf      	b.n	40d752 <draw_letter_normal+0x1d2>
            _lv_blend_fill(clip_area, &fill_area,
  40d7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d7d4:	9302      	str	r3, [sp, #8]
  40d7d6:	23ff      	movs	r3, #255	; 0xff
  40d7d8:	9301      	str	r3, [sp, #4]
  40d7da:	2302      	movs	r3, #2
  40d7dc:	9300      	str	r3, [sp, #0]
  40d7de:	464b      	mov	r3, r9
  40d7e0:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d7e4:	a910      	add	r1, sp, #64	; 0x40
  40d7e6:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d7e8:	4d1d      	ldr	r5, [pc, #116]	; (40d860 <draw_letter_normal+0x2e0>)
  40d7ea:	47a8      	blx	r5
            fill_area.y1 = fill_area.y2 + 1;
  40d7ec:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  40d7f0:	3301      	adds	r3, #1
  40d7f2:	b21b      	sxth	r3, r3
  40d7f4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
  40d7f8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
  40d7fc:	f04f 0e00 	mov.w	lr, #0
  40d800:	e7b4      	b.n	40d76c <draw_letter_normal+0x1ec>
    if(fill_area.y1 != fill_area.y2) {
  40d802:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  40d806:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40d80a:	429a      	cmp	r2, r3
  40d80c:	d00f      	beq.n	40d82e <draw_letter_normal+0x2ae>
        fill_area.y2--;
  40d80e:	3b01      	subs	r3, #1
  40d810:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(clip_area, &fill_area,
  40d814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40d816:	9302      	str	r3, [sp, #8]
  40d818:	23ff      	movs	r3, #255	; 0xff
  40d81a:	9301      	str	r3, [sp, #4]
  40d81c:	2302      	movs	r3, #2
  40d81e:	9300      	str	r3, [sp, #0]
  40d820:	464b      	mov	r3, r9
  40d822:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
  40d826:	a910      	add	r1, sp, #64	; 0x40
  40d828:	980e      	ldr	r0, [sp, #56]	; 0x38
  40d82a:	4c0d      	ldr	r4, [pc, #52]	; (40d860 <draw_letter_normal+0x2e0>)
  40d82c:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  40d82e:	4648      	mov	r0, r9
  40d830:	4b0c      	ldr	r3, [pc, #48]	; (40d864 <draw_letter_normal+0x2e4>)
  40d832:	4798      	blx	r3
}
  40d834:	b013      	add	sp, #76	; 0x4c
  40d836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d83a:	bf00      	nop
  40d83c:	2040c72c 	.word	0x2040c72c
  40d840:	2040c728 	.word	0x2040c728
  40d844:	2040c628 	.word	0x2040c628
  40d848:	00409269 	.word	0x00409269
  40d84c:	00414631 	.word	0x00414631
  40d850:	00416269 	.word	0x00416269
  40d854:	0040f625 	.word	0x0040f625
  40d858:	0040f55d 	.word	0x0040f55d
  40d85c:	004163f5 	.word	0x004163f5
  40d860:	0040c301 	.word	0x0040c301
  40d864:	00416019 	.word	0x00416019
  40d868:	004260e8 	.word	0x004260e8
  40d86c:	004260f0 	.word	0x004260f0
  40d870:	00426100 	.word	0x00426100
  40d874:	004260ec 	.word	0x004260ec

0040d878 <lv_draw_letter>:
{
  40d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d87c:	b089      	sub	sp, #36	; 0x24
  40d87e:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
  40d882:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    if(opa < LV_OPA_MIN) return;
  40d886:	2d01      	cmp	r5, #1
  40d888:	d937      	bls.n	40d8fa <lv_draw_letter+0x82>
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40d88a:	2dfd      	cmp	r5, #253	; 0xfd
  40d88c:	d900      	bls.n	40d890 <lv_draw_letter+0x18>
  40d88e:	25ff      	movs	r5, #255	; 0xff
    if(font_p == NULL) {
  40d890:	b39a      	cbz	r2, 40d8fa <lv_draw_letter+0x82>
  40d892:	469b      	mov	fp, r3
  40d894:	4614      	mov	r4, r2
  40d896:	4689      	mov	r9, r1
  40d898:	4607      	mov	r7, r0
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
  40d89a:	2300      	movs	r3, #0
  40d89c:	465a      	mov	r2, fp
  40d89e:	a905      	add	r1, sp, #20
  40d8a0:	4620      	mov	r0, r4
  40d8a2:	4e2c      	ldr	r6, [pc, #176]	; (40d954 <lv_draw_letter+0xdc>)
  40d8a4:	47b0      	blx	r6
    if(g_ret == false)  {
  40d8a6:	b340      	cbz	r0, 40d8fa <lv_draw_letter+0x82>
    if((g.box_h == 0) || (g.box_w == 0)) return;
  40d8a8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40d8ac:	b32b      	cbz	r3, 40d8fa <lv_draw_letter+0x82>
  40d8ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  40d8b2:	b312      	cbz	r2, 40d8fa <lv_draw_letter+0x82>
    int32_t pos_x = pos_p->x + g.ofs_x;
  40d8b4:	f9b7 a000 	ldrsh.w	sl, [r7]
  40d8b8:	f9bd 101a 	ldrsh.w	r1, [sp, #26]
  40d8bc:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
  40d8be:	f9b7 7002 	ldrsh.w	r7, [r7, #2]
  40d8c2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  40d8c6:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
  40d8ca:	1a09      	subs	r1, r1, r0
  40d8cc:	440f      	add	r7, r1
  40d8ce:	1aff      	subs	r7, r7, r3
  40d8d0:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
  40d8d4:	1a7f      	subs	r7, r7, r1
    if(pos_x + g.box_w < clip_area->x1 ||
  40d8d6:	4452      	add	r2, sl
  40d8d8:	f9b9 1000 	ldrsh.w	r1, [r9]
  40d8dc:	428a      	cmp	r2, r1
  40d8de:	db0c      	blt.n	40d8fa <lv_draw_letter+0x82>
       pos_x > clip_area->x2 ||
  40d8e0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
  40d8e4:	4592      	cmp	sl, r2
  40d8e6:	dc08      	bgt.n	40d8fa <lv_draw_letter+0x82>
       pos_y + g.box_h < clip_area->y1 ||
  40d8e8:	443b      	add	r3, r7
  40d8ea:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
       pos_x > clip_area->x2 ||
  40d8ee:	4293      	cmp	r3, r2
  40d8f0:	db03      	blt.n	40d8fa <lv_draw_letter+0x82>
       pos_y > clip_area->y2)  {
  40d8f2:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
       pos_y + g.box_h < clip_area->y1 ||
  40d8f6:	429f      	cmp	r7, r3
  40d8f8:	dd02      	ble.n	40d900 <lv_draw_letter+0x88>
}
  40d8fa:	b009      	add	sp, #36	; 0x24
  40d8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
  40d900:	4659      	mov	r1, fp
  40d902:	4620      	mov	r0, r4
  40d904:	4b14      	ldr	r3, [pc, #80]	; (40d958 <lv_draw_letter+0xe0>)
  40d906:	4798      	blx	r3
    if(map_p == NULL) {
  40d908:	2800      	cmp	r0, #0
  40d90a:	d0f6      	beq.n	40d8fa <lv_draw_letter+0x82>
    if(font_p->subpx) {
  40d90c:	7b22      	ldrb	r2, [r4, #12]
  40d90e:	f012 0f03 	tst.w	r2, #3
  40d912:	d00f      	beq.n	40d934 <lv_draw_letter+0xbc>
        draw_letter_subpx(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d914:	f8cd 800c 	str.w	r8, [sp, #12]
  40d918:	9502      	str	r5, [sp, #8]
  40d91a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d91e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d922:	9000      	str	r0, [sp, #0]
  40d924:	464b      	mov	r3, r9
  40d926:	aa05      	add	r2, sp, #20
  40d928:	b239      	sxth	r1, r7
  40d92a:	fa0f f08a 	sxth.w	r0, sl
  40d92e:	4c0b      	ldr	r4, [pc, #44]	; (40d95c <lv_draw_letter+0xe4>)
  40d930:	47a0      	blx	r4
  40d932:	e7e2      	b.n	40d8fa <lv_draw_letter+0x82>
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
  40d934:	f8cd 800c 	str.w	r8, [sp, #12]
  40d938:	9502      	str	r5, [sp, #8]
  40d93a:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
  40d93e:	f8ad 2004 	strh.w	r2, [sp, #4]
  40d942:	9000      	str	r0, [sp, #0]
  40d944:	464b      	mov	r3, r9
  40d946:	aa05      	add	r2, sp, #20
  40d948:	b239      	sxth	r1, r7
  40d94a:	fa0f f08a 	sxth.w	r0, sl
  40d94e:	4c04      	ldr	r4, [pc, #16]	; (40d960 <lv_draw_letter+0xe8>)
  40d950:	47a0      	blx	r4
  40d952:	e7d2      	b.n	40d8fa <lv_draw_letter+0x82>
  40d954:	00413475 	.word	0x00413475
  40d958:	0041346d 	.word	0x0041346d
  40d95c:	0040d125 	.word	0x0040d125
  40d960:	0040d581 	.word	0x0040d581

0040d964 <lv_draw_label_dsc_init>:
{
  40d964:	b510      	push	{r4, lr}
  40d966:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
  40d968:	2124      	movs	r1, #36	; 0x24
  40d96a:	4b0e      	ldr	r3, [pc, #56]	; (40d9a4 <lv_draw_label_dsc_init+0x40>)
  40d96c:	4798      	blx	r3
    dsc->opa = LV_OPA_COVER;
  40d96e:	23ff      	movs	r3, #255	; 0xff
  40d970:	7323      	strb	r3, [r4, #12]
    dsc->color = LV_COLOR_BLACK;
  40d972:	2300      	movs	r3, #0
  40d974:	8023      	strh	r3, [r4, #0]
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
  40d976:	4a0c      	ldr	r2, [pc, #48]	; (40d9a8 <lv_draw_label_dsc_init+0x44>)
  40d978:	60a2      	str	r2, [r4, #8]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
  40d97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  40d97e:	6162      	str	r2, [r4, #20]
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
  40d980:	61a2      	str	r2, [r4, #24]
    dsc->sel_color = LV_COLOR_BLACK;
  40d982:	8063      	strh	r3, [r4, #2]
    dsc->sel_bg_color = LV_COLOR_BLUE;
  40d984:	7922      	ldrb	r2, [r4, #4]
  40d986:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  40d98a:	f363 02c7 	bfi	r2, r3, #3, #5
  40d98e:	7122      	strb	r2, [r4, #4]
  40d990:	7962      	ldrb	r2, [r4, #5]
  40d992:	f042 021f 	orr.w	r2, r2, #31
  40d996:	f363 1247 	bfi	r2, r3, #5, #3
  40d99a:	7162      	strb	r2, [r4, #5]
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
  40d99c:	f884 3020 	strb.w	r3, [r4, #32]
  40d9a0:	bd10      	pop	{r4, pc}
  40d9a2:	bf00      	nop
  40d9a4:	004163f5 	.word	0x004163f5
  40d9a8:	2040002c 	.word	0x2040002c

0040d9ac <lv_draw_label>:
{
  40d9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40d9b0:	b0b7      	sub	sp, #220	; 0xdc
  40d9b2:	9c40      	ldr	r4, [sp, #256]	; 0x100
    if(dsc->opa <= LV_OPA_MIN) return;
  40d9b4:	7b15      	ldrb	r5, [r2, #12]
  40d9b6:	2d02      	cmp	r5, #2
  40d9b8:	d903      	bls.n	40d9c2 <lv_draw_label+0x16>
    const lv_font_t * font = dsc->font;
  40d9ba:	6895      	ldr	r5, [r2, #8]
  40d9bc:	9506      	str	r5, [sp, #24]
    if(txt[0] == '\0')  return;
  40d9be:	781d      	ldrb	r5, [r3, #0]
  40d9c0:	b915      	cbnz	r5, 40d9c8 <lv_draw_label+0x1c>
}
  40d9c2:	b037      	add	sp, #220	; 0xdc
  40d9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40d9c8:	930c      	str	r3, [sp, #48]	; 0x30
  40d9ca:	4616      	mov	r6, r2
  40d9cc:	460a      	mov	r2, r1
  40d9ce:	9109      	str	r1, [sp, #36]	; 0x24
  40d9d0:	4605      	mov	r5, r0
  40d9d2:	9010      	str	r0, [sp, #64]	; 0x40
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
  40d9d4:	4601      	mov	r1, r0
  40d9d6:	a834      	add	r0, sp, #208	; 0xd0
  40d9d8:	4ba8      	ldr	r3, [pc, #672]	; (40dc7c <lv_draw_label+0x2d0>)
  40d9da:	4798      	blx	r3
    if(!clip_ok) return;
  40d9dc:	2800      	cmp	r0, #0
  40d9de:	d0f0      	beq.n	40d9c2 <lv_draw_label+0x16>
    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
  40d9e0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40d9e4:	f012 0f02 	tst.w	r2, #2
  40d9e8:	d12b      	bne.n	40da42 <lv_draw_label+0x96>
  40d9ea:	88ab      	ldrh	r3, [r5, #4]
  40d9ec:	882a      	ldrh	r2, [r5, #0]
  40d9ee:	1a9b      	subs	r3, r3, r2
  40d9f0:	b29b      	uxth	r3, r3
  40d9f2:	3301      	adds	r3, #1
  40d9f4:	b21b      	sxth	r3, r3
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  40d9f6:	9a06      	ldr	r2, [sp, #24]
  40d9f8:	f9b2 8008 	ldrsh.w	r8, [r2, #8]
    int32_t line_height = line_height_font + dsc->line_space;
  40d9fc:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40da00:	4442      	add	r2, r8
  40da02:	920d      	str	r2, [sp, #52]	; 0x34
    pos.x = coords->x1;
  40da04:	9810      	ldr	r0, [sp, #64]	; 0x40
  40da06:	f9b0 2000 	ldrsh.w	r2, [r0]
  40da0a:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
    pos.y = coords->y1;
  40da0e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    x_ofs = dsc->ofs_x;
  40da12:	f9b6 101c 	ldrsh.w	r1, [r6, #28]
  40da16:	9112      	str	r1, [sp, #72]	; 0x48
    y_ofs = dsc->ofs_y;
  40da18:	f9b6 101e 	ldrsh.w	r1, [r6, #30]
    pos.y += y_ofs;
  40da1c:	440a      	add	r2, r1
  40da1e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    if(hint && y_ofs == 0 && coords->y1 < 0) {
  40da22:	1c22      	adds	r2, r4, #0
  40da24:	bf18      	it	ne
  40da26:	2201      	movne	r2, #1
  40da28:	2900      	cmp	r1, #0
  40da2a:	bf14      	ite	ne
  40da2c:	2100      	movne	r1, #0
  40da2e:	f002 0101 	andeq.w	r1, r2, #1
  40da32:	b341      	cbz	r1, 40da86 <lv_draw_label+0xda>
  40da34:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  40da38:	2900      	cmp	r1, #0
  40da3a:	db13      	blt.n	40da64 <lv_draw_label+0xb8>
    int32_t last_line_start = -1;
  40da3c:	f04f 37ff 	mov.w	r7, #4294967295
  40da40:	e023      	b.n	40da8a <lv_draw_label+0xde>
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
  40da42:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40da46:	9202      	str	r2, [sp, #8]
  40da48:	f647 4218 	movw	r2, #31768	; 0x7c18
  40da4c:	9201      	str	r2, [sp, #4]
  40da4e:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
  40da52:	9200      	str	r2, [sp, #0]
  40da54:	68b2      	ldr	r2, [r6, #8]
  40da56:	990c      	ldr	r1, [sp, #48]	; 0x30
  40da58:	a818      	add	r0, sp, #96	; 0x60
  40da5a:	4d89      	ldr	r5, [pc, #548]	; (40dc80 <lv_draw_label+0x2d4>)
  40da5c:	47a8      	blx	r5
        w = p.x;
  40da5e:	f9bd 3060 	ldrsh.w	r3, [sp, #96]	; 0x60
  40da62:	e7c8      	b.n	40d9f6 <lv_draw_label+0x4a>
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
  40da64:	68a0      	ldr	r0, [r4, #8]
  40da66:	1a40      	subs	r0, r0, r1
  40da68:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
  40da6c:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
  40da70:	980d      	ldr	r0, [sp, #52]	; 0x34
  40da72:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
  40da76:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
  40da7a:	dd02      	ble.n	40da82 <lv_draw_label+0xd6>
            hint->line_start = -1;
  40da7c:	f04f 31ff 	mov.w	r1, #4294967295
  40da80:	6021      	str	r1, [r4, #0]
        last_line_start = hint->line_start;
  40da82:	6827      	ldr	r7, [r4, #0]
  40da84:	e001      	b.n	40da8a <lv_draw_label+0xde>
    int32_t last_line_start = -1;
  40da86:	f04f 37ff 	mov.w	r7, #4294967295
    if(hint && last_line_start >= 0) {
  40da8a:	2f00      	cmp	r7, #0
  40da8c:	bfb4      	ite	lt
  40da8e:	2200      	movlt	r2, #0
  40da90:	f002 0201 	andge.w	r2, r2, #1
  40da94:	b1d2      	cbz	r2, 40dacc <lv_draw_label+0x120>
        pos.y += hint->y;
  40da96:	6862      	ldr	r2, [r4, #4]
  40da98:	f8bd 10ce 	ldrh.w	r1, [sp, #206]	; 0xce
  40da9c:	440a      	add	r2, r1
  40da9e:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40daa2:	b21b      	sxth	r3, r3
  40daa4:	4619      	mov	r1, r3
  40daa6:	930e      	str	r3, [sp, #56]	; 0x38
  40daa8:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40daac:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40dab0:	9300      	str	r3, [sp, #0]
  40dab2:	460b      	mov	r3, r1
  40dab4:	9906      	ldr	r1, [sp, #24]
  40dab6:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dab8:	4438      	add	r0, r7
  40daba:	4d72      	ldr	r5, [pc, #456]	; (40dc84 <lv_draw_label+0x2d8>)
  40dabc:	47a8      	blx	r5
  40dabe:	eb07 0b00 	add.w	fp, r7, r0
  40dac2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  40dac6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    while(pos.y + line_height_font < mask->y1) {
  40daca:	e007      	b.n	40dadc <lv_draw_label+0x130>
    uint32_t line_start     = 0;
  40dacc:	2700      	movs	r7, #0
  40dace:	e7e8      	b.n	40daa2 <lv_draw_label+0xf6>
        if(txt[line_start] == '\0') return;
  40dad0:	782b      	ldrb	r3, [r5, #0]
        line_start = line_end;
  40dad2:	465f      	mov	r7, fp
        if(txt[line_start] == '\0') return;
  40dad4:	2b00      	cmp	r3, #0
  40dad6:	f43f af74 	beq.w	40d9c2 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40dada:	4683      	mov	fp, r0
    while(pos.y + line_height_font < mask->y1) {
  40dadc:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40dae0:	4443      	add	r3, r8
  40dae2:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40dae6:	4293      	cmp	r3, r2
  40dae8:	da28      	bge.n	40db3c <lv_draw_label+0x190>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40daea:	eb0a 050b 	add.w	r5, sl, fp
  40daee:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40daf2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40daf6:	9300      	str	r3, [sp, #0]
  40daf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40dafa:	9906      	ldr	r1, [sp, #24]
  40dafc:	4628      	mov	r0, r5
  40dafe:	4f61      	ldr	r7, [pc, #388]	; (40dc84 <lv_draw_label+0x2d8>)
  40db00:	47b8      	blx	r7
  40db02:	4458      	add	r0, fp
        pos.y += line_height;
  40db04:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40db08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40db0a:	4413      	add	r3, r2
  40db0c:	b21b      	sxth	r3, r3
  40db0e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
  40db12:	2c00      	cmp	r4, #0
  40db14:	d0dc      	beq.n	40dad0 <lv_draw_label+0x124>
  40db16:	f513 6f80 	cmn.w	r3, #1024	; 0x400
  40db1a:	dbd9      	blt.n	40dad0 <lv_draw_label+0x124>
  40db1c:	6823      	ldr	r3, [r4, #0]
  40db1e:	2b00      	cmp	r3, #0
  40db20:	dad6      	bge.n	40dad0 <lv_draw_label+0x124>
            hint->line_start = line_start;
  40db22:	f8c4 b000 	str.w	fp, [r4]
            hint->y          = pos.y - coords->y1;
  40db26:	f9bd 30ce 	ldrsh.w	r3, [sp, #206]	; 0xce
  40db2a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40db2c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40db30:	1a9b      	subs	r3, r3, r2
  40db32:	6063      	str	r3, [r4, #4]
            hint->coord_y    = coords->y1;
  40db34:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  40db38:	60a3      	str	r3, [r4, #8]
  40db3a:	e7c9      	b.n	40dad0 <lv_draw_label+0x124>
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40db3c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40db40:	f012 0f04 	tst.w	r2, #4
  40db44:	d124      	bne.n	40db90 <lv_draw_label+0x1e4>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40db46:	f012 0f08 	tst.w	r2, #8
  40db4a:	d13d      	bne.n	40dbc8 <lv_draw_label+0x21c>
    lv_opa_t opa = dsc->opa;
  40db4c:	7b33      	ldrb	r3, [r6, #12]
  40db4e:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t sel_start = dsc->sel_start;
  40db50:	6973      	ldr	r3, [r6, #20]
  40db52:	4619      	mov	r1, r3
  40db54:	461c      	mov	r4, r3
    uint32_t sel_end = dsc->sel_end;
  40db56:	f8d6 8018 	ldr.w	r8, [r6, #24]
    if(sel_start > sel_end) {
  40db5a:	4543      	cmp	r3, r8
  40db5c:	d802      	bhi.n	40db64 <lv_draw_label+0x1b8>
  40db5e:	4643      	mov	r3, r8
    uint32_t sel_start = dsc->sel_start;
  40db60:	4688      	mov	r8, r1
    uint32_t sel_end = dsc->sel_end;
  40db62:	461c      	mov	r4, r3
    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
  40db64:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40db68:	f013 0f03 	tst.w	r3, #3
  40db6c:	d144      	bne.n	40dbf8 <lv_draw_label+0x24c>
    lv_draw_rect_dsc_init(&draw_dsc_sel);
  40db6e:	a81a      	add	r0, sp, #104	; 0x68
  40db70:	4b45      	ldr	r3, [pc, #276]	; (40dc88 <lv_draw_label+0x2dc>)
  40db72:	4798      	blx	r3
    draw_dsc_sel.bg_color = dsc->sel_bg_color;
  40db74:	88b3      	ldrh	r3, [r6, #4]
  40db76:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
    int32_t pos_x_start = pos.x;
  40db7a:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40db7e:	9313      	str	r3, [sp, #76]	; 0x4c
    uint32_t par_start = 0;
  40db80:	2300      	movs	r3, #0
  40db82:	9311      	str	r3, [sp, #68]	; 0x44
  40db84:	f8cd b01c 	str.w	fp, [sp, #28]
  40db88:	46bb      	mov	fp, r7
  40db8a:	46c2      	mov	sl, r8
  40db8c:	46a0      	mov	r8, r4
    while(txt[line_start] != '\0') {
  40db8e:	e170      	b.n	40de72 <lv_draw_label+0x4c6>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40db90:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40db94:	9200      	str	r2, [sp, #0]
  40db96:	9a06      	ldr	r2, [sp, #24]
  40db98:	ebab 0107 	sub.w	r1, fp, r7
  40db9c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40db9e:	4438      	add	r0, r7
  40dba0:	4c3a      	ldr	r4, [pc, #232]	; (40dc8c <lv_draw_label+0x2e0>)
  40dba2:	47a0      	blx	r4
  40dba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dba6:	8893      	ldrh	r3, [r2, #4]
  40dba8:	8812      	ldrh	r2, [r2, #0]
  40dbaa:	1a9b      	subs	r3, r3, r2
  40dbac:	b29b      	uxth	r3, r3
  40dbae:	3301      	adds	r3, #1
  40dbb0:	b21b      	sxth	r3, r3
        pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40dbb2:	1a1b      	subs	r3, r3, r0
  40dbb4:	d406      	bmi.n	40dbc4 <lv_draw_label+0x218>
  40dbb6:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40dbba:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40dbbe:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40dbc2:	e7c3      	b.n	40db4c <lv_draw_label+0x1a0>
  40dbc4:	3301      	adds	r3, #1
  40dbc6:	e7f6      	b.n	40dbb6 <lv_draw_label+0x20a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40dbc8:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40dbcc:	9200      	str	r2, [sp, #0]
  40dbce:	9a06      	ldr	r2, [sp, #24]
  40dbd0:	ebab 0107 	sub.w	r1, fp, r7
  40dbd4:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dbd6:	4438      	add	r0, r7
  40dbd8:	4c2c      	ldr	r4, [pc, #176]	; (40dc8c <lv_draw_label+0x2e0>)
  40dbda:	47a0      	blx	r4
  40dbdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40dbde:	8893      	ldrh	r3, [r2, #4]
  40dbe0:	8812      	ldrh	r2, [r2, #0]
  40dbe2:	1a9b      	subs	r3, r3, r2
  40dbe4:	b29b      	uxth	r3, r3
  40dbe6:	3301      	adds	r3, #1
  40dbe8:	b21b      	sxth	r3, r3
        pos.x += lv_area_get_width(coords) - line_width;
  40dbea:	1a1b      	subs	r3, r3, r0
  40dbec:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
  40dbf0:	4413      	add	r3, r2
  40dbf2:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40dbf6:	e7a9      	b.n	40db4c <lv_draw_label+0x1a0>
        lv_draw_line_dsc_init(&line_dsc);
  40dbf8:	a830      	add	r0, sp, #192	; 0xc0
  40dbfa:	4b25      	ldr	r3, [pc, #148]	; (40dc90 <lv_draw_label+0x2e4>)
  40dbfc:	4798      	blx	r3
        line_dsc.color = dsc->color;
  40dbfe:	8833      	ldrh	r3, [r6, #0]
  40dc00:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40dc04:	9b06      	ldr	r3, [sp, #24]
  40dc06:	f993 300e 	ldrsb.w	r3, [r3, #14]
  40dc0a:	b173      	cbz	r3, 40dc2a <lv_draw_label+0x27e>
  40dc0c:	b21b      	sxth	r3, r3
  40dc0e:	f8ad 30c2 	strh.w	r3, [sp, #194]	; 0xc2
        line_dsc.opa = dsc->opa;
  40dc12:	7b33      	ldrb	r3, [r6, #12]
  40dc14:	f88d 30c8 	strb.w	r3, [sp, #200]	; 0xc8
        line_dsc.blend_mode = dsc->blend_mode;
  40dc18:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
  40dc1c:	f89d 30c9 	ldrb.w	r3, [sp, #201]	; 0xc9
  40dc20:	f362 0301 	bfi	r3, r2, #0, #2
  40dc24:	f88d 30c9 	strb.w	r3, [sp, #201]	; 0xc9
  40dc28:	e7a1      	b.n	40db6e <lv_draw_label+0x1c2>
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
  40dc2a:	2301      	movs	r3, #1
  40dc2c:	e7ef      	b.n	40dc0e <lv_draw_label+0x262>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
  40dc2e:	4b19      	ldr	r3, [pc, #100]	; (40dc94 <lv_draw_label+0x2e8>)
  40dc30:	681b      	ldr	r3, [r3, #0]
  40dc32:	4459      	add	r1, fp
  40dc34:	980c      	ldr	r0, [sp, #48]	; 0x30
  40dc36:	4798      	blx	r3
  40dc38:	9008      	str	r0, [sp, #32]
  40dc3a:	e093      	b.n	40dd64 <lv_draw_label+0x3b8>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
  40dc3c:	b91f      	cbnz	r7, 40dc46 <lv_draw_label+0x29a>
                        par_start = i;
  40dc3e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40dc40:	9311      	str	r3, [sp, #68]	; 0x44
                        cmd_state = CMD_STATE_PAR;
  40dc42:	2701      	movs	r7, #1
                        continue;
  40dc44:	e07c      	b.n	40dd40 <lv_draw_label+0x394>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
  40dc46:	2f01      	cmp	r7, #1
  40dc48:	d004      	beq.n	40dc54 <lv_draw_label+0x2a8>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
  40dc4a:	2f02      	cmp	r7, #2
  40dc4c:	f040 80a0 	bne.w	40dd90 <lv_draw_label+0x3e4>
                        cmd_state = CMD_STATE_WAIT;
  40dc50:	2700      	movs	r7, #0
  40dc52:	e075      	b.n	40dd40 <lv_draw_label+0x394>
                        cmd_state = CMD_STATE_WAIT;
  40dc54:	2700      	movs	r7, #0
  40dc56:	e09b      	b.n	40dd90 <lv_draw_label+0x3e4>
                    if(letter == ' ') {
  40dc58:	9b05      	ldr	r3, [sp, #20]
  40dc5a:	2b20      	cmp	r3, #32
  40dc5c:	d170      	bne.n	40dd40 <lv_draw_label+0x394>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
  40dc5e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
  40dc60:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40dc62:	1a9b      	subs	r3, r3, r2
  40dc64:	2b07      	cmp	r3, #7
  40dc66:	d004      	beq.n	40dc72 <lv_draw_label+0x2c6>
                            recolor.full = dsc->color.full;
  40dc68:	8833      	ldrh	r3, [r6, #0]
  40dc6a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40dc6e:	2702      	movs	r7, #2
                    continue;
  40dc70:	e066      	b.n	40dd40 <lv_draw_label+0x394>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
  40dc72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40dc74:	1899      	adds	r1, r3, r2
    uint8_t * d8 = (uint8_t *)dst;
  40dc76:	aa18      	add	r2, sp, #96	; 0x60
  40dc78:	2306      	movs	r3, #6
  40dc7a:	e012      	b.n	40dca2 <lv_draw_label+0x2f6>
  40dc7c:	00414ef3 	.word	0x00414ef3
  40dc80:	00416e21 	.word	0x00416e21
  40dc84:	00416c95 	.word	0x00416c95
  40dc88:	00411d9d 	.word	0x00411d9d
  40dc8c:	00416d75 	.word	0x00416d75
  40dc90:	0040e7b5 	.word	0x0040e7b5
  40dc94:	20400054 	.word	0x20400054
        *d8 = *s8;
  40dc98:	f811 0b01 	ldrb.w	r0, [r1], #1
  40dc9c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40dca0:	3b01      	subs	r3, #1
    while(len) {
  40dca2:	2b00      	cmp	r3, #0
  40dca4:	d1f8      	bne.n	40dc98 <lv_draw_label+0x2ec>
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
  40dca6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
  40dcaa:	4db8      	ldr	r5, [pc, #736]	; (40df8c <lv_draw_label+0x5e0>)
  40dcac:	47a8      	blx	r5
  40dcae:	ea4f 1800 	mov.w	r8, r0, lsl #4
  40dcb2:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
  40dcb6:	47a8      	blx	r5
  40dcb8:	4480      	add	r8, r0
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
  40dcba:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
  40dcbe:	47a8      	blx	r5
  40dcc0:	0104      	lsls	r4, r0, #4
  40dcc2:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
  40dcc6:	47a8      	blx	r5
  40dcc8:	4404      	add	r4, r0
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
  40dcca:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
  40dcce:	47a8      	blx	r5
  40dcd0:	0107      	lsls	r7, r0, #4
  40dcd2:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
  40dcd6:	47a8      	blx	r5
  40dcd8:	183b      	adds	r3, r7, r0
                            recolor = lv_color_make(r, g, b);
  40dcda:	b2e4      	uxtb	r4, r4
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  40dcdc:	0962      	lsrs	r2, r4, #5
  40dcde:	f3c8 08c4 	ubfx	r8, r8, #3, #5
  40dce2:	f3c3 03c4 	ubfx	r3, r3, #3, #5
  40dce6:	f3c4 0482 	ubfx	r4, r4, #2, #3
  40dcea:	9914      	ldr	r1, [sp, #80]	; 0x50
  40dcec:	f362 0102 	bfi	r1, r2, #0, #3
  40dcf0:	460a      	mov	r2, r1
  40dcf2:	f368 02c7 	bfi	r2, r8, #3, #5
  40dcf6:	f363 220c 	bfi	r2, r3, #8, #5
  40dcfa:	4613      	mov	r3, r2
  40dcfc:	f364 334f 	bfi	r3, r4, #13, #3
  40dd00:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  40dd04:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
  40dd08:	2702      	movs	r7, #2
  40dd0a:	e019      	b.n	40dd40 <lv_draw_label+0x394>
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40dd0c:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
  40dd10:	e045      	b.n	40dd9e <lv_draw_label+0x3f2>
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
  40dd12:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
  40dd16:	9302      	str	r3, [sp, #8]
  40dd18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40dd1a:	9301      	str	r3, [sp, #4]
  40dd1c:	f8ad 8000 	strh.w	r8, [sp]
  40dd20:	9b05      	ldr	r3, [sp, #20]
  40dd22:	9a06      	ldr	r2, [sp, #24]
  40dd24:	9909      	ldr	r1, [sp, #36]	; 0x24
  40dd26:	a833      	add	r0, sp, #204	; 0xcc
  40dd28:	4c99      	ldr	r4, [pc, #612]	; (40df90 <lv_draw_label+0x5e4>)
  40dd2a:	47a0      	blx	r4
            if(letter_w > 0) {
  40dd2c:	2d00      	cmp	r5, #0
  40dd2e:	dd07      	ble.n	40dd40 <lv_draw_label+0x394>
                pos.x += letter_w + dsc->letter_space;
  40dd30:	8a33      	ldrh	r3, [r6, #16]
  40dd32:	441d      	add	r5, r3
  40dd34:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40dd38:	fa13 f585 	uxtah	r5, r3, r5
  40dd3c:	f8ad 50cc 	strh.w	r5, [sp, #204]	; 0xcc
        while(i < line_end - line_start) {
  40dd40:	9b07      	ldr	r3, [sp, #28]
  40dd42:	eba3 030b 	sub.w	r3, r3, fp
  40dd46:	992f      	ldr	r1, [sp, #188]	; 0xbc
  40dd48:	428b      	cmp	r3, r1
  40dd4a:	d95b      	bls.n	40de04 <lv_draw_label+0x458>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40dd4c:	f64f 74ff 	movw	r4, #65535	; 0xffff
  40dd50:	45a2      	cmp	sl, r4
  40dd52:	bf18      	it	ne
  40dd54:	45a1      	cmpne	r9, r4
  40dd56:	bf14      	ite	ne
  40dd58:	2401      	movne	r4, #1
  40dd5a:	2400      	moveq	r4, #0
  40dd5c:	f47f af67 	bne.w	40dc2e <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
  40dd60:	2300      	movs	r3, #0
  40dd62:	9308      	str	r3, [sp, #32]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
  40dd64:	4d8b      	ldr	r5, [pc, #556]	; (40df94 <lv_draw_label+0x5e8>)
  40dd66:	682b      	ldr	r3, [r5, #0]
  40dd68:	a92f      	add	r1, sp, #188	; 0xbc
  40dd6a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40dd6e:	4640      	mov	r0, r8
  40dd70:	4798      	blx	r3
  40dd72:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  40dd74:	682b      	ldr	r3, [r5, #0]
  40dd76:	2100      	movs	r1, #0
  40dd78:	982f      	ldr	r0, [sp, #188]	; 0xbc
  40dd7a:	4440      	add	r0, r8
  40dd7c:	4798      	blx	r3
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
  40dd7e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40dd82:	f013 0f01 	tst.w	r3, #1
  40dd86:	d006      	beq.n	40dd96 <lv_draw_label+0x3ea>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  40dd88:	9b05      	ldr	r3, [sp, #20]
  40dd8a:	2b23      	cmp	r3, #35	; 0x23
  40dd8c:	f43f af56 	beq.w	40dc3c <lv_draw_label+0x290>
                if(cmd_state == CMD_STATE_PAR) {
  40dd90:	2f01      	cmp	r7, #1
  40dd92:	f43f af61 	beq.w	40dc58 <lv_draw_label+0x2ac>
            lv_color_t color = dsc->color;
  40dd96:	f8b6 8000 	ldrh.w	r8, [r6]
            if(cmd_state == CMD_STATE_IN) color = recolor;
  40dd9a:	2f02      	cmp	r7, #2
  40dd9c:	d0b6      	beq.n	40dd0c <lv_draw_label+0x360>
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  40dd9e:	4602      	mov	r2, r0
  40dda0:	9905      	ldr	r1, [sp, #20]
  40dda2:	9806      	ldr	r0, [sp, #24]
  40dda4:	4b7c      	ldr	r3, [pc, #496]	; (40df98 <lv_draw_label+0x5ec>)
  40dda6:	4798      	blx	r3
  40dda8:	4605      	mov	r5, r0
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
  40ddaa:	2c00      	cmp	r4, #0
  40ddac:	d0b1      	beq.n	40dd12 <lv_draw_label+0x366>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
  40ddae:	9a08      	ldr	r2, [sp, #32]
  40ddb0:	4613      	mov	r3, r2
  40ddb2:	4592      	cmp	sl, r2
  40ddb4:	bf8c      	ite	hi
  40ddb6:	2300      	movhi	r3, #0
  40ddb8:	2301      	movls	r3, #1
  40ddba:	4591      	cmp	r9, r2
  40ddbc:	bf98      	it	ls
  40ddbe:	2300      	movls	r3, #0
  40ddc0:	2b00      	cmp	r3, #0
  40ddc2:	d0a6      	beq.n	40dd12 <lv_draw_label+0x366>
                    sel_coords.x1 = pos.x;
  40ddc4:	f9bd 30cc 	ldrsh.w	r3, [sp, #204]	; 0xcc
  40ddc8:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    sel_coords.y1 = pos.y;
  40ddcc:	f9bd 20ce 	ldrsh.w	r2, [sp, #206]	; 0xce
  40ddd0:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
  40ddd4:	fa10 f383 	uxtah	r3, r0, r3
  40ddd8:	8a31      	ldrh	r1, [r6, #16]
  40ddda:	fa11 f383 	uxtah	r3, r1, r3
  40ddde:	b29b      	uxth	r3, r3
  40dde0:	3b01      	subs	r3, #1
  40dde2:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
                    sel_coords.y2 = pos.y + line_height - 1;
  40dde6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40dde8:	fa13 f282 	uxtah	r2, r3, r2
  40ddec:	b292      	uxth	r2, r2
  40ddee:	3a01      	subs	r2, #1
  40ddf0:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
  40ddf4:	aa1a      	add	r2, sp, #104	; 0x68
  40ddf6:	9909      	ldr	r1, [sp, #36]	; 0x24
  40ddf8:	a818      	add	r0, sp, #96	; 0x60
  40ddfa:	4b68      	ldr	r3, [pc, #416]	; (40df9c <lv_draw_label+0x5f0>)
  40ddfc:	4798      	blx	r3
                    color = dsc->sel_color;
  40ddfe:	f8b6 8002 	ldrh.w	r8, [r6, #2]
  40de02:	e786      	b.n	40dd12 <lv_draw_label+0x366>
  40de04:	46c8      	mov	r8, r9
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
  40de06:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40de0a:	f013 0f02 	tst.w	r3, #2
  40de0e:	d143      	bne.n	40de98 <lv_draw_label+0x4ec>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
  40de10:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
  40de14:	f013 0f01 	tst.w	r3, #1
  40de18:	d166      	bne.n	40dee8 <lv_draw_label+0x53c>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40de1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40de1c:	9f07      	ldr	r7, [sp, #28]
  40de1e:	19d5      	adds	r5, r2, r7
  40de20:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  40de24:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
  40de28:	9300      	str	r3, [sp, #0]
  40de2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40de2c:	9906      	ldr	r1, [sp, #24]
  40de2e:	4628      	mov	r0, r5
  40de30:	4c5b      	ldr	r4, [pc, #364]	; (40dfa0 <lv_draw_label+0x5f4>)
  40de32:	47a0      	blx	r4
  40de34:	183c      	adds	r4, r7, r0
        pos.x = coords->x1;
  40de36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  40de38:	f9b3 3000 	ldrsh.w	r3, [r3]
  40de3c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
  40de40:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
  40de44:	f012 0f04 	tst.w	r2, #4
  40de48:	d170      	bne.n	40df2c <lv_draw_label+0x580>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
  40de4a:	f012 0f08 	tst.w	r2, #8
  40de4e:	f040 8087 	bne.w	40df60 <lv_draw_label+0x5b4>
        pos.y += line_height;
  40de52:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40de56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  40de58:	4413      	add	r3, r2
  40de5a:	b21b      	sxth	r3, r3
  40de5c:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        if(pos.y > mask->y2) return;
  40de60:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40de62:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
        line_start = line_end;
  40de66:	f8dd b01c 	ldr.w	fp, [sp, #28]
        if(pos.y > mask->y2) return;
  40de6a:	4293      	cmp	r3, r2
  40de6c:	f73f ada9 	bgt.w	40d9c2 <lv_draw_label+0x16>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
  40de70:	9407      	str	r4, [sp, #28]
    while(txt[line_start] != '\0') {
  40de72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40de74:	4613      	mov	r3, r2
  40de76:	445b      	add	r3, fp
  40de78:	930a      	str	r3, [sp, #40]	; 0x28
  40de7a:	f812 300b 	ldrb.w	r3, [r2, fp]
  40de7e:	2b00      	cmp	r3, #0
  40de80:	f43f ad9f 	beq.w	40d9c2 <lv_draw_label+0x16>
        pos.x += x_ofs;
  40de84:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40de88:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40de8a:	4413      	add	r3, r2
  40de8c:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        i         = 0;
  40de90:	2700      	movs	r7, #0
  40de92:	972f      	str	r7, [sp, #188]	; 0xbc
  40de94:	46c1      	mov	r9, r8
        while(i < line_end - line_start) {
  40de96:	e753      	b.n	40dd40 <lv_draw_label+0x394>
            p1.x = pos_x_start;
  40de98:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40de9c:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40dea0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40dea4:	68b2      	ldr	r2, [r6, #8]
  40dea6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
  40deaa:	2a00      	cmp	r2, #0
  40deac:	db18      	blt.n	40dee0 <lv_draw_label+0x534>
  40deae:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40deb2:	b29b      	uxth	r3, r3
  40deb4:	f9bd 20c2 	ldrsh.w	r2, [sp, #194]	; 0xc2
  40deb8:	2a00      	cmp	r2, #0
  40deba:	db13      	blt.n	40dee4 <lv_draw_label+0x538>
  40debc:	eb03 0362 	add.w	r3, r3, r2, asr #1
  40dec0:	b21b      	sxth	r3, r3
  40dec2:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40dec6:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40deca:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40dece:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40ded2:	ab30      	add	r3, sp, #192	; 0xc0
  40ded4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40ded6:	a918      	add	r1, sp, #96	; 0x60
  40ded8:	a817      	add	r0, sp, #92	; 0x5c
  40deda:	4c32      	ldr	r4, [pc, #200]	; (40dfa4 <lv_draw_label+0x5f8>)
  40dedc:	47a0      	blx	r4
  40dede:	e797      	b.n	40de10 <lv_draw_label+0x464>
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
  40dee0:	3201      	adds	r2, #1
  40dee2:	e7e4      	b.n	40deae <lv_draw_label+0x502>
  40dee4:	3201      	adds	r2, #1
  40dee6:	e7e9      	b.n	40debc <lv_draw_label+0x510>
            p1.x = pos_x_start;
  40dee8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  40deec:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
  40def0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
  40def4:	68b2      	ldr	r2, [r6, #8]
  40def6:	8911      	ldrh	r1, [r2, #8]
  40def8:	440b      	add	r3, r1
  40defa:	b29b      	uxth	r3, r3
  40defc:	8952      	ldrh	r2, [r2, #10]
  40defe:	1a9b      	subs	r3, r3, r2
  40df00:	b29b      	uxth	r3, r3
  40df02:	9a06      	ldr	r2, [sp, #24]
  40df04:	f992 200d 	ldrsb.w	r2, [r2, #13]
  40df08:	b292      	uxth	r2, r2
  40df0a:	1a9b      	subs	r3, r3, r2
  40df0c:	b21b      	sxth	r3, r3
  40df0e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
            p2.x = pos.x;
  40df12:	f9bd 20cc 	ldrsh.w	r2, [sp, #204]	; 0xcc
  40df16:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
            p2.y = p1.y;
  40df1a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            lv_draw_line(&p1, &p2, mask, &line_dsc);
  40df1e:	ab30      	add	r3, sp, #192	; 0xc0
  40df20:	9a09      	ldr	r2, [sp, #36]	; 0x24
  40df22:	a918      	add	r1, sp, #96	; 0x60
  40df24:	a817      	add	r0, sp, #92	; 0x5c
  40df26:	4c1f      	ldr	r4, [pc, #124]	; (40dfa4 <lv_draw_label+0x5f8>)
  40df28:	47a0      	blx	r4
  40df2a:	e776      	b.n	40de1a <lv_draw_label+0x46e>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40df2c:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40df30:	9200      	str	r2, [sp, #0]
  40df32:	9a06      	ldr	r2, [sp, #24]
  40df34:	4601      	mov	r1, r0
  40df36:	4628      	mov	r0, r5
  40df38:	4d1b      	ldr	r5, [pc, #108]	; (40dfa8 <lv_draw_label+0x5fc>)
  40df3a:	47a8      	blx	r5
  40df3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40df3e:	8893      	ldrh	r3, [r2, #4]
  40df40:	8812      	ldrh	r2, [r2, #0]
  40df42:	1a9b      	subs	r3, r3, r2
  40df44:	b29b      	uxth	r3, r3
  40df46:	3301      	adds	r3, #1
  40df48:	b21b      	sxth	r3, r3
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
  40df4a:	1a18      	subs	r0, r3, r0
  40df4c:	d406      	bmi.n	40df5c <lv_draw_label+0x5b0>
  40df4e:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
  40df52:	eb03 0360 	add.w	r3, r3, r0, asr #1
  40df56:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40df5a:	e77a      	b.n	40de52 <lv_draw_label+0x4a6>
  40df5c:	3001      	adds	r0, #1
  40df5e:	e7f6      	b.n	40df4e <lv_draw_label+0x5a2>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
  40df60:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
  40df64:	9200      	str	r2, [sp, #0]
  40df66:	9a06      	ldr	r2, [sp, #24]
  40df68:	4601      	mov	r1, r0
  40df6a:	4628      	mov	r0, r5
  40df6c:	4d0e      	ldr	r5, [pc, #56]	; (40dfa8 <lv_draw_label+0x5fc>)
  40df6e:	47a8      	blx	r5
  40df70:	9a10      	ldr	r2, [sp, #64]	; 0x40
  40df72:	8893      	ldrh	r3, [r2, #4]
  40df74:	8812      	ldrh	r2, [r2, #0]
  40df76:	1a9b      	subs	r3, r3, r2
  40df78:	b29b      	uxth	r3, r3
  40df7a:	3301      	adds	r3, #1
  40df7c:	b21b      	sxth	r3, r3
            pos.x += lv_area_get_width(coords) - line_width;
  40df7e:	1a1b      	subs	r3, r3, r0
  40df80:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
  40df84:	4403      	add	r3, r0
  40df86:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
  40df8a:	e762      	b.n	40de52 <lv_draw_label+0x4a6>
  40df8c:	0040d0e1 	.word	0x0040d0e1
  40df90:	0040d879 	.word	0x0040d879
  40df94:	20400058 	.word	0x20400058
  40df98:	0041347d 	.word	0x0041347d
  40df9c:	00411de9 	.word	0x00411de9
  40dfa0:	00416c95 	.word	0x00416c95
  40dfa4:	0040e7d1 	.word	0x0040e7d1
  40dfa8:	00416d75 	.word	0x00416d75

0040dfac <draw_line_hor>:
 **********************/

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40dfb0:	b08b      	sub	sp, #44	; 0x2c
  40dfb2:	4681      	mov	r9, r0
  40dfb4:	468a      	mov	sl, r1
  40dfb6:	9204      	str	r2, [sp, #16]
  40dfb8:	461c      	mov	r4, r3
    lv_opa_t opa = dsc->opa;
  40dfba:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40dfbe:	4b76      	ldr	r3, [pc, #472]	; (40e198 <draw_line_hor+0x1ec>)
  40dfc0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40dfc2:	4b76      	ldr	r3, [pc, #472]	; (40e19c <draw_line_hor+0x1f0>)
  40dfc4:	4798      	blx	r3
  40dfc6:	4606      	mov	r6, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40dfc8:	f9b4 5002 	ldrsh.w	r5, [r4, #2]
  40dfcc:	3d01      	subs	r5, #1
    int32_t w_half0 = w >> 1;
  40dfce:	ea4f 0865 	mov.w	r8, r5, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40dfd2:	f005 0501 	and.w	r5, r5, #1
  40dfd6:	4445      	add	r5, r8

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dfd8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40dfdc:	b123      	cbz	r3, 40dfe8 <draw_line_hor+0x3c>
  40dfde:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40dfe2:	b943      	cbnz	r3, 40dff6 <draw_line_hor+0x4a>
  40dfe4:	2700      	movs	r7, #0
  40dfe6:	e000      	b.n	40dfea <draw_line_hor+0x3e>
  40dfe8:	2700      	movs	r7, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40dfea:	4b6d      	ldr	r3, [pc, #436]	; (40e1a0 <draw_line_hor+0x1f4>)
  40dfec:	4798      	blx	r3
  40dfee:	b920      	cbnz	r0, 40dffa <draw_line_hor+0x4e>
    else if(dashed) simple_mode = false;
  40dff0:	bb7f      	cbnz	r7, 40e052 <draw_line_hor+0xa6>
    bool simple_mode = true;
  40dff2:	2201      	movs	r2, #1
  40dff4:	e002      	b.n	40dffc <draw_line_hor+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40dff6:	2701      	movs	r7, #1
  40dff8:	e7f7      	b.n	40dfea <draw_line_hor+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40dffa:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
  40dffc:	f9ba 3000 	ldrsh.w	r3, [sl]
  40e000:	f9b9 1000 	ldrsh.w	r1, [r9]
  40e004:	4618      	mov	r0, r3
  40e006:	428b      	cmp	r3, r1
  40e008:	bfa8      	it	ge
  40e00a:	4608      	movge	r0, r1
  40e00c:	f8ad 0020 	strh.w	r0, [sp, #32]
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
  40e010:	428b      	cmp	r3, r1
  40e012:	bfb8      	it	lt
  40e014:	460b      	movlt	r3, r1
  40e016:	b29b      	uxth	r3, r3
  40e018:	3b01      	subs	r3, #1
  40e01a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    draw_area.y1 = point1->y - w_half1;
  40e01e:	f8b9 3002 	ldrh.w	r3, [r9, #2]
  40e022:	1b5d      	subs	r5, r3, r5
  40e024:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
    draw_area.y2 = point1->y + w_half0;
  40e028:	4498      	add	r8, r3
  40e02a:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e02e:	b192      	cbz	r2, 40e056 <draw_line_hor+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e030:	7a63      	ldrb	r3, [r4, #9]
  40e032:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e036:	8822      	ldrh	r2, [r4, #0]
  40e038:	9302      	str	r3, [sp, #8]
  40e03a:	f8cd b004 	str.w	fp, [sp, #4]
  40e03e:	2301      	movs	r3, #1
  40e040:	9300      	str	r3, [sp, #0]
  40e042:	2300      	movs	r3, #0
  40e044:	a908      	add	r1, sp, #32
  40e046:	9804      	ldr	r0, [sp, #16]
  40e048:	4c56      	ldr	r4, [pc, #344]	; (40e1a4 <draw_line_hor+0x1f8>)
  40e04a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e04c:	b00b      	add	sp, #44	; 0x2c
  40e04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e052:	2200      	movs	r2, #0
  40e054:	e7d2      	b.n	40dffc <draw_line_hor+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e056:	aa08      	add	r2, sp, #32
  40e058:	9904      	ldr	r1, [sp, #16]
  40e05a:	4610      	mov	r0, r2
  40e05c:	4b52      	ldr	r3, [pc, #328]	; (40e1a8 <draw_line_hor+0x1fc>)
  40e05e:	4798      	blx	r3
        if(!is_common) return;
  40e060:	2800      	cmp	r0, #0
  40e062:	d0f3      	beq.n	40e04c <draw_line_hor+0xa0>
        draw_area.x1 -= disp_area->x1;
  40e064:	f9bd e020 	ldrsh.w	lr, [sp, #32]
  40e068:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
  40e06c:	b28b      	uxth	r3, r1
  40e06e:	ebae 0503 	sub.w	r5, lr, r3
  40e072:	b2ad      	uxth	r5, r5
  40e074:	fa0f fc85 	sxth.w	ip, r5
  40e078:	f8ad c020 	strh.w	ip, [sp, #32]
        draw_area.y1 -= disp_area->y1;
  40e07c:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e080:	f8b6 8012 	ldrh.w	r8, [r6, #18]
  40e084:	eba2 0008 	sub.w	r0, r2, r8
  40e088:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
        draw_area.x2 -= disp_area->x1;
  40e08c:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	; 0x24
  40e090:	1ac3      	subs	r3, r0, r3
  40e092:	b29b      	uxth	r3, r3
  40e094:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= disp_area->y1;
  40e098:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
  40e09c:	eba9 0808 	sub.w	r8, r9, r8
  40e0a0:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
  40e0a4:	1b5d      	subs	r5, r3, r5
  40e0a6:	b2ad      	uxth	r5, r5
  40e0a8:	3501      	adds	r5, #1
  40e0aa:	b22d      	sxth	r5, r5
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e0ac:	f8ad e018 	strh.w	lr, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e0b0:	f8ad 001c 	strh.w	r0, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e0b4:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e0b8:	f8ad 201e 	strh.w	r2, [sp, #30]
        if(dashed) {
  40e0bc:	b1a7      	cbz	r7, 40e0e8 <draw_line_hor+0x13c>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
  40e0be:	4461      	add	r1, ip
  40e0c0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  40e0c4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  40e0c8:	4413      	add	r3, r2
  40e0ca:	fb91 fcf3 	sdiv	ip, r1, r3
  40e0ce:	fb03 111c 	mls	r1, r3, ip, r1
  40e0d2:	b20b      	sxth	r3, r1
  40e0d4:	9305      	str	r3, [sp, #20]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e0d6:	46ab      	mov	fp, r5
  40e0d8:	4628      	mov	r0, r5
  40e0da:	4b34      	ldr	r3, [pc, #208]	; (40e1ac <draw_line_hor+0x200>)
  40e0dc:	4798      	blx	r3
  40e0de:	4681      	mov	r9, r0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e0e0:	f9bd 8022 	ldrsh.w	r8, [sp, #34]	; 0x22
  40e0e4:	46ba      	mov	sl, r7
  40e0e6:	e037      	b.n	40e158 <draw_line_hor+0x1ac>
        lv_style_int_t dash_start = 0;
  40e0e8:	2300      	movs	r3, #0
  40e0ea:	9305      	str	r3, [sp, #20]
  40e0ec:	e7f3      	b.n	40e0d6 <draw_line_hor+0x12a>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e0ee:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  40e0f2:	440b      	add	r3, r1
  40e0f4:	429a      	cmp	r2, r3
  40e0f6:	da13      	bge.n	40e120 <draw_line_hor+0x174>
                            mask_buf[i] = 0x00;
  40e0f8:	2300      	movs	r3, #0
  40e0fa:	f809 3000 	strb.w	r3, [r9, r0]
  40e0fe:	4613      	mov	r3, r2
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
  40e100:	3001      	adds	r0, #1
  40e102:	b200      	sxth	r0, r0
  40e104:	3301      	adds	r3, #1
  40e106:	b21a      	sxth	r2, r3
  40e108:	42a8      	cmp	r0, r5
  40e10a:	da0b      	bge.n	40e124 <draw_line_hor+0x178>
                        if(dash_cnt <= dsc->dash_width) {
  40e10c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  40e110:	429a      	cmp	r2, r3
  40e112:	dcec      	bgt.n	40e0ee <draw_line_hor+0x142>
                            int16_t diff = dsc->dash_width - dash_cnt;
  40e114:	b299      	uxth	r1, r3
  40e116:	1a8a      	subs	r2, r1, r2
                            i += diff;
  40e118:	fa10 f082 	uxtah	r0, r0, r2
  40e11c:	b200      	sxth	r0, r0
  40e11e:	e7ef      	b.n	40e100 <draw_line_hor+0x154>
                            dash_cnt = 0;
  40e120:	2300      	movs	r3, #0
  40e122:	e7ed      	b.n	40e100 <draw_line_hor+0x154>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  40e124:	2002      	movs	r0, #2
                           dsc->blend_mode);
  40e126:	7a63      	ldrb	r3, [r4, #9]
  40e128:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(clip, &fill_area,
  40e12c:	9302      	str	r3, [sp, #8]
  40e12e:	7a23      	ldrb	r3, [r4, #8]
  40e130:	9301      	str	r3, [sp, #4]
  40e132:	9000      	str	r0, [sp, #0]
  40e134:	464b      	mov	r3, r9
  40e136:	8822      	ldrh	r2, [r4, #0]
  40e138:	a906      	add	r1, sp, #24
  40e13a:	9804      	ldr	r0, [sp, #16]
  40e13c:	4f19      	ldr	r7, [pc, #100]	; (40e1a4 <draw_line_hor+0x1f8>)
  40e13e:	47b8      	blx	r7
            fill_area.y1++;
  40e140:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e144:	3301      	adds	r3, #1
  40e146:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e14a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e14e:	3301      	adds	r3, #1
  40e150:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e154:	f108 0801 	add.w	r8, r8, #1
  40e158:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e15c:	4598      	cmp	r8, r3
  40e15e:	dc17      	bgt.n	40e190 <draw_line_hor+0x1e4>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e160:	4659      	mov	r1, fp
  40e162:	4648      	mov	r0, r9
  40e164:	4b12      	ldr	r3, [pc, #72]	; (40e1b0 <draw_line_hor+0x204>)
  40e166:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e168:	8a31      	ldrh	r1, [r6, #16]
  40e16a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e16e:	4419      	add	r1, r3
  40e170:	8a72      	ldrh	r2, [r6, #18]
  40e172:	4442      	add	r2, r8
  40e174:	462b      	mov	r3, r5
  40e176:	b212      	sxth	r2, r2
  40e178:	b209      	sxth	r1, r1
  40e17a:	4648      	mov	r0, r9
  40e17c:	4f0d      	ldr	r7, [pc, #52]	; (40e1b4 <draw_line_hor+0x208>)
  40e17e:	47b8      	blx	r7
            if(dashed) {
  40e180:	f1ba 0f00 	cmp.w	sl, #0
  40e184:	d0cf      	beq.n	40e126 <draw_line_hor+0x17a>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e186:	2800      	cmp	r0, #0
  40e188:	d0cd      	beq.n	40e126 <draw_line_hor+0x17a>
  40e18a:	9a05      	ldr	r2, [sp, #20]
  40e18c:	2000      	movs	r0, #0
  40e18e:	e7bb      	b.n	40e108 <draw_line_hor+0x15c>
        _lv_mem_buf_release(mask_buf);
  40e190:	4648      	mov	r0, r9
  40e192:	4b09      	ldr	r3, [pc, #36]	; (40e1b8 <draw_line_hor+0x20c>)
  40e194:	4798      	blx	r3
  40e196:	e759      	b.n	40e04c <draw_line_hor+0xa0>
  40e198:	00409269 	.word	0x00409269
  40e19c:	00414735 	.word	0x00414735
  40e1a0:	0040f625 	.word	0x0040f625
  40e1a4:	0040c301 	.word	0x0040c301
  40e1a8:	00414ef3 	.word	0x00414ef3
  40e1ac:	00416269 	.word	0x00416269
  40e1b0:	0041644d 	.word	0x0041644d
  40e1b4:	0040f55d 	.word	0x0040f55d
  40e1b8:	00416019 	.word	0x00416019

0040e1bc <draw_line_ver>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_ver(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
  40e1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e1c0:	b08b      	sub	sp, #44	; 0x2c
  40e1c2:	4680      	mov	r8, r0
  40e1c4:	468a      	mov	sl, r1
  40e1c6:	9204      	str	r2, [sp, #16]
  40e1c8:	461d      	mov	r5, r3
    lv_opa_t opa = dsc->opa;
  40e1ca:	f893 b008 	ldrb.w	fp, [r3, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e1ce:	4b71      	ldr	r3, [pc, #452]	; (40e394 <draw_line_ver+0x1d8>)
  40e1d0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e1d2:	4b71      	ldr	r3, [pc, #452]	; (40e398 <draw_line_ver+0x1dc>)
  40e1d4:	4798      	blx	r3
  40e1d6:	4607      	mov	r7, r0

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
  40e1d8:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  40e1dc:	3c01      	subs	r4, #1
    int32_t w_half0 = w >> 1;
  40e1de:	ea4f 0964 	mov.w	r9, r4, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e1e2:	f004 0401 	and.w	r4, r4, #1
  40e1e6:	444c      	add	r4, r9

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e1e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e1ec:	b123      	cbz	r3, 40e1f8 <draw_line_ver+0x3c>
  40e1ee:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  40e1f2:	b943      	cbnz	r3, 40e206 <draw_line_ver+0x4a>
  40e1f4:	2600      	movs	r6, #0
  40e1f6:	e000      	b.n	40e1fa <draw_line_ver+0x3e>
  40e1f8:	2600      	movs	r6, #0

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e1fa:	4b68      	ldr	r3, [pc, #416]	; (40e39c <draw_line_ver+0x1e0>)
  40e1fc:	4798      	blx	r3
  40e1fe:	b920      	cbnz	r0, 40e20a <draw_line_ver+0x4e>
    else if(dashed) simple_mode = false;
  40e200:	bb7e      	cbnz	r6, 40e262 <draw_line_ver+0xa6>
    bool simple_mode = true;
  40e202:	2201      	movs	r2, #1
  40e204:	e002      	b.n	40e20c <draw_line_ver+0x50>
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
  40e206:	2601      	movs	r6, #1
  40e208:	e7f7      	b.n	40e1fa <draw_line_ver+0x3e>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
  40e20a:	2200      	movs	r2, #0

    lv_area_t draw_area;
    draw_area.x1 = point1->x - w_half1;
  40e20c:	f8b8 3000 	ldrh.w	r3, [r8]
  40e210:	1b1c      	subs	r4, r3, r4
  40e212:	f8ad 4020 	strh.w	r4, [sp, #32]
    draw_area.x2 = point1->x + w_half0;
  40e216:	4499      	add	r9, r3
  40e218:	f8ad 9024 	strh.w	r9, [sp, #36]	; 0x24
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
  40e21c:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  40e220:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
  40e224:	4618      	mov	r0, r3
  40e226:	428b      	cmp	r3, r1
  40e228:	bfa8      	it	ge
  40e22a:	4608      	movge	r0, r1
  40e22c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
  40e230:	428b      	cmp	r3, r1
  40e232:	bfb8      	it	lt
  40e234:	460b      	movlt	r3, r1
  40e236:	b29b      	uxth	r3, r3
  40e238:	3b01      	subs	r3, #1
  40e23a:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
  40e23e:	b192      	cbz	r2, 40e266 <draw_line_ver+0xaa>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color,  NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
  40e240:	7a6b      	ldrb	r3, [r5, #9]
  40e242:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(clip, &draw_area,
  40e246:	882a      	ldrh	r2, [r5, #0]
  40e248:	9302      	str	r3, [sp, #8]
  40e24a:	f8cd b004 	str.w	fp, [sp, #4]
  40e24e:	2301      	movs	r3, #1
  40e250:	9300      	str	r3, [sp, #0]
  40e252:	2300      	movs	r3, #0
  40e254:	a908      	add	r1, sp, #32
  40e256:	9804      	ldr	r0, [sp, #16]
  40e258:	4c51      	ldr	r4, [pc, #324]	; (40e3a0 <draw_line_ver+0x1e4>)
  40e25a:	47a0      	blx	r4
            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
    }
}
  40e25c:	b00b      	add	sp, #44	; 0x2c
  40e25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(dashed) simple_mode = false;
  40e262:	2200      	movs	r2, #0
  40e264:	e7d2      	b.n	40e20c <draw_line_ver+0x50>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
  40e266:	aa08      	add	r2, sp, #32
  40e268:	9904      	ldr	r1, [sp, #16]
  40e26a:	4610      	mov	r0, r2
  40e26c:	4b4d      	ldr	r3, [pc, #308]	; (40e3a4 <draw_line_ver+0x1e8>)
  40e26e:	4798      	blx	r3
        if(!is_common) return;
  40e270:	2800      	cmp	r0, #0
  40e272:	d0f3      	beq.n	40e25c <draw_line_ver+0xa0>
        draw_area.x1 -= vdb->area.x1;
  40e274:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
  40e278:	8a3b      	ldrh	r3, [r7, #16]
  40e27a:	eba0 0b03 	sub.w	fp, r0, r3
  40e27e:	fa1f fb8b 	uxth.w	fp, fp
  40e282:	f8ad b020 	strh.w	fp, [sp, #32]
        draw_area.y1 -= vdb->area.y1;
  40e286:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
  40e28a:	f8b7 e012 	ldrh.w	lr, [r7, #18]
  40e28e:	eba2 010e 	sub.w	r1, r2, lr
  40e292:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        draw_area.x2 -= vdb->area.x1;
  40e296:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40e29a:	1acb      	subs	r3, r1, r3
  40e29c:	b29b      	uxth	r3, r3
  40e29e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        draw_area.y2 -= vdb->area.y1;
  40e2a2:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
  40e2a6:	eba4 040e 	sub.w	r4, r4, lr
  40e2aa:	f8ad 4026 	strh.w	r4, [sp, #38]	; 0x26
  40e2ae:	eba3 0b0b 	sub.w	fp, r3, fp
  40e2b2:	fa1f fb8b 	uxth.w	fp, fp
  40e2b6:	f10b 0b01 	add.w	fp, fp, #1
  40e2ba:	fa0f fb8b 	sxth.w	fp, fp
        fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e2be:	f8ad 0018 	strh.w	r0, [sp, #24]
        fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e2c2:	f8ad 101c 	strh.w	r1, [sp, #28]
        fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e2c6:	f8ad 201a 	strh.w	r2, [sp, #26]
        fill_area.y2 = fill_area.y1;
  40e2ca:	f8ad 201e 	strh.w	r2, [sp, #30]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  40e2ce:	f8cd b014 	str.w	fp, [sp, #20]
  40e2d2:	4658      	mov	r0, fp
  40e2d4:	4b34      	ldr	r3, [pc, #208]	; (40e3a8 <draw_line_ver+0x1ec>)
  40e2d6:	4798      	blx	r3
  40e2d8:	4680      	mov	r8, r0
        if(dashed) {
  40e2da:	b19e      	cbz	r6, 40e304 <draw_line_ver+0x148>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
  40e2dc:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
  40e2e0:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
  40e2e4:	441a      	add	r2, r3
  40e2e6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e2ea:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
  40e2ee:	444b      	add	r3, r9
  40e2f0:	fb92 f9f3 	sdiv	r9, r2, r3
  40e2f4:	fb03 2919 	mls	r9, r3, r9, r2
  40e2f8:	fa0f f989 	sxth.w	r9, r9
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e2fc:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40e300:	46b2      	mov	sl, r6
  40e302:	e01c      	b.n	40e33e <draw_line_ver+0x182>
        lv_style_int_t dash_start = 0;
  40e304:	f04f 0900 	mov.w	r9, #0
  40e308:	e7f8      	b.n	40e2fc <draw_line_ver+0x140>
                dash_cnt ++;
  40e30a:	f109 0901 	add.w	r9, r9, #1
  40e30e:	fa0f f989 	sxth.w	r9, r9
            _lv_blend_fill(clip, &fill_area,
  40e312:	2300      	movs	r3, #0
  40e314:	9302      	str	r3, [sp, #8]
  40e316:	7a2b      	ldrb	r3, [r5, #8]
  40e318:	9301      	str	r3, [sp, #4]
  40e31a:	9000      	str	r0, [sp, #0]
  40e31c:	4643      	mov	r3, r8
  40e31e:	882a      	ldrh	r2, [r5, #0]
  40e320:	a906      	add	r1, sp, #24
  40e322:	9804      	ldr	r0, [sp, #16]
  40e324:	4e1e      	ldr	r6, [pc, #120]	; (40e3a0 <draw_line_ver+0x1e4>)
  40e326:	47b0      	blx	r6
            fill_area.y1++;
  40e328:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  40e32c:	3301      	adds	r3, #1
  40e32e:	f8ad 301a 	strh.w	r3, [sp, #26]
            fill_area.y2++;
  40e332:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
  40e336:	3301      	adds	r3, #1
  40e338:	f8ad 301e 	strh.w	r3, [sp, #30]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  40e33c:	3401      	adds	r4, #1
  40e33e:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
  40e342:	429c      	cmp	r4, r3
  40e344:	dc21      	bgt.n	40e38a <draw_line_ver+0x1ce>
            _lv_memset_ff(mask_buf, draw_area_w);
  40e346:	9905      	ldr	r1, [sp, #20]
  40e348:	4640      	mov	r0, r8
  40e34a:	4b18      	ldr	r3, [pc, #96]	; (40e3ac <draw_line_ver+0x1f0>)
  40e34c:	4798      	blx	r3
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  40e34e:	8a39      	ldrh	r1, [r7, #16]
  40e350:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  40e354:	4419      	add	r1, r3
  40e356:	8a7a      	ldrh	r2, [r7, #18]
  40e358:	4422      	add	r2, r4
  40e35a:	465b      	mov	r3, fp
  40e35c:	b212      	sxth	r2, r2
  40e35e:	b209      	sxth	r1, r1
  40e360:	4640      	mov	r0, r8
  40e362:	4e13      	ldr	r6, [pc, #76]	; (40e3b0 <draw_line_ver+0x1f4>)
  40e364:	47b0      	blx	r6
            if(dashed) {
  40e366:	f1ba 0f00 	cmp.w	sl, #0
  40e36a:	d0d2      	beq.n	40e312 <draw_line_ver+0x156>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
  40e36c:	2800      	cmp	r0, #0
  40e36e:	d0cc      	beq.n	40e30a <draw_line_ver+0x14e>
                    if(dash_cnt > dsc->dash_width) {
  40e370:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
  40e374:	4591      	cmp	r9, r2
  40e376:	dd00      	ble.n	40e37a <draw_line_ver+0x1be>
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
  40e378:	2000      	movs	r0, #0
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
  40e37a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  40e37e:	4413      	add	r3, r2
  40e380:	4599      	cmp	r9, r3
  40e382:	dbc2      	blt.n	40e30a <draw_line_ver+0x14e>
                        dash_cnt = 0;
  40e384:	f04f 0900 	mov.w	r9, #0
  40e388:	e7bf      	b.n	40e30a <draw_line_ver+0x14e>
        _lv_mem_buf_release(mask_buf);
  40e38a:	4640      	mov	r0, r8
  40e38c:	4b09      	ldr	r3, [pc, #36]	; (40e3b4 <draw_line_ver+0x1f8>)
  40e38e:	4798      	blx	r3
  40e390:	e764      	b.n	40e25c <draw_line_ver+0xa0>
  40e392:	bf00      	nop
  40e394:	00409269 	.word	0x00409269
  40e398:	00414735 	.word	0x00414735
  40e39c:	0040f625 	.word	0x0040f625
  40e3a0:	0040c301 	.word	0x0040c301
  40e3a4:	00414ef3 	.word	0x00414ef3
  40e3a8:	00416269 	.word	0x00416269
  40e3ac:	0041644d 	.word	0x0041644d
  40e3b0:	0040f55d 	.word	0x0040f55d
  40e3b4:	00416019 	.word	0x00416019

0040e3b8 <draw_line_skew>:

LV_ATTRIBUTE_FAST_MEM static void draw_line_skew(const lv_point_t * point1, const lv_point_t * point2,
                                                 const lv_area_t * clip,
                                                 const lv_draw_line_dsc_t * dsc)
{
  40e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40e3bc:	b0bf      	sub	sp, #252	; 0xfc
  40e3be:	9206      	str	r2, [sp, #24]
  40e3c0:	9305      	str	r3, [sp, #20]
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
  40e3c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  40e3c6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
  40e3ca:	4293      	cmp	r3, r2
  40e3cc:	f280 80e7 	bge.w	40e59e <draw_line_skew+0x1e6>
        p1.y = point1->y;
  40e3d0:	f8ad 30f6 	strh.w	r3, [sp, #246]	; 0xf6
        p2.y = point2->y;
  40e3d4:	f8ad 20f2 	strh.w	r2, [sp, #242]	; 0xf2
        p1.x = point1->x;
  40e3d8:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e3dc:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point2->x;
  40e3e0:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e3e4:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
  40e3e8:	f9bd 80f0 	ldrsh.w	r8, [sp, #240]	; 0xf0
  40e3ec:	f9bd 70f4 	ldrsh.w	r7, [sp, #244]	; 0xf4
  40e3f0:	eba8 0907 	sub.w	r9, r8, r7
    int32_t ydiff = p2.y - p1.y;
  40e3f4:	f9bd 50f2 	ldrsh.w	r5, [sp, #242]	; 0xf2
  40e3f8:	f9bd 60f6 	ldrsh.w	r6, [sp, #246]	; 0xf6
  40e3fc:	1bab      	subs	r3, r5, r6
  40e3fe:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
  40e400:	ea89 7be9 	eor.w	fp, r9, r9, asr #31
  40e404:	ebab 7be9 	sub.w	fp, fp, r9, asr #31
  40e408:	2b00      	cmp	r3, #0
  40e40a:	bfb8      	it	lt
  40e40c:	425b      	neglt	r3, r3
  40e40e:	469a      	mov	sl, r3
        143, 145, 147, 149, 151, 153, 155, 158,
        160, 162, 165, 167, 170, 173, 175, 178,
        181,
    };

    int32_t w = dsc->width;
  40e410:	9b05      	ldr	r3, [sp, #20]
  40e412:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
  40e416:	45d3      	cmp	fp, sl
  40e418:	f340 80ce 	ble.w	40e5b8 <draw_line_skew+0x200>
  40e41c:	ea4f 134a 	mov.w	r3, sl, lsl #5
  40e420:	fb93 f3fb 	sdiv	r3, r3, fp
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
  40e424:	49a1      	ldr	r1, [pc, #644]	; (40e6ac <draw_line_skew+0x2f4>)
  40e426:	5ccc      	ldrb	r4, [r1, r3]
  40e428:	fb04 f402 	mul.w	r4, r4, r2
  40e42c:	343f      	adds	r4, #63	; 0x3f
  40e42e:	11e3      	asrs	r3, r4, #7
    int32_t w_half0 = w >> 1;
  40e430:	1224      	asrs	r4, r4, #8
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
  40e432:	f003 0201 	and.w	r2, r3, #1
  40e436:	18a2      	adds	r2, r4, r2
  40e438:	9204      	str	r2, [sp, #16]

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
  40e43a:	4642      	mov	r2, r8
  40e43c:	45b8      	cmp	r8, r7
  40e43e:	bfa8      	it	ge
  40e440:	463a      	movge	r2, r7
  40e442:	b292      	uxth	r2, r2
  40e444:	b29b      	uxth	r3, r3
  40e446:	1ad2      	subs	r2, r2, r3
  40e448:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
  40e44c:	4642      	mov	r2, r8
  40e44e:	45b8      	cmp	r8, r7
  40e450:	bfb8      	it	lt
  40e452:	463a      	movlt	r2, r7
  40e454:	fa13 f282 	uxtah	r2, r3, r2
  40e458:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
  40e45c:	462a      	mov	r2, r5
  40e45e:	42b5      	cmp	r5, r6
  40e460:	bfa8      	it	ge
  40e462:	4632      	movge	r2, r6
  40e464:	b292      	uxth	r2, r2
  40e466:	1ad2      	subs	r2, r2, r3
  40e468:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
  40e46c:	462a      	mov	r2, r5
  40e46e:	42b5      	cmp	r5, r6
  40e470:	bfb8      	it	lt
  40e472:	4632      	movlt	r2, r6
  40e474:	fa13 f382 	uxtah	r3, r3, r2
  40e478:	f8ad 30ee 	strh.w	r3, [sp, #238]	; 0xee

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
  40e47c:	9a06      	ldr	r2, [sp, #24]
  40e47e:	a93a      	add	r1, sp, #232	; 0xe8
  40e480:	4608      	mov	r0, r1
  40e482:	4b8b      	ldr	r3, [pc, #556]	; (40e6b0 <draw_line_skew+0x2f8>)
  40e484:	4798      	blx	r3
    if(is_common == false) return;
  40e486:	2800      	cmp	r0, #0
  40e488:	f000 8187 	beq.w	40e79a <draw_line_skew+0x3e2>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
  40e48c:	45d3      	cmp	fp, sl
  40e48e:	f340 80b6 	ble.w	40e5fe <draw_line_skew+0x246>
        if(xdiff > 0) {
  40e492:	f1b9 0f00 	cmp.w	r9, #0
  40e496:	f340 8094 	ble.w	40e5c2 <draw_line_skew+0x20a>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e49a:	b2b6      	uxth	r6, r6
  40e49c:	b2a4      	uxth	r4, r4
  40e49e:	1b32      	subs	r2, r6, r4
  40e4a0:	b2ad      	uxth	r5, r5
  40e4a2:	1b2c      	subs	r4, r5, r4
  40e4a4:	2300      	movs	r3, #0
  40e4a6:	9301      	str	r3, [sp, #4]
  40e4a8:	b224      	sxth	r4, r4
  40e4aa:	9400      	str	r4, [sp, #0]
  40e4ac:	4643      	mov	r3, r8
  40e4ae:	b212      	sxth	r2, r2
  40e4b0:	4639      	mov	r1, r7
  40e4b2:	a82f      	add	r0, sp, #188	; 0xbc
  40e4b4:	4c7f      	ldr	r4, [pc, #508]	; (40e6b4 <draw_line_skew+0x2fc>)
  40e4b6:	47a0      	blx	r4
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e4b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e4bc:	441e      	add	r6, r3
  40e4be:	441d      	add	r5, r3
  40e4c0:	2301      	movs	r3, #1
  40e4c2:	9301      	str	r3, [sp, #4]
  40e4c4:	b22d      	sxth	r5, r5
  40e4c6:	9500      	str	r5, [sp, #0]
  40e4c8:	4643      	mov	r3, r8
  40e4ca:	b232      	sxth	r2, r6
  40e4cc:	4639      	mov	r1, r7
  40e4ce:	a824      	add	r0, sp, #144	; 0x90
  40e4d0:	47a0      	blx	r4
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
  40e4d2:	2100      	movs	r1, #0
  40e4d4:	a82f      	add	r0, sp, #188	; 0xbc
  40e4d6:	4c78      	ldr	r4, [pc, #480]	; (40e6b8 <draw_line_skew+0x300>)
  40e4d8:	47a0      	blx	r4
  40e4da:	9008      	str	r0, [sp, #32]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
  40e4dc:	2100      	movs	r1, #0
  40e4de:	a824      	add	r0, sp, #144	; 0x90
  40e4e0:	47a0      	blx	r4
  40e4e2:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
  40e4e4:	9b05      	ldr	r3, [sp, #20]
  40e4e6:	7a5b      	ldrb	r3, [r3, #9]
  40e4e8:	f013 0f10 	tst.w	r3, #16
  40e4ec:	f000 80a6 	beq.w	40e63c <draw_line_skew+0x284>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
  40e4f0:	f04f 33ff 	mov.w	r3, #4294967295
  40e4f4:	930b      	str	r3, [sp, #44]	; 0x2c
    int16_t mask_top_id = LV_MASK_ID_INV;
  40e4f6:	930a      	str	r3, [sp, #40]	; 0x28
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40e4f8:	4b70      	ldr	r3, [pc, #448]	; (40e6bc <draw_line_skew+0x304>)
  40e4fa:	4798      	blx	r3
  40e4fc:	4605      	mov	r5, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40e4fe:	4b70      	ldr	r3, [pc, #448]	; (40e6c0 <draw_line_skew+0x308>)
  40e500:	4798      	blx	r3
  40e502:	4682      	mov	sl, r0

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
  40e504:	8a00      	ldrh	r0, [r0, #16]
  40e506:	f8bd 40e8 	ldrh.w	r4, [sp, #232]	; 0xe8
  40e50a:	1a24      	subs	r4, r4, r0
  40e50c:	b2a4      	uxth	r4, r4
  40e50e:	f8ad 40e8 	strh.w	r4, [sp, #232]	; 0xe8
    draw_area.y1 -= disp_area->y1;
  40e512:	f8ba 1012 	ldrh.w	r1, [sl, #18]
  40e516:	f8bd 20ea 	ldrh.w	r2, [sp, #234]	; 0xea
  40e51a:	1a52      	subs	r2, r2, r1
  40e51c:	f8ad 20ea 	strh.w	r2, [sp, #234]	; 0xea
    draw_area.x2 -= disp_area->x1;
  40e520:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
  40e524:	1a1b      	subs	r3, r3, r0
  40e526:	b29b      	uxth	r3, r3
  40e528:	f8ad 30ec 	strh.w	r3, [sp, #236]	; 0xec
    draw_area.y2 -= disp_area->y1;
  40e52c:	f8bd 20ee 	ldrh.w	r2, [sp, #238]	; 0xee
  40e530:	1a52      	subs	r2, r2, r1
  40e532:	f8ad 20ee 	strh.w	r2, [sp, #238]	; 0xee
  40e536:	1b1c      	subs	r4, r3, r4
  40e538:	b2a4      	uxth	r4, r4
  40e53a:	3401      	adds	r4, #1
  40e53c:	b224      	sxth	r4, r4
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    uint32_t hor_res = (uint32_t)lv_disp_get_hor_res(disp);
  40e53e:	4628      	mov	r0, r5
  40e540:	4b60      	ldr	r3, [pc, #384]	; (40e6c4 <draw_line_skew+0x30c>)
  40e542:	4798      	blx	r3
  40e544:	4683      	mov	fp, r0
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e546:	a83a      	add	r0, sp, #232	; 0xe8
  40e548:	4b5f      	ldr	r3, [pc, #380]	; (40e6c8 <draw_line_skew+0x310>)
  40e54a:	4798      	blx	r3
  40e54c:	4583      	cmp	fp, r0
  40e54e:	f200 80a3 	bhi.w	40e698 <draw_line_skew+0x2e0>
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
  40e552:	4658      	mov	r0, fp
  40e554:	4b5d      	ldr	r3, [pc, #372]	; (40e6cc <draw_line_skew+0x314>)
  40e556:	4798      	blx	r3
  40e558:	4681      	mov	r9, r0

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
  40e55a:	f8bd 20e8 	ldrh.w	r2, [sp, #232]	; 0xe8
  40e55e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
  40e562:	441a      	add	r2, r3
  40e564:	b212      	sxth	r2, r2
  40e566:	9204      	str	r2, [sp, #16]
  40e568:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    fill_area.x2 = draw_area.x2 + disp_area->x1;
  40e56c:	f8bd 20ec 	ldrh.w	r2, [sp, #236]	; 0xec
  40e570:	4413      	add	r3, r2
  40e572:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    fill_area.y1 = draw_area.y1 + disp_area->y1;
  40e576:	f8bd 30ea 	ldrh.w	r3, [sp, #234]	; 0xea
  40e57a:	f8ba 2012 	ldrh.w	r2, [sl, #18]
  40e57e:	4413      	add	r3, r2
  40e580:	b21b      	sxth	r3, r3
  40e582:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    fill_area.y2 = fill_area.y1;
  40e586:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
  40e58a:	4659      	mov	r1, fp
  40e58c:	4b50      	ldr	r3, [pc, #320]	; (40e6d0 <draw_line_skew+0x318>)
  40e58e:	4798      	blx	r3
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e590:	f9bd 50ea 	ldrsh.w	r5, [sp, #234]	; 0xea
  40e594:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  40e598:	441d      	add	r5, r3
    uint32_t mask_p = 0;
  40e59a:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e59c:	e0bd      	b.n	40e71a <draw_line_skew+0x362>
        p1.y = point2->y;
  40e59e:	f8ad 20f6 	strh.w	r2, [sp, #246]	; 0xf6
        p2.y = point1->y;
  40e5a2:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
        p1.x = point2->x;
  40e5a6:	f9b1 3000 	ldrsh.w	r3, [r1]
  40e5aa:	f8ad 30f4 	strh.w	r3, [sp, #244]	; 0xf4
        p2.x = point1->x;
  40e5ae:	f9b0 3000 	ldrsh.w	r3, [r0]
  40e5b2:	f8ad 30f0 	strh.w	r3, [sp, #240]	; 0xf0
  40e5b6:	e717      	b.n	40e3e8 <draw_line_skew+0x30>
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
  40e5b8:	ea4f 134b 	mov.w	r3, fp, lsl #5
  40e5bc:	fb93 f3fa 	sdiv	r3, r3, sl
  40e5c0:	e730      	b.n	40e424 <draw_line_skew+0x6c>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
  40e5c2:	b2b6      	uxth	r6, r6
  40e5c4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e5c8:	18f2      	adds	r2, r6, r3
  40e5ca:	b2ad      	uxth	r5, r5
  40e5cc:	442b      	add	r3, r5
  40e5ce:	2100      	movs	r1, #0
  40e5d0:	9101      	str	r1, [sp, #4]
  40e5d2:	b21b      	sxth	r3, r3
  40e5d4:	9300      	str	r3, [sp, #0]
  40e5d6:	4643      	mov	r3, r8
  40e5d8:	b212      	sxth	r2, r2
  40e5da:	4639      	mov	r1, r7
  40e5dc:	a82f      	add	r0, sp, #188	; 0xbc
  40e5de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 40e6b4 <draw_line_skew+0x2fc>
  40e5e2:	47d0      	blx	sl
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
  40e5e4:	b2a4      	uxth	r4, r4
  40e5e6:	1b36      	subs	r6, r6, r4
  40e5e8:	1b2d      	subs	r5, r5, r4
  40e5ea:	2301      	movs	r3, #1
  40e5ec:	9301      	str	r3, [sp, #4]
  40e5ee:	b22d      	sxth	r5, r5
  40e5f0:	9500      	str	r5, [sp, #0]
  40e5f2:	4643      	mov	r3, r8
  40e5f4:	b232      	sxth	r2, r6
  40e5f6:	4639      	mov	r1, r7
  40e5f8:	a824      	add	r0, sp, #144	; 0x90
  40e5fa:	47d0      	blx	sl
  40e5fc:	e769      	b.n	40e4d2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
  40e5fe:	b2bf      	uxth	r7, r7
  40e600:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40e604:	18f9      	adds	r1, r7, r3
  40e606:	fa1f f888 	uxth.w	r8, r8
  40e60a:	4443      	add	r3, r8
  40e60c:	2200      	movs	r2, #0
  40e60e:	9201      	str	r2, [sp, #4]
  40e610:	9500      	str	r5, [sp, #0]
  40e612:	b21b      	sxth	r3, r3
  40e614:	4632      	mov	r2, r6
  40e616:	b209      	sxth	r1, r1
  40e618:	a82f      	add	r0, sp, #188	; 0xbc
  40e61a:	f8df a098 	ldr.w	sl, [pc, #152]	; 40e6b4 <draw_line_skew+0x2fc>
  40e61e:	47d0      	blx	sl
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
  40e620:	b2a4      	uxth	r4, r4
  40e622:	1b3f      	subs	r7, r7, r4
  40e624:	eba8 0804 	sub.w	r8, r8, r4
  40e628:	2301      	movs	r3, #1
  40e62a:	9301      	str	r3, [sp, #4]
  40e62c:	9500      	str	r5, [sp, #0]
  40e62e:	fa0f f388 	sxth.w	r3, r8
  40e632:	4632      	mov	r2, r6
  40e634:	b239      	sxth	r1, r7
  40e636:	a824      	add	r0, sp, #144	; 0x90
  40e638:	47d0      	blx	sl
  40e63a:	e74a      	b.n	40e4d2 <draw_line_skew+0x11a>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
  40e63c:	f9bd 10f4 	ldrsh.w	r1, [sp, #244]	; 0xf4
  40e640:	f9bd 20f6 	ldrsh.w	r2, [sp, #246]	; 0xf6
  40e644:	b28b      	uxth	r3, r1
  40e646:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  40e64a:	1b5b      	subs	r3, r3, r5
  40e64c:	fa1f f989 	uxth.w	r9, r9
  40e650:	fa19 f082 	uxtah	r0, r9, r2
  40e654:	2403      	movs	r4, #3
  40e656:	9401      	str	r4, [sp, #4]
  40e658:	b200      	sxth	r0, r0
  40e65a:	9000      	str	r0, [sp, #0]
  40e65c:	b21b      	sxth	r3, r3
  40e65e:	a819      	add	r0, sp, #100	; 0x64
  40e660:	4c14      	ldr	r4, [pc, #80]	; (40e6b4 <draw_line_skew+0x2fc>)
  40e662:	47a0      	blx	r4
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
  40e664:	f9bd 10f0 	ldrsh.w	r1, [sp, #240]	; 0xf0
  40e668:	f9bd 20f2 	ldrsh.w	r2, [sp, #242]	; 0xf2
  40e66c:	b28b      	uxth	r3, r1
  40e66e:	1b5b      	subs	r3, r3, r5
  40e670:	fa19 f982 	uxtah	r9, r9, r2
  40e674:	2002      	movs	r0, #2
  40e676:	9001      	str	r0, [sp, #4]
  40e678:	fa0f f089 	sxth.w	r0, r9
  40e67c:	9000      	str	r0, [sp, #0]
  40e67e:	b21b      	sxth	r3, r3
  40e680:	a80e      	add	r0, sp, #56	; 0x38
  40e682:	47a0      	blx	r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
  40e684:	2100      	movs	r1, #0
  40e686:	a819      	add	r0, sp, #100	; 0x64
  40e688:	4c0b      	ldr	r4, [pc, #44]	; (40e6b8 <draw_line_skew+0x300>)
  40e68a:	47a0      	blx	r4
  40e68c:	900a      	str	r0, [sp, #40]	; 0x28
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
  40e68e:	2100      	movs	r1, #0
  40e690:	a80e      	add	r0, sp, #56	; 0x38
  40e692:	47a0      	blx	r4
  40e694:	900b      	str	r0, [sp, #44]	; 0x2c
  40e696:	e72f      	b.n	40e4f8 <draw_line_skew+0x140>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), hor_res);
  40e698:	a83a      	add	r0, sp, #232	; 0xe8
  40e69a:	4b0b      	ldr	r3, [pc, #44]	; (40e6c8 <draw_line_skew+0x310>)
  40e69c:	4798      	blx	r3
  40e69e:	4683      	mov	fp, r0
  40e6a0:	e757      	b.n	40e552 <draw_line_skew+0x19a>

        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
  40e6a2:	4621      	mov	r1, r4
  40e6a4:	4638      	mov	r0, r7
  40e6a6:	4b0b      	ldr	r3, [pc, #44]	; (40e6d4 <draw_line_skew+0x31c>)
  40e6a8:	4798      	blx	r3
  40e6aa:	e048      	b.n	40e73e <draw_line_skew+0x386>
  40e6ac:	00426200 	.word	0x00426200
  40e6b0:	00414ef3 	.word	0x00414ef3
  40e6b4:	0040f649 	.word	0x0040f649
  40e6b8:	0040f529 	.word	0x0040f529
  40e6bc:	00409269 	.word	0x00409269
  40e6c0:	00414735 	.word	0x00414735
  40e6c4:	00414631 	.word	0x00414631
  40e6c8:	00414ed7 	.word	0x00414ed7
  40e6cc:	00416269 	.word	0x00416269
  40e6d0:	0041644d 	.word	0x0041644d
  40e6d4:	004163f5 	.word	0x004163f5
            fill_area.y2 ++;
        }
        else {
            _lv_blend_fill(&fill_area, clip,
                           dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                           dsc->blend_mode);
  40e6d8:	9905      	ldr	r1, [sp, #20]
  40e6da:	7a4b      	ldrb	r3, [r1, #9]
  40e6dc:	f003 0303 	and.w	r3, r3, #3
            _lv_blend_fill(&fill_area, clip,
  40e6e0:	880a      	ldrh	r2, [r1, #0]
  40e6e2:	f8ad 201c 	strh.w	r2, [sp, #28]
  40e6e6:	9302      	str	r3, [sp, #8]
  40e6e8:	7a0b      	ldrb	r3, [r1, #8]
  40e6ea:	9301      	str	r3, [sp, #4]
  40e6ec:	2302      	movs	r3, #2
  40e6ee:	9300      	str	r3, [sp, #0]
  40e6f0:	464b      	mov	r3, r9
  40e6f2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
  40e6f6:	9906      	ldr	r1, [sp, #24]
  40e6f8:	a80c      	add	r0, sp, #48	; 0x30
  40e6fa:	4e29      	ldr	r6, [pc, #164]	; (40e7a0 <draw_line_skew+0x3e8>)
  40e6fc:	47b0      	blx	r6

            fill_area.y1 = fill_area.y2 + 1;
  40e6fe:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
  40e702:	3301      	adds	r3, #1
  40e704:	b21b      	sxth	r3, r3
  40e706:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            fill_area.y2 = fill_area.y1;
  40e70a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            mask_p = 0;
            _lv_memset_ff(mask_buf, mask_buf_size);
  40e70e:	4659      	mov	r1, fp
  40e710:	4648      	mov	r0, r9
  40e712:	4b24      	ldr	r3, [pc, #144]	; (40e7a4 <draw_line_skew+0x3ec>)
  40e714:	4798      	blx	r3
            mask_p = 0;
  40e716:	2600      	movs	r6, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
  40e718:	3501      	adds	r5, #1
  40e71a:	f9bd 30ee 	ldrsh.w	r3, [sp, #238]	; 0xee
  40e71e:	f9ba 2012 	ldrsh.w	r2, [sl, #18]
  40e722:	4413      	add	r3, r2
  40e724:	429d      	cmp	r5, r3
  40e726:	dc14      	bgt.n	40e752 <draw_line_skew+0x39a>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
  40e728:	eb09 0706 	add.w	r7, r9, r6
  40e72c:	4623      	mov	r3, r4
  40e72e:	b22a      	sxth	r2, r5
  40e730:	9904      	ldr	r1, [sp, #16]
  40e732:	4638      	mov	r0, r7
  40e734:	f8df 8078 	ldr.w	r8, [pc, #120]	; 40e7b0 <draw_line_skew+0x3f8>
  40e738:	47c0      	blx	r8
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40e73a:	2800      	cmp	r0, #0
  40e73c:	d0b1      	beq.n	40e6a2 <draw_line_skew+0x2ea>
        mask_p += draw_area_w;
  40e73e:	4426      	add	r6, r4
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
  40e740:	19a3      	adds	r3, r4, r6
  40e742:	459b      	cmp	fp, r3
  40e744:	d9c8      	bls.n	40e6d8 <draw_line_skew+0x320>
            fill_area.y2 ++;
  40e746:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e74a:	3301      	adds	r3, #1
  40e74c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  40e750:	e7e2      	b.n	40e718 <draw_line_skew+0x360>
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
  40e752:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
  40e756:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
  40e75a:	429a      	cmp	r2, r3
  40e75c:	d011      	beq.n	40e782 <draw_line_skew+0x3ca>
        fill_area.y2--;
  40e75e:	3b01      	subs	r3, #1
  40e760:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
  40e764:	9905      	ldr	r1, [sp, #20]
  40e766:	7a4b      	ldrb	r3, [r1, #9]
  40e768:	f003 0303 	and.w	r3, r3, #3
        _lv_blend_fill(&fill_area, clip,
  40e76c:	880a      	ldrh	r2, [r1, #0]
  40e76e:	9302      	str	r3, [sp, #8]
  40e770:	7a0b      	ldrb	r3, [r1, #8]
  40e772:	9301      	str	r3, [sp, #4]
  40e774:	2302      	movs	r3, #2
  40e776:	9300      	str	r3, [sp, #0]
  40e778:	464b      	mov	r3, r9
  40e77a:	9906      	ldr	r1, [sp, #24]
  40e77c:	a80c      	add	r0, sp, #48	; 0x30
  40e77e:	4c08      	ldr	r4, [pc, #32]	; (40e7a0 <draw_line_skew+0x3e8>)
  40e780:	47a0      	blx	r4

    }

    _lv_mem_buf_release(mask_buf);
  40e782:	4648      	mov	r0, r9
  40e784:	4b08      	ldr	r3, [pc, #32]	; (40e7a8 <draw_line_skew+0x3f0>)
  40e786:	4798      	blx	r3

    lv_draw_mask_remove_id(mask_left_id);
  40e788:	9808      	ldr	r0, [sp, #32]
  40e78a:	4c08      	ldr	r4, [pc, #32]	; (40e7ac <draw_line_skew+0x3f4>)
  40e78c:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_right_id);
  40e78e:	9809      	ldr	r0, [sp, #36]	; 0x24
  40e790:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_top_id);
  40e792:	980a      	ldr	r0, [sp, #40]	; 0x28
  40e794:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_bottom_id);
  40e796:	980b      	ldr	r0, [sp, #44]	; 0x2c
  40e798:	47a0      	blx	r4
}
  40e79a:	b03f      	add	sp, #252	; 0xfc
  40e79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40e7a0:	0040c301 	.word	0x0040c301
  40e7a4:	0041644d 	.word	0x0041644d
  40e7a8:	00416019 	.word	0x00416019
  40e7ac:	0040f5ad 	.word	0x0040f5ad
  40e7b0:	0040f55d 	.word	0x0040f55d

0040e7b4 <lv_draw_line_dsc_init>:
{
  40e7b4:	b510      	push	{r4, lr}
  40e7b6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
  40e7b8:	210a      	movs	r1, #10
  40e7ba:	4b04      	ldr	r3, [pc, #16]	; (40e7cc <lv_draw_line_dsc_init+0x18>)
  40e7bc:	4798      	blx	r3
    dsc->width = 1;
  40e7be:	2301      	movs	r3, #1
  40e7c0:	8063      	strh	r3, [r4, #2]
    dsc->opa = LV_OPA_COVER;
  40e7c2:	23ff      	movs	r3, #255	; 0xff
  40e7c4:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
  40e7c6:	2300      	movs	r3, #0
  40e7c8:	8023      	strh	r3, [r4, #0]
  40e7ca:	bd10      	pop	{r4, pc}
  40e7cc:	004163f5 	.word	0x004163f5

0040e7d0 <lv_draw_line>:
{
  40e7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40e7d4:	b09b      	sub	sp, #108	; 0x6c
    if(dsc->width == 0) return;
  40e7d6:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
  40e7da:	2c00      	cmp	r4, #0
  40e7dc:	d05e      	beq.n	40e89c <lv_draw_line+0xcc>
    if(dsc->opa <= LV_OPA_MIN) return;
  40e7de:	7a1d      	ldrb	r5, [r3, #8]
  40e7e0:	2d02      	cmp	r5, #2
  40e7e2:	d95b      	bls.n	40e89c <lv_draw_line+0xcc>
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e7e4:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e7e8:	f9b1 6000 	ldrsh.w	r6, [r1]
  40e7ec:	42b5      	cmp	r5, r6
  40e7ee:	d058      	beq.n	40e8a2 <lv_draw_line+0xd2>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e7f0:	42b5      	cmp	r5, r6
  40e7f2:	bfa8      	it	ge
  40e7f4:	4635      	movge	r5, r6
  40e7f6:	b2ad      	uxth	r5, r5
  40e7f8:	4626      	mov	r6, r4
  40e7fa:	2c00      	cmp	r4, #0
  40e7fc:	db58      	blt.n	40e8b0 <lv_draw_line+0xe0>
  40e7fe:	f3c6 064f 	ubfx	r6, r6, #1, #16
  40e802:	1bad      	subs	r5, r5, r6
  40e804:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
  40e808:	f9b1 4000 	ldrsh.w	r4, [r1]
  40e80c:	f9b0 5000 	ldrsh.w	r5, [r0]
  40e810:	42ac      	cmp	r4, r5
  40e812:	bfb8      	it	lt
  40e814:	462c      	movlt	r4, r5
  40e816:	fa16 f484 	uxtah	r4, r6, r4
  40e81a:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e81e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e822:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e826:	42ac      	cmp	r4, r5
  40e828:	bfa8      	it	ge
  40e82a:	462c      	movge	r4, r5
  40e82c:	b2a4      	uxth	r4, r4
  40e82e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e832:	2d00      	cmp	r5, #0
  40e834:	db3e      	blt.n	40e8b4 <lv_draw_line+0xe4>
  40e836:	eba4 0465 	sub.w	r4, r4, r5, asr #1
  40e83a:	f8ad 4062 	strh.w	r4, [sp, #98]	; 0x62
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e83e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  40e842:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
  40e846:	42ac      	cmp	r4, r5
  40e848:	bfb8      	it	lt
  40e84a:	462c      	movlt	r4, r5
  40e84c:	b2a4      	uxth	r4, r4
  40e84e:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
  40e852:	2d00      	cmp	r5, #0
  40e854:	db30      	blt.n	40e8b8 <lv_draw_line+0xe8>
  40e856:	461e      	mov	r6, r3
  40e858:	4690      	mov	r8, r2
  40e85a:	460f      	mov	r7, r1
  40e85c:	4681      	mov	r9, r0
  40e85e:	eb04 0365 	add.w	r3, r4, r5, asr #1
  40e862:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
  40e866:	a918      	add	r1, sp, #96	; 0x60
  40e868:	4608      	mov	r0, r1
  40e86a:	4b45      	ldr	r3, [pc, #276]	; (40e980 <lv_draw_line+0x1b0>)
  40e86c:	4798      	blx	r3
    if(!is_common) return;
  40e86e:	b1a8      	cbz	r0, 40e89c <lv_draw_line+0xcc>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e870:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
  40e874:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  40e878:	429a      	cmp	r2, r3
  40e87a:	d01f      	beq.n	40e8bc <lv_draw_line+0xec>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e87c:	f9b9 2000 	ldrsh.w	r2, [r9]
  40e880:	f9b7 3000 	ldrsh.w	r3, [r7]
  40e884:	429a      	cmp	r2, r3
  40e886:	d020      	beq.n	40e8ca <lv_draw_line+0xfa>
    else draw_line_skew(point1, point2, &clip_line, dsc);
  40e888:	4633      	mov	r3, r6
  40e88a:	aa18      	add	r2, sp, #96	; 0x60
  40e88c:	4639      	mov	r1, r7
  40e88e:	4648      	mov	r0, r9
  40e890:	4c3c      	ldr	r4, [pc, #240]	; (40e984 <lv_draw_line+0x1b4>)
  40e892:	47a0      	blx	r4
    if(dsc->round_end || dsc->round_start) {
  40e894:	7a73      	ldrb	r3, [r6, #9]
  40e896:	f013 0f0c 	tst.w	r3, #12
  40e89a:	d11d      	bne.n	40e8d8 <lv_draw_line+0x108>
}
  40e89c:	b01b      	add	sp, #108	; 0x6c
  40e89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(point1->x == point2->x && point1->y == point2->y) return;
  40e8a2:	f9b0 e002 	ldrsh.w	lr, [r0, #2]
  40e8a6:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
  40e8aa:	45be      	cmp	lr, r7
  40e8ac:	d1a0      	bne.n	40e7f0 <lv_draw_line+0x20>
  40e8ae:	e7f5      	b.n	40e89c <lv_draw_line+0xcc>
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
  40e8b0:	1c66      	adds	r6, r4, #1
  40e8b2:	e7a4      	b.n	40e7fe <lv_draw_line+0x2e>
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
  40e8b4:	3501      	adds	r5, #1
  40e8b6:	e7be      	b.n	40e836 <lv_draw_line+0x66>
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
  40e8b8:	3501      	adds	r5, #1
  40e8ba:	e7cc      	b.n	40e856 <lv_draw_line+0x86>
    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
  40e8bc:	4633      	mov	r3, r6
  40e8be:	aa18      	add	r2, sp, #96	; 0x60
  40e8c0:	4639      	mov	r1, r7
  40e8c2:	4648      	mov	r0, r9
  40e8c4:	4c30      	ldr	r4, [pc, #192]	; (40e988 <lv_draw_line+0x1b8>)
  40e8c6:	47a0      	blx	r4
  40e8c8:	e7e4      	b.n	40e894 <lv_draw_line+0xc4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
  40e8ca:	4633      	mov	r3, r6
  40e8cc:	aa18      	add	r2, sp, #96	; 0x60
  40e8ce:	4639      	mov	r1, r7
  40e8d0:	4648      	mov	r0, r9
  40e8d2:	4c2e      	ldr	r4, [pc, #184]	; (40e98c <lv_draw_line+0x1bc>)
  40e8d4:	47a0      	blx	r4
  40e8d6:	e7dd      	b.n	40e894 <lv_draw_line+0xc4>
        lv_draw_rect_dsc_init(&cir_dsc);
  40e8d8:	a803      	add	r0, sp, #12
  40e8da:	4b2d      	ldr	r3, [pc, #180]	; (40e990 <lv_draw_line+0x1c0>)
  40e8dc:	4798      	blx	r3
        cir_dsc.bg_color = dsc->color;
  40e8de:	8833      	ldrh	r3, [r6, #0]
  40e8e0:	f8ad 300e 	strh.w	r3, [sp, #14]
        cir_dsc.radius = LV_RADIUS_CIRCLE;
  40e8e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  40e8e8:	f8ad 300c 	strh.w	r3, [sp, #12]
        cir_dsc.bg_opa = dsc->opa;
  40e8ec:	7a33      	ldrb	r3, [r6, #8]
  40e8ee:	f88d 3018 	strb.w	r3, [sp, #24]
        int32_t r = (dsc->width >> 1);
  40e8f2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  40e8f6:	105c      	asrs	r4, r3, #1
        int32_t r_corr = (dsc->width & 1) ? 0 : 1;
  40e8f8:	b29b      	uxth	r3, r3
  40e8fa:	f083 0301 	eor.w	r3, r3, #1
  40e8fe:	f003 0501 	and.w	r5, r3, #1
        if(dsc->round_start) {
  40e902:	7a73      	ldrb	r3, [r6, #9]
  40e904:	f013 0f04 	tst.w	r3, #4
  40e908:	d11d      	bne.n	40e946 <lv_draw_line+0x176>
        if(dsc->round_end) {
  40e90a:	7a73      	ldrb	r3, [r6, #9]
  40e90c:	f013 0f08 	tst.w	r3, #8
  40e910:	d0c4      	beq.n	40e89c <lv_draw_line+0xcc>
            cir_area.x1 = point2->x - r;
  40e912:	883b      	ldrh	r3, [r7, #0]
  40e914:	b2a4      	uxth	r4, r4
  40e916:	1b1a      	subs	r2, r3, r4
  40e918:	f8ad 2004 	strh.w	r2, [sp, #4]
            cir_area.y1 = point2->y - r;
  40e91c:	8879      	ldrh	r1, [r7, #2]
  40e91e:	1b0a      	subs	r2, r1, r4
  40e920:	f8ad 2006 	strh.w	r2, [sp, #6]
            cir_area.x2 = point2->x + r - r_corr;
  40e924:	18e2      	adds	r2, r4, r3
  40e926:	b292      	uxth	r2, r2
  40e928:	b2ad      	uxth	r5, r5
  40e92a:	1b52      	subs	r2, r2, r5
  40e92c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point2->y + r - r_corr ;
  40e930:	440c      	add	r4, r1
  40e932:	b2a3      	uxth	r3, r4
  40e934:	1b5b      	subs	r3, r3, r5
  40e936:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e93a:	aa03      	add	r2, sp, #12
  40e93c:	4641      	mov	r1, r8
  40e93e:	a801      	add	r0, sp, #4
  40e940:	4b14      	ldr	r3, [pc, #80]	; (40e994 <lv_draw_line+0x1c4>)
  40e942:	4798      	blx	r3
  40e944:	e7aa      	b.n	40e89c <lv_draw_line+0xcc>
            cir_area.x1 = point1->x - r;
  40e946:	f8b9 2000 	ldrh.w	r2, [r9]
  40e94a:	b2a3      	uxth	r3, r4
  40e94c:	1ad1      	subs	r1, r2, r3
  40e94e:	f8ad 1004 	strh.w	r1, [sp, #4]
            cir_area.y1 = point1->y - r;
  40e952:	f8b9 0002 	ldrh.w	r0, [r9, #2]
  40e956:	1ac1      	subs	r1, r0, r3
  40e958:	f8ad 1006 	strh.w	r1, [sp, #6]
            cir_area.x2 = point1->x + r - r_corr;
  40e95c:	441a      	add	r2, r3
  40e95e:	b292      	uxth	r2, r2
  40e960:	b2a9      	uxth	r1, r5
  40e962:	1a52      	subs	r2, r2, r1
  40e964:	f8ad 2008 	strh.w	r2, [sp, #8]
            cir_area.y2 = point1->y + r - r_corr ;
  40e968:	4403      	add	r3, r0
  40e96a:	b29b      	uxth	r3, r3
  40e96c:	1a5b      	subs	r3, r3, r1
  40e96e:	f8ad 300a 	strh.w	r3, [sp, #10]
            lv_draw_rect(&cir_area, clip, &cir_dsc);
  40e972:	aa03      	add	r2, sp, #12
  40e974:	4641      	mov	r1, r8
  40e976:	a801      	add	r0, sp, #4
  40e978:	4b06      	ldr	r3, [pc, #24]	; (40e994 <lv_draw_line+0x1c4>)
  40e97a:	4798      	blx	r3
  40e97c:	e7c5      	b.n	40e90a <lv_draw_line+0x13a>
  40e97e:	bf00      	nop
  40e980:	00414ef3 	.word	0x00414ef3
  40e984:	0040e3b9 	.word	0x0040e3b9
  40e988:	0040dfad 	.word	0x0040dfad
  40e98c:	0040e1bd 	.word	0x0040e1bd
  40e990:	00411d9d 	.word	0x00411d9d
  40e994:	00411de9 	.word	0x00411de9

0040e998 <line_mask_flat>:
}

LV_ATTRIBUTE_FAST_MEM static lv_draw_mask_res_t line_mask_flat(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                               lv_coord_t len,
                                                               lv_draw_mask_line_param_t * p)
{
  40e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40e99a:	9e06      	ldr	r6, [sp, #24]
    int32_t y_at_x;
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
  40e99c:	69f4      	ldr	r4, [r6, #28]
  40e99e:	fb01 f504 	mul.w	r5, r1, r4
  40e9a2:	12ad      	asrs	r5, r5, #10

    if(p->yx_steep > 0) {
  40e9a4:	2c00      	cmp	r4, #0
  40e9a6:	dd09      	ble.n	40e9bc <line_mask_flat+0x24>
        if(y_at_x > abs_y) {
  40e9a8:	4295      	cmp	r5, r2
  40e9aa:	dd11      	ble.n	40e9d0 <line_mask_flat+0x38>
            if(p->inv) {
  40e9ac:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e9b0:	f013 0f02 	tst.w	r3, #2
  40e9b4:	f000 80e2 	beq.w	40eb7c <line_mask_flat+0x1e4>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e9b8:	2001      	movs	r0, #1
  40e9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
            }
        }
    }
    else {
        if(y_at_x < abs_y) {
  40e9bc:	4295      	cmp	r5, r2
  40e9be:	da07      	bge.n	40e9d0 <line_mask_flat+0x38>
            if(p->inv) {
  40e9c0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e9c4:	f013 0f02 	tst.w	r3, #2
  40e9c8:	f000 80da 	beq.w	40eb80 <line_mask_flat+0x1e8>
                return LV_DRAW_MASK_RES_FULL_COVER;
  40e9cc:	2001      	movs	r0, #1
  40e9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
    }

    /* At the end of the mask if the limit line is smaller then the mask's y.
     * Then the mask is in the "good" area*/
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
  40e9d0:	461f      	mov	r7, r3
  40e9d2:	18cd      	adds	r5, r1, r3
  40e9d4:	fb05 f504 	mul.w	r5, r5, r4
  40e9d8:	12ad      	asrs	r5, r5, #10
    if(p->yx_steep > 0) {
  40e9da:	2c00      	cmp	r4, #0
  40e9dc:	dd09      	ble.n	40e9f2 <line_mask_flat+0x5a>
        if(y_at_x < abs_y) {
  40e9de:	4295      	cmp	r5, r2
  40e9e0:	da11      	bge.n	40ea06 <line_mask_flat+0x6e>
            if(p->inv) {
  40e9e2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e9e6:	f013 0f02 	tst.w	r3, #2
  40e9ea:	f000 80cb 	beq.w	40eb84 <line_mask_flat+0x1ec>
                return LV_DRAW_MASK_RES_TRANSP;
  40e9ee:	2000      	movs	r0, #0
  40e9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
            }
        }
    }
    else {
        if(y_at_x > abs_y) {
  40e9f2:	4295      	cmp	r5, r2
  40e9f4:	dd07      	ble.n	40ea06 <line_mask_flat+0x6e>
            if(p->inv) {
  40e9f6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40e9fa:	f013 0f02 	tst.w	r3, #2
  40e9fe:	f000 80c3 	beq.w	40eb88 <line_mask_flat+0x1f0>
                return LV_DRAW_MASK_RES_TRANSP;
  40ea02:	2000      	movs	r0, #0
  40ea04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
        }
    }

    int32_t xe;
    if(p->yx_steep > 0) xe = ((abs_y << 8) * p->xy_steep) >> 10;
  40ea06:	2c00      	cmp	r4, #0
  40ea08:	dd39      	ble.n	40ea7e <line_mask_flat+0xe6>
  40ea0a:	0212      	lsls	r2, r2, #8
  40ea0c:	69b4      	ldr	r4, [r6, #24]
  40ea0e:	fb04 f202 	mul.w	r2, r4, r2
  40ea12:	1292      	asrs	r2, r2, #10
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;

    int32_t xei = xe >> 8;
  40ea14:	ea4f 2e22 	mov.w	lr, r2, asr #8
    int32_t xef = xe & 0xFF;

    int32_t px_h;
    if(xef == 0) px_h = 255;
  40ea18:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
  40ea1c:	d036      	beq.n	40ea8c <line_mask_flat+0xf4>
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
  40ea1e:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40ea22:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40ea24:	fb04 f505 	mul.w	r5, r4, r5
  40ea28:	122d      	asrs	r5, r5, #8
  40ea2a:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
    int32_t k = xei - abs_x;
  40ea2e:	ebae 0101 	sub.w	r1, lr, r1
    lv_opa_t m;

    if(xef) {
  40ea32:	2a00      	cmp	r2, #0
  40ea34:	d05d      	beq.n	40eaf2 <line_mask_flat+0x15a>
        if(k >= 0 && k < len) {
  40ea36:	2900      	cmp	r1, #0
  40ea38:	db1f      	blt.n	40ea7a <line_mask_flat+0xe2>
  40ea3a:	428b      	cmp	r3, r1
  40ea3c:	dd1d      	ble.n	40ea7a <line_mask_flat+0xe2>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40ea3e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
  40ea42:	f1c5 04ff 	rsb	r4, r5, #255	; 0xff
  40ea46:	fb04 f202 	mul.w	r2, r4, r2
  40ea4a:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40ea4e:	43d4      	mvns	r4, r2
  40ea50:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40ea52:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40ea56:	f01e 0f02 	tst.w	lr, #2
  40ea5a:	d100      	bne.n	40ea5e <line_mask_flat+0xc6>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
  40ea5c:	4622      	mov	r2, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea5e:	5c44      	ldrb	r4, [r0, r1]
    return LV_DRAW_MASK_RES_CHANGED;
}

LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ea60:	2afc      	cmp	r2, #252	; 0xfc
  40ea62:	d809      	bhi.n	40ea78 <line_mask_flat+0xe0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ea64:	2a02      	cmp	r2, #2
  40ea66:	d913      	bls.n	40ea90 <line_mask_flat+0xf8>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ea68:	fb04 f202 	mul.w	r2, r4, r2
  40ea6c:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  40ea70:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  40ea74:	f3c2 54c7 	ubfx	r4, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea78:	5444      	strb	r4, [r0, r1]
        k++;
  40ea7a:	1c4a      	adds	r2, r1, #1
  40ea7c:	e013      	b.n	40eaa6 <line_mask_flat+0x10e>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40ea7e:	3201      	adds	r2, #1
  40ea80:	0212      	lsls	r2, r2, #8
  40ea82:	69b4      	ldr	r4, [r6, #24]
  40ea84:	fb04 f202 	mul.w	r2, r4, r2
  40ea88:	1292      	asrs	r2, r2, #10
  40ea8a:	e7c3      	b.n	40ea14 <line_mask_flat+0x7c>
    if(xef == 0) px_h = 255;
  40ea8c:	25ff      	movs	r5, #255	; 0xff
  40ea8e:	e7ce      	b.n	40ea2e <line_mask_flat+0x96>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ea90:	2400      	movs	r4, #0
  40ea92:	e7f1      	b.n	40ea78 <line_mask_flat+0xe0>
  40ea94:	f04f 0e00 	mov.w	lr, #0
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ea98:	f88c e000 	strb.w	lr, [ip]
        px_h -= p->spx;
  40ea9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
  40ea9e:	1b2d      	subs	r5, r5, r4
        k++;
  40eaa0:	3201      	adds	r2, #1
        if(k >= len) break;
  40eaa2:	4297      	cmp	r7, r2
  40eaa4:	dd27      	ble.n	40eaf6 <line_mask_flat+0x15e>
    while(px_h > p->spx) {
  40eaa6:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
  40eaaa:	4575      	cmp	r5, lr
  40eaac:	dd23      	ble.n	40eaf6 <line_mask_flat+0x15e>
        if(k >= 0 && k < len) {
  40eaae:	2a00      	cmp	r2, #0
  40eab0:	dbf4      	blt.n	40ea9c <line_mask_flat+0x104>
  40eab2:	42ba      	cmp	r2, r7
  40eab4:	daf2      	bge.n	40ea9c <line_mask_flat+0x104>
            m = px_h - (p->spx >> 1);
  40eab6:	b2ec      	uxtb	r4, r5
  40eab8:	f3ce 0e47 	ubfx	lr, lr, #1, #8
  40eabc:	eba4 040e 	sub.w	r4, r4, lr
  40eac0:	b2e4      	uxtb	r4, r4
            if(p->inv) m = 255 - m;
  40eac2:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
  40eac6:	f01e 0f02 	tst.w	lr, #2
  40eaca:	d001      	beq.n	40ead0 <line_mask_flat+0x138>
  40eacc:	43e4      	mvns	r4, r4
  40eace:	b2e4      	uxtb	r4, r4
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ead0:	eb00 0c02 	add.w	ip, r0, r2
  40ead4:	f810 e002 	ldrb.w	lr, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ead8:	2cfc      	cmp	r4, #252	; 0xfc
  40eada:	d8dd      	bhi.n	40ea98 <line_mask_flat+0x100>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eadc:	2c02      	cmp	r4, #2
  40eade:	d9d9      	bls.n	40ea94 <line_mask_flat+0xfc>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eae0:	fb04 f40e 	mul.w	r4, r4, lr
  40eae4:	eb04 2e04 	add.w	lr, r4, r4, lsl #8
  40eae8:	eb04 14ce 	add.w	r4, r4, lr, lsl #7
  40eaec:	f3c4 5ec7 	ubfx	lr, r4, #23, #8
  40eaf0:	e7d2      	b.n	40ea98 <line_mask_flat+0x100>
    int32_t k = xei - abs_x;
  40eaf2:	460a      	mov	r2, r1
  40eaf4:	e7d7      	b.n	40eaa6 <line_mask_flat+0x10e>
    if(k < len && k >= 0) {
  40eaf6:	429a      	cmp	r2, r3
  40eaf8:	da27      	bge.n	40eb4a <line_mask_flat+0x1b2>
  40eafa:	2a00      	cmp	r2, #0
  40eafc:	db25      	blt.n	40eb4a <line_mask_flat+0x1b2>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
  40eafe:	69b4      	ldr	r4, [r6, #24]
  40eb00:	fb04 f405 	mul.w	r4, r4, r5
  40eb04:	12a4      	asrs	r4, r4, #10
        m = (x_inters * px_h) >> 9;
  40eb06:	fb04 f505 	mul.w	r5, r4, r5
  40eb0a:	f3c5 2547 	ubfx	r5, r5, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
  40eb0e:	69f4      	ldr	r4, [r6, #28]
  40eb10:	2c00      	cmp	r4, #0
  40eb12:	db15      	blt.n	40eb40 <line_mask_flat+0x1a8>
        if(p->inv) m = 255 - m;
  40eb14:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40eb18:	f014 0f02 	tst.w	r4, #2
  40eb1c:	d001      	beq.n	40eb22 <line_mask_flat+0x18a>
  40eb1e:	43ed      	mvns	r5, r5
  40eb20:	b2ed      	uxtb	r5, r5
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40eb22:	1887      	adds	r7, r0, r2
  40eb24:	5c84      	ldrb	r4, [r0, r2]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40eb26:	2dfc      	cmp	r5, #252	; 0xfc
  40eb28:	d80e      	bhi.n	40eb48 <line_mask_flat+0x1b0>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb2a:	2d02      	cmp	r5, #2
  40eb2c:	d90b      	bls.n	40eb46 <line_mask_flat+0x1ae>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eb2e:	fb05 f504 	mul.w	r5, r5, r4
  40eb32:	eb05 2405 	add.w	r4, r5, r5, lsl #8
  40eb36:	eb05 15c4 	add.w	r5, r5, r4, lsl #7
  40eb3a:	f3c5 54c7 	ubfx	r4, r5, #23, #8
  40eb3e:	e003      	b.n	40eb48 <line_mask_flat+0x1b0>
        if(p->yx_steep < 0) m = 255 - m;
  40eb40:	43ed      	mvns	r5, r5
  40eb42:	b2ed      	uxtb	r5, r5
  40eb44:	e7e6      	b.n	40eb14 <line_mask_flat+0x17c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40eb46:	2400      	movs	r4, #0
        mask_buf[k] = mask_mix(mask_buf[k], m);
  40eb48:	703c      	strb	r4, [r7, #0]
    if(p->inv) {
  40eb4a:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
  40eb4e:	f014 0f02 	tst.w	r4, #2
  40eb52:	d007      	beq.n	40eb64 <line_mask_flat+0x1cc>
        if(k > len) {
  40eb54:	428b      	cmp	r3, r1
  40eb56:	db19      	blt.n	40eb8c <line_mask_flat+0x1f4>
        if(k >= 0) {
  40eb58:	2900      	cmp	r1, #0
  40eb5a:	db19      	blt.n	40eb90 <line_mask_flat+0x1f8>
            _lv_memset_00(&mask_buf[0], k);
  40eb5c:	4b0e      	ldr	r3, [pc, #56]	; (40eb98 <line_mask_flat+0x200>)
  40eb5e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40eb60:	2002      	movs	r0, #2
  40eb62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(k < 0) {
  40eb64:	3201      	adds	r2, #1
  40eb66:	d415      	bmi.n	40eb94 <line_mask_flat+0x1fc>
        if(k <= len) {
  40eb68:	4293      	cmp	r3, r2
  40eb6a:	da01      	bge.n	40eb70 <line_mask_flat+0x1d8>
    return LV_DRAW_MASK_RES_CHANGED;
  40eb6c:	2002      	movs	r0, #2
}
  40eb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _lv_memset_00(&mask_buf[k], len - k);
  40eb70:	1a99      	subs	r1, r3, r2
  40eb72:	4410      	add	r0, r2
  40eb74:	4b08      	ldr	r3, [pc, #32]	; (40eb98 <line_mask_flat+0x200>)
  40eb76:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40eb78:	2002      	movs	r0, #2
  40eb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40eb7c:	2000      	movs	r0, #0
  40eb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40eb80:	2000      	movs	r0, #0
  40eb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40eb84:	2001      	movs	r0, #1
  40eb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_FULL_COVER;
  40eb88:	2001      	movs	r0, #1
  40eb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40eb8c:	2000      	movs	r0, #0
  40eb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40eb90:	2002      	movs	r0, #2
  40eb92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40eb94:	2000      	movs	r0, #0
  40eb96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40eb98:	004163f5 	.word	0x004163f5

0040eb9c <line_mask_steep>:
{
  40eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40eb9e:	9e06      	ldr	r6, [sp, #24]
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40eba0:	69b5      	ldr	r5, [r6, #24]
  40eba2:	fb02 f405 	mul.w	r4, r2, r5
  40eba6:	12a4      	asrs	r4, r4, #10
    if(p->xy_steep > 0) x_at_y++;
  40eba8:	2d00      	cmp	r5, #0
  40ebaa:	dd0a      	ble.n	40ebc2 <line_mask_steep+0x26>
  40ebac:	1c67      	adds	r7, r4, #1
    if(x_at_y < abs_x) {
  40ebae:	428f      	cmp	r7, r1
  40ebb0:	da09      	bge.n	40ebc6 <line_mask_steep+0x2a>
        if(p->inv) {
  40ebb2:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ebb6:	f013 0f02 	tst.w	r3, #2
  40ebba:	f000 8156 	beq.w	40ee6a <line_mask_steep+0x2ce>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ebbe:	2001      	movs	r0, #1
  40ebc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
  40ebc2:	4627      	mov	r7, r4
  40ebc4:	e7f3      	b.n	40ebae <line_mask_steep+0x12>
    if(x_at_y > abs_x + len) {
  40ebc6:	18cf      	adds	r7, r1, r3
  40ebc8:	42bc      	cmp	r4, r7
  40ebca:	dd07      	ble.n	40ebdc <line_mask_steep+0x40>
        if(p->inv) {
  40ebcc:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  40ebd0:	f013 0f02 	tst.w	r3, #2
  40ebd4:	f000 814b 	beq.w	40ee6e <line_mask_steep+0x2d2>
            return LV_DRAW_MASK_RES_TRANSP;
  40ebd8:	2000      	movs	r0, #0
  40ebda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
  40ebdc:	0217      	lsls	r7, r2, #8
  40ebde:	fb07 f705 	mul.w	r7, r7, r5
    int32_t xsi = xs >> 8;
  40ebe2:	14bc      	asrs	r4, r7, #18
    int32_t xsf = xs & 0xFF;
  40ebe4:	f3c7 2e87 	ubfx	lr, r7, #10, #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
  40ebe8:	3201      	adds	r2, #1
  40ebea:	0212      	lsls	r2, r2, #8
  40ebec:	fb02 f205 	mul.w	r2, r2, r5
    int32_t xei = xe >> 8;
  40ebf0:	ea4f 4ca2 	mov.w	ip, r2, asr #18
    int32_t xef = xe & 0xFF;
  40ebf4:	f3c2 2287 	ubfx	r2, r2, #10, #8
    k = xsi - abs_x;
  40ebf8:	1a67      	subs	r7, r4, r1
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40ebfa:	4564      	cmp	r4, ip
  40ebfc:	d001      	beq.n	40ec02 <line_mask_steep+0x66>
  40ebfe:	2d00      	cmp	r5, #0
  40ec00:	db68      	blt.n	40ecd4 <line_mask_steep+0x138>
    if(xsi == xei) {
  40ec02:	4564      	cmp	r4, ip
  40ec04:	d06e      	beq.n	40ece4 <line_mask_steep+0x148>
        if(p->xy_steep < 0) {
  40ec06:	2d00      	cmp	r5, #0
  40ec08:	f2c0 80ad 	blt.w	40ed66 <line_mask_steep+0x1ca>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
  40ec0c:	f1ce 02ff 	rsb	r2, lr, #255	; 0xff
  40ec10:	69f5      	ldr	r5, [r6, #28]
  40ec12:	fb05 f502 	mul.w	r5, r5, r2
  40ec16:	12ad      	asrs	r5, r5, #10
            if(k >= 0 && k < len) {
  40ec18:	2f00      	cmp	r7, #0
  40ec1a:	db22      	blt.n	40ec62 <line_mask_steep+0xc6>
  40ec1c:	429f      	cmp	r7, r3
  40ec1e:	da20      	bge.n	40ec62 <line_mask_steep+0xc6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40ec20:	fb05 f202 	mul.w	r2, r5, r2
  40ec24:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40ec28:	ea6f 0e02 	mvn.w	lr, r2
  40ec2c:	fa5f fe8e 	uxtb.w	lr, lr
                if(p->inv) m = 255 - m;
  40ec30:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40ec34:	f01c 0f02 	tst.w	ip, #2
  40ec38:	d100      	bne.n	40ec3c <line_mask_steep+0xa0>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
  40ec3a:	4672      	mov	r2, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ec3c:	eb00 0c07 	add.w	ip, r0, r7
  40ec40:	f810 e007 	ldrb.w	lr, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ec44:	2afc      	cmp	r2, #252	; 0xfc
  40ec46:	d80a      	bhi.n	40ec5e <line_mask_steep+0xc2>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ec48:	2a02      	cmp	r2, #2
  40ec4a:	f240 80fd 	bls.w	40ee48 <line_mask_steep+0x2ac>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ec4e:	fb02 f20e 	mul.w	r2, r2, lr
  40ec52:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  40ec56:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  40ec5a:	f3c2 5ec7 	ubfx	lr, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ec5e:	f88c e000 	strb.w	lr, [ip]
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
  40ec62:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
  40ec66:	69b2      	ldr	r2, [r6, #24]
  40ec68:	fb02 f205 	mul.w	r2, r2, r5
  40ec6c:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40ec6e:	f117 0e01 	adds.w	lr, r7, #1
  40ec72:	d41d      	bmi.n	40ecb0 <line_mask_steep+0x114>
  40ec74:	4573      	cmp	r3, lr
  40ec76:	dd1b      	ble.n	40ecb0 <line_mask_steep+0x114>
                m = ((255 - y_inters) * x_inters) >> 9;
  40ec78:	fb02 f205 	mul.w	r2, r2, r5
  40ec7c:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(p->inv) m = 255 - m;
  40ec80:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40ec84:	f015 0f02 	tst.w	r5, #2
  40ec88:	d001      	beq.n	40ec8e <line_mask_steep+0xf2>
  40ec8a:	43d2      	mvns	r2, r2
  40ec8c:	b2d2      	uxtb	r2, r2
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ec8e:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ec92:	2afc      	cmp	r2, #252	; 0xfc
  40ec94:	d80a      	bhi.n	40ecac <line_mask_steep+0x110>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ec96:	2a02      	cmp	r2, #2
  40ec98:	f240 80d9 	bls.w	40ee4e <line_mask_steep+0x2b2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ec9c:	fb02 f205 	mul.w	r2, r2, r5
  40eca0:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40eca4:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40eca8:	f3c2 55c7 	ubfx	r5, r2, #23, #8
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ecac:	f800 500e 	strb.w	r5, [r0, lr]
            k++;
  40ecb0:	3702      	adds	r7, #2
            if(p->inv) {
  40ecb2:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ecb6:	f012 0f02 	tst.w	r2, #2
  40ecba:	f000 80ca 	beq.w	40ee52 <line_mask_steep+0x2b6>
                k = xsi - abs_x;
  40ecbe:	1a61      	subs	r1, r4, r1
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ecc0:	428b      	cmp	r3, r1
  40ecc2:	f2c0 80e4 	blt.w	40ee8e <line_mask_steep+0x2f2>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
  40ecc6:	2900      	cmp	r1, #0
  40ecc8:	f2c0 80e3 	blt.w	40ee92 <line_mask_steep+0x2f6>
  40eccc:	4b74      	ldr	r3, [pc, #464]	; (40eea0 <line_mask_steep+0x304>)
  40ecce:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ecd0:	2002      	movs	r0, #2
  40ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
  40ecd4:	f1be 0f00 	cmp.w	lr, #0
  40ecd8:	d193      	bne.n	40ec02 <line_mask_steep+0x66>
        k--;
  40ecda:	3f01      	subs	r7, #1
        xsi = xei;
  40ecdc:	4664      	mov	r4, ip
        xsf = 0xFF;
  40ecde:	f04f 0eff 	mov.w	lr, #255	; 0xff
  40ece2:	e78e      	b.n	40ec02 <line_mask_steep+0x66>
        if(k >= 0 && k < len) {
  40ece4:	2f00      	cmp	r7, #0
  40ece6:	db1c      	blt.n	40ed22 <line_mask_steep+0x186>
  40ece8:	429f      	cmp	r7, r3
  40ecea:	da1a      	bge.n	40ed22 <line_mask_steep+0x186>
            m = (xsf + xef) >> 1;
  40ecec:	4472      	add	r2, lr
  40ecee:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(p->inv) m = 255 - m;
  40ecf2:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40ecf6:	f015 0f02 	tst.w	r5, #2
  40ecfa:	d001      	beq.n	40ed00 <line_mask_steep+0x164>
  40ecfc:	43d2      	mvns	r2, r2
  40ecfe:	b2d2      	uxtb	r2, r2
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed00:	eb00 0e07 	add.w	lr, r0, r7
  40ed04:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed06:	2afc      	cmp	r2, #252	; 0xfc
  40ed08:	d809      	bhi.n	40ed1e <line_mask_steep+0x182>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed0a:	2a02      	cmp	r2, #2
  40ed0c:	d91a      	bls.n	40ed44 <line_mask_steep+0x1a8>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40ed0e:	fb05 f202 	mul.w	r2, r5, r2
  40ed12:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40ed16:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40ed1a:	f3c2 55c7 	ubfx	r5, r2, #23, #8
            mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed1e:	f88e 5000 	strb.w	r5, [lr]
        k++;
  40ed22:	3701      	adds	r7, #1
        if(p->inv) {
  40ed24:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ed28:	f012 0f02 	tst.w	r2, #2
  40ed2c:	d00c      	beq.n	40ed48 <line_mask_steep+0x1ac>
            k = xsi - abs_x;
  40ed2e:	1a61      	subs	r1, r4, r1
            if(k >= len) {
  40ed30:	428b      	cmp	r3, r1
  40ed32:	f340 809e 	ble.w	40ee72 <line_mask_steep+0x2d6>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
  40ed36:	2900      	cmp	r1, #0
  40ed38:	f2c0 809d 	blt.w	40ee76 <line_mask_steep+0x2da>
  40ed3c:	4b58      	ldr	r3, [pc, #352]	; (40eea0 <line_mask_steep+0x304>)
  40ed3e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ed40:	2002      	movs	r0, #2
  40ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed44:	2500      	movs	r5, #0
  40ed46:	e7ea      	b.n	40ed1e <line_mask_steep+0x182>
            if(k > len) k = len;
  40ed48:	42bb      	cmp	r3, r7
  40ed4a:	da00      	bge.n	40ed4e <line_mask_steep+0x1b2>
  40ed4c:	461f      	mov	r7, r3
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ed4e:	2f00      	cmp	r7, #0
  40ed50:	f000 8093 	beq.w	40ee7a <line_mask_steep+0x2de>
            else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ed54:	2f00      	cmp	r7, #0
  40ed56:	f340 8092 	ble.w	40ee7e <line_mask_steep+0x2e2>
  40ed5a:	1bd9      	subs	r1, r3, r7
  40ed5c:	4438      	add	r0, r7
  40ed5e:	4b50      	ldr	r3, [pc, #320]	; (40eea0 <line_mask_steep+0x304>)
  40ed60:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ed62:	2002      	movs	r0, #2
  40ed64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            y_inters = (xsf * (-p->yx_steep)) >> 10;
  40ed66:	69f2      	ldr	r2, [r6, #28]
  40ed68:	4252      	negs	r2, r2
  40ed6a:	fb02 f20e 	mul.w	r2, r2, lr
  40ed6e:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40ed70:	2f00      	cmp	r7, #0
  40ed72:	db23      	blt.n	40edbc <line_mask_steep+0x220>
  40ed74:	429f      	cmp	r7, r3
  40ed76:	da21      	bge.n	40edbc <line_mask_steep+0x220>
                m = (y_inters * xsf) >> 9;
  40ed78:	fb02 fe0e 	mul.w	lr, r2, lr
  40ed7c:	f3ce 2e47 	ubfx	lr, lr, #9, #8
                if(p->inv) m = 255 - m;
  40ed80:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
  40ed84:	f015 0f02 	tst.w	r5, #2
  40ed88:	d003      	beq.n	40ed92 <line_mask_steep+0x1f6>
  40ed8a:	ea6f 0e0e 	mvn.w	lr, lr
  40ed8e:	fa5f fe8e 	uxtb.w	lr, lr
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ed92:	eb00 0c07 	add.w	ip, r0, r7
  40ed96:	5dc5      	ldrb	r5, [r0, r7]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40ed98:	f1be 0ffc 	cmp.w	lr, #252	; 0xfc
  40ed9c:	d80c      	bhi.n	40edb8 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ed9e:	f1be 0f02 	cmp.w	lr, #2
  40eda2:	d908      	bls.n	40edb6 <line_mask_steep+0x21a>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40eda4:	fb0e fe05 	mul.w	lr, lr, r5
  40eda8:	eb0e 250e 	add.w	r5, lr, lr, lsl #8
  40edac:	eb0e 1ec5 	add.w	lr, lr, r5, lsl #7
  40edb0:	f3ce 55c7 	ubfx	r5, lr, #23, #8
  40edb4:	e000      	b.n	40edb8 <line_mask_steep+0x21c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edb6:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40edb8:	f88c 5000 	strb.w	r5, [ip]
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
  40edbc:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
  40edc0:	69b2      	ldr	r2, [r6, #24]
  40edc2:	4252      	negs	r2, r2
  40edc4:	fb02 f205 	mul.w	r2, r2, r5
  40edc8:	1292      	asrs	r2, r2, #10
            if(k >= 0 && k < len) {
  40edca:	f1b7 0e01 	subs.w	lr, r7, #1
  40edce:	d41f      	bmi.n	40ee10 <line_mask_steep+0x274>
  40edd0:	4573      	cmp	r3, lr
  40edd2:	dd1d      	ble.n	40ee10 <line_mask_steep+0x274>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40edd4:	fb02 f205 	mul.w	r2, r2, r5
  40edd8:	f3c2 2247 	ubfx	r2, r2, #9, #8
  40eddc:	43d5      	mvns	r5, r2
  40edde:	b2ed      	uxtb	r5, r5
                if(p->inv) m = 255 - m;
  40ede0:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
  40ede4:	f01c 0f02 	tst.w	ip, #2
  40ede8:	d100      	bne.n	40edec <line_mask_steep+0x250>
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
  40edea:	462a      	mov	r2, r5
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40edec:	f810 500e 	ldrb.w	r5, [r0, lr]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40edf0:	2afc      	cmp	r2, #252	; 0xfc
  40edf2:	d80b      	bhi.n	40ee0c <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40edf4:	2a02      	cmp	r2, #2
  40edf6:	d908      	bls.n	40ee0a <line_mask_steep+0x26e>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40edf8:	fb02 f205 	mul.w	r2, r2, r5
  40edfc:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  40ee00:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  40ee04:	f3c2 55c7 	ubfx	r5, r2, #23, #8
  40ee08:	e000      	b.n	40ee0c <line_mask_steep+0x270>
    if(mask_new <= LV_OPA_MIN) return 0;
  40ee0a:	2500      	movs	r5, #0
                mask_buf[k] = mask_mix(mask_buf[k], m);
  40ee0c:	f800 500e 	strb.w	r5, [r0, lr]
            k += 2;
  40ee10:	3701      	adds	r7, #1
            if(p->inv) {
  40ee12:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
  40ee16:	f012 0f02 	tst.w	r2, #2
  40ee1a:	d00b      	beq.n	40ee34 <line_mask_steep+0x298>
                k = xsi - abs_x - 1;
  40ee1c:	1a61      	subs	r1, r4, r1
  40ee1e:	3901      	subs	r1, #1
                if(k > len) k = len;
  40ee20:	428b      	cmp	r3, r1
  40ee22:	da01      	bge.n	40ee28 <line_mask_steep+0x28c>
    return LV_DRAW_MASK_RES_CHANGED;
  40ee24:	2002      	movs	r0, #2
  40ee26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
  40ee28:	2900      	cmp	r1, #0
  40ee2a:	dd2a      	ble.n	40ee82 <line_mask_steep+0x2e6>
  40ee2c:	4b1c      	ldr	r3, [pc, #112]	; (40eea0 <line_mask_steep+0x304>)
  40ee2e:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ee30:	2002      	movs	r0, #2
  40ee32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ee34:	42bb      	cmp	r3, r7
  40ee36:	db26      	blt.n	40ee86 <line_mask_steep+0x2ea>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ee38:	2f00      	cmp	r7, #0
  40ee3a:	db26      	blt.n	40ee8a <line_mask_steep+0x2ee>
  40ee3c:	1bd9      	subs	r1, r3, r7
  40ee3e:	4438      	add	r0, r7
  40ee40:	4b17      	ldr	r3, [pc, #92]	; (40eea0 <line_mask_steep+0x304>)
  40ee42:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ee44:	2002      	movs	r0, #2
  40ee46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(mask_new <= LV_OPA_MIN) return 0;
  40ee48:	f04f 0e00 	mov.w	lr, #0
  40ee4c:	e707      	b.n	40ec5e <line_mask_steep+0xc2>
  40ee4e:	2500      	movs	r5, #0
  40ee50:	e72c      	b.n	40ecac <line_mask_steep+0x110>
                if(k > len) k = len;
  40ee52:	42bb      	cmp	r3, r7
  40ee54:	da00      	bge.n	40ee58 <line_mask_steep+0x2bc>
  40ee56:	461f      	mov	r7, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ee58:	b1ef      	cbz	r7, 40ee96 <line_mask_steep+0x2fa>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
  40ee5a:	2f00      	cmp	r7, #0
  40ee5c:	dd1d      	ble.n	40ee9a <line_mask_steep+0x2fe>
  40ee5e:	1bd9      	subs	r1, r3, r7
  40ee60:	4438      	add	r0, r7
  40ee62:	4b0f      	ldr	r3, [pc, #60]	; (40eea0 <line_mask_steep+0x304>)
  40ee64:	4798      	blx	r3
    return LV_DRAW_MASK_RES_CHANGED;
  40ee66:	2002      	movs	r0, #2
  40ee68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40ee6a:	2000      	movs	r0, #0
  40ee6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return LV_DRAW_MASK_RES_FULL_COVER;
  40ee6e:	2001      	movs	r0, #1
  40ee70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return LV_DRAW_MASK_RES_TRANSP;
  40ee72:	2000      	movs	r0, #0
  40ee74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee76:	2002      	movs	r0, #2
  40ee78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ee7a:	2000      	movs	r0, #0
  40ee7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee7e:	2002      	movs	r0, #2
  40ee80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ee82:	2002      	movs	r0, #2
  40ee84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
  40ee86:	2001      	movs	r0, #1
  40ee88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee8a:	2002      	movs	r0, #2
  40ee8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
  40ee8e:	2000      	movs	r0, #0
  40ee90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee92:	2002      	movs	r0, #2
  40ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
  40ee96:	2000      	movs	r0, #0
  40ee98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return LV_DRAW_MASK_RES_CHANGED;
  40ee9a:	2002      	movs	r0, #2
}
  40ee9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40ee9e:	bf00      	nop
  40eea0:	004163f5 	.word	0x004163f5

0040eea4 <lv_draw_mask_line>:
{
  40eea4:	b570      	push	{r4, r5, r6, lr}
  40eea6:	b082      	sub	sp, #8
  40eea8:	9c06      	ldr	r4, [sp, #24]
    abs_y -= p->origo.y;
  40eeaa:	8aa5      	ldrh	r5, [r4, #20]
  40eeac:	1b52      	subs	r2, r2, r5
  40eeae:	b212      	sxth	r2, r2
    abs_x -= p->origo.x;
  40eeb0:	8a65      	ldrh	r5, [r4, #18]
  40eeb2:	1b49      	subs	r1, r1, r5
  40eeb4:	b209      	sxth	r1, r1
    if(p->steep == 0) {
  40eeb6:	6a26      	ldr	r6, [r4, #32]
  40eeb8:	2e00      	cmp	r6, #0
  40eeba:	d146      	bne.n	40ef4a <lv_draw_mask_line+0xa6>
        if(p->flat) {
  40eebc:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40eec0:	f015 0f01 	tst.w	r5, #1
  40eec4:	d015      	beq.n	40eef2 <lv_draw_mask_line+0x4e>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
  40eec6:	7c23      	ldrb	r3, [r4, #16]
  40eec8:	f003 0303 	and.w	r3, r3, #3
  40eecc:	2b01      	cmp	r3, #1
  40eece:	d94a      	bls.n	40ef66 <lv_draw_mask_line+0xc2>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eed0:	2b02      	cmp	r3, #2
  40eed2:	d003      	beq.n	40eedc <lv_draw_mask_line+0x38>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eed4:	2b03      	cmp	r3, #3
  40eed6:	d006      	beq.n	40eee6 <lv_draw_mask_line+0x42>
                return LV_DRAW_MASK_RES_TRANSP;
  40eed8:	2000      	movs	r0, #0
  40eeda:	e03e      	b.n	40ef5a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eedc:	f112 0f01 	cmn.w	r2, #1
  40eee0:	d5f8      	bpl.n	40eed4 <lv_draw_mask_line+0x30>
  40eee2:	2001      	movs	r0, #1
  40eee4:	e039      	b.n	40ef5a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40eee6:	2a00      	cmp	r2, #0
  40eee8:	dd01      	ble.n	40eeee <lv_draw_mask_line+0x4a>
  40eeea:	2001      	movs	r0, #1
  40eeec:	e035      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                return LV_DRAW_MASK_RES_TRANSP;
  40eeee:	2000      	movs	r0, #0
  40eef0:	e033      	b.n	40ef5a <lv_draw_mask_line+0xb6>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
  40eef2:	7c22      	ldrb	r2, [r4, #16]
  40eef4:	f002 0203 	and.w	r2, r2, #3
  40eef8:	1e94      	subs	r4, r2, #2
  40eefa:	b2e4      	uxtb	r4, r4
  40eefc:	2c01      	cmp	r4, #1
  40eefe:	d934      	bls.n	40ef6a <lv_draw_mask_line+0xc6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef00:	2a01      	cmp	r2, #1
  40ef02:	d009      	beq.n	40ef18 <lv_draw_mask_line+0x74>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
  40ef04:	b992      	cbnz	r2, 40ef2c <lv_draw_mask_line+0x88>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef06:	18ca      	adds	r2, r1, r3
  40ef08:	d431      	bmi.n	40ef6e <lv_draw_mask_line+0xca>
                    int32_t k = - abs_x;
  40ef0a:	424d      	negs	r5, r1
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ef0c:	2d00      	cmp	r5, #0
  40ef0e:	db30      	blt.n	40ef72 <lv_draw_mask_line+0xce>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ef10:	42ab      	cmp	r3, r5
  40ef12:	dc05      	bgt.n	40ef20 <lv_draw_mask_line+0x7c>
                    return LV_DRAW_MASK_RES_CHANGED;
  40ef14:	2002      	movs	r0, #2
  40ef16:	e020      	b.n	40ef5a <lv_draw_mask_line+0xb6>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef18:	2900      	cmp	r1, #0
  40ef1a:	ddf3      	ble.n	40ef04 <lv_draw_mask_line+0x60>
  40ef1c:	2001      	movs	r0, #1
  40ef1e:	e01c      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
  40ef20:	4611      	mov	r1, r2
  40ef22:	4428      	add	r0, r5
  40ef24:	4b17      	ldr	r3, [pc, #92]	; (40ef84 <lv_draw_mask_line+0xe0>)
  40ef26:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40ef28:	2002      	movs	r0, #2
  40ef2a:	e016      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ef2c:	42d9      	cmn	r1, r3
  40ef2e:	d422      	bmi.n	40ef76 <lv_draw_mask_line+0xd2>
                    int32_t k = - abs_x;
  40ef30:	4249      	negs	r1, r1
                    if(k < 0) k = 0;
  40ef32:	2900      	cmp	r1, #0
  40ef34:	db07      	blt.n	40ef46 <lv_draw_mask_line+0xa2>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40ef36:	4299      	cmp	r1, r3
  40ef38:	da1f      	bge.n	40ef7a <lv_draw_mask_line+0xd6>
                    else if(k >= 0 && k < len) _lv_memset_00(&mask_buf[0], k);
  40ef3a:	2900      	cmp	r1, #0
  40ef3c:	db1f      	blt.n	40ef7e <lv_draw_mask_line+0xda>
  40ef3e:	4b11      	ldr	r3, [pc, #68]	; (40ef84 <lv_draw_mask_line+0xe0>)
  40ef40:	4798      	blx	r3
                    return LV_DRAW_MASK_RES_CHANGED;
  40ef42:	2002      	movs	r0, #2
  40ef44:	e009      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                    if(k < 0) k = 0;
  40ef46:	4631      	mov	r1, r6
  40ef48:	e7f5      	b.n	40ef36 <lv_draw_mask_line+0x92>
    if(p->flat) {
  40ef4a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
  40ef4e:	f015 0f01 	tst.w	r5, #1
  40ef52:	d104      	bne.n	40ef5e <lv_draw_mask_line+0xba>
        res = line_mask_steep(mask_buf, abs_x, abs_y, len, p);
  40ef54:	9400      	str	r4, [sp, #0]
  40ef56:	4c0c      	ldr	r4, [pc, #48]	; (40ef88 <lv_draw_mask_line+0xe4>)
  40ef58:	47a0      	blx	r4
}
  40ef5a:	b002      	add	sp, #8
  40ef5c:	bd70      	pop	{r4, r5, r6, pc}
        res = line_mask_flat(mask_buf, abs_x, abs_y, len, p);
  40ef5e:	9400      	str	r4, [sp, #0]
  40ef60:	4c0a      	ldr	r4, [pc, #40]	; (40ef8c <lv_draw_mask_line+0xe8>)
  40ef62:	47a0      	blx	r4
  40ef64:	e7f9      	b.n	40ef5a <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef66:	2001      	movs	r0, #1
  40ef68:	e7f7      	b.n	40ef5a <lv_draw_mask_line+0xb6>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef6a:	2001      	movs	r0, #1
  40ef6c:	e7f5      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
  40ef6e:	2001      	movs	r0, #1
  40ef70:	e7f3      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ef72:	2000      	movs	r0, #0
  40ef74:	e7f1      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
  40ef76:	2000      	movs	r0, #0
  40ef78:	e7ef      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
  40ef7a:	2000      	movs	r0, #0
  40ef7c:	e7ed      	b.n	40ef5a <lv_draw_mask_line+0xb6>
                    return LV_DRAW_MASK_RES_CHANGED;
  40ef7e:	2002      	movs	r0, #2
  40ef80:	e7eb      	b.n	40ef5a <lv_draw_mask_line+0xb6>
  40ef82:	bf00      	nop
  40ef84:	004163f5 	.word	0x004163f5
  40ef88:	0040eb9d 	.word	0x0040eb9d
  40ef8c:	0040e999 	.word	0x0040e999

0040ef90 <lv_draw_mask_radius>:
{
  40ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40ef94:	b08b      	sub	sp, #44	; 0x2c
  40ef96:	9e14      	ldr	r6, [sp, #80]	; 0x50
    bool outer = p->cfg.outer;
  40ef98:	7cb5      	ldrb	r5, [r6, #18]
  40ef9a:	f005 0501 	and.w	r5, r5, #1
    int32_t radius = p->cfg.radius;
  40ef9e:	f9b6 9010 	ldrsh.w	r9, [r6, #16]
    lv_area_copy(&rect, &p->cfg.rect);
  40efa2:	f106 0c08 	add.w	ip, r6, #8
    uint8_t * d8 = (uint8_t *)dst;
  40efa6:	f10d 0e20 	add.w	lr, sp, #32
  40efaa:	2408      	movs	r4, #8
  40efac:	e004      	b.n	40efb8 <lv_draw_mask_radius+0x28>
        *d8 = *s8;
  40efae:	f81c 7b01 	ldrb.w	r7, [ip], #1
  40efb2:	f80e 7b01 	strb.w	r7, [lr], #1
        len--;
  40efb6:	3c01      	subs	r4, #1
    while(len) {
  40efb8:	2c00      	cmp	r4, #0
  40efba:	d1f8      	bne.n	40efae <lv_draw_mask_radius+0x1e>
    if(outer == false) {
  40efbc:	2d00      	cmp	r5, #0
  40efbe:	d13f      	bne.n	40f040 <lv_draw_mask_radius+0xb0>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40efc0:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40efc4:	4294      	cmp	r4, r2
  40efc6:	f300 829d 	bgt.w	40f504 <lv_draw_mask_radius+0x574>
  40efca:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40efce:	42a2      	cmp	r2, r4
  40efd0:	f300 829c 	bgt.w	40f50c <lv_draw_mask_radius+0x57c>
  40efd4:	461f      	mov	r7, r3
  40efd6:	468b      	mov	fp, r1
  40efd8:	4680      	mov	r8, r0
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40efda:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
  40efde:	eb09 0103 	add.w	r1, r9, r3
  40efe2:	458b      	cmp	fp, r1
  40efe4:	db07      	blt.n	40eff6 <lv_draw_mask_radius+0x66>
  40efe6:	eb07 000b 	add.w	r0, r7, fp
  40efea:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40efee:	eba1 0109 	sub.w	r1, r1, r9
  40eff2:	4288      	cmp	r0, r1
  40eff4:	dd0b      	ble.n	40f00e <lv_draw_mask_radius+0x7e>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40eff6:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
  40effa:	eb09 0001 	add.w	r0, r9, r1
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
  40effe:	4282      	cmp	r2, r0
  40f000:	db50      	blt.n	40f0a4 <lv_draw_mask_radius+0x114>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
  40f002:	f9bd 0026 	ldrsh.w	r0, [sp, #38]	; 0x26
  40f006:	eba0 0009 	sub.w	r0, r0, r9
  40f00a:	4282      	cmp	r2, r0
  40f00c:	dc4a      	bgt.n	40f0a4 <lv_draw_mask_radius+0x114>
        if(outer == false) {
  40f00e:	bb6d      	cbnz	r5, 40f06c <lv_draw_mask_radius+0xdc>
            int32_t last =  rect.x1 - abs_x;
  40f010:	eba3 050b 	sub.w	r5, r3, fp
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f014:	42bd      	cmp	r5, r7
  40f016:	f300 827d 	bgt.w	40f514 <lv_draw_mask_radius+0x584>
            if(last >= 0) {
  40f01a:	2d00      	cmp	r5, #0
  40f01c:	db03      	blt.n	40f026 <lv_draw_mask_radius+0x96>
                _lv_memset_00(&mask_buf[0], last);
  40f01e:	4629      	mov	r1, r5
  40f020:	4640      	mov	r0, r8
  40f022:	4ba7      	ldr	r3, [pc, #668]	; (40f2c0 <lv_draw_mask_radius+0x330>)
  40f024:	4798      	blx	r3
            int32_t first = rect.x2 - abs_x + 1;
  40f026:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
  40f02a:	eba3 040b 	sub.w	r4, r3, fp
  40f02e:	3401      	adds	r4, #1
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f030:	2c00      	cmp	r4, #0
  40f032:	f340 8271 	ble.w	40f518 <lv_draw_mask_radius+0x588>
            else if(first < len) {
  40f036:	42a7      	cmp	r7, r4
  40f038:	dc0d      	bgt.n	40f056 <lv_draw_mask_radius+0xc6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f03a:	b195      	cbz	r5, 40f062 <lv_draw_mask_radius+0xd2>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f03c:	2002      	movs	r0, #2
  40f03e:	e262      	b.n	40f506 <lv_draw_mask_radius+0x576>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
  40f040:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
  40f044:	42a2      	cmp	r2, r4
  40f046:	f2c0 8263 	blt.w	40f510 <lv_draw_mask_radius+0x580>
  40f04a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
  40f04e:	42a2      	cmp	r2, r4
  40f050:	ddc0      	ble.n	40efd4 <lv_draw_mask_radius+0x44>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f052:	2001      	movs	r0, #1
  40f054:	e257      	b.n	40f506 <lv_draw_mask_radius+0x576>
                _lv_memset_00(&mask_buf[first], len - first);
  40f056:	1b39      	subs	r1, r7, r4
  40f058:	eb08 0004 	add.w	r0, r8, r4
  40f05c:	4b98      	ldr	r3, [pc, #608]	; (40f2c0 <lv_draw_mask_radius+0x330>)
  40f05e:	4798      	blx	r3
  40f060:	e7eb      	b.n	40f03a <lv_draw_mask_radius+0xaa>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f062:	42a7      	cmp	r7, r4
  40f064:	f000 825a 	beq.w	40f51c <lv_draw_mask_radius+0x58c>
            else return LV_DRAW_MASK_RES_CHANGED;
  40f068:	2002      	movs	r0, #2
  40f06a:	e24c      	b.n	40f506 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f06c:	ebb3 030b 	subs.w	r3, r3, fp
  40f070:	d403      	bmi.n	40f07a <lv_draw_mask_radius+0xea>
            if(first <= len) {
  40f072:	42bb      	cmp	r3, r7
  40f074:	dd03      	ble.n	40f07e <lv_draw_mask_radius+0xee>
        return LV_DRAW_MASK_RES_CHANGED;
  40f076:	2002      	movs	r0, #2
  40f078:	e245      	b.n	40f506 <lv_draw_mask_radius+0x576>
            if(first < 0) first = 0;
  40f07a:	2300      	movs	r3, #0
  40f07c:	e7f9      	b.n	40f072 <lv_draw_mask_radius+0xe2>
                int32_t last =  rect.x2 - abs_x - first + 1;
  40f07e:	f9bd 1024 	ldrsh.w	r1, [sp, #36]	; 0x24
  40f082:	eba1 010b 	sub.w	r1, r1, fp
  40f086:	1ac9      	subs	r1, r1, r3
  40f088:	3101      	adds	r1, #1
                if(first + last > len) last = len - first;
  40f08a:	185a      	adds	r2, r3, r1
  40f08c:	4297      	cmp	r7, r2
  40f08e:	da00      	bge.n	40f092 <lv_draw_mask_radius+0x102>
  40f090:	1af9      	subs	r1, r7, r3
                if(last >= 0) {
  40f092:	2900      	cmp	r1, #0
  40f094:	f2c0 8244 	blt.w	40f520 <lv_draw_mask_radius+0x590>
                    _lv_memset_00(&mask_buf[first], last);
  40f098:	eb08 0003 	add.w	r0, r8, r3
  40f09c:	4b88      	ldr	r3, [pc, #544]	; (40f2c0 <lv_draw_mask_radius+0x330>)
  40f09e:	4798      	blx	r3
        return LV_DRAW_MASK_RES_CHANGED;
  40f0a0:	2002      	movs	r0, #2
  40f0a2:	e230      	b.n	40f506 <lv_draw_mask_radius+0x576>
    int32_t k = rect.x1 - abs_x; /*First relevant coordinate on the of the mask*/
  40f0a4:	eba3 0b0b 	sub.w	fp, r3, fp
  40f0a8:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
  40f0ac:	b29b      	uxth	r3, r3
  40f0ae:	1ac3      	subs	r3, r0, r3
  40f0b0:	b29b      	uxth	r3, r3
  40f0b2:	3301      	adds	r3, #1
  40f0b4:	b21b      	sxth	r3, r3
  40f0b6:	9302      	str	r3, [sp, #8]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f0b8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  40f0bc:	b28c      	uxth	r4, r1
  40f0be:	1b1b      	subs	r3, r3, r4
  40f0c0:	b29b      	uxth	r3, r3
  40f0c2:	3301      	adds	r3, #1
  40f0c4:	b21b      	sxth	r3, r3
    abs_y -= rect.y1;
  40f0c6:	1b14      	subs	r4, r2, r4
  40f0c8:	b224      	sxth	r4, r4
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
  40f0ca:	f9b6 a010 	ldrsh.w	sl, [r6, #16]
  40f0ce:	fb0a fa0a 	mul.w	sl, sl, sl
    if(abs_y < radius || abs_y > h - radius - 1) {
  40f0d2:	45a1      	cmp	r9, r4
  40f0d4:	dc06      	bgt.n	40f0e4 <lv_draw_mask_radius+0x154>
  40f0d6:	eba3 0209 	sub.w	r2, r3, r9
  40f0da:	3a01      	subs	r2, #1
  40f0dc:	4294      	cmp	r4, r2
  40f0de:	dc01      	bgt.n	40f0e4 <lv_draw_mask_radius+0x154>
    return LV_DRAW_MASK_RES_CHANGED;
  40f0e0:	2002      	movs	r0, #2
  40f0e2:	e210      	b.n	40f506 <lv_draw_mask_radius+0x576>
        if(radius <= 256) sqrt_mask = 0x800;
  40f0e4:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  40f0e8:	f300 80b1 	bgt.w	40f24e <lv_draw_mask_radius+0x2be>
  40f0ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
  40f0f0:	9201      	str	r2, [sp, #4]
        if(abs_y < radius) {
  40f0f2:	45a1      	cmp	r9, r4
  40f0f4:	f340 80b6 	ble.w	40f264 <lv_draw_mask_radius+0x2d4>
            y = radius - abs_y;
  40f0f8:	eba9 0404 	sub.w	r4, r9, r4
            if(y == p->y_prev) {
  40f0fc:	6973      	ldr	r3, [r6, #20]
  40f0fe:	429c      	cmp	r4, r3
  40f100:	f000 80a9 	beq.w	40f256 <lv_draw_mask_radius+0x2c6>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f104:	9a01      	ldr	r2, [sp, #4]
  40f106:	a904      	add	r1, sp, #16
  40f108:	fb04 a014 	mls	r0, r4, r4, sl
  40f10c:	4b6d      	ldr	r3, [pc, #436]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f10e:	4798      	blx	r3
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f110:	1e63      	subs	r3, r4, #1
  40f112:	9a01      	ldr	r2, [sp, #4]
  40f114:	a905      	add	r1, sp, #20
  40f116:	9303      	str	r3, [sp, #12]
  40f118:	fb03 a013 	mls	r0, r3, r3, sl
  40f11c:	4b69      	ldr	r3, [pc, #420]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f11e:	4798      	blx	r3
            p->y_prev = y - 1;
  40f120:	9b03      	ldr	r3, [sp, #12]
  40f122:	6173      	str	r3, [r6, #20]
            p->y_prev_x.f = x1.f;
  40f124:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f128:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x1.i;
  40f12a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f12e:	8333      	strh	r3, [r6, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f130:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f134:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f138:	1e51      	subs	r1, r2, #1
  40f13a:	428b      	cmp	r3, r1
  40f13c:	f000 80b4 	beq.w	40f2a8 <lv_draw_mask_radius+0x318>
        if(x0.i == x1.i) {
  40f140:	f8bd 2014 	ldrh.w	r2, [sp, #20]
  40f144:	4293      	cmp	r3, r2
  40f146:	f000 80bf 	beq.w	40f2c8 <lv_draw_mask_radius+0x338>
            int32_t ofs = radius - (x0.i + 1);
  40f14a:	3301      	adds	r3, #1
  40f14c:	eba9 0903 	sub.w	r9, r9, r3
            int32_t kl = k + ofs;
  40f150:	eb0b 0609 	add.w	r6, fp, r9
            int32_t kr = k + (w - ofs - 1);
  40f154:	9b02      	ldr	r3, [sp, #8]
  40f156:	eba3 0909 	sub.w	r9, r3, r9
  40f15a:	f109 39ff 	add.w	r9, r9, #4294967295
  40f15e:	44d9      	add	r9, fp
            if(outer) {
  40f160:	b175      	cbz	r5, 40f180 <lv_draw_mask_radius+0x1f0>
                if(first < 0) first = 0;
  40f162:	1c70      	adds	r0, r6, #1
  40f164:	f100 8116 	bmi.w	40f394 <lv_draw_mask_radius+0x404>
                int32_t len_tmp = kr - first;
  40f168:	eba9 0100 	sub.w	r1, r9, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f16c:	45b9      	cmp	r9, r7
  40f16e:	dd00      	ble.n	40f172 <lv_draw_mask_radius+0x1e2>
  40f170:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f172:	42b8      	cmp	r0, r7
  40f174:	da04      	bge.n	40f180 <lv_draw_mask_radius+0x1f0>
  40f176:	2900      	cmp	r1, #0
  40f178:	db02      	blt.n	40f180 <lv_draw_mask_radius+0x1f0>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f17a:	4440      	add	r0, r8
  40f17c:	4b50      	ldr	r3, [pc, #320]	; (40f2c0 <lv_draw_mask_radius+0x330>)
  40f17e:	4798      	blx	r3
            uint32_t i = x0.i + 1;
  40f180:	f8bd 0010 	ldrh.w	r0, [sp, #16]
  40f184:	f100 0b01 	add.w	fp, r0, #1
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
  40f188:	9a01      	ldr	r2, [sp, #4]
  40f18a:	a906      	add	r1, sp, #24
  40f18c:	fb00 a010 	mls	r0, r0, r0, sl
  40f190:	4b4c      	ldr	r3, [pc, #304]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f192:	4798      	blx	r3
            if(y_prev.f == 0) {
  40f194:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  40f198:	b93b      	cbnz	r3, 40f1aa <lv_draw_mask_radius+0x21a>
                y_prev.i--;
  40f19a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f19e:	3b01      	subs	r3, #1
  40f1a0:	f8ad 3018 	strh.w	r3, [sp, #24]
                y_prev.f = 0xFF;
  40f1a4:	23ff      	movs	r3, #255	; 0xff
  40f1a6:	f8ad 301a 	strh.w	r3, [sp, #26]
            if(y_prev.i >= y) {
  40f1aa:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  40f1ae:	429c      	cmp	r4, r3
  40f1b0:	f300 8103 	bgt.w	40f3ba <lv_draw_mask_radius+0x42a>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
  40f1b4:	9a01      	ldr	r2, [sp, #4]
  40f1b6:	a907      	add	r1, sp, #28
  40f1b8:	fb0b a01b 	mls	r0, fp, fp, sl
  40f1bc:	4b41      	ldr	r3, [pc, #260]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f1be:	4798      	blx	r3
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f1c0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f1c4:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
  40f1c8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f1cc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
  40f1d0:	fb03 f302 	mul.w	r3, r3, r2
  40f1d4:	f3c3 2347 	ubfx	r3, r3, #9, #8
  40f1d8:	43da      	mvns	r2, r3
  40f1da:	b2d2      	uxtb	r2, r2
                if(outer) m = 255 - m;
  40f1dc:	b905      	cbnz	r5, 40f1e0 <lv_draw_mask_radius+0x250>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
  40f1de:	4613      	mov	r3, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f1e0:	2e00      	cmp	r6, #0
  40f1e2:	db13      	blt.n	40f20c <lv_draw_mask_radius+0x27c>
  40f1e4:	42be      	cmp	r6, r7
  40f1e6:	da11      	bge.n	40f20c <lv_draw_mask_radius+0x27c>
  40f1e8:	eb08 0106 	add.w	r1, r8, r6
  40f1ec:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f1f0:	2bfc      	cmp	r3, #252	; 0xfc
  40f1f2:	d80a      	bhi.n	40f20a <lv_draw_mask_radius+0x27a>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f1f4:	2b02      	cmp	r3, #2
  40f1f6:	f240 80cf 	bls.w	40f398 <lv_draw_mask_radius+0x408>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f1fa:	fb03 f202 	mul.w	r2, r3, r2
  40f1fe:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f202:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f206:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f20a:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f20c:	f1b9 0f00 	cmp.w	r9, #0
  40f210:	db13      	blt.n	40f23a <lv_draw_mask_radius+0x2aa>
  40f212:	45b9      	cmp	r9, r7
  40f214:	da11      	bge.n	40f23a <lv_draw_mask_radius+0x2aa>
  40f216:	eb08 0109 	add.w	r1, r8, r9
  40f21a:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f21e:	2bfc      	cmp	r3, #252	; 0xfc
  40f220:	d80a      	bhi.n	40f238 <lv_draw_mask_radius+0x2a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f222:	2b02      	cmp	r3, #2
  40f224:	f240 80ba 	bls.w	40f39c <lv_draw_mask_radius+0x40c>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f228:	fb03 f302 	mul.w	r3, r3, r2
  40f22c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f230:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f234:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f238:	700a      	strb	r2, [r1, #0]
                kl--;
  40f23a:	3e01      	subs	r6, #1
                kr++;
  40f23c:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f240:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f244:	f8ad 301a 	strh.w	r3, [sp, #26]
                i++;
  40f248:	f10b 0b01 	add.w	fp, fp, #1
  40f24c:	e0b5      	b.n	40f3ba <lv_draw_mask_radius+0x42a>
        else sqrt_mask = 0x8000;
  40f24e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40f252:	9201      	str	r2, [sp, #4]
  40f254:	e74d      	b.n	40f0f2 <lv_draw_mask_radius+0x162>
                x0.f = p->y_prev_x.f;
  40f256:	8b73      	ldrh	r3, [r6, #26]
  40f258:	f8ad 3012 	strh.w	r3, [sp, #18]
                x0.i = p->y_prev_x.i;
  40f25c:	8b33      	ldrh	r3, [r6, #24]
  40f25e:	f8ad 3010 	strh.w	r3, [sp, #16]
  40f262:	e755      	b.n	40f110 <lv_draw_mask_radius+0x180>
            y = radius - (h - abs_y) + 1;
  40f264:	1b1b      	subs	r3, r3, r4
  40f266:	eba9 0003 	sub.w	r0, r9, r3
  40f26a:	1c44      	adds	r4, r0, #1
            if((y - 1) == p->y_prev) {
  40f26c:	6973      	ldr	r3, [r6, #20]
  40f26e:	4298      	cmp	r0, r3
  40f270:	d013      	beq.n	40f29a <lv_draw_mask_radius+0x30a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
  40f272:	9a01      	ldr	r2, [sp, #4]
  40f274:	a905      	add	r1, sp, #20
  40f276:	fb00 a010 	mls	r0, r0, r0, sl
  40f27a:	4b12      	ldr	r3, [pc, #72]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f27c:	4798      	blx	r3
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
  40f27e:	9a01      	ldr	r2, [sp, #4]
  40f280:	a904      	add	r1, sp, #16
  40f282:	fb04 a014 	mls	r0, r4, r4, sl
  40f286:	4b0f      	ldr	r3, [pc, #60]	; (40f2c4 <lv_draw_mask_radius+0x334>)
  40f288:	4798      	blx	r3
            p->y_prev = y;
  40f28a:	6174      	str	r4, [r6, #20]
            p->y_prev_x.f = x0.f;
  40f28c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  40f290:	8373      	strh	r3, [r6, #26]
            p->y_prev_x.i = x0.i;
  40f292:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  40f296:	8333      	strh	r3, [r6, #24]
  40f298:	e74a      	b.n	40f130 <lv_draw_mask_radius+0x1a0>
                x1.f = p->y_prev_x.f;
  40f29a:	8b73      	ldrh	r3, [r6, #26]
  40f29c:	f8ad 3016 	strh.w	r3, [sp, #22]
                x1.i = p->y_prev_x.i;
  40f2a0:	8b33      	ldrh	r3, [r6, #24]
  40f2a2:	f8ad 3014 	strh.w	r3, [sp, #20]
  40f2a6:	e7ea      	b.n	40f27e <lv_draw_mask_radius+0x2ee>
        if(x0.i == x1.i - 1 && x1.f == 0) {
  40f2a8:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f2ac:	2900      	cmp	r1, #0
  40f2ae:	f47f af47 	bne.w	40f140 <lv_draw_mask_radius+0x1b0>
            x1.i--;
  40f2b2:	3a01      	subs	r2, #1
  40f2b4:	f8ad 2014 	strh.w	r2, [sp, #20]
            x1.f = 0xFF;
  40f2b8:	22ff      	movs	r2, #255	; 0xff
  40f2ba:	f8ad 2016 	strh.w	r2, [sp, #22]
  40f2be:	e73f      	b.n	40f140 <lv_draw_mask_radius+0x1b0>
  40f2c0:	004163f5 	.word	0x004163f5
  40f2c4:	00415dcd 	.word	0x00415dcd
            lv_opa_t m = (x0.f + x1.f) >> 1;
  40f2c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  40f2cc:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  40f2d0:	440a      	add	r2, r1
  40f2d2:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
  40f2d6:	b10d      	cbz	r5, 40f2dc <lv_draw_mask_radius+0x34c>
  40f2d8:	43d2      	mvns	r2, r2
  40f2da:	b2d2      	uxtb	r2, r2
            int32_t ofs = radius - x0.i - 1;
  40f2dc:	eba9 0303 	sub.w	r3, r9, r3
  40f2e0:	3b01      	subs	r3, #1
            if(kl >= 0 && kl < len) {
  40f2e2:	eb1b 0103 	adds.w	r1, fp, r3
  40f2e6:	d411      	bmi.n	40f30c <lv_draw_mask_radius+0x37c>
  40f2e8:	42b9      	cmp	r1, r7
  40f2ea:	da0f      	bge.n	40f30c <lv_draw_mask_radius+0x37c>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f2ec:	f818 0001 	ldrb.w	r0, [r8, r1]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f2f0:	2afc      	cmp	r2, #252	; 0xfc
  40f2f2:	d809      	bhi.n	40f308 <lv_draw_mask_radius+0x378>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f2f4:	2a02      	cmp	r2, #2
  40f2f6:	d932      	bls.n	40f35e <lv_draw_mask_radius+0x3ce>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f2f8:	fb02 f000 	mul.w	r0, r2, r0
  40f2fc:	eb00 2400 	add.w	r4, r0, r0, lsl #8
  40f300:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
  40f304:	f3c0 50c7 	ubfx	r0, r0, #23, #8
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f308:	f808 0001 	strb.w	r0, [r8, r1]
            int32_t kr = k + (w - ofs - 1);
  40f30c:	9802      	ldr	r0, [sp, #8]
  40f30e:	1ac3      	subs	r3, r0, r3
  40f310:	3b01      	subs	r3, #1
            if(kr >= 0 && kr < len) {
  40f312:	eb1b 0303 	adds.w	r3, fp, r3
  40f316:	d411      	bmi.n	40f33c <lv_draw_mask_radius+0x3ac>
  40f318:	42bb      	cmp	r3, r7
  40f31a:	da0f      	bge.n	40f33c <lv_draw_mask_radius+0x3ac>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f31c:	f818 0003 	ldrb.w	r0, [r8, r3]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f320:	2afc      	cmp	r2, #252	; 0xfc
  40f322:	d809      	bhi.n	40f338 <lv_draw_mask_radius+0x3a8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f324:	2a02      	cmp	r2, #2
  40f326:	d91c      	bls.n	40f362 <lv_draw_mask_radius+0x3d2>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f328:	fb02 f200 	mul.w	r2, r2, r0
  40f32c:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f330:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f334:	f3c2 50c7 	ubfx	r0, r2, #23, #8
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f338:	f808 0003 	strb.w	r0, [r8, r3]
            if(outer == false) {
  40f33c:	b19d      	cbz	r5, 40f366 <lv_draw_mask_radius+0x3d6>
                if(first < 0) first = 0;
  40f33e:	1c48      	adds	r0, r1, #1
  40f340:	d426      	bmi.n	40f390 <lv_draw_mask_radius+0x400>
                int32_t len_tmp = kr - first;
  40f342:	1a19      	subs	r1, r3, r0
                if(len_tmp + first > len) len_tmp = len - first;
  40f344:	42bb      	cmp	r3, r7
  40f346:	dd00      	ble.n	40f34a <lv_draw_mask_radius+0x3ba>
  40f348:	1a39      	subs	r1, r7, r0
                if(first < len && len_tmp >= 0) {
  40f34a:	42b8      	cmp	r0, r7
  40f34c:	f280 80be 	bge.w	40f4cc <lv_draw_mask_radius+0x53c>
  40f350:	2900      	cmp	r1, #0
  40f352:	f2c0 80bb 	blt.w	40f4cc <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[first], len_tmp);
  40f356:	4440      	add	r0, r8
  40f358:	4b72      	ldr	r3, [pc, #456]	; (40f524 <lv_draw_mask_radius+0x594>)
  40f35a:	4798      	blx	r3
  40f35c:	e0b6      	b.n	40f4cc <lv_draw_mask_radius+0x53c>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f35e:	2000      	movs	r0, #0
  40f360:	e7d2      	b.n	40f308 <lv_draw_mask_radius+0x378>
  40f362:	2000      	movs	r0, #0
  40f364:	e7e8      	b.n	40f338 <lv_draw_mask_radius+0x3a8>
                kr++;
  40f366:	1c5c      	adds	r4, r3, #1
                if(kl > len)  {
  40f368:	42b9      	cmp	r1, r7
  40f36a:	f300 80c9 	bgt.w	40f500 <lv_draw_mask_radius+0x570>
                if(kl >= 0) {
  40f36e:	2900      	cmp	r1, #0
  40f370:	db02      	blt.n	40f378 <lv_draw_mask_radius+0x3e8>
                    _lv_memset_00(&mask_buf[0], kl);
  40f372:	4640      	mov	r0, r8
  40f374:	4b6b      	ldr	r3, [pc, #428]	; (40f524 <lv_draw_mask_radius+0x594>)
  40f376:	4798      	blx	r3
                if(kr < 0) {
  40f378:	2c00      	cmp	r4, #0
  40f37a:	f2c0 80c1 	blt.w	40f500 <lv_draw_mask_radius+0x570>
                if(kr <= len) {
  40f37e:	42bc      	cmp	r4, r7
  40f380:	f300 80a4 	bgt.w	40f4cc <lv_draw_mask_radius+0x53c>
                    _lv_memset_00(&mask_buf[kr], len - kr);
  40f384:	1b39      	subs	r1, r7, r4
  40f386:	eb08 0004 	add.w	r0, r8, r4
  40f38a:	4b66      	ldr	r3, [pc, #408]	; (40f524 <lv_draw_mask_radius+0x594>)
  40f38c:	4798      	blx	r3
  40f38e:	e09d      	b.n	40f4cc <lv_draw_mask_radius+0x53c>
                if(first < 0) first = 0;
  40f390:	2000      	movs	r0, #0
  40f392:	e7d6      	b.n	40f342 <lv_draw_mask_radius+0x3b2>
                if(first < 0) first = 0;
  40f394:	2000      	movs	r0, #0
  40f396:	e6e7      	b.n	40f168 <lv_draw_mask_radius+0x1d8>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f398:	2200      	movs	r2, #0
  40f39a:	e736      	b.n	40f20a <lv_draw_mask_radius+0x27a>
  40f39c:	2200      	movs	r2, #0
  40f39e:	e74b      	b.n	40f238 <lv_draw_mask_radius+0x2a8>
  40f3a0:	2200      	movs	r2, #0
  40f3a2:	e041      	b.n	40f428 <lv_draw_mask_radius+0x498>
  40f3a4:	2200      	movs	r2, #0
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f3a6:	700a      	strb	r2, [r1, #0]
                kl--;
  40f3a8:	3e01      	subs	r6, #1
                kr++;
  40f3aa:	f109 0901 	add.w	r9, r9, #1
                y_prev.f = y_next.f;
  40f3ae:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  40f3b2:	f8ad 301a 	strh.w	r3, [sp, #26]
            for(; i <= x1.i; i++) {
  40f3b6:	f10b 0b01 	add.w	fp, fp, #1
  40f3ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  40f3be:	459b      	cmp	fp, r3
  40f3c0:	d849      	bhi.n	40f456 <lv_draw_mask_radius+0x4c6>
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
  40f3c2:	fb0b a11b 	mls	r1, fp, fp, sl
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
  40f3c6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  40f3ca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f3ce:	0913      	lsrs	r3, r2, #4
  40f3d0:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    uint32_t raw2 = raw * raw;
  40f3d4:	fb03 f003 	mul.w	r0, r3, r3

    int32_t d = x - raw2;
  40f3d8:	ebc0 2101 	rsb	r1, r0, r1, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
  40f3dc:	0058      	lsls	r0, r3, #1
  40f3de:	fb91 f1f0 	sdiv	r1, r1, r0
  40f3e2:	440b      	add	r3, r1

    q->i = d >> 4;
  40f3e4:	1119      	asrs	r1, r3, #4
  40f3e6:	f8ad 101c 	strh.w	r1, [sp, #28]
    q->f = (d & 0xF) << 4;
  40f3ea:	011b      	lsls	r3, r3, #4
  40f3ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  40f3f0:	f8ad 301e 	strh.w	r3, [sp, #30]
                m = (y_prev.f + y_next.f) >> 1;
  40f3f4:	4413      	add	r3, r2
  40f3f6:	f3c3 0347 	ubfx	r3, r3, #1, #8
                if(outer) m = 255 - m;
  40f3fa:	b10d      	cbz	r5, 40f400 <lv_draw_mask_radius+0x470>
  40f3fc:	43db      	mvns	r3, r3
  40f3fe:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f400:	2e00      	cmp	r6, #0
  40f402:	db12      	blt.n	40f42a <lv_draw_mask_radius+0x49a>
  40f404:	42be      	cmp	r6, r7
  40f406:	da10      	bge.n	40f42a <lv_draw_mask_radius+0x49a>
  40f408:	eb08 0106 	add.w	r1, r8, r6
  40f40c:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f410:	2bfc      	cmp	r3, #252	; 0xfc
  40f412:	d809      	bhi.n	40f428 <lv_draw_mask_radius+0x498>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f414:	2b02      	cmp	r3, #2
  40f416:	d9c3      	bls.n	40f3a0 <lv_draw_mask_radius+0x410>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f418:	fb03 f202 	mul.w	r2, r3, r2
  40f41c:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f420:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f424:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f428:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f42a:	f1b9 0f00 	cmp.w	r9, #0
  40f42e:	dbbb      	blt.n	40f3a8 <lv_draw_mask_radius+0x418>
  40f430:	45b9      	cmp	r9, r7
  40f432:	dab9      	bge.n	40f3a8 <lv_draw_mask_radius+0x418>
  40f434:	eb08 0109 	add.w	r1, r8, r9
  40f438:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f43c:	2bfc      	cmp	r3, #252	; 0xfc
  40f43e:	d8b2      	bhi.n	40f3a6 <lv_draw_mask_radius+0x416>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f440:	2b02      	cmp	r3, #2
  40f442:	d9af      	bls.n	40f3a4 <lv_draw_mask_radius+0x414>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f444:	fb03 f302 	mul.w	r3, r3, r2
  40f448:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f44c:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f450:	f3c3 52c7 	ubfx	r2, r3, #23, #8
  40f454:	e7a7      	b.n	40f3a6 <lv_draw_mask_radius+0x416>
            if(y_prev.f) {
  40f456:	f8bd 201a 	ldrh.w	r2, [sp, #26]
  40f45a:	b3b2      	cbz	r2, 40f4ca <lv_draw_mask_radius+0x53a>
                m = (y_prev.f * x1.f) >> 9;
  40f45c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  40f460:	fb03 f302 	mul.w	r3, r3, r2
  40f464:	f3c3 2347 	ubfx	r3, r3, #9, #8
                if(outer) m = 255 - m;
  40f468:	b10d      	cbz	r5, 40f46e <lv_draw_mask_radius+0x4de>
  40f46a:	43db      	mvns	r3, r3
  40f46c:	b2db      	uxtb	r3, r3
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f46e:	2e00      	cmp	r6, #0
  40f470:	db12      	blt.n	40f498 <lv_draw_mask_radius+0x508>
  40f472:	42be      	cmp	r6, r7
  40f474:	da10      	bge.n	40f498 <lv_draw_mask_radius+0x508>
  40f476:	eb08 0106 	add.w	r1, r8, r6
  40f47a:	f818 2006 	ldrb.w	r2, [r8, r6]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f47e:	2bfc      	cmp	r3, #252	; 0xfc
  40f480:	d809      	bhi.n	40f496 <lv_draw_mask_radius+0x506>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f482:	2b02      	cmp	r3, #2
  40f484:	d924      	bls.n	40f4d0 <lv_draw_mask_radius+0x540>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f486:	fb03 f202 	mul.w	r2, r3, r2
  40f48a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  40f48e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  40f492:	f3c2 52c7 	ubfx	r2, r2, #23, #8
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
  40f496:	700a      	strb	r2, [r1, #0]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f498:	f1b9 0f00 	cmp.w	r9, #0
  40f49c:	db12      	blt.n	40f4c4 <lv_draw_mask_radius+0x534>
  40f49e:	45b9      	cmp	r9, r7
  40f4a0:	da10      	bge.n	40f4c4 <lv_draw_mask_radius+0x534>
  40f4a2:	eb08 0109 	add.w	r1, r8, r9
  40f4a6:	f818 2009 	ldrb.w	r2, [r8, r9]
    if(mask_new >= LV_OPA_MAX) return mask_act;
  40f4aa:	2bfc      	cmp	r3, #252	; 0xfc
  40f4ac:	d809      	bhi.n	40f4c2 <lv_draw_mask_radius+0x532>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4ae:	2b02      	cmp	r3, #2
  40f4b0:	d910      	bls.n	40f4d4 <lv_draw_mask_radius+0x544>
    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
  40f4b2:	fb03 f302 	mul.w	r3, r3, r2
  40f4b6:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  40f4ba:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  40f4be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
  40f4c2:	700a      	strb	r2, [r1, #0]
                kl--;
  40f4c4:	3e01      	subs	r6, #1
                kr++;
  40f4c6:	f109 0901 	add.w	r9, r9, #1
            if(outer == 0) {
  40f4ca:	b12d      	cbz	r5, 40f4d8 <lv_draw_mask_radius+0x548>
    return LV_DRAW_MASK_RES_CHANGED;
  40f4cc:	2002      	movs	r0, #2
  40f4ce:	e01a      	b.n	40f506 <lv_draw_mask_radius+0x576>
    if(mask_new <= LV_OPA_MIN) return 0;
  40f4d0:	2200      	movs	r2, #0
  40f4d2:	e7e0      	b.n	40f496 <lv_draw_mask_radius+0x506>
  40f4d4:	2200      	movs	r2, #0
  40f4d6:	e7f4      	b.n	40f4c2 <lv_draw_mask_radius+0x532>
                kl++;
  40f4d8:	1c71      	adds	r1, r6, #1
                if(kl > len) {
  40f4da:	42b9      	cmp	r1, r7
  40f4dc:	dc10      	bgt.n	40f500 <lv_draw_mask_radius+0x570>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
  40f4de:	2900      	cmp	r1, #0
  40f4e0:	db02      	blt.n	40f4e8 <lv_draw_mask_radius+0x558>
  40f4e2:	4640      	mov	r0, r8
  40f4e4:	4b0f      	ldr	r3, [pc, #60]	; (40f524 <lv_draw_mask_radius+0x594>)
  40f4e6:	4798      	blx	r3
                if(kr < 0) {
  40f4e8:	f1b9 0f00 	cmp.w	r9, #0
  40f4ec:	db08      	blt.n	40f500 <lv_draw_mask_radius+0x570>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
  40f4ee:	45b9      	cmp	r9, r7
  40f4f0:	daec      	bge.n	40f4cc <lv_draw_mask_radius+0x53c>
  40f4f2:	eba7 0109 	sub.w	r1, r7, r9
  40f4f6:	eb08 0009 	add.w	r0, r8, r9
  40f4fa:	4b0a      	ldr	r3, [pc, #40]	; (40f524 <lv_draw_mask_radius+0x594>)
  40f4fc:	4798      	blx	r3
  40f4fe:	e7e5      	b.n	40f4cc <lv_draw_mask_radius+0x53c>
                    return LV_DRAW_MASK_RES_TRANSP;
  40f500:	2000      	movs	r0, #0
  40f502:	e000      	b.n	40f506 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_TRANSP;
  40f504:	2000      	movs	r0, #0
}
  40f506:	b00b      	add	sp, #44	; 0x2c
  40f508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return LV_DRAW_MASK_RES_TRANSP;
  40f50c:	2000      	movs	r0, #0
  40f50e:	e7fa      	b.n	40f506 <lv_draw_mask_radius+0x576>
            return LV_DRAW_MASK_RES_FULL_COVER;
  40f510:	2001      	movs	r0, #1
  40f512:	e7f8      	b.n	40f506 <lv_draw_mask_radius+0x576>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
  40f514:	2000      	movs	r0, #0
  40f516:	e7f6      	b.n	40f506 <lv_draw_mask_radius+0x576>
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
  40f518:	2000      	movs	r0, #0
  40f51a:	e7f4      	b.n	40f506 <lv_draw_mask_radius+0x576>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
  40f51c:	2001      	movs	r0, #1
  40f51e:	e7f2      	b.n	40f506 <lv_draw_mask_radius+0x576>
        return LV_DRAW_MASK_RES_CHANGED;
  40f520:	2002      	movs	r0, #2
  40f522:	e7f0      	b.n	40f506 <lv_draw_mask_radius+0x576>
  40f524:	004163f5 	.word	0x004163f5

0040f528 <lv_draw_mask_add>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f528:	2300      	movs	r3, #0
  40f52a:	2b0f      	cmp	r3, #15
  40f52c:	d806      	bhi.n	40f53c <lv_draw_mask_add+0x14>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
  40f52e:	4a0a      	ldr	r2, [pc, #40]	; (40f558 <lv_draw_mask_add+0x30>)
  40f530:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f534:	b112      	cbz	r2, 40f53c <lv_draw_mask_add+0x14>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f536:	3301      	adds	r3, #1
  40f538:	b2db      	uxtb	r3, r3
  40f53a:	e7f6      	b.n	40f52a <lv_draw_mask_add+0x2>
    if(i >= _LV_MASK_MAX_NUM) {
  40f53c:	2b0f      	cmp	r3, #15
  40f53e:	d807      	bhi.n	40f550 <lv_draw_mask_add+0x28>
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
  40f540:	4a05      	ldr	r2, [pc, #20]	; (40f558 <lv_draw_mask_add+0x30>)
  40f542:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
  40f546:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f54a:	6051      	str	r1, [r2, #4]
    return i;
  40f54c:	b218      	sxth	r0, r3
  40f54e:	4770      	bx	lr
        return LV_MASK_ID_INV;
  40f550:	f04f 30ff 	mov.w	r0, #4294967295
}
  40f554:	4770      	bx	lr
  40f556:	bf00      	nop
  40f558:	2043a28c 	.word	0x2043a28c

0040f55c <lv_draw_mask_apply>:
{
  40f55c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40f560:	b082      	sub	sp, #8
  40f562:	4680      	mov	r8, r0
  40f564:	460f      	mov	r7, r1
  40f566:	4616      	mov	r6, r2
  40f568:	469a      	mov	sl, r3
    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
  40f56a:	4c0f      	ldr	r4, [pc, #60]	; (40f5a8 <lv_draw_mask_apply+0x4c>)
    bool changed = false;
  40f56c:	f04f 0900 	mov.w	r9, #0
    while(m->param) {
  40f570:	e000      	b.n	40f574 <lv_draw_mask_apply+0x18>
        m++;
  40f572:	3408      	adds	r4, #8
    while(m->param) {
  40f574:	6823      	ldr	r3, [r4, #0]
  40f576:	b16b      	cbz	r3, 40f594 <lv_draw_mask_apply+0x38>
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
  40f578:	681d      	ldr	r5, [r3, #0]
  40f57a:	9300      	str	r3, [sp, #0]
  40f57c:	4653      	mov	r3, sl
  40f57e:	4632      	mov	r2, r6
  40f580:	4639      	mov	r1, r7
  40f582:	4640      	mov	r0, r8
  40f584:	47a8      	blx	r5
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
  40f586:	4603      	mov	r3, r0
  40f588:	b140      	cbz	r0, 40f59c <lv_draw_mask_apply+0x40>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
  40f58a:	2802      	cmp	r0, #2
  40f58c:	d1f1      	bne.n	40f572 <lv_draw_mask_apply+0x16>
  40f58e:	f04f 0901 	mov.w	r9, #1
  40f592:	e7ee      	b.n	40f572 <lv_draw_mask_apply+0x16>
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f594:	f1b9 0f00 	cmp.w	r9, #0
  40f598:	d004      	beq.n	40f5a4 <lv_draw_mask_apply+0x48>
  40f59a:	2302      	movs	r3, #2
}
  40f59c:	4618      	mov	r0, r3
  40f59e:	b002      	add	sp, #8
  40f5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
  40f5a4:	2301      	movs	r3, #1
  40f5a6:	e7f9      	b.n	40f59c <lv_draw_mask_apply+0x40>
  40f5a8:	2043a28c 	.word	0x2043a28c

0040f5ac <lv_draw_mask_remove_id>:
    if(id != LV_MASK_ID_INV) {
  40f5ac:	f1b0 3fff 	cmp.w	r0, #4294967295
  40f5b0:	d00a      	beq.n	40f5c8 <lv_draw_mask_remove_id+0x1c>
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
  40f5b2:	4b06      	ldr	r3, [pc, #24]	; (40f5cc <lv_draw_mask_remove_id+0x20>)
  40f5b4:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
  40f5b8:	2200      	movs	r2, #0
  40f5ba:	f843 2030 	str.w	r2, [r3, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
  40f5be:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
  40f5c2:	605a      	str	r2, [r3, #4]
}
  40f5c4:	4608      	mov	r0, r1
  40f5c6:	4770      	bx	lr
    void * p = NULL;
  40f5c8:	2100      	movs	r1, #0
    return p;
  40f5ca:	e7fb      	b.n	40f5c4 <lv_draw_mask_remove_id+0x18>
  40f5cc:	2043a28c 	.word	0x2043a28c

0040f5d0 <lv_draw_mask_remove_custom>:
{
  40f5d0:	4601      	mov	r1, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f5d2:	2300      	movs	r3, #0
    void * p = NULL;
  40f5d4:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f5d6:	e004      	b.n	40f5e2 <lv_draw_mask_remove_custom+0x12>
}
  40f5d8:	f85d 4b04 	ldr.w	r4, [sp], #4
  40f5dc:	4770      	bx	lr
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f5de:	3301      	adds	r3, #1
  40f5e0:	b2db      	uxtb	r3, r3
  40f5e2:	2b0f      	cmp	r3, #15
  40f5e4:	d81a      	bhi.n	40f61c <lv_draw_mask_remove_custom+0x4c>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f5e6:	4a0e      	ldr	r2, [pc, #56]	; (40f620 <lv_draw_mask_remove_custom+0x50>)
  40f5e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f5ec:	6852      	ldr	r2, [r2, #4]
  40f5ee:	428a      	cmp	r2, r1
  40f5f0:	d1f5      	bne.n	40f5de <lv_draw_mask_remove_custom+0xe>
{
  40f5f2:	b410      	push	{r4}
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
  40f5f4:	4a0a      	ldr	r2, [pc, #40]	; (40f620 <lv_draw_mask_remove_custom+0x50>)
  40f5f6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
  40f5fa:	2400      	movs	r4, #0
  40f5fc:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
  40f600:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f604:	6054      	str	r4, [r2, #4]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f606:	3301      	adds	r3, #1
  40f608:	b2db      	uxtb	r3, r3
  40f60a:	2b0f      	cmp	r3, #15
  40f60c:	d8e4      	bhi.n	40f5d8 <lv_draw_mask_remove_custom+0x8>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
  40f60e:	4a04      	ldr	r2, [pc, #16]	; (40f620 <lv_draw_mask_remove_custom+0x50>)
  40f610:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  40f614:	6852      	ldr	r2, [r2, #4]
  40f616:	428a      	cmp	r2, r1
  40f618:	d1f5      	bne.n	40f606 <lv_draw_mask_remove_custom+0x36>
  40f61a:	e7eb      	b.n	40f5f4 <lv_draw_mask_remove_custom+0x24>
  40f61c:	4770      	bx	lr
  40f61e:	bf00      	nop
  40f620:	2043a28c 	.word	0x2043a28c

0040f624 <lv_draw_mask_get_cnt>:
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f624:	2300      	movs	r3, #0
    uint8_t cnt = 0;
  40f626:	4618      	mov	r0, r3
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
  40f628:	e001      	b.n	40f62e <lv_draw_mask_get_cnt+0xa>
  40f62a:	3301      	adds	r3, #1
  40f62c:	b2db      	uxtb	r3, r3
  40f62e:	2b0f      	cmp	r3, #15
  40f630:	d807      	bhi.n	40f642 <lv_draw_mask_get_cnt+0x1e>
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
  40f632:	4a04      	ldr	r2, [pc, #16]	; (40f644 <lv_draw_mask_get_cnt+0x20>)
  40f634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  40f638:	2a00      	cmp	r2, #0
  40f63a:	d0f6      	beq.n	40f62a <lv_draw_mask_get_cnt+0x6>
  40f63c:	3001      	adds	r0, #1
  40f63e:	b2c0      	uxtb	r0, r0
  40f640:	e7f3      	b.n	40f62a <lv_draw_mask_get_cnt+0x6>
}
  40f642:	4770      	bx	lr
  40f644:	2043a28c 	.word	0x2043a28c

0040f648 <lv_draw_mask_line_points_init>:
{
  40f648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40f64c:	4604      	mov	r4, r0
  40f64e:	4688      	mov	r8, r1
  40f650:	4616      	mov	r6, r2
  40f652:	461f      	mov	r7, r3
  40f654:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
  40f658:	212c      	movs	r1, #44	; 0x2c
  40f65a:	4b50      	ldr	r3, [pc, #320]	; (40f79c <lv_draw_mask_line_points_init+0x154>)
  40f65c:	4798      	blx	r3
    if(p1y > p2y) {
  40f65e:	42ae      	cmp	r6, r5
  40f660:	dc05      	bgt.n	40f66e <lv_draw_mask_line_points_init+0x26>
  40f662:	462b      	mov	r3, r5
  40f664:	4635      	mov	r5, r6
  40f666:	461e      	mov	r6, r3
  40f668:	463b      	mov	r3, r7
  40f66a:	4647      	mov	r7, r8
  40f66c:	4698      	mov	r8, r3
    param->cfg.p1.x = p1x;
  40f66e:	8127      	strh	r7, [r4, #8]
    param->cfg.p1.y = p1y;
  40f670:	8165      	strh	r5, [r4, #10]
    param->cfg.p2.x = p2x;
  40f672:	f8a4 800c 	strh.w	r8, [r4, #12]
    param->cfg.p2.y = p2y;
  40f676:	81e6      	strh	r6, [r4, #14]
    param->cfg.side = side;
  40f678:	7c23      	ldrb	r3, [r4, #16]
  40f67a:	f89d 201c 	ldrb.w	r2, [sp, #28]
  40f67e:	f362 0301 	bfi	r3, r2, #0, #2
  40f682:	7423      	strb	r3, [r4, #16]
    param->origo.x = p1x;
  40f684:	8267      	strh	r7, [r4, #18]
    param->origo.y = p1y;
  40f686:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
  40f688:	eba8 0707 	sub.w	r7, r8, r7
  40f68c:	ea87 72e7 	eor.w	r2, r7, r7, asr #31
  40f690:	eba2 72e7 	sub.w	r2, r2, r7, asr #31
  40f694:	1b75      	subs	r5, r6, r5
  40f696:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
  40f69a:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
  40f69e:	429a      	cmp	r2, r3
  40f6a0:	bfd4      	ite	le
  40f6a2:	2200      	movle	r2, #0
  40f6a4:	2201      	movgt	r2, #1
  40f6a6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f6aa:	f362 0300 	bfi	r3, r2, #0, #1
  40f6ae:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->yx_steep = 0;
  40f6b2:	2200      	movs	r2, #0
  40f6b4:	61e2      	str	r2, [r4, #28]
    param->xy_steep = 0;
  40f6b6:	61a2      	str	r2, [r4, #24]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
  40f6b8:	4939      	ldr	r1, [pc, #228]	; (40f7a0 <lv_draw_mask_line_points_init+0x158>)
  40f6ba:	6021      	str	r1, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
  40f6bc:	7122      	strb	r2, [r4, #4]
    if(param->flat) {
  40f6be:	f013 0f01 	tst.w	r3, #1
  40f6c2:	d024      	beq.n	40f70e <lv_draw_mask_line_points_init+0xc6>
        if(dx) {
  40f6c4:	b13f      	cbz	r7, 40f6d6 <lv_draw_mask_line_points_init+0x8e>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
  40f6c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f6ca:	fb93 f3f7 	sdiv	r3, r3, r7
            param->yx_steep = (m * dy) >> 10;
  40f6ce:	fb03 f305 	mul.w	r3, r3, r5
  40f6d2:	129b      	asrs	r3, r3, #10
  40f6d4:	61e3      	str	r3, [r4, #28]
        if(dy) {
  40f6d6:	b13d      	cbz	r5, 40f6e8 <lv_draw_mask_line_points_init+0xa0>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f6d8:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
  40f6dc:	fb96 f5f5 	sdiv	r5, r6, r5
            param->xy_steep = (m * dx) >> 10;
  40f6e0:	fb05 f707 	mul.w	r7, r5, r7
  40f6e4:	12bf      	asrs	r7, r7, #10
  40f6e6:	61a7      	str	r7, [r4, #24]
        param->steep = param->yx_steep;
  40f6e8:	69e3      	ldr	r3, [r4, #28]
  40f6ea:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
  40f6ec:	7c23      	ldrb	r3, [r4, #16]
  40f6ee:	f013 0303 	ands.w	r3, r3, #3
  40f6f2:	d121      	bne.n	40f738 <lv_draw_mask_line_points_init+0xf0>
  40f6f4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f6f8:	f36f 0341 	bfc	r3, #1, #1
  40f6fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    param->spx = param->steep >> 2;
  40f700:	6a22      	ldr	r2, [r4, #32]
  40f702:	1093      	asrs	r3, r2, #2
  40f704:	6263      	str	r3, [r4, #36]	; 0x24
    if(param->steep < 0) param->spx = -param->spx;
  40f706:	2a00      	cmp	r2, #0
  40f708:	db45      	blt.n	40f796 <lv_draw_mask_line_points_init+0x14e>
  40f70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
  40f70e:	b13d      	cbz	r5, 40f720 <lv_draw_mask_line_points_init+0xd8>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f710:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  40f714:	fb93 f3f5 	sdiv	r3, r3, r5
            param->xy_steep = (m * dx) >> 10;
  40f718:	fb03 f307 	mul.w	r3, r3, r7
  40f71c:	129b      	asrs	r3, r3, #10
  40f71e:	61a3      	str	r3, [r4, #24]
        if(dx) {
  40f720:	b13f      	cbz	r7, 40f732 <lv_draw_mask_line_points_init+0xea>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
  40f722:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
  40f726:	fb98 f7f7 	sdiv	r7, r8, r7
            param->yx_steep = (m * dy) >> 10;
  40f72a:	fb07 f505 	mul.w	r5, r7, r5
  40f72e:	12ad      	asrs	r5, r5, #10
  40f730:	61e5      	str	r5, [r4, #28]
        param->steep = param->xy_steep;
  40f732:	69a3      	ldr	r3, [r4, #24]
  40f734:	6223      	str	r3, [r4, #32]
  40f736:	e7d9      	b.n	40f6ec <lv_draw_mask_line_points_init+0xa4>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f738:	2b01      	cmp	r3, #1
  40f73a:	d00d      	beq.n	40f758 <lv_draw_mask_line_points_init+0x110>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
  40f73c:	2b02      	cmp	r3, #2
  40f73e:	d012      	beq.n	40f766 <lv_draw_mask_line_points_init+0x11e>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM) {
  40f740:	2b03      	cmp	r3, #3
  40f742:	d1dd      	bne.n	40f700 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 0;
  40f744:	6a23      	ldr	r3, [r4, #32]
  40f746:	2b00      	cmp	r3, #0
  40f748:	dd1e      	ble.n	40f788 <lv_draw_mask_line_points_init+0x140>
  40f74a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f74e:	f36f 0341 	bfc	r3, #1, #1
  40f752:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f756:	e7d3      	b.n	40f700 <lv_draw_mask_line_points_init+0xb8>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
  40f758:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f75c:	f043 0302 	orr.w	r3, r3, #2
  40f760:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f764:	e7cc      	b.n	40f700 <lv_draw_mask_line_points_init+0xb8>
        if(param->steep > 0) param->inv = 1;
  40f766:	6a23      	ldr	r3, [r4, #32]
  40f768:	2b00      	cmp	r3, #0
  40f76a:	dd06      	ble.n	40f77a <lv_draw_mask_line_points_init+0x132>
  40f76c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f770:	f043 0302 	orr.w	r3, r3, #2
  40f774:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f778:	e7c2      	b.n	40f700 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 0;
  40f77a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f77e:	f36f 0341 	bfc	r3, #1, #1
  40f782:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f786:	e7bb      	b.n	40f700 <lv_draw_mask_line_points_init+0xb8>
        else param->inv = 1;
  40f788:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  40f78c:	f043 0302 	orr.w	r3, r3, #2
  40f790:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  40f794:	e7b4      	b.n	40f700 <lv_draw_mask_line_points_init+0xb8>
    if(param->steep < 0) param->spx = -param->spx;
  40f796:	425b      	negs	r3, r3
  40f798:	6263      	str	r3, [r4, #36]	; 0x24
}
  40f79a:	e7b6      	b.n	40f70a <lv_draw_mask_line_points_init+0xc2>
  40f79c:	004163f5 	.word	0x004163f5
  40f7a0:	0040eea5 	.word	0x0040eea5

0040f7a4 <lv_draw_mask_radius_init>:
{
  40f7a4:	b470      	push	{r4, r5, r6}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f7a6:	888c      	ldrh	r4, [r1, #4]
  40f7a8:	880e      	ldrh	r6, [r1, #0]
  40f7aa:	1ba4      	subs	r4, r4, r6
  40f7ac:	b2a4      	uxth	r4, r4
  40f7ae:	3401      	adds	r4, #1
  40f7b0:	b226      	sxth	r6, r4
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f7b2:	88cd      	ldrh	r5, [r1, #6]
  40f7b4:	884c      	ldrh	r4, [r1, #2]
  40f7b6:	1b2d      	subs	r5, r5, r4
  40f7b8:	b2ad      	uxth	r5, r5
  40f7ba:	3501      	adds	r5, #1
  40f7bc:	b22c      	sxth	r4, r5
    int32_t short_side = LV_MATH_MIN(w, h);
  40f7be:	42b4      	cmp	r4, r6
  40f7c0:	bfa8      	it	ge
  40f7c2:	4634      	movge	r4, r6
    if(radius > short_side >> 1) radius = short_side >> 1;
  40f7c4:	1064      	asrs	r4, r4, #1
  40f7c6:	42a2      	cmp	r2, r4
  40f7c8:	dd00      	ble.n	40f7cc <lv_draw_mask_radius_init+0x28>
  40f7ca:	b222      	sxth	r2, r4
    uint8_t * d8 = (uint8_t *)dst;
  40f7cc:	f100 0508 	add.w	r5, r0, #8
    lv_area_copy(&param->cfg.rect, rect);
  40f7d0:	2408      	movs	r4, #8
  40f7d2:	e004      	b.n	40f7de <lv_draw_mask_radius_init+0x3a>
        *d8 = *s8;
  40f7d4:	f811 6b01 	ldrb.w	r6, [r1], #1
  40f7d8:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  40f7dc:	3c01      	subs	r4, #1
    while(len) {
  40f7de:	2c00      	cmp	r4, #0
  40f7e0:	d1f8      	bne.n	40f7d4 <lv_draw_mask_radius_init+0x30>
    param->cfg.radius = radius;
  40f7e2:	8202      	strh	r2, [r0, #16]
    param->cfg.outer = inv ? 1 : 0;
  40f7e4:	7c82      	ldrb	r2, [r0, #18]
  40f7e6:	f363 0200 	bfi	r2, r3, #0, #1
  40f7ea:	7482      	strb	r2, [r0, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
  40f7ec:	4b05      	ldr	r3, [pc, #20]	; (40f804 <lv_draw_mask_radius_init+0x60>)
  40f7ee:	6003      	str	r3, [r0, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
  40f7f0:	2302      	movs	r3, #2
  40f7f2:	7103      	strb	r3, [r0, #4]
    param->y_prev = INT32_MIN;
  40f7f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  40f7f8:	6143      	str	r3, [r0, #20]
    param->y_prev_x.f = 0;
  40f7fa:	2300      	movs	r3, #0
  40f7fc:	8343      	strh	r3, [r0, #26]
    param->y_prev_x.i = 0;
  40f7fe:	8303      	strh	r3, [r0, #24]
}
  40f800:	bc70      	pop	{r4, r5, r6}
  40f802:	4770      	bx	lr
  40f804:	0040ef91 	.word	0x0040ef91

0040f808 <shadow_blur_corner>:
#endif

}

LV_ATTRIBUTE_FAST_MEM static void shadow_blur_corner(lv_coord_t size, lv_coord_t sw, uint16_t * sh_ups_buf)
{
  40f808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f80c:	b085      	sub	sp, #20
  40f80e:	9002      	str	r0, [sp, #8]
  40f810:	9101      	str	r1, [sp, #4]
  40f812:	4615      	mov	r5, r2
    int32_t s_left = sw >> 1;
  40f814:	104f      	asrs	r7, r1, #1
    int32_t s_right = (sw >> 1);
    if((sw & 1) == 0) s_left--;
  40f816:	f011 0f01 	tst.w	r1, #1
  40f81a:	d10e      	bne.n	40f83a <shadow_blur_corner+0x32>
  40f81c:	f107 38ff 	add.w	r8, r7, #4294967295

    /*Horizontal blur*/
    uint16_t * sh_ups_blur_buf = _lv_mem_buf_get(size * sizeof(uint16_t));
  40f820:	9b02      	ldr	r3, [sp, #8]
  40f822:	469a      	mov	sl, r3
  40f824:	005e      	lsls	r6, r3, #1
  40f826:	4630      	mov	r0, r6
  40f828:	4b50      	ldr	r3, [pc, #320]	; (40f96c <shadow_blur_corner+0x164>)
  40f82a:	4798      	blx	r3
  40f82c:	4604      	mov	r4, r0

    int32_t x;
    int32_t y;

    uint16_t * sh_ups_tmp_buf = sh_ups_buf;
  40f82e:	46a9      	mov	r9, r5

    for(y = 0; y < size; y++) {
  40f830:	f04f 0b00 	mov.w	fp, #0
  40f834:	9503      	str	r5, [sp, #12]
  40f836:	9d02      	ldr	r5, [sp, #8]
  40f838:	e024      	b.n	40f884 <shadow_blur_corner+0x7c>
    int32_t s_left = sw >> 1;
  40f83a:	46b8      	mov	r8, r7
  40f83c:	e7f0      	b.n	40f820 <shadow_blur_corner+0x18>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
        for(x = size - 1; x >= 0; x--) {
            sh_ups_blur_buf[x] = v;

            /*Forget the right pixel*/
            uint32_t right_val = 0;
  40f83e:	2200      	movs	r2, #0
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
            v -= right_val;
  40f840:	1a9b      	subs	r3, r3, r2

            /*Add the left pixel*/
            uint32_t left_val;
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f842:	eba0 0e08 	sub.w	lr, r0, r8
  40f846:	f1be 0f01 	cmp.w	lr, #1
  40f84a:	d410      	bmi.n	40f86e <shadow_blur_corner+0x66>
            else left_val = sh_ups_tmp_buf[x - s_left - 1];
  40f84c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40f850:	4472      	add	r2, lr
  40f852:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
            v += left_val;
  40f856:	4413      	add	r3, r2
        for(x = size - 1; x >= 0; x--) {
  40f858:	3801      	subs	r0, #1
  40f85a:	2800      	cmp	r0, #0
  40f85c:	db0a      	blt.n	40f874 <shadow_blur_corner+0x6c>
            sh_ups_blur_buf[x] = v;
  40f85e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
            if(x + s_right < size) right_val = sh_ups_tmp_buf[x + s_right];
  40f862:	19c2      	adds	r2, r0, r7
  40f864:	4291      	cmp	r1, r2
  40f866:	ddea      	ble.n	40f83e <shadow_blur_corner+0x36>
  40f868:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
  40f86c:	e7e8      	b.n	40f840 <shadow_blur_corner+0x38>
            if(x - s_left - 1 < 0) left_val = sh_ups_tmp_buf[0];
  40f86e:	f8b9 2000 	ldrh.w	r2, [r9]
  40f872:	e7f0      	b.n	40f856 <shadow_blur_corner+0x4e>
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
  40f874:	4632      	mov	r2, r6
  40f876:	4621      	mov	r1, r4
  40f878:	4648      	mov	r0, r9
  40f87a:	4b3d      	ldr	r3, [pc, #244]	; (40f970 <shadow_blur_corner+0x168>)
  40f87c:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40f87e:	44b1      	add	r9, r6
    for(y = 0; y < size; y++) {
  40f880:	f10b 0b01 	add.w	fp, fp, #1
  40f884:	4629      	mov	r1, r5
  40f886:	45ab      	cmp	fp, r5
  40f888:	da09      	bge.n	40f89e <shadow_blur_corner+0x96>
        int32_t v = sh_ups_tmp_buf[size - 1] * sw;
  40f88a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  40f88e:	4453      	add	r3, sl
  40f890:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
  40f894:	9a01      	ldr	r2, [sp, #4]
  40f896:	fb02 f303 	mul.w	r3, r2, r3
        for(x = size - 1; x >= 0; x--) {
  40f89a:	1e68      	subs	r0, r5, #1
  40f89c:	e7dd      	b.n	40f85a <shadow_blur_corner+0x52>
  40f89e:	9d03      	ldr	r5, [sp, #12]
    }

    /*Vertical blur*/
    uint32_t i;
    sh_ups_buf[0] = sh_ups_buf[0] / sw;
  40f8a0:	882b      	ldrh	r3, [r5, #0]
  40f8a2:	9a01      	ldr	r2, [sp, #4]
  40f8a4:	4694      	mov	ip, r2
  40f8a6:	fb93 f3f2 	sdiv	r3, r3, r2
  40f8aa:	802b      	strh	r3, [r5, #0]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f8ac:	2301      	movs	r3, #1
  40f8ae:	e002      	b.n	40f8b6 <shadow_blur_corner+0xae>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f8b0:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
    for(i = 1; i < (uint32_t)size * size; i++) {
  40f8b4:	3301      	adds	r3, #1
  40f8b6:	fb0a f20a 	mul.w	r2, sl, sl
  40f8ba:	4293      	cmp	r3, r2
  40f8bc:	d20d      	bcs.n	40f8da <shadow_blur_corner+0xd2>
        if(sh_ups_buf[i] == sh_ups_buf[i - 1]) sh_ups_buf[i] = sh_ups_buf[i - 1];
  40f8be:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
  40f8c2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40f8c6:	4418      	add	r0, r3
  40f8c8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f8cc:	4282      	cmp	r2, r0
  40f8ce:	d0ef      	beq.n	40f8b0 <shadow_blur_corner+0xa8>
        else sh_ups_buf[i] = sh_ups_buf[i] / sw;
  40f8d0:	fb92 f2fc 	sdiv	r2, r2, ip
  40f8d4:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
  40f8d8:	e7ec      	b.n	40f8b4 <shadow_blur_corner+0xac>
  40f8da:	f04f 0a00 	mov.w	sl, #0
  40f8de:	e034      	b.n	40f94a <shadow_blur_corner+0x142>

    for(x = 0; x < size; x++) {
        sh_ups_tmp_buf = &sh_ups_buf[x];
        int32_t v = sh_ups_tmp_buf[0] * sw;
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f8e0:	f04f 0b00 	mov.w	fp, #0
  40f8e4:	e011      	b.n	40f90a <shadow_blur_corner+0x102>

            /*Forget the top pixel*/
            uint32_t top_val;
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f8e6:	f8b9 0000 	ldrh.w	r0, [r9]
  40f8ea:	e017      	b.n	40f91c <shadow_blur_corner+0x114>
            v -= top_val;

            /*Add the bottom pixel*/
            uint32_t bottom_val;
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
            else bottom_val = sh_ups_buf[(size - 1) * size + x];
  40f8ec:	1e48      	subs	r0, r1, #1
  40f8ee:	fb00 a001 	mla	r0, r0, r1, sl
  40f8f2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v += bottom_val;
  40f8f6:	4402      	add	r2, r0
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f8f8:	3301      	adds	r3, #1
  40f8fa:	44b1      	add	r9, r6
  40f8fc:	428b      	cmp	r3, r1
  40f8fe:	da18      	bge.n	40f932 <shadow_blur_corner+0x12a>
            sh_ups_blur_buf[y] = v < 0 ? 0 : (v >> SHADOW_UPSCALE_SHIFT);
  40f900:	0058      	lsls	r0, r3, #1
  40f902:	2a00      	cmp	r2, #0
  40f904:	dbec      	blt.n	40f8e0 <shadow_blur_corner+0xd8>
  40f906:	f3c2 1b8f 	ubfx	fp, r2, #6, #16
  40f90a:	f824 b000 	strh.w	fp, [r4, r0]
            if(y - s_right <= 0) top_val = sh_ups_tmp_buf[0];
  40f90e:	1bd8      	subs	r0, r3, r7
  40f910:	2800      	cmp	r0, #0
  40f912:	dde8      	ble.n	40f8e6 <shadow_blur_corner+0xde>
            else top_val = sh_ups_buf[(y - s_right) * size + x];
  40f914:	fb00 a001 	mla	r0, r0, r1, sl
  40f918:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
            v -= top_val;
  40f91c:	1a12      	subs	r2, r2, r0
            if(y + s_left + 1 < size) bottom_val = sh_ups_buf[(y + s_left + 1) * size + x];
  40f91e:	eb08 0003 	add.w	r0, r8, r3
  40f922:	3001      	adds	r0, #1
  40f924:	4281      	cmp	r1, r0
  40f926:	dde1      	ble.n	40f8ec <shadow_blur_corner+0xe4>
  40f928:	fb00 a001 	mla	r0, r0, r1, sl
  40f92c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
  40f930:	e7e1      	b.n	40f8f6 <shadow_blur_corner+0xee>
  40f932:	2300      	movs	r3, #0
  40f934:	e005      	b.n	40f942 <shadow_blur_corner+0x13a>
        }

        /*Write back the result into `sh_ups_buf`*/
        sh_ups_tmp_buf = &sh_ups_buf[x];
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
            (*sh_ups_tmp_buf) = sh_ups_blur_buf[y];
  40f936:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
  40f93a:	f8ae 2000 	strh.w	r2, [lr]
        for(y = 0; y < size; y++, sh_ups_tmp_buf += size) {
  40f93e:	3301      	adds	r3, #1
  40f940:	44b6      	add	lr, r6
  40f942:	428b      	cmp	r3, r1
  40f944:	dbf7      	blt.n	40f936 <shadow_blur_corner+0x12e>
    for(x = 0; x < size; x++) {
  40f946:	f10a 0a01 	add.w	sl, sl, #1
  40f94a:	458a      	cmp	sl, r1
  40f94c:	da08      	bge.n	40f960 <shadow_blur_corner+0x158>
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f94e:	eb05 0e4a 	add.w	lr, r5, sl, lsl #1
        int32_t v = sh_ups_tmp_buf[0] * sw;
  40f952:	f835 201a 	ldrh.w	r2, [r5, sl, lsl #1]
  40f956:	fb02 f20c 	mul.w	r2, r2, ip
        sh_ups_tmp_buf = &sh_ups_buf[x];
  40f95a:	46f1      	mov	r9, lr
        for(y = 0; y < size ; y++, sh_ups_tmp_buf += size) {
  40f95c:	2300      	movs	r3, #0
  40f95e:	e7cd      	b.n	40f8fc <shadow_blur_corner+0xf4>
        }
    }

    _lv_mem_buf_release(sh_ups_blur_buf);
  40f960:	4620      	mov	r0, r4
  40f962:	4b04      	ldr	r3, [pc, #16]	; (40f974 <shadow_blur_corner+0x16c>)
  40f964:	4798      	blx	r3
}
  40f966:	b005      	add	sp, #20
  40f968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40f96c:	00416269 	.word	0x00416269
  40f970:	004160d1 	.word	0x004160d1
  40f974:	00416019 	.word	0x00416019

0040f978 <shadow_draw_corner_buf>:
{
  40f978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40f97c:	b08f      	sub	sp, #60	; 0x3c
  40f97e:	4688      	mov	r8, r1
  40f980:	4692      	mov	sl, r2
  40f982:	461a      	mov	r2, r3
    int32_t size = sw_ori  + r;
  40f984:	eb0a 0503 	add.w	r5, sl, r3
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  40f988:	4604      	mov	r4, r0
    uint8_t * d8 = (uint8_t *)dst;
  40f98a:	a90c      	add	r1, sp, #48	; 0x30
  40f98c:	2308      	movs	r3, #8
  40f98e:	e004      	b.n	40f99a <shadow_draw_corner_buf+0x22>

    while(len) {
        *d8 = *s8;
  40f990:	f814 6b01 	ldrb.w	r6, [r4], #1
  40f994:	f801 6b01 	strb.w	r6, [r1], #1
        d8++;
        s8++;
        len--;
  40f998:	3b01      	subs	r3, #1
    while(len) {
  40f99a:	2b00      	cmp	r3, #0
  40f99c:	d1f8      	bne.n	40f990 <shadow_draw_corner_buf+0x18>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40f99e:	4651      	mov	r1, sl
  40f9a0:	f1ba 0f00 	cmp.w	sl, #0
  40f9a4:	db36      	blt.n	40fa14 <shadow_draw_corner_buf+0x9c>
  40f9a6:	f3c1 014f 	ubfx	r1, r1, #1, #16
  40f9aa:	188b      	adds	r3, r1, r2
  40f9ac:	b29b      	uxth	r3, r3
  40f9ae:	f01a 0401 	ands.w	r4, sl, #1
  40f9b2:	9403      	str	r4, [sp, #12]
  40f9b4:	bf0c      	ite	eq
  40f9b6:	2401      	moveq	r4, #1
  40f9b8:	2400      	movne	r4, #0
  40f9ba:	1b1b      	subs	r3, r3, r4
  40f9bc:	3b01      	subs	r3, #1
  40f9be:	b29b      	uxth	r3, r3
  40f9c0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    sh_area.y1 = sw / 2 + 1;
  40f9c4:	3101      	adds	r1, #1
  40f9c6:	b289      	uxth	r1, r1
  40f9c8:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40f9cc:	8884      	ldrh	r4, [r0, #4]
  40f9ce:	8806      	ldrh	r6, [r0, #0]
  40f9d0:	1ba4      	subs	r4, r4, r6
  40f9d2:	b2a4      	uxth	r4, r4
  40f9d4:	3401      	adds	r4, #1
  40f9d6:	b2a4      	uxth	r4, r4
    sh_area.x1 = sh_area.x2 - lv_area_get_width(coords);
  40f9d8:	1b1b      	subs	r3, r3, r4
  40f9da:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40f9de:	88c3      	ldrh	r3, [r0, #6]
  40f9e0:	8840      	ldrh	r0, [r0, #2]
  40f9e2:	1a1b      	subs	r3, r3, r0
  40f9e4:	b29b      	uxth	r3, r3
  40f9e6:	3301      	adds	r3, #1
    sh_area.y2 = sh_area.y1 + lv_area_get_height(coords);
  40f9e8:	fa11 f183 	uxtah	r1, r1, r3
  40f9ec:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
    lv_draw_mask_radius_init(&mask_param, &sh_area, r, false);
  40f9f0:	2300      	movs	r3, #0
  40f9f2:	a90c      	add	r1, sp, #48	; 0x30
  40f9f4:	a805      	add	r0, sp, #20
  40f9f6:	4c4d      	ldr	r4, [pc, #308]	; (40fb2c <shadow_draw_corner_buf+0x1b4>)
  40f9f8:	47a0      	blx	r4
    if(sw_ori == 1) sw = 1;
  40f9fa:	f1ba 0f01 	cmp.w	sl, #1
  40f9fe:	d00c      	beq.n	40fa1a <shadow_draw_corner_buf+0xa2>
    else sw = sw_ori >> 1;
  40fa00:	ea4f 0a6a 	mov.w	sl, sl, asr #1
    lv_opa_t * mask_line = _lv_mem_buf_get(size);
  40fa04:	46a9      	mov	r9, r5
  40fa06:	4628      	mov	r0, r5
  40fa08:	4b49      	ldr	r3, [pc, #292]	; (40fb30 <shadow_draw_corner_buf+0x1b8>)
  40fa0a:	4798      	blx	r3
  40fa0c:	4604      	mov	r4, r0
    uint16_t * sh_ups_tmp_buf = (uint16_t *)sh_buf;
  40fa0e:	4646      	mov	r6, r8
    for(y = 0; y < size; y++) {
  40fa10:	2700      	movs	r7, #0
  40fa12:	e00d      	b.n	40fa30 <shadow_draw_corner_buf+0xb8>
    sh_area.x2 = sw / 2 + r - 1  - ((sw & 1) ? 0 : 1);
  40fa14:	f10a 0101 	add.w	r1, sl, #1
  40fa18:	e7c5      	b.n	40f9a6 <shadow_draw_corner_buf+0x2e>
    if(sw_ori == 1) sw = 1;
  40fa1a:	f04f 0a01 	mov.w	sl, #1
  40fa1e:	e7f1      	b.n	40fa04 <shadow_draw_corner_buf+0x8c>
            _lv_memset_00(sh_ups_tmp_buf, size * sizeof(sh_ups_tmp_buf[0]));
  40fa20:	ea4f 0149 	mov.w	r1, r9, lsl #1
  40fa24:	4630      	mov	r0, r6
  40fa26:	4b43      	ldr	r3, [pc, #268]	; (40fb34 <shadow_draw_corner_buf+0x1bc>)
  40fa28:	4798      	blx	r3
        sh_ups_tmp_buf += size;
  40fa2a:	eb06 0649 	add.w	r6, r6, r9, lsl #1
    for(y = 0; y < size; y++) {
  40fa2e:	3701      	adds	r7, #1
  40fa30:	42af      	cmp	r7, r5
  40fa32:	da2c      	bge.n	40fa8e <shadow_draw_corner_buf+0x116>
        _lv_memset_ff(mask_line, size);
  40fa34:	4649      	mov	r1, r9
  40fa36:	4620      	mov	r0, r4
  40fa38:	4b3f      	ldr	r3, [pc, #252]	; (40fb38 <shadow_draw_corner_buf+0x1c0>)
  40fa3a:	4798      	blx	r3
        lv_draw_mask_res_t mask_res = mask_param.dsc.cb(mask_line, 0, y, size, &mask_param);
  40fa3c:	ab0e      	add	r3, sp, #56	; 0x38
  40fa3e:	f853 bd24 	ldr.w	fp, [r3, #-36]!
  40fa42:	9300      	str	r3, [sp, #0]
  40fa44:	b22b      	sxth	r3, r5
  40fa46:	b23a      	sxth	r2, r7
  40fa48:	2100      	movs	r1, #0
  40fa4a:	4620      	mov	r0, r4
  40fa4c:	47d8      	blx	fp
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
  40fa4e:	2800      	cmp	r0, #0
  40fa50:	d0e6      	beq.n	40fa20 <shadow_draw_corner_buf+0xa8>
            sh_ups_tmp_buf[0] = (mask_line[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fa52:	7823      	ldrb	r3, [r4, #0]
  40fa54:	019b      	lsls	r3, r3, #6
  40fa56:	4650      	mov	r0, sl
  40fa58:	fb93 f3fa 	sdiv	r3, r3, sl
  40fa5c:	8033      	strh	r3, [r6, #0]
            for(i = 1; i < size; i++) {
  40fa5e:	2301      	movs	r3, #1
  40fa60:	e007      	b.n	40fa72 <shadow_draw_corner_buf+0xfa>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fa62:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
  40fa66:	441a      	add	r2, r3
  40fa68:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
  40fa6c:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
            for(i = 1; i < size; i++) {
  40fa70:	3301      	adds	r3, #1
  40fa72:	42ab      	cmp	r3, r5
  40fa74:	dad9      	bge.n	40fa2a <shadow_draw_corner_buf+0xb2>
                if(mask_line[i] == mask_line[i - 1]) sh_ups_tmp_buf[i] = sh_ups_tmp_buf[i - 1];
  40fa76:	5ce2      	ldrb	r2, [r4, r3]
  40fa78:	18e1      	adds	r1, r4, r3
  40fa7a:	f811 1c01 	ldrb.w	r1, [r1, #-1]
  40fa7e:	428a      	cmp	r2, r1
  40fa80:	d0ef      	beq.n	40fa62 <shadow_draw_corner_buf+0xea>
                else sh_ups_tmp_buf[i] = (mask_line[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fa82:	0192      	lsls	r2, r2, #6
  40fa84:	fb92 f2f0 	sdiv	r2, r2, r0
  40fa88:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
  40fa8c:	e7f0      	b.n	40fa70 <shadow_draw_corner_buf+0xf8>
    _lv_mem_buf_release(mask_line);
  40fa8e:	4620      	mov	r0, r4
  40fa90:	4b2a      	ldr	r3, [pc, #168]	; (40fb3c <shadow_draw_corner_buf+0x1c4>)
  40fa92:	4798      	blx	r3
    if(sw == 1) {
  40fa94:	f1ba 0f01 	cmp.w	sl, #1
  40fa98:	d021      	beq.n	40fade <shadow_draw_corner_buf+0x166>
    shadow_blur_corner(size, sw, sh_buf);
  40fa9a:	b22c      	sxth	r4, r5
  40fa9c:	4642      	mov	r2, r8
  40fa9e:	4651      	mov	r1, sl
  40faa0:	4620      	mov	r0, r4
  40faa2:	4b27      	ldr	r3, [pc, #156]	; (40fb40 <shadow_draw_corner_buf+0x1c8>)
  40faa4:	4798      	blx	r3
    sw += sw_ori & 1;
  40faa6:	9b03      	ldr	r3, [sp, #12]
  40faa8:	4453      	add	r3, sl
  40faaa:	b219      	sxth	r1, r3
    if(sw > 1) {
  40faac:	2901      	cmp	r1, #1
  40faae:	dd32      	ble.n	40fb16 <shadow_draw_corner_buf+0x19e>
        sh_buf[0] = (sh_buf[0] << SHADOW_UPSCALE_SHIFT) / sw;
  40fab0:	f8b8 3000 	ldrh.w	r3, [r8]
  40fab4:	019b      	lsls	r3, r3, #6
  40fab6:	460e      	mov	r6, r1
  40fab8:	fb93 f3f1 	sdiv	r3, r3, r1
  40fabc:	f8a8 3000 	strh.w	r3, [r8]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fac0:	2301      	movs	r3, #1
  40fac2:	e011      	b.n	40fae8 <shadow_draw_corner_buf+0x170>
            res_buf[i] = (sh_buf[i] >> SHADOW_UPSCALE_SHIFT);
  40fac4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40fac8:	0992      	lsrs	r2, r2, #6
  40faca:	f808 2003 	strb.w	r2, [r8, r3]
        for(i = 0; i < size * size; i++) {
  40face:	3301      	adds	r3, #1
  40fad0:	fb05 f205 	mul.w	r2, r5, r5
  40fad4:	4293      	cmp	r3, r2
  40fad6:	dbf5      	blt.n	40fac4 <shadow_draw_corner_buf+0x14c>
}
  40fad8:	b00f      	add	sp, #60	; 0x3c
  40fada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40fade:	2300      	movs	r3, #0
  40fae0:	e7f6      	b.n	40fad0 <shadow_draw_corner_buf+0x158>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40fae2:	f828 0013 	strh.w	r0, [r8, r3, lsl #1]
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fae6:	3301      	adds	r3, #1
  40fae8:	fb09 f209 	mul.w	r2, r9, r9
  40faec:	4293      	cmp	r3, r2
  40faee:	d20e      	bcs.n	40fb0e <shadow_draw_corner_buf+0x196>
            if(sh_buf[i] == sh_buf[i - 1]) sh_buf[i] = sh_buf[i - 1];
  40faf0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40faf4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  40faf8:	4418      	add	r0, r3
  40fafa:	f838 0010 	ldrh.w	r0, [r8, r0, lsl #1]
  40fafe:	4282      	cmp	r2, r0
  40fb00:	d0ef      	beq.n	40fae2 <shadow_draw_corner_buf+0x16a>
            else sh_buf[i] = (sh_buf[i] << SHADOW_UPSCALE_SHIFT) / sw;
  40fb02:	0192      	lsls	r2, r2, #6
  40fb04:	fb92 f2f6 	sdiv	r2, r2, r6
  40fb08:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
  40fb0c:	e7eb      	b.n	40fae6 <shadow_draw_corner_buf+0x16e>
        shadow_blur_corner(size, sw, sh_buf);
  40fb0e:	4642      	mov	r2, r8
  40fb10:	4620      	mov	r0, r4
  40fb12:	4b0b      	ldr	r3, [pc, #44]	; (40fb40 <shadow_draw_corner_buf+0x1c8>)
  40fb14:	4798      	blx	r3
        for(i = 1; i < (uint32_t) size * size; i++) {
  40fb16:	2300      	movs	r3, #0
    for(x = 0; x < size * size; x++) {
  40fb18:	fb05 f205 	mul.w	r2, r5, r5
  40fb1c:	4293      	cmp	r3, r2
  40fb1e:	dadb      	bge.n	40fad8 <shadow_draw_corner_buf+0x160>
        res_buf[x] = sh_buf[x];
  40fb20:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
  40fb24:	f808 2003 	strb.w	r2, [r8, r3]
    for(x = 0; x < size * size; x++) {
  40fb28:	3301      	adds	r3, #1
  40fb2a:	e7f5      	b.n	40fb18 <shadow_draw_corner_buf+0x1a0>
  40fb2c:	0040f7a5 	.word	0x0040f7a5
  40fb30:	00416269 	.word	0x00416269
  40fb34:	004163f5 	.word	0x004163f5
  40fb38:	0041644d 	.word	0x0041644d
  40fb3c:	00416019 	.word	0x00416019
  40fb40:	0040f809 	.word	0x0040f809

0040fb44 <draw_shadow>:
{
  40fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40fb48:	b0a7      	sub	sp, #156	; 0x9c
    if(dsc->shadow_width == 0) return;
  40fb4a:	f9b2 4022 	ldrsh.w	r4, [r2, #34]	; 0x22
  40fb4e:	2c00      	cmp	r4, #0
  40fb50:	f000 83f0 	beq.w	410334 <draw_shadow+0x7f0>
    if(dsc->shadow_opa <= LV_OPA_MIN) return;
  40fb54:	f892 702a 	ldrb.w	r7, [r2, #42]	; 0x2a
  40fb58:	2f02      	cmp	r7, #2
  40fb5a:	f240 83eb 	bls.w	410334 <draw_shadow+0x7f0>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fb5e:	2c01      	cmp	r4, #1
  40fb60:	d07b      	beq.n	40fc5a <draw_shadow+0x116>
    sh_rect_area.x1 = coords->x1  + dsc->shadow_ofs_x - dsc->shadow_spread;
  40fb62:	8806      	ldrh	r6, [r0, #0]
  40fb64:	8c93      	ldrh	r3, [r2, #36]	; 0x24
  40fb66:	441e      	add	r6, r3
  40fb68:	b2b6      	uxth	r6, r6
  40fb6a:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
  40fb6e:	eba6 060e 	sub.w	r6, r6, lr
  40fb72:	b2b6      	uxth	r6, r6
  40fb74:	f8ad 6090 	strh.w	r6, [sp, #144]	; 0x90
    sh_rect_area.x2 = coords->x2  + dsc->shadow_ofs_x + dsc->shadow_spread;
  40fb78:	8885      	ldrh	r5, [r0, #4]
  40fb7a:	441d      	add	r5, r3
  40fb7c:	fa1e f585 	uxtah	r5, lr, r5
  40fb80:	b2ad      	uxth	r5, r5
  40fb82:	f8ad 5094 	strh.w	r5, [sp, #148]	; 0x94
    sh_rect_area.y1 = coords->y1  + dsc->shadow_ofs_y - dsc->shadow_spread;
  40fb86:	8843      	ldrh	r3, [r0, #2]
  40fb88:	f8b2 c026 	ldrh.w	ip, [r2, #38]	; 0x26
  40fb8c:	4463      	add	r3, ip
  40fb8e:	b29b      	uxth	r3, r3
  40fb90:	eba3 030e 	sub.w	r3, r3, lr
  40fb94:	b29b      	uxth	r3, r3
  40fb96:	f8ad 3092 	strh.w	r3, [sp, #146]	; 0x92
    sh_rect_area.y2 = coords->y2  + dsc->shadow_ofs_y + dsc->shadow_spread;
  40fb9a:	f8b0 8006 	ldrh.w	r8, [r0, #6]
  40fb9e:	44c4      	add	ip, r8
  40fba0:	fa1e fe8c 	uxtah	lr, lr, ip
  40fba4:	fa1f fe8e 	uxth.w	lr, lr
  40fba8:	f8ad e096 	strh.w	lr, [sp, #150]	; 0x96
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40fbac:	46a0      	mov	r8, r4
  40fbae:	2c00      	cmp	r4, #0
  40fbb0:	db5c      	blt.n	40fc6c <draw_shadow+0x128>
  40fbb2:	ea4f 0868 	mov.w	r8, r8, asr #1
  40fbb6:	f1c8 0800 	rsb	r8, r8, #0
  40fbba:	fa1f f888 	uxth.w	r8, r8
  40fbbe:	eb06 0c08 	add.w	ip, r6, r8
  40fbc2:	fa1f fc8c 	uxth.w	ip, ip
  40fbc6:	f10c 3cff 	add.w	ip, ip, #4294967295
  40fbca:	f8ad c088 	strh.w	ip, [sp, #136]	; 0x88
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40fbce:	46a4      	mov	ip, r4
  40fbd0:	2c00      	cmp	r4, #0
  40fbd2:	db4e      	blt.n	40fc72 <draw_shadow+0x12e>
  40fbd4:	f3cc 0c4f 	ubfx	ip, ip, #1, #16
  40fbd8:	4465      	add	r5, ip
  40fbda:	b2ad      	uxth	r5, r5
  40fbdc:	3501      	adds	r5, #1
  40fbde:	f8ad 508c 	strh.w	r5, [sp, #140]	; 0x8c
    sh_area.y1 = sh_rect_area.y1 - sw / 2 - 1;
  40fbe2:	eb03 0608 	add.w	r6, r3, r8
  40fbe6:	b2b6      	uxth	r6, r6
  40fbe8:	3e01      	subs	r6, #1
  40fbea:	f8ad 608a 	strh.w	r6, [sp, #138]	; 0x8a
    sh_area.y2 = sh_rect_area.y2 + sw / 2 + 1;
  40fbee:	eb0e 030c 	add.w	r3, lr, ip
  40fbf2:	b29b      	uxth	r3, r3
  40fbf4:	3301      	adds	r3, #1
  40fbf6:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  40fbfa:	2ffd      	cmp	r7, #253	; 0xfd
  40fbfc:	d900      	bls.n	40fc00 <draw_shadow+0xbc>
  40fbfe:	27ff      	movs	r7, #255	; 0xff
  40fc00:	4615      	mov	r5, r2
  40fc02:	4688      	mov	r8, r1
  40fc04:	9104      	str	r1, [sp, #16]
  40fc06:	4681      	mov	r9, r0
  40fc08:	9009      	str	r0, [sp, #36]	; 0x24
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  40fc0a:	4b9a      	ldr	r3, [pc, #616]	; (40fe74 <draw_shadow+0x330>)
  40fc0c:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  40fc0e:	4b9a      	ldr	r3, [pc, #616]	; (40fe78 <draw_shadow+0x334>)
  40fc10:	4798      	blx	r3
  40fc12:	4606      	mov	r6, r0
    is_common = _lv_area_intersect(&draw_area, &sh_area, clip);
  40fc14:	4642      	mov	r2, r8
  40fc16:	a922      	add	r1, sp, #136	; 0x88
  40fc18:	a820      	add	r0, sp, #128	; 0x80
  40fc1a:	4b98      	ldr	r3, [pc, #608]	; (40fe7c <draw_shadow+0x338>)
  40fc1c:	4798      	blx	r3
    if(is_common == false) return;
  40fc1e:	9006      	str	r0, [sp, #24]
  40fc20:	2800      	cmp	r0, #0
  40fc22:	f000 8387 	beq.w	410334 <draw_shadow+0x7f0>
    draw_area.x1 -= disp_area->x1;
  40fc26:	8a31      	ldrh	r1, [r6, #16]
  40fc28:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  40fc2c:	1a5b      	subs	r3, r3, r1
  40fc2e:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  40fc32:	8a72      	ldrh	r2, [r6, #18]
  40fc34:	f8bd 3082 	ldrh.w	r3, [sp, #130]	; 0x82
  40fc38:	1a9b      	subs	r3, r3, r2
  40fc3a:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  40fc3e:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  40fc42:	1a5b      	subs	r3, r3, r1
  40fc44:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  40fc48:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
  40fc4c:	1a9b      	subs	r3, r3, r2
  40fc4e:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    const uint8_t * s8 = (const uint8_t *)src;
  40fc52:	4649      	mov	r1, r9
    uint8_t * d8 = (uint8_t *)dst;
  40fc54:	aa1e      	add	r2, sp, #120	; 0x78
  40fc56:	2308      	movs	r3, #8
  40fc58:	e013      	b.n	40fc82 <draw_shadow+0x13e>
    if(dsc->shadow_width == 1 && dsc->shadow_ofs_x == 0 &&
  40fc5a:	6a53      	ldr	r3, [r2, #36]	; 0x24
  40fc5c:	2b00      	cmp	r3, #0
  40fc5e:	d180      	bne.n	40fb62 <draw_shadow+0x1e>
       dsc->shadow_ofs_y == 0 && dsc->shadow_spread <= 0) {
  40fc60:	f9b2 3028 	ldrsh.w	r3, [r2, #40]	; 0x28
  40fc64:	2b00      	cmp	r3, #0
  40fc66:	f73f af7c 	bgt.w	40fb62 <draw_shadow+0x1e>
  40fc6a:	e363      	b.n	410334 <draw_shadow+0x7f0>
    sh_area.x1 = sh_rect_area.x1 - sw / 2 - 1;
  40fc6c:	f104 0801 	add.w	r8, r4, #1
  40fc70:	e79f      	b.n	40fbb2 <draw_shadow+0x6e>
    sh_area.x2 = sh_rect_area.x2 + sw / 2 + 1;
  40fc72:	f104 0c01 	add.w	ip, r4, #1
  40fc76:	e7ad      	b.n	40fbd4 <draw_shadow+0x90>
        *d8 = *s8;
  40fc78:	f811 0b01 	ldrb.w	r0, [r1], #1
  40fc7c:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40fc80:	3b01      	subs	r3, #1
    while(len) {
  40fc82:	2b00      	cmp	r3, #0
  40fc84:	d1f8      	bne.n	40fc78 <draw_shadow+0x134>
    bg_coords.x1 += 1;
  40fc86:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
  40fc8a:	3201      	adds	r2, #1
  40fc8c:	b296      	uxth	r6, r2
  40fc8e:	f8ad 6078 	strh.w	r6, [sp, #120]	; 0x78
    bg_coords.y1 += 1;
  40fc92:	f8bd 007a 	ldrh.w	r0, [sp, #122]	; 0x7a
  40fc96:	3001      	adds	r0, #1
  40fc98:	b280      	uxth	r0, r0
  40fc9a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    bg_coords.x2 -= 1;
  40fc9e:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
  40fca2:	3a01      	subs	r2, #1
  40fca4:	b292      	uxth	r2, r2
  40fca6:	f8ad 207c 	strh.w	r2, [sp, #124]	; 0x7c
    bg_coords.y2 -= 1;
  40fcaa:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
  40fcae:	3b01      	subs	r3, #1
  40fcb0:	b29b      	uxth	r3, r3
  40fcb2:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
    int32_t r_bg = dsc->radius;
  40fcb6:	f9b5 1000 	ldrsh.w	r1, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fcba:	1b92      	subs	r2, r2, r6
  40fcbc:	b292      	uxth	r2, r2
  40fcbe:	3201      	adds	r2, #1
  40fcc0:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fcc2:	1a1e      	subs	r6, r3, r0
  40fcc4:	b2b6      	uxth	r6, r6
  40fcc6:	3601      	adds	r6, #1
  40fcc8:	b236      	sxth	r6, r6
    int32_t short_side = LV_MATH_MIN(lv_area_get_width(&bg_coords), lv_area_get_height(&bg_coords));
  40fcca:	42b2      	cmp	r2, r6
  40fccc:	da00      	bge.n	40fcd0 <draw_shadow+0x18c>
  40fcce:	4616      	mov	r6, r2
    if(r_bg > short_side >> 1) r_bg = short_side >> 1;
  40fcd0:	1076      	asrs	r6, r6, #1
  40fcd2:	42b1      	cmp	r1, r6
  40fcd4:	dc00      	bgt.n	40fcd8 <draw_shadow+0x194>
    int32_t r_bg = dsc->radius;
  40fcd6:	460e      	mov	r6, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fcd8:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
  40fcdc:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
  40fce0:	1ad2      	subs	r2, r2, r3
  40fce2:	b292      	uxth	r2, r2
  40fce4:	3201      	adds	r2, #1
  40fce6:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fce8:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
  40fcec:	f8bd 0092 	ldrh.w	r0, [sp, #146]	; 0x92
  40fcf0:	1a1b      	subs	r3, r3, r0
  40fcf2:	b29b      	uxth	r3, r3
  40fcf4:	3301      	adds	r3, #1
  40fcf6:	fa0f f883 	sxth.w	r8, r3
    short_side = LV_MATH_MIN(lv_area_get_width(&sh_rect_area), lv_area_get_height(&sh_rect_area));
  40fcfa:	4590      	cmp	r8, r2
  40fcfc:	dd00      	ble.n	40fd00 <draw_shadow+0x1bc>
  40fcfe:	4690      	mov	r8, r2
    if(r_sh > short_side >> 1) r_sh = short_side >> 1;
  40fd00:	ea4f 0868 	mov.w	r8, r8, asr #1
  40fd04:	4541      	cmp	r1, r8
  40fd06:	dc00      	bgt.n	40fd0a <draw_shadow+0x1c6>
    int32_t r_sh = dsc->radius;
  40fd08:	4688      	mov	r8, r1
    int32_t corner_size = sw  + r_sh;
  40fd0a:	4444      	add	r4, r8
    sh_buf = _lv_mem_buf_get(corner_size * corner_size * sizeof(uint16_t));
  40fd0c:	fb04 f004 	mul.w	r0, r4, r4
  40fd10:	0040      	lsls	r0, r0, #1
  40fd12:	4b5b      	ldr	r3, [pc, #364]	; (40fe80 <draw_shadow+0x33c>)
  40fd14:	4798      	blx	r3
  40fd16:	4601      	mov	r1, r0
  40fd18:	9007      	str	r0, [sp, #28]
    shadow_draw_corner_buf(&sh_rect_area, (uint16_t *)sh_buf, dsc->shadow_width, r_sh);
  40fd1a:	fa0f f388 	sxth.w	r3, r8
  40fd1e:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
  40fd22:	a824      	add	r0, sp, #144	; 0x90
  40fd24:	f8df 8168 	ldr.w	r8, [pc, #360]	; 40fe90 <draw_shadow+0x34c>
  40fd28:	47c0      	blx	r8
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fd2a:	f8bd 208a 	ldrh.w	r2, [sp, #138]	; 0x8a
  40fd2e:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fd32:	1a9b      	subs	r3, r3, r2
  40fd34:	b29b      	uxth	r3, r3
  40fd36:	3301      	adds	r3, #1
  40fd38:	b21b      	sxth	r3, r3
  40fd3a:	2b00      	cmp	r3, #0
  40fd3c:	db21      	blt.n	40fd82 <draw_shadow+0x23e>
  40fd3e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fd42:	b29b      	uxth	r3, r3
  40fd44:	930d      	str	r3, [sp, #52]	; 0x34
  40fd46:	fa0f fb83 	sxth.w	fp, r3
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40fd4a:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fd4e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  40fd52:	1a9b      	subs	r3, r3, r2
  40fd54:	b29b      	uxth	r3, r3
  40fd56:	3301      	adds	r3, #1
  40fd58:	b21b      	sxth	r3, r3
  40fd5a:	2b00      	cmp	r3, #0
  40fd5c:	db13      	blt.n	40fd86 <draw_shadow+0x242>
  40fd5e:	eb02 0363 	add.w	r3, r2, r3, asr #1
  40fd62:	b29b      	uxth	r3, r3
  40fd64:	930e      	str	r3, [sp, #56]	; 0x38
  40fd66:	b21b      	sxth	r3, r3
  40fd68:	930c      	str	r3, [sp, #48]	; 0x30
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fd6a:	4b46      	ldr	r3, [pc, #280]	; (40fe84 <draw_shadow+0x340>)
  40fd6c:	4798      	blx	r3
  40fd6e:	b960      	cbnz	r0, 40fd8a <draw_shadow+0x246>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40fd70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  40fd72:	2b00      	cmp	r3, #0
  40fd74:	d17a      	bne.n	40fe6c <draw_shadow+0x328>
    else if(dsc->shadow_spread != 0) simple_mode = false;
  40fd76:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
  40fd7a:	b143      	cbz	r3, 40fd8e <draw_shadow+0x24a>
  40fd7c:	2300      	movs	r3, #0
  40fd7e:	9306      	str	r3, [sp, #24]
  40fd80:	e005      	b.n	40fd8e <draw_shadow+0x24a>
    lv_coord_t h_half = sh_area.y1 + lv_area_get_height(&sh_area) / 2;
  40fd82:	3301      	adds	r3, #1
  40fd84:	e7db      	b.n	40fd3e <draw_shadow+0x1fa>
    lv_coord_t w_half = sh_area.x1 + lv_area_get_width(&sh_area) / 2;
  40fd86:	3301      	adds	r3, #1
  40fd88:	e7e9      	b.n	40fd5e <draw_shadow+0x21a>
    if(lv_draw_mask_get_cnt() > 0) simple_mode = false;
  40fd8a:	2300      	movs	r3, #0
  40fd8c:	9306      	str	r3, [sp, #24]
  40fd8e:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  40fd92:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  40fd96:	1ac0      	subs	r0, r0, r3
  40fd98:	b280      	uxth	r0, r0
  40fd9a:	3001      	adds	r0, #1
    lv_opa_t * mask_buf = _lv_mem_buf_get(lv_area_get_width(&sh_area));
  40fd9c:	b200      	sxth	r0, r0
  40fd9e:	4b38      	ldr	r3, [pc, #224]	; (40fe80 <draw_shadow+0x33c>)
  40fda0:	4798      	blx	r3
  40fda2:	9005      	str	r0, [sp, #20]
    lv_draw_mask_radius_init(&mask_rout_param, &bg_coords, r_bg, true);
  40fda4:	b233      	sxth	r3, r6
  40fda6:	461a      	mov	r2, r3
  40fda8:	9308      	str	r3, [sp, #32]
  40fdaa:	2301      	movs	r3, #1
  40fdac:	a91e      	add	r1, sp, #120	; 0x78
  40fdae:	a817      	add	r0, sp, #92	; 0x5c
  40fdb0:	4e35      	ldr	r6, [pc, #212]	; (40fe88 <draw_shadow+0x344>)
  40fdb2:	47b0      	blx	r6
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  40fdb4:	2100      	movs	r1, #0
  40fdb6:	a817      	add	r0, sp, #92	; 0x5c
  40fdb8:	4b34      	ldr	r3, [pc, #208]	; (40fe8c <draw_shadow+0x348>)
  40fdba:	4798      	blx	r3
  40fdbc:	900b      	str	r0, [sp, #44]	; 0x2c
    a.x2 = sh_area.x2;
  40fdbe:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fdc2:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fdc6:	b29b      	uxth	r3, r3
  40fdc8:	b2a6      	uxth	r6, r4
  40fdca:	1b9b      	subs	r3, r3, r6
  40fdcc:	b29b      	uxth	r3, r3
  40fdce:	3301      	adds	r3, #1
  40fdd0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1;
  40fdd4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  40fdd8:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  40fddc:	fa16 f383 	uxtah	r3, r6, r3
  40fde0:	b29b      	uxth	r3, r3
  40fde2:	3b01      	subs	r3, #1
  40fde4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    bool has_com = _lv_area_intersect(&ca, &a, clip);
  40fde8:	9a04      	ldr	r2, [sp, #16]
  40fdea:	a915      	add	r1, sp, #84	; 0x54
  40fdec:	a813      	add	r0, sp, #76	; 0x4c
  40fdee:	4b23      	ldr	r3, [pc, #140]	; (40fe7c <draw_shadow+0x338>)
  40fdf0:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fdf2:	2800      	cmp	r0, #0
  40fdf4:	d14e      	bne.n	40fe94 <draw_shadow+0x350>
    a.x2 = sh_area.x2;
  40fdf6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fdfa:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fdfe:	b29b      	uxth	r3, r3
  40fe00:	1b9b      	subs	r3, r3, r6
  40fe02:	b29b      	uxth	r3, r3
  40fe04:	3301      	adds	r3, #1
  40fe06:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y2 - corner_size + 1;
  40fe0a:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  40fe0e:	b293      	uxth	r3, r2
  40fe10:	1b9b      	subs	r3, r3, r6
  40fe12:	b29b      	uxth	r3, r3
  40fe14:	3301      	adds	r3, #1
  40fe16:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  40fe1a:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fe1e:	9a04      	ldr	r2, [sp, #16]
  40fe20:	a915      	add	r1, sp, #84	; 0x54
  40fe22:	a813      	add	r0, sp, #76	; 0x4c
  40fe24:	4b15      	ldr	r3, [pc, #84]	; (40fe7c <draw_shadow+0x338>)
  40fe26:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fe28:	2800      	cmp	r0, #0
  40fe2a:	f040 80b0 	bne.w	40ff8e <draw_shadow+0x44a>
    a.x2 = sh_area.x2;
  40fe2e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  40fe32:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.x1 = a.x2 - corner_size + 1;
  40fe36:	b29b      	uxth	r3, r3
  40fe38:	1b9b      	subs	r3, r3, r6
  40fe3a:	b29b      	uxth	r3, r3
  40fe3c:	3301      	adds	r3, #1
  40fe3e:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.y1 = sh_area.y1 + corner_size;
  40fe42:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  40fe46:	4433      	add	r3, r6
  40fe48:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  40fe4c:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  40fe50:	1b9b      	subs	r3, r3, r6
  40fe52:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  40fe56:	9a04      	ldr	r2, [sp, #16]
  40fe58:	a915      	add	r1, sp, #84	; 0x54
  40fe5a:	a813      	add	r0, sp, #76	; 0x4c
  40fe5c:	4b07      	ldr	r3, [pc, #28]	; (40fe7c <draw_shadow+0x338>)
  40fe5e:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fe60:	2800      	cmp	r0, #0
  40fe62:	f040 8115 	bne.w	410090 <draw_shadow+0x54c>
  40fe66:	9907      	ldr	r1, [sp, #28]
  40fe68:	2000      	movs	r0, #0
  40fe6a:	e1ab      	b.n	4101c4 <draw_shadow+0x680>
    else if(dsc->shadow_ofs_x != 0 || dsc->shadow_ofs_y != 0) simple_mode = false;
  40fe6c:	2300      	movs	r3, #0
  40fe6e:	9306      	str	r3, [sp, #24]
  40fe70:	e78d      	b.n	40fd8e <draw_shadow+0x24a>
  40fe72:	bf00      	nop
  40fe74:	00409269 	.word	0x00409269
  40fe78:	00414735 	.word	0x00414735
  40fe7c:	00414ef3 	.word	0x00414ef3
  40fe80:	00416269 	.word	0x00416269
  40fe84:	0040f625 	.word	0x0040f625
  40fe88:	0040f7a5 	.word	0x0040f7a5
  40fe8c:	0040f529 	.word	0x0040f529
  40fe90:	0040f979 	.word	0x0040f979
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40fe94:	9a08      	ldr	r2, [sp, #32]
  40fe96:	a91e      	add	r1, sp, #120	; 0x78
  40fe98:	a815      	add	r0, sp, #84	; 0x54
  40fe9a:	4ba2      	ldr	r3, [pc, #648]	; (410124 <draw_shadow+0x5e0>)
  40fe9c:	4798      	blx	r3
  40fe9e:	2800      	cmp	r0, #0
  40fea0:	d1a9      	bne.n	40fdf6 <draw_shadow+0x2b2>
        if(ca.y2 > h_half) ca.y2 = h_half;
  40fea2:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  40fea6:	459b      	cmp	fp, r3
  40fea8:	da01      	bge.n	40feae <draw_shadow+0x36a>
  40feaa:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40feae:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40feb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40feb4:	429a      	cmp	r2, r3
  40feb6:	db03      	blt.n	40fec0 <draw_shadow+0x37c>
  40feb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40feba:	3301      	adds	r3, #1
  40febc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40fec0:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  40fec4:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  40fec8:	b291      	uxth	r1, r2
  40feca:	1a5b      	subs	r3, r3, r1
  40fecc:	b29b      	uxth	r3, r3
  40fece:	3301      	adds	r3, #1
  40fed0:	b21b      	sxth	r3, r3
  40fed2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40fed4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40fed8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40fedc:	b288      	uxth	r0, r1
  40fede:	1a1b      	subs	r3, r3, r0
  40fee0:	b29b      	uxth	r3, r3
  40fee2:	3301      	adds	r3, #1
  40fee4:	b21b      	sxth	r3, r3
  40fee6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40fee8:	2b00      	cmp	r3, #0
  40feea:	dd84      	ble.n	40fdf6 <draw_shadow+0x2b2>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40feec:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fef0:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  40fef4:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  40fef8:	eba2 0808 	sub.w	r8, r2, r8
  40fefc:	fb08 1804 	mla	r8, r8, r4, r1
  40ff00:	9b07      	ldr	r3, [sp, #28]
  40ff02:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  40ff04:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  40ff06:	aa11      	add	r2, sp, #68	; 0x44
  40ff08:	2308      	movs	r3, #8
    while(len) {
  40ff0a:	b12b      	cbz	r3, 40ff18 <draw_shadow+0x3d4>
        *d8 = *s8;
  40ff0c:	f811 0b01 	ldrb.w	r0, [r1], #1
  40ff10:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  40ff14:	3b01      	subs	r3, #1
  40ff16:	e7f8      	b.n	40ff0a <draw_shadow+0x3c6>
            fa.y2 = fa.y1;
  40ff18:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40ff1c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  40ff20:	f04f 0900 	mov.w	r9, #0
  40ff24:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
  40ff28:	46a3      	mov	fp, r4
  40ff2a:	46f2      	mov	sl, lr
  40ff2c:	e017      	b.n	40ff5e <draw_shadow+0x41a>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  40ff2e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  40ff32:	9302      	str	r3, [sp, #8]
  40ff34:	9701      	str	r7, [sp, #4]
  40ff36:	9000      	str	r0, [sp, #0]
  40ff38:	9b05      	ldr	r3, [sp, #20]
  40ff3a:	8c2a      	ldrh	r2, [r5, #32]
  40ff3c:	a911      	add	r1, sp, #68	; 0x44
  40ff3e:	9804      	ldr	r0, [sp, #16]
  40ff40:	4c79      	ldr	r4, [pc, #484]	; (410128 <draw_shadow+0x5e4>)
  40ff42:	47a0      	blx	r4
                fa.y1++;
  40ff44:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  40ff48:	3301      	adds	r3, #1
  40ff4a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  40ff4e:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  40ff52:	3301      	adds	r3, #1
  40ff54:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  40ff58:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  40ff5a:	f109 0901 	add.w	r9, r9, #1
  40ff5e:	45d1      	cmp	r9, sl
  40ff60:	da11      	bge.n	40ff86 <draw_shadow+0x442>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  40ff62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40ff64:	4641      	mov	r1, r8
  40ff66:	9c05      	ldr	r4, [sp, #20]
  40ff68:	4620      	mov	r0, r4
  40ff6a:	4b70      	ldr	r3, [pc, #448]	; (41012c <draw_shadow+0x5e8>)
  40ff6c:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  40ff6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40ff70:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  40ff74:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  40ff78:	4620      	mov	r0, r4
  40ff7a:	4c6d      	ldr	r4, [pc, #436]	; (410130 <draw_shadow+0x5ec>)
  40ff7c:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  40ff7e:	2801      	cmp	r0, #1
  40ff80:	d1d5      	bne.n	40ff2e <draw_shadow+0x3ea>
  40ff82:	2002      	movs	r0, #2
  40ff84:	e7d3      	b.n	40ff2e <draw_shadow+0x3ea>
  40ff86:	465c      	mov	r4, fp
  40ff88:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
  40ff8c:	e733      	b.n	40fdf6 <draw_shadow+0x2b2>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  40ff8e:	9a08      	ldr	r2, [sp, #32]
  40ff90:	a91e      	add	r1, sp, #120	; 0x78
  40ff92:	a815      	add	r0, sp, #84	; 0x54
  40ff94:	4b63      	ldr	r3, [pc, #396]	; (410124 <draw_shadow+0x5e0>)
  40ff96:	4798      	blx	r3
  40ff98:	2800      	cmp	r0, #0
  40ff9a:	f47f af48 	bne.w	40fe2e <draw_shadow+0x2ea>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  40ff9e:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  40ffa2:	459b      	cmp	fp, r3
  40ffa4:	db03      	blt.n	40ffae <draw_shadow+0x46a>
  40ffa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40ffa8:	3301      	adds	r3, #1
  40ffaa:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x1 <= w_half) ca.x1 = w_half + 1;
  40ffae:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  40ffb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40ffb4:	429a      	cmp	r2, r3
  40ffb6:	db03      	blt.n	40ffc0 <draw_shadow+0x47c>
  40ffb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40ffba:	3301      	adds	r3, #1
  40ffbc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  40ffc0:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  40ffc4:	b293      	uxth	r3, r2
  40ffc6:	f8bd 104e 	ldrh.w	r1, [sp, #78]	; 0x4e
  40ffca:	1a5b      	subs	r3, r3, r1
  40ffcc:	b29b      	uxth	r3, r3
  40ffce:	3301      	adds	r3, #1
  40ffd0:	b21b      	sxth	r3, r3
  40ffd2:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  40ffd4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  40ffd8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  40ffdc:	b288      	uxth	r0, r1
  40ffde:	1a1b      	subs	r3, r3, r0
  40ffe0:	b29b      	uxth	r3, r3
  40ffe2:	3301      	adds	r3, #1
  40ffe4:	b21b      	sxth	r3, r3
  40ffe6:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  40ffe8:	2b00      	cmp	r3, #0
  40ffea:	f77f af20 	ble.w	40fe2e <draw_shadow+0x2ea>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  40ffee:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  40fff2:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  40fff6:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  40fffa:	eba8 0802 	sub.w	r8, r8, r2
  40fffe:	fb08 1804 	mla	r8, r8, r4, r1
  410002:	9b07      	ldr	r3, [sp, #28]
  410004:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  410006:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  410008:	aa11      	add	r2, sp, #68	; 0x44
  41000a:	2308      	movs	r3, #8
    while(len) {
  41000c:	b12b      	cbz	r3, 41001a <draw_shadow+0x4d6>
        *d8 = *s8;
  41000e:	f811 0b01 	ldrb.w	r0, [r1], #1
  410012:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  410016:	3b01      	subs	r3, #1
  410018:	e7f8      	b.n	41000c <draw_shadow+0x4c8>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  41001a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  41001e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  410022:	f04f 0900 	mov.w	r9, #0
  410026:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  41002a:	46a3      	mov	fp, r4
  41002c:	46f2      	mov	sl, lr
  41002e:	e017      	b.n	410060 <draw_shadow+0x51c>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410030:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410034:	9302      	str	r3, [sp, #8]
  410036:	9701      	str	r7, [sp, #4]
  410038:	9000      	str	r0, [sp, #0]
  41003a:	9b05      	ldr	r3, [sp, #20]
  41003c:	8c2a      	ldrh	r2, [r5, #32]
  41003e:	a911      	add	r1, sp, #68	; 0x44
  410040:	9804      	ldr	r0, [sp, #16]
  410042:	4c39      	ldr	r4, [pc, #228]	; (410128 <draw_shadow+0x5e4>)
  410044:	47a0      	blx	r4
                fa.y1--;
  410046:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41004a:	3b01      	subs	r3, #1
  41004c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410050:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410054:	3b01      	subs	r3, #1
  410056:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  41005a:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  41005c:	f109 0901 	add.w	r9, r9, #1
  410060:	45d1      	cmp	r9, sl
  410062:	da11      	bge.n	410088 <draw_shadow+0x544>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410066:	4641      	mov	r1, r8
  410068:	9c05      	ldr	r4, [sp, #20]
  41006a:	4620      	mov	r0, r4
  41006c:	4b2f      	ldr	r3, [pc, #188]	; (41012c <draw_shadow+0x5e8>)
  41006e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410072:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410076:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41007a:	4620      	mov	r0, r4
  41007c:	4c2c      	ldr	r4, [pc, #176]	; (410130 <draw_shadow+0x5ec>)
  41007e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410080:	2801      	cmp	r0, #1
  410082:	d1d5      	bne.n	410030 <draw_shadow+0x4ec>
  410084:	2002      	movs	r0, #2
  410086:	e7d3      	b.n	410030 <draw_shadow+0x4ec>
  410088:	465c      	mov	r4, fp
  41008a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  41008e:	e6ce      	b.n	40fe2e <draw_shadow+0x2ea>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410090:	9a08      	ldr	r2, [sp, #32]
  410092:	a91e      	add	r1, sp, #120	; 0x78
  410094:	a815      	add	r0, sp, #84	; 0x54
  410096:	4b23      	ldr	r3, [pc, #140]	; (410124 <draw_shadow+0x5e0>)
  410098:	4798      	blx	r3
  41009a:	2800      	cmp	r0, #0
  41009c:	f47f aee3 	bne.w	40fe66 <draw_shadow+0x322>
        if(simple_mode) ca.x1 = LV_MATH_MAX(ca.x1, coords->x2);
  4100a0:	9b06      	ldr	r3, [sp, #24]
  4100a2:	b14b      	cbz	r3, 4100b8 <draw_shadow+0x574>
  4100a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4100a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
  4100aa:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  4100ae:	4293      	cmp	r3, r2
  4100b0:	bfb8      	it	lt
  4100b2:	4613      	movlt	r3, r2
  4100b4:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  4100b8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  4100bc:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
  4100c0:	b291      	uxth	r1, r2
  4100c2:	1a5b      	subs	r3, r3, r1
  4100c4:	b29b      	uxth	r3, r3
  4100c6:	3301      	adds	r3, #1
  4100c8:	b21b      	sxth	r3, r3
  4100ca:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4100cc:	2b00      	cmp	r3, #0
  4100ce:	f77f aeca 	ble.w	40fe66 <draw_shadow+0x322>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4100d2:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  4100d6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4100da:	ebaa 0a03 	sub.w	sl, sl, r3
  4100de:	fa1f fa8a 	uxth.w	sl, sl
  4100e2:	f10a 0a01 	add.w	sl, sl, #1
  4100e6:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4100ea:	1e63      	subs	r3, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  4100ec:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  4100f0:	1a52      	subs	r2, r2, r1
  4100f2:	fb03 2304 	mla	r3, r3, r4, r2
  4100f6:	9a07      	ldr	r2, [sp, #28]
  4100f8:	18d3      	adds	r3, r2, r3
  4100fa:	930e      	str	r3, [sp, #56]	; 0x38
    const uint8_t * s8 = (const uint8_t *)src;
  4100fc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4100fe:	aa11      	add	r2, sp, #68	; 0x44
  410100:	2308      	movs	r3, #8
    while(len) {
  410102:	b12b      	cbz	r3, 410110 <draw_shadow+0x5cc>
        *d8 = *s8;
  410104:	f811 0b01 	ldrb.w	r0, [r1], #1
  410108:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41010c:	3b01      	subs	r3, #1
  41010e:	e7f8      	b.n	410102 <draw_shadow+0x5be>
            fa.y2 = fa.y1;
  410110:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410114:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410118:	f04f 0800 	mov.w	r8, #0
  41011c:	970f      	str	r7, [sp, #60]	; 0x3c
  41011e:	46a1      	mov	r9, r4
  410120:	9c06      	ldr	r4, [sp, #24]
  410122:	e02a      	b.n	41017a <draw_shadow+0x636>
  410124:	00415169 	.word	0x00415169
  410128:	0040c301 	.word	0x0040c301
  41012c:	004160d1 	.word	0x004160d1
  410130:	0040f55d 	.word	0x0040f55d
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410136:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41013a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41013e:	9805      	ldr	r0, [sp, #20]
  410140:	4fbc      	ldr	r7, [pc, #752]	; (410434 <draw_shadow+0x8f0>)
  410142:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410144:	2801      	cmp	r0, #1
  410146:	d023      	beq.n	410190 <draw_shadow+0x64c>
                _lv_blend_fill(clip, &fa,
  410148:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  41014c:	9302      	str	r3, [sp, #8]
  41014e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  410152:	9301      	str	r3, [sp, #4]
  410154:	9000      	str	r0, [sp, #0]
  410156:	9b05      	ldr	r3, [sp, #20]
  410158:	8c2a      	ldrh	r2, [r5, #32]
  41015a:	a911      	add	r1, sp, #68	; 0x44
  41015c:	9804      	ldr	r0, [sp, #16]
  41015e:	4fb6      	ldr	r7, [pc, #728]	; (410438 <draw_shadow+0x8f4>)
  410160:	47b8      	blx	r7
                fa.y1++;
  410162:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  410166:	3301      	adds	r3, #1
  410168:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  41016c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410170:	3301      	adds	r3, #1
  410172:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  410176:	f108 0801 	add.w	r8, r8, #1
  41017a:	45d0      	cmp	r8, sl
  41017c:	da0a      	bge.n	410194 <draw_shadow+0x650>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  41017e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410180:	990e      	ldr	r1, [sp, #56]	; 0x38
  410182:	9805      	ldr	r0, [sp, #20]
  410184:	4bad      	ldr	r3, [pc, #692]	; (41043c <draw_shadow+0x8f8>)
  410186:	4798      	blx	r3
                if(simple_mode) {
  410188:	2c00      	cmp	r4, #0
  41018a:	d0d3      	beq.n	410134 <draw_shadow+0x5f0>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  41018c:	2002      	movs	r0, #2
  41018e:	e7db      	b.n	410148 <draw_shadow+0x604>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410190:	2002      	movs	r0, #2
  410192:	e7d9      	b.n	410148 <draw_shadow+0x604>
  410194:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
  410196:	464c      	mov	r4, r9
  410198:	e665      	b.n	40fe66 <draw_shadow+0x322>
        for(x = 0; x < corner_size / 2; x++) {
  41019a:	ebb3 0f62 	cmp.w	r3, r2, asr #1
  41019e:	da0f      	bge.n	4101c0 <draw_shadow+0x67c>
            lv_opa_t tmp = sh_buf_tmp[x];
  4101a0:	f811 e003 	ldrb.w	lr, [r1, r3]
            sh_buf_tmp[x] = sh_buf_tmp[corner_size - x - 1];
  4101a4:	1ae2      	subs	r2, r4, r3
  4101a6:	3a01      	subs	r2, #1
  4101a8:	f811 c002 	ldrb.w	ip, [r1, r2]
  4101ac:	f801 c003 	strb.w	ip, [r1, r3]
            sh_buf_tmp[corner_size - x - 1] = tmp;
  4101b0:	f801 e002 	strb.w	lr, [r1, r2]
        for(x = 0; x < corner_size / 2; x++) {
  4101b4:	3301      	adds	r3, #1
  4101b6:	4622      	mov	r2, r4
  4101b8:	2c00      	cmp	r4, #0
  4101ba:	daee      	bge.n	41019a <draw_shadow+0x656>
  4101bc:	1c62      	adds	r2, r4, #1
  4101be:	e7ec      	b.n	41019a <draw_shadow+0x656>
        sh_buf_tmp += corner_size;
  4101c0:	4421      	add	r1, r4
    for(y = 0; y < corner_size; y++) {
  4101c2:	3001      	adds	r0, #1
  4101c4:	42a0      	cmp	r0, r4
  4101c6:	da01      	bge.n	4101cc <draw_shadow+0x688>
  4101c8:	2300      	movs	r3, #0
  4101ca:	e7f4      	b.n	4101b6 <draw_shadow+0x672>
    a.x1 = sh_area.x1;
  4101cc:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  4101d0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  4101d4:	fa16 f383 	uxtah	r3, r6, r3
  4101d8:	b29b      	uxth	r3, r3
  4101da:	3b01      	subs	r3, #1
  4101dc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  4101e0:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4101e4:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = a.y1 + corner_size - 1;
  4101e8:	fa16 f383 	uxtah	r3, r6, r3
  4101ec:	b29b      	uxth	r3, r3
  4101ee:	3b01      	subs	r3, #1
  4101f0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4101f4:	9a04      	ldr	r2, [sp, #16]
  4101f6:	a915      	add	r1, sp, #84	; 0x54
  4101f8:	a813      	add	r0, sp, #76	; 0x4c
  4101fa:	4b91      	ldr	r3, [pc, #580]	; (410440 <draw_shadow+0x8fc>)
  4101fc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4101fe:	2800      	cmp	r0, #0
  410200:	f040 809b 	bne.w	41033a <draw_shadow+0x7f6>
    a.x1 = sh_area.x1;
  410204:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410208:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  41020c:	fa16 f383 	uxtah	r3, r6, r3
  410210:	b29b      	uxth	r3, r3
  410212:	3b01      	subs	r3, #1
  410214:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  410218:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  41021c:	b293      	uxth	r3, r2
  41021e:	1b9b      	subs	r3, r3, r6
  410220:	b29b      	uxth	r3, r3
  410222:	3301      	adds	r3, #1
  410224:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  410228:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41022c:	9a04      	ldr	r2, [sp, #16]
  41022e:	a915      	add	r1, sp, #84	; 0x54
  410230:	a813      	add	r0, sp, #76	; 0x4c
  410232:	4b83      	ldr	r3, [pc, #524]	; (410440 <draw_shadow+0x8fc>)
  410234:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410236:	2800      	cmp	r0, #0
  410238:	f040 810a 	bne.w	410450 <draw_shadow+0x90c>
    a.x1 = sh_area.x1;
  41023c:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  410240:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = a.x1 + corner_size - 1;
  410244:	fa16 f383 	uxtah	r3, r6, r3
  410248:	b29b      	uxth	r3, r3
  41024a:	3b01      	subs	r3, #1
  41024c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  410250:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  410254:	4433      	add	r3, r6
  410256:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  41025a:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  41025e:	1b9b      	subs	r3, r3, r6
  410260:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  410264:	9a04      	ldr	r2, [sp, #16]
  410266:	a915      	add	r1, sp, #84	; 0x54
  410268:	a813      	add	r0, sp, #76	; 0x4c
  41026a:	4b75      	ldr	r3, [pc, #468]	; (410440 <draw_shadow+0x8fc>)
  41026c:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41026e:	2800      	cmp	r0, #0
  410270:	f040 816c 	bne.w	41054c <draw_shadow+0xa08>
    a.x1 = sh_area.x1 + corner_size;
  410274:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410278:	4433      	add	r3, r6
  41027a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  41027e:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410282:	1b9b      	subs	r3, r3, r6
  410284:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1;
  410288:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  41028c:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y1 + corner_size - 1;
  410290:	fa16 f383 	uxtah	r3, r6, r3
  410294:	b29b      	uxth	r3, r3
  410296:	3b01      	subs	r3, #1
  410298:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41029c:	9a04      	ldr	r2, [sp, #16]
  41029e:	a915      	add	r1, sp, #84	; 0x54
  4102a0:	a813      	add	r0, sp, #76	; 0x4c
  4102a2:	4b67      	ldr	r3, [pc, #412]	; (410440 <draw_shadow+0x8fc>)
  4102a4:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4102a6:	2800      	cmp	r0, #0
  4102a8:	f040 81d1 	bne.w	41064e <draw_shadow+0xb0a>
    a.x1 = sh_area.x1 + corner_size;
  4102ac:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4102b0:	4433      	add	r3, r6
  4102b2:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4102b6:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4102ba:	1b9b      	subs	r3, r3, r6
  4102bc:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y2 - corner_size + 1;
  4102c0:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
  4102c4:	b293      	uxth	r3, r2
  4102c6:	1b9b      	subs	r3, r3, r6
  4102c8:	b29b      	uxth	r3, r3
  4102ca:	3301      	adds	r3, #1
  4102cc:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2;
  4102d0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  4102d4:	9a04      	ldr	r2, [sp, #16]
  4102d6:	a915      	add	r1, sp, #84	; 0x54
  4102d8:	a813      	add	r0, sp, #76	; 0x4c
  4102da:	4b59      	ldr	r3, [pc, #356]	; (410440 <draw_shadow+0x8fc>)
  4102dc:	4798      	blx	r3
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  4102de:	2800      	cmp	r0, #0
  4102e0:	f040 8245 	bne.w	41076e <draw_shadow+0xc2a>
    a.x1 = sh_area.x1 + corner_size;
  4102e4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  4102e8:	4433      	add	r3, r6
  4102ea:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    a.x2 = sh_area.x2 - corner_size;
  4102ee:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  4102f2:	1b9b      	subs	r3, r3, r6
  4102f4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    a.y1 = sh_area.y1 + corner_size;
  4102f8:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  4102fc:	4433      	add	r3, r6
  4102fe:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    a.y2 = sh_area.y2 - corner_size;
  410302:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  410306:	1b9e      	subs	r6, r3, r6
  410308:	f8ad 605a 	strh.w	r6, [sp, #90]	; 0x5a
    has_com = _lv_area_intersect(&ca, &a, clip);
  41030c:	9a04      	ldr	r2, [sp, #16]
  41030e:	a915      	add	r1, sp, #84	; 0x54
  410310:	a813      	add	r0, sp, #76	; 0x4c
  410312:	4b4b      	ldr	r3, [pc, #300]	; (410440 <draw_shadow+0x8fc>)
  410314:	4798      	blx	r3
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410316:	9b06      	ldr	r3, [sp, #24]
  410318:	f083 0301 	eor.w	r3, r3, #1
  41031c:	b2db      	uxtb	r3, r3
  41031e:	4218      	tst	r0, r3
  410320:	f040 82a9 	bne.w	410876 <draw_shadow+0xd32>
    lv_draw_mask_remove_id(mask_rout_id);
  410324:	980b      	ldr	r0, [sp, #44]	; 0x2c
  410326:	4b47      	ldr	r3, [pc, #284]	; (410444 <draw_shadow+0x900>)
  410328:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  41032a:	9805      	ldr	r0, [sp, #20]
  41032c:	4c46      	ldr	r4, [pc, #280]	; (410448 <draw_shadow+0x904>)
  41032e:	47a0      	blx	r4
    _lv_mem_buf_release(sh_buf);
  410330:	9807      	ldr	r0, [sp, #28]
  410332:	47a0      	blx	r4
}
  410334:	b027      	add	sp, #156	; 0x9c
  410336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41033a:	9a08      	ldr	r2, [sp, #32]
  41033c:	a91e      	add	r1, sp, #120	; 0x78
  41033e:	a815      	add	r0, sp, #84	; 0x54
  410340:	4b42      	ldr	r3, [pc, #264]	; (41044c <draw_shadow+0x908>)
  410342:	4798      	blx	r3
  410344:	2800      	cmp	r0, #0
  410346:	f47f af5d 	bne.w	410204 <draw_shadow+0x6c0>
        if(ca.y2 > h_half) ca.y2 = h_half;
  41034a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
  41034e:	459b      	cmp	fp, r3
  410350:	da01      	bge.n	410356 <draw_shadow+0x812>
  410352:	f8ad b052 	strh.w	fp, [sp, #82]	; 0x52
        if(ca.x2 > w_half) ca.x2 = w_half;
  410356:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  41035a:	990c      	ldr	r1, [sp, #48]	; 0x30
  41035c:	4299      	cmp	r1, r3
  41035e:	da01      	bge.n	410364 <draw_shadow+0x820>
  410360:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
  410364:	f8bd 3052 	ldrh.w	r3, [sp, #82]	; 0x52
  410368:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41036c:	b291      	uxth	r1, r2
  41036e:	1a5b      	subs	r3, r3, r1
  410370:	b29b      	uxth	r3, r3
  410372:	3301      	adds	r3, #1
  410374:	b21b      	sxth	r3, r3
  410376:	469e      	mov	lr, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410378:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41037c:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  410380:	b288      	uxth	r0, r1
  410382:	1a1b      	subs	r3, r3, r0
  410384:	b29b      	uxth	r3, r3
  410386:	3301      	adds	r3, #1
  410388:	b21b      	sxth	r3, r3
  41038a:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  41038c:	2b00      	cmp	r3, #0
  41038e:	f77f af39 	ble.w	410204 <draw_shadow+0x6c0>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  410392:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  410396:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  41039a:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  41039e:	eba2 0808 	sub.w	r8, r2, r8
  4103a2:	fb08 1804 	mla	r8, r8, r4, r1
  4103a6:	9b07      	ldr	r3, [sp, #28]
  4103a8:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4103aa:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4103ac:	aa11      	add	r2, sp, #68	; 0x44
  4103ae:	2308      	movs	r3, #8
    while(len) {
  4103b0:	b12b      	cbz	r3, 4103be <draw_shadow+0x87a>
        *d8 = *s8;
  4103b2:	f811 0b01 	ldrb.w	r0, [r1], #1
  4103b6:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4103ba:	3b01      	subs	r3, #1
  4103bc:	e7f8      	b.n	4103b0 <draw_shadow+0x86c>
            fa.y2 = fa.y1;
  4103be:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4103c2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4103c6:	f04f 0900 	mov.w	r9, #0
  4103ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
  4103ce:	46a3      	mov	fp, r4
  4103d0:	46f2      	mov	sl, lr
  4103d2:	e017      	b.n	410404 <draw_shadow+0x8c0>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4103d4:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4103d8:	9302      	str	r3, [sp, #8]
  4103da:	9701      	str	r7, [sp, #4]
  4103dc:	9000      	str	r0, [sp, #0]
  4103de:	9b05      	ldr	r3, [sp, #20]
  4103e0:	8c2a      	ldrh	r2, [r5, #32]
  4103e2:	a911      	add	r1, sp, #68	; 0x44
  4103e4:	9804      	ldr	r0, [sp, #16]
  4103e6:	4c14      	ldr	r4, [pc, #80]	; (410438 <draw_shadow+0x8f4>)
  4103e8:	47a0      	blx	r4
                fa.y1++;
  4103ea:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4103ee:	3301      	adds	r3, #1
  4103f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  4103f4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4103f8:	3301      	adds	r3, #1
  4103fa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  4103fe:	44d8      	add	r8, fp
            for(y = 0; y < h; y++) {
  410400:	f109 0901 	add.w	r9, r9, #1
  410404:	45d1      	cmp	r9, sl
  410406:	da11      	bge.n	41042c <draw_shadow+0x8e8>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  41040a:	4641      	mov	r1, r8
  41040c:	9c05      	ldr	r4, [sp, #20]
  41040e:	4620      	mov	r0, r4
  410410:	4b0a      	ldr	r3, [pc, #40]	; (41043c <draw_shadow+0x8f8>)
  410412:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410416:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  41041a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41041e:	4620      	mov	r0, r4
  410420:	4c04      	ldr	r4, [pc, #16]	; (410434 <draw_shadow+0x8f0>)
  410422:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410424:	2801      	cmp	r0, #1
  410426:	d1d5      	bne.n	4103d4 <draw_shadow+0x890>
  410428:	2002      	movs	r0, #2
  41042a:	e7d3      	b.n	4103d4 <draw_shadow+0x890>
  41042c:	465c      	mov	r4, fp
  41042e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
  410432:	e6e7      	b.n	410204 <draw_shadow+0x6c0>
  410434:	0040f55d 	.word	0x0040f55d
  410438:	0040c301 	.word	0x0040c301
  41043c:	004160d1 	.word	0x004160d1
  410440:	00414ef3 	.word	0x00414ef3
  410444:	0040f5ad 	.word	0x0040f5ad
  410448:	00416019 	.word	0x00416019
  41044c:	00415169 	.word	0x00415169
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410450:	9a08      	ldr	r2, [sp, #32]
  410452:	a91e      	add	r1, sp, #120	; 0x78
  410454:	a815      	add	r0, sp, #84	; 0x54
  410456:	4bb9      	ldr	r3, [pc, #740]	; (41073c <draw_shadow+0xbf8>)
  410458:	4798      	blx	r3
  41045a:	2800      	cmp	r0, #0
  41045c:	f47f aeee 	bne.w	41023c <draw_shadow+0x6f8>
        if(ca.y1 <= h_half) ca.y1 = h_half + 1;
  410460:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410464:	459b      	cmp	fp, r3
  410466:	db03      	blt.n	410470 <draw_shadow+0x92c>
  410468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  41046a:	3301      	adds	r3, #1
  41046c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        if(ca.x2 > w_half) ca.x2 = w_half;
  410470:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410474:	990c      	ldr	r1, [sp, #48]	; 0x30
  410476:	4299      	cmp	r1, r3
  410478:	da01      	bge.n	41047e <draw_shadow+0x93a>
  41047a:	f8ad 1050 	strh.w	r1, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41047e:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  410482:	fa1f fb82 	uxth.w	fp, r2
  410486:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41048a:	ebab 0b03 	sub.w	fp, fp, r3
  41048e:	fa1f fb8b 	uxth.w	fp, fp
  410492:	f10b 0b01 	add.w	fp, fp, #1
  410496:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41049a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41049e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
  4104a2:	b288      	uxth	r0, r1
  4104a4:	1a1b      	subs	r3, r3, r0
  4104a6:	b29b      	uxth	r3, r3
  4104a8:	3301      	adds	r3, #1
  4104aa:	b21b      	sxth	r3, r3
  4104ac:	930a      	str	r3, [sp, #40]	; 0x28
        if(w > 0) {
  4104ae:	2b00      	cmp	r3, #0
  4104b0:	f77f aec4 	ble.w	41023c <draw_shadow+0x6f8>
            sh_buf_tmp = sh_buf + (ca.x1 - a.x1);
  4104b4:	f9bd 8054 	ldrsh.w	r8, [sp, #84]	; 0x54
  4104b8:	eba1 0108 	sub.w	r1, r1, r8
            sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4104bc:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
  4104c0:	eba8 0802 	sub.w	r8, r8, r2
  4104c4:	fb08 1804 	mla	r8, r8, r4, r1
  4104c8:	9b07      	ldr	r3, [sp, #28]
  4104ca:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4104cc:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4104ce:	aa11      	add	r2, sp, #68	; 0x44
  4104d0:	2308      	movs	r3, #8
    while(len) {
  4104d2:	b12b      	cbz	r3, 4104e0 <draw_shadow+0x99c>
        *d8 = *s8;
  4104d4:	f811 0b01 	ldrb.w	r0, [r1], #1
  4104d8:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4104dc:	3b01      	subs	r3, #1
  4104de:	e7f8      	b.n	4104d2 <draw_shadow+0x98e>
            fa.y1 = fa.y2;    /*Fill from bottom to top*/
  4104e0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4104e4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            for(y = 0; y < h; y++) {
  4104e8:	f04f 0900 	mov.w	r9, #0
  4104ec:	46a2      	mov	sl, r4
  4104ee:	e017      	b.n	410520 <draw_shadow+0x9dc>
                _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4104f0:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4104f4:	9302      	str	r3, [sp, #8]
  4104f6:	9701      	str	r7, [sp, #4]
  4104f8:	9000      	str	r0, [sp, #0]
  4104fa:	9b05      	ldr	r3, [sp, #20]
  4104fc:	8c2a      	ldrh	r2, [r5, #32]
  4104fe:	a911      	add	r1, sp, #68	; 0x44
  410500:	9804      	ldr	r0, [sp, #16]
  410502:	4c8f      	ldr	r4, [pc, #572]	; (410740 <draw_shadow+0xbfc>)
  410504:	47a0      	blx	r4
                fa.y1--;
  410506:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41050a:	3b01      	subs	r3, #1
  41050c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2--;
  410510:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410514:	3b01      	subs	r3, #1
  410516:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
                sh_buf_tmp += corner_size;
  41051a:	44d0      	add	r8, sl
            for(y = 0; y < h; y++) {
  41051c:	f109 0901 	add.w	r9, r9, #1
  410520:	45d9      	cmp	r9, fp
  410522:	da11      	bge.n	410548 <draw_shadow+0xa04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  410526:	4641      	mov	r1, r8
  410528:	9c05      	ldr	r4, [sp, #20]
  41052a:	4620      	mov	r0, r4
  41052c:	4b85      	ldr	r3, [pc, #532]	; (410744 <draw_shadow+0xc00>)
  41052e:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410532:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410536:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41053a:	4620      	mov	r0, r4
  41053c:	4c82      	ldr	r4, [pc, #520]	; (410748 <draw_shadow+0xc04>)
  41053e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410540:	2801      	cmp	r0, #1
  410542:	d1d5      	bne.n	4104f0 <draw_shadow+0x9ac>
  410544:	2002      	movs	r0, #2
  410546:	e7d3      	b.n	4104f0 <draw_shadow+0x9ac>
  410548:	4654      	mov	r4, sl
  41054a:	e677      	b.n	41023c <draw_shadow+0x6f8>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41054c:	9a08      	ldr	r2, [sp, #32]
  41054e:	a91e      	add	r1, sp, #120	; 0x78
  410550:	a815      	add	r0, sp, #84	; 0x54
  410552:	4b7a      	ldr	r3, [pc, #488]	; (41073c <draw_shadow+0xbf8>)
  410554:	4798      	blx	r3
  410556:	2800      	cmp	r0, #0
  410558:	f47f ae8c 	bne.w	410274 <draw_shadow+0x730>
        if(simple_mode) ca.x2 = LV_MATH_MIN(coords->x1, ca.x2);
  41055c:	9b06      	ldr	r3, [sp, #24]
  41055e:	b14b      	cbz	r3, 410574 <draw_shadow+0xa30>
  410560:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	; 0x50
  410564:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410566:	f9b2 2000 	ldrsh.w	r2, [r2]
  41056a:	4293      	cmp	r3, r2
  41056c:	bfa8      	it	ge
  41056e:	4613      	movge	r3, r2
  410570:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
  410574:	f8bd b050 	ldrh.w	fp, [sp, #80]	; 0x50
  410578:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
  41057c:	b29a      	uxth	r2, r3
  41057e:	ebab 0b02 	sub.w	fp, fp, r2
  410582:	fa1f fb8b 	uxth.w	fp, fp
  410586:	f10b 0b01 	add.w	fp, fp, #1
  41058a:	fa0f fb8b 	sxth.w	fp, fp
        if(w > 0) {
  41058e:	f1bb 0f00 	cmp.w	fp, #0
  410592:	f77f ae6f 	ble.w	410274 <draw_shadow+0x730>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410596:	f8bd a052 	ldrh.w	sl, [sp, #82]	; 0x52
  41059a:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
  41059e:	ebaa 0a02 	sub.w	sl, sl, r2
  4105a2:	fa1f fa8a 	uxth.w	sl, sl
  4105a6:	f10a 0a01 	add.w	sl, sl, #1
  4105aa:	fa0f fa8a 	sxth.w	sl, sl
            sh_buf_tmp = sh_buf + corner_size * (corner_size - 1);
  4105ae:	1e62      	subs	r2, r4, #1
            sh_buf_tmp += ca.x1 - a.x1;
  4105b0:	f9bd 1054 	ldrsh.w	r1, [sp, #84]	; 0x54
  4105b4:	1a59      	subs	r1, r3, r1
  4105b6:	fb02 1304 	mla	r3, r2, r4, r1
  4105ba:	9a07      	ldr	r2, [sp, #28]
  4105bc:	18d3      	adds	r3, r2, r3
  4105be:	930a      	str	r3, [sp, #40]	; 0x28
    const uint8_t * s8 = (const uint8_t *)src;
  4105c0:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4105c2:	aa11      	add	r2, sp, #68	; 0x44
  4105c4:	2308      	movs	r3, #8
    while(len) {
  4105c6:	b12b      	cbz	r3, 4105d4 <draw_shadow+0xa90>
        *d8 = *s8;
  4105c8:	f811 0b01 	ldrb.w	r0, [r1], #1
  4105cc:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4105d0:	3b01      	subs	r3, #1
  4105d2:	e7f8      	b.n	4105c6 <draw_shadow+0xa82>
            fa.y2 = fa.y1;
  4105d4:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4105d8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  4105dc:	f04f 0800 	mov.w	r8, #0
  4105e0:	970c      	str	r7, [sp, #48]	; 0x30
  4105e2:	46a1      	mov	r9, r4
  4105e4:	9c06      	ldr	r4, [sp, #24]
  4105e6:	e022      	b.n	41062e <draw_shadow+0xaea>
                    mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  4105e8:	465b      	mov	r3, fp
  4105ea:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  4105ee:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  4105f2:	9805      	ldr	r0, [sp, #20]
  4105f4:	4f54      	ldr	r7, [pc, #336]	; (410748 <draw_shadow+0xc04>)
  4105f6:	47b8      	blx	r7
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  4105f8:	2801      	cmp	r0, #1
  4105fa:	d023      	beq.n	410644 <draw_shadow+0xb00>
                _lv_blend_fill(clip, &fa,
  4105fc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410600:	9302      	str	r3, [sp, #8]
  410602:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
  410606:	9301      	str	r3, [sp, #4]
  410608:	9000      	str	r0, [sp, #0]
  41060a:	9b05      	ldr	r3, [sp, #20]
  41060c:	8c2a      	ldrh	r2, [r5, #32]
  41060e:	a911      	add	r1, sp, #68	; 0x44
  410610:	9804      	ldr	r0, [sp, #16]
  410612:	4f4b      	ldr	r7, [pc, #300]	; (410740 <draw_shadow+0xbfc>)
  410614:	47b8      	blx	r7
                fa.y1++;
  410616:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41061a:	3301      	adds	r3, #1
  41061c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                fa.y2++;
  410620:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410624:	3301      	adds	r3, #1
  410626:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            for(y = 0; y < h; y++) {
  41062a:	f108 0801 	add.w	r8, r8, #1
  41062e:	45d0      	cmp	r8, sl
  410630:	da0a      	bge.n	410648 <draw_shadow+0xb04>
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
  410632:	465a      	mov	r2, fp
  410634:	990a      	ldr	r1, [sp, #40]	; 0x28
  410636:	9805      	ldr	r0, [sp, #20]
  410638:	4b42      	ldr	r3, [pc, #264]	; (410744 <draw_shadow+0xc00>)
  41063a:	4798      	blx	r3
                if(simple_mode) {
  41063c:	2c00      	cmp	r4, #0
  41063e:	d0d3      	beq.n	4105e8 <draw_shadow+0xaa4>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
  410640:	2002      	movs	r0, #2
  410642:	e7db      	b.n	4105fc <draw_shadow+0xab8>
                    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410644:	2002      	movs	r0, #2
  410646:	e7d9      	b.n	4105fc <draw_shadow+0xab8>
  410648:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  41064a:	464c      	mov	r4, r9
  41064c:	e612      	b.n	410274 <draw_shadow+0x730>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41064e:	9a08      	ldr	r2, [sp, #32]
  410650:	a91e      	add	r1, sp, #120	; 0x78
  410652:	a815      	add	r0, sp, #84	; 0x54
  410654:	4b39      	ldr	r3, [pc, #228]	; (41073c <draw_shadow+0xbf8>)
  410656:	4798      	blx	r3
  410658:	2800      	cmp	r0, #0
  41065a:	f47f ae27 	bne.w	4102ac <draw_shadow+0x768>
        if(simple_mode) ca.y2 = LV_MATH_MIN(ca.y2, coords->y1);
  41065e:	9b06      	ldr	r3, [sp, #24]
  410660:	b14b      	cbz	r3, 410676 <draw_shadow+0xb32>
  410662:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  410668:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  41066c:	4293      	cmp	r3, r2
  41066e:	bfa8      	it	ge
  410670:	4613      	movge	r3, r2
  410672:	f8ad 3052 	strh.w	r3, [sp, #82]	; 0x52
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410676:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41067a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  41067e:	1a9b      	subs	r3, r3, r2
  410680:	b29b      	uxth	r3, r3
  410682:	3301      	adds	r3, #1
  410684:	b21b      	sxth	r3, r3
  410686:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410688:	f8bd b052 	ldrh.w	fp, [sp, #82]	; 0x52
  41068c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410690:	b29a      	uxth	r2, r3
  410692:	ebab 0b02 	sub.w	fp, fp, r2
  410696:	fa1f fb8b 	uxth.w	fp, fp
  41069a:	f10b 0b01 	add.w	fp, fp, #1
  41069e:	fa0f fb8b 	sxth.w	fp, fp
        sh_buf_tmp = sh_buf + corner_size - 1;
  4106a2:	46a6      	mov	lr, r4
  4106a4:	1e62      	subs	r2, r4, #1
        sh_buf_tmp += corner_size * (ca.y1 - a.y1);
  4106a6:	f9bd 8056 	ldrsh.w	r8, [sp, #86]	; 0x56
  4106aa:	eba3 0808 	sub.w	r8, r3, r8
  4106ae:	fb08 2804 	mla	r8, r8, r4, r2
  4106b2:	9b07      	ldr	r3, [sp, #28]
  4106b4:	4498      	add	r8, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4106b6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4106b8:	aa11      	add	r2, sp, #68	; 0x44
  4106ba:	2308      	movs	r3, #8
  4106bc:	e004      	b.n	4106c8 <draw_shadow+0xb84>
        *d8 = *s8;
  4106be:	f811 0b01 	ldrb.w	r0, [r1], #1
  4106c2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4106c6:	3b01      	subs	r3, #1
    while(len) {
  4106c8:	2b00      	cmp	r3, #0
  4106ca:	d1f8      	bne.n	4106be <draw_shadow+0xb7a>
        fa.y2 = fa.y1;
  4106cc:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4106d0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4106d4:	f04f 0900 	mov.w	r9, #0
  4106d8:	940c      	str	r4, [sp, #48]	; 0x30
  4106da:	960d      	str	r6, [sp, #52]	; 0x34
  4106dc:	9e06      	ldr	r6, [sp, #24]
  4106de:	46f2      	mov	sl, lr
  4106e0:	e01e      	b.n	410720 <draw_shadow+0xbdc>
            _lv_memset(mask_buf, opa_tmp, w);
  4106e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4106e4:	9805      	ldr	r0, [sp, #20]
  4106e6:	4b19      	ldr	r3, [pc, #100]	; (41074c <draw_shadow+0xc08>)
  4106e8:	4798      	blx	r3
            if(simple_mode) {
  4106ea:	b38e      	cbz	r6, 410750 <draw_shadow+0xc0c>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  4106ec:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4106ee:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4106f2:	9302      	str	r3, [sp, #8]
  4106f4:	23ff      	movs	r3, #255	; 0xff
  4106f6:	9301      	str	r3, [sp, #4]
  4106f8:	9000      	str	r0, [sp, #0]
  4106fa:	9b05      	ldr	r3, [sp, #20]
  4106fc:	8c2a      	ldrh	r2, [r5, #32]
  4106fe:	a911      	add	r1, sp, #68	; 0x44
  410700:	9804      	ldr	r0, [sp, #16]
  410702:	4c0f      	ldr	r4, [pc, #60]	; (410740 <draw_shadow+0xbfc>)
  410704:	47a0      	blx	r4
            fa.y1++;
  410706:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41070a:	3301      	adds	r3, #1
  41070c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  410710:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410714:	3301      	adds	r3, #1
  410716:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  41071a:	44d0      	add	r8, sl
        for(y = 0; y < h; y++) {
  41071c:	f109 0901 	add.w	r9, r9, #1
  410720:	45d9      	cmp	r9, fp
  410722:	da21      	bge.n	410768 <draw_shadow+0xc24>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410724:	f898 1000 	ldrb.w	r1, [r8]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410728:	2fff      	cmp	r7, #255	; 0xff
  41072a:	bf08      	it	eq
  41072c:	29ff      	cmpeq	r1, #255	; 0xff
  41072e:	d0d8      	beq.n	4106e2 <draw_shadow+0xb9e>
  410730:	fb01 f107 	mul.w	r1, r1, r7
  410734:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410738:	e7d3      	b.n	4106e2 <draw_shadow+0xb9e>
  41073a:	bf00      	nop
  41073c:	00415169 	.word	0x00415169
  410740:	0040c301 	.word	0x0040c301
  410744:	004160d1 	.word	0x004160d1
  410748:	0040f55d 	.word	0x0040f55d
  41074c:	00416399 	.word	0x00416399
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  410752:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410756:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41075a:	9805      	ldr	r0, [sp, #20]
  41075c:	4c73      	ldr	r4, [pc, #460]	; (41092c <draw_shadow+0xde8>)
  41075e:	47a0      	blx	r4
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410760:	2801      	cmp	r0, #1
  410762:	d1c4      	bne.n	4106ee <draw_shadow+0xbaa>
  410764:	2002      	movs	r0, #2
  410766:	e7c2      	b.n	4106ee <draw_shadow+0xbaa>
  410768:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  41076a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  41076c:	e59e      	b.n	4102ac <draw_shadow+0x768>
    if(has_com && _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  41076e:	9a08      	ldr	r2, [sp, #32]
  410770:	a91e      	add	r1, sp, #120	; 0x78
  410772:	a815      	add	r0, sp, #84	; 0x54
  410774:	4b6e      	ldr	r3, [pc, #440]	; (410930 <draw_shadow+0xdec>)
  410776:	4798      	blx	r3
  410778:	2800      	cmp	r0, #0
  41077a:	f47f adb3 	bne.w	4102e4 <draw_shadow+0x7a0>
        if(simple_mode) ca.y1 = LV_MATH_MAX(ca.y1, coords->y2);
  41077e:	9b06      	ldr	r3, [sp, #24]
  410780:	b14b      	cbz	r3, 410796 <draw_shadow+0xc52>
  410782:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410784:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
  410788:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
  41078c:	4293      	cmp	r3, r2
  41078e:	bfb8      	it	lt
  410790:	4613      	movlt	r3, r2
  410792:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410796:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  41079a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
  41079e:	1a9b      	subs	r3, r3, r2
  4107a0:	b29b      	uxth	r3, r3
  4107a2:	3301      	adds	r3, #1
  4107a4:	b21b      	sxth	r3, r3
  4107a6:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  4107a8:	f9bd 2052 	ldrsh.w	r2, [sp, #82]	; 0x52
  4107ac:	fa1f f982 	uxth.w	r9, r2
  4107b0:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  4107b4:	eba9 0903 	sub.w	r9, r9, r3
  4107b8:	fa1f f989 	uxth.w	r9, r9
  4107bc:	f109 0901 	add.w	r9, r9, #1
  4107c0:	fa0f f989 	sxth.w	r9, r9
        sh_buf_tmp = sh_buf + corner_size - 1;
  4107c4:	46a2      	mov	sl, r4
  4107c6:	1e61      	subs	r1, r4, #1
        sh_buf_tmp += corner_size * (a.y2 - ca.y2);
  4107c8:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  4107cc:	1a9b      	subs	r3, r3, r2
  4107ce:	fb03 1404 	mla	r4, r3, r4, r1
  4107d2:	9b07      	ldr	r3, [sp, #28]
  4107d4:	441c      	add	r4, r3
    const uint8_t * s8 = (const uint8_t *)src;
  4107d6:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4107d8:	aa11      	add	r2, sp, #68	; 0x44
  4107da:	2308      	movs	r3, #8
  4107dc:	e004      	b.n	4107e8 <draw_shadow+0xca4>
        *d8 = *s8;
  4107de:	f811 0b01 	ldrb.w	r0, [r1], #1
  4107e2:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4107e6:	3b01      	subs	r3, #1
    while(len) {
  4107e8:	2b00      	cmp	r3, #0
  4107ea:	d1f8      	bne.n	4107de <draw_shadow+0xc9a>
        fa.y1 = fa.y2;
  4107ec:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4107f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(y = 0; y < h; y++) {
  4107f4:	f04f 0800 	mov.w	r8, #0
  4107f8:	f8dd b018 	ldr.w	fp, [sp, #24]
  4107fc:	960a      	str	r6, [sp, #40]	; 0x28
  4107fe:	e020      	b.n	410842 <draw_shadow+0xcfe>
            _lv_memset(mask_buf, opa_tmp, w);
  410800:	9a09      	ldr	r2, [sp, #36]	; 0x24
  410802:	9805      	ldr	r0, [sp, #20]
  410804:	4b4b      	ldr	r3, [pc, #300]	; (410934 <draw_shadow+0xdf0>)
  410806:	4798      	blx	r3
            if(simple_mode) {
  410808:	f1bb 0f00 	cmp.w	fp, #0
  41080c:	d025      	beq.n	41085a <draw_shadow+0xd16>
                mask_res = LV_DRAW_MASK_RES_CHANGED;
  41080e:	2002      	movs	r0, #2
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  410810:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  410814:	9302      	str	r3, [sp, #8]
  410816:	23ff      	movs	r3, #255	; 0xff
  410818:	9301      	str	r3, [sp, #4]
  41081a:	9000      	str	r0, [sp, #0]
  41081c:	9b05      	ldr	r3, [sp, #20]
  41081e:	8c2a      	ldrh	r2, [r5, #32]
  410820:	a911      	add	r1, sp, #68	; 0x44
  410822:	9804      	ldr	r0, [sp, #16]
  410824:	4e44      	ldr	r6, [pc, #272]	; (410938 <draw_shadow+0xdf4>)
  410826:	47b0      	blx	r6
            fa.y1--;
  410828:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  41082c:	3b01      	subs	r3, #1
  41082e:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2--;
  410832:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410836:	3b01      	subs	r3, #1
  410838:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            sh_buf_tmp += corner_size;
  41083c:	4454      	add	r4, sl
        for(y = 0; y < h; y++) {
  41083e:	f108 0801 	add.w	r8, r8, #1
  410842:	45c8      	cmp	r8, r9
  410844:	da15      	bge.n	410872 <draw_shadow+0xd2e>
            lv_opa_t opa_tmp = sh_buf_tmp[0];
  410846:	7821      	ldrb	r1, [r4, #0]
            if(opa_tmp != LV_OPA_COVER || opa != LV_OPA_COVER) opa_tmp = (opa * opa_tmp) >> 8;
  410848:	2fff      	cmp	r7, #255	; 0xff
  41084a:	bf08      	it	eq
  41084c:	29ff      	cmpeq	r1, #255	; 0xff
  41084e:	d0d7      	beq.n	410800 <draw_shadow+0xcbc>
  410850:	fb01 f107 	mul.w	r1, r1, r7
  410854:	f3c1 2107 	ubfx	r1, r1, #8, #8
  410858:	e7d2      	b.n	410800 <draw_shadow+0xcbc>
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  41085a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  41085c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410860:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  410864:	9805      	ldr	r0, [sp, #20]
  410866:	4e31      	ldr	r6, [pc, #196]	; (41092c <draw_shadow+0xde8>)
  410868:	47b0      	blx	r6
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  41086a:	2801      	cmp	r0, #1
  41086c:	d1d0      	bne.n	410810 <draw_shadow+0xccc>
  41086e:	2002      	movs	r0, #2
  410870:	e7ce      	b.n	410810 <draw_shadow+0xccc>
  410872:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  410874:	e536      	b.n	4102e4 <draw_shadow+0x7a0>
    if(has_com && simple_mode == false &&  _lv_area_is_in(&a, &bg_coords, r_bg) == false) {
  410876:	9a08      	ldr	r2, [sp, #32]
  410878:	a91e      	add	r1, sp, #120	; 0x78
  41087a:	a815      	add	r0, sp, #84	; 0x54
  41087c:	4b2c      	ldr	r3, [pc, #176]	; (410930 <draw_shadow+0xdec>)
  41087e:	4798      	blx	r3
  410880:	2800      	cmp	r0, #0
  410882:	f47f ad4f 	bne.w	410324 <draw_shadow+0x7e0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410886:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
  41088a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
  41088e:	1af6      	subs	r6, r6, r3
  410890:	b2b6      	uxth	r6, r6
  410892:	3601      	adds	r6, #1
  410894:	b236      	sxth	r6, r6
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410896:	f8bd 8052 	ldrh.w	r8, [sp, #82]	; 0x52
  41089a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
  41089e:	eba8 0803 	sub.w	r8, r8, r3
  4108a2:	fa1f f888 	uxth.w	r8, r8
  4108a6:	f108 0801 	add.w	r8, r8, #1
  4108aa:	fa0f f888 	sxth.w	r8, r8
    const uint8_t * s8 = (const uint8_t *)src;
  4108ae:	a913      	add	r1, sp, #76	; 0x4c
    uint8_t * d8 = (uint8_t *)dst;
  4108b0:	aa11      	add	r2, sp, #68	; 0x44
  4108b2:	2308      	movs	r3, #8
    while(len) {
  4108b4:	b12b      	cbz	r3, 4108c2 <draw_shadow+0xd7e>
        *d8 = *s8;
  4108b6:	f811 0b01 	ldrb.w	r0, [r1], #1
  4108ba:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  4108be:	3b01      	subs	r3, #1
  4108c0:	e7f8      	b.n	4108b4 <draw_shadow+0xd70>
        fa.y2 = fa.y1;
  4108c2:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4108c6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4108ca:	2400      	movs	r4, #0
  4108cc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  4108d0:	e016      	b.n	410900 <draw_shadow+0xdbc>
            _lv_blend_fill(clip, &fa, dsc->shadow_color, mask_buf,
  4108d2:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
  4108d6:	9302      	str	r3, [sp, #8]
  4108d8:	23ff      	movs	r3, #255	; 0xff
  4108da:	9301      	str	r3, [sp, #4]
  4108dc:	9000      	str	r0, [sp, #0]
  4108de:	464b      	mov	r3, r9
  4108e0:	8c2a      	ldrh	r2, [r5, #32]
  4108e2:	a911      	add	r1, sp, #68	; 0x44
  4108e4:	9804      	ldr	r0, [sp, #16]
  4108e6:	4f14      	ldr	r7, [pc, #80]	; (410938 <draw_shadow+0xdf4>)
  4108e8:	47b8      	blx	r7
            fa.y1++;
  4108ea:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4108ee:	3301      	adds	r3, #1
  4108f0:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fa.y2++;
  4108f4:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  4108f8:	3301      	adds	r3, #1
  4108fa:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        for(y = 0; y < h; y++) {
  4108fe:	3401      	adds	r4, #1
  410900:	4544      	cmp	r4, r8
  410902:	f6bf ad0f 	bge.w	410324 <draw_shadow+0x7e0>
            _lv_memset(mask_buf, dsc->shadow_opa, w);
  410906:	4632      	mov	r2, r6
  410908:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
  41090c:	4648      	mov	r0, r9
  41090e:	4b09      	ldr	r3, [pc, #36]	; (410934 <draw_shadow+0xdf0>)
  410910:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
  410912:	4633      	mov	r3, r6
  410914:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410918:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
  41091c:	4648      	mov	r0, r9
  41091e:	4f03      	ldr	r7, [pc, #12]	; (41092c <draw_shadow+0xde8>)
  410920:	47b8      	blx	r7
            if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
  410922:	2801      	cmp	r0, #1
  410924:	d1d5      	bne.n	4108d2 <draw_shadow+0xd8e>
  410926:	2002      	movs	r0, #2
  410928:	e7d3      	b.n	4108d2 <draw_shadow+0xd8e>
  41092a:	bf00      	nop
  41092c:	0040f55d 	.word	0x0040f55d
  410930:	00415169 	.word	0x00415169
  410934:	00416399 	.word	0x00416399
  410938:	0040c301 	.word	0x0040c301

0041093c <draw_full_border>:
}
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, bool radius_is_in, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
  41093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410940:	b0a5      	sub	sp, #148	; 0x94
  410942:	4683      	mov	fp, r0
  410944:	460c      	mov	r4, r1
  410946:	9205      	str	r2, [sp, #20]
  410948:	461e      	mov	r6, r3
  41094a:	f89d 50b8 	ldrb.w	r5, [sp, #184]	; 0xb8
  41094e:	f89d 70c0 	ldrb.w	r7, [sp, #192]	; 0xc0
  410952:	f89d 80c4 	ldrb.w	r8, [sp, #196]	; 0xc4
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
  410956:	4baa      	ldr	r3, [pc, #680]	; (410c00 <draw_full_border+0x2c4>)
  410958:	4798      	blx	r3
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;
  41095a:	2800      	cmp	r0, #0
  41095c:	d13d      	bne.n	4109da <draw_full_border+0x9e>
    bool simple_mode = true;
  41095e:	f04f 0a01 	mov.w	sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410962:	f8bb 1004 	ldrh.w	r1, [fp, #4]
  410966:	f8bb 2000 	ldrh.w	r2, [fp]
  41096a:	1a8a      	subs	r2, r1, r2
  41096c:	b292      	uxth	r2, r2
  41096e:	3201      	adds	r2, #1
  410970:	b212      	sxth	r2, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410972:	f8bb 0006 	ldrh.w	r0, [fp, #6]
  410976:	f8bb 3002 	ldrh.w	r3, [fp, #2]
  41097a:	1ac0      	subs	r0, r0, r3
  41097c:	b280      	uxth	r0, r0
  41097e:	3001      	adds	r0, #1
  410980:	b200      	sxth	r0, r0

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
  410982:	88a3      	ldrh	r3, [r4, #4]
  410984:	1a59      	subs	r1, r3, r1
  410986:	b289      	uxth	r1, r1
  410988:	910c      	str	r1, [sp, #48]	; 0x30
  41098a:	fa0f f981 	sxth.w	r9, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41098e:	8821      	ldrh	r1, [r4, #0]
  410990:	1a5b      	subs	r3, r3, r1
  410992:	b29b      	uxth	r3, r3
  410994:	3301      	adds	r3, #1
  410996:	b21b      	sxth	r3, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410998:	88e1      	ldrh	r1, [r4, #6]
  41099a:	f8b4 e002 	ldrh.w	lr, [r4, #2]
  41099e:	eba1 010e 	sub.w	r1, r1, lr
  4109a2:	b289      	uxth	r1, r1
  4109a4:	3101      	adds	r1, #1
  4109a6:	b209      	sxth	r1, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);

    int32_t rin;
    int32_t rout;
    if(radius_is_in) {
  4109a8:	b1d5      	cbz	r5, 4109e0 <draw_full_border+0xa4>
        rin = radius;
        int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
  4109aa:	4282      	cmp	r2, r0
  4109ac:	bfa8      	it	ge
  4109ae:	4602      	movge	r2, r0
        if(rin > short_side >> 1) rin = short_side >> 1;
  4109b0:	1055      	asrs	r5, r2, #1
  4109b2:	42ae      	cmp	r6, r5
  4109b4:	dc00      	bgt.n	4109b8 <draw_full_border+0x7c>
        rin = radius;
  4109b6:	4635      	mov	r5, r6

        /*Get the outer area*/
        rout = rin + border_width;
  4109b8:	eb05 0309 	add.w	r3, r5, r9
  4109bc:	9306      	str	r3, [sp, #24]
        rin = rout - border_width;
        if(rin < 0) rin = 0;

    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4109be:	4b91      	ldr	r3, [pc, #580]	; (410c04 <draw_full_border+0x2c8>)
  4109c0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4109c2:	4b91      	ldr	r3, [pc, #580]	; (410c08 <draw_full_border+0x2cc>)
  4109c4:	4798      	blx	r3
  4109c6:	4606      	mov	r6, r0

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
  4109c8:	9a05      	ldr	r2, [sp, #20]
  4109ca:	4621      	mov	r1, r4
  4109cc:	a822      	add	r0, sp, #136	; 0x88
  4109ce:	4b8f      	ldr	r3, [pc, #572]	; (410c0c <draw_full_border+0x2d0>)
  4109d0:	4798      	blx	r3
    if(is_common == false) return;
  4109d2:	b998      	cbnz	r0, 4109fc <draw_full_border+0xc0>
        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
    lv_draw_mask_remove_id(mask_rout_id);
    _lv_mem_buf_release(mask_buf);
}
  4109d4:	b025      	add	sp, #148	; 0x94
  4109d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
  4109da:	f04f 0a00 	mov.w	sl, #0
  4109de:	e7c0      	b.n	410962 <draw_full_border+0x26>
        int32_t short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
  4109e0:	4299      	cmp	r1, r3
  4109e2:	bfa8      	it	ge
  4109e4:	4619      	movge	r1, r3
        if(rout > short_side >> 1) rout = short_side >> 1;
  4109e6:	104b      	asrs	r3, r1, #1
  4109e8:	9306      	str	r3, [sp, #24]
  4109ea:	429e      	cmp	r6, r3
  4109ec:	dc00      	bgt.n	4109f0 <draw_full_border+0xb4>
        rout = radius;
  4109ee:	9606      	str	r6, [sp, #24]
        if(rin < 0) rin = 0;
  4109f0:	9b06      	ldr	r3, [sp, #24]
  4109f2:	ebb3 0509 	subs.w	r5, r3, r9
  4109f6:	d5e2      	bpl.n	4109be <draw_full_border+0x82>
  4109f8:	2500      	movs	r5, #0
  4109fa:	e7e0      	b.n	4109be <draw_full_border+0x82>
    draw_area.x1 -= disp_area->x1;
  4109fc:	f8b6 e010 	ldrh.w	lr, [r6, #16]
  410a00:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410a04:	eba3 030e 	sub.w	r3, r3, lr
  410a08:	b29a      	uxth	r2, r3
  410a0a:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
    draw_area.y1 -= disp_area->y1;
  410a0e:	8a70      	ldrh	r0, [r6, #18]
  410a10:	f8bd 108a 	ldrh.w	r1, [sp, #138]	; 0x8a
  410a14:	1a09      	subs	r1, r1, r0
  410a16:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
    draw_area.x2 -= disp_area->x1;
  410a1a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  410a1e:	eba3 030e 	sub.w	r3, r3, lr
  410a22:	b29b      	uxth	r3, r3
  410a24:	f8ad 308c 	strh.w	r3, [sp, #140]	; 0x8c
    draw_area.y2 -= disp_area->y1;
  410a28:	f8bd 108e 	ldrh.w	r1, [sp, #142]	; 0x8e
  410a2c:	1a09      	subs	r1, r1, r0
  410a2e:	f8ad 108e 	strh.w	r1, [sp, #142]	; 0x8e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  410a32:	1a9b      	subs	r3, r3, r2
  410a34:	b29b      	uxth	r3, r3
  410a36:	3301      	adds	r3, #1
  410a38:	b21b      	sxth	r3, r3
  410a3a:	9309      	str	r3, [sp, #36]	; 0x24
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
  410a3c:	2301      	movs	r3, #1
  410a3e:	b22a      	sxth	r2, r5
  410a40:	4659      	mov	r1, fp
  410a42:	a81b      	add	r0, sp, #108	; 0x6c
  410a44:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 410c24 <draw_full_border+0x2e8>
  410a48:	47d8      	blx	fp
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  410a4a:	2100      	movs	r1, #0
  410a4c:	a81b      	add	r0, sp, #108	; 0x6c
  410a4e:	4d70      	ldr	r5, [pc, #448]	; (410c10 <draw_full_border+0x2d4>)
  410a50:	47a8      	blx	r5
  410a52:	900d      	str	r0, [sp, #52]	; 0x34
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
  410a54:	2300      	movs	r3, #0
  410a56:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
  410a5a:	4621      	mov	r1, r4
  410a5c:	a814      	add	r0, sp, #80	; 0x50
  410a5e:	47d8      	blx	fp
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  410a60:	2100      	movs	r1, #0
  410a62:	a814      	add	r0, sp, #80	; 0x50
  410a64:	47a8      	blx	r5
  410a66:	900e      	str	r0, [sp, #56]	; 0x38
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  410a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410a6a:	9308      	str	r3, [sp, #32]
  410a6c:	4618      	mov	r0, r3
  410a6e:	4b69      	ldr	r3, [pc, #420]	; (410c14 <draw_full_border+0x2d8>)
  410a70:	4798      	blx	r3
  410a72:	9007      	str	r0, [sp, #28]
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
  410a74:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  410a78:	f109 39ff 	add.w	r9, r9, #4294967295
  410a7c:	464b      	mov	r3, r9
  410a7e:	9a06      	ldr	r2, [sp, #24]
  410a80:	4591      	cmp	r9, r2
  410a82:	bfb8      	it	lt
  410a84:	4613      	movlt	r3, r2
  410a86:	4619      	mov	r1, r3
  410a88:	930f      	str	r3, [sp, #60]	; 0x3c
    if(simple_mode) {
  410a8a:	f1ba 0f00 	cmp.w	sl, #0
  410a8e:	f000 8197 	beq.w	410dc0 <draw_full_border+0x484>
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
  410a92:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  410a96:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  410a9a:	1ad2      	subs	r2, r2, r3
  410a9c:	188a      	adds	r2, r1, r2
  410a9e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.x1 = area_outer->x1;
  410aa0:	f9b4 2000 	ldrsh.w	r2, [r4]
  410aa4:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410aa8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  410aac:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410ab0:	f9bd 908a 	ldrsh.w	r9, [sp, #138]	; 0x8a
  410ab4:	fa1f f289 	uxth.w	r2, r9
  410ab8:	fa12 f383 	uxtah	r3, r2, r3
  410abc:	b21b      	sxth	r3, r3
  410abe:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410ac2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410ac6:	46ba      	mov	sl, r7
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410ac8:	e02c      	b.n	410b24 <draw_full_border+0x1e8>
            fill_area2.x1 = area_outer->x2 - rout + 1;
  410aca:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410ace:	b29a      	uxth	r2, r3
  410ad0:	1b55      	subs	r5, r2, r5
  410ad2:	b2ad      	uxth	r5, r5
  410ad4:	3501      	adds	r5, #1
  410ad6:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410ada:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410ade:	9a06      	ldr	r2, [sp, #24]
  410ae0:	1a9b      	subs	r3, r3, r2
  410ae2:	3301      	adds	r3, #1
  410ae4:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  410ae8:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410aec:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410aee:	1a9b      	subs	r3, r3, r2
  410af0:	d46c      	bmi.n	410bcc <draw_full_border+0x290>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410af2:	f8cd 8008 	str.w	r8, [sp, #8]
  410af6:	f8cd a004 	str.w	sl, [sp, #4]
  410afa:	9700      	str	r7, [sp, #0]
  410afc:	9a07      	ldr	r2, [sp, #28]
  410afe:	4413      	add	r3, r2
  410b00:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410b04:	a910      	add	r1, sp, #64	; 0x40
  410b06:	9805      	ldr	r0, [sp, #20]
  410b08:	4d43      	ldr	r5, [pc, #268]	; (410c18 <draw_full_border+0x2dc>)
  410b0a:	47a8      	blx	r5
            fill_area.y1++;
  410b0c:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410b10:	3301      	adds	r3, #1
  410b12:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410b16:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410b1a:	3301      	adds	r3, #1
  410b1c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
  410b20:	f109 0901 	add.w	r9, r9, #1
  410b24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  410b26:	4599      	cmp	r9, r3
  410b28:	dc52      	bgt.n	410bd0 <draw_full_border+0x294>
            _lv_memset_ff(mask_buf, draw_area_w);
  410b2a:	9908      	ldr	r1, [sp, #32]
  410b2c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410b30:	4658      	mov	r0, fp
  410b32:	4b3a      	ldr	r3, [pc, #232]	; (410c1c <draw_full_border+0x2e0>)
  410b34:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410b36:	8a31      	ldrh	r1, [r6, #16]
  410b38:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410b3c:	4419      	add	r1, r3
  410b3e:	8a72      	ldrh	r2, [r6, #18]
  410b40:	444a      	add	r2, r9
  410b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410b44:	b212      	sxth	r2, r2
  410b46:	b209      	sxth	r1, r1
  410b48:	4658      	mov	r0, fp
  410b4a:	4d35      	ldr	r5, [pc, #212]	; (410c20 <draw_full_border+0x2e4>)
  410b4c:	47a8      	blx	r5
  410b4e:	4607      	mov	r7, r0
            fill_area2.y1 = fill_area.y1;
  410b50:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410b54:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410b58:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410b5c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            fill_area2.x1 = area_outer->x1;
  410b60:	f9b4 3000 	ldrsh.w	r3, [r4]
  410b64:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410b68:	8823      	ldrh	r3, [r4, #0]
  410b6a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410b6e:	442b      	add	r3, r5
  410b70:	b29b      	uxth	r3, r3
  410b72:	3b01      	subs	r3, #1
  410b74:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410b78:	f8cd 8008 	str.w	r8, [sp, #8]
  410b7c:	f8cd a004 	str.w	sl, [sp, #4]
  410b80:	9000      	str	r0, [sp, #0]
  410b82:	465b      	mov	r3, fp
  410b84:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410b88:	a910      	add	r1, sp, #64	; 0x40
  410b8a:	9805      	ldr	r0, [sp, #20]
  410b8c:	f8df b088 	ldr.w	fp, [pc, #136]	; 410c18 <draw_full_border+0x2dc>
  410b90:	47d8      	blx	fp
            if(fill_area2.y2 < area_outer->y1 + border_width) {
  410b92:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410b96:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  410b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
  410b9c:	440b      	add	r3, r1
  410b9e:	429a      	cmp	r2, r3
  410ba0:	da93      	bge.n	410aca <draw_full_border+0x18e>
                fill_area2.x1 = area_outer->x1 + rout;
  410ba2:	8823      	ldrh	r3, [r4, #0]
  410ba4:	442b      	add	r3, r5
  410ba6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410baa:	88a3      	ldrh	r3, [r4, #4]
  410bac:	1b5b      	subs	r3, r3, r5
  410bae:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410bb2:	f8cd 8008 	str.w	r8, [sp, #8]
  410bb6:	f8cd a004 	str.w	sl, [sp, #4]
  410bba:	2301      	movs	r3, #1
  410bbc:	9300      	str	r3, [sp, #0]
  410bbe:	2300      	movs	r3, #0
  410bc0:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410bc4:	a910      	add	r1, sp, #64	; 0x40
  410bc6:	9805      	ldr	r0, [sp, #20]
  410bc8:	47d8      	blx	fp
  410bca:	e77e      	b.n	410aca <draw_full_border+0x18e>
            if(mask_ofs < 0) mask_ofs = 0;
  410bcc:	2300      	movs	r3, #0
  410bce:	e790      	b.n	410af2 <draw_full_border+0x1b6>
  410bd0:	4657      	mov	r7, sl
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
  410bd2:	f9b4 9006 	ldrsh.w	r9, [r4, #6]
  410bd6:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
  410bda:	eba9 0903 	sub.w	r9, r9, r3
  410bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  410be0:	eba9 0902 	sub.w	r9, r9, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
  410be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  410be6:	4549      	cmp	r1, r9
  410be8:	db01      	blt.n	410bee <draw_full_border+0x2b2>
  410bea:	f101 0901 	add.w	r9, r1, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
  410bee:	fa19 f383 	uxtah	r3, r9, r3
  410bf2:	b21b      	sxth	r3, r3
  410bf4:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410bf8:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410bfc:	46ba      	mov	sl, r7
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410bfe:	e040      	b.n	410c82 <draw_full_border+0x346>
  410c00:	0040f625 	.word	0x0040f625
  410c04:	00409269 	.word	0x00409269
  410c08:	00414735 	.word	0x00414735
  410c0c:	00414ef3 	.word	0x00414ef3
  410c10:	0040f529 	.word	0x0040f529
  410c14:	00416269 	.word	0x00416269
  410c18:	0040c301 	.word	0x0040c301
  410c1c:	0041644d 	.word	0x0041644d
  410c20:	0040f55d 	.word	0x0040f55d
  410c24:	0040f7a5 	.word	0x0040f7a5
            fill_area2.x1 = area_outer->x2 - rout + 1;
  410c28:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410c2c:	b29a      	uxth	r2, r3
  410c2e:	1b55      	subs	r5, r2, r5
  410c30:	b2ad      	uxth	r5, r5
  410c32:	3501      	adds	r5, #1
  410c34:	f8ad 5040 	strh.w	r5, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x2;
  410c38:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  410c3c:	9a06      	ldr	r2, [sp, #24]
  410c3e:	1a9b      	subs	r3, r3, r2
  410c40:	3301      	adds	r3, #1
  410c42:	f9b6 2010 	ldrsh.w	r2, [r6, #16]
  410c46:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  410c4a:	440a      	add	r2, r1
            if(mask_ofs < 0) mask_ofs = 0;
  410c4c:	1a9b      	subs	r3, r3, r2
  410c4e:	d46d      	bmi.n	410d2c <draw_full_border+0x3f0>
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
  410c50:	f8cd 8008 	str.w	r8, [sp, #8]
  410c54:	f8cd a004 	str.w	sl, [sp, #4]
  410c58:	9700      	str	r7, [sp, #0]
  410c5a:	9a07      	ldr	r2, [sp, #28]
  410c5c:	4413      	add	r3, r2
  410c5e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410c62:	a910      	add	r1, sp, #64	; 0x40
  410c64:	9805      	ldr	r0, [sp, #20]
  410c66:	4d79      	ldr	r5, [pc, #484]	; (410e4c <draw_full_border+0x510>)
  410c68:	47a8      	blx	r5
            fill_area.y1++;
  410c6a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410c6e:	3301      	adds	r3, #1
  410c70:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410c74:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410c78:	3301      	adds	r3, #1
  410c7a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
  410c7e:	f109 0901 	add.w	r9, r9, #1
  410c82:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  410c86:	4599      	cmp	r9, r3
  410c88:	dc52      	bgt.n	410d30 <draw_full_border+0x3f4>
            _lv_memset_ff(mask_buf, draw_area_w);
  410c8a:	9908      	ldr	r1, [sp, #32]
  410c8c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410c90:	4658      	mov	r0, fp
  410c92:	4b6f      	ldr	r3, [pc, #444]	; (410e50 <draw_full_border+0x514>)
  410c94:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410c96:	8a31      	ldrh	r1, [r6, #16]
  410c98:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410c9c:	4419      	add	r1, r3
  410c9e:	8a72      	ldrh	r2, [r6, #18]
  410ca0:	444a      	add	r2, r9
  410ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  410ca4:	b212      	sxth	r2, r2
  410ca6:	b209      	sxth	r1, r1
  410ca8:	4658      	mov	r0, fp
  410caa:	4d6a      	ldr	r5, [pc, #424]	; (410e54 <draw_full_border+0x518>)
  410cac:	47a8      	blx	r5
  410cae:	4607      	mov	r7, r0
            fill_area2.x1 = area_outer->x1;
  410cb0:	f9b4 3000 	ldrsh.w	r3, [r4]
  410cb4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            fill_area2.x2 = area_outer->x1 + rout - 1;
  410cb8:	8823      	ldrh	r3, [r4, #0]
  410cba:	f8bd 5018 	ldrh.w	r5, [sp, #24]
  410cbe:	442b      	add	r3, r5
  410cc0:	b29b      	uxth	r3, r3
  410cc2:	3b01      	subs	r3, #1
  410cc4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            fill_area2.y1 = fill_area.y1;
  410cc8:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410ccc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area2.y2 = fill_area.y2;
  410cd0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410cd4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
  410cd8:	f8cd 8008 	str.w	r8, [sp, #8]
  410cdc:	f8cd a004 	str.w	sl, [sp, #4]
  410ce0:	9000      	str	r0, [sp, #0]
  410ce2:	465b      	mov	r3, fp
  410ce4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410ce8:	a910      	add	r1, sp, #64	; 0x40
  410cea:	9805      	ldr	r0, [sp, #20]
  410cec:	f8df b15c 	ldr.w	fp, [pc, #348]	; 410e4c <draw_full_border+0x510>
  410cf0:	47d8      	blx	fp
            if(fill_area2.y2 > area_outer->y2 - border_width) {
  410cf2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
  410cf6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
  410cfa:	990a      	ldr	r1, [sp, #40]	; 0x28
  410cfc:	1a5b      	subs	r3, r3, r1
  410cfe:	429a      	cmp	r2, r3
  410d00:	dd92      	ble.n	410c28 <draw_full_border+0x2ec>
                fill_area2.x1 = area_outer->x1 + rout;
  410d02:	8823      	ldrh	r3, [r4, #0]
  410d04:	442b      	add	r3, r5
  410d06:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
                fill_area2.x2 = area_outer->x2 - rout;
  410d0a:	88a3      	ldrh	r3, [r4, #4]
  410d0c:	1b5b      	subs	r3, r3, r5
  410d0e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410d12:	f8cd 8008 	str.w	r8, [sp, #8]
  410d16:	f8cd a004 	str.w	sl, [sp, #4]
  410d1a:	2301      	movs	r3, #1
  410d1c:	9300      	str	r3, [sp, #0]
  410d1e:	2300      	movs	r3, #0
  410d20:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410d24:	a910      	add	r1, sp, #64	; 0x40
  410d26:	9805      	ldr	r0, [sp, #20]
  410d28:	47d8      	blx	fp
  410d2a:	e77d      	b.n	410c28 <draw_full_border+0x2ec>
            if(mask_ofs < 0) mask_ofs = 0;
  410d2c:	2300      	movs	r3, #0
  410d2e:	e78f      	b.n	410c50 <draw_full_border+0x314>
        fill_area.y1 = area_outer->y1 + corner_size + 1;
  410d30:	8863      	ldrh	r3, [r4, #2]
  410d32:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  410d36:	444b      	add	r3, r9
  410d38:	b29b      	uxth	r3, r3
  410d3a:	3301      	adds	r3, #1
  410d3c:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = area_outer->y2 - corner_size - 1;
  410d40:	88e3      	ldrh	r3, [r4, #6]
  410d42:	eba3 0309 	sub.w	r3, r3, r9
  410d46:	b29b      	uxth	r3, r3
  410d48:	3b01      	subs	r3, #1
  410d4a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        fill_area.x1 = area_outer->x1;
  410d4e:	f9b4 3000 	ldrsh.w	r3, [r4]
  410d52:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x1 + border_width - 1;
  410d56:	8823      	ldrh	r3, [r4, #0]
  410d58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  410d5a:	4413      	add	r3, r2
  410d5c:	b29b      	uxth	r3, r3
  410d5e:	3b01      	subs	r3, #1
  410d60:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410d64:	f8cd 8008 	str.w	r8, [sp, #8]
  410d68:	f8cd a004 	str.w	sl, [sp, #4]
  410d6c:	2601      	movs	r6, #1
  410d6e:	9600      	str	r6, [sp, #0]
  410d70:	2300      	movs	r3, #0
  410d72:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410d76:	a912      	add	r1, sp, #72	; 0x48
  410d78:	f8dd 9014 	ldr.w	r9, [sp, #20]
  410d7c:	4648      	mov	r0, r9
  410d7e:	4d33      	ldr	r5, [pc, #204]	; (410e4c <draw_full_border+0x510>)
  410d80:	47a8      	blx	r5
        fill_area.x1 = area_outer->x2 - border_width + 1;
  410d82:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
  410d86:	b293      	uxth	r3, r2
  410d88:	990c      	ldr	r1, [sp, #48]	; 0x30
  410d8a:	1a5b      	subs	r3, r3, r1
  410d8c:	b29b      	uxth	r3, r3
  410d8e:	4433      	add	r3, r6
  410d90:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410d94:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
  410d98:	f8cd 8008 	str.w	r8, [sp, #8]
  410d9c:	f8cd a004 	str.w	sl, [sp, #4]
  410da0:	9600      	str	r6, [sp, #0]
  410da2:	2300      	movs	r3, #0
  410da4:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410da8:	a912      	add	r1, sp, #72	; 0x48
  410daa:	4648      	mov	r0, r9
  410dac:	47a8      	blx	r5
    lv_draw_mask_remove_id(mask_rin_id);
  410dae:	980d      	ldr	r0, [sp, #52]	; 0x34
  410db0:	4c29      	ldr	r4, [pc, #164]	; (410e58 <draw_full_border+0x51c>)
  410db2:	47a0      	blx	r4
    lv_draw_mask_remove_id(mask_rout_id);
  410db4:	980e      	ldr	r0, [sp, #56]	; 0x38
  410db6:	47a0      	blx	r4
    _lv_mem_buf_release(mask_buf);
  410db8:	9807      	ldr	r0, [sp, #28]
  410dba:	4b28      	ldr	r3, [pc, #160]	; (410e5c <draw_full_border+0x520>)
  410dbc:	4798      	blx	r3
  410dbe:	e609      	b.n	4109d4 <draw_full_border+0x98>
        fill_area.x1 = area_outer->x1;
  410dc0:	f9b4 3000 	ldrsh.w	r3, [r4]
  410dc4:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
        fill_area.x2 = area_outer->x2;
  410dc8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  410dcc:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  410dd0:	8a73      	ldrh	r3, [r6, #18]
  410dd2:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
  410dd6:	fa13 f384 	uxtah	r3, r3, r4
  410dda:	b21b      	sxth	r3, r3
  410ddc:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
        fill_area.y2 = fill_area.y1;
  410de0:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
  410de4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  410de8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
  410dec:	f8dd a014 	ldr.w	sl, [sp, #20]
  410df0:	463d      	mov	r5, r7
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410df2:	e025      	b.n	410e40 <draw_full_border+0x504>
            _lv_memset_ff(mask_buf, draw_area_w);
  410df4:	9908      	ldr	r1, [sp, #32]
  410df6:	4658      	mov	r0, fp
  410df8:	4b15      	ldr	r3, [pc, #84]	; (410e50 <draw_full_border+0x514>)
  410dfa:	4798      	blx	r3
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  410dfc:	8a31      	ldrh	r1, [r6, #16]
  410dfe:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  410e02:	4419      	add	r1, r3
  410e04:	8a72      	ldrh	r2, [r6, #18]
  410e06:	4422      	add	r2, r4
  410e08:	464b      	mov	r3, r9
  410e0a:	b212      	sxth	r2, r2
  410e0c:	b209      	sxth	r1, r1
  410e0e:	4658      	mov	r0, fp
  410e10:	4f10      	ldr	r7, [pc, #64]	; (410e54 <draw_full_border+0x518>)
  410e12:	47b8      	blx	r7
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
  410e14:	f8cd 8008 	str.w	r8, [sp, #8]
  410e18:	9501      	str	r5, [sp, #4]
  410e1a:	9000      	str	r0, [sp, #0]
  410e1c:	465b      	mov	r3, fp
  410e1e:	f8bd 20bc 	ldrh.w	r2, [sp, #188]	; 0xbc
  410e22:	a912      	add	r1, sp, #72	; 0x48
  410e24:	4650      	mov	r0, sl
  410e26:	4f09      	ldr	r7, [pc, #36]	; (410e4c <draw_full_border+0x510>)
  410e28:	47b8      	blx	r7
            fill_area.y1++;
  410e2a:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
  410e2e:	3301      	adds	r3, #1
  410e30:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
            fill_area.y2++;
  410e34:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
  410e38:	3301      	adds	r3, #1
  410e3a:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  410e3e:	3401      	adds	r4, #1
  410e40:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  410e44:	429c      	cmp	r4, r3
  410e46:	ddd5      	ble.n	410df4 <draw_full_border+0x4b8>
  410e48:	e7b1      	b.n	410dae <draw_full_border+0x472>
  410e4a:	bf00      	nop
  410e4c:	0040c301 	.word	0x0040c301
  410e50:	0041644d 	.word	0x0041644d
  410e54:	0040f55d 	.word	0x0040f55d
  410e58:	0040f5ad 	.word	0x0040f5ad
  410e5c:	00416019 	.word	0x00416019

00410e60 <draw_outline>:
    if(dsc->outline_opa <= LV_OPA_MIN) return;
  410e60:	7f93      	ldrb	r3, [r2, #30]
  410e62:	2b02      	cmp	r3, #2
  410e64:	d957      	bls.n	410f16 <draw_outline+0xb6>
    if(dsc->outline_width == 0) return;
  410e66:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
  410e6a:	2b00      	cmp	r3, #0
  410e6c:	d053      	beq.n	410f16 <draw_outline+0xb6>
{
  410e6e:	b530      	push	{r4, r5, lr}
  410e70:	b089      	sub	sp, #36	; 0x24
  410e72:	ac06      	add	r4, sp, #24
  410e74:	2308      	movs	r3, #8
  410e76:	e004      	b.n	410e82 <draw_outline+0x22>
        *d8 = *s8;
  410e78:	f810 5b01 	ldrb.w	r5, [r0], #1
  410e7c:	f804 5b01 	strb.w	r5, [r4], #1
        len--;
  410e80:	3b01      	subs	r3, #1
    while(len) {
  410e82:	2b00      	cmp	r3, #0
  410e84:	d1f8      	bne.n	410e78 <draw_outline+0x18>
    area_inner.x1 -= dsc->outline_pad;
  410e86:	8b93      	ldrh	r3, [r2, #28]
  410e88:	f8bd 0018 	ldrh.w	r0, [sp, #24]
  410e8c:	1ac0      	subs	r0, r0, r3
  410e8e:	f8ad 0018 	strh.w	r0, [sp, #24]
    area_inner.y1 -= dsc->outline_pad;
  410e92:	f8bd 001a 	ldrh.w	r0, [sp, #26]
  410e96:	1ac0      	subs	r0, r0, r3
  410e98:	f8ad 001a 	strh.w	r0, [sp, #26]
    area_inner.x2 += dsc->outline_pad;
  410e9c:	f8bd 001c 	ldrh.w	r0, [sp, #28]
  410ea0:	4418      	add	r0, r3
  410ea2:	f8ad 001c 	strh.w	r0, [sp, #28]
    area_inner.y2 += dsc->outline_pad;
  410ea6:	f8bd 001e 	ldrh.w	r0, [sp, #30]
  410eaa:	4403      	add	r3, r0
  410eac:	f8ad 301e 	strh.w	r3, [sp, #30]
    const uint8_t * s8 = (const uint8_t *)src;
  410eb0:	ac06      	add	r4, sp, #24
    uint8_t * d8 = (uint8_t *)dst;
  410eb2:	a804      	add	r0, sp, #16
  410eb4:	2308      	movs	r3, #8
  410eb6:	e004      	b.n	410ec2 <draw_outline+0x62>
        *d8 = *s8;
  410eb8:	f814 5b01 	ldrb.w	r5, [r4], #1
  410ebc:	f800 5b01 	strb.w	r5, [r0], #1
        len--;
  410ec0:	3b01      	subs	r3, #1
    while(len) {
  410ec2:	2b00      	cmp	r3, #0
  410ec4:	d1f8      	bne.n	410eb8 <draw_outline+0x58>
  410ec6:	4610      	mov	r0, r2
  410ec8:	460a      	mov	r2, r1
    area_outer.x1 -= dsc->outline_width;
  410eca:	8b43      	ldrh	r3, [r0, #26]
  410ecc:	f8bd 4010 	ldrh.w	r4, [sp, #16]
  410ed0:	1ae4      	subs	r4, r4, r3
  410ed2:	f8ad 4010 	strh.w	r4, [sp, #16]
    area_outer.x2 += dsc->outline_width;
  410ed6:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  410eda:	441c      	add	r4, r3
  410edc:	f8ad 4014 	strh.w	r4, [sp, #20]
    area_outer.y1 -= dsc->outline_width;
  410ee0:	f8bd 4012 	ldrh.w	r4, [sp, #18]
  410ee4:	1ae4      	subs	r4, r4, r3
  410ee6:	f8ad 4012 	strh.w	r4, [sp, #18]
    area_outer.y2 += dsc->outline_width;
  410eea:	f8bd 1016 	ldrh.w	r1, [sp, #22]
  410eee:	440b      	add	r3, r1
  410ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
    draw_full_border(&area_inner, &area_outer, clip, dsc->radius, true, dsc->outline_color, dsc->outline_opa,
  410ef4:	f9b0 3000 	ldrsh.w	r3, [r0]
  410ef8:	7fc1      	ldrb	r1, [r0, #31]
  410efa:	9103      	str	r1, [sp, #12]
  410efc:	7f81      	ldrb	r1, [r0, #30]
  410efe:	9102      	str	r1, [sp, #8]
  410f00:	8b01      	ldrh	r1, [r0, #24]
  410f02:	f8ad 1004 	strh.w	r1, [sp, #4]
  410f06:	2101      	movs	r1, #1
  410f08:	9100      	str	r1, [sp, #0]
  410f0a:	a904      	add	r1, sp, #16
  410f0c:	a806      	add	r0, sp, #24
  410f0e:	4c02      	ldr	r4, [pc, #8]	; (410f18 <draw_outline+0xb8>)
  410f10:	47a0      	blx	r4
}
  410f12:	b009      	add	sp, #36	; 0x24
  410f14:	bd30      	pop	{r4, r5, pc}
  410f16:	4770      	bx	lr
  410f18:	0041093d 	.word	0x0041093d

00410f1c <draw_border>:
    if(dsc->border_opa <= LV_OPA_MIN) return;
  410f1c:	7d13      	ldrb	r3, [r2, #20]
  410f1e:	2b02      	cmp	r3, #2
  410f20:	f240 8197 	bls.w	411252 <draw_border+0x336>
    if(dsc->border_width == 0) return;
  410f24:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  410f28:	2b00      	cmp	r3, #0
  410f2a:	f000 8192 	beq.w	411252 <draw_border+0x336>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
  410f2e:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
  410f32:	2b00      	cmp	r3, #0
  410f34:	f000 818d 	beq.w	411252 <draw_border+0x336>
    if(dsc->border_post) return;
  410f38:	7d93      	ldrb	r3, [r2, #22]
  410f3a:	f013 0f01 	tst.w	r3, #1
  410f3e:	f040 8188 	bne.w	411252 <draw_border+0x336>
{
  410f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  410f46:	b0a3      	sub	sp, #140	; 0x8c
  410f48:	8885      	ldrh	r5, [r0, #4]
  410f4a:	8803      	ldrh	r3, [r0, #0]
  410f4c:	1aed      	subs	r5, r5, r3
  410f4e:	b2ad      	uxth	r5, r5
  410f50:	3501      	adds	r5, #1
  410f52:	b22d      	sxth	r5, r5
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  410f54:	88c3      	ldrh	r3, [r0, #6]
  410f56:	8844      	ldrh	r4, [r0, #2]
  410f58:	1b1b      	subs	r3, r3, r4
  410f5a:	b29b      	uxth	r3, r3
  410f5c:	3301      	adds	r3, #1
  410f5e:	b21b      	sxth	r3, r3
    int32_t rout = dsc->radius;
  410f60:	f9b2 4000 	ldrsh.w	r4, [r2]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  410f64:	429d      	cmp	r5, r3
  410f66:	bfa8      	it	ge
  410f68:	461d      	movge	r5, r3
    if(rout > short_side >> 1) rout = short_side >> 1;
  410f6a:	106d      	asrs	r5, r5, #1
  410f6c:	42ac      	cmp	r4, r5
  410f6e:	dc00      	bgt.n	410f72 <draw_border+0x56>
    int32_t rout = dsc->radius;
  410f70:	4625      	mov	r5, r4
    const uint8_t * s8 = (const uint8_t *)src;
  410f72:	4606      	mov	r6, r0
    uint8_t * d8 = (uint8_t *)dst;
  410f74:	ac20      	add	r4, sp, #128	; 0x80
  410f76:	2308      	movs	r3, #8
  410f78:	e004      	b.n	410f84 <draw_border+0x68>
        *d8 = *s8;
  410f7a:	f816 7b01 	ldrb.w	r7, [r6], #1
  410f7e:	f804 7b01 	strb.w	r7, [r4], #1
        len--;
  410f82:	3b01      	subs	r3, #1
    while(len) {
  410f84:	2b00      	cmp	r3, #0
  410f86:	d1f8      	bne.n	410f7a <draw_border+0x5e>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  410f88:	f8bd 7080 	ldrh.w	r7, [sp, #128]	; 0x80
  410f8c:	f9b2 6012 	ldrsh.w	r6, [r2, #18]
  410f90:	b2b4      	uxth	r4, r6
  410f92:	f014 0f04 	tst.w	r4, #4
  410f96:	d039      	beq.n	41100c <draw_border+0xf0>
  410f98:	8a13      	ldrh	r3, [r2, #16]
  410f9a:	443b      	add	r3, r7
  410f9c:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  410fa0:	f8bd 7084 	ldrh.w	r7, [sp, #132]	; 0x84
  410fa4:	f014 0f08 	tst.w	r4, #8
  410fa8:	d036      	beq.n	411018 <draw_border+0xfc>
  410faa:	8a13      	ldrh	r3, [r2, #16]
  410fac:	1afb      	subs	r3, r7, r3
  410fae:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  410fb2:	f8bd 7082 	ldrh.w	r7, [sp, #130]	; 0x82
  410fb6:	f014 0f02 	tst.w	r4, #2
  410fba:	d033      	beq.n	411024 <draw_border+0x108>
  410fbc:	8a13      	ldrh	r3, [r2, #16]
  410fbe:	443b      	add	r3, r7
  410fc0:	f8ad 3082 	strh.w	r3, [sp, #130]	; 0x82
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  410fc4:	f8bd 7086 	ldrh.w	r7, [sp, #134]	; 0x86
  410fc8:	f014 0f01 	tst.w	r4, #1
  410fcc:	d030      	beq.n	411030 <draw_border+0x114>
  410fce:	8a13      	ldrh	r3, [r2, #16]
  410fd0:	4692      	mov	sl, r2
  410fd2:	9105      	str	r1, [sp, #20]
  410fd4:	4604      	mov	r4, r0
  410fd6:	1afb      	subs	r3, r7, r3
  410fd8:	f8ad 3086 	strh.w	r3, [sp, #134]	; 0x86
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
  410fdc:	2e0f      	cmp	r6, #15
  410fde:	d02d      	beq.n	41103c <draw_border+0x120>
        lv_opa_t opa = dsc->border_opa;
  410fe0:	f892 9014 	ldrb.w	r9, [r2, #20]
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  410fe4:	f1b9 0ffd 	cmp.w	r9, #253	; 0xfd
  410fe8:	d901      	bls.n	410fee <draw_border+0xd2>
  410fea:	f04f 09ff 	mov.w	r9, #255	; 0xff
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  410fee:	4b99      	ldr	r3, [pc, #612]	; (411254 <draw_border+0x338>)
  410ff0:	4798      	blx	r3
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  410ff2:	4b99      	ldr	r3, [pc, #612]	; (411258 <draw_border+0x33c>)
  410ff4:	4798      	blx	r3
  410ff6:	4680      	mov	r8, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
  410ff8:	9a05      	ldr	r2, [sp, #20]
  410ffa:	4621      	mov	r1, r4
  410ffc:	a80e      	add	r0, sp, #56	; 0x38
  410ffe:	4b97      	ldr	r3, [pc, #604]	; (41125c <draw_border+0x340>)
  411000:	4798      	blx	r3
        if(is_common == false) return;
  411002:	2800      	cmp	r0, #0
  411004:	d12d      	bne.n	411062 <draw_border+0x146>
}
  411006:	b023      	add	sp, #140	; 0x8c
  411008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
  41100c:	8a13      	ldrh	r3, [r2, #16]
  41100e:	442b      	add	r3, r5
  411010:	b29b      	uxth	r3, r3
  411012:	425b      	negs	r3, r3
  411014:	b29b      	uxth	r3, r3
  411016:	e7c0      	b.n	410f9a <draw_border+0x7e>
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
  411018:	8a13      	ldrh	r3, [r2, #16]
  41101a:	442b      	add	r3, r5
  41101c:	b29b      	uxth	r3, r3
  41101e:	425b      	negs	r3, r3
  411020:	b29b      	uxth	r3, r3
  411022:	e7c3      	b.n	410fac <draw_border+0x90>
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
  411024:	8a13      	ldrh	r3, [r2, #16]
  411026:	442b      	add	r3, r5
  411028:	b29b      	uxth	r3, r3
  41102a:	425b      	negs	r3, r3
  41102c:	b29b      	uxth	r3, r3
  41102e:	e7c6      	b.n	410fbe <draw_border+0xa2>
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
  411030:	8a13      	ldrh	r3, [r2, #16]
  411032:	442b      	add	r3, r5
  411034:	b29b      	uxth	r3, r3
  411036:	425b      	negs	r3, r3
  411038:	b29b      	uxth	r3, r3
  41103a:	e7c9      	b.n	410fd0 <draw_border+0xb4>
        draw_full_border(&area_inner, coords, clip, dsc->radius, false, dsc->border_color, dsc->border_opa,
  41103c:	f9b2 3000 	ldrsh.w	r3, [r2]
  411040:	7d52      	ldrb	r2, [r2, #21]
  411042:	9203      	str	r2, [sp, #12]
  411044:	f89a 2014 	ldrb.w	r2, [sl, #20]
  411048:	9202      	str	r2, [sp, #8]
  41104a:	f8ba 200e 	ldrh.w	r2, [sl, #14]
  41104e:	f8ad 2004 	strh.w	r2, [sp, #4]
  411052:	2200      	movs	r2, #0
  411054:	9200      	str	r2, [sp, #0]
  411056:	460a      	mov	r2, r1
  411058:	4601      	mov	r1, r0
  41105a:	a820      	add	r0, sp, #128	; 0x80
  41105c:	4c80      	ldr	r4, [pc, #512]	; (411260 <draw_border+0x344>)
  41105e:	47a0      	blx	r4
  411060:	e7d1      	b.n	411006 <draw_border+0xea>
        draw_area.x1 -= disp_area->x1;
  411062:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  411066:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  41106a:	1a5b      	subs	r3, r3, r1
  41106c:	b29a      	uxth	r2, r3
  41106e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        draw_area.y1 -= disp_area->y1;
  411072:	f8b8 0012 	ldrh.w	r0, [r8, #18]
  411076:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  41107a:	1a1b      	subs	r3, r3, r0
  41107c:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
        draw_area.x2 -= disp_area->x1;
  411080:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  411084:	1a5b      	subs	r3, r3, r1
  411086:	b29b      	uxth	r3, r3
  411088:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        draw_area.y2 -= disp_area->y1;
  41108c:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  411090:	1a09      	subs	r1, r1, r0
  411092:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411096:	1a9b      	subs	r3, r3, r2
  411098:	b29b      	uxth	r3, r3
  41109a:	3301      	adds	r3, #1
  41109c:	b21b      	sxth	r3, r3
  41109e:	9308      	str	r3, [sp, #32]
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  4110a0:	9306      	str	r3, [sp, #24]
  4110a2:	4618      	mov	r0, r3
  4110a4:	4b6f      	ldr	r3, [pc, #444]	; (411264 <draw_border+0x348>)
  4110a6:	4798      	blx	r3
  4110a8:	4607      	mov	r7, r0
        if(rout > 0) {
  4110aa:	2d00      	cmp	r5, #0
  4110ac:	dd53      	ble.n	411156 <draw_border+0x23a>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
  4110ae:	2300      	movs	r3, #0
  4110b0:	462a      	mov	r2, r5
  4110b2:	4621      	mov	r1, r4
  4110b4:	a812      	add	r0, sp, #72	; 0x48
  4110b6:	4e6c      	ldr	r6, [pc, #432]	; (411268 <draw_border+0x34c>)
  4110b8:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4110ba:	2100      	movs	r1, #0
  4110bc:	a812      	add	r0, sp, #72	; 0x48
  4110be:	4b6b      	ldr	r3, [pc, #428]	; (41126c <draw_border+0x350>)
  4110c0:	4798      	blx	r3
  4110c2:	900a      	str	r0, [sp, #40]	; 0x28
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
  4110c4:	f8ba 2010 	ldrh.w	r2, [sl, #16]
  4110c8:	1aaa      	subs	r2, r5, r2
  4110ca:	2301      	movs	r3, #1
  4110cc:	b212      	sxth	r2, r2
  4110ce:	a920      	add	r1, sp, #128	; 0x80
  4110d0:	a819      	add	r0, sp, #100	; 0x64
  4110d2:	4e65      	ldr	r6, [pc, #404]	; (411268 <draw_border+0x34c>)
  4110d4:	47b0      	blx	r6
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
  4110d6:	2100      	movs	r1, #0
  4110d8:	a819      	add	r0, sp, #100	; 0x64
  4110da:	4b64      	ldr	r3, [pc, #400]	; (41126c <draw_border+0x350>)
  4110dc:	4798      	blx	r3
  4110de:	900b      	str	r0, [sp, #44]	; 0x2c
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
  4110e0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
  4110e4:	3b01      	subs	r3, #1
  4110e6:	429d      	cmp	r5, r3
  4110e8:	bfb8      	it	lt
  4110ea:	461d      	movlt	r5, r3
        lv_color_t color = dsc->border_color;
  4110ec:	f8ba 300e 	ldrh.w	r3, [sl, #14]
  4110f0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
  4110f4:	f89a 3015 	ldrb.w	r3, [sl, #21]
  4110f8:	9307      	str	r3, [sp, #28]
        fill_area.x1 = coords->x1;
  4110fa:	f9b4 3000 	ldrsh.w	r3, [r4]
  4110fe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        fill_area.x2 = coords->x2;
  411102:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  411106:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  41110a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41110e:	f9bd 603a 	ldrsh.w	r6, [sp, #58]	; 0x3a
  411112:	fa13 f386 	uxtah	r3, r3, r6
  411116:	b21b      	sxth	r3, r3
  411118:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        fill_area.y2 = fill_area.y1;
  41111c:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  411120:	f9ba 3012 	ldrsh.w	r3, [sl, #18]
  411124:	2b04      	cmp	r3, #4
  411126:	d01a      	beq.n	41115e <draw_border+0x242>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
  411128:	2b08      	cmp	r3, #8
  41112a:	d01f      	beq.n	41116c <draw_border+0x250>
        uint32_t buf_ofs = 0;
  41112c:	f04f 0b00 	mov.w	fp, #0
        volatile bool top_only = false;
  411130:	2200      	movs	r2, #0
  411132:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
        volatile bool bottom_only = false;
  411136:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  41113a:	2b02      	cmp	r3, #2
  41113c:	d023      	beq.n	411186 <draw_border+0x26a>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  41113e:	2b01      	cmp	r3, #1
  411140:	d025      	beq.n	41118e <draw_border+0x272>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
  411142:	2b03      	cmp	r3, #3
  411144:	d027      	beq.n	411196 <draw_border+0x27a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  411146:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
  41114a:	bb53      	cbnz	r3, 4111a2 <draw_border+0x286>
  41114c:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
  411150:	b363      	cbz	r3, 4111ac <draw_border+0x290>
  411152:	2300      	movs	r3, #0
  411154:	e026      	b.n	4111a4 <draw_border+0x288>
        int16_t mask_rout_id = LV_MASK_ID_INV;
  411156:	f04f 33ff 	mov.w	r3, #4294967295
  41115a:	930a      	str	r3, [sp, #40]	; 0x28
  41115c:	e7b2      	b.n	4110c4 <draw_border+0x1a8>
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
  41115e:	8822      	ldrh	r2, [r4, #0]
  411160:	442a      	add	r2, r5
  411162:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
        uint32_t buf_ofs = 0;
  411166:	f04f 0b00 	mov.w	fp, #0
  41116a:	e7e1      	b.n	411130 <draw_border+0x214>
            fill_area.x1 = coords->x2 - corner_size;
  41116c:	f8b4 b004 	ldrh.w	fp, [r4, #4]
  411170:	ebab 0b05 	sub.w	fp, fp, r5
  411174:	fa0f fb8b 	sxth.w	fp, fp
  411178:	f8ad b040 	strh.w	fp, [sp, #64]	; 0x40
            buf_ofs = fill_area.x1 - coords->x1;
  41117c:	f9b4 2000 	ldrsh.w	r2, [r4]
  411180:	ebab 0b02 	sub.w	fp, fp, r2
  411184:	e7d4      	b.n	411130 <draw_border+0x214>
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
  411186:	2201      	movs	r2, #1
  411188:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  41118c:	e7d7      	b.n	41113e <draw_border+0x222>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
  41118e:	2201      	movs	r2, #1
  411190:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  411194:	e7d5      	b.n	411142 <draw_border+0x226>
            top_only = true;
  411196:	2301      	movs	r3, #1
  411198:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
            bottom_only = true;
  41119c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  4111a0:	e7d1      	b.n	411146 <draw_border+0x22a>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  4111a2:	2300      	movs	r3, #0
  4111a4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  4111a8:	46a2      	mov	sl, r4
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  4111aa:	e02b      	b.n	411204 <draw_border+0x2e8>
        volatile bool normal = !top_only && !bottom_only ? true : false;
  4111ac:	2301      	movs	r3, #1
  4111ae:	e7f9      	b.n	4111a4 <draw_border+0x288>
                _lv_memset_ff(mask_buf, draw_area_w);
  4111b0:	9906      	ldr	r1, [sp, #24]
  4111b2:	4638      	mov	r0, r7
  4111b4:	4b2e      	ldr	r3, [pc, #184]	; (411270 <draw_border+0x354>)
  4111b6:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4111b8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
  4111bc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
  4111c0:	4419      	add	r1, r3
  4111c2:	f8b8 2012 	ldrh.w	r2, [r8, #18]
  4111c6:	4432      	add	r2, r6
  4111c8:	9b08      	ldr	r3, [sp, #32]
  4111ca:	b212      	sxth	r2, r2
  4111cc:	b209      	sxth	r1, r1
  4111ce:	4638      	mov	r0, r7
  4111d0:	4c28      	ldr	r4, [pc, #160]	; (411274 <draw_border+0x358>)
  4111d2:	47a0      	blx	r4
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
  4111d4:	9b07      	ldr	r3, [sp, #28]
  4111d6:	9302      	str	r3, [sp, #8]
  4111d8:	f8cd 9004 	str.w	r9, [sp, #4]
  4111dc:	9000      	str	r0, [sp, #0]
  4111de:	eb07 030b 	add.w	r3, r7, fp
  4111e2:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  4111e6:	a910      	add	r1, sp, #64	; 0x40
  4111e8:	9805      	ldr	r0, [sp, #20]
  4111ea:	4c23      	ldr	r4, [pc, #140]	; (411278 <draw_border+0x35c>)
  4111ec:	47a0      	blx	r4
            fill_area.y1++;
  4111ee:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
  4111f2:	3301      	adds	r3, #1
  4111f4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2++;
  4111f8:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
  4111fc:	3301      	adds	r3, #1
  4111fe:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411202:	3601      	adds	r6, #1
  411204:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
  411208:	429e      	cmp	r6, r3
  41120a:	dc19      	bgt.n	411240 <draw_border+0x324>
            if(normal ||
  41120c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
  411210:	2b00      	cmp	r3, #0
  411212:	d1cd      	bne.n	4111b0 <draw_border+0x294>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  411214:	f89d 3035 	ldrb.w	r3, [sp, #53]	; 0x35
            if(normal ||
  411218:	b133      	cbz	r3, 411228 <draw_border+0x30c>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41121a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  41121e:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
  411222:	442b      	add	r3, r5
  411224:	429a      	cmp	r2, r3
  411226:	ddc3      	ble.n	4111b0 <draw_border+0x294>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  411228:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
  41122c:	2b00      	cmp	r3, #0
  41122e:	d0de      	beq.n	4111ee <draw_border+0x2d2>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
  411230:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
  411234:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
  411238:	1b5b      	subs	r3, r3, r5
  41123a:	429a      	cmp	r2, r3
  41123c:	dbd7      	blt.n	4111ee <draw_border+0x2d2>
  41123e:	e7b7      	b.n	4111b0 <draw_border+0x294>
        lv_draw_mask_remove_id(mask_rin_id);
  411240:	980b      	ldr	r0, [sp, #44]	; 0x2c
  411242:	4c0e      	ldr	r4, [pc, #56]	; (41127c <draw_border+0x360>)
  411244:	47a0      	blx	r4
        lv_draw_mask_remove_id(mask_rout_id);
  411246:	980a      	ldr	r0, [sp, #40]	; 0x28
  411248:	47a0      	blx	r4
        _lv_mem_buf_release(mask_buf);
  41124a:	4638      	mov	r0, r7
  41124c:	4b0c      	ldr	r3, [pc, #48]	; (411280 <draw_border+0x364>)
  41124e:	4798      	blx	r3
  411250:	e6d9      	b.n	411006 <draw_border+0xea>
  411252:	4770      	bx	lr
  411254:	00409269 	.word	0x00409269
  411258:	00414735 	.word	0x00414735
  41125c:	00414ef3 	.word	0x00414ef3
  411260:	0041093d 	.word	0x0041093d
  411264:	00416269 	.word	0x00416269
  411268:	0040f7a5 	.word	0x0040f7a5
  41126c:	0040f529 	.word	0x0040f529
  411270:	0041644d 	.word	0x0041644d
  411274:	0040f55d 	.word	0x0040f55d
  411278:	0040c301 	.word	0x0040c301
  41127c:	0040f5ad 	.word	0x0040f5ad
  411280:	00416019 	.word	0x00416019

00411284 <draw_pattern>:
    if(dsc->pattern_image == NULL) return;
  411284:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  411286:	2b00      	cmp	r3, #0
  411288:	f000 814e 	beq.w	411528 <draw_pattern+0x2a4>
{
  41128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411290:	b09f      	sub	sp, #124	; 0x7c
    if(dsc->pattern_opa <= LV_OPA_MIN) return;
  411292:	f892 4036 	ldrb.w	r4, [r2, #54]	; 0x36
  411296:	2c02      	cmp	r4, #2
  411298:	d802      	bhi.n	4112a0 <draw_pattern+0x1c>
}
  41129a:	b01f      	add	sp, #124	; 0x7c
  41129c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4112a0:	4614      	mov	r4, r2
  4112a2:	460e      	mov	r6, r1
  4112a4:	4605      	mov	r5, r0
    lv_img_src_t src_type = lv_img_src_get_type(dsc->pattern_image);
  4112a6:	4618      	mov	r0, r3
  4112a8:	4ba0      	ldr	r3, [pc, #640]	; (41152c <draw_pattern+0x2a8>)
  4112aa:	4798      	blx	r3
  4112ac:	4680      	mov	r8, r0
    if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_VARIABLE) {
  4112ae:	2801      	cmp	r0, #1
  4112b0:	d908      	bls.n	4112c4 <draw_pattern+0x40>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  4112b2:	2802      	cmp	r0, #2
  4112b4:	d022      	beq.n	4112fc <draw_pattern+0x78>
        lv_draw_img(coords, clip, NULL, NULL);
  4112b6:	2300      	movs	r3, #0
  4112b8:	461a      	mov	r2, r3
  4112ba:	4631      	mov	r1, r6
  4112bc:	4628      	mov	r0, r5
  4112be:	4c9c      	ldr	r4, [pc, #624]	; (411530 <draw_pattern+0x2ac>)
  4112c0:	47a0      	blx	r4
        return;
  4112c2:	e7ea      	b.n	41129a <draw_pattern+0x16>
        lv_res_t res = lv_img_decoder_get_info(dsc->pattern_image, &header);
  4112c4:	a907      	add	r1, sp, #28
  4112c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4112c8:	4b9a      	ldr	r3, [pc, #616]	; (411534 <draw_pattern+0x2b0>)
  4112ca:	4798      	blx	r3
        if(res != LV_RES_OK) {
  4112cc:	2801      	cmp	r0, #1
  4112ce:	d1e4      	bne.n	41129a <draw_pattern+0x16>
        img_w = header.w;
  4112d0:	9b07      	ldr	r3, [sp, #28]
  4112d2:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
        img_h = header.h;
  4112d6:	f8bd a01e 	ldrh.w	sl, [sp, #30]
  4112da:	f3ca 1a4a 	ubfx	sl, sl, #5, #11
        lv_draw_img_dsc_init(&img_dsc);
  4112de:	a81a      	add	r0, sp, #104	; 0x68
  4112e0:	4b95      	ldr	r3, [pc, #596]	; (411538 <draw_pattern+0x2b4>)
  4112e2:	4798      	blx	r3
        img_dsc.opa = dsc->pattern_opa;
  4112e4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  4112e8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
        img_dsc.recolor_opa = dsc->pattern_recolor_opa;
  4112ec:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
  4112f0:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
        img_dsc.recolor = dsc->pattern_recolor;
  4112f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  4112f6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
  4112fa:	e01d      	b.n	411338 <draw_pattern+0xb4>
        lv_draw_label_dsc_init(&label_dsc);
  4112fc:	a811      	add	r0, sp, #68	; 0x44
  4112fe:	4b8f      	ldr	r3, [pc, #572]	; (41153c <draw_pattern+0x2b8>)
  411300:	4798      	blx	r3
        label_dsc.color = dsc->pattern_recolor;
  411302:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
  411304:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        label_dsc.font = dsc->pattern_font;
  411308:	6b22      	ldr	r2, [r4, #48]	; 0x30
  41130a:	9213      	str	r2, [sp, #76]	; 0x4c
        label_dsc.opa = dsc->pattern_opa;
  41130c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
  411310:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
        _lv_txt_get_size(&s, dsc->pattern_image, label_dsc.font, label_dsc.letter_space, label_dsc.line_space, LV_COORD_MAX,
  411314:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
  411318:	2100      	movs	r1, #0
  41131a:	9102      	str	r1, [sp, #8]
  41131c:	f647 4118 	movw	r1, #31768	; 0x7c18
  411320:	9101      	str	r1, [sp, #4]
  411322:	f9bd 1052 	ldrsh.w	r1, [sp, #82]	; 0x52
  411326:	9100      	str	r1, [sp, #0]
  411328:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  41132a:	a807      	add	r0, sp, #28
  41132c:	4f84      	ldr	r7, [pc, #528]	; (411540 <draw_pattern+0x2bc>)
  41132e:	47b8      	blx	r7
        img_w = s.x;
  411330:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
        img_h = s.y;
  411334:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
    if(img_w == 0 || img_h == 0) return;
  411338:	f1ba 0f00 	cmp.w	sl, #0
  41133c:	bf18      	it	ne
  41133e:	f1bb 0f00 	cmpne.w	fp, #0
  411342:	d0aa      	beq.n	41129a <draw_pattern+0x16>
    if(dsc->pattern_repeat) {
  411344:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  411348:	f013 0f01 	tst.w	r3, #1
  41134c:	d148      	bne.n	4113e0 <draw_pattern+0x15c>
  41134e:	88a8      	ldrh	r0, [r5, #4]
  411350:	882b      	ldrh	r3, [r5, #0]
  411352:	1ac0      	subs	r0, r0, r3
  411354:	b280      	uxth	r0, r0
  411356:	3001      	adds	r0, #1
  411358:	b200      	sxth	r0, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41135a:	88ea      	ldrh	r2, [r5, #6]
  41135c:	8869      	ldrh	r1, [r5, #2]
  41135e:	1a52      	subs	r2, r2, r1
  411360:	b292      	uxth	r2, r2
  411362:	3201      	adds	r2, #1
  411364:	b212      	sxth	r2, r2
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  411366:	ebb0 000b 	subs.w	r0, r0, fp
  41136a:	f100 80ba 	bmi.w	4114e2 <draw_pattern+0x25e>
  41136e:	eb03 0360 	add.w	r3, r3, r0, asr #1
  411372:	b29b      	uxth	r3, r3
  411374:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  411378:	eba2 020a 	sub.w	r2, r2, sl
  41137c:	4610      	mov	r0, r2
  41137e:	2a00      	cmp	r2, #0
  411380:	f2c0 80b1 	blt.w	4114e6 <draw_pattern+0x262>
  411384:	eb01 0160 	add.w	r1, r1, r0, asr #1
  411388:	b289      	uxth	r1, r1
  41138a:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
        coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  41138e:	445b      	add	r3, fp
  411390:	b29b      	uxth	r3, r3
  411392:	3b01      	subs	r3, #1
  411394:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411398:	eb01 030a 	add.w	r3, r1, sl
  41139c:	b29b      	uxth	r3, r3
  41139e:	3b01      	subs	r3, #1
  4113a0:	b29b      	uxth	r3, r3
  4113a2:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
        if(src_type == LV_IMG_SRC_SYMBOL) {
  4113a6:	f1b8 0f02 	cmp.w	r8, #2
  4113aa:	f000 809e 	beq.w	4114ea <draw_pattern+0x266>
        if(_lv_area_is_in(&coords_tmp, coords, dsc->radius) == false) {
  4113ae:	f9b4 2000 	ldrsh.w	r2, [r4]
  4113b2:	4629      	mov	r1, r5
  4113b4:	a80f      	add	r0, sp, #60	; 0x3c
  4113b6:	4b63      	ldr	r3, [pc, #396]	; (411544 <draw_pattern+0x2c0>)
  4113b8:	4798      	blx	r3
  4113ba:	2800      	cmp	r0, #0
  4113bc:	f000 809e 	beq.w	4114fc <draw_pattern+0x278>
        int16_t radius_mask_id = LV_MASK_ID_INV;
  4113c0:	f04f 35ff 	mov.w	r5, #4294967295
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  4113c4:	f1b8 0f02 	cmp.w	r8, #2
  4113c8:	f000 80a5 	beq.w	411516 <draw_pattern+0x292>
        else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  4113cc:	ab1a      	add	r3, sp, #104	; 0x68
  4113ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4113d0:	4631      	mov	r1, r6
  4113d2:	a80f      	add	r0, sp, #60	; 0x3c
  4113d4:	4c56      	ldr	r4, [pc, #344]	; (411530 <draw_pattern+0x2ac>)
  4113d6:	47a0      	blx	r4
        lv_draw_mask_remove_id(radius_mask_id);
  4113d8:	4628      	mov	r0, r5
  4113da:	4b5b      	ldr	r3, [pc, #364]	; (411548 <draw_pattern+0x2c4>)
  4113dc:	4798      	blx	r3
  4113de:	e75c      	b.n	41129a <draw_pattern+0x16>
        lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4113e0:	2300      	movs	r3, #0
  4113e2:	f9b4 2000 	ldrsh.w	r2, [r4]
  4113e6:	4629      	mov	r1, r5
  4113e8:	a808      	add	r0, sp, #32
  4113ea:	4f58      	ldr	r7, [pc, #352]	; (41154c <draw_pattern+0x2c8>)
  4113ec:	47b8      	blx	r7
        int16_t radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  4113ee:	2100      	movs	r1, #0
  4113f0:	a808      	add	r0, sp, #32
  4113f2:	4b57      	ldr	r3, [pc, #348]	; (411550 <draw_pattern+0x2cc>)
  4113f4:	4798      	blx	r3
  4113f6:	9005      	str	r0, [sp, #20]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4113f8:	88ab      	ldrh	r3, [r5, #4]
  4113fa:	882a      	ldrh	r2, [r5, #0]
  4113fc:	1a9b      	subs	r3, r3, r2
  4113fe:	b29b      	uxth	r3, r3
  411400:	3301      	adds	r3, #1
  411402:	b21b      	sxth	r3, r3
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  411404:	fb93 f2fb 	sdiv	r2, r3, fp
  411408:	fb02 331b 	mls	r3, r2, fp, r3
  41140c:	2b00      	cmp	r3, #0
  41140e:	db1e      	blt.n	41144e <draw_pattern+0x1ca>
  411410:	105b      	asrs	r3, r3, #1
  411412:	4618      	mov	r0, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411414:	88ea      	ldrh	r2, [r5, #6]
  411416:	886b      	ldrh	r3, [r5, #2]
  411418:	1ad2      	subs	r2, r2, r3
  41141a:	b292      	uxth	r2, r2
  41141c:	3201      	adds	r2, #1
  41141e:	b212      	sxth	r2, r2
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411420:	fb92 f1fa 	sdiv	r1, r2, sl
  411424:	fb01 221a 	mls	r2, r1, sl, r2
  411428:	2a00      	cmp	r2, #0
  41142a:	db12      	blt.n	411452 <draw_pattern+0x1ce>
        coords_tmp.y1 = coords->y1 - ofs_y;
  41142c:	eba3 0362 	sub.w	r3, r3, r2, asr #1
  411430:	b29b      	uxth	r3, r3
  411432:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
        coords_tmp.y2 = coords_tmp.y1 + img_h - 1;
  411436:	fa1f fa8a 	uxth.w	sl, sl
  41143a:	4453      	add	r3, sl
  41143c:	b29b      	uxth	r3, r3
  41143e:	3b01      	subs	r3, #1
  411440:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  411444:	f8cd b010 	str.w	fp, [sp, #16]
  411448:	4683      	mov	fp, r0
  41144a:	46a1      	mov	r9, r4
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  41144c:	e031      	b.n	4114b2 <draw_pattern+0x22e>
        int32_t ofs_x = (lv_area_get_width(coords) - (lv_area_get_width(coords) / img_w) * img_w) / 2;
  41144e:	3301      	adds	r3, #1
  411450:	e7de      	b.n	411410 <draw_pattern+0x18c>
        int32_t ofs_y = (lv_area_get_height(coords) - (lv_area_get_height(coords) / img_h) * img_h) / 2;
  411452:	3201      	adds	r2, #1
  411454:	e7ea      	b.n	41142c <draw_pattern+0x1a8>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411456:	2300      	movs	r3, #0
  411458:	9300      	str	r3, [sp, #0]
  41145a:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
  41145e:	aa11      	add	r2, sp, #68	; 0x44
  411460:	4631      	mov	r1, r6
  411462:	a80f      	add	r0, sp, #60	; 0x3c
  411464:	4c3b      	ldr	r4, [pc, #236]	; (411554 <draw_pattern+0x2d0>)
  411466:	47a0      	blx	r4
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  411468:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  41146c:	443b      	add	r3, r7
  41146e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  411472:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  411476:	443b      	add	r3, r7
  411478:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
  41147c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
  411480:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  411484:	429a      	cmp	r2, r3
  411486:	dc0a      	bgt.n	41149e <draw_pattern+0x21a>
                if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411488:	f1b8 0f02 	cmp.w	r8, #2
  41148c:	d0e3      	beq.n	411456 <draw_pattern+0x1d2>
                else lv_draw_img(&coords_tmp, clip, dsc->pattern_image, &img_dsc);
  41148e:	ab1a      	add	r3, sp, #104	; 0x68
  411490:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
  411494:	4631      	mov	r1, r6
  411496:	a80f      	add	r0, sp, #60	; 0x3c
  411498:	4c25      	ldr	r4, [pc, #148]	; (411530 <draw_pattern+0x2ac>)
  41149a:	47a0      	blx	r4
  41149c:	e7e4      	b.n	411468 <draw_pattern+0x1e4>
        for(; coords_tmp.y1 <= coords->y2; coords_tmp.y1 += img_h, coords_tmp.y2 += img_h) {
  41149e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
  4114a2:	4453      	add	r3, sl
  4114a4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  4114a8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  4114ac:	4453      	add	r3, sl
  4114ae:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  4114b2:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  4114b6:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  4114ba:	429a      	cmp	r2, r3
  4114bc:	dc0d      	bgt.n	4114da <draw_pattern+0x256>
            coords_tmp.x1 = coords->x1 - ofs_x;
  4114be:	882b      	ldrh	r3, [r5, #0]
  4114c0:	eba3 030b 	sub.w	r3, r3, fp
  4114c4:	b29b      	uxth	r3, r3
  4114c6:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
            coords_tmp.x2 = coords_tmp.x1 + img_w - 1;
  4114ca:	f8bd 7010 	ldrh.w	r7, [sp, #16]
  4114ce:	443b      	add	r3, r7
  4114d0:	b29b      	uxth	r3, r3
  4114d2:	3b01      	subs	r3, #1
  4114d4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            for(; coords_tmp.x1 <= coords->x2; coords_tmp.x1 += img_w, coords_tmp.x2 += img_w) {
  4114d8:	e7d0      	b.n	41147c <draw_pattern+0x1f8>
        lv_draw_mask_remove_id(radius_mask_id);
  4114da:	9805      	ldr	r0, [sp, #20]
  4114dc:	4b1a      	ldr	r3, [pc, #104]	; (411548 <draw_pattern+0x2c4>)
  4114de:	4798      	blx	r3
  4114e0:	e6db      	b.n	41129a <draw_pattern+0x16>
        coords_tmp.x1 = coords->x1 + (obj_w - img_w) / 2;
  4114e2:	3001      	adds	r0, #1
  4114e4:	e743      	b.n	41136e <draw_pattern+0xea>
        coords_tmp.y1 = coords->y1 + (obj_h - img_h) / 2;
  4114e6:	1c50      	adds	r0, r2, #1
  4114e8:	e74c      	b.n	411384 <draw_pattern+0x100>
            coords_tmp.y1 += y_corr;
  4114ea:	f002 0201 	and.w	r2, r2, #1
  4114ee:	4411      	add	r1, r2
  4114f0:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
            coords_tmp.y2 += y_corr;
  4114f4:	4413      	add	r3, r2
  4114f6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  4114fa:	e758      	b.n	4113ae <draw_pattern+0x12a>
            lv_draw_mask_radius_init(&radius_mask_param, coords, dsc->radius, false);
  4114fc:	2300      	movs	r3, #0
  4114fe:	f9b4 2000 	ldrsh.w	r2, [r4]
  411502:	4629      	mov	r1, r5
  411504:	a808      	add	r0, sp, #32
  411506:	4d11      	ldr	r5, [pc, #68]	; (41154c <draw_pattern+0x2c8>)
  411508:	47a8      	blx	r5
            radius_mask_id = lv_draw_mask_add(&radius_mask_param, NULL);
  41150a:	2100      	movs	r1, #0
  41150c:	a808      	add	r0, sp, #32
  41150e:	4b10      	ldr	r3, [pc, #64]	; (411550 <draw_pattern+0x2cc>)
  411510:	4798      	blx	r3
  411512:	4605      	mov	r5, r0
  411514:	e756      	b.n	4113c4 <draw_pattern+0x140>
        if(src_type == LV_IMG_SRC_SYMBOL)  lv_draw_label(&coords_tmp, clip, &label_dsc, dsc->pattern_image, NULL);
  411516:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  411518:	2200      	movs	r2, #0
  41151a:	9200      	str	r2, [sp, #0]
  41151c:	aa11      	add	r2, sp, #68	; 0x44
  41151e:	4631      	mov	r1, r6
  411520:	a80f      	add	r0, sp, #60	; 0x3c
  411522:	4c0c      	ldr	r4, [pc, #48]	; (411554 <draw_pattern+0x2d0>)
  411524:	47a0      	blx	r4
  411526:	e757      	b.n	4113d8 <draw_pattern+0x154>
  411528:	4770      	bx	lr
  41152a:	bf00      	nop
  41152c:	0040d0bd 	.word	0x0040d0bd
  411530:	0040d07d 	.word	0x0040d07d
  411534:	00413249 	.word	0x00413249
  411538:	0040cdd1 	.word	0x0040cdd1
  41153c:	0040d965 	.word	0x0040d965
  411540:	00416e21 	.word	0x00416e21
  411544:	00415169 	.word	0x00415169
  411548:	0040f5ad 	.word	0x0040f5ad
  41154c:	0040f7a5 	.word	0x0040f7a5
  411550:	0040f529 	.word	0x0040f529
  411554:	0040d9ad 	.word	0x0040d9ad

00411558 <draw_value_str>:
{
  411558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41155c:	b093      	sub	sp, #76	; 0x4c
    if(dsc->value_str == NULL) return;
  41155e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  411560:	b11d      	cbz	r5, 41156a <draw_value_str+0x12>
    if(dsc->value_opa <= LV_OPA_MIN) return;
  411562:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
  411566:	2b02      	cmp	r3, #2
  411568:	d802      	bhi.n	411570 <draw_value_str+0x18>
}
  41156a:	b013      	add	sp, #76	; 0x4c
  41156c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  411570:	4614      	mov	r4, r2
  411572:	460e      	mov	r6, r1
  411574:	4680      	mov	r8, r0
    _lv_txt_get_size(&s, str, dsc->value_font, dsc->value_letter_space, dsc->value_line_space, LV_COORD_MAX,
  411576:	f9b2 304c 	ldrsh.w	r3, [r2, #76]	; 0x4c
  41157a:	2700      	movs	r7, #0
  41157c:	9702      	str	r7, [sp, #8]
  41157e:	f647 4218 	movw	r2, #31768	; 0x7c18
  411582:	9201      	str	r2, [sp, #4]
  411584:	f9b4 204e 	ldrsh.w	r2, [r4, #78]	; 0x4e
  411588:	9200      	str	r2, [sp, #0]
  41158a:	6c22      	ldr	r2, [r4, #64]	; 0x40
  41158c:	4629      	mov	r1, r5
  41158e:	a811      	add	r0, sp, #68	; 0x44
  411590:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 411644 <draw_value_str+0xec>
  411594:	47c8      	blx	r9
    value_area.x1 = 0;
  411596:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
    value_area.y1 = 0;
  41159a:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
    value_area.x2 = s.x - 1;
  41159e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  4115a2:	3b01      	subs	r3, #1
  4115a4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
    value_area.y2 = s.y - 1;
  4115a8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  4115ac:	3b01      	subs	r3, #1
  4115ae:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    _lv_area_align(coords, &value_area, dsc->value_align, &p_align);
  4115b2:	ab0e      	add	r3, sp, #56	; 0x38
  4115b4:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
  4115b8:	a90f      	add	r1, sp, #60	; 0x3c
  4115ba:	4640      	mov	r0, r8
  4115bc:	f8df 8088 	ldr.w	r8, [pc, #136]	; 411648 <draw_value_str+0xf0>
  4115c0:	47c0      	blx	r8
    value_area.x1 += p_align.x + dsc->value_ofs_x;
  4115c2:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  4115c6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  4115ca:	441a      	add	r2, r3
  4115cc:	b292      	uxth	r2, r2
  4115ce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  4115d2:	4413      	add	r3, r2
  4115d4:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
    value_area.y1 += p_align.y + dsc->value_ofs_y;
  4115d8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
  4115dc:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
  4115e0:	440b      	add	r3, r1
  4115e2:	b29b      	uxth	r3, r3
  4115e4:	f8bd 103e 	ldrh.w	r1, [sp, #62]	; 0x3e
  4115e8:	4419      	add	r1, r3
  4115ea:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
    value_area.x2 += p_align.x + dsc->value_ofs_x;
  4115ee:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
  4115f2:	440a      	add	r2, r1
  4115f4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    value_area.y2 += p_align.y + dsc->value_ofs_y;
  4115f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
  4115fc:	4413      	add	r3, r2
  4115fe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    lv_draw_label_dsc_init(&label_dsc);
  411602:	a805      	add	r0, sp, #20
  411604:	4b0d      	ldr	r3, [pc, #52]	; (41163c <draw_value_str+0xe4>)
  411606:	4798      	blx	r3
    label_dsc.font = dsc->value_font;
  411608:	6c23      	ldr	r3, [r4, #64]	; 0x40
  41160a:	9307      	str	r3, [sp, #28]
    label_dsc.letter_space = dsc->value_letter_space;
  41160c:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
  411610:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    label_dsc.line_space = dsc->value_line_space;
  411614:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
  411618:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
    label_dsc.color = dsc->value_color;
  41161c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
  411620:	f8ad 3014 	strh.w	r3, [sp, #20]
    label_dsc.opa = dsc->value_opa;
  411624:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  411628:	f88d 3020 	strb.w	r3, [sp, #32]
    lv_draw_label(&value_area, clip, &label_dsc, str, NULL);
  41162c:	9700      	str	r7, [sp, #0]
  41162e:	462b      	mov	r3, r5
  411630:	aa05      	add	r2, sp, #20
  411632:	4631      	mov	r1, r6
  411634:	a80f      	add	r0, sp, #60	; 0x3c
  411636:	4c02      	ldr	r4, [pc, #8]	; (411640 <draw_value_str+0xe8>)
  411638:	47a0      	blx	r4
  41163a:	e796      	b.n	41156a <draw_value_str+0x12>
  41163c:	0040d965 	.word	0x0040d965
  411640:	0040d9ad 	.word	0x0040d9ad
  411644:	00416e21 	.word	0x00416e21
  411648:	00415231 	.word	0x00415231

0041164c <draw_bg>:
    if(dsc->bg_opa <= LV_OPA_MIN) return;
  41164c:	7b13      	ldrb	r3, [r2, #12]
  41164e:	2b02      	cmp	r3, #2
  411650:	f240 839c 	bls.w	411d8c <draw_bg+0x740>
{
  411654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  411658:	b0a5      	sub	sp, #148	; 0x94
  41165a:	ad22      	add	r5, sp, #136	; 0x88
  41165c:	2308      	movs	r3, #8
  41165e:	e004      	b.n	41166a <draw_bg+0x1e>
        *d8 = *s8;
  411660:	f810 6b01 	ldrb.w	r6, [r0], #1
  411664:	f805 6b01 	strb.w	r6, [r5], #1
        len--;
  411668:	3b01      	subs	r3, #1
    while(len) {
  41166a:	2b00      	cmp	r3, #0
  41166c:	d1f8      	bne.n	411660 <draw_bg+0x14>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
  41166e:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
  411672:	2b01      	cmp	r3, #1
  411674:	dd22      	ble.n	4116bc <draw_bg+0x70>
  411676:	7d13      	ldrb	r3, [r2, #20]
  411678:	2bfc      	cmp	r3, #252	; 0xfc
  41167a:	d91f      	bls.n	4116bc <draw_bg+0x70>
  41167c:	f9b2 3000 	ldrsh.w	r3, [r2]
  411680:	b1e3      	cbz	r3, 4116bc <draw_bg+0x70>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
  411682:	8a53      	ldrh	r3, [r2, #18]
  411684:	f3c3 0080 	ubfx	r0, r3, #2, #1
  411688:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
  41168c:	4428      	add	r0, r5
  41168e:	f8ad 0088 	strh.w	r0, [sp, #136]	; 0x88
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
  411692:	f3c3 0040 	ubfx	r0, r3, #1, #1
  411696:	f8bd 508a 	ldrh.w	r5, [sp, #138]	; 0x8a
  41169a:	4428      	add	r0, r5
  41169c:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
  4116a0:	f3c3 05c0 	ubfx	r5, r3, #3, #1
  4116a4:	f8bd 008c 	ldrh.w	r0, [sp, #140]	; 0x8c
  4116a8:	1b40      	subs	r0, r0, r5
  4116aa:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
  4116ae:	f003 0301 	and.w	r3, r3, #1
  4116b2:	f8bd 008e 	ldrh.w	r0, [sp, #142]	; 0x8e
  4116b6:	1ac3      	subs	r3, r0, r3
  4116b8:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
    lv_opa_t opa = dsc->bg_opa;
  4116bc:	7b13      	ldrb	r3, [r2, #12]
  4116be:	9305      	str	r3, [sp, #20]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
  4116c0:	2bfd      	cmp	r3, #253	; 0xfd
  4116c2:	d901      	bls.n	4116c8 <draw_bg+0x7c>
  4116c4:	23ff      	movs	r3, #255	; 0xff
  4116c6:	9305      	str	r3, [sp, #20]
  4116c8:	4692      	mov	sl, r2
  4116ca:	460d      	mov	r5, r1
  4116cc:	910a      	str	r1, [sp, #40]	; 0x28
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
  4116ce:	4bad      	ldr	r3, [pc, #692]	; (411984 <draw_bg+0x338>)
  4116d0:	4798      	blx	r3
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
  4116d2:	4bad      	ldr	r3, [pc, #692]	; (411988 <draw_bg+0x33c>)
  4116d4:	4798      	blx	r3
  4116d6:	4607      	mov	r7, r0
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
  4116d8:	462a      	mov	r2, r5
  4116da:	a922      	add	r1, sp, #136	; 0x88
  4116dc:	a820      	add	r0, sp, #128	; 0x80
  4116de:	4bab      	ldr	r3, [pc, #684]	; (41198c <draw_bg+0x340>)
  4116e0:	4798      	blx	r3
    if(is_common == false) return;
  4116e2:	9006      	str	r0, [sp, #24]
  4116e4:	b910      	cbnz	r0, 4116ec <draw_bg+0xa0>
}
  4116e6:	b025      	add	sp, #148	; 0x94
  4116e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    draw_area.x1 -= disp_area->x1;
  4116ec:	8a39      	ldrh	r1, [r7, #16]
  4116ee:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4116f2:	1a5b      	subs	r3, r3, r1
  4116f4:	b29a      	uxth	r2, r3
  4116f6:	f8ad 2080 	strh.w	r2, [sp, #128]	; 0x80
    draw_area.y1 -= disp_area->y1;
  4116fa:	8a7d      	ldrh	r5, [r7, #18]
  4116fc:	f8bd 0082 	ldrh.w	r0, [sp, #130]	; 0x82
  411700:	1b40      	subs	r0, r0, r5
  411702:	f8ad 0082 	strh.w	r0, [sp, #130]	; 0x82
    draw_area.x2 -= disp_area->x1;
  411706:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
  41170a:	1a5b      	subs	r3, r3, r1
  41170c:	b29b      	uxth	r3, r3
  41170e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
    draw_area.y2 -= disp_area->y1;
  411712:	f8bd 1086 	ldrh.w	r1, [sp, #134]	; 0x86
  411716:	1b49      	subs	r1, r1, r5
  411718:	f8ad 1086 	strh.w	r1, [sp, #134]	; 0x86
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41171c:	1a9b      	subs	r3, r3, r2
  41171e:	b29b      	uxth	r3, r3
  411720:	3301      	adds	r3, #1
  411722:	b21b      	sxth	r3, r3
  411724:	930d      	str	r3, [sp, #52]	; 0x34
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
  411726:	930c      	str	r3, [sp, #48]	; 0x30
  411728:	4618      	mov	r0, r3
  41172a:	4b99      	ldr	r3, [pc, #612]	; (411990 <draw_bg+0x344>)
  41172c:	4798      	blx	r3
  41172e:	9008      	str	r0, [sp, #32]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
  411730:	f89a 8006 	ldrb.w	r8, [sl, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411734:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411738:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41173c:	429a      	cmp	r2, r3
  41173e:	d00a      	beq.n	411756 <draw_bg+0x10a>
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
  411740:	4b94      	ldr	r3, [pc, #592]	; (411994 <draw_bg+0x348>)
  411742:	4798      	blx	r3
  411744:	b283      	uxth	r3, r0
  411746:	930e      	str	r3, [sp, #56]	; 0x38
    if(other_mask_cnt) simple_mode = false;
  411748:	b943      	cbnz	r3, 41175c <draw_bg+0x110>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  41174a:	f1b8 0f02 	cmp.w	r8, #2
  41174e:	d068      	beq.n	411822 <draw_bg+0x1d6>
    bool simple_mode = true;
  411750:	9b06      	ldr	r3, [sp, #24]
  411752:	9309      	str	r3, [sp, #36]	; 0x24
  411754:	e004      	b.n	411760 <draw_bg+0x114>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
  411756:	f04f 0800 	mov.w	r8, #0
  41175a:	e7f1      	b.n	411740 <draw_bg+0xf4>
    if(other_mask_cnt) simple_mode = false;
  41175c:	2300      	movs	r3, #0
  41175e:	9309      	str	r3, [sp, #36]	; 0x24
  411760:	f8bd b08c 	ldrh.w	fp, [sp, #140]	; 0x8c
  411764:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411768:	ebab 0b03 	sub.w	fp, fp, r3
  41176c:	fa1f fb8b 	uxth.w	fp, fp
  411770:	f10b 0b01 	add.w	fp, fp, #1
  411774:	fa0f fb8b 	sxth.w	fp, fp
    int32_t coords_w = lv_area_get_width(&coords_bg);
  411778:	f8cd b010 	str.w	fp, [sp, #16]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41177c:	f8bd 508e 	ldrh.w	r5, [sp, #142]	; 0x8e
  411780:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411784:	1aed      	subs	r5, r5, r3
  411786:	b2ad      	uxth	r5, r5
  411788:	3501      	adds	r5, #1
  41178a:	b22d      	sxth	r5, r5
    int32_t rout = dsc->radius;
  41178c:	f9ba 3000 	ldrsh.w	r3, [sl]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
  411790:	455d      	cmp	r5, fp
  411792:	bfa8      	it	ge
  411794:	465d      	movge	r5, fp
    if(rout > short_side >> 1) rout = short_side >> 1;
  411796:	106d      	asrs	r5, r5, #1
  411798:	42ab      	cmp	r3, r5
  41179a:	dc00      	bgt.n	41179e <draw_bg+0x152>
    int32_t rout = dsc->radius;
  41179c:	461d      	mov	r5, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
  41179e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4117a0:	2d00      	cmp	r5, #0
  4117a2:	bf14      	ite	ne
  4117a4:	2300      	movne	r3, #0
  4117a6:	f003 0301 	andeq.w	r3, r3, #1
  4117aa:	b113      	cbz	r3, 4117b2 <draw_bg+0x166>
  4117ac:	f1b8 0f00 	cmp.w	r8, #0
  4117b0:	d03a      	beq.n	411828 <draw_bg+0x1dc>
        if(rout > 0) {
  4117b2:	2d00      	cmp	r5, #0
  4117b4:	dd4a      	ble.n	41184c <draw_bg+0x200>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
  4117b6:	2300      	movs	r3, #0
  4117b8:	462a      	mov	r2, r5
  4117ba:	a922      	add	r1, sp, #136	; 0x88
  4117bc:	a819      	add	r0, sp, #100	; 0x64
  4117be:	4e76      	ldr	r6, [pc, #472]	; (411998 <draw_bg+0x34c>)
  4117c0:	47b0      	blx	r6
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
  4117c2:	2100      	movs	r1, #0
  4117c4:	a819      	add	r0, sp, #100	; 0x64
  4117c6:	4b75      	ldr	r3, [pc, #468]	; (41199c <draw_bg+0x350>)
  4117c8:	4798      	blx	r3
  4117ca:	9010      	str	r0, [sp, #64]	; 0x40
        lv_color_t grad_color = dsc->bg_color;
  4117cc:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  4117d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
        if(grad_dir == LV_GRAD_DIR_HOR) {
  4117d4:	f1b8 0f02 	cmp.w	r8, #2
  4117d8:	d03c      	beq.n	411854 <draw_bg+0x208>
        lv_color_t * grad_map = NULL;
  4117da:	2300      	movs	r3, #0
  4117dc:	930f      	str	r3, [sp, #60]	; 0x3c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  4117de:	f9bd 208c 	ldrsh.w	r2, [sp, #140]	; 0x8c
  4117e2:	b293      	uxth	r3, r2
  4117e4:	f9bd 1088 	ldrsh.w	r1, [sp, #136]	; 0x88
  4117e8:	b288      	uxth	r0, r1
  4117ea:	1a1b      	subs	r3, r3, r0
  4117ec:	b29b      	uxth	r3, r3
  4117ee:	3301      	adds	r3, #1
  4117f0:	b21b      	sxth	r3, r3
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
  4117f2:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  4117f6:	2b32      	cmp	r3, #50	; 0x32
  4117f8:	dc01      	bgt.n	4117fe <draw_bg+0x1b2>
        bool split = false;
  4117fa:	2300      	movs	r3, #0
  4117fc:	9306      	str	r3, [sp, #24]
        fill_area.x1 = coords_bg.x1;
  4117fe:	f8ad 1054 	strh.w	r1, [sp, #84]	; 0x54
        fill_area.x2 = coords_bg.x2;
  411802:	f8ad 2058 	strh.w	r2, [sp, #88]	; 0x58
        fill_area.y1 = disp_area->y1 + draw_area.y1;
  411806:	8a7b      	ldrh	r3, [r7, #18]
  411808:	f9bd 6082 	ldrsh.w	r6, [sp, #130]	; 0x82
  41180c:	fa13 f386 	uxtah	r3, r3, r6
  411810:	b21b      	sxth	r3, r3
  411812:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
        fill_area.y2 = fill_area.y1;
  411816:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  41181a:	46b9      	mov	r9, r7
  41181c:	f8bd b01c 	ldrh.w	fp, [sp, #28]
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411820:	e1ec      	b.n	411bfc <draw_bg+0x5b0>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
  411822:	2300      	movs	r3, #0
  411824:	9309      	str	r3, [sp, #36]	; 0x24
  411826:	e79b      	b.n	411760 <draw_bg+0x114>
        _lv_blend_fill(clip, &coords_bg,
  411828:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  41182c:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411830:	9302      	str	r3, [sp, #8]
  411832:	9b05      	ldr	r3, [sp, #20]
  411834:	9301      	str	r3, [sp, #4]
  411836:	2301      	movs	r3, #1
  411838:	9300      	str	r3, [sp, #0]
  41183a:	2300      	movs	r3, #0
  41183c:	a922      	add	r1, sp, #136	; 0x88
  41183e:	980a      	ldr	r0, [sp, #40]	; 0x28
  411840:	4c57      	ldr	r4, [pc, #348]	; (4119a0 <draw_bg+0x354>)
  411842:	47a0      	blx	r4
    int16_t mask_rout_id = LV_MASK_ID_INV;
  411844:	f04f 33ff 	mov.w	r3, #4294967295
  411848:	9310      	str	r3, [sp, #64]	; 0x40
        _lv_blend_fill(clip, &coords_bg,
  41184a:	e234      	b.n	411cb6 <draw_bg+0x66a>
    int16_t mask_rout_id = LV_MASK_ID_INV;
  41184c:	f04f 33ff 	mov.w	r3, #4294967295
  411850:	9310      	str	r3, [sp, #64]	; 0x40
  411852:	e7bb      	b.n	4117cc <draw_bg+0x180>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
  411854:	ea4f 004b 	mov.w	r0, fp, lsl #1
  411858:	4b4d      	ldr	r3, [pc, #308]	; (411990 <draw_bg+0x344>)
  41185a:	4798      	blx	r3
  41185c:	900f      	str	r0, [sp, #60]	; 0x3c
            for(i = 0; i < coords_w; i++) {
  41185e:	f04f 0900 	mov.w	r9, #0
  411862:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  411866:	9512      	str	r5, [sp, #72]	; 0x48
  411868:	4684      	mov	ip, r0
  41186a:	9713      	str	r7, [sp, #76]	; 0x4c
  41186c:	f8dd e010 	ldr.w	lr, [sp, #16]
  411870:	e004      	b.n	41187c <draw_bg+0x230>
    if(i <= min) return dsc->bg_color;
  411872:	f8ba 3002 	ldrh.w	r3, [sl, #2]
                grad_map[i] = grad_get(dsc, coords_w, i);
  411876:	8033      	strh	r3, [r6, #0]
            for(i = 0; i < coords_w; i++) {
  411878:	f109 0901 	add.w	r9, r9, #1
  41187c:	45f1      	cmp	r9, lr
  41187e:	da66      	bge.n	41194e <draw_bg+0x302>
                grad_map[i] = grad_get(dsc, coords_w, i);
  411880:	eb0c 0649 	add.w	r6, ip, r9, lsl #1
  411884:	fa0f f389 	sxth.w	r3, r9
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411888:	f9ba 0008 	ldrsh.w	r0, [sl, #8]
  41188c:	fb0b f200 	mul.w	r2, fp, r0
  411890:	1212      	asrs	r2, r2, #8
    if(i <= min) return dsc->bg_color;
  411892:	429a      	cmp	r2, r3
  411894:	daed      	bge.n	411872 <draw_bg+0x226>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411896:	f9ba 100a 	ldrsh.w	r1, [sl, #10]
  41189a:	fb01 f50b 	mul.w	r5, r1, fp
    if(i >= max) return dsc->bg_grad_color;
  41189e:	ebb3 2f25 	cmp.w	r3, r5, asr #8
  4118a2:	da51      	bge.n	411948 <draw_bg+0x2fc>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  4118a4:	1a09      	subs	r1, r1, r0
    d = (s * d) >> 8;
  4118a6:	fb01 f10b 	mul.w	r1, r1, fp
  4118aa:	1209      	asrs	r1, r1, #8
    i -= min;
  4118ac:	1a9b      	subs	r3, r3, r2
  4118ae:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  4118b0:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  4118b4:	fb93 f3f1 	sdiv	r3, r3, r1
  4118b8:	b2db      	uxtb	r3, r3
  4118ba:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  4118be:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4118c2:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  4118c6:	f3c1 05c4 	ubfx	r5, r1, #3, #5
  4118ca:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  4118ce:	fb07 f505 	mul.w	r5, r7, r5
  4118d2:	fb03 5202 	mla	r2, r3, r2, r5
  4118d6:	3280      	adds	r2, #128	; 0x80
  4118d8:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  4118dc:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  4118e0:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  4118e4:	f362 04c7 	bfi	r4, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4118e8:	f000 0507 	and.w	r5, r0, #7
  4118ec:	f3c0 3242 	ubfx	r2, r0, #13, #3
  4118f0:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
  4118f4:	f001 0807 	and.w	r8, r1, #7
  4118f8:	f3c1 3542 	ubfx	r5, r1, #13, #3
  4118fc:	eb05 05c8 	add.w	r5, r5, r8, lsl #3
  411900:	fb05 f507 	mul.w	r5, r5, r7
  411904:	fb02 5203 	mla	r2, r2, r3, r5
  411908:	3280      	adds	r2, #128	; 0x80
  41190a:	eb02 2502 	add.w	r5, r2, r2, lsl #8
  41190e:	eb02 12c5 	add.w	r2, r2, r5, lsl #7
  411912:	f3c2 6582 	ubfx	r5, r2, #26, #3
  411916:	f365 0402 	bfi	r4, r5, #0, #3
  41191a:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  41191e:	f362 344f 	bfi	r4, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411922:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411926:	f3c1 2104 	ubfx	r1, r1, #8, #5
  41192a:	fb01 f707 	mul.w	r7, r1, r7
  41192e:	fb00 7303 	mla	r3, r0, r3, r7
  411932:	3380      	adds	r3, #128	; 0x80
  411934:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411938:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  41193c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411940:	f363 240c 	bfi	r4, r3, #8, #5
  411944:	4623      	mov	r3, r4
  411946:	e796      	b.n	411876 <draw_bg+0x22a>
    if(i >= max) return dsc->bg_grad_color;
  411948:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  41194c:	e793      	b.n	411876 <draw_bg+0x22a>
  41194e:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
  411952:	9d12      	ldr	r5, [sp, #72]	; 0x48
  411954:	9f13      	ldr	r7, [sp, #76]	; 0x4c
  411956:	e742      	b.n	4117de <draw_bg+0x192>
                    _lv_memset(mask_buf, opa, draw_area_w);
  411958:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  41195a:	9905      	ldr	r1, [sp, #20]
  41195c:	9f08      	ldr	r7, [sp, #32]
  41195e:	4638      	mov	r0, r7
  411960:	4b10      	ldr	r3, [pc, #64]	; (4119a4 <draw_bg+0x358>)
  411962:	4798      	blx	r3
                    mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  411964:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  411968:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  41196c:	4419      	add	r1, r3
  41196e:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  411972:	4432      	add	r2, r6
  411974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  411976:	b212      	sxth	r2, r2
  411978:	b209      	sxth	r1, r1
  41197a:	4638      	mov	r0, r7
  41197c:	4f0a      	ldr	r7, [pc, #40]	; (4119a8 <draw_bg+0x35c>)
  41197e:	47b8      	blx	r7
  411980:	9004      	str	r0, [sp, #16]
  411982:	e028      	b.n	4119d6 <draw_bg+0x38a>
  411984:	00409269 	.word	0x00409269
  411988:	00414735 	.word	0x00414735
  41198c:	00414ef3 	.word	0x00414ef3
  411990:	00416269 	.word	0x00416269
  411994:	0040f625 	.word	0x0040f625
  411998:	0040f7a5 	.word	0x0040f7a5
  41199c:	0040f529 	.word	0x0040f529
  4119a0:	0040c301 	.word	0x0040c301
  4119a4:	00416399 	.word	0x00416399
  4119a8:	0040f55d 	.word	0x0040f55d
                _lv_memset(mask_buf, opa, draw_area_w);
  4119ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4119ae:	9905      	ldr	r1, [sp, #20]
  4119b0:	9f08      	ldr	r7, [sp, #32]
  4119b2:	4638      	mov	r0, r7
  4119b4:	4bb5      	ldr	r3, [pc, #724]	; (411c8c <draw_bg+0x640>)
  4119b6:	4798      	blx	r3
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
  4119b8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
  4119bc:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
  4119c0:	4419      	add	r1, r3
  4119c2:	f8b9 2012 	ldrh.w	r2, [r9, #18]
  4119c6:	4432      	add	r2, r6
  4119c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4119ca:	b212      	sxth	r2, r2
  4119cc:	b209      	sxth	r1, r1
  4119ce:	4638      	mov	r0, r7
  4119d0:	4faf      	ldr	r7, [pc, #700]	; (411c90 <draw_bg+0x644>)
  4119d2:	47b8      	blx	r7
  4119d4:	9004      	str	r0, [sp, #16]
            if(mask_res == LV_DRAW_MASK_RES_CHANGED) {
  4119d6:	9b04      	ldr	r3, [sp, #16]
  4119d8:	2b02      	cmp	r3, #2
  4119da:	d061      	beq.n	411aa0 <draw_bg+0x454>
            opa2 = opa;
  4119dc:	9b05      	ldr	r3, [sp, #20]
  4119de:	9307      	str	r3, [sp, #28]
            if(grad_dir == LV_GRAD_DIR_VER) {
  4119e0:	f1b8 0f01 	cmp.w	r8, #1
  4119e4:	d05f      	beq.n	411aa6 <draw_bg+0x45a>
            if(simple_mode && split &&
  4119e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4119e8:	9a06      	ldr	r2, [sp, #24]
  4119ea:	4013      	ands	r3, r2
  4119ec:	f013 0fff 	tst.w	r3, #255	; 0xff
  4119f0:	f000 80e8 	beq.w	411bc4 <draw_bg+0x578>
               (y < coords_bg.y1 + rout + 1 ||
  4119f4:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  4119f8:	442b      	add	r3, r5
  4119fa:	3301      	adds	r3, #1
            if(simple_mode && split &&
  4119fc:	429c      	cmp	r4, r3
  4119fe:	db06      	blt.n	411a0e <draw_bg+0x3c2>
                y > coords_bg.y2 - rout - 1)) {
  411a00:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411a04:	1b5b      	subs	r3, r3, r5
  411a06:	3b01      	subs	r3, #1
               (y < coords_bg.y1 + rout + 1 ||
  411a08:	429c      	cmp	r4, r3
  411a0a:	f340 80db 	ble.w	411bc4 <draw_bg+0x578>
                fill_area2.x1 = coords_bg.x1;
  411a0e:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411a12:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x1 + rout - 1;
  411a16:	b2ac      	uxth	r4, r5
  411a18:	fa14 f383 	uxtah	r3, r4, r3
  411a1c:	b29b      	uxth	r3, r3
  411a1e:	3b01      	subs	r3, #1
  411a20:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                fill_area2.y1 = fill_area.y1;
  411a24:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  411a28:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
                fill_area2.y2 = fill_area.y2;
  411a2c:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411a30:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                _lv_blend_fill(clip, &fill_area2,
  411a34:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411a38:	9302      	str	r3, [sp, #8]
  411a3a:	9b07      	ldr	r3, [sp, #28]
  411a3c:	9301      	str	r3, [sp, #4]
  411a3e:	9b04      	ldr	r3, [sp, #16]
  411a40:	9300      	str	r3, [sp, #0]
  411a42:	9b08      	ldr	r3, [sp, #32]
  411a44:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411a48:	a917      	add	r1, sp, #92	; 0x5c
  411a4a:	980a      	ldr	r0, [sp, #40]	; 0x28
  411a4c:	4f91      	ldr	r7, [pc, #580]	; (411c94 <draw_bg+0x648>)
  411a4e:	47b8      	blx	r7
                if(grad_dir == LV_GRAD_DIR_VER) {
  411a50:	f1b8 0f01 	cmp.w	r8, #1
  411a54:	f000 809c 	beq.w	411b90 <draw_bg+0x544>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
  411a58:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411a5c:	b29a      	uxth	r2, r3
  411a5e:	1b14      	subs	r4, r2, r4
  411a60:	b2a4      	uxth	r4, r4
  411a62:	3401      	adds	r4, #1
  411a64:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c
                fill_area2.x2 = coords_bg.x2;
  411a68:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
  411a6c:	1b5b      	subs	r3, r3, r5
  411a6e:	3301      	adds	r3, #1
  411a70:	f9b9 2010 	ldrsh.w	r2, [r9, #16]
  411a74:	f9bd 1080 	ldrsh.w	r1, [sp, #128]	; 0x80
  411a78:	440a      	add	r2, r1
                if(mask_ofs < 0) mask_ofs = 0;
  411a7a:	1a9b      	subs	r3, r3, r2
  411a7c:	f100 80a0 	bmi.w	411bc0 <draw_bg+0x574>
                _lv_blend_fill(clip, &fill_area2,
  411a80:	f89a 200d 	ldrb.w	r2, [sl, #13]
  411a84:	9202      	str	r2, [sp, #8]
  411a86:	9a07      	ldr	r2, [sp, #28]
  411a88:	9201      	str	r2, [sp, #4]
  411a8a:	9a04      	ldr	r2, [sp, #16]
  411a8c:	9200      	str	r2, [sp, #0]
  411a8e:	9a08      	ldr	r2, [sp, #32]
  411a90:	4413      	add	r3, r2
  411a92:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411a96:	a917      	add	r1, sp, #92	; 0x5c
  411a98:	980a      	ldr	r0, [sp, #40]	; 0x28
  411a9a:	4c7e      	ldr	r4, [pc, #504]	; (411c94 <draw_bg+0x648>)
  411a9c:	47a0      	blx	r4
                y > coords_bg.y2 - rout - 1)) {
  411a9e:	e0a2      	b.n	411be6 <draw_bg+0x59a>
                opa2 = LV_OPA_COVER;
  411aa0:	23ff      	movs	r3, #255	; 0xff
  411aa2:	9307      	str	r3, [sp, #28]
  411aa4:	e79c      	b.n	4119e0 <draw_bg+0x394>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  411aa6:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
  411aaa:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411aae:	1ad2      	subs	r2, r2, r3
  411ab0:	b292      	uxth	r2, r2
  411ab2:	3201      	adds	r2, #1
  411ab4:	b212      	sxth	r2, r2
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
  411ab6:	1ae3      	subs	r3, r4, r3
  411ab8:	b29b      	uxth	r3, r3
  411aba:	fa0f fe83 	sxth.w	lr, r3
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
  411abe:	f9ba c008 	ldrsh.w	ip, [sl, #8]
  411ac2:	fb02 f10c 	mul.w	r1, r2, ip
  411ac6:	1209      	asrs	r1, r1, #8
    if(i <= min) return dsc->bg_color;
  411ac8:	4571      	cmp	r1, lr
  411aca:	da59      	bge.n	411b80 <draw_bg+0x534>
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
  411acc:	f9ba 000a 	ldrsh.w	r0, [sl, #10]
  411ad0:	fb00 f702 	mul.w	r7, r0, r2
    if(i >= max) return dsc->bg_grad_color;
  411ad4:	ebbe 2f27 	cmp.w	lr, r7, asr #8
  411ad8:	da57      	bge.n	411b8a <draw_bg+0x53e>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
  411ada:	eba0 000c 	sub.w	r0, r0, ip
    d = (s * d) >> 8;
  411ade:	fb00 f202 	mul.w	r2, r0, r2
  411ae2:	1212      	asrs	r2, r2, #8
    i -= min;
  411ae4:	1a5b      	subs	r3, r3, r1
  411ae6:	b21b      	sxth	r3, r3
    lv_opa_t mix = (i * 255) / d;
  411ae8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
  411aec:	fb93 f3f2 	sdiv	r3, r3, r2
  411af0:	b2db      	uxtb	r3, r3
  411af2:	f8ba 0004 	ldrh.w	r0, [sl, #4]
  411af6:	f8ba 1002 	ldrh.w	r1, [sl, #2]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  411afa:	f3c0 02c4 	ubfx	r2, r0, #3, #5
  411afe:	f3c1 0ec4 	ubfx	lr, r1, #3, #5
  411b02:	f1c3 0cff 	rsb	ip, r3, #255	; 0xff
  411b06:	fb0c fe0e 	mul.w	lr, ip, lr
  411b0a:	fb03 e202 	mla	r2, r3, r2, lr
  411b0e:	3280      	adds	r2, #128	; 0x80
  411b10:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  411b14:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411b18:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  411b1c:	f362 0bc7 	bfi	fp, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  411b20:	f000 0e07 	and.w	lr, r0, #7
  411b24:	f3c0 3242 	ubfx	r2, r0, #13, #3
  411b28:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  411b2c:	f001 0707 	and.w	r7, r1, #7
  411b30:	f3c1 3e42 	ubfx	lr, r1, #13, #3
  411b34:	eb0e 0ec7 	add.w	lr, lr, r7, lsl #3
  411b38:	fb0e fe0c 	mul.w	lr, lr, ip
  411b3c:	fb02 e203 	mla	r2, r2, r3, lr
  411b40:	3280      	adds	r2, #128	; 0x80
  411b42:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  411b46:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  411b4a:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  411b4e:	f36e 0b02 	bfi	fp, lr, #0, #3
  411b52:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  411b56:	f362 3b4f 	bfi	fp, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  411b5a:	f3c0 2004 	ubfx	r0, r0, #8, #5
  411b5e:	f3c1 2104 	ubfx	r1, r1, #8, #5
  411b62:	fb01 fc0c 	mul.w	ip, r1, ip
  411b66:	fb00 c303 	mla	r3, r0, r3, ip
  411b6a:	3380      	adds	r3, #128	; 0x80
  411b6c:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  411b70:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  411b74:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  411b78:	f363 2b0c 	bfi	fp, r3, #8, #5
  411b7c:	465b      	mov	r3, fp
  411b7e:	e001      	b.n	411b84 <draw_bg+0x538>
    if(i <= min) return dsc->bg_color;
  411b80:	f8ba 3002 	ldrh.w	r3, [sl, #2]
  411b84:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  411b88:	e72d      	b.n	4119e6 <draw_bg+0x39a>
    if(i >= max) return dsc->bg_grad_color;
  411b8a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
  411b8e:	e7f9      	b.n	411b84 <draw_bg+0x538>
                    fill_area2.x1 = coords_bg.x1 + rout;
  411b90:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411b94:	4423      	add	r3, r4
  411b96:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
                    fill_area2.x2 = coords_bg.x2 - rout;
  411b9a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411b9e:	1b1b      	subs	r3, r3, r4
  411ba0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
                    _lv_blend_fill(clip, &fill_area2,
  411ba4:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411ba8:	9302      	str	r3, [sp, #8]
  411baa:	9b05      	ldr	r3, [sp, #20]
  411bac:	9301      	str	r3, [sp, #4]
  411bae:	2301      	movs	r3, #1
  411bb0:	9300      	str	r3, [sp, #0]
  411bb2:	2300      	movs	r3, #0
  411bb4:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411bb8:	a917      	add	r1, sp, #92	; 0x5c
  411bba:	980a      	ldr	r0, [sp, #40]	; 0x28
  411bbc:	47b8      	blx	r7
  411bbe:	e74b      	b.n	411a58 <draw_bg+0x40c>
                if(mask_ofs < 0) mask_ofs = 0;
  411bc0:	2300      	movs	r3, #0
  411bc2:	e75d      	b.n	411a80 <draw_bg+0x434>
                if(grad_dir == LV_GRAD_DIR_HOR) {
  411bc4:	f1b8 0f02 	cmp.w	r8, #2
  411bc8:	d034      	beq.n	411c34 <draw_bg+0x5e8>
                else if(grad_dir == LV_GRAD_DIR_VER) {
  411bca:	f1b8 0f01 	cmp.w	r8, #1
  411bce:	d03f      	beq.n	411c50 <draw_bg+0x604>
                else if(other_mask_cnt != 0 || !split) {
  411bd0:	9b06      	ldr	r3, [sp, #24]
  411bd2:	f083 0301 	eor.w	r3, r3, #1
  411bd6:	b2db      	uxtb	r3, r3
  411bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  411bda:	2a00      	cmp	r2, #0
  411bdc:	bf18      	it	ne
  411bde:	f043 0301 	orrne.w	r3, r3, #1
  411be2:	2b00      	cmp	r3, #0
  411be4:	d143      	bne.n	411c6e <draw_bg+0x622>
            fill_area.y1++;
  411be6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
  411bea:	3301      	adds	r3, #1
  411bec:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2++;
  411bf0:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
  411bf4:	3301      	adds	r3, #1
  411bf6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
  411bfa:	3601      	adds	r6, #1
  411bfc:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
  411c00:	429e      	cmp	r6, r3
  411c02:	dc4b      	bgt.n	411c9c <draw_bg+0x650>
            int32_t y = h + vdb->area.y1;
  411c04:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
  411c08:	4434      	add	r4, r6
            if(y > coords_bg.y1 + rout + 1 &&
  411c0a:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411c0e:	442b      	add	r3, r5
  411c10:	3301      	adds	r3, #1
  411c12:	429c      	cmp	r4, r3
  411c14:	f77f aeca 	ble.w	4119ac <draw_bg+0x360>
               y < coords_bg.y2 - rout - 1) {
  411c18:	f9bd 308e 	ldrsh.w	r3, [sp, #142]	; 0x8e
  411c1c:	1b5b      	subs	r3, r3, r5
  411c1e:	3b01      	subs	r3, #1
            if(y > coords_bg.y1 + rout + 1 &&
  411c20:	429c      	cmp	r4, r3
  411c22:	f6bf aec3 	bge.w	4119ac <draw_bg+0x360>
                if(simple_mode == false) {
  411c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
  411c28:	2b00      	cmp	r3, #0
  411c2a:	f43f ae95 	beq.w	411958 <draw_bg+0x30c>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
  411c2e:	2301      	movs	r3, #1
  411c30:	9304      	str	r3, [sp, #16]
  411c32:	e6d0      	b.n	4119d6 <draw_bg+0x38a>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
  411c34:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411c38:	9302      	str	r3, [sp, #8]
  411c3a:	9b07      	ldr	r3, [sp, #28]
  411c3c:	9301      	str	r3, [sp, #4]
  411c3e:	9b04      	ldr	r3, [sp, #16]
  411c40:	9300      	str	r3, [sp, #0]
  411c42:	9b08      	ldr	r3, [sp, #32]
  411c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  411c46:	a915      	add	r1, sp, #84	; 0x54
  411c48:	980a      	ldr	r0, [sp, #40]	; 0x28
  411c4a:	4c13      	ldr	r4, [pc, #76]	; (411c98 <draw_bg+0x64c>)
  411c4c:	47a0      	blx	r4
  411c4e:	e7ca      	b.n	411be6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411c50:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411c54:	9302      	str	r3, [sp, #8]
  411c56:	9b07      	ldr	r3, [sp, #28]
  411c58:	9301      	str	r3, [sp, #4]
  411c5a:	9b04      	ldr	r3, [sp, #16]
  411c5c:	9300      	str	r3, [sp, #0]
  411c5e:	9b08      	ldr	r3, [sp, #32]
  411c60:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411c64:	a915      	add	r1, sp, #84	; 0x54
  411c66:	980a      	ldr	r0, [sp, #40]	; 0x28
  411c68:	4c0a      	ldr	r4, [pc, #40]	; (411c94 <draw_bg+0x648>)
  411c6a:	47a0      	blx	r4
  411c6c:	e7bb      	b.n	411be6 <draw_bg+0x59a>
                    _lv_blend_fill(clip, &fill_area,
  411c6e:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411c72:	9302      	str	r3, [sp, #8]
  411c74:	9b07      	ldr	r3, [sp, #28]
  411c76:	9301      	str	r3, [sp, #4]
  411c78:	9b04      	ldr	r3, [sp, #16]
  411c7a:	9300      	str	r3, [sp, #0]
  411c7c:	9b08      	ldr	r3, [sp, #32]
  411c7e:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
  411c82:	a915      	add	r1, sp, #84	; 0x54
  411c84:	980a      	ldr	r0, [sp, #40]	; 0x28
  411c86:	4c03      	ldr	r4, [pc, #12]	; (411c94 <draw_bg+0x648>)
  411c88:	47a0      	blx	r4
  411c8a:	e7ac      	b.n	411be6 <draw_bg+0x59a>
  411c8c:	00416399 	.word	0x00416399
  411c90:	0040f55d 	.word	0x0040f55d
  411c94:	0040c301 	.word	0x0040c301
  411c98:	0040c421 	.word	0x0040c421
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
  411c9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  411c9e:	f1b8 0f00 	cmp.w	r8, #0
  411ca2:	bf08      	it	eq
  411ca4:	2b00      	cmpeq	r3, #0
  411ca6:	d101      	bne.n	411cac <draw_bg+0x660>
  411ca8:	9b06      	ldr	r3, [sp, #24]
  411caa:	b95b      	cbnz	r3, 411cc4 <draw_bg+0x678>
        if(grad_map) _lv_mem_buf_release(grad_map);
  411cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  411cae:	b113      	cbz	r3, 411cb6 <draw_bg+0x66a>
  411cb0:	4618      	mov	r0, r3
  411cb2:	4b37      	ldr	r3, [pc, #220]	; (411d90 <draw_bg+0x744>)
  411cb4:	4798      	blx	r3
    lv_draw_mask_remove_id(mask_rout_id);
  411cb6:	9810      	ldr	r0, [sp, #64]	; 0x40
  411cb8:	4b36      	ldr	r3, [pc, #216]	; (411d94 <draw_bg+0x748>)
  411cba:	4798      	blx	r3
    _lv_mem_buf_release(mask_buf);
  411cbc:	9808      	ldr	r0, [sp, #32]
  411cbe:	4b34      	ldr	r3, [pc, #208]	; (411d90 <draw_bg+0x744>)
  411cc0:	4798      	blx	r3
  411cc2:	e510      	b.n	4116e6 <draw_bg+0x9a>
            fill_area.x1 = coords_bg.x1 + rout;
  411cc4:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
  411cc8:	b2ad      	uxth	r5, r5
  411cca:	442b      	add	r3, r5
  411ccc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2 - rout;
  411cd0:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
  411cd4:	1b5b      	subs	r3, r3, r5
  411cd6:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1;
  411cda:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
  411cde:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y1 + rout;
  411ce2:	fa15 f383 	uxtah	r3, r5, r3
  411ce6:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411cea:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411cee:	9302      	str	r3, [sp, #8]
  411cf0:	9b05      	ldr	r3, [sp, #20]
  411cf2:	9301      	str	r3, [sp, #4]
  411cf4:	2301      	movs	r3, #1
  411cf6:	9300      	str	r3, [sp, #0]
  411cf8:	2300      	movs	r3, #0
  411cfa:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411cfe:	a915      	add	r1, sp, #84	; 0x54
  411d00:	980a      	ldr	r0, [sp, #40]	; 0x28
  411d02:	4c25      	ldr	r4, [pc, #148]	; (411d98 <draw_bg+0x74c>)
  411d04:	47a0      	blx	r4
            fill_area.y1 = coords_bg.y2 - rout;
  411d06:	f9bd 108e 	ldrsh.w	r1, [sp, #142]	; 0x8e
  411d0a:	b28b      	uxth	r3, r1
  411d0c:	1b5b      	subs	r3, r3, r5
  411d0e:	b21b      	sxth	r3, r3
  411d10:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
  411d14:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
  411d18:	4293      	cmp	r3, r2
  411d1a:	dc03      	bgt.n	411d24 <draw_bg+0x6d8>
  411d1c:	b293      	uxth	r3, r2
  411d1e:	3301      	adds	r3, #1
  411d20:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2;
  411d24:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411d28:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411d2c:	9302      	str	r3, [sp, #8]
  411d2e:	9f05      	ldr	r7, [sp, #20]
  411d30:	9701      	str	r7, [sp, #4]
  411d32:	2601      	movs	r6, #1
  411d34:	9600      	str	r6, [sp, #0]
  411d36:	2300      	movs	r3, #0
  411d38:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411d3c:	a915      	add	r1, sp, #84	; 0x54
  411d3e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  411d42:	4640      	mov	r0, r8
  411d44:	4c14      	ldr	r4, [pc, #80]	; (411d98 <draw_bg+0x74c>)
  411d46:	47a0      	blx	r4
            fill_area.x1 = coords_bg.x1;
  411d48:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
  411d4c:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
            fill_area.x2 = coords_bg.x2;
  411d50:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
  411d54:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
            fill_area.y1 = coords_bg.y1 + rout + 1;
  411d58:	f8bd 308a 	ldrh.w	r3, [sp, #138]	; 0x8a
  411d5c:	442b      	add	r3, r5
  411d5e:	b29b      	uxth	r3, r3
  411d60:	4433      	add	r3, r6
  411d62:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
            fill_area.y2 = coords_bg.y2 - rout - 1;
  411d66:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
  411d6a:	1b5b      	subs	r3, r3, r5
  411d6c:	b29b      	uxth	r3, r3
  411d6e:	3b01      	subs	r3, #1
  411d70:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
            _lv_blend_fill(clip, &fill_area,
  411d74:	f8ba 2002 	ldrh.w	r2, [sl, #2]
  411d78:	f89a 300d 	ldrb.w	r3, [sl, #13]
  411d7c:	9302      	str	r3, [sp, #8]
  411d7e:	9701      	str	r7, [sp, #4]
  411d80:	9600      	str	r6, [sp, #0]
  411d82:	2300      	movs	r3, #0
  411d84:	a915      	add	r1, sp, #84	; 0x54
  411d86:	4640      	mov	r0, r8
  411d88:	47a0      	blx	r4
  411d8a:	e78f      	b.n	411cac <draw_bg+0x660>
  411d8c:	4770      	bx	lr
  411d8e:	bf00      	nop
  411d90:	00416019 	.word	0x00416019
  411d94:	0040f5ad 	.word	0x0040f5ad
  411d98:	0040c301 	.word	0x0040c301

00411d9c <lv_draw_rect_dsc_init>:
{
  411d9c:	b510      	push	{r4, lr}
  411d9e:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
  411da0:	2154      	movs	r1, #84	; 0x54
  411da2:	4b0e      	ldr	r3, [pc, #56]	; (411ddc <lv_draw_rect_dsc_init+0x40>)
  411da4:	4798      	blx	r3
    dsc->bg_color = LV_COLOR_WHITE;
  411da6:	4b0e      	ldr	r3, [pc, #56]	; (411de0 <lv_draw_rect_dsc_init+0x44>)
  411da8:	881b      	ldrh	r3, [r3, #0]
  411daa:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color = LV_COLOR_BLACK;
  411dac:	2300      	movs	r3, #0
  411dae:	80a3      	strh	r3, [r4, #4]
    dsc->border_color = LV_COLOR_BLACK;
  411db0:	81e3      	strh	r3, [r4, #14]
    dsc->pattern_recolor = LV_COLOR_BLACK;
  411db2:	86a3      	strh	r3, [r4, #52]	; 0x34
    dsc->value_color = LV_COLOR_BLACK;
  411db4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    dsc->shadow_color = LV_COLOR_BLACK;
  411db8:	8423      	strh	r3, [r4, #32]
    dsc->bg_grad_color_stop = 0xFF;
  411dba:	23ff      	movs	r3, #255	; 0xff
  411dbc:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
  411dbe:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
  411dc0:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
  411dc2:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
  411dc4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
  411dc8:	4a06      	ldr	r2, [pc, #24]	; (411de4 <lv_draw_rect_dsc_init+0x48>)
  411dca:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_opa = LV_OPA_COVER;
  411dcc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
  411dd0:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->shadow_opa = LV_OPA_COVER;
  411dd2:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
  411dd6:	230f      	movs	r3, #15
  411dd8:	8263      	strh	r3, [r4, #18]
  411dda:	bd10      	pop	{r4, pc}
  411ddc:	004163f5 	.word	0x004163f5
  411de0:	00426224 	.word	0x00426224
  411de4:	2040002c 	.word	0x2040002c

00411de8 <lv_draw_rect>:
{
  411de8:	b570      	push	{r4, r5, r6, lr}
  411dea:	88c3      	ldrh	r3, [r0, #6]
  411dec:	8844      	ldrh	r4, [r0, #2]
  411dee:	1b1b      	subs	r3, r3, r4
  411df0:	b29b      	uxth	r3, r3
  411df2:	3301      	adds	r3, #1
  411df4:	b21b      	sxth	r3, r3
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
  411df6:	2b00      	cmp	r3, #0
  411df8:	dd25      	ble.n	411e46 <lv_draw_rect+0x5e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  411dfa:	8883      	ldrh	r3, [r0, #4]
  411dfc:	8804      	ldrh	r4, [r0, #0]
  411dfe:	1b1b      	subs	r3, r3, r4
  411e00:	b29b      	uxth	r3, r3
  411e02:	3301      	adds	r3, #1
  411e04:	b21b      	sxth	r3, r3
  411e06:	2b00      	cmp	r3, #0
  411e08:	dd1d      	ble.n	411e46 <lv_draw_rect+0x5e>
  411e0a:	4616      	mov	r6, r2
  411e0c:	460d      	mov	r5, r1
  411e0e:	4604      	mov	r4, r0
    draw_shadow(coords, clip, dsc);
  411e10:	4b0d      	ldr	r3, [pc, #52]	; (411e48 <lv_draw_rect+0x60>)
  411e12:	4798      	blx	r3
    draw_bg(coords, clip, dsc);
  411e14:	4632      	mov	r2, r6
  411e16:	4629      	mov	r1, r5
  411e18:	4620      	mov	r0, r4
  411e1a:	4b0c      	ldr	r3, [pc, #48]	; (411e4c <lv_draw_rect+0x64>)
  411e1c:	4798      	blx	r3
    draw_pattern(coords, clip, dsc);
  411e1e:	4632      	mov	r2, r6
  411e20:	4629      	mov	r1, r5
  411e22:	4620      	mov	r0, r4
  411e24:	4b0a      	ldr	r3, [pc, #40]	; (411e50 <lv_draw_rect+0x68>)
  411e26:	4798      	blx	r3
    draw_border(coords, clip, dsc);
  411e28:	4632      	mov	r2, r6
  411e2a:	4629      	mov	r1, r5
  411e2c:	4620      	mov	r0, r4
  411e2e:	4b09      	ldr	r3, [pc, #36]	; (411e54 <lv_draw_rect+0x6c>)
  411e30:	4798      	blx	r3
    draw_value_str(coords, clip, dsc);
  411e32:	4632      	mov	r2, r6
  411e34:	4629      	mov	r1, r5
  411e36:	4620      	mov	r0, r4
  411e38:	4b07      	ldr	r3, [pc, #28]	; (411e58 <lv_draw_rect+0x70>)
  411e3a:	4798      	blx	r3
    draw_outline(coords, clip, dsc);
  411e3c:	4632      	mov	r2, r6
  411e3e:	4629      	mov	r1, r5
  411e40:	4620      	mov	r0, r4
  411e42:	4b06      	ldr	r3, [pc, #24]	; (411e5c <lv_draw_rect+0x74>)
  411e44:	4798      	blx	r3
  411e46:	bd70      	pop	{r4, r5, r6, pc}
  411e48:	0040fb45 	.word	0x0040fb45
  411e4c:	0041164d 	.word	0x0041164d
  411e50:	00411285 	.word	0x00411285
  411e54:	00410f1d 	.word	0x00410f1d
  411e58:	00411559 	.word	0x00411559
  411e5c:	00410e61 	.word	0x00410e61

00411e60 <lv_img_buf_get_px_color>:
 * Not used in other cases.
 * @param safe true: check out of bounds
 * @return color of the point
 */
lv_color_t lv_img_buf_get_px_color(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y, lv_color_t color)
{
  411e60:	b5f0      	push	{r4, r5, r6, r7, lr}
  411e62:	b083      	sub	sp, #12
    lv_color_t p_color = LV_COLOR_BLACK;
  411e64:	2400      	movs	r4, #0
  411e66:	f8ad 4004 	strh.w	r4, [sp, #4]
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411e6a:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED ||
  411e6c:	7804      	ldrb	r4, [r0, #0]
  411e6e:	f004 041f 	and.w	r4, r4, #31
  411e72:	2c06      	cmp	r4, #6
  411e74:	bf18      	it	ne
  411e76:	2c04      	cmpne	r4, #4
  411e78:	d010      	beq.n	411e9c <lv_img_buf_get_px_color+0x3c>
  411e7a:	2c05      	cmp	r4, #5
  411e7c:	d00e      	beq.n	411e9c <lv_img_buf_get_px_color+0x3c>
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
#if LV_COLOR_SIZE == 32
        p_color.ch.alpha = 0xFF; /*Only the color should be get so use a default alpha value*/
#endif
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT) {
  411e7e:	2c07      	cmp	r4, #7
  411e80:	d02b      	beq.n	411eda <lv_img_buf_get_px_color+0x7a>
         * dsc->header.w + 7 means rounding up to 8 because the lines are byte aligned
         * so the possible real width are 8, 16, 24 ...*/
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_2BIT) {
  411e82:	2c08      	cmp	r4, #8
  411e84:	d03f      	beq.n	411f06 <lv_img_buf_get_px_color+0xa6>
         * dsc->header.w + 3 means rounding up to 4 because the lines are byte aligned
         * so the possible real width are 4, 8, 12 ...*/
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_4BIT) {
  411e86:	2c09      	cmp	r4, #9
  411e88:	d055      	beq.n	411f36 <lv_img_buf_get_px_color+0xd6>
         * dsc->header.w + 1 means rounding up to 2 because the lines are byte aligned
         * so the possible real width are 2, 4, 6 ...*/
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
    }
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  411e8a:	2c0a      	cmp	r4, #10
  411e8c:	d06c      	beq.n	411f68 <lv_img_buf_get_px_color+0x108>
        buf_u8 += 4 * 256;
        uint32_t px  = dsc->header.w * y + x;
        p_color.full = buf_u8[px];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411e8e:	3c0b      	subs	r4, #11
  411e90:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  411e92:	2c03      	cmp	r4, #3
  411e94:	d81d      	bhi.n	411ed2 <lv_img_buf_get_px_color+0x72>
        p_color = color;
  411e96:	f8ad 3004 	strh.w	r3, [sp, #4]
  411e9a:	e01a      	b.n	411ed2 <lv_img_buf_get_px_color+0x72>
  411e9c:	4616      	mov	r6, r2
  411e9e:	460f      	mov	r7, r1
  411ea0:	4604      	mov	r4, r0
        uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf) >> 3;
  411ea2:	7800      	ldrb	r0, [r0, #0]
  411ea4:	f000 001f 	and.w	r0, r0, #31
  411ea8:	4b35      	ldr	r3, [pc, #212]	; (411f80 <lv_img_buf_get_px_color+0x120>)
  411eaa:	4798      	blx	r3
  411eac:	f3c0 00c7 	ubfx	r0, r0, #3, #8
        uint32_t px     = dsc->header.w * y * px_size + x * px_size;
  411eb0:	6822      	ldr	r2, [r4, #0]
  411eb2:	f3c2 228a 	ubfx	r2, r2, #10, #11
  411eb6:	fb02 7206 	mla	r2, r2, r6, r7
        _lv_memcpy_small(&p_color, &buf_u8[px], sizeof(lv_color_t));
  411eba:	fb00 5002 	mla	r0, r0, r2, r5
    uint8_t * d8 = (uint8_t *)dst;
  411ebe:	aa01      	add	r2, sp, #4
  411ec0:	2302      	movs	r3, #2
  411ec2:	e004      	b.n	411ece <lv_img_buf_get_px_color+0x6e>
        *d8 = *s8;
  411ec4:	f810 1b01 	ldrb.w	r1, [r0], #1
  411ec8:	f802 1b01 	strb.w	r1, [r2], #1
        len--;
  411ecc:	3b01      	subs	r3, #1
    while(len) {
  411ece:	2b00      	cmp	r3, #0
  411ed0:	d1f8      	bne.n	411ec4 <lv_img_buf_get_px_color+0x64>
    }
    return p_color;
}
  411ed2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  411ed6:	b003      	add	sp, #12
  411ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint8_t bit = x & 0x7;
  411eda:	f001 0407 	and.w	r4, r1, #7
        uint32_t px  = ((dsc->header.w + 7) >> 3) * y + x;
  411ede:	6800      	ldr	r0, [r0, #0]
  411ee0:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411ee4:	3007      	adds	r0, #7
  411ee6:	10c0      	asrs	r0, r0, #3
  411ee8:	fb00 f202 	mul.w	r2, r0, r2
  411eec:	eb02 02e1 	add.w	r2, r2, r1, asr #3
        p_color.full = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411ef0:	18a8      	adds	r0, r5, r2
  411ef2:	7a03      	ldrb	r3, [r0, #8]
  411ef4:	f1c4 0207 	rsb	r2, r4, #7
  411ef8:	2101      	movs	r1, #1
  411efa:	4091      	lsls	r1, r2
  411efc:	400b      	ands	r3, r1
  411efe:	4113      	asrs	r3, r2
  411f00:	f8ad 3004 	strh.w	r3, [sp, #4]
  411f04:	e7e5      	b.n	411ed2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x3) * 2;
  411f06:	f001 0303 	and.w	r3, r1, #3
  411f0a:	005b      	lsls	r3, r3, #1
        uint32_t px  = ((dsc->header.w + 3) >> 2) * y + x;
  411f0c:	6800      	ldr	r0, [r0, #0]
  411f0e:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411f12:	3003      	adds	r0, #3
  411f14:	1080      	asrs	r0, r0, #2
  411f16:	fb00 f202 	mul.w	r2, r0, r2
  411f1a:	eb02 02a1 	add.w	r2, r2, r1, asr #2
        p_color.full = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  411f1e:	18a8      	adds	r0, r5, r2
  411f20:	7c02      	ldrb	r2, [r0, #16]
  411f22:	f1c3 0306 	rsb	r3, r3, #6
  411f26:	2103      	movs	r1, #3
  411f28:	4099      	lsls	r1, r3
  411f2a:	400a      	ands	r2, r1
  411f2c:	fa42 f303 	asr.w	r3, r2, r3
  411f30:	f8ad 3004 	strh.w	r3, [sp, #4]
  411f34:	e7cd      	b.n	411ed2 <lv_img_buf_get_px_color+0x72>
        uint8_t bit = (x & 0x1) * 4;
  411f36:	f001 0301 	and.w	r3, r1, #1
  411f3a:	009b      	lsls	r3, r3, #2
        uint32_t px  = ((dsc->header.w + 1) >> 1) * y + x;
  411f3c:	6800      	ldr	r0, [r0, #0]
  411f3e:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411f42:	3001      	adds	r0, #1
  411f44:	1040      	asrs	r0, r0, #1
  411f46:	fb00 f202 	mul.w	r2, r0, r2
  411f4a:	eb02 0261 	add.w	r2, r2, r1, asr #1
        p_color.full = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  411f4e:	18a8      	adds	r0, r5, r2
  411f50:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  411f54:	f1c3 0304 	rsb	r3, r3, #4
  411f58:	210f      	movs	r1, #15
  411f5a:	4099      	lsls	r1, r3
  411f5c:	400a      	ands	r2, r1
  411f5e:	fa42 f303 	asr.w	r3, r2, r3
  411f62:	f8ad 3004 	strh.w	r3, [sp, #4]
  411f66:	e7b4      	b.n	411ed2 <lv_img_buf_get_px_color+0x72>
        uint32_t px  = dsc->header.w * y + x;
  411f68:	6800      	ldr	r0, [r0, #0]
  411f6a:	f3c0 208a 	ubfx	r0, r0, #10, #11
  411f6e:	fb00 1202 	mla	r2, r0, r2, r1
        p_color.full = buf_u8[px];
  411f72:	18a8      	adds	r0, r5, r2
  411f74:	f890 3400 	ldrb.w	r3, [r0, #1024]	; 0x400
  411f78:	f8ad 3004 	strh.w	r3, [sp, #4]
  411f7c:	e7a9      	b.n	411ed2 <lv_img_buf_get_px_color+0x72>
  411f7e:	bf00      	nop
  411f80:	0040cdf9 	.word	0x0040cdf9

00411f84 <lv_img_buf_get_px_alpha>:
 * @param y x coordinate of the point to set
 * @param safe true: check out of bounds
 * @return alpha value of the point
 */
lv_opa_t lv_img_buf_get_px_alpha(lv_img_dsc_t * dsc, lv_coord_t x, lv_coord_t y)
{
  411f84:	b5f0      	push	{r4, r5, r6, r7, lr}
  411f86:	b085      	sub	sp, #20
  411f88:	4604      	mov	r4, r0
  411f8a:	460e      	mov	r6, r1
  411f8c:	4617      	mov	r7, r2
    uint8_t * buf_u8 = (uint8_t *)dsc->data;
  411f8e:	6885      	ldr	r5, [r0, #8]

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA) {
  411f90:	7803      	ldrb	r3, [r0, #0]
  411f92:	f003 031f 	and.w	r3, r3, #31
  411f96:	2b05      	cmp	r3, #5
  411f98:	d00a      	beq.n	411fb0 <lv_img_buf_get_px_alpha+0x2c>
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT) {
  411f9a:	2b0b      	cmp	r3, #11
  411f9c:	d012      	beq.n	411fc4 <lv_img_buf_get_px_alpha+0x40>
         * so the possible real width are 8 ,16, 24 ...*/
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_2BIT) {
  411f9e:	2b0c      	cmp	r3, #12
  411fa0:	d029      	beq.n	411ff6 <lv_img_buf_get_px_alpha+0x72>
         * so the possible real width are 4 ,8, 12 ...*/
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_4BIT) {
  411fa2:	2b0d      	cmp	r3, #13
  411fa4:	d043      	beq.n	41202e <lv_img_buf_get_px_alpha+0xaa>
         * so the possible real width are 2 ,4, 6 ...*/
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
        return opa_table[px_opa];
    }
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  411fa6:	2b0e      	cmp	r3, #14
  411fa8:	d05f      	beq.n	41206a <lv_img_buf_get_px_alpha+0xe6>
        uint32_t px = dsc->header.w * y + x;
        return buf_u8[px];
    }

    return LV_OPA_COVER;
  411faa:	20ff      	movs	r0, #255	; 0xff
}
  411fac:	b005      	add	sp, #20
  411fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t px = dsc->header.w * y * LV_IMG_PX_SIZE_ALPHA_BYTE + x * LV_IMG_PX_SIZE_ALPHA_BYTE;
  411fb0:	6801      	ldr	r1, [r0, #0]
  411fb2:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411fb6:	fb01 6102 	mla	r1, r1, r2, r6
  411fba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
        return buf_u8[px + LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
  411fbe:	440d      	add	r5, r1
  411fc0:	78a8      	ldrb	r0, [r5, #2]
  411fc2:	e7f3      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
        uint8_t bit = x & 0x7;
  411fc4:	f001 0207 	and.w	r2, r1, #7
        uint32_t px    = ((dsc->header.w + 7) >> 3) * y + x;
  411fc8:	6801      	ldr	r1, [r0, #0]
  411fca:	f3c1 218a 	ubfx	r1, r1, #10, #11
  411fce:	3107      	adds	r1, #7
  411fd0:	10c9      	asrs	r1, r1, #3
  411fd2:	fb01 f107 	mul.w	r1, r1, r7
  411fd6:	eb01 01e6 	add.w	r1, r1, r6, asr #3
        uint8_t px_opa = (buf_u8[px] & (1 << (7 - bit))) >> (7 - bit);
  411fda:	5c6b      	ldrb	r3, [r5, r1]
  411fdc:	f1c2 0207 	rsb	r2, r2, #7
  411fe0:	2101      	movs	r1, #1
  411fe2:	4091      	lsls	r1, r2
  411fe4:	400b      	ands	r3, r1
  411fe6:	4113      	asrs	r3, r2
        return px_opa ? LV_OPA_TRANSP : LV_OPA_COVER;
  411fe8:	f013 0fff 	tst.w	r3, #255	; 0xff
  411fec:	d101      	bne.n	411ff2 <lv_img_buf_get_px_alpha+0x6e>
  411fee:	20ff      	movs	r0, #255	; 0xff
  411ff0:	e7dc      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
  411ff2:	2000      	movs	r0, #0
  411ff4:	e7da      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[4] = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  411ff6:	4b20      	ldr	r3, [pc, #128]	; (412078 <lv_img_buf_get_px_alpha+0xf4>)
  411ff8:	681b      	ldr	r3, [r3, #0]
  411ffa:	9300      	str	r3, [sp, #0]
        uint8_t bit = (x & 0x3) * 2;
  411ffc:	f001 0203 	and.w	r2, r1, #3
  412000:	0052      	lsls	r2, r2, #1
        uint32_t px    = ((dsc->header.w + 3) >> 2) * y + x;
  412002:	6801      	ldr	r1, [r0, #0]
  412004:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412008:	3103      	adds	r1, #3
  41200a:	1089      	asrs	r1, r1, #2
  41200c:	fb01 f107 	mul.w	r1, r1, r7
  412010:	eb01 01a6 	add.w	r1, r1, r6, asr #2
        uint8_t px_opa = (buf_u8[px] & (3 << (6 - bit))) >> (6 - bit);
  412014:	5c6b      	ldrb	r3, [r5, r1]
  412016:	f1c2 0206 	rsb	r2, r2, #6
  41201a:	2103      	movs	r1, #3
  41201c:	4091      	lsls	r1, r2
  41201e:	400b      	ands	r3, r1
  412020:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  412022:	aa04      	add	r2, sp, #16
  412024:	fa52 f383 	uxtab	r3, r2, r3
  412028:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  41202c:	e7be      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
        const uint8_t opa_table[16] = {0,  17, 34,  51, /*Opacity mapping with bpp = 4*/
  41202e:	4b13      	ldr	r3, [pc, #76]	; (41207c <lv_img_buf_get_px_alpha+0xf8>)
  412030:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  412032:	f10d 0e10 	add.w	lr, sp, #16
  412036:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        uint8_t bit = (x & 0x1) * 4;
  41203a:	f006 0201 	and.w	r2, r6, #1
  41203e:	0092      	lsls	r2, r2, #2
        uint32_t px    = ((dsc->header.w + 1) >> 1) * y + x;
  412040:	6821      	ldr	r1, [r4, #0]
  412042:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412046:	3101      	adds	r1, #1
  412048:	1049      	asrs	r1, r1, #1
  41204a:	fb01 f107 	mul.w	r1, r1, r7
  41204e:	eb01 0166 	add.w	r1, r1, r6, asr #1
        uint8_t px_opa = (buf_u8[px] & (0xF << (4 - bit))) >> (4 - bit);
  412052:	5c6b      	ldrb	r3, [r5, r1]
  412054:	f1c2 0204 	rsb	r2, r2, #4
  412058:	210f      	movs	r1, #15
  41205a:	4091      	lsls	r1, r2
  41205c:	400b      	ands	r3, r1
  41205e:	4113      	asrs	r3, r2
        return opa_table[px_opa];
  412060:	fa5e f383 	uxtab	r3, lr, r3
  412064:	f813 0c10 	ldrb.w	r0, [r3, #-16]
  412068:	e7a0      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
        uint32_t px = dsc->header.w * y + x;
  41206a:	6801      	ldr	r1, [r0, #0]
  41206c:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412070:	fb01 6102 	mla	r1, r1, r2, r6
        return buf_u8[px];
  412074:	5c68      	ldrb	r0, [r5, r1]
  412076:	e799      	b.n	411fac <lv_img_buf_get_px_alpha+0x28>
  412078:	00426228 	.word	0x00426228
  41207c:	0042622c 	.word	0x0042622c

00412080 <_lv_img_buf_transform_init>:
/**
 * Initialize a descriptor to transform an image
 * @param dsc pointer to an `lv_img_transform_dsc_t` variable whose `cfg` field is initialized
 */
void _lv_img_buf_transform_init(lv_img_transform_dsc_t * dsc)
{
  412080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412084:	4604      	mov	r4, r0
    dsc->tmp.pivot_x_256 = dsc->cfg.pivot_x * 256;
  412086:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41208a:	021b      	lsls	r3, r3, #8
  41208c:	6243      	str	r3, [r0, #36]	; 0x24
    dsc->tmp.pivot_y_256 = dsc->cfg.pivot_y * 256;
  41208e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  412092:	021b      	lsls	r3, r3, #8
  412094:	6283      	str	r3, [r0, #40]	; 0x28

    int32_t angle_low = dsc->cfg.angle / 10;
  412096:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
  41209a:	4e3f      	ldr	r6, [pc, #252]	; (412198 <_lv_img_buf_transform_init+0x118>)
  41209c:	fb86 3200 	smull	r3, r2, r6, r0
  4120a0:	17c3      	asrs	r3, r0, #31
  4120a2:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
  4120a6:	b21b      	sxth	r3, r3
    int32_t angle_high = angle_low + 1;
  4120a8:	f103 0901 	add.w	r9, r3, #1
    int32_t angle_rem = dsc->cfg.angle  - (angle_low * 10);
  4120ac:	f06f 0709 	mvn.w	r7, #9
  4120b0:	fb07 0703 	mla	r7, r7, r3, r0

    int32_t s1 = _lv_trigo_sin(-angle_low);
  4120b4:	b29d      	uxth	r5, r3
  4120b6:	4268      	negs	r0, r5
  4120b8:	b200      	sxth	r0, r0
  4120ba:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 4121a4 <_lv_img_buf_transform_init+0x124>
  4120be:	47d0      	blx	sl
  4120c0:	4680      	mov	r8, r0
    int32_t s2 = _lv_trigo_sin(-angle_high);
  4120c2:	fa1f f989 	uxth.w	r9, r9
  4120c6:	f1c9 0000 	rsb	r0, r9, #0
  4120ca:	b200      	sxth	r0, r0
  4120cc:	47d0      	blx	sl
  4120ce:	4683      	mov	fp, r0

    int32_t c1 = _lv_trigo_sin(-angle_low + 90);
  4120d0:	f1c5 005a 	rsb	r0, r5, #90	; 0x5a
  4120d4:	b200      	sxth	r0, r0
  4120d6:	47d0      	blx	sl
  4120d8:	4605      	mov	r5, r0
    int32_t c2 = _lv_trigo_sin(-angle_high + 90);
  4120da:	f1c9 005a 	rsb	r0, r9, #90	; 0x5a
  4120de:	b200      	sxth	r0, r0
  4120e0:	47d0      	blx	sl

    dsc->tmp.sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  4120e2:	f1c7 020a 	rsb	r2, r7, #10
  4120e6:	fb0b f307 	mul.w	r3, fp, r7
  4120ea:	fb02 3308 	mla	r3, r2, r8, r3
  4120ee:	fb86 e103 	smull	lr, r1, r6, r3
  4120f2:	17db      	asrs	r3, r3, #31
  4120f4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    dsc->tmp.cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  4120f8:	fb00 f007 	mul.w	r0, r0, r7
  4120fc:	fb02 0005 	mla	r0, r2, r5, r0
  412100:	fb86 2600 	smull	r2, r6, r6, r0
  412104:	17c0      	asrs	r0, r0, #31
  412106:	ebc0 00a6 	rsb	r0, r0, r6, asr #2

    /*Use smaller value to avoid overflow*/
    dsc->tmp.sinma = dsc->tmp.sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  41210a:	115b      	asrs	r3, r3, #5
  41210c:	62e3      	str	r3, [r4, #44]	; 0x2c
    dsc->tmp.cosma = dsc->tmp.cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  41210e:	1140      	asrs	r0, r0, #5
  412110:	6320      	str	r0, [r4, #48]	; 0x30

    dsc->tmp.chroma_keyed = lv_img_cf_is_chroma_keyed(dsc->cfg.cf) ? 1 : 0;
  412112:	7ca0      	ldrb	r0, [r4, #18]
  412114:	4b21      	ldr	r3, [pc, #132]	; (41219c <_lv_img_buf_transform_init+0x11c>)
  412116:	4798      	blx	r3
  412118:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41211c:	f360 0300 	bfi	r3, r0, #0, #1
  412120:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    dsc->tmp.has_alpha = lv_img_cf_has_alpha(dsc->cfg.cf) ? 1 : 0;
  412124:	7ca0      	ldrb	r0, [r4, #18]
  412126:	4b1e      	ldr	r3, [pc, #120]	; (4121a0 <_lv_img_buf_transform_init+0x120>)
  412128:	4798      	blx	r3
  41212a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41212e:	f360 0341 	bfi	r3, r0, #1, #1
  412132:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR || dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  412136:	7ca2      	ldrb	r2, [r4, #18]
  412138:	1f13      	subs	r3, r2, #4
  41213a:	b2db      	uxtb	r3, r3
  41213c:	2b02      	cmp	r3, #2
  41213e:	d924      	bls.n	41218a <_lv_img_buf_transform_init+0x10a>
       dsc->cfg.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
        dsc->tmp.native_color = 1;
    }
    else {
        dsc->tmp.native_color = 0;
  412140:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  412144:	f36f 0382 	bfc	r3, #2, #1
  412148:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    }

    dsc->tmp.img_dsc.data = dsc->cfg.src;
  41214c:	6823      	ldr	r3, [r4, #0]
  41214e:	6223      	str	r3, [r4, #32]
    dsc->tmp.img_dsc.header.always_zero = 0;
  412150:	7e23      	ldrb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.cf = dsc->cfg.cf;
  412152:	f003 031f 	and.w	r3, r3, #31
  412156:	f362 0304 	bfi	r3, r2, #0, #5
  41215a:	7623      	strb	r3, [r4, #24]
    dsc->tmp.img_dsc.header.w = dsc->cfg.src_w;
  41215c:	88a2      	ldrh	r2, [r4, #4]
  41215e:	69a3      	ldr	r3, [r4, #24]
  412160:	f362 2394 	bfi	r3, r2, #10, #11
  412164:	61a3      	str	r3, [r4, #24]
    dsc->tmp.img_dsc.header.h = dsc->cfg.src_h;
  412166:	88e2      	ldrh	r2, [r4, #6]
  412168:	0c1b      	lsrs	r3, r3, #16
  41216a:	f362 134f 	bfi	r3, r2, #5, #11
  41216e:	8363      	strh	r3, [r4, #26]

    /* The inverse of the zoom will be sued during the transformation
     *  + dsc->cfg.zoom / 2 for rounding*/
    dsc->tmp.zoom_inv = (((256 * 256) << _LV_ZOOM_INV_UPSCALE) + dsc->cfg.zoom / 2) / dsc->cfg.zoom;
  412170:	89e2      	ldrh	r2, [r4, #14]
  412172:	0853      	lsrs	r3, r2, #1
  412174:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  412178:	fb93 f3f2 	sdiv	r3, r3, r2
  41217c:	63a3      	str	r3, [r4, #56]	; 0x38

    dsc->res.opa = LV_OPA_COVER;
  41217e:	23ff      	movs	r3, #255	; 0xff
  412180:	75a3      	strb	r3, [r4, #22]
    dsc->res.color = dsc->cfg.color;
  412182:	8a23      	ldrh	r3, [r4, #16]
  412184:	82a3      	strh	r3, [r4, #20]
  412186:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dsc->tmp.native_color = 1;
  41218a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41218e:	f043 0304 	orr.w	r3, r3, #4
  412192:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  412196:	e7d9      	b.n	41214c <_lv_img_buf_transform_init+0xcc>
  412198:	66666667 	.word	0x66666667
  41219c:	0040ce2b 	.word	0x0040ce2b
  4121a0:	0040ce3f 	.word	0x0040ce3f
  4121a4:	00415d51 	.word	0x00415d51

004121a8 <_lv_img_buf_get_transformed_area>:
 * @param zoom zoom, (256 no zoom)
 * @param pivot x,y pivot coordinates of rotation
 */
void _lv_img_buf_get_transformed_area(lv_area_t * res, lv_coord_t w, lv_coord_t h, int16_t angle, uint16_t zoom,
                                      const lv_point_t * pivot)
{
  4121a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4121ac:	b083      	sub	sp, #12
  4121ae:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
  4121b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
#if LV_USE_IMG_TRANSFORM
    if(angle == 0 && zoom == LV_IMG_ZOOM_NONE) {
  4121b4:	2b00      	cmp	r3, #0
  4121b6:	bf08      	it	eq
  4121b8:	f5be 7f80 	cmpeq.w	lr, #256	; 0x100
  4121bc:	d109      	bne.n	4121d2 <_lv_img_buf_get_transformed_area+0x2a>
        res->x1 = 0;
  4121be:	2300      	movs	r3, #0
  4121c0:	8003      	strh	r3, [r0, #0]
        res->y1 = 0;
  4121c2:	8043      	strh	r3, [r0, #2]
        res->x2 = w - 1;
  4121c4:	3901      	subs	r1, #1
  4121c6:	8081      	strh	r1, [r0, #4]
        res->y2 = h - 1;
  4121c8:	3a01      	subs	r2, #1
  4121ca:	80c2      	strh	r2, [r0, #6]
    res->x1 = 0;
    res->y1 = 0;
    res->x2 = w - 1;
    res->y2 = h - 1;
#endif
}
  4121cc:	b003      	add	sp, #12
  4121ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4121d2:	461f      	mov	r7, r3
    res->x1 = (((-pivot->x) * zoom) >> 8) - 1;
  4121d4:	f9b5 6000 	ldrsh.w	r6, [r5]
  4121d8:	4276      	negs	r6, r6
  4121da:	fb0e f606 	mul.w	r6, lr, r6
  4121de:	1236      	asrs	r6, r6, #8
  4121e0:	3e01      	subs	r6, #1
  4121e2:	b2b6      	uxth	r6, r6
  4121e4:	8006      	strh	r6, [r0, #0]
    res->y1 = (((-pivot->y) * zoom) >> 8) - 1;
  4121e6:	f9b5 4002 	ldrsh.w	r4, [r5, #2]
  4121ea:	4264      	negs	r4, r4
  4121ec:	fb04 f40e 	mul.w	r4, r4, lr
  4121f0:	1224      	asrs	r4, r4, #8
  4121f2:	3c01      	subs	r4, #1
  4121f4:	b2a4      	uxth	r4, r4
  4121f6:	8044      	strh	r4, [r0, #2]
    res->x2 = (((w - pivot->x) * zoom) >> 8) + 2;
  4121f8:	f9b5 3000 	ldrsh.w	r3, [r5]
  4121fc:	1ac9      	subs	r1, r1, r3
  4121fe:	fb01 f10e 	mul.w	r1, r1, lr
  412202:	1209      	asrs	r1, r1, #8
  412204:	3102      	adds	r1, #2
  412206:	b289      	uxth	r1, r1
  412208:	8081      	strh	r1, [r0, #4]
    res->y2 = (((h - pivot->y) * zoom) >> 8) + 2;
  41220a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  41220e:	1ad3      	subs	r3, r2, r3
  412210:	fb03 f30e 	mul.w	r3, r3, lr
  412214:	121b      	asrs	r3, r3, #8
  412216:	3302      	adds	r3, #2
  412218:	b29b      	uxth	r3, r3
  41221a:	80c3      	strh	r3, [r0, #6]
    if(angle == 0) {
  41221c:	b967      	cbnz	r7, 412238 <_lv_img_buf_get_transformed_area+0x90>
        res->x1 += pivot->x;
  41221e:	882a      	ldrh	r2, [r5, #0]
  412220:	4416      	add	r6, r2
  412222:	8006      	strh	r6, [r0, #0]
        res->y1 += pivot->y;
  412224:	886a      	ldrh	r2, [r5, #2]
  412226:	4414      	add	r4, r2
  412228:	8044      	strh	r4, [r0, #2]
        res->x2 += pivot->x;
  41222a:	882a      	ldrh	r2, [r5, #0]
  41222c:	4411      	add	r1, r2
  41222e:	8081      	strh	r1, [r0, #4]
        res->y2 += pivot->y;
  412230:	886a      	ldrh	r2, [r5, #2]
  412232:	4413      	add	r3, r2
  412234:	80c3      	strh	r3, [r0, #6]
        return;
  412236:	e7c9      	b.n	4121cc <_lv_img_buf_get_transformed_area+0x24>
  412238:	4604      	mov	r4, r0
    int32_t angle_low = angle / 10;
  41223a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 41238c <_lv_img_buf_get_transformed_area+0x1e4>
  41223e:	fb88 3007 	smull	r3, r0, r8, r7
  412242:	17fe      	asrs	r6, r7, #31
  412244:	ebc6 06a0 	rsb	r6, r6, r0, asr #2
  412248:	b236      	sxth	r6, r6
    int32_t angle_high = angle_low + 1;
  41224a:	f106 0a01 	add.w	sl, r6, #1
    int32_t angle_rem = angle  - (angle_low * 10);
  41224e:	f06f 0009 	mvn.w	r0, #9
  412252:	fb00 7706 	mla	r7, r0, r6, r7
    int32_t s1 = _lv_trigo_sin(angle_low);
  412256:	4630      	mov	r0, r6
  412258:	f8df 9134 	ldr.w	r9, [pc, #308]	; 412390 <_lv_img_buf_get_transformed_area+0x1e8>
  41225c:	47c8      	blx	r9
  41225e:	9001      	str	r0, [sp, #4]
    int32_t s2 = _lv_trigo_sin(angle_high);
  412260:	fa0f f08a 	sxth.w	r0, sl
  412264:	47c8      	blx	r9
  412266:	4683      	mov	fp, r0
    int32_t c1 = _lv_trigo_sin(angle_low + 90);
  412268:	f106 005a 	add.w	r0, r6, #90	; 0x5a
  41226c:	b200      	sxth	r0, r0
  41226e:	47c8      	blx	r9
  412270:	4606      	mov	r6, r0
    int32_t c2 = _lv_trigo_sin(angle_high + 90);
  412272:	f10a 005a 	add.w	r0, sl, #90	; 0x5a
  412276:	b200      	sxth	r0, r0
  412278:	47c8      	blx	r9
    int32_t sinma = (s1 * (10 - angle_rem) + s2 * angle_rem) / 10;
  41227a:	f1c7 030a 	rsb	r3, r7, #10
  41227e:	fb0b fb07 	mul.w	fp, fp, r7
  412282:	9a01      	ldr	r2, [sp, #4]
  412284:	fb03 bb02 	mla	fp, r3, r2, fp
  412288:	fb88 210b 	smull	r2, r1, r8, fp
  41228c:	ea4f 72eb 	mov.w	r2, fp, asr #31
  412290:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    int32_t cosma = (c1 * (10 - angle_rem) + c2 * angle_rem) / 10;
  412294:	fb00 f007 	mul.w	r0, r0, r7
  412298:	fb03 0606 	mla	r6, r3, r6, r0
  41229c:	fb88 3806 	smull	r3, r8, r8, r6
  4122a0:	17f6      	asrs	r6, r6, #31
  4122a2:	ebc6 08a8 	rsb	r8, r6, r8, asr #2
    sinma = sinma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4122a6:	1152      	asrs	r2, r2, #5
    cosma = cosma >> (LV_TRIGO_SHIFT - _LV_TRANSFORM_TRIGO_SHIFT);
  4122a8:	ea4f 1868 	mov.w	r8, r8, asr #5
    xt = res->x1;
  4122ac:	f9b4 0000 	ldrsh.w	r0, [r4]
    yt = res->y1;
  4122b0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    lt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4122b4:	fb00 f608 	mul.w	r6, r0, r8
  4122b8:	fb03 f102 	mul.w	r1, r3, r2
  4122bc:	eba6 0c01 	sub.w	ip, r6, r1
  4122c0:	882f      	ldrh	r7, [r5, #0]
  4122c2:	eb07 2cac 	add.w	ip, r7, ip, asr #10
  4122c6:	fa0f fc8c 	sxth.w	ip, ip
    lt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4122ca:	fb00 f002 	mul.w	r0, r0, r2
  4122ce:	fb03 f308 	mul.w	r3, r3, r8
  4122d2:	eb00 0e03 	add.w	lr, r0, r3
  4122d6:	886d      	ldrh	r5, [r5, #2]
  4122d8:	eb05 2eae 	add.w	lr, r5, lr, asr #10
  4122dc:	fa0f fe8e 	sxth.w	lr, lr
    xt = res->x2;
  4122e0:	f9b4 9004 	ldrsh.w	r9, [r4, #4]
    rt.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  4122e4:	fb09 fb08 	mul.w	fp, r9, r8
  4122e8:	ebab 0101 	sub.w	r1, fp, r1
  4122ec:	eb07 21a1 	add.w	r1, r7, r1, asr #10
  4122f0:	b209      	sxth	r1, r1
    rt.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  4122f2:	fb09 f902 	mul.w	r9, r9, r2
  4122f6:	444b      	add	r3, r9
  4122f8:	eb05 23a3 	add.w	r3, r5, r3, asr #10
  4122fc:	b21b      	sxth	r3, r3
    yt = res->y2;
  4122fe:	f9b4 a006 	ldrsh.w	sl, [r4, #6]
    lb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  412302:	fb0a f202 	mul.w	r2, sl, r2
  412306:	1ab6      	subs	r6, r6, r2
  412308:	eb07 26a6 	add.w	r6, r7, r6, asr #10
  41230c:	b236      	sxth	r6, r6
    lb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  41230e:	fb0a f808 	mul.w	r8, sl, r8
  412312:	4440      	add	r0, r8
  412314:	eb05 20a0 	add.w	r0, r5, r0, asr #10
  412318:	b200      	sxth	r0, r0
    rb.x = ((cosma * xt - sinma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->x;
  41231a:	ebab 0202 	sub.w	r2, fp, r2
  41231e:	eb07 27a2 	add.w	r7, r7, r2, asr #10
  412322:	b23f      	sxth	r7, r7
    rb.y = ((sinma * xt + cosma * yt) >> _LV_TRANSFORM_TRIGO_SHIFT) + pivot->y;
  412324:	44c8      	add	r8, r9
  412326:	eb05 25a8 	add.w	r5, r5, r8, asr #10
  41232a:	b22d      	sxth	r5, r5
    res->x1 = LV_MATH_MIN4(lb.x, lt.x, rb.x, rt.x);
  41232c:	460a      	mov	r2, r1
  41232e:	42b9      	cmp	r1, r7
  412330:	bfa8      	it	ge
  412332:	463a      	movge	r2, r7
  412334:	46e0      	mov	r8, ip
  412336:	45b4      	cmp	ip, r6
  412338:	bfa8      	it	ge
  41233a:	46b0      	movge	r8, r6
  41233c:	4542      	cmp	r2, r8
  41233e:	bfa8      	it	ge
  412340:	4642      	movge	r2, r8
  412342:	8022      	strh	r2, [r4, #0]
    res->x2 = LV_MATH_MAX4(lb.x, lt.x, rb.x, rt.x);
  412344:	42b9      	cmp	r1, r7
  412346:	bfb8      	it	lt
  412348:	4639      	movlt	r1, r7
  41234a:	45b4      	cmp	ip, r6
  41234c:	bfb8      	it	lt
  41234e:	46b4      	movlt	ip, r6
  412350:	458c      	cmp	ip, r1
  412352:	bfb8      	it	lt
  412354:	468c      	movlt	ip, r1
  412356:	f8a4 c004 	strh.w	ip, [r4, #4]
    res->y1 = LV_MATH_MIN4(lb.y, lt.y, rb.y, rt.y);
  41235a:	461a      	mov	r2, r3
  41235c:	42ab      	cmp	r3, r5
  41235e:	bfa8      	it	ge
  412360:	462a      	movge	r2, r5
  412362:	4671      	mov	r1, lr
  412364:	4586      	cmp	lr, r0
  412366:	bfa8      	it	ge
  412368:	4601      	movge	r1, r0
  41236a:	428a      	cmp	r2, r1
  41236c:	bfa8      	it	ge
  41236e:	460a      	movge	r2, r1
  412370:	8062      	strh	r2, [r4, #2]
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
  412372:	429d      	cmp	r5, r3
  412374:	bfb8      	it	lt
  412376:	461d      	movlt	r5, r3
  412378:	4586      	cmp	lr, r0
  41237a:	bfb8      	it	lt
  41237c:	4686      	movlt	lr, r0
  41237e:	45ae      	cmp	lr, r5
  412380:	bfb8      	it	lt
  412382:	46ae      	movlt	lr, r5
  412384:	f8a4 e006 	strh.w	lr, [r4, #6]
  412388:	e720      	b.n	4121cc <_lv_img_buf_get_transformed_area+0x24>
  41238a:	bf00      	nop
  41238c:	66666667 	.word	0x66666667
  412390:	00415d51 	.word	0x00415d51

00412394 <_lv_img_buf_transform_anti_alias>:
/**
 * Continue transformation by taking the neighbors into account
 * @param dsc pointer to the transformation descriptor
 */
bool _lv_img_buf_transform_anti_alias(lv_img_transform_dsc_t * dsc)
{
  412394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412398:	b089      	sub	sp, #36	; 0x24
  41239a:	4604      	mov	r4, r0
    const uint8_t * src_u8 = dsc->cfg.src;
  41239c:	6801      	ldr	r1, [r0, #0]

    /*Get the fractional part of the source pixel*/
    int xs_fract = dsc->tmp.xs & 0xff;
  41239e:	f9b0 603c 	ldrsh.w	r6, [r0, #60]	; 0x3c
  4123a2:	b2f2      	uxtb	r2, r6
    int ys_fract = dsc->tmp.ys & 0xff;
  4123a4:	f9b0 503e 	ldrsh.w	r5, [r0, #62]	; 0x3e
  4123a8:	b2eb      	uxtb	r3, r5
    int32_t xn;      /*x neighbor*/
    lv_opa_t xr; /*x mix ratio*/

    if(xs_fract < 0x70) {
  4123aa:	2a6f      	cmp	r2, #111	; 0x6f
  4123ac:	dc28      	bgt.n	412400 <_lv_img_buf_transform_anti_alias+0x6c>
        xn = - 1;
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  4123ae:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  4123b2:	2a01      	cmp	r2, #1
  4123b4:	d422      	bmi.n	4123fc <_lv_img_buf_transform_anti_alias+0x68>
        xn = - 1;
  4123b6:	f04f 37ff 	mov.w	r7, #4294967295
        xr = xs_fract + 0x80;
  4123ba:	b2f6      	uxtb	r6, r6
  4123bc:	f086 0680 	eor.w	r6, r6, #128	; 0x80
    }

    int32_t yn;      /*x neighbor*/
    lv_opa_t yr; /*x mix ratio*/

    if(ys_fract < 0x70) {
  4123c0:	2b6f      	cmp	r3, #111	; 0x6f
  4123c2:	dc34      	bgt.n	41242e <_lv_img_buf_transform_anti_alias+0x9a>
        yn = - 1;
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  4123c4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  4123c8:	2b01      	cmp	r3, #1
  4123ca:	d42d      	bmi.n	412428 <_lv_img_buf_transform_anti_alias+0x94>
        yn = - 1;
  4123cc:	f04f 38ff 	mov.w	r8, #4294967295

        yr = ys_fract + 0x80;
  4123d0:	b2ed      	uxtb	r5, r5
  4123d2:	f085 0580 	eor.w	r5, r5, #128	; 0x80
    else {
        yn = 0;
        yr = 0xFF;
    }

    lv_color_t c00 = dsc->res.color;
  4123d6:	f8b4 9014 	ldrh.w	r9, [r4, #20]
    lv_color_t c01;
    lv_color_t c10;
    lv_color_t c11;

    lv_opa_t a00 = dsc->res.opa;
  4123da:	f894 a016 	ldrb.w	sl, [r4, #22]
    lv_opa_t a10 = 0;
    lv_opa_t a01 = 0;
    lv_opa_t a11 = 0;

    if(dsc->tmp.native_color) {
  4123de:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4123e2:	f013 0f04 	tst.w	r3, #4
  4123e6:	f000 808b 	beq.w	412500 <_lv_img_buf_transform_anti_alias+0x16c>
        _lv_memcpy_small(&c01, &src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn], sizeof(lv_color_t));
  4123ea:	6c62      	ldr	r2, [r4, #68]	; 0x44
  4123ec:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4123f0:	fb03 2307 	mla	r3, r3, r7, r2
  4123f4:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  4123f6:	a807      	add	r0, sp, #28
  4123f8:	2202      	movs	r2, #2
  4123fa:	e034      	b.n	412466 <_lv_img_buf_transform_anti_alias+0xd2>
        if(dsc->tmp.xs_int + xn < 0) xn = 0;
  4123fc:	2700      	movs	r7, #0
  4123fe:	e7dc      	b.n	4123ba <_lv_img_buf_transform_anti_alias+0x26>
    else if(xs_fract > 0x90) {
  412400:	2a90      	cmp	r2, #144	; 0x90
  412402:	dd0e      	ble.n	412422 <_lv_img_buf_transform_anti_alias+0x8e>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  412404:	f9b0 2040 	ldrsh.w	r2, [r0, #64]	; 0x40
  412408:	3201      	adds	r2, #1
  41240a:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
  41240e:	4282      	cmp	r2, r0
  412410:	da05      	bge.n	41241e <_lv_img_buf_transform_anti_alias+0x8a>
        xn =  1;
  412412:	2701      	movs	r7, #1
        xr = (0xFF - xs_fract) + 0x80;
  412414:	b2f6      	uxtb	r6, r6
  412416:	f1c6 067f 	rsb	r6, r6, #127	; 0x7f
  41241a:	b2f6      	uxtb	r6, r6
  41241c:	e7d0      	b.n	4123c0 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.xs_int + xn >= dsc->cfg.src_w) xn = 0;
  41241e:	2700      	movs	r7, #0
  412420:	e7f8      	b.n	412414 <_lv_img_buf_transform_anti_alias+0x80>
        xr = 0xFF;
  412422:	26ff      	movs	r6, #255	; 0xff
        xn = 0;
  412424:	2700      	movs	r7, #0
  412426:	e7cb      	b.n	4123c0 <_lv_img_buf_transform_anti_alias+0x2c>
        if(dsc->tmp.ys_int + yn < 0) yn = 0;
  412428:	f04f 0800 	mov.w	r8, #0
  41242c:	e7d0      	b.n	4123d0 <_lv_img_buf_transform_anti_alias+0x3c>
    else if(ys_fract > 0x90) {
  41242e:	2b90      	cmp	r3, #144	; 0x90
  412430:	dd10      	ble.n	412454 <_lv_img_buf_transform_anti_alias+0xc0>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  412432:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
  412436:	3301      	adds	r3, #1
  412438:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
  41243c:	4293      	cmp	r3, r2
  41243e:	da06      	bge.n	41244e <_lv_img_buf_transform_anti_alias+0xba>
        yn =  1;
  412440:	f04f 0801 	mov.w	r8, #1
        yr = (0xFF - ys_fract) + 0x80;
  412444:	b2ed      	uxtb	r5, r5
  412446:	f1c5 057f 	rsb	r5, r5, #127	; 0x7f
  41244a:	b2ed      	uxtb	r5, r5
  41244c:	e7c3      	b.n	4123d6 <_lv_img_buf_transform_anti_alias+0x42>
        if(dsc->tmp.ys_int + yn >= dsc->cfg.src_h) yn = 0;
  41244e:	f04f 0800 	mov.w	r8, #0
  412452:	e7f7      	b.n	412444 <_lv_img_buf_transform_anti_alias+0xb0>
        yr = 0xFF;
  412454:	25ff      	movs	r5, #255	; 0xff
        yn = 0;
  412456:	f04f 0800 	mov.w	r8, #0
  41245a:	e7bc      	b.n	4123d6 <_lv_img_buf_transform_anti_alias+0x42>
        *d8 = *s8;
  41245c:	f813 eb01 	ldrb.w	lr, [r3], #1
  412460:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  412464:	3a01      	subs	r2, #1
    while(len) {
  412466:	2a00      	cmp	r2, #0
  412468:	d1f8      	bne.n	41245c <_lv_img_buf_transform_anti_alias+0xc8>
        _lv_memcpy_small(&c10, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn], sizeof(lv_color_t));
  41246a:	6c62      	ldr	r2, [r4, #68]	; 0x44
  41246c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  412470:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  412474:	fb03 f300 	mul.w	r3, r3, r0
  412478:	fb03 2308 	mla	r3, r3, r8, r2
  41247c:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  41247e:	a806      	add	r0, sp, #24
  412480:	2202      	movs	r2, #2
  412482:	e004      	b.n	41248e <_lv_img_buf_transform_anti_alias+0xfa>
        *d8 = *s8;
  412484:	f813 eb01 	ldrb.w	lr, [r3], #1
  412488:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  41248c:	3a01      	subs	r2, #1
    while(len) {
  41248e:	2a00      	cmp	r2, #0
  412490:	d1f8      	bne.n	412484 <_lv_img_buf_transform_anti_alias+0xf0>
        _lv_memcpy_small(&c11, &src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn],
  412492:	6c60      	ldr	r0, [r4, #68]	; 0x44
  412494:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
  412498:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  41249c:	fb03 f302 	mul.w	r3, r3, r2
  4124a0:	fb03 f308 	mul.w	r3, r3, r8
  4124a4:	fb02 3307 	mla	r3, r2, r7, r3
  4124a8:	4403      	add	r3, r0
  4124aa:	440b      	add	r3, r1
    uint8_t * d8 = (uint8_t *)dst;
  4124ac:	a805      	add	r0, sp, #20
  4124ae:	2202      	movs	r2, #2
  4124b0:	e004      	b.n	4124bc <_lv_img_buf_transform_anti_alias+0x128>
        *d8 = *s8;
  4124b2:	f813 eb01 	ldrb.w	lr, [r3], #1
  4124b6:	f800 eb01 	strb.w	lr, [r0], #1
        len--;
  4124ba:	3a01      	subs	r2, #1
    while(len) {
  4124bc:	2a00      	cmp	r2, #0
  4124be:	d1f8      	bne.n	4124b2 <_lv_img_buf_transform_anti_alias+0x11e>
                         sizeof(lv_color_t));
        if(dsc->tmp.has_alpha) {
  4124c0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4124c4:	f013 0f02 	tst.w	r3, #2
  4124c8:	d06a      	beq.n	4125a0 <_lv_img_buf_transform_anti_alias+0x20c>
            a10 = src_u8[dsc->tmp.pxi + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  4124ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
  4124cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
  4124d0:	fb03 f207 	mul.w	r2, r3, r7
  4124d4:	1887      	adds	r7, r0, r2
  4124d6:	441f      	add	r7, r3
  4124d8:	3f01      	subs	r7, #1
  4124da:	f811 b007 	ldrb.w	fp, [r1, r7]
            a01 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size - 1];
  4124de:	f9b4 7004 	ldrsh.w	r7, [r4, #4]
  4124e2:	fb07 f703 	mul.w	r7, r7, r3
  4124e6:	fb07 f808 	mul.w	r8, r7, r8
  4124ea:	eb00 0708 	add.w	r7, r0, r8
  4124ee:	441f      	add	r7, r3
  4124f0:	3f01      	subs	r7, #1
  4124f2:	5dcf      	ldrb	r7, [r1, r7]
            a11 = src_u8[dsc->tmp.pxi + dsc->cfg.src_w * dsc->tmp.px_size * yn + dsc->tmp.px_size * xn + dsc->tmp.px_size - 1];
  4124f4:	4442      	add	r2, r8
  4124f6:	4402      	add	r2, r0
  4124f8:	4413      	add	r3, r2
  4124fa:	3b01      	subs	r3, #1
  4124fc:	5cc8      	ldrb	r0, [r1, r3]
  4124fe:	e052      	b.n	4125a6 <_lv_img_buf_transform_anti_alias+0x212>
        }
    }
    else {
        c01 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int, dsc->cfg.color);
  412500:	f104 0318 	add.w	r3, r4, #24
  412504:	4618      	mov	r0, r3
  412506:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  41250a:	b2bf      	uxth	r7, r7
  41250c:	4439      	add	r1, r7
  41250e:	8a23      	ldrh	r3, [r4, #16]
  412510:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
  412514:	b209      	sxth	r1, r1
  412516:	9001      	str	r0, [sp, #4]
  412518:	f8df b300 	ldr.w	fp, [pc, #768]	; 41281c <_lv_img_buf_transform_anti_alias+0x488>
  41251c:	47d8      	blx	fp
  41251e:	f8ad 001c 	strh.w	r0, [sp, #28]
        c10 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn, dsc->cfg.color);
  412522:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412526:	fa1f f888 	uxth.w	r8, r8
  41252a:	4442      	add	r2, r8
  41252c:	8a23      	ldrh	r3, [r4, #16]
  41252e:	b212      	sxth	r2, r2
  412530:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
  412534:	9801      	ldr	r0, [sp, #4]
  412536:	47d8      	blx	fp
  412538:	f8ad 0018 	strh.w	r0, [sp, #24]
        c11 = lv_img_buf_get_px_color(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn, dsc->cfg.color);
  41253c:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
  412540:	4439      	add	r1, r7
  412542:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
  412546:	4442      	add	r2, r8
  412548:	8a23      	ldrh	r3, [r4, #16]
  41254a:	b212      	sxth	r2, r2
  41254c:	b209      	sxth	r1, r1
  41254e:	9801      	ldr	r0, [sp, #4]
  412550:	47d8      	blx	fp
  412552:	f8ad 0014 	strh.w	r0, [sp, #20]

        if(dsc->tmp.has_alpha) {
  412556:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  41255a:	f013 0f02 	tst.w	r3, #2
  41255e:	d058      	beq.n	412612 <_lv_img_buf_transform_anti_alias+0x27e>
            a10 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int);
  412560:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
  412564:	9202      	str	r2, [sp, #8]
  412566:	fa17 f782 	uxtah	r7, r7, r2
  41256a:	b23f      	sxth	r7, r7
  41256c:	463b      	mov	r3, r7
  41256e:	f9b4 7042 	ldrsh.w	r7, [r4, #66]	; 0x42
  412572:	463a      	mov	r2, r7
  412574:	9303      	str	r3, [sp, #12]
  412576:	4619      	mov	r1, r3
  412578:	9801      	ldr	r0, [sp, #4]
  41257a:	4ba7      	ldr	r3, [pc, #668]	; (412818 <_lv_img_buf_transform_anti_alias+0x484>)
  41257c:	4798      	blx	r3
  41257e:	4683      	mov	fp, r0
            a01 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int, dsc->tmp.ys_int + yn);
  412580:	fa18 f887 	uxtah	r8, r8, r7
  412584:	fa0f f888 	sxth.w	r8, r8
  412588:	4642      	mov	r2, r8
  41258a:	9902      	ldr	r1, [sp, #8]
  41258c:	9801      	ldr	r0, [sp, #4]
  41258e:	4fa2      	ldr	r7, [pc, #648]	; (412818 <_lv_img_buf_transform_anti_alias+0x484>)
  412590:	47b8      	blx	r7
  412592:	4607      	mov	r7, r0
            a11 = lv_img_buf_get_px_alpha(&dsc->tmp.img_dsc, dsc->tmp.xs_int + xn, dsc->tmp.ys_int + yn);
  412594:	4642      	mov	r2, r8
  412596:	9903      	ldr	r1, [sp, #12]
  412598:	9801      	ldr	r0, [sp, #4]
  41259a:	4b9f      	ldr	r3, [pc, #636]	; (412818 <_lv_img_buf_transform_anti_alias+0x484>)
  41259c:	4798      	blx	r3
  41259e:	e002      	b.n	4125a6 <_lv_img_buf_transform_anti_alias+0x212>
    lv_opa_t a11 = 0;
  4125a0:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  4125a2:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  4125a4:	4683      	mov	fp, r0
        }
    }

    lv_opa_t xr0 = xr;
    lv_opa_t xr1 = xr;
    if(dsc->tmp.has_alpha) {
  4125a6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
  4125aa:	f013 0f02 	tst.w	r3, #2
  4125ae:	d036      	beq.n	41261e <_lv_img_buf_transform_anti_alias+0x28a>
        lv_opa_t a0 = (a00 * xr + (a10 * (255 - xr))) >> 8;
  4125b0:	f1c6 03ff 	rsb	r3, r6, #255	; 0xff
  4125b4:	fb03 f10b 	mul.w	r1, r3, fp
  4125b8:	fb06 110a 	mla	r1, r6, sl, r1
  4125bc:	f3c1 2107 	ubfx	r1, r1, #8, #8
        lv_opa_t a1 = (a01 * xr + (a11 * (255 - xr))) >> 8;
  4125c0:	fb03 f300 	mul.w	r3, r3, r0
  4125c4:	fb06 3307 	mla	r3, r6, r7, r3
  4125c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
        dsc->res.opa = (a0 * yr + (a1 * (255 - yr))) >> 8;
  4125cc:	f1c5 02ff 	rsb	r2, r5, #255	; 0xff
  4125d0:	fb02 f203 	mul.w	r2, r2, r3
  4125d4:	fb05 2201 	mla	r2, r5, r1, r2
  4125d8:	1212      	asrs	r2, r2, #8
  4125da:	75a2      	strb	r2, [r4, #22]

        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  4125dc:	2902      	cmp	r1, #2
  4125de:	bf98      	it	ls
  4125e0:	2b02      	cmpls	r3, #2
  4125e2:	f240 8117 	bls.w	412814 <_lv_img_buf_transform_anti_alias+0x480>
        if(a0 <= LV_OPA_MIN) yr = LV_OPA_TRANSP;
  4125e6:	2902      	cmp	r1, #2
  4125e8:	d800      	bhi.n	4125ec <_lv_img_buf_transform_anti_alias+0x258>
  4125ea:	2500      	movs	r5, #0
        if(a1 <= LV_OPA_MIN) yr = LV_OPA_COVER;
  4125ec:	2b02      	cmp	r3, #2
  4125ee:	d800      	bhi.n	4125f2 <_lv_img_buf_transform_anti_alias+0x25e>
  4125f0:	25ff      	movs	r5, #255	; 0xff
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  4125f2:	f1ba 0f02 	cmp.w	sl, #2
  4125f6:	d910      	bls.n	41261a <_lv_img_buf_transform_anti_alias+0x286>
    lv_opa_t xr0 = xr;
  4125f8:	4632      	mov	r2, r6
        if(a10 <= LV_OPA_MIN) xr0 = LV_OPA_COVER;
  4125fa:	f1bb 0f02 	cmp.w	fp, #2
  4125fe:	d800      	bhi.n	412602 <_lv_img_buf_transform_anti_alias+0x26e>
  412600:	22ff      	movs	r2, #255	; 0xff
        if(a01 <= LV_OPA_MIN) xr1 = LV_OPA_TRANSP;
  412602:	2f02      	cmp	r7, #2
  412604:	d800      	bhi.n	412608 <_lv_img_buf_transform_anti_alias+0x274>
  412606:	2600      	movs	r6, #0
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  412608:	2802      	cmp	r0, #2
  41260a:	d962      	bls.n	4126d2 <_lv_img_buf_transform_anti_alias+0x33e>
  41260c:	4633      	mov	r3, r6
  41260e:	4616      	mov	r6, r2
  412610:	e008      	b.n	412624 <_lv_img_buf_transform_anti_alias+0x290>
    lv_opa_t a11 = 0;
  412612:	2000      	movs	r0, #0
    lv_opa_t a01 = 0;
  412614:	4607      	mov	r7, r0
    lv_opa_t a10 = 0;
  412616:	4683      	mov	fp, r0
  412618:	e7c5      	b.n	4125a6 <_lv_img_buf_transform_anti_alias+0x212>
        if(a00 <= LV_OPA_MIN) xr0 = LV_OPA_TRANSP;
  41261a:	2200      	movs	r2, #0
  41261c:	e7ed      	b.n	4125fa <_lv_img_buf_transform_anti_alias+0x266>
    }
    else {
        xr0 = xr;
        xr1 = xr;
        dsc->res.opa = LV_OPA_COVER;
  41261e:	23ff      	movs	r3, #255	; 0xff
  412620:	75a3      	strb	r3, [r4, #22]
        xr1 = xr;
  412622:	4633      	mov	r3, r6
    }

    lv_color_t c0;
    if(xr0 == LV_OPA_TRANSP) c0 = c01;
  412624:	2e00      	cmp	r6, #0
  412626:	d157      	bne.n	4126d8 <_lv_img_buf_transform_anti_alias+0x344>
  412628:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    else if(xr0 == LV_OPA_COVER) c0 = c00;
    else c0 = lv_color_mix(c00, c01, xr0);

    lv_color_t c1;
    if(xr1 == LV_OPA_TRANSP) c1 = c11;
  41262c:	2b00      	cmp	r3, #0
  41262e:	f040 809c 	bne.w	41276a <_lv_img_buf_transform_anti_alias+0x3d6>
  412632:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    else if(xr1 == LV_OPA_COVER) c1 = c10;
    else c1 = lv_color_mix(c10, c11, xr1);

    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412636:	2d00      	cmp	r5, #0
  412638:	f000 80e5 	beq.w	412806 <_lv_img_buf_transform_anti_alias+0x472>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  41263c:	2dff      	cmp	r5, #255	; 0xff
  41263e:	f000 80e5 	beq.w	41280c <_lv_img_buf_transform_anti_alias+0x478>
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412642:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  412646:	f3c3 01c4 	ubfx	r1, r3, #3, #5
  41264a:	f1c5 00ff 	rsb	r0, r5, #255	; 0xff
  41264e:	fb00 f101 	mul.w	r1, r0, r1
  412652:	fb05 1202 	mla	r2, r5, r2, r1
  412656:	3280      	adds	r2, #128	; 0x80
  412658:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41265c:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412660:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412664:	f04f 0100 	mov.w	r1, #0
  412668:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41266c:	f009 0607 	and.w	r6, r9, #7
  412670:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412674:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
  412678:	f003 0707 	and.w	r7, r3, #7
  41267c:	f3c3 3642 	ubfx	r6, r3, #13, #3
  412680:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  412684:	fb06 f600 	mul.w	r6, r6, r0
  412688:	fb02 6205 	mla	r2, r2, r5, r6
  41268c:	3280      	adds	r2, #128	; 0x80
  41268e:	eb02 2602 	add.w	r6, r2, r2, lsl #8
  412692:	eb02 12c6 	add.w	r2, r2, r6, lsl #7
  412696:	f3c2 6682 	ubfx	r6, r2, #26, #3
  41269a:	f366 0102 	bfi	r1, r6, #0, #3
  41269e:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4126a2:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4126a6:	f3c9 2904 	ubfx	r9, r9, #8, #5
  4126aa:	f3c3 2304 	ubfx	r3, r3, #8, #5
  4126ae:	fb03 f000 	mul.w	r0, r3, r0
  4126b2:	fb09 0505 	mla	r5, r9, r5, r0
  4126b6:	3580      	adds	r5, #128	; 0x80
  4126b8:	eb05 2305 	add.w	r3, r5, r5, lsl #8
  4126bc:	eb05 15c3 	add.w	r5, r5, r3, lsl #7
  4126c0:	f3c5 55c4 	ubfx	r5, r5, #23, #5
  4126c4:	f365 210c 	bfi	r1, r5, #8, #5
    else dsc->res.color = lv_color_mix(c0, c1, yr);
  4126c8:	82a1      	strh	r1, [r4, #20]

    return true;
  4126ca:	2001      	movs	r0, #1
}
  4126cc:	b009      	add	sp, #36	; 0x24
  4126ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4126d2:	4616      	mov	r6, r2
        if(a11 <= LV_OPA_MIN) xr1 = LV_OPA_COVER;
  4126d4:	23ff      	movs	r3, #255	; 0xff
  4126d6:	e7a5      	b.n	412624 <_lv_img_buf_transform_anti_alias+0x290>
    else if(xr0 == LV_OPA_COVER) c0 = c00;
  4126d8:	2eff      	cmp	r6, #255	; 0xff
  4126da:	d0a7      	beq.n	41262c <_lv_img_buf_transform_anti_alias+0x298>
  4126dc:	f8bd 001c 	ldrh.w	r0, [sp, #28]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  4126e0:	f3c9 02c4 	ubfx	r2, r9, #3, #5
  4126e4:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  4126e8:	f1c6 07ff 	rsb	r7, r6, #255	; 0xff
  4126ec:	fb07 f101 	mul.w	r1, r7, r1
  4126f0:	fb06 1202 	mla	r2, r6, r2, r1
  4126f4:	3280      	adds	r2, #128	; 0x80
  4126f6:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  4126fa:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  4126fe:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412702:	f04f 0100 	mov.w	r1, #0
  412706:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41270a:	f009 0e07 	and.w	lr, r9, #7
  41270e:	f3c9 3242 	ubfx	r2, r9, #13, #3
  412712:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  412716:	f000 0c07 	and.w	ip, r0, #7
  41271a:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  41271e:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  412722:	fb0e fe07 	mul.w	lr, lr, r7
  412726:	fb02 e206 	mla	r2, r2, r6, lr
  41272a:	3280      	adds	r2, #128	; 0x80
  41272c:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  412730:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  412734:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  412738:	f36e 0102 	bfi	r1, lr, #0, #3
  41273c:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  412740:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  412744:	f3c9 2904 	ubfx	r9, r9, #8, #5
  412748:	f3c0 2004 	ubfx	r0, r0, #8, #5
  41274c:	fb00 f707 	mul.w	r7, r0, r7
  412750:	fb09 7606 	mla	r6, r9, r6, r7
  412754:	3680      	adds	r6, #128	; 0x80
  412756:	eb06 2206 	add.w	r2, r6, r6, lsl #8
  41275a:	eb06 16c2 	add.w	r6, r6, r2, lsl #7
  41275e:	f3c6 56c4 	ubfx	r6, r6, #23, #5
  412762:	f366 210c 	bfi	r1, r6, #8, #5
  412766:	4689      	mov	r9, r1
  412768:	e760      	b.n	41262c <_lv_img_buf_transform_anti_alias+0x298>
    else if(xr1 == LV_OPA_COVER) c1 = c10;
  41276a:	2bff      	cmp	r3, #255	; 0xff
  41276c:	d048      	beq.n	412800 <_lv_img_buf_transform_anti_alias+0x46c>
  41276e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  412772:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  412776:	f3c6 02c4 	ubfx	r2, r6, #3, #5
  41277a:	f3c0 01c4 	ubfx	r1, r0, #3, #5
  41277e:	f1c3 07ff 	rsb	r7, r3, #255	; 0xff
  412782:	fb07 f101 	mul.w	r1, r7, r1
  412786:	fb03 1202 	mla	r2, r3, r2, r1
  41278a:	3280      	adds	r2, #128	; 0x80
  41278c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  412790:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  412794:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  412798:	f04f 0100 	mov.w	r1, #0
  41279c:	f362 01c7 	bfi	r1, r2, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  4127a0:	f006 0e07 	and.w	lr, r6, #7
  4127a4:	f3c6 3242 	ubfx	r2, r6, #13, #3
  4127a8:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
  4127ac:	f000 0c07 	and.w	ip, r0, #7
  4127b0:	f3c0 3e42 	ubfx	lr, r0, #13, #3
  4127b4:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
  4127b8:	fb0e fe07 	mul.w	lr, lr, r7
  4127bc:	fb02 e203 	mla	r2, r2, r3, lr
  4127c0:	3280      	adds	r2, #128	; 0x80
  4127c2:	eb02 2e02 	add.w	lr, r2, r2, lsl #8
  4127c6:	eb02 12ce 	add.w	r2, r2, lr, lsl #7
  4127ca:	f3c2 6e82 	ubfx	lr, r2, #26, #3
  4127ce:	f36e 0102 	bfi	r1, lr, #0, #3
  4127d2:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  4127d6:	f362 314f 	bfi	r1, r2, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  4127da:	f3c6 2604 	ubfx	r6, r6, #8, #5
  4127de:	f3c0 2004 	ubfx	r0, r0, #8, #5
  4127e2:	fb00 f707 	mul.w	r7, r0, r7
  4127e6:	fb06 7303 	mla	r3, r6, r3, r7
  4127ea:	3380      	adds	r3, #128	; 0x80
  4127ec:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4127f0:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4127f4:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4127f8:	f363 210c 	bfi	r1, r3, #8, #5
  4127fc:	460b      	mov	r3, r1
  4127fe:	e71a      	b.n	412636 <_lv_img_buf_transform_anti_alias+0x2a2>
  412800:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  412804:	e717      	b.n	412636 <_lv_img_buf_transform_anti_alias+0x2a2>
    if(yr == LV_OPA_TRANSP) dsc->res.color = c1;
  412806:	82a3      	strh	r3, [r4, #20]
    return true;
  412808:	2001      	movs	r0, #1
  41280a:	e75f      	b.n	4126cc <_lv_img_buf_transform_anti_alias+0x338>
    else if(yr == LV_OPA_COVER) dsc->res.color = c0;
  41280c:	f8a4 9014 	strh.w	r9, [r4, #20]
    return true;
  412810:	2001      	movs	r0, #1
  412812:	e75b      	b.n	4126cc <_lv_img_buf_transform_anti_alias+0x338>
        if(a0 <= LV_OPA_MIN && a1 <= LV_OPA_MIN) return false;
  412814:	2000      	movs	r0, #0
  412816:	e759      	b.n	4126cc <_lv_img_buf_transform_anti_alias+0x338>
  412818:	00411f85 	.word	0x00411f85
  41281c:	00411e61 	.word	0x00411e61

00412820 <_lv_img_cache_open>:
 * @param src source of the image. Path to file or pointer to an `lv_img_dsc_t` variable
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
  412820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /*Is the image cached?*/
    lv_img_cache_entry_t * cached_src = NULL;

#if LV_IMG_CACHE_DEF_SIZE
    if(entry_cnt == 0) {
  412824:	4b4c      	ldr	r3, [pc, #304]	; (412958 <_lv_img_cache_open+0x138>)
  412826:	881f      	ldrh	r7, [r3, #0]
  412828:	2f00      	cmp	r7, #0
  41282a:	f000 8091 	beq.w	412950 <_lv_img_cache_open+0x130>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
        return NULL;
    }

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  41282e:	4b4b      	ldr	r3, [pc, #300]	; (41295c <_lv_img_cache_open+0x13c>)
  412830:	681e      	ldr	r6, [r3, #0]

    /*Decrement all lifes. Make the entries older*/
    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  412832:	2300      	movs	r3, #0
  412834:	e001      	b.n	41283a <_lv_img_cache_open+0x1a>
  412836:	3301      	adds	r3, #1
  412838:	b29b      	uxth	r3, r3
  41283a:	42bb      	cmp	r3, r7
  41283c:	d20a      	bcs.n	412854 <_lv_img_cache_open+0x34>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
  41283e:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
  412842:	00ac      	lsls	r4, r5, #2
  412844:	4434      	add	r4, r6
  412846:	6a25      	ldr	r5, [r4, #32]
  412848:	4a45      	ldr	r2, [pc, #276]	; (412960 <_lv_img_cache_open+0x140>)
  41284a:	4295      	cmp	r5, r2
  41284c:	dbf3      	blt.n	412836 <_lv_img_cache_open+0x16>
            cache[i].life -= LV_IMG_CACHE_AGING;
  41284e:	3d01      	subs	r5, #1
  412850:	6225      	str	r5, [r4, #32]
  412852:	e7f0      	b.n	412836 <_lv_img_cache_open+0x16>
  412854:	4688      	mov	r8, r1
  412856:	4607      	mov	r7, r0
  412858:	2400      	movs	r4, #0
  41285a:	e00c      	b.n	412876 <_lv_img_cache_open+0x56>

    for(i = 0; i < entry_cnt; i++) {
        bool match = false;
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
        if(src_type == LV_IMG_SRC_VARIABLE) {
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  41285c:	892a      	ldrh	r2, [r5, #8]
  41285e:	fa1f f388 	uxth.w	r3, r8
  412862:	429a      	cmp	r2, r3
  412864:	d020      	beq.n	4128a8 <_lv_img_cache_open+0x88>
        bool match = false;
  412866:	2300      	movs	r3, #0
  412868:	e002      	b.n	412870 <_lv_img_cache_open+0x50>
        }
        else if(src_type == LV_IMG_SRC_FILE) {
  41286a:	2801      	cmp	r0, #1
  41286c:	d015      	beq.n	41289a <_lv_img_cache_open+0x7a>
        bool match = false;
  41286e:	2300      	movs	r3, #0
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
        }

        if(match) {
  412870:	b9f3      	cbnz	r3, 4128b0 <_lv_img_cache_open+0x90>
    for(i = 0; i < entry_cnt; i++) {
  412872:	3401      	adds	r4, #1
  412874:	b2a4      	uxth	r4, r4
  412876:	4b38      	ldr	r3, [pc, #224]	; (412958 <_lv_img_cache_open+0x138>)
  412878:	881b      	ldrh	r3, [r3, #0]
  41287a:	429c      	cmp	r4, r3
  41287c:	d223      	bcs.n	4128c6 <_lv_img_cache_open+0xa6>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
  41287e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412882:	009d      	lsls	r5, r3, #2
  412884:	4435      	add	r5, r6
  412886:	6868      	ldr	r0, [r5, #4]
  412888:	4b36      	ldr	r3, [pc, #216]	; (412964 <_lv_img_cache_open+0x144>)
  41288a:	4798      	blx	r3
        if(src_type == LV_IMG_SRC_VARIABLE) {
  41288c:	2800      	cmp	r0, #0
  41288e:	d1ec      	bne.n	41286a <_lv_img_cache_open+0x4a>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  412890:	686b      	ldr	r3, [r5, #4]
  412892:	42bb      	cmp	r3, r7
  412894:	d0e2      	beq.n	41285c <_lv_img_cache_open+0x3c>
        bool match = false;
  412896:	2300      	movs	r3, #0
  412898:	e7ea      	b.n	412870 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  41289a:	4639      	mov	r1, r7
  41289c:	6868      	ldr	r0, [r5, #4]
  41289e:	4b32      	ldr	r3, [pc, #200]	; (412968 <_lv_img_cache_open+0x148>)
  4128a0:	4798      	blx	r3
  4128a2:	b118      	cbz	r0, 4128ac <_lv_img_cache_open+0x8c>
        bool match = false;
  4128a4:	2300      	movs	r3, #0
  4128a6:	e7e3      	b.n	412870 <_lv_img_cache_open+0x50>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
  4128a8:	2301      	movs	r3, #1
  4128aa:	e7e1      	b.n	412870 <_lv_img_cache_open+0x50>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
  4128ac:	2301      	movs	r3, #1
  4128ae:	e7df      	b.n	412870 <_lv_img_cache_open+0x50>
            /* If opened increment its life.
             * Image difficult to open should live longer to keep avoid frequent their recaching.
             * Therefore increase `life` with `time_to_open`*/
            cached_src = &cache[i];
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
  4128b0:	696b      	ldr	r3, [r5, #20]
  4128b2:	6a2a      	ldr	r2, [r5, #32]
  4128b4:	4413      	add	r3, r2
  4128b6:	622b      	str	r3, [r5, #32]
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
  4128b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
  4128bc:	dd04      	ble.n	4128c8 <_lv_img_cache_open+0xa8>
  4128be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  4128c2:	622b      	str	r3, [r5, #32]
  4128c4:	e000      	b.n	4128c8 <_lv_img_cache_open+0xa8>
    lv_img_cache_entry_t * cached_src = NULL;
  4128c6:	2500      	movs	r5, #0
            break;
        }
    }

    /*The image is not cached then cache it now*/
    if(cached_src) return cached_src;
  4128c8:	b115      	cbz	r5, 4128d0 <_lv_img_cache_open+0xb0>
    }

    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;

    return cached_src;
}
  4128ca:	4628      	mov	r0, r5
  4128cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4128d0:	4634      	mov	r4, r6
  4128d2:	2301      	movs	r3, #1
  4128d4:	e001      	b.n	4128da <_lv_img_cache_open+0xba>
    for(i = 1; i < entry_cnt; i++) {
  4128d6:	3301      	adds	r3, #1
  4128d8:	b29b      	uxth	r3, r3
  4128da:	4a1f      	ldr	r2, [pc, #124]	; (412958 <_lv_img_cache_open+0x138>)
  4128dc:	8812      	ldrh	r2, [r2, #0]
  4128de:	4293      	cmp	r3, r2
  4128e0:	d209      	bcs.n	4128f6 <_lv_img_cache_open+0xd6>
        if(cache[i].life < cached_src->life) {
  4128e2:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
  4128e6:	008a      	lsls	r2, r1, #2
  4128e8:	4432      	add	r2, r6
  4128ea:	6a10      	ldr	r0, [r2, #32]
  4128ec:	6a21      	ldr	r1, [r4, #32]
  4128ee:	4288      	cmp	r0, r1
  4128f0:	daf1      	bge.n	4128d6 <_lv_img_cache_open+0xb6>
            cached_src = &cache[i];
  4128f2:	4614      	mov	r4, r2
  4128f4:	e7ef      	b.n	4128d6 <_lv_img_cache_open+0xb6>
    if(cached_src->dec_dsc.src) {
  4128f6:	6863      	ldr	r3, [r4, #4]
  4128f8:	b113      	cbz	r3, 412900 <_lv_img_cache_open+0xe0>
        lv_img_decoder_close(&cached_src->dec_dsc);
  4128fa:	4620      	mov	r0, r4
  4128fc:	4b1b      	ldr	r3, [pc, #108]	; (41296c <_lv_img_cache_open+0x14c>)
  4128fe:	4798      	blx	r3
    t_start                          = lv_tick_get();
  412900:	4b1b      	ldr	r3, [pc, #108]	; (412970 <_lv_img_cache_open+0x150>)
  412902:	4798      	blx	r3
  412904:	4606      	mov	r6, r0
    cached_src->dec_dsc.time_to_open = 0;
  412906:	2300      	movs	r3, #0
  412908:	6163      	str	r3, [r4, #20]
    lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
  41290a:	4642      	mov	r2, r8
  41290c:	4639      	mov	r1, r7
  41290e:	4620      	mov	r0, r4
  412910:	4b18      	ldr	r3, [pc, #96]	; (412974 <_lv_img_cache_open+0x154>)
  412912:	4798      	blx	r3
    if(open_res == LV_RES_INV) {
  412914:	b148      	cbz	r0, 41292a <_lv_img_cache_open+0x10a>
    cached_src->life = 0;
  412916:	2300      	movs	r3, #0
  412918:	6223      	str	r3, [r4, #32]
    if(cached_src->dec_dsc.time_to_open == 0) {
  41291a:	6963      	ldr	r3, [r4, #20]
  41291c:	b19b      	cbz	r3, 412946 <_lv_img_cache_open+0x126>
    if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
  41291e:	6963      	ldr	r3, [r4, #20]
  412920:	b9c3      	cbnz	r3, 412954 <_lv_img_cache_open+0x134>
  412922:	2301      	movs	r3, #1
  412924:	6163      	str	r3, [r4, #20]
    return cached_src;
  412926:	4625      	mov	r5, r4
  412928:	e7cf      	b.n	4128ca <_lv_img_cache_open+0xaa>
        lv_img_decoder_close(&cached_src->dec_dsc);
  41292a:	4620      	mov	r0, r4
  41292c:	4b0f      	ldr	r3, [pc, #60]	; (41296c <_lv_img_cache_open+0x14c>)
  41292e:	4798      	blx	r3
        _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412930:	2120      	movs	r1, #32
  412932:	4620      	mov	r0, r4
  412934:	4e10      	ldr	r6, [pc, #64]	; (412978 <_lv_img_cache_open+0x158>)
  412936:	47b0      	blx	r6
        _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
  412938:	2124      	movs	r1, #36	; 0x24
  41293a:	4620      	mov	r0, r4
  41293c:	47b0      	blx	r6
        cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
  41293e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
  412942:	6223      	str	r3, [r4, #32]
        return NULL;
  412944:	e7c1      	b.n	4128ca <_lv_img_cache_open+0xaa>
        cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
  412946:	4630      	mov	r0, r6
  412948:	4b0c      	ldr	r3, [pc, #48]	; (41297c <_lv_img_cache_open+0x15c>)
  41294a:	4798      	blx	r3
  41294c:	6160      	str	r0, [r4, #20]
  41294e:	e7e6      	b.n	41291e <_lv_img_cache_open+0xfe>
        return NULL;
  412950:	2500      	movs	r5, #0
  412952:	e7ba      	b.n	4128ca <_lv_img_cache_open+0xaa>
    return cached_src;
  412954:	4625      	mov	r5, r4
  412956:	e7b8      	b.n	4128ca <_lv_img_cache_open+0xaa>
  412958:	2040c72e 	.word	0x2040c72e
  41295c:	2043a278 	.word	0x2043a278
  412960:	80000002 	.word	0x80000002
  412964:	0040d0bd 	.word	0x0040d0bd
  412968:	00422809 	.word	0x00422809
  41296c:	0041336d 	.word	0x0041336d
  412970:	00414a3d 	.word	0x00414a3d
  412974:	004132ad 	.word	0x004132ad
  412978:	004163f5 	.word	0x004163f5
  41297c:	00414a59 	.word	0x00414a59

00412980 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
  412980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  412984:	4606      	mov	r6, r0
#if LV_IMG_CACHE_DEF_SIZE
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
  412986:	4b11      	ldr	r3, [pc, #68]	; (4129cc <lv_img_cache_invalidate_src+0x4c>)
  412988:	681f      	ldr	r7, [r3, #0]

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
  41298a:	2400      	movs	r4, #0
  41298c:	e00d      	b.n	4129aa <lv_img_cache_invalidate_src+0x2a>
        if(cache[i].dec_dsc.src == src || src == NULL) {
            if(cache[i].dec_dsc.src != NULL) {
  41298e:	b113      	cbz	r3, 412996 <lv_img_cache_invalidate_src+0x16>
                lv_img_decoder_close(&cache[i].dec_dsc);
  412990:	4628      	mov	r0, r5
  412992:	4b0f      	ldr	r3, [pc, #60]	; (4129d0 <lv_img_cache_invalidate_src+0x50>)
  412994:	4798      	blx	r3
            }

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412996:	2120      	movs	r1, #32
  412998:	4628      	mov	r0, r5
  41299a:	f8df 803c 	ldr.w	r8, [pc, #60]	; 4129d8 <lv_img_cache_invalidate_src+0x58>
  41299e:	47c0      	blx	r8
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
  4129a0:	2124      	movs	r1, #36	; 0x24
  4129a2:	4628      	mov	r0, r5
  4129a4:	47c0      	blx	r8
    for(i = 0; i < entry_cnt; i++) {
  4129a6:	3401      	adds	r4, #1
  4129a8:	b2a4      	uxth	r4, r4
  4129aa:	4b0a      	ldr	r3, [pc, #40]	; (4129d4 <lv_img_cache_invalidate_src+0x54>)
  4129ac:	881b      	ldrh	r3, [r3, #0]
  4129ae:	429c      	cmp	r4, r3
  4129b0:	d209      	bcs.n	4129c6 <lv_img_cache_invalidate_src+0x46>
        if(cache[i].dec_dsc.src == src || src == NULL) {
  4129b2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4129b6:	0098      	lsls	r0, r3, #2
  4129b8:	183d      	adds	r5, r7, r0
  4129ba:	686b      	ldr	r3, [r5, #4]
  4129bc:	42b3      	cmp	r3, r6
  4129be:	d0e6      	beq.n	41298e <lv_img_cache_invalidate_src+0xe>
  4129c0:	2e00      	cmp	r6, #0
  4129c2:	d1f0      	bne.n	4129a6 <lv_img_cache_invalidate_src+0x26>
  4129c4:	e7e3      	b.n	41298e <lv_img_cache_invalidate_src+0xe>
        }
    }
#endif
}
  4129c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4129ca:	bf00      	nop
  4129cc:	2043a278 	.word	0x2043a278
  4129d0:	0041336d 	.word	0x0041336d
  4129d4:	2040c72e 	.word	0x2040c72e
  4129d8:	004163f5 	.word	0x004163f5

004129dc <lv_img_cache_set_size>:
{
  4129dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4129de:	4604      	mov	r4, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
  4129e0:	4b1c      	ldr	r3, [pc, #112]	; (412a54 <lv_img_cache_set_size+0x78>)
  4129e2:	681b      	ldr	r3, [r3, #0]
  4129e4:	b133      	cbz	r3, 4129f4 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
  4129e6:	2000      	movs	r0, #0
  4129e8:	4b1b      	ldr	r3, [pc, #108]	; (412a58 <lv_img_cache_set_size+0x7c>)
  4129ea:	4798      	blx	r3
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
  4129ec:	4b19      	ldr	r3, [pc, #100]	; (412a54 <lv_img_cache_set_size+0x78>)
  4129ee:	6818      	ldr	r0, [r3, #0]
  4129f0:	4b1a      	ldr	r3, [pc, #104]	; (412a5c <lv_img_cache_set_size+0x80>)
  4129f2:	4798      	blx	r3
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
  4129f4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  4129f8:	0098      	lsls	r0, r3, #2
  4129fa:	4b19      	ldr	r3, [pc, #100]	; (412a60 <lv_img_cache_set_size+0x84>)
  4129fc:	4798      	blx	r3
  4129fe:	4b15      	ldr	r3, [pc, #84]	; (412a54 <lv_img_cache_set_size+0x78>)
  412a00:	6018      	str	r0, [r3, #0]
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412a02:	4b18      	ldr	r3, [pc, #96]	; (412a64 <lv_img_cache_set_size+0x88>)
  412a04:	4798      	blx	r3
  412a06:	b130      	cbz	r0, 412a16 <lv_img_cache_set_size+0x3a>
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
  412a08:	4b12      	ldr	r3, [pc, #72]	; (412a54 <lv_img_cache_set_size+0x78>)
  412a0a:	681b      	ldr	r3, [r3, #0]
  412a0c:	b153      	cbz	r3, 412a24 <lv_img_cache_set_size+0x48>
    entry_cnt = new_entry_cnt;
  412a0e:	4b16      	ldr	r3, [pc, #88]	; (412a68 <lv_img_cache_set_size+0x8c>)
  412a10:	801c      	strh	r4, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
  412a12:	2400      	movs	r4, #0
  412a14:	e019      	b.n	412a4a <lv_img_cache_set_size+0x6e>
    LV_ASSERT_MEM(LV_GC_ROOT(_lv_img_cache_array));
  412a16:	4b0f      	ldr	r3, [pc, #60]	; (412a54 <lv_img_cache_set_size+0x78>)
  412a18:	681a      	ldr	r2, [r3, #0]
  412a1a:	2300      	movs	r3, #0
  412a1c:	4813      	ldr	r0, [pc, #76]	; (412a6c <lv_img_cache_set_size+0x90>)
  412a1e:	4914      	ldr	r1, [pc, #80]	; (412a70 <lv_img_cache_set_size+0x94>)
  412a20:	4788      	blx	r1
  412a22:	e7fe      	b.n	412a22 <lv_img_cache_set_size+0x46>
        entry_cnt = 0;
  412a24:	2200      	movs	r2, #0
  412a26:	4b10      	ldr	r3, [pc, #64]	; (412a68 <lv_img_cache_set_size+0x8c>)
  412a28:	801a      	strh	r2, [r3, #0]
        return;
  412a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
  412a2c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
  412a30:	009d      	lsls	r5, r3, #2
  412a32:	4f08      	ldr	r7, [pc, #32]	; (412a54 <lv_img_cache_set_size+0x78>)
  412a34:	6838      	ldr	r0, [r7, #0]
  412a36:	2120      	movs	r1, #32
  412a38:	4428      	add	r0, r5
  412a3a:	4e0e      	ldr	r6, [pc, #56]	; (412a74 <lv_img_cache_set_size+0x98>)
  412a3c:	47b0      	blx	r6
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
  412a3e:	6838      	ldr	r0, [r7, #0]
  412a40:	2124      	movs	r1, #36	; 0x24
  412a42:	4428      	add	r0, r5
  412a44:	47b0      	blx	r6
    for(i = 0; i < entry_cnt; i++) {
  412a46:	3401      	adds	r4, #1
  412a48:	b2a4      	uxth	r4, r4
  412a4a:	4b07      	ldr	r3, [pc, #28]	; (412a68 <lv_img_cache_set_size+0x8c>)
  412a4c:	881b      	ldrh	r3, [r3, #0]
  412a4e:	429c      	cmp	r4, r3
  412a50:	d3ec      	bcc.n	412a2c <lv_img_cache_set_size+0x50>
  412a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  412a54:	2043a278 	.word	0x2043a278
  412a58:	00412981 	.word	0x00412981
  412a5c:	00415f85 	.word	0x00415f85
  412a60:	00415ec1 	.word	0x00415ec1
  412a64:	004157b9 	.word	0x004157b9
  412a68:	2040c72e 	.word	0x2040c72e
  412a6c:	004260b0 	.word	0x004260b0
  412a70:	004157c5 	.word	0x004157c5
  412a74:	004163f5 	.word	0x004163f5

00412a78 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
  412a78:	b530      	push	{r4, r5, lr}
  412a7a:	b085      	sub	sp, #20
  412a7c:	460c      	mov	r4, r1
  412a7e:	4615      	mov	r5, r2
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
  412a80:	4608      	mov	r0, r1
  412a82:	4b2b      	ldr	r3, [pc, #172]	; (412b30 <lv_img_decoder_built_in_info+0xb8>)
  412a84:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  412a86:	b9d8      	cbnz	r0, 412ac0 <lv_img_decoder_built_in_info+0x48>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
  412a88:	7823      	ldrb	r3, [r4, #0]
  412a8a:	f003 031f 	and.w	r3, r3, #31
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412a8e:	3b04      	subs	r3, #4
  412a90:	b2db      	uxtb	r3, r3
  412a92:	2b0a      	cmp	r3, #10
  412a94:	d849      	bhi.n	412b2a <lv_img_decoder_built_in_info+0xb2>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
  412a96:	6823      	ldr	r3, [r4, #0]
  412a98:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412a9c:	682a      	ldr	r2, [r5, #0]
  412a9e:	f363 2294 	bfi	r2, r3, #10, #11
  412aa2:	602a      	str	r2, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
  412aa4:	8863      	ldrh	r3, [r4, #2]
  412aa6:	f3c3 134a 	ubfx	r3, r3, #5, #11
  412aaa:	886a      	ldrh	r2, [r5, #2]
  412aac:	f363 124f 	bfi	r2, r3, #5, #11
  412ab0:	806a      	strh	r2, [r5, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
  412ab2:	7822      	ldrb	r2, [r4, #0]
  412ab4:	782b      	ldrb	r3, [r5, #0]
  412ab6:	f362 0304 	bfi	r3, r2, #0, #5
  412aba:	702b      	strb	r3, [r5, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
  412abc:	2001      	movs	r0, #1
  412abe:	e004      	b.n	412aca <lv_img_decoder_built_in_info+0x52>
    else if(src_type == LV_IMG_SRC_FILE) {
  412ac0:	2801      	cmp	r0, #1
  412ac2:	d004      	beq.n	412ace <lv_img_decoder_built_in_info+0x56>
    else if(src_type == LV_IMG_SRC_SYMBOL) {
  412ac4:	2802      	cmp	r0, #2
  412ac6:	d022      	beq.n	412b0e <lv_img_decoder_built_in_info+0x96>
        return LV_RES_INV;
  412ac8:	2000      	movs	r0, #0
}
  412aca:	b005      	add	sp, #20
  412acc:	bd30      	pop	{r4, r5, pc}
        res = lv_fs_open(&file, src, LV_FS_MODE_RD);
  412ace:	2202      	movs	r2, #2
  412ad0:	4621      	mov	r1, r4
  412ad2:	a802      	add	r0, sp, #8
  412ad4:	4b17      	ldr	r3, [pc, #92]	; (412b34 <lv_img_decoder_built_in_info+0xbc>)
  412ad6:	4798      	blx	r3
        if(res == LV_FS_RES_OK) {
  412ad8:	b148      	cbz	r0, 412aee <lv_img_decoder_built_in_info+0x76>
        if(header->cf < CF_BUILT_IN_FIRST || header->cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412ada:	782b      	ldrb	r3, [r5, #0]
  412adc:	f003 031f 	and.w	r3, r3, #31
  412ae0:	331c      	adds	r3, #28
  412ae2:	f003 031f 	and.w	r3, r3, #31
  412ae6:	2b0a      	cmp	r3, #10
  412ae8:	d80f      	bhi.n	412b0a <lv_img_decoder_built_in_info+0x92>
    return LV_RES_OK;
  412aea:	2001      	movs	r0, #1
  412aec:	e7ed      	b.n	412aca <lv_img_decoder_built_in_info+0x52>
            res = lv_fs_read(&file, header, sizeof(lv_img_header_t), &rn);
  412aee:	ab01      	add	r3, sp, #4
  412af0:	2204      	movs	r2, #4
  412af2:	4629      	mov	r1, r5
  412af4:	a802      	add	r0, sp, #8
  412af6:	4c10      	ldr	r4, [pc, #64]	; (412b38 <lv_img_decoder_built_in_info+0xc0>)
  412af8:	47a0      	blx	r4
  412afa:	4604      	mov	r4, r0
            lv_fs_close(&file);
  412afc:	a802      	add	r0, sp, #8
  412afe:	4b0f      	ldr	r3, [pc, #60]	; (412b3c <lv_img_decoder_built_in_info+0xc4>)
  412b00:	4798      	blx	r3
            if(res != LV_FS_RES_OK || rn != sizeof(lv_img_header_t)) {
  412b02:	b914      	cbnz	r4, 412b0a <lv_img_decoder_built_in_info+0x92>
  412b04:	9b01      	ldr	r3, [sp, #4]
  412b06:	2b04      	cmp	r3, #4
  412b08:	d0e7      	beq.n	412ada <lv_img_decoder_built_in_info+0x62>
                return LV_RES_INV;
  412b0a:	2000      	movs	r0, #0
  412b0c:	e7dd      	b.n	412aca <lv_img_decoder_built_in_info+0x52>
        header->w = 1;
  412b0e:	682b      	ldr	r3, [r5, #0]
  412b10:	2001      	movs	r0, #1
  412b12:	f360 2394 	bfi	r3, r0, #10, #11
  412b16:	602b      	str	r3, [r5, #0]
        header->h = 1;
  412b18:	0c1a      	lsrs	r2, r3, #16
  412b1a:	f360 124f 	bfi	r2, r0, #5, #11
  412b1e:	806a      	strh	r2, [r5, #2]
        header->cf = LV_IMG_CF_ALPHA_1BIT;
  412b20:	220b      	movs	r2, #11
  412b22:	f362 0304 	bfi	r3, r2, #0, #5
  412b26:	702b      	strb	r3, [r5, #0]
  412b28:	e7cf      	b.n	412aca <lv_img_decoder_built_in_info+0x52>
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
  412b2a:	2000      	movs	r0, #0
  412b2c:	e7cd      	b.n	412aca <lv_img_decoder_built_in_info+0x52>
  412b2e:	bf00      	nop
  412b30:	0040d0bd 	.word	0x0040d0bd
  412b34:	00415911 	.word	0x00415911
  412b38:	0041588d 	.word	0x0041588d
  412b3c:	0041585d 	.word	0x0041585d

00412b40 <lv_img_decoder_built_in_close>:
 * Close the pending decoding. Free resources etc.
 * @param decoder pointer to the decoder the function associated with
 * @param dsc pointer to decoder descriptor
 */
void lv_img_decoder_built_in_close(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
  412b40:	b538      	push	{r3, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412b42:	69cc      	ldr	r4, [r1, #28]
    if(user_data) {
  412b44:	b1a4      	cbz	r4, 412b70 <lv_img_decoder_built_in_close+0x30>
  412b46:	460d      	mov	r5, r1
#if LV_USE_FILESYSTEM
        if(user_data->f) {
  412b48:	6820      	ldr	r0, [r4, #0]
  412b4a:	b120      	cbz	r0, 412b56 <lv_img_decoder_built_in_close+0x16>
            lv_fs_close(user_data->f);
  412b4c:	4b09      	ldr	r3, [pc, #36]	; (412b74 <lv_img_decoder_built_in_close+0x34>)
  412b4e:	4798      	blx	r3
            lv_mem_free(user_data->f);
  412b50:	6820      	ldr	r0, [r4, #0]
  412b52:	4b09      	ldr	r3, [pc, #36]	; (412b78 <lv_img_decoder_built_in_close+0x38>)
  412b54:	4798      	blx	r3
        }
#endif
        if(user_data->palette) lv_mem_free(user_data->palette);
  412b56:	6860      	ldr	r0, [r4, #4]
  412b58:	b108      	cbz	r0, 412b5e <lv_img_decoder_built_in_close+0x1e>
  412b5a:	4b07      	ldr	r3, [pc, #28]	; (412b78 <lv_img_decoder_built_in_close+0x38>)
  412b5c:	4798      	blx	r3
        if(user_data->opa) lv_mem_free(user_data->opa);
  412b5e:	68a0      	ldr	r0, [r4, #8]
  412b60:	b108      	cbz	r0, 412b66 <lv_img_decoder_built_in_close+0x26>
  412b62:	4b05      	ldr	r3, [pc, #20]	; (412b78 <lv_img_decoder_built_in_close+0x38>)
  412b64:	4798      	blx	r3

        lv_mem_free(user_data);
  412b66:	4620      	mov	r0, r4
  412b68:	4b03      	ldr	r3, [pc, #12]	; (412b78 <lv_img_decoder_built_in_close+0x38>)
  412b6a:	4798      	blx	r3

        dsc->user_data = NULL;
  412b6c:	2300      	movs	r3, #0
  412b6e:	61eb      	str	r3, [r5, #28]
  412b70:	bd38      	pop	{r3, r4, r5, pc}
  412b72:	bf00      	nop
  412b74:	0041585d 	.word	0x0041585d
  412b78:	00415f85 	.word	0x00415f85

00412b7c <lv_img_decoder_built_in_open>:
{
  412b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  412b80:	b082      	sub	sp, #8
  412b82:	4607      	mov	r7, r0
  412b84:	460c      	mov	r4, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  412b86:	7a8b      	ldrb	r3, [r1, #10]
  412b88:	2b01      	cmp	r3, #1
  412b8a:	d016      	beq.n	412bba <lv_img_decoder_built_in_open+0x3e>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412b8c:	b923      	cbnz	r3, 412b98 <lv_img_decoder_built_in_open+0x1c>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
  412b8e:	684b      	ldr	r3, [r1, #4]
  412b90:	689b      	ldr	r3, [r3, #8]
  412b92:	2b00      	cmp	r3, #0
  412b94:	f000 810b 	beq.w	412dae <lv_img_decoder_built_in_open+0x232>
    lv_img_cf_t cf = dsc->header.cf;
  412b98:	7b20      	ldrb	r0, [r4, #12]
  412b9a:	f000 001f 	and.w	r0, r0, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
  412b9e:	1f03      	subs	r3, r0, #4
  412ba0:	b2db      	uxtb	r3, r3
  412ba2:	2b02      	cmp	r3, #2
  412ba4:	d851      	bhi.n	412c4a <lv_img_decoder_built_in_open+0xce>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412ba6:	7aa3      	ldrb	r3, [r4, #10]
  412ba8:	2b00      	cmp	r3, #0
  412baa:	d14a      	bne.n	412c42 <lv_img_decoder_built_in_open+0xc6>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
  412bac:	6863      	ldr	r3, [r4, #4]
  412bae:	689b      	ldr	r3, [r3, #8]
  412bb0:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412bb2:	2001      	movs	r0, #1
}
  412bb4:	b002      	add	sp, #8
  412bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  412bba:	6848      	ldr	r0, [r1, #4]
  412bbc:	4b7d      	ldr	r3, [pc, #500]	; (412db4 <lv_img_decoder_built_in_open+0x238>)
  412bbe:	4798      	blx	r3
  412bc0:	497d      	ldr	r1, [pc, #500]	; (412db8 <lv_img_decoder_built_in_open+0x23c>)
  412bc2:	4b7e      	ldr	r3, [pc, #504]	; (412dbc <lv_img_decoder_built_in_open+0x240>)
  412bc4:	4798      	blx	r3
  412bc6:	b9a8      	cbnz	r0, 412bf4 <lv_img_decoder_built_in_open+0x78>
        lv_fs_res_t res = lv_fs_open(&f, dsc->src, LV_FS_MODE_RD);
  412bc8:	2202      	movs	r2, #2
  412bca:	6861      	ldr	r1, [r4, #4]
  412bcc:	4668      	mov	r0, sp
  412bce:	4b7c      	ldr	r3, [pc, #496]	; (412dc0 <lv_img_decoder_built_in_open+0x244>)
  412bd0:	4798      	blx	r3
        if(res != LV_FS_RES_OK) {
  412bd2:	b978      	cbnz	r0, 412bf4 <lv_img_decoder_built_in_open+0x78>
        if(dsc->user_data == NULL) {
  412bd4:	69e3      	ldr	r3, [r4, #28]
  412bd6:	b17b      	cbz	r3, 412bf8 <lv_img_decoder_built_in_open+0x7c>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412bd8:	69e5      	ldr	r5, [r4, #28]
        user_data->f = lv_mem_alloc(sizeof(f));
  412bda:	2008      	movs	r0, #8
  412bdc:	4b79      	ldr	r3, [pc, #484]	; (412dc4 <lv_img_decoder_built_in_open+0x248>)
  412bde:	4798      	blx	r3
  412be0:	6028      	str	r0, [r5, #0]
        LV_ASSERT_MEM(user_data->f);
  412be2:	4b79      	ldr	r3, [pc, #484]	; (412dc8 <lv_img_decoder_built_in_open+0x24c>)
  412be4:	4798      	blx	r3
  412be6:	b1d8      	cbz	r0, 412c20 <lv_img_decoder_built_in_open+0xa4>
        if(user_data->f == NULL) {
  412be8:	682b      	ldr	r3, [r5, #0]
  412bea:	bb3b      	cbnz	r3, 412c3c <lv_img_decoder_built_in_open+0xc0>
            lv_img_decoder_built_in_close(decoder, dsc);
  412bec:	4621      	mov	r1, r4
  412bee:	4638      	mov	r0, r7
  412bf0:	4b76      	ldr	r3, [pc, #472]	; (412dcc <lv_img_decoder_built_in_open+0x250>)
  412bf2:	4798      	blx	r3
        if(strcmp(lv_fs_get_ext(dsc->src), "bin")) return LV_RES_INV;
  412bf4:	2000      	movs	r0, #0
  412bf6:	e7dd      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412bf8:	200c      	movs	r0, #12
  412bfa:	4b72      	ldr	r3, [pc, #456]	; (412dc4 <lv_img_decoder_built_in_open+0x248>)
  412bfc:	4798      	blx	r3
  412bfe:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412c00:	4b71      	ldr	r3, [pc, #452]	; (412dc8 <lv_img_decoder_built_in_open+0x24c>)
  412c02:	4798      	blx	r3
  412c04:	b928      	cbnz	r0, 412c12 <lv_img_decoder_built_in_open+0x96>
  412c06:	69e2      	ldr	r2, [r4, #28]
  412c08:	2300      	movs	r3, #0
  412c0a:	4871      	ldr	r0, [pc, #452]	; (412dd0 <lv_img_decoder_built_in_open+0x254>)
  412c0c:	4971      	ldr	r1, [pc, #452]	; (412dd4 <lv_img_decoder_built_in_open+0x258>)
  412c0e:	4788      	blx	r1
  412c10:	e7fe      	b.n	412c10 <lv_img_decoder_built_in_open+0x94>
            if(dsc->user_data == NULL) {
  412c12:	69e0      	ldr	r0, [r4, #28]
  412c14:	2800      	cmp	r0, #0
  412c16:	d0ed      	beq.n	412bf4 <lv_img_decoder_built_in_open+0x78>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412c18:	210c      	movs	r1, #12
  412c1a:	4b6f      	ldr	r3, [pc, #444]	; (412dd8 <lv_img_decoder_built_in_open+0x25c>)
  412c1c:	4798      	blx	r3
  412c1e:	e7db      	b.n	412bd8 <lv_img_decoder_built_in_open+0x5c>
        LV_ASSERT_MEM(user_data->f);
  412c20:	682a      	ldr	r2, [r5, #0]
  412c22:	2300      	movs	r3, #0
  412c24:	486a      	ldr	r0, [pc, #424]	; (412dd0 <lv_img_decoder_built_in_open+0x254>)
  412c26:	496b      	ldr	r1, [pc, #428]	; (412dd4 <lv_img_decoder_built_in_open+0x258>)
  412c28:	4788      	blx	r1
  412c2a:	e7fe      	b.n	412c2a <lv_img_decoder_built_in_open+0xae>
        *d8 = *s8;
  412c2c:	f811 0b01 	ldrb.w	r0, [r1], #1
  412c30:	f803 0b01 	strb.w	r0, [r3], #1
        len--;
  412c34:	3a01      	subs	r2, #1
    while(len) {
  412c36:	2a00      	cmp	r2, #0
  412c38:	d1f8      	bne.n	412c2c <lv_img_decoder_built_in_open+0xb0>
  412c3a:	e7ad      	b.n	412b98 <lv_img_decoder_built_in_open+0x1c>
  412c3c:	4669      	mov	r1, sp
  412c3e:	2208      	movs	r2, #8
  412c40:	e7f9      	b.n	412c36 <lv_img_decoder_built_in_open+0xba>
            dsc->img_data = NULL;
  412c42:	2300      	movs	r3, #0
  412c44:	6123      	str	r3, [r4, #16]
            return LV_RES_OK;
  412c46:	2001      	movs	r0, #1
  412c48:	e7b4      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
  412c4a:	1fc3      	subs	r3, r0, #7
  412c4c:	b2db      	uxtb	r3, r3
  412c4e:	2b03      	cmp	r3, #3
  412c50:	d909      	bls.n	412c66 <lv_img_decoder_built_in_open+0xea>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
  412c52:	f1a0 030b 	sub.w	r3, r0, #11
  412c56:	b2db      	uxtb	r3, r3
  412c58:	2b03      	cmp	r3, #3
  412c5a:	f200 80a2 	bhi.w	412da2 <lv_img_decoder_built_in_open+0x226>
        dsc->img_data = NULL;
  412c5e:	2300      	movs	r3, #0
  412c60:	6123      	str	r3, [r4, #16]
        return LV_RES_OK; /*Nothing to process*/
  412c62:	2001      	movs	r0, #1
  412c64:	e7a6      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
  412c66:	4b5d      	ldr	r3, [pc, #372]	; (412ddc <lv_img_decoder_built_in_open+0x260>)
  412c68:	4798      	blx	r3
  412c6a:	4682      	mov	sl, r0
        uint32_t palette_size = 1 << px_size;
  412c6c:	2601      	movs	r6, #1
  412c6e:	4086      	lsls	r6, r0
        if(dsc->user_data == NULL) {
  412c70:	69e3      	ldr	r3, [r4, #28]
  412c72:	b17b      	cbz	r3, 412c94 <lv_img_decoder_built_in_open+0x118>
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412c74:	69e5      	ldr	r5, [r4, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
  412c76:	2002      	movs	r0, #2
  412c78:	fa00 f00a 	lsl.w	r0, r0, sl
  412c7c:	4b51      	ldr	r3, [pc, #324]	; (412dc4 <lv_img_decoder_built_in_open+0x248>)
  412c7e:	4798      	blx	r3
  412c80:	6068      	str	r0, [r5, #4]
        LV_ASSERT_MEM(user_data->palette);
  412c82:	4b51      	ldr	r3, [pc, #324]	; (412dc8 <lv_img_decoder_built_in_open+0x24c>)
  412c84:	4798      	blx	r3
  412c86:	b9f0      	cbnz	r0, 412cc6 <lv_img_decoder_built_in_open+0x14a>
  412c88:	686a      	ldr	r2, [r5, #4]
  412c8a:	2300      	movs	r3, #0
  412c8c:	4850      	ldr	r0, [pc, #320]	; (412dd0 <lv_img_decoder_built_in_open+0x254>)
  412c8e:	4951      	ldr	r1, [pc, #324]	; (412dd4 <lv_img_decoder_built_in_open+0x258>)
  412c90:	4788      	blx	r1
  412c92:	e7fe      	b.n	412c92 <lv_img_decoder_built_in_open+0x116>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
  412c94:	200c      	movs	r0, #12
  412c96:	4b4b      	ldr	r3, [pc, #300]	; (412dc4 <lv_img_decoder_built_in_open+0x248>)
  412c98:	4798      	blx	r3
  412c9a:	61e0      	str	r0, [r4, #28]
            LV_ASSERT_MEM(dsc->user_data);
  412c9c:	4b4a      	ldr	r3, [pc, #296]	; (412dc8 <lv_img_decoder_built_in_open+0x24c>)
  412c9e:	4798      	blx	r3
  412ca0:	b928      	cbnz	r0, 412cae <lv_img_decoder_built_in_open+0x132>
  412ca2:	69e2      	ldr	r2, [r4, #28]
  412ca4:	2300      	movs	r3, #0
  412ca6:	484a      	ldr	r0, [pc, #296]	; (412dd0 <lv_img_decoder_built_in_open+0x254>)
  412ca8:	494a      	ldr	r1, [pc, #296]	; (412dd4 <lv_img_decoder_built_in_open+0x258>)
  412caa:	4788      	blx	r1
  412cac:	e7fe      	b.n	412cac <lv_img_decoder_built_in_open+0x130>
            if(dsc->user_data == NULL) {
  412cae:	69e0      	ldr	r0, [r4, #28]
  412cb0:	b928      	cbnz	r0, 412cbe <lv_img_decoder_built_in_open+0x142>
                lv_img_decoder_built_in_close(decoder, dsc);
  412cb2:	4621      	mov	r1, r4
  412cb4:	4638      	mov	r0, r7
  412cb6:	4b45      	ldr	r3, [pc, #276]	; (412dcc <lv_img_decoder_built_in_open+0x250>)
  412cb8:	4798      	blx	r3
                return LV_RES_INV;
  412cba:	2000      	movs	r0, #0
  412cbc:	e77a      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
  412cbe:	210c      	movs	r1, #12
  412cc0:	4b45      	ldr	r3, [pc, #276]	; (412dd8 <lv_img_decoder_built_in_open+0x25c>)
  412cc2:	4798      	blx	r3
  412cc4:	e7d6      	b.n	412c74 <lv_img_decoder_built_in_open+0xf8>
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
  412cc6:	4630      	mov	r0, r6
  412cc8:	4b3e      	ldr	r3, [pc, #248]	; (412dc4 <lv_img_decoder_built_in_open+0x248>)
  412cca:	4798      	blx	r3
  412ccc:	60a8      	str	r0, [r5, #8]
        LV_ASSERT_MEM(user_data->opa);
  412cce:	4b3e      	ldr	r3, [pc, #248]	; (412dc8 <lv_img_decoder_built_in_open+0x24c>)
  412cd0:	4798      	blx	r3
  412cd2:	b158      	cbz	r0, 412cec <lv_img_decoder_built_in_open+0x170>
        if(user_data->palette == NULL || user_data->opa == NULL) {
  412cd4:	686b      	ldr	r3, [r5, #4]
  412cd6:	b17b      	cbz	r3, 412cf8 <lv_img_decoder_built_in_open+0x17c>
  412cd8:	68ab      	ldr	r3, [r5, #8]
  412cda:	b16b      	cbz	r3, 412cf8 <lv_img_decoder_built_in_open+0x17c>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  412cdc:	7aa3      	ldrb	r3, [r4, #10]
  412cde:	2b01      	cmp	r3, #1
  412ce0:	d010      	beq.n	412d04 <lv_img_decoder_built_in_open+0x188>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
  412ce2:	6863      	ldr	r3, [r4, #4]
  412ce4:	f8d3 c008 	ldr.w	ip, [r3, #8]
            for(i = 0; i < palette_size; i++) {
  412ce8:	2300      	movs	r3, #0
  412cea:	e054      	b.n	412d96 <lv_img_decoder_built_in_open+0x21a>
        LV_ASSERT_MEM(user_data->opa);
  412cec:	68aa      	ldr	r2, [r5, #8]
  412cee:	2300      	movs	r3, #0
  412cf0:	4837      	ldr	r0, [pc, #220]	; (412dd0 <lv_img_decoder_built_in_open+0x254>)
  412cf2:	4938      	ldr	r1, [pc, #224]	; (412dd4 <lv_img_decoder_built_in_open+0x258>)
  412cf4:	4788      	blx	r1
  412cf6:	e7fe      	b.n	412cf6 <lv_img_decoder_built_in_open+0x17a>
            lv_img_decoder_built_in_close(decoder, dsc);
  412cf8:	4621      	mov	r1, r4
  412cfa:	4638      	mov	r0, r7
  412cfc:	4b33      	ldr	r3, [pc, #204]	; (412dcc <lv_img_decoder_built_in_open+0x250>)
  412cfe:	4798      	blx	r3
            return LV_RES_INV;
  412d00:	2000      	movs	r0, #0
  412d02:	e757      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
            lv_fs_seek(user_data->f, 4); /*Skip the header*/
  412d04:	2104      	movs	r1, #4
  412d06:	6828      	ldr	r0, [r5, #0]
  412d08:	4b35      	ldr	r3, [pc, #212]	; (412de0 <lv_img_decoder_built_in_open+0x264>)
  412d0a:	4798      	blx	r3
            for(i = 0; i < palette_size; i++) {
  412d0c:	2700      	movs	r7, #0
  412d0e:	e022      	b.n	412d56 <lv_img_decoder_built_in_open+0x1da>
                lv_fs_read(user_data->f, &cur_color, sizeof(lv_color32_t), NULL);
  412d10:	2300      	movs	r3, #0
  412d12:	2204      	movs	r2, #4
  412d14:	4669      	mov	r1, sp
  412d16:	6828      	ldr	r0, [r5, #0]
  412d18:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 412de4 <lv_img_decoder_built_in_open+0x268>
  412d1c:	47c0      	blx	r8
                user_data->palette[i] = lv_color_make(cur_color.ch.red, cur_color.ch.green, cur_color.ch.blue);
  412d1e:	6869      	ldr	r1, [r5, #4]
  412d20:	f89d 0002 	ldrb.w	r0, [sp, #2]
  412d24:	f89d 3001 	ldrb.w	r3, [sp, #1]
  412d28:	f89d 2000 	ldrb.w	r2, [sp]
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  412d2c:	ea4f 1e53 	mov.w	lr, r3, lsr #5
  412d30:	08c0      	lsrs	r0, r0, #3
  412d32:	08d2      	lsrs	r2, r2, #3
  412d34:	f3c3 0382 	ubfx	r3, r3, #2, #3
  412d38:	f36e 0902 	bfi	r9, lr, #0, #3
  412d3c:	f360 09c7 	bfi	r9, r0, #3, #5
  412d40:	f362 290c 	bfi	r9, r2, #8, #5
  412d44:	f363 394f 	bfi	r9, r3, #13, #3
  412d48:	f821 9017 	strh.w	r9, [r1, r7, lsl #1]
                user_data->opa[i]     = cur_color.ch.alpha;
  412d4c:	68ab      	ldr	r3, [r5, #8]
  412d4e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  412d52:	55da      	strb	r2, [r3, r7]
            for(i = 0; i < palette_size; i++) {
  412d54:	3701      	adds	r7, #1
  412d56:	42b7      	cmp	r7, r6
  412d58:	d3da      	bcc.n	412d10 <lv_img_decoder_built_in_open+0x194>
  412d5a:	e01e      	b.n	412d9a <lv_img_decoder_built_in_open+0x21e>
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
  412d5c:	6869      	ldr	r1, [r5, #4]
  412d5e:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
  412d62:	f890 e002 	ldrb.w	lr, [r0, #2]
  412d66:	7842      	ldrb	r2, [r0, #1]
  412d68:	f81c 7023 	ldrb.w	r7, [ip, r3, lsl #2]
  412d6c:	ea4f 1952 	mov.w	r9, r2, lsr #5
  412d70:	ea4f 0ede 	mov.w	lr, lr, lsr #3
  412d74:	08ff      	lsrs	r7, r7, #3
  412d76:	f3c2 0282 	ubfx	r2, r2, #2, #3
  412d7a:	f369 0802 	bfi	r8, r9, #0, #3
  412d7e:	f36e 08c7 	bfi	r8, lr, #3, #5
  412d82:	f367 280c 	bfi	r8, r7, #8, #5
  412d86:	f362 384f 	bfi	r8, r2, #13, #3
  412d8a:	f821 8013 	strh.w	r8, [r1, r3, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
  412d8e:	68aa      	ldr	r2, [r5, #8]
  412d90:	78c1      	ldrb	r1, [r0, #3]
  412d92:	54d1      	strb	r1, [r2, r3]
            for(i = 0; i < palette_size; i++) {
  412d94:	3301      	adds	r3, #1
  412d96:	42b3      	cmp	r3, r6
  412d98:	d3e0      	bcc.n	412d5c <lv_img_decoder_built_in_open+0x1e0>
        dsc->img_data = NULL;
  412d9a:	2300      	movs	r3, #0
  412d9c:	6123      	str	r3, [r4, #16]
        return LV_RES_OK;
  412d9e:	2001      	movs	r0, #1
  412da0:	e708      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
        lv_img_decoder_built_in_close(decoder, dsc);
  412da2:	4621      	mov	r1, r4
  412da4:	4638      	mov	r0, r7
  412da6:	4b09      	ldr	r3, [pc, #36]	; (412dcc <lv_img_decoder_built_in_open+0x250>)
  412da8:	4798      	blx	r3
        return LV_RES_INV;
  412daa:	2000      	movs	r0, #0
  412dac:	e702      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
            return LV_RES_INV;
  412dae:	2000      	movs	r0, #0
  412db0:	e700      	b.n	412bb4 <lv_img_decoder_built_in_open+0x38>
  412db2:	bf00      	nop
  412db4:	004159d1 	.word	0x004159d1
  412db8:	00426250 	.word	0x00426250
  412dbc:	00422809 	.word	0x00422809
  412dc0:	00415911 	.word	0x00415911
  412dc4:	00415ec1 	.word	0x00415ec1
  412dc8:	004157b9 	.word	0x004157b9
  412dcc:	00412b41 	.word	0x00412b41
  412dd0:	004260b0 	.word	0x004260b0
  412dd4:	004157c5 	.word	0x004157c5
  412dd8:	004163f5 	.word	0x004163f5
  412ddc:	0040cdf9 	.word	0x0040cdf9
  412de0:	004158c9 	.word	0x004158c9
  412de4:	0041588d 	.word	0x0041588d

00412de8 <lv_img_decoder_built_in_line_true_color>:
 *   STATIC FUNCTIONS
 **********************/

static lv_res_t lv_img_decoder_built_in_line_true_color(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                        lv_coord_t len, uint8_t * buf)
{
  412de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  412dec:	b083      	sub	sp, #12
  412dee:	4680      	mov	r8, r0
  412df0:	4689      	mov	r9, r1
  412df2:	4614      	mov	r4, r2
  412df4:	461f      	mov	r7, r3
#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412df6:	69c6      	ldr	r6, [r0, #28]
    lv_fs_res_t res;
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  412df8:	7b00      	ldrb	r0, [r0, #12]
  412dfa:	f000 001f 	and.w	r0, r0, #31
  412dfe:	4b15      	ldr	r3, [pc, #84]	; (412e54 <lv_img_decoder_built_in_line_true_color+0x6c>)
  412e00:	4798      	blx	r3
  412e02:	4605      	mov	r5, r0

    uint32_t pos = ((y * dsc->header.w + x) * px_size) >> 3;
  412e04:	f8d8 100c 	ldr.w	r1, [r8, #12]
  412e08:	f3c1 218a 	ubfx	r1, r1, #10, #11
  412e0c:	fb01 9104 	mla	r1, r1, r4, r9
  412e10:	fb01 f100 	mul.w	r1, r1, r0
  412e14:	10c9      	asrs	r1, r1, #3
    pos += 4; /*Skip the header*/
    res = lv_fs_seek(user_data->f, pos);
  412e16:	3104      	adds	r1, #4
  412e18:	6830      	ldr	r0, [r6, #0]
  412e1a:	4b0f      	ldr	r3, [pc, #60]	; (412e58 <lv_img_decoder_built_in_line_true_color+0x70>)
  412e1c:	4798      	blx	r3
    if(res != LV_FS_RES_OK) {
  412e1e:	b118      	cbz	r0, 412e28 <lv_img_decoder_built_in_line_true_color+0x40>
        LV_LOG_WARN("Built-in image decoder seek failed");
        return LV_RES_INV;
  412e20:	2000      	movs	r0, #0
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
    return LV_RES_INV;
#endif
}
  412e22:	b003      	add	sp, #12
  412e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint32_t btr = len * (px_size >> 3);
  412e28:	f3c5 05c7 	ubfx	r5, r5, #3, #8
  412e2c:	fb05 f507 	mul.w	r5, r5, r7
    uint32_t br  = 0;
  412e30:	ab02      	add	r3, sp, #8
  412e32:	2200      	movs	r2, #0
  412e34:	f843 2d04 	str.w	r2, [r3, #-4]!
    res = lv_fs_read(user_data->f, buf, btr, &br);
  412e38:	462a      	mov	r2, r5
  412e3a:	990a      	ldr	r1, [sp, #40]	; 0x28
  412e3c:	6830      	ldr	r0, [r6, #0]
  412e3e:	4c07      	ldr	r4, [pc, #28]	; (412e5c <lv_img_decoder_built_in_line_true_color+0x74>)
  412e40:	47a0      	blx	r4
    if(res != LV_FS_RES_OK || btr != br) {
  412e42:	b920      	cbnz	r0, 412e4e <lv_img_decoder_built_in_line_true_color+0x66>
  412e44:	9b01      	ldr	r3, [sp, #4]
  412e46:	429d      	cmp	r5, r3
  412e48:	d1eb      	bne.n	412e22 <lv_img_decoder_built_in_line_true_color+0x3a>
    return LV_RES_OK;
  412e4a:	2001      	movs	r0, #1
  412e4c:	e7e9      	b.n	412e22 <lv_img_decoder_built_in_line_true_color+0x3a>
        return LV_RES_INV;
  412e4e:	2000      	movs	r0, #0
  412e50:	e7e7      	b.n	412e22 <lv_img_decoder_built_in_line_true_color+0x3a>
  412e52:	bf00      	nop
  412e54:	0040cdf9 	.word	0x0040cdf9
  412e58:	004158c9 	.word	0x004158c9
  412e5c:	0041588d 	.word	0x0041588d

00412e60 <lv_img_decoder_built_in_line_alpha>:

static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{
  412e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  412e64:	b08b      	sub	sp, #44	; 0x2c
  412e66:	4680      	mov	r8, r0
  412e68:	460c      	mov	r4, r1
  412e6a:	4693      	mov	fp, r2
  412e6c:	461e      	mov	r6, r3
  412e6e:	9d14      	ldr	r5, [sp, #80]	; 0x50

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
  412e70:	2700      	movs	r7, #0
  412e72:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
  412e76:	23ff      	movs	r3, #255	; 0xff
  412e78:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
  412e7c:	4b6a      	ldr	r3, [pc, #424]	; (413028 <lv_img_decoder_built_in_line_alpha+0x1c8>)
  412e7e:	f853 2b04 	ldr.w	r2, [r3], #4
  412e82:	9208      	str	r2, [sp, #32]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
  412e84:	f10d 0e10 	add.w	lr, sp, #16
  412e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  412e8a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
  412e8e:	f8b8 0008 	ldrh.w	r0, [r8, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
  412e92:	463b      	mov	r3, r7
  412e94:	e008      	b.n	412ea8 <lv_img_decoder_built_in_line_alpha+0x48>
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
  412e96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
  412e9a:	b281      	uxth	r1, r0
  412e9c:	54a9      	strb	r1, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
  412e9e:	3201      	adds	r2, #1
  412ea0:	0a09      	lsrs	r1, r1, #8
  412ea2:	54a9      	strb	r1, [r5, r2]
    for(i = 0; i < len; i++) {
  412ea4:	3301      	adds	r3, #1
  412ea6:	b21b      	sxth	r3, r3
  412ea8:	42b3      	cmp	r3, r6
  412eaa:	dbf4      	blt.n	412e96 <lv_img_decoder_built_in_line_alpha+0x36>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
  412eac:	f898 000c 	ldrb.w	r0, [r8, #12]
  412eb0:	f000 001f 	and.w	r0, r0, #31
  412eb4:	4b5d      	ldr	r3, [pc, #372]	; (41302c <lv_img_decoder_built_in_line_alpha+0x1cc>)
  412eb6:	4798      	blx	r3
  412eb8:	4681      	mov	r9, r0
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  412eba:	2701      	movs	r7, #1
  412ebc:	4087      	lsls	r7, r0
  412ebe:	b2bf      	uxth	r7, r7
  412ec0:	3f01      	subs	r7, #1
  412ec2:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
  412ec4:	f898 300c 	ldrb.w	r3, [r8, #12]
  412ec8:	f003 031f 	and.w	r3, r3, #31
  412ecc:	3b0b      	subs	r3, #11
  412ece:	2b03      	cmp	r3, #3
  412ed0:	d864      	bhi.n	412f9c <lv_img_decoder_built_in_line_alpha+0x13c>
  412ed2:	e8df f003 	tbb	[pc, r3]
  412ed6:	2802      	.short	0x2802
  412ed8:	5740      	.short	0x5740
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  412eda:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412ede:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412ee2:	10da      	asrs	r2, r3, #3
  412ee4:	b211      	sxth	r1, r2
  412ee6:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x7) w++;
  412ee8:	f013 0f07 	tst.w	r3, #7
  412eec:	d001      	beq.n	412ef2 <lv_img_decoder_built_in_line_alpha+0x92>
  412eee:	1c53      	adds	r3, r2, #1
  412ef0:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 3); /*First pixel*/
  412ef2:	10e3      	asrs	r3, r4, #3
  412ef4:	9a01      	ldr	r2, [sp, #4]
  412ef6:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 7 - (x & 0x7);
  412efa:	43e4      	mvns	r4, r4
  412efc:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
  412f00:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
            pos = 0;
            break;
    }

#if LV_USE_FILESYSTEM
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  412f04:	f8d8 301c 	ldr.w	r3, [r8, #28]
  412f08:	9303      	str	r3, [sp, #12]
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  412f0a:	9801      	ldr	r0, [sp, #4]
  412f0c:	4b48      	ldr	r3, [pc, #288]	; (413030 <lv_img_decoder_built_in_line_alpha+0x1d0>)
  412f0e:	4798      	blx	r3
  412f10:	9002      	str	r0, [sp, #8]
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  412f12:	f898 300a 	ldrb.w	r3, [r8, #10]
  412f16:	2b00      	cmp	r3, #0
  412f18:	d149      	bne.n	412fae <lv_img_decoder_built_in_line_alpha+0x14e>
        const lv_img_dsc_t * img_dsc = dsc->src;
  412f1a:	f8d8 3004 	ldr.w	r3, [r8, #4]

        data_tmp = img_dsc->data + ofs;
  412f1e:	689b      	ldr	r3, [r3, #8]
  412f20:	449b      	add	fp, r3
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  412f22:	2100      	movs	r1, #0
  412f24:	e05d      	b.n	412fe2 <lv_img_decoder_built_in_line_alpha+0x182>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  412f26:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412f2a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412f2e:	109a      	asrs	r2, r3, #2
  412f30:	b211      	sxth	r1, r2
  412f32:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x3) w++;
  412f34:	f013 0f03 	tst.w	r3, #3
  412f38:	d001      	beq.n	412f3e <lv_img_decoder_built_in_line_alpha+0xde>
  412f3a:	1c53      	adds	r3, r2, #1
  412f3c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 2); /*First pixel*/
  412f3e:	10a3      	asrs	r3, r4, #2
  412f40:	9a01      	ldr	r2, [sp, #4]
  412f42:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 6 - ((x & 0x3) * 2);
  412f46:	b2a4      	uxth	r4, r4
  412f48:	43e4      	mvns	r4, r4
  412f4a:	f004 0403 	and.w	r4, r4, #3
  412f4e:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
  412f50:	f10d 0a20 	add.w	sl, sp, #32
            break;
  412f54:	e7d6      	b.n	412f04 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  412f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412f5a:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412f5e:	105a      	asrs	r2, r3, #1
  412f60:	b211      	sxth	r1, r2
  412f62:	9101      	str	r1, [sp, #4]
            if(dsc->header.w & 0x1) w++;
  412f64:	f013 0f01 	tst.w	r3, #1
  412f68:	d001      	beq.n	412f6e <lv_img_decoder_built_in_line_alpha+0x10e>
  412f6a:	1c53      	adds	r3, r2, #1
  412f6c:	9301      	str	r3, [sp, #4]
            ofs += w * y + (x >> 1); /*First pixel*/
  412f6e:	1063      	asrs	r3, r4, #1
  412f70:	9a01      	ldr	r2, [sp, #4]
  412f72:	fb0b 3b02 	mla	fp, fp, r2, r3
            pos       = 4 - ((x & 0x1) * 4);
  412f76:	f014 0f01 	tst.w	r4, #1
  412f7a:	d114      	bne.n	412fa6 <lv_img_decoder_built_in_line_alpha+0x146>
  412f7c:	2404      	movs	r4, #4
            opa_table = alpha4_opa_table;
  412f7e:	f10d 0a10 	add.w	sl, sp, #16
  412f82:	e7bf      	b.n	412f04 <lv_img_decoder_built_in_line_alpha+0xa4>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  412f84:	f8d8 300c 	ldr.w	r3, [r8, #12]
  412f88:	f3c3 238a 	ubfx	r3, r3, #10, #11
  412f8c:	b29a      	uxth	r2, r3
  412f8e:	b21b      	sxth	r3, r3
  412f90:	9301      	str	r3, [sp, #4]
            ofs += w * y + x;  /*First pixel*/
  412f92:	fb0b 4b02 	mla	fp, fp, r2, r4
            pos = 0;
  412f96:	2400      	movs	r4, #0
    const lv_opa_t * opa_table = NULL;
  412f98:	46a2      	mov	sl, r4
            break;
  412f9a:	e7b3      	b.n	412f04 <lv_img_decoder_built_in_line_alpha+0xa4>
    int8_t pos   = 0;
  412f9c:	2400      	movs	r4, #0
    uint32_t ofs = 0;
  412f9e:	46a3      	mov	fp, r4
    lv_coord_t w = 0;
  412fa0:	9401      	str	r4, [sp, #4]
    const lv_opa_t * opa_table = NULL;
  412fa2:	46a2      	mov	sl, r4
  412fa4:	e7ae      	b.n	412f04 <lv_img_decoder_built_in_line_alpha+0xa4>
            pos       = 4 - ((x & 0x1) * 4);
  412fa6:	2400      	movs	r4, #0
            opa_table = alpha4_opa_table;
  412fa8:	f10d 0a10 	add.w	sl, sp, #16
  412fac:	e7aa      	b.n	412f04 <lv_img_decoder_built_in_line_alpha+0xa4>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  412fae:	f10b 0104 	add.w	r1, fp, #4
  412fb2:	9b03      	ldr	r3, [sp, #12]
  412fb4:	6818      	ldr	r0, [r3, #0]
  412fb6:	4b1f      	ldr	r3, [pc, #124]	; (413034 <lv_img_decoder_built_in_line_alpha+0x1d4>)
  412fb8:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  412fba:	2300      	movs	r3, #0
  412fbc:	9a01      	ldr	r2, [sp, #4]
  412fbe:	9902      	ldr	r1, [sp, #8]
  412fc0:	9803      	ldr	r0, [sp, #12]
  412fc2:	6800      	ldr	r0, [r0, #0]
  412fc4:	f8df b074 	ldr.w	fp, [pc, #116]	; 41303c <lv_img_decoder_built_in_line_alpha+0x1dc>
  412fc8:	47d8      	blx	fp
        data_tmp = fs_buf;
  412fca:	f8dd b008 	ldr.w	fp, [sp, #8]
  412fce:	e7a8      	b.n	412f22 <lv_img_decoder_built_in_line_alpha+0xc2>
    }

    for(i = 0; i < len; i++) {
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412fd0:	f805 e000 	strb.w	lr, [r5, r0]
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
  412fd4:	eba4 0409 	sub.w	r4, r4, r9
  412fd8:	b264      	sxtb	r4, r4
        if(pos < 0) {
  412fda:	2c00      	cmp	r4, #0
  412fdc:	db17      	blt.n	41300e <lv_img_decoder_built_in_line_alpha+0x1ae>
    for(i = 0; i < len; i++) {
  412fde:	3101      	adds	r1, #1
  412fe0:	b209      	sxth	r1, r1
  412fe2:	42b1      	cmp	r1, r6
  412fe4:	da19      	bge.n	41301a <lv_img_decoder_built_in_line_alpha+0x1ba>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  412fe6:	f89b 3000 	ldrb.w	r3, [fp]
  412fea:	fa07 f204 	lsl.w	r2, r7, r4
  412fee:	4013      	ands	r3, r2
  412ff0:	4123      	asrs	r3, r4
  412ff2:	fa5f fe83 	uxtb.w	lr, r3
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  412ff6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  412ffa:	3002      	adds	r0, #2
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
  412ffc:	f898 200c 	ldrb.w	r2, [r8, #12]
  413000:	f002 021f 	and.w	r2, r2, #31
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
  413004:	2a0e      	cmp	r2, #14
  413006:	d0e3      	beq.n	412fd0 <lv_img_decoder_built_in_line_alpha+0x170>
  413008:	f81a e00e 	ldrb.w	lr, [sl, lr]
  41300c:	e7e0      	b.n	412fd0 <lv_img_decoder_built_in_line_alpha+0x170>
            pos = 8 - px_size;
  41300e:	f1c9 0408 	rsb	r4, r9, #8
  413012:	b264      	sxtb	r4, r4
            data_tmp++;
  413014:	f10b 0b01 	add.w	fp, fp, #1
  413018:	e7e1      	b.n	412fde <lv_img_decoder_built_in_line_alpha+0x17e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  41301a:	9802      	ldr	r0, [sp, #8]
  41301c:	4b06      	ldr	r3, [pc, #24]	; (413038 <lv_img_decoder_built_in_line_alpha+0x1d8>)
  41301e:	4798      	blx	r3

#else
    LV_LOG_WARN("Image built-in alpha line reader failed because LV_IMG_CF_ALPHA is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  413020:	2001      	movs	r0, #1
  413022:	b00b      	add	sp, #44	; 0x2c
  413024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  413028:	0042623c 	.word	0x0042623c
  41302c:	0040cdf9 	.word	0x0040cdf9
  413030:	00416269 	.word	0x00416269
  413034:	004158c9 	.word	0x004158c9
  413038:	00416019 	.word	0x00416019
  41303c:	0041588d 	.word	0x0041588d

00413040 <lv_img_decoder_built_in_line_indexed>:

static lv_res_t lv_img_decoder_built_in_line_indexed(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                     lv_coord_t len, uint8_t * buf)
{
  413040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  413044:	b083      	sub	sp, #12
  413046:	4682      	mov	sl, r0
  413048:	460c      	mov	r4, r1
  41304a:	4616      	mov	r6, r2
  41304c:	4699      	mov	r9, r3
  41304e:	9d0c      	ldr	r5, [sp, #48]	; 0x30

#if LV_IMG_CF_INDEXED
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
  413050:	7b00      	ldrb	r0, [r0, #12]
  413052:	f000 001f 	and.w	r0, r0, #31
  413056:	4b5d      	ldr	r3, [pc, #372]	; (4131cc <lv_img_decoder_built_in_line_indexed+0x18c>)
  413058:	4798      	blx	r3
  41305a:	4680      	mov	r8, r0
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
  41305c:	2701      	movs	r7, #1
  41305e:	4087      	lsls	r7, r0
  413060:	b2bf      	uxth	r7, r7
  413062:	3f01      	subs	r7, #1
  413064:	b2bf      	uxth	r7, r7

    lv_coord_t w = 0;
    int8_t pos   = 0;
    uint32_t ofs = 0;
    switch(dsc->header.cf) {
  413066:	f89a 300c 	ldrb.w	r3, [sl, #12]
  41306a:	f003 031f 	and.w	r3, r3, #31
  41306e:	3b07      	subs	r3, #7
  413070:	2b03      	cmp	r3, #3
  413072:	d868      	bhi.n	413146 <lv_img_decoder_built_in_line_indexed+0x106>
  413074:	e8df f003 	tbb	[pc, r3]
  413078:	58412902 	.word	0x58412902
        case LV_IMG_CF_INDEXED_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
  41307c:	f8da 300c 	ldr.w	r3, [sl, #12]
  413080:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413084:	10da      	asrs	r2, r3, #3
  413086:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x7) w++;
  41308a:	f013 0f07 	tst.w	r3, #7
  41308e:	d001      	beq.n	413094 <lv_img_decoder_built_in_line_indexed+0x54>
  413090:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 3); /*First pixel*/
  413094:	10e3      	asrs	r3, r4, #3
  413096:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 8;                /*Skip the palette*/
  41309a:	f106 0308 	add.w	r3, r6, #8
  41309e:	9301      	str	r3, [sp, #4]
            pos = 7 - (x & 0x7);
  4130a0:	43e4      	mvns	r4, r4
  4130a2:	f004 0407 	and.w	r4, r4, #7
            ofs += 1024;       /*Skip the palette*/
            pos = 0;
            break;
    }

    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
  4130a6:	f8da 601c 	ldr.w	r6, [sl, #28]

#if LV_USE_FILESYSTEM
    uint8_t * fs_buf = _lv_mem_buf_get(w);
  4130aa:	4658      	mov	r0, fp
  4130ac:	4b48      	ldr	r3, [pc, #288]	; (4131d0 <lv_img_decoder_built_in_line_indexed+0x190>)
  4130ae:	4798      	blx	r3
  4130b0:	9000      	str	r0, [sp, #0]
#endif
    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
  4130b2:	f89a 300a 	ldrb.w	r3, [sl, #10]
  4130b6:	2b00      	cmp	r3, #0
  4130b8:	d14c      	bne.n	413154 <lv_img_decoder_built_in_line_indexed+0x114>
        const lv_img_dsc_t * img_dsc = dsc->src;
  4130ba:	f8da 3004 	ldr.w	r3, [sl, #4]
        data_tmp                     = img_dsc->data + ofs;
  4130be:	689b      	ldr	r3, [r3, #8]
  4130c0:	9a01      	ldr	r2, [sp, #4]
  4130c2:	441a      	add	r2, r3
  4130c4:	4696      	mov	lr, r2
    }
    else {
#if LV_USE_FILESYSTEM
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
        lv_fs_read(user_data->f, fs_buf, w, NULL);
        data_tmp = fs_buf;
  4130c6:	2100      	movs	r1, #0
  4130c8:	e056      	b.n	413178 <lv_img_decoder_built_in_line_indexed+0x138>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
  4130ca:	f8da 300c 	ldr.w	r3, [sl, #12]
  4130ce:	f3c3 238a 	ubfx	r3, r3, #10, #11
  4130d2:	109a      	asrs	r2, r3, #2
  4130d4:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x3) w++;
  4130d8:	f013 0f03 	tst.w	r3, #3
  4130dc:	d001      	beq.n	4130e2 <lv_img_decoder_built_in_line_indexed+0xa2>
  4130de:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 2); /*First pixel*/
  4130e2:	10a3      	asrs	r3, r4, #2
  4130e4:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 16;               /*Skip the palette*/
  4130e8:	f106 0310 	add.w	r3, r6, #16
  4130ec:	9301      	str	r3, [sp, #4]
            pos = 6 - ((x & 0x3) * 2);
  4130ee:	b2a4      	uxth	r4, r4
  4130f0:	43e4      	mvns	r4, r4
  4130f2:	f004 0403 	and.w	r4, r4, #3
  4130f6:	0064      	lsls	r4, r4, #1
            break;
  4130f8:	e7d5      	b.n	4130a6 <lv_img_decoder_built_in_line_indexed+0x66>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
  4130fa:	f8da 300c 	ldr.w	r3, [sl, #12]
  4130fe:	f3c3 238a 	ubfx	r3, r3, #10, #11
  413102:	105a      	asrs	r2, r3, #1
  413104:	fa0f fb82 	sxth.w	fp, r2
            if(dsc->header.w & 0x1) w++;
  413108:	f013 0f01 	tst.w	r3, #1
  41310c:	d001      	beq.n	413112 <lv_img_decoder_built_in_line_indexed+0xd2>
  41310e:	f102 0b01 	add.w	fp, r2, #1
            ofs += w * y + (x >> 1); /*First pixel*/
  413112:	1063      	asrs	r3, r4, #1
  413114:	fb06 360b 	mla	r6, r6, fp, r3
            ofs += 64;               /*Skip the palette*/
  413118:	f106 0340 	add.w	r3, r6, #64	; 0x40
  41311c:	9301      	str	r3, [sp, #4]
            pos = 4 - ((x & 0x1) * 4);
  41311e:	f014 0f01 	tst.w	r4, #1
  413122:	d115      	bne.n	413150 <lv_img_decoder_built_in_line_indexed+0x110>
  413124:	2404      	movs	r4, #4
  413126:	e7be      	b.n	4130a6 <lv_img_decoder_built_in_line_indexed+0x66>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
  413128:	f8da 300c 	ldr.w	r3, [sl, #12]
  41312c:	f3c3 2b8a 	ubfx	fp, r3, #10, #11
  413130:	fa1f f38b 	uxth.w	r3, fp
  413134:	fa0f fb8b 	sxth.w	fp, fp
            ofs += w * y + x;  /*First pixel*/
  413138:	fb06 4403 	mla	r4, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
  41313c:	f504 6380 	add.w	r3, r4, #1024	; 0x400
  413140:	9301      	str	r3, [sp, #4]
            pos = 0;
  413142:	2400      	movs	r4, #0
            break;
  413144:	e7af      	b.n	4130a6 <lv_img_decoder_built_in_line_indexed+0x66>
    uint32_t ofs = 0;
  413146:	2300      	movs	r3, #0
  413148:	9301      	str	r3, [sp, #4]
    int8_t pos   = 0;
  41314a:	461c      	mov	r4, r3
    lv_coord_t w = 0;
  41314c:	469b      	mov	fp, r3
  41314e:	e7aa      	b.n	4130a6 <lv_img_decoder_built_in_line_indexed+0x66>
            pos = 4 - ((x & 0x1) * 4);
  413150:	2400      	movs	r4, #0
  413152:	e7a8      	b.n	4130a6 <lv_img_decoder_built_in_line_indexed+0x66>
        lv_fs_seek(user_data->f, ofs + 4); /*+4 to skip the header*/
  413154:	9901      	ldr	r1, [sp, #4]
  413156:	3104      	adds	r1, #4
  413158:	6830      	ldr	r0, [r6, #0]
  41315a:	4b1e      	ldr	r3, [pc, #120]	; (4131d4 <lv_img_decoder_built_in_line_indexed+0x194>)
  41315c:	4798      	blx	r3
        lv_fs_read(user_data->f, fs_buf, w, NULL);
  41315e:	2300      	movs	r3, #0
  413160:	465a      	mov	r2, fp
  413162:	f8dd b000 	ldr.w	fp, [sp]
  413166:	4659      	mov	r1, fp
  413168:	6830      	ldr	r0, [r6, #0]
  41316a:	f8df a070 	ldr.w	sl, [pc, #112]	; 4131dc <lv_img_decoder_built_in_line_indexed+0x19c>
  41316e:	47d0      	blx	sl
        data_tmp = fs_buf;
  413170:	46de      	mov	lr, fp
  413172:	e7a8      	b.n	4130c6 <lv_img_decoder_built_in_line_indexed+0x86>
        return LV_RES_INV;
#endif
    }

    lv_coord_t i;
    for(i = 0; i < len; i++) {
  413174:	3101      	adds	r1, #1
  413176:	b209      	sxth	r1, r1
  413178:	4549      	cmp	r1, r9
  41317a:	da20      	bge.n	4131be <lv_img_decoder_built_in_line_indexed+0x17e>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
  41317c:	f89e 3000 	ldrb.w	r3, [lr]
  413180:	fa07 f204 	lsl.w	r2, r7, r4
  413184:	4013      	ands	r3, r2
  413186:	4123      	asrs	r3, r4

        lv_color_t color = user_data->palette[val_act];
  413188:	6870      	ldr	r0, [r6, #4]
  41318a:	b2db      	uxtb	r3, r3
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
  41318c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
  413190:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
  413194:	54a8      	strb	r0, [r5, r2]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
  413196:	f102 0c01 	add.w	ip, r2, #1
  41319a:	0a00      	lsrs	r0, r0, #8
  41319c:	f805 000c 	strb.w	r0, [r5, ip]
#elif LV_COLOR_DEPTH == 32
        *((uint32_t *)&buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE]) = color.full;
#else
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
  4131a0:	3202      	adds	r2, #2
  4131a2:	68b0      	ldr	r0, [r6, #8]
  4131a4:	5cc3      	ldrb	r3, [r0, r3]
  4131a6:	54ab      	strb	r3, [r5, r2]

        pos -= px_size;
  4131a8:	eba4 0408 	sub.w	r4, r4, r8
  4131ac:	b264      	sxtb	r4, r4
        if(pos < 0) {
  4131ae:	2c00      	cmp	r4, #0
  4131b0:	dae0      	bge.n	413174 <lv_img_decoder_built_in_line_indexed+0x134>
            pos = 8 - px_size;
  4131b2:	f1c8 0408 	rsb	r4, r8, #8
  4131b6:	b264      	sxtb	r4, r4
            data_tmp++;
  4131b8:	f10e 0e01 	add.w	lr, lr, #1
  4131bc:	e7da      	b.n	413174 <lv_img_decoder_built_in_line_indexed+0x134>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
  4131be:	9800      	ldr	r0, [sp, #0]
  4131c0:	4b05      	ldr	r3, [pc, #20]	; (4131d8 <lv_img_decoder_built_in_line_indexed+0x198>)
  4131c2:	4798      	blx	r3
    return LV_RES_OK;
#else
    LV_LOG_WARN("Image built-in indexed line reader failed because LV_IMG_CF_INDEXED is 0 in lv_conf.h");
    return LV_RES_INV;
#endif
}
  4131c4:	2001      	movs	r0, #1
  4131c6:	b003      	add	sp, #12
  4131c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4131cc:	0040cdf9 	.word	0x0040cdf9
  4131d0:	00416269 	.word	0x00416269
  4131d4:	004158c9 	.word	0x004158c9
  4131d8:	00416019 	.word	0x00416019
  4131dc:	0041588d 	.word	0x0041588d

004131e0 <lv_img_decoder_built_in_read_line>:
{
  4131e0:	b530      	push	{r4, r5, lr}
  4131e2:	b083      	sub	sp, #12
  4131e4:	4608      	mov	r0, r1
  4131e6:	4611      	mov	r1, r2
  4131e8:	461a      	mov	r2, r3
  4131ea:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
  4131ee:	7b04      	ldrb	r4, [r0, #12]
  4131f0:	f004 041f 	and.w	r4, r4, #31
  4131f4:	1f25      	subs	r5, r4, #4
  4131f6:	b2ed      	uxtb	r5, r5
  4131f8:	2d02      	cmp	r5, #2
  4131fa:	d80a      	bhi.n	413212 <lv_img_decoder_built_in_read_line+0x32>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  4131fc:	7a84      	ldrb	r4, [r0, #10]
  4131fe:	2c01      	cmp	r4, #1
  413200:	d002      	beq.n	413208 <lv_img_decoder_built_in_read_line+0x28>
    lv_res_t res = LV_RES_INV;
  413202:	2000      	movs	r0, #0
}
  413204:	b003      	add	sp, #12
  413206:	bd30      	pop	{r4, r5, pc}
            res = lv_img_decoder_built_in_line_true_color(dsc, x, y, len, buf);
  413208:	9c07      	ldr	r4, [sp, #28]
  41320a:	9400      	str	r4, [sp, #0]
  41320c:	4c0b      	ldr	r4, [pc, #44]	; (41323c <lv_img_decoder_built_in_read_line+0x5c>)
  41320e:	47a0      	blx	r4
  413210:	e7f8      	b.n	413204 <lv_img_decoder_built_in_read_line+0x24>
            dsc->header.cf == LV_IMG_CF_ALPHA_4BIT || dsc->header.cf == LV_IMG_CF_ALPHA_8BIT) {
  413212:	f1a4 050b 	sub.w	r5, r4, #11
  413216:	b2ed      	uxtb	r5, r5
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
  413218:	2d03      	cmp	r5, #3
  41321a:	d905      	bls.n	413228 <lv_img_decoder_built_in_read_line+0x48>
            dsc->header.cf == LV_IMG_CF_INDEXED_4BIT || dsc->header.cf == LV_IMG_CF_INDEXED_8BIT) {
  41321c:	3c07      	subs	r4, #7
  41321e:	b2e4      	uxtb	r4, r4
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
  413220:	2c03      	cmp	r4, #3
  413222:	d906      	bls.n	413232 <lv_img_decoder_built_in_read_line+0x52>
        return LV_RES_INV;
  413224:	2000      	movs	r0, #0
  413226:	e7ed      	b.n	413204 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_alpha(dsc, x, y, len, buf);
  413228:	9c07      	ldr	r4, [sp, #28]
  41322a:	9400      	str	r4, [sp, #0]
  41322c:	4c04      	ldr	r4, [pc, #16]	; (413240 <lv_img_decoder_built_in_read_line+0x60>)
  41322e:	47a0      	blx	r4
  413230:	e7e8      	b.n	413204 <lv_img_decoder_built_in_read_line+0x24>
        res = lv_img_decoder_built_in_line_indexed(dsc, x, y, len, buf);
  413232:	9c07      	ldr	r4, [sp, #28]
  413234:	9400      	str	r4, [sp, #0]
  413236:	4c03      	ldr	r4, [pc, #12]	; (413244 <lv_img_decoder_built_in_read_line+0x64>)
  413238:	47a0      	blx	r4
  41323a:	e7e3      	b.n	413204 <lv_img_decoder_built_in_read_line+0x24>
  41323c:	00412de9 	.word	0x00412de9
  413240:	00412e61 	.word	0x00412e61
  413244:	00413041 	.word	0x00413041

00413248 <lv_img_decoder_get_info>:
{
  413248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41324a:	4607      	mov	r7, r0
  41324c:	460e      	mov	r6, r1
    header->always_zero = 0;
  41324e:	780b      	ldrb	r3, [r1, #0]
  413250:	f36f 1347 	bfc	r3, #5, #3
  413254:	700b      	strb	r3, [r1, #0]
    header->h = 0;
  413256:	884b      	ldrh	r3, [r1, #2]
  413258:	f36f 134f 	bfc	r3, #5, #11
  41325c:	804b      	strh	r3, [r1, #2]
    header->w = 0;
  41325e:	680b      	ldr	r3, [r1, #0]
  413260:	f36f 2394 	bfc	r3, #10, #11
  413264:	600b      	str	r3, [r1, #0]
    header->cf = LV_IMG_CF_UNKNOWN;
  413266:	f36f 0304 	bfc	r3, #0, #5
  41326a:	700b      	strb	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41326c:	480c      	ldr	r0, [pc, #48]	; (4132a0 <lv_img_decoder_get_info+0x58>)
  41326e:	4b0d      	ldr	r3, [pc, #52]	; (4132a4 <lv_img_decoder_get_info+0x5c>)
  413270:	4798      	blx	r3
  413272:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  413274:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  413276:	e005      	b.n	413284 <lv_img_decoder_get_info+0x3c>
        res = LV_RES_INV;
  413278:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  41327a:	4621      	mov	r1, r4
  41327c:	4808      	ldr	r0, [pc, #32]	; (4132a0 <lv_img_decoder_get_info+0x58>)
  41327e:	4b0a      	ldr	r3, [pc, #40]	; (4132a8 <lv_img_decoder_get_info+0x60>)
  413280:	4798      	blx	r3
  413282:	4604      	mov	r4, r0
  413284:	b14c      	cbz	r4, 41329a <lv_img_decoder_get_info+0x52>
        if(d->info_cb) {
  413286:	6823      	ldr	r3, [r4, #0]
  413288:	2b00      	cmp	r3, #0
  41328a:	d0f5      	beq.n	413278 <lv_img_decoder_get_info+0x30>
            res = d->info_cb(d, src, header);
  41328c:	4632      	mov	r2, r6
  41328e:	4639      	mov	r1, r7
  413290:	4620      	mov	r0, r4
  413292:	4798      	blx	r3
  413294:	4605      	mov	r5, r0
            if(res == LV_RES_OK) break;
  413296:	2801      	cmp	r0, #1
  413298:	d1ef      	bne.n	41327a <lv_img_decoder_get_info+0x32>
}
  41329a:	4628      	mov	r0, r5
  41329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41329e:	bf00      	nop
  4132a0:	2043a1c4 	.word	0x2043a1c4
  4132a4:	00415ac9 	.word	0x00415ac9
  4132a8:	00415add 	.word	0x00415add

004132ac <lv_img_decoder_open>:
{
  4132ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4132ae:	4606      	mov	r6, r0
  4132b0:	460f      	mov	r7, r1
    dsc->color     = color;
  4132b2:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
  4132b4:	4608      	mov	r0, r1
  4132b6:	4b1d      	ldr	r3, [pc, #116]	; (41332c <lv_img_decoder_open+0x80>)
  4132b8:	4798      	blx	r3
  4132ba:	72b0      	strb	r0, [r6, #10]
    dsc->user_data = NULL;
  4132bc:	2300      	movs	r3, #0
  4132be:	61f3      	str	r3, [r6, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
  4132c0:	2801      	cmp	r0, #1
  4132c2:	d006      	beq.n	4132d2 <lv_img_decoder_open+0x26>
        dsc->src       = src;
  4132c4:	6077      	str	r7, [r6, #4]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4132c6:	481a      	ldr	r0, [pc, #104]	; (413330 <lv_img_decoder_open+0x84>)
  4132c8:	4b1a      	ldr	r3, [pc, #104]	; (413334 <lv_img_decoder_open+0x88>)
  4132ca:	4798      	blx	r3
  4132cc:	4604      	mov	r4, r0
    lv_res_t res = LV_RES_INV;
  4132ce:	2500      	movs	r5, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4132d0:	e00f      	b.n	4132f2 <lv_img_decoder_open+0x46>
        size_t fnlen = strlen(src);
  4132d2:	4638      	mov	r0, r7
  4132d4:	4b18      	ldr	r3, [pc, #96]	; (413338 <lv_img_decoder_open+0x8c>)
  4132d6:	4798      	blx	r3
        dsc->src = lv_mem_alloc(fnlen + 1);
  4132d8:	3001      	adds	r0, #1
  4132da:	4b18      	ldr	r3, [pc, #96]	; (41333c <lv_img_decoder_open+0x90>)
  4132dc:	4798      	blx	r3
  4132de:	6070      	str	r0, [r6, #4]
        strcpy((char *)dsc->src, src);
  4132e0:	4639      	mov	r1, r7
  4132e2:	4b17      	ldr	r3, [pc, #92]	; (413340 <lv_img_decoder_open+0x94>)
  4132e4:	4798      	blx	r3
  4132e6:	e7ee      	b.n	4132c6 <lv_img_decoder_open+0x1a>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
  4132e8:	4621      	mov	r1, r4
  4132ea:	4811      	ldr	r0, [pc, #68]	; (413330 <lv_img_decoder_open+0x84>)
  4132ec:	4b15      	ldr	r3, [pc, #84]	; (413344 <lv_img_decoder_open+0x98>)
  4132ee:	4798      	blx	r3
  4132f0:	4604      	mov	r4, r0
  4132f2:	b1c4      	cbz	r4, 413326 <lv_img_decoder_open+0x7a>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
  4132f4:	6823      	ldr	r3, [r4, #0]
  4132f6:	2b00      	cmp	r3, #0
  4132f8:	d0f6      	beq.n	4132e8 <lv_img_decoder_open+0x3c>
  4132fa:	6862      	ldr	r2, [r4, #4]
  4132fc:	2a00      	cmp	r2, #0
  4132fe:	d0f3      	beq.n	4132e8 <lv_img_decoder_open+0x3c>
        res = d->info_cb(d, src, &dsc->header);
  413300:	f106 020c 	add.w	r2, r6, #12
  413304:	4639      	mov	r1, r7
  413306:	4620      	mov	r0, r4
  413308:	4798      	blx	r3
  41330a:	4605      	mov	r5, r0
        if(res != LV_RES_OK) continue;
  41330c:	2801      	cmp	r0, #1
  41330e:	d1eb      	bne.n	4132e8 <lv_img_decoder_open+0x3c>
        dsc->error_msg = NULL;
  413310:	2300      	movs	r3, #0
  413312:	61b3      	str	r3, [r6, #24]
        dsc->img_data  = NULL;
  413314:	6133      	str	r3, [r6, #16]
        dsc->decoder   = d;
  413316:	6034      	str	r4, [r6, #0]
        res = d->open_cb(d, dsc);
  413318:	6863      	ldr	r3, [r4, #4]
  41331a:	4631      	mov	r1, r6
  41331c:	4620      	mov	r0, r4
  41331e:	4798      	blx	r3
  413320:	4605      	mov	r5, r0
        if(res == LV_RES_OK) break;
  413322:	2801      	cmp	r0, #1
  413324:	d1e0      	bne.n	4132e8 <lv_img_decoder_open+0x3c>
}
  413326:	4628      	mov	r0, r5
  413328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41332a:	bf00      	nop
  41332c:	0040d0bd 	.word	0x0040d0bd
  413330:	2043a1c4 	.word	0x2043a1c4
  413334:	00415ac9 	.word	0x00415ac9
  413338:	00422bc1 	.word	0x00422bc1
  41333c:	00415ec1 	.word	0x00415ec1
  413340:	00422add 	.word	0x00422add
  413344:	00415add 	.word	0x00415add

00413348 <lv_img_decoder_read_line>:
{
  413348:	b570      	push	{r4, r5, r6, lr}
  41334a:	b082      	sub	sp, #8
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
  41334c:	6806      	ldr	r6, [r0, #0]
  41334e:	68b4      	ldr	r4, [r6, #8]
  413350:	b154      	cbz	r4, 413368 <lv_img_decoder_read_line+0x20>
  413352:	461d      	mov	r5, r3
  413354:	4613      	mov	r3, r2
  413356:	460a      	mov	r2, r1
  413358:	4601      	mov	r1, r0
  41335a:	9806      	ldr	r0, [sp, #24]
  41335c:	9001      	str	r0, [sp, #4]
  41335e:	9500      	str	r5, [sp, #0]
  413360:	4630      	mov	r0, r6
  413362:	47a0      	blx	r4
}
  413364:	b002      	add	sp, #8
  413366:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
  413368:	2000      	movs	r0, #0
  41336a:	e7fb      	b.n	413364 <lv_img_decoder_read_line+0x1c>

0041336c <lv_img_decoder_close>:
    if(dsc->decoder) {
  41336c:	6803      	ldr	r3, [r0, #0]
  41336e:	b183      	cbz	r3, 413392 <lv_img_decoder_close+0x26>
{
  413370:	b510      	push	{r4, lr}
  413372:	4604      	mov	r4, r0
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
  413374:	68da      	ldr	r2, [r3, #12]
  413376:	b112      	cbz	r2, 41337e <lv_img_decoder_close+0x12>
  413378:	4601      	mov	r1, r0
  41337a:	4618      	mov	r0, r3
  41337c:	4790      	blx	r2
        if(dsc->src_type == LV_IMG_SRC_FILE) {
  41337e:	7aa3      	ldrb	r3, [r4, #10]
  413380:	2b01      	cmp	r3, #1
  413382:	d000      	beq.n	413386 <lv_img_decoder_close+0x1a>
  413384:	bd10      	pop	{r4, pc}
            lv_mem_free(dsc->src);
  413386:	6860      	ldr	r0, [r4, #4]
  413388:	4b02      	ldr	r3, [pc, #8]	; (413394 <lv_img_decoder_close+0x28>)
  41338a:	4798      	blx	r3
            dsc->src = NULL;
  41338c:	2300      	movs	r3, #0
  41338e:	6063      	str	r3, [r4, #4]
}
  413390:	e7f8      	b.n	413384 <lv_img_decoder_close+0x18>
  413392:	4770      	bx	lr
  413394:	00415f85 	.word	0x00415f85

00413398 <lv_img_decoder_create>:
{
  413398:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
  41339a:	480a      	ldr	r0, [pc, #40]	; (4133c4 <lv_img_decoder_create+0x2c>)
  41339c:	4b0a      	ldr	r3, [pc, #40]	; (4133c8 <lv_img_decoder_create+0x30>)
  41339e:	4798      	blx	r3
  4133a0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(decoder);
  4133a2:	4b0a      	ldr	r3, [pc, #40]	; (4133cc <lv_img_decoder_create+0x34>)
  4133a4:	4798      	blx	r3
  4133a6:	b130      	cbz	r0, 4133b6 <lv_img_decoder_create+0x1e>
    if(decoder == NULL) return NULL;
  4133a8:	b11c      	cbz	r4, 4133b2 <lv_img_decoder_create+0x1a>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
  4133aa:	2110      	movs	r1, #16
  4133ac:	4620      	mov	r0, r4
  4133ae:	4b08      	ldr	r3, [pc, #32]	; (4133d0 <lv_img_decoder_create+0x38>)
  4133b0:	4798      	blx	r3
}
  4133b2:	4620      	mov	r0, r4
  4133b4:	bd10      	pop	{r4, pc}
    LV_ASSERT_MEM(decoder);
  4133b6:	4622      	mov	r2, r4
  4133b8:	2300      	movs	r3, #0
  4133ba:	4806      	ldr	r0, [pc, #24]	; (4133d4 <lv_img_decoder_create+0x3c>)
  4133bc:	4906      	ldr	r1, [pc, #24]	; (4133d8 <lv_img_decoder_create+0x40>)
  4133be:	4788      	blx	r1
  4133c0:	e7fe      	b.n	4133c0 <lv_img_decoder_create+0x28>
  4133c2:	bf00      	nop
  4133c4:	2043a1c4 	.word	0x2043a1c4
  4133c8:	00415a31 	.word	0x00415a31
  4133cc:	004157b9 	.word	0x004157b9
  4133d0:	004163f5 	.word	0x004163f5
  4133d4:	004260b0 	.word	0x004260b0
  4133d8:	004157c5 	.word	0x004157c5

004133dc <lv_img_decoder_set_info_cb>:
    decoder->info_cb = info_cb;
  4133dc:	6001      	str	r1, [r0, #0]
  4133de:	4770      	bx	lr

004133e0 <lv_img_decoder_set_open_cb>:
    decoder->open_cb = open_cb;
  4133e0:	6041      	str	r1, [r0, #4]
  4133e2:	4770      	bx	lr

004133e4 <lv_img_decoder_set_read_line_cb>:
    decoder->read_line_cb = read_line_cb;
  4133e4:	6081      	str	r1, [r0, #8]
  4133e6:	4770      	bx	lr

004133e8 <lv_img_decoder_set_close_cb>:
    decoder->close_cb = close_cb;
  4133e8:	60c1      	str	r1, [r0, #12]
  4133ea:	4770      	bx	lr

004133ec <_lv_img_decoder_init>:
{
  4133ec:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
  4133ee:	2110      	movs	r1, #16
  4133f0:	4810      	ldr	r0, [pc, #64]	; (413434 <_lv_img_decoder_init+0x48>)
  4133f2:	4b11      	ldr	r3, [pc, #68]	; (413438 <_lv_img_decoder_init+0x4c>)
  4133f4:	4798      	blx	r3
    decoder = lv_img_decoder_create();
  4133f6:	4b11      	ldr	r3, [pc, #68]	; (41343c <_lv_img_decoder_init+0x50>)
  4133f8:	4798      	blx	r3
    if(decoder == NULL) {
  4133fa:	4604      	mov	r4, r0
  4133fc:	b178      	cbz	r0, 41341e <_lv_img_decoder_init+0x32>
    lv_img_decoder_set_info_cb(decoder, lv_img_decoder_built_in_info);
  4133fe:	4910      	ldr	r1, [pc, #64]	; (413440 <_lv_img_decoder_init+0x54>)
  413400:	4b10      	ldr	r3, [pc, #64]	; (413444 <_lv_img_decoder_init+0x58>)
  413402:	4798      	blx	r3
    lv_img_decoder_set_open_cb(decoder, lv_img_decoder_built_in_open);
  413404:	4910      	ldr	r1, [pc, #64]	; (413448 <_lv_img_decoder_init+0x5c>)
  413406:	4620      	mov	r0, r4
  413408:	4b10      	ldr	r3, [pc, #64]	; (41344c <_lv_img_decoder_init+0x60>)
  41340a:	4798      	blx	r3
    lv_img_decoder_set_read_line_cb(decoder, lv_img_decoder_built_in_read_line);
  41340c:	4910      	ldr	r1, [pc, #64]	; (413450 <_lv_img_decoder_init+0x64>)
  41340e:	4620      	mov	r0, r4
  413410:	4b10      	ldr	r3, [pc, #64]	; (413454 <_lv_img_decoder_init+0x68>)
  413412:	4798      	blx	r3
    lv_img_decoder_set_close_cb(decoder, lv_img_decoder_built_in_close);
  413414:	4910      	ldr	r1, [pc, #64]	; (413458 <_lv_img_decoder_init+0x6c>)
  413416:	4620      	mov	r0, r4
  413418:	4b10      	ldr	r3, [pc, #64]	; (41345c <_lv_img_decoder_init+0x70>)
  41341a:	4798      	blx	r3
  41341c:	bd10      	pop	{r4, pc}
        LV_ASSERT_MEM(decoder);
  41341e:	4b10      	ldr	r3, [pc, #64]	; (413460 <_lv_img_decoder_init+0x74>)
  413420:	4798      	blx	r3
  413422:	2800      	cmp	r0, #0
  413424:	d1fa      	bne.n	41341c <_lv_img_decoder_init+0x30>
  413426:	4622      	mov	r2, r4
  413428:	2300      	movs	r3, #0
  41342a:	480e      	ldr	r0, [pc, #56]	; (413464 <_lv_img_decoder_init+0x78>)
  41342c:	490e      	ldr	r1, [pc, #56]	; (413468 <_lv_img_decoder_init+0x7c>)
  41342e:	4788      	blx	r1
  413430:	e7fe      	b.n	413430 <_lv_img_decoder_init+0x44>
  413432:	bf00      	nop
  413434:	2043a1c4 	.word	0x2043a1c4
  413438:	00415a1f 	.word	0x00415a1f
  41343c:	00413399 	.word	0x00413399
  413440:	00412a79 	.word	0x00412a79
  413444:	004133dd 	.word	0x004133dd
  413448:	00412b7d 	.word	0x00412b7d
  41344c:	004133e1 	.word	0x004133e1
  413450:	004131e1 	.word	0x004131e1
  413454:	004133e5 	.word	0x004133e5
  413458:	00412b41 	.word	0x00412b41
  41345c:	004133e9 	.word	0x004133e9
  413460:	004157b9 	.word	0x004157b9
  413464:	004260b0 	.word	0x004260b0
  413468:	004157c5 	.word	0x004157c5

0041346c <lv_font_get_glyph_bitmap>:
  41346c:	b508      	push	{r3, lr}
  41346e:	6843      	ldr	r3, [r0, #4]
  413470:	4798      	blx	r3
  413472:	bd08      	pop	{r3, pc}

00413474 <lv_font_get_glyph_dsc>:
  413474:	b510      	push	{r4, lr}
  413476:	6804      	ldr	r4, [r0, #0]
  413478:	47a0      	blx	r4
  41347a:	bd10      	pop	{r4, pc}

0041347c <lv_font_get_glyph_width>:
  41347c:	b510      	push	{r4, lr}
  41347e:	b084      	sub	sp, #16
  413480:	4613      	mov	r3, r2
  413482:	460a      	mov	r2, r1
  413484:	a901      	add	r1, sp, #4
  413486:	4c04      	ldr	r4, [pc, #16]	; (413498 <lv_font_get_glyph_width+0x1c>)
  413488:	47a0      	blx	r4
  41348a:	b118      	cbz	r0, 413494 <lv_font_get_glyph_width+0x18>
  41348c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
  413490:	b004      	add	sp, #16
  413492:	bd10      	pop	{r4, pc}
  413494:	2000      	movs	r0, #0
  413496:	e7fb      	b.n	413490 <lv_font_get_glyph_width+0x14>
  413498:	00413475 	.word	0x00413475

0041349c <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
  41349c:	7803      	ldrb	r3, [r0, #0]
  41349e:	780a      	ldrb	r2, [r1, #0]
  4134a0:	4293      	cmp	r3, r2
  4134a2:	d001      	beq.n	4134a8 <kern_pair_8_compare+0xc>
  4134a4:	1a98      	subs	r0, r3, r2
  4134a6:	4770      	bx	lr
    else return (int32_t) ref8_p[1] - element8_p[1];
  4134a8:	7840      	ldrb	r0, [r0, #1]
  4134aa:	784b      	ldrb	r3, [r1, #1]
  4134ac:	1ac0      	subs	r0, r0, r3

}
  4134ae:	4770      	bx	lr

004134b0 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
  4134b0:	8803      	ldrh	r3, [r0, #0]
  4134b2:	880a      	ldrh	r2, [r1, #0]
  4134b4:	4293      	cmp	r3, r2
  4134b6:	d001      	beq.n	4134bc <kern_pair_16_compare+0xc>
  4134b8:	1a98      	subs	r0, r3, r2
  4134ba:	4770      	bx	lr
    else return (int32_t) ref16_p[1] - element16_p[1];
  4134bc:	8840      	ldrh	r0, [r0, #2]
  4134be:	884b      	ldrh	r3, [r1, #2]
  4134c0:	1ac0      	subs	r0, r0, r3
}
  4134c2:	4770      	bx	lr

004134c4 <unicode_list_compare>:
 *  @retval > 0   Reference is greater than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
  4134c4:	8800      	ldrh	r0, [r0, #0]
  4134c6:	880b      	ldrh	r3, [r1, #0]
}
  4134c8:	1ac0      	subs	r0, r0, r3
  4134ca:	4770      	bx	lr

004134cc <get_glyph_dsc_id>:
    if(letter == '\0') return 0;
  4134cc:	460b      	mov	r3, r1
  4134ce:	2900      	cmp	r1, #0
  4134d0:	d061      	beq.n	413596 <get_glyph_dsc_id+0xca>
{
  4134d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4134d4:	b085      	sub	sp, #20
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4134d6:	6904      	ldr	r4, [r0, #16]
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  4134d8:	6962      	ldr	r2, [r4, #20]
  4134da:	4291      	cmp	r1, r2
  4134dc:	d013      	beq.n	413506 <get_glyph_dsc_id+0x3a>
  4134de:	2200      	movs	r2, #0
    for(i = 0; i < fdsc->cmap_num; i++) {
  4134e0:	8a61      	ldrh	r1, [r4, #18]
  4134e2:	f3c1 0108 	ubfx	r1, r1, #0, #9
  4134e6:	428a      	cmp	r2, r1
  4134e8:	da51      	bge.n	41358e <get_glyph_dsc_id+0xc2>
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
  4134ea:	68a0      	ldr	r0, [r4, #8]
  4134ec:	eb02 0582 	add.w	r5, r2, r2, lsl #2
  4134f0:	00a9      	lsls	r1, r5, #2
  4134f2:	460e      	mov	r6, r1
  4134f4:	1847      	adds	r7, r0, r1
  4134f6:	5841      	ldr	r1, [r0, r1]
  4134f8:	1a59      	subs	r1, r3, r1
        if(rcp > fdsc->cmaps[i].range_length) continue;
  4134fa:	88b8      	ldrh	r0, [r7, #4]
  4134fc:	4281      	cmp	r1, r0
  4134fe:	d904      	bls.n	41350a <get_glyph_dsc_id+0x3e>
    for(i = 0; i < fdsc->cmap_num; i++) {
  413500:	3201      	adds	r2, #1
  413502:	b292      	uxth	r2, r2
  413504:	e7ec      	b.n	4134e0 <get_glyph_dsc_id+0x14>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
  413506:	69a0      	ldr	r0, [r4, #24]
  413508:	e00a      	b.n	413520 <get_glyph_dsc_id+0x54>
  41350a:	461d      	mov	r5, r3
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
  41350c:	7cbb      	ldrb	r3, [r7, #18]
  41350e:	2b02      	cmp	r3, #2
  413510:	d008      	beq.n	413524 <get_glyph_dsc_id+0x58>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
  413512:	b953      	cbnz	r3, 41352a <get_glyph_dsc_id+0x5e>
            const uint8_t * gid_ofs_8 = fdsc->cmaps[i].glyph_id_ofs_list;
  413514:	68fb      	ldr	r3, [r7, #12]
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
  413516:	88f8      	ldrh	r0, [r7, #6]
  413518:	5c5b      	ldrb	r3, [r3, r1]
  41351a:	4418      	add	r0, r3
        fdsc->last_letter = letter;
  41351c:	6165      	str	r5, [r4, #20]
        fdsc->last_glyph_id = glyph_id;
  41351e:	61a0      	str	r0, [r4, #24]
}
  413520:	b005      	add	sp, #20
  413522:	bdf0      	pop	{r4, r5, r6, r7, pc}
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
  413524:	88f8      	ldrh	r0, [r7, #6]
  413526:	4408      	add	r0, r1
  413528:	e7f8      	b.n	41351c <get_glyph_dsc_id+0x50>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
  41352a:	2b03      	cmp	r3, #3
  41352c:	d003      	beq.n	413536 <get_glyph_dsc_id+0x6a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
  41352e:	2b01      	cmp	r3, #1
  413530:	d017      	beq.n	413562 <get_glyph_dsc_id+0x96>
        uint32_t glyph_id = 0;
  413532:	2000      	movs	r0, #0
  413534:	e7f2      	b.n	41351c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413536:	a804      	add	r0, sp, #16
  413538:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  41353c:	68b9      	ldr	r1, [r7, #8]
  41353e:	8a3a      	ldrh	r2, [r7, #16]
  413540:	4b16      	ldr	r3, [pc, #88]	; (41359c <get_glyph_dsc_id+0xd0>)
  413542:	9300      	str	r3, [sp, #0]
  413544:	2302      	movs	r3, #2
  413546:	4f16      	ldr	r7, [pc, #88]	; (4135a0 <get_glyph_dsc_id+0xd4>)
  413548:	47b8      	blx	r7
            if(p) {
  41354a:	4603      	mov	r3, r0
  41354c:	b138      	cbz	r0, 41355e <get_glyph_dsc_id+0x92>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  41354e:	68a2      	ldr	r2, [r4, #8]
  413550:	4416      	add	r6, r2
  413552:	68b0      	ldr	r0, [r6, #8]
  413554:	1a18      	subs	r0, r3, r0
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
  413556:	88f3      	ldrh	r3, [r6, #6]
  413558:	eb03 0060 	add.w	r0, r3, r0, asr #1
  41355c:	e7de      	b.n	41351c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  41355e:	2000      	movs	r0, #0
  413560:	e7dc      	b.n	41351c <get_glyph_dsc_id+0x50>
            uint16_t key = rcp;
  413562:	a804      	add	r0, sp, #16
  413564:	f820 1d02 	strh.w	r1, [r0, #-2]!
            uint16_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
  413568:	68b9      	ldr	r1, [r7, #8]
  41356a:	8a3a      	ldrh	r2, [r7, #16]
  41356c:	4b0b      	ldr	r3, [pc, #44]	; (41359c <get_glyph_dsc_id+0xd0>)
  41356e:	9300      	str	r3, [sp, #0]
  413570:	2302      	movs	r3, #2
  413572:	4f0b      	ldr	r7, [pc, #44]	; (4135a0 <get_glyph_dsc_id+0xd4>)
  413574:	47b8      	blx	r7
            if(p) {
  413576:	b140      	cbz	r0, 41358a <get_glyph_dsc_id+0xbe>
                lv_uintptr_t ofs = p - fdsc->cmaps[i].unicode_list;
  413578:	68a3      	ldr	r3, [r4, #8]
  41357a:	441e      	add	r6, r3
  41357c:	68b3      	ldr	r3, [r6, #8]
  41357e:	1ac2      	subs	r2, r0, r3
                const uint16_t * gid_ofs_16 = fdsc->cmaps[i].glyph_id_ofs_list;
  413580:	68f1      	ldr	r1, [r6, #12]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
  413582:	88f3      	ldrh	r3, [r6, #6]
  413584:	5a88      	ldrh	r0, [r1, r2]
  413586:	4418      	add	r0, r3
  413588:	e7c8      	b.n	41351c <get_glyph_dsc_id+0x50>
        uint32_t glyph_id = 0;
  41358a:	2000      	movs	r0, #0
  41358c:	e7c6      	b.n	41351c <get_glyph_dsc_id+0x50>
    fdsc->last_letter = letter;
  41358e:	6163      	str	r3, [r4, #20]
    fdsc->last_glyph_id = 0;
  413590:	2000      	movs	r0, #0
  413592:	61a0      	str	r0, [r4, #24]
    return 0;
  413594:	e7c4      	b.n	413520 <get_glyph_dsc_id+0x54>
    if(letter == '\0') return 0;
  413596:	4608      	mov	r0, r1
  413598:	4770      	bx	lr
  41359a:	bf00      	nop
  41359c:	004134c5 	.word	0x004134c5
  4135a0:	00416ef1 	.word	0x00416ef1

004135a4 <get_kern_value>:
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4135a4:	6903      	ldr	r3, [r0, #16]
    if(fdsc->kern_classes == 0) {
  4135a6:	7cd8      	ldrb	r0, [r3, #19]
  4135a8:	f010 0f20 	tst.w	r0, #32
  4135ac:	d13a      	bne.n	413624 <get_kern_value+0x80>
{
  4135ae:	b570      	push	{r4, r5, r6, lr}
  4135b0:	b084      	sub	sp, #16
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
  4135b2:	68dc      	ldr	r4, [r3, #12]
        if(kdsc->glyph_ids_size == 0) {
  4135b4:	7ae3      	ldrb	r3, [r4, #11]
  4135b6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
  4135ba:	d004      	beq.n	4135c6 <get_kern_value+0x22>
        else if(kdsc->glyph_ids_size == 1) {
  4135bc:	2b40      	cmp	r3, #64	; 0x40
  4135be:	d01a      	beq.n	4135f6 <get_kern_value+0x52>
    int8_t value = 0;
  4135c0:	2000      	movs	r0, #0
}
  4135c2:	b004      	add	sp, #16
  4135c4:	bd70      	pop	{r4, r5, r6, pc}
            const uint16_t * g_ids = kdsc->glyph_ids;
  4135c6:	6825      	ldr	r5, [r4, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
  4135c8:	0212      	lsls	r2, r2, #8
  4135ca:	b292      	uxth	r2, r2
  4135cc:	440a      	add	r2, r1
  4135ce:	a804      	add	r0, sp, #16
  4135d0:	f820 2d04 	strh.w	r2, [r0, #-4]!
            uint16_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
  4135d4:	68a2      	ldr	r2, [r4, #8]
  4135d6:	4b1d      	ldr	r3, [pc, #116]	; (41364c <get_kern_value+0xa8>)
  4135d8:	9300      	str	r3, [sp, #0]
  4135da:	2302      	movs	r3, #2
  4135dc:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  4135e0:	4629      	mov	r1, r5
  4135e2:	4e1b      	ldr	r6, [pc, #108]	; (413650 <get_kern_value+0xac>)
  4135e4:	47b0      	blx	r6
            if(kid_p) {
  4135e6:	b120      	cbz	r0, 4135f2 <get_kern_value+0x4e>
                lv_uintptr_t ofs = kid_p - g_ids;
  4135e8:	1b43      	subs	r3, r0, r5
  4135ea:	105b      	asrs	r3, r3, #1
                value = kdsc->values[ofs];
  4135ec:	6862      	ldr	r2, [r4, #4]
  4135ee:	56d0      	ldrsb	r0, [r2, r3]
  4135f0:	e7e7      	b.n	4135c2 <get_kern_value+0x1e>
    int8_t value = 0;
  4135f2:	2000      	movs	r0, #0
  4135f4:	e7e5      	b.n	4135c2 <get_kern_value+0x1e>
            const uint32_t * g_ids = kdsc->glyph_ids;
  4135f6:	6825      	ldr	r5, [r4, #0]
            uint32_t g_id_both = (gid_right << 16) + gid_left; /*Create one number from the ids*/
  4135f8:	eb01 4202 	add.w	r2, r1, r2, lsl #16
  4135fc:	a804      	add	r0, sp, #16
  4135fe:	f840 2d04 	str.w	r2, [r0, #-4]!
            uint32_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
  413602:	68a2      	ldr	r2, [r4, #8]
  413604:	4b13      	ldr	r3, [pc, #76]	; (413654 <get_kern_value+0xb0>)
  413606:	9300      	str	r3, [sp, #0]
  413608:	2304      	movs	r3, #4
  41360a:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
  41360e:	4629      	mov	r1, r5
  413610:	4e0f      	ldr	r6, [pc, #60]	; (413650 <get_kern_value+0xac>)
  413612:	47b0      	blx	r6
            if(kid_p) {
  413614:	b120      	cbz	r0, 413620 <get_kern_value+0x7c>
                lv_uintptr_t ofs = kid_p - g_ids;
  413616:	1b43      	subs	r3, r0, r5
  413618:	109b      	asrs	r3, r3, #2
                value = kdsc->values[ofs];
  41361a:	6862      	ldr	r2, [r4, #4]
  41361c:	56d0      	ldrsb	r0, [r2, r3]
  41361e:	e7d0      	b.n	4135c2 <get_kern_value+0x1e>
    int8_t value = 0;
  413620:	2000      	movs	r0, #0
  413622:	e7ce      	b.n	4135c2 <get_kern_value+0x1e>
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
  413624:	68d8      	ldr	r0, [r3, #12]
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
  413626:	6843      	ldr	r3, [r0, #4]
  413628:	5c5b      	ldrb	r3, [r3, r1]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
  41362a:	6881      	ldr	r1, [r0, #8]
  41362c:	5c8a      	ldrb	r2, [r1, r2]
        if(left_class > 0 && right_class > 0) {
  41362e:	2b00      	cmp	r3, #0
  413630:	bf18      	it	ne
  413632:	2a00      	cmpne	r2, #0
  413634:	d007      	beq.n	413646 <get_kern_value+0xa2>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
  413636:	6801      	ldr	r1, [r0, #0]
  413638:	3b01      	subs	r3, #1
  41363a:	7b40      	ldrb	r0, [r0, #13]
  41363c:	3a01      	subs	r2, #1
  41363e:	fb00 2303 	mla	r3, r0, r3, r2
  413642:	56c8      	ldrsb	r0, [r1, r3]
  413644:	4770      	bx	lr
    int8_t value = 0;
  413646:	2000      	movs	r0, #0
  413648:	4770      	bx	lr
  41364a:	bf00      	nop
  41364c:	0041349d 	.word	0x0041349d
  413650:	00416ef1 	.word	0x00416ef1
  413654:	004134b1 	.word	0x004134b1

00413658 <decompress>:
{
  413658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41365c:	b087      	sub	sp, #28
  41365e:	460e      	mov	r6, r1
  413660:	4614      	mov	r4, r2
  413662:	9301      	str	r3, [sp, #4]
  413664:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
  413668:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  41366c:	9304      	str	r3, [sp, #16]
    if(bpp == 3) wr_size = 4;
  41366e:	2f03      	cmp	r7, #3
  413670:	d018      	beq.n	4136a4 <decompress+0x4c>
    uint8_t wr_size = bpp;
  413672:	9702      	str	r7, [sp, #8]
    rle_in = in;
  413674:	4ba8      	ldr	r3, [pc, #672]	; (413918 <decompress+0x2c0>)
  413676:	6018      	str	r0, [r3, #0]
    rle_bpp = bpp;
  413678:	4ba8      	ldr	r3, [pc, #672]	; (41391c <decompress+0x2c4>)
  41367a:	701f      	strb	r7, [r3, #0]
    rle_state = RLE_STATE_SINGLE;
  41367c:	2300      	movs	r3, #0
  41367e:	4aa8      	ldr	r2, [pc, #672]	; (413920 <decompress+0x2c8>)
  413680:	7013      	strb	r3, [r2, #0]
    rle_rdp = 0;
  413682:	4aa8      	ldr	r2, [pc, #672]	; (413924 <decompress+0x2cc>)
  413684:	6013      	str	r3, [r2, #0]
    rle_prev_v = 0;
  413686:	4aa8      	ldr	r2, [pc, #672]	; (413928 <decompress+0x2d0>)
  413688:	7013      	strb	r3, [r2, #0]
    rle_cnt = 0;
  41368a:	4aa8      	ldr	r2, [pc, #672]	; (41392c <decompress+0x2d4>)
  41368c:	7013      	strb	r3, [r2, #0]
    uint8_t * line_buf1 = _lv_mem_buf_get(w);
  41368e:	4620      	mov	r0, r4
  413690:	4ba7      	ldr	r3, [pc, #668]	; (413930 <decompress+0x2d8>)
  413692:	4798      	blx	r3
  413694:	4605      	mov	r5, r0
    if(prefilter) {
  413696:	9b04      	ldr	r3, [sp, #16]
  413698:	b93b      	cbnz	r3, 4136aa <decompress+0x52>
    uint8_t * line_buf2 = NULL;
  41369a:	2300      	movs	r3, #0
  41369c:	9303      	str	r3, [sp, #12]
    for(i = 0; i < w; i++) {
  41369e:	2000      	movs	r0, #0
  4136a0:	46a6      	mov	lr, r4
  4136a2:	e03a      	b.n	41371a <decompress+0xc2>
    if(bpp == 3) wr_size = 4;
  4136a4:	2304      	movs	r3, #4
  4136a6:	9302      	str	r3, [sp, #8]
  4136a8:	e7e4      	b.n	413674 <decompress+0x1c>
        line_buf2 = _lv_mem_buf_get(w);
  4136aa:	4620      	mov	r0, r4
  4136ac:	4ba0      	ldr	r3, [pc, #640]	; (413930 <decompress+0x2d8>)
  4136ae:	4798      	blx	r3
  4136b0:	9003      	str	r0, [sp, #12]
  4136b2:	e7f4      	b.n	41369e <decompress+0x46>
            bit_mask = 0x1;
  4136b4:	f04f 0801 	mov.w	r8, #1
  4136b8:	e011      	b.n	4136de <decompress+0x86>
            bit_mask = 0x7;
  4136ba:	f04f 0807 	mov.w	r8, #7
  4136be:	e00e      	b.n	4136de <decompress+0x86>
            bit_mask = 0xF;
  4136c0:	f04f 080f 	mov.w	r8, #15
  4136c4:	e00b      	b.n	4136de <decompress+0x86>
            bit_mask = 0xFF;
  4136c6:	f04f 08ff 	mov.w	r8, #255	; 0xff
  4136ca:	e008      	b.n	4136de <decompress+0x86>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4136cc:	2301      	movs	r3, #1
  4136ce:	4093      	lsls	r3, r2
  4136d0:	b2db      	uxtb	r3, r3
  4136d2:	3b01      	subs	r3, #1
  4136d4:	fa5f f883 	uxtb.w	r8, r3
  4136d8:	e001      	b.n	4136de <decompress+0x86>
            bit_mask = 0x3;
  4136da:	f04f 0803 	mov.w	r8, #3
    uint32_t byte_pos = bit_pos >> 3;
  4136de:	08e3      	lsrs	r3, r4, #3
    bit_pos = bit_pos & 0x7;
  4136e0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4136e4:	eb01 0902 	add.w	r9, r1, r2
  4136e8:	f1b9 0f07 	cmp.w	r9, #7
  4136ec:	d83c      	bhi.n	413768 <decompress+0x110>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4136ee:	f81a 3003 	ldrb.w	r3, [sl, r3]
  4136f2:	4249      	negs	r1, r1
  4136f4:	1a89      	subs	r1, r1, r2
  4136f6:	3108      	adds	r1, #8
  4136f8:	410b      	asrs	r3, r1
  4136fa:	ea03 0308 	and.w	r3, r3, r8
        if(rle_rdp != 0 && rle_prev_v == ret) {
  4136fe:	b11c      	cbz	r4, 413708 <decompress+0xb0>
  413700:	4989      	ldr	r1, [pc, #548]	; (413928 <decompress+0x2d0>)
  413702:	7809      	ldrb	r1, [r1, #0]
  413704:	4299      	cmp	r1, r3
  413706:	d03d      	beq.n	413784 <decompress+0x12c>
        rle_prev_v = ret;
  413708:	4987      	ldr	r1, [pc, #540]	; (413928 <decompress+0x2d0>)
  41370a:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  41370c:	4422      	add	r2, r4
  41370e:	4985      	ldr	r1, [pc, #532]	; (413924 <decompress+0x2cc>)
  413710:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  413712:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413716:	3001      	adds	r0, #1
  413718:	b200      	sxth	r0, r0
  41371a:	4586      	cmp	lr, r0
  41371c:	f340 8188 	ble.w	413a30 <decompress+0x3d8>
        out[i] = rle_next();
  413720:	eb05 0c00 	add.w	ip, r5, r0
    if(rle_state == RLE_STATE_SINGLE) {
  413724:	4b7e      	ldr	r3, [pc, #504]	; (413920 <decompress+0x2c8>)
  413726:	781b      	ldrb	r3, [r3, #0]
  413728:	2b00      	cmp	r3, #0
  41372a:	d136      	bne.n	41379a <decompress+0x142>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41372c:	4b7a      	ldr	r3, [pc, #488]	; (413918 <decompress+0x2c0>)
  41372e:	f8d3 a000 	ldr.w	sl, [r3]
  413732:	4b7c      	ldr	r3, [pc, #496]	; (413924 <decompress+0x2cc>)
  413734:	681c      	ldr	r4, [r3, #0]
  413736:	4b79      	ldr	r3, [pc, #484]	; (41391c <decompress+0x2c4>)
  413738:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  41373a:	1e51      	subs	r1, r2, #1
  41373c:	2907      	cmp	r1, #7
  41373e:	d8c5      	bhi.n	4136cc <decompress+0x74>
  413740:	a301      	add	r3, pc, #4	; (adr r3, 413748 <decompress+0xf0>)
  413742:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
  413746:	bf00      	nop
  413748:	004136b5 	.word	0x004136b5
  41374c:	004136db 	.word	0x004136db
  413750:	004136bb 	.word	0x004136bb
  413754:	004136c1 	.word	0x004136c1
  413758:	004136cd 	.word	0x004136cd
  41375c:	004136cd 	.word	0x004136cd
  413760:	004136cd 	.word	0x004136cd
  413764:	004136c7 	.word	0x004136c7
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413768:	f81a 9003 	ldrb.w	r9, [sl, r3]
  41376c:	4453      	add	r3, sl
  41376e:	785b      	ldrb	r3, [r3, #1]
  413770:	eb03 2309 	add.w	r3, r3, r9, lsl #8
  413774:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413776:	4249      	negs	r1, r1
  413778:	1a89      	subs	r1, r1, r2
  41377a:	3110      	adds	r1, #16
  41377c:	410b      	asrs	r3, r1
  41377e:	ea03 0308 	and.w	r3, r3, r8
  413782:	e7bc      	b.n	4136fe <decompress+0xa6>
            rle_cnt = 0;
  413784:	f04f 0800 	mov.w	r8, #0
  413788:	4968      	ldr	r1, [pc, #416]	; (41392c <decompress+0x2d4>)
  41378a:	f881 8000 	strb.w	r8, [r1]
            rle_state = RLE_STATE_REPEATE;
  41378e:	f04f 0801 	mov.w	r8, #1
  413792:	4963      	ldr	r1, [pc, #396]	; (413920 <decompress+0x2c8>)
  413794:	f881 8000 	strb.w	r8, [r1]
  413798:	e7b6      	b.n	413708 <decompress+0xb0>
    else if(rle_state == RLE_STATE_REPEATE) {
  41379a:	2b01      	cmp	r3, #1
  41379c:	d004      	beq.n	4137a8 <decompress+0x150>
    else if(rle_state == RLE_STATE_COUNTER) {
  41379e:	2b02      	cmp	r3, #2
  4137a0:	f000 80f3 	beq.w	41398a <decompress+0x332>
    uint8_t ret = 0;
  4137a4:	2300      	movs	r3, #0
  4137a6:	e7b4      	b.n	413712 <decompress+0xba>
        v = get_bits(rle_in, rle_rdp, 1);
  4137a8:	4b5b      	ldr	r3, [pc, #364]	; (413918 <decompress+0x2c0>)
  4137aa:	f8d3 8000 	ldr.w	r8, [r3]
  4137ae:	4b5d      	ldr	r3, [pc, #372]	; (413924 <decompress+0x2cc>)
  4137b0:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  4137b2:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  4137b4:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  4137b8:	1c5c      	adds	r4, r3, #1
  4137ba:	2c07      	cmp	r4, #7
  4137bc:	d81d      	bhi.n	4137fa <decompress+0x1a2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4137be:	f818 1001 	ldrb.w	r1, [r8, r1]
  4137c2:	f1c3 0307 	rsb	r3, r3, #7
  4137c6:	fa41 f303 	asr.w	r3, r1, r3
  4137ca:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  4137ce:	4b57      	ldr	r3, [pc, #348]	; (41392c <decompress+0x2d4>)
  4137d0:	781c      	ldrb	r4, [r3, #0]
  4137d2:	3401      	adds	r4, #1
  4137d4:	b2e4      	uxtb	r4, r4
  4137d6:	701c      	strb	r4, [r3, #0]
        rle_rdp += 1;
  4137d8:	3201      	adds	r2, #1
  4137da:	4b52      	ldr	r3, [pc, #328]	; (413924 <decompress+0x2cc>)
  4137dc:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  4137de:	2901      	cmp	r1, #1
  4137e0:	d018      	beq.n	413814 <decompress+0x1bc>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  4137e2:	4b4e      	ldr	r3, [pc, #312]	; (41391c <decompress+0x2c4>)
  4137e4:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  4137e6:	1e63      	subs	r3, r4, #1
  4137e8:	2b07      	cmp	r3, #7
  4137ea:	f200 808e 	bhi.w	41390a <decompress+0x2b2>
  4137ee:	e8df f003 	tbb	[pc, r3]
  4137f2:	a184      	.short	0xa184
  4137f4:	8c8c8886 	.word	0x8c8c8886
  4137f8:	8a8c      	.short	0x8a8c
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4137fa:	f818 4001 	ldrb.w	r4, [r8, r1]
  4137fe:	4441      	add	r1, r8
  413800:	7849      	ldrb	r1, [r1, #1]
  413802:	eb01 2104 	add.w	r1, r1, r4, lsl #8
  413806:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413808:	f1c3 030f 	rsb	r3, r3, #15
  41380c:	4119      	asrs	r1, r3
  41380e:	f001 0101 	and.w	r1, r1, #1
  413812:	e7dc      	b.n	4137ce <decompress+0x176>
            ret = rle_prev_v;
  413814:	4b44      	ldr	r3, [pc, #272]	; (413928 <decompress+0x2d0>)
  413816:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413818:	2c0b      	cmp	r4, #11
  41381a:	f47f af7a 	bne.w	413712 <decompress+0xba>
    uint32_t byte_pos = bit_pos >> 3;
  41381e:	08d4      	lsrs	r4, r2, #3
    bit_pos = bit_pos & 0x7;
  413820:	f002 0907 	and.w	r9, r2, #7
    if(bit_pos + len >= 8) {
  413824:	f109 0a06 	add.w	sl, r9, #6
  413828:	f1ba 0f07 	cmp.w	sl, #7
  41382c:	d815      	bhi.n	41385a <decompress+0x202>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41382e:	f818 4004 	ldrb.w	r4, [r8, r4]
  413832:	f1c9 0902 	rsb	r9, r9, #2
  413836:	fa44 f409 	asr.w	r4, r4, r9
  41383a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  41383e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 41392c <decompress+0x2d4>
  413842:	f889 4000 	strb.w	r4, [r9]
                rle_rdp += 6;
  413846:	3206      	adds	r2, #6
  413848:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 413924 <decompress+0x2cc>
  41384c:	f8c9 2000 	str.w	r2, [r9]
                if(rle_cnt != 0) {
  413850:	b18c      	cbz	r4, 413876 <decompress+0x21e>
                    rle_state = RLE_STATE_COUNTER;
  413852:	2102      	movs	r1, #2
  413854:	4a32      	ldr	r2, [pc, #200]	; (413920 <decompress+0x2c8>)
  413856:	7011      	strb	r1, [r2, #0]
  413858:	e75b      	b.n	413712 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41385a:	f818 a004 	ldrb.w	sl, [r8, r4]
  41385e:	4444      	add	r4, r8
  413860:	7864      	ldrb	r4, [r4, #1]
  413862:	eb04 240a 	add.w	r4, r4, sl, lsl #8
  413866:	b2a4      	uxth	r4, r4
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413868:	f1c9 090a 	rsb	r9, r9, #10
  41386c:	fa44 f409 	asr.w	r4, r4, r9
  413870:	f004 043f 	and.w	r4, r4, #63	; 0x3f
  413874:	e7e3      	b.n	41383e <decompress+0x1e6>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413876:	4b29      	ldr	r3, [pc, #164]	; (41391c <decompress+0x2c4>)
  413878:	781c      	ldrb	r4, [r3, #0]
    switch(len) {
  41387a:	1e63      	subs	r3, r4, #1
  41387c:	2b07      	cmp	r3, #7
  41387e:	d824      	bhi.n	4138ca <decompress+0x272>
  413880:	e8df f003 	tbb	[pc, r3]
  413884:	1f042905 	.word	0x1f042905
  413888:	21232323 	.word	0x21232323
            bit_mask = 0x7;
  41388c:	2107      	movs	r1, #7
    uint32_t byte_pos = bit_pos >> 3;
  41388e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413892:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413896:	eb03 0a04 	add.w	sl, r3, r4
  41389a:	f1ba 0f07 	cmp.w	sl, #7
  41389e:	d81c      	bhi.n	4138da <decompress+0x282>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4138a0:	f818 8009 	ldrb.w	r8, [r8, r9]
  4138a4:	425b      	negs	r3, r3
  4138a6:	1b1b      	subs	r3, r3, r4
  4138a8:	3308      	adds	r3, #8
  4138aa:	fa48 f303 	asr.w	r3, r8, r3
  4138ae:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  4138b0:	491d      	ldr	r1, [pc, #116]	; (413928 <decompress+0x2d0>)
  4138b2:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  4138b4:	4422      	add	r2, r4
  4138b6:	491b      	ldr	r1, [pc, #108]	; (413924 <decompress+0x2cc>)
  4138b8:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  4138ba:	2100      	movs	r1, #0
  4138bc:	4a18      	ldr	r2, [pc, #96]	; (413920 <decompress+0x2c8>)
  4138be:	7011      	strb	r1, [r2, #0]
  4138c0:	e727      	b.n	413712 <decompress+0xba>
            bit_mask = 0xF;
  4138c2:	210f      	movs	r1, #15
  4138c4:	e7e3      	b.n	41388e <decompress+0x236>
            bit_mask = 0xFF;
  4138c6:	21ff      	movs	r1, #255	; 0xff
  4138c8:	e7e1      	b.n	41388e <decompress+0x236>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4138ca:	2101      	movs	r1, #1
  4138cc:	40a1      	lsls	r1, r4
  4138ce:	b2c9      	uxtb	r1, r1
  4138d0:	3901      	subs	r1, #1
  4138d2:	b2c9      	uxtb	r1, r1
  4138d4:	e7db      	b.n	41388e <decompress+0x236>
            bit_mask = 0x3;
  4138d6:	2103      	movs	r1, #3
  4138d8:	e7d9      	b.n	41388e <decompress+0x236>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4138da:	f818 a009 	ldrb.w	sl, [r8, r9]
  4138de:	44c8      	add	r8, r9
  4138e0:	f898 8001 	ldrb.w	r8, [r8, #1]
  4138e4:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  4138e8:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4138ec:	425b      	negs	r3, r3
  4138ee:	1b1b      	subs	r3, r3, r4
  4138f0:	3310      	adds	r3, #16
  4138f2:	fa48 f303 	asr.w	r3, r8, r3
  4138f6:	400b      	ands	r3, r1
  4138f8:	e7da      	b.n	4138b0 <decompress+0x258>
            bit_mask = 0x1;
  4138fa:	2301      	movs	r3, #1
  4138fc:	e01b      	b.n	413936 <decompress+0x2de>
            bit_mask = 0x7;
  4138fe:	2307      	movs	r3, #7
  413900:	e019      	b.n	413936 <decompress+0x2de>
            bit_mask = 0xF;
  413902:	230f      	movs	r3, #15
  413904:	e017      	b.n	413936 <decompress+0x2de>
            bit_mask = 0xFF;
  413906:	23ff      	movs	r3, #255	; 0xff
  413908:	e015      	b.n	413936 <decompress+0x2de>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  41390a:	2301      	movs	r3, #1
  41390c:	40a3      	lsls	r3, r4
  41390e:	b2db      	uxtb	r3, r3
  413910:	3b01      	subs	r3, #1
  413912:	b2db      	uxtb	r3, r3
  413914:	e00f      	b.n	413936 <decompress+0x2de>
  413916:	bf00      	nop
  413918:	2040c734 	.word	0x2040c734
  41391c:	2040c730 	.word	0x2040c730
  413920:	2040c740 	.word	0x2040c740
  413924:	2040c73c 	.word	0x2040c73c
  413928:	2040c738 	.word	0x2040c738
  41392c:	2040c731 	.word	0x2040c731
  413930:	00416269 	.word	0x00416269
            bit_mask = 0x3;
  413934:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413936:	ea4f 09d2 	mov.w	r9, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  41393a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  41393e:	eb01 0a04 	add.w	sl, r1, r4
  413942:	f1ba 0f07 	cmp.w	sl, #7
  413946:	d810      	bhi.n	41396a <decompress+0x312>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413948:	f818 8009 	ldrb.w	r8, [r8, r9]
  41394c:	4249      	negs	r1, r1
  41394e:	1b09      	subs	r1, r1, r4
  413950:	3108      	adds	r1, #8
  413952:	fa48 f101 	asr.w	r1, r8, r1
  413956:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413958:	49b4      	ldr	r1, [pc, #720]	; (413c2c <decompress+0x5d4>)
  41395a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  41395c:	4422      	add	r2, r4
  41395e:	49b4      	ldr	r1, [pc, #720]	; (413c30 <decompress+0x5d8>)
  413960:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413962:	2100      	movs	r1, #0
  413964:	4ab3      	ldr	r2, [pc, #716]	; (413c34 <decompress+0x5dc>)
  413966:	7011      	strb	r1, [r2, #0]
  413968:	e6d3      	b.n	413712 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41396a:	f818 a009 	ldrb.w	sl, [r8, r9]
  41396e:	44c8      	add	r8, r9
  413970:	f898 8001 	ldrb.w	r8, [r8, #1]
  413974:	eb08 280a 	add.w	r8, r8, sl, lsl #8
  413978:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41397c:	4249      	negs	r1, r1
  41397e:	1b09      	subs	r1, r1, r4
  413980:	3110      	adds	r1, #16
  413982:	fa48 f101 	asr.w	r1, r8, r1
  413986:	400b      	ands	r3, r1
  413988:	e7e6      	b.n	413958 <decompress+0x300>
        ret = rle_prev_v;
  41398a:	4ba8      	ldr	r3, [pc, #672]	; (413c2c <decompress+0x5d4>)
  41398c:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  41398e:	49aa      	ldr	r1, [pc, #680]	; (413c38 <decompress+0x5e0>)
  413990:	780a      	ldrb	r2, [r1, #0]
  413992:	3a01      	subs	r2, #1
  413994:	b2d2      	uxtb	r2, r2
  413996:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413998:	2a00      	cmp	r2, #0
  41399a:	f47f aeba 	bne.w	413712 <decompress+0xba>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41399e:	4ba7      	ldr	r3, [pc, #668]	; (413c3c <decompress+0x5e4>)
  4139a0:	f8d3 a000 	ldr.w	sl, [r3]
  4139a4:	4ba2      	ldr	r3, [pc, #648]	; (413c30 <decompress+0x5d8>)
  4139a6:	681c      	ldr	r4, [r3, #0]
  4139a8:	4ba5      	ldr	r3, [pc, #660]	; (413c40 <decompress+0x5e8>)
  4139aa:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  4139ac:	1e53      	subs	r3, r2, #1
  4139ae:	2b07      	cmp	r3, #7
  4139b0:	d80d      	bhi.n	4139ce <decompress+0x376>
  4139b2:	e8df f003 	tbb	[pc, r3]
  4139b6:	1204      	.short	0x1204
  4139b8:	0c0c0806 	.word	0x0c0c0806
  4139bc:	0a0c      	.short	0x0a0c
            bit_mask = 0x1;
  4139be:	2301      	movs	r3, #1
  4139c0:	e00c      	b.n	4139dc <decompress+0x384>
            bit_mask = 0x7;
  4139c2:	2307      	movs	r3, #7
  4139c4:	e00a      	b.n	4139dc <decompress+0x384>
            bit_mask = 0xF;
  4139c6:	230f      	movs	r3, #15
  4139c8:	e008      	b.n	4139dc <decompress+0x384>
            bit_mask = 0xFF;
  4139ca:	23ff      	movs	r3, #255	; 0xff
  4139cc:	e006      	b.n	4139dc <decompress+0x384>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4139ce:	2301      	movs	r3, #1
  4139d0:	4093      	lsls	r3, r2
  4139d2:	b2db      	uxtb	r3, r3
  4139d4:	3b01      	subs	r3, #1
  4139d6:	b2db      	uxtb	r3, r3
  4139d8:	e000      	b.n	4139dc <decompress+0x384>
            bit_mask = 0x3;
  4139da:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4139dc:	ea4f 08d4 	mov.w	r8, r4, lsr #3
    bit_pos = bit_pos & 0x7;
  4139e0:	f004 0107 	and.w	r1, r4, #7
    if(bit_pos + len >= 8) {
  4139e4:	eb01 0902 	add.w	r9, r1, r2
  4139e8:	f1b9 0f07 	cmp.w	r9, #7
  4139ec:	d810      	bhi.n	413a10 <decompress+0x3b8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4139ee:	f81a 8008 	ldrb.w	r8, [sl, r8]
  4139f2:	4249      	negs	r1, r1
  4139f4:	1a89      	subs	r1, r1, r2
  4139f6:	3108      	adds	r1, #8
  4139f8:	fa48 f101 	asr.w	r1, r8, r1
  4139fc:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4139fe:	498b      	ldr	r1, [pc, #556]	; (413c2c <decompress+0x5d4>)
  413a00:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413a02:	4422      	add	r2, r4
  413a04:	498a      	ldr	r1, [pc, #552]	; (413c30 <decompress+0x5d8>)
  413a06:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413a08:	2100      	movs	r1, #0
  413a0a:	4a8a      	ldr	r2, [pc, #552]	; (413c34 <decompress+0x5dc>)
  413a0c:	7011      	strb	r1, [r2, #0]
  413a0e:	e680      	b.n	413712 <decompress+0xba>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413a10:	f81a 9008 	ldrb.w	r9, [sl, r8]
  413a14:	44d0      	add	r8, sl
  413a16:	f898 8001 	ldrb.w	r8, [r8, #1]
  413a1a:	eb08 2809 	add.w	r8, r8, r9, lsl #8
  413a1e:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413a22:	4249      	negs	r1, r1
  413a24:	1a89      	subs	r1, r1, r2
  413a26:	3110      	adds	r1, #16
  413a28:	fa48 f101 	asr.w	r1, r8, r1
  413a2c:	400b      	ands	r3, r1
  413a2e:	e7e6      	b.n	4139fe <decompress+0x3a6>
  413a30:	4674      	mov	r4, lr
    for(i = 0; i < w; i++) {
  413a32:	f04f 0c00 	mov.w	ip, #0
  413a36:	4660      	mov	r0, ip
  413a38:	f8dd e008 	ldr.w	lr, [sp, #8]
  413a3c:	e048      	b.n	413ad0 <decompress+0x478>
        switch(val) {
  413a3e:	2907      	cmp	r1, #7
  413a40:	d805      	bhi.n	413a4e <decompress+0x3f6>
  413a42:	e8df f001 	tbb	[pc, r1]
  413a46:	0723      	.short	0x0723
  413a48:	17130f0b 	.word	0x17130f0b
  413a4c:	1f1b      	.short	0x1f1b
        len = 4;
  413a4e:	f04f 0804 	mov.w	r8, #4
  413a52:	e01e      	b.n	413a92 <decompress+0x43a>
  413a54:	f04f 0804 	mov.w	r8, #4
                val = 2;
  413a58:	2102      	movs	r1, #2
  413a5a:	e01a      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a5c:	f04f 0804 	mov.w	r8, #4
                val = 4;
  413a60:	4641      	mov	r1, r8
  413a62:	e016      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a64:	f04f 0804 	mov.w	r8, #4
                val = 6;
  413a68:	2106      	movs	r1, #6
  413a6a:	e012      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a6c:	f04f 0804 	mov.w	r8, #4
                val = 9;
  413a70:	2109      	movs	r1, #9
  413a72:	e00e      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a74:	f04f 0804 	mov.w	r8, #4
                val = 11;
  413a78:	210b      	movs	r1, #11
  413a7a:	e00a      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a7c:	f04f 0804 	mov.w	r8, #4
                val = 13;
  413a80:	210d      	movs	r1, #13
  413a82:	e006      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a84:	f04f 0804 	mov.w	r8, #4
                val = 15;
  413a88:	210f      	movs	r1, #15
  413a8a:	e002      	b.n	413a92 <decompress+0x43a>
        len = 4;
  413a8c:	f04f 0804 	mov.w	r8, #4
                val = 0;
  413a90:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413a92:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413a96:	4252      	negs	r2, r2
  413a98:	eba2 0208 	sub.w	r2, r2, r8
  413a9c:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413a9e:	2301      	movs	r3, #1
  413aa0:	fa03 f308 	lsl.w	r3, r3, r8
  413aa4:	b2db      	uxtb	r3, r3
  413aa6:	3b01      	subs	r3, #1
  413aa8:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413aaa:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  413aae:	43db      	mvns	r3, r3
  413ab0:	4093      	lsls	r3, r2
  413ab2:	f816 9008 	ldrb.w	r9, [r6, r8]
  413ab6:	ea09 0303 	and.w	r3, r9, r3
  413aba:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413abc:	fa01 f202 	lsl.w	r2, r1, r2
  413ac0:	431a      	orrs	r2, r3
  413ac2:	f806 2008 	strb.w	r2, [r6, r8]
        wrp += wr_size;
  413ac6:	4470      	add	r0, lr
    for(x = 0; x < w; x++) {
  413ac8:	f10c 0c01 	add.w	ip, ip, #1
  413acc:	fa0f fc8c 	sxth.w	ip, ip
  413ad0:	45a4      	cmp	ip, r4
  413ad2:	da05      	bge.n	413ae0 <decompress+0x488>
        bits_write(out, wrp, line_buf1[x], bpp);
  413ad4:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  413ad8:	2f03      	cmp	r7, #3
  413ada:	d0b0      	beq.n	413a3e <decompress+0x3e6>
  413adc:	46b8      	mov	r8, r7
  413ade:	e7d8      	b.n	413a92 <decompress+0x43a>
  413ae0:	2301      	movs	r3, #1
  413ae2:	9300      	str	r3, [sp, #0]
  413ae4:	f000 bc62 	b.w	4143ac <decompress+0xd54>
            bit_mask = 0x1;
  413ae8:	2301      	movs	r3, #1
  413aea:	e00c      	b.n	413b06 <decompress+0x4ae>
            bit_mask = 0x7;
  413aec:	2307      	movs	r3, #7
  413aee:	e00a      	b.n	413b06 <decompress+0x4ae>
            bit_mask = 0xF;
  413af0:	230f      	movs	r3, #15
  413af2:	e008      	b.n	413b06 <decompress+0x4ae>
            bit_mask = 0xFF;
  413af4:	23ff      	movs	r3, #255	; 0xff
  413af6:	e006      	b.n	413b06 <decompress+0x4ae>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413af8:	2301      	movs	r3, #1
  413afa:	408b      	lsls	r3, r1
  413afc:	b2db      	uxtb	r3, r3
  413afe:	3b01      	subs	r3, #1
  413b00:	b2db      	uxtb	r3, r3
  413b02:	e000      	b.n	413b06 <decompress+0x4ae>
            bit_mask = 0x3;
  413b04:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413b06:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  413b0a:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  413b0e:	eb02 0b01 	add.w	fp, r2, r1
  413b12:	f1bb 0f07 	cmp.w	fp, #7
  413b16:	d83d      	bhi.n	413b94 <decompress+0x53c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413b18:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413b1c:	4252      	negs	r2, r2
  413b1e:	1a52      	subs	r2, r2, r1
  413b20:	3208      	adds	r2, #8
  413b22:	fa48 f202 	asr.w	r2, r8, r2
  413b26:	4013      	ands	r3, r2
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413b28:	b118      	cbz	r0, 413b32 <decompress+0x4da>
  413b2a:	4a40      	ldr	r2, [pc, #256]	; (413c2c <decompress+0x5d4>)
  413b2c:	7812      	ldrb	r2, [r2, #0]
  413b2e:	429a      	cmp	r2, r3
  413b30:	d041      	beq.n	413bb6 <decompress+0x55e>
        rle_prev_v = ret;
  413b32:	4a3e      	ldr	r2, [pc, #248]	; (413c2c <decompress+0x5d4>)
  413b34:	7013      	strb	r3, [r2, #0]
        rle_rdp += rle_bpp;
  413b36:	4401      	add	r1, r0
  413b38:	4a3d      	ldr	r2, [pc, #244]	; (413c30 <decompress+0x5d8>)
  413b3a:	6011      	str	r1, [r2, #0]
        out[i] = rle_next();
  413b3c:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413b40:	f10e 0e01 	add.w	lr, lr, #1
  413b44:	fa0f fe8e 	sxth.w	lr, lr
  413b48:	4574      	cmp	r4, lr
  413b4a:	f340 8191 	ble.w	413e70 <decompress+0x818>
        out[i] = rle_next();
  413b4e:	eb09 0c0e 	add.w	ip, r9, lr
    if(rle_state == RLE_STATE_SINGLE) {
  413b52:	4b38      	ldr	r3, [pc, #224]	; (413c34 <decompress+0x5dc>)
  413b54:	781b      	ldrb	r3, [r3, #0]
  413b56:	2b00      	cmp	r3, #0
  413b58:	d138      	bne.n	413bcc <decompress+0x574>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413b5a:	4b38      	ldr	r3, [pc, #224]	; (413c3c <decompress+0x5e4>)
  413b5c:	f8d3 a000 	ldr.w	sl, [r3]
  413b60:	4b33      	ldr	r3, [pc, #204]	; (413c30 <decompress+0x5d8>)
  413b62:	6818      	ldr	r0, [r3, #0]
  413b64:	4b36      	ldr	r3, [pc, #216]	; (413c40 <decompress+0x5e8>)
  413b66:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413b68:	1e4b      	subs	r3, r1, #1
  413b6a:	2b07      	cmp	r3, #7
  413b6c:	d8c4      	bhi.n	413af8 <decompress+0x4a0>
  413b6e:	a201      	add	r2, pc, #4	; (adr r2, 413b74 <decompress+0x51c>)
  413b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  413b74:	00413ae9 	.word	0x00413ae9
  413b78:	00413b05 	.word	0x00413b05
  413b7c:	00413aed 	.word	0x00413aed
  413b80:	00413af1 	.word	0x00413af1
  413b84:	00413af9 	.word	0x00413af9
  413b88:	00413af9 	.word	0x00413af9
  413b8c:	00413af9 	.word	0x00413af9
  413b90:	00413af5 	.word	0x00413af5
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413b94:	f81a b008 	ldrb.w	fp, [sl, r8]
  413b98:	44d0      	add	r8, sl
  413b9a:	f898 8001 	ldrb.w	r8, [r8, #1]
  413b9e:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413ba2:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413ba6:	4252      	negs	r2, r2
  413ba8:	1a52      	subs	r2, r2, r1
  413baa:	3210      	adds	r2, #16
  413bac:	fa4b fb02 	asr.w	fp, fp, r2
  413bb0:	ea0b 0303 	and.w	r3, fp, r3
  413bb4:	e7b8      	b.n	413b28 <decompress+0x4d0>
            rle_cnt = 0;
  413bb6:	f04f 0800 	mov.w	r8, #0
  413bba:	4a1f      	ldr	r2, [pc, #124]	; (413c38 <decompress+0x5e0>)
  413bbc:	f882 8000 	strb.w	r8, [r2]
            rle_state = RLE_STATE_REPEATE;
  413bc0:	f04f 0801 	mov.w	r8, #1
  413bc4:	4a1b      	ldr	r2, [pc, #108]	; (413c34 <decompress+0x5dc>)
  413bc6:	f882 8000 	strb.w	r8, [r2]
  413bca:	e7b2      	b.n	413b32 <decompress+0x4da>
    else if(rle_state == RLE_STATE_REPEATE) {
  413bcc:	2b01      	cmp	r3, #1
  413bce:	d004      	beq.n	413bda <decompress+0x582>
    else if(rle_state == RLE_STATE_COUNTER) {
  413bd0:	2b02      	cmp	r3, #2
  413bd2:	f000 80f3 	beq.w	413dbc <decompress+0x764>
    uint8_t ret = 0;
  413bd6:	2300      	movs	r3, #0
  413bd8:	e7b0      	b.n	413b3c <decompress+0x4e4>
        v = get_bits(rle_in, rle_rdp, 1);
  413bda:	4b18      	ldr	r3, [pc, #96]	; (413c3c <decompress+0x5e4>)
  413bdc:	f8d3 8000 	ldr.w	r8, [r3]
  413be0:	4b13      	ldr	r3, [pc, #76]	; (413c30 <decompress+0x5d8>)
  413be2:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  413be4:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  413be6:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413bea:	1c58      	adds	r0, r3, #1
  413bec:	2807      	cmp	r0, #7
  413bee:	d829      	bhi.n	413c44 <decompress+0x5ec>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413bf0:	f818 1001 	ldrb.w	r1, [r8, r1]
  413bf4:	f1c3 0307 	rsb	r3, r3, #7
  413bf8:	fa41 f303 	asr.w	r3, r1, r3
  413bfc:	f003 0101 	and.w	r1, r3, #1
        rle_cnt++;
  413c00:	4b0d      	ldr	r3, [pc, #52]	; (413c38 <decompress+0x5e0>)
  413c02:	7818      	ldrb	r0, [r3, #0]
  413c04:	3001      	adds	r0, #1
  413c06:	b2c0      	uxtb	r0, r0
  413c08:	7018      	strb	r0, [r3, #0]
        rle_rdp += 1;
  413c0a:	3201      	adds	r2, #1
  413c0c:	4b08      	ldr	r3, [pc, #32]	; (413c30 <decompress+0x5d8>)
  413c0e:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  413c10:	2901      	cmp	r1, #1
  413c12:	d024      	beq.n	413c5e <decompress+0x606>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413c14:	4b0a      	ldr	r3, [pc, #40]	; (413c40 <decompress+0x5e8>)
  413c16:	7818      	ldrb	r0, [r3, #0]
    switch(len) {
  413c18:	1e43      	subs	r3, r0, #1
  413c1a:	2b07      	cmp	r3, #7
  413c1c:	f200 809c 	bhi.w	413d58 <decompress+0x700>
  413c20:	e8df f003 	tbb	[pc, r3]
  413c24:	9694a092 	.word	0x9694a092
  413c28:	989a9a9a 	.word	0x989a9a9a
  413c2c:	2040c738 	.word	0x2040c738
  413c30:	2040c73c 	.word	0x2040c73c
  413c34:	2040c740 	.word	0x2040c740
  413c38:	2040c731 	.word	0x2040c731
  413c3c:	2040c734 	.word	0x2040c734
  413c40:	2040c730 	.word	0x2040c730
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413c44:	f818 0001 	ldrb.w	r0, [r8, r1]
  413c48:	4441      	add	r1, r8
  413c4a:	7849      	ldrb	r1, [r1, #1]
  413c4c:	eb01 2100 	add.w	r1, r1, r0, lsl #8
  413c50:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413c52:	f1c3 030f 	rsb	r3, r3, #15
  413c56:	4119      	asrs	r1, r3
  413c58:	f001 0101 	and.w	r1, r1, #1
  413c5c:	e7d0      	b.n	413c00 <decompress+0x5a8>
            ret = rle_prev_v;
  413c5e:	4bb8      	ldr	r3, [pc, #736]	; (413f40 <decompress+0x8e8>)
  413c60:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  413c62:	280b      	cmp	r0, #11
  413c64:	f47f af6a 	bne.w	413b3c <decompress+0x4e4>
    uint32_t byte_pos = bit_pos >> 3;
  413c68:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413c6a:	f002 0a07 	and.w	sl, r2, #7
    if(bit_pos + len >= 8) {
  413c6e:	f10a 0b06 	add.w	fp, sl, #6
  413c72:	f1bb 0f07 	cmp.w	fp, #7
  413c76:	d815      	bhi.n	413ca4 <decompress+0x64c>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413c78:	f818 0000 	ldrb.w	r0, [r8, r0]
  413c7c:	f1ca 0a02 	rsb	sl, sl, #2
  413c80:	fa40 f00a 	asr.w	r0, r0, sl
  413c84:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  413c88:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 413f50 <decompress+0x8f8>
  413c8c:	f88a 0000 	strb.w	r0, [sl]
                rle_rdp += 6;
  413c90:	3206      	adds	r2, #6
  413c92:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 413f4c <decompress+0x8f4>
  413c96:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  413c9a:	b188      	cbz	r0, 413cc0 <decompress+0x668>
                    rle_state = RLE_STATE_COUNTER;
  413c9c:	2102      	movs	r1, #2
  413c9e:	4aa9      	ldr	r2, [pc, #676]	; (413f44 <decompress+0x8ec>)
  413ca0:	7011      	strb	r1, [r2, #0]
  413ca2:	e74b      	b.n	413b3c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413ca4:	f818 b000 	ldrb.w	fp, [r8, r0]
  413ca8:	4440      	add	r0, r8
  413caa:	7840      	ldrb	r0, [r0, #1]
  413cac:	eb00 200b 	add.w	r0, r0, fp, lsl #8
  413cb0:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413cb2:	f1ca 0a0a 	rsb	sl, sl, #10
  413cb6:	fa40 f00a 	asr.w	r0, r0, sl
  413cba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  413cbe:	e7e3      	b.n	413c88 <decompress+0x630>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413cc0:	4ba1      	ldr	r3, [pc, #644]	; (413f48 <decompress+0x8f0>)
  413cc2:	f893 b000 	ldrb.w	fp, [r3]
    switch(len) {
  413cc6:	f10b 33ff 	add.w	r3, fp, #4294967295
  413cca:	2b07      	cmp	r3, #7
  413ccc:	d80b      	bhi.n	413ce6 <decompress+0x68e>
  413cce:	e8df f003 	tbb	[pc, r3]
  413cd2:	1112      	.short	0x1112
  413cd4:	0a0a0604 	.word	0x0a0a0604
  413cd8:	080a      	.short	0x080a
            bit_mask = 0x7;
  413cda:	2107      	movs	r1, #7
  413cdc:	e00b      	b.n	413cf6 <decompress+0x69e>
            bit_mask = 0xF;
  413cde:	210f      	movs	r1, #15
  413ce0:	e009      	b.n	413cf6 <decompress+0x69e>
            bit_mask = 0xFF;
  413ce2:	21ff      	movs	r1, #255	; 0xff
  413ce4:	e007      	b.n	413cf6 <decompress+0x69e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413ce6:	2101      	movs	r1, #1
  413ce8:	fa01 f10b 	lsl.w	r1, r1, fp
  413cec:	b2c9      	uxtb	r1, r1
  413cee:	3901      	subs	r1, #1
  413cf0:	b2c9      	uxtb	r1, r1
  413cf2:	e000      	b.n	413cf6 <decompress+0x69e>
            bit_mask = 0x3;
  413cf4:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  413cf6:	08d0      	lsrs	r0, r2, #3
    bit_pos = bit_pos & 0x7;
  413cf8:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  413cfc:	eb03 0a0b 	add.w	sl, r3, fp
  413d00:	f1ba 0f07 	cmp.w	sl, #7
  413d04:	d811      	bhi.n	413d2a <decompress+0x6d2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413d06:	f818 0000 	ldrb.w	r0, [r8, r0]
  413d0a:	425b      	negs	r3, r3
  413d0c:	eba3 030b 	sub.w	r3, r3, fp
  413d10:	3308      	adds	r3, #8
  413d12:	fa40 f303 	asr.w	r3, r0, r3
  413d16:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  413d18:	4989      	ldr	r1, [pc, #548]	; (413f40 <decompress+0x8e8>)
  413d1a:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  413d1c:	445a      	add	r2, fp
  413d1e:	498b      	ldr	r1, [pc, #556]	; (413f4c <decompress+0x8f4>)
  413d20:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  413d22:	2100      	movs	r1, #0
  413d24:	4a87      	ldr	r2, [pc, #540]	; (413f44 <decompress+0x8ec>)
  413d26:	7011      	strb	r1, [r2, #0]
  413d28:	e708      	b.n	413b3c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413d2a:	f818 a000 	ldrb.w	sl, [r8, r0]
  413d2e:	4440      	add	r0, r8
  413d30:	7840      	ldrb	r0, [r0, #1]
  413d32:	eb00 200a 	add.w	r0, r0, sl, lsl #8
  413d36:	b280      	uxth	r0, r0
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413d38:	425b      	negs	r3, r3
  413d3a:	eba3 030b 	sub.w	r3, r3, fp
  413d3e:	3310      	adds	r3, #16
  413d40:	fa40 f303 	asr.w	r3, r0, r3
  413d44:	400b      	ands	r3, r1
  413d46:	e7e7      	b.n	413d18 <decompress+0x6c0>
            bit_mask = 0x1;
  413d48:	2301      	movs	r3, #1
  413d4a:	e00c      	b.n	413d66 <decompress+0x70e>
            bit_mask = 0x7;
  413d4c:	2307      	movs	r3, #7
  413d4e:	e00a      	b.n	413d66 <decompress+0x70e>
            bit_mask = 0xF;
  413d50:	230f      	movs	r3, #15
  413d52:	e008      	b.n	413d66 <decompress+0x70e>
            bit_mask = 0xFF;
  413d54:	23ff      	movs	r3, #255	; 0xff
  413d56:	e006      	b.n	413d66 <decompress+0x70e>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413d58:	2301      	movs	r3, #1
  413d5a:	4083      	lsls	r3, r0
  413d5c:	b2db      	uxtb	r3, r3
  413d5e:	3b01      	subs	r3, #1
  413d60:	b2db      	uxtb	r3, r3
  413d62:	e000      	b.n	413d66 <decompress+0x70e>
            bit_mask = 0x3;
  413d64:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413d66:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  413d6a:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  413d6e:	eb01 0b00 	add.w	fp, r1, r0
  413d72:	f1bb 0f07 	cmp.w	fp, #7
  413d76:	d810      	bhi.n	413d9a <decompress+0x742>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413d78:	f818 800a 	ldrb.w	r8, [r8, sl]
  413d7c:	4249      	negs	r1, r1
  413d7e:	1a09      	subs	r1, r1, r0
  413d80:	3108      	adds	r1, #8
  413d82:	fa48 f101 	asr.w	r1, r8, r1
  413d86:	400b      	ands	r3, r1
            rle_prev_v = ret;
  413d88:	496d      	ldr	r1, [pc, #436]	; (413f40 <decompress+0x8e8>)
  413d8a:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  413d8c:	4402      	add	r2, r0
  413d8e:	496f      	ldr	r1, [pc, #444]	; (413f4c <decompress+0x8f4>)
  413d90:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  413d92:	2100      	movs	r1, #0
  413d94:	4a6b      	ldr	r2, [pc, #428]	; (413f44 <decompress+0x8ec>)
  413d96:	7011      	strb	r1, [r2, #0]
  413d98:	e6d0      	b.n	413b3c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413d9a:	f818 b00a 	ldrb.w	fp, [r8, sl]
  413d9e:	44d0      	add	r8, sl
  413da0:	f898 8001 	ldrb.w	r8, [r8, #1]
  413da4:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413da8:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413dac:	4249      	negs	r1, r1
  413dae:	1a09      	subs	r1, r1, r0
  413db0:	3110      	adds	r1, #16
  413db2:	fa4b fb01 	asr.w	fp, fp, r1
  413db6:	ea0b 0303 	and.w	r3, fp, r3
  413dba:	e7e5      	b.n	413d88 <decompress+0x730>
        ret = rle_prev_v;
  413dbc:	4b60      	ldr	r3, [pc, #384]	; (413f40 <decompress+0x8e8>)
  413dbe:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  413dc0:	4963      	ldr	r1, [pc, #396]	; (413f50 <decompress+0x8f8>)
  413dc2:	780a      	ldrb	r2, [r1, #0]
  413dc4:	3a01      	subs	r2, #1
  413dc6:	b2d2      	uxtb	r2, r2
  413dc8:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  413dca:	2a00      	cmp	r2, #0
  413dcc:	f47f aeb6 	bne.w	413b3c <decompress+0x4e4>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413dd0:	4b60      	ldr	r3, [pc, #384]	; (413f54 <decompress+0x8fc>)
  413dd2:	f8d3 a000 	ldr.w	sl, [r3]
  413dd6:	4b5d      	ldr	r3, [pc, #372]	; (413f4c <decompress+0x8f4>)
  413dd8:	6818      	ldr	r0, [r3, #0]
  413dda:	4b5b      	ldr	r3, [pc, #364]	; (413f48 <decompress+0x8f0>)
  413ddc:	7819      	ldrb	r1, [r3, #0]
    switch(len) {
  413dde:	1e4b      	subs	r3, r1, #1
  413de0:	2b07      	cmp	r3, #7
  413de2:	d80d      	bhi.n	413e00 <decompress+0x7a8>
  413de4:	e8df f003 	tbb	[pc, r3]
  413de8:	08061204 	.word	0x08061204
  413dec:	0a0c0c0c 	.word	0x0a0c0c0c
            bit_mask = 0x1;
  413df0:	2301      	movs	r3, #1
  413df2:	e00c      	b.n	413e0e <decompress+0x7b6>
            bit_mask = 0x7;
  413df4:	2307      	movs	r3, #7
  413df6:	e00a      	b.n	413e0e <decompress+0x7b6>
            bit_mask = 0xF;
  413df8:	230f      	movs	r3, #15
  413dfa:	e008      	b.n	413e0e <decompress+0x7b6>
            bit_mask = 0xFF;
  413dfc:	23ff      	movs	r3, #255	; 0xff
  413dfe:	e006      	b.n	413e0e <decompress+0x7b6>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413e00:	2301      	movs	r3, #1
  413e02:	408b      	lsls	r3, r1
  413e04:	b2db      	uxtb	r3, r3
  413e06:	3b01      	subs	r3, #1
  413e08:	b2db      	uxtb	r3, r3
  413e0a:	e000      	b.n	413e0e <decompress+0x7b6>
            bit_mask = 0x3;
  413e0c:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  413e0e:	ea4f 08d0 	mov.w	r8, r0, lsr #3
    bit_pos = bit_pos & 0x7;
  413e12:	f000 0207 	and.w	r2, r0, #7
    if(bit_pos + len >= 8) {
  413e16:	eb02 0b01 	add.w	fp, r2, r1
  413e1a:	f1bb 0f07 	cmp.w	fp, #7
  413e1e:	d810      	bhi.n	413e42 <decompress+0x7ea>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413e20:	f81a 8008 	ldrb.w	r8, [sl, r8]
  413e24:	4252      	negs	r2, r2
  413e26:	1a52      	subs	r2, r2, r1
  413e28:	3208      	adds	r2, #8
  413e2a:	fa48 f202 	asr.w	r2, r8, r2
  413e2e:	4013      	ands	r3, r2
            rle_prev_v = ret;
  413e30:	4a43      	ldr	r2, [pc, #268]	; (413f40 <decompress+0x8e8>)
  413e32:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  413e34:	4401      	add	r1, r0
  413e36:	4a45      	ldr	r2, [pc, #276]	; (413f4c <decompress+0x8f4>)
  413e38:	6011      	str	r1, [r2, #0]
            rle_state = RLE_STATE_SINGLE;
  413e3a:	2100      	movs	r1, #0
  413e3c:	4a41      	ldr	r2, [pc, #260]	; (413f44 <decompress+0x8ec>)
  413e3e:	7011      	strb	r1, [r2, #0]
  413e40:	e67c      	b.n	413b3c <decompress+0x4e4>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  413e42:	f81a b008 	ldrb.w	fp, [sl, r8]
  413e46:	44d0      	add	r8, sl
  413e48:	f898 8001 	ldrb.w	r8, [r8, #1]
  413e4c:	eb08 2b0b 	add.w	fp, r8, fp, lsl #8
  413e50:	fa1f fb8b 	uxth.w	fp, fp
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  413e54:	4252      	negs	r2, r2
  413e56:	1a52      	subs	r2, r2, r1
  413e58:	3210      	adds	r2, #16
  413e5a:	fa4b fb02 	asr.w	fp, fp, r2
  413e5e:	ea0b 0303 	and.w	r3, fp, r3
  413e62:	e7e5      	b.n	413e30 <decompress+0x7d8>
  413e64:	f04f 0e00 	mov.w	lr, #0
  413e68:	9005      	str	r0, [sp, #20]
  413e6a:	f8dd 900c 	ldr.w	r9, [sp, #12]
  413e6e:	e66b      	b.n	413b48 <decompress+0x4f0>
  413e70:	9805      	ldr	r0, [sp, #20]
    for(i = 0; i < w; i++) {
  413e72:	f04f 0c00 	mov.w	ip, #0
  413e76:	f8dd e008 	ldr.w	lr, [sp, #8]
  413e7a:	f8dd 800c 	ldr.w	r8, [sp, #12]
  413e7e:	e048      	b.n	413f12 <decompress+0x8ba>
        switch(val) {
  413e80:	2907      	cmp	r1, #7
  413e82:	d805      	bhi.n	413e90 <decompress+0x838>
  413e84:	e8df f001 	tbb	[pc, r1]
  413e88:	0f0b0723 	.word	0x0f0b0723
  413e8c:	1f1b1713 	.word	0x1f1b1713
        len = 4;
  413e90:	f04f 0904 	mov.w	r9, #4
  413e94:	e01e      	b.n	413ed4 <decompress+0x87c>
  413e96:	f04f 0904 	mov.w	r9, #4
                val = 2;
  413e9a:	2102      	movs	r1, #2
  413e9c:	e01a      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413e9e:	f04f 0904 	mov.w	r9, #4
                val = 4;
  413ea2:	4649      	mov	r1, r9
  413ea4:	e016      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413ea6:	f04f 0904 	mov.w	r9, #4
                val = 6;
  413eaa:	2106      	movs	r1, #6
  413eac:	e012      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413eae:	f04f 0904 	mov.w	r9, #4
                val = 9;
  413eb2:	2109      	movs	r1, #9
  413eb4:	e00e      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413eb6:	f04f 0904 	mov.w	r9, #4
                val = 11;
  413eba:	210b      	movs	r1, #11
  413ebc:	e00a      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413ebe:	f04f 0904 	mov.w	r9, #4
                val = 13;
  413ec2:	210d      	movs	r1, #13
  413ec4:	e006      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413ec6:	f04f 0904 	mov.w	r9, #4
                val = 15;
  413eca:	210f      	movs	r1, #15
  413ecc:	e002      	b.n	413ed4 <decompress+0x87c>
        len = 4;
  413ece:	f04f 0904 	mov.w	r9, #4
                val = 0;
  413ed2:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  413ed4:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  413ed8:	4252      	negs	r2, r2
  413eda:	eba2 0209 	sub.w	r2, r2, r9
  413ede:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413ee0:	2301      	movs	r3, #1
  413ee2:	fa03 f309 	lsl.w	r3, r3, r9
  413ee6:	b2db      	uxtb	r3, r3
  413ee8:	3b01      	subs	r3, #1
  413eea:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  413eec:	f3c0 09cf 	ubfx	r9, r0, #3, #16
  413ef0:	43db      	mvns	r3, r3
  413ef2:	4093      	lsls	r3, r2
  413ef4:	f816 a009 	ldrb.w	sl, [r6, r9]
  413ef8:	ea0a 0303 	and.w	r3, sl, r3
  413efc:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  413efe:	fa01 f202 	lsl.w	r2, r1, r2
  413f02:	431a      	orrs	r2, r3
  413f04:	f806 2009 	strb.w	r2, [r6, r9]
                wrp += wr_size;
  413f08:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  413f0a:	f10c 0c01 	add.w	ip, ip, #1
  413f0e:	fa0f fc8c 	sxth.w	ip, ip
  413f12:	45a4      	cmp	ip, r4
  413f14:	f280 8246 	bge.w	4143a4 <decompress+0xd4c>
                line_buf1[x] = line_buf2[x] ^ line_buf1[x];
  413f18:	f818 100c 	ldrb.w	r1, [r8, ip]
  413f1c:	f815 300c 	ldrb.w	r3, [r5, ip]
  413f20:	4059      	eors	r1, r3
  413f22:	f805 100c 	strb.w	r1, [r5, ip]
    if(len == 3) {
  413f26:	2f03      	cmp	r7, #3
  413f28:	d0aa      	beq.n	413e80 <decompress+0x828>
  413f2a:	46b9      	mov	r9, r7
  413f2c:	e7d2      	b.n	413ed4 <decompress+0x87c>
            bit_mask = 0x1;
  413f2e:	f04f 0901 	mov.w	r9, #1
  413f32:	e01d      	b.n	413f70 <decompress+0x918>
            bit_mask = 0x7;
  413f34:	f04f 0907 	mov.w	r9, #7
  413f38:	e01a      	b.n	413f70 <decompress+0x918>
            bit_mask = 0xF;
  413f3a:	f04f 090f 	mov.w	r9, #15
  413f3e:	e017      	b.n	413f70 <decompress+0x918>
  413f40:	2040c738 	.word	0x2040c738
  413f44:	2040c740 	.word	0x2040c740
  413f48:	2040c730 	.word	0x2040c730
  413f4c:	2040c73c 	.word	0x2040c73c
  413f50:	2040c731 	.word	0x2040c731
  413f54:	2040c734 	.word	0x2040c734
            bit_mask = 0xFF;
  413f58:	f04f 09ff 	mov.w	r9, #255	; 0xff
  413f5c:	e008      	b.n	413f70 <decompress+0x918>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  413f5e:	2301      	movs	r3, #1
  413f60:	4093      	lsls	r3, r2
  413f62:	b2db      	uxtb	r3, r3
  413f64:	3b01      	subs	r3, #1
  413f66:	fa5f f983 	uxtb.w	r9, r3
  413f6a:	e001      	b.n	413f70 <decompress+0x918>
            bit_mask = 0x3;
  413f6c:	f04f 0903 	mov.w	r9, #3
    uint32_t byte_pos = bit_pos >> 3;
  413f70:	ea4f 0ad8 	mov.w	sl, r8, lsr #3
    bit_pos = bit_pos & 0x7;
  413f74:	f008 0107 	and.w	r1, r8, #7
    if(bit_pos + len >= 8) {
  413f78:	188b      	adds	r3, r1, r2
  413f7a:	2b07      	cmp	r3, #7
  413f7c:	d840      	bhi.n	414000 <decompress+0x9a8>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  413f7e:	f81b 300a 	ldrb.w	r3, [fp, sl]
  413f82:	4249      	negs	r1, r1
  413f84:	1a89      	subs	r1, r1, r2
  413f86:	3108      	adds	r1, #8
  413f88:	410b      	asrs	r3, r1
  413f8a:	ea03 0309 	and.w	r3, r3, r9
        if(rle_rdp != 0 && rle_prev_v == ret) {
  413f8e:	f1b8 0f00 	cmp.w	r8, #0
  413f92:	d003      	beq.n	413f9c <decompress+0x944>
  413f94:	49b9      	ldr	r1, [pc, #740]	; (41427c <decompress+0xc24>)
  413f96:	7809      	ldrb	r1, [r1, #0]
  413f98:	4299      	cmp	r1, r3
  413f9a:	d040      	beq.n	41401e <decompress+0x9c6>
        rle_prev_v = ret;
  413f9c:	49b7      	ldr	r1, [pc, #732]	; (41427c <decompress+0xc24>)
  413f9e:	700b      	strb	r3, [r1, #0]
        rle_rdp += rle_bpp;
  413fa0:	4442      	add	r2, r8
  413fa2:	49b7      	ldr	r1, [pc, #732]	; (414280 <decompress+0xc28>)
  413fa4:	600a      	str	r2, [r1, #0]
        out[i] = rle_next();
  413fa6:	f88c 3000 	strb.w	r3, [ip]
    for(i = 0; i < w; i++) {
  413faa:	f10e 0e01 	add.w	lr, lr, #1
  413fae:	fa0f fe8e 	sxth.w	lr, lr
  413fb2:	4574      	cmp	r4, lr
  413fb4:	f340 81a0 	ble.w	4142f8 <decompress+0xca0>
        out[i] = rle_next();
  413fb8:	eb05 0c0e 	add.w	ip, r5, lr
    if(rle_state == RLE_STATE_SINGLE) {
  413fbc:	4bb1      	ldr	r3, [pc, #708]	; (414284 <decompress+0xc2c>)
  413fbe:	781b      	ldrb	r3, [r3, #0]
  413fc0:	2b00      	cmp	r3, #0
  413fc2:	d137      	bne.n	414034 <decompress+0x9dc>
        ret = get_bits(rle_in, rle_rdp, rle_bpp);
  413fc4:	4bb0      	ldr	r3, [pc, #704]	; (414288 <decompress+0xc30>)
  413fc6:	f8d3 b000 	ldr.w	fp, [r3]
  413fca:	4bad      	ldr	r3, [pc, #692]	; (414280 <decompress+0xc28>)
  413fcc:	f8d3 8000 	ldr.w	r8, [r3]
  413fd0:	4bae      	ldr	r3, [pc, #696]	; (41428c <decompress+0xc34>)
  413fd2:	781a      	ldrb	r2, [r3, #0]
    switch(len) {
  413fd4:	1e53      	subs	r3, r2, #1
  413fd6:	2b07      	cmp	r3, #7
  413fd8:	d8c1      	bhi.n	413f5e <decompress+0x906>
  413fda:	a101      	add	r1, pc, #4	; (adr r1, 413fe0 <decompress+0x988>)
  413fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
  413fe0:	00413f2f 	.word	0x00413f2f
  413fe4:	00413f6d 	.word	0x00413f6d
  413fe8:	00413f35 	.word	0x00413f35
  413fec:	00413f3b 	.word	0x00413f3b
  413ff0:	00413f5f 	.word	0x00413f5f
  413ff4:	00413f5f 	.word	0x00413f5f
  413ff8:	00413f5f 	.word	0x00413f5f
  413ffc:	00413f59 	.word	0x00413f59
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414000:	f81b 300a 	ldrb.w	r3, [fp, sl]
  414004:	44da      	add	sl, fp
  414006:	f89a a001 	ldrb.w	sl, [sl, #1]
  41400a:	eb0a 2303 	add.w	r3, sl, r3, lsl #8
  41400e:	b29b      	uxth	r3, r3
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414010:	4249      	negs	r1, r1
  414012:	1a89      	subs	r1, r1, r2
  414014:	3110      	adds	r1, #16
  414016:	410b      	asrs	r3, r1
  414018:	ea03 0309 	and.w	r3, r3, r9
  41401c:	e7b7      	b.n	413f8e <decompress+0x936>
            rle_cnt = 0;
  41401e:	f04f 0900 	mov.w	r9, #0
  414022:	499b      	ldr	r1, [pc, #620]	; (414290 <decompress+0xc38>)
  414024:	f881 9000 	strb.w	r9, [r1]
            rle_state = RLE_STATE_REPEATE;
  414028:	f04f 0901 	mov.w	r9, #1
  41402c:	4995      	ldr	r1, [pc, #596]	; (414284 <decompress+0xc2c>)
  41402e:	f881 9000 	strb.w	r9, [r1]
  414032:	e7b3      	b.n	413f9c <decompress+0x944>
    else if(rle_state == RLE_STATE_REPEATE) {
  414034:	2b01      	cmp	r3, #1
  414036:	d004      	beq.n	414042 <decompress+0x9ea>
    else if(rle_state == RLE_STATE_COUNTER) {
  414038:	2b02      	cmp	r3, #2
  41403a:	f000 80fa 	beq.w	414232 <decompress+0xbda>
    uint8_t ret = 0;
  41403e:	2300      	movs	r3, #0
  414040:	e7b1      	b.n	413fa6 <decompress+0x94e>
        v = get_bits(rle_in, rle_rdp, 1);
  414042:	4b91      	ldr	r3, [pc, #580]	; (414288 <decompress+0xc30>)
  414044:	f8d3 9000 	ldr.w	r9, [r3]
  414048:	4b8d      	ldr	r3, [pc, #564]	; (414280 <decompress+0xc28>)
  41404a:	681a      	ldr	r2, [r3, #0]
    uint32_t byte_pos = bit_pos >> 3;
  41404c:	08d1      	lsrs	r1, r2, #3
    bit_pos = bit_pos & 0x7;
  41404e:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414052:	f103 0801 	add.w	r8, r3, #1
  414056:	f1b8 0f07 	cmp.w	r8, #7
  41405a:	d822      	bhi.n	4140a2 <decompress+0xa4a>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  41405c:	f819 1001 	ldrb.w	r1, [r9, r1]
  414060:	f1c3 0307 	rsb	r3, r3, #7
  414064:	4119      	asrs	r1, r3
  414066:	f001 0101 	and.w	r1, r1, #1
        rle_cnt++;
  41406a:	4b89      	ldr	r3, [pc, #548]	; (414290 <decompress+0xc38>)
  41406c:	f893 8000 	ldrb.w	r8, [r3]
  414070:	f108 0801 	add.w	r8, r8, #1
  414074:	fa5f f888 	uxtb.w	r8, r8
  414078:	f883 8000 	strb.w	r8, [r3]
        rle_rdp += 1;
  41407c:	3201      	adds	r2, #1
  41407e:	4b80      	ldr	r3, [pc, #512]	; (414280 <decompress+0xc28>)
  414080:	601a      	str	r2, [r3, #0]
        if(v == 1) {
  414082:	2901      	cmp	r1, #1
  414084:	d01a      	beq.n	4140bc <decompress+0xa64>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414086:	4b81      	ldr	r3, [pc, #516]	; (41428c <decompress+0xc34>)
  414088:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  41408c:	f108 33ff 	add.w	r3, r8, #4294967295
  414090:	2b07      	cmp	r3, #7
  414092:	f200 8099 	bhi.w	4141c8 <decompress+0xb70>
  414096:	e8df f003 	tbb	[pc, r3]
  41409a:	9e8f      	.short	0x9e8f
  41409c:	97979391 	.word	0x97979391
  4140a0:	9597      	.short	0x9597
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4140a2:	f819 8001 	ldrb.w	r8, [r9, r1]
  4140a6:	4449      	add	r1, r9
  4140a8:	7849      	ldrb	r1, [r1, #1]
  4140aa:	eb01 2108 	add.w	r1, r1, r8, lsl #8
  4140ae:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4140b0:	f1c3 030f 	rsb	r3, r3, #15
  4140b4:	4119      	asrs	r1, r3
  4140b6:	f001 0101 	and.w	r1, r1, #1
  4140ba:	e7d6      	b.n	41406a <decompress+0xa12>
            ret = rle_prev_v;
  4140bc:	4b6f      	ldr	r3, [pc, #444]	; (41427c <decompress+0xc24>)
  4140be:	781b      	ldrb	r3, [r3, #0]
            if(rle_cnt == 11) {
  4140c0:	f1b8 0f0b 	cmp.w	r8, #11
  4140c4:	f47f af6f 	bne.w	413fa6 <decompress+0x94e>
    uint32_t byte_pos = bit_pos >> 3;
  4140c8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4140cc:	f002 0b07 	and.w	fp, r2, #7
    if(bit_pos + len >= 8) {
  4140d0:	f10b 0806 	add.w	r8, fp, #6
  4140d4:	f1b8 0f07 	cmp.w	r8, #7
  4140d8:	d817      	bhi.n	41410a <decompress+0xab2>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4140da:	f819 a00a 	ldrb.w	sl, [r9, sl]
  4140de:	f1cb 0802 	rsb	r8, fp, #2
  4140e2:	fa4a f808 	asr.w	r8, sl, r8
  4140e6:	f008 083f 	and.w	r8, r8, #63	; 0x3f
                rle_cnt = get_bits(rle_in, rle_rdp, 6);
  4140ea:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 414290 <decompress+0xc38>
  4140ee:	f88a 8000 	strb.w	r8, [sl]
                rle_rdp += 6;
  4140f2:	3206      	adds	r2, #6
  4140f4:	f8df a188 	ldr.w	sl, [pc, #392]	; 414280 <decompress+0xc28>
  4140f8:	f8ca 2000 	str.w	r2, [sl]
                if(rle_cnt != 0) {
  4140fc:	f1b8 0f00 	cmp.w	r8, #0
  414100:	d013      	beq.n	41412a <decompress+0xad2>
                    rle_state = RLE_STATE_COUNTER;
  414102:	2102      	movs	r1, #2
  414104:	4a5f      	ldr	r2, [pc, #380]	; (414284 <decompress+0xc2c>)
  414106:	7011      	strb	r1, [r2, #0]
  414108:	e74d      	b.n	413fa6 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41410a:	f819 800a 	ldrb.w	r8, [r9, sl]
  41410e:	44ca      	add	sl, r9
  414110:	f89a a001 	ldrb.w	sl, [sl, #1]
  414114:	eb0a 2808 	add.w	r8, sl, r8, lsl #8
  414118:	fa1f f888 	uxth.w	r8, r8
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  41411c:	f1cb 0b0a 	rsb	fp, fp, #10
  414120:	fa48 f80b 	asr.w	r8, r8, fp
  414124:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  414128:	e7df      	b.n	4140ea <decompress+0xa92>
                    ret = get_bits(rle_in, rle_rdp, rle_bpp);
  41412a:	4b58      	ldr	r3, [pc, #352]	; (41428c <decompress+0xc34>)
  41412c:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414130:	f108 33ff 	add.w	r3, r8, #4294967295
  414134:	2b07      	cmp	r3, #7
  414136:	d80b      	bhi.n	414150 <decompress+0xaf8>
  414138:	e8df f003 	tbb	[pc, r3]
  41413c:	06041112 	.word	0x06041112
  414140:	080a0a0a 	.word	0x080a0a0a
            bit_mask = 0x7;
  414144:	2107      	movs	r1, #7
  414146:	e00b      	b.n	414160 <decompress+0xb08>
            bit_mask = 0xF;
  414148:	210f      	movs	r1, #15
  41414a:	e009      	b.n	414160 <decompress+0xb08>
            bit_mask = 0xFF;
  41414c:	21ff      	movs	r1, #255	; 0xff
  41414e:	e007      	b.n	414160 <decompress+0xb08>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414150:	2101      	movs	r1, #1
  414152:	fa01 f108 	lsl.w	r1, r1, r8
  414156:	b2c9      	uxtb	r1, r1
  414158:	3901      	subs	r1, #1
  41415a:	b2c9      	uxtb	r1, r1
  41415c:	e000      	b.n	414160 <decompress+0xb08>
            bit_mask = 0x3;
  41415e:	2103      	movs	r1, #3
    uint32_t byte_pos = bit_pos >> 3;
  414160:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  414164:	f002 0307 	and.w	r3, r2, #7
    if(bit_pos + len >= 8) {
  414168:	eb03 0b08 	add.w	fp, r3, r8
  41416c:	f1bb 0f07 	cmp.w	fp, #7
  414170:	d811      	bhi.n	414196 <decompress+0xb3e>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  414172:	f819 900a 	ldrb.w	r9, [r9, sl]
  414176:	425b      	negs	r3, r3
  414178:	eba3 0308 	sub.w	r3, r3, r8
  41417c:	3308      	adds	r3, #8
  41417e:	fa49 f303 	asr.w	r3, r9, r3
  414182:	400b      	ands	r3, r1
                    rle_prev_v = ret;
  414184:	493d      	ldr	r1, [pc, #244]	; (41427c <decompress+0xc24>)
  414186:	700b      	strb	r3, [r1, #0]
                    rle_rdp += rle_bpp;
  414188:	4442      	add	r2, r8
  41418a:	493d      	ldr	r1, [pc, #244]	; (414280 <decompress+0xc28>)
  41418c:	600a      	str	r2, [r1, #0]
                    rle_state = RLE_STATE_SINGLE;
  41418e:	2100      	movs	r1, #0
  414190:	4a3c      	ldr	r2, [pc, #240]	; (414284 <decompress+0xc2c>)
  414192:	7011      	strb	r1, [r2, #0]
  414194:	e707      	b.n	413fa6 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  414196:	f819 b00a 	ldrb.w	fp, [r9, sl]
  41419a:	44d1      	add	r9, sl
  41419c:	f899 9001 	ldrb.w	r9, [r9, #1]
  4141a0:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  4141a4:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4141a8:	425b      	negs	r3, r3
  4141aa:	eba3 0308 	sub.w	r3, r3, r8
  4141ae:	3310      	adds	r3, #16
  4141b0:	fa49 f303 	asr.w	r3, r9, r3
  4141b4:	400b      	ands	r3, r1
  4141b6:	e7e5      	b.n	414184 <decompress+0xb2c>
            bit_mask = 0x1;
  4141b8:	2301      	movs	r3, #1
  4141ba:	e00d      	b.n	4141d8 <decompress+0xb80>
            bit_mask = 0x7;
  4141bc:	2307      	movs	r3, #7
  4141be:	e00b      	b.n	4141d8 <decompress+0xb80>
            bit_mask = 0xF;
  4141c0:	230f      	movs	r3, #15
  4141c2:	e009      	b.n	4141d8 <decompress+0xb80>
            bit_mask = 0xFF;
  4141c4:	23ff      	movs	r3, #255	; 0xff
  4141c6:	e007      	b.n	4141d8 <decompress+0xb80>
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  4141c8:	2301      	movs	r3, #1
  4141ca:	fa03 f308 	lsl.w	r3, r3, r8
  4141ce:	b2db      	uxtb	r3, r3
  4141d0:	3b01      	subs	r3, #1
  4141d2:	b2db      	uxtb	r3, r3
  4141d4:	e000      	b.n	4141d8 <decompress+0xb80>
            bit_mask = 0x3;
  4141d6:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4141d8:	ea4f 0ad2 	mov.w	sl, r2, lsr #3
    bit_pos = bit_pos & 0x7;
  4141dc:	f002 0107 	and.w	r1, r2, #7
    if(bit_pos + len >= 8) {
  4141e0:	eb01 0b08 	add.w	fp, r1, r8
  4141e4:	f1bb 0f07 	cmp.w	fp, #7
  4141e8:	d811      	bhi.n	41420e <decompress+0xbb6>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4141ea:	f819 900a 	ldrb.w	r9, [r9, sl]
  4141ee:	4249      	negs	r1, r1
  4141f0:	eba1 0108 	sub.w	r1, r1, r8
  4141f4:	3108      	adds	r1, #8
  4141f6:	fa49 f101 	asr.w	r1, r9, r1
  4141fa:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4141fc:	491f      	ldr	r1, [pc, #124]	; (41427c <decompress+0xc24>)
  4141fe:	700b      	strb	r3, [r1, #0]
            rle_rdp += rle_bpp;
  414200:	4442      	add	r2, r8
  414202:	491f      	ldr	r1, [pc, #124]	; (414280 <decompress+0xc28>)
  414204:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  414206:	2100      	movs	r1, #0
  414208:	4a1e      	ldr	r2, [pc, #120]	; (414284 <decompress+0xc2c>)
  41420a:	7011      	strb	r1, [r2, #0]
  41420c:	e6cb      	b.n	413fa6 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  41420e:	f819 b00a 	ldrb.w	fp, [r9, sl]
  414212:	44d1      	add	r9, sl
  414214:	f899 9001 	ldrb.w	r9, [r9, #1]
  414218:	eb09 290b 	add.w	r9, r9, fp, lsl #8
  41421c:	fa1f f989 	uxth.w	r9, r9
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  414220:	4249      	negs	r1, r1
  414222:	eba1 0108 	sub.w	r1, r1, r8
  414226:	3110      	adds	r1, #16
  414228:	fa49 f901 	asr.w	r9, r9, r1
  41422c:	ea09 0303 	and.w	r3, r9, r3
  414230:	e7e4      	b.n	4141fc <decompress+0xba4>
        ret = rle_prev_v;
  414232:	4b12      	ldr	r3, [pc, #72]	; (41427c <decompress+0xc24>)
  414234:	781b      	ldrb	r3, [r3, #0]
        rle_cnt--;
  414236:	4916      	ldr	r1, [pc, #88]	; (414290 <decompress+0xc38>)
  414238:	780a      	ldrb	r2, [r1, #0]
  41423a:	3a01      	subs	r2, #1
  41423c:	b2d2      	uxtb	r2, r2
  41423e:	700a      	strb	r2, [r1, #0]
        if(rle_cnt == 0) {
  414240:	2a00      	cmp	r2, #0
  414242:	f47f aeb0 	bne.w	413fa6 <decompress+0x94e>
            ret = get_bits(rle_in, rle_rdp, rle_bpp);
  414246:	4b10      	ldr	r3, [pc, #64]	; (414288 <decompress+0xc30>)
  414248:	f8d3 a000 	ldr.w	sl, [r3]
  41424c:	4b0c      	ldr	r3, [pc, #48]	; (414280 <decompress+0xc28>)
  41424e:	f8d3 9000 	ldr.w	r9, [r3]
  414252:	4b0e      	ldr	r3, [pc, #56]	; (41428c <decompress+0xc34>)
  414254:	f893 8000 	ldrb.w	r8, [r3]
    switch(len) {
  414258:	f108 33ff 	add.w	r3, r8, #4294967295
  41425c:	2b07      	cmp	r3, #7
  41425e:	d819      	bhi.n	414294 <decompress+0xc3c>
  414260:	e8df f003 	tbb	[pc, r3]
  414264:	08061f04 	.word	0x08061f04
  414268:	0a181818 	.word	0x0a181818
            bit_mask = 0x1;
  41426c:	2301      	movs	r3, #1
  41426e:	e019      	b.n	4142a4 <decompress+0xc4c>
            bit_mask = 0x7;
  414270:	2307      	movs	r3, #7
  414272:	e017      	b.n	4142a4 <decompress+0xc4c>
            bit_mask = 0xF;
  414274:	230f      	movs	r3, #15
  414276:	e015      	b.n	4142a4 <decompress+0xc4c>
            bit_mask = 0xFF;
  414278:	23ff      	movs	r3, #255	; 0xff
  41427a:	e013      	b.n	4142a4 <decompress+0xc4c>
  41427c:	2040c738 	.word	0x2040c738
  414280:	2040c73c 	.word	0x2040c73c
  414284:	2040c740 	.word	0x2040c740
  414288:	2040c734 	.word	0x2040c734
  41428c:	2040c730 	.word	0x2040c730
  414290:	2040c731 	.word	0x2040c731
            bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414294:	2301      	movs	r3, #1
  414296:	fa03 f308 	lsl.w	r3, r3, r8
  41429a:	b2db      	uxtb	r3, r3
  41429c:	3b01      	subs	r3, #1
  41429e:	b2db      	uxtb	r3, r3
  4142a0:	e000      	b.n	4142a4 <decompress+0xc4c>
            bit_mask = 0x3;
  4142a2:	2303      	movs	r3, #3
    uint32_t byte_pos = bit_pos >> 3;
  4142a4:	ea4f 01d9 	mov.w	r1, r9, lsr #3
    bit_pos = bit_pos & 0x7;
  4142a8:	f009 0207 	and.w	r2, r9, #7
    if(bit_pos + len >= 8) {
  4142ac:	eb02 0b08 	add.w	fp, r2, r8
  4142b0:	f1bb 0f07 	cmp.w	fp, #7
  4142b4:	d812      	bhi.n	4142dc <decompress+0xc84>
        return (in[byte_pos] >> (8 - bit_pos - len)) & bit_mask;
  4142b6:	f81a a001 	ldrb.w	sl, [sl, r1]
  4142ba:	4251      	negs	r1, r2
  4142bc:	eba1 0108 	sub.w	r1, r1, r8
  4142c0:	3108      	adds	r1, #8
  4142c2:	fa4a f101 	asr.w	r1, sl, r1
  4142c6:	400b      	ands	r3, r1
            rle_prev_v = ret;
  4142c8:	4a42      	ldr	r2, [pc, #264]	; (4143d4 <decompress+0xd7c>)
  4142ca:	7013      	strb	r3, [r2, #0]
            rle_rdp += rle_bpp;
  4142cc:	eb08 0209 	add.w	r2, r8, r9
  4142d0:	4941      	ldr	r1, [pc, #260]	; (4143d8 <decompress+0xd80>)
  4142d2:	600a      	str	r2, [r1, #0]
            rle_state = RLE_STATE_SINGLE;
  4142d4:	2100      	movs	r1, #0
  4142d6:	4a41      	ldr	r2, [pc, #260]	; (4143dc <decompress+0xd84>)
  4142d8:	7011      	strb	r1, [r2, #0]
  4142da:	e664      	b.n	413fa6 <decompress+0x94e>
        uint16_t in16 = (in[byte_pos] << 8) + in[byte_pos + 1];
  4142dc:	f81a b001 	ldrb.w	fp, [sl, r1]
  4142e0:	4451      	add	r1, sl
  4142e2:	7849      	ldrb	r1, [r1, #1]
  4142e4:	eb01 210b 	add.w	r1, r1, fp, lsl #8
  4142e8:	b289      	uxth	r1, r1
        return (in16 >> (16 - bit_pos - len)) & bit_mask;
  4142ea:	4252      	negs	r2, r2
  4142ec:	eba2 0208 	sub.w	r2, r2, r8
  4142f0:	3210      	adds	r2, #16
  4142f2:	4111      	asrs	r1, r2
  4142f4:	400b      	ands	r3, r1
  4142f6:	e7e7      	b.n	4142c8 <decompress+0xc70>
    for(i = 0; i < w; i++) {
  4142f8:	f04f 0c00 	mov.w	ip, #0
  4142fc:	f8dd e008 	ldr.w	lr, [sp, #8]
  414300:	e048      	b.n	414394 <decompress+0xd3c>
        switch(val) {
  414302:	2907      	cmp	r1, #7
  414304:	d805      	bhi.n	414312 <decompress+0xcba>
  414306:	e8df f001 	tbb	[pc, r1]
  41430a:	0723      	.short	0x0723
  41430c:	17130f0b 	.word	0x17130f0b
  414310:	1f1b      	.short	0x1f1b
        len = 4;
  414312:	f04f 0804 	mov.w	r8, #4
  414316:	e01e      	b.n	414356 <decompress+0xcfe>
  414318:	f04f 0804 	mov.w	r8, #4
                val = 2;
  41431c:	2102      	movs	r1, #2
  41431e:	e01a      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414320:	f04f 0804 	mov.w	r8, #4
                val = 4;
  414324:	4641      	mov	r1, r8
  414326:	e016      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414328:	f04f 0804 	mov.w	r8, #4
                val = 6;
  41432c:	2106      	movs	r1, #6
  41432e:	e012      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414330:	f04f 0804 	mov.w	r8, #4
                val = 9;
  414334:	2109      	movs	r1, #9
  414336:	e00e      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414338:	f04f 0804 	mov.w	r8, #4
                val = 11;
  41433c:	210b      	movs	r1, #11
  41433e:	e00a      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414340:	f04f 0804 	mov.w	r8, #4
                val = 13;
  414344:	210d      	movs	r1, #13
  414346:	e006      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414348:	f04f 0804 	mov.w	r8, #4
                val = 15;
  41434c:	210f      	movs	r1, #15
  41434e:	e002      	b.n	414356 <decompress+0xcfe>
        len = 4;
  414350:	f04f 0804 	mov.w	r8, #4
                val = 0;
  414354:	2100      	movs	r1, #0
    bit_pos = bit_pos & 0x7;
  414356:	f000 0207 	and.w	r2, r0, #7
    bit_pos = 8 - bit_pos - len;
  41435a:	4252      	negs	r2, r2
  41435c:	eba2 0208 	sub.w	r2, r2, r8
  414360:	3208      	adds	r2, #8
    uint8_t bit_mask = (uint16_t)((uint16_t) 1 << len) - 1;
  414362:	2301      	movs	r3, #1
  414364:	fa03 f308 	lsl.w	r3, r3, r8
  414368:	b2db      	uxtb	r3, r3
  41436a:	3b01      	subs	r3, #1
  41436c:	b2db      	uxtb	r3, r3
    out[byte_pos] &= ((~bit_mask) << bit_pos);
  41436e:	f3c0 08cf 	ubfx	r8, r0, #3, #16
  414372:	43db      	mvns	r3, r3
  414374:	4093      	lsls	r3, r2
  414376:	f816 9008 	ldrb.w	r9, [r6, r8]
  41437a:	ea09 0303 	and.w	r3, r9, r3
  41437e:	b25b      	sxtb	r3, r3
    out[byte_pos] |= (val << bit_pos);
  414380:	fa01 f202 	lsl.w	r2, r1, r2
  414384:	431a      	orrs	r2, r3
  414386:	f806 2008 	strb.w	r2, [r6, r8]
                wrp += wr_size;
  41438a:	4470      	add	r0, lr
            for(x = 0; x < w; x++) {
  41438c:	f10c 0c01 	add.w	ip, ip, #1
  414390:	fa0f fc8c 	sxth.w	ip, ip
  414394:	45a4      	cmp	ip, r4
  414396:	da05      	bge.n	4143a4 <decompress+0xd4c>
                bits_write(out, wrp, line_buf1[x], bpp);
  414398:	f815 100c 	ldrb.w	r1, [r5, ip]
    if(len == 3) {
  41439c:	2f03      	cmp	r7, #3
  41439e:	d0b0      	beq.n	414302 <decompress+0xcaa>
  4143a0:	46b8      	mov	r8, r7
  4143a2:	e7d8      	b.n	414356 <decompress+0xcfe>
    for(y = 1; y < h; y++) {
  4143a4:	9b00      	ldr	r3, [sp, #0]
  4143a6:	3301      	adds	r3, #1
  4143a8:	b21b      	sxth	r3, r3
  4143aa:	9300      	str	r3, [sp, #0]
  4143ac:	9b00      	ldr	r3, [sp, #0]
  4143ae:	9a01      	ldr	r2, [sp, #4]
  4143b0:	4293      	cmp	r3, r2
  4143b2:	da06      	bge.n	4143c2 <decompress+0xd6a>
        if(prefilter) {
  4143b4:	9b04      	ldr	r3, [sp, #16]
  4143b6:	2b00      	cmp	r3, #0
  4143b8:	f47f ad54 	bne.w	413e64 <decompress+0x80c>
  4143bc:	f04f 0e00 	mov.w	lr, #0
  4143c0:	e5f7      	b.n	413fb2 <decompress+0x95a>
    _lv_mem_buf_release(line_buf1);
  4143c2:	4628      	mov	r0, r5
  4143c4:	4c06      	ldr	r4, [pc, #24]	; (4143e0 <decompress+0xd88>)
  4143c6:	47a0      	blx	r4
    _lv_mem_buf_release(line_buf2);
  4143c8:	9803      	ldr	r0, [sp, #12]
  4143ca:	47a0      	blx	r4
}
  4143cc:	b007      	add	sp, #28
  4143ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4143d2:	bf00      	nop
  4143d4:	2040c738 	.word	0x2040c738
  4143d8:	2040c73c 	.word	0x2040c73c
  4143dc:	2040c740 	.word	0x2040c740
  4143e0:	00416019 	.word	0x00416019

004143e4 <lv_font_get_bitmap_fmt_txt>:
{
  4143e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4143e8:	b082      	sub	sp, #8
    if(unicode_letter == '\t') unicode_letter = ' ';
  4143ea:	2909      	cmp	r1, #9
  4143ec:	d01e      	beq.n	41442c <lv_font_get_bitmap_fmt_txt+0x48>
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  4143ee:	6905      	ldr	r5, [r0, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  4143f0:	4b37      	ldr	r3, [pc, #220]	; (4144d0 <lv_font_get_bitmap_fmt_txt+0xec>)
  4143f2:	4798      	blx	r3
    if(!gid) return NULL;
  4143f4:	4607      	mov	r7, r0
  4143f6:	2800      	cmp	r0, #0
  4143f8:	d063      	beq.n	4144c2 <lv_font_get_bitmap_fmt_txt+0xde>
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  4143fa:	686e      	ldr	r6, [r5, #4]
  4143fc:	eb06 08c0 	add.w	r8, r6, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
  414400:	7ceb      	ldrb	r3, [r5, #19]
  414402:	f013 0fc0 	tst.w	r3, #192	; 0xc0
  414406:	d013      	beq.n	414430 <lv_font_get_bitmap_fmt_txt+0x4c>
        uint32_t gsize = gdsc->box_w * gdsc->box_h;
  414408:	f898 3004 	ldrb.w	r3, [r8, #4]
  41440c:	f898 4005 	ldrb.w	r4, [r8, #5]
  414410:	fb04 f403 	mul.w	r4, r4, r3
        if(gsize == 0) return NULL;
  414414:	2c00      	cmp	r4, #0
  414416:	d056      	beq.n	4144c6 <lv_font_get_bitmap_fmt_txt+0xe2>
        switch(fdsc->bpp) {
  414418:	7ceb      	ldrb	r3, [r5, #19]
  41441a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  41441e:	3b01      	subs	r3, #1
  414420:	2b03      	cmp	r3, #3
  414422:	d80e      	bhi.n	414442 <lv_font_get_bitmap_fmt_txt+0x5e>
  414424:	e8df f003 	tbb	[pc, r3]
  414428:	44413e0b 	.word	0x44413e0b
    if(unicode_letter == '\t') unicode_letter = ' ';
  41442c:	2120      	movs	r1, #32
  41442e:	e7de      	b.n	4143ee <lv_font_get_bitmap_fmt_txt+0xa>
        return &fdsc->glyph_bitmap[gdsc->bitmap_index];
  414430:	6828      	ldr	r0, [r5, #0]
  414432:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
  414436:	f3c3 0313 	ubfx	r3, r3, #0, #20
  41443a:	4418      	add	r0, r3
  41443c:	e02f      	b.n	41449e <lv_font_get_bitmap_fmt_txt+0xba>
                buf_size = (gsize + 7) >> 3;
  41443e:	3407      	adds	r4, #7
  414440:	08e4      	lsrs	r4, r4, #3
        if(_lv_mem_get_size(LV_GC_ROOT(_lv_font_decompr_buf)) < buf_size) {
  414442:	4b24      	ldr	r3, [pc, #144]	; (4144d4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414444:	6818      	ldr	r0, [r3, #0]
  414446:	4b24      	ldr	r3, [pc, #144]	; (4144d8 <lv_font_get_bitmap_fmt_txt+0xf4>)
  414448:	4798      	blx	r3
  41444a:	4284      	cmp	r4, r0
  41444c:	d90c      	bls.n	414468 <lv_font_get_bitmap_fmt_txt+0x84>
            uint8_t * tmp = lv_mem_realloc(LV_GC_ROOT(_lv_font_decompr_buf), buf_size);
  41444e:	4621      	mov	r1, r4
  414450:	4b20      	ldr	r3, [pc, #128]	; (4144d4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414452:	6818      	ldr	r0, [r3, #0]
  414454:	4b21      	ldr	r3, [pc, #132]	; (4144dc <lv_font_get_bitmap_fmt_txt+0xf8>)
  414456:	4798      	blx	r3
  414458:	4604      	mov	r4, r0
            LV_ASSERT_MEM(tmp);
  41445a:	4b21      	ldr	r3, [pc, #132]	; (4144e0 <lv_font_get_bitmap_fmt_txt+0xfc>)
  41445c:	4798      	blx	r3
  41445e:	b350      	cbz	r0, 4144b6 <lv_font_get_bitmap_fmt_txt+0xd2>
            if(tmp == NULL) return NULL;
  414460:	2c00      	cmp	r4, #0
  414462:	d032      	beq.n	4144ca <lv_font_get_bitmap_fmt_txt+0xe6>
            LV_GC_ROOT(_lv_font_decompr_buf) = tmp;
  414464:	4b1b      	ldr	r3, [pc, #108]	; (4144d4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414466:	601c      	str	r4, [r3, #0]
        bool prefilter = fdsc->bitmap_format == LV_FONT_FMT_TXT_COMPRESSED ? true : false;
  414468:	7ceb      	ldrb	r3, [r5, #19]
  41446a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
  41446e:	2c40      	cmp	r4, #64	; 0x40
  414470:	bf14      	ite	ne
  414472:	2400      	movne	r4, #0
  414474:	2401      	moveq	r4, #1
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414476:	f8d5 e000 	ldr.w	lr, [r5]
  41447a:	f856 0037 	ldr.w	r0, [r6, r7, lsl #3]
  41447e:	f3c0 0013 	ubfx	r0, r0, #0, #20
                   (uint8_t)fdsc->bpp, prefilter);
  414482:	f3c3 0143 	ubfx	r1, r3, #1, #4
        decompress(&fdsc->glyph_bitmap[gdsc->bitmap_index], LV_GC_ROOT(_lv_font_decompr_buf), gdsc->box_w, gdsc->box_h,
  414486:	f898 3005 	ldrb.w	r3, [r8, #5]
  41448a:	f898 2004 	ldrb.w	r2, [r8, #4]
  41448e:	4d11      	ldr	r5, [pc, #68]	; (4144d4 <lv_font_get_bitmap_fmt_txt+0xf0>)
  414490:	9401      	str	r4, [sp, #4]
  414492:	9100      	str	r1, [sp, #0]
  414494:	6829      	ldr	r1, [r5, #0]
  414496:	4470      	add	r0, lr
  414498:	4c12      	ldr	r4, [pc, #72]	; (4144e4 <lv_font_get_bitmap_fmt_txt+0x100>)
  41449a:	47a0      	blx	r4
        return LV_GC_ROOT(_lv_font_decompr_buf);
  41449c:	6828      	ldr	r0, [r5, #0]
}
  41449e:	b002      	add	sp, #8
  4144a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                buf_size = (gsize + 3) >> 2;
  4144a4:	3403      	adds	r4, #3
  4144a6:	08a4      	lsrs	r4, r4, #2
                break;
  4144a8:	e7cb      	b.n	414442 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  4144aa:	3401      	adds	r4, #1
  4144ac:	0864      	lsrs	r4, r4, #1
                break;
  4144ae:	e7c8      	b.n	414442 <lv_font_get_bitmap_fmt_txt+0x5e>
                buf_size = (gsize + 1) >> 1;
  4144b0:	3401      	adds	r4, #1
  4144b2:	0864      	lsrs	r4, r4, #1
                break;
  4144b4:	e7c5      	b.n	414442 <lv_font_get_bitmap_fmt_txt+0x5e>
            LV_ASSERT_MEM(tmp);
  4144b6:	4622      	mov	r2, r4
  4144b8:	2300      	movs	r3, #0
  4144ba:	480b      	ldr	r0, [pc, #44]	; (4144e8 <lv_font_get_bitmap_fmt_txt+0x104>)
  4144bc:	490b      	ldr	r1, [pc, #44]	; (4144ec <lv_font_get_bitmap_fmt_txt+0x108>)
  4144be:	4788      	blx	r1
  4144c0:	e7fe      	b.n	4144c0 <lv_font_get_bitmap_fmt_txt+0xdc>
    if(!gid) return NULL;
  4144c2:	2000      	movs	r0, #0
  4144c4:	e7eb      	b.n	41449e <lv_font_get_bitmap_fmt_txt+0xba>
        if(gsize == 0) return NULL;
  4144c6:	2000      	movs	r0, #0
  4144c8:	e7e9      	b.n	41449e <lv_font_get_bitmap_fmt_txt+0xba>
            if(tmp == NULL) return NULL;
  4144ca:	2000      	movs	r0, #0
  4144cc:	e7e7      	b.n	41449e <lv_font_get_bitmap_fmt_txt+0xba>
  4144ce:	bf00      	nop
  4144d0:	004134cd 	.word	0x004134cd
  4144d4:	2043a1a8 	.word	0x2043a1a8
  4144d8:	00415ff9 	.word	0x00415ff9
  4144dc:	004161f1 	.word	0x004161f1
  4144e0:	004157b9 	.word	0x004157b9
  4144e4:	00413659 	.word	0x00413659
  4144e8:	004260b0 	.word	0x004260b0
  4144ec:	004157c5 	.word	0x004157c5

004144f0 <lv_font_get_glyph_dsc_fmt_txt>:
{
  4144f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4144f4:	4607      	mov	r7, r0
  4144f6:	460c      	mov	r4, r1
  4144f8:	4699      	mov	r9, r3
    if(unicode_letter == '\t') {
  4144fa:	2a09      	cmp	r2, #9
  4144fc:	d034      	beq.n	414568 <lv_font_get_glyph_dsc_fmt_txt+0x78>
    bool is_tab = false;
  4144fe:	2500      	movs	r5, #0
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
  414500:	693e      	ldr	r6, [r7, #16]
    uint32_t gid = get_glyph_dsc_id(font, unicode_letter);
  414502:	4611      	mov	r1, r2
  414504:	4638      	mov	r0, r7
  414506:	4b20      	ldr	r3, [pc, #128]	; (414588 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  414508:	4798      	blx	r3
    if(!gid) return false;
  41450a:	4680      	mov	r8, r0
  41450c:	2800      	cmp	r0, #0
  41450e:	d035      	beq.n	41457c <lv_font_get_glyph_dsc_fmt_txt+0x8c>
    if(fdsc->kern_dsc) {
  414510:	68f3      	ldr	r3, [r6, #12]
  414512:	2b00      	cmp	r3, #0
  414514:	d030      	beq.n	414578 <lv_font_get_glyph_dsc_fmt_txt+0x88>
        uint32_t gid_next = get_glyph_dsc_id(font, unicode_letter_next);
  414516:	4649      	mov	r1, r9
  414518:	4638      	mov	r0, r7
  41451a:	4b1b      	ldr	r3, [pc, #108]	; (414588 <lv_font_get_glyph_dsc_fmt_txt+0x98>)
  41451c:	4798      	blx	r3
        if(gid_next) {
  41451e:	4602      	mov	r2, r0
  414520:	bb28      	cbnz	r0, 41456e <lv_font_get_glyph_dsc_fmt_txt+0x7e>
    int8_t kvalue = 0;
  414522:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
  414524:	6871      	ldr	r1, [r6, #4]
  414526:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
  41452a:	8a33      	ldrh	r3, [r6, #16]
  41452c:	fb03 f300 	mul.w	r3, r3, r0
  414530:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
  414532:	8848      	ldrh	r0, [r1, #2]
  414534:	f3c0 100b 	ubfx	r0, r0, #4, #12
    if(is_tab) adv_w *= 2;
  414538:	b105      	cbz	r5, 41453c <lv_font_get_glyph_dsc_fmt_txt+0x4c>
  41453a:	0040      	lsls	r0, r0, #1
    adv_w += kv;
  41453c:	4403      	add	r3, r0
    adv_w  = (adv_w + (1 << 3)) >> 4;
  41453e:	3308      	adds	r3, #8
  414540:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
  414542:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
  414544:	794b      	ldrb	r3, [r1, #5]
  414546:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
  414548:	790a      	ldrb	r2, [r1, #4]
  41454a:	8062      	strh	r2, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
  41454c:	f991 3006 	ldrsb.w	r3, [r1, #6]
  414550:	80e3      	strh	r3, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
  414552:	f991 3007 	ldrsb.w	r3, [r1, #7]
  414556:	8123      	strh	r3, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
  414558:	7cf3      	ldrb	r3, [r6, #19]
  41455a:	f3c3 0343 	ubfx	r3, r3, #1, #4
  41455e:	72a3      	strb	r3, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
  414560:	b185      	cbz	r5, 414584 <lv_font_get_glyph_dsc_fmt_txt+0x94>
  414562:	0052      	lsls	r2, r2, #1
  414564:	8062      	strh	r2, [r4, #2]
  414566:	e00a      	b.n	41457e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
        is_tab = true;
  414568:	2501      	movs	r5, #1
        unicode_letter = ' ';
  41456a:	2220      	movs	r2, #32
  41456c:	e7c8      	b.n	414500 <lv_font_get_glyph_dsc_fmt_txt+0x10>
            kvalue = get_kern_value(font, gid, gid_next);
  41456e:	4641      	mov	r1, r8
  414570:	4638      	mov	r0, r7
  414572:	4b06      	ldr	r3, [pc, #24]	; (41458c <lv_font_get_glyph_dsc_fmt_txt+0x9c>)
  414574:	4798      	blx	r3
  414576:	e7d5      	b.n	414524 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    int8_t kvalue = 0;
  414578:	2000      	movs	r0, #0
  41457a:	e7d3      	b.n	414524 <lv_font_get_glyph_dsc_fmt_txt+0x34>
    if(!gid) return false;
  41457c:	2500      	movs	r5, #0
}
  41457e:	4628      	mov	r0, r5
  414580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
  414584:	2501      	movs	r5, #1
  414586:	e7fa      	b.n	41457e <lv_font_get_glyph_dsc_fmt_txt+0x8e>
  414588:	004134cd 	.word	0x004134cd
  41458c:	004135a5 	.word	0x004135a5

00414590 <_lv_font_clean_up_fmt_txt>:
{
  414590:	b508      	push	{r3, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
  414592:	4b04      	ldr	r3, [pc, #16]	; (4145a4 <_lv_font_clean_up_fmt_txt+0x14>)
  414594:	6818      	ldr	r0, [r3, #0]
  414596:	b120      	cbz	r0, 4145a2 <_lv_font_clean_up_fmt_txt+0x12>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
  414598:	4b03      	ldr	r3, [pc, #12]	; (4145a8 <_lv_font_clean_up_fmt_txt+0x18>)
  41459a:	4798      	blx	r3
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
  41459c:	2200      	movs	r2, #0
  41459e:	4b01      	ldr	r3, [pc, #4]	; (4145a4 <_lv_font_clean_up_fmt_txt+0x14>)
  4145a0:	601a      	str	r2, [r3, #0]
  4145a2:	bd08      	pop	{r3, pc}
  4145a4:	2043a1a8 	.word	0x2043a1a8
  4145a8:	00415f85 	.word	0x00415f85

004145ac <lv_disp_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_disp_drv_init(lv_disp_drv_t * driver)
{
  4145ac:	b510      	push	{r4, lr}
  4145ae:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
  4145b0:	2134      	movs	r1, #52	; 0x34
  4145b2:	4b13      	ldr	r3, [pc, #76]	; (414600 <lv_disp_drv_init+0x54>)
  4145b4:	4798      	blx	r3

    driver->flush_cb         = NULL;
  4145b6:	2300      	movs	r3, #0
  4145b8:	60e3      	str	r3, [r4, #12]
    driver->hor_res          = LV_HOR_RES_MAX;
  4145ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4145be:	8022      	strh	r2, [r4, #0]
    driver->ver_res          = LV_VER_RES_MAX;
  4145c0:	22f0      	movs	r2, #240	; 0xf0
  4145c2:	8062      	strh	r2, [r4, #2]
    driver->buffer           = NULL;
  4145c4:	6063      	str	r3, [r4, #4]
    driver->rotated          = 0;
  4145c6:	7a22      	ldrb	r2, [r4, #8]
  4145c8:	f363 0241 	bfi	r2, r3, #1, #1
  4145cc:	7222      	strb	r2, [r4, #8]
    driver->color_chroma_key = LV_COLOR_TRANSP;
  4145ce:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  4145d2:	f042 0207 	orr.w	r2, r2, #7
  4145d6:	f363 02c7 	bfi	r2, r3, #3, #5
  4145da:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  4145de:	22e0      	movs	r2, #224	; 0xe0
  4145e0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    driver->dpi = LV_DPI;
  4145e4:	8922      	ldrh	r2, [r4, #8]
  4145e6:	2194      	movs	r1, #148	; 0x94
  4145e8:	f361 028b 	bfi	r2, r1, #2, #10
  4145ec:	8122      	strh	r2, [r4, #8]

#if LV_ANTIALIAS
    driver->antialiasing = true;
  4145ee:	b2d2      	uxtb	r2, r2
  4145f0:	f042 0201 	orr.w	r2, r2, #1
  4145f4:	7222      	strb	r2, [r4, #8]
#if LV_COLOR_SCREEN_TRANSP
    driver->screen_transp = 1;
#endif

#if LV_USE_GPU
    driver->gpu_blend_cb = NULL;
  4145f6:	62a3      	str	r3, [r4, #40]	; 0x28
    driver->gpu_fill_cb  = NULL;
  4145f8:	62e3      	str	r3, [r4, #44]	; 0x2c

#if LV_USE_USER_DATA
    driver->user_data = NULL;
#endif

    driver->set_px_cb = NULL;
  4145fa:	6163      	str	r3, [r4, #20]
  4145fc:	bd10      	pop	{r4, pc}
  4145fe:	bf00      	nop
  414600:	004163f5 	.word	0x004163f5

00414604 <lv_disp_buf_init>:
 *             It lets LVGL to render next frame into the other buffer while previous is being
 * sent. Set to `NULL` if unused.
 * @param size_in_px_cnt size of the `buf1` and `buf2` in pixel count.
 */
void lv_disp_buf_init(lv_disp_buf_t * disp_buf, void * buf1, void * buf2, uint32_t size_in_px_cnt)
{
  414604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  414606:	4604      	mov	r4, r0
  414608:	460d      	mov	r5, r1
  41460a:	4617      	mov	r7, r2
  41460c:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
  41460e:	2124      	movs	r1, #36	; 0x24
  414610:	4b03      	ldr	r3, [pc, #12]	; (414620 <lv_disp_buf_init+0x1c>)
  414612:	4798      	blx	r3

    disp_buf->buf1    = buf1;
  414614:	6025      	str	r5, [r4, #0]
    disp_buf->buf2    = buf2;
  414616:	6067      	str	r7, [r4, #4]
    disp_buf->buf_act = disp_buf->buf1;
  414618:	60a5      	str	r5, [r4, #8]
    disp_buf->size    = size_in_px_cnt;
  41461a:	60e6      	str	r6, [r4, #12]
  41461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41461e:	bf00      	nop
  414620:	004163f5 	.word	0x004163f5

00414624 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
  414624:	4b01      	ldr	r3, [pc, #4]	; (41462c <lv_disp_get_default+0x8>)
  414626:	6818      	ldr	r0, [r3, #0]
  414628:	4770      	bx	lr
  41462a:	bf00      	nop
  41462c:	2040c744 	.word	0x2040c744

00414630 <lv_disp_get_hor_res>:
 * Get the horizontal resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
  414630:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414632:	4603      	mov	r3, r0
  414634:	b138      	cbz	r0, 414646 <lv_disp_get_hor_res+0x16>

    if(disp == NULL)
  414636:	b16b      	cbz	r3, 414654 <lv_disp_get_hor_res+0x24>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  414638:	7a1a      	ldrb	r2, [r3, #8]
  41463a:	f012 0f02 	tst.w	r2, #2
  41463e:	d006      	beq.n	41464e <lv_disp_get_hor_res+0x1e>
  414640:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414644:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414646:	4b05      	ldr	r3, [pc, #20]	; (41465c <lv_disp_get_hor_res+0x2c>)
  414648:	4798      	blx	r3
  41464a:	4603      	mov	r3, r0
  41464c:	e7f3      	b.n	414636 <lv_disp_get_hor_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
  41464e:	f9b3 0000 	ldrsh.w	r0, [r3]
  414652:	bd08      	pop	{r3, pc}
        return LV_HOR_RES_MAX;
  414654:	f44f 70a0 	mov.w	r0, #320	; 0x140
}
  414658:	bd08      	pop	{r3, pc}
  41465a:	bf00      	nop
  41465c:	00414625 	.word	0x00414625

00414660 <lv_disp_get_ver_res>:
 * Get the vertical resolution of a display
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
  414660:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  414662:	4603      	mov	r3, r0
  414664:	b138      	cbz	r0, 414676 <lv_disp_get_ver_res+0x16>

    if(disp == NULL)
  414666:	b16b      	cbz	r3, 414684 <lv_disp_get_ver_res+0x24>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  414668:	7a1a      	ldrb	r2, [r3, #8]
  41466a:	f012 0f02 	tst.w	r2, #2
  41466e:	d006      	beq.n	41467e <lv_disp_get_ver_res+0x1e>
  414670:	f9b3 0000 	ldrsh.w	r0, [r3]
  414674:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  414676:	4b04      	ldr	r3, [pc, #16]	; (414688 <lv_disp_get_ver_res+0x28>)
  414678:	4798      	blx	r3
  41467a:	4603      	mov	r3, r0
  41467c:	e7f3      	b.n	414666 <lv_disp_get_ver_res+0x6>
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
  41467e:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
  414682:	bd08      	pop	{r3, pc}
        return LV_VER_RES_MAX;
  414684:	20f0      	movs	r0, #240	; 0xf0
}
  414686:	bd08      	pop	{r3, pc}
  414688:	00414625 	.word	0x00414625

0041468c <lv_disp_get_dpi>:
 * Get the DPI of the display
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
  41468c:	b508      	push	{r3, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  41468e:	4603      	mov	r3, r0
  414690:	b120      	cbz	r0, 41469c <lv_disp_get_dpi+0x10>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  414692:	b13b      	cbz	r3, 4146a4 <lv_disp_get_dpi+0x18>
    return disp->driver.dpi;
  414694:	8918      	ldrh	r0, [r3, #8]
  414696:	f3c0 0089 	ubfx	r0, r0, #2, #10
  41469a:	bd08      	pop	{r3, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  41469c:	4b02      	ldr	r3, [pc, #8]	; (4146a8 <lv_disp_get_dpi+0x1c>)
  41469e:	4798      	blx	r3
  4146a0:	4603      	mov	r3, r0
  4146a2:	e7f6      	b.n	414692 <lv_disp_get_dpi+0x6>
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
  4146a4:	2094      	movs	r0, #148	; 0x94
}
  4146a6:	bd08      	pop	{r3, pc}
  4146a8:	00414625 	.word	0x00414625

004146ac <lv_disp_get_size_category>:
 * Get the size category of the display based on it's hor. res. and dpi.
 * @param disp pointer to a display (NULL to use the default display)
 * @return LV_DISP_SIZE_SMALL/MEDIUM/LARGE/EXTRA_LARGE
 */
lv_disp_size_t lv_disp_get_size_category(lv_disp_t * disp)
{
  4146ac:	b538      	push	{r3, r4, r5, lr}
    if(disp == NULL) disp = lv_disp_get_default();
  4146ae:	4605      	mov	r5, r0
  4146b0:	b1a0      	cbz	r0, 4146dc <lv_disp_get_size_category+0x30>

    uint32_t w;
    if(disp == NULL) w = LV_HOR_RES_MAX;
  4146b2:	b1bd      	cbz	r5, 4146e4 <lv_disp_get_size_category+0x38>
    else w = lv_disp_get_hor_res(disp);
  4146b4:	4628      	mov	r0, r5
  4146b6:	4b10      	ldr	r3, [pc, #64]	; (4146f8 <lv_disp_get_size_category+0x4c>)
  4146b8:	4798      	blx	r3
  4146ba:	4604      	mov	r4, r0

    uint32_t dpi = lv_disp_get_dpi(disp);
  4146bc:	4628      	mov	r0, r5
  4146be:	4b0f      	ldr	r3, [pc, #60]	; (4146fc <lv_disp_get_size_category+0x50>)
  4146c0:	4798      	blx	r3

    w = w * 10 / dpi;
  4146c2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4146c6:	0063      	lsls	r3, r4, #1
  4146c8:	fbb3 f0f0 	udiv	r0, r3, r0

    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  4146cc:	281d      	cmp	r0, #29
  4146ce:	d90c      	bls.n	4146ea <lv_disp_get_size_category+0x3e>
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  4146d0:	2831      	cmp	r0, #49	; 0x31
  4146d2:	d90c      	bls.n	4146ee <lv_disp_get_size_category+0x42>
    if(w < LV_DISP_LARGE_LIMIT) return LV_DISP_SIZE_LARGE;
  4146d4:	2845      	cmp	r0, #69	; 0x45
  4146d6:	d80c      	bhi.n	4146f2 <lv_disp_get_size_category+0x46>
  4146d8:	2002      	movs	r0, #2
  4146da:	bd38      	pop	{r3, r4, r5, pc}
    if(disp == NULL) disp = lv_disp_get_default();
  4146dc:	4b08      	ldr	r3, [pc, #32]	; (414700 <lv_disp_get_size_category+0x54>)
  4146de:	4798      	blx	r3
  4146e0:	4605      	mov	r5, r0
  4146e2:	e7e6      	b.n	4146b2 <lv_disp_get_size_category+0x6>
    if(disp == NULL) w = LV_HOR_RES_MAX;
  4146e4:	f44f 74a0 	mov.w	r4, #320	; 0x140
  4146e8:	e7e8      	b.n	4146bc <lv_disp_get_size_category+0x10>
    if(w < LV_DISP_SMALL_LIMIT) return LV_DISP_SIZE_SMALL;
  4146ea:	2000      	movs	r0, #0
  4146ec:	bd38      	pop	{r3, r4, r5, pc}
    if(w < LV_DISP_MEDIUM_LIMIT) return LV_DISP_SIZE_MEDIUM;
  4146ee:	2001      	movs	r0, #1
  4146f0:	bd38      	pop	{r3, r4, r5, pc}
    else return LV_DISP_SIZE_EXTRA_LARGE;
  4146f2:	2003      	movs	r0, #3
}
  4146f4:	bd38      	pop	{r3, r4, r5, pc}
  4146f6:	bf00      	nop
  4146f8:	00414631 	.word	0x00414631
  4146fc:	0041468d 	.word	0x0041468d
  414700:	00414625 	.word	0x00414625

00414704 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
  414704:	6842      	ldr	r2, [r0, #4]
  414706:	2300      	movs	r3, #0
  414708:	6193      	str	r3, [r2, #24]
    disp_drv->buffer->flushing_last = 0;
  41470a:	6842      	ldr	r2, [r0, #4]
  41470c:	61d3      	str	r3, [r2, #28]
  41470e:	4770      	bx	lr

00414710 <lv_disp_get_next>:
 * Get the next display.
 * @param disp pointer to the current display. NULL to initialize.
 * @return the next display or NULL if no more. Give the first display when the parameter is NULL
 */
lv_disp_t * lv_disp_get_next(lv_disp_t * disp)
{
  414710:	b508      	push	{r3, lr}
    if(disp == NULL)
  414712:	b120      	cbz	r0, 41471e <lv_disp_get_next+0xe>
  414714:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_disp_ll), disp);
  414716:	4804      	ldr	r0, [pc, #16]	; (414728 <lv_disp_get_next+0x18>)
  414718:	4b04      	ldr	r3, [pc, #16]	; (41472c <lv_disp_get_next+0x1c>)
  41471a:	4798      	blx	r3
}
  41471c:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_disp_ll));
  41471e:	4802      	ldr	r0, [pc, #8]	; (414728 <lv_disp_get_next+0x18>)
  414720:	4b03      	ldr	r3, [pc, #12]	; (414730 <lv_disp_get_next+0x20>)
  414722:	4798      	blx	r3
  414724:	bd08      	pop	{r3, pc}
  414726:	bf00      	nop
  414728:	2043a1b8 	.word	0x2043a1b8
  41472c:	00415add 	.word	0x00415add
  414730:	00415ac9 	.word	0x00415ac9

00414734 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
  414734:	6840      	ldr	r0, [r0, #4]
  414736:	4770      	bx	lr

00414738 <lv_disp_get_inv_buf_size>:
 * Get the number of areas in the buffer
 * @return number of invalid areas
 */
uint16_t lv_disp_get_inv_buf_size(lv_disp_t * disp)
{
    return disp->inv_p;
  414738:	f8b0 0182 	ldrh.w	r0, [r0, #386]	; 0x182
}
  41473c:	f3c0 0009 	ubfx	r0, r0, #0, #10
  414740:	4770      	bx	lr

00414742 <_lv_disp_pop_from_inv_buf>:
 * @param num number of areas to delete
 */
void _lv_disp_pop_from_inv_buf(lv_disp_t * disp, uint16_t num)
{

    if(disp->inv_p < num)
  414742:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414746:	f3c3 0309 	ubfx	r3, r3, #0, #10
  41474a:	428b      	cmp	r3, r1
  41474c:	db07      	blt.n	41475e <_lv_disp_pop_from_inv_buf+0x1c>
        disp->inv_p = 0;
    else
        disp->inv_p -= num;
  41474e:	1a5b      	subs	r3, r3, r1
  414750:	f8b0 2182 	ldrh.w	r2, [r0, #386]	; 0x182
  414754:	f363 0209 	bfi	r2, r3, #0, #10
  414758:	f8a0 2182 	strh.w	r2, [r0, #386]	; 0x182
  41475c:	4770      	bx	lr
        disp->inv_p = 0;
  41475e:	f8b0 3182 	ldrh.w	r3, [r0, #386]	; 0x182
  414762:	f36f 0309 	bfc	r3, #0, #10
  414766:	f8a0 3182 	strh.w	r3, [r0, #386]	; 0x182
  41476a:	4770      	bx	lr

0041476c <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
  41476c:	6843      	ldr	r3, [r0, #4]
  41476e:	681a      	ldr	r2, [r3, #0]
  414770:	b12a      	cbz	r2, 41477e <lv_disp_is_double_buf+0x12>
  414772:	685b      	ldr	r3, [r3, #4]
  414774:	b10b      	cbz	r3, 41477a <lv_disp_is_double_buf+0xe>
        return true;
  414776:	2001      	movs	r0, #1
    else
        return false;
}
  414778:	4770      	bx	lr
        return false;
  41477a:	2000      	movs	r0, #0
  41477c:	4770      	bx	lr
  41477e:	2000      	movs	r0, #0
  414780:	4770      	bx	lr
	...

00414784 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
  414784:	b538      	push	{r3, r4, r5, lr}
  414786:	4605      	mov	r5, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
  414788:	f9b0 4000 	ldrsh.w	r4, [r0]
  41478c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  414790:	fb03 f404 	mul.w	r4, r3, r4

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
  414794:	4b06      	ldr	r3, [pc, #24]	; (4147b0 <lv_disp_is_true_double_buf+0x2c>)
  414796:	4798      	blx	r3
  414798:	b130      	cbz	r0, 4147a8 <lv_disp_is_true_double_buf+0x24>
  41479a:	4603      	mov	r3, r0
  41479c:	686a      	ldr	r2, [r5, #4]
  41479e:	68d2      	ldr	r2, [r2, #12]
  4147a0:	4294      	cmp	r4, r2
  4147a2:	d002      	beq.n	4147aa <lv_disp_is_true_double_buf+0x26>
        return true;
    }
    else {
        return false;
  4147a4:	2300      	movs	r3, #0
  4147a6:	e000      	b.n	4147aa <lv_disp_is_true_double_buf+0x26>
  4147a8:	2300      	movs	r3, #0
    }
}
  4147aa:	4618      	mov	r0, r3
  4147ac:	bd38      	pop	{r3, r4, r5, pc}
  4147ae:	bf00      	nop
  4147b0:	0041476d 	.word	0x0041476d

004147b4 <lv_disp_drv_register>:
{
  4147b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4147b6:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
  4147b8:	483b      	ldr	r0, [pc, #236]	; (4148a8 <lv_disp_drv_register+0xf4>)
  4147ba:	4b3c      	ldr	r3, [pc, #240]	; (4148ac <lv_disp_drv_register+0xf8>)
  4147bc:	4798      	blx	r3
    if(!disp) {
  4147be:	4604      	mov	r4, r0
  4147c0:	2800      	cmp	r0, #0
  4147c2:	d05c      	beq.n	41487e <lv_disp_drv_register+0xca>
    _lv_memset_00(disp, sizeof(lv_disp_t));
  4147c4:	f44f 71c4 	mov.w	r1, #392	; 0x188
  4147c8:	4b39      	ldr	r3, [pc, #228]	; (4148b0 <lv_disp_drv_register+0xfc>)
  4147ca:	4798      	blx	r3
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));
  4147cc:	2234      	movs	r2, #52	; 0x34
  4147ce:	4629      	mov	r1, r5
  4147d0:	4620      	mov	r0, r4
  4147d2:	4b38      	ldr	r3, [pc, #224]	; (4148b4 <lv_disp_drv_register+0x100>)
  4147d4:	4798      	blx	r3
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
  4147d6:	214c      	movs	r1, #76	; 0x4c
  4147d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
  4147dc:	4b36      	ldr	r3, [pc, #216]	; (4148b8 <lv_disp_drv_register+0x104>)
  4147de:	4798      	blx	r3
    disp->last_activity_time = 0;
  4147e0:	2300      	movs	r3, #0
  4147e2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
    if(disp_def == NULL) disp_def = disp;
  4147e6:	4b35      	ldr	r3, [pc, #212]	; (4148bc <lv_disp_drv_register+0x108>)
  4147e8:	681b      	ldr	r3, [r3, #0]
  4147ea:	2b00      	cmp	r3, #0
  4147ec:	d051      	beq.n	414892 <lv_disp_drv_register+0xde>
    lv_disp_t * disp_def_tmp = disp_def;
  4147ee:	4b33      	ldr	r3, [pc, #204]	; (4148bc <lv_disp_drv_register+0x108>)
  4147f0:	681f      	ldr	r7, [r3, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
  4147f2:	601c      	str	r4, [r3, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
  4147f4:	4623      	mov	r3, r4
  4147f6:	2203      	movs	r2, #3
  4147f8:	211e      	movs	r1, #30
  4147fa:	4831      	ldr	r0, [pc, #196]	; (4148c0 <lv_disp_drv_register+0x10c>)
  4147fc:	4d31      	ldr	r5, [pc, #196]	; (4148c4 <lv_disp_drv_register+0x110>)
  4147fe:	47a8      	blx	r5
  414800:	6360      	str	r0, [r4, #52]	; 0x34
    LV_ASSERT_MEM(disp->refr_task);
  414802:	4b31      	ldr	r3, [pc, #196]	; (4148c8 <lv_disp_drv_register+0x114>)
  414804:	4798      	blx	r3
  414806:	2800      	cmp	r0, #0
  414808:	d046      	beq.n	414898 <lv_disp_drv_register+0xe4>
    if(disp->refr_task == NULL) return NULL;
  41480a:	6b63      	ldr	r3, [r4, #52]	; 0x34
  41480c:	2b00      	cmp	r3, #0
  41480e:	d049      	beq.n	4148a4 <lv_disp_drv_register+0xf0>
    disp->inv_p = 0;
  414810:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
  414814:	f36f 0309 	bfc	r3, #0, #10
  414818:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
    disp->last_activity_time = 0;
  41481c:	2500      	movs	r5, #0
  41481e:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
    disp->bg_color = LV_COLOR_WHITE;
  414822:	4b2a      	ldr	r3, [pc, #168]	; (4148cc <lv_disp_drv_register+0x118>)
  414824:	881b      	ldrh	r3, [r3, #0]
  414826:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    disp->bg_img = NULL;
  41482a:	65e5      	str	r5, [r4, #92]	; 0x5c
    disp->bg_opa = LV_OPA_COVER;
  41482c:	23ff      	movs	r3, #255	; 0xff
  41482e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    disp->prev_scr  = NULL;
  414832:	64a5      	str	r5, [r4, #72]	; 0x48
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
  414834:	4629      	mov	r1, r5
  414836:	4628      	mov	r0, r5
  414838:	4e25      	ldr	r6, [pc, #148]	; (4148d0 <lv_disp_drv_register+0x11c>)
  41483a:	47b0      	blx	r6
  41483c:	6460      	str	r0, [r4, #68]	; 0x44
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
  41483e:	4629      	mov	r1, r5
  414840:	4628      	mov	r0, r5
  414842:	47b0      	blx	r6
  414844:	6520      	str	r0, [r4, #80]	; 0x50
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
  414846:	4629      	mov	r1, r5
  414848:	4628      	mov	r0, r5
  41484a:	47b0      	blx	r6
  41484c:	6560      	str	r0, [r4, #84]	; 0x54
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
  41484e:	4629      	mov	r1, r5
  414850:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414852:	4e20      	ldr	r6, [pc, #128]	; (4148d4 <lv_disp_drv_register+0x120>)
  414854:	47b0      	blx	r6
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
  414856:	4629      	mov	r1, r5
  414858:	6d60      	ldr	r0, [r4, #84]	; 0x54
  41485a:	47b0      	blx	r6
    lv_obj_set_click(disp->top_layer, false);
  41485c:	4629      	mov	r1, r5
  41485e:	6d20      	ldr	r0, [r4, #80]	; 0x50
  414860:	4e1d      	ldr	r6, [pc, #116]	; (4148d8 <lv_disp_drv_register+0x124>)
  414862:	47b0      	blx	r6
    lv_obj_set_click(disp->sys_layer, false);
  414864:	4629      	mov	r1, r5
  414866:	6d60      	ldr	r0, [r4, #84]	; 0x54
  414868:	47b0      	blx	r6
    lv_obj_invalidate(disp->act_scr);
  41486a:	6c60      	ldr	r0, [r4, #68]	; 0x44
  41486c:	4b1b      	ldr	r3, [pc, #108]	; (4148dc <lv_disp_drv_register+0x128>)
  41486e:	4798      	blx	r3
    disp_def = disp_def_tmp; /*Revert the default display*/
  414870:	4b12      	ldr	r3, [pc, #72]	; (4148bc <lv_disp_drv_register+0x108>)
  414872:	601f      	str	r7, [r3, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
  414874:	6b60      	ldr	r0, [r4, #52]	; 0x34
  414876:	4b1a      	ldr	r3, [pc, #104]	; (4148e0 <lv_disp_drv_register+0x12c>)
  414878:	4798      	blx	r3
}
  41487a:	4620      	mov	r0, r4
  41487c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        LV_ASSERT_MEM(disp);
  41487e:	4b12      	ldr	r3, [pc, #72]	; (4148c8 <lv_disp_drv_register+0x114>)
  414880:	4798      	blx	r3
  414882:	2800      	cmp	r0, #0
  414884:	d1f9      	bne.n	41487a <lv_disp_drv_register+0xc6>
  414886:	4622      	mov	r2, r4
  414888:	2300      	movs	r3, #0
  41488a:	4816      	ldr	r0, [pc, #88]	; (4148e4 <lv_disp_drv_register+0x130>)
  41488c:	4916      	ldr	r1, [pc, #88]	; (4148e8 <lv_disp_drv_register+0x134>)
  41488e:	4788      	blx	r1
  414890:	e7fe      	b.n	414890 <lv_disp_drv_register+0xdc>
    if(disp_def == NULL) disp_def = disp;
  414892:	4b0a      	ldr	r3, [pc, #40]	; (4148bc <lv_disp_drv_register+0x108>)
  414894:	601c      	str	r4, [r3, #0]
  414896:	e7aa      	b.n	4147ee <lv_disp_drv_register+0x3a>
    LV_ASSERT_MEM(disp->refr_task);
  414898:	6b62      	ldr	r2, [r4, #52]	; 0x34
  41489a:	2300      	movs	r3, #0
  41489c:	4811      	ldr	r0, [pc, #68]	; (4148e4 <lv_disp_drv_register+0x130>)
  41489e:	4912      	ldr	r1, [pc, #72]	; (4148e8 <lv_disp_drv_register+0x134>)
  4148a0:	4788      	blx	r1
  4148a2:	e7fe      	b.n	4148a2 <lv_disp_drv_register+0xee>
    if(disp->refr_task == NULL) return NULL;
  4148a4:	2400      	movs	r4, #0
  4148a6:	e7e8      	b.n	41487a <lv_disp_drv_register+0xc6>
  4148a8:	2043a1b8 	.word	0x2043a1b8
  4148ac:	00415a31 	.word	0x00415a31
  4148b0:	004163f5 	.word	0x004163f5
  4148b4:	004160d1 	.word	0x004160d1
  4148b8:	00415a1f 	.word	0x00415a1f
  4148bc:	2040c744 	.word	0x2040c744
  4148c0:	004096e9 	.word	0x004096e9
  4148c4:	004164c5 	.word	0x004164c5
  4148c8:	004157b9 	.word	0x004157b9
  4148cc:	00429660 	.word	0x00429660
  4148d0:	0040635d 	.word	0x0040635d
  4148d4:	004074a9 	.word	0x004074a9
  4148d8:	00405265 	.word	0x00405265
  4148dc:	00405aa1 	.word	0x00405aa1
  4148e0:	0041688d 	.word	0x0041688d
  4148e4:	004260b0 	.word	0x004260b0
  4148e8:	004157c5 	.word	0x004157c5

004148ec <lv_indev_drv_init>:
 * It is used to surly have known values in the fields ant not memory junk.
 * After it you can set the fields.
 * @param driver pointer to driver variable to initialize
 */
void lv_indev_drv_init(lv_indev_drv_t * driver)
{
  4148ec:	b510      	push	{r4, lr}
  4148ee:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_indev_drv_t));
  4148f0:	211c      	movs	r1, #28
  4148f2:	4b08      	ldr	r3, [pc, #32]	; (414914 <lv_indev_drv_init+0x28>)
  4148f4:	4798      	blx	r3

    driver->type                 = LV_INDEV_TYPE_NONE;
  4148f6:	2300      	movs	r3, #0
  4148f8:	7023      	strb	r3, [r4, #0]
    driver->drag_limit           = LV_INDEV_DEF_DRAG_LIMIT;
  4148fa:	230a      	movs	r3, #10
  4148fc:	7523      	strb	r3, [r4, #20]
    driver->drag_throw           = LV_INDEV_DEF_DRAG_THROW;
  4148fe:	7563      	strb	r3, [r4, #21]
    driver->long_press_time      = LV_INDEV_DEF_LONG_PRESS_TIME;
  414900:	f44f 73c8 	mov.w	r3, #400	; 0x190
  414904:	8323      	strh	r3, [r4, #24]
    driver->long_press_rep_time  = LV_INDEV_DEF_LONG_PRESS_REP_TIME;
  414906:	2364      	movs	r3, #100	; 0x64
  414908:	8363      	strh	r3, [r4, #26]
    driver->gesture_limit        = LV_INDEV_DEF_GESTURE_LIMIT;
  41490a:	2332      	movs	r3, #50	; 0x32
  41490c:	75e3      	strb	r3, [r4, #23]
    driver->gesture_min_velocity = LV_INDEV_DEF_GESTURE_MIN_VELOCITY;
  41490e:	2303      	movs	r3, #3
  414910:	75a3      	strb	r3, [r4, #22]
  414912:	bd10      	pop	{r4, pc}
  414914:	004163f5 	.word	0x004163f5

00414918 <lv_indev_drv_register>:
 * Register an initialized input device driver.
 * @param driver pointer to an initialized 'lv_indev_drv_t' variable (can be local variable)
 * @return pointer to the new input device or NULL on error
 */
lv_indev_t * lv_indev_drv_register(lv_indev_drv_t * driver)
{
  414918:	b538      	push	{r3, r4, r5, lr}
  41491a:	4605      	mov	r5, r0

    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  41491c:	68c3      	ldr	r3, [r0, #12]
  41491e:	b313      	cbz	r3, 414966 <lv_indev_drv_register+0x4e>

    if(driver->disp == NULL) {
  414920:	68eb      	ldr	r3, [r5, #12]
  414922:	2b00      	cmp	r3, #0
  414924:	d02d      	beq.n	414982 <lv_indev_drv_register+0x6a>
        LV_LOG_WARN("lv_indev_drv_register: no display registered hence can't attach the indev to "
                    "a display");
        return NULL;
    }

    lv_indev_t * indev = _lv_ll_ins_head(&LV_GC_ROOT(_lv_indev_ll));
  414926:	4818      	ldr	r0, [pc, #96]	; (414988 <lv_indev_drv_register+0x70>)
  414928:	4b18      	ldr	r3, [pc, #96]	; (41498c <lv_indev_drv_register+0x74>)
  41492a:	4798      	blx	r3
    if(!indev) {
  41492c:	4604      	mov	r4, r0
  41492e:	b1f0      	cbz	r0, 41496e <lv_indev_drv_register+0x56>
        LV_ASSERT_MEM(indev);
        return NULL;
    }

    _lv_memset_00(indev, sizeof(lv_indev_t));
  414930:	2160      	movs	r1, #96	; 0x60
  414932:	4b17      	ldr	r3, [pc, #92]	; (414990 <lv_indev_drv_register+0x78>)
  414934:	4798      	blx	r3
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));
  414936:	221c      	movs	r2, #28
  414938:	4629      	mov	r1, r5
  41493a:	4620      	mov	r0, r4
  41493c:	4b15      	ldr	r3, [pc, #84]	; (414994 <lv_indev_drv_register+0x7c>)
  41493e:	4798      	blx	r3

    indev->proc.reset_query = 1;
  414940:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
  414944:	f043 0302 	orr.w	r3, r3, #2
  414948:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    indev->cursor           = NULL;
  41494c:	2300      	movs	r3, #0
  41494e:	6563      	str	r3, [r4, #84]	; 0x54
    indev->group            = NULL;
  414950:	65a3      	str	r3, [r4, #88]	; 0x58
    indev->btn_points       = NULL;
  414952:	65e3      	str	r3, [r4, #92]	; 0x5c

    indev->driver.read_task = lv_task_create(_lv_indev_read_task, LV_INDEV_DEF_READ_PERIOD, LV_TASK_PRIO_HIGH, indev);
  414954:	4623      	mov	r3, r4
  414956:	2204      	movs	r2, #4
  414958:	211e      	movs	r1, #30
  41495a:	480f      	ldr	r0, [pc, #60]	; (414998 <lv_indev_drv_register+0x80>)
  41495c:	4d0f      	ldr	r5, [pc, #60]	; (41499c <lv_indev_drv_register+0x84>)
  41495e:	47a8      	blx	r5
  414960:	6120      	str	r0, [r4, #16]

    return indev;
}
  414962:	4620      	mov	r0, r4
  414964:	bd38      	pop	{r3, r4, r5, pc}
    if(driver->disp == NULL) driver->disp = lv_disp_get_default();
  414966:	4b0e      	ldr	r3, [pc, #56]	; (4149a0 <lv_indev_drv_register+0x88>)
  414968:	4798      	blx	r3
  41496a:	60e8      	str	r0, [r5, #12]
  41496c:	e7d8      	b.n	414920 <lv_indev_drv_register+0x8>
        LV_ASSERT_MEM(indev);
  41496e:	4b0d      	ldr	r3, [pc, #52]	; (4149a4 <lv_indev_drv_register+0x8c>)
  414970:	4798      	blx	r3
  414972:	2800      	cmp	r0, #0
  414974:	d1f5      	bne.n	414962 <lv_indev_drv_register+0x4a>
  414976:	4622      	mov	r2, r4
  414978:	2300      	movs	r3, #0
  41497a:	480b      	ldr	r0, [pc, #44]	; (4149a8 <lv_indev_drv_register+0x90>)
  41497c:	490b      	ldr	r1, [pc, #44]	; (4149ac <lv_indev_drv_register+0x94>)
  41497e:	4788      	blx	r1
  414980:	e7fe      	b.n	414980 <lv_indev_drv_register+0x68>
        return NULL;
  414982:	2400      	movs	r4, #0
  414984:	e7ed      	b.n	414962 <lv_indev_drv_register+0x4a>
  414986:	bf00      	nop
  414988:	2043a1ac 	.word	0x2043a1ac
  41498c:	00415a31 	.word	0x00415a31
  414990:	004163f5 	.word	0x004163f5
  414994:	004160d1 	.word	0x004160d1
  414998:	00404e01 	.word	0x00404e01
  41499c:	004164c5 	.word	0x004164c5
  4149a0:	00414625 	.word	0x00414625
  4149a4:	004157b9 	.word	0x004157b9
  4149a8:	004260b0 	.word	0x004260b0
  4149ac:	004157c5 	.word	0x004157c5

004149b0 <lv_indev_get_next>:
 * @param indev pointer to the current input device. NULL to initialize.
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
  4149b0:	b508      	push	{r3, lr}
    if(indev == NULL)
  4149b2:	b120      	cbz	r0, 4149be <lv_indev_get_next+0xe>
  4149b4:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
  4149b6:	4804      	ldr	r0, [pc, #16]	; (4149c8 <lv_indev_get_next+0x18>)
  4149b8:	4b04      	ldr	r3, [pc, #16]	; (4149cc <lv_indev_get_next+0x1c>)
  4149ba:	4798      	blx	r3
}
  4149bc:	bd08      	pop	{r3, pc}
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
  4149be:	4802      	ldr	r0, [pc, #8]	; (4149c8 <lv_indev_get_next+0x18>)
  4149c0:	4b03      	ldr	r3, [pc, #12]	; (4149d0 <lv_indev_get_next+0x20>)
  4149c2:	4798      	blx	r3
  4149c4:	bd08      	pop	{r3, pc}
  4149c6:	bf00      	nop
  4149c8:	2043a1ac 	.word	0x2043a1ac
  4149cc:	00415add 	.word	0x00415add
  4149d0:	00415ac9 	.word	0x00415ac9

004149d4 <_lv_indev_read>:
 * @param indev pointer to an input device
 * @param data input device will write its data here
 * @return false: no more data; true: there more data to read (buffered)
 */
bool _lv_indev_read(lv_indev_t * indev, lv_indev_data_t * data)
{
  4149d4:	b538      	push	{r3, r4, r5, lr}
  4149d6:	4604      	mov	r4, r0
  4149d8:	460d      	mov	r5, r1
    bool cont = false;

    _lv_memset_00(data, sizeof(lv_indev_data_t));
  4149da:	2110      	movs	r1, #16
  4149dc:	4628      	mov	r0, r5
  4149de:	4b10      	ldr	r3, [pc, #64]	; (414a20 <_lv_indev_read+0x4c>)
  4149e0:	4798      	blx	r3

    /* For touchpad sometimes users don't the last pressed coordinate on release.
     * So be sure a coordinates are initialized to the last point */
    if(indev->driver.type == LV_INDEV_TYPE_POINTER) {
  4149e2:	7823      	ldrb	r3, [r4, #0]
  4149e4:	2b01      	cmp	r3, #1
  4149e6:	d009      	beq.n	4149fc <_lv_indev_read+0x28>
        data->point.x = indev->proc.types.pointer.act_point.x;
        data->point.y = indev->proc.types.pointer.act_point.y;
    }
    /*Similarly set at least the last key in case of the user doesn't set it on release*/
    else if(indev->driver.type == LV_INDEV_TYPE_KEYPAD) {
  4149e8:	2b02      	cmp	r3, #2
  4149ea:	d00e      	beq.n	414a0a <_lv_indev_read+0x36>
        data->key = indev->proc.types.keypad.last_key;
    }
    /*For compatibility assume that used button was enter (encoder push) */
    else if(indev->driver.type == LV_INDEV_TYPE_ENCODER) {
  4149ec:	2b04      	cmp	r3, #4
  4149ee:	d00f      	beq.n	414a10 <_lv_indev_read+0x3c>
        data->key = LV_KEY_ENTER;
        data->enc_diff = 0;
    }

    if(indev->driver.read_cb) {
  4149f0:	6863      	ldr	r3, [r4, #4]
  4149f2:	b193      	cbz	r3, 414a1a <_lv_indev_read+0x46>
        LV_LOG_TRACE("indev read started");
        cont = indev->driver.read_cb(&indev->driver, data);
  4149f4:	4629      	mov	r1, r5
  4149f6:	4620      	mov	r0, r4
  4149f8:	4798      	blx	r3
  4149fa:	bd38      	pop	{r3, r4, r5, pc}
        data->point.x = indev->proc.types.pointer.act_point.x;
  4149fc:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
  414a00:	802b      	strh	r3, [r5, #0]
        data->point.y = indev->proc.types.pointer.act_point.y;
  414a02:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
  414a06:	806b      	strh	r3, [r5, #2]
  414a08:	e7f2      	b.n	4149f0 <_lv_indev_read+0x1c>
        data->key = indev->proc.types.keypad.last_key;
  414a0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414a0c:	606b      	str	r3, [r5, #4]
  414a0e:	e7ef      	b.n	4149f0 <_lv_indev_read+0x1c>
        data->key = LV_KEY_ENTER;
  414a10:	230a      	movs	r3, #10
  414a12:	606b      	str	r3, [r5, #4]
        data->enc_diff = 0;
  414a14:	2300      	movs	r3, #0
  414a16:	81ab      	strh	r3, [r5, #12]
  414a18:	e7ea      	b.n	4149f0 <_lv_indev_read+0x1c>
    bool cont = false;
  414a1a:	2000      	movs	r0, #0
    else {
        LV_LOG_WARN("indev function registered");
    }

    return cont;
}
  414a1c:	bd38      	pop	{r3, r4, r5, pc}
  414a1e:	bf00      	nop
  414a20:	004163f5 	.word	0x004163f5

00414a24 <lv_tick_inc>:
  414a24:	2200      	movs	r2, #0
  414a26:	4b03      	ldr	r3, [pc, #12]	; (414a34 <lv_tick_inc+0x10>)
  414a28:	701a      	strb	r2, [r3, #0]
  414a2a:	4a03      	ldr	r2, [pc, #12]	; (414a38 <lv_tick_inc+0x14>)
  414a2c:	6813      	ldr	r3, [r2, #0]
  414a2e:	4418      	add	r0, r3
  414a30:	6010      	str	r0, [r2, #0]
  414a32:	4770      	bx	lr
  414a34:	2040c74c 	.word	0x2040c74c
  414a38:	2040c748 	.word	0x2040c748

00414a3c <lv_tick_get>:
  414a3c:	4b04      	ldr	r3, [pc, #16]	; (414a50 <lv_tick_get+0x14>)
  414a3e:	2201      	movs	r2, #1
  414a40:	701a      	strb	r2, [r3, #0]
  414a42:	4a04      	ldr	r2, [pc, #16]	; (414a54 <lv_tick_get+0x18>)
  414a44:	6810      	ldr	r0, [r2, #0]
  414a46:	781b      	ldrb	r3, [r3, #0]
  414a48:	2b00      	cmp	r3, #0
  414a4a:	d0f7      	beq.n	414a3c <lv_tick_get>
  414a4c:	4770      	bx	lr
  414a4e:	bf00      	nop
  414a50:	2040c74c 	.word	0x2040c74c
  414a54:	2040c748 	.word	0x2040c748

00414a58 <lv_tick_elaps>:
  414a58:	b510      	push	{r4, lr}
  414a5a:	4604      	mov	r4, r0
  414a5c:	4b03      	ldr	r3, [pc, #12]	; (414a6c <lv_tick_elaps+0x14>)
  414a5e:	4798      	blx	r3
  414a60:	42a0      	cmp	r0, r4
  414a62:	d201      	bcs.n	414a68 <lv_tick_elaps+0x10>
  414a64:	1b00      	subs	r0, r0, r4
  414a66:	bd10      	pop	{r4, pc}
  414a68:	1b00      	subs	r0, r0, r4
  414a6a:	bd10      	pop	{r4, pc}
  414a6c:	00414a3d 	.word	0x00414a3d

00414a70 <lv_anim_path_linear>:
{
    LV_UNUSED(path);

    /*Calculate the current step*/
    uint32_t step;
    if(a->time == a->act_time) {
  414a70:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  414a72:	6a88      	ldr	r0, [r1, #40]	; 0x28
  414a74:	4282      	cmp	r2, r0
  414a76:	d00b      	beq.n	414a90 <lv_anim_path_linear+0x20>
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
    }
    else {
        step = ((int32_t)a->act_time * LV_ANIM_RESOLUTION) / a->time;
  414a78:	0280      	lsls	r0, r0, #10
  414a7a:	fb90 f0f2 	sdiv	r0, r0, r2
    }

    /* Get the new value which will be proportional to `step`
     * and the `start` and `end` values*/
    int32_t new_value;
    new_value = (int32_t)step * (a->end - a->start);
  414a7e:	6a0b      	ldr	r3, [r1, #32]
  414a80:	698a      	ldr	r2, [r1, #24]
  414a82:	1a9b      	subs	r3, r3, r2
  414a84:	fb00 f003 	mul.w	r0, r0, r3
    new_value = new_value >> LV_ANIM_RES_SHIFT;
    new_value += a->start;
  414a88:	eb02 20a0 	add.w	r0, r2, r0, asr #10

    return (lv_anim_value_t)new_value;
}
  414a8c:	b200      	sxth	r0, r0
  414a8e:	4770      	bx	lr
        step = LV_ANIM_RESOLUTION; /*Use the last value if the time fully elapsed*/
  414a90:	f44f 6080 	mov.w	r0, #1024	; 0x400
  414a94:	e7f3      	b.n	414a7e <lv_anim_path_linear+0xe>
	...

00414a98 <anim_mark_list_change>:
    }

    return anim_list_changed;
}
static void anim_mark_list_change(void)
{
  414a98:	b508      	push	{r3, lr}
    anim_list_changed = true;
  414a9a:	2201      	movs	r2, #1
  414a9c:	4b08      	ldr	r3, [pc, #32]	; (414ac0 <anim_mark_list_change+0x28>)
  414a9e:	701a      	strb	r2, [r3, #0]
    if(_lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll)) == NULL)
  414aa0:	4808      	ldr	r0, [pc, #32]	; (414ac4 <anim_mark_list_change+0x2c>)
  414aa2:	4b09      	ldr	r3, [pc, #36]	; (414ac8 <anim_mark_list_change+0x30>)
  414aa4:	4798      	blx	r3
  414aa6:	b128      	cbz	r0, 414ab4 <anim_mark_list_change+0x1c>
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
    else
        lv_task_set_prio(_lv_anim_task, LV_ANIM_TASK_PRIO);
  414aa8:	2104      	movs	r1, #4
  414aaa:	4b08      	ldr	r3, [pc, #32]	; (414acc <anim_mark_list_change+0x34>)
  414aac:	6818      	ldr	r0, [r3, #0]
  414aae:	4b08      	ldr	r3, [pc, #32]	; (414ad0 <anim_mark_list_change+0x38>)
  414ab0:	4798      	blx	r3
  414ab2:	bd08      	pop	{r3, pc}
        lv_task_set_prio(_lv_anim_task, LV_TASK_PRIO_OFF);
  414ab4:	2100      	movs	r1, #0
  414ab6:	4b05      	ldr	r3, [pc, #20]	; (414acc <anim_mark_list_change+0x34>)
  414ab8:	6818      	ldr	r0, [r3, #0]
  414aba:	4b05      	ldr	r3, [pc, #20]	; (414ad0 <anim_mark_list_change+0x38>)
  414abc:	4798      	blx	r3
  414abe:	bd08      	pop	{r3, pc}
  414ac0:	2040c754 	.word	0x2040c754
  414ac4:	2043a27c 	.word	0x2043a27c
  414ac8:	00415ac9 	.word	0x00415ac9
  414acc:	2040c750 	.word	0x2040c750
  414ad0:	00416819 	.word	0x00416819

00414ad4 <anim_ready_handler>:
{
  414ad4:	b510      	push	{r4, lr}
  414ad6:	b092      	sub	sp, #72	; 0x48
    if(a->playback_now == 0 && a->repeat_cnt > 0 && a->repeat_cnt != LV_ANIM_REPEAT_INFINITE) {
  414ad8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  414adc:	f013 0301 	ands.w	r3, r3, #1
  414ae0:	d107      	bne.n	414af2 <anim_ready_handler+0x1e>
  414ae2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  414ae4:	b12a      	cbz	r2, 414af2 <anim_ready_handler+0x1e>
  414ae6:	f64f 71ff 	movw	r1, #65535	; 0xffff
  414aea:	428a      	cmp	r2, r1
  414aec:	d001      	beq.n	414af2 <anim_ready_handler+0x1e>
        a->repeat_cnt--;
  414aee:	3a01      	subs	r2, #1
  414af0:	8702      	strh	r2, [r0, #56]	; 0x38
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414af2:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  414af4:	b9b2      	cbnz	r2, 414b24 <anim_ready_handler+0x50>
  414af6:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414af8:	b102      	cbz	r2, 414afc <anim_ready_handler+0x28>
  414afa:	b19b      	cbz	r3, 414b24 <anim_ready_handler+0x50>
  414afc:	4604      	mov	r4, r0
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
  414afe:	2244      	movs	r2, #68	; 0x44
  414b00:	4601      	mov	r1, r0
  414b02:	a801      	add	r0, sp, #4
  414b04:	4b16      	ldr	r3, [pc, #88]	; (414b60 <anim_ready_handler+0x8c>)
  414b06:	4798      	blx	r3
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414b08:	4621      	mov	r1, r4
  414b0a:	4816      	ldr	r0, [pc, #88]	; (414b64 <anim_ready_handler+0x90>)
  414b0c:	4b16      	ldr	r3, [pc, #88]	; (414b68 <anim_ready_handler+0x94>)
  414b0e:	4798      	blx	r3
        lv_mem_free(a);
  414b10:	4620      	mov	r0, r4
  414b12:	4b16      	ldr	r3, [pc, #88]	; (414b6c <anim_ready_handler+0x98>)
  414b14:	4798      	blx	r3
        anim_mark_list_change();
  414b16:	4b16      	ldr	r3, [pc, #88]	; (414b70 <anim_ready_handler+0x9c>)
  414b18:	4798      	blx	r3
        if(a_tmp.ready_cb != NULL) a_tmp.ready_cb(&a_tmp);
  414b1a:	9b04      	ldr	r3, [sp, #16]
  414b1c:	b1e3      	cbz	r3, 414b58 <anim_ready_handler+0x84>
  414b1e:	a801      	add	r0, sp, #4
  414b20:	4798      	blx	r3
    if(a->repeat_cnt == 0 && ((a->playback_time == 0) || (a->playback_time && a->playback_now == 1))) {
  414b22:	e019      	b.n	414b58 <anim_ready_handler+0x84>
        a->act_time = -(int32_t)(a->repeat_delay); /*Restart the animation*/
  414b24:	6b42      	ldr	r2, [r0, #52]	; 0x34
  414b26:	4252      	negs	r2, r2
  414b28:	6282      	str	r2, [r0, #40]	; 0x28
        if(a->playback_time != 0) {
  414b2a:	6b02      	ldr	r2, [r0, #48]	; 0x30
  414b2c:	b1a2      	cbz	r2, 414b58 <anim_ready_handler+0x84>
            if(a->playback_now == 0) a->act_time = -(int32_t)(a->playback_delay);
  414b2e:	b913      	cbnz	r3, 414b36 <anim_ready_handler+0x62>
  414b30:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  414b32:	4249      	negs	r1, r1
  414b34:	6281      	str	r1, [r0, #40]	; 0x28
            a->playback_now = a->playback_now == 0 ? 1 : 0;
  414b36:	f083 0301 	eor.w	r3, r3, #1
  414b3a:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
  414b3e:	f363 0100 	bfi	r1, r3, #0, #1
  414b42:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
            tmp      = a->start;
  414b46:	6983      	ldr	r3, [r0, #24]
            a->start = a->end;
  414b48:	6a04      	ldr	r4, [r0, #32]
  414b4a:	6184      	str	r4, [r0, #24]
            a->end   = tmp;
  414b4c:	6203      	str	r3, [r0, #32]
            a->time = a->playback_now == 0 ? a->time_orig : a->playback_time;
  414b4e:	f011 0f01 	tst.w	r1, #1
  414b52:	d100      	bne.n	414b56 <anim_ready_handler+0x82>
  414b54:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  414b56:	6242      	str	r2, [r0, #36]	; 0x24
}
  414b58:	4b06      	ldr	r3, [pc, #24]	; (414b74 <anim_ready_handler+0xa0>)
  414b5a:	7818      	ldrb	r0, [r3, #0]
  414b5c:	b012      	add	sp, #72	; 0x48
  414b5e:	bd10      	pop	{r4, pc}
  414b60:	004160d1 	.word	0x004160d1
  414b64:	2043a27c 	.word	0x2043a27c
  414b68:	00415b85 	.word	0x00415b85
  414b6c:	00415f85 	.word	0x00415f85
  414b70:	00414a99 	.word	0x00414a99
  414b74:	2040c754 	.word	0x2040c754

00414b78 <anim_task>:
{
  414b78:	b538      	push	{r3, r4, r5, lr}
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414b7a:	4836      	ldr	r0, [pc, #216]	; (414c54 <anim_task+0xdc>)
  414b7c:	4b36      	ldr	r3, [pc, #216]	; (414c58 <anim_task+0xe0>)
  414b7e:	4798      	blx	r3
  414b80:	e009      	b.n	414b96 <anim_task+0x1e>
        a->has_run = 0;
  414b82:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  414b86:	f36f 0341 	bfc	r3, #1, #1
  414b8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414b8e:	4601      	mov	r1, r0
  414b90:	4830      	ldr	r0, [pc, #192]	; (414c54 <anim_task+0xdc>)
  414b92:	4b32      	ldr	r3, [pc, #200]	; (414c5c <anim_task+0xe4>)
  414b94:	4798      	blx	r3
  414b96:	2800      	cmp	r0, #0
  414b98:	d1f3      	bne.n	414b82 <anim_task+0xa>
    uint32_t elaps = lv_tick_elaps(last_task_run);
  414b9a:	4b31      	ldr	r3, [pc, #196]	; (414c60 <anim_task+0xe8>)
  414b9c:	6818      	ldr	r0, [r3, #0]
  414b9e:	4b31      	ldr	r3, [pc, #196]	; (414c64 <anim_task+0xec>)
  414ba0:	4798      	blx	r3
  414ba2:	4605      	mov	r5, r0
    a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414ba4:	482b      	ldr	r0, [pc, #172]	; (414c54 <anim_task+0xdc>)
  414ba6:	4b2c      	ldr	r3, [pc, #176]	; (414c58 <anim_task+0xe0>)
  414ba8:	4798      	blx	r3
  414baa:	4604      	mov	r4, r0
    while(a != NULL) {
  414bac:	e022      	b.n	414bf4 <anim_task+0x7c>
            if(a->act_time <= 0 && new_act_time >= 0) {
  414bae:	2a00      	cmp	r2, #0
  414bb0:	db31      	blt.n	414c16 <anim_task+0x9e>
                if(a->start_cb) a->start_cb(a);
  414bb2:	68a3      	ldr	r3, [r4, #8]
  414bb4:	2b00      	cmp	r3, #0
  414bb6:	d02e      	beq.n	414c16 <anim_task+0x9e>
  414bb8:	4620      	mov	r0, r4
  414bba:	4798      	blx	r3
  414bbc:	e02b      	b.n	414c16 <anim_task+0x9e>
                if(a->path.cb) new_value = a->path.cb(&a->path, a);
  414bbe:	6923      	ldr	r3, [r4, #16]
  414bc0:	2b00      	cmp	r3, #0
  414bc2:	d032      	beq.n	414c2a <anim_task+0xb2>
  414bc4:	4621      	mov	r1, r4
  414bc6:	f104 0010 	add.w	r0, r4, #16
  414bca:	4798      	blx	r3
                if(new_value != a->current) {
  414bcc:	69e3      	ldr	r3, [r4, #28]
  414bce:	4298      	cmp	r0, r3
  414bd0:	d005      	beq.n	414bde <anim_task+0x66>
                    a->current = new_value;
  414bd2:	61e0      	str	r0, [r4, #28]
                    if(a->exec_cb) a->exec_cb(a->var, new_value);
  414bd4:	6863      	ldr	r3, [r4, #4]
  414bd6:	b113      	cbz	r3, 414bde <anim_task+0x66>
  414bd8:	b201      	sxth	r1, r0
  414bda:	6820      	ldr	r0, [r4, #0]
  414bdc:	4798      	blx	r3
                if(a->act_time >= a->time) {
  414bde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  414be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  414be2:	429a      	cmp	r2, r3
  414be4:	da27      	bge.n	414c36 <anim_task+0xbe>
        if(anim_list_changed)
  414be6:	4b20      	ldr	r3, [pc, #128]	; (414c68 <anim_task+0xf0>)
  414be8:	781b      	ldrb	r3, [r3, #0]
  414bea:	b343      	cbz	r3, 414c3e <anim_task+0xc6>
            a = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414bec:	4819      	ldr	r0, [pc, #100]	; (414c54 <anim_task+0xdc>)
  414bee:	4b1a      	ldr	r3, [pc, #104]	; (414c58 <anim_task+0xe0>)
  414bf0:	4798      	blx	r3
  414bf2:	4604      	mov	r4, r0
    while(a != NULL) {
  414bf4:	b34c      	cbz	r4, 414c4a <anim_task+0xd2>
        anim_list_changed = false;
  414bf6:	2200      	movs	r2, #0
  414bf8:	4b1b      	ldr	r3, [pc, #108]	; (414c68 <anim_task+0xf0>)
  414bfa:	701a      	strb	r2, [r3, #0]
        if(!a->has_run) {
  414bfc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
  414c00:	f013 0f02 	tst.w	r3, #2
  414c04:	d1ef      	bne.n	414be6 <anim_task+0x6e>
            a->has_run = 1; /*The list readying might be reset so need to know which anim has run already*/
  414c06:	f043 0302 	orr.w	r3, r3, #2
  414c0a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
            int32_t new_act_time = a->act_time + elaps;
  414c0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414c10:	18ea      	adds	r2, r5, r3
            if(a->act_time <= 0 && new_act_time >= 0) {
  414c12:	2b00      	cmp	r3, #0
  414c14:	ddcb      	ble.n	414bae <anim_task+0x36>
            a->act_time += elaps;
  414c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  414c18:	442b      	add	r3, r5
  414c1a:	62a3      	str	r3, [r4, #40]	; 0x28
            if(a->act_time >= 0) {
  414c1c:	2b00      	cmp	r3, #0
  414c1e:	dbe2      	blt.n	414be6 <anim_task+0x6e>
                if(a->act_time > a->time) a->act_time = a->time;
  414c20:	6a62      	ldr	r2, [r4, #36]	; 0x24
  414c22:	4293      	cmp	r3, r2
  414c24:	ddcb      	ble.n	414bbe <anim_task+0x46>
  414c26:	62a2      	str	r2, [r4, #40]	; 0x28
  414c28:	e7c9      	b.n	414bbe <anim_task+0x46>
                else new_value = lv_anim_path_linear(&a->path, a);
  414c2a:	4621      	mov	r1, r4
  414c2c:	f104 0010 	add.w	r0, r4, #16
  414c30:	4b0e      	ldr	r3, [pc, #56]	; (414c6c <anim_task+0xf4>)
  414c32:	4798      	blx	r3
  414c34:	e7ca      	b.n	414bcc <anim_task+0x54>
                    anim_ready_handler(a);
  414c36:	4620      	mov	r0, r4
  414c38:	4b0d      	ldr	r3, [pc, #52]	; (414c70 <anim_task+0xf8>)
  414c3a:	4798      	blx	r3
  414c3c:	e7d3      	b.n	414be6 <anim_task+0x6e>
            a = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414c3e:	4621      	mov	r1, r4
  414c40:	4804      	ldr	r0, [pc, #16]	; (414c54 <anim_task+0xdc>)
  414c42:	4b06      	ldr	r3, [pc, #24]	; (414c5c <anim_task+0xe4>)
  414c44:	4798      	blx	r3
  414c46:	4604      	mov	r4, r0
  414c48:	e7d4      	b.n	414bf4 <anim_task+0x7c>
    last_task_run = lv_tick_get();
  414c4a:	4b0a      	ldr	r3, [pc, #40]	; (414c74 <anim_task+0xfc>)
  414c4c:	4798      	blx	r3
  414c4e:	4b04      	ldr	r3, [pc, #16]	; (414c60 <anim_task+0xe8>)
  414c50:	6018      	str	r0, [r3, #0]
  414c52:	bd38      	pop	{r3, r4, r5, pc}
  414c54:	2043a27c 	.word	0x2043a27c
  414c58:	00415ac9 	.word	0x00415ac9
  414c5c:	00415add 	.word	0x00415add
  414c60:	2040c758 	.word	0x2040c758
  414c64:	00414a59 	.word	0x00414a59
  414c68:	2040c754 	.word	0x2040c754
  414c6c:	00414a71 	.word	0x00414a71
  414c70:	00414ad5 	.word	0x00414ad5
  414c74:	00414a3d 	.word	0x00414a3d

00414c78 <_lv_anim_core_init>:
{
  414c78:	b510      	push	{r4, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_anim_ll), sizeof(lv_anim_t));
  414c7a:	2144      	movs	r1, #68	; 0x44
  414c7c:	480a      	ldr	r0, [pc, #40]	; (414ca8 <_lv_anim_core_init+0x30>)
  414c7e:	4b0b      	ldr	r3, [pc, #44]	; (414cac <_lv_anim_core_init+0x34>)
  414c80:	4798      	blx	r3
    last_task_run = lv_tick_get();
  414c82:	4b0b      	ldr	r3, [pc, #44]	; (414cb0 <_lv_anim_core_init+0x38>)
  414c84:	4798      	blx	r3
  414c86:	4b0b      	ldr	r3, [pc, #44]	; (414cb4 <_lv_anim_core_init+0x3c>)
  414c88:	6018      	str	r0, [r3, #0]
    _lv_anim_task = lv_task_create(anim_task, LV_DISP_DEF_REFR_PERIOD, LV_ANIM_TASK_PRIO, NULL);
  414c8a:	2300      	movs	r3, #0
  414c8c:	2204      	movs	r2, #4
  414c8e:	211e      	movs	r1, #30
  414c90:	4809      	ldr	r0, [pc, #36]	; (414cb8 <_lv_anim_core_init+0x40>)
  414c92:	4c0a      	ldr	r4, [pc, #40]	; (414cbc <_lv_anim_core_init+0x44>)
  414c94:	47a0      	blx	r4
  414c96:	4b0a      	ldr	r3, [pc, #40]	; (414cc0 <_lv_anim_core_init+0x48>)
  414c98:	6018      	str	r0, [r3, #0]
    anim_mark_list_change(); /*Turn off the animation task*/
  414c9a:	4b0a      	ldr	r3, [pc, #40]	; (414cc4 <_lv_anim_core_init+0x4c>)
  414c9c:	4798      	blx	r3
    anim_list_changed = false; /*The list has not actually changed*/
  414c9e:	2200      	movs	r2, #0
  414ca0:	4b09      	ldr	r3, [pc, #36]	; (414cc8 <_lv_anim_core_init+0x50>)
  414ca2:	701a      	strb	r2, [r3, #0]
  414ca4:	bd10      	pop	{r4, pc}
  414ca6:	bf00      	nop
  414ca8:	2043a27c 	.word	0x2043a27c
  414cac:	00415a1f 	.word	0x00415a1f
  414cb0:	00414a3d 	.word	0x00414a3d
  414cb4:	2040c758 	.word	0x2040c758
  414cb8:	00414b79 	.word	0x00414b79
  414cbc:	004164c5 	.word	0x004164c5
  414cc0:	2040c750 	.word	0x2040c750
  414cc4:	00414a99 	.word	0x00414a99
  414cc8:	2040c754 	.word	0x2040c754

00414ccc <lv_anim_init>:
{
  414ccc:	b510      	push	{r4, lr}
  414cce:	4604      	mov	r4, r0
    _lv_memset_00(a, sizeof(lv_anim_t));
  414cd0:	2144      	movs	r1, #68	; 0x44
  414cd2:	4b0f      	ldr	r3, [pc, #60]	; (414d10 <lv_anim_init+0x44>)
  414cd4:	4798      	blx	r3
    a->time    = 500;
  414cd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  414cda:	6263      	str	r3, [r4, #36]	; 0x24
    a->start   = 0;
  414cdc:	2300      	movs	r3, #0
  414cde:	61a3      	str	r3, [r4, #24]
    a->end     = 100;
  414ce0:	2364      	movs	r3, #100	; 0x64
  414ce2:	6223      	str	r3, [r4, #32]
    _lv_memcpy_small(&a->path, &lv_anim_path_def, sizeof(lv_anim_path_cb_t));
  414ce4:	f104 0110 	add.w	r1, r4, #16
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
    const uint8_t * s8 = (const uint8_t *)src;
  414ce8:	4a0a      	ldr	r2, [pc, #40]	; (414d14 <lv_anim_init+0x48>)
  414cea:	2304      	movs	r3, #4
  414cec:	e004      	b.n	414cf8 <lv_anim_init+0x2c>

    while(len) {
        *d8 = *s8;
  414cee:	f812 0b01 	ldrb.w	r0, [r2], #1
  414cf2:	f801 0b01 	strb.w	r0, [r1], #1
        d8++;
        s8++;
        len--;
  414cf6:	3b01      	subs	r3, #1
    while(len) {
  414cf8:	2b00      	cmp	r3, #0
  414cfa:	d1f8      	bne.n	414cee <lv_anim_init+0x22>
    a->repeat_cnt = 1;
  414cfc:	2301      	movs	r3, #1
  414cfe:	8723      	strh	r3, [r4, #56]	; 0x38
    a->early_apply = 1;
  414d00:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414d04:	f043 0301 	orr.w	r3, r3, #1
  414d08:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  414d0c:	bd10      	pop	{r4, pc}
  414d0e:	bf00      	nop
  414d10:	004163f5 	.word	0x004163f5
  414d14:	00429664 	.word	0x00429664

00414d18 <lv_anim_del>:
{
  414d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414d1c:	4606      	mov	r6, r0
  414d1e:	460f      	mov	r7, r1
    a        = _lv_ll_get_head(&LV_GC_ROOT(_lv_anim_ll));
  414d20:	4812      	ldr	r0, [pc, #72]	; (414d6c <lv_anim_del+0x54>)
  414d22:	4b13      	ldr	r3, [pc, #76]	; (414d70 <lv_anim_del+0x58>)
  414d24:	4798      	blx	r3
  414d26:	4604      	mov	r4, r0
    bool del = false;
  414d28:	f04f 0800 	mov.w	r8, #0
    while(a != NULL) {
  414d2c:	e00b      	b.n	414d46 <lv_anim_del+0x2e>
            _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
  414d2e:	4621      	mov	r1, r4
  414d30:	480e      	ldr	r0, [pc, #56]	; (414d6c <lv_anim_del+0x54>)
  414d32:	4b10      	ldr	r3, [pc, #64]	; (414d74 <lv_anim_del+0x5c>)
  414d34:	4798      	blx	r3
            lv_mem_free(a);
  414d36:	4620      	mov	r0, r4
  414d38:	4b0f      	ldr	r3, [pc, #60]	; (414d78 <lv_anim_del+0x60>)
  414d3a:	4798      	blx	r3
            anim_mark_list_change(); /*Read by `anim_task`. It need to know if a delete occurred in
  414d3c:	4b0f      	ldr	r3, [pc, #60]	; (414d7c <lv_anim_del+0x64>)
  414d3e:	4798      	blx	r3
            del = true;
  414d40:	f04f 0801 	mov.w	r8, #1
  414d44:	462c      	mov	r4, r5
    while(a != NULL) {
  414d46:	b16c      	cbz	r4, 414d64 <lv_anim_del+0x4c>
        a_next = _lv_ll_get_next(&LV_GC_ROOT(_lv_anim_ll), a);
  414d48:	4621      	mov	r1, r4
  414d4a:	4808      	ldr	r0, [pc, #32]	; (414d6c <lv_anim_del+0x54>)
  414d4c:	4b0c      	ldr	r3, [pc, #48]	; (414d80 <lv_anim_del+0x68>)
  414d4e:	4798      	blx	r3
  414d50:	4605      	mov	r5, r0
        if(a->var == var && (a->exec_cb == exec_cb || exec_cb == NULL)) {
  414d52:	6823      	ldr	r3, [r4, #0]
  414d54:	42b3      	cmp	r3, r6
  414d56:	d1f5      	bne.n	414d44 <lv_anim_del+0x2c>
  414d58:	6863      	ldr	r3, [r4, #4]
  414d5a:	42bb      	cmp	r3, r7
  414d5c:	d0e7      	beq.n	414d2e <lv_anim_del+0x16>
  414d5e:	2f00      	cmp	r7, #0
  414d60:	d1f0      	bne.n	414d44 <lv_anim_del+0x2c>
  414d62:	e7e4      	b.n	414d2e <lv_anim_del+0x16>
}
  414d64:	4640      	mov	r0, r8
  414d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  414d6a:	bf00      	nop
  414d6c:	2043a27c 	.word	0x2043a27c
  414d70:	00415ac9 	.word	0x00415ac9
  414d74:	00415b85 	.word	0x00415b85
  414d78:	00415f85 	.word	0x00415f85
  414d7c:	00414a99 	.word	0x00414a99
  414d80:	00415add 	.word	0x00415add

00414d84 <lv_anim_start>:
{
  414d84:	b538      	push	{r3, r4, r5, lr}
  414d86:	4605      	mov	r5, r0
    if(a->exec_cb != NULL) lv_anim_del(a->var, a->exec_cb); /*fp == NULL would delete all animations of var*/
  414d88:	6841      	ldr	r1, [r0, #4]
  414d8a:	b111      	cbz	r1, 414d92 <lv_anim_start+0xe>
  414d8c:	6800      	ldr	r0, [r0, #0]
  414d8e:	4b18      	ldr	r3, [pc, #96]	; (414df0 <lv_anim_start+0x6c>)
  414d90:	4798      	blx	r3
    if(_lv_ll_is_empty(&LV_GC_ROOT(_lv_anim_ll))) {
  414d92:	4818      	ldr	r0, [pc, #96]	; (414df4 <lv_anim_start+0x70>)
  414d94:	4b18      	ldr	r3, [pc, #96]	; (414df8 <lv_anim_start+0x74>)
  414d96:	4798      	blx	r3
  414d98:	b9e8      	cbnz	r0, 414dd6 <lv_anim_start+0x52>
    lv_anim_t * new_anim = _lv_ll_ins_head(&LV_GC_ROOT(_lv_anim_ll));
  414d9a:	4816      	ldr	r0, [pc, #88]	; (414df4 <lv_anim_start+0x70>)
  414d9c:	4b17      	ldr	r3, [pc, #92]	; (414dfc <lv_anim_start+0x78>)
  414d9e:	4798      	blx	r3
  414da0:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_anim);
  414da2:	4b17      	ldr	r3, [pc, #92]	; (414e00 <lv_anim_start+0x7c>)
  414da4:	4798      	blx	r3
  414da6:	b1e0      	cbz	r0, 414de2 <lv_anim_start+0x5e>
    if(new_anim == NULL) return;
  414da8:	b1a4      	cbz	r4, 414dd4 <lv_anim_start+0x50>
    a->time_orig = a->time;
  414daa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  414dac:	63eb      	str	r3, [r5, #60]	; 0x3c
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));
  414dae:	2244      	movs	r2, #68	; 0x44
  414db0:	4629      	mov	r1, r5
  414db2:	4620      	mov	r0, r4
  414db4:	4b13      	ldr	r3, [pc, #76]	; (414e04 <lv_anim_start+0x80>)
  414db6:	4798      	blx	r3
    if(new_anim->early_apply) {
  414db8:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
  414dbc:	f013 0f01 	tst.w	r3, #1
  414dc0:	d006      	beq.n	414dd0 <lv_anim_start+0x4c>
        if(new_anim->exec_cb && new_anim->var) new_anim->exec_cb(new_anim->var, new_anim->start);
  414dc2:	6863      	ldr	r3, [r4, #4]
  414dc4:	b123      	cbz	r3, 414dd0 <lv_anim_start+0x4c>
  414dc6:	6820      	ldr	r0, [r4, #0]
  414dc8:	b110      	cbz	r0, 414dd0 <lv_anim_start+0x4c>
  414dca:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
  414dce:	4798      	blx	r3
    anim_mark_list_change();
  414dd0:	4b0d      	ldr	r3, [pc, #52]	; (414e08 <lv_anim_start+0x84>)
  414dd2:	4798      	blx	r3
  414dd4:	bd38      	pop	{r3, r4, r5, pc}
        last_task_run = lv_tick_get() - 1;
  414dd6:	4b0d      	ldr	r3, [pc, #52]	; (414e0c <lv_anim_start+0x88>)
  414dd8:	4798      	blx	r3
  414dda:	3801      	subs	r0, #1
  414ddc:	4b0c      	ldr	r3, [pc, #48]	; (414e10 <lv_anim_start+0x8c>)
  414dde:	6018      	str	r0, [r3, #0]
  414de0:	e7db      	b.n	414d9a <lv_anim_start+0x16>
    LV_ASSERT_MEM(new_anim);
  414de2:	4622      	mov	r2, r4
  414de4:	2300      	movs	r3, #0
  414de6:	480b      	ldr	r0, [pc, #44]	; (414e14 <lv_anim_start+0x90>)
  414de8:	490b      	ldr	r1, [pc, #44]	; (414e18 <lv_anim_start+0x94>)
  414dea:	4788      	blx	r1
  414dec:	e7fe      	b.n	414dec <lv_anim_start+0x68>
  414dee:	bf00      	nop
  414df0:	00414d19 	.word	0x00414d19
  414df4:	2043a27c 	.word	0x2043a27c
  414df8:	00415d35 	.word	0x00415d35
  414dfc:	00415a31 	.word	0x00415a31
  414e00:	004157b9 	.word	0x004157b9
  414e04:	004160d1 	.word	0x004160d1
  414e08:	00414a99 	.word	0x00414a99
  414e0c:	00414a3d 	.word	0x00414a3d
  414e10:	2040c758 	.word	0x2040c758
  414e14:	004260b0 	.word	0x004260b0
  414e18:	004157c5 	.word	0x004157c5

00414e1c <lv_anim_get>:
{
  414e1c:	b538      	push	{r3, r4, r5, lr}
  414e1e:	4604      	mov	r4, r0
  414e20:	460d      	mov	r5, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_anim_ll), a) {
  414e22:	4808      	ldr	r0, [pc, #32]	; (414e44 <lv_anim_get+0x28>)
  414e24:	4b08      	ldr	r3, [pc, #32]	; (414e48 <lv_anim_get+0x2c>)
  414e26:	4798      	blx	r3
  414e28:	e003      	b.n	414e32 <lv_anim_get+0x16>
  414e2a:	4601      	mov	r1, r0
  414e2c:	4805      	ldr	r0, [pc, #20]	; (414e44 <lv_anim_get+0x28>)
  414e2e:	4b07      	ldr	r3, [pc, #28]	; (414e4c <lv_anim_get+0x30>)
  414e30:	4798      	blx	r3
  414e32:	b128      	cbz	r0, 414e40 <lv_anim_get+0x24>
        if(a->var == var && a->exec_cb == exec_cb) {
  414e34:	6803      	ldr	r3, [r0, #0]
  414e36:	42a3      	cmp	r3, r4
  414e38:	d1f7      	bne.n	414e2a <lv_anim_get+0xe>
  414e3a:	6843      	ldr	r3, [r0, #4]
  414e3c:	42ab      	cmp	r3, r5
  414e3e:	d1f4      	bne.n	414e2a <lv_anim_get+0xe>
}
  414e40:	bd38      	pop	{r3, r4, r5, pc}
  414e42:	bf00      	nop
  414e44:	2043a27c 	.word	0x2043a27c
  414e48:	00415ac9 	.word	0x00415ac9
  414e4c:	00415add 	.word	0x00415add

00414e50 <lv_anim_speed_to_time>:
    int32_t d     = LV_MATH_ABS((int32_t)start - end);
  414e50:	1a89      	subs	r1, r1, r2
  414e52:	2900      	cmp	r1, #0
  414e54:	bfb8      	it	lt
  414e56:	4249      	neglt	r1, r1
    uint32_t time = (int32_t)((int32_t)(d * 1000) / speed);
  414e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  414e5c:	fb02 f201 	mul.w	r2, r2, r1
  414e60:	fb92 f0f0 	sdiv	r0, r2, r0
    if(time > UINT16_MAX) time = UINT16_MAX;
  414e64:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  414e68:	d301      	bcc.n	414e6e <lv_anim_speed_to_time+0x1e>
  414e6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    if(time == 0) {
  414e6e:	b900      	cbnz	r0, 414e72 <lv_anim_speed_to_time+0x22>
        time++;
  414e70:	3001      	adds	r0, #1
}
  414e72:	b280      	uxth	r0, r0
  414e74:	4770      	bx	lr

00414e76 <lv_point_within_circle>:
  414e76:	b410      	push	{r4}
  414e78:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  414e7c:	f9b0 2000 	ldrsh.w	r2, [r0]
  414e80:	1a9b      	subs	r3, r3, r2
  414e82:	d417      	bmi.n	414eb4 <lv_point_within_circle+0x3e>
  414e84:	105b      	asrs	r3, r3, #1
  414e86:	b29c      	uxth	r4, r3
  414e88:	fa14 f282 	uxtah	r2, r4, r2
  414e8c:	b292      	uxth	r2, r2
  414e8e:	8840      	ldrh	r0, [r0, #2]
  414e90:	4404      	add	r4, r0
  414e92:	b2a4      	uxth	r4, r4
  414e94:	8808      	ldrh	r0, [r1, #0]
  414e96:	1a82      	subs	r2, r0, r2
  414e98:	8849      	ldrh	r1, [r1, #2]
  414e9a:	1b09      	subs	r1, r1, r4
  414e9c:	fb13 f303 	smulbb	r3, r3, r3
  414ea0:	fb11 f101 	smulbb	r1, r1, r1
  414ea4:	fb12 1202 	smlabb	r2, r2, r2, r1
  414ea8:	4293      	cmp	r3, r2
  414eaa:	d205      	bcs.n	414eb8 <lv_point_within_circle+0x42>
  414eac:	2000      	movs	r0, #0
  414eae:	f85d 4b04 	ldr.w	r4, [sp], #4
  414eb2:	4770      	bx	lr
  414eb4:	3301      	adds	r3, #1
  414eb6:	e7e5      	b.n	414e84 <lv_point_within_circle+0xe>
  414eb8:	2001      	movs	r0, #1
  414eba:	e7f8      	b.n	414eae <lv_point_within_circle+0x38>

00414ebc <lv_area_set>:
  414ebc:	8001      	strh	r1, [r0, #0]
  414ebe:	8042      	strh	r2, [r0, #2]
  414ec0:	8083      	strh	r3, [r0, #4]
  414ec2:	f9bd 3000 	ldrsh.w	r3, [sp]
  414ec6:	80c3      	strh	r3, [r0, #6]
  414ec8:	4770      	bx	lr

00414eca <lv_area_set_height>:
  414eca:	8843      	ldrh	r3, [r0, #2]
  414ecc:	4419      	add	r1, r3
  414ece:	b289      	uxth	r1, r1
  414ed0:	3901      	subs	r1, #1
  414ed2:	80c1      	strh	r1, [r0, #6]
  414ed4:	4770      	bx	lr

00414ed6 <lv_area_get_size>:
  414ed6:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  414eda:	f9b0 3000 	ldrsh.w	r3, [r0]
  414ede:	1ad2      	subs	r2, r2, r3
  414ee0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  414ee4:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
  414ee8:	1a18      	subs	r0, r3, r0
  414eea:	3001      	adds	r0, #1
  414eec:	fb02 0000 	mla	r0, r2, r0, r0
  414ef0:	4770      	bx	lr

00414ef2 <_lv_area_intersect>:
  414ef2:	b470      	push	{r4, r5, r6}
  414ef4:	f9b2 4000 	ldrsh.w	r4, [r2]
  414ef8:	f9b1 3000 	ldrsh.w	r3, [r1]
  414efc:	429c      	cmp	r4, r3
  414efe:	bfb8      	it	lt
  414f00:	461c      	movlt	r4, r3
  414f02:	8004      	strh	r4, [r0, #0]
  414f04:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
  414f08:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414f0c:	429d      	cmp	r5, r3
  414f0e:	bfb8      	it	lt
  414f10:	461d      	movlt	r5, r3
  414f12:	8045      	strh	r5, [r0, #2]
  414f14:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  414f18:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
  414f1c:	42b3      	cmp	r3, r6
  414f1e:	bfa8      	it	ge
  414f20:	4633      	movge	r3, r6
  414f22:	8083      	strh	r3, [r0, #4]
  414f24:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
  414f28:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
  414f2c:	428a      	cmp	r2, r1
  414f2e:	bfa8      	it	ge
  414f30:	460a      	movge	r2, r1
  414f32:	80c2      	strh	r2, [r0, #6]
  414f34:	429c      	cmp	r4, r3
  414f36:	dc05      	bgt.n	414f44 <_lv_area_intersect+0x52>
  414f38:	4295      	cmp	r5, r2
  414f3a:	dd01      	ble.n	414f40 <_lv_area_intersect+0x4e>
  414f3c:	2000      	movs	r0, #0
  414f3e:	e002      	b.n	414f46 <_lv_area_intersect+0x54>
  414f40:	2001      	movs	r0, #1
  414f42:	e000      	b.n	414f46 <_lv_area_intersect+0x54>
  414f44:	2000      	movs	r0, #0
  414f46:	bc70      	pop	{r4, r5, r6}
  414f48:	4770      	bx	lr

00414f4a <_lv_area_join>:
  414f4a:	b410      	push	{r4}
  414f4c:	f9b2 3000 	ldrsh.w	r3, [r2]
  414f50:	f9b1 4000 	ldrsh.w	r4, [r1]
  414f54:	42a3      	cmp	r3, r4
  414f56:	bfa8      	it	ge
  414f58:	4623      	movge	r3, r4
  414f5a:	8003      	strh	r3, [r0, #0]
  414f5c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
  414f60:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
  414f64:	42a3      	cmp	r3, r4
  414f66:	bfa8      	it	ge
  414f68:	4623      	movge	r3, r4
  414f6a:	8043      	strh	r3, [r0, #2]
  414f6c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
  414f70:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
  414f74:	42a3      	cmp	r3, r4
  414f76:	bfb8      	it	lt
  414f78:	4623      	movlt	r3, r4
  414f7a:	8083      	strh	r3, [r0, #4]
  414f7c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
  414f80:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
  414f84:	4293      	cmp	r3, r2
  414f86:	bfb8      	it	lt
  414f88:	4613      	movlt	r3, r2
  414f8a:	80c3      	strh	r3, [r0, #6]
  414f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  414f90:	4770      	bx	lr
	...

00414f94 <_lv_area_is_point_on>:
  414f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  414f98:	b082      	sub	sp, #8
  414f9a:	f9b1 3000 	ldrsh.w	r3, [r1]
  414f9e:	f9b0 6000 	ldrsh.w	r6, [r0]
  414fa2:	42b3      	cmp	r3, r6
  414fa4:	db0f      	blt.n	414fc6 <_lv_area_is_point_on+0x32>
  414fa6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  414faa:	42a3      	cmp	r3, r4
  414fac:	dc52      	bgt.n	415054 <_lv_area_is_point_on+0xc0>
  414fae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  414fb2:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  414fb6:	42a3      	cmp	r3, r4
  414fb8:	db4e      	blt.n	415058 <_lv_area_is_point_on+0xc4>
  414fba:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  414fbe:	42a3      	cmp	r3, r4
  414fc0:	dd4c      	ble.n	41505c <_lv_area_is_point_on+0xc8>
  414fc2:	2500      	movs	r5, #0
  414fc4:	e000      	b.n	414fc8 <_lv_area_is_point_on+0x34>
  414fc6:	2500      	movs	r5, #0
  414fc8:	2d00      	cmp	r5, #0
  414fca:	d03f      	beq.n	41504c <_lv_area_is_point_on+0xb8>
  414fcc:	2a00      	cmp	r2, #0
  414fce:	dd3d      	ble.n	41504c <_lv_area_is_point_on+0xb8>
  414fd0:	8884      	ldrh	r4, [r0, #4]
  414fd2:	b2b3      	uxth	r3, r6
  414fd4:	1ae4      	subs	r4, r4, r3
  414fd6:	b2a4      	uxth	r4, r4
  414fd8:	3401      	adds	r4, #1
  414fda:	b224      	sxth	r4, r4
  414fdc:	2c00      	cmp	r4, #0
  414fde:	db3f      	blt.n	415060 <_lv_area_is_point_on+0xcc>
  414fe0:	1064      	asrs	r4, r4, #1
  414fe2:	88c3      	ldrh	r3, [r0, #6]
  414fe4:	8847      	ldrh	r7, [r0, #2]
  414fe6:	1bdb      	subs	r3, r3, r7
  414fe8:	b29b      	uxth	r3, r3
  414fea:	3301      	adds	r3, #1
  414fec:	b21b      	sxth	r3, r3
  414fee:	2b00      	cmp	r3, #0
  414ff0:	db38      	blt.n	415064 <_lv_area_is_point_on+0xd0>
  414ff2:	105b      	asrs	r3, r3, #1
  414ff4:	429c      	cmp	r4, r3
  414ff6:	bfa8      	it	ge
  414ff8:	461c      	movge	r4, r3
  414ffa:	b224      	sxth	r4, r4
  414ffc:	42a2      	cmp	r2, r4
  414ffe:	dc00      	bgt.n	415002 <_lv_area_is_point_on+0x6e>
  415000:	4614      	mov	r4, r2
  415002:	4688      	mov	r8, r1
  415004:	4607      	mov	r7, r0
  415006:	f8ad 6000 	strh.w	r6, [sp]
  41500a:	8803      	ldrh	r3, [r0, #0]
  41500c:	b2a4      	uxth	r4, r4
  41500e:	4423      	add	r3, r4
  415010:	f8ad 3004 	strh.w	r3, [sp, #4]
  415014:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  415018:	f8ad 3002 	strh.w	r3, [sp, #2]
  41501c:	8843      	ldrh	r3, [r0, #2]
  41501e:	4423      	add	r3, r4
  415020:	f8ad 3006 	strh.w	r3, [sp, #6]
  415024:	2200      	movs	r2, #0
  415026:	4668      	mov	r0, sp
  415028:	f7ff ffb4 	bl	414f94 <_lv_area_is_point_on>
  41502c:	b1e0      	cbz	r0, 415068 <_lv_area_is_point_on+0xd4>
  41502e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  415032:	4423      	add	r3, r4
  415034:	f8ad 3004 	strh.w	r3, [sp, #4]
  415038:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41503c:	441c      	add	r4, r3
  41503e:	f8ad 4006 	strh.w	r4, [sp, #6]
  415042:	4641      	mov	r1, r8
  415044:	4668      	mov	r0, sp
  415046:	4b36      	ldr	r3, [pc, #216]	; (415120 <_lv_area_is_point_on+0x18c>)
  415048:	4798      	blx	r3
  41504a:	4605      	mov	r5, r0
  41504c:	4628      	mov	r0, r5
  41504e:	b002      	add	sp, #8
  415050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415054:	2500      	movs	r5, #0
  415056:	e7b7      	b.n	414fc8 <_lv_area_is_point_on+0x34>
  415058:	2500      	movs	r5, #0
  41505a:	e7b5      	b.n	414fc8 <_lv_area_is_point_on+0x34>
  41505c:	2501      	movs	r5, #1
  41505e:	e7b3      	b.n	414fc8 <_lv_area_is_point_on+0x34>
  415060:	3401      	adds	r4, #1
  415062:	e7bd      	b.n	414fe0 <_lv_area_is_point_on+0x4c>
  415064:	3301      	adds	r3, #1
  415066:	e7c4      	b.n	414ff2 <_lv_area_is_point_on+0x5e>
  415068:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
  41506c:	b293      	uxth	r3, r2
  41506e:	1b1b      	subs	r3, r3, r4
  415070:	f8ad 3002 	strh.w	r3, [sp, #2]
  415074:	f8ad 2006 	strh.w	r2, [sp, #6]
  415078:	2200      	movs	r2, #0
  41507a:	4641      	mov	r1, r8
  41507c:	4668      	mov	r0, sp
  41507e:	f7ff ff89 	bl	414f94 <_lv_area_is_point_on>
  415082:	b178      	cbz	r0, 4150a4 <_lv_area_is_point_on+0x110>
  415084:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  415088:	4423      	add	r3, r4
  41508a:	f8ad 3004 	strh.w	r3, [sp, #4]
  41508e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  415092:	1b1c      	subs	r4, r3, r4
  415094:	f8ad 4002 	strh.w	r4, [sp, #2]
  415098:	4641      	mov	r1, r8
  41509a:	4668      	mov	r0, sp
  41509c:	4b20      	ldr	r3, [pc, #128]	; (415120 <_lv_area_is_point_on+0x18c>)
  41509e:	4798      	blx	r3
  4150a0:	4605      	mov	r5, r0
  4150a2:	e7d3      	b.n	41504c <_lv_area_is_point_on+0xb8>
  4150a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
  4150a8:	b293      	uxth	r3, r2
  4150aa:	1b1b      	subs	r3, r3, r4
  4150ac:	f8ad 3000 	strh.w	r3, [sp]
  4150b0:	f8ad 2004 	strh.w	r2, [sp, #4]
  4150b4:	2200      	movs	r2, #0
  4150b6:	4641      	mov	r1, r8
  4150b8:	4668      	mov	r0, sp
  4150ba:	f7ff ff6b 	bl	414f94 <_lv_area_is_point_on>
  4150be:	b178      	cbz	r0, 4150e0 <_lv_area_is_point_on+0x14c>
  4150c0:	f8bd 3000 	ldrh.w	r3, [sp]
  4150c4:	1b1b      	subs	r3, r3, r4
  4150c6:	f8ad 3000 	strh.w	r3, [sp]
  4150ca:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  4150ce:	1b1c      	subs	r4, r3, r4
  4150d0:	f8ad 4002 	strh.w	r4, [sp, #2]
  4150d4:	4641      	mov	r1, r8
  4150d6:	4668      	mov	r0, sp
  4150d8:	4b11      	ldr	r3, [pc, #68]	; (415120 <_lv_area_is_point_on+0x18c>)
  4150da:	4798      	blx	r3
  4150dc:	4605      	mov	r5, r0
  4150de:	e7b5      	b.n	41504c <_lv_area_is_point_on+0xb8>
  4150e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
  4150e4:	f8ad 3002 	strh.w	r3, [sp, #2]
  4150e8:	887b      	ldrh	r3, [r7, #2]
  4150ea:	4423      	add	r3, r4
  4150ec:	f8ad 3006 	strh.w	r3, [sp, #6]
  4150f0:	2200      	movs	r2, #0
  4150f2:	4641      	mov	r1, r8
  4150f4:	4668      	mov	r0, sp
  4150f6:	f7ff ff4d 	bl	414f94 <_lv_area_is_point_on>
  4150fa:	2800      	cmp	r0, #0
  4150fc:	d0a6      	beq.n	41504c <_lv_area_is_point_on+0xb8>
  4150fe:	f8bd 3000 	ldrh.w	r3, [sp]
  415102:	1b1b      	subs	r3, r3, r4
  415104:	f8ad 3000 	strh.w	r3, [sp]
  415108:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41510c:	441c      	add	r4, r3
  41510e:	f8ad 4006 	strh.w	r4, [sp, #6]
  415112:	4641      	mov	r1, r8
  415114:	4668      	mov	r0, sp
  415116:	4b02      	ldr	r3, [pc, #8]	; (415120 <_lv_area_is_point_on+0x18c>)
  415118:	4798      	blx	r3
  41511a:	4605      	mov	r5, r0
  41511c:	e796      	b.n	41504c <_lv_area_is_point_on+0xb8>
  41511e:	bf00      	nop
  415120:	00414e77 	.word	0x00414e77

00415124 <_lv_area_is_on>:
  415124:	f9b0 2000 	ldrsh.w	r2, [r0]
  415128:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41512c:	429a      	cmp	r2, r3
  41512e:	dc13      	bgt.n	415158 <_lv_area_is_on+0x34>
  415130:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
  415134:	f9b1 3000 	ldrsh.w	r3, [r1]
  415138:	429a      	cmp	r2, r3
  41513a:	db0f      	blt.n	41515c <_lv_area_is_on+0x38>
  41513c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
  415140:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  415144:	429a      	cmp	r2, r3
  415146:	dc0b      	bgt.n	415160 <_lv_area_is_on+0x3c>
  415148:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  41514c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415150:	429a      	cmp	r2, r3
  415152:	da07      	bge.n	415164 <_lv_area_is_on+0x40>
  415154:	2000      	movs	r0, #0
  415156:	4770      	bx	lr
  415158:	2000      	movs	r0, #0
  41515a:	4770      	bx	lr
  41515c:	2000      	movs	r0, #0
  41515e:	4770      	bx	lr
  415160:	2000      	movs	r0, #0
  415162:	4770      	bx	lr
  415164:	2001      	movs	r0, #1
  415166:	4770      	bx	lr

00415168 <_lv_area_is_in>:
  415168:	b5f0      	push	{r4, r5, r6, r7, lr}
  41516a:	b083      	sub	sp, #12
  41516c:	f9b0 5000 	ldrsh.w	r5, [r0]
  415170:	f9b1 3000 	ldrsh.w	r3, [r1]
  415174:	429d      	cmp	r5, r3
  415176:	db13      	blt.n	4151a0 <_lv_area_is_in+0x38>
  415178:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
  41517c:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
  415180:	429c      	cmp	r4, r3
  415182:	db13      	blt.n	4151ac <_lv_area_is_in+0x44>
  415184:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
  415188:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
  41518c:	429c      	cmp	r4, r3
  41518e:	dc0f      	bgt.n	4151b0 <_lv_area_is_in+0x48>
  415190:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
  415194:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
  415198:	429c      	cmp	r4, r3
  41519a:	dd0b      	ble.n	4151b4 <_lv_area_is_in+0x4c>
  41519c:	2300      	movs	r3, #0
  41519e:	e000      	b.n	4151a2 <_lv_area_is_in+0x3a>
  4151a0:	2300      	movs	r3, #0
  4151a2:	b103      	cbz	r3, 4151a6 <_lv_area_is_in+0x3e>
  4151a4:	b942      	cbnz	r2, 4151b8 <_lv_area_is_in+0x50>
  4151a6:	4618      	mov	r0, r3
  4151a8:	b003      	add	sp, #12
  4151aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4151ac:	2300      	movs	r3, #0
  4151ae:	e7f8      	b.n	4151a2 <_lv_area_is_in+0x3a>
  4151b0:	2300      	movs	r3, #0
  4151b2:	e7f6      	b.n	4151a2 <_lv_area_is_in+0x3a>
  4151b4:	2301      	movs	r3, #1
  4151b6:	e7f4      	b.n	4151a2 <_lv_area_is_in+0x3a>
  4151b8:	4617      	mov	r7, r2
  4151ba:	460c      	mov	r4, r1
  4151bc:	4606      	mov	r6, r0
  4151be:	f8ad 5004 	strh.w	r5, [sp, #4]
  4151c2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
  4151c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  4151ca:	a901      	add	r1, sp, #4
  4151cc:	4620      	mov	r0, r4
  4151ce:	4b17      	ldr	r3, [pc, #92]	; (41522c <_lv_area_is_in+0xc4>)
  4151d0:	4798      	blx	r3
  4151d2:	4603      	mov	r3, r0
  4151d4:	2800      	cmp	r0, #0
  4151d6:	d0e6      	beq.n	4151a6 <_lv_area_is_in+0x3e>
  4151d8:	f9b6 5004 	ldrsh.w	r5, [r6, #4]
  4151dc:	f8ad 5004 	strh.w	r5, [sp, #4]
  4151e0:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
  4151e4:	f8ad 3006 	strh.w	r3, [sp, #6]
  4151e8:	463a      	mov	r2, r7
  4151ea:	a901      	add	r1, sp, #4
  4151ec:	4620      	mov	r0, r4
  4151ee:	4b0f      	ldr	r3, [pc, #60]	; (41522c <_lv_area_is_in+0xc4>)
  4151f0:	4798      	blx	r3
  4151f2:	4603      	mov	r3, r0
  4151f4:	2800      	cmp	r0, #0
  4151f6:	d0d6      	beq.n	4151a6 <_lv_area_is_in+0x3e>
  4151f8:	f9b6 3000 	ldrsh.w	r3, [r6]
  4151fc:	f8ad 3004 	strh.w	r3, [sp, #4]
  415200:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
  415204:	f8ad 3006 	strh.w	r3, [sp, #6]
  415208:	463a      	mov	r2, r7
  41520a:	a901      	add	r1, sp, #4
  41520c:	4620      	mov	r0, r4
  41520e:	4b07      	ldr	r3, [pc, #28]	; (41522c <_lv_area_is_in+0xc4>)
  415210:	4798      	blx	r3
  415212:	4603      	mov	r3, r0
  415214:	2800      	cmp	r0, #0
  415216:	d0c6      	beq.n	4151a6 <_lv_area_is_in+0x3e>
  415218:	a902      	add	r1, sp, #8
  41521a:	f821 5d04 	strh.w	r5, [r1, #-4]!
  41521e:	463a      	mov	r2, r7
  415220:	4620      	mov	r0, r4
  415222:	4b02      	ldr	r3, [pc, #8]	; (41522c <_lv_area_is_in+0xc4>)
  415224:	4798      	blx	r3
  415226:	4603      	mov	r3, r0
  415228:	e7bd      	b.n	4151a6 <_lv_area_is_in+0x3e>
  41522a:	bf00      	nop
  41522c:	00414f95 	.word	0x00414f95

00415230 <_lv_area_align>:
  415230:	b430      	push	{r4, r5}
  415232:	2a14      	cmp	r2, #20
  415234:	d842      	bhi.n	4152bc <_lv_area_align+0x8c>
  415236:	e8df f012 	tbh	[pc, r2, lsl #1]
  41523a:	0015      	.short	0x0015
  41523c:	00570053 	.word	0x00570053
  415240:	00850074 	.word	0x00850074
  415244:	00bf0096 	.word	0x00bf0096
  415248:	00f900dc 	.word	0x00f900dc
  41524c:	012b0122 	.word	0x012b0122
  415250:	0161014c 	.word	0x0161014c
  415254:	018b016a 	.word	0x018b016a
  415258:	01a901a0 	.word	0x01a901a0
  41525c:	01df01ca 	.word	0x01df01ca
  415260:	020901e8 	.word	0x020901e8
  415264:	8884      	ldrh	r4, [r0, #4]
  415266:	8802      	ldrh	r2, [r0, #0]
  415268:	1aa4      	subs	r4, r4, r2
  41526a:	b2a4      	uxth	r4, r4
  41526c:	3401      	adds	r4, #1
  41526e:	b224      	sxth	r4, r4
  415270:	888a      	ldrh	r2, [r1, #4]
  415272:	880d      	ldrh	r5, [r1, #0]
  415274:	1b52      	subs	r2, r2, r5
  415276:	b292      	uxth	r2, r2
  415278:	3201      	adds	r2, #1
  41527a:	b212      	sxth	r2, r2
  41527c:	4625      	mov	r5, r4
  41527e:	2c00      	cmp	r4, #0
  415280:	db26      	blt.n	4152d0 <_lv_area_align+0xa0>
  415282:	106d      	asrs	r5, r5, #1
  415284:	4614      	mov	r4, r2
  415286:	2a00      	cmp	r2, #0
  415288:	db24      	blt.n	4152d4 <_lv_area_align+0xa4>
  41528a:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  41528e:	801d      	strh	r5, [r3, #0]
  415290:	88c4      	ldrh	r4, [r0, #6]
  415292:	8842      	ldrh	r2, [r0, #2]
  415294:	1aa4      	subs	r4, r4, r2
  415296:	b2a4      	uxth	r4, r4
  415298:	3401      	adds	r4, #1
  41529a:	b224      	sxth	r4, r4
  41529c:	88ca      	ldrh	r2, [r1, #6]
  41529e:	8849      	ldrh	r1, [r1, #2]
  4152a0:	1a52      	subs	r2, r2, r1
  4152a2:	b292      	uxth	r2, r2
  4152a4:	3201      	adds	r2, #1
  4152a6:	b212      	sxth	r2, r2
  4152a8:	4621      	mov	r1, r4
  4152aa:	2c00      	cmp	r4, #0
  4152ac:	db14      	blt.n	4152d8 <_lv_area_align+0xa8>
  4152ae:	1049      	asrs	r1, r1, #1
  4152b0:	4614      	mov	r4, r2
  4152b2:	2a00      	cmp	r2, #0
  4152b4:	db12      	blt.n	4152dc <_lv_area_align+0xac>
  4152b6:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4152ba:	8059      	strh	r1, [r3, #2]
  4152bc:	8802      	ldrh	r2, [r0, #0]
  4152be:	8819      	ldrh	r1, [r3, #0]
  4152c0:	440a      	add	r2, r1
  4152c2:	801a      	strh	r2, [r3, #0]
  4152c4:	8842      	ldrh	r2, [r0, #2]
  4152c6:	8859      	ldrh	r1, [r3, #2]
  4152c8:	440a      	add	r2, r1
  4152ca:	805a      	strh	r2, [r3, #2]
  4152cc:	bc30      	pop	{r4, r5}
  4152ce:	4770      	bx	lr
  4152d0:	1c65      	adds	r5, r4, #1
  4152d2:	e7d6      	b.n	415282 <_lv_area_align+0x52>
  4152d4:	1c54      	adds	r4, r2, #1
  4152d6:	e7d8      	b.n	41528a <_lv_area_align+0x5a>
  4152d8:	1c61      	adds	r1, r4, #1
  4152da:	e7e8      	b.n	4152ae <_lv_area_align+0x7e>
  4152dc:	1c54      	adds	r4, r2, #1
  4152de:	e7ea      	b.n	4152b6 <_lv_area_align+0x86>
  4152e0:	2200      	movs	r2, #0
  4152e2:	801a      	strh	r2, [r3, #0]
  4152e4:	805a      	strh	r2, [r3, #2]
  4152e6:	e7e9      	b.n	4152bc <_lv_area_align+0x8c>
  4152e8:	8884      	ldrh	r4, [r0, #4]
  4152ea:	8802      	ldrh	r2, [r0, #0]
  4152ec:	1aa4      	subs	r4, r4, r2
  4152ee:	b2a4      	uxth	r4, r4
  4152f0:	3401      	adds	r4, #1
  4152f2:	b224      	sxth	r4, r4
  4152f4:	888a      	ldrh	r2, [r1, #4]
  4152f6:	8809      	ldrh	r1, [r1, #0]
  4152f8:	1a52      	subs	r2, r2, r1
  4152fa:	b292      	uxth	r2, r2
  4152fc:	3201      	adds	r2, #1
  4152fe:	b212      	sxth	r2, r2
  415300:	4621      	mov	r1, r4
  415302:	2c00      	cmp	r4, #0
  415304:	db09      	blt.n	41531a <_lv_area_align+0xea>
  415306:	1049      	asrs	r1, r1, #1
  415308:	4614      	mov	r4, r2
  41530a:	2a00      	cmp	r2, #0
  41530c:	db07      	blt.n	41531e <_lv_area_align+0xee>
  41530e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415312:	8019      	strh	r1, [r3, #0]
  415314:	2200      	movs	r2, #0
  415316:	805a      	strh	r2, [r3, #2]
  415318:	e7d0      	b.n	4152bc <_lv_area_align+0x8c>
  41531a:	1c61      	adds	r1, r4, #1
  41531c:	e7f3      	b.n	415306 <_lv_area_align+0xd6>
  41531e:	1c54      	adds	r4, r2, #1
  415320:	e7f5      	b.n	41530e <_lv_area_align+0xde>
  415322:	8882      	ldrh	r2, [r0, #4]
  415324:	8804      	ldrh	r4, [r0, #0]
  415326:	1b12      	subs	r2, r2, r4
  415328:	b292      	uxth	r2, r2
  41532a:	3201      	adds	r2, #1
  41532c:	b292      	uxth	r2, r2
  41532e:	888c      	ldrh	r4, [r1, #4]
  415330:	8809      	ldrh	r1, [r1, #0]
  415332:	1a61      	subs	r1, r4, r1
  415334:	b289      	uxth	r1, r1
  415336:	3101      	adds	r1, #1
  415338:	b289      	uxth	r1, r1
  41533a:	1a52      	subs	r2, r2, r1
  41533c:	801a      	strh	r2, [r3, #0]
  41533e:	2200      	movs	r2, #0
  415340:	805a      	strh	r2, [r3, #2]
  415342:	e7bb      	b.n	4152bc <_lv_area_align+0x8c>
  415344:	2200      	movs	r2, #0
  415346:	801a      	strh	r2, [r3, #0]
  415348:	88c2      	ldrh	r2, [r0, #6]
  41534a:	8844      	ldrh	r4, [r0, #2]
  41534c:	1b12      	subs	r2, r2, r4
  41534e:	b292      	uxth	r2, r2
  415350:	3201      	adds	r2, #1
  415352:	b292      	uxth	r2, r2
  415354:	88cc      	ldrh	r4, [r1, #6]
  415356:	8849      	ldrh	r1, [r1, #2]
  415358:	1a61      	subs	r1, r4, r1
  41535a:	b289      	uxth	r1, r1
  41535c:	3101      	adds	r1, #1
  41535e:	b289      	uxth	r1, r1
  415360:	1a52      	subs	r2, r2, r1
  415362:	805a      	strh	r2, [r3, #2]
  415364:	e7aa      	b.n	4152bc <_lv_area_align+0x8c>
  415366:	8884      	ldrh	r4, [r0, #4]
  415368:	8802      	ldrh	r2, [r0, #0]
  41536a:	1aa4      	subs	r4, r4, r2
  41536c:	b2a4      	uxth	r4, r4
  41536e:	3401      	adds	r4, #1
  415370:	b224      	sxth	r4, r4
  415372:	888a      	ldrh	r2, [r1, #4]
  415374:	880d      	ldrh	r5, [r1, #0]
  415376:	1b52      	subs	r2, r2, r5
  415378:	b292      	uxth	r2, r2
  41537a:	3201      	adds	r2, #1
  41537c:	b212      	sxth	r2, r2
  41537e:	4625      	mov	r5, r4
  415380:	2c00      	cmp	r4, #0
  415382:	db15      	blt.n	4153b0 <_lv_area_align+0x180>
  415384:	106d      	asrs	r5, r5, #1
  415386:	4614      	mov	r4, r2
  415388:	2a00      	cmp	r2, #0
  41538a:	db13      	blt.n	4153b4 <_lv_area_align+0x184>
  41538c:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  415390:	801d      	strh	r5, [r3, #0]
  415392:	88c2      	ldrh	r2, [r0, #6]
  415394:	8844      	ldrh	r4, [r0, #2]
  415396:	1b12      	subs	r2, r2, r4
  415398:	b292      	uxth	r2, r2
  41539a:	3201      	adds	r2, #1
  41539c:	b292      	uxth	r2, r2
  41539e:	88cc      	ldrh	r4, [r1, #6]
  4153a0:	8849      	ldrh	r1, [r1, #2]
  4153a2:	1a61      	subs	r1, r4, r1
  4153a4:	b289      	uxth	r1, r1
  4153a6:	3101      	adds	r1, #1
  4153a8:	b289      	uxth	r1, r1
  4153aa:	1a52      	subs	r2, r2, r1
  4153ac:	805a      	strh	r2, [r3, #2]
  4153ae:	e785      	b.n	4152bc <_lv_area_align+0x8c>
  4153b0:	1c65      	adds	r5, r4, #1
  4153b2:	e7e7      	b.n	415384 <_lv_area_align+0x154>
  4153b4:	1c54      	adds	r4, r2, #1
  4153b6:	e7e9      	b.n	41538c <_lv_area_align+0x15c>
  4153b8:	8882      	ldrh	r2, [r0, #4]
  4153ba:	8804      	ldrh	r4, [r0, #0]
  4153bc:	1b12      	subs	r2, r2, r4
  4153be:	b292      	uxth	r2, r2
  4153c0:	3201      	adds	r2, #1
  4153c2:	b292      	uxth	r2, r2
  4153c4:	888c      	ldrh	r4, [r1, #4]
  4153c6:	880d      	ldrh	r5, [r1, #0]
  4153c8:	1b64      	subs	r4, r4, r5
  4153ca:	b2a4      	uxth	r4, r4
  4153cc:	3401      	adds	r4, #1
  4153ce:	b2a4      	uxth	r4, r4
  4153d0:	1b12      	subs	r2, r2, r4
  4153d2:	801a      	strh	r2, [r3, #0]
  4153d4:	88c2      	ldrh	r2, [r0, #6]
  4153d6:	8844      	ldrh	r4, [r0, #2]
  4153d8:	1b12      	subs	r2, r2, r4
  4153da:	b292      	uxth	r2, r2
  4153dc:	3201      	adds	r2, #1
  4153de:	b292      	uxth	r2, r2
  4153e0:	88cc      	ldrh	r4, [r1, #6]
  4153e2:	8849      	ldrh	r1, [r1, #2]
  4153e4:	1a61      	subs	r1, r4, r1
  4153e6:	b289      	uxth	r1, r1
  4153e8:	3101      	adds	r1, #1
  4153ea:	b289      	uxth	r1, r1
  4153ec:	1a52      	subs	r2, r2, r1
  4153ee:	805a      	strh	r2, [r3, #2]
  4153f0:	e764      	b.n	4152bc <_lv_area_align+0x8c>
  4153f2:	2200      	movs	r2, #0
  4153f4:	801a      	strh	r2, [r3, #0]
  4153f6:	88c4      	ldrh	r4, [r0, #6]
  4153f8:	8842      	ldrh	r2, [r0, #2]
  4153fa:	1aa4      	subs	r4, r4, r2
  4153fc:	b2a4      	uxth	r4, r4
  4153fe:	3401      	adds	r4, #1
  415400:	b224      	sxth	r4, r4
  415402:	88ca      	ldrh	r2, [r1, #6]
  415404:	8849      	ldrh	r1, [r1, #2]
  415406:	1a52      	subs	r2, r2, r1
  415408:	b292      	uxth	r2, r2
  41540a:	3201      	adds	r2, #1
  41540c:	b212      	sxth	r2, r2
  41540e:	4621      	mov	r1, r4
  415410:	2c00      	cmp	r4, #0
  415412:	db07      	blt.n	415424 <_lv_area_align+0x1f4>
  415414:	1049      	asrs	r1, r1, #1
  415416:	4614      	mov	r4, r2
  415418:	2a00      	cmp	r2, #0
  41541a:	db05      	blt.n	415428 <_lv_area_align+0x1f8>
  41541c:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415420:	8059      	strh	r1, [r3, #2]
  415422:	e74b      	b.n	4152bc <_lv_area_align+0x8c>
  415424:	1c61      	adds	r1, r4, #1
  415426:	e7f5      	b.n	415414 <_lv_area_align+0x1e4>
  415428:	1c54      	adds	r4, r2, #1
  41542a:	e7f7      	b.n	41541c <_lv_area_align+0x1ec>
  41542c:	8882      	ldrh	r2, [r0, #4]
  41542e:	8804      	ldrh	r4, [r0, #0]
  415430:	1b12      	subs	r2, r2, r4
  415432:	b292      	uxth	r2, r2
  415434:	3201      	adds	r2, #1
  415436:	b292      	uxth	r2, r2
  415438:	888c      	ldrh	r4, [r1, #4]
  41543a:	880d      	ldrh	r5, [r1, #0]
  41543c:	1b64      	subs	r4, r4, r5
  41543e:	b2a4      	uxth	r4, r4
  415440:	3401      	adds	r4, #1
  415442:	b2a4      	uxth	r4, r4
  415444:	1b12      	subs	r2, r2, r4
  415446:	801a      	strh	r2, [r3, #0]
  415448:	88c4      	ldrh	r4, [r0, #6]
  41544a:	8842      	ldrh	r2, [r0, #2]
  41544c:	1aa4      	subs	r4, r4, r2
  41544e:	b2a4      	uxth	r4, r4
  415450:	3401      	adds	r4, #1
  415452:	b224      	sxth	r4, r4
  415454:	88ca      	ldrh	r2, [r1, #6]
  415456:	8849      	ldrh	r1, [r1, #2]
  415458:	1a52      	subs	r2, r2, r1
  41545a:	b292      	uxth	r2, r2
  41545c:	3201      	adds	r2, #1
  41545e:	b212      	sxth	r2, r2
  415460:	4621      	mov	r1, r4
  415462:	2c00      	cmp	r4, #0
  415464:	db07      	blt.n	415476 <_lv_area_align+0x246>
  415466:	1049      	asrs	r1, r1, #1
  415468:	4614      	mov	r4, r2
  41546a:	2a00      	cmp	r2, #0
  41546c:	db05      	blt.n	41547a <_lv_area_align+0x24a>
  41546e:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415472:	8059      	strh	r1, [r3, #2]
  415474:	e722      	b.n	4152bc <_lv_area_align+0x8c>
  415476:	1c61      	adds	r1, r4, #1
  415478:	e7f5      	b.n	415466 <_lv_area_align+0x236>
  41547a:	1c54      	adds	r4, r2, #1
  41547c:	e7f7      	b.n	41546e <_lv_area_align+0x23e>
  41547e:	2200      	movs	r2, #0
  415480:	801a      	strh	r2, [r3, #0]
  415482:	88ca      	ldrh	r2, [r1, #6]
  415484:	8849      	ldrh	r1, [r1, #2]
  415486:	1a52      	subs	r2, r2, r1
  415488:	b292      	uxth	r2, r2
  41548a:	43d2      	mvns	r2, r2
  41548c:	805a      	strh	r2, [r3, #2]
  41548e:	e715      	b.n	4152bc <_lv_area_align+0x8c>
  415490:	8884      	ldrh	r4, [r0, #4]
  415492:	8802      	ldrh	r2, [r0, #0]
  415494:	1aa4      	subs	r4, r4, r2
  415496:	b2a4      	uxth	r4, r4
  415498:	3401      	adds	r4, #1
  41549a:	b224      	sxth	r4, r4
  41549c:	888a      	ldrh	r2, [r1, #4]
  41549e:	880d      	ldrh	r5, [r1, #0]
  4154a0:	1b52      	subs	r2, r2, r5
  4154a2:	b292      	uxth	r2, r2
  4154a4:	3201      	adds	r2, #1
  4154a6:	b212      	sxth	r2, r2
  4154a8:	4625      	mov	r5, r4
  4154aa:	2c00      	cmp	r4, #0
  4154ac:	db0d      	blt.n	4154ca <_lv_area_align+0x29a>
  4154ae:	106d      	asrs	r5, r5, #1
  4154b0:	4614      	mov	r4, r2
  4154b2:	2a00      	cmp	r2, #0
  4154b4:	db0b      	blt.n	4154ce <_lv_area_align+0x29e>
  4154b6:	eba5 0564 	sub.w	r5, r5, r4, asr #1
  4154ba:	801d      	strh	r5, [r3, #0]
  4154bc:	88ca      	ldrh	r2, [r1, #6]
  4154be:	8849      	ldrh	r1, [r1, #2]
  4154c0:	1a52      	subs	r2, r2, r1
  4154c2:	b292      	uxth	r2, r2
  4154c4:	43d2      	mvns	r2, r2
  4154c6:	805a      	strh	r2, [r3, #2]
  4154c8:	e6f8      	b.n	4152bc <_lv_area_align+0x8c>
  4154ca:	1c65      	adds	r5, r4, #1
  4154cc:	e7ef      	b.n	4154ae <_lv_area_align+0x27e>
  4154ce:	1c54      	adds	r4, r2, #1
  4154d0:	e7f1      	b.n	4154b6 <_lv_area_align+0x286>
  4154d2:	8882      	ldrh	r2, [r0, #4]
  4154d4:	8804      	ldrh	r4, [r0, #0]
  4154d6:	1b12      	subs	r2, r2, r4
  4154d8:	b292      	uxth	r2, r2
  4154da:	3201      	adds	r2, #1
  4154dc:	b292      	uxth	r2, r2
  4154de:	888c      	ldrh	r4, [r1, #4]
  4154e0:	880d      	ldrh	r5, [r1, #0]
  4154e2:	1b64      	subs	r4, r4, r5
  4154e4:	b2a4      	uxth	r4, r4
  4154e6:	3401      	adds	r4, #1
  4154e8:	b2a4      	uxth	r4, r4
  4154ea:	1b12      	subs	r2, r2, r4
  4154ec:	801a      	strh	r2, [r3, #0]
  4154ee:	88ca      	ldrh	r2, [r1, #6]
  4154f0:	8849      	ldrh	r1, [r1, #2]
  4154f2:	1a52      	subs	r2, r2, r1
  4154f4:	b292      	uxth	r2, r2
  4154f6:	43d2      	mvns	r2, r2
  4154f8:	805a      	strh	r2, [r3, #2]
  4154fa:	e6df      	b.n	4152bc <_lv_area_align+0x8c>
  4154fc:	2200      	movs	r2, #0
  4154fe:	801a      	strh	r2, [r3, #0]
  415500:	88c2      	ldrh	r2, [r0, #6]
  415502:	8841      	ldrh	r1, [r0, #2]
  415504:	1a52      	subs	r2, r2, r1
  415506:	b292      	uxth	r2, r2
  415508:	3201      	adds	r2, #1
  41550a:	805a      	strh	r2, [r3, #2]
  41550c:	e6d6      	b.n	4152bc <_lv_area_align+0x8c>
  41550e:	8884      	ldrh	r4, [r0, #4]
  415510:	8802      	ldrh	r2, [r0, #0]
  415512:	1aa4      	subs	r4, r4, r2
  415514:	b2a4      	uxth	r4, r4
  415516:	3401      	adds	r4, #1
  415518:	b224      	sxth	r4, r4
  41551a:	888a      	ldrh	r2, [r1, #4]
  41551c:	8809      	ldrh	r1, [r1, #0]
  41551e:	1a52      	subs	r2, r2, r1
  415520:	b292      	uxth	r2, r2
  415522:	3201      	adds	r2, #1
  415524:	b212      	sxth	r2, r2
  415526:	4621      	mov	r1, r4
  415528:	2c00      	cmp	r4, #0
  41552a:	db0d      	blt.n	415548 <_lv_area_align+0x318>
  41552c:	1049      	asrs	r1, r1, #1
  41552e:	4614      	mov	r4, r2
  415530:	2a00      	cmp	r2, #0
  415532:	db0b      	blt.n	41554c <_lv_area_align+0x31c>
  415534:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415538:	8019      	strh	r1, [r3, #0]
  41553a:	88c2      	ldrh	r2, [r0, #6]
  41553c:	8841      	ldrh	r1, [r0, #2]
  41553e:	1a52      	subs	r2, r2, r1
  415540:	b292      	uxth	r2, r2
  415542:	3201      	adds	r2, #1
  415544:	805a      	strh	r2, [r3, #2]
  415546:	e6b9      	b.n	4152bc <_lv_area_align+0x8c>
  415548:	1c61      	adds	r1, r4, #1
  41554a:	e7ef      	b.n	41552c <_lv_area_align+0x2fc>
  41554c:	1c54      	adds	r4, r2, #1
  41554e:	e7f1      	b.n	415534 <_lv_area_align+0x304>
  415550:	8882      	ldrh	r2, [r0, #4]
  415552:	8804      	ldrh	r4, [r0, #0]
  415554:	1b12      	subs	r2, r2, r4
  415556:	b292      	uxth	r2, r2
  415558:	3201      	adds	r2, #1
  41555a:	b292      	uxth	r2, r2
  41555c:	888c      	ldrh	r4, [r1, #4]
  41555e:	8809      	ldrh	r1, [r1, #0]
  415560:	1a61      	subs	r1, r4, r1
  415562:	b289      	uxth	r1, r1
  415564:	3101      	adds	r1, #1
  415566:	b289      	uxth	r1, r1
  415568:	1a52      	subs	r2, r2, r1
  41556a:	801a      	strh	r2, [r3, #0]
  41556c:	88c2      	ldrh	r2, [r0, #6]
  41556e:	8841      	ldrh	r1, [r0, #2]
  415570:	1a52      	subs	r2, r2, r1
  415572:	b292      	uxth	r2, r2
  415574:	3201      	adds	r2, #1
  415576:	805a      	strh	r2, [r3, #2]
  415578:	e6a0      	b.n	4152bc <_lv_area_align+0x8c>
  41557a:	888a      	ldrh	r2, [r1, #4]
  41557c:	8809      	ldrh	r1, [r1, #0]
  41557e:	1a52      	subs	r2, r2, r1
  415580:	b292      	uxth	r2, r2
  415582:	43d2      	mvns	r2, r2
  415584:	801a      	strh	r2, [r3, #0]
  415586:	2200      	movs	r2, #0
  415588:	805a      	strh	r2, [r3, #2]
  41558a:	e697      	b.n	4152bc <_lv_area_align+0x8c>
  41558c:	888a      	ldrh	r2, [r1, #4]
  41558e:	880c      	ldrh	r4, [r1, #0]
  415590:	1b12      	subs	r2, r2, r4
  415592:	b292      	uxth	r2, r2
  415594:	43d2      	mvns	r2, r2
  415596:	801a      	strh	r2, [r3, #0]
  415598:	88c4      	ldrh	r4, [r0, #6]
  41559a:	8842      	ldrh	r2, [r0, #2]
  41559c:	1aa4      	subs	r4, r4, r2
  41559e:	b2a4      	uxth	r4, r4
  4155a0:	3401      	adds	r4, #1
  4155a2:	b224      	sxth	r4, r4
  4155a4:	88ca      	ldrh	r2, [r1, #6]
  4155a6:	8849      	ldrh	r1, [r1, #2]
  4155a8:	1a52      	subs	r2, r2, r1
  4155aa:	b292      	uxth	r2, r2
  4155ac:	3201      	adds	r2, #1
  4155ae:	b212      	sxth	r2, r2
  4155b0:	4621      	mov	r1, r4
  4155b2:	2c00      	cmp	r4, #0
  4155b4:	db07      	blt.n	4155c6 <_lv_area_align+0x396>
  4155b6:	1049      	asrs	r1, r1, #1
  4155b8:	4614      	mov	r4, r2
  4155ba:	2a00      	cmp	r2, #0
  4155bc:	db05      	blt.n	4155ca <_lv_area_align+0x39a>
  4155be:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  4155c2:	8059      	strh	r1, [r3, #2]
  4155c4:	e67a      	b.n	4152bc <_lv_area_align+0x8c>
  4155c6:	1c61      	adds	r1, r4, #1
  4155c8:	e7f5      	b.n	4155b6 <_lv_area_align+0x386>
  4155ca:	1c54      	adds	r4, r2, #1
  4155cc:	e7f7      	b.n	4155be <_lv_area_align+0x38e>
  4155ce:	888a      	ldrh	r2, [r1, #4]
  4155d0:	880c      	ldrh	r4, [r1, #0]
  4155d2:	1b12      	subs	r2, r2, r4
  4155d4:	b292      	uxth	r2, r2
  4155d6:	43d2      	mvns	r2, r2
  4155d8:	801a      	strh	r2, [r3, #0]
  4155da:	88c2      	ldrh	r2, [r0, #6]
  4155dc:	8844      	ldrh	r4, [r0, #2]
  4155de:	1b12      	subs	r2, r2, r4
  4155e0:	b292      	uxth	r2, r2
  4155e2:	3201      	adds	r2, #1
  4155e4:	b292      	uxth	r2, r2
  4155e6:	88cc      	ldrh	r4, [r1, #6]
  4155e8:	8849      	ldrh	r1, [r1, #2]
  4155ea:	1a61      	subs	r1, r4, r1
  4155ec:	b289      	uxth	r1, r1
  4155ee:	3101      	adds	r1, #1
  4155f0:	b289      	uxth	r1, r1
  4155f2:	1a52      	subs	r2, r2, r1
  4155f4:	805a      	strh	r2, [r3, #2]
  4155f6:	e661      	b.n	4152bc <_lv_area_align+0x8c>
  4155f8:	8882      	ldrh	r2, [r0, #4]
  4155fa:	8801      	ldrh	r1, [r0, #0]
  4155fc:	1a52      	subs	r2, r2, r1
  4155fe:	b292      	uxth	r2, r2
  415600:	3201      	adds	r2, #1
  415602:	801a      	strh	r2, [r3, #0]
  415604:	2200      	movs	r2, #0
  415606:	805a      	strh	r2, [r3, #2]
  415608:	e658      	b.n	4152bc <_lv_area_align+0x8c>
  41560a:	8882      	ldrh	r2, [r0, #4]
  41560c:	8804      	ldrh	r4, [r0, #0]
  41560e:	1b12      	subs	r2, r2, r4
  415610:	b292      	uxth	r2, r2
  415612:	3201      	adds	r2, #1
  415614:	801a      	strh	r2, [r3, #0]
  415616:	88c4      	ldrh	r4, [r0, #6]
  415618:	8842      	ldrh	r2, [r0, #2]
  41561a:	1aa4      	subs	r4, r4, r2
  41561c:	b2a4      	uxth	r4, r4
  41561e:	3401      	adds	r4, #1
  415620:	b224      	sxth	r4, r4
  415622:	88ca      	ldrh	r2, [r1, #6]
  415624:	8849      	ldrh	r1, [r1, #2]
  415626:	1a52      	subs	r2, r2, r1
  415628:	b292      	uxth	r2, r2
  41562a:	3201      	adds	r2, #1
  41562c:	b212      	sxth	r2, r2
  41562e:	4621      	mov	r1, r4
  415630:	2c00      	cmp	r4, #0
  415632:	db07      	blt.n	415644 <_lv_area_align+0x414>
  415634:	1049      	asrs	r1, r1, #1
  415636:	4614      	mov	r4, r2
  415638:	2a00      	cmp	r2, #0
  41563a:	db05      	blt.n	415648 <_lv_area_align+0x418>
  41563c:	eba1 0164 	sub.w	r1, r1, r4, asr #1
  415640:	8059      	strh	r1, [r3, #2]
  415642:	e63b      	b.n	4152bc <_lv_area_align+0x8c>
  415644:	1c61      	adds	r1, r4, #1
  415646:	e7f5      	b.n	415634 <_lv_area_align+0x404>
  415648:	1c54      	adds	r4, r2, #1
  41564a:	e7f7      	b.n	41563c <_lv_area_align+0x40c>
  41564c:	8882      	ldrh	r2, [r0, #4]
  41564e:	8804      	ldrh	r4, [r0, #0]
  415650:	1b12      	subs	r2, r2, r4
  415652:	b292      	uxth	r2, r2
  415654:	3201      	adds	r2, #1
  415656:	801a      	strh	r2, [r3, #0]
  415658:	88c2      	ldrh	r2, [r0, #6]
  41565a:	8844      	ldrh	r4, [r0, #2]
  41565c:	1b12      	subs	r2, r2, r4
  41565e:	b292      	uxth	r2, r2
  415660:	3201      	adds	r2, #1
  415662:	b292      	uxth	r2, r2
  415664:	88cc      	ldrh	r4, [r1, #6]
  415666:	8849      	ldrh	r1, [r1, #2]
  415668:	1a61      	subs	r1, r4, r1
  41566a:	b289      	uxth	r1, r1
  41566c:	3101      	adds	r1, #1
  41566e:	b289      	uxth	r1, r1
  415670:	1a52      	subs	r2, r2, r1
  415672:	805a      	strh	r2, [r3, #2]
  415674:	e622      	b.n	4152bc <_lv_area_align+0x8c>

00415676 <lv_color_fill>:
  415676:	f010 0f03 	tst.w	r0, #3
  41567a:	d002      	beq.n	415682 <lv_color_fill+0xc>
  41567c:	f820 1b02 	strh.w	r1, [r0], #2
  415680:	3a01      	subs	r2, #1
  415682:	b28b      	uxth	r3, r1
  415684:	eb03 4303 	add.w	r3, r3, r3, lsl #16
  415688:	e009      	b.n	41569e <lv_color_fill+0x28>
  41568a:	6003      	str	r3, [r0, #0]
  41568c:	6043      	str	r3, [r0, #4]
  41568e:	6083      	str	r3, [r0, #8]
  415690:	60c3      	str	r3, [r0, #12]
  415692:	6103      	str	r3, [r0, #16]
  415694:	6143      	str	r3, [r0, #20]
  415696:	6183      	str	r3, [r0, #24]
  415698:	61c3      	str	r3, [r0, #28]
  41569a:	3020      	adds	r0, #32
  41569c:	3a10      	subs	r2, #16
  41569e:	2a10      	cmp	r2, #16
  4156a0:	d8f3      	bhi.n	41568a <lv_color_fill+0x14>
  4156a2:	e002      	b.n	4156aa <lv_color_fill+0x34>
  4156a4:	f820 1b02 	strh.w	r1, [r0], #2
  4156a8:	3a01      	subs	r2, #1
  4156aa:	2a00      	cmp	r2, #0
  4156ac:	d1fa      	bne.n	4156a4 <lv_color_fill+0x2e>
  4156ae:	4770      	bx	lr

004156b0 <lv_color_lighten>:
  4156b0:	b4f0      	push	{r4, r5, r6, r7}
  4156b2:	4602      	mov	r2, r0
  4156b4:	4b23      	ldr	r3, [pc, #140]	; (415744 <lv_color_lighten+0x94>)
  4156b6:	881c      	ldrh	r4, [r3, #0]
  4156b8:	f3c4 03c4 	ubfx	r3, r4, #3, #5
  4156bc:	f3c2 00c4 	ubfx	r0, r2, #3, #5
  4156c0:	f1c1 05ff 	rsb	r5, r1, #255	; 0xff
  4156c4:	fb05 f000 	mul.w	r0, r5, r0
  4156c8:	fb01 0303 	mla	r3, r1, r3, r0
  4156cc:	3380      	adds	r3, #128	; 0x80
  4156ce:	eb03 2003 	add.w	r0, r3, r3, lsl #8
  4156d2:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
  4156d6:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4156da:	f04f 0000 	mov.w	r0, #0
  4156de:	f363 00c7 	bfi	r0, r3, #3, #5
  4156e2:	f004 0607 	and.w	r6, r4, #7
  4156e6:	f3c4 3342 	ubfx	r3, r4, #13, #3
  4156ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
  4156ee:	f002 0707 	and.w	r7, r2, #7
  4156f2:	f3c2 3642 	ubfx	r6, r2, #13, #3
  4156f6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
  4156fa:	fb06 f605 	mul.w	r6, r6, r5
  4156fe:	fb03 6301 	mla	r3, r3, r1, r6
  415702:	3380      	adds	r3, #128	; 0x80
  415704:	eb03 2603 	add.w	r6, r3, r3, lsl #8
  415708:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
  41570c:	f3c3 6682 	ubfx	r6, r3, #26, #3
  415710:	f366 0002 	bfi	r0, r6, #0, #3
  415714:	f3c3 53c2 	ubfx	r3, r3, #23, #3
  415718:	f363 304f 	bfi	r0, r3, #13, #3
  41571c:	f3c4 2404 	ubfx	r4, r4, #8, #5
  415720:	f3c2 2204 	ubfx	r2, r2, #8, #5
  415724:	fb02 f505 	mul.w	r5, r2, r5
  415728:	fb04 5101 	mla	r1, r4, r1, r5
  41572c:	3180      	adds	r1, #128	; 0x80
  41572e:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  415732:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
  415736:	f3c1 51c4 	ubfx	r1, r1, #23, #5
  41573a:	f361 200c 	bfi	r0, r1, #8, #5
  41573e:	bcf0      	pop	{r4, r5, r6, r7}
  415740:	4770      	bx	lr
  415742:	bf00      	nop
  415744:	0042966c 	.word	0x0042966c

00415748 <lv_color_darken>:
  415748:	b410      	push	{r4}
  41574a:	4603      	mov	r3, r0
  41574c:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  415750:	f1c1 01ff 	rsb	r1, r1, #255	; 0xff
  415754:	fb01 f202 	mul.w	r2, r1, r2
  415758:	3280      	adds	r2, #128	; 0x80
  41575a:	eb02 2002 	add.w	r0, r2, r2, lsl #8
  41575e:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
  415762:	f3c2 52c4 	ubfx	r2, r2, #23, #5
  415766:	f04f 0000 	mov.w	r0, #0
  41576a:	f362 00c7 	bfi	r0, r2, #3, #5
  41576e:	f003 0407 	and.w	r4, r3, #7
  415772:	f3c3 3242 	ubfx	r2, r3, #13, #3
  415776:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
  41577a:	fb02 f201 	mul.w	r2, r2, r1
  41577e:	3280      	adds	r2, #128	; 0x80
  415780:	eb02 2402 	add.w	r4, r2, r2, lsl #8
  415784:	eb02 12c4 	add.w	r2, r2, r4, lsl #7
  415788:	f3c2 6482 	ubfx	r4, r2, #26, #3
  41578c:	f364 0002 	bfi	r0, r4, #0, #3
  415790:	f3c2 52c2 	ubfx	r2, r2, #23, #3
  415794:	f362 304f 	bfi	r0, r2, #13, #3
  415798:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41579c:	fb03 f301 	mul.w	r3, r3, r1
  4157a0:	3380      	adds	r3, #128	; 0x80
  4157a2:	eb03 2203 	add.w	r2, r3, r3, lsl #8
  4157a6:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
  4157aa:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  4157ae:	f363 200c 	bfi	r0, r3, #8, #5
  4157b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  4157b6:	4770      	bx	lr

004157b8 <lv_debug_check_null>:
  4157b8:	b108      	cbz	r0, 4157be <lv_debug_check_null+0x6>
  4157ba:	2001      	movs	r0, #1
  4157bc:	4770      	bx	lr
  4157be:	2000      	movs	r0, #0
  4157c0:	4770      	bx	lr
	...

004157c4 <lv_debug_log_error>:
  4157c4:	b570      	push	{r4, r5, r6, lr}
  4157c6:	b0c0      	sub	sp, #256	; 0x100
  4157c8:	4606      	mov	r6, r0
  4157ca:	4614      	mov	r4, r2
  4157cc:	4b15      	ldr	r3, [pc, #84]	; (415824 <lv_debug_log_error+0x60>)
  4157ce:	4798      	blx	r3
  4157d0:	28e5      	cmp	r0, #229	; 0xe5
  4157d2:	d901      	bls.n	4157d8 <lv_debug_log_error+0x14>
  4157d4:	b040      	add	sp, #256	; 0x100
  4157d6:	bd70      	pop	{r4, r5, r6, pc}
  4157d8:	4605      	mov	r5, r0
  4157da:	4602      	mov	r2, r0
  4157dc:	4631      	mov	r1, r6
  4157de:	4668      	mov	r0, sp
  4157e0:	4b11      	ldr	r3, [pc, #68]	; (415828 <lv_debug_log_error+0x64>)
  4157e2:	4798      	blx	r3
  4157e4:	eb0d 0105 	add.w	r1, sp, r5
  4157e8:	2320      	movs	r3, #32
  4157ea:	f80d 3005 	strb.w	r3, [sp, r5]
  4157ee:	2328      	movs	r3, #40	; 0x28
  4157f0:	704b      	strb	r3, [r1, #1]
  4157f2:	2330      	movs	r3, #48	; 0x30
  4157f4:	708b      	strb	r3, [r1, #2]
  4157f6:	2378      	movs	r3, #120	; 0x78
  4157f8:	70cb      	strb	r3, [r1, #3]
  4157fa:	3104      	adds	r1, #4
  4157fc:	2307      	movs	r3, #7
  4157fe:	e00a      	b.n	415816 <lv_debug_log_error+0x52>
  415800:	009a      	lsls	r2, r3, #2
  415802:	fa24 f202 	lsr.w	r2, r4, r2
  415806:	f002 020f 	and.w	r2, r2, #15
  41580a:	4808      	ldr	r0, [pc, #32]	; (41582c <lv_debug_log_error+0x68>)
  41580c:	5c82      	ldrb	r2, [r0, r2]
  41580e:	f801 2b01 	strb.w	r2, [r1], #1
  415812:	3b01      	subs	r3, #1
  415814:	b25b      	sxtb	r3, r3
  415816:	2b00      	cmp	r3, #0
  415818:	daf2      	bge.n	415800 <lv_debug_log_error+0x3c>
  41581a:	2329      	movs	r3, #41	; 0x29
  41581c:	700b      	strb	r3, [r1, #0]
  41581e:	2300      	movs	r3, #0
  415820:	704b      	strb	r3, [r1, #1]
  415822:	e7d7      	b.n	4157d4 <lv_debug_log_error+0x10>
  415824:	00422bc1 	.word	0x00422bc1
  415828:	004160d1 	.word	0x004160d1
  41582c:	00429670 	.word	0x00429670

00415830 <lv_fs_get_real_path>:
static const char * lv_fs_get_real_path(const char * path)
{
    /* Example path: "S:/folder/file.txt"
     * Leave the letter and the : / \ characters*/

    path++; /*Ignore the driver letter*/
  415830:	3001      	adds	r0, #1

    while(*path != '\0') {
  415832:	e000      	b.n	415836 <lv_fs_get_real_path+0x6>
        if(*path == ':' || *path == '\\' || *path == '/') {
            path++;
  415834:	3001      	adds	r0, #1
    while(*path != '\0') {
  415836:	7803      	ldrb	r3, [r0, #0]
  415838:	b12b      	cbz	r3, 415846 <lv_fs_get_real_path+0x16>
        if(*path == ':' || *path == '\\' || *path == '/') {
  41583a:	2b5c      	cmp	r3, #92	; 0x5c
  41583c:	bf18      	it	ne
  41583e:	2b3a      	cmpne	r3, #58	; 0x3a
  415840:	d0f8      	beq.n	415834 <lv_fs_get_real_path+0x4>
  415842:	2b2f      	cmp	r3, #47	; 0x2f
  415844:	d0f6      	beq.n	415834 <lv_fs_get_real_path+0x4>
            break;
        }
    }

    return path;
}
  415846:	4770      	bx	lr

00415848 <_lv_fs_init>:
{
  415848:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_drv_ll), sizeof(lv_fs_drv_t));
  41584a:	2144      	movs	r1, #68	; 0x44
  41584c:	4801      	ldr	r0, [pc, #4]	; (415854 <_lv_fs_init+0xc>)
  41584e:	4b02      	ldr	r3, [pc, #8]	; (415858 <_lv_fs_init+0x10>)
  415850:	4798      	blx	r3
  415852:	bd08      	pop	{r3, pc}
  415854:	2043a250 	.word	0x2043a250
  415858:	00415a1f 	.word	0x00415a1f

0041585c <lv_fs_close>:
{
  41585c:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  41585e:	6843      	ldr	r3, [r0, #4]
  415860:	b173      	cbz	r3, 415880 <lv_fs_close+0x24>
    if(file_p->drv->close_cb == NULL) {
  415862:	691a      	ldr	r2, [r3, #16]
  415864:	b172      	cbz	r2, 415884 <lv_fs_close+0x28>
  415866:	4604      	mov	r4, r0
    lv_fs_res_t res = file_p->drv->close_cb(file_p->drv, file_p->file_d);
  415868:	6801      	ldr	r1, [r0, #0]
  41586a:	4618      	mov	r0, r3
  41586c:	4790      	blx	r2
  41586e:	4605      	mov	r5, r0
    lv_mem_free(file_p->file_d); /*Clean up*/
  415870:	6820      	ldr	r0, [r4, #0]
  415872:	4b05      	ldr	r3, [pc, #20]	; (415888 <lv_fs_close+0x2c>)
  415874:	4798      	blx	r3
    file_p->file_d = NULL;
  415876:	2300      	movs	r3, #0
  415878:	6023      	str	r3, [r4, #0]
    file_p->drv    = NULL;
  41587a:	6063      	str	r3, [r4, #4]
}
  41587c:	4628      	mov	r0, r5
  41587e:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  415880:	250b      	movs	r5, #11
  415882:	e7fb      	b.n	41587c <lv_fs_close+0x20>
        return LV_FS_RES_NOT_IMP;
  415884:	2509      	movs	r5, #9
  415886:	e7f9      	b.n	41587c <lv_fs_close+0x20>
  415888:	00415f85 	.word	0x00415f85

0041588c <lv_fs_read>:
{
  41588c:	b5f0      	push	{r4, r5, r6, r7, lr}
  41588e:	b085      	sub	sp, #20
    if(br != NULL) *br = 0;
  415890:	461e      	mov	r6, r3
  415892:	b10b      	cbz	r3, 415898 <lv_fs_read+0xc>
  415894:	2300      	movs	r3, #0
  415896:	6033      	str	r3, [r6, #0]
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  415898:	6845      	ldr	r5, [r0, #4]
  41589a:	b18d      	cbz	r5, 4158c0 <lv_fs_read+0x34>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  41589c:	69af      	ldr	r7, [r5, #24]
  41589e:	b18f      	cbz	r7, 4158c4 <lv_fs_read+0x38>
  4158a0:	4613      	mov	r3, r2
  4158a2:	460a      	mov	r2, r1
  4158a4:	4604      	mov	r4, r0
    uint32_t br_tmp = 0;
  4158a6:	a804      	add	r0, sp, #16
  4158a8:	2100      	movs	r1, #0
  4158aa:	f840 1d04 	str.w	r1, [r0, #-4]!
    lv_fs_res_t res = file_p->drv->read_cb(file_p->drv, file_p->file_d, buf, btr, &br_tmp);
  4158ae:	6821      	ldr	r1, [r4, #0]
  4158b0:	9000      	str	r0, [sp, #0]
  4158b2:	4628      	mov	r0, r5
  4158b4:	47b8      	blx	r7
    if(br != NULL) *br = br_tmp;
  4158b6:	b10e      	cbz	r6, 4158bc <lv_fs_read+0x30>
  4158b8:	9b03      	ldr	r3, [sp, #12]
  4158ba:	6033      	str	r3, [r6, #0]
}
  4158bc:	b005      	add	sp, #20
  4158be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(file_p->drv == NULL) return LV_FS_RES_INV_PARAM;
  4158c0:	200b      	movs	r0, #11
  4158c2:	e7fb      	b.n	4158bc <lv_fs_read+0x30>
    if(file_p->drv->read_cb == NULL) return LV_FS_RES_NOT_IMP;
  4158c4:	2009      	movs	r0, #9
  4158c6:	e7f9      	b.n	4158bc <lv_fs_read+0x30>

004158c8 <lv_fs_seek>:
{
  4158c8:	b538      	push	{r3, r4, r5, lr}
    if(file_p->drv == NULL) {
  4158ca:	6844      	ldr	r4, [r0, #4]
  4158cc:	b134      	cbz	r4, 4158dc <lv_fs_seek+0x14>
    if(file_p->drv->seek_cb == NULL) {
  4158ce:	6a25      	ldr	r5, [r4, #32]
  4158d0:	b135      	cbz	r5, 4158e0 <lv_fs_seek+0x18>
  4158d2:	460a      	mov	r2, r1
    lv_fs_res_t res = file_p->drv->seek_cb(file_p->drv, file_p->file_d, pos);
  4158d4:	6801      	ldr	r1, [r0, #0]
  4158d6:	4620      	mov	r0, r4
  4158d8:	47a8      	blx	r5
    return res;
  4158da:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_INV_PARAM;
  4158dc:	200b      	movs	r0, #11
  4158de:	bd38      	pop	{r3, r4, r5, pc}
        return LV_FS_RES_NOT_IMP;
  4158e0:	2009      	movs	r0, #9
}
  4158e2:	bd38      	pop	{r3, r4, r5, pc}

004158e4 <lv_fs_get_drv>:
{
  4158e4:	b510      	push	{r4, lr}
  4158e6:	4604      	mov	r4, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4158e8:	4806      	ldr	r0, [pc, #24]	; (415904 <lv_fs_get_drv+0x20>)
  4158ea:	4b07      	ldr	r3, [pc, #28]	; (415908 <lv_fs_get_drv+0x24>)
  4158ec:	4798      	blx	r3
  4158ee:	b138      	cbz	r0, 415900 <lv_fs_get_drv+0x1c>
        if(drv->letter == letter) {
  4158f0:	7803      	ldrb	r3, [r0, #0]
  4158f2:	42a3      	cmp	r3, r4
  4158f4:	d004      	beq.n	415900 <lv_fs_get_drv+0x1c>
    _LV_LL_READ(LV_GC_ROOT(_lv_drv_ll), drv) {
  4158f6:	4601      	mov	r1, r0
  4158f8:	4802      	ldr	r0, [pc, #8]	; (415904 <lv_fs_get_drv+0x20>)
  4158fa:	4b04      	ldr	r3, [pc, #16]	; (41590c <lv_fs_get_drv+0x28>)
  4158fc:	4798      	blx	r3
  4158fe:	e7f6      	b.n	4158ee <lv_fs_get_drv+0xa>
}
  415900:	bd10      	pop	{r4, pc}
  415902:	bf00      	nop
  415904:	2043a250 	.word	0x2043a250
  415908:	00415ac9 	.word	0x00415ac9
  41590c:	00415add 	.word	0x00415add

00415910 <lv_fs_open>:
{
  415910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    file_p->drv    = NULL;
  415914:	2400      	movs	r4, #0
  415916:	6044      	str	r4, [r0, #4]
    file_p->file_d = NULL;
  415918:	6004      	str	r4, [r0, #0]
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  41591a:	2900      	cmp	r1, #0
  41591c:	d044      	beq.n	4159a8 <lv_fs_open+0x98>
  41591e:	460d      	mov	r5, r1
  415920:	4690      	mov	r8, r2
  415922:	4604      	mov	r4, r0
    file_p->drv = lv_fs_get_drv(letter);
  415924:	7808      	ldrb	r0, [r1, #0]
  415926:	4b23      	ldr	r3, [pc, #140]	; (4159b4 <lv_fs_open+0xa4>)
  415928:	4798      	blx	r3
  41592a:	6060      	str	r0, [r4, #4]
    if(file_p->drv == NULL) {
  41592c:	2800      	cmp	r0, #0
  41592e:	d03f      	beq.n	4159b0 <lv_fs_open+0xa0>
    if(file_p->drv->ready_cb != NULL) {
  415930:	6883      	ldr	r3, [r0, #8]
  415932:	b10b      	cbz	r3, 415938 <lv_fs_open+0x28>
        if(file_p->drv->ready_cb(file_p->drv) == false) {
  415934:	4798      	blx	r3
  415936:	b1a0      	cbz	r0, 415962 <lv_fs_open+0x52>
    if(file_p->drv->open_cb == NULL) {
  415938:	6867      	ldr	r7, [r4, #4]
  41593a:	68fe      	ldr	r6, [r7, #12]
  41593c:	b1ae      	cbz	r6, 41596a <lv_fs_open+0x5a>
    const char * real_path = lv_fs_get_real_path(path);
  41593e:	4628      	mov	r0, r5
  415940:	4b1d      	ldr	r3, [pc, #116]	; (4159b8 <lv_fs_open+0xa8>)
  415942:	4798      	blx	r3
  415944:	4605      	mov	r5, r0
    if(file_p->drv->file_size == 0) {  /*Is file_d zero size?*/
  415946:	8878      	ldrh	r0, [r7, #2]
  415948:	b198      	cbz	r0, 415972 <lv_fs_open+0x62>
    file_p->file_d = lv_mem_alloc(file_p->drv->file_size);
  41594a:	4b1c      	ldr	r3, [pc, #112]	; (4159bc <lv_fs_open+0xac>)
  41594c:	4798      	blx	r3
  41594e:	6020      	str	r0, [r4, #0]
    LV_ASSERT_MEM(file_p->file_d);
  415950:	4b1b      	ldr	r3, [pc, #108]	; (4159c0 <lv_fs_open+0xb0>)
  415952:	4798      	blx	r3
  415954:	b1a0      	cbz	r0, 415980 <lv_fs_open+0x70>
    if(file_p->file_d == NULL) {
  415956:	6821      	ldr	r1, [r4, #0]
  415958:	b9c1      	cbnz	r1, 41598c <lv_fs_open+0x7c>
        file_p->drv = NULL;
  41595a:	2300      	movs	r3, #0
  41595c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_OUT_OF_MEM; /* Out of memory */
  41595e:	250a      	movs	r5, #10
  415960:	e023      	b.n	4159aa <lv_fs_open+0x9a>
            file_p->drv = NULL;
  415962:	2300      	movs	r3, #0
  415964:	6063      	str	r3, [r4, #4]
            return LV_FS_RES_HW_ERR;
  415966:	2501      	movs	r5, #1
  415968:	e01f      	b.n	4159aa <lv_fs_open+0x9a>
        file_p->drv = NULL;
  41596a:	2300      	movs	r3, #0
  41596c:	6063      	str	r3, [r4, #4]
        return LV_FS_RES_NOT_IMP;
  41596e:	2509      	movs	r5, #9
  415970:	e01b      	b.n	4159aa <lv_fs_open+0x9a>
        return file_p->drv->open_cb(file_p->drv, &file_p->file_d, real_path, mode);
  415972:	4643      	mov	r3, r8
  415974:	462a      	mov	r2, r5
  415976:	4621      	mov	r1, r4
  415978:	4638      	mov	r0, r7
  41597a:	47b0      	blx	r6
  41597c:	4605      	mov	r5, r0
  41597e:	e014      	b.n	4159aa <lv_fs_open+0x9a>
    LV_ASSERT_MEM(file_p->file_d);
  415980:	6822      	ldr	r2, [r4, #0]
  415982:	2300      	movs	r3, #0
  415984:	480f      	ldr	r0, [pc, #60]	; (4159c4 <lv_fs_open+0xb4>)
  415986:	4910      	ldr	r1, [pc, #64]	; (4159c8 <lv_fs_open+0xb8>)
  415988:	4788      	blx	r1
  41598a:	e7fe      	b.n	41598a <lv_fs_open+0x7a>
    lv_fs_res_t res = file_p->drv->open_cb(file_p->drv, file_p->file_d, real_path, mode);
  41598c:	6860      	ldr	r0, [r4, #4]
  41598e:	68c7      	ldr	r7, [r0, #12]
  415990:	4643      	mov	r3, r8
  415992:	462a      	mov	r2, r5
  415994:	47b8      	blx	r7
    if(res != LV_FS_RES_OK) {
  415996:	4605      	mov	r5, r0
  415998:	b138      	cbz	r0, 4159aa <lv_fs_open+0x9a>
        lv_mem_free(file_p->file_d);
  41599a:	6820      	ldr	r0, [r4, #0]
  41599c:	4b0b      	ldr	r3, [pc, #44]	; (4159cc <lv_fs_open+0xbc>)
  41599e:	4798      	blx	r3
        file_p->file_d = NULL;
  4159a0:	2300      	movs	r3, #0
  4159a2:	6023      	str	r3, [r4, #0]
        file_p->drv    = NULL;
  4159a4:	6063      	str	r3, [r4, #4]
  4159a6:	e000      	b.n	4159aa <lv_fs_open+0x9a>
    if(path == NULL) return LV_FS_RES_INV_PARAM;
  4159a8:	250b      	movs	r5, #11
}
  4159aa:	4628      	mov	r0, r5
  4159ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LV_FS_RES_NOT_EX;
  4159b0:	2503      	movs	r5, #3
  4159b2:	e7fa      	b.n	4159aa <lv_fs_open+0x9a>
  4159b4:	004158e5 	.word	0x004158e5
  4159b8:	00415831 	.word	0x00415831
  4159bc:	00415ec1 	.word	0x00415ec1
  4159c0:	004157b9 	.word	0x004157b9
  4159c4:	004260b0 	.word	0x004260b0
  4159c8:	004157c5 	.word	0x004157c5
  4159cc:	00415f85 	.word	0x00415f85

004159d0 <lv_fs_get_ext>:
{
  4159d0:	b510      	push	{r4, lr}
  4159d2:	4604      	mov	r4, r0
    for(i = strlen(fn); i > 0; i--) {
  4159d4:	4b09      	ldr	r3, [pc, #36]	; (4159fc <lv_fs_get_ext+0x2c>)
  4159d6:	4798      	blx	r3
  4159d8:	b158      	cbz	r0, 4159f2 <lv_fs_get_ext+0x22>
        if(fn[i] == '.') {
  4159da:	5c23      	ldrb	r3, [r4, r0]
  4159dc:	2b2e      	cmp	r3, #46	; 0x2e
  4159de:	d005      	beq.n	4159ec <lv_fs_get_ext+0x1c>
        else if(fn[i] == '/' || fn[i] == '\\') {
  4159e0:	2b5c      	cmp	r3, #92	; 0x5c
  4159e2:	bf18      	it	ne
  4159e4:	2b2f      	cmpne	r3, #47	; 0x2f
  4159e6:	d006      	beq.n	4159f6 <lv_fs_get_ext+0x26>
    for(i = strlen(fn); i > 0; i--) {
  4159e8:	3801      	subs	r0, #1
  4159ea:	e7f5      	b.n	4159d8 <lv_fs_get_ext+0x8>
            return &fn[i + 1];
  4159ec:	3001      	adds	r0, #1
  4159ee:	4420      	add	r0, r4
  4159f0:	bd10      	pop	{r4, pc}
    return ""; /*Empty string if no '.' in the file name. */
  4159f2:	4803      	ldr	r0, [pc, #12]	; (415a00 <lv_fs_get_ext+0x30>)
  4159f4:	bd10      	pop	{r4, pc}
            return ""; /*No extension if a '\' or '/' found*/
  4159f6:	4802      	ldr	r0, [pc, #8]	; (415a00 <lv_fs_get_ext+0x30>)
}
  4159f8:	bd10      	pop	{r4, pc}
  4159fa:	bf00      	nop
  4159fc:	00422bc1 	.word	0x00422bc1
  415a00:	0042af74 	.word	0x0042af74

00415a04 <node_set_prev>:
  415a04:	460b      	mov	r3, r1
  415a06:	b109      	cbz	r1, 415a0c <node_set_prev+0x8>
  415a08:	6801      	ldr	r1, [r0, #0]
  415a0a:	505a      	str	r2, [r3, r1]
  415a0c:	4770      	bx	lr

00415a0e <node_set_next>:
  415a0e:	b129      	cbz	r1, 415a1c <node_set_next+0xe>
  415a10:	b410      	push	{r4}
  415a12:	6803      	ldr	r3, [r0, #0]
  415a14:	3304      	adds	r3, #4
  415a16:	50ca      	str	r2, [r1, r3]
  415a18:	f85d 4b04 	ldr.w	r4, [sp], #4
  415a1c:	4770      	bx	lr

00415a1e <_lv_ll_init>:
  415a1e:	2300      	movs	r3, #0
  415a20:	6043      	str	r3, [r0, #4]
  415a22:	6083      	str	r3, [r0, #8]
  415a24:	3103      	adds	r1, #3
  415a26:	f021 0103 	bic.w	r1, r1, #3
  415a2a:	6001      	str	r1, [r0, #0]
  415a2c:	4770      	bx	lr
	...

00415a30 <_lv_ll_ins_head>:
  415a30:	b538      	push	{r3, r4, r5, lr}
  415a32:	4604      	mov	r4, r0
  415a34:	6800      	ldr	r0, [r0, #0]
  415a36:	3008      	adds	r0, #8
  415a38:	4b0d      	ldr	r3, [pc, #52]	; (415a70 <_lv_ll_ins_head+0x40>)
  415a3a:	4798      	blx	r3
  415a3c:	4605      	mov	r5, r0
  415a3e:	b190      	cbz	r0, 415a66 <_lv_ll_ins_head+0x36>
  415a40:	2200      	movs	r2, #0
  415a42:	4601      	mov	r1, r0
  415a44:	4620      	mov	r0, r4
  415a46:	4b0b      	ldr	r3, [pc, #44]	; (415a74 <_lv_ll_ins_head+0x44>)
  415a48:	4798      	blx	r3
  415a4a:	6862      	ldr	r2, [r4, #4]
  415a4c:	4629      	mov	r1, r5
  415a4e:	4620      	mov	r0, r4
  415a50:	4b09      	ldr	r3, [pc, #36]	; (415a78 <_lv_ll_ins_head+0x48>)
  415a52:	4798      	blx	r3
  415a54:	6861      	ldr	r1, [r4, #4]
  415a56:	b119      	cbz	r1, 415a60 <_lv_ll_ins_head+0x30>
  415a58:	462a      	mov	r2, r5
  415a5a:	4620      	mov	r0, r4
  415a5c:	4b05      	ldr	r3, [pc, #20]	; (415a74 <_lv_ll_ins_head+0x44>)
  415a5e:	4798      	blx	r3
  415a60:	6065      	str	r5, [r4, #4]
  415a62:	68a3      	ldr	r3, [r4, #8]
  415a64:	b10b      	cbz	r3, 415a6a <_lv_ll_ins_head+0x3a>
  415a66:	4628      	mov	r0, r5
  415a68:	bd38      	pop	{r3, r4, r5, pc}
  415a6a:	60a5      	str	r5, [r4, #8]
  415a6c:	e7fb      	b.n	415a66 <_lv_ll_ins_head+0x36>
  415a6e:	bf00      	nop
  415a70:	00415ec1 	.word	0x00415ec1
  415a74:	00415a05 	.word	0x00415a05
  415a78:	00415a0f 	.word	0x00415a0f

00415a7c <_lv_ll_ins_tail>:
  415a7c:	b538      	push	{r3, r4, r5, lr}
  415a7e:	4604      	mov	r4, r0
  415a80:	6800      	ldr	r0, [r0, #0]
  415a82:	3008      	adds	r0, #8
  415a84:	4b0d      	ldr	r3, [pc, #52]	; (415abc <_lv_ll_ins_tail+0x40>)
  415a86:	4798      	blx	r3
  415a88:	4605      	mov	r5, r0
  415a8a:	b190      	cbz	r0, 415ab2 <_lv_ll_ins_tail+0x36>
  415a8c:	2200      	movs	r2, #0
  415a8e:	4601      	mov	r1, r0
  415a90:	4620      	mov	r0, r4
  415a92:	4b0b      	ldr	r3, [pc, #44]	; (415ac0 <_lv_ll_ins_tail+0x44>)
  415a94:	4798      	blx	r3
  415a96:	68a2      	ldr	r2, [r4, #8]
  415a98:	4629      	mov	r1, r5
  415a9a:	4620      	mov	r0, r4
  415a9c:	4b09      	ldr	r3, [pc, #36]	; (415ac4 <_lv_ll_ins_tail+0x48>)
  415a9e:	4798      	blx	r3
  415aa0:	68a1      	ldr	r1, [r4, #8]
  415aa2:	b119      	cbz	r1, 415aac <_lv_ll_ins_tail+0x30>
  415aa4:	462a      	mov	r2, r5
  415aa6:	4620      	mov	r0, r4
  415aa8:	4b05      	ldr	r3, [pc, #20]	; (415ac0 <_lv_ll_ins_tail+0x44>)
  415aaa:	4798      	blx	r3
  415aac:	60a5      	str	r5, [r4, #8]
  415aae:	6863      	ldr	r3, [r4, #4]
  415ab0:	b10b      	cbz	r3, 415ab6 <_lv_ll_ins_tail+0x3a>
  415ab2:	4628      	mov	r0, r5
  415ab4:	bd38      	pop	{r3, r4, r5, pc}
  415ab6:	6065      	str	r5, [r4, #4]
  415ab8:	e7fb      	b.n	415ab2 <_lv_ll_ins_tail+0x36>
  415aba:	bf00      	nop
  415abc:	00415ec1 	.word	0x00415ec1
  415ac0:	00415a0f 	.word	0x00415a0f
  415ac4:	00415a05 	.word	0x00415a05

00415ac8 <_lv_ll_get_head>:
  415ac8:	b108      	cbz	r0, 415ace <_lv_ll_get_head+0x6>
  415aca:	6840      	ldr	r0, [r0, #4]
  415acc:	4770      	bx	lr
  415ace:	2000      	movs	r0, #0
  415ad0:	4770      	bx	lr

00415ad2 <_lv_ll_get_tail>:
  415ad2:	b108      	cbz	r0, 415ad8 <_lv_ll_get_tail+0x6>
  415ad4:	6880      	ldr	r0, [r0, #8]
  415ad6:	4770      	bx	lr
  415ad8:	2000      	movs	r0, #0
  415ada:	4770      	bx	lr

00415adc <_lv_ll_get_next>:
  415adc:	b118      	cbz	r0, 415ae6 <_lv_ll_get_next+0xa>
  415ade:	6803      	ldr	r3, [r0, #0]
  415ae0:	3304      	adds	r3, #4
  415ae2:	58c8      	ldr	r0, [r1, r3]
  415ae4:	4770      	bx	lr
  415ae6:	2000      	movs	r0, #0
  415ae8:	4770      	bx	lr

00415aea <_lv_ll_get_prev>:
  415aea:	b110      	cbz	r0, 415af2 <_lv_ll_get_prev+0x8>
  415aec:	6803      	ldr	r3, [r0, #0]
  415aee:	58c8      	ldr	r0, [r1, r3]
  415af0:	4770      	bx	lr
  415af2:	2000      	movs	r0, #0
  415af4:	4770      	bx	lr
	...

00415af8 <_lv_ll_ins_prev>:
  415af8:	2900      	cmp	r1, #0
  415afa:	bf18      	it	ne
  415afc:	2800      	cmpne	r0, #0
  415afe:	d02f      	beq.n	415b60 <_lv_ll_ins_prev+0x68>
  415b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  415b04:	4604      	mov	r4, r0
  415b06:	4688      	mov	r8, r1
  415b08:	4b18      	ldr	r3, [pc, #96]	; (415b6c <_lv_ll_ins_prev+0x74>)
  415b0a:	4798      	blx	r3
  415b0c:	4580      	cmp	r8, r0
  415b0e:	d01f      	beq.n	415b50 <_lv_ll_ins_prev+0x58>
  415b10:	6820      	ldr	r0, [r4, #0]
  415b12:	3008      	adds	r0, #8
  415b14:	4b16      	ldr	r3, [pc, #88]	; (415b70 <_lv_ll_ins_prev+0x78>)
  415b16:	4798      	blx	r3
  415b18:	4605      	mov	r5, r0
  415b1a:	b318      	cbz	r0, 415b64 <_lv_ll_ins_prev+0x6c>
  415b1c:	4641      	mov	r1, r8
  415b1e:	4620      	mov	r0, r4
  415b20:	4b14      	ldr	r3, [pc, #80]	; (415b74 <_lv_ll_ins_prev+0x7c>)
  415b22:	4798      	blx	r3
  415b24:	4607      	mov	r7, r0
  415b26:	462a      	mov	r2, r5
  415b28:	4601      	mov	r1, r0
  415b2a:	4620      	mov	r0, r4
  415b2c:	4e12      	ldr	r6, [pc, #72]	; (415b78 <_lv_ll_ins_prev+0x80>)
  415b2e:	47b0      	blx	r6
  415b30:	463a      	mov	r2, r7
  415b32:	4629      	mov	r1, r5
  415b34:	4620      	mov	r0, r4
  415b36:	4f11      	ldr	r7, [pc, #68]	; (415b7c <_lv_ll_ins_prev+0x84>)
  415b38:	47b8      	blx	r7
  415b3a:	462a      	mov	r2, r5
  415b3c:	4641      	mov	r1, r8
  415b3e:	4620      	mov	r0, r4
  415b40:	47b8      	blx	r7
  415b42:	4642      	mov	r2, r8
  415b44:	4629      	mov	r1, r5
  415b46:	4620      	mov	r0, r4
  415b48:	47b0      	blx	r6
  415b4a:	4628      	mov	r0, r5
  415b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415b50:	4620      	mov	r0, r4
  415b52:	4b0b      	ldr	r3, [pc, #44]	; (415b80 <_lv_ll_ins_prev+0x88>)
  415b54:	4798      	blx	r3
  415b56:	b108      	cbz	r0, 415b5c <_lv_ll_ins_prev+0x64>
  415b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415b60:	2000      	movs	r0, #0
  415b62:	4770      	bx	lr
  415b64:	2000      	movs	r0, #0
  415b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  415b6a:	bf00      	nop
  415b6c:	00415ac9 	.word	0x00415ac9
  415b70:	00415ec1 	.word	0x00415ec1
  415b74:	00415aeb 	.word	0x00415aeb
  415b78:	00415a0f 	.word	0x00415a0f
  415b7c:	00415a05 	.word	0x00415a05
  415b80:	00415a31 	.word	0x00415a31

00415b84 <_lv_ll_remove>:
  415b84:	b570      	push	{r4, r5, r6, lr}
  415b86:	4604      	mov	r4, r0
  415b88:	460d      	mov	r5, r1
  415b8a:	4b1e      	ldr	r3, [pc, #120]	; (415c04 <_lv_ll_remove+0x80>)
  415b8c:	4798      	blx	r3
  415b8e:	4285      	cmp	r5, r0
  415b90:	d019      	beq.n	415bc6 <_lv_ll_remove+0x42>
  415b92:	4620      	mov	r0, r4
  415b94:	4b1c      	ldr	r3, [pc, #112]	; (415c08 <_lv_ll_remove+0x84>)
  415b96:	4798      	blx	r3
  415b98:	4285      	cmp	r5, r0
  415b9a:	d023      	beq.n	415be4 <_lv_ll_remove+0x60>
  415b9c:	4629      	mov	r1, r5
  415b9e:	4620      	mov	r0, r4
  415ba0:	4b1a      	ldr	r3, [pc, #104]	; (415c0c <_lv_ll_remove+0x88>)
  415ba2:	4798      	blx	r3
  415ba4:	4606      	mov	r6, r0
  415ba6:	4629      	mov	r1, r5
  415ba8:	4620      	mov	r0, r4
  415baa:	4b19      	ldr	r3, [pc, #100]	; (415c10 <_lv_ll_remove+0x8c>)
  415bac:	4798      	blx	r3
  415bae:	4605      	mov	r5, r0
  415bb0:	4602      	mov	r2, r0
  415bb2:	4631      	mov	r1, r6
  415bb4:	4620      	mov	r0, r4
  415bb6:	4b17      	ldr	r3, [pc, #92]	; (415c14 <_lv_ll_remove+0x90>)
  415bb8:	4798      	blx	r3
  415bba:	4632      	mov	r2, r6
  415bbc:	4629      	mov	r1, r5
  415bbe:	4620      	mov	r0, r4
  415bc0:	4b15      	ldr	r3, [pc, #84]	; (415c18 <_lv_ll_remove+0x94>)
  415bc2:	4798      	blx	r3
  415bc4:	bd70      	pop	{r4, r5, r6, pc}
  415bc6:	4629      	mov	r1, r5
  415bc8:	4620      	mov	r0, r4
  415bca:	4b11      	ldr	r3, [pc, #68]	; (415c10 <_lv_ll_remove+0x8c>)
  415bcc:	4798      	blx	r3
  415bce:	6060      	str	r0, [r4, #4]
  415bd0:	b128      	cbz	r0, 415bde <_lv_ll_remove+0x5a>
  415bd2:	2200      	movs	r2, #0
  415bd4:	4601      	mov	r1, r0
  415bd6:	4620      	mov	r0, r4
  415bd8:	4b0f      	ldr	r3, [pc, #60]	; (415c18 <_lv_ll_remove+0x94>)
  415bda:	4798      	blx	r3
  415bdc:	bd70      	pop	{r4, r5, r6, pc}
  415bde:	2300      	movs	r3, #0
  415be0:	60a3      	str	r3, [r4, #8]
  415be2:	bd70      	pop	{r4, r5, r6, pc}
  415be4:	4629      	mov	r1, r5
  415be6:	4620      	mov	r0, r4
  415be8:	4b08      	ldr	r3, [pc, #32]	; (415c0c <_lv_ll_remove+0x88>)
  415bea:	4798      	blx	r3
  415bec:	60a0      	str	r0, [r4, #8]
  415bee:	b128      	cbz	r0, 415bfc <_lv_ll_remove+0x78>
  415bf0:	2200      	movs	r2, #0
  415bf2:	4601      	mov	r1, r0
  415bf4:	4620      	mov	r0, r4
  415bf6:	4b07      	ldr	r3, [pc, #28]	; (415c14 <_lv_ll_remove+0x90>)
  415bf8:	4798      	blx	r3
  415bfa:	bd70      	pop	{r4, r5, r6, pc}
  415bfc:	2300      	movs	r3, #0
  415bfe:	6063      	str	r3, [r4, #4]
  415c00:	bd70      	pop	{r4, r5, r6, pc}
  415c02:	bf00      	nop
  415c04:	00415ac9 	.word	0x00415ac9
  415c08:	00415ad3 	.word	0x00415ad3
  415c0c:	00415aeb 	.word	0x00415aeb
  415c10:	00415add 	.word	0x00415add
  415c14:	00415a0f 	.word	0x00415a0f
  415c18:	00415a05 	.word	0x00415a05

00415c1c <_lv_ll_chg_list>:
  415c1c:	b570      	push	{r4, r5, r6, lr}
  415c1e:	460c      	mov	r4, r1
  415c20:	4615      	mov	r5, r2
  415c22:	461e      	mov	r6, r3
  415c24:	4611      	mov	r1, r2
  415c26:	4b17      	ldr	r3, [pc, #92]	; (415c84 <_lv_ll_chg_list+0x68>)
  415c28:	4798      	blx	r3
  415c2a:	b1ae      	cbz	r6, 415c58 <_lv_ll_chg_list+0x3c>
  415c2c:	2200      	movs	r2, #0
  415c2e:	4629      	mov	r1, r5
  415c30:	4620      	mov	r0, r4
  415c32:	4b15      	ldr	r3, [pc, #84]	; (415c88 <_lv_ll_chg_list+0x6c>)
  415c34:	4798      	blx	r3
  415c36:	6862      	ldr	r2, [r4, #4]
  415c38:	4629      	mov	r1, r5
  415c3a:	4620      	mov	r0, r4
  415c3c:	4b13      	ldr	r3, [pc, #76]	; (415c8c <_lv_ll_chg_list+0x70>)
  415c3e:	4798      	blx	r3
  415c40:	6861      	ldr	r1, [r4, #4]
  415c42:	b119      	cbz	r1, 415c4c <_lv_ll_chg_list+0x30>
  415c44:	462a      	mov	r2, r5
  415c46:	4620      	mov	r0, r4
  415c48:	4b0f      	ldr	r3, [pc, #60]	; (415c88 <_lv_ll_chg_list+0x6c>)
  415c4a:	4798      	blx	r3
  415c4c:	6065      	str	r5, [r4, #4]
  415c4e:	68a3      	ldr	r3, [r4, #8]
  415c50:	b103      	cbz	r3, 415c54 <_lv_ll_chg_list+0x38>
  415c52:	bd70      	pop	{r4, r5, r6, pc}
  415c54:	60a5      	str	r5, [r4, #8]
  415c56:	bd70      	pop	{r4, r5, r6, pc}
  415c58:	68a2      	ldr	r2, [r4, #8]
  415c5a:	4629      	mov	r1, r5
  415c5c:	4620      	mov	r0, r4
  415c5e:	4b0a      	ldr	r3, [pc, #40]	; (415c88 <_lv_ll_chg_list+0x6c>)
  415c60:	4798      	blx	r3
  415c62:	2200      	movs	r2, #0
  415c64:	4629      	mov	r1, r5
  415c66:	4620      	mov	r0, r4
  415c68:	4b08      	ldr	r3, [pc, #32]	; (415c8c <_lv_ll_chg_list+0x70>)
  415c6a:	4798      	blx	r3
  415c6c:	68a1      	ldr	r1, [r4, #8]
  415c6e:	b119      	cbz	r1, 415c78 <_lv_ll_chg_list+0x5c>
  415c70:	462a      	mov	r2, r5
  415c72:	4620      	mov	r0, r4
  415c74:	4b05      	ldr	r3, [pc, #20]	; (415c8c <_lv_ll_chg_list+0x70>)
  415c76:	4798      	blx	r3
  415c78:	60a5      	str	r5, [r4, #8]
  415c7a:	6863      	ldr	r3, [r4, #4]
  415c7c:	2b00      	cmp	r3, #0
  415c7e:	d1e8      	bne.n	415c52 <_lv_ll_chg_list+0x36>
  415c80:	6065      	str	r5, [r4, #4]
  415c82:	e7e6      	b.n	415c52 <_lv_ll_chg_list+0x36>
  415c84:	00415b85 	.word	0x00415b85
  415c88:	00415a05 	.word	0x00415a05
  415c8c:	00415a0f 	.word	0x00415a0f

00415c90 <_lv_ll_get_len>:
  415c90:	b538      	push	{r3, r4, r5, lr}
  415c92:	4605      	mov	r5, r0
  415c94:	4b06      	ldr	r3, [pc, #24]	; (415cb0 <_lv_ll_get_len+0x20>)
  415c96:	4798      	blx	r3
  415c98:	2400      	movs	r4, #0
  415c9a:	e004      	b.n	415ca6 <_lv_ll_get_len+0x16>
  415c9c:	3401      	adds	r4, #1
  415c9e:	4601      	mov	r1, r0
  415ca0:	4628      	mov	r0, r5
  415ca2:	4b04      	ldr	r3, [pc, #16]	; (415cb4 <_lv_ll_get_len+0x24>)
  415ca4:	4798      	blx	r3
  415ca6:	2800      	cmp	r0, #0
  415ca8:	d1f8      	bne.n	415c9c <_lv_ll_get_len+0xc>
  415caa:	4620      	mov	r0, r4
  415cac:	bd38      	pop	{r3, r4, r5, pc}
  415cae:	bf00      	nop
  415cb0:	00415ac9 	.word	0x00415ac9
  415cb4:	00415add 	.word	0x00415add

00415cb8 <_lv_ll_move_before>:
  415cb8:	4291      	cmp	r1, r2
  415cba:	d02f      	beq.n	415d1c <_lv_ll_move_before+0x64>
  415cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  415cc0:	4617      	mov	r7, r2
  415cc2:	460c      	mov	r4, r1
  415cc4:	4605      	mov	r5, r0
  415cc6:	b30a      	cbz	r2, 415d0c <_lv_ll_move_before+0x54>
  415cc8:	4611      	mov	r1, r2
  415cca:	4b15      	ldr	r3, [pc, #84]	; (415d20 <_lv_ll_move_before+0x68>)
  415ccc:	4798      	blx	r3
  415cce:	4606      	mov	r6, r0
  415cd0:	42a6      	cmp	r6, r4
  415cd2:	d019      	beq.n	415d08 <_lv_ll_move_before+0x50>
  415cd4:	4621      	mov	r1, r4
  415cd6:	4628      	mov	r0, r5
  415cd8:	4b12      	ldr	r3, [pc, #72]	; (415d24 <_lv_ll_move_before+0x6c>)
  415cda:	4798      	blx	r3
  415cdc:	4622      	mov	r2, r4
  415cde:	4631      	mov	r1, r6
  415ce0:	4628      	mov	r0, r5
  415ce2:	f8df 8048 	ldr.w	r8, [pc, #72]	; 415d2c <_lv_ll_move_before+0x74>
  415ce6:	47c0      	blx	r8
  415ce8:	4632      	mov	r2, r6
  415cea:	4621      	mov	r1, r4
  415cec:	4628      	mov	r0, r5
  415cee:	f8df 9040 	ldr.w	r9, [pc, #64]	; 415d30 <_lv_ll_move_before+0x78>
  415cf2:	47c8      	blx	r9
  415cf4:	4622      	mov	r2, r4
  415cf6:	4639      	mov	r1, r7
  415cf8:	4628      	mov	r0, r5
  415cfa:	47c8      	blx	r9
  415cfc:	463a      	mov	r2, r7
  415cfe:	4621      	mov	r1, r4
  415d00:	4628      	mov	r0, r5
  415d02:	47c0      	blx	r8
  415d04:	b137      	cbz	r7, 415d14 <_lv_ll_move_before+0x5c>
  415d06:	b13e      	cbz	r6, 415d18 <_lv_ll_move_before+0x60>
  415d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  415d0c:	4b06      	ldr	r3, [pc, #24]	; (415d28 <_lv_ll_move_before+0x70>)
  415d0e:	4798      	blx	r3
  415d10:	4606      	mov	r6, r0
  415d12:	e7dd      	b.n	415cd0 <_lv_ll_move_before+0x18>
  415d14:	60ac      	str	r4, [r5, #8]
  415d16:	e7f6      	b.n	415d06 <_lv_ll_move_before+0x4e>
  415d18:	606c      	str	r4, [r5, #4]
  415d1a:	e7f5      	b.n	415d08 <_lv_ll_move_before+0x50>
  415d1c:	4770      	bx	lr
  415d1e:	bf00      	nop
  415d20:	00415aeb 	.word	0x00415aeb
  415d24:	00415b85 	.word	0x00415b85
  415d28:	00415ad3 	.word	0x00415ad3
  415d2c:	00415a0f 	.word	0x00415a0f
  415d30:	00415a05 	.word	0x00415a05

00415d34 <_lv_ll_is_empty>:
  415d34:	b138      	cbz	r0, 415d46 <_lv_ll_is_empty+0x12>
  415d36:	6842      	ldr	r2, [r0, #4]
  415d38:	b10a      	cbz	r2, 415d3e <_lv_ll_is_empty+0xa>
  415d3a:	2000      	movs	r0, #0
  415d3c:	4770      	bx	lr
  415d3e:	6883      	ldr	r3, [r0, #8]
  415d40:	b11b      	cbz	r3, 415d4a <_lv_ll_is_empty+0x16>
  415d42:	2000      	movs	r0, #0
  415d44:	4770      	bx	lr
  415d46:	2001      	movs	r0, #1
  415d48:	4770      	bx	lr
  415d4a:	2001      	movs	r0, #1
  415d4c:	4770      	bx	lr
	...

00415d50 <_lv_trigo_sin>:
  415d50:	4b1c      	ldr	r3, [pc, #112]	; (415dc4 <_lv_trigo_sin+0x74>)
  415d52:	fb83 2300 	smull	r2, r3, r3, r0
  415d56:	181a      	adds	r2, r3, r0
  415d58:	17c3      	asrs	r3, r0, #31
  415d5a:	ebc3 2322 	rsb	r3, r3, r2, asr #8
  415d5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
  415d62:	fb02 0013 	mls	r0, r2, r3, r0
  415d66:	b200      	sxth	r0, r0
  415d68:	2800      	cmp	r0, #0
  415d6a:	db15      	blt.n	415d98 <_lv_trigo_sin+0x48>
  415d6c:	2859      	cmp	r0, #89	; 0x59
  415d6e:	dd16      	ble.n	415d9e <_lv_trigo_sin+0x4e>
  415d70:	b280      	uxth	r0, r0
  415d72:	f1a0 035a 	sub.w	r3, r0, #90	; 0x5a
  415d76:	b29b      	uxth	r3, r3
  415d78:	2b59      	cmp	r3, #89	; 0x59
  415d7a:	d914      	bls.n	415da6 <_lv_trigo_sin+0x56>
  415d7c:	f1a0 03b4 	sub.w	r3, r0, #180	; 0xb4
  415d80:	b29b      	uxth	r3, r3
  415d82:	2b59      	cmp	r3, #89	; 0x59
  415d84:	d916      	bls.n	415db4 <_lv_trigo_sin+0x64>
  415d86:	f5c0 70b4 	rsb	r0, r0, #360	; 0x168
  415d8a:	b200      	sxth	r0, r0
  415d8c:	4b0e      	ldr	r3, [pc, #56]	; (415dc8 <_lv_trigo_sin+0x78>)
  415d8e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
  415d92:	4240      	negs	r0, r0
  415d94:	b200      	sxth	r0, r0
  415d96:	4770      	bx	lr
  415d98:	4410      	add	r0, r2
  415d9a:	b200      	sxth	r0, r0
  415d9c:	e7e6      	b.n	415d6c <_lv_trigo_sin+0x1c>
  415d9e:	4b0a      	ldr	r3, [pc, #40]	; (415dc8 <_lv_trigo_sin+0x78>)
  415da0:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  415da4:	4770      	bx	lr
  415da6:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
  415daa:	b200      	sxth	r0, r0
  415dac:	4b06      	ldr	r3, [pc, #24]	; (415dc8 <_lv_trigo_sin+0x78>)
  415dae:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
  415db2:	4770      	bx	lr
  415db4:	b21b      	sxth	r3, r3
  415db6:	4a04      	ldr	r2, [pc, #16]	; (415dc8 <_lv_trigo_sin+0x78>)
  415db8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
  415dbc:	4240      	negs	r0, r0
  415dbe:	b200      	sxth	r0, r0
  415dc0:	4770      	bx	lr
  415dc2:	bf00      	nop
  415dc4:	b60b60b7 	.word	0xb60b60b7
  415dc8:	00429684 	.word	0x00429684

00415dcc <_lv_sqrt>:
  415dcc:	b430      	push	{r4, r5}
  415dce:	0200      	lsls	r0, r0, #8
  415dd0:	2400      	movs	r4, #0
  415dd2:	e001      	b.n	415dd8 <_lv_sqrt+0xc>
  415dd4:	0852      	lsrs	r2, r2, #1
  415dd6:	d006      	beq.n	415de6 <_lv_sqrt+0x1a>
  415dd8:	1913      	adds	r3, r2, r4
  415dda:	fb03 f503 	mul.w	r5, r3, r3
  415dde:	42a8      	cmp	r0, r5
  415de0:	d3f8      	bcc.n	415dd4 <_lv_sqrt+0x8>
  415de2:	461c      	mov	r4, r3
  415de4:	e7f6      	b.n	415dd4 <_lv_sqrt+0x8>
  415de6:	0923      	lsrs	r3, r4, #4
  415de8:	800b      	strh	r3, [r1, #0]
  415dea:	0124      	lsls	r4, r4, #4
  415dec:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
  415df0:	804c      	strh	r4, [r1, #2]
  415df2:	bc30      	pop	{r4, r5}
  415df4:	4770      	bx	lr
	...

00415df8 <ent_get_next>:
 */
static lv_mem_ent_t * ent_get_next(lv_mem_ent_t * act_e)
{
    lv_mem_ent_t * next_e = NULL;

    if(act_e == NULL) { /*NULL means: get the first entry*/
  415df8:	4603      	mov	r3, r0
  415dfa:	b158      	cbz	r0, 415e14 <ent_get_next+0x1c>
        next_e = (lv_mem_ent_t *)work_mem;
    }
    else {   /*Get the next entry */
        uint8_t * data = &act_e->first_data;
  415dfc:	3004      	adds	r0, #4
        next_e         = (lv_mem_ent_t *)&data[act_e->header.s.d_size];
  415dfe:	681b      	ldr	r3, [r3, #0]
  415e00:	eb00 0053 	add.w	r0, r0, r3, lsr #1

        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  415e04:	1d02      	adds	r2, r0, #4
  415e06:	4b06      	ldr	r3, [pc, #24]	; (415e20 <ent_get_next+0x28>)
  415e08:	681b      	ldr	r3, [r3, #0]
  415e0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  415e0e:	429a      	cmp	r2, r3
  415e10:	d203      	bcs.n	415e1a <ent_get_next+0x22>
    }

    return next_e;
}
  415e12:	4770      	bx	lr
        next_e = (lv_mem_ent_t *)work_mem;
  415e14:	4b02      	ldr	r3, [pc, #8]	; (415e20 <ent_get_next+0x28>)
  415e16:	6818      	ldr	r0, [r3, #0]
  415e18:	4770      	bx	lr
        if(&next_e->first_data >= &work_mem[LV_MEM_SIZE]) next_e = NULL;
  415e1a:	2000      	movs	r0, #0
    return next_e;
  415e1c:	e7f9      	b.n	415e12 <ent_get_next+0x1a>
  415e1e:	bf00      	nop
  415e20:	2040c784 	.word	0x2040c784

00415e24 <ent_trunc>:
 * @param size new size in bytes
 */
static void ent_trunc(lv_mem_ent_t * e, size_t size)
{
    /*Round the size up to ALIGN_MASK*/
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415e24:	3103      	adds	r1, #3
  415e26:	f021 0103 	bic.w	r1, r1, #3

    /*Don't let empty space only for a header without data*/
    if(e->header.s.d_size == size + sizeof(lv_mem_header_t)) {
  415e2a:	6803      	ldr	r3, [r0, #0]
  415e2c:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415e30:	1d0a      	adds	r2, r1, #4
  415e32:	4293      	cmp	r3, r2
  415e34:	d016      	beq.n	415e64 <ent_trunc+0x40>
        size = e->header.s.d_size;
    }

    /* Create the new entry after the current if there is space for it */
    if(e->header.s.d_size != size) {
  415e36:	4299      	cmp	r1, r3
  415e38:	d013      	beq.n	415e62 <ent_trunc+0x3e>
{
  415e3a:	b410      	push	{r4}
        uint8_t * e_data             = &e->first_data;
  415e3c:	1d02      	adds	r2, r0, #4
        lv_mem_ent_t * after_new_e   = (lv_mem_ent_t *)&e_data[size];
        after_new_e->header.s.used   = 0;
  415e3e:	5c53      	ldrb	r3, [r2, r1]
  415e40:	f36f 0300 	bfc	r3, #0, #1
  415e44:	5453      	strb	r3, [r2, r1]
        after_new_e->header.s.d_size = (uint32_t)e->header.s.d_size - size - sizeof(lv_mem_header_t);
  415e46:	6803      	ldr	r3, [r0, #0]
  415e48:	ebc1 0353 	rsb	r3, r1, r3, lsr #1
  415e4c:	3b04      	subs	r3, #4
  415e4e:	5854      	ldr	r4, [r2, r1]
  415e50:	f363 045f 	bfi	r4, r3, #1, #31
  415e54:	5054      	str	r4, [r2, r1]

        /* Set the new size for the original entry */
        e->header.s.d_size = (uint32_t)size;
  415e56:	6803      	ldr	r3, [r0, #0]
  415e58:	f361 035f 	bfi	r3, r1, #1, #31
  415e5c:	6003      	str	r3, [r0, #0]
    }
}
  415e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  415e62:	4770      	bx	lr
        size = e->header.s.d_size;
  415e64:	4619      	mov	r1, r3
  415e66:	e7e6      	b.n	415e36 <ent_trunc+0x12>

00415e68 <ent_alloc>:
    if(e->header.s.used == 0 && e->header.s.d_size >= size) {
  415e68:	7803      	ldrb	r3, [r0, #0]
  415e6a:	f013 0f01 	tst.w	r3, #1
  415e6e:	d10f      	bne.n	415e90 <ent_alloc+0x28>
  415e70:	6803      	ldr	r3, [r0, #0]
  415e72:	f3c3 035e 	ubfx	r3, r3, #1, #31
  415e76:	428b      	cmp	r3, r1
  415e78:	d30c      	bcc.n	415e94 <ent_alloc+0x2c>
{
  415e7a:	b510      	push	{r4, lr}
  415e7c:	4604      	mov	r4, r0
        ent_trunc(e, size);
  415e7e:	4b06      	ldr	r3, [pc, #24]	; (415e98 <ent_alloc+0x30>)
  415e80:	4798      	blx	r3
        e->header.s.used = 1;
  415e82:	7823      	ldrb	r3, [r4, #0]
  415e84:	f043 0301 	orr.w	r3, r3, #1
  415e88:	4620      	mov	r0, r4
  415e8a:	f800 3b04 	strb.w	r3, [r0], #4
  415e8e:	bd10      	pop	{r4, pc}
    void * alloc = NULL;
  415e90:	2000      	movs	r0, #0
  415e92:	4770      	bx	lr
  415e94:	2000      	movs	r0, #0
    return alloc;
  415e96:	4770      	bx	lr
  415e98:	00415e25 	.word	0x00415e25

00415e9c <_lv_mem_init>:
    work_mem = (uint8_t *)work_mem_int;
  415e9c:	4b06      	ldr	r3, [pc, #24]	; (415eb8 <_lv_mem_init+0x1c>)
  415e9e:	4a07      	ldr	r2, [pc, #28]	; (415ebc <_lv_mem_init+0x20>)
  415ea0:	6013      	str	r3, [r2, #0]
    full->header.s.used = 0;
  415ea2:	781a      	ldrb	r2, [r3, #0]
  415ea4:	f36f 0200 	bfc	r2, #0, #1
  415ea8:	701a      	strb	r2, [r3, #0]
    full->header.s.d_size = LV_MEM_SIZE - sizeof(lv_mem_header_t);
  415eaa:	681a      	ldr	r2, [r3, #0]
  415eac:	f647 71fc 	movw	r1, #32764	; 0x7ffc
  415eb0:	f361 025f 	bfi	r2, r1, #1, #31
  415eb4:	601a      	str	r2, [r3, #0]
  415eb6:	4770      	bx	lr
  415eb8:	2040c788 	.word	0x2040c788
  415ebc:	2040c784 	.word	0x2040c784

00415ec0 <lv_mem_alloc>:
{
  415ec0:	b570      	push	{r4, r5, r6, lr}
    if(size == 0) {
  415ec2:	b330      	cbz	r0, 415f12 <lv_mem_alloc+0x52>
  415ec4:	4606      	mov	r6, r0
    size = (size + ALIGN_MASK) & (~ALIGN_MASK);
  415ec6:	3603      	adds	r6, #3
  415ec8:	f026 0603 	bic.w	r6, r6, #3
    lv_mem_ent_t * e = NULL;
  415ecc:	2400      	movs	r4, #0
    void * alloc = NULL;
  415ece:	4625      	mov	r5, r4
  415ed0:	e006      	b.n	415ee0 <lv_mem_alloc+0x20>
    } while(e != NULL && alloc == NULL);
  415ed2:	1c23      	adds	r3, r4, #0
  415ed4:	bf18      	it	ne
  415ed6:	2301      	movne	r3, #1
  415ed8:	2d00      	cmp	r5, #0
  415eda:	bf18      	it	ne
  415edc:	2300      	movne	r3, #0
  415ede:	b153      	cbz	r3, 415ef6 <lv_mem_alloc+0x36>
        e = ent_get_next(e);
  415ee0:	4620      	mov	r0, r4
  415ee2:	4b0d      	ldr	r3, [pc, #52]	; (415f18 <lv_mem_alloc+0x58>)
  415ee4:	4798      	blx	r3
        if(e != NULL) {
  415ee6:	4604      	mov	r4, r0
  415ee8:	2800      	cmp	r0, #0
  415eea:	d0f2      	beq.n	415ed2 <lv_mem_alloc+0x12>
            alloc = ent_alloc(e, size);
  415eec:	4631      	mov	r1, r6
  415eee:	4b0b      	ldr	r3, [pc, #44]	; (415f1c <lv_mem_alloc+0x5c>)
  415ef0:	4798      	blx	r3
  415ef2:	4605      	mov	r5, r0
  415ef4:	e7ed      	b.n	415ed2 <lv_mem_alloc+0x12>
    if(alloc == NULL) {
  415ef6:	b16d      	cbz	r5, 415f14 <lv_mem_alloc+0x54>
        if((uintptr_t) alloc > (uintptr_t) work_mem) {
  415ef8:	4b09      	ldr	r3, [pc, #36]	; (415f20 <lv_mem_alloc+0x60>)
  415efa:	681b      	ldr	r3, [r3, #0]
  415efc:	429d      	cmp	r5, r3
  415efe:	d909      	bls.n	415f14 <lv_mem_alloc+0x54>
            if((((uintptr_t) alloc - (uintptr_t) work_mem) + size) > mem_max_size) {
  415f00:	1aeb      	subs	r3, r5, r3
  415f02:	441e      	add	r6, r3
  415f04:	4b07      	ldr	r3, [pc, #28]	; (415f24 <lv_mem_alloc+0x64>)
  415f06:	681b      	ldr	r3, [r3, #0]
  415f08:	429e      	cmp	r6, r3
  415f0a:	d903      	bls.n	415f14 <lv_mem_alloc+0x54>
                mem_max_size = ((uintptr_t) alloc - (uintptr_t) work_mem) + size;
  415f0c:	4b05      	ldr	r3, [pc, #20]	; (415f24 <lv_mem_alloc+0x64>)
  415f0e:	601e      	str	r6, [r3, #0]
  415f10:	e000      	b.n	415f14 <lv_mem_alloc+0x54>
        return &zero_mem;
  415f12:	4d05      	ldr	r5, [pc, #20]	; (415f28 <lv_mem_alloc+0x68>)
}
  415f14:	4628      	mov	r0, r5
  415f16:	bd70      	pop	{r4, r5, r6, pc}
  415f18:	00415df9 	.word	0x00415df9
  415f1c:	00415e69 	.word	0x00415e69
  415f20:	2040c784 	.word	0x2040c784
  415f24:	2040c780 	.word	0x2040c780
  415f28:	20414788 	.word	0x20414788

00415f2c <lv_mem_defrag>:
{
  415f2c:	b510      	push	{r4, lr}
    e_free = ent_get_next(NULL);
  415f2e:	2000      	movs	r0, #0
  415f30:	4b13      	ldr	r3, [pc, #76]	; (415f80 <lv_mem_defrag+0x54>)
  415f32:	4798      	blx	r3
  415f34:	4604      	mov	r4, r0
  415f36:	e017      	b.n	415f68 <lv_mem_defrag+0x3c>
        if(e_free == NULL) return;
  415f38:	b304      	cbz	r4, 415f7c <lv_mem_defrag+0x50>
        e_next = ent_get_next(e_free);
  415f3a:	4620      	mov	r0, r4
  415f3c:	4b10      	ldr	r3, [pc, #64]	; (415f80 <lv_mem_defrag+0x54>)
  415f3e:	4798      	blx	r3
        while(e_next != NULL) {
  415f40:	b180      	cbz	r0, 415f64 <lv_mem_defrag+0x38>
            if(e_next->header.s.used == 0) {
  415f42:	7803      	ldrb	r3, [r0, #0]
  415f44:	f013 0f01 	tst.w	r3, #1
  415f48:	d10c      	bne.n	415f64 <lv_mem_defrag+0x38>
                e_free->header.s.d_size += e_next->header.s.d_size + sizeof(e_next->header);
  415f4a:	6801      	ldr	r1, [r0, #0]
  415f4c:	6823      	ldr	r3, [r4, #0]
  415f4e:	f3c3 025e 	ubfx	r2, r3, #1, #31
  415f52:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415f56:	3204      	adds	r2, #4
  415f58:	f362 035f 	bfi	r3, r2, #1, #31
  415f5c:	6023      	str	r3, [r4, #0]
            e_next = ent_get_next(e_next);
  415f5e:	4b08      	ldr	r3, [pc, #32]	; (415f80 <lv_mem_defrag+0x54>)
  415f60:	4798      	blx	r3
  415f62:	e7ed      	b.n	415f40 <lv_mem_defrag+0x14>
        if(e_next == NULL) return;
  415f64:	b150      	cbz	r0, 415f7c <lv_mem_defrag+0x50>
{
  415f66:	4604      	mov	r4, r0
        while(e_free != NULL) {
  415f68:	2c00      	cmp	r4, #0
  415f6a:	d0e5      	beq.n	415f38 <lv_mem_defrag+0xc>
            if(e_free->header.s.used != 0) {
  415f6c:	7823      	ldrb	r3, [r4, #0]
  415f6e:	f013 0f01 	tst.w	r3, #1
  415f72:	d0e1      	beq.n	415f38 <lv_mem_defrag+0xc>
                e_free = ent_get_next(e_free);
  415f74:	4620      	mov	r0, r4
  415f76:	4b02      	ldr	r3, [pc, #8]	; (415f80 <lv_mem_defrag+0x54>)
  415f78:	4798      	blx	r3
  415f7a:	e7f4      	b.n	415f66 <lv_mem_defrag+0x3a>
  415f7c:	bd10      	pop	{r4, pc}
  415f7e:	bf00      	nop
  415f80:	00415df9 	.word	0x00415df9

00415f84 <lv_mem_free>:
    if(data == &zero_mem) return;
  415f84:	4b18      	ldr	r3, [pc, #96]	; (415fe8 <lv_mem_free+0x64>)
  415f86:	4298      	cmp	r0, r3
  415f88:	d02d      	beq.n	415fe6 <lv_mem_free+0x62>
    if(data == NULL) return;
  415f8a:	b360      	cbz	r0, 415fe6 <lv_mem_free+0x62>
{
  415f8c:	b510      	push	{r4, lr}
  415f8e:	4604      	mov	r4, r0
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
  415f90:	3804      	subs	r0, #4
    e->header.s.used = 0;
  415f92:	f814 3c04 	ldrb.w	r3, [r4, #-4]
  415f96:	f36f 0300 	bfc	r3, #0, #1
  415f9a:	f804 3c04 	strb.w	r3, [r4, #-4]
    full_defrag_cnt++;
  415f9e:	4a13      	ldr	r2, [pc, #76]	; (415fec <lv_mem_free+0x68>)
  415fa0:	8813      	ldrh	r3, [r2, #0]
  415fa2:	3301      	adds	r3, #1
  415fa4:	b29b      	uxth	r3, r3
  415fa6:	8013      	strh	r3, [r2, #0]
    if(full_defrag_cnt < LV_MEM_FULL_DEFRAG_CNT) {
  415fa8:	2b0f      	cmp	r3, #15
  415faa:	d816      	bhi.n	415fda <lv_mem_free+0x56>
        e_next = ent_get_next(e);
  415fac:	4b10      	ldr	r3, [pc, #64]	; (415ff0 <lv_mem_free+0x6c>)
  415fae:	4798      	blx	r3
        while(e_next != NULL) {
  415fb0:	b190      	cbz	r0, 415fd8 <lv_mem_free+0x54>
            if(e_next->header.s.used == 0) {
  415fb2:	7803      	ldrb	r3, [r0, #0]
  415fb4:	f013 0f01 	tst.w	r3, #1
  415fb8:	d114      	bne.n	415fe4 <lv_mem_free+0x60>
                e->header.s.d_size += e_next->header.s.d_size + sizeof(e->header);
  415fba:	6801      	ldr	r1, [r0, #0]
  415fbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
  415fc0:	f3c3 025e 	ubfx	r2, r3, #1, #31
  415fc4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
  415fc8:	3204      	adds	r2, #4
  415fca:	f362 035f 	bfi	r3, r2, #1, #31
  415fce:	f844 3c04 	str.w	r3, [r4, #-4]
            e_next = ent_get_next(e_next);
  415fd2:	4b07      	ldr	r3, [pc, #28]	; (415ff0 <lv_mem_free+0x6c>)
  415fd4:	4798      	blx	r3
  415fd6:	e7eb      	b.n	415fb0 <lv_mem_free+0x2c>
  415fd8:	bd10      	pop	{r4, pc}
        full_defrag_cnt = 0;
  415fda:	2200      	movs	r2, #0
  415fdc:	4b03      	ldr	r3, [pc, #12]	; (415fec <lv_mem_free+0x68>)
  415fde:	801a      	strh	r2, [r3, #0]
        lv_mem_defrag();
  415fe0:	4b04      	ldr	r3, [pc, #16]	; (415ff4 <lv_mem_free+0x70>)
  415fe2:	4798      	blx	r3
  415fe4:	bd10      	pop	{r4, pc}
  415fe6:	4770      	bx	lr
  415fe8:	20414788 	.word	0x20414788
  415fec:	2040c75c 	.word	0x2040c75c
  415ff0:	00415df9 	.word	0x00415df9
  415ff4:	00415f2d 	.word	0x00415f2d

00415ff8 <_lv_mem_get_size>:
    if(data == NULL) return 0;
  415ff8:	b138      	cbz	r0, 41600a <_lv_mem_get_size+0x12>
    if(data == &zero_mem) return 0;
  415ffa:	4a06      	ldr	r2, [pc, #24]	; (416014 <_lv_mem_get_size+0x1c>)
  415ffc:	4290      	cmp	r0, r2
  415ffe:	d006      	beq.n	41600e <_lv_mem_get_size+0x16>
    return e->header.s.d_size;
  416000:	f850 0c04 	ldr.w	r0, [r0, #-4]
  416004:	f3c0 005e 	ubfx	r0, r0, #1, #31
  416008:	4770      	bx	lr
    if(data == NULL) return 0;
  41600a:	2000      	movs	r0, #0
  41600c:	4770      	bx	lr
    if(data == &zero_mem) return 0;
  41600e:	2000      	movs	r0, #0
}
  416010:	4770      	bx	lr
  416012:	bf00      	nop
  416014:	20414788 	.word	0x20414788

00416018 <_lv_mem_buf_release>:
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416018:	2300      	movs	r3, #0
  41601a:	2b01      	cmp	r3, #1
  41601c:	d810      	bhi.n	416040 <_lv_mem_buf_release+0x28>
        if(mem_buf_small[i].p == p) {
  41601e:	4619      	mov	r1, r3
  416020:	4a12      	ldr	r2, [pc, #72]	; (41606c <_lv_mem_buf_release+0x54>)
  416022:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  416026:	4282      	cmp	r2, r0
  416028:	d002      	beq.n	416030 <_lv_mem_buf_release+0x18>
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  41602a:	3301      	adds	r3, #1
  41602c:	b2db      	uxtb	r3, r3
  41602e:	e7f4      	b.n	41601a <_lv_mem_buf_release+0x2>
            mem_buf_small[i].used = 0;
  416030:	4b0e      	ldr	r3, [pc, #56]	; (41606c <_lv_mem_buf_release+0x54>)
  416032:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  416036:	798b      	ldrb	r3, [r1, #6]
  416038:	f36f 0300 	bfc	r3, #0, #1
  41603c:	718b      	strb	r3, [r1, #6]
            return;
  41603e:	4770      	bx	lr
  416040:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416042:	2b0f      	cmp	r3, #15
  416044:	d810      	bhi.n	416068 <_lv_mem_buf_release+0x50>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
  416046:	4619      	mov	r1, r3
  416048:	4a09      	ldr	r2, [pc, #36]	; (416070 <_lv_mem_buf_release+0x58>)
  41604a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
  41604e:	4290      	cmp	r0, r2
  416050:	d002      	beq.n	416058 <_lv_mem_buf_release+0x40>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416052:	3301      	adds	r3, #1
  416054:	b2db      	uxtb	r3, r3
  416056:	e7f4      	b.n	416042 <_lv_mem_buf_release+0x2a>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  416058:	4b05      	ldr	r3, [pc, #20]	; (416070 <_lv_mem_buf_release+0x58>)
  41605a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
  41605e:	798b      	ldrb	r3, [r1, #6]
  416060:	f36f 0300 	bfc	r3, #0, #1
  416064:	718b      	strb	r3, [r1, #6]
            return;
  416066:	4770      	bx	lr
  416068:	4770      	bx	lr
  41606a:	bf00      	nop
  41606c:	20400040 	.word	0x20400040
  416070:	2043a1d0 	.word	0x2043a1d0

00416074 <_lv_mem_buf_free_all>:
{
  416074:	b510      	push	{r4, lr}
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416076:	2300      	movs	r3, #0
  416078:	e008      	b.n	41608c <_lv_mem_buf_free_all+0x18>
        mem_buf_small[i].used = 0;
  41607a:	4a12      	ldr	r2, [pc, #72]	; (4160c4 <_lv_mem_buf_free_all+0x50>)
  41607c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416080:	7991      	ldrb	r1, [r2, #6]
  416082:	f36f 0100 	bfc	r1, #0, #1
  416086:	7191      	strb	r1, [r2, #6]
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  416088:	3301      	adds	r3, #1
  41608a:	b2db      	uxtb	r3, r3
  41608c:	2b01      	cmp	r3, #1
  41608e:	d9f4      	bls.n	41607a <_lv_mem_buf_free_all+0x6>
  416090:	2400      	movs	r4, #0
  416092:	e001      	b.n	416098 <_lv_mem_buf_free_all+0x24>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416094:	3401      	adds	r4, #1
  416096:	b2e4      	uxtb	r4, r4
  416098:	2c0f      	cmp	r4, #15
  41609a:	d812      	bhi.n	4160c2 <_lv_mem_buf_free_all+0x4e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
  41609c:	4b0a      	ldr	r3, [pc, #40]	; (4160c8 <_lv_mem_buf_free_all+0x54>)
  41609e:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
  4160a2:	2800      	cmp	r0, #0
  4160a4:	d0f6      	beq.n	416094 <_lv_mem_buf_free_all+0x20>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
  4160a6:	4b09      	ldr	r3, [pc, #36]	; (4160cc <_lv_mem_buf_free_all+0x58>)
  4160a8:	4798      	blx	r3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
  4160aa:	4b07      	ldr	r3, [pc, #28]	; (4160c8 <_lv_mem_buf_free_all+0x54>)
  4160ac:	2200      	movs	r2, #0
  4160ae:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
  4160b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  4160b6:	7999      	ldrb	r1, [r3, #6]
  4160b8:	f362 0100 	bfi	r1, r2, #0, #1
  4160bc:	7199      	strb	r1, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
  4160be:	809a      	strh	r2, [r3, #4]
  4160c0:	e7e8      	b.n	416094 <_lv_mem_buf_free_all+0x20>
}
  4160c2:	bd10      	pop	{r4, pc}
  4160c4:	20400040 	.word	0x20400040
  4160c8:	2043a1d0 	.word	0x2043a1d0
  4160cc:	00415f85 	.word	0x00415f85

004160d0 <_lv_memcpy>:
{
  4160d0:	b430      	push	{r4, r5}
    lv_uintptr_t d_align = (lv_uintptr_t)d8 & ALIGN_MASK;
  4160d2:	f000 0403 	and.w	r4, r0, #3
    lv_uintptr_t s_align = (lv_uintptr_t)s8 & ALIGN_MASK;
  4160d6:	f001 0303 	and.w	r3, r1, #3
    if(s_align != d_align) {
  4160da:	429c      	cmp	r4, r3
  4160dc:	d050      	beq.n	416180 <_lv_memcpy+0xb0>
  4160de:	4603      	mov	r3, r0
  4160e0:	e042      	b.n	416168 <_lv_memcpy+0x98>
            REPEAT8(COPY8);
  4160e2:	780c      	ldrb	r4, [r1, #0]
  4160e4:	701c      	strb	r4, [r3, #0]
  4160e6:	784c      	ldrb	r4, [r1, #1]
  4160e8:	705c      	strb	r4, [r3, #1]
  4160ea:	788c      	ldrb	r4, [r1, #2]
  4160ec:	709c      	strb	r4, [r3, #2]
  4160ee:	78cc      	ldrb	r4, [r1, #3]
  4160f0:	70dc      	strb	r4, [r3, #3]
  4160f2:	790c      	ldrb	r4, [r1, #4]
  4160f4:	711c      	strb	r4, [r3, #4]
  4160f6:	794c      	ldrb	r4, [r1, #5]
  4160f8:	715c      	strb	r4, [r3, #5]
  4160fa:	798c      	ldrb	r4, [r1, #6]
  4160fc:	719c      	strb	r4, [r3, #6]
  4160fe:	79cc      	ldrb	r4, [r1, #7]
  416100:	71dc      	strb	r4, [r3, #7]
            REPEAT8(COPY8);
  416102:	7a0c      	ldrb	r4, [r1, #8]
  416104:	721c      	strb	r4, [r3, #8]
  416106:	7a4c      	ldrb	r4, [r1, #9]
  416108:	725c      	strb	r4, [r3, #9]
  41610a:	7a8c      	ldrb	r4, [r1, #10]
  41610c:	729c      	strb	r4, [r3, #10]
  41610e:	7acc      	ldrb	r4, [r1, #11]
  416110:	72dc      	strb	r4, [r3, #11]
  416112:	7b0c      	ldrb	r4, [r1, #12]
  416114:	731c      	strb	r4, [r3, #12]
  416116:	7b4c      	ldrb	r4, [r1, #13]
  416118:	735c      	strb	r4, [r3, #13]
  41611a:	7b8c      	ldrb	r4, [r1, #14]
  41611c:	739c      	strb	r4, [r3, #14]
  41611e:	7bcc      	ldrb	r4, [r1, #15]
  416120:	73dc      	strb	r4, [r3, #15]
            REPEAT8(COPY8);
  416122:	7c0c      	ldrb	r4, [r1, #16]
  416124:	741c      	strb	r4, [r3, #16]
  416126:	7c4c      	ldrb	r4, [r1, #17]
  416128:	745c      	strb	r4, [r3, #17]
  41612a:	7c8c      	ldrb	r4, [r1, #18]
  41612c:	749c      	strb	r4, [r3, #18]
  41612e:	7ccc      	ldrb	r4, [r1, #19]
  416130:	74dc      	strb	r4, [r3, #19]
  416132:	7d0c      	ldrb	r4, [r1, #20]
  416134:	751c      	strb	r4, [r3, #20]
  416136:	7d4c      	ldrb	r4, [r1, #21]
  416138:	755c      	strb	r4, [r3, #21]
  41613a:	7d8c      	ldrb	r4, [r1, #22]
  41613c:	759c      	strb	r4, [r3, #22]
  41613e:	7dcc      	ldrb	r4, [r1, #23]
  416140:	75dc      	strb	r4, [r3, #23]
            REPEAT8(COPY8);
  416142:	7e0c      	ldrb	r4, [r1, #24]
  416144:	761c      	strb	r4, [r3, #24]
  416146:	7e4c      	ldrb	r4, [r1, #25]
  416148:	765c      	strb	r4, [r3, #25]
  41614a:	7e8c      	ldrb	r4, [r1, #26]
  41614c:	769c      	strb	r4, [r3, #26]
  41614e:	7ecc      	ldrb	r4, [r1, #27]
  416150:	76dc      	strb	r4, [r3, #27]
  416152:	7f0c      	ldrb	r4, [r1, #28]
  416154:	771c      	strb	r4, [r3, #28]
  416156:	7f4c      	ldrb	r4, [r1, #29]
  416158:	775c      	strb	r4, [r3, #29]
  41615a:	7f8c      	ldrb	r4, [r1, #30]
  41615c:	779c      	strb	r4, [r3, #30]
  41615e:	7fcc      	ldrb	r4, [r1, #31]
  416160:	77dc      	strb	r4, [r3, #31]
  416162:	3320      	adds	r3, #32
  416164:	3120      	adds	r1, #32
            len -= 32;
  416166:	3a20      	subs	r2, #32
        while(len > 32) {
  416168:	2a20      	cmp	r2, #32
  41616a:	d8ba      	bhi.n	4160e2 <_lv_memcpy+0x12>
  41616c:	e004      	b.n	416178 <_lv_memcpy+0xa8>
            COPY8
  41616e:	f811 4b01 	ldrb.w	r4, [r1], #1
  416172:	f803 4b01 	strb.w	r4, [r3], #1
            len--;
  416176:	3a01      	subs	r2, #1
        while(len) {
  416178:	2a00      	cmp	r2, #0
  41617a:	d1f8      	bne.n	41616e <_lv_memcpy+0x9e>
}
  41617c:	bc30      	pop	{r4, r5}
  41617e:	4770      	bx	lr
    if(d_align) {
  416180:	b174      	cbz	r4, 4161a0 <_lv_memcpy+0xd0>
        d_align = ALIGN_MASK + 1 - d_align;
  416182:	f1c4 0404 	rsb	r4, r4, #4
    uint8_t * d8 = dst;
  416186:	4603      	mov	r3, r0
        while(d_align && len) {
  416188:	e005      	b.n	416196 <_lv_memcpy+0xc6>
            COPY8;
  41618a:	f811 5b01 	ldrb.w	r5, [r1], #1
  41618e:	f803 5b01 	strb.w	r5, [r3], #1
            d_align--;
  416192:	3c01      	subs	r4, #1
            len--;
  416194:	3a01      	subs	r2, #1
        while(d_align && len) {
  416196:	2c00      	cmp	r4, #0
  416198:	bf18      	it	ne
  41619a:	2a00      	cmpne	r2, #0
  41619c:	d1f5      	bne.n	41618a <_lv_memcpy+0xba>
  41619e:	e014      	b.n	4161ca <_lv_memcpy+0xfa>
    uint8_t * d8 = dst;
  4161a0:	4603      	mov	r3, r0
  4161a2:	e012      	b.n	4161ca <_lv_memcpy+0xfa>
        REPEAT8(COPY32)
  4161a4:	680c      	ldr	r4, [r1, #0]
  4161a6:	601c      	str	r4, [r3, #0]
  4161a8:	684c      	ldr	r4, [r1, #4]
  4161aa:	605c      	str	r4, [r3, #4]
  4161ac:	688c      	ldr	r4, [r1, #8]
  4161ae:	609c      	str	r4, [r3, #8]
  4161b0:	68cc      	ldr	r4, [r1, #12]
  4161b2:	60dc      	str	r4, [r3, #12]
  4161b4:	690c      	ldr	r4, [r1, #16]
  4161b6:	611c      	str	r4, [r3, #16]
  4161b8:	694c      	ldr	r4, [r1, #20]
  4161ba:	615c      	str	r4, [r3, #20]
  4161bc:	698c      	ldr	r4, [r1, #24]
  4161be:	619c      	str	r4, [r3, #24]
  4161c0:	69cc      	ldr	r4, [r1, #28]
  4161c2:	61dc      	str	r4, [r3, #28]
  4161c4:	3320      	adds	r3, #32
  4161c6:	3120      	adds	r1, #32
        len -= 32;
  4161c8:	3a20      	subs	r2, #32
    while(len > 32) {
  4161ca:	2a20      	cmp	r2, #32
  4161cc:	d8ea      	bhi.n	4161a4 <_lv_memcpy+0xd4>
  4161ce:	e004      	b.n	4161da <_lv_memcpy+0x10a>
        COPY32;
  4161d0:	f851 4b04 	ldr.w	r4, [r1], #4
  4161d4:	f843 4b04 	str.w	r4, [r3], #4
        len -= 4;
  4161d8:	3a04      	subs	r2, #4
    while(len > 4) {
  4161da:	2a04      	cmp	r2, #4
  4161dc:	d8f8      	bhi.n	4161d0 <_lv_memcpy+0x100>
  4161de:	e004      	b.n	4161ea <_lv_memcpy+0x11a>
        COPY8
  4161e0:	f811 4b01 	ldrb.w	r4, [r1], #1
  4161e4:	f803 4b01 	strb.w	r4, [r3], #1
        len--;
  4161e8:	3a01      	subs	r2, #1
    while(len) {
  4161ea:	2a00      	cmp	r2, #0
  4161ec:	d1f8      	bne.n	4161e0 <_lv_memcpy+0x110>
  4161ee:	e7c5      	b.n	41617c <_lv_memcpy+0xac>

004161f0 <lv_mem_realloc>:
{
  4161f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    new_size = (new_size + ALIGN_MASK) & (~ALIGN_MASK);
  4161f2:	3103      	adds	r1, #3
  4161f4:	f021 0403 	bic.w	r4, r1, #3
    if(data_p != NULL) {
  4161f8:	4605      	mov	r5, r0
  4161fa:	b128      	cbz	r0, 416208 <lv_mem_realloc+0x18>
        if(e->header.s.used == 0) {
  4161fc:	f810 3c04 	ldrb.w	r3, [r0, #-4]
  416200:	f013 0f01 	tst.w	r3, #1
  416204:	d100      	bne.n	416208 <lv_mem_realloc+0x18>
            data_p = NULL;
  416206:	2500      	movs	r5, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
  416208:	4628      	mov	r0, r5
  41620a:	4b12      	ldr	r3, [pc, #72]	; (416254 <lv_mem_realloc+0x64>)
  41620c:	4798      	blx	r3
  41620e:	4606      	mov	r6, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  416210:	4284      	cmp	r4, r0
  416212:	d01d      	beq.n	416250 <lv_mem_realloc+0x60>
    if(new_size < old_size) {
  416214:	d30e      	bcc.n	416234 <lv_mem_realloc+0x44>
    new_p = lv_mem_alloc(new_size);
  416216:	4620      	mov	r0, r4
  416218:	4b0f      	ldr	r3, [pc, #60]	; (416258 <lv_mem_realloc+0x68>)
  41621a:	4798      	blx	r3
    if(new_p == NULL) {
  41621c:	4607      	mov	r7, r0
  41621e:	b138      	cbz	r0, 416230 <lv_mem_realloc+0x40>
    if(data_p != NULL) {
  416220:	b135      	cbz	r5, 416230 <lv_mem_realloc+0x40>
        if(old_size != 0 && new_size != 0) {
  416222:	2e00      	cmp	r6, #0
  416224:	bf18      	it	ne
  416226:	2c00      	cmpne	r4, #0
  416228:	d10a      	bne.n	416240 <lv_mem_realloc+0x50>
        lv_mem_free(data_p);
  41622a:	4628      	mov	r0, r5
  41622c:	4b0b      	ldr	r3, [pc, #44]	; (41625c <lv_mem_realloc+0x6c>)
  41622e:	4798      	blx	r3
}
  416230:	4638      	mov	r0, r7
  416232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ent_trunc(e, new_size);
  416234:	4621      	mov	r1, r4
  416236:	1f28      	subs	r0, r5, #4
  416238:	4b09      	ldr	r3, [pc, #36]	; (416260 <lv_mem_realloc+0x70>)
  41623a:	4798      	blx	r3
        return &e->first_data;
  41623c:	462f      	mov	r7, r5
  41623e:	e7f7      	b.n	416230 <lv_mem_realloc+0x40>
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
  416240:	4622      	mov	r2, r4
  416242:	42b4      	cmp	r4, r6
  416244:	bf28      	it	cs
  416246:	4632      	movcs	r2, r6
  416248:	4629      	mov	r1, r5
  41624a:	4b06      	ldr	r3, [pc, #24]	; (416264 <lv_mem_realloc+0x74>)
  41624c:	4798      	blx	r3
  41624e:	e7ec      	b.n	41622a <lv_mem_realloc+0x3a>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
  416250:	462f      	mov	r7, r5
  416252:	e7ed      	b.n	416230 <lv_mem_realloc+0x40>
  416254:	00415ff9 	.word	0x00415ff9
  416258:	00415ec1 	.word	0x00415ec1
  41625c:	00415f85 	.word	0x00415f85
  416260:	00415e25 	.word	0x00415e25
  416264:	004160d1 	.word	0x004160d1

00416268 <_lv_mem_buf_get>:
{
  416268:	b538      	push	{r3, r4, r5, lr}
    if(size == 0) return NULL;
  41626a:	2800      	cmp	r0, #0
  41626c:	f000 8085 	beq.w	41637a <_lv_mem_buf_get+0x112>
  416270:	4604      	mov	r4, r0
    if(size <= MEM_BUF_SMALL_SIZE) {
  416272:	2810      	cmp	r0, #16
  416274:	d91d      	bls.n	4162b2 <_lv_mem_buf_get+0x4a>
  416276:	f04f 31ff 	mov.w	r1, #4294967295
  41627a:	2300      	movs	r3, #0
  41627c:	e028      	b.n	4162d0 <_lv_mem_buf_get+0x68>
            if(mem_buf_small[i].used == 0) {
  41627e:	4619      	mov	r1, r3
  416280:	4a3f      	ldr	r2, [pc, #252]	; (416380 <_lv_mem_buf_get+0x118>)
  416282:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416286:	7992      	ldrb	r2, [r2, #6]
  416288:	f012 0f01 	tst.w	r2, #1
  41628c:	d007      	beq.n	41629e <_lv_mem_buf_get+0x36>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
  41628e:	3301      	adds	r3, #1
  416290:	b2db      	uxtb	r3, r3
  416292:	2b01      	cmp	r3, #1
  416294:	d9f3      	bls.n	41627e <_lv_mem_buf_get+0x16>
  416296:	f04f 31ff 	mov.w	r1, #4294967295
  41629a:	2300      	movs	r3, #0
  41629c:	e018      	b.n	4162d0 <_lv_mem_buf_get+0x68>
                mem_buf_small[i].used = 1;
  41629e:	4a38      	ldr	r2, [pc, #224]	; (416380 <_lv_mem_buf_get+0x118>)
  4162a0:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
  4162a4:	7983      	ldrb	r3, [r0, #6]
  4162a6:	f043 0301 	orr.w	r3, r3, #1
  4162aa:	7183      	strb	r3, [r0, #6]
                return mem_buf_small[i].p;
  4162ac:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
  4162b0:	e034      	b.n	41631c <_lv_mem_buf_get+0xb4>
  4162b2:	2300      	movs	r3, #0
  4162b4:	e7ed      	b.n	416292 <_lv_mem_buf_get+0x2a>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  4162b6:	4a33      	ldr	r2, [pc, #204]	; (416384 <_lv_mem_buf_get+0x11c>)
  4162b8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
  4162bc:	798b      	ldrb	r3, [r1, #6]
  4162be:	f043 0301 	orr.w	r3, r3, #1
  4162c2:	718b      	strb	r3, [r1, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
  4162c4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
  4162c8:	e028      	b.n	41631c <_lv_mem_buf_get+0xb4>
                i_guess = i;
  4162ca:	b259      	sxtb	r1, r3
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  4162cc:	3301      	adds	r3, #1
  4162ce:	b2db      	uxtb	r3, r3
  4162d0:	2b0f      	cmp	r3, #15
  4162d2:	d818      	bhi.n	416306 <_lv_mem_buf_get+0x9e>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
  4162d4:	4618      	mov	r0, r3
  4162d6:	4a2b      	ldr	r2, [pc, #172]	; (416384 <_lv_mem_buf_get+0x11c>)
  4162d8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4162dc:	7992      	ldrb	r2, [r2, #6]
  4162de:	f012 0f01 	tst.w	r2, #1
  4162e2:	d1f3      	bne.n	4162cc <_lv_mem_buf_get+0x64>
  4162e4:	4a27      	ldr	r2, [pc, #156]	; (416384 <_lv_mem_buf_get+0x11c>)
  4162e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  4162ea:	8892      	ldrh	r2, [r2, #4]
  4162ec:	4294      	cmp	r4, r2
  4162ee:	d8ed      	bhi.n	4162cc <_lv_mem_buf_get+0x64>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
  4162f0:	d0e1      	beq.n	4162b6 <_lv_mem_buf_get+0x4e>
            else if(i_guess < 0) {
  4162f2:	2900      	cmp	r1, #0
  4162f4:	dbe9      	blt.n	4162ca <_lv_mem_buf_get+0x62>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
  4162f6:	4823      	ldr	r0, [pc, #140]	; (416384 <_lv_mem_buf_get+0x11c>)
  4162f8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  4162fc:	8880      	ldrh	r0, [r0, #4]
  4162fe:	4282      	cmp	r2, r0
  416300:	d2e4      	bcs.n	4162cc <_lv_mem_buf_get+0x64>
                i_guess = i;
  416302:	b259      	sxtb	r1, r3
  416304:	e7e2      	b.n	4162cc <_lv_mem_buf_get+0x64>
    if(i_guess >= 0) {
  416306:	2900      	cmp	r1, #0
  416308:	db23      	blt.n	416352 <_lv_mem_buf_get+0xea>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
  41630a:	4a1e      	ldr	r2, [pc, #120]	; (416384 <_lv_mem_buf_get+0x11c>)
  41630c:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
  416310:	7983      	ldrb	r3, [r0, #6]
  416312:	f043 0301 	orr.w	r3, r3, #1
  416316:	7183      	strb	r3, [r0, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
  416318:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
}
  41631c:	4618      	mov	r0, r3
  41631e:	bd38      	pop	{r3, r4, r5, pc}
            void * buf = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
  416320:	4621      	mov	r1, r4
  416322:	4b18      	ldr	r3, [pc, #96]	; (416384 <_lv_mem_buf_get+0x11c>)
  416324:	f853 0035 	ldr.w	r0, [r3, r5, lsl #3]
  416328:	4b17      	ldr	r3, [pc, #92]	; (416388 <_lv_mem_buf_get+0x120>)
  41632a:	4798      	blx	r3
            if(buf == NULL) {
  41632c:	4603      	mov	r3, r0
  41632e:	b150      	cbz	r0, 416346 <_lv_mem_buf_get+0xde>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
  416330:	4814      	ldr	r0, [pc, #80]	; (416384 <_lv_mem_buf_get+0x11c>)
  416332:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
  416336:	7991      	ldrb	r1, [r2, #6]
  416338:	f041 0101 	orr.w	r1, r1, #1
  41633c:	7191      	strb	r1, [r2, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
  41633e:	8094      	strh	r4, [r2, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p    = buf;
  416340:	f840 3035 	str.w	r3, [r0, r5, lsl #3]
            return LV_GC_ROOT(_lv_mem_buf[i]).p;
  416344:	e7ea      	b.n	41631c <_lv_mem_buf_get+0xb4>
                LV_DEBUG_ASSERT(false, "Out of memory, can't allocate a new buffer (increase your LV_MEM_SIZE/heap size)", 0x00);
  416346:	2200      	movs	r2, #0
  416348:	2300      	movs	r3, #0
  41634a:	4810      	ldr	r0, [pc, #64]	; (41638c <_lv_mem_buf_get+0x124>)
  41634c:	4910      	ldr	r1, [pc, #64]	; (416390 <_lv_mem_buf_get+0x128>)
  41634e:	4788      	blx	r1
  416350:	e7fe      	b.n	416350 <_lv_mem_buf_get+0xe8>
  416352:	2300      	movs	r3, #0
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416354:	2b0f      	cmp	r3, #15
  416356:	d80a      	bhi.n	41636e <_lv_mem_buf_get+0x106>
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
  416358:	461d      	mov	r5, r3
  41635a:	4a0a      	ldr	r2, [pc, #40]	; (416384 <_lv_mem_buf_get+0x11c>)
  41635c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
  416360:	7992      	ldrb	r2, [r2, #6]
  416362:	f012 0f01 	tst.w	r2, #1
  416366:	d0db      	beq.n	416320 <_lv_mem_buf_get+0xb8>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
  416368:	3301      	adds	r3, #1
  41636a:	b2db      	uxtb	r3, r3
  41636c:	e7f2      	b.n	416354 <_lv_mem_buf_get+0xec>
    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_MEM_BUF_MAX_NUM.", 0x00);
  41636e:	2200      	movs	r2, #0
  416370:	2300      	movs	r3, #0
  416372:	4808      	ldr	r0, [pc, #32]	; (416394 <_lv_mem_buf_get+0x12c>)
  416374:	4906      	ldr	r1, [pc, #24]	; (416390 <_lv_mem_buf_get+0x128>)
  416376:	4788      	blx	r1
  416378:	e7fe      	b.n	416378 <_lv_mem_buf_get+0x110>
    if(size == 0) return NULL;
  41637a:	2300      	movs	r3, #0
  41637c:	e7ce      	b.n	41631c <_lv_mem_buf_get+0xb4>
  41637e:	bf00      	nop
  416380:	20400040 	.word	0x20400040
  416384:	2043a1d0 	.word	0x2043a1d0
  416388:	004161f1 	.word	0x004161f1
  41638c:	0042973c 	.word	0x0042973c
  416390:	004157c5 	.word	0x004157c5
  416394:	00429790 	.word	0x00429790

00416398 <_lv_memset>:
    if(d_align) {
  416398:	f010 0303 	ands.w	r3, r0, #3
  41639c:	d00a      	beq.n	4163b4 <_lv_memset+0x1c>
        d_align = ALIGN_MASK + 1 - d_align;
  41639e:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  4163a2:	e003      	b.n	4163ac <_lv_memset+0x14>
            SET8(v);
  4163a4:	f800 1b01 	strb.w	r1, [r0], #1
            len--;
  4163a8:	3a01      	subs	r2, #1
            d_align--;
  4163aa:	3b01      	subs	r3, #1
        while(d_align && len) {
  4163ac:	2b00      	cmp	r3, #0
  4163ae:	bf18      	it	ne
  4163b0:	2a00      	cmpne	r2, #0
  4163b2:	d1f7      	bne.n	4163a4 <_lv_memset+0xc>
    uint32_t v32 = v + (v << 8) + (v << 16) + (v << 24);
  4163b4:	eb01 2301 	add.w	r3, r1, r1, lsl #8
  4163b8:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4163bc:	eb03 6301 	add.w	r3, r3, r1, lsl #24
    while(len > 32) {
  4163c0:	e009      	b.n	4163d6 <_lv_memset+0x3e>
        REPEAT8(SET32(v32));
  4163c2:	6003      	str	r3, [r0, #0]
  4163c4:	6043      	str	r3, [r0, #4]
  4163c6:	6083      	str	r3, [r0, #8]
  4163c8:	60c3      	str	r3, [r0, #12]
  4163ca:	6103      	str	r3, [r0, #16]
  4163cc:	6143      	str	r3, [r0, #20]
  4163ce:	6183      	str	r3, [r0, #24]
  4163d0:	61c3      	str	r3, [r0, #28]
  4163d2:	3020      	adds	r0, #32
        len -= 32;
  4163d4:	3a20      	subs	r2, #32
    while(len > 32) {
  4163d6:	2a20      	cmp	r2, #32
  4163d8:	d8f3      	bhi.n	4163c2 <_lv_memset+0x2a>
  4163da:	e002      	b.n	4163e2 <_lv_memset+0x4a>
        SET32(v32);
  4163dc:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  4163e0:	3a04      	subs	r2, #4
    while(len > 4) {
  4163e2:	2a04      	cmp	r2, #4
  4163e4:	d8fa      	bhi.n	4163dc <_lv_memset+0x44>
  4163e6:	e002      	b.n	4163ee <_lv_memset+0x56>
        SET8(v);
  4163e8:	f800 1b01 	strb.w	r1, [r0], #1
        len--;
  4163ec:	3a01      	subs	r2, #1
    while(len) {
  4163ee:	2a00      	cmp	r2, #0
  4163f0:	d1fa      	bne.n	4163e8 <_lv_memset+0x50>
}
  4163f2:	4770      	bx	lr

004163f4 <_lv_memset_00>:
    if(d_align) {
  4163f4:	f010 0303 	ands.w	r3, r0, #3
  4163f8:	d017      	beq.n	41642a <_lv_memset_00+0x36>
        d_align = ALIGN_MASK + 1 - d_align;
  4163fa:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  4163fe:	e004      	b.n	41640a <_lv_memset_00+0x16>
            SET8(0);
  416400:	2200      	movs	r2, #0
  416402:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  416406:	3901      	subs	r1, #1
            d_align--;
  416408:	3b01      	subs	r3, #1
        while(d_align && len) {
  41640a:	2b00      	cmp	r3, #0
  41640c:	bf18      	it	ne
  41640e:	2900      	cmpne	r1, #0
  416410:	d1f6      	bne.n	416400 <_lv_memset_00+0xc>
  416412:	e00a      	b.n	41642a <_lv_memset_00+0x36>
        REPEAT8(SET32(0));
  416414:	2300      	movs	r3, #0
  416416:	6003      	str	r3, [r0, #0]
  416418:	6043      	str	r3, [r0, #4]
  41641a:	6083      	str	r3, [r0, #8]
  41641c:	60c3      	str	r3, [r0, #12]
  41641e:	6103      	str	r3, [r0, #16]
  416420:	6143      	str	r3, [r0, #20]
  416422:	6183      	str	r3, [r0, #24]
  416424:	61c3      	str	r3, [r0, #28]
  416426:	3020      	adds	r0, #32
        len -= 32;
  416428:	3920      	subs	r1, #32
    while(len > 32) {
  41642a:	2920      	cmp	r1, #32
  41642c:	d8f2      	bhi.n	416414 <_lv_memset_00+0x20>
  41642e:	e003      	b.n	416438 <_lv_memset_00+0x44>
        SET32(0);
  416430:	2300      	movs	r3, #0
  416432:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416436:	3904      	subs	r1, #4
    while(len > 4) {
  416438:	2904      	cmp	r1, #4
  41643a:	d8f9      	bhi.n	416430 <_lv_memset_00+0x3c>
  41643c:	e003      	b.n	416446 <_lv_memset_00+0x52>
        SET8(0);
  41643e:	2300      	movs	r3, #0
  416440:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  416444:	3901      	subs	r1, #1
    while(len) {
  416446:	2900      	cmp	r1, #0
  416448:	d1f9      	bne.n	41643e <_lv_memset_00+0x4a>
}
  41644a:	4770      	bx	lr

0041644c <_lv_memset_ff>:
    if(d_align) {
  41644c:	f010 0303 	ands.w	r3, r0, #3
  416450:	d018      	beq.n	416484 <_lv_memset_ff+0x38>
        d_align = ALIGN_MASK + 1 - d_align;
  416452:	f1c3 0304 	rsb	r3, r3, #4
        while(d_align && len) {
  416456:	e004      	b.n	416462 <_lv_memset_ff+0x16>
            SET8(0xFF);
  416458:	22ff      	movs	r2, #255	; 0xff
  41645a:	f800 2b01 	strb.w	r2, [r0], #1
            len--;
  41645e:	3901      	subs	r1, #1
            d_align--;
  416460:	3b01      	subs	r3, #1
        while(d_align && len) {
  416462:	2b00      	cmp	r3, #0
  416464:	bf18      	it	ne
  416466:	2900      	cmpne	r1, #0
  416468:	d1f6      	bne.n	416458 <_lv_memset_ff+0xc>
  41646a:	e00b      	b.n	416484 <_lv_memset_ff+0x38>
        REPEAT8(SET32(0xFFFFFFFF));
  41646c:	f04f 33ff 	mov.w	r3, #4294967295
  416470:	6003      	str	r3, [r0, #0]
  416472:	6043      	str	r3, [r0, #4]
  416474:	6083      	str	r3, [r0, #8]
  416476:	60c3      	str	r3, [r0, #12]
  416478:	6103      	str	r3, [r0, #16]
  41647a:	6143      	str	r3, [r0, #20]
  41647c:	6183      	str	r3, [r0, #24]
  41647e:	61c3      	str	r3, [r0, #28]
  416480:	3020      	adds	r0, #32
        len -= 32;
  416482:	3920      	subs	r1, #32
    while(len > 32) {
  416484:	2920      	cmp	r1, #32
  416486:	d8f1      	bhi.n	41646c <_lv_memset_ff+0x20>
  416488:	e004      	b.n	416494 <_lv_memset_ff+0x48>
        SET32(0xFFFFFFFF);
  41648a:	f04f 33ff 	mov.w	r3, #4294967295
  41648e:	f840 3b04 	str.w	r3, [r0], #4
        len -= 4;
  416492:	3904      	subs	r1, #4
    while(len > 4) {
  416494:	2904      	cmp	r1, #4
  416496:	d8f8      	bhi.n	41648a <_lv_memset_ff+0x3e>
  416498:	e003      	b.n	4164a2 <_lv_memset_ff+0x56>
        SET8(0xFF);
  41649a:	23ff      	movs	r3, #255	; 0xff
  41649c:	f800 3b01 	strb.w	r3, [r0], #1
        len--;
  4164a0:	3901      	subs	r1, #1
    while(len) {
  4164a2:	2900      	cmp	r1, #0
  4164a4:	d1f9      	bne.n	41649a <_lv_memset_ff+0x4e>
}
  4164a6:	4770      	bx	lr

004164a8 <lv_task_time_remaining>:
 * Find out how much time remains before a task must be run.
 * @param task pointer to lv_task
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
  4164a8:	b510      	push	{r4, lr}
  4164aa:	4604      	mov	r4, r0
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
  4164ac:	6840      	ldr	r0, [r0, #4]
  4164ae:	4b04      	ldr	r3, [pc, #16]	; (4164c0 <lv_task_time_remaining+0x18>)
  4164b0:	4798      	blx	r3
    if(elp >= task->period)
  4164b2:	6823      	ldr	r3, [r4, #0]
  4164b4:	4298      	cmp	r0, r3
  4164b6:	d201      	bcs.n	4164bc <lv_task_time_remaining+0x14>
        return 0;
    return task->period - elp;
  4164b8:	1a18      	subs	r0, r3, r0
  4164ba:	bd10      	pop	{r4, pc}
        return 0;
  4164bc:	2000      	movs	r0, #0
}
  4164be:	bd10      	pop	{r4, pc}
  4164c0:	00414a59 	.word	0x00414a59

004164c4 <lv_task_create>:
{
  4164c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4164c8:	4607      	mov	r7, r0
  4164ca:	4688      	mov	r8, r1
  4164cc:	4615      	mov	r5, r2
  4164ce:	461e      	mov	r6, r3
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  4164d0:	4831      	ldr	r0, [pc, #196]	; (416598 <lv_task_create+0xd4>)
  4164d2:	4b32      	ldr	r3, [pc, #200]	; (41659c <lv_task_create+0xd8>)
  4164d4:	4798      	blx	r3
    if(NULL == tmp) {
  4164d6:	4604      	mov	r4, r0
  4164d8:	b338      	cbz	r0, 41652a <lv_task_create+0x66>
            if(tmp->prio <= prio) {
  4164da:	7d23      	ldrb	r3, [r4, #20]
  4164dc:	f003 0307 	and.w	r3, r3, #7
  4164e0:	42ab      	cmp	r3, r5
  4164e2:	dd32      	ble.n	41654a <lv_task_create+0x86>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  4164e4:	4621      	mov	r1, r4
  4164e6:	482c      	ldr	r0, [pc, #176]	; (416598 <lv_task_create+0xd4>)
  4164e8:	4b2d      	ldr	r3, [pc, #180]	; (4165a0 <lv_task_create+0xdc>)
  4164ea:	4798      	blx	r3
        } while(tmp != NULL);
  4164ec:	4604      	mov	r4, r0
  4164ee:	2800      	cmp	r0, #0
  4164f0:	d1f3      	bne.n	4164da <lv_task_create+0x16>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
  4164f2:	4603      	mov	r3, r0
        if(tmp == NULL) {
  4164f4:	2b00      	cmp	r3, #0
  4164f6:	d03c      	beq.n	416572 <lv_task_create+0xae>
    task_list_changed = true;
  4164f8:	f04f 0901 	mov.w	r9, #1
  4164fc:	4b29      	ldr	r3, [pc, #164]	; (4165a4 <lv_task_create+0xe0>)
  4164fe:	f883 9000 	strb.w	r9, [r3]
    new_task->period  = period;
  416502:	f8c4 8000 	str.w	r8, [r4]
    new_task->task_cb = task_xcb;
  416506:	60a7      	str	r7, [r4, #8]
    new_task->prio    = prio;
  416508:	7d23      	ldrb	r3, [r4, #20]
  41650a:	f365 0302 	bfi	r3, r5, #0, #3
  41650e:	7523      	strb	r3, [r4, #20]
    new_task->repeat_count = -1;
  416510:	f04f 33ff 	mov.w	r3, #4294967295
  416514:	6123      	str	r3, [r4, #16]
    new_task->last_run = lv_tick_get();
  416516:	4b24      	ldr	r3, [pc, #144]	; (4165a8 <lv_task_create+0xe4>)
  416518:	4798      	blx	r3
  41651a:	6060      	str	r0, [r4, #4]
    new_task->user_data = user_data;
  41651c:	60e6      	str	r6, [r4, #12]
    task_created = true;
  41651e:	4b23      	ldr	r3, [pc, #140]	; (4165ac <lv_task_create+0xe8>)
  416520:	f883 9000 	strb.w	r9, [r3]
}
  416524:	4620      	mov	r0, r4
  416526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
  41652a:	481b      	ldr	r0, [pc, #108]	; (416598 <lv_task_create+0xd4>)
  41652c:	4b20      	ldr	r3, [pc, #128]	; (4165b0 <lv_task_create+0xec>)
  41652e:	4798      	blx	r3
  416530:	4604      	mov	r4, r0
        LV_ASSERT_MEM(new_task);
  416532:	4b20      	ldr	r3, [pc, #128]	; (4165b4 <lv_task_create+0xf0>)
  416534:	4798      	blx	r3
  416536:	b928      	cbnz	r0, 416544 <lv_task_create+0x80>
  416538:	4622      	mov	r2, r4
  41653a:	2300      	movs	r3, #0
  41653c:	481e      	ldr	r0, [pc, #120]	; (4165b8 <lv_task_create+0xf4>)
  41653e:	491f      	ldr	r1, [pc, #124]	; (4165bc <lv_task_create+0xf8>)
  416540:	4788      	blx	r1
  416542:	e7fe      	b.n	416542 <lv_task_create+0x7e>
        if(new_task == NULL) return NULL;
  416544:	2c00      	cmp	r4, #0
  416546:	d1d7      	bne.n	4164f8 <lv_task_create+0x34>
  416548:	e7ec      	b.n	416524 <lv_task_create+0x60>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  41654a:	4621      	mov	r1, r4
  41654c:	4812      	ldr	r0, [pc, #72]	; (416598 <lv_task_create+0xd4>)
  41654e:	4b1c      	ldr	r3, [pc, #112]	; (4165c0 <lv_task_create+0xfc>)
  416550:	4798      	blx	r3
  416552:	4681      	mov	r9, r0
                LV_ASSERT_MEM(new_task);
  416554:	4b17      	ldr	r3, [pc, #92]	; (4165b4 <lv_task_create+0xf0>)
  416556:	4798      	blx	r3
  416558:	b128      	cbz	r0, 416566 <lv_task_create+0xa2>
                if(new_task == NULL) return NULL;
  41655a:	f1b9 0f00 	cmp.w	r9, #0
  41655e:	d018      	beq.n	416592 <lv_task_create+0xce>
  416560:	4623      	mov	r3, r4
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
  416562:	464c      	mov	r4, r9
  416564:	e7c6      	b.n	4164f4 <lv_task_create+0x30>
                LV_ASSERT_MEM(new_task);
  416566:	464a      	mov	r2, r9
  416568:	2300      	movs	r3, #0
  41656a:	4813      	ldr	r0, [pc, #76]	; (4165b8 <lv_task_create+0xf4>)
  41656c:	4913      	ldr	r1, [pc, #76]	; (4165bc <lv_task_create+0xf8>)
  41656e:	4788      	blx	r1
  416570:	e7fe      	b.n	416570 <lv_task_create+0xac>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
  416572:	4809      	ldr	r0, [pc, #36]	; (416598 <lv_task_create+0xd4>)
  416574:	4b13      	ldr	r3, [pc, #76]	; (4165c4 <lv_task_create+0x100>)
  416576:	4798      	blx	r3
  416578:	4604      	mov	r4, r0
            LV_ASSERT_MEM(new_task);
  41657a:	4b0e      	ldr	r3, [pc, #56]	; (4165b4 <lv_task_create+0xf0>)
  41657c:	4798      	blx	r3
  41657e:	b928      	cbnz	r0, 41658c <lv_task_create+0xc8>
  416580:	4622      	mov	r2, r4
  416582:	2300      	movs	r3, #0
  416584:	480c      	ldr	r0, [pc, #48]	; (4165b8 <lv_task_create+0xf4>)
  416586:	490d      	ldr	r1, [pc, #52]	; (4165bc <lv_task_create+0xf8>)
  416588:	4788      	blx	r1
  41658a:	e7fe      	b.n	41658a <lv_task_create+0xc6>
            if(new_task == NULL) return NULL;
  41658c:	2c00      	cmp	r4, #0
  41658e:	d1b3      	bne.n	4164f8 <lv_task_create+0x34>
  416590:	e7c8      	b.n	416524 <lv_task_create+0x60>
                if(new_task == NULL) return NULL;
  416592:	464c      	mov	r4, r9
  416594:	e7c6      	b.n	416524 <lv_task_create+0x60>
  416596:	bf00      	nop
  416598:	2043a19c 	.word	0x2043a19c
  41659c:	00415ac9 	.word	0x00415ac9
  4165a0:	00415add 	.word	0x00415add
  4165a4:	2041479f 	.word	0x2041479f
  4165a8:	00414a3d 	.word	0x00414a3d
  4165ac:	2041479d 	.word	0x2041479d
  4165b0:	00415a31 	.word	0x00415a31
  4165b4:	004157b9 	.word	0x004157b9
  4165b8:	004260b0 	.word	0x004260b0
  4165bc:	004157c5 	.word	0x004157c5
  4165c0:	00415af9 	.word	0x00415af9
  4165c4:	00415a7d 	.word	0x00415a7d

004165c8 <lv_task_del>:
{
  4165c8:	b510      	push	{r4, lr}
  4165ca:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
  4165cc:	4601      	mov	r1, r0
  4165ce:	4809      	ldr	r0, [pc, #36]	; (4165f4 <lv_task_del+0x2c>)
  4165d0:	4b09      	ldr	r3, [pc, #36]	; (4165f8 <lv_task_del+0x30>)
  4165d2:	4798      	blx	r3
    task_list_changed = true;
  4165d4:	2201      	movs	r2, #1
  4165d6:	4b09      	ldr	r3, [pc, #36]	; (4165fc <lv_task_del+0x34>)
  4165d8:	701a      	strb	r2, [r3, #0]
    lv_mem_free(task);
  4165da:	4620      	mov	r0, r4
  4165dc:	4b08      	ldr	r3, [pc, #32]	; (416600 <lv_task_del+0x38>)
  4165de:	4798      	blx	r3
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
  4165e0:	4b08      	ldr	r3, [pc, #32]	; (416604 <lv_task_del+0x3c>)
  4165e2:	681b      	ldr	r3, [r3, #0]
  4165e4:	429c      	cmp	r4, r3
  4165e6:	d000      	beq.n	4165ea <lv_task_del+0x22>
  4165e8:	bd10      	pop	{r4, pc}
  4165ea:	2201      	movs	r2, #1
  4165ec:	4b06      	ldr	r3, [pc, #24]	; (416608 <lv_task_del+0x40>)
  4165ee:	701a      	strb	r2, [r3, #0]
}
  4165f0:	e7fa      	b.n	4165e8 <lv_task_del+0x20>
  4165f2:	bf00      	nop
  4165f4:	2043a19c 	.word	0x2043a19c
  4165f8:	00415b85 	.word	0x00415b85
  4165fc:	2041479f 	.word	0x2041479f
  416600:	00415f85 	.word	0x00415f85
  416604:	2043a26c 	.word	0x2043a26c
  416608:	2041479e 	.word	0x2041479e

0041660c <lv_task_exec>:
{
  41660c:	b510      	push	{r4, lr}
  41660e:	4604      	mov	r4, r0
    if(lv_task_time_remaining(task) == 0) {
  416610:	4b0e      	ldr	r3, [pc, #56]	; (41664c <lv_task_exec+0x40>)
  416612:	4798      	blx	r3
  416614:	b108      	cbz	r0, 41661a <lv_task_exec+0xe>
    bool exec = false;
  416616:	2000      	movs	r0, #0
  416618:	bd10      	pop	{r4, pc}
        task->last_run = lv_tick_get();
  41661a:	4b0d      	ldr	r3, [pc, #52]	; (416650 <lv_task_exec+0x44>)
  41661c:	4798      	blx	r3
  41661e:	6060      	str	r0, [r4, #4]
        if(task->task_cb) task->task_cb(task);
  416620:	68a3      	ldr	r3, [r4, #8]
  416622:	b10b      	cbz	r3, 416628 <lv_task_exec+0x1c>
  416624:	4620      	mov	r0, r4
  416626:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
  416628:	4b0a      	ldr	r3, [pc, #40]	; (416654 <lv_task_exec+0x48>)
  41662a:	7818      	ldrb	r0, [r3, #0]
  41662c:	b938      	cbnz	r0, 41663e <lv_task_exec+0x32>
            if(task->repeat_count > 0) {
  41662e:	6923      	ldr	r3, [r4, #16]
  416630:	2b00      	cmp	r3, #0
  416632:	dd01      	ble.n	416638 <lv_task_exec+0x2c>
                task->repeat_count--;
  416634:	3b01      	subs	r3, #1
  416636:	6123      	str	r3, [r4, #16]
            if(task->repeat_count == 0) {
  416638:	6923      	ldr	r3, [r4, #16]
  41663a:	b10b      	cbz	r3, 416640 <lv_task_exec+0x34>
        exec = true;
  41663c:	2001      	movs	r0, #1
}
  41663e:	bd10      	pop	{r4, pc}
                lv_task_del(task);
  416640:	4620      	mov	r0, r4
  416642:	4b05      	ldr	r3, [pc, #20]	; (416658 <lv_task_exec+0x4c>)
  416644:	4798      	blx	r3
        exec = true;
  416646:	2001      	movs	r0, #1
  416648:	bd10      	pop	{r4, pc}
  41664a:	bf00      	nop
  41664c:	004164a9 	.word	0x004164a9
  416650:	00414a3d 	.word	0x00414a3d
  416654:	2041479e 	.word	0x2041479e
  416658:	004165c9 	.word	0x004165c9

0041665c <lv_task_handler>:
{
  41665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(already_running) return 1;
  41665e:	4b5e      	ldr	r3, [pc, #376]	; (4167d8 <lv_task_handler+0x17c>)
  416660:	781b      	ldrb	r3, [r3, #0]
  416662:	2b00      	cmp	r3, #0
  416664:	f040 80b5 	bne.w	4167d2 <lv_task_handler+0x176>
    already_running = true;
  416668:	2201      	movs	r2, #1
  41666a:	4b5b      	ldr	r3, [pc, #364]	; (4167d8 <lv_task_handler+0x17c>)
  41666c:	701a      	strb	r2, [r3, #0]
    if(lv_task_run == false) {
  41666e:	4b5b      	ldr	r3, [pc, #364]	; (4167dc <lv_task_handler+0x180>)
  416670:	781d      	ldrb	r5, [r3, #0]
  416672:	b925      	cbnz	r5, 41667e <lv_task_handler+0x22>
        already_running = false; /*Release mutex*/
  416674:	2200      	movs	r2, #0
  416676:	4b58      	ldr	r3, [pc, #352]	; (4167d8 <lv_task_handler+0x17c>)
  416678:	701a      	strb	r2, [r3, #0]
        return 1;
  41667a:	2501      	movs	r5, #1
  41667c:	e0aa      	b.n	4167d4 <lv_task_handler+0x178>
    uint32_t handler_start = lv_tick_get();
  41667e:	4b58      	ldr	r3, [pc, #352]	; (4167e0 <lv_task_handler+0x184>)
  416680:	4798      	blx	r3
  416682:	4606      	mov	r6, r0
    lv_task_t * task_interrupter = NULL;
  416684:	2400      	movs	r4, #0
  416686:	e04e      	b.n	416726 <lv_task_handler+0xca>
                LV_GC_ROOT(_lv_task_act) = next;
  416688:	4b56      	ldr	r3, [pc, #344]	; (4167e4 <lv_task_handler+0x188>)
  41668a:	601f      	str	r7, [r3, #0]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
  41668c:	2400      	movs	r4, #0
                continue; /*Load the next task*/
  41668e:	e00f      	b.n	4166b0 <lv_task_handler+0x54>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
  416690:	4b55      	ldr	r3, [pc, #340]	; (4167e8 <lv_task_handler+0x18c>)
  416692:	4798      	blx	r3
            if(task_created || task_deleted) {
  416694:	4b55      	ldr	r3, [pc, #340]	; (4167ec <lv_task_handler+0x190>)
  416696:	781b      	ldrb	r3, [r3, #0]
  416698:	2b00      	cmp	r3, #0
  41669a:	d153      	bne.n	416744 <lv_task_handler+0xe8>
  41669c:	4b54      	ldr	r3, [pc, #336]	; (4167f0 <lv_task_handler+0x194>)
  41669e:	781b      	ldrb	r3, [r3, #0]
  4166a0:	2b00      	cmp	r3, #0
  4166a2:	d151      	bne.n	416748 <lv_task_handler+0xec>
            if(task_list_changed) {
  4166a4:	4a53      	ldr	r2, [pc, #332]	; (4167f4 <lv_task_handler+0x198>)
  4166a6:	7812      	ldrb	r2, [r2, #0]
  4166a8:	2a00      	cmp	r2, #0
  4166aa:	d14f      	bne.n	41674c <lv_task_handler+0xf0>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
  4166ac:	4b4d      	ldr	r3, [pc, #308]	; (4167e4 <lv_task_handler+0x188>)
  4166ae:	601f      	str	r7, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  4166b0:	4b4c      	ldr	r3, [pc, #304]	; (4167e4 <lv_task_handler+0x188>)
  4166b2:	6819      	ldr	r1, [r3, #0]
  4166b4:	2900      	cmp	r1, #0
  4166b6:	d034      	beq.n	416722 <lv_task_handler+0xc6>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
  4166b8:	484f      	ldr	r0, [pc, #316]	; (4167f8 <lv_task_handler+0x19c>)
  4166ba:	4b50      	ldr	r3, [pc, #320]	; (4167fc <lv_task_handler+0x1a0>)
  4166bc:	4798      	blx	r3
  4166be:	4607      	mov	r7, r0
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_OFF) {
  4166c0:	4b48      	ldr	r3, [pc, #288]	; (4167e4 <lv_task_handler+0x188>)
  4166c2:	6818      	ldr	r0, [r3, #0]
  4166c4:	7d03      	ldrb	r3, [r0, #20]
  4166c6:	f013 0307 	ands.w	r3, r3, #7
  4166ca:	d039      	beq.n	416740 <lv_task_handler+0xe4>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
  4166cc:	4284      	cmp	r4, r0
  4166ce:	d0db      	beq.n	416688 <lv_task_handler+0x2c>
            if(LV_GC_ROOT(_lv_task_act)->prio == LV_TASK_PRIO_HIGHEST) {
  4166d0:	2b05      	cmp	r3, #5
  4166d2:	d0dd      	beq.n	416690 <lv_task_handler+0x34>
            else if(task_interrupter) {
  4166d4:	b1b4      	cbz	r4, 416704 <lv_task_handler+0xa8>
                if(LV_GC_ROOT(_lv_task_act)->prio > task_interrupter->prio) {
  4166d6:	7d02      	ldrb	r2, [r0, #20]
  4166d8:	f002 0207 	and.w	r2, r2, #7
  4166dc:	7d23      	ldrb	r3, [r4, #20]
  4166de:	f003 0307 	and.w	r3, r3, #7
  4166e2:	429a      	cmp	r2, r3
  4166e4:	ddd6      	ble.n	416694 <lv_task_handler+0x38>
                    if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  4166e6:	4b40      	ldr	r3, [pc, #256]	; (4167e8 <lv_task_handler+0x18c>)
  4166e8:	4798      	blx	r3
  4166ea:	2800      	cmp	r0, #0
  4166ec:	d0d2      	beq.n	416694 <lv_task_handler+0x38>
                        if(!task_created && !task_deleted) {
  4166ee:	4b3f      	ldr	r3, [pc, #252]	; (4167ec <lv_task_handler+0x190>)
  4166f0:	781b      	ldrb	r3, [r3, #0]
  4166f2:	2b00      	cmp	r3, #0
  4166f4:	d1ce      	bne.n	416694 <lv_task_handler+0x38>
  4166f6:	4b3e      	ldr	r3, [pc, #248]	; (4167f0 <lv_task_handler+0x194>)
  4166f8:	781b      	ldrb	r3, [r3, #0]
  4166fa:	2b00      	cmp	r3, #0
  4166fc:	d1ca      	bne.n	416694 <lv_task_handler+0x38>
                            task_interrupter = LV_GC_ROOT(_lv_task_act);
  4166fe:	4a39      	ldr	r2, [pc, #228]	; (4167e4 <lv_task_handler+0x188>)
  416700:	6814      	ldr	r4, [r2, #0]
                            break;
  416702:	e00f      	b.n	416724 <lv_task_handler+0xc8>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
  416704:	4b38      	ldr	r3, [pc, #224]	; (4167e8 <lv_task_handler+0x18c>)
  416706:	4798      	blx	r3
  416708:	2800      	cmp	r0, #0
  41670a:	d0c3      	beq.n	416694 <lv_task_handler+0x38>
                    if(!task_created && !task_deleted) {
  41670c:	4b37      	ldr	r3, [pc, #220]	; (4167ec <lv_task_handler+0x190>)
  41670e:	781b      	ldrb	r3, [r3, #0]
  416710:	2b00      	cmp	r3, #0
  416712:	d1bf      	bne.n	416694 <lv_task_handler+0x38>
  416714:	4b36      	ldr	r3, [pc, #216]	; (4167f0 <lv_task_handler+0x194>)
  416716:	781b      	ldrb	r3, [r3, #0]
  416718:	2b00      	cmp	r3, #0
  41671a:	d1bb      	bne.n	416694 <lv_task_handler+0x38>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
  41671c:	4a31      	ldr	r2, [pc, #196]	; (4167e4 <lv_task_handler+0x188>)
  41671e:	6814      	ldr	r4, [r2, #0]
                        break;
  416720:	e000      	b.n	416724 <lv_task_handler+0xc8>
        end_flag                 = true;
  416722:	462b      	mov	r3, r5
    } while(!end_flag);
  416724:	b9a3      	cbnz	r3, 416750 <lv_task_handler+0xf4>
        task_deleted             = false;
  416726:	2300      	movs	r3, #0
  416728:	4a31      	ldr	r2, [pc, #196]	; (4167f0 <lv_task_handler+0x194>)
  41672a:	7013      	strb	r3, [r2, #0]
        task_created             = false;
  41672c:	4a2f      	ldr	r2, [pc, #188]	; (4167ec <lv_task_handler+0x190>)
  41672e:	7013      	strb	r3, [r2, #0]
        task_list_changed        = false;
  416730:	4a30      	ldr	r2, [pc, #192]	; (4167f4 <lv_task_handler+0x198>)
  416732:	7013      	strb	r3, [r2, #0]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416734:	4830      	ldr	r0, [pc, #192]	; (4167f8 <lv_task_handler+0x19c>)
  416736:	4b32      	ldr	r3, [pc, #200]	; (416800 <lv_task_handler+0x1a4>)
  416738:	4798      	blx	r3
  41673a:	4b2a      	ldr	r3, [pc, #168]	; (4167e4 <lv_task_handler+0x188>)
  41673c:	6018      	str	r0, [r3, #0]
        while(LV_GC_ROOT(_lv_task_act)) {
  41673e:	e7b7      	b.n	4166b0 <lv_task_handler+0x54>
        end_flag                 = true;
  416740:	462b      	mov	r3, r5
  416742:	e7ef      	b.n	416724 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  416744:	2400      	movs	r4, #0
  416746:	e7ed      	b.n	416724 <lv_task_handler+0xc8>
  416748:	2400      	movs	r4, #0
  41674a:	e7eb      	b.n	416724 <lv_task_handler+0xc8>
                task_interrupter = NULL;
  41674c:	2400      	movs	r4, #0
  41674e:	e7e9      	b.n	416724 <lv_task_handler+0xc8>
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
  416750:	4829      	ldr	r0, [pc, #164]	; (4167f8 <lv_task_handler+0x19c>)
  416752:	4b2b      	ldr	r3, [pc, #172]	; (416800 <lv_task_handler+0x1a4>)
  416754:	4798      	blx	r3
  416756:	4604      	mov	r4, r0
    uint32_t time_till_next = LV_NO_TASK_READY;
  416758:	f04f 35ff 	mov.w	r5, #4294967295
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  41675c:	e004      	b.n	416768 <lv_task_handler+0x10c>
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
  41675e:	4621      	mov	r1, r4
  416760:	4825      	ldr	r0, [pc, #148]	; (4167f8 <lv_task_handler+0x19c>)
  416762:	4b26      	ldr	r3, [pc, #152]	; (4167fc <lv_task_handler+0x1a0>)
  416764:	4798      	blx	r3
  416766:	4604      	mov	r4, r0
    while(next && next->prio != LV_TASK_PRIO_OFF) {
  416768:	b154      	cbz	r4, 416780 <lv_task_handler+0x124>
  41676a:	7d23      	ldrb	r3, [r4, #20]
  41676c:	f013 0f07 	tst.w	r3, #7
  416770:	d006      	beq.n	416780 <lv_task_handler+0x124>
        uint32_t delay = lv_task_time_remaining(next);
  416772:	4620      	mov	r0, r4
  416774:	4b23      	ldr	r3, [pc, #140]	; (416804 <lv_task_handler+0x1a8>)
  416776:	4798      	blx	r3
        if(delay < time_till_next)
  416778:	4285      	cmp	r5, r0
  41677a:	d9f0      	bls.n	41675e <lv_task_handler+0x102>
            time_till_next = delay;
  41677c:	4605      	mov	r5, r0
  41677e:	e7ee      	b.n	41675e <lv_task_handler+0x102>
    busy_time += lv_tick_elaps(handler_start);
  416780:	4630      	mov	r0, r6
  416782:	4c21      	ldr	r4, [pc, #132]	; (416808 <lv_task_handler+0x1ac>)
  416784:	47a0      	blx	r4
  416786:	4a21      	ldr	r2, [pc, #132]	; (41680c <lv_task_handler+0x1b0>)
  416788:	6813      	ldr	r3, [r2, #0]
  41678a:	4403      	add	r3, r0
  41678c:	6013      	str	r3, [r2, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
  41678e:	4b20      	ldr	r3, [pc, #128]	; (416810 <lv_task_handler+0x1b4>)
  416790:	6818      	ldr	r0, [r3, #0]
  416792:	47a0      	blx	r4
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
  416794:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
  416798:	d315      	bcc.n	4167c6 <lv_task_handler+0x16a>
        idle_last         = (busy_time * 100) / idle_period_time;  /*Calculate the busy percentage*/
  41679a:	4b1c      	ldr	r3, [pc, #112]	; (41680c <lv_task_handler+0x1b0>)
  41679c:	681a      	ldr	r2, [r3, #0]
  41679e:	2364      	movs	r3, #100	; 0x64
  4167a0:	fb03 f302 	mul.w	r3, r3, r2
  4167a4:	fbb3 f3f0 	udiv	r3, r3, r0
  4167a8:	b2db      	uxtb	r3, r3
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  4167aa:	2b64      	cmp	r3, #100	; 0x64
  4167ac:	d80f      	bhi.n	4167ce <lv_task_handler+0x172>
  4167ae:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
  4167b2:	b2db      	uxtb	r3, r3
  4167b4:	4a17      	ldr	r2, [pc, #92]	; (416814 <lv_task_handler+0x1b8>)
  4167b6:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
  4167b8:	2200      	movs	r2, #0
  4167ba:	4b14      	ldr	r3, [pc, #80]	; (41680c <lv_task_handler+0x1b0>)
  4167bc:	601a      	str	r2, [r3, #0]
        idle_period_start = lv_tick_get();
  4167be:	4b08      	ldr	r3, [pc, #32]	; (4167e0 <lv_task_handler+0x184>)
  4167c0:	4798      	blx	r3
  4167c2:	4b13      	ldr	r3, [pc, #76]	; (416810 <lv_task_handler+0x1b4>)
  4167c4:	6018      	str	r0, [r3, #0]
    already_running = false; /*Release the mutex*/
  4167c6:	2200      	movs	r2, #0
  4167c8:	4b03      	ldr	r3, [pc, #12]	; (4167d8 <lv_task_handler+0x17c>)
  4167ca:	701a      	strb	r2, [r3, #0]
    return time_till_next;
  4167cc:	e002      	b.n	4167d4 <lv_task_handler+0x178>
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last; /*But we need idle time*/
  4167ce:	2300      	movs	r3, #0
  4167d0:	e7f0      	b.n	4167b4 <lv_task_handler+0x158>
    if(already_running) return 1;
  4167d2:	2501      	movs	r5, #1
}
  4167d4:	4628      	mov	r0, r5
  4167d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4167d8:	2041478c 	.word	0x2041478c
  4167dc:	2041479c 	.word	0x2041479c
  4167e0:	00414a3d 	.word	0x00414a3d
  4167e4:	2043a26c 	.word	0x2043a26c
  4167e8:	0041660d 	.word	0x0041660d
  4167ec:	2041479d 	.word	0x2041479d
  4167f0:	2041479e 	.word	0x2041479e
  4167f4:	2041479f 	.word	0x2041479f
  4167f8:	2043a19c 	.word	0x2043a19c
  4167fc:	00415add 	.word	0x00415add
  416800:	00415ac9 	.word	0x00415ac9
  416804:	004164a9 	.word	0x004164a9
  416808:	00414a59 	.word	0x00414a59
  41680c:	20414790 	.word	0x20414790
  416810:	20414798 	.word	0x20414798
  416814:	20414794 	.word	0x20414794

00416818 <lv_task_set_prio>:
{
  416818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(task->prio == prio) return;
  41681a:	7d03      	ldrb	r3, [r0, #20]
  41681c:	f003 0307 	and.w	r3, r3, #7
  416820:	428b      	cmp	r3, r1
  416822:	d021      	beq.n	416868 <lv_task_set_prio+0x50>
  416824:	460d      	mov	r5, r1
  416826:	460f      	mov	r7, r1
  416828:	4606      	mov	r6, r0
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41682a:	4813      	ldr	r0, [pc, #76]	; (416878 <lv_task_set_prio+0x60>)
  41682c:	4b13      	ldr	r3, [pc, #76]	; (41687c <lv_task_set_prio+0x64>)
  41682e:	4798      	blx	r3
  416830:	4604      	mov	r4, r0
  416832:	b18c      	cbz	r4, 416858 <lv_task_set_prio+0x40>
        if(i->prio <= prio) {
  416834:	7d23      	ldrb	r3, [r4, #20]
  416836:	f003 0307 	and.w	r3, r3, #7
  41683a:	429d      	cmp	r5, r3
  41683c:	da05      	bge.n	41684a <lv_task_set_prio+0x32>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
  41683e:	4621      	mov	r1, r4
  416840:	480d      	ldr	r0, [pc, #52]	; (416878 <lv_task_set_prio+0x60>)
  416842:	4b0f      	ldr	r3, [pc, #60]	; (416880 <lv_task_set_prio+0x68>)
  416844:	4798      	blx	r3
  416846:	4604      	mov	r4, r0
  416848:	e7f3      	b.n	416832 <lv_task_set_prio+0x1a>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
  41684a:	42b4      	cmp	r4, r6
  41684c:	d004      	beq.n	416858 <lv_task_set_prio+0x40>
  41684e:	4622      	mov	r2, r4
  416850:	4631      	mov	r1, r6
  416852:	4809      	ldr	r0, [pc, #36]	; (416878 <lv_task_set_prio+0x60>)
  416854:	4b0b      	ldr	r3, [pc, #44]	; (416884 <lv_task_set_prio+0x6c>)
  416856:	4798      	blx	r3
    if(i == NULL) {
  416858:	b13c      	cbz	r4, 41686a <lv_task_set_prio+0x52>
    task_list_changed = true;
  41685a:	2201      	movs	r2, #1
  41685c:	4b0a      	ldr	r3, [pc, #40]	; (416888 <lv_task_set_prio+0x70>)
  41685e:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
  416860:	7d33      	ldrb	r3, [r6, #20]
  416862:	f367 0302 	bfi	r3, r7, #0, #3
  416866:	7533      	strb	r3, [r6, #20]
  416868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
  41686a:	2200      	movs	r2, #0
  41686c:	4631      	mov	r1, r6
  41686e:	4802      	ldr	r0, [pc, #8]	; (416878 <lv_task_set_prio+0x60>)
  416870:	4b04      	ldr	r3, [pc, #16]	; (416884 <lv_task_set_prio+0x6c>)
  416872:	4798      	blx	r3
  416874:	e7f1      	b.n	41685a <lv_task_set_prio+0x42>
  416876:	bf00      	nop
  416878:	2043a19c 	.word	0x2043a19c
  41687c:	00415ac9 	.word	0x00415ac9
  416880:	00415add 	.word	0x00415add
  416884:	00415cb9 	.word	0x00415cb9
  416888:	2041479f 	.word	0x2041479f

0041688c <lv_task_ready>:
{
  41688c:	b510      	push	{r4, lr}
  41688e:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
  416890:	4b03      	ldr	r3, [pc, #12]	; (4168a0 <lv_task_ready+0x14>)
  416892:	4798      	blx	r3
  416894:	6823      	ldr	r3, [r4, #0]
  416896:	1ac0      	subs	r0, r0, r3
  416898:	3801      	subs	r0, #1
  41689a:	6060      	str	r0, [r4, #4]
  41689c:	bd10      	pop	{r4, pc}
  41689e:	bf00      	nop
  4168a0:	00414a3d 	.word	0x00414a3d

004168a4 <lv_task_enable>:
    lv_task_run = en;
  4168a4:	4b01      	ldr	r3, [pc, #4]	; (4168ac <lv_task_enable+0x8>)
  4168a6:	7018      	strb	r0, [r3, #0]
  4168a8:	4770      	bx	lr
  4168aa:	bf00      	nop
  4168ac:	2041479c 	.word	0x2041479c

004168b0 <_lv_task_core_init>:
{
  4168b0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
  4168b2:	2118      	movs	r1, #24
  4168b4:	4803      	ldr	r0, [pc, #12]	; (4168c4 <_lv_task_core_init+0x14>)
  4168b6:	4b04      	ldr	r3, [pc, #16]	; (4168c8 <_lv_task_core_init+0x18>)
  4168b8:	4798      	blx	r3
    lv_task_enable(true);
  4168ba:	2001      	movs	r0, #1
  4168bc:	4b03      	ldr	r3, [pc, #12]	; (4168cc <_lv_task_core_init+0x1c>)
  4168be:	4798      	blx	r3
  4168c0:	bd08      	pop	{r3, pc}
  4168c2:	bf00      	nop
  4168c4:	2043a19c 	.word	0x2043a19c
  4168c8:	00415a1f 	.word	0x00415a1f
  4168cc:	004168a5 	.word	0x004168a5

004168d0 <lv_txt_utf8_size>:
 * @param str pointer to a character in a string
 * @return length of the UTF-8 character (1,2,3 or 4). O on invalid code
 */
static uint8_t lv_txt_utf8_size(const char * str)
{
    if((str[0] & 0x80) == 0)
  4168d0:	7803      	ldrb	r3, [r0, #0]
  4168d2:	f013 0f80 	tst.w	r3, #128	; 0x80
  4168d6:	d101      	bne.n	4168dc <lv_txt_utf8_size+0xc>
        return 1;
  4168d8:	2001      	movs	r0, #1
  4168da:	4770      	bx	lr
    else if((str[0] & 0xE0) == 0xC0)
  4168dc:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
  4168e0:	2ac0      	cmp	r2, #192	; 0xc0
  4168e2:	d00b      	beq.n	4168fc <lv_txt_utf8_size+0x2c>
        return 2;
    else if((str[0] & 0xF0) == 0xE0)
  4168e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  4168e8:	2ae0      	cmp	r2, #224	; 0xe0
  4168ea:	d009      	beq.n	416900 <lv_txt_utf8_size+0x30>
        return 3;
    else if((str[0] & 0xF8) == 0xF0)
  4168ec:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
  4168f0:	2bf0      	cmp	r3, #240	; 0xf0
  4168f2:	d001      	beq.n	4168f8 <lv_txt_utf8_size+0x28>
        return 4;
    return 0; /*If the char was invalid tell it's 1 byte long*/
  4168f4:	2000      	movs	r0, #0
}
  4168f6:	4770      	bx	lr
        return 4;
  4168f8:	2004      	movs	r0, #4
  4168fa:	4770      	bx	lr
        return 2;
  4168fc:	2002      	movs	r0, #2
  4168fe:	4770      	bx	lr
        return 3;
  416900:	2003      	movs	r0, #3
  416902:	4770      	bx	lr

00416904 <lv_txt_utf8_next>:
 *          After call it will point to the next UTF-8 char in 'txt'.
 *          NULL to use txt[0] as index
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_next(const char * txt, uint32_t * i)
{
  416904:	b430      	push	{r4, r5}
  416906:	b082      	sub	sp, #8
     * */

    uint32_t result = 0;

    /*Dummy 'i' pointer is required*/
    uint32_t i_tmp = 0;
  416908:	2300      	movs	r3, #0
  41690a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
  41690c:	460c      	mov	r4, r1
  41690e:	b151      	cbz	r1, 416926 <lv_txt_utf8_next+0x22>

    /*Normal ASCII*/
    if((txt[*i] & 0x80) == 0) {
  416910:	6822      	ldr	r2, [r4, #0]
  416912:	5c83      	ldrb	r3, [r0, r2]
  416914:	f013 0f80 	tst.w	r3, #128	; 0x80
  416918:	d107      	bne.n	41692a <lv_txt_utf8_next+0x26>
        result = txt[*i];
  41691a:	4618      	mov	r0, r3
        (*i)++;
  41691c:	3201      	adds	r2, #1
  41691e:	6022      	str	r2, [r4, #0]
        else {
            (*i)++; /*Not UTF-8 char. Go the next.*/
        }
    }
    return result;
}
  416920:	b002      	add	sp, #8
  416922:	bc30      	pop	{r4, r5}
  416924:	4770      	bx	lr
    if(i == NULL) i = &i_tmp;
  416926:	ac01      	add	r4, sp, #4
  416928:	e7f2      	b.n	416910 <lv_txt_utf8_next+0xc>
        if((txt[*i] & 0xE0) == 0xC0) {
  41692a:	f003 01e0 	and.w	r1, r3, #224	; 0xe0
  41692e:	29c0      	cmp	r1, #192	; 0xc0
  416930:	d00b      	beq.n	41694a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF0) == 0xE0) {
  416932:	f003 01f0 	and.w	r1, r3, #240	; 0xf0
  416936:	29e0      	cmp	r1, #224	; 0xe0
  416938:	d019      	beq.n	41696e <lv_txt_utf8_next+0x6a>
        else if((txt[*i] & 0xF8) == 0xF0) {
  41693a:	f003 01f8 	and.w	r1, r3, #248	; 0xf8
  41693e:	29f0      	cmp	r1, #240	; 0xf0
  416940:	d033      	beq.n	4169aa <lv_txt_utf8_next+0xa6>
            (*i)++; /*Not UTF-8 char. Go the next.*/
  416942:	3201      	adds	r2, #1
  416944:	6022      	str	r2, [r4, #0]
    uint32_t result = 0;
  416946:	2000      	movs	r0, #0
  416948:	e7ea      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
  41694a:	019b      	lsls	r3, r3, #6
  41694c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
            (*i)++;
  416950:	3201      	adds	r2, #1
  416952:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416954:	5c80      	ldrb	r0, [r0, r2]
  416956:	f000 01c0 	and.w	r1, r0, #192	; 0xc0
  41695a:	2980      	cmp	r1, #128	; 0x80
  41695c:	d001      	beq.n	416962 <lv_txt_utf8_next+0x5e>
  41695e:	2000      	movs	r0, #0
  416960:	e7de      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  416962:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  416966:	4418      	add	r0, r3
            (*i)++;
  416968:	3201      	adds	r2, #1
  41696a:	6022      	str	r2, [r4, #0]
  41696c:	e7d8      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
  41696e:	031b      	lsls	r3, r3, #12
  416970:	b29b      	uxth	r3, r3
            (*i)++;
  416972:	3201      	adds	r2, #1
  416974:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416976:	5c81      	ldrb	r1, [r0, r2]
  416978:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  41697c:	2d80      	cmp	r5, #128	; 0x80
  41697e:	d001      	beq.n	416984 <lv_txt_utf8_next+0x80>
  416980:	2000      	movs	r0, #0
  416982:	e7cd      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  416984:	0189      	lsls	r1, r1, #6
  416986:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  41698a:	440b      	add	r3, r1
            (*i)++;
  41698c:	3201      	adds	r2, #1
  41698e:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  416990:	5c81      	ldrb	r1, [r0, r2]
  416992:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  416996:	2880      	cmp	r0, #128	; 0x80
  416998:	d001      	beq.n	41699e <lv_txt_utf8_next+0x9a>
  41699a:	2000      	movs	r0, #0
  41699c:	e7c0      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += (txt[*i] & 0x3F);
  41699e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4169a2:	1858      	adds	r0, r3, r1
            (*i)++;
  4169a4:	3201      	adds	r2, #1
  4169a6:	6022      	str	r2, [r4, #0]
  4169a8:	e7ba      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
  4169aa:	049b      	lsls	r3, r3, #18
  4169ac:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
            (*i)++;
  4169b0:	3201      	adds	r2, #1
  4169b2:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4169b4:	5c81      	ldrb	r1, [r0, r2]
  4169b6:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4169ba:	2d80      	cmp	r5, #128	; 0x80
  4169bc:	d001      	beq.n	4169c2 <lv_txt_utf8_next+0xbe>
  4169be:	2000      	movs	r0, #0
  4169c0:	e7ae      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
  4169c2:	0309      	lsls	r1, r1, #12
  4169c4:	f401 317c 	and.w	r1, r1, #258048	; 0x3f000
  4169c8:	430b      	orrs	r3, r1
            (*i)++;
  4169ca:	3201      	adds	r2, #1
  4169cc:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4169ce:	5c81      	ldrb	r1, [r0, r2]
  4169d0:	f001 05c0 	and.w	r5, r1, #192	; 0xc0
  4169d4:	2d80      	cmp	r5, #128	; 0x80
  4169d6:	d001      	beq.n	4169dc <lv_txt_utf8_next+0xd8>
  4169d8:	2000      	movs	r0, #0
  4169da:	e7a1      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
  4169dc:	0189      	lsls	r1, r1, #6
  4169de:	f401 617c 	and.w	r1, r1, #4032	; 0xfc0
  4169e2:	440b      	add	r3, r1
            (*i)++;
  4169e4:	3201      	adds	r2, #1
  4169e6:	6022      	str	r2, [r4, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
  4169e8:	5c81      	ldrb	r1, [r0, r2]
  4169ea:	f001 00c0 	and.w	r0, r1, #192	; 0xc0
  4169ee:	2880      	cmp	r0, #128	; 0x80
  4169f0:	d001      	beq.n	4169f6 <lv_txt_utf8_next+0xf2>
  4169f2:	2000      	movs	r0, #0
  4169f4:	e794      	b.n	416920 <lv_txt_utf8_next+0x1c>
            result += txt[*i] & 0x3F;
  4169f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
  4169fa:	1858      	adds	r0, r3, r1
            (*i)++;
  4169fc:	3201      	adds	r2, #1
  4169fe:	6022      	str	r2, [r4, #0]
  416a00:	e78e      	b.n	416920 <lv_txt_utf8_next+0x1c>
	...

00416a04 <lv_txt_utf8_prev>:
 * @param i start byte index in 'txt' where to start. After the call it will point to the previous
 * UTF-8 char in 'txt'.
 * @return the decoded Unicode character or 0 on invalid UTF-8 code
 */
static uint32_t lv_txt_utf8_prev(const char * txt, uint32_t * i)
{
  416a04:	b570      	push	{r4, r5, r6, lr}
  416a06:	b082      	sub	sp, #8
  416a08:	4606      	mov	r6, r0
  416a0a:	460d      	mov	r5, r1
    uint8_t c_size;
    uint8_t cnt = 0;

    /*Try to find a !0 long UTF-8 char by stepping one character back*/
    (*i)--;
  416a0c:	680b      	ldr	r3, [r1, #0]
  416a0e:	3b01      	subs	r3, #1
  416a10:	600b      	str	r3, [r1, #0]
    uint8_t cnt = 0;
  416a12:	2400      	movs	r4, #0
  416a14:	e002      	b.n	416a1c <lv_txt_utf8_prev+0x18>
            if(*i != 0)
                (*i)--;
            else
                return 0;
        }
        cnt++;
  416a16:	3401      	adds	r4, #1
  416a18:	b2e4      	uxtb	r4, r4
    } while(c_size == 0);
  416a1a:	b973      	cbnz	r3, 416a3a <lv_txt_utf8_prev+0x36>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  416a1c:	2c03      	cmp	r4, #3
  416a1e:	d815      	bhi.n	416a4c <lv_txt_utf8_prev+0x48>
        c_size = _lv_txt_encoded_size(&txt[*i]);
  416a20:	4b0c      	ldr	r3, [pc, #48]	; (416a54 <lv_txt_utf8_prev+0x50>)
  416a22:	681b      	ldr	r3, [r3, #0]
  416a24:	6828      	ldr	r0, [r5, #0]
  416a26:	4430      	add	r0, r6
  416a28:	4798      	blx	r3
        if(c_size == 0) {
  416a2a:	4603      	mov	r3, r0
  416a2c:	2800      	cmp	r0, #0
  416a2e:	d1f2      	bne.n	416a16 <lv_txt_utf8_prev+0x12>
            if(*i != 0)
  416a30:	6828      	ldr	r0, [r5, #0]
  416a32:	b160      	cbz	r0, 416a4e <lv_txt_utf8_prev+0x4a>
                (*i)--;
  416a34:	3801      	subs	r0, #1
  416a36:	6028      	str	r0, [r5, #0]
  416a38:	e7ed      	b.n	416a16 <lv_txt_utf8_prev+0x12>

    uint32_t i_tmp  = *i;
  416a3a:	682b      	ldr	r3, [r5, #0]
  416a3c:	a902      	add	r1, sp, #8
  416a3e:	f841 3d04 	str.w	r3, [r1, #-4]!
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
  416a42:	4b05      	ldr	r3, [pc, #20]	; (416a58 <lv_txt_utf8_prev+0x54>)
  416a44:	681b      	ldr	r3, [r3, #0]
  416a46:	4630      	mov	r0, r6
  416a48:	4798      	blx	r3

    return letter;
  416a4a:	e000      	b.n	416a4e <lv_txt_utf8_prev+0x4a>
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
  416a4c:	2000      	movs	r0, #0
}
  416a4e:	b002      	add	sp, #8
  416a50:	bd70      	pop	{r4, r5, r6, pc}
  416a52:	bf00      	nop
  416a54:	20400060 	.word	0x20400060
  416a58:	20400058 	.word	0x20400058

00416a5c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
  416a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  416a5e:	4607      	mov	r7, r0
  416a60:	460e      	mov	r6, r1
    uint32_t i;
    uint32_t byte_cnt = 0;
  416a62:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
  416a64:	4625      	mov	r5, r4
  416a66:	e001      	b.n	416a6c <lv_txt_utf8_get_byte_id+0x10>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
        byte_cnt += c_size > 0 ? c_size : 1;
  416a68:	4404      	add	r4, r0
    for(i = 0; i < utf8_id; i++) {
  416a6a:	3501      	adds	r5, #1
  416a6c:	42b5      	cmp	r5, r6
  416a6e:	d207      	bcs.n	416a80 <lv_txt_utf8_get_byte_id+0x24>
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
  416a70:	4b04      	ldr	r3, [pc, #16]	; (416a84 <lv_txt_utf8_get_byte_id+0x28>)
  416a72:	681b      	ldr	r3, [r3, #0]
  416a74:	1938      	adds	r0, r7, r4
  416a76:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
  416a78:	2800      	cmp	r0, #0
  416a7a:	d1f5      	bne.n	416a68 <lv_txt_utf8_get_byte_id+0xc>
  416a7c:	2001      	movs	r0, #1
  416a7e:	e7f3      	b.n	416a68 <lv_txt_utf8_get_byte_id+0xc>
    }

    return byte_cnt;
}
  416a80:	4620      	mov	r0, r4
  416a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  416a84:	20400060 	.word	0x20400060

00416a88 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
  416a88:	b570      	push	{r4, r5, r6, lr}
  416a8a:	b082      	sub	sp, #8
  416a8c:	4606      	mov	r6, r0
  416a8e:	460d      	mov	r5, r1
    uint32_t i        = 0;
  416a90:	2400      	movs	r4, #0
  416a92:	9401      	str	r4, [sp, #4]
    uint32_t char_cnt = 0;

    while(i < byte_id) {
  416a94:	e005      	b.n	416aa2 <lv_txt_utf8_get_char_id+0x1a>
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
  416a96:	4b06      	ldr	r3, [pc, #24]	; (416ab0 <lv_txt_utf8_get_char_id+0x28>)
  416a98:	681b      	ldr	r3, [r3, #0]
  416a9a:	a901      	add	r1, sp, #4
  416a9c:	4630      	mov	r0, r6
  416a9e:	4798      	blx	r3
        char_cnt++;
  416aa0:	3401      	adds	r4, #1
    while(i < byte_id) {
  416aa2:	9b01      	ldr	r3, [sp, #4]
  416aa4:	42ab      	cmp	r3, r5
  416aa6:	d3f6      	bcc.n	416a96 <lv_txt_utf8_get_char_id+0xe>
    }

    return char_cnt;
}
  416aa8:	4620      	mov	r0, r4
  416aaa:	b002      	add	sp, #8
  416aac:	bd70      	pop	{r4, r5, r6, pc}
  416aae:	bf00      	nop
  416ab0:	20400058 	.word	0x20400058

00416ab4 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
  416ab4:	b530      	push	{r4, r5, lr}
  416ab6:	b083      	sub	sp, #12
  416ab8:	4605      	mov	r5, r0
    uint32_t len = 0;
    uint32_t i   = 0;
  416aba:	2400      	movs	r4, #0
  416abc:	9401      	str	r4, [sp, #4]

    while(txt[i] != '\0') {
  416abe:	e005      	b.n	416acc <lv_txt_utf8_get_length+0x18>
        _lv_txt_encoded_next(txt, &i);
  416ac0:	4b06      	ldr	r3, [pc, #24]	; (416adc <lv_txt_utf8_get_length+0x28>)
  416ac2:	681b      	ldr	r3, [r3, #0]
  416ac4:	a901      	add	r1, sp, #4
  416ac6:	4628      	mov	r0, r5
  416ac8:	4798      	blx	r3
        len++;
  416aca:	3401      	adds	r4, #1
    while(txt[i] != '\0') {
  416acc:	9b01      	ldr	r3, [sp, #4]
  416ace:	5ceb      	ldrb	r3, [r5, r3]
  416ad0:	2b00      	cmp	r3, #0
  416ad2:	d1f5      	bne.n	416ac0 <lv_txt_utf8_get_length+0xc>
    }

    return len;
}
  416ad4:	4620      	mov	r0, r4
  416ad6:	b003      	add	sp, #12
  416ad8:	bd30      	pop	{r4, r5, pc}
  416ada:	bf00      	nop
  416adc:	20400058 	.word	0x20400058

00416ae0 <_lv_txt_is_cmd>:
{
  416ae0:	4602      	mov	r2, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
  416ae2:	2923      	cmp	r1, #35	; 0x23
  416ae4:	d004      	beq.n	416af0 <_lv_txt_is_cmd+0x10>
    bool ret = false;
  416ae6:	2000      	movs	r0, #0
    if(*state == LV_TXT_CMD_STATE_PAR) {
  416ae8:	7813      	ldrb	r3, [r2, #0]
  416aea:	2b01      	cmp	r3, #1
  416aec:	d014      	beq.n	416b18 <_lv_txt_is_cmd+0x38>
}
  416aee:	4770      	bx	lr
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
  416af0:	7803      	ldrb	r3, [r0, #0]
  416af2:	b91b      	cbnz	r3, 416afc <_lv_txt_is_cmd+0x1c>
            *state = LV_TXT_CMD_STATE_PAR;
  416af4:	2301      	movs	r3, #1
  416af6:	7003      	strb	r3, [r0, #0]
            ret    = true;
  416af8:	4618      	mov	r0, r3
  416afa:	e7f5      	b.n	416ae8 <_lv_txt_is_cmd+0x8>
        else if(*state == LV_TXT_CMD_STATE_PAR) {
  416afc:	2b01      	cmp	r3, #1
  416afe:	d003      	beq.n	416b08 <_lv_txt_is_cmd+0x28>
        else if(*state == LV_TXT_CMD_STATE_IN) {
  416b00:	2b02      	cmp	r3, #2
  416b02:	d005      	beq.n	416b10 <_lv_txt_is_cmd+0x30>
    bool ret = false;
  416b04:	2000      	movs	r0, #0
  416b06:	e7ef      	b.n	416ae8 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  416b08:	2300      	movs	r3, #0
  416b0a:	7003      	strb	r3, [r0, #0]
    bool ret = false;
  416b0c:	4618      	mov	r0, r3
  416b0e:	e7eb      	b.n	416ae8 <_lv_txt_is_cmd+0x8>
            *state = LV_TXT_CMD_STATE_WAIT;
  416b10:	2300      	movs	r3, #0
  416b12:	7003      	strb	r3, [r0, #0]
            ret    = true;
  416b14:	2001      	movs	r0, #1
  416b16:	e7e7      	b.n	416ae8 <_lv_txt_is_cmd+0x8>
        if(c == ' ') {
  416b18:	2920      	cmp	r1, #32
  416b1a:	d001      	beq.n	416b20 <_lv_txt_is_cmd+0x40>
        ret = true;
  416b1c:	2001      	movs	r0, #1
  416b1e:	e7e6      	b.n	416aee <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
  416b20:	2302      	movs	r3, #2
  416b22:	7013      	strb	r3, [r2, #0]
        ret = true;
  416b24:	2001      	movs	r0, #1
  416b26:	4770      	bx	lr

00416b28 <lv_txt_get_next_word>:
{
  416b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416b2c:	b089      	sub	sp, #36	; 0x24
  416b2e:	9103      	str	r1, [sp, #12]
  416b30:	9202      	str	r2, [sp, #8]
  416b32:	9304      	str	r3, [sp, #16]
  416b34:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
  416b38:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
  416b3c:	9305      	str	r3, [sp, #20]
    if(txt == NULL || txt[0] == '\0') return 0;
  416b3e:	2800      	cmp	r0, #0
  416b40:	f000 808f 	beq.w	416c62 <lv_txt_get_next_word+0x13a>
  416b44:	4607      	mov	r7, r0
  416b46:	7803      	ldrb	r3, [r0, #0]
  416b48:	2b00      	cmp	r3, #0
  416b4a:	f000 808d 	beq.w	416c68 <lv_txt_get_next_word+0x140>
    if(font == NULL) return 0;
  416b4e:	2900      	cmp	r1, #0
  416b50:	f000 8090 	beq.w	416c74 <lv_txt_get_next_word+0x14c>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  416b54:	f01b 0f02 	tst.w	fp, #2
  416b58:	d002      	beq.n	416b60 <lv_txt_get_next_word+0x38>
  416b5a:	f647 4318 	movw	r3, #31768	; 0x7c18
  416b5e:	9304      	str	r3, [sp, #16]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
  416b60:	2600      	movs	r6, #0
  416b62:	9607      	str	r6, [sp, #28]
  416b64:	9606      	str	r6, [sp, #24]
    letter = _lv_txt_encoded_next(txt, &i_next);
  416b66:	4b47      	ldr	r3, [pc, #284]	; (416c84 <lv_txt_get_next_word+0x15c>)
  416b68:	681b      	ldr	r3, [r3, #0]
  416b6a:	a907      	add	r1, sp, #28
  416b6c:	4638      	mov	r0, r7
  416b6e:	4798      	blx	r3
  416b70:	4604      	mov	r4, r0
    i_next_next = i_next;
  416b72:	9b07      	ldr	r3, [sp, #28]
  416b74:	9306      	str	r3, [sp, #24]
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
  416b76:	f04f 38ff 	mov.w	r8, #4294967295
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
  416b7a:	46b1      	mov	r9, r6
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
  416b7c:	4635      	mov	r5, r6
    uint32_t letter_next = 0; /* Letter at i_next */
  416b7e:	9601      	str	r6, [sp, #4]
    while(txt[i] != '\0') {
  416b80:	e039      	b.n	416bf6 <lv_txt_get_next_word+0xce>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
  416b82:	9a01      	ldr	r2, [sp, #4]
  416b84:	4621      	mov	r1, r4
  416b86:	9803      	ldr	r0, [sp, #12]
  416b88:	4b3f      	ldr	r3, [pc, #252]	; (416c88 <lv_txt_get_next_word+0x160>)
  416b8a:	4798      	blx	r3
  416b8c:	b203      	sxth	r3, r0
        cur_w += letter_w;
  416b8e:	4428      	add	r0, r5
  416b90:	b280      	uxth	r0, r0
  416b92:	b205      	sxth	r5, r0
        if(letter_w > 0) {
  416b94:	2b00      	cmp	r3, #0
  416b96:	dd02      	ble.n	416b9e <lv_txt_get_next_word+0x76>
            cur_w += letter_space;
  416b98:	9b02      	ldr	r3, [sp, #8]
  416b9a:	18c5      	adds	r5, r0, r3
  416b9c:	b22d      	sxth	r5, r5
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  416b9e:	f1b8 3fff 	cmp.w	r8, #4294967295
  416ba2:	d00f      	beq.n	416bc4 <lv_txt_get_next_word+0x9c>
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  416ba4:	2c0d      	cmp	r4, #13
  416ba6:	bf18      	it	ne
  416ba8:	2c0a      	cmpne	r4, #10
  416baa:	bf0c      	ite	eq
  416bac:	2101      	moveq	r1, #1
  416bae:	2100      	movne	r1, #0
  416bb0:	d038      	beq.n	416c24 <lv_txt_get_next_word+0xfc>
  416bb2:	2300      	movs	r3, #0
{
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  416bb4:	4a35      	ldr	r2, [pc, #212]	; (416c8c <lv_txt_get_next_word+0x164>)
  416bb6:	5cd2      	ldrb	r2, [r2, r3]
  416bb8:	b162      	cbz	r2, 416bd4 <lv_txt_get_next_word+0xac>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
  416bba:	4294      	cmp	r4, r2
  416bbc:	d009      	beq.n	416bd2 <lv_txt_get_next_word+0xaa>
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
  416bbe:	3301      	adds	r3, #1
  416bc0:	b2db      	uxtb	r3, r3
  416bc2:	e7f7      	b.n	416bb4 <lv_txt_get_next_word+0x8c>
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
  416bc4:	9b02      	ldr	r3, [sp, #8]
  416bc6:	1aeb      	subs	r3, r5, r3
  416bc8:	9a04      	ldr	r2, [sp, #16]
  416bca:	4293      	cmp	r3, r2
  416bcc:	ddea      	ble.n	416ba4 <lv_txt_get_next_word+0x7c>
            break_index = i;
  416bce:	46b0      	mov	r8, r6
  416bd0:	e7e8      	b.n	416ba4 <lv_txt_get_next_word+0x7c>
            ret = true; /*If match then it is break char*/
  416bd2:	2101      	movs	r1, #1
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
  416bd4:	bb31      	cbnz	r1, 416c24 <lv_txt_get_next_word+0xfc>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
  416bd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416bd8:	3300      	adds	r3, #0
  416bda:	bf18      	it	ne
  416bdc:	2301      	movne	r3, #1
  416bde:	f1b8 3fff 	cmp.w	r8, #4294967295
  416be2:	bf18      	it	ne
  416be4:	2300      	movne	r3, #0
  416be6:	b10b      	cbz	r3, 416bec <lv_txt_get_next_word+0xc4>
  416be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416bea:	601d      	str	r5, [r3, #0]
        i = i_next;
  416bec:	9e07      	ldr	r6, [sp, #28]
        i_next = i_next_next;
  416bee:	9b06      	ldr	r3, [sp, #24]
  416bf0:	9307      	str	r3, [sp, #28]
            ret = true; /*If match then it is break char*/
  416bf2:	46d1      	mov	r9, sl
  416bf4:	9c01      	ldr	r4, [sp, #4]
    while(txt[i] != '\0') {
  416bf6:	5dbb      	ldrb	r3, [r7, r6]
  416bf8:	b1e3      	cbz	r3, 416c34 <lv_txt_get_next_word+0x10c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
  416bfa:	4b22      	ldr	r3, [pc, #136]	; (416c84 <lv_txt_get_next_word+0x15c>)
  416bfc:	681b      	ldr	r3, [r3, #0]
  416bfe:	a906      	add	r1, sp, #24
  416c00:	4638      	mov	r0, r7
  416c02:	4798      	blx	r3
  416c04:	9001      	str	r0, [sp, #4]
        word_len++;
  416c06:	f109 0a01 	add.w	sl, r9, #1
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  416c0a:	f01b 0f01 	tst.w	fp, #1
  416c0e:	d0b8      	beq.n	416b82 <lv_txt_get_next_word+0x5a>
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
  416c10:	4621      	mov	r1, r4
  416c12:	9814      	ldr	r0, [sp, #80]	; 0x50
  416c14:	4b1e      	ldr	r3, [pc, #120]	; (416c90 <lv_txt_get_next_word+0x168>)
  416c16:	4798      	blx	r3
  416c18:	2800      	cmp	r0, #0
  416c1a:	d0b2      	beq.n	416b82 <lv_txt_get_next_word+0x5a>
                i = i_next;
  416c1c:	9e07      	ldr	r6, [sp, #28]
                i_next = i_next_next;
  416c1e:	9b06      	ldr	r3, [sp, #24]
  416c20:	9307      	str	r3, [sp, #28]
                continue;   /*Skip the letter is it is part of a command*/
  416c22:	e7e6      	b.n	416bf2 <lv_txt_get_next_word+0xca>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
  416c24:	2e00      	cmp	r6, #0
  416c26:	bf08      	it	eq
  416c28:	f1b8 3fff 	cmpeq.w	r8, #4294967295
  416c2c:	d102      	bne.n	416c34 <lv_txt_get_next_word+0x10c>
  416c2e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416c30:	b103      	cbz	r3, 416c34 <lv_txt_get_next_word+0x10c>
  416c32:	601d      	str	r5, [r3, #0]
    if(break_index == NO_BREAK_FOUND) {
  416c34:	f1b8 3fff 	cmp.w	r8, #4294967295
  416c38:	d008      	beq.n	416c4c <lv_txt_get_next_word+0x124>
    if(force) return break_index;
  416c3a:	9b05      	ldr	r3, [sp, #20]
  416c3c:	b9b3      	cbnz	r3, 416c6c <lv_txt_get_next_word+0x144>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
  416c3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  416c40:	b1eb      	cbz	r3, 416c7e <lv_txt_get_next_word+0x156>
  416c42:	2300      	movs	r3, #0
  416c44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  416c46:	6013      	str	r3, [r2, #0]
    return 0;
  416c48:	4698      	mov	r8, r3
  416c4a:	e00f      	b.n	416c6c <lv_txt_get_next_word+0x144>
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
  416c4c:	f1b9 0f00 	cmp.w	r9, #0
  416c50:	d004      	beq.n	416c5c <lv_txt_get_next_word+0x134>
  416c52:	9b01      	ldr	r3, [sp, #4]
  416c54:	2c0d      	cmp	r4, #13
  416c56:	bf08      	it	eq
  416c58:	2b0a      	cmpeq	r3, #10
  416c5a:	d10e      	bne.n	416c7a <lv_txt_get_next_word+0x152>
  416c5c:	f8dd 801c 	ldr.w	r8, [sp, #28]
  416c60:	e004      	b.n	416c6c <lv_txt_get_next_word+0x144>
    if(txt == NULL || txt[0] == '\0') return 0;
  416c62:	f04f 0800 	mov.w	r8, #0
  416c66:	e001      	b.n	416c6c <lv_txt_get_next_word+0x144>
  416c68:	f04f 0800 	mov.w	r8, #0
}
  416c6c:	4640      	mov	r0, r8
  416c6e:	b009      	add	sp, #36	; 0x24
  416c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(font == NULL) return 0;
  416c74:	f04f 0800 	mov.w	r8, #0
  416c78:	e7f8      	b.n	416c6c <lv_txt_get_next_word+0x144>
  416c7a:	46b0      	mov	r8, r6
  416c7c:	e7f6      	b.n	416c6c <lv_txt_get_next_word+0x144>
    return 0;
  416c7e:	f04f 0800 	mov.w	r8, #0
  416c82:	e7f3      	b.n	416c6c <lv_txt_get_next_word+0x144>
  416c84:	20400058 	.word	0x20400058
  416c88:	0041347d 	.word	0x0041347d
  416c8c:	004297c0 	.word	0x004297c0
  416c90:	00416ae1 	.word	0x00416ae1

00416c94 <_lv_txt_get_next_line>:
{
  416c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  416c98:	b089      	sub	sp, #36	; 0x24
  416c9a:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
    if(txt == NULL) return 0;
  416c9e:	2800      	cmp	r0, #0
  416ca0:	d05f      	beq.n	416d62 <_lv_txt_get_next_line+0xce>
  416ca2:	4689      	mov	r9, r1
  416ca4:	4690      	mov	r8, r2
  416ca6:	461d      	mov	r5, r3
  416ca8:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  416caa:	2900      	cmp	r1, #0
  416cac:	d05b      	beq.n	416d66 <_lv_txt_get_next_line+0xd2>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
  416cae:	f016 0f12 	tst.w	r6, #18
  416cb2:	d145      	bne.n	416d40 <_lv_txt_get_next_line+0xac>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  416cb4:	f016 0f02 	tst.w	r6, #2
  416cb8:	d001      	beq.n	416cbe <_lv_txt_get_next_line+0x2a>
  416cba:	f647 4518 	movw	r5, #31768	; 0x7c18
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  416cbe:	2300      	movs	r3, #0
  416cc0:	f88d 301f 	strb.w	r3, [sp, #31]
    uint32_t i = 0;                                        /* Iterating index into txt */
  416cc4:	9306      	str	r3, [sp, #24]
    while(txt[i] != '\0' && max_width > 0) {
  416cc6:	9b06      	ldr	r3, [sp, #24]
  416cc8:	18e0      	adds	r0, r4, r3
  416cca:	5ce2      	ldrb	r2, [r4, r3]
  416ccc:	b332      	cbz	r2, 416d1c <_lv_txt_get_next_line+0x88>
  416cce:	2d00      	cmp	r5, #0
  416cd0:	dd24      	ble.n	416d1c <_lv_txt_get_next_line+0x88>
        uint32_t word_w = 0;
  416cd2:	2200      	movs	r2, #0
  416cd4:	9205      	str	r2, [sp, #20]
        uint32_t advance = lv_txt_get_next_word(&txt[i], font, letter_space, max_width, flag, &word_w, &cmd_state, i == 0);
  416cd6:	fab3 f383 	clz	r3, r3
  416cda:	095b      	lsrs	r3, r3, #5
  416cdc:	9303      	str	r3, [sp, #12]
  416cde:	f10d 031f 	add.w	r3, sp, #31
  416ce2:	9302      	str	r3, [sp, #8]
  416ce4:	ab05      	add	r3, sp, #20
  416ce6:	9301      	str	r3, [sp, #4]
  416ce8:	9600      	str	r6, [sp, #0]
  416cea:	462b      	mov	r3, r5
  416cec:	4642      	mov	r2, r8
  416cee:	4649      	mov	r1, r9
  416cf0:	4f1e      	ldr	r7, [pc, #120]	; (416d6c <_lv_txt_get_next_line+0xd8>)
  416cf2:	47b8      	blx	r7
        max_width -= word_w;
  416cf4:	9b05      	ldr	r3, [sp, #20]
  416cf6:	1aed      	subs	r5, r5, r3
  416cf8:	b22d      	sxth	r5, r5
        if(advance == 0) {
  416cfa:	4603      	mov	r3, r0
  416cfc:	b310      	cbz	r0, 416d44 <_lv_txt_get_next_line+0xb0>
        i += advance;
  416cfe:	9806      	ldr	r0, [sp, #24]
  416d00:	4418      	add	r0, r3
  416d02:	9006      	str	r0, [sp, #24]
        if(txt[0] == '\n' || txt[0] == '\r') break;
  416d04:	7823      	ldrb	r3, [r4, #0]
  416d06:	2b0d      	cmp	r3, #13
  416d08:	bf18      	it	ne
  416d0a:	2b0a      	cmpne	r3, #10
  416d0c:	d006      	beq.n	416d1c <_lv_txt_get_next_line+0x88>
        if(txt[i] == '\n' || txt[i] == '\r') {
  416d0e:	5c23      	ldrb	r3, [r4, r0]
  416d10:	2b0d      	cmp	r3, #13
  416d12:	bf18      	it	ne
  416d14:	2b0a      	cmpne	r3, #10
  416d16:	d1d6      	bne.n	416cc6 <_lv_txt_get_next_line+0x32>
            i++;  /* Include the following newline in the current line */
  416d18:	3001      	adds	r0, #1
  416d1a:	9006      	str	r0, [sp, #24]
    if(i == 0) {
  416d1c:	9b06      	ldr	r3, [sp, #24]
  416d1e:	b1d3      	cbz	r3, 416d56 <_lv_txt_get_next_line+0xc2>
    return i;
  416d20:	9806      	ldr	r0, [sp, #24]
}
  416d22:	b009      	add	sp, #36	; 0x24
  416d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
  416d28:	3001      	adds	r0, #1
  416d2a:	5c23      	ldrb	r3, [r4, r0]
  416d2c:	2b0a      	cmp	r3, #10
  416d2e:	bf18      	it	ne
  416d30:	2b0d      	cmpne	r3, #13
  416d32:	d001      	beq.n	416d38 <_lv_txt_get_next_line+0xa4>
  416d34:	2b00      	cmp	r3, #0
  416d36:	d1f7      	bne.n	416d28 <_lv_txt_get_next_line+0x94>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
  416d38:	2b00      	cmp	r3, #0
  416d3a:	d0f2      	beq.n	416d22 <_lv_txt_get_next_line+0x8e>
  416d3c:	3001      	adds	r0, #1
  416d3e:	e7f0      	b.n	416d22 <_lv_txt_get_next_line+0x8e>
  416d40:	2000      	movs	r0, #0
  416d42:	e7f2      	b.n	416d2a <_lv_txt_get_next_line+0x96>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
  416d44:	9b06      	ldr	r3, [sp, #24]
  416d46:	2b00      	cmp	r3, #0
  416d48:	d1e8      	bne.n	416d1c <_lv_txt_get_next_line+0x88>
  416d4a:	4b09      	ldr	r3, [pc, #36]	; (416d70 <_lv_txt_get_next_line+0xdc>)
  416d4c:	681b      	ldr	r3, [r3, #0]
  416d4e:	a906      	add	r1, sp, #24
  416d50:	4620      	mov	r0, r4
  416d52:	4798      	blx	r3
  416d54:	e7e2      	b.n	416d1c <_lv_txt_get_next_line+0x88>
        _lv_txt_encoded_next(txt, &i);
  416d56:	4b06      	ldr	r3, [pc, #24]	; (416d70 <_lv_txt_get_next_line+0xdc>)
  416d58:	681b      	ldr	r3, [r3, #0]
  416d5a:	a906      	add	r1, sp, #24
  416d5c:	4620      	mov	r0, r4
  416d5e:	4798      	blx	r3
  416d60:	e7de      	b.n	416d20 <_lv_txt_get_next_line+0x8c>
    if(txt == NULL) return 0;
  416d62:	2000      	movs	r0, #0
  416d64:	e7dd      	b.n	416d22 <_lv_txt_get_next_line+0x8e>
    if(font == NULL) return 0;
  416d66:	2000      	movs	r0, #0
  416d68:	e7db      	b.n	416d22 <_lv_txt_get_next_line+0x8e>
  416d6a:	bf00      	nop
  416d6c:	00416b29 	.word	0x00416b29
  416d70:	20400058 	.word	0x20400058

00416d74 <_lv_txt_get_width>:
{
  416d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416d78:	b085      	sub	sp, #20
  416d7a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    if(txt == NULL) return 0;
  416d7e:	2800      	cmp	r0, #0
  416d80:	d041      	beq.n	416e06 <_lv_txt_get_width+0x92>
  416d82:	4604      	mov	r4, r0
    if(font == NULL) return 0;
  416d84:	2a00      	cmp	r2, #0
  416d86:	d041      	beq.n	416e0c <_lv_txt_get_width+0x98>
    uint32_t i                   = 0;
  416d88:	2000      	movs	r0, #0
  416d8a:	9003      	str	r0, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  416d8c:	f88d 000b 	strb.w	r0, [sp, #11]
    if(length != 0) {
  416d90:	b129      	cbz	r1, 416d9e <_lv_txt_get_width+0x2a>
  416d92:	4698      	mov	r8, r3
  416d94:	9201      	str	r2, [sp, #4]
  416d96:	460d      	mov	r5, r1
  416d98:	f04f 0a00 	mov.w	sl, #0
  416d9c:	e00e      	b.n	416dbc <_lv_txt_get_width+0x48>
    lv_coord_t width             = 0;
  416d9e:	4682      	mov	sl, r0
  416da0:	e02d      	b.n	416dfe <_lv_txt_get_width+0x8a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
  416da2:	464a      	mov	r2, r9
  416da4:	4659      	mov	r1, fp
  416da6:	9801      	ldr	r0, [sp, #4]
  416da8:	4b1a      	ldr	r3, [pc, #104]	; (416e14 <_lv_txt_get_width+0xa0>)
  416daa:	4798      	blx	r3
  416dac:	b203      	sxth	r3, r0
            if(char_width > 0) {
  416dae:	2b00      	cmp	r3, #0
  416db0:	dd04      	ble.n	416dbc <_lv_txt_get_width+0x48>
                width += char_width;
  416db2:	4450      	add	r0, sl
                width += letter_space;
  416db4:	fa18 f080 	uxtah	r0, r8, r0
  416db8:	fa0f fa80 	sxth.w	sl, r0
        while(i < length) {
  416dbc:	9b03      	ldr	r3, [sp, #12]
  416dbe:	429d      	cmp	r5, r3
  416dc0:	d916      	bls.n	416df0 <_lv_txt_get_width+0x7c>
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
  416dc2:	4e15      	ldr	r6, [pc, #84]	; (416e18 <_lv_txt_get_width+0xa4>)
  416dc4:	6833      	ldr	r3, [r6, #0]
  416dc6:	a903      	add	r1, sp, #12
  416dc8:	4620      	mov	r0, r4
  416dca:	4798      	blx	r3
  416dcc:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
  416dce:	6833      	ldr	r3, [r6, #0]
  416dd0:	2100      	movs	r1, #0
  416dd2:	9803      	ldr	r0, [sp, #12]
  416dd4:	4420      	add	r0, r4
  416dd6:	4798      	blx	r3
  416dd8:	4681      	mov	r9, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  416dda:	f017 0f01 	tst.w	r7, #1
  416dde:	d0e0      	beq.n	416da2 <_lv_txt_get_width+0x2e>
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
  416de0:	4659      	mov	r1, fp
  416de2:	f10d 000b 	add.w	r0, sp, #11
  416de6:	4b0d      	ldr	r3, [pc, #52]	; (416e1c <_lv_txt_get_width+0xa8>)
  416de8:	4798      	blx	r3
  416dea:	2800      	cmp	r0, #0
  416dec:	d1e6      	bne.n	416dbc <_lv_txt_get_width+0x48>
  416dee:	e7d8      	b.n	416da2 <_lv_txt_get_width+0x2e>
        if(width > 0) {
  416df0:	f1ba 0f00 	cmp.w	sl, #0
  416df4:	dd03      	ble.n	416dfe <_lv_txt_get_width+0x8a>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
  416df6:	ebaa 0008 	sub.w	r0, sl, r8
  416dfa:	fa0f fa80 	sxth.w	sl, r0
}
  416dfe:	4650      	mov	r0, sl
  416e00:	b005      	add	sp, #20
  416e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(txt == NULL) return 0;
  416e06:	f04f 0a00 	mov.w	sl, #0
  416e0a:	e7f8      	b.n	416dfe <_lv_txt_get_width+0x8a>
    if(font == NULL) return 0;
  416e0c:	f04f 0a00 	mov.w	sl, #0
  416e10:	e7f5      	b.n	416dfe <_lv_txt_get_width+0x8a>
  416e12:	bf00      	nop
  416e14:	0041347d 	.word	0x0041347d
  416e18:	20400058 	.word	0x20400058
  416e1c:	00416ae1 	.word	0x00416ae1

00416e20 <_lv_txt_get_size>:
{
  416e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  416e24:	b087      	sub	sp, #28
  416e26:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
  416e2a:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
  416e2e:	9404      	str	r4, [sp, #16]
  416e30:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    size_res->x = 0;
  416e34:	2400      	movs	r4, #0
  416e36:	8004      	strh	r4, [r0, #0]
    size_res->y = 0;
  416e38:	8044      	strh	r4, [r0, #2]
    if(text == NULL) return;
  416e3a:	2900      	cmp	r1, #0
  416e3c:	d04d      	beq.n	416eda <_lv_txt_get_size+0xba>
  416e3e:	460f      	mov	r7, r1
    if(font == NULL) return;
  416e40:	2a00      	cmp	r2, #0
  416e42:	d04a      	beq.n	416eda <_lv_txt_get_size+0xba>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
  416e44:	f018 0f02 	tst.w	r8, #2
  416e48:	d002      	beq.n	416e50 <_lv_txt_get_size+0x30>
  416e4a:	f647 4118 	movw	r1, #31768	; 0x7c18
  416e4e:	9104      	str	r1, [sp, #16]
  416e50:	9303      	str	r3, [sp, #12]
  416e52:	9202      	str	r2, [sp, #8]
  416e54:	4604      	mov	r4, r0
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  416e56:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
  416e5a:	9305      	str	r3, [sp, #20]
    uint16_t letter_height = lv_font_get_line_height(font);
  416e5c:	fa1f fa83 	uxth.w	sl, r3
    uint32_t line_start     = 0;
  416e60:	2500      	movs	r5, #0
    while(text[line_start] != '\0') {
  416e62:	197e      	adds	r6, r7, r5
  416e64:	5d7b      	ldrb	r3, [r7, r5]
  416e66:	b323      	cbz	r3, 416eb2 <_lv_txt_get_size+0x92>
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
  416e68:	f8cd 8000 	str.w	r8, [sp]
  416e6c:	9b04      	ldr	r3, [sp, #16]
  416e6e:	9a03      	ldr	r2, [sp, #12]
  416e70:	9902      	ldr	r1, [sp, #8]
  416e72:	4630      	mov	r0, r6
  416e74:	f8df b074 	ldr.w	fp, [pc, #116]	; 416eec <_lv_txt_get_size+0xcc>
  416e78:	47d8      	blx	fp
  416e7a:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
  416e7c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416e80:	eb03 020a 	add.w	r2, r3, sl
  416e84:	444a      	add	r2, r9
  416e86:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  416e8a:	d226      	bcs.n	416eda <_lv_txt_get_size+0xba>
            size_res->y += letter_height;
  416e8c:	4453      	add	r3, sl
            size_res->y += line_space;
  416e8e:	fa19 f383 	uxtah	r3, r9, r3
  416e92:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
  416e94:	f8cd 8000 	str.w	r8, [sp]
  416e98:	9b03      	ldr	r3, [sp, #12]
  416e9a:	9a02      	ldr	r2, [sp, #8]
  416e9c:	4601      	mov	r1, r0
  416e9e:	4630      	mov	r0, r6
  416ea0:	4e11      	ldr	r6, [pc, #68]	; (416ee8 <_lv_txt_get_size+0xc8>)
  416ea2:	47b0      	blx	r6
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
  416ea4:	f9b4 3000 	ldrsh.w	r3, [r4]
  416ea8:	4298      	cmp	r0, r3
  416eaa:	bfb8      	it	lt
  416eac:	4618      	movlt	r0, r3
  416eae:	8020      	strh	r0, [r4, #0]
  416eb0:	e7d7      	b.n	416e62 <_lv_txt_get_size+0x42>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
  416eb2:	b15d      	cbz	r5, 416ecc <_lv_txt_get_size+0xac>
  416eb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
  416eb8:	2b0d      	cmp	r3, #13
  416eba:	bf18      	it	ne
  416ebc:	2b0a      	cmpne	r3, #10
  416ebe:	d105      	bne.n	416ecc <_lv_txt_get_size+0xac>
        size_res->y += letter_height + line_space;
  416ec0:	eb0a 0309 	add.w	r3, sl, r9
  416ec4:	8862      	ldrh	r2, [r4, #2]
  416ec6:	fa12 f383 	uxtah	r3, r2, r3
  416eca:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
  416ecc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
  416ed0:	b133      	cbz	r3, 416ee0 <_lv_txt_get_size+0xc0>
        size_res->y -= line_space;
  416ed2:	eba3 0909 	sub.w	r9, r3, r9
  416ed6:	f8a4 9002 	strh.w	r9, [r4, #2]
}
  416eda:	b007      	add	sp, #28
  416edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        size_res->y = letter_height;
  416ee0:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  416ee4:	8063      	strh	r3, [r4, #2]
  416ee6:	e7f8      	b.n	416eda <_lv_txt_get_size+0xba>
  416ee8:	00416d75 	.word	0x00416d75
  416eec:	00416c95 	.word	0x00416c95

00416ef0 <_lv_utils_bsearch>:
  416ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  416ef4:	4681      	mov	r9, r0
  416ef6:	468a      	mov	sl, r1
  416ef8:	4615      	mov	r5, r2
  416efa:	461f      	mov	r7, r3
  416efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  416f00:	4608      	mov	r0, r1
  416f02:	e003      	b.n	416f0c <_lv_utils_bsearch+0x1c>
  416f04:	2800      	cmp	r0, #0
  416f06:	da16      	bge.n	416f36 <_lv_utils_bsearch+0x46>
  416f08:	4650      	mov	r0, sl
  416f0a:	4635      	mov	r5, r6
  416f0c:	b185      	cbz	r5, 416f30 <_lv_utils_bsearch+0x40>
  416f0e:	086e      	lsrs	r6, r5, #1
  416f10:	fb07 0406 	mla	r4, r7, r6, r0
  416f14:	4621      	mov	r1, r4
  416f16:	4648      	mov	r0, r9
  416f18:	47c0      	blx	r8
  416f1a:	2800      	cmp	r0, #0
  416f1c:	ddf2      	ble.n	416f04 <_lv_utils_bsearch+0x14>
  416f1e:	f015 0f01 	tst.w	r5, #1
  416f22:	bf0c      	ite	eq
  416f24:	2501      	moveq	r5, #1
  416f26:	2500      	movne	r5, #0
  416f28:	1b75      	subs	r5, r6, r5
  416f2a:	19e0      	adds	r0, r4, r7
  416f2c:	4682      	mov	sl, r0
  416f2e:	e7ed      	b.n	416f0c <_lv_utils_bsearch+0x1c>
  416f30:	2000      	movs	r0, #0
  416f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  416f36:	4620      	mov	r0, r4
  416f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00416f3c <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  416f3c:	b570      	push	{r4, r5, r6, lr}
  416f3e:	4604      	mov	r4, r0
  416f40:	460d      	mov	r5, r1
  416f42:	4616      	mov	r6, r2
    if(th->base) {
  416f44:	6880      	ldr	r0, [r0, #8]
  416f46:	b108      	cbz	r0, 416f4c <apply_theme+0x10>
        apply_theme(th->base, obj, name);
  416f48:	f7ff fff8 	bl	416f3c <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
  416f4c:	6863      	ldr	r3, [r4, #4]
  416f4e:	b11b      	cbz	r3, 416f58 <apply_theme+0x1c>
        th->apply_xcb(obj, name);
  416f50:	4631      	mov	r1, r6
  416f52:	4628      	mov	r0, r5
  416f54:	4798      	blx	r3
  416f56:	bd70      	pop	{r4, r5, r6, pc}
    }
    else if(th->apply_cb) {
  416f58:	6823      	ldr	r3, [r4, #0]
  416f5a:	b123      	cbz	r3, 416f66 <apply_theme+0x2a>
        th->apply_cb(act_theme, obj, name);
  416f5c:	4632      	mov	r2, r6
  416f5e:	4629      	mov	r1, r5
  416f60:	4801      	ldr	r0, [pc, #4]	; (416f68 <apply_theme+0x2c>)
  416f62:	6800      	ldr	r0, [r0, #0]
  416f64:	4798      	blx	r3
  416f66:	bd70      	pop	{r4, r5, r6, pc}
  416f68:	204147a0 	.word	0x204147a0

00416f6c <clear_styles>:
    }
}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
  416f6c:	b538      	push	{r3, r4, r5, lr}
  416f6e:	4604      	mov	r4, r0
    switch(name) {
  416f70:	3901      	subs	r1, #1
  416f72:	2927      	cmp	r1, #39	; 0x27
  416f74:	f200 8150 	bhi.w	417218 <clear_styles+0x2ac>
  416f78:	e8df f011 	tbh	[pc, r1, lsl #1]
  416f7c:	002c0028 	.word	0x002c0028
  416f80:	0046006b 	.word	0x0046006b
  416f84:	00380034 	.word	0x00380034
  416f88:	0057012d 	.word	0x0057012d
  416f8c:	00ea0083 	.word	0x00ea0083
  416f90:	013a0030 	.word	0x013a0030
  416f94:	014500dd 	.word	0x014500dd
  416f98:	005f005b 	.word	0x005f005b
  416f9c:	0063003f 	.word	0x0063003f
  416fa0:	00670095 	.word	0x00670095
  416fa4:	00d900cf 	.word	0x00d900cf
  416fa8:	008a0141 	.word	0x008a0141
  416fac:	00cb008e 	.word	0x00cb008e
  416fb0:	00c40099 	.word	0x00c40099
  416fb4:	01220079 	.word	0x01220079
  416fb8:	00720129 	.word	0x00720129
  416fbc:	00f4004d 	.word	0x00f4004d
  416fc0:	00b300a3 	.word	0x00b300a3
  416fc4:	00ba0115 	.word	0x00ba0115
  416fc8:	01110104 	.word	0x01110104
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416fcc:	2100      	movs	r1, #0
  416fce:	4b93      	ldr	r3, [pc, #588]	; (41721c <clear_styles+0x2b0>)
  416fd0:	4798      	blx	r3
            break;
  416fd2:	bd38      	pop	{r3, r4, r5, pc}
        case LV_THEME_OBJ:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416fd4:	2100      	movs	r1, #0
  416fd6:	4b91      	ldr	r3, [pc, #580]	; (41721c <clear_styles+0x2b0>)
  416fd8:	4798      	blx	r3
            break;
  416fda:	bd38      	pop	{r3, r4, r5, pc}
#if LV_USE_CONT
        case LV_THEME_CONT:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
  416fdc:	2100      	movs	r1, #0
  416fde:	4b8f      	ldr	r3, [pc, #572]	; (41721c <clear_styles+0x2b0>)
  416fe0:	4798      	blx	r3
            break;
  416fe2:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTN
        case LV_THEME_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  416fe4:	2100      	movs	r1, #0
  416fe6:	4b8d      	ldr	r3, [pc, #564]	; (41721c <clear_styles+0x2b0>)
  416fe8:	4798      	blx	r3
            break;
  416fea:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BTNMATRIX
        case LV_THEME_BTNMATRIX:
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BG);
  416fec:	2100      	movs	r1, #0
  416fee:	4d8b      	ldr	r5, [pc, #556]	; (41721c <clear_styles+0x2b0>)
  416ff0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BTNMATRIX_PART_BTN);
  416ff2:	2101      	movs	r1, #1
  416ff4:	4620      	mov	r0, r4
  416ff6:	47a8      	blx	r5
            break;
  416ff8:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_KEYBOARD
        case LV_THEME_KEYBOARD:
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BG);
  416ffa:	2100      	movs	r1, #0
  416ffc:	4d87      	ldr	r5, [pc, #540]	; (41721c <clear_styles+0x2b0>)
  416ffe:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_KEYBOARD_PART_BTN);
  417000:	2101      	movs	r1, #1
  417002:	4620      	mov	r0, r4
  417004:	47a8      	blx	r5
            break;
  417006:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_BAR
        case LV_THEME_BAR:
            lv_obj_clean_style_list(obj, LV_BAR_PART_BG);
  417008:	2100      	movs	r1, #0
  41700a:	4d84      	ldr	r5, [pc, #528]	; (41721c <clear_styles+0x2b0>)
  41700c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_BAR_PART_INDIC);
  41700e:	2101      	movs	r1, #1
  417010:	4620      	mov	r0, r4
  417012:	47a8      	blx	r5
            break;
  417014:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SWITCH
        case LV_THEME_SWITCH:
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_BG);
  417016:	2100      	movs	r1, #0
  417018:	4d80      	ldr	r5, [pc, #512]	; (41721c <clear_styles+0x2b0>)
  41701a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_INDIC);
  41701c:	2101      	movs	r1, #1
  41701e:	4620      	mov	r0, r4
  417020:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SWITCH_PART_KNOB);
  417022:	2102      	movs	r1, #2
  417024:	4620      	mov	r0, r4
  417026:	47a8      	blx	r5
            break;
  417028:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CANVAS
        case LV_THEME_CANVAS:
            lv_obj_clean_style_list(obj, LV_CANVAS_PART_MAIN);
  41702a:	2100      	movs	r1, #0
  41702c:	4b7b      	ldr	r3, [pc, #492]	; (41721c <clear_styles+0x2b0>)
  41702e:	4798      	blx	r3
            break;
  417030:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMG
        case LV_THEME_IMAGE:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  417032:	2100      	movs	r1, #0
  417034:	4b79      	ldr	r3, [pc, #484]	; (41721c <clear_styles+0x2b0>)
  417036:	4798      	blx	r3
            break;
  417038:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_IMGBTN
        case LV_THEME_IMGBTN:
            lv_obj_clean_style_list(obj, LV_IMG_PART_MAIN);
  41703a:	2100      	movs	r1, #0
  41703c:	4b77      	ldr	r3, [pc, #476]	; (41721c <clear_styles+0x2b0>)
  41703e:	4798      	blx	r3
            break;
  417040:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LABEL
        case LV_THEME_LABEL:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  417042:	2100      	movs	r1, #0
  417044:	4b75      	ldr	r3, [pc, #468]	; (41721c <clear_styles+0x2b0>)
  417046:	4798      	blx	r3
            break;
  417048:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINE
        case LV_THEME_LINE:
            lv_obj_clean_style_list(obj, LV_LABEL_PART_MAIN);
  41704a:	2100      	movs	r1, #0
  41704c:	4b73      	ldr	r3, [pc, #460]	; (41721c <clear_styles+0x2b0>)
  41704e:	4798      	blx	r3
            break;
  417050:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ARC
        case LV_THEME_ARC:
            lv_obj_clean_style_list(obj, LV_ARC_PART_BG);
  417052:	2100      	movs	r1, #0
  417054:	4d71      	ldr	r5, [pc, #452]	; (41721c <clear_styles+0x2b0>)
  417056:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ARC_PART_INDIC);
  417058:	2101      	movs	r1, #1
  41705a:	4620      	mov	r0, r4
  41705c:	47a8      	blx	r5
            break;
  41705e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINNER
        case LV_THEME_SPINNER:
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_BG);
  417060:	2100      	movs	r1, #0
  417062:	4d6e      	ldr	r5, [pc, #440]	; (41721c <clear_styles+0x2b0>)
  417064:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINNER_PART_INDIC);
  417066:	2101      	movs	r1, #1
  417068:	4620      	mov	r0, r4
  41706a:	47a8      	blx	r5
            break;
  41706c:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SLIDER
        case LV_THEME_SLIDER:
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_BG);
  41706e:	2100      	movs	r1, #0
  417070:	4d6a      	ldr	r5, [pc, #424]	; (41721c <clear_styles+0x2b0>)
  417072:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_INDIC);
  417074:	2101      	movs	r1, #1
  417076:	4620      	mov	r0, r4
  417078:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SLIDER_PART_KNOB);
  41707a:	2102      	movs	r1, #2
  41707c:	4620      	mov	r0, r4
  41707e:	47a8      	blx	r5
            break;
  417080:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHECKBOX
        case LV_THEME_CHECKBOX:
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BG);
  417082:	2100      	movs	r1, #0
  417084:	4d65      	ldr	r5, [pc, #404]	; (41721c <clear_styles+0x2b0>)
  417086:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417088:	2140      	movs	r1, #64	; 0x40
  41708a:	4620      	mov	r0, r4
  41708c:	47a8      	blx	r5
            break;
  41708e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_MSGBOX
        case LV_THEME_MSGBOX:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BG);
  417090:	2100      	movs	r1, #0
  417092:	4b62      	ldr	r3, [pc, #392]	; (41721c <clear_styles+0x2b0>)
  417094:	4798      	blx	r3
            break;
  417096:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_MSGBOX_BTNS:
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  417098:	2140      	movs	r1, #64	; 0x40
  41709a:	4d60      	ldr	r5, [pc, #384]	; (41721c <clear_styles+0x2b0>)
  41709c:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_MSGBOX_PART_BTN);
  41709e:	2141      	movs	r1, #65	; 0x41
  4170a0:	4620      	mov	r0, r4
  4170a2:	47a8      	blx	r5
            break;
  4170a4:	bd38      	pop	{r3, r4, r5, pc}

#endif
#if LV_USE_LED
        case LV_THEME_LED:
            lv_obj_clean_style_list(obj, LV_LED_PART_MAIN);
  4170a6:	2100      	movs	r1, #0
  4170a8:	4b5c      	ldr	r3, [pc, #368]	; (41721c <clear_styles+0x2b0>)
  4170aa:	4798      	blx	r3
            break;
  4170ac:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_PAGE
        case LV_THEME_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4170ae:	2100      	movs	r1, #0
  4170b0:	4d5a      	ldr	r5, [pc, #360]	; (41721c <clear_styles+0x2b0>)
  4170b2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4170b4:	2140      	movs	r1, #64	; 0x40
  4170b6:	4620      	mov	r0, r4
  4170b8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  4170ba:	2101      	movs	r1, #1
  4170bc:	4620      	mov	r0, r4
  4170be:	47a8      	blx	r5
            break;
  4170c0:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABVIEW
        case LV_THEME_TABVIEW:
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG);
  4170c2:	2100      	movs	r1, #0
  4170c4:	4d55      	ldr	r5, [pc, #340]	; (41721c <clear_styles+0x2b0>)
  4170c6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_BG_SCROLLABLE);
  4170c8:	2140      	movs	r1, #64	; 0x40
  4170ca:	4620      	mov	r0, r4
  4170cc:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  4170ce:	2141      	movs	r1, #65	; 0x41
  4170d0:	4620      	mov	r0, r4
  4170d2:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_INDIC);
  4170d4:	2143      	movs	r1, #67	; 0x43
  4170d6:	4620      	mov	r0, r4
  4170d8:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  4170da:	2142      	movs	r1, #66	; 0x42
  4170dc:	4620      	mov	r0, r4
  4170de:	47a8      	blx	r5
            break;
  4170e0:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_TABVIEW_PAGE:
            lv_obj_clean_style_list(obj, LV_PAGE_PART_BG);
  4170e2:	2100      	movs	r1, #0
  4170e4:	4d4d      	ldr	r5, [pc, #308]	; (41721c <clear_styles+0x2b0>)
  4170e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4170e8:	2140      	movs	r1, #64	; 0x40
  4170ea:	4620      	mov	r0, r4
  4170ec:	47a8      	blx	r5
            break;
  4170ee:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TILEVIEW
        case LV_THEME_TILEVIEW:
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_BG);
  4170f0:	2100      	movs	r1, #0
  4170f2:	4d4a      	ldr	r5, [pc, #296]	; (41721c <clear_styles+0x2b0>)
  4170f4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  4170f6:	2101      	movs	r1, #1
  4170f8:	4620      	mov	r0, r4
  4170fa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  4170fc:	2102      	movs	r1, #2
  4170fe:	4620      	mov	r0, r4
  417100:	47a8      	blx	r5
            break;
  417102:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_ROLLER
        case LV_THEME_ROLLER:
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_BG);
  417104:	2100      	movs	r1, #0
  417106:	4d45      	ldr	r5, [pc, #276]	; (41721c <clear_styles+0x2b0>)
  417108:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_ROLLER_PART_SELECTED);
  41710a:	2103      	movs	r1, #3
  41710c:	4620      	mov	r0, r4
  41710e:	47a8      	blx	r5
            break;
  417110:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_OBJMASK
        case LV_THEME_OBJMASK:
            lv_obj_clean_style_list(obj, LV_OBJMASK_PART_MAIN);
  417112:	2100      	movs	r1, #0
  417114:	4b41      	ldr	r3, [pc, #260]	; (41721c <clear_styles+0x2b0>)
  417116:	4798      	blx	r3
            break;
  417118:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LIST
        case LV_THEME_LIST:
            lv_obj_clean_style_list(obj, LV_LIST_PART_BG);
  41711a:	2100      	movs	r1, #0
  41711c:	4d3f      	ldr	r5, [pc, #252]	; (41721c <clear_styles+0x2b0>)
  41711e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLABLE);
  417120:	2140      	movs	r1, #64	; 0x40
  417122:	4620      	mov	r0, r4
  417124:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_LIST_PART_SCROLLBAR);
  417126:	2101      	movs	r1, #1
  417128:	4620      	mov	r0, r4
  41712a:	47a8      	blx	r5
            break;
  41712c:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_LIST_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41712e:	2100      	movs	r1, #0
  417130:	4b3a      	ldr	r3, [pc, #232]	; (41721c <clear_styles+0x2b0>)
  417132:	4798      	blx	r3
            break;
  417134:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_DROPDOWN
        case LV_THEME_DROPDOWN:
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_MAIN);
  417136:	2100      	movs	r1, #0
  417138:	4d38      	ldr	r5, [pc, #224]	; (41721c <clear_styles+0x2b0>)
  41713a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_LIST);
  41713c:	2140      	movs	r1, #64	; 0x40
  41713e:	4620      	mov	r0, r4
  417140:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  417142:	2141      	movs	r1, #65	; 0x41
  417144:	4620      	mov	r0, r4
  417146:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  417148:	2142      	movs	r1, #66	; 0x42
  41714a:	4620      	mov	r0, r4
  41714c:	47a8      	blx	r5
            break;
  41714e:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CHART
        case LV_THEME_CHART:
            lv_obj_clean_style_list(obj, LV_CHART_PART_BG);
  417150:	2100      	movs	r1, #0
  417152:	4d32      	ldr	r5, [pc, #200]	; (41721c <clear_styles+0x2b0>)
  417154:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES_BG);
  417156:	2101      	movs	r1, #1
  417158:	4620      	mov	r0, r4
  41715a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CHART_PART_SERIES);
  41715c:	2102      	movs	r1, #2
  41715e:	4620      	mov	r0, r4
  417160:	47a8      	blx	r5
            break;
  417162:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_TABLE
        case LV_THEME_TABLE:
            lv_obj_clean_style_list(obj, LV_TABLE_PART_BG);
  417164:	2100      	movs	r1, #0
  417166:	4d2d      	ldr	r5, [pc, #180]	; (41721c <clear_styles+0x2b0>)
  417168:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL1);
  41716a:	2101      	movs	r1, #1
  41716c:	4620      	mov	r0, r4
  41716e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL2);
  417170:	2102      	movs	r1, #2
  417172:	4620      	mov	r0, r4
  417174:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL3);
  417176:	2103      	movs	r1, #3
  417178:	4620      	mov	r0, r4
  41717a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TABLE_PART_CELL4);
  41717c:	2104      	movs	r1, #4
  41717e:	4620      	mov	r0, r4
  417180:	47a8      	blx	r5
            break;
  417182:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_WIN
        case LV_THEME_WIN:
            lv_obj_clean_style_list(obj, LV_WIN_PART_BG);
  417184:	2100      	movs	r1, #0
  417186:	4d25      	ldr	r5, [pc, #148]	; (41721c <clear_styles+0x2b0>)
  417188:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_SCROLLBAR);
  41718a:	2142      	movs	r1, #66	; 0x42
  41718c:	4620      	mov	r0, r4
  41718e:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417190:	2141      	movs	r1, #65	; 0x41
  417192:	4620      	mov	r0, r4
  417194:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_WIN_PART_HEADER);
  417196:	2140      	movs	r1, #64	; 0x40
  417198:	4620      	mov	r0, r4
  41719a:	47a8      	blx	r5
            break;
  41719c:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_WIN_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  41719e:	2100      	movs	r1, #0
  4171a0:	4b1e      	ldr	r3, [pc, #120]	; (41721c <clear_styles+0x2b0>)
  4171a2:	4798      	blx	r3
            break;
  4171a4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_TEXTAREA
        case LV_THEME_TEXTAREA:
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_BG);
  4171a6:	2100      	movs	r1, #0
  4171a8:	4d1c      	ldr	r5, [pc, #112]	; (41721c <clear_styles+0x2b0>)
  4171aa:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  4171ac:	2104      	movs	r1, #4
  4171ae:	4620      	mov	r0, r4
  4171b0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  4171b2:	2103      	movs	r1, #3
  4171b4:	4620      	mov	r0, r4
  4171b6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  4171b8:	2101      	movs	r1, #1
  4171ba:	4620      	mov	r0, r4
  4171bc:	47a8      	blx	r5
            break;
  4171be:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_SPINBOX
        case LV_THEME_SPINBOX:
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_BG);
  4171c0:	2100      	movs	r1, #0
  4171c2:	4d16      	ldr	r5, [pc, #88]	; (41721c <clear_styles+0x2b0>)
  4171c4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_SPINBOX_PART_CURSOR);
  4171c6:	2103      	movs	r1, #3
  4171c8:	4620      	mov	r0, r4
  4171ca:	47a8      	blx	r5
            break;
  4171cc:	bd38      	pop	{r3, r4, r5, pc}

        case LV_THEME_SPINBOX_BTN:
            lv_obj_clean_style_list(obj, LV_BTN_PART_MAIN);
  4171ce:	2100      	movs	r1, #0
  4171d0:	4b12      	ldr	r3, [pc, #72]	; (41721c <clear_styles+0x2b0>)
  4171d2:	4798      	blx	r3
            break;
  4171d4:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_CALENDAR
        case LV_THEME_CALENDAR:
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_BG);
  4171d6:	2100      	movs	r1, #0
  4171d8:	4d10      	ldr	r5, [pc, #64]	; (41721c <clear_styles+0x2b0>)
  4171da:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DATE);
  4171dc:	2103      	movs	r1, #3
  4171de:	4620      	mov	r0, r4
  4171e0:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_HEADER);
  4171e2:	2101      	movs	r1, #1
  4171e4:	4620      	mov	r0, r4
  4171e6:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4171e8:	2102      	movs	r1, #2
  4171ea:	4620      	mov	r0, r4
  4171ec:	47a8      	blx	r5
            break;
  4171ee:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_CPICKER
        case LV_THEME_CPICKER:
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_MAIN);
  4171f0:	2100      	movs	r1, #0
  4171f2:	4d0a      	ldr	r5, [pc, #40]	; (41721c <clear_styles+0x2b0>)
  4171f4:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_CPICKER_PART_KNOB);
  4171f6:	2101      	movs	r1, #1
  4171f8:	4620      	mov	r0, r4
  4171fa:	47a8      	blx	r5
            break;
  4171fc:	bd38      	pop	{r3, r4, r5, pc}
#endif

#if LV_USE_LINEMETER
        case LV_THEME_LINEMETER:
            lv_obj_clean_style_list(obj, LV_LINEMETER_PART_MAIN);
  4171fe:	2100      	movs	r1, #0
  417200:	4b06      	ldr	r3, [pc, #24]	; (41721c <clear_styles+0x2b0>)
  417202:	4798      	blx	r3
            break;
  417204:	bd38      	pop	{r3, r4, r5, pc}
#endif
#if LV_USE_GAUGE
        case LV_THEME_GAUGE:
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAIN);
  417206:	2100      	movs	r1, #0
  417208:	4d04      	ldr	r5, [pc, #16]	; (41721c <clear_styles+0x2b0>)
  41720a:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_MAJOR);
  41720c:	2101      	movs	r1, #1
  41720e:	4620      	mov	r0, r4
  417210:	47a8      	blx	r5
            lv_obj_clean_style_list(obj, LV_GAUGE_PART_NEEDLE);
  417212:	2102      	movs	r1, #2
  417214:	4620      	mov	r0, r4
  417216:	47a8      	blx	r5
  417218:	bd38      	pop	{r3, r4, r5, pc}
  41721a:	bf00      	nop
  41721c:	0040581d 	.word	0x0040581d

00417220 <lv_theme_set_act>:
    act_theme = th;
  417220:	4b01      	ldr	r3, [pc, #4]	; (417228 <lv_theme_set_act+0x8>)
  417222:	6018      	str	r0, [r3, #0]
  417224:	4770      	bx	lr
  417226:	bf00      	nop
  417228:	204147a0 	.word	0x204147a0

0041722c <lv_theme_apply>:
{
  41722c:	b538      	push	{r3, r4, r5, lr}
  41722e:	4604      	mov	r4, r0
  417230:	460d      	mov	r5, r1
    clear_styles(obj, name);
  417232:	4b04      	ldr	r3, [pc, #16]	; (417244 <lv_theme_apply+0x18>)
  417234:	4798      	blx	r3
    apply_theme(act_theme, obj, name);
  417236:	462a      	mov	r2, r5
  417238:	4621      	mov	r1, r4
  41723a:	4b03      	ldr	r3, [pc, #12]	; (417248 <lv_theme_apply+0x1c>)
  41723c:	6818      	ldr	r0, [r3, #0]
  41723e:	4b03      	ldr	r3, [pc, #12]	; (41724c <lv_theme_apply+0x20>)
  417240:	4798      	blx	r3
  417242:	bd38      	pop	{r3, r4, r5, pc}
  417244:	00416f6d 	.word	0x00416f6d
  417248:	204147a0 	.word	0x204147a0
  41724c:	00416f3d 	.word	0x00416f3d

00417250 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
  417250:	4b01      	ldr	r3, [pc, #4]	; (417258 <lv_theme_get_font_normal+0x8>)
  417252:	681b      	ldr	r3, [r3, #0]
}
  417254:	6958      	ldr	r0, [r3, #20]
  417256:	4770      	bx	lr
  417258:	204147a0 	.word	0x204147a0

0041725c <theme_apply>:

    return &theme;
}

static void theme_apply(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
  41725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  417260:	460c      	mov	r4, r1
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
  417262:	3a01      	subs	r2, #1
  417264:	2a27      	cmp	r2, #39	; 0x27
  417266:	d831      	bhi.n	4172cc <theme_apply+0x70>
  417268:	e8df f012 	tbh	[pc, r2, lsl #1]
  41726c:	00370028 	.word	0x00370028
  417270:	008800ae 	.word	0x008800ae
  417274:	0055004b 	.word	0x0055004b
  417278:	003002af 	.word	0x003002af
  41727c:	01fd00fd 	.word	0x01fd00fd
  417280:	02cb0041 	.word	0x02cb0041
  417284:	02ea01d3 	.word	0x02ea01d3
  417288:	00300030 	.word	0x00300030
  41728c:	0030006f 	.word	0x0030006f
  417290:	00300131 	.word	0x00300131
  417294:	01c901b4 	.word	0x01c901b4
  417298:	011202db 	.word	0x011202db
  41729c:	01af0121 	.word	0x01af0121
  4172a0:	019a013b 	.word	0x019a013b
  4172a4:	028500e2 	.word	0x028500e2
  4172a8:	00d202a0 	.word	0x00d202a0
  4172ac:	02270098 	.word	0x02270098
  4172b0:	017b0160 	.word	0x017b0160
  4172b4:	01850264 	.word	0x01850264
  4172b8:	025a023f 	.word	0x025a023f
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  4172bc:	2100      	movs	r1, #0
  4172be:	4620      	mov	r0, r4
  4172c0:	4b96      	ldr	r3, [pc, #600]	; (41751c <theme_apply+0x2c0>)
  4172c2:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->scr);
  4172c4:	4b96      	ldr	r3, [pc, #600]	; (417520 <theme_apply+0x2c4>)
  4172c6:	6819      	ldr	r1, [r3, #0]
  4172c8:	4b96      	ldr	r3, [pc, #600]	; (417524 <theme_apply+0x2c8>)
  4172ca:	4798      	blx	r3
#endif
        default:
            break;
    }

    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  4172cc:	22ff      	movs	r2, #255	; 0xff
  4172ce:	4611      	mov	r1, r2
  4172d0:	4620      	mov	r0, r4
  4172d2:	4b95      	ldr	r3, [pc, #596]	; (417528 <theme_apply+0x2cc>)
  4172d4:	4798      	blx	r3
  4172d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
  4172da:	2100      	movs	r1, #0
  4172dc:	4620      	mov	r0, r4
  4172de:	4b8f      	ldr	r3, [pc, #572]	; (41751c <theme_apply+0x2c0>)
  4172e0:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4172e2:	4b8f      	ldr	r3, [pc, #572]	; (417520 <theme_apply+0x2c4>)
  4172e4:	6819      	ldr	r1, [r3, #0]
  4172e6:	3104      	adds	r1, #4
  4172e8:	4b8e      	ldr	r3, [pc, #568]	; (417524 <theme_apply+0x2c8>)
  4172ea:	4798      	blx	r3
            break;
  4172ec:	e7ee      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CONT_PART_MAIN);
  4172ee:	2100      	movs	r1, #0
  4172f0:	4620      	mov	r0, r4
  4172f2:	4b8a      	ldr	r3, [pc, #552]	; (41751c <theme_apply+0x2c0>)
  4172f4:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->bg);
  4172f6:	4b8a      	ldr	r3, [pc, #552]	; (417520 <theme_apply+0x2c4>)
  4172f8:	6819      	ldr	r1, [r3, #0]
  4172fa:	3104      	adds	r1, #4
  4172fc:	4b89      	ldr	r3, [pc, #548]	; (417524 <theme_apply+0x2c8>)
  4172fe:	4798      	blx	r3
            break;
  417300:	e7e4      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417302:	2100      	movs	r1, #0
  417304:	4620      	mov	r0, r4
  417306:	4b85      	ldr	r3, [pc, #532]	; (41751c <theme_apply+0x2c0>)
  417308:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->btn);
  41730a:	4b85      	ldr	r3, [pc, #532]	; (417520 <theme_apply+0x2c4>)
  41730c:	6819      	ldr	r1, [r3, #0]
  41730e:	3110      	adds	r1, #16
  417310:	4b84      	ldr	r3, [pc, #528]	; (417524 <theme_apply+0x2c8>)
  417312:	4798      	blx	r3
            break;
  417314:	e7da      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BG);
  417316:	2100      	movs	r1, #0
  417318:	4620      	mov	r0, r4
  41731a:	4f80      	ldr	r7, [pc, #512]	; (41751c <theme_apply+0x2c0>)
  41731c:	47b8      	blx	r7
  41731e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417320:	4e7f      	ldr	r6, [pc, #508]	; (417520 <theme_apply+0x2c4>)
  417322:	6831      	ldr	r1, [r6, #0]
  417324:	3104      	adds	r1, #4
  417326:	4d7f      	ldr	r5, [pc, #508]	; (417524 <theme_apply+0x2c8>)
  417328:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41732a:	6831      	ldr	r1, [r6, #0]
  41732c:	3118      	adds	r1, #24
  41732e:	4640      	mov	r0, r8
  417330:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BTNMATRIX_PART_BTN);
  417332:	2101      	movs	r1, #1
  417334:	4620      	mov	r0, r4
  417336:	47b8      	blx	r7
  417338:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41733a:	6831      	ldr	r1, [r6, #0]
  41733c:	3104      	adds	r1, #4
  41733e:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417340:	6831      	ldr	r1, [r6, #0]
  417342:	3108      	adds	r1, #8
  417344:	4638      	mov	r0, r7
  417346:	47a8      	blx	r5
            break;
  417348:	e7c0      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BG);
  41734a:	2100      	movs	r1, #0
  41734c:	4620      	mov	r0, r4
  41734e:	4f73      	ldr	r7, [pc, #460]	; (41751c <theme_apply+0x2c0>)
  417350:	47b8      	blx	r7
  417352:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->scr);
  417354:	4e72      	ldr	r6, [pc, #456]	; (417520 <theme_apply+0x2c4>)
  417356:	6831      	ldr	r1, [r6, #0]
  417358:	4d72      	ldr	r5, [pc, #456]	; (417524 <theme_apply+0x2c8>)
  41735a:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->kb_bg);
  41735c:	6831      	ldr	r1, [r6, #0]
  41735e:	316c      	adds	r1, #108	; 0x6c
  417360:	4640      	mov	r0, r8
  417362:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_KEYBOARD_PART_BTN);
  417364:	2101      	movs	r1, #1
  417366:	4620      	mov	r0, r4
  417368:	47b8      	blx	r7
  41736a:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41736c:	6831      	ldr	r1, [r6, #0]
  41736e:	3104      	adds	r1, #4
  417370:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417372:	6831      	ldr	r1, [r6, #0]
  417374:	3108      	adds	r1, #8
  417376:	4638      	mov	r0, r7
  417378:	47a8      	blx	r5
            break;
  41737a:	e7a7      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BAR_PART_BG);
  41737c:	2100      	movs	r1, #0
  41737e:	4620      	mov	r0, r4
  417380:	4f66      	ldr	r7, [pc, #408]	; (41751c <theme_apply+0x2c0>)
  417382:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  417384:	4e66      	ldr	r6, [pc, #408]	; (417520 <theme_apply+0x2c4>)
  417386:	6831      	ldr	r1, [r6, #0]
  417388:	3128      	adds	r1, #40	; 0x28
  41738a:	4d66      	ldr	r5, [pc, #408]	; (417524 <theme_apply+0x2c8>)
  41738c:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_BAR_PART_INDIC);
  41738e:	2101      	movs	r1, #1
  417390:	4620      	mov	r0, r4
  417392:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  417394:	6831      	ldr	r1, [r6, #0]
  417396:	312c      	adds	r1, #44	; 0x2c
  417398:	47a8      	blx	r5
            break;
  41739a:	e797      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_BG);
  41739c:	2100      	movs	r1, #0
  41739e:	4620      	mov	r0, r4
  4173a0:	4f5e      	ldr	r7, [pc, #376]	; (41751c <theme_apply+0x2c0>)
  4173a2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_bg);
  4173a4:	4e5e      	ldr	r6, [pc, #376]	; (417520 <theme_apply+0x2c4>)
  4173a6:	6831      	ldr	r1, [r6, #0]
  4173a8:	3128      	adds	r1, #40	; 0x28
  4173aa:	4d5e      	ldr	r5, [pc, #376]	; (417524 <theme_apply+0x2c8>)
  4173ac:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_INDIC);
  4173ae:	2101      	movs	r1, #1
  4173b0:	4620      	mov	r0, r4
  4173b2:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  4173b4:	6831      	ldr	r1, [r6, #0]
  4173b6:	312c      	adds	r1, #44	; 0x2c
  4173b8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SWITCH_PART_KNOB);
  4173ba:	2102      	movs	r1, #2
  4173bc:	4620      	mov	r0, r4
  4173be:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sw_knob);
  4173c0:	6831      	ldr	r1, [r6, #0]
  4173c2:	31a0      	adds	r1, #160	; 0xa0
  4173c4:	47a8      	blx	r5
            break;
  4173c6:	e781      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ARC_PART_BG);
  4173c8:	2100      	movs	r1, #0
  4173ca:	4620      	mov	r0, r4
  4173cc:	4f53      	ldr	r7, [pc, #332]	; (41751c <theme_apply+0x2c0>)
  4173ce:	47b8      	blx	r7
  4173d0:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4173d2:	4e53      	ldr	r6, [pc, #332]	; (417520 <theme_apply+0x2c4>)
  4173d4:	6831      	ldr	r1, [r6, #0]
  4173d6:	3104      	adds	r1, #4
  4173d8:	4d52      	ldr	r5, [pc, #328]	; (417524 <theme_apply+0x2c8>)
  4173da:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_bg);
  4173dc:	6831      	ldr	r1, [r6, #0]
  4173de:	3120      	adds	r1, #32
  4173e0:	4640      	mov	r0, r8
  4173e2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_INDIC);
  4173e4:	2101      	movs	r1, #1
  4173e6:	4620      	mov	r0, r4
  4173e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  4173ea:	6831      	ldr	r1, [r6, #0]
  4173ec:	311c      	adds	r1, #28
  4173ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ARC_PART_KNOB);
  4173f0:	2102      	movs	r1, #2
  4173f2:	4620      	mov	r0, r4
  4173f4:	47b8      	blx	r7
  4173f6:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4173f8:	6831      	ldr	r1, [r6, #0]
  4173fa:	3104      	adds	r1, #4
  4173fc:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4173fe:	6831      	ldr	r1, [r6, #0]
  417400:	3108      	adds	r1, #8
  417402:	4638      	mov	r0, r7
  417404:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->arc_knob);
  417406:	6831      	ldr	r1, [r6, #0]
  417408:	3124      	adds	r1, #36	; 0x24
  41740a:	4638      	mov	r0, r7
  41740c:	47a8      	blx	r5
            break;
  41740e:	e75d      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_BG);
  417410:	2100      	movs	r1, #0
  417412:	4620      	mov	r0, r4
  417414:	4f41      	ldr	r7, [pc, #260]	; (41751c <theme_apply+0x2c0>)
  417416:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_bg);
  417418:	4e41      	ldr	r6, [pc, #260]	; (417520 <theme_apply+0x2c4>)
  41741a:	6831      	ldr	r1, [r6, #0]
  41741c:	3120      	adds	r1, #32
  41741e:	4d41      	ldr	r5, [pc, #260]	; (417524 <theme_apply+0x2c8>)
  417420:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINNER_PART_INDIC);
  417422:	2101      	movs	r1, #1
  417424:	4620      	mov	r0, r4
  417426:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->arc_indic);
  417428:	6831      	ldr	r1, [r6, #0]
  41742a:	311c      	adds	r1, #28
  41742c:	47a8      	blx	r5
            break;
  41742e:	e74d      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_BG);
  417430:	2100      	movs	r1, #0
  417432:	4620      	mov	r0, r4
  417434:	4f39      	ldr	r7, [pc, #228]	; (41751c <theme_apply+0x2c0>)
  417436:	47b8      	blx	r7
  417438:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bar_bg);
  41743a:	4e39      	ldr	r6, [pc, #228]	; (417520 <theme_apply+0x2c4>)
  41743c:	6831      	ldr	r1, [r6, #0]
  41743e:	3128      	adds	r1, #40	; 0x28
  417440:	4d38      	ldr	r5, [pc, #224]	; (417524 <theme_apply+0x2c8>)
  417442:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->slider_bg);
  417444:	6831      	ldr	r1, [r6, #0]
  417446:	3198      	adds	r1, #152	; 0x98
  417448:	4640      	mov	r0, r8
  41744a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_INDIC);
  41744c:	2101      	movs	r1, #1
  41744e:	4620      	mov	r0, r4
  417450:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bar_indic);
  417452:	6831      	ldr	r1, [r6, #0]
  417454:	312c      	adds	r1, #44	; 0x2c
  417456:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SLIDER_PART_KNOB);
  417458:	2102      	movs	r1, #2
  41745a:	4620      	mov	r0, r4
  41745c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->slider_knob);
  41745e:	6831      	ldr	r1, [r6, #0]
  417460:	3194      	adds	r1, #148	; 0x94
  417462:	47a8      	blx	r5
            break;
  417464:	e732      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BG);
  417466:	2100      	movs	r1, #0
  417468:	4620      	mov	r0, r4
  41746a:	4f2c      	ldr	r7, [pc, #176]	; (41751c <theme_apply+0x2c0>)
  41746c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cb_bg);
  41746e:	4e2c      	ldr	r6, [pc, #176]	; (417520 <theme_apply+0x2c4>)
  417470:	6831      	ldr	r1, [r6, #0]
  417472:	3150      	adds	r1, #80	; 0x50
  417474:	4d2b      	ldr	r5, [pc, #172]	; (417524 <theme_apply+0x2c8>)
  417476:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHECKBOX_PART_BULLET);
  417478:	2140      	movs	r1, #64	; 0x40
  41747a:	4620      	mov	r0, r4
  41747c:	47b8      	blx	r7
  41747e:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->btn);
  417480:	6831      	ldr	r1, [r6, #0]
  417482:	3110      	adds	r1, #16
  417484:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->cb_bullet);
  417486:	6831      	ldr	r1, [r6, #0]
  417488:	3154      	adds	r1, #84	; 0x54
  41748a:	4638      	mov	r0, r7
  41748c:	47a8      	blx	r5
            break;
  41748e:	e71d      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BG);
  417490:	2100      	movs	r1, #0
  417492:	4620      	mov	r0, r4
  417494:	4b21      	ldr	r3, [pc, #132]	; (41751c <theme_apply+0x2c0>)
  417496:	4798      	blx	r3
  417498:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41749a:	4e21      	ldr	r6, [pc, #132]	; (417520 <theme_apply+0x2c4>)
  41749c:	6831      	ldr	r1, [r6, #0]
  41749e:	3104      	adds	r1, #4
  4174a0:	4d20      	ldr	r5, [pc, #128]	; (417524 <theme_apply+0x2c8>)
  4174a2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->mbox_bg);
  4174a4:	6831      	ldr	r1, [r6, #0]
  4174a6:	3180      	adds	r1, #128	; 0x80
  4174a8:	4638      	mov	r0, r7
  4174aa:	47a8      	blx	r5
            break;
  4174ac:	e70e      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN_BG);
  4174ae:	2140      	movs	r1, #64	; 0x40
  4174b0:	4620      	mov	r0, r4
  4174b2:	4f1a      	ldr	r7, [pc, #104]	; (41751c <theme_apply+0x2c0>)
  4174b4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_small);
  4174b6:	4e1a      	ldr	r6, [pc, #104]	; (417520 <theme_apply+0x2c4>)
  4174b8:	6831      	ldr	r1, [r6, #0]
  4174ba:	3118      	adds	r1, #24
  4174bc:	4d19      	ldr	r5, [pc, #100]	; (417524 <theme_apply+0x2c8>)
  4174be:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_MSGBOX_PART_BTN);
  4174c0:	2141      	movs	r1, #65	; 0x41
  4174c2:	4620      	mov	r0, r4
  4174c4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->btn);
  4174c6:	6831      	ldr	r1, [r6, #0]
  4174c8:	3110      	adds	r1, #16
  4174ca:	47a8      	blx	r5
            break;
  4174cc:	e6fe      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LED_PART_MAIN);
  4174ce:	2100      	movs	r1, #0
  4174d0:	4620      	mov	r0, r4
  4174d2:	4b12      	ldr	r3, [pc, #72]	; (41751c <theme_apply+0x2c0>)
  4174d4:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->led);
  4174d6:	4b12      	ldr	r3, [pc, #72]	; (417520 <theme_apply+0x2c4>)
  4174d8:	6819      	ldr	r1, [r3, #0]
  4174da:	3170      	adds	r1, #112	; 0x70
  4174dc:	4b11      	ldr	r3, [pc, #68]	; (417524 <theme_apply+0x2c8>)
  4174de:	4798      	blx	r3
            break;
  4174e0:	e6f4      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_BG);
  4174e2:	2100      	movs	r1, #0
  4174e4:	4620      	mov	r0, r4
  4174e6:	4f0d      	ldr	r7, [pc, #52]	; (41751c <theme_apply+0x2c0>)
  4174e8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  4174ea:	4e0d      	ldr	r6, [pc, #52]	; (417520 <theme_apply+0x2c4>)
  4174ec:	6831      	ldr	r1, [r6, #0]
  4174ee:	3104      	adds	r1, #4
  4174f0:	4d0c      	ldr	r5, [pc, #48]	; (417524 <theme_apply+0x2c8>)
  4174f2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  4174f4:	2140      	movs	r1, #64	; 0x40
  4174f6:	4620      	mov	r0, r4
  4174f8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->pad_inner);
  4174fa:	6831      	ldr	r1, [r6, #0]
  4174fc:	3114      	adds	r1, #20
  4174fe:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLBAR);
  417500:	2101      	movs	r1, #1
  417502:	4620      	mov	r0, r4
  417504:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417506:	6831      	ldr	r1, [r6, #0]
  417508:	3184      	adds	r1, #132	; 0x84
  41750a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_EDGE_FLASH);
  41750c:	2102      	movs	r1, #2
  41750e:	4620      	mov	r0, r4
  417510:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  417512:	6831      	ldr	r1, [r6, #0]
  417514:	3188      	adds	r1, #136	; 0x88
  417516:	47a8      	blx	r5
            break;
  417518:	e6d8      	b.n	4172cc <theme_apply+0x70>
  41751a:	bf00      	nop
  41751c:	00405755 	.word	0x00405755
  417520:	204147a8 	.word	0x204147a8
  417524:	0040997d 	.word	0x0040997d
  417528:	004073a9 	.word	0x004073a9
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_BG);
  41752c:	2100      	movs	r1, #0
  41752e:	4620      	mov	r0, r4
  417530:	4f9b      	ldr	r7, [pc, #620]	; (4177a0 <theme_apply+0x544>)
  417532:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  417534:	4e9b      	ldr	r6, [pc, #620]	; (4177a4 <theme_apply+0x548>)
  417536:	6831      	ldr	r1, [r6, #0]
  417538:	4d9b      	ldr	r5, [pc, #620]	; (4177a8 <theme_apply+0x54c>)
  41753a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BG);
  41753c:	2141      	movs	r1, #65	; 0x41
  41753e:	4620      	mov	r0, r4
  417540:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  417542:	6831      	ldr	r1, [r6, #0]
  417544:	31ac      	adds	r1, #172	; 0xac
  417546:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_INDIC);
  417548:	2143      	movs	r1, #67	; 0x43
  41754a:	4620      	mov	r0, r4
  41754c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_indic);
  41754e:	6831      	ldr	r1, [r6, #0]
  417550:	31b0      	adds	r1, #176	; 0xb0
  417552:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TABVIEW_PART_TAB_BTN);
  417554:	2142      	movs	r1, #66	; 0x42
  417556:	4620      	mov	r0, r4
  417558:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns);
  41755a:	6831      	ldr	r1, [r6, #0]
  41755c:	31a8      	adds	r1, #168	; 0xa8
  41755e:	47a8      	blx	r5
            break;
  417560:	e6b4      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_PAGE_PART_SCROLLABLE);
  417562:	2140      	movs	r1, #64	; 0x40
  417564:	4620      	mov	r0, r4
  417566:	4b8e      	ldr	r3, [pc, #568]	; (4177a0 <theme_apply+0x544>)
  417568:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  41756a:	4b8e      	ldr	r3, [pc, #568]	; (4177a4 <theme_apply+0x548>)
  41756c:	6819      	ldr	r1, [r3, #0]
  41756e:	31b4      	adds	r1, #180	; 0xb4
  417570:	4b8d      	ldr	r3, [pc, #564]	; (4177a8 <theme_apply+0x54c>)
  417572:	4798      	blx	r3
            break;
  417574:	e6aa      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_BG);
  417576:	2100      	movs	r1, #0
  417578:	4620      	mov	r0, r4
  41757a:	4f89      	ldr	r7, [pc, #548]	; (4177a0 <theme_apply+0x544>)
  41757c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  41757e:	4e89      	ldr	r6, [pc, #548]	; (4177a4 <theme_apply+0x548>)
  417580:	6831      	ldr	r1, [r6, #0]
  417582:	4d89      	ldr	r5, [pc, #548]	; (4177a8 <theme_apply+0x54c>)
  417584:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_SCROLLBAR);
  417586:	2101      	movs	r1, #1
  417588:	4620      	mov	r0, r4
  41758a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41758c:	6831      	ldr	r1, [r6, #0]
  41758e:	3184      	adds	r1, #132	; 0x84
  417590:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TILEVIEW_PART_EDGE_FLASH);
  417592:	2102      	movs	r1, #2
  417594:	4620      	mov	r0, r4
  417596:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->edge_flash);
  417598:	6831      	ldr	r1, [r6, #0]
  41759a:	3188      	adds	r1, #136	; 0x88
  41759c:	47a8      	blx	r5
            break;
  41759e:	e695      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_BG);
  4175a0:	2100      	movs	r1, #0
  4175a2:	4620      	mov	r0, r4
  4175a4:	4f7e      	ldr	r7, [pc, #504]	; (4177a0 <theme_apply+0x544>)
  4175a6:	47b8      	blx	r7
  4175a8:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4175aa:	4e7e      	ldr	r6, [pc, #504]	; (4177a4 <theme_apply+0x548>)
  4175ac:	6831      	ldr	r1, [r6, #0]
  4175ae:	3104      	adds	r1, #4
  4175b0:	4d7d      	ldr	r5, [pc, #500]	; (4177a8 <theme_apply+0x54c>)
  4175b2:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->roller_bg);
  4175b4:	6831      	ldr	r1, [r6, #0]
  4175b6:	318c      	adds	r1, #140	; 0x8c
  4175b8:	4640      	mov	r0, r8
  4175ba:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_ROLLER_PART_SELECTED);
  4175bc:	2103      	movs	r1, #3
  4175be:	4620      	mov	r0, r4
  4175c0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->roller_sel);
  4175c2:	6831      	ldr	r1, [r6, #0]
  4175c4:	3190      	adds	r1, #144	; 0x90
  4175c6:	47a8      	blx	r5
            break;
  4175c8:	e680      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_OBJMASK_PART_MAIN);
  4175ca:	2100      	movs	r1, #0
  4175cc:	4620      	mov	r0, r4
  4175ce:	4b74      	ldr	r3, [pc, #464]	; (4177a0 <theme_apply+0x544>)
  4175d0:	4798      	blx	r3
            break;
  4175d2:	e67b      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LIST_PART_BG);
  4175d4:	2100      	movs	r1, #0
  4175d6:	4620      	mov	r0, r4
  4175d8:	4f71      	ldr	r7, [pc, #452]	; (4177a0 <theme_apply+0x544>)
  4175da:	47b8      	blx	r7
  4175dc:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  4175de:	4e71      	ldr	r6, [pc, #452]	; (4177a4 <theme_apply+0x548>)
  4175e0:	6831      	ldr	r1, [r6, #0]
  4175e2:	3104      	adds	r1, #4
  4175e4:	4d70      	ldr	r5, [pc, #448]	; (4177a8 <theme_apply+0x54c>)
  4175e6:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->list_bg);
  4175e8:	6831      	ldr	r1, [r6, #0]
  4175ea:	3178      	adds	r1, #120	; 0x78
  4175ec:	4640      	mov	r0, r8
  4175ee:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_LIST_PART_SCROLLBAR);
  4175f0:	2101      	movs	r1, #1
  4175f2:	4620      	mov	r0, r4
  4175f4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  4175f6:	6831      	ldr	r1, [r6, #0]
  4175f8:	3184      	adds	r1, #132	; 0x84
  4175fa:	47a8      	blx	r5
            break;
  4175fc:	e666      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4175fe:	2100      	movs	r1, #0
  417600:	4620      	mov	r0, r4
  417602:	4b67      	ldr	r3, [pc, #412]	; (4177a0 <theme_apply+0x544>)
  417604:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->list_btn);
  417606:	4b67      	ldr	r3, [pc, #412]	; (4177a4 <theme_apply+0x548>)
  417608:	6819      	ldr	r1, [r3, #0]
  41760a:	317c      	adds	r1, #124	; 0x7c
  41760c:	4b66      	ldr	r3, [pc, #408]	; (4177a8 <theme_apply+0x54c>)
  41760e:	4798      	blx	r3
            break;
  417610:	e65c      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_MAIN);
  417612:	2100      	movs	r1, #0
  417614:	4620      	mov	r0, r4
  417616:	4f62      	ldr	r7, [pc, #392]	; (4177a0 <theme_apply+0x544>)
  417618:	47b8      	blx	r7
  41761a:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41761c:	4e61      	ldr	r6, [pc, #388]	; (4177a4 <theme_apply+0x548>)
  41761e:	6831      	ldr	r1, [r6, #0]
  417620:	3104      	adds	r1, #4
  417622:	4d61      	ldr	r5, [pc, #388]	; (4177a8 <theme_apply+0x54c>)
  417624:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  417626:	6831      	ldr	r1, [r6, #0]
  417628:	3108      	adds	r1, #8
  41762a:	4640      	mov	r0, r8
  41762c:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41762e:	6831      	ldr	r1, [r6, #0]
  417630:	3118      	adds	r1, #24
  417632:	4640      	mov	r0, r8
  417634:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_LIST);
  417636:	2140      	movs	r1, #64	; 0x40
  417638:	4620      	mov	r0, r4
  41763a:	47b8      	blx	r7
  41763c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41763e:	6831      	ldr	r1, [r6, #0]
  417640:	3104      	adds	r1, #4
  417642:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->ddlist_page);
  417644:	6831      	ldr	r1, [r6, #0]
  417646:	3158      	adds	r1, #88	; 0x58
  417648:	4640      	mov	r0, r8
  41764a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SCROLLBAR);
  41764c:	2141      	movs	r1, #65	; 0x41
  41764e:	4620      	mov	r0, r4
  417650:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417652:	6831      	ldr	r1, [r6, #0]
  417654:	3184      	adds	r1, #132	; 0x84
  417656:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_DROPDOWN_PART_SELECTED);
  417658:	2142      	movs	r1, #66	; 0x42
  41765a:	4620      	mov	r0, r4
  41765c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ddlist_sel);
  41765e:	6831      	ldr	r1, [r6, #0]
  417660:	315c      	adds	r1, #92	; 0x5c
  417662:	47a8      	blx	r5
            break;
  417664:	e632      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CHART_PART_BG);
  417666:	2100      	movs	r1, #0
  417668:	4620      	mov	r0, r4
  41766a:	4f4d      	ldr	r7, [pc, #308]	; (4177a0 <theme_apply+0x544>)
  41766c:	47b8      	blx	r7
  41766e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417670:	4e4c      	ldr	r6, [pc, #304]	; (4177a4 <theme_apply+0x548>)
  417672:	6831      	ldr	r1, [r6, #0]
  417674:	3104      	adds	r1, #4
  417676:	4d4c      	ldr	r5, [pc, #304]	; (4177a8 <theme_apply+0x54c>)
  417678:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_bg);
  41767a:	6831      	ldr	r1, [r6, #0]
  41767c:	3144      	adds	r1, #68	; 0x44
  41767e:	4640      	mov	r0, r8
  417680:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417682:	6831      	ldr	r1, [r6, #0]
  417684:	3118      	adds	r1, #24
  417686:	4640      	mov	r0, r8
  417688:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES_BG);
  41768a:	2101      	movs	r1, #1
  41768c:	4620      	mov	r0, r4
  41768e:	47b8      	blx	r7
  417690:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->pad_small);
  417692:	6831      	ldr	r1, [r6, #0]
  417694:	3118      	adds	r1, #24
  417696:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  417698:	6831      	ldr	r1, [r6, #0]
  41769a:	3148      	adds	r1, #72	; 0x48
  41769c:	4640      	mov	r0, r8
  41769e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_CURSOR);
  4176a0:	2103      	movs	r1, #3
  4176a2:	4620      	mov	r0, r4
  4176a4:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series_bg);
  4176a6:	6831      	ldr	r1, [r6, #0]
  4176a8:	3148      	adds	r1, #72	; 0x48
  4176aa:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CHART_PART_SERIES);
  4176ac:	2102      	movs	r1, #2
  4176ae:	4620      	mov	r0, r4
  4176b0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->chart_series);
  4176b2:	6831      	ldr	r1, [r6, #0]
  4176b4:	314c      	adds	r1, #76	; 0x4c
  4176b6:	47a8      	blx	r5
            break;
  4176b8:	e608      	b.n	4172cc <theme_apply+0x70>
                list = lv_obj_get_style_list(obj, LV_TABLE_PART_BG);
  4176ba:	2100      	movs	r1, #0
  4176bc:	4620      	mov	r0, r4
  4176be:	4b38      	ldr	r3, [pc, #224]	; (4177a0 <theme_apply+0x544>)
  4176c0:	4798      	blx	r3
                _lv_style_list_add_style(list, &styles->bg);
  4176c2:	4b38      	ldr	r3, [pc, #224]	; (4177a4 <theme_apply+0x548>)
  4176c4:	6819      	ldr	r1, [r3, #0]
  4176c6:	3104      	adds	r1, #4
  4176c8:	4b37      	ldr	r3, [pc, #220]	; (4177a8 <theme_apply+0x54c>)
  4176ca:	4798      	blx	r3
                int idx = 1; /* start value should be 1, not zero, since cell styles
  4176cc:	2501      	movs	r5, #1
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  4176ce:	e009      	b.n	4176e4 <theme_apply+0x488>
                    list = lv_obj_get_style_list(obj, idx);
  4176d0:	b2e9      	uxtb	r1, r5
  4176d2:	4620      	mov	r0, r4
  4176d4:	4b32      	ldr	r3, [pc, #200]	; (4177a0 <theme_apply+0x544>)
  4176d6:	4798      	blx	r3
                    _lv_style_list_add_style(list, &styles->table_cell);
  4176d8:	4b32      	ldr	r3, [pc, #200]	; (4177a4 <theme_apply+0x548>)
  4176da:	6819      	ldr	r1, [r3, #0]
  4176dc:	31a4      	adds	r1, #164	; 0xa4
  4176de:	4b32      	ldr	r3, [pc, #200]	; (4177a8 <theme_apply+0x54c>)
  4176e0:	4798      	blx	r3
                for(; idx <= LV_TABLE_CELL_STYLE_CNT; idx ++) {
  4176e2:	3501      	adds	r5, #1
  4176e4:	2d04      	cmp	r5, #4
  4176e6:	ddf3      	ble.n	4176d0 <theme_apply+0x474>
  4176e8:	e5f0      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_WIN_PART_BG);
  4176ea:	2100      	movs	r1, #0
  4176ec:	4620      	mov	r0, r4
  4176ee:	4f2c      	ldr	r7, [pc, #176]	; (4177a0 <theme_apply+0x544>)
  4176f0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->scr);
  4176f2:	4e2c      	ldr	r6, [pc, #176]	; (4177a4 <theme_apply+0x548>)
  4176f4:	6831      	ldr	r1, [r6, #0]
  4176f6:	4d2c      	ldr	r5, [pc, #176]	; (4177a8 <theme_apply+0x54c>)
  4176f8:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_SCROLLBAR);
  4176fa:	2142      	movs	r1, #66	; 0x42
  4176fc:	4620      	mov	r0, r4
  4176fe:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  417700:	6831      	ldr	r1, [r6, #0]
  417702:	3184      	adds	r1, #132	; 0x84
  417704:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_CONTENT_SCROLLABLE);
  417706:	2141      	movs	r1, #65	; 0x41
  417708:	4620      	mov	r0, r4
  41770a:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_page_scrl);
  41770c:	6831      	ldr	r1, [r6, #0]
  41770e:	31b4      	adds	r1, #180	; 0xb4
  417710:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_WIN_PART_HEADER);
  417712:	2140      	movs	r1, #64	; 0x40
  417714:	4620      	mov	r0, r4
  417716:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->tabview_btns_bg);
  417718:	6831      	ldr	r1, [r6, #0]
  41771a:	31ac      	adds	r1, #172	; 0xac
  41771c:	47a8      	blx	r5
            break;
  41771e:	e5d5      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  417720:	2100      	movs	r1, #0
  417722:	4620      	mov	r0, r4
  417724:	4b1e      	ldr	r3, [pc, #120]	; (4177a0 <theme_apply+0x544>)
  417726:	4798      	blx	r3
            _lv_style_list_add_style(list, &styles->tabview_btns);
  417728:	4b1e      	ldr	r3, [pc, #120]	; (4177a4 <theme_apply+0x548>)
  41772a:	6819      	ldr	r1, [r3, #0]
  41772c:	31a8      	adds	r1, #168	; 0xa8
  41772e:	4b1e      	ldr	r3, [pc, #120]	; (4177a8 <theme_apply+0x54c>)
  417730:	4798      	blx	r3
            break;
  417732:	e5cb      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_BG);
  417734:	2100      	movs	r1, #0
  417736:	4620      	mov	r0, r4
  417738:	4f19      	ldr	r7, [pc, #100]	; (4177a0 <theme_apply+0x544>)
  41773a:	47b8      	blx	r7
  41773c:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41773e:	4e19      	ldr	r6, [pc, #100]	; (4177a4 <theme_apply+0x548>)
  417740:	6831      	ldr	r1, [r6, #0]
  417742:	3104      	adds	r1, #4
  417744:	4d18      	ldr	r5, [pc, #96]	; (4177a8 <theme_apply+0x54c>)
  417746:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  417748:	6831      	ldr	r1, [r6, #0]
  41774a:	3118      	adds	r1, #24
  41774c:	4640      	mov	r0, r8
  41774e:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_PLACEHOLDER);
  417750:	2104      	movs	r1, #4
  417752:	4620      	mov	r0, r4
  417754:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_placeholder);
  417756:	6831      	ldr	r1, [r6, #0]
  417758:	31bc      	adds	r1, #188	; 0xbc
  41775a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_CURSOR);
  41775c:	2103      	movs	r1, #3
  41775e:	4620      	mov	r0, r4
  417760:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->ta_cursor);
  417762:	6831      	ldr	r1, [r6, #0]
  417764:	31b8      	adds	r1, #184	; 0xb8
  417766:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_TEXTAREA_PART_SCROLLBAR);
  417768:	2101      	movs	r1, #1
  41776a:	4620      	mov	r0, r4
  41776c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->sb);
  41776e:	6831      	ldr	r1, [r6, #0]
  417770:	3184      	adds	r1, #132	; 0x84
  417772:	47a8      	blx	r5
            break;
  417774:	e5aa      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_BG);
  417776:	2100      	movs	r1, #0
  417778:	4620      	mov	r0, r4
  41777a:	4f09      	ldr	r7, [pc, #36]	; (4177a0 <theme_apply+0x544>)
  41777c:	47b8      	blx	r7
  41777e:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  417780:	4e08      	ldr	r6, [pc, #32]	; (4177a4 <theme_apply+0x548>)
  417782:	6831      	ldr	r1, [r6, #0]
  417784:	3104      	adds	r1, #4
  417786:	4d08      	ldr	r5, [pc, #32]	; (4177a8 <theme_apply+0x54c>)
  417788:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->pad_small);
  41778a:	6831      	ldr	r1, [r6, #0]
  41778c:	3118      	adds	r1, #24
  41778e:	4640      	mov	r0, r8
  417790:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_SPINBOX_PART_CURSOR);
  417792:	2103      	movs	r1, #3
  417794:	4620      	mov	r0, r4
  417796:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->spinbox_cursor);
  417798:	6831      	ldr	r1, [r6, #0]
  41779a:	319c      	adds	r1, #156	; 0x9c
  41779c:	47a8      	blx	r5
            break;
  41779e:	e595      	b.n	4172cc <theme_apply+0x70>
  4177a0:	00405755 	.word	0x00405755
  4177a4:	204147a8 	.word	0x204147a8
  4177a8:	0040997d 	.word	0x0040997d
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
  4177ac:	2100      	movs	r1, #0
  4177ae:	4620      	mov	r0, r4
  4177b0:	4b31      	ldr	r3, [pc, #196]	; (417878 <theme_apply+0x61c>)
  4177b2:	4798      	blx	r3
  4177b4:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  4177b6:	4e31      	ldr	r6, [pc, #196]	; (41787c <theme_apply+0x620>)
  4177b8:	6831      	ldr	r1, [r6, #0]
  4177ba:	3104      	adds	r1, #4
  4177bc:	4d30      	ldr	r5, [pc, #192]	; (417880 <theme_apply+0x624>)
  4177be:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->bg_click);
  4177c0:	6831      	ldr	r1, [r6, #0]
  4177c2:	3108      	adds	r1, #8
  4177c4:	4638      	mov	r0, r7
  4177c6:	47a8      	blx	r5
            break;
  4177c8:	e580      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_BG);
  4177ca:	2100      	movs	r1, #0
  4177cc:	4620      	mov	r0, r4
  4177ce:	4f2a      	ldr	r7, [pc, #168]	; (417878 <theme_apply+0x61c>)
  4177d0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->bg);
  4177d2:	4e2a      	ldr	r6, [pc, #168]	; (41787c <theme_apply+0x620>)
  4177d4:	6831      	ldr	r1, [r6, #0]
  4177d6:	3104      	adds	r1, #4
  4177d8:	4d29      	ldr	r5, [pc, #164]	; (417880 <theme_apply+0x624>)
  4177da:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DATE);
  4177dc:	2103      	movs	r1, #3
  4177de:	4620      	mov	r0, r4
  4177e0:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_date_nums);
  4177e2:	6831      	ldr	r1, [r6, #0]
  4177e4:	3130      	adds	r1, #48	; 0x30
  4177e6:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_HEADER);
  4177e8:	2101      	movs	r1, #1
  4177ea:	4620      	mov	r0, r4
  4177ec:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_header);
  4177ee:	6831      	ldr	r1, [r6, #0]
  4177f0:	3134      	adds	r1, #52	; 0x34
  4177f2:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CALENDAR_PART_DAY_NAMES);
  4177f4:	2102      	movs	r1, #2
  4177f6:	4620      	mov	r0, r4
  4177f8:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->calendar_daynames);
  4177fa:	6831      	ldr	r1, [r6, #0]
  4177fc:	3138      	adds	r1, #56	; 0x38
  4177fe:	47a8      	blx	r5
            break;
  417800:	e564      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_MAIN);
  417802:	2100      	movs	r1, #0
  417804:	4620      	mov	r0, r4
  417806:	4f1c      	ldr	r7, [pc, #112]	; (417878 <theme_apply+0x61c>)
  417808:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_bg);
  41780a:	4e1c      	ldr	r6, [pc, #112]	; (41787c <theme_apply+0x620>)
  41780c:	6831      	ldr	r1, [r6, #0]
  41780e:	313c      	adds	r1, #60	; 0x3c
  417810:	4d1b      	ldr	r5, [pc, #108]	; (417880 <theme_apply+0x624>)
  417812:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_CPICKER_PART_KNOB);
  417814:	2101      	movs	r1, #1
  417816:	4620      	mov	r0, r4
  417818:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->cpicker_indic);
  41781a:	6831      	ldr	r1, [r6, #0]
  41781c:	3140      	adds	r1, #64	; 0x40
  41781e:	47a8      	blx	r5
            break;
  417820:	e554      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_LINEMETER_PART_MAIN);
  417822:	2100      	movs	r1, #0
  417824:	4620      	mov	r0, r4
  417826:	4b14      	ldr	r3, [pc, #80]	; (417878 <theme_apply+0x61c>)
  417828:	4798      	blx	r3
  41782a:	4607      	mov	r7, r0
            _lv_style_list_add_style(list, &styles->bg);
  41782c:	4e13      	ldr	r6, [pc, #76]	; (41787c <theme_apply+0x620>)
  41782e:	6831      	ldr	r1, [r6, #0]
  417830:	3104      	adds	r1, #4
  417832:	4d13      	ldr	r5, [pc, #76]	; (417880 <theme_apply+0x624>)
  417834:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->lmeter);
  417836:	6831      	ldr	r1, [r6, #0]
  417838:	3174      	adds	r1, #116	; 0x74
  41783a:	4638      	mov	r0, r7
  41783c:	47a8      	blx	r5
            break;
  41783e:	e545      	b.n	4172cc <theme_apply+0x70>
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAIN);
  417840:	2100      	movs	r1, #0
  417842:	4620      	mov	r0, r4
  417844:	4f0c      	ldr	r7, [pc, #48]	; (417878 <theme_apply+0x61c>)
  417846:	47b8      	blx	r7
  417848:	4680      	mov	r8, r0
            _lv_style_list_add_style(list, &styles->bg);
  41784a:	4e0c      	ldr	r6, [pc, #48]	; (41787c <theme_apply+0x620>)
  41784c:	6831      	ldr	r1, [r6, #0]
  41784e:	3104      	adds	r1, #4
  417850:	4d0b      	ldr	r5, [pc, #44]	; (417880 <theme_apply+0x624>)
  417852:	47a8      	blx	r5
            _lv_style_list_add_style(list, &styles->gauge_main);
  417854:	6831      	ldr	r1, [r6, #0]
  417856:	3160      	adds	r1, #96	; 0x60
  417858:	4640      	mov	r0, r8
  41785a:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_MAJOR);
  41785c:	2101      	movs	r1, #1
  41785e:	4620      	mov	r0, r4
  417860:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_strong);
  417862:	6831      	ldr	r1, [r6, #0]
  417864:	3164      	adds	r1, #100	; 0x64
  417866:	47a8      	blx	r5
            list = lv_obj_get_style_list(obj, LV_GAUGE_PART_NEEDLE);
  417868:	2102      	movs	r1, #2
  41786a:	4620      	mov	r0, r4
  41786c:	47b8      	blx	r7
            _lv_style_list_add_style(list, &styles->gauge_needle);
  41786e:	6831      	ldr	r1, [r6, #0]
  417870:	3168      	adds	r1, #104	; 0x68
  417872:	47a8      	blx	r5
            break;
  417874:	e52a      	b.n	4172cc <theme_apply+0x70>
  417876:	bf00      	nop
  417878:	00405755 	.word	0x00405755
  41787c:	204147a8 	.word	0x204147a8
  417880:	0040997d 	.word	0x0040997d

00417884 <style_init_reset>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void style_init_reset(lv_style_t * style)
{
  417884:	b508      	push	{r3, lr}
    if(inited) lv_style_reset(style);
  417886:	4b04      	ldr	r3, [pc, #16]	; (417898 <style_init_reset+0x14>)
  417888:	781b      	ldrb	r3, [r3, #0]
  41788a:	b913      	cbnz	r3, 417892 <style_init_reset+0xe>
    else lv_style_init(style);
  41788c:	4b03      	ldr	r3, [pc, #12]	; (41789c <style_init_reset+0x18>)
  41788e:	4798      	blx	r3
  417890:	bd08      	pop	{r3, pc}
    if(inited) lv_style_reset(style);
  417892:	4b03      	ldr	r3, [pc, #12]	; (4178a0 <style_init_reset+0x1c>)
  417894:	4798      	blx	r3
  417896:	bd08      	pop	{r3, pc}
  417898:	204147a4 	.word	0x204147a4
  41789c:	00409899 	.word	0x00409899
  4178a0:	00409abd 	.word	0x00409abd

004178a4 <bar_init>:
{
  4178a4:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->bar_bg);
  4178a6:	4c6f      	ldr	r4, [pc, #444]	; (417a64 <bar_init+0x1c0>)
  4178a8:	6820      	ldr	r0, [r4, #0]
  4178aa:	3028      	adds	r0, #40	; 0x28
  4178ac:	4b6e      	ldr	r3, [pc, #440]	; (417a68 <bar_init+0x1c4>)
  4178ae:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4178b0:	6820      	ldr	r0, [r4, #0]
#define _LV_OBJ_STYLE_SET_GET_DECLARE(prop_name, func_name, value_type, style_type, scalar)                             \
    _OBJ_GET_STYLE_##scalar(prop_name, func_name, value_type, style_type)                                               \
    _OBJ_SET_STYLE_LOCAL_##scalar(prop_name, func_name, value_type, style_type)                                         \
    _OBJ_SET_STYLE_##scalar(prop_name, func_name, value_type, style_type)

_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4178b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4178b6:	2101      	movs	r1, #1
  4178b8:	3028      	adds	r0, #40	; 0x28
  4178ba:	4b6c      	ldr	r3, [pc, #432]	; (417a6c <bar_init+0x1c8>)
  4178bc:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  4178be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4178c0:	22ff      	movs	r2, #255	; 0xff
  4178c2:	212c      	movs	r1, #44	; 0x2c
  4178c4:	3028      	adds	r0, #40	; 0x28
  4178c6:	4b6a      	ldr	r3, [pc, #424]	; (417a70 <bar_init+0x1cc>)
  4178c8:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bar_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  4178ca:	6820      	ldr	r0, [r4, #0]
  4178cc:	3028      	adds	r0, #40	; 0x28
  4178ce:	4b69      	ldr	r3, [pc, #420]	; (417a74 <bar_init+0x1d0>)
  4178d0:	6a1b      	ldr	r3, [r3, #32]
  4178d2:	f013 0f02 	tst.w	r3, #2
  4178d6:	f000 808e 	beq.w	4179f6 <bar_init+0x152>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
  4178da:	f04f 0200 	mov.w	r2, #0
  4178de:	2306      	movs	r3, #6
  4178e0:	f363 0202 	bfi	r2, r3, #0, #3
  4178e4:	231a      	movs	r3, #26
  4178e6:	f363 02c7 	bfi	r2, r3, #3, #5
  4178ea:	231b      	movs	r3, #27
  4178ec:	f363 220c 	bfi	r2, r3, #8, #5
  4178f0:	2305      	movs	r3, #5
  4178f2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4178f6:	2129      	movs	r1, #41	; 0x29
  4178f8:	4b5f      	ldr	r3, [pc, #380]	; (417a78 <bar_init+0x1d4>)
  4178fa:	4798      	blx	r3
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  4178fc:	4b59      	ldr	r3, [pc, #356]	; (417a64 <bar_init+0x1c0>)
  4178fe:	6818      	ldr	r0, [r3, #0]
  417900:	3028      	adds	r0, #40	; 0x28
  417902:	4b5c      	ldr	r3, [pc, #368]	; (417a74 <bar_init+0x1d0>)
  417904:	6a1b      	ldr	r3, [r3, #32]
  417906:	f013 0f02 	tst.w	r3, #2
  41790a:	f000 8082 	beq.w	417a12 <bar_init+0x16e>
  41790e:	f04f 0200 	mov.w	r2, #0
  417912:	2302      	movs	r3, #2
  417914:	f363 0202 	bfi	r2, r3, #0, #3
  417918:	2306      	movs	r3, #6
  41791a:	f363 02c7 	bfi	r2, r3, #3, #5
  41791e:	2309      	movs	r3, #9
  417920:	f363 220c 	bfi	r2, r3, #8, #5
  417924:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LINE_SPACE, value_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_BLEND_MODE, value_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417928:	2179      	movs	r1, #121	; 0x79
  41792a:	4d53      	ldr	r5, [pc, #332]	; (417a78 <bar_init+0x1d4>)
  41792c:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_DEFAULT, theme.color_primary);
  41792e:	4c4d      	ldr	r4, [pc, #308]	; (417a64 <bar_init+0x1c0>)
  417930:	6820      	ldr	r0, [r4, #0]
  417932:	4e50      	ldr	r6, [pc, #320]	; (417a74 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  417934:	89b2      	ldrh	r2, [r6, #12]
  417936:	2149      	movs	r1, #73	; 0x49
  417938:	3028      	adds	r0, #40	; 0x28
  41793a:	47a8      	blx	r5
    lv_style_set_outline_color(&styles->bar_bg, LV_STATE_EDITED, theme.color_secondary);
  41793c:	6820      	ldr	r0, [r4, #0]
  41793e:	89f2      	ldrh	r2, [r6, #14]
  417940:	f240 4149 	movw	r1, #1097	; 0x449
  417944:	3028      	adds	r0, #40	; 0x28
  417946:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  417948:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41794a:	2200      	movs	r2, #0
  41794c:	214c      	movs	r1, #76	; 0x4c
  41794e:	3028      	adds	r0, #40	; 0x28
  417950:	4d47      	ldr	r5, [pc, #284]	; (417a70 <bar_init+0x1cc>)
  417952:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->bar_bg, LV_STATE_FOCUSED, LV_OPA_50);
  417954:	6820      	ldr	r0, [r4, #0]
  417956:	227f      	movs	r2, #127	; 0x7f
  417958:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41795c:	3028      	adds	r0, #40	; 0x28
  41795e:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  417960:	6824      	ldr	r4, [r4, #0]
  417962:	3428      	adds	r4, #40	; 0x28
  417964:	6a33      	ldr	r3, [r6, #32]
  417966:	f013 0f20 	tst.w	r3, #32
  41796a:	d055      	beq.n	417a18 <bar_init+0x174>
  41796c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41796e:	2140      	movs	r1, #64	; 0x40
  417970:	4620      	mov	r0, r4
  417972:	4d3e      	ldr	r5, [pc, #248]	; (417a6c <bar_init+0x1c8>)
  417974:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bar_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  417976:	4c3b      	ldr	r4, [pc, #236]	; (417a64 <bar_init+0x1c0>)
  417978:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41797a:	2200      	movs	r2, #0
  41797c:	21b0      	movs	r1, #176	; 0xb0
  41797e:	3028      	adds	r0, #40	; 0x28
  417980:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bar_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  417982:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_1, transition_prop_1, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_2, transition_prop_2, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  417984:	224c      	movs	r2, #76	; 0x4c
  417986:	21b7      	movs	r1, #183	; 0xb7
  417988:	3028      	adds	r0, #40	; 0x28
  41798a:	47a8      	blx	r5
    style_init_reset(&styles->bar_indic);
  41798c:	6820      	ldr	r0, [r4, #0]
  41798e:	302c      	adds	r0, #44	; 0x2c
  417990:	4b35      	ldr	r3, [pc, #212]	; (417a68 <bar_init+0x1c4>)
  417992:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bar_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  417994:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417996:	22ff      	movs	r2, #255	; 0xff
  417998:	212c      	movs	r1, #44	; 0x2c
  41799a:	4408      	add	r0, r1
  41799c:	4b34      	ldr	r3, [pc, #208]	; (417a70 <bar_init+0x1cc>)
  41799e:	4798      	blx	r3
    lv_style_set_radius(&styles->bar_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4179a0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4179a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4179a6:	2101      	movs	r1, #1
  4179a8:	302c      	adds	r0, #44	; 0x2c
  4179aa:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DEFAULT, theme.color_primary);
  4179ac:	6820      	ldr	r0, [r4, #0]
  4179ae:	4d31      	ldr	r5, [pc, #196]	; (417a74 <bar_init+0x1d0>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4179b0:	89aa      	ldrh	r2, [r5, #12]
  4179b2:	2129      	movs	r1, #41	; 0x29
  4179b4:	302c      	adds	r0, #44	; 0x2c
  4179b6:	4e30      	ldr	r6, [pc, #192]	; (417a78 <bar_init+0x1d4>)
  4179b8:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->bar_indic, LV_STATE_DISABLED, lv_color_hex3(0x888));
  4179ba:	6820      	ldr	r0, [r4, #0]
  4179bc:	f04f 0200 	mov.w	r2, #0
  4179c0:	2304      	movs	r3, #4
  4179c2:	f363 0202 	bfi	r2, r3, #0, #3
  4179c6:	2311      	movs	r3, #17
  4179c8:	f363 02c7 	bfi	r2, r3, #3, #5
  4179cc:	f363 220c 	bfi	r2, r3, #8, #5
  4179d0:	2302      	movs	r3, #2
  4179d2:	f363 324f 	bfi	r2, r3, #13, #3
  4179d6:	f242 0129 	movw	r1, #8233	; 0x2029
  4179da:	302c      	adds	r0, #44	; 0x2c
  4179dc:	47b0      	blx	r6
    lv_style_set_value_color(&styles->bar_indic, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x41404f) : LV_COLOR_WHITE);
  4179de:	6820      	ldr	r0, [r4, #0]
  4179e0:	302c      	adds	r0, #44	; 0x2c
  4179e2:	6a2b      	ldr	r3, [r5, #32]
  4179e4:	f013 0f02 	tst.w	r3, #2
  4179e8:	d12d      	bne.n	417a46 <bar_init+0x1a2>
  4179ea:	4b24      	ldr	r3, [pc, #144]	; (417a7c <bar_init+0x1d8>)
  4179ec:	881a      	ldrh	r2, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  4179ee:	2179      	movs	r1, #121	; 0x79
  4179f0:	4b21      	ldr	r3, [pc, #132]	; (417a78 <bar_init+0x1d4>)
  4179f2:	4798      	blx	r3
  4179f4:	bd70      	pop	{r4, r5, r6, pc}
  4179f6:	2302      	movs	r3, #2
  4179f8:	f04f 0200 	mov.w	r2, #0
  4179fc:	f363 0202 	bfi	r2, r3, #0, #3
  417a00:	2108      	movs	r1, #8
  417a02:	f361 02c7 	bfi	r2, r1, #3, #5
  417a06:	2109      	movs	r1, #9
  417a08:	f361 220c 	bfi	r2, r1, #8, #5
  417a0c:	f363 324f 	bfi	r2, r3, #13, #3
  417a10:	e771      	b.n	4178f6 <bar_init+0x52>
    lv_style_set_value_color(&styles->bar_bg, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417a12:	4b1a      	ldr	r3, [pc, #104]	; (417a7c <bar_init+0x1d8>)
  417a14:	881a      	ldrh	r2, [r3, #0]
  417a16:	e787      	b.n	417928 <bar_init+0x84>
    lv_style_set_outline_width(&styles->bar_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  417a18:	2000      	movs	r0, #0
  417a1a:	4b19      	ldr	r3, [pc, #100]	; (417a80 <bar_init+0x1dc>)
  417a1c:	4798      	blx	r3
  417a1e:	3028      	adds	r0, #40	; 0x28
  417a20:	0040      	lsls	r0, r0, #1
  417a22:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417a26:	da01      	bge.n	417a2c <bar_init+0x188>
  417a28:	2201      	movs	r2, #1
  417a2a:	e7a0      	b.n	41796e <bar_init+0xca>
  417a2c:	2000      	movs	r0, #0
  417a2e:	4b14      	ldr	r3, [pc, #80]	; (417a80 <bar_init+0x1dc>)
  417a30:	4798      	blx	r3
  417a32:	3028      	adds	r0, #40	; 0x28
  417a34:	0040      	lsls	r0, r0, #1
  417a36:	4b13      	ldr	r3, [pc, #76]	; (417a84 <bar_init+0x1e0>)
  417a38:	fb83 2300 	smull	r2, r3, r3, r0
  417a3c:	17c2      	asrs	r2, r0, #31
  417a3e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417a42:	b212      	sxth	r2, r2
  417a44:	e793      	b.n	41796e <bar_init+0xca>
  417a46:	f04f 0200 	mov.w	r2, #0
  417a4a:	2302      	movs	r3, #2
  417a4c:	f363 0202 	bfi	r2, r3, #0, #3
  417a50:	2308      	movs	r3, #8
  417a52:	f363 02c7 	bfi	r2, r3, #3, #5
  417a56:	2309      	movs	r3, #9
  417a58:	f363 220c 	bfi	r2, r3, #8, #5
  417a5c:	f36f 324f 	bfc	r2, #13, #3
  417a60:	e7c5      	b.n	4179ee <bar_init+0x14a>
  417a62:	bf00      	nop
  417a64:	204147a8 	.word	0x204147a8
  417a68:	00417885 	.word	0x00417885
  417a6c:	00409c81 	.word	0x00409c81
  417a70:	00409fa1 	.word	0x00409fa1
  417a74:	204147ac 	.word	0x204147ac
  417a78:	00409e11 	.word	0x00409e11
  417a7c:	004297c8 	.word	0x004297c8
  417a80:	0041468d 	.word	0x0041468d
  417a84:	66666667 	.word	0x66666667

00417a88 <slider_init>:
{
  417a88:	b510      	push	{r4, lr}
    style_init_reset(&styles->slider_knob);
  417a8a:	4ca3      	ldr	r4, [pc, #652]	; (417d18 <slider_init+0x290>)
  417a8c:	6820      	ldr	r0, [r4, #0]
  417a8e:	3094      	adds	r0, #148	; 0x94
  417a90:	4ba2      	ldr	r3, [pc, #648]	; (417d1c <slider_init+0x294>)
  417a92:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->slider_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  417a94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417a96:	22ff      	movs	r2, #255	; 0xff
  417a98:	212c      	movs	r1, #44	; 0x2c
  417a9a:	3094      	adds	r0, #148	; 0x94
  417a9c:	4ba0      	ldr	r3, [pc, #640]	; (417d20 <slider_init+0x298>)
  417a9e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  417aa0:	6820      	ldr	r0, [r4, #0]
  417aa2:	3094      	adds	r0, #148	; 0x94
  417aa4:	4b9f      	ldr	r3, [pc, #636]	; (417d24 <slider_init+0x29c>)
  417aa6:	6a1b      	ldr	r3, [r3, #32]
  417aa8:	f013 0f02 	tst.w	r3, #2
  417aac:	f000 80ba 	beq.w	417c24 <slider_init+0x19c>
  417ab0:	4b9c      	ldr	r3, [pc, #624]	; (417d24 <slider_init+0x29c>)
  417ab2:	899a      	ldrh	r2, [r3, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417ab4:	2129      	movs	r1, #41	; 0x29
  417ab6:	4b9c      	ldr	r3, [pc, #624]	; (417d28 <slider_init+0x2a0>)
  417ab8:	4798      	blx	r3
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417aba:	4b97      	ldr	r3, [pc, #604]	; (417d18 <slider_init+0x290>)
  417abc:	6818      	ldr	r0, [r3, #0]
  417abe:	3094      	adds	r0, #148	; 0x94
  417ac0:	4b98      	ldr	r3, [pc, #608]	; (417d24 <slider_init+0x29c>)
  417ac2:	6a1b      	ldr	r3, [r3, #32]
  417ac4:	f013 0f02 	tst.w	r3, #2
  417ac8:	f000 80af 	beq.w	417c2a <slider_init+0x1a2>
  417acc:	f04f 0200 	mov.w	r2, #0
  417ad0:	2302      	movs	r3, #2
  417ad2:	f363 0202 	bfi	r2, r3, #0, #3
  417ad6:	2306      	movs	r3, #6
  417ad8:	f363 02c7 	bfi	r2, r3, #3, #5
  417adc:	2309      	movs	r3, #9
  417ade:	f363 220c 	bfi	r2, r3, #8, #5
  417ae2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  417ae6:	2179      	movs	r1, #121	; 0x79
  417ae8:	4b8f      	ldr	r3, [pc, #572]	; (417d28 <slider_init+0x2a0>)
  417aea:	4798      	blx	r3
    lv_style_set_radius(&styles->slider_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417aec:	4c8a      	ldr	r4, [pc, #552]	; (417d18 <slider_init+0x290>)
  417aee:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417af0:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417af4:	2101      	movs	r1, #1
  417af6:	3094      	adds	r0, #148	; 0x94
  417af8:	4b8c      	ldr	r3, [pc, #560]	; (417d2c <slider_init+0x2a4>)
  417afa:	4798      	blx	r3
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417afc:	6824      	ldr	r4, [r4, #0]
  417afe:	3494      	adds	r4, #148	; 0x94
  417b00:	2000      	movs	r0, #0
  417b02:	4b8b      	ldr	r3, [pc, #556]	; (417d30 <slider_init+0x2a8>)
  417b04:	4798      	blx	r3
  417b06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417b0a:	3050      	adds	r0, #80	; 0x50
  417b0c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b10:	f280 808e 	bge.w	417c30 <slider_init+0x1a8>
  417b14:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417b16:	2112      	movs	r1, #18
  417b18:	4620      	mov	r0, r4
  417b1a:	4b84      	ldr	r3, [pc, #528]	; (417d2c <slider_init+0x2a4>)
  417b1c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417b1e:	4b7e      	ldr	r3, [pc, #504]	; (417d18 <slider_init+0x290>)
  417b20:	681c      	ldr	r4, [r3, #0]
  417b22:	3494      	adds	r4, #148	; 0x94
  417b24:	2000      	movs	r0, #0
  417b26:	4b82      	ldr	r3, [pc, #520]	; (417d30 <slider_init+0x2a8>)
  417b28:	4798      	blx	r3
  417b2a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417b2e:	3050      	adds	r0, #80	; 0x50
  417b30:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b34:	f280 808a 	bge.w	417c4c <slider_init+0x1c4>
  417b38:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417b3a:	2113      	movs	r1, #19
  417b3c:	4620      	mov	r0, r4
  417b3e:	4b7b      	ldr	r3, [pc, #492]	; (417d2c <slider_init+0x2a4>)
  417b40:	4798      	blx	r3
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417b42:	4b75      	ldr	r3, [pc, #468]	; (417d18 <slider_init+0x290>)
  417b44:	681c      	ldr	r4, [r3, #0]
  417b46:	3494      	adds	r4, #148	; 0x94
  417b48:	2000      	movs	r0, #0
  417b4a:	4b79      	ldr	r3, [pc, #484]	; (417d30 <slider_init+0x2a8>)
  417b4c:	4798      	blx	r3
  417b4e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417b52:	3050      	adds	r0, #80	; 0x50
  417b54:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b58:	f280 8086 	bge.w	417c68 <slider_init+0x1e0>
  417b5c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417b5e:	2110      	movs	r1, #16
  417b60:	4620      	mov	r0, r4
  417b62:	4b72      	ldr	r3, [pc, #456]	; (417d2c <slider_init+0x2a4>)
  417b64:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417b66:	4b6c      	ldr	r3, [pc, #432]	; (417d18 <slider_init+0x290>)
  417b68:	681c      	ldr	r4, [r3, #0]
  417b6a:	3494      	adds	r4, #148	; 0x94
  417b6c:	2000      	movs	r0, #0
  417b6e:	4b70      	ldr	r3, [pc, #448]	; (417d30 <slider_init+0x2a8>)
  417b70:	4798      	blx	r3
  417b72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417b76:	3050      	adds	r0, #80	; 0x50
  417b78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417b7c:	f280 8082 	bge.w	417c84 <slider_init+0x1fc>
  417b80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417b82:	2111      	movs	r1, #17
  417b84:	4620      	mov	r0, r4
  417b86:	4b69      	ldr	r3, [pc, #420]	; (417d2c <slider_init+0x2a4>)
  417b88:	4798      	blx	r3
    style_init_reset(&styles->slider_bg);
  417b8a:	4c63      	ldr	r4, [pc, #396]	; (417d18 <slider_init+0x290>)
  417b8c:	6820      	ldr	r0, [r4, #0]
  417b8e:	3098      	adds	r0, #152	; 0x98
  417b90:	4b62      	ldr	r3, [pc, #392]	; (417d1c <slider_init+0x294>)
  417b92:	4798      	blx	r3
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417b94:	6824      	ldr	r4, [r4, #0]
  417b96:	3498      	adds	r4, #152	; 0x98
  417b98:	2000      	movs	r0, #0
  417b9a:	4b65      	ldr	r3, [pc, #404]	; (417d30 <slider_init+0x2a8>)
  417b9c:	4798      	blx	r3
  417b9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ba2:	0040      	lsls	r0, r0, #1
  417ba4:	3050      	adds	r0, #80	; 0x50
  417ba6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417baa:	da79      	bge.n	417ca0 <slider_init+0x218>
  417bac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  417bae:	2117      	movs	r1, #23
  417bb0:	4620      	mov	r0, r4
  417bb2:	4b5e      	ldr	r3, [pc, #376]	; (417d2c <slider_init+0x2a4>)
  417bb4:	4798      	blx	r3
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417bb6:	4b58      	ldr	r3, [pc, #352]	; (417d18 <slider_init+0x290>)
  417bb8:	681c      	ldr	r4, [r3, #0]
  417bba:	3498      	adds	r4, #152	; 0x98
  417bbc:	2000      	movs	r0, #0
  417bbe:	4b5c      	ldr	r3, [pc, #368]	; (417d30 <slider_init+0x2a8>)
  417bc0:	4798      	blx	r3
  417bc2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bc6:	0040      	lsls	r0, r0, #1
  417bc8:	3050      	adds	r0, #80	; 0x50
  417bca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417bce:	da76      	bge.n	417cbe <slider_init+0x236>
  417bd0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  417bd2:	2118      	movs	r1, #24
  417bd4:	4620      	mov	r0, r4
  417bd6:	4b55      	ldr	r3, [pc, #340]	; (417d2c <slider_init+0x2a4>)
  417bd8:	4798      	blx	r3
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417bda:	4b4f      	ldr	r3, [pc, #316]	; (417d18 <slider_init+0x290>)
  417bdc:	681c      	ldr	r4, [r3, #0]
  417bde:	3498      	adds	r4, #152	; 0x98
  417be0:	2000      	movs	r0, #0
  417be2:	4b53      	ldr	r3, [pc, #332]	; (417d30 <slider_init+0x2a8>)
  417be4:	4798      	blx	r3
  417be6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417bea:	0040      	lsls	r0, r0, #1
  417bec:	3050      	adds	r0, #80	; 0x50
  417bee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417bf2:	da73      	bge.n	417cdc <slider_init+0x254>
  417bf4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  417bf6:	2115      	movs	r1, #21
  417bf8:	4620      	mov	r0, r4
  417bfa:	4b4c      	ldr	r3, [pc, #304]	; (417d2c <slider_init+0x2a4>)
  417bfc:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417bfe:	4b46      	ldr	r3, [pc, #280]	; (417d18 <slider_init+0x290>)
  417c00:	681c      	ldr	r4, [r3, #0]
  417c02:	3498      	adds	r4, #152	; 0x98
  417c04:	2000      	movs	r0, #0
  417c06:	4b4a      	ldr	r3, [pc, #296]	; (417d30 <slider_init+0x2a8>)
  417c08:	4798      	blx	r3
  417c0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417c0e:	0040      	lsls	r0, r0, #1
  417c10:	3050      	adds	r0, #80	; 0x50
  417c12:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417c16:	da70      	bge.n	417cfa <slider_init+0x272>
  417c18:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  417c1a:	2116      	movs	r1, #22
  417c1c:	4620      	mov	r0, r4
  417c1e:	4b43      	ldr	r3, [pc, #268]	; (417d2c <slider_init+0x2a4>)
  417c20:	4798      	blx	r3
  417c22:	bd10      	pop	{r4, pc}
    lv_style_set_bg_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? theme.color_primary : LV_COLOR_WHITE);
  417c24:	4b43      	ldr	r3, [pc, #268]	; (417d34 <slider_init+0x2ac>)
  417c26:	881a      	ldrh	r2, [r3, #0]
  417c28:	e744      	b.n	417ab4 <slider_init+0x2c>
    lv_style_set_value_color(&styles->slider_knob, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  417c2a:	4b42      	ldr	r3, [pc, #264]	; (417d34 <slider_init+0x2ac>)
  417c2c:	881a      	ldrh	r2, [r3, #0]
  417c2e:	e75a      	b.n	417ae6 <slider_init+0x5e>
    lv_style_set_pad_left(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417c30:	2000      	movs	r0, #0
  417c32:	4b3f      	ldr	r3, [pc, #252]	; (417d30 <slider_init+0x2a8>)
  417c34:	4798      	blx	r3
  417c36:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417c3a:	3050      	adds	r0, #80	; 0x50
  417c3c:	4b3e      	ldr	r3, [pc, #248]	; (417d38 <slider_init+0x2b0>)
  417c3e:	fb83 2300 	smull	r2, r3, r3, r0
  417c42:	17c2      	asrs	r2, r0, #31
  417c44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c48:	b212      	sxth	r2, r2
  417c4a:	e764      	b.n	417b16 <slider_init+0x8e>
    lv_style_set_pad_right(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417c4c:	2000      	movs	r0, #0
  417c4e:	4b38      	ldr	r3, [pc, #224]	; (417d30 <slider_init+0x2a8>)
  417c50:	4798      	blx	r3
  417c52:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417c56:	3050      	adds	r0, #80	; 0x50
  417c58:	4b37      	ldr	r3, [pc, #220]	; (417d38 <slider_init+0x2b0>)
  417c5a:	fb83 2300 	smull	r2, r3, r3, r0
  417c5e:	17c2      	asrs	r2, r0, #31
  417c60:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c64:	b212      	sxth	r2, r2
  417c66:	e768      	b.n	417b3a <slider_init+0xb2>
    lv_style_set_pad_top(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417c68:	2000      	movs	r0, #0
  417c6a:	4b31      	ldr	r3, [pc, #196]	; (417d30 <slider_init+0x2a8>)
  417c6c:	4798      	blx	r3
  417c6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417c72:	3050      	adds	r0, #80	; 0x50
  417c74:	4b30      	ldr	r3, [pc, #192]	; (417d38 <slider_init+0x2b0>)
  417c76:	fb83 2300 	smull	r2, r3, r3, r0
  417c7a:	17c2      	asrs	r2, r0, #31
  417c7c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c80:	b212      	sxth	r2, r2
  417c82:	e76c      	b.n	417b5e <slider_init+0xd6>
    lv_style_set_pad_bottom(&styles->slider_knob, LV_STATE_DEFAULT, LV_DPX(7));
  417c84:	2000      	movs	r0, #0
  417c86:	4b2a      	ldr	r3, [pc, #168]	; (417d30 <slider_init+0x2a8>)
  417c88:	4798      	blx	r3
  417c8a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417c8e:	3050      	adds	r0, #80	; 0x50
  417c90:	4b29      	ldr	r3, [pc, #164]	; (417d38 <slider_init+0x2b0>)
  417c92:	fb83 2300 	smull	r2, r3, r3, r0
  417c96:	17c2      	asrs	r2, r0, #31
  417c98:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417c9c:	b212      	sxth	r2, r2
  417c9e:	e770      	b.n	417b82 <slider_init+0xfa>
    lv_style_set_margin_left(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417ca0:	2000      	movs	r0, #0
  417ca2:	4b23      	ldr	r3, [pc, #140]	; (417d30 <slider_init+0x2a8>)
  417ca4:	4798      	blx	r3
  417ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417caa:	0040      	lsls	r0, r0, #1
  417cac:	3050      	adds	r0, #80	; 0x50
  417cae:	4b22      	ldr	r3, [pc, #136]	; (417d38 <slider_init+0x2b0>)
  417cb0:	fb83 2300 	smull	r2, r3, r3, r0
  417cb4:	17c2      	asrs	r2, r0, #31
  417cb6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cba:	b212      	sxth	r2, r2
  417cbc:	e777      	b.n	417bae <slider_init+0x126>
    lv_style_set_margin_right(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417cbe:	2000      	movs	r0, #0
  417cc0:	4b1b      	ldr	r3, [pc, #108]	; (417d30 <slider_init+0x2a8>)
  417cc2:	4798      	blx	r3
  417cc4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417cc8:	0040      	lsls	r0, r0, #1
  417cca:	3050      	adds	r0, #80	; 0x50
  417ccc:	4b1a      	ldr	r3, [pc, #104]	; (417d38 <slider_init+0x2b0>)
  417cce:	fb83 2300 	smull	r2, r3, r3, r0
  417cd2:	17c2      	asrs	r2, r0, #31
  417cd4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cd8:	b212      	sxth	r2, r2
  417cda:	e77a      	b.n	417bd2 <slider_init+0x14a>
    lv_style_set_margin_top(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417cdc:	2000      	movs	r0, #0
  417cde:	4b14      	ldr	r3, [pc, #80]	; (417d30 <slider_init+0x2a8>)
  417ce0:	4798      	blx	r3
  417ce2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ce6:	0040      	lsls	r0, r0, #1
  417ce8:	3050      	adds	r0, #80	; 0x50
  417cea:	4b13      	ldr	r3, [pc, #76]	; (417d38 <slider_init+0x2b0>)
  417cec:	fb83 2300 	smull	r2, r3, r3, r0
  417cf0:	17c2      	asrs	r2, r0, #31
  417cf2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417cf6:	b212      	sxth	r2, r2
  417cf8:	e77d      	b.n	417bf6 <slider_init+0x16e>
    lv_style_set_margin_bottom(&styles->slider_bg, LV_STATE_DEFAULT, LV_DPX(10));
  417cfa:	2000      	movs	r0, #0
  417cfc:	4b0c      	ldr	r3, [pc, #48]	; (417d30 <slider_init+0x2a8>)
  417cfe:	4798      	blx	r3
  417d00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417d04:	0040      	lsls	r0, r0, #1
  417d06:	3050      	adds	r0, #80	; 0x50
  417d08:	4b0b      	ldr	r3, [pc, #44]	; (417d38 <slider_init+0x2b0>)
  417d0a:	fb83 2300 	smull	r2, r3, r3, r0
  417d0e:	17c2      	asrs	r2, r0, #31
  417d10:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417d14:	b212      	sxth	r2, r2
  417d16:	e780      	b.n	417c1a <slider_init+0x192>
  417d18:	204147a8 	.word	0x204147a8
  417d1c:	00417885 	.word	0x00417885
  417d20:	00409fa1 	.word	0x00409fa1
  417d24:	204147ac 	.word	0x204147ac
  417d28:	00409e11 	.word	0x00409e11
  417d2c:	00409c81 	.word	0x00409c81
  417d30:	0041468d 	.word	0x0041468d
  417d34:	004297c8 	.word	0x004297c8
  417d38:	66666667 	.word	0x66666667

00417d3c <switch_init>:
{
  417d3c:	b510      	push	{r4, lr}
    style_init_reset(&styles->sw_knob);
  417d3e:	4c48      	ldr	r4, [pc, #288]	; (417e60 <switch_init+0x124>)
  417d40:	6820      	ldr	r0, [r4, #0]
  417d42:	30a0      	adds	r0, #160	; 0xa0
  417d44:	4b47      	ldr	r3, [pc, #284]	; (417e64 <switch_init+0x128>)
  417d46:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sw_knob, LV_STATE_DEFAULT, LV_OPA_COVER);
  417d48:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  417d4a:	22ff      	movs	r2, #255	; 0xff
  417d4c:	212c      	movs	r1, #44	; 0x2c
  417d4e:	30a0      	adds	r0, #160	; 0xa0
  417d50:	4b45      	ldr	r3, [pc, #276]	; (417e68 <switch_init+0x12c>)
  417d52:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sw_knob, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  417d54:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  417d56:	4b45      	ldr	r3, [pc, #276]	; (417e6c <switch_init+0x130>)
  417d58:	881a      	ldrh	r2, [r3, #0]
  417d5a:	2129      	movs	r1, #41	; 0x29
  417d5c:	30a0      	adds	r0, #160	; 0xa0
  417d5e:	4b44      	ldr	r3, [pc, #272]	; (417e70 <switch_init+0x134>)
  417d60:	4798      	blx	r3
    lv_style_set_radius(&styles->sw_knob, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417d62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417d64:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417d68:	2101      	movs	r1, #1
  417d6a:	30a0      	adds	r0, #160	; 0xa0
  417d6c:	4b41      	ldr	r3, [pc, #260]	; (417e74 <switch_init+0x138>)
  417d6e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  417d70:	6824      	ldr	r4, [r4, #0]
  417d72:	34a0      	adds	r4, #160	; 0xa0
  417d74:	2000      	movs	r0, #0
  417d76:	4b40      	ldr	r3, [pc, #256]	; (417e78 <switch_init+0x13c>)
  417d78:	4798      	blx	r3
  417d7a:	3014      	adds	r0, #20
  417d7c:	0080      	lsls	r0, r0, #2
  417d7e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417d82:	da39      	bge.n	417df8 <switch_init+0xbc>
  417d84:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417d88:	2110      	movs	r1, #16
  417d8a:	4620      	mov	r0, r4
  417d8c:	4b39      	ldr	r3, [pc, #228]	; (417e74 <switch_init+0x138>)
  417d8e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  417d90:	4b33      	ldr	r3, [pc, #204]	; (417e60 <switch_init+0x124>)
  417d92:	681c      	ldr	r4, [r3, #0]
  417d94:	34a0      	adds	r4, #160	; 0xa0
  417d96:	2000      	movs	r0, #0
  417d98:	4b37      	ldr	r3, [pc, #220]	; (417e78 <switch_init+0x13c>)
  417d9a:	4798      	blx	r3
  417d9c:	3014      	adds	r0, #20
  417d9e:	0080      	lsls	r0, r0, #2
  417da0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417da4:	da35      	bge.n	417e12 <switch_init+0xd6>
  417da6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  417daa:	2111      	movs	r1, #17
  417dac:	4620      	mov	r0, r4
  417dae:	4b31      	ldr	r3, [pc, #196]	; (417e74 <switch_init+0x138>)
  417db0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  417db2:	4b2b      	ldr	r3, [pc, #172]	; (417e60 <switch_init+0x124>)
  417db4:	681c      	ldr	r4, [r3, #0]
  417db6:	34a0      	adds	r4, #160	; 0xa0
  417db8:	2000      	movs	r0, #0
  417dba:	4b2f      	ldr	r3, [pc, #188]	; (417e78 <switch_init+0x13c>)
  417dbc:	4798      	blx	r3
  417dbe:	3014      	adds	r0, #20
  417dc0:	0080      	lsls	r0, r0, #2
  417dc2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417dc6:	da31      	bge.n	417e2c <switch_init+0xf0>
  417dc8:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417dcc:	2112      	movs	r1, #18
  417dce:	4620      	mov	r0, r4
  417dd0:	4b28      	ldr	r3, [pc, #160]	; (417e74 <switch_init+0x138>)
  417dd2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  417dd4:	4b22      	ldr	r3, [pc, #136]	; (417e60 <switch_init+0x124>)
  417dd6:	681c      	ldr	r4, [r3, #0]
  417dd8:	34a0      	adds	r4, #160	; 0xa0
  417dda:	2000      	movs	r0, #0
  417ddc:	4b26      	ldr	r3, [pc, #152]	; (417e78 <switch_init+0x13c>)
  417dde:	4798      	blx	r3
  417de0:	3014      	adds	r0, #20
  417de2:	0080      	lsls	r0, r0, #2
  417de4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417de8:	da2d      	bge.n	417e46 <switch_init+0x10a>
  417dea:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417dee:	2113      	movs	r1, #19
  417df0:	4620      	mov	r0, r4
  417df2:	4b20      	ldr	r3, [pc, #128]	; (417e74 <switch_init+0x138>)
  417df4:	4798      	blx	r3
  417df6:	bd10      	pop	{r4, pc}
    lv_style_set_pad_top(&styles->sw_knob, LV_STATE_DEFAULT,    - LV_DPX(4));
  417df8:	2000      	movs	r0, #0
  417dfa:	4b1f      	ldr	r3, [pc, #124]	; (417e78 <switch_init+0x13c>)
  417dfc:	4798      	blx	r3
  417dfe:	3014      	adds	r0, #20
  417e00:	0080      	lsls	r0, r0, #2
  417e02:	4b1e      	ldr	r3, [pc, #120]	; (417e7c <switch_init+0x140>)
  417e04:	fb83 2300 	smull	r2, r3, r3, r0
  417e08:	17c2      	asrs	r2, r0, #31
  417e0a:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417e0e:	b212      	sxth	r2, r2
  417e10:	e7ba      	b.n	417d88 <switch_init+0x4c>
    lv_style_set_pad_bottom(&styles->sw_knob, LV_STATE_DEFAULT, - LV_DPX(4));
  417e12:	2000      	movs	r0, #0
  417e14:	4b18      	ldr	r3, [pc, #96]	; (417e78 <switch_init+0x13c>)
  417e16:	4798      	blx	r3
  417e18:	3014      	adds	r0, #20
  417e1a:	0080      	lsls	r0, r0, #2
  417e1c:	4b17      	ldr	r3, [pc, #92]	; (417e7c <switch_init+0x140>)
  417e1e:	fb83 2300 	smull	r2, r3, r3, r0
  417e22:	17c2      	asrs	r2, r0, #31
  417e24:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417e28:	b212      	sxth	r2, r2
  417e2a:	e7be      	b.n	417daa <switch_init+0x6e>
    lv_style_set_pad_left(&styles->sw_knob, LV_STATE_DEFAULT,   - LV_DPX(4));
  417e2c:	2000      	movs	r0, #0
  417e2e:	4b12      	ldr	r3, [pc, #72]	; (417e78 <switch_init+0x13c>)
  417e30:	4798      	blx	r3
  417e32:	3014      	adds	r0, #20
  417e34:	0080      	lsls	r0, r0, #2
  417e36:	4b11      	ldr	r3, [pc, #68]	; (417e7c <switch_init+0x140>)
  417e38:	fb83 2300 	smull	r2, r3, r3, r0
  417e3c:	17c2      	asrs	r2, r0, #31
  417e3e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417e42:	b212      	sxth	r2, r2
  417e44:	e7c2      	b.n	417dcc <switch_init+0x90>
    lv_style_set_pad_right(&styles->sw_knob, LV_STATE_DEFAULT,  - LV_DPX(4));
  417e46:	2000      	movs	r0, #0
  417e48:	4b0b      	ldr	r3, [pc, #44]	; (417e78 <switch_init+0x13c>)
  417e4a:	4798      	blx	r3
  417e4c:	3014      	adds	r0, #20
  417e4e:	0080      	lsls	r0, r0, #2
  417e50:	4b0a      	ldr	r3, [pc, #40]	; (417e7c <switch_init+0x140>)
  417e52:	fb83 2300 	smull	r2, r3, r3, r0
  417e56:	17c2      	asrs	r2, r0, #31
  417e58:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  417e5c:	b212      	sxth	r2, r2
  417e5e:	e7c6      	b.n	417dee <switch_init+0xb2>
  417e60:	204147a8 	.word	0x204147a8
  417e64:	00417885 	.word	0x00417885
  417e68:	00409fa1 	.word	0x00409fa1
  417e6c:	004297c8 	.word	0x004297c8
  417e70:	00409e11 	.word	0x00409e11
  417e74:	00409c81 	.word	0x00409c81
  417e78:	0041468d 	.word	0x0041468d
  417e7c:	66666667 	.word	0x66666667

00417e80 <linemeter_init>:
{
  417e80:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->lmeter);
  417e82:	4c8a      	ldr	r4, [pc, #552]	; (4180ac <linemeter_init+0x22c>)
  417e84:	6820      	ldr	r0, [r4, #0]
  417e86:	3074      	adds	r0, #116	; 0x74
  417e88:	4b89      	ldr	r3, [pc, #548]	; (4180b0 <linemeter_init+0x230>)
  417e8a:	4798      	blx	r3
    lv_style_set_radius(&styles->lmeter, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  417e8c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  417e8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  417e92:	2101      	movs	r1, #1
  417e94:	3074      	adds	r0, #116	; 0x74
  417e96:	4b87      	ldr	r3, [pc, #540]	; (4180b4 <linemeter_init+0x234>)
  417e98:	4798      	blx	r3
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417e9a:	6824      	ldr	r4, [r4, #0]
  417e9c:	3474      	adds	r4, #116	; 0x74
  417e9e:	2000      	movs	r0, #0
  417ea0:	4b85      	ldr	r3, [pc, #532]	; (4180b8 <linemeter_init+0x238>)
  417ea2:	4798      	blx	r3
  417ea4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ea8:	0080      	lsls	r0, r0, #2
  417eaa:	3050      	adds	r0, #80	; 0x50
  417eac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417eb0:	f280 8093 	bge.w	417fda <linemeter_init+0x15a>
  417eb4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  417eb6:	2112      	movs	r1, #18
  417eb8:	4620      	mov	r0, r4
  417eba:	4b7e      	ldr	r3, [pc, #504]	; (4180b4 <linemeter_init+0x234>)
  417ebc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417ebe:	4b7b      	ldr	r3, [pc, #492]	; (4180ac <linemeter_init+0x22c>)
  417ec0:	681c      	ldr	r4, [r3, #0]
  417ec2:	3474      	adds	r4, #116	; 0x74
  417ec4:	2000      	movs	r0, #0
  417ec6:	4b7c      	ldr	r3, [pc, #496]	; (4180b8 <linemeter_init+0x238>)
  417ec8:	4798      	blx	r3
  417eca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ece:	0080      	lsls	r0, r0, #2
  417ed0:	3050      	adds	r0, #80	; 0x50
  417ed2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417ed6:	f280 808f 	bge.w	417ff8 <linemeter_init+0x178>
  417eda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  417edc:	2113      	movs	r1, #19
  417ede:	4620      	mov	r0, r4
  417ee0:	4b74      	ldr	r3, [pc, #464]	; (4180b4 <linemeter_init+0x234>)
  417ee2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417ee4:	4b71      	ldr	r3, [pc, #452]	; (4180ac <linemeter_init+0x22c>)
  417ee6:	681c      	ldr	r4, [r3, #0]
  417ee8:	3474      	adds	r4, #116	; 0x74
  417eea:	2000      	movs	r0, #0
  417eec:	4b72      	ldr	r3, [pc, #456]	; (4180b8 <linemeter_init+0x238>)
  417eee:	4798      	blx	r3
  417ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417ef4:	0080      	lsls	r0, r0, #2
  417ef6:	3050      	adds	r0, #80	; 0x50
  417ef8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417efc:	f280 808b 	bge.w	418016 <linemeter_init+0x196>
  417f00:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  417f02:	2110      	movs	r1, #16
  417f04:	4620      	mov	r0, r4
  417f06:	4b6b      	ldr	r3, [pc, #428]	; (4180b4 <linemeter_init+0x234>)
  417f08:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  417f0a:	4b68      	ldr	r3, [pc, #416]	; (4180ac <linemeter_init+0x22c>)
  417f0c:	681c      	ldr	r4, [r3, #0]
  417f0e:	3474      	adds	r4, #116	; 0x74
  417f10:	2000      	movs	r0, #0
  417f12:	4b69      	ldr	r3, [pc, #420]	; (4180b8 <linemeter_init+0x238>)
  417f14:	4798      	blx	r3
  417f16:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  417f1a:	0040      	lsls	r0, r0, #1
  417f1c:	3050      	adds	r0, #80	; 0x50
  417f1e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f22:	f280 8087 	bge.w	418034 <linemeter_init+0x1b4>
  417f26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  417f28:	2114      	movs	r1, #20
  417f2a:	4620      	mov	r0, r4
  417f2c:	4b61      	ldr	r3, [pc, #388]	; (4180b4 <linemeter_init+0x234>)
  417f2e:	4798      	blx	r3
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  417f30:	4b5e      	ldr	r3, [pc, #376]	; (4180ac <linemeter_init+0x22c>)
  417f32:	681c      	ldr	r4, [r3, #0]
  417f34:	3474      	adds	r4, #116	; 0x74
  417f36:	2000      	movs	r0, #0
  417f38:	4b5f      	ldr	r3, [pc, #380]	; (4180b8 <linemeter_init+0x238>)
  417f3a:	4798      	blx	r3
  417f3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417f44:	3050      	adds	r0, #80	; 0x50
  417f46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417f4a:	f280 8082 	bge.w	418052 <linemeter_init+0x1d2>
  417f4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  417f50:	21c0      	movs	r1, #192	; 0xc0
  417f52:	4620      	mov	r0, r4
  417f54:	4b57      	ldr	r3, [pc, #348]	; (4180b4 <linemeter_init+0x234>)
  417f56:	4798      	blx	r3
    lv_style_set_line_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417f58:	4c54      	ldr	r4, [pc, #336]	; (4180ac <linemeter_init+0x22c>)
  417f5a:	6820      	ldr	r0, [r4, #0]
  417f5c:	4e57      	ldr	r6, [pc, #348]	; (4180bc <linemeter_init+0x23c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  417f5e:	89b2      	ldrh	r2, [r6, #12]
  417f60:	2199      	movs	r1, #153	; 0x99
  417f62:	3074      	adds	r0, #116	; 0x74
  417f64:	4d56      	ldr	r5, [pc, #344]	; (4180c0 <linemeter_init+0x240>)
  417f66:	47a8      	blx	r5
    lv_style_set_scale_grad_color(&styles->lmeter, LV_STATE_DEFAULT, theme.color_primary);
  417f68:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  417f6a:	89b2      	ldrh	r2, [r6, #12]
  417f6c:	21c9      	movs	r1, #201	; 0xc9
  417f6e:	3074      	adds	r0, #116	; 0x74
  417f70:	47a8      	blx	r5
    lv_style_set_scale_end_color(&styles->lmeter, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  417f72:	6820      	ldr	r0, [r4, #0]
  417f74:	f04f 0200 	mov.w	r2, #0
  417f78:	2304      	movs	r3, #4
  417f7a:	f363 0202 	bfi	r2, r3, #0, #3
  417f7e:	2311      	movs	r3, #17
  417f80:	f363 02c7 	bfi	r2, r3, #3, #5
  417f84:	f363 220c 	bfi	r2, r3, #8, #5
  417f88:	2302      	movs	r3, #2
  417f8a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  417f8e:	21ca      	movs	r1, #202	; 0xca
  417f90:	3074      	adds	r0, #116	; 0x74
  417f92:	47a8      	blx	r5
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  417f94:	6824      	ldr	r4, [r4, #0]
  417f96:	3474      	adds	r4, #116	; 0x74
  417f98:	2000      	movs	r0, #0
  417f9a:	4b47      	ldr	r3, [pc, #284]	; (4180b8 <linemeter_init+0x238>)
  417f9c:	4798      	blx	r3
  417f9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417fa2:	0040      	lsls	r0, r0, #1
  417fa4:	3050      	adds	r0, #80	; 0x50
  417fa6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417faa:	da62      	bge.n	418072 <linemeter_init+0x1f2>
  417fac:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  417fae:	2190      	movs	r1, #144	; 0x90
  417fb0:	4620      	mov	r0, r4
  417fb2:	4b40      	ldr	r3, [pc, #256]	; (4180b4 <linemeter_init+0x234>)
  417fb4:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  417fb6:	4b3d      	ldr	r3, [pc, #244]	; (4180ac <linemeter_init+0x22c>)
  417fb8:	681c      	ldr	r4, [r3, #0]
  417fba:	3474      	adds	r4, #116	; 0x74
  417fbc:	2000      	movs	r0, #0
  417fbe:	4b3e      	ldr	r3, [pc, #248]	; (4180b8 <linemeter_init+0x238>)
  417fc0:	4798      	blx	r3
  417fc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  417fc6:	3050      	adds	r0, #80	; 0x50
  417fc8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  417fcc:	da60      	bge.n	418090 <linemeter_init+0x210>
  417fce:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  417fd0:	21c3      	movs	r1, #195	; 0xc3
  417fd2:	4620      	mov	r0, r4
  417fd4:	4b37      	ldr	r3, [pc, #220]	; (4180b4 <linemeter_init+0x234>)
  417fd6:	4798      	blx	r3
  417fd8:	bd70      	pop	{r4, r5, r6, pc}
    lv_style_set_pad_left(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417fda:	2000      	movs	r0, #0
  417fdc:	4b36      	ldr	r3, [pc, #216]	; (4180b8 <linemeter_init+0x238>)
  417fde:	4798      	blx	r3
  417fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  417fe4:	0080      	lsls	r0, r0, #2
  417fe6:	3050      	adds	r0, #80	; 0x50
  417fe8:	4b36      	ldr	r3, [pc, #216]	; (4180c4 <linemeter_init+0x244>)
  417fea:	fb83 2300 	smull	r2, r3, r3, r0
  417fee:	17c2      	asrs	r2, r0, #31
  417ff0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  417ff4:	b212      	sxth	r2, r2
  417ff6:	e75e      	b.n	417eb6 <linemeter_init+0x36>
    lv_style_set_pad_right(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  417ff8:	2000      	movs	r0, #0
  417ffa:	4b2f      	ldr	r3, [pc, #188]	; (4180b8 <linemeter_init+0x238>)
  417ffc:	4798      	blx	r3
  417ffe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418002:	0080      	lsls	r0, r0, #2
  418004:	3050      	adds	r0, #80	; 0x50
  418006:	4b2f      	ldr	r3, [pc, #188]	; (4180c4 <linemeter_init+0x244>)
  418008:	fb83 2300 	smull	r2, r3, r3, r0
  41800c:	17c2      	asrs	r2, r0, #31
  41800e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418012:	b212      	sxth	r2, r2
  418014:	e762      	b.n	417edc <linemeter_init+0x5c>
    lv_style_set_pad_top(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(20));
  418016:	2000      	movs	r0, #0
  418018:	4b27      	ldr	r3, [pc, #156]	; (4180b8 <linemeter_init+0x238>)
  41801a:	4798      	blx	r3
  41801c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418020:	0080      	lsls	r0, r0, #2
  418022:	3050      	adds	r0, #80	; 0x50
  418024:	4b27      	ldr	r3, [pc, #156]	; (4180c4 <linemeter_init+0x244>)
  418026:	fb83 2300 	smull	r2, r3, r3, r0
  41802a:	17c2      	asrs	r2, r0, #31
  41802c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418030:	b212      	sxth	r2, r2
  418032:	e766      	b.n	417f02 <linemeter_init+0x82>
    lv_style_set_pad_inner(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(30));
  418034:	2000      	movs	r0, #0
  418036:	4b20      	ldr	r3, [pc, #128]	; (4180b8 <linemeter_init+0x238>)
  418038:	4798      	blx	r3
  41803a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41803e:	0040      	lsls	r0, r0, #1
  418040:	3050      	adds	r0, #80	; 0x50
  418042:	4b20      	ldr	r3, [pc, #128]	; (4180c4 <linemeter_init+0x244>)
  418044:	fb83 2300 	smull	r2, r3, r3, r0
  418048:	17c2      	asrs	r2, r0, #31
  41804a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41804e:	b212      	sxth	r2, r2
  418050:	e76a      	b.n	417f28 <linemeter_init+0xa8>
    lv_style_set_scale_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(25));
  418052:	2000      	movs	r0, #0
  418054:	4b18      	ldr	r3, [pc, #96]	; (4180b8 <linemeter_init+0x238>)
  418056:	4798      	blx	r3
  418058:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41805c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418060:	3050      	adds	r0, #80	; 0x50
  418062:	4b18      	ldr	r3, [pc, #96]	; (4180c4 <linemeter_init+0x244>)
  418064:	fb83 2300 	smull	r2, r3, r3, r0
  418068:	17c2      	asrs	r2, r0, #31
  41806a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41806e:	b212      	sxth	r2, r2
  418070:	e76e      	b.n	417f50 <linemeter_init+0xd0>
    lv_style_set_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(10));
  418072:	2000      	movs	r0, #0
  418074:	4b10      	ldr	r3, [pc, #64]	; (4180b8 <linemeter_init+0x238>)
  418076:	4798      	blx	r3
  418078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41807c:	0040      	lsls	r0, r0, #1
  41807e:	3050      	adds	r0, #80	; 0x50
  418080:	4b10      	ldr	r3, [pc, #64]	; (4180c4 <linemeter_init+0x244>)
  418082:	fb83 2300 	smull	r2, r3, r3, r0
  418086:	17c2      	asrs	r2, r0, #31
  418088:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41808c:	b212      	sxth	r2, r2
  41808e:	e78e      	b.n	417fae <linemeter_init+0x12e>
    lv_style_set_scale_end_line_width(&styles->lmeter, LV_STATE_DEFAULT, LV_DPX(7));
  418090:	2000      	movs	r0, #0
  418092:	4b09      	ldr	r3, [pc, #36]	; (4180b8 <linemeter_init+0x238>)
  418094:	4798      	blx	r3
  418096:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41809a:	3050      	adds	r0, #80	; 0x50
  41809c:	4b09      	ldr	r3, [pc, #36]	; (4180c4 <linemeter_init+0x244>)
  41809e:	fb83 2300 	smull	r2, r3, r3, r0
  4180a2:	17c2      	asrs	r2, r0, #31
  4180a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4180a8:	b212      	sxth	r2, r2
  4180aa:	e791      	b.n	417fd0 <linemeter_init+0x150>
  4180ac:	204147a8 	.word	0x204147a8
  4180b0:	00417885 	.word	0x00417885
  4180b4:	00409c81 	.word	0x00409c81
  4180b8:	0041468d 	.word	0x0041468d
  4180bc:	204147ac 	.word	0x204147ac
  4180c0:	00409e11 	.word	0x00409e11
  4180c4:	66666667 	.word	0x66666667

004180c8 <gauge_init>:
{
  4180c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->gauge_main);
  4180cc:	4cc0      	ldr	r4, [pc, #768]	; (4183d0 <gauge_init+0x308>)
  4180ce:	6820      	ldr	r0, [r4, #0]
  4180d0:	3060      	adds	r0, #96	; 0x60
  4180d2:	4bc0      	ldr	r3, [pc, #768]	; (4183d4 <gauge_init+0x30c>)
  4180d4:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4180d6:	6820      	ldr	r0, [r4, #0]
  4180d8:	f04f 0804 	mov.w	r8, #4
  4180dc:	f04f 0200 	mov.w	r2, #0
  4180e0:	f368 0202 	bfi	r2, r8, #0, #3
  4180e4:	2511      	movs	r5, #17
  4180e6:	f365 02c7 	bfi	r2, r5, #3, #5
  4180ea:	f365 220c 	bfi	r2, r5, #8, #5
  4180ee:	2702      	movs	r7, #2
  4180f0:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4180f4:	2199      	movs	r1, #153	; 0x99
  4180f6:	3060      	adds	r0, #96	; 0x60
  4180f8:	4eb7      	ldr	r6, [pc, #732]	; (4183d8 <gauge_init+0x310>)
  4180fa:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_main, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  4180fc:	6820      	ldr	r0, [r4, #0]
  4180fe:	f04f 0200 	mov.w	r2, #0
  418102:	f368 0202 	bfi	r2, r8, #0, #3
  418106:	f365 02c7 	bfi	r2, r5, #3, #5
  41810a:	f365 220c 	bfi	r2, r5, #8, #5
  41810e:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  418112:	21c9      	movs	r1, #201	; 0xc9
  418114:	3060      	adds	r0, #96	; 0x60
  418116:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_main, LV_STATE_DEFAULT, theme.color_primary);
  418118:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  41811a:	4bb0      	ldr	r3, [pc, #704]	; (4183dc <gauge_init+0x314>)
  41811c:	899a      	ldrh	r2, [r3, #12]
  41811e:	21ca      	movs	r1, #202	; 0xca
  418120:	3060      	adds	r0, #96	; 0x60
  418122:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  418124:	6824      	ldr	r4, [r4, #0]
  418126:	3460      	adds	r4, #96	; 0x60
  418128:	2000      	movs	r0, #0
  41812a:	4bad      	ldr	r3, [pc, #692]	; (4183e0 <gauge_init+0x318>)
  41812c:	4798      	blx	r3
  41812e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418132:	3050      	adds	r0, #80	; 0x50
  418134:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418138:	f280 8177 	bge.w	41842a <gauge_init+0x362>
  41813c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41813e:	2190      	movs	r1, #144	; 0x90
  418140:	4620      	mov	r0, r4
  418142:	4ba8      	ldr	r3, [pc, #672]	; (4183e4 <gauge_init+0x31c>)
  418144:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  418146:	4ba2      	ldr	r3, [pc, #648]	; (4183d0 <gauge_init+0x308>)
  418148:	681c      	ldr	r4, [r3, #0]
  41814a:	3460      	adds	r4, #96	; 0x60
  41814c:	2000      	movs	r0, #0
  41814e:	4ba4      	ldr	r3, [pc, #656]	; (4183e0 <gauge_init+0x318>)
  418150:	4798      	blx	r3
  418152:	3014      	adds	r0, #20
  418154:	0080      	lsls	r0, r0, #2
  418156:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41815a:	f280 8174 	bge.w	418446 <gauge_init+0x37e>
  41815e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  418160:	21c3      	movs	r1, #195	; 0xc3
  418162:	4620      	mov	r0, r4
  418164:	4b9f      	ldr	r3, [pc, #636]	; (4183e4 <gauge_init+0x31c>)
  418166:	4798      	blx	r3
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  418168:	4b99      	ldr	r3, [pc, #612]	; (4183d0 <gauge_init+0x308>)
  41816a:	681c      	ldr	r4, [r3, #0]
  41816c:	3460      	adds	r4, #96	; 0x60
  41816e:	2000      	movs	r0, #0
  418170:	4b9b      	ldr	r3, [pc, #620]	; (4183e0 <gauge_init+0x318>)
  418172:	4798      	blx	r3
  418174:	300a      	adds	r0, #10
  418176:	00c0      	lsls	r0, r0, #3
  418178:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41817c:	f280 8170 	bge.w	418460 <gauge_init+0x398>
  418180:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
  418182:	21c2      	movs	r1, #194	; 0xc2
  418184:	4620      	mov	r0, r4
  418186:	4b97      	ldr	r3, [pc, #604]	; (4183e4 <gauge_init+0x31c>)
  418188:	4798      	blx	r3
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41818a:	4b91      	ldr	r3, [pc, #580]	; (4183d0 <gauge_init+0x308>)
  41818c:	681c      	ldr	r4, [r3, #0]
  41818e:	3460      	adds	r4, #96	; 0x60
  418190:	2000      	movs	r0, #0
  418192:	4b93      	ldr	r3, [pc, #588]	; (4183e0 <gauge_init+0x318>)
  418194:	4798      	blx	r3
  418196:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41819a:	0080      	lsls	r0, r0, #2
  41819c:	3050      	adds	r0, #80	; 0x50
  41819e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4181a2:	f280 816a 	bge.w	41847a <gauge_init+0x3b2>
  4181a6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4181a8:	2112      	movs	r1, #18
  4181aa:	4620      	mov	r0, r4
  4181ac:	4b8d      	ldr	r3, [pc, #564]	; (4183e4 <gauge_init+0x31c>)
  4181ae:	4798      	blx	r3
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4181b0:	4b87      	ldr	r3, [pc, #540]	; (4183d0 <gauge_init+0x308>)
  4181b2:	681c      	ldr	r4, [r3, #0]
  4181b4:	3460      	adds	r4, #96	; 0x60
  4181b6:	2000      	movs	r0, #0
  4181b8:	4b89      	ldr	r3, [pc, #548]	; (4183e0 <gauge_init+0x318>)
  4181ba:	4798      	blx	r3
  4181bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4181c0:	0080      	lsls	r0, r0, #2
  4181c2:	3050      	adds	r0, #80	; 0x50
  4181c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4181c8:	f280 8166 	bge.w	418498 <gauge_init+0x3d0>
  4181cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4181ce:	2113      	movs	r1, #19
  4181d0:	4620      	mov	r0, r4
  4181d2:	4b84      	ldr	r3, [pc, #528]	; (4183e4 <gauge_init+0x31c>)
  4181d4:	4798      	blx	r3
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4181d6:	4b7e      	ldr	r3, [pc, #504]	; (4183d0 <gauge_init+0x308>)
  4181d8:	681c      	ldr	r4, [r3, #0]
  4181da:	3460      	adds	r4, #96	; 0x60
  4181dc:	2000      	movs	r0, #0
  4181de:	4b80      	ldr	r3, [pc, #512]	; (4183e0 <gauge_init+0x318>)
  4181e0:	4798      	blx	r3
  4181e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4181e6:	0080      	lsls	r0, r0, #2
  4181e8:	3050      	adds	r0, #80	; 0x50
  4181ea:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4181ee:	f280 8162 	bge.w	4184b6 <gauge_init+0x3ee>
  4181f2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4181f4:	2110      	movs	r1, #16
  4181f6:	4620      	mov	r0, r4
  4181f8:	4b7a      	ldr	r3, [pc, #488]	; (4183e4 <gauge_init+0x31c>)
  4181fa:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4181fc:	4b74      	ldr	r3, [pc, #464]	; (4183d0 <gauge_init+0x308>)
  4181fe:	681c      	ldr	r4, [r3, #0]
  418200:	3460      	adds	r4, #96	; 0x60
  418202:	2000      	movs	r0, #0
  418204:	4b76      	ldr	r3, [pc, #472]	; (4183e0 <gauge_init+0x318>)
  418206:	4798      	blx	r3
  418208:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41820c:	0080      	lsls	r0, r0, #2
  41820e:	3050      	adds	r0, #80	; 0x50
  418210:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418214:	f280 815e 	bge.w	4184d4 <gauge_init+0x40c>
  418218:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41821a:	2114      	movs	r1, #20
  41821c:	4620      	mov	r0, r4
  41821e:	4b71      	ldr	r3, [pc, #452]	; (4183e4 <gauge_init+0x31c>)
  418220:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  418222:	4b6b      	ldr	r3, [pc, #428]	; (4183d0 <gauge_init+0x308>)
  418224:	681c      	ldr	r4, [r3, #0]
  418226:	3460      	adds	r4, #96	; 0x60
  418228:	2000      	movs	r0, #0
  41822a:	4b6d      	ldr	r3, [pc, #436]	; (4183e0 <gauge_init+0x318>)
  41822c:	4798      	blx	r3
  41822e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418232:	3050      	adds	r0, #80	; 0x50
  418234:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418238:	f280 815b 	bge.w	4184f2 <gauge_init+0x42a>
  41823c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41823e:	21c0      	movs	r1, #192	; 0xc0
  418240:	4620      	mov	r0, r4
  418242:	4d68      	ldr	r5, [pc, #416]	; (4183e4 <gauge_init+0x31c>)
  418244:	47a8      	blx	r5
    lv_style_set_radius(&styles->gauge_main, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  418246:	4c62      	ldr	r4, [pc, #392]	; (4183d0 <gauge_init+0x308>)
  418248:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41824a:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41824e:	2101      	movs	r1, #1
  418250:	3060      	adds	r0, #96	; 0x60
  418252:	47a8      	blx	r5
    style_init_reset(&styles->gauge_strong);
  418254:	6820      	ldr	r0, [r4, #0]
  418256:	3064      	adds	r0, #100	; 0x64
  418258:	4b5e      	ldr	r3, [pc, #376]	; (4183d4 <gauge_init+0x30c>)
  41825a:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  41825c:	6820      	ldr	r0, [r4, #0]
  41825e:	f04f 0804 	mov.w	r8, #4
  418262:	f04f 0200 	mov.w	r2, #0
  418266:	f368 0202 	bfi	r2, r8, #0, #3
  41826a:	2511      	movs	r5, #17
  41826c:	f365 02c7 	bfi	r2, r5, #3, #5
  418270:	f365 220c 	bfi	r2, r5, #8, #5
  418274:	2702      	movs	r7, #2
  418276:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41827a:	2199      	movs	r1, #153	; 0x99
  41827c:	3064      	adds	r0, #100	; 0x64
  41827e:	4e56      	ldr	r6, [pc, #344]	; (4183d8 <gauge_init+0x310>)
  418280:	47b0      	blx	r6
    lv_style_set_scale_grad_color(&styles->gauge_strong, LV_STATE_DEFAULT, lv_color_hex3(0x888));
  418282:	6820      	ldr	r0, [r4, #0]
  418284:	f04f 0200 	mov.w	r2, #0
  418288:	f368 0202 	bfi	r2, r8, #0, #3
  41828c:	f365 02c7 	bfi	r2, r5, #3, #5
  418290:	f365 220c 	bfi	r2, r5, #8, #5
  418294:	f367 324f 	bfi	r2, r7, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
  418298:	21c9      	movs	r1, #201	; 0xc9
  41829a:	3064      	adds	r0, #100	; 0x64
  41829c:	47b0      	blx	r6
    lv_style_set_scale_end_color(&styles->gauge_strong, LV_STATE_DEFAULT, theme.color_primary);
  41829e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
  4182a0:	4b4e      	ldr	r3, [pc, #312]	; (4183dc <gauge_init+0x314>)
  4182a2:	899a      	ldrh	r2, [r3, #12]
  4182a4:	21ca      	movs	r1, #202	; 0xca
  4182a6:	3064      	adds	r0, #100	; 0x64
  4182a8:	47b0      	blx	r6
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4182aa:	6824      	ldr	r4, [r4, #0]
  4182ac:	3464      	adds	r4, #100	; 0x64
  4182ae:	2000      	movs	r0, #0
  4182b0:	4b4b      	ldr	r3, [pc, #300]	; (4183e0 <gauge_init+0x318>)
  4182b2:	4798      	blx	r3
  4182b4:	300a      	adds	r0, #10
  4182b6:	00c0      	lsls	r0, r0, #3
  4182b8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4182bc:	f280 8127 	bge.w	41850e <gauge_init+0x446>
  4182c0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4182c2:	2190      	movs	r1, #144	; 0x90
  4182c4:	4620      	mov	r0, r4
  4182c6:	4b47      	ldr	r3, [pc, #284]	; (4183e4 <gauge_init+0x31c>)
  4182c8:	4798      	blx	r3
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  4182ca:	4b41      	ldr	r3, [pc, #260]	; (4183d0 <gauge_init+0x308>)
  4182cc:	681c      	ldr	r4, [r3, #0]
  4182ce:	3464      	adds	r4, #100	; 0x64
  4182d0:	2000      	movs	r0, #0
  4182d2:	4b43      	ldr	r3, [pc, #268]	; (4183e0 <gauge_init+0x318>)
  4182d4:	4798      	blx	r3
  4182d6:	300a      	adds	r0, #10
  4182d8:	00c0      	lsls	r0, r0, #3
  4182da:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4182de:	f280 8123 	bge.w	418528 <gauge_init+0x460>
  4182e2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
  4182e4:	21c3      	movs	r1, #195	; 0xc3
  4182e6:	4620      	mov	r0, r4
  4182e8:	4b3e      	ldr	r3, [pc, #248]	; (4183e4 <gauge_init+0x31c>)
  4182ea:	4798      	blx	r3
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  4182ec:	4b38      	ldr	r3, [pc, #224]	; (4183d0 <gauge_init+0x308>)
  4182ee:	681c      	ldr	r4, [r3, #0]
  4182f0:	3464      	adds	r4, #100	; 0x64
  4182f2:	2000      	movs	r0, #0
  4182f4:	4b3a      	ldr	r3, [pc, #232]	; (4183e0 <gauge_init+0x318>)
  4182f6:	4798      	blx	r3
  4182f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4182fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418300:	3050      	adds	r0, #80	; 0x50
  418302:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418306:	f280 811c 	bge.w	418542 <gauge_init+0x47a>
  41830a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41830c:	21c0      	movs	r1, #192	; 0xc0
  41830e:	4620      	mov	r0, r4
  418310:	4b34      	ldr	r3, [pc, #208]	; (4183e4 <gauge_init+0x31c>)
  418312:	4798      	blx	r3
    style_init_reset(&styles->gauge_needle);
  418314:	4c2e      	ldr	r4, [pc, #184]	; (4183d0 <gauge_init+0x308>)
  418316:	6820      	ldr	r0, [r4, #0]
  418318:	3068      	adds	r0, #104	; 0x68
  41831a:	4b2e      	ldr	r3, [pc, #184]	; (4183d4 <gauge_init+0x30c>)
  41831c:	4798      	blx	r3
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41831e:	6820      	ldr	r0, [r4, #0]
  418320:	3068      	adds	r0, #104	; 0x68
  418322:	4b2e      	ldr	r3, [pc, #184]	; (4183dc <gauge_init+0x314>)
  418324:	6a1b      	ldr	r3, [r3, #32]
  418326:	f013 0f02 	tst.w	r3, #2
  41832a:	f000 811a 	beq.w	418562 <gauge_init+0x49a>
  41832e:	2302      	movs	r3, #2
  418330:	f04f 0200 	mov.w	r2, #0
  418334:	f363 0202 	bfi	r2, r3, #0, #3
  418338:	2108      	movs	r1, #8
  41833a:	f361 02c7 	bfi	r2, r1, #3, #5
  41833e:	210b      	movs	r1, #11
  418340:	f361 220c 	bfi	r2, r1, #8, #5
  418344:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418348:	2199      	movs	r1, #153	; 0x99
  41834a:	4b23      	ldr	r3, [pc, #140]	; (4183d8 <gauge_init+0x310>)
  41834c:	4798      	blx	r3
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  41834e:	4b20      	ldr	r3, [pc, #128]	; (4183d0 <gauge_init+0x308>)
  418350:	681c      	ldr	r4, [r3, #0]
  418352:	3468      	adds	r4, #104	; 0x68
  418354:	2000      	movs	r0, #0
  418356:	4b22      	ldr	r3, [pc, #136]	; (4183e0 <gauge_init+0x318>)
  418358:	4798      	blx	r3
  41835a:	300a      	adds	r0, #10
  41835c:	00c0      	lsls	r0, r0, #3
  41835e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418362:	f280 8101 	bge.w	418568 <gauge_init+0x4a0>
  418366:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418368:	2190      	movs	r1, #144	; 0x90
  41836a:	4620      	mov	r0, r4
  41836c:	4b1d      	ldr	r3, [pc, #116]	; (4183e4 <gauge_init+0x31c>)
  41836e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->gauge_needle, LV_STATE_DEFAULT, LV_OPA_COVER);
  418370:	4c17      	ldr	r4, [pc, #92]	; (4183d0 <gauge_init+0x308>)
  418372:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418374:	22ff      	movs	r2, #255	; 0xff
  418376:	212c      	movs	r1, #44	; 0x2c
  418378:	3068      	adds	r0, #104	; 0x68
  41837a:	4b1b      	ldr	r3, [pc, #108]	; (4183e8 <gauge_init+0x320>)
  41837c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  41837e:	6820      	ldr	r0, [r4, #0]
  418380:	3068      	adds	r0, #104	; 0x68
  418382:	4b16      	ldr	r3, [pc, #88]	; (4183dc <gauge_init+0x314>)
  418384:	6a1b      	ldr	r3, [r3, #32]
  418386:	f013 0f02 	tst.w	r3, #2
  41838a:	f000 80fa 	beq.w	418582 <gauge_init+0x4ba>
  41838e:	2302      	movs	r3, #2
  418390:	f04f 0200 	mov.w	r2, #0
  418394:	f363 0202 	bfi	r2, r3, #0, #3
  418398:	2108      	movs	r1, #8
  41839a:	f361 02c7 	bfi	r2, r1, #3, #5
  41839e:	210b      	movs	r1, #11
  4183a0:	f361 220c 	bfi	r2, r1, #8, #5
  4183a4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4183a8:	2129      	movs	r1, #41	; 0x29
  4183aa:	4b0b      	ldr	r3, [pc, #44]	; (4183d8 <gauge_init+0x310>)
  4183ac:	4798      	blx	r3
    lv_style_set_radius(&styles->gauge_needle, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4183ae:	4c08      	ldr	r4, [pc, #32]	; (4183d0 <gauge_init+0x308>)
  4183b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4183b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4183b6:	2101      	movs	r1, #1
  4183b8:	3068      	adds	r0, #104	; 0x68
  4183ba:	4b0a      	ldr	r3, [pc, #40]	; (4183e4 <gauge_init+0x31c>)
  4183bc:	4798      	blx	r3
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  4183be:	6824      	ldr	r4, [r4, #0]
  4183c0:	3468      	adds	r4, #104	; 0x68
  4183c2:	2000      	movs	r0, #0
  4183c4:	4b06      	ldr	r3, [pc, #24]	; (4183e0 <gauge_init+0x318>)
  4183c6:	4798      	blx	r3
  4183c8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4183cc:	0040      	lsls	r0, r0, #1
  4183ce:	e00d      	b.n	4183ec <gauge_init+0x324>
  4183d0:	204147a8 	.word	0x204147a8
  4183d4:	00417885 	.word	0x00417885
  4183d8:	00409e11 	.word	0x00409e11
  4183dc:	204147ac 	.word	0x204147ac
  4183e0:	0041468d 	.word	0x0041468d
  4183e4:	00409c81 	.word	0x00409c81
  4183e8:	00409fa1 	.word	0x00409fa1
  4183ec:	3050      	adds	r0, #80	; 0x50
  4183ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4183f2:	f280 80c9 	bge.w	418588 <gauge_init+0x4c0>
  4183f6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  4183f8:	2103      	movs	r1, #3
  4183fa:	4620      	mov	r0, r4
  4183fc:	4b71      	ldr	r3, [pc, #452]	; (4185c4 <gauge_init+0x4fc>)
  4183fe:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  418400:	4b71      	ldr	r3, [pc, #452]	; (4185c8 <gauge_init+0x500>)
  418402:	681c      	ldr	r4, [r3, #0]
  418404:	3468      	adds	r4, #104	; 0x68
  418406:	2000      	movs	r0, #0
  418408:	4b70      	ldr	r3, [pc, #448]	; (4185cc <gauge_init+0x504>)
  41840a:	4798      	blx	r3
  41840c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418410:	0040      	lsls	r0, r0, #1
  418412:	3050      	adds	r0, #80	; 0x50
  418414:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418418:	f280 80c5 	bge.w	4185a6 <gauge_init+0x4de>
  41841c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41841e:	2114      	movs	r1, #20
  418420:	4620      	mov	r0, r4
  418422:	4b68      	ldr	r3, [pc, #416]	; (4185c4 <gauge_init+0x4fc>)
  418424:	4798      	blx	r3
  418426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(5));
  41842a:	2000      	movs	r0, #0
  41842c:	4b67      	ldr	r3, [pc, #412]	; (4185cc <gauge_init+0x504>)
  41842e:	4798      	blx	r3
  418430:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418434:	3050      	adds	r0, #80	; 0x50
  418436:	4b66      	ldr	r3, [pc, #408]	; (4185d0 <gauge_init+0x508>)
  418438:	fb83 2300 	smull	r2, r3, r3, r0
  41843c:	17c2      	asrs	r2, r0, #31
  41843e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418442:	b212      	sxth	r2, r2
  418444:	e67b      	b.n	41813e <gauge_init+0x76>
    lv_style_set_scale_end_line_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(4));
  418446:	2000      	movs	r0, #0
  418448:	4b60      	ldr	r3, [pc, #384]	; (4185cc <gauge_init+0x504>)
  41844a:	4798      	blx	r3
  41844c:	3014      	adds	r0, #20
  41844e:	0080      	lsls	r0, r0, #2
  418450:	4b5f      	ldr	r3, [pc, #380]	; (4185d0 <gauge_init+0x508>)
  418452:	fb83 2300 	smull	r2, r3, r3, r0
  418456:	17c2      	asrs	r2, r0, #31
  418458:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41845c:	b212      	sxth	r2, r2
  41845e:	e67f      	b.n	418160 <gauge_init+0x98>
    lv_style_set_scale_end_border_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(8));
  418460:	2000      	movs	r0, #0
  418462:	4b5a      	ldr	r3, [pc, #360]	; (4185cc <gauge_init+0x504>)
  418464:	4798      	blx	r3
  418466:	300a      	adds	r0, #10
  418468:	00c0      	lsls	r0, r0, #3
  41846a:	4b59      	ldr	r3, [pc, #356]	; (4185d0 <gauge_init+0x508>)
  41846c:	fb83 2300 	smull	r2, r3, r3, r0
  418470:	17c2      	asrs	r2, r0, #31
  418472:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418476:	b212      	sxth	r2, r2
  418478:	e683      	b.n	418182 <gauge_init+0xba>
    lv_style_set_pad_left(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  41847a:	2000      	movs	r0, #0
  41847c:	4b53      	ldr	r3, [pc, #332]	; (4185cc <gauge_init+0x504>)
  41847e:	4798      	blx	r3
  418480:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418484:	0080      	lsls	r0, r0, #2
  418486:	3050      	adds	r0, #80	; 0x50
  418488:	4b51      	ldr	r3, [pc, #324]	; (4185d0 <gauge_init+0x508>)
  41848a:	fb83 2300 	smull	r2, r3, r3, r0
  41848e:	17c2      	asrs	r2, r0, #31
  418490:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418494:	b212      	sxth	r2, r2
  418496:	e687      	b.n	4181a8 <gauge_init+0xe0>
    lv_style_set_pad_right(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  418498:	2000      	movs	r0, #0
  41849a:	4b4c      	ldr	r3, [pc, #304]	; (4185cc <gauge_init+0x504>)
  41849c:	4798      	blx	r3
  41849e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4184a2:	0080      	lsls	r0, r0, #2
  4184a4:	3050      	adds	r0, #80	; 0x50
  4184a6:	4b4a      	ldr	r3, [pc, #296]	; (4185d0 <gauge_init+0x508>)
  4184a8:	fb83 2300 	smull	r2, r3, r3, r0
  4184ac:	17c2      	asrs	r2, r0, #31
  4184ae:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184b2:	b212      	sxth	r2, r2
  4184b4:	e68b      	b.n	4181ce <gauge_init+0x106>
    lv_style_set_pad_top(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4184b6:	2000      	movs	r0, #0
  4184b8:	4b44      	ldr	r3, [pc, #272]	; (4185cc <gauge_init+0x504>)
  4184ba:	4798      	blx	r3
  4184bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4184c0:	0080      	lsls	r0, r0, #2
  4184c2:	3050      	adds	r0, #80	; 0x50
  4184c4:	4b42      	ldr	r3, [pc, #264]	; (4185d0 <gauge_init+0x508>)
  4184c6:	fb83 2300 	smull	r2, r3, r3, r0
  4184ca:	17c2      	asrs	r2, r0, #31
  4184cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184d0:	b212      	sxth	r2, r2
  4184d2:	e68f      	b.n	4181f4 <gauge_init+0x12c>
    lv_style_set_pad_inner(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(20));
  4184d4:	2000      	movs	r0, #0
  4184d6:	4b3d      	ldr	r3, [pc, #244]	; (4185cc <gauge_init+0x504>)
  4184d8:	4798      	blx	r3
  4184da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4184de:	0080      	lsls	r0, r0, #2
  4184e0:	3050      	adds	r0, #80	; 0x50
  4184e2:	4b3b      	ldr	r3, [pc, #236]	; (4185d0 <gauge_init+0x508>)
  4184e4:	fb83 2300 	smull	r2, r3, r3, r0
  4184e8:	17c2      	asrs	r2, r0, #31
  4184ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4184ee:	b212      	sxth	r2, r2
  4184f0:	e693      	b.n	41821a <gauge_init+0x152>
    lv_style_set_scale_width(&styles->gauge_main, LV_STATE_DEFAULT, LV_DPX(15));
  4184f2:	2000      	movs	r0, #0
  4184f4:	4b35      	ldr	r3, [pc, #212]	; (4185cc <gauge_init+0x504>)
  4184f6:	4798      	blx	r3
  4184f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4184fc:	3050      	adds	r0, #80	; 0x50
  4184fe:	4b34      	ldr	r3, [pc, #208]	; (4185d0 <gauge_init+0x508>)
  418500:	fb83 2300 	smull	r2, r3, r3, r0
  418504:	17c2      	asrs	r2, r0, #31
  418506:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41850a:	b212      	sxth	r2, r2
  41850c:	e697      	b.n	41823e <gauge_init+0x176>
    lv_style_set_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  41850e:	2000      	movs	r0, #0
  418510:	4b2e      	ldr	r3, [pc, #184]	; (4185cc <gauge_init+0x504>)
  418512:	4798      	blx	r3
  418514:	300a      	adds	r0, #10
  418516:	00c0      	lsls	r0, r0, #3
  418518:	4b2d      	ldr	r3, [pc, #180]	; (4185d0 <gauge_init+0x508>)
  41851a:	fb83 2300 	smull	r2, r3, r3, r0
  41851e:	17c2      	asrs	r2, r0, #31
  418520:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418524:	b212      	sxth	r2, r2
  418526:	e6cc      	b.n	4182c2 <gauge_init+0x1fa>
    lv_style_set_scale_end_line_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(8));
  418528:	2000      	movs	r0, #0
  41852a:	4b28      	ldr	r3, [pc, #160]	; (4185cc <gauge_init+0x504>)
  41852c:	4798      	blx	r3
  41852e:	300a      	adds	r0, #10
  418530:	00c0      	lsls	r0, r0, #3
  418532:	4b27      	ldr	r3, [pc, #156]	; (4185d0 <gauge_init+0x508>)
  418534:	fb83 2300 	smull	r2, r3, r3, r0
  418538:	17c2      	asrs	r2, r0, #31
  41853a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41853e:	b212      	sxth	r2, r2
  418540:	e6d0      	b.n	4182e4 <gauge_init+0x21c>
    lv_style_set_scale_width(&styles->gauge_strong, LV_STATE_DEFAULT, LV_DPX(25));
  418542:	2000      	movs	r0, #0
  418544:	4b21      	ldr	r3, [pc, #132]	; (4185cc <gauge_init+0x504>)
  418546:	4798      	blx	r3
  418548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41854c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418550:	3050      	adds	r0, #80	; 0x50
  418552:	4b1f      	ldr	r3, [pc, #124]	; (4185d0 <gauge_init+0x508>)
  418554:	fb83 2300 	smull	r2, r3, r3, r0
  418558:	17c2      	asrs	r2, r0, #31
  41855a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41855e:	b212      	sxth	r2, r2
  418560:	e6d4      	b.n	41830c <gauge_init+0x244>
    lv_style_set_line_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  418562:	4b1c      	ldr	r3, [pc, #112]	; (4185d4 <gauge_init+0x50c>)
  418564:	881a      	ldrh	r2, [r3, #0]
  418566:	e6ef      	b.n	418348 <gauge_init+0x280>
    lv_style_set_line_width(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(8));
  418568:	2000      	movs	r0, #0
  41856a:	4b18      	ldr	r3, [pc, #96]	; (4185cc <gauge_init+0x504>)
  41856c:	4798      	blx	r3
  41856e:	300a      	adds	r0, #10
  418570:	00c0      	lsls	r0, r0, #3
  418572:	4b17      	ldr	r3, [pc, #92]	; (4185d0 <gauge_init+0x508>)
  418574:	fb83 2300 	smull	r2, r3, r3, r0
  418578:	17c2      	asrs	r2, r0, #31
  41857a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41857e:	b212      	sxth	r2, r2
  418580:	e6f2      	b.n	418368 <gauge_init+0x2a0>
    lv_style_set_bg_color(&styles->gauge_needle, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x464b5b) : LV_COLOR_WHITE);
  418582:	4b14      	ldr	r3, [pc, #80]	; (4185d4 <gauge_init+0x50c>)
  418584:	881a      	ldrh	r2, [r3, #0]
  418586:	e70f      	b.n	4183a8 <gauge_init+0x2e0>
    lv_style_set_size(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(30));
  418588:	2000      	movs	r0, #0
  41858a:	4b10      	ldr	r3, [pc, #64]	; (4185cc <gauge_init+0x504>)
  41858c:	4798      	blx	r3
  41858e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418592:	0040      	lsls	r0, r0, #1
  418594:	3050      	adds	r0, #80	; 0x50
  418596:	4b0e      	ldr	r3, [pc, #56]	; (4185d0 <gauge_init+0x508>)
  418598:	fb83 2300 	smull	r2, r3, r3, r0
  41859c:	17c2      	asrs	r2, r0, #31
  41859e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185a2:	b212      	sxth	r2, r2
  4185a4:	e728      	b.n	4183f8 <gauge_init+0x330>
    lv_style_set_pad_inner(&styles->gauge_needle, LV_STATE_DEFAULT, LV_DPX(10));
  4185a6:	2000      	movs	r0, #0
  4185a8:	4b08      	ldr	r3, [pc, #32]	; (4185cc <gauge_init+0x504>)
  4185aa:	4798      	blx	r3
  4185ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4185b0:	0040      	lsls	r0, r0, #1
  4185b2:	3050      	adds	r0, #80	; 0x50
  4185b4:	4b06      	ldr	r3, [pc, #24]	; (4185d0 <gauge_init+0x508>)
  4185b6:	fb83 2300 	smull	r2, r3, r3, r0
  4185ba:	17c2      	asrs	r2, r0, #31
  4185bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4185c0:	b212      	sxth	r2, r2
  4185c2:	e72c      	b.n	41841e <gauge_init+0x356>
  4185c4:	00409c81 	.word	0x00409c81
  4185c8:	204147a8 	.word	0x204147a8
  4185cc:	0041468d 	.word	0x0041468d
  4185d0:	66666667 	.word	0x66666667
  4185d4:	004297c8 	.word	0x004297c8

004185d8 <arc_init>:
{
  4185d8:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->arc_indic);
  4185da:	4c53      	ldr	r4, [pc, #332]	; (418728 <arc_init+0x150>)
  4185dc:	6820      	ldr	r0, [r4, #0]
  4185de:	301c      	adds	r0, #28
  4185e0:	4b52      	ldr	r3, [pc, #328]	; (41872c <arc_init+0x154>)
  4185e2:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_indic, LV_STATE_DEFAULT, theme.color_primary);
  4185e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  4185e6:	4b52      	ldr	r3, [pc, #328]	; (418730 <arc_init+0x158>)
  4185e8:	899a      	ldrh	r2, [r3, #12]
  4185ea:	2199      	movs	r1, #153	; 0x99
  4185ec:	301c      	adds	r0, #28
  4185ee:	4b51      	ldr	r3, [pc, #324]	; (418734 <arc_init+0x15c>)
  4185f0:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  4185f2:	6824      	ldr	r4, [r4, #0]
  4185f4:	341c      	adds	r4, #28
  4185f6:	2000      	movs	r0, #0
  4185f8:	4b4f      	ldr	r3, [pc, #316]	; (418738 <arc_init+0x160>)
  4185fa:	4798      	blx	r3
  4185fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418600:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418604:	3050      	adds	r0, #80	; 0x50
  418606:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41860a:	da5e      	bge.n	4186ca <arc_init+0xf2>
  41860c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41860e:	2190      	movs	r1, #144	; 0x90
  418610:	4620      	mov	r0, r4
  418612:	4d4a      	ldr	r5, [pc, #296]	; (41873c <arc_init+0x164>)
  418614:	47a8      	blx	r5
    lv_style_set_line_rounded(&styles->arc_indic, LV_STATE_DEFAULT, true);
  418616:	4c44      	ldr	r4, [pc, #272]	; (418728 <arc_init+0x150>)
  418618:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  41861a:	2201      	movs	r2, #1
  41861c:	2194      	movs	r1, #148	; 0x94
  41861e:	301c      	adds	r0, #28
  418620:	47a8      	blx	r5
    style_init_reset(&styles->arc_bg);
  418622:	6820      	ldr	r0, [r4, #0]
  418624:	3020      	adds	r0, #32
  418626:	4b41      	ldr	r3, [pc, #260]	; (41872c <arc_init+0x154>)
  418628:	4798      	blx	r3
    lv_style_set_line_color(&styles->arc_bg, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41862a:	6820      	ldr	r0, [r4, #0]
  41862c:	3020      	adds	r0, #32
  41862e:	4b40      	ldr	r3, [pc, #256]	; (418730 <arc_init+0x158>)
  418630:	6a1b      	ldr	r3, [r3, #32]
  418632:	f013 0f02 	tst.w	r3, #2
  418636:	d058      	beq.n	4186ea <arc_init+0x112>
  418638:	f04f 0200 	mov.w	r2, #0
  41863c:	2306      	movs	r3, #6
  41863e:	f363 0202 	bfi	r2, r3, #0, #3
  418642:	231a      	movs	r3, #26
  418644:	f363 02c7 	bfi	r2, r3, #3, #5
  418648:	231b      	movs	r3, #27
  41864a:	f363 220c 	bfi	r2, r3, #8, #5
  41864e:	2305      	movs	r3, #5
  418650:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418654:	2199      	movs	r1, #153	; 0x99
  418656:	4b37      	ldr	r3, [pc, #220]	; (418734 <arc_init+0x15c>)
  418658:	4798      	blx	r3
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41865a:	4b33      	ldr	r3, [pc, #204]	; (418728 <arc_init+0x150>)
  41865c:	681c      	ldr	r4, [r3, #0]
  41865e:	3420      	adds	r4, #32
  418660:	2000      	movs	r0, #0
  418662:	4b35      	ldr	r3, [pc, #212]	; (418738 <arc_init+0x160>)
  418664:	4798      	blx	r3
  418666:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41866a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41866e:	3050      	adds	r0, #80	; 0x50
  418670:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418674:	da47      	bge.n	418706 <arc_init+0x12e>
  418676:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  418678:	2190      	movs	r1, #144	; 0x90
  41867a:	4620      	mov	r0, r4
  41867c:	4c2f      	ldr	r4, [pc, #188]	; (41873c <arc_init+0x164>)
  41867e:	47a0      	blx	r4
    lv_style_set_line_rounded(&styles->arc_bg, LV_STATE_DEFAULT, true);
  418680:	4d29      	ldr	r5, [pc, #164]	; (418728 <arc_init+0x150>)
  418682:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
  418684:	2201      	movs	r2, #1
  418686:	2194      	movs	r1, #148	; 0x94
  418688:	3020      	adds	r0, #32
  41868a:	47a0      	blx	r4
    style_init_reset(&styles->arc_knob);
  41868c:	6828      	ldr	r0, [r5, #0]
  41868e:	3024      	adds	r0, #36	; 0x24
  418690:	4b26      	ldr	r3, [pc, #152]	; (41872c <arc_init+0x154>)
  418692:	4798      	blx	r3
    lv_style_set_radius(&styles->arc_knob, LV_STATE_DEFAULT,   LV_RADIUS_CIRCLE);
  418694:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418696:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41869a:	2101      	movs	r1, #1
  41869c:	3024      	adds	r0, #36	; 0x24
  41869e:	47a0      	blx	r4
    lv_style_set_pad_top(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  4186a0:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4186a2:	2200      	movs	r2, #0
  4186a4:	2110      	movs	r1, #16
  4186a6:	3024      	adds	r0, #36	; 0x24
  4186a8:	47a0      	blx	r4
    lv_style_set_pad_bottom(&styles->arc_knob, LV_STATE_DEFAULT,  LV_DPX(0));
  4186aa:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4186ac:	2200      	movs	r2, #0
  4186ae:	2111      	movs	r1, #17
  4186b0:	3024      	adds	r0, #36	; 0x24
  4186b2:	47a0      	blx	r4
    lv_style_set_pad_left(&styles->arc_knob, LV_STATE_DEFAULT,    LV_DPX(0));
  4186b4:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4186b6:	2200      	movs	r2, #0
  4186b8:	2112      	movs	r1, #18
  4186ba:	3024      	adds	r0, #36	; 0x24
  4186bc:	47a0      	blx	r4
    lv_style_set_pad_right(&styles->arc_knob, LV_STATE_DEFAULT,   LV_DPX(0));
  4186be:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4186c0:	2200      	movs	r2, #0
  4186c2:	2113      	movs	r1, #19
  4186c4:	3024      	adds	r0, #36	; 0x24
  4186c6:	47a0      	blx	r4
  4186c8:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_line_width(&styles->arc_indic, LV_STATE_DEFAULT, LV_DPX(25));
  4186ca:	2000      	movs	r0, #0
  4186cc:	4b1a      	ldr	r3, [pc, #104]	; (418738 <arc_init+0x160>)
  4186ce:	4798      	blx	r3
  4186d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4186d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4186d8:	3050      	adds	r0, #80	; 0x50
  4186da:	4b19      	ldr	r3, [pc, #100]	; (418740 <arc_init+0x168>)
  4186dc:	fb83 2300 	smull	r2, r3, r3, r0
  4186e0:	17c2      	asrs	r2, r0, #31
  4186e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4186e6:	b212      	sxth	r2, r2
  4186e8:	e791      	b.n	41860e <arc_init+0x36>
  4186ea:	2302      	movs	r3, #2
  4186ec:	f04f 0200 	mov.w	r2, #0
  4186f0:	f363 0202 	bfi	r2, r3, #0, #3
  4186f4:	2108      	movs	r1, #8
  4186f6:	f361 02c7 	bfi	r2, r1, #3, #5
  4186fa:	2109      	movs	r1, #9
  4186fc:	f361 220c 	bfi	r2, r1, #8, #5
  418700:	f363 324f 	bfi	r2, r3, #13, #3
  418704:	e7a6      	b.n	418654 <arc_init+0x7c>
    lv_style_set_line_width(&styles->arc_bg, LV_STATE_DEFAULT, LV_DPX(25));
  418706:	2000      	movs	r0, #0
  418708:	4b0b      	ldr	r3, [pc, #44]	; (418738 <arc_init+0x160>)
  41870a:	4798      	blx	r3
  41870c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418714:	3050      	adds	r0, #80	; 0x50
  418716:	4b0a      	ldr	r3, [pc, #40]	; (418740 <arc_init+0x168>)
  418718:	fb83 2300 	smull	r2, r3, r3, r0
  41871c:	17c2      	asrs	r2, r0, #31
  41871e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418722:	b212      	sxth	r2, r2
  418724:	e7a8      	b.n	418678 <arc_init+0xa0>
  418726:	bf00      	nop
  418728:	204147a8 	.word	0x204147a8
  41872c:	00417885 	.word	0x00417885
  418730:	204147ac 	.word	0x204147ac
  418734:	00409e11 	.word	0x00409e11
  418738:	0041468d 	.word	0x0041468d
  41873c:	00409c81 	.word	0x00409c81
  418740:	66666667 	.word	0x66666667

00418744 <chart_init>:
{
  418744:	b510      	push	{r4, lr}
    style_init_reset(&styles->chart_bg);
  418746:	4c9a      	ldr	r4, [pc, #616]	; (4189b0 <chart_init+0x26c>)
  418748:	6820      	ldr	r0, [r4, #0]
  41874a:	3044      	adds	r0, #68	; 0x44
  41874c:	4b99      	ldr	r3, [pc, #612]	; (4189b4 <chart_init+0x270>)
  41874e:	4798      	blx	r3
    lv_style_set_text_color(&styles->chart_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  418750:	6820      	ldr	r0, [r4, #0]
  418752:	3044      	adds	r0, #68	; 0x44
  418754:	4b98      	ldr	r3, [pc, #608]	; (4189b8 <chart_init+0x274>)
  418756:	6a1b      	ldr	r3, [r3, #32]
  418758:	f013 0f02 	tst.w	r3, #2
  41875c:	f000 80ab 	beq.w	4188b6 <chart_init+0x172>
  418760:	f04f 0200 	mov.w	r2, #0
  418764:	2305      	movs	r3, #5
  418766:	f363 0202 	bfi	r2, r3, #0, #3
  41876a:	2315      	movs	r3, #21
  41876c:	f363 02c7 	bfi	r2, r3, #3, #5
  418770:	f363 220c 	bfi	r2, r3, #8, #5
  418774:	2302      	movs	r3, #2
  418776:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41877a:	f248 0189 	movw	r1, #32905	; 0x8089
  41877e:	4b8f      	ldr	r3, [pc, #572]	; (4189bc <chart_init+0x278>)
  418780:	4798      	blx	r3
    style_init_reset(&styles->chart_series_bg);
  418782:	4c8b      	ldr	r4, [pc, #556]	; (4189b0 <chart_init+0x26c>)
  418784:	6820      	ldr	r0, [r4, #0]
  418786:	3048      	adds	r0, #72	; 0x48
  418788:	4b8a      	ldr	r3, [pc, #552]	; (4189b4 <chart_init+0x270>)
  41878a:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  41878c:	6824      	ldr	r4, [r4, #0]
  41878e:	3448      	adds	r4, #72	; 0x48
  418790:	2000      	movs	r0, #0
  418792:	4b8b      	ldr	r3, [pc, #556]	; (4189c0 <chart_init+0x27c>)
  418794:	4798      	blx	r3
  418796:	3050      	adds	r0, #80	; 0x50
  418798:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41879c:	f280 809a 	bge.w	4188d4 <chart_init+0x190>
  4187a0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  4187a2:	2190      	movs	r1, #144	; 0x90
  4187a4:	4620      	mov	r0, r4
  4187a6:	4b87      	ldr	r3, [pc, #540]	; (4189c4 <chart_init+0x280>)
  4187a8:	4798      	blx	r3
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4187aa:	4b81      	ldr	r3, [pc, #516]	; (4189b0 <chart_init+0x26c>)
  4187ac:	681c      	ldr	r4, [r3, #0]
  4187ae:	3448      	adds	r4, #72	; 0x48
  4187b0:	2000      	movs	r0, #0
  4187b2:	4b83      	ldr	r3, [pc, #524]	; (4189c0 <chart_init+0x27c>)
  4187b4:	4798      	blx	r3
  4187b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4187ba:	0040      	lsls	r0, r0, #1
  4187bc:	3050      	adds	r0, #80	; 0x50
  4187be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187c2:	f280 8093 	bge.w	4188ec <chart_init+0x1a8>
  4187c6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
  4187c8:	2192      	movs	r1, #146	; 0x92
  4187ca:	4620      	mov	r0, r4
  4187cc:	4b7d      	ldr	r3, [pc, #500]	; (4189c4 <chart_init+0x280>)
  4187ce:	4798      	blx	r3
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4187d0:	4b77      	ldr	r3, [pc, #476]	; (4189b0 <chart_init+0x26c>)
  4187d2:	681c      	ldr	r4, [r3, #0]
  4187d4:	3448      	adds	r4, #72	; 0x48
  4187d6:	2000      	movs	r0, #0
  4187d8:	4b79      	ldr	r3, [pc, #484]	; (4189c0 <chart_init+0x27c>)
  4187da:	4798      	blx	r3
  4187dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4187e0:	0040      	lsls	r0, r0, #1
  4187e2:	3050      	adds	r0, #80	; 0x50
  4187e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4187e8:	f280 808f 	bge.w	41890a <chart_init+0x1c6>
  4187ec:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
  4187ee:	2193      	movs	r1, #147	; 0x93
  4187f0:	4620      	mov	r0, r4
  4187f2:	4b74      	ldr	r3, [pc, #464]	; (4189c4 <chart_init+0x280>)
  4187f4:	4798      	blx	r3
    lv_style_set_line_color(&styles->chart_series_bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  4187f6:	4b6e      	ldr	r3, [pc, #440]	; (4189b0 <chart_init+0x26c>)
  4187f8:	6818      	ldr	r0, [r3, #0]
  4187fa:	3048      	adds	r0, #72	; 0x48
  4187fc:	4b6e      	ldr	r3, [pc, #440]	; (4189b8 <chart_init+0x274>)
  4187fe:	6a1b      	ldr	r3, [r3, #32]
  418800:	f013 0f02 	tst.w	r3, #2
  418804:	f000 8090 	beq.w	418928 <chart_init+0x1e4>
  418808:	f04f 0200 	mov.w	r2, #0
  41880c:	2306      	movs	r3, #6
  41880e:	f363 0202 	bfi	r2, r3, #0, #3
  418812:	231a      	movs	r3, #26
  418814:	f363 02c7 	bfi	r2, r3, #3, #5
  418818:	231c      	movs	r3, #28
  41881a:	f363 220c 	bfi	r2, r3, #8, #5
  41881e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  418822:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  418826:	2199      	movs	r1, #153	; 0x99
  418828:	4b64      	ldr	r3, [pc, #400]	; (4189bc <chart_init+0x278>)
  41882a:	4798      	blx	r3
    style_init_reset(&styles->chart_series);
  41882c:	4c60      	ldr	r4, [pc, #384]	; (4189b0 <chart_init+0x26c>)
  41882e:	6820      	ldr	r0, [r4, #0]
  418830:	304c      	adds	r0, #76	; 0x4c
  418832:	4b60      	ldr	r3, [pc, #384]	; (4189b4 <chart_init+0x270>)
  418834:	4798      	blx	r3
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  418836:	6824      	ldr	r4, [r4, #0]
  418838:	344c      	adds	r4, #76	; 0x4c
  41883a:	2000      	movs	r0, #0
  41883c:	4b60      	ldr	r3, [pc, #384]	; (4189c0 <chart_init+0x27c>)
  41883e:	4798      	blx	r3
  418840:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418844:	3050      	adds	r0, #80	; 0x50
  418846:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41884a:	da7c      	bge.n	418946 <chart_init+0x202>
  41884c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41884e:	2190      	movs	r1, #144	; 0x90
  418850:	4620      	mov	r0, r4
  418852:	4b5c      	ldr	r3, [pc, #368]	; (4189c4 <chart_init+0x280>)
  418854:	4798      	blx	r3
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  418856:	4b56      	ldr	r3, [pc, #344]	; (4189b0 <chart_init+0x26c>)
  418858:	681c      	ldr	r4, [r3, #0]
  41885a:	344c      	adds	r4, #76	; 0x4c
  41885c:	2000      	movs	r0, #0
  41885e:	4b58      	ldr	r3, [pc, #352]	; (4189c0 <chart_init+0x27c>)
  418860:	4798      	blx	r3
  418862:	3014      	adds	r0, #20
  418864:	0080      	lsls	r0, r0, #2
  418866:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41886a:	da7a      	bge.n	418962 <chart_init+0x21e>
  41886c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41886e:	2103      	movs	r1, #3
  418870:	4620      	mov	r0, r4
  418872:	4b54      	ldr	r3, [pc, #336]	; (4189c4 <chart_init+0x280>)
  418874:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  418876:	4b4e      	ldr	r3, [pc, #312]	; (4189b0 <chart_init+0x26c>)
  418878:	681c      	ldr	r4, [r3, #0]
  41887a:	344c      	adds	r4, #76	; 0x4c
  41887c:	2000      	movs	r0, #0
  41887e:	4b50      	ldr	r3, [pc, #320]	; (4189c0 <chart_init+0x27c>)
  418880:	4798      	blx	r3
  418882:	3028      	adds	r0, #40	; 0x28
  418884:	0040      	lsls	r0, r0, #1
  418886:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41888a:	da77      	bge.n	41897c <chart_init+0x238>
  41888c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41888e:	2114      	movs	r1, #20
  418890:	4620      	mov	r0, r4
  418892:	4b4c      	ldr	r3, [pc, #304]	; (4189c4 <chart_init+0x280>)
  418894:	4798      	blx	r3
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418896:	4b46      	ldr	r3, [pc, #280]	; (4189b0 <chart_init+0x26c>)
  418898:	681c      	ldr	r4, [r3, #0]
  41889a:	344c      	adds	r4, #76	; 0x4c
  41889c:	2000      	movs	r0, #0
  41889e:	4b48      	ldr	r3, [pc, #288]	; (4189c0 <chart_init+0x27c>)
  4188a0:	4798      	blx	r3
  4188a2:	3050      	adds	r0, #80	; 0x50
  4188a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4188a8:	da75      	bge.n	418996 <chart_init+0x252>
  4188aa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4188ac:	2101      	movs	r1, #1
  4188ae:	4620      	mov	r0, r4
  4188b0:	4b44      	ldr	r3, [pc, #272]	; (4189c4 <chart_init+0x280>)
  4188b2:	4798      	blx	r3
  4188b4:	bd10      	pop	{r4, pc}
  4188b6:	f04f 0200 	mov.w	r2, #0
  4188ba:	2305      	movs	r3, #5
  4188bc:	f363 0202 	bfi	r2, r3, #0, #3
  4188c0:	2314      	movs	r3, #20
  4188c2:	f363 02c7 	bfi	r2, r3, #3, #5
  4188c6:	2317      	movs	r3, #23
  4188c8:	f363 220c 	bfi	r2, r3, #8, #5
  4188cc:	2303      	movs	r3, #3
  4188ce:	f363 324f 	bfi	r2, r3, #13, #3
  4188d2:	e752      	b.n	41877a <chart_init+0x36>
    lv_style_set_line_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(1));
  4188d4:	2000      	movs	r0, #0
  4188d6:	4b3a      	ldr	r3, [pc, #232]	; (4189c0 <chart_init+0x27c>)
  4188d8:	4798      	blx	r3
  4188da:	3050      	adds	r0, #80	; 0x50
  4188dc:	4b3a      	ldr	r3, [pc, #232]	; (4189c8 <chart_init+0x284>)
  4188de:	fb83 2300 	smull	r2, r3, r3, r0
  4188e2:	17c2      	asrs	r2, r0, #31
  4188e4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4188e8:	b212      	sxth	r2, r2
  4188ea:	e75a      	b.n	4187a2 <chart_init+0x5e>
    lv_style_set_line_dash_width(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4188ec:	2000      	movs	r0, #0
  4188ee:	4b34      	ldr	r3, [pc, #208]	; (4189c0 <chart_init+0x27c>)
  4188f0:	4798      	blx	r3
  4188f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4188f6:	0040      	lsls	r0, r0, #1
  4188f8:	3050      	adds	r0, #80	; 0x50
  4188fa:	4b33      	ldr	r3, [pc, #204]	; (4189c8 <chart_init+0x284>)
  4188fc:	fb83 2300 	smull	r2, r3, r3, r0
  418900:	17c2      	asrs	r2, r0, #31
  418902:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418906:	b212      	sxth	r2, r2
  418908:	e75e      	b.n	4187c8 <chart_init+0x84>
    lv_style_set_line_dash_gap(&styles->chart_series_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41890a:	2000      	movs	r0, #0
  41890c:	4b2c      	ldr	r3, [pc, #176]	; (4189c0 <chart_init+0x27c>)
  41890e:	4798      	blx	r3
  418910:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  418914:	0040      	lsls	r0, r0, #1
  418916:	3050      	adds	r0, #80	; 0x50
  418918:	4b2b      	ldr	r3, [pc, #172]	; (4189c8 <chart_init+0x284>)
  41891a:	fb83 2300 	smull	r2, r3, r3, r0
  41891e:	17c2      	asrs	r2, r0, #31
  418920:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418924:	b212      	sxth	r2, r2
  418926:	e762      	b.n	4187ee <chart_init+0xaa>
  418928:	f04f 0200 	mov.w	r2, #0
  41892c:	2304      	movs	r3, #4
  41892e:	f363 0202 	bfi	r2, r3, #0, #3
  418932:	2310      	movs	r3, #16
  418934:	f363 02c7 	bfi	r2, r3, #3, #5
  418938:	2312      	movs	r3, #18
  41893a:	f363 220c 	bfi	r2, r3, #8, #5
  41893e:	2302      	movs	r3, #2
  418940:	f363 324f 	bfi	r2, r3, #13, #3
  418944:	e76f      	b.n	418826 <chart_init+0xe2>
    lv_style_set_line_width(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(3));
  418946:	2000      	movs	r0, #0
  418948:	4b1d      	ldr	r3, [pc, #116]	; (4189c0 <chart_init+0x27c>)
  41894a:	4798      	blx	r3
  41894c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418950:	3050      	adds	r0, #80	; 0x50
  418952:	4b1d      	ldr	r3, [pc, #116]	; (4189c8 <chart_init+0x284>)
  418954:	fb83 2300 	smull	r2, r3, r3, r0
  418958:	17c2      	asrs	r2, r0, #31
  41895a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41895e:	b212      	sxth	r2, r2
  418960:	e775      	b.n	41884e <chart_init+0x10a>
    lv_style_set_size(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(4));
  418962:	2000      	movs	r0, #0
  418964:	4b16      	ldr	r3, [pc, #88]	; (4189c0 <chart_init+0x27c>)
  418966:	4798      	blx	r3
  418968:	3014      	adds	r0, #20
  41896a:	0080      	lsls	r0, r0, #2
  41896c:	4b16      	ldr	r3, [pc, #88]	; (4189c8 <chart_init+0x284>)
  41896e:	fb83 2300 	smull	r2, r3, r3, r0
  418972:	17c2      	asrs	r2, r0, #31
  418974:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418978:	b212      	sxth	r2, r2
  41897a:	e778      	b.n	41886e <chart_init+0x12a>
    lv_style_set_pad_inner(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(2));     /*Space between columns*/
  41897c:	2000      	movs	r0, #0
  41897e:	4b10      	ldr	r3, [pc, #64]	; (4189c0 <chart_init+0x27c>)
  418980:	4798      	blx	r3
  418982:	3028      	adds	r0, #40	; 0x28
  418984:	0040      	lsls	r0, r0, #1
  418986:	4b10      	ldr	r3, [pc, #64]	; (4189c8 <chart_init+0x284>)
  418988:	fb83 2300 	smull	r2, r3, r3, r0
  41898c:	17c2      	asrs	r2, r0, #31
  41898e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418992:	b212      	sxth	r2, r2
  418994:	e77b      	b.n	41888e <chart_init+0x14a>
    lv_style_set_radius(&styles->chart_series, LV_STATE_DEFAULT, LV_DPX(1));
  418996:	2000      	movs	r0, #0
  418998:	4b09      	ldr	r3, [pc, #36]	; (4189c0 <chart_init+0x27c>)
  41899a:	4798      	blx	r3
  41899c:	3050      	adds	r0, #80	; 0x50
  41899e:	4b0a      	ldr	r3, [pc, #40]	; (4189c8 <chart_init+0x284>)
  4189a0:	fb83 2300 	smull	r2, r3, r3, r0
  4189a4:	17c2      	asrs	r2, r0, #31
  4189a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4189aa:	b212      	sxth	r2, r2
  4189ac:	e77e      	b.n	4188ac <chart_init+0x168>
  4189ae:	bf00      	nop
  4189b0:	204147a8 	.word	0x204147a8
  4189b4:	00417885 	.word	0x00417885
  4189b8:	204147ac 	.word	0x204147ac
  4189bc:	00409e11 	.word	0x00409e11
  4189c0:	0041468d 	.word	0x0041468d
  4189c4:	00409c81 	.word	0x00409c81
  4189c8:	66666667 	.word	0x66666667

004189cc <calendar_init>:
{
  4189cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->calendar_header);
  4189ce:	4cbd      	ldr	r4, [pc, #756]	; (418cc4 <calendar_init+0x2f8>)
  4189d0:	6820      	ldr	r0, [r4, #0]
  4189d2:	3034      	adds	r0, #52	; 0x34
  4189d4:	4bbc      	ldr	r3, [pc, #752]	; (418cc8 <calendar_init+0x2fc>)
  4189d6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  4189d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4189da:	2200      	movs	r2, #0
  4189dc:	2110      	movs	r1, #16
  4189de:	3034      	adds	r0, #52	; 0x34
  4189e0:	4bba      	ldr	r3, [pc, #744]	; (418ccc <calendar_init+0x300>)
  4189e2:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  4189e4:	6824      	ldr	r4, [r4, #0]
  4189e6:	3434      	adds	r4, #52	; 0x34
  4189e8:	2000      	movs	r0, #0
  4189ea:	4bb9      	ldr	r3, [pc, #740]	; (418cd0 <calendar_init+0x304>)
  4189ec:	4798      	blx	r3
  4189ee:	2801      	cmp	r0, #1
  4189f0:	f240 81e5 	bls.w	418dbe <calendar_init+0x3f2>
  4189f4:	2000      	movs	r0, #0
  4189f6:	4bb7      	ldr	r3, [pc, #732]	; (418cd4 <calendar_init+0x308>)
  4189f8:	4798      	blx	r3
  4189fa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4189fe:	0040      	lsls	r0, r0, #1
  418a00:	3050      	adds	r0, #80	; 0x50
  418a02:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a06:	f280 81f3 	bge.w	418df0 <calendar_init+0x424>
  418a0a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418a0c:	2112      	movs	r1, #18
  418a0e:	4620      	mov	r0, r4
  418a10:	4bae      	ldr	r3, [pc, #696]	; (418ccc <calendar_init+0x300>)
  418a12:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418a14:	4bab      	ldr	r3, [pc, #684]	; (418cc4 <calendar_init+0x2f8>)
  418a16:	681c      	ldr	r4, [r3, #0]
  418a18:	3434      	adds	r4, #52	; 0x34
  418a1a:	2000      	movs	r0, #0
  418a1c:	4bac      	ldr	r3, [pc, #688]	; (418cd0 <calendar_init+0x304>)
  418a1e:	4798      	blx	r3
  418a20:	2801      	cmp	r0, #1
  418a22:	f240 81f4 	bls.w	418e0e <calendar_init+0x442>
  418a26:	2000      	movs	r0, #0
  418a28:	4baa      	ldr	r3, [pc, #680]	; (418cd4 <calendar_init+0x308>)
  418a2a:	4798      	blx	r3
  418a2c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a30:	0040      	lsls	r0, r0, #1
  418a32:	3050      	adds	r0, #80	; 0x50
  418a34:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a38:	f280 8202 	bge.w	418e40 <calendar_init+0x474>
  418a3c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418a3e:	2113      	movs	r1, #19
  418a40:	4620      	mov	r0, r4
  418a42:	4da2      	ldr	r5, [pc, #648]	; (418ccc <calendar_init+0x300>)
  418a44:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->calendar_header, LV_STATE_DEFAULT, 0);
  418a46:	4c9f      	ldr	r4, [pc, #636]	; (418cc4 <calendar_init+0x2f8>)
  418a48:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418a4a:	2200      	movs	r2, #0
  418a4c:	2111      	movs	r1, #17
  418a4e:	3034      	adds	r0, #52	; 0x34
  418a50:	47a8      	blx	r5
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418a52:	6824      	ldr	r4, [r4, #0]
  418a54:	3434      	adds	r4, #52	; 0x34
  418a56:	2000      	movs	r0, #0
  418a58:	4b9d      	ldr	r3, [pc, #628]	; (418cd0 <calendar_init+0x304>)
  418a5a:	4798      	blx	r3
  418a5c:	2801      	cmp	r0, #1
  418a5e:	f240 81fe 	bls.w	418e5e <calendar_init+0x492>
  418a62:	2000      	movs	r0, #0
  418a64:	4b9b      	ldr	r3, [pc, #620]	; (418cd4 <calendar_init+0x308>)
  418a66:	4798      	blx	r3
  418a68:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a6c:	0040      	lsls	r0, r0, #1
  418a6e:	3050      	adds	r0, #80	; 0x50
  418a70:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418a74:	f280 820c 	bge.w	418e90 <calendar_init+0x4c4>
  418a78:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  418a7a:	2115      	movs	r1, #21
  418a7c:	4620      	mov	r0, r4
  418a7e:	4b93      	ldr	r3, [pc, #588]	; (418ccc <calendar_init+0x300>)
  418a80:	4798      	blx	r3
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418a82:	4b90      	ldr	r3, [pc, #576]	; (418cc4 <calendar_init+0x2f8>)
  418a84:	681c      	ldr	r4, [r3, #0]
  418a86:	3434      	adds	r4, #52	; 0x34
  418a88:	2000      	movs	r0, #0
  418a8a:	4b91      	ldr	r3, [pc, #580]	; (418cd0 <calendar_init+0x304>)
  418a8c:	4798      	blx	r3
  418a8e:	2801      	cmp	r0, #1
  418a90:	f240 820d 	bls.w	418eae <calendar_init+0x4e2>
  418a94:	2000      	movs	r0, #0
  418a96:	4b8f      	ldr	r3, [pc, #572]	; (418cd4 <calendar_init+0x308>)
  418a98:	4798      	blx	r3
  418a9a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418a9e:	0040      	lsls	r0, r0, #1
  418aa0:	3050      	adds	r0, #80	; 0x50
  418aa2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418aa6:	f280 821b 	bge.w	418ee0 <calendar_init+0x514>
  418aaa:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  418aac:	2116      	movs	r1, #22
  418aae:	4620      	mov	r0, r4
  418ab0:	4b86      	ldr	r3, [pc, #536]	; (418ccc <calendar_init+0x300>)
  418ab2:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  418ab4:	4b83      	ldr	r3, [pc, #524]	; (418cc4 <calendar_init+0x2f8>)
  418ab6:	6818      	ldr	r0, [r3, #0]
  418ab8:	3034      	adds	r0, #52	; 0x34
  418aba:	4b87      	ldr	r3, [pc, #540]	; (418cd8 <calendar_init+0x30c>)
  418abc:	6a1b      	ldr	r3, [r3, #32]
  418abe:	f013 0f02 	tst.w	r3, #2
  418ac2:	f000 821c 	beq.w	418efe <calendar_init+0x532>
  418ac6:	f04f 0200 	mov.w	r2, #0
  418aca:	2304      	movs	r3, #4
  418acc:	f363 0202 	bfi	r2, r3, #0, #3
  418ad0:	2311      	movs	r3, #17
  418ad2:	f363 02c7 	bfi	r2, r3, #3, #5
  418ad6:	f363 220c 	bfi	r2, r3, #8, #5
  418ada:	2302      	movs	r3, #2
  418adc:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418ae0:	f249 0189 	movw	r1, #37001	; 0x9089
  418ae4:	4b7d      	ldr	r3, [pc, #500]	; (418cdc <calendar_init+0x310>)
  418ae6:	4798      	blx	r3
    style_init_reset(&styles->calendar_daynames);
  418ae8:	4c76      	ldr	r4, [pc, #472]	; (418cc4 <calendar_init+0x2f8>)
  418aea:	6820      	ldr	r0, [r4, #0]
  418aec:	3038      	adds	r0, #56	; 0x38
  418aee:	4b76      	ldr	r3, [pc, #472]	; (418cc8 <calendar_init+0x2fc>)
  418af0:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  418af2:	6820      	ldr	r0, [r4, #0]
  418af4:	3038      	adds	r0, #56	; 0x38
                            IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex3(0xeee));
  418af6:	4b78      	ldr	r3, [pc, #480]	; (418cd8 <calendar_init+0x30c>)
  418af8:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_daynames, LV_STATE_DEFAULT,
  418afa:	f013 0f02 	tst.w	r3, #2
  418afe:	f000 8201 	beq.w	418f04 <calendar_init+0x538>
  418b02:	f04f 0200 	mov.w	r2, #0
  418b06:	2302      	movs	r3, #2
  418b08:	f363 0202 	bfi	r2, r3, #0, #3
  418b0c:	2306      	movs	r3, #6
  418b0e:	f363 02c7 	bfi	r2, r3, #3, #5
  418b12:	2309      	movs	r3, #9
  418b14:	f363 220c 	bfi	r2, r3, #8, #5
  418b18:	f36f 324f 	bfc	r2, #13, #3
  418b1c:	f248 0189 	movw	r1, #32905	; 0x8089
  418b20:	4b6e      	ldr	r3, [pc, #440]	; (418cdc <calendar_init+0x310>)
  418b22:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418b24:	4b67      	ldr	r3, [pc, #412]	; (418cc4 <calendar_init+0x2f8>)
  418b26:	681c      	ldr	r4, [r3, #0]
  418b28:	3438      	adds	r4, #56	; 0x38
  418b2a:	2000      	movs	r0, #0
  418b2c:	4b68      	ldr	r3, [pc, #416]	; (418cd0 <calendar_init+0x304>)
  418b2e:	4798      	blx	r3
  418b30:	2801      	cmp	r0, #1
  418b32:	f240 81f2 	bls.w	418f1a <calendar_init+0x54e>
  418b36:	2000      	movs	r0, #0
  418b38:	4b66      	ldr	r3, [pc, #408]	; (418cd4 <calendar_init+0x308>)
  418b3a:	4798      	blx	r3
  418b3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b40:	0040      	lsls	r0, r0, #1
  418b42:	3050      	adds	r0, #80	; 0x50
  418b44:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b48:	f280 8200 	bge.w	418f4c <calendar_init+0x580>
  418b4c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418b4e:	2112      	movs	r1, #18
  418b50:	4620      	mov	r0, r4
  418b52:	4b5e      	ldr	r3, [pc, #376]	; (418ccc <calendar_init+0x300>)
  418b54:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418b56:	4b5b      	ldr	r3, [pc, #364]	; (418cc4 <calendar_init+0x2f8>)
  418b58:	681c      	ldr	r4, [r3, #0]
  418b5a:	3438      	adds	r4, #56	; 0x38
  418b5c:	2000      	movs	r0, #0
  418b5e:	4b5c      	ldr	r3, [pc, #368]	; (418cd0 <calendar_init+0x304>)
  418b60:	4798      	blx	r3
  418b62:	2801      	cmp	r0, #1
  418b64:	f240 8201 	bls.w	418f6a <calendar_init+0x59e>
  418b68:	2000      	movs	r0, #0
  418b6a:	4b5a      	ldr	r3, [pc, #360]	; (418cd4 <calendar_init+0x308>)
  418b6c:	4798      	blx	r3
  418b6e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418b72:	0040      	lsls	r0, r0, #1
  418b74:	3050      	adds	r0, #80	; 0x50
  418b76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418b7a:	f280 820f 	bge.w	418f9c <calendar_init+0x5d0>
  418b7e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418b80:	2113      	movs	r1, #19
  418b82:	4620      	mov	r0, r4
  418b84:	4b51      	ldr	r3, [pc, #324]	; (418ccc <calendar_init+0x300>)
  418b86:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418b88:	4b4e      	ldr	r3, [pc, #312]	; (418cc4 <calendar_init+0x2f8>)
  418b8a:	681c      	ldr	r4, [r3, #0]
  418b8c:	3438      	adds	r4, #56	; 0x38
  418b8e:	2000      	movs	r0, #0
  418b90:	4b4f      	ldr	r3, [pc, #316]	; (418cd0 <calendar_init+0x304>)
  418b92:	4798      	blx	r3
  418b94:	2801      	cmp	r0, #1
  418b96:	f240 8210 	bls.w	418fba <calendar_init+0x5ee>
  418b9a:	2000      	movs	r0, #0
  418b9c:	4b4d      	ldr	r3, [pc, #308]	; (418cd4 <calendar_init+0x308>)
  418b9e:	4798      	blx	r3
  418ba0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ba4:	0040      	lsls	r0, r0, #1
  418ba6:	3050      	adds	r0, #80	; 0x50
  418ba8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bac:	f280 822a 	bge.w	419004 <calendar_init+0x638>
  418bb0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418bb2:	2111      	movs	r1, #17
  418bb4:	4620      	mov	r0, r4
  418bb6:	4b45      	ldr	r3, [pc, #276]	; (418ccc <calendar_init+0x300>)
  418bb8:	4798      	blx	r3
    style_init_reset(&styles->calendar_date_nums);
  418bba:	4c42      	ldr	r4, [pc, #264]	; (418cc4 <calendar_init+0x2f8>)
  418bbc:	6820      	ldr	r0, [r4, #0]
  418bbe:	3030      	adds	r0, #48	; 0x30
  418bc0:	4b41      	ldr	r3, [pc, #260]	; (418cc8 <calendar_init+0x2fc>)
  418bc2:	4798      	blx	r3
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  418bc4:	6824      	ldr	r4, [r4, #0]
  418bc6:	3430      	adds	r4, #48	; 0x30
  418bc8:	2000      	movs	r0, #0
  418bca:	4b42      	ldr	r3, [pc, #264]	; (418cd4 <calendar_init+0x308>)
  418bcc:	4798      	blx	r3
  418bce:	3014      	adds	r0, #20
  418bd0:	0080      	lsls	r0, r0, #2
  418bd2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418bd6:	f280 8224 	bge.w	419022 <calendar_init+0x656>
  418bda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  418bdc:	2101      	movs	r1, #1
  418bde:	4620      	mov	r0, r4
  418be0:	4b3a      	ldr	r3, [pc, #232]	; (418ccc <calendar_init+0x300>)
  418be2:	4798      	blx	r3
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  418be4:	4b37      	ldr	r3, [pc, #220]	; (418cc4 <calendar_init+0x2f8>)
  418be6:	6818      	ldr	r0, [r3, #0]
  418be8:	3030      	adds	r0, #48	; 0x30
                            IS_LIGHT ? lv_color_hex(0x31404f) : LV_COLOR_WHITE);
  418bea:	4b3b      	ldr	r3, [pc, #236]	; (418cd8 <calendar_init+0x30c>)
  418bec:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  418bee:	f013 0f02 	tst.w	r3, #2
  418bf2:	f000 8223 	beq.w	41903c <calendar_init+0x670>
  418bf6:	f04f 0200 	mov.w	r2, #0
  418bfa:	2302      	movs	r3, #2
  418bfc:	f363 0202 	bfi	r2, r3, #0, #3
  418c00:	2306      	movs	r3, #6
  418c02:	f363 02c7 	bfi	r2, r3, #3, #5
  418c06:	2309      	movs	r3, #9
  418c08:	f363 220c 	bfi	r2, r3, #8, #5
  418c0c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418c10:	f248 1189 	movw	r1, #33161	; 0x8189
  418c14:	4d31      	ldr	r5, [pc, #196]	; (418cdc <calendar_init+0x310>)
  418c16:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_DISABLED, LV_COLOR_GRAY);
  418c18:	4c2a      	ldr	r4, [pc, #168]	; (418cc4 <calendar_init+0x2f8>)
  418c1a:	6820      	ldr	r0, [r4, #0]
  418c1c:	4b30      	ldr	r3, [pc, #192]	; (418ce0 <calendar_init+0x314>)
  418c1e:	889a      	ldrh	r2, [r3, #4]
  418c20:	f24a 0189 	movw	r1, #41097	; 0xa089
  418c24:	3030      	adds	r0, #48	; 0x30
  418c26:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  418c28:	6820      	ldr	r0, [r4, #0]
  418c2a:	3030      	adds	r0, #48	; 0x30
  418c2c:	4b2a      	ldr	r3, [pc, #168]	; (418cd8 <calendar_init+0x30c>)
  418c2e:	6a1b      	ldr	r3, [r3, #32]
  418c30:	f013 0f02 	tst.w	r3, #2
  418c34:	f000 8205 	beq.w	419042 <calendar_init+0x676>
  418c38:	2233      	movs	r2, #51	; 0x33
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  418c3a:	f44f 7196 	mov.w	r1, #300	; 0x12c
  418c3e:	4d29      	ldr	r5, [pc, #164]	; (418ce4 <calendar_init+0x318>)
  418c40:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_PRESSED, LV_OPA_20);
  418c42:	4c20      	ldr	r4, [pc, #128]	; (418cc4 <calendar_init+0x2f8>)
  418c44:	6820      	ldr	r0, [r4, #0]
  418c46:	2233      	movs	r2, #51	; 0x33
  418c48:	f241 012c 	movw	r1, #4140	; 0x102c
  418c4c:	3030      	adds	r0, #48	; 0x30
  418c4e:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_OPA_COVER);
  418c50:	6820      	ldr	r0, [r4, #0]
  418c52:	22ff      	movs	r2, #255	; 0xff
  418c54:	f44f 710b 	mov.w	r1, #556	; 0x22c
  418c58:	3030      	adds	r0, #48	; 0x30
  418c5a:	47a8      	blx	r5
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, LV_COLOR_WHITE);
  418c5c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  418c5e:	4b20      	ldr	r3, [pc, #128]	; (418ce0 <calendar_init+0x314>)
  418c60:	881a      	ldrh	r2, [r3, #0]
  418c62:	f248 2189 	movw	r1, #33417	; 0x8289
  418c66:	3030      	adds	r0, #48	; 0x30
  418c68:	4e1c      	ldr	r6, [pc, #112]	; (418cdc <calendar_init+0x310>)
  418c6a:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_FOCUSED, theme.color_primary);
  418c6c:	6820      	ldr	r0, [r4, #0]
  418c6e:	4d1a      	ldr	r5, [pc, #104]	; (418cd8 <calendar_init+0x30c>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  418c70:	89aa      	ldrh	r2, [r5, #12]
  418c72:	f240 2129 	movw	r1, #553	; 0x229
  418c76:	3030      	adds	r0, #48	; 0x30
  418c78:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418c7a:	6820      	ldr	r0, [r4, #0]
  418c7c:	3030      	adds	r0, #48	; 0x30
                          IS_LIGHT ? lv_color_hex(0x666666) : LV_COLOR_WHITE);
  418c7e:	6a2b      	ldr	r3, [r5, #32]
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  418c80:	f013 0f02 	tst.w	r3, #2
  418c84:	f000 81df 	beq.w	419046 <calendar_init+0x67a>
  418c88:	f04f 0200 	mov.w	r2, #0
  418c8c:	2303      	movs	r3, #3
  418c8e:	f363 0202 	bfi	r2, r3, #0, #3
  418c92:	230c      	movs	r3, #12
  418c94:	f363 02c7 	bfi	r2, r3, #3, #5
  418c98:	f363 220c 	bfi	r2, r3, #8, #5
  418c9c:	2301      	movs	r3, #1
  418c9e:	f363 324f 	bfi	r2, r3, #13, #3
  418ca2:	2129      	movs	r1, #41	; 0x29
  418ca4:	4d0d      	ldr	r5, [pc, #52]	; (418cdc <calendar_init+0x310>)
  418ca6:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  418ca8:	4c06      	ldr	r4, [pc, #24]	; (418cc4 <calendar_init+0x2f8>)
  418caa:	6820      	ldr	r0, [r4, #0]
  418cac:	4e0a      	ldr	r6, [pc, #40]	; (418cd8 <calendar_init+0x30c>)
  418cae:	89b2      	ldrh	r2, [r6, #12]
  418cb0:	f240 1129 	movw	r1, #297	; 0x129
  418cb4:	3030      	adds	r0, #48	; 0x30
  418cb6:	47a8      	blx	r5
    lv_style_set_border_width(&styles->calendar_date_nums, LV_STATE_CHECKED, 2);
  418cb8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  418cba:	2202      	movs	r2, #2
  418cbc:	f44f 7198 	mov.w	r1, #304	; 0x130
  418cc0:	3030      	adds	r0, #48	; 0x30
  418cc2:	e011      	b.n	418ce8 <calendar_init+0x31c>
  418cc4:	204147a8 	.word	0x204147a8
  418cc8:	00417885 	.word	0x00417885
  418ccc:	00409c81 	.word	0x00409c81
  418cd0:	004146ad 	.word	0x004146ad
  418cd4:	0041468d 	.word	0x0041468d
  418cd8:	204147ac 	.word	0x204147ac
  418cdc:	00409e11 	.word	0x00409e11
  418ce0:	004297c8 	.word	0x004297c8
  418ce4:	00409fa1 	.word	0x00409fa1
  418ce8:	4fb9      	ldr	r7, [pc, #740]	; (418fd0 <calendar_init+0x604>)
  418cea:	47b8      	blx	r7
    lv_style_set_border_side(&styles->calendar_date_nums, LV_STATE_CHECKED, LV_BORDER_SIDE_LEFT);
  418cec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  418cee:	2204      	movs	r2, #4
  418cf0:	f240 1131 	movw	r1, #305	; 0x131
  418cf4:	3030      	adds	r0, #48	; 0x30
  418cf6:	47b8      	blx	r7
    lv_style_set_border_color(&styles->calendar_date_nums, LV_STATE_CHECKED, theme.color_primary);
  418cf8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  418cfa:	89b2      	ldrh	r2, [r6, #12]
  418cfc:	f240 1139 	movw	r1, #313	; 0x139
  418d00:	3030      	adds	r0, #48	; 0x30
  418d02:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  418d04:	6824      	ldr	r4, [r4, #0]
  418d06:	3430      	adds	r4, #48	; 0x30
  418d08:	2000      	movs	r0, #0
  418d0a:	4bb2      	ldr	r3, [pc, #712]	; (418fd4 <calendar_init+0x608>)
  418d0c:	4798      	blx	r3
  418d0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  418d12:	3050      	adds	r0, #80	; 0x50
  418d14:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d18:	f280 8198 	bge.w	41904c <calendar_init+0x680>
  418d1c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  418d1e:	2114      	movs	r1, #20
  418d20:	4620      	mov	r0, r4
  418d22:	4bab      	ldr	r3, [pc, #684]	; (418fd0 <calendar_init+0x604>)
  418d24:	4798      	blx	r3
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418d26:	4bac      	ldr	r3, [pc, #688]	; (418fd8 <calendar_init+0x60c>)
  418d28:	681c      	ldr	r4, [r3, #0]
  418d2a:	3430      	adds	r4, #48	; 0x30
  418d2c:	2000      	movs	r0, #0
  418d2e:	4bab      	ldr	r3, [pc, #684]	; (418fdc <calendar_init+0x610>)
  418d30:	4798      	blx	r3
  418d32:	2801      	cmp	r0, #1
  418d34:	f240 8198 	bls.w	419068 <calendar_init+0x69c>
  418d38:	2000      	movs	r0, #0
  418d3a:	4ba6      	ldr	r3, [pc, #664]	; (418fd4 <calendar_init+0x608>)
  418d3c:	4798      	blx	r3
  418d3e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d42:	0040      	lsls	r0, r0, #1
  418d44:	3050      	adds	r0, #80	; 0x50
  418d46:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d4a:	f280 81a6 	bge.w	41909a <calendar_init+0x6ce>
  418d4e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  418d50:	2112      	movs	r1, #18
  418d52:	4620      	mov	r0, r4
  418d54:	4b9e      	ldr	r3, [pc, #632]	; (418fd0 <calendar_init+0x604>)
  418d56:	4798      	blx	r3
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418d58:	4b9f      	ldr	r3, [pc, #636]	; (418fd8 <calendar_init+0x60c>)
  418d5a:	681c      	ldr	r4, [r3, #0]
  418d5c:	3430      	adds	r4, #48	; 0x30
  418d5e:	2000      	movs	r0, #0
  418d60:	4b9e      	ldr	r3, [pc, #632]	; (418fdc <calendar_init+0x610>)
  418d62:	4798      	blx	r3
  418d64:	2801      	cmp	r0, #1
  418d66:	f240 81a7 	bls.w	4190b8 <calendar_init+0x6ec>
  418d6a:	2000      	movs	r0, #0
  418d6c:	4b99      	ldr	r3, [pc, #612]	; (418fd4 <calendar_init+0x608>)
  418d6e:	4798      	blx	r3
  418d70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418d74:	0040      	lsls	r0, r0, #1
  418d76:	3050      	adds	r0, #80	; 0x50
  418d78:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418d7c:	f280 81b5 	bge.w	4190ea <calendar_init+0x71e>
  418d80:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  418d82:	2113      	movs	r1, #19
  418d84:	4620      	mov	r0, r4
  418d86:	4b92      	ldr	r3, [pc, #584]	; (418fd0 <calendar_init+0x604>)
  418d88:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  418d8a:	4b93      	ldr	r3, [pc, #588]	; (418fd8 <calendar_init+0x60c>)
  418d8c:	681c      	ldr	r4, [r3, #0]
  418d8e:	3430      	adds	r4, #48	; 0x30
  418d90:	2000      	movs	r0, #0
  418d92:	4b92      	ldr	r3, [pc, #584]	; (418fdc <calendar_init+0x610>)
  418d94:	4798      	blx	r3
  418d96:	2801      	cmp	r0, #1
  418d98:	f240 81b6 	bls.w	419108 <calendar_init+0x73c>
  418d9c:	2000      	movs	r0, #0
  418d9e:	4b8d      	ldr	r3, [pc, #564]	; (418fd4 <calendar_init+0x608>)
  418da0:	4798      	blx	r3
  418da2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418da6:	0040      	lsls	r0, r0, #1
  418da8:	3050      	adds	r0, #80	; 0x50
  418daa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418dae:	f280 81c4 	bge.w	41913a <calendar_init+0x76e>
  418db2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  418db4:	2111      	movs	r1, #17
  418db6:	4620      	mov	r0, r4
  418db8:	4b85      	ldr	r3, [pc, #532]	; (418fd0 <calendar_init+0x604>)
  418dba:	4798      	blx	r3
  418dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_pad_left(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418dbe:	2000      	movs	r0, #0
  418dc0:	4b84      	ldr	r3, [pc, #528]	; (418fd4 <calendar_init+0x608>)
  418dc2:	4798      	blx	r3
  418dc4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418dc8:	3050      	adds	r0, #80	; 0x50
  418dca:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418dce:	da01      	bge.n	418dd4 <calendar_init+0x408>
  418dd0:	2201      	movs	r2, #1
  418dd2:	e61b      	b.n	418a0c <calendar_init+0x40>
  418dd4:	2000      	movs	r0, #0
  418dd6:	4b7f      	ldr	r3, [pc, #508]	; (418fd4 <calendar_init+0x608>)
  418dd8:	4798      	blx	r3
  418dda:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418dde:	3050      	adds	r0, #80	; 0x50
  418de0:	4b7f      	ldr	r3, [pc, #508]	; (418fe0 <calendar_init+0x614>)
  418de2:	fb83 2300 	smull	r2, r3, r3, r0
  418de6:	17c2      	asrs	r2, r0, #31
  418de8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418dec:	b212      	sxth	r2, r2
  418dee:	e60d      	b.n	418a0c <calendar_init+0x40>
  418df0:	2000      	movs	r0, #0
  418df2:	4b78      	ldr	r3, [pc, #480]	; (418fd4 <calendar_init+0x608>)
  418df4:	4798      	blx	r3
  418df6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418dfa:	0040      	lsls	r0, r0, #1
  418dfc:	3050      	adds	r0, #80	; 0x50
  418dfe:	4b78      	ldr	r3, [pc, #480]	; (418fe0 <calendar_init+0x614>)
  418e00:	fb83 2300 	smull	r2, r3, r3, r0
  418e04:	17c2      	asrs	r2, r0, #31
  418e06:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e0a:	b212      	sxth	r2, r2
  418e0c:	e5fe      	b.n	418a0c <calendar_init+0x40>
    lv_style_set_pad_right(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418e0e:	2000      	movs	r0, #0
  418e10:	4b70      	ldr	r3, [pc, #448]	; (418fd4 <calendar_init+0x608>)
  418e12:	4798      	blx	r3
  418e14:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e18:	3050      	adds	r0, #80	; 0x50
  418e1a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e1e:	da01      	bge.n	418e24 <calendar_init+0x458>
  418e20:	2201      	movs	r2, #1
  418e22:	e60c      	b.n	418a3e <calendar_init+0x72>
  418e24:	2000      	movs	r0, #0
  418e26:	4b6b      	ldr	r3, [pc, #428]	; (418fd4 <calendar_init+0x608>)
  418e28:	4798      	blx	r3
  418e2a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e2e:	3050      	adds	r0, #80	; 0x50
  418e30:	4b6b      	ldr	r3, [pc, #428]	; (418fe0 <calendar_init+0x614>)
  418e32:	fb83 2300 	smull	r2, r3, r3, r0
  418e36:	17c2      	asrs	r2, r0, #31
  418e38:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e3c:	b212      	sxth	r2, r2
  418e3e:	e5fe      	b.n	418a3e <calendar_init+0x72>
  418e40:	2000      	movs	r0, #0
  418e42:	4b64      	ldr	r3, [pc, #400]	; (418fd4 <calendar_init+0x608>)
  418e44:	4798      	blx	r3
  418e46:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e4a:	0040      	lsls	r0, r0, #1
  418e4c:	3050      	adds	r0, #80	; 0x50
  418e4e:	4b64      	ldr	r3, [pc, #400]	; (418fe0 <calendar_init+0x614>)
  418e50:	fb83 2300 	smull	r2, r3, r3, r0
  418e54:	17c2      	asrs	r2, r0, #31
  418e56:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e5a:	b212      	sxth	r2, r2
  418e5c:	e5ef      	b.n	418a3e <calendar_init+0x72>
    lv_style_set_margin_top(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418e5e:	2000      	movs	r0, #0
  418e60:	4b5c      	ldr	r3, [pc, #368]	; (418fd4 <calendar_init+0x608>)
  418e62:	4798      	blx	r3
  418e64:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e68:	3050      	adds	r0, #80	; 0x50
  418e6a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418e6e:	da01      	bge.n	418e74 <calendar_init+0x4a8>
  418e70:	2201      	movs	r2, #1
  418e72:	e602      	b.n	418a7a <calendar_init+0xae>
  418e74:	2000      	movs	r0, #0
  418e76:	4b57      	ldr	r3, [pc, #348]	; (418fd4 <calendar_init+0x608>)
  418e78:	4798      	blx	r3
  418e7a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e7e:	3050      	adds	r0, #80	; 0x50
  418e80:	4b57      	ldr	r3, [pc, #348]	; (418fe0 <calendar_init+0x614>)
  418e82:	fb83 2300 	smull	r2, r3, r3, r0
  418e86:	17c2      	asrs	r2, r0, #31
  418e88:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418e8c:	b212      	sxth	r2, r2
  418e8e:	e5f4      	b.n	418a7a <calendar_init+0xae>
  418e90:	2000      	movs	r0, #0
  418e92:	4b50      	ldr	r3, [pc, #320]	; (418fd4 <calendar_init+0x608>)
  418e94:	4798      	blx	r3
  418e96:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418e9a:	0040      	lsls	r0, r0, #1
  418e9c:	3050      	adds	r0, #80	; 0x50
  418e9e:	4b50      	ldr	r3, [pc, #320]	; (418fe0 <calendar_init+0x614>)
  418ea0:	fb83 2300 	smull	r2, r3, r3, r0
  418ea4:	17c2      	asrs	r2, r0, #31
  418ea6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418eaa:	b212      	sxth	r2, r2
  418eac:	e5e5      	b.n	418a7a <calendar_init+0xae>
    lv_style_set_margin_bottom(&styles->calendar_header, LV_STATE_DEFAULT, PAD_DEF);
  418eae:	2000      	movs	r0, #0
  418eb0:	4b48      	ldr	r3, [pc, #288]	; (418fd4 <calendar_init+0x608>)
  418eb2:	4798      	blx	r3
  418eb4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418eb8:	3050      	adds	r0, #80	; 0x50
  418eba:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418ebe:	da01      	bge.n	418ec4 <calendar_init+0x4f8>
  418ec0:	2201      	movs	r2, #1
  418ec2:	e5f3      	b.n	418aac <calendar_init+0xe0>
  418ec4:	2000      	movs	r0, #0
  418ec6:	4b43      	ldr	r3, [pc, #268]	; (418fd4 <calendar_init+0x608>)
  418ec8:	4798      	blx	r3
  418eca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ece:	3050      	adds	r0, #80	; 0x50
  418ed0:	4b43      	ldr	r3, [pc, #268]	; (418fe0 <calendar_init+0x614>)
  418ed2:	fb83 2300 	smull	r2, r3, r3, r0
  418ed6:	17c2      	asrs	r2, r0, #31
  418ed8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418edc:	b212      	sxth	r2, r2
  418ede:	e5e5      	b.n	418aac <calendar_init+0xe0>
  418ee0:	2000      	movs	r0, #0
  418ee2:	4b3c      	ldr	r3, [pc, #240]	; (418fd4 <calendar_init+0x608>)
  418ee4:	4798      	blx	r3
  418ee6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418eea:	0040      	lsls	r0, r0, #1
  418eec:	3050      	adds	r0, #80	; 0x50
  418eee:	4b3c      	ldr	r3, [pc, #240]	; (418fe0 <calendar_init+0x614>)
  418ef0:	fb83 2300 	smull	r2, r3, r3, r0
  418ef4:	17c2      	asrs	r2, r0, #31
  418ef6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418efa:	b212      	sxth	r2, r2
  418efc:	e5d6      	b.n	418aac <calendar_init+0xe0>
    lv_style_set_text_color(&styles->calendar_header, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x888888) : LV_COLOR_WHITE);
  418efe:	4b39      	ldr	r3, [pc, #228]	; (418fe4 <calendar_init+0x618>)
  418f00:	881a      	ldrh	r2, [r3, #0]
  418f02:	e5ed      	b.n	418ae0 <calendar_init+0x114>
  418f04:	f04f 0207 	mov.w	r2, #7
  418f08:	231d      	movs	r3, #29
  418f0a:	f363 02c7 	bfi	r2, r3, #3, #5
  418f0e:	f363 220c 	bfi	r2, r3, #8, #5
  418f12:	2303      	movs	r3, #3
  418f14:	f363 324f 	bfi	r2, r3, #13, #3
  418f18:	e600      	b.n	418b1c <calendar_init+0x150>
    lv_style_set_pad_left(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418f1a:	2000      	movs	r0, #0
  418f1c:	4b2d      	ldr	r3, [pc, #180]	; (418fd4 <calendar_init+0x608>)
  418f1e:	4798      	blx	r3
  418f20:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f24:	3050      	adds	r0, #80	; 0x50
  418f26:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f2a:	da01      	bge.n	418f30 <calendar_init+0x564>
  418f2c:	2201      	movs	r2, #1
  418f2e:	e60e      	b.n	418b4e <calendar_init+0x182>
  418f30:	2000      	movs	r0, #0
  418f32:	4b28      	ldr	r3, [pc, #160]	; (418fd4 <calendar_init+0x608>)
  418f34:	4798      	blx	r3
  418f36:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f3a:	3050      	adds	r0, #80	; 0x50
  418f3c:	4b28      	ldr	r3, [pc, #160]	; (418fe0 <calendar_init+0x614>)
  418f3e:	fb83 2300 	smull	r2, r3, r3, r0
  418f42:	17c2      	asrs	r2, r0, #31
  418f44:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f48:	b212      	sxth	r2, r2
  418f4a:	e600      	b.n	418b4e <calendar_init+0x182>
  418f4c:	2000      	movs	r0, #0
  418f4e:	4b21      	ldr	r3, [pc, #132]	; (418fd4 <calendar_init+0x608>)
  418f50:	4798      	blx	r3
  418f52:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f56:	0040      	lsls	r0, r0, #1
  418f58:	3050      	adds	r0, #80	; 0x50
  418f5a:	4b21      	ldr	r3, [pc, #132]	; (418fe0 <calendar_init+0x614>)
  418f5c:	fb83 2300 	smull	r2, r3, r3, r0
  418f60:	17c2      	asrs	r2, r0, #31
  418f62:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f66:	b212      	sxth	r2, r2
  418f68:	e5f1      	b.n	418b4e <calendar_init+0x182>
    lv_style_set_pad_right(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418f6a:	2000      	movs	r0, #0
  418f6c:	4b19      	ldr	r3, [pc, #100]	; (418fd4 <calendar_init+0x608>)
  418f6e:	4798      	blx	r3
  418f70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f74:	3050      	adds	r0, #80	; 0x50
  418f76:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418f7a:	da01      	bge.n	418f80 <calendar_init+0x5b4>
  418f7c:	2201      	movs	r2, #1
  418f7e:	e5ff      	b.n	418b80 <calendar_init+0x1b4>
  418f80:	2000      	movs	r0, #0
  418f82:	4b14      	ldr	r3, [pc, #80]	; (418fd4 <calendar_init+0x608>)
  418f84:	4798      	blx	r3
  418f86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418f8a:	3050      	adds	r0, #80	; 0x50
  418f8c:	4b14      	ldr	r3, [pc, #80]	; (418fe0 <calendar_init+0x614>)
  418f8e:	fb83 2300 	smull	r2, r3, r3, r0
  418f92:	17c2      	asrs	r2, r0, #31
  418f94:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418f98:	b212      	sxth	r2, r2
  418f9a:	e5f1      	b.n	418b80 <calendar_init+0x1b4>
  418f9c:	2000      	movs	r0, #0
  418f9e:	4b0d      	ldr	r3, [pc, #52]	; (418fd4 <calendar_init+0x608>)
  418fa0:	4798      	blx	r3
  418fa2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418fa6:	0040      	lsls	r0, r0, #1
  418fa8:	3050      	adds	r0, #80	; 0x50
  418faa:	4b0d      	ldr	r3, [pc, #52]	; (418fe0 <calendar_init+0x614>)
  418fac:	fb83 2300 	smull	r2, r3, r3, r0
  418fb0:	17c2      	asrs	r2, r0, #31
  418fb2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  418fb6:	b212      	sxth	r2, r2
  418fb8:	e5e2      	b.n	418b80 <calendar_init+0x1b4>
    lv_style_set_pad_bottom(&styles->calendar_daynames, LV_STATE_DEFAULT, PAD_DEF);
  418fba:	2000      	movs	r0, #0
  418fbc:	4b05      	ldr	r3, [pc, #20]	; (418fd4 <calendar_init+0x608>)
  418fbe:	4798      	blx	r3
  418fc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418fc4:	3050      	adds	r0, #80	; 0x50
  418fc6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  418fca:	da0d      	bge.n	418fe8 <calendar_init+0x61c>
  418fcc:	2201      	movs	r2, #1
  418fce:	e5f0      	b.n	418bb2 <calendar_init+0x1e6>
  418fd0:	00409c81 	.word	0x00409c81
  418fd4:	0041468d 	.word	0x0041468d
  418fd8:	204147a8 	.word	0x204147a8
  418fdc:	004146ad 	.word	0x004146ad
  418fe0:	66666667 	.word	0x66666667
  418fe4:	004297c8 	.word	0x004297c8
  418fe8:	2000      	movs	r0, #0
  418fea:	4b5b      	ldr	r3, [pc, #364]	; (419158 <calendar_init+0x78c>)
  418fec:	4798      	blx	r3
  418fee:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  418ff2:	3050      	adds	r0, #80	; 0x50
  418ff4:	4b59      	ldr	r3, [pc, #356]	; (41915c <calendar_init+0x790>)
  418ff6:	fb83 2300 	smull	r2, r3, r3, r0
  418ffa:	17c2      	asrs	r2, r0, #31
  418ffc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419000:	b212      	sxth	r2, r2
  419002:	e5d6      	b.n	418bb2 <calendar_init+0x1e6>
  419004:	2000      	movs	r0, #0
  419006:	4b54      	ldr	r3, [pc, #336]	; (419158 <calendar_init+0x78c>)
  419008:	4798      	blx	r3
  41900a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41900e:	0040      	lsls	r0, r0, #1
  419010:	3050      	adds	r0, #80	; 0x50
  419012:	4b52      	ldr	r3, [pc, #328]	; (41915c <calendar_init+0x790>)
  419014:	fb83 2300 	smull	r2, r3, r3, r0
  419018:	17c2      	asrs	r2, r0, #31
  41901a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41901e:	b212      	sxth	r2, r2
  419020:	e5c7      	b.n	418bb2 <calendar_init+0x1e6>
    lv_style_set_radius(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(4));
  419022:	2000      	movs	r0, #0
  419024:	4b4c      	ldr	r3, [pc, #304]	; (419158 <calendar_init+0x78c>)
  419026:	4798      	blx	r3
  419028:	3014      	adds	r0, #20
  41902a:	0080      	lsls	r0, r0, #2
  41902c:	4b4b      	ldr	r3, [pc, #300]	; (41915c <calendar_init+0x790>)
  41902e:	fb83 2300 	smull	r2, r3, r3, r0
  419032:	17c2      	asrs	r2, r0, #31
  419034:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419038:	b212      	sxth	r2, r2
  41903a:	e5cf      	b.n	418bdc <calendar_init+0x210>
    lv_style_set_text_color(&styles->calendar_date_nums, LV_STATE_CHECKED,
  41903c:	4b48      	ldr	r3, [pc, #288]	; (419160 <calendar_init+0x794>)
  41903e:	881a      	ldrh	r2, [r3, #0]
  419040:	e5e6      	b.n	418c10 <calendar_init+0x244>
    lv_style_set_bg_opa(&styles->calendar_date_nums, LV_STATE_CHECKED, IS_LIGHT ? LV_OPA_20 : LV_OPA_40);
  419042:	2266      	movs	r2, #102	; 0x66
  419044:	e5f9      	b.n	418c3a <calendar_init+0x26e>
    lv_style_set_bg_color(&styles->calendar_date_nums, LV_STATE_DEFAULT,
  419046:	4b46      	ldr	r3, [pc, #280]	; (419160 <calendar_init+0x794>)
  419048:	881a      	ldrh	r2, [r3, #0]
  41904a:	e62a      	b.n	418ca2 <calendar_init+0x2d6>
    lv_style_set_pad_inner(&styles->calendar_date_nums, LV_STATE_DEFAULT, LV_DPX(3));
  41904c:	2000      	movs	r0, #0
  41904e:	4b42      	ldr	r3, [pc, #264]	; (419158 <calendar_init+0x78c>)
  419050:	4798      	blx	r3
  419052:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419056:	3050      	adds	r0, #80	; 0x50
  419058:	4b40      	ldr	r3, [pc, #256]	; (41915c <calendar_init+0x790>)
  41905a:	fb83 2300 	smull	r2, r3, r3, r0
  41905e:	17c2      	asrs	r2, r0, #31
  419060:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419064:	b212      	sxth	r2, r2
  419066:	e65a      	b.n	418d1e <calendar_init+0x352>
    lv_style_set_pad_left(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419068:	2000      	movs	r0, #0
  41906a:	4b3b      	ldr	r3, [pc, #236]	; (419158 <calendar_init+0x78c>)
  41906c:	4798      	blx	r3
  41906e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419072:	3050      	adds	r0, #80	; 0x50
  419074:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419078:	da01      	bge.n	41907e <calendar_init+0x6b2>
  41907a:	2201      	movs	r2, #1
  41907c:	e668      	b.n	418d50 <calendar_init+0x384>
  41907e:	2000      	movs	r0, #0
  419080:	4b35      	ldr	r3, [pc, #212]	; (419158 <calendar_init+0x78c>)
  419082:	4798      	blx	r3
  419084:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419088:	3050      	adds	r0, #80	; 0x50
  41908a:	4b34      	ldr	r3, [pc, #208]	; (41915c <calendar_init+0x790>)
  41908c:	fb83 2300 	smull	r2, r3, r3, r0
  419090:	17c2      	asrs	r2, r0, #31
  419092:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419096:	b212      	sxth	r2, r2
  419098:	e65a      	b.n	418d50 <calendar_init+0x384>
  41909a:	2000      	movs	r0, #0
  41909c:	4b2e      	ldr	r3, [pc, #184]	; (419158 <calendar_init+0x78c>)
  41909e:	4798      	blx	r3
  4190a0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4190a4:	0040      	lsls	r0, r0, #1
  4190a6:	3050      	adds	r0, #80	; 0x50
  4190a8:	4b2c      	ldr	r3, [pc, #176]	; (41915c <calendar_init+0x790>)
  4190aa:	fb83 2300 	smull	r2, r3, r3, r0
  4190ae:	17c2      	asrs	r2, r0, #31
  4190b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190b4:	b212      	sxth	r2, r2
  4190b6:	e64b      	b.n	418d50 <calendar_init+0x384>
    lv_style_set_pad_right(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  4190b8:	2000      	movs	r0, #0
  4190ba:	4b27      	ldr	r3, [pc, #156]	; (419158 <calendar_init+0x78c>)
  4190bc:	4798      	blx	r3
  4190be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4190c2:	3050      	adds	r0, #80	; 0x50
  4190c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4190c8:	da01      	bge.n	4190ce <calendar_init+0x702>
  4190ca:	2201      	movs	r2, #1
  4190cc:	e659      	b.n	418d82 <calendar_init+0x3b6>
  4190ce:	2000      	movs	r0, #0
  4190d0:	4b21      	ldr	r3, [pc, #132]	; (419158 <calendar_init+0x78c>)
  4190d2:	4798      	blx	r3
  4190d4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4190d8:	3050      	adds	r0, #80	; 0x50
  4190da:	4b20      	ldr	r3, [pc, #128]	; (41915c <calendar_init+0x790>)
  4190dc:	fb83 2300 	smull	r2, r3, r3, r0
  4190e0:	17c2      	asrs	r2, r0, #31
  4190e2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4190e6:	b212      	sxth	r2, r2
  4190e8:	e64b      	b.n	418d82 <calendar_init+0x3b6>
  4190ea:	2000      	movs	r0, #0
  4190ec:	4b1a      	ldr	r3, [pc, #104]	; (419158 <calendar_init+0x78c>)
  4190ee:	4798      	blx	r3
  4190f0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  4190f4:	0040      	lsls	r0, r0, #1
  4190f6:	3050      	adds	r0, #80	; 0x50
  4190f8:	4b18      	ldr	r3, [pc, #96]	; (41915c <calendar_init+0x790>)
  4190fa:	fb83 2300 	smull	r2, r3, r3, r0
  4190fe:	17c2      	asrs	r2, r0, #31
  419100:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419104:	b212      	sxth	r2, r2
  419106:	e63c      	b.n	418d82 <calendar_init+0x3b6>
    lv_style_set_pad_bottom(&styles->calendar_date_nums, LV_STATE_DEFAULT, PAD_DEF);
  419108:	2000      	movs	r0, #0
  41910a:	4b13      	ldr	r3, [pc, #76]	; (419158 <calendar_init+0x78c>)
  41910c:	4798      	blx	r3
  41910e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419112:	3050      	adds	r0, #80	; 0x50
  419114:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419118:	da01      	bge.n	41911e <calendar_init+0x752>
  41911a:	2201      	movs	r2, #1
  41911c:	e64a      	b.n	418db4 <calendar_init+0x3e8>
  41911e:	2000      	movs	r0, #0
  419120:	4b0d      	ldr	r3, [pc, #52]	; (419158 <calendar_init+0x78c>)
  419122:	4798      	blx	r3
  419124:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419128:	3050      	adds	r0, #80	; 0x50
  41912a:	4b0c      	ldr	r3, [pc, #48]	; (41915c <calendar_init+0x790>)
  41912c:	fb83 2300 	smull	r2, r3, r3, r0
  419130:	17c2      	asrs	r2, r0, #31
  419132:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419136:	b212      	sxth	r2, r2
  419138:	e63c      	b.n	418db4 <calendar_init+0x3e8>
  41913a:	2000      	movs	r0, #0
  41913c:	4b06      	ldr	r3, [pc, #24]	; (419158 <calendar_init+0x78c>)
  41913e:	4798      	blx	r3
  419140:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419144:	0040      	lsls	r0, r0, #1
  419146:	3050      	adds	r0, #80	; 0x50
  419148:	4b04      	ldr	r3, [pc, #16]	; (41915c <calendar_init+0x790>)
  41914a:	fb83 2300 	smull	r2, r3, r3, r0
  41914e:	17c2      	asrs	r2, r0, #31
  419150:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419154:	b212      	sxth	r2, r2
  419156:	e62d      	b.n	418db4 <calendar_init+0x3e8>
  419158:	0041468d 	.word	0x0041468d
  41915c:	66666667 	.word	0x66666667
  419160:	004297c8 	.word	0x004297c8

00419164 <cpicker_init>:
{
  419164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cpicker_bg);
  419166:	4c9a      	ldr	r4, [pc, #616]	; (4193d0 <cpicker_init+0x26c>)
  419168:	6820      	ldr	r0, [r4, #0]
  41916a:	303c      	adds	r0, #60	; 0x3c
  41916c:	4b99      	ldr	r3, [pc, #612]	; (4193d4 <cpicker_init+0x270>)
  41916e:	4798      	blx	r3
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  419170:	6824      	ldr	r4, [r4, #0]
  419172:	343c      	adds	r4, #60	; 0x3c
  419174:	2000      	movs	r0, #0
  419176:	4b98      	ldr	r3, [pc, #608]	; (4193d8 <cpicker_init+0x274>)
  419178:	4798      	blx	r3
  41917a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41917e:	0040      	lsls	r0, r0, #1
  419180:	3050      	adds	r0, #80	; 0x50
  419182:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419186:	f280 80b6 	bge.w	4192f6 <cpicker_init+0x192>
  41918a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
  41918c:	21c0      	movs	r1, #192	; 0xc0
  41918e:	4620      	mov	r0, r4
  419190:	4b92      	ldr	r3, [pc, #584]	; (4193dc <cpicker_init+0x278>)
  419192:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  419194:	4c8e      	ldr	r4, [pc, #568]	; (4193d0 <cpicker_init+0x26c>)
  419196:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419198:	22ff      	movs	r2, #255	; 0xff
  41919a:	212c      	movs	r1, #44	; 0x2c
  41919c:	303c      	adds	r0, #60	; 0x3c
  41919e:	4b90      	ldr	r3, [pc, #576]	; (4193e0 <cpicker_init+0x27c>)
  4191a0:	4798      	blx	r3
    lv_style_set_bg_color(&styles->cpicker_bg, LV_STATE_DEFAULT, COLOR_SCR);
  4191a2:	6820      	ldr	r0, [r4, #0]
  4191a4:	303c      	adds	r0, #60	; 0x3c
  4191a6:	4b8f      	ldr	r3, [pc, #572]	; (4193e4 <cpicker_init+0x280>)
  4191a8:	6a1b      	ldr	r3, [r3, #32]
  4191aa:	f013 0f02 	tst.w	r3, #2
  4191ae:	f000 80b1 	beq.w	419314 <cpicker_init+0x1b0>
  4191b2:	f04f 0207 	mov.w	r2, #7
  4191b6:	231d      	movs	r3, #29
  4191b8:	f363 02c7 	bfi	r2, r3, #3, #5
  4191bc:	231e      	movs	r3, #30
  4191be:	f363 220c 	bfi	r2, r3, #8, #5
  4191c2:	2303      	movs	r3, #3
  4191c4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4191c8:	2129      	movs	r1, #41	; 0x29
  4191ca:	4b87      	ldr	r3, [pc, #540]	; (4193e8 <cpicker_init+0x284>)
  4191cc:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  4191ce:	4b80      	ldr	r3, [pc, #512]	; (4193d0 <cpicker_init+0x26c>)
  4191d0:	681c      	ldr	r4, [r3, #0]
  4191d2:	343c      	adds	r4, #60	; 0x3c
  4191d4:	2000      	movs	r0, #0
  4191d6:	4b80      	ldr	r3, [pc, #512]	; (4193d8 <cpicker_init+0x274>)
  4191d8:	4798      	blx	r3
  4191da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4191de:	0080      	lsls	r0, r0, #2
  4191e0:	3050      	adds	r0, #80	; 0x50
  4191e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4191e6:	f280 80a3 	bge.w	419330 <cpicker_init+0x1cc>
  4191ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  4191ec:	2114      	movs	r1, #20
  4191ee:	4620      	mov	r0, r4
  4191f0:	4e7a      	ldr	r6, [pc, #488]	; (4193dc <cpicker_init+0x278>)
  4191f2:	47b0      	blx	r6
    lv_style_set_radius(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  4191f4:	4c76      	ldr	r4, [pc, #472]	; (4193d0 <cpicker_init+0x26c>)
  4191f6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4191f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
  4191fc:	2101      	movs	r1, #1
  4191fe:	303c      	adds	r0, #60	; 0x3c
  419200:	47b0      	blx	r6
    style_init_reset(&styles->cpicker_indic);
  419202:	6820      	ldr	r0, [r4, #0]
  419204:	3040      	adds	r0, #64	; 0x40
  419206:	4b73      	ldr	r3, [pc, #460]	; (4193d4 <cpicker_init+0x270>)
  419208:	4798      	blx	r3
    lv_style_set_radius(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41920a:	6820      	ldr	r0, [r4, #0]
  41920c:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419210:	2101      	movs	r1, #1
  419212:	3040      	adds	r0, #64	; 0x40
  419214:	47b0      	blx	r6
    lv_style_set_bg_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419216:	6820      	ldr	r0, [r4, #0]
  419218:	4f74      	ldr	r7, [pc, #464]	; (4193ec <cpicker_init+0x288>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41921a:	883a      	ldrh	r2, [r7, #0]
  41921c:	2129      	movs	r1, #41	; 0x29
  41921e:	3040      	adds	r0, #64	; 0x40
  419220:	4d71      	ldr	r5, [pc, #452]	; (4193e8 <cpicker_init+0x284>)
  419222:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  419224:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419226:	22ff      	movs	r2, #255	; 0xff
  419228:	212c      	movs	r1, #44	; 0x2c
  41922a:	3040      	adds	r0, #64	; 0x40
  41922c:	4b6c      	ldr	r3, [pc, #432]	; (4193e0 <cpicker_init+0x27c>)
  41922e:	4798      	blx	r3
    lv_style_set_border_width(&styles->cpicker_indic, LV_STATE_DEFAULT, 2);
  419230:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419232:	2202      	movs	r2, #2
  419234:	2130      	movs	r1, #48	; 0x30
  419236:	3040      	adds	r0, #64	; 0x40
  419238:	47b0      	blx	r6
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_COLOR_GRAY);
  41923a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41923c:	88ba      	ldrh	r2, [r7, #4]
  41923e:	2139      	movs	r1, #57	; 0x39
  419240:	3040      	adds	r0, #64	; 0x40
  419242:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_FOCUSED, theme.color_primary);
  419244:	6820      	ldr	r0, [r4, #0]
  419246:	4e67      	ldr	r6, [pc, #412]	; (4193e4 <cpicker_init+0x280>)
  419248:	89b2      	ldrh	r2, [r6, #12]
  41924a:	f240 2139 	movw	r1, #569	; 0x239
  41924e:	3040      	adds	r0, #64	; 0x40
  419250:	47a8      	blx	r5
    lv_style_set_border_color(&styles->cpicker_indic, LV_STATE_EDITED, theme.color_secondary);
  419252:	6820      	ldr	r0, [r4, #0]
  419254:	89f2      	ldrh	r2, [r6, #14]
  419256:	f240 4139 	movw	r1, #1081	; 0x439
  41925a:	3040      	adds	r0, #64	; 0x40
  41925c:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41925e:	6824      	ldr	r4, [r4, #0]
  419260:	3440      	adds	r4, #64	; 0x40
  419262:	2000      	movs	r0, #0
  419264:	4b5c      	ldr	r3, [pc, #368]	; (4193d8 <cpicker_init+0x274>)
  419266:	4798      	blx	r3
  419268:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  41926c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419270:	3050      	adds	r0, #80	; 0x50
  419272:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419276:	da6a      	bge.n	41934e <cpicker_init+0x1ea>
  419278:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41927a:	2112      	movs	r1, #18
  41927c:	4620      	mov	r0, r4
  41927e:	4b57      	ldr	r3, [pc, #348]	; (4193dc <cpicker_init+0x278>)
  419280:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  419282:	4b53      	ldr	r3, [pc, #332]	; (4193d0 <cpicker_init+0x26c>)
  419284:	681c      	ldr	r4, [r3, #0]
  419286:	3440      	adds	r4, #64	; 0x40
  419288:	2000      	movs	r0, #0
  41928a:	4b53      	ldr	r3, [pc, #332]	; (4193d8 <cpicker_init+0x274>)
  41928c:	4798      	blx	r3
  41928e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  419292:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  419296:	3050      	adds	r0, #80	; 0x50
  419298:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41929c:	da67      	bge.n	41936e <cpicker_init+0x20a>
  41929e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4192a0:	2113      	movs	r1, #19
  4192a2:	4620      	mov	r0, r4
  4192a4:	4b4d      	ldr	r3, [pc, #308]	; (4193dc <cpicker_init+0x278>)
  4192a6:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  4192a8:	4b49      	ldr	r3, [pc, #292]	; (4193d0 <cpicker_init+0x26c>)
  4192aa:	681c      	ldr	r4, [r3, #0]
  4192ac:	3440      	adds	r4, #64	; 0x40
  4192ae:	2000      	movs	r0, #0
  4192b0:	4b49      	ldr	r3, [pc, #292]	; (4193d8 <cpicker_init+0x274>)
  4192b2:	4798      	blx	r3
  4192b4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  4192b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4192bc:	3050      	adds	r0, #80	; 0x50
  4192be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192c2:	da64      	bge.n	41938e <cpicker_init+0x22a>
  4192c4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4192c6:	2110      	movs	r1, #16
  4192c8:	4620      	mov	r0, r4
  4192ca:	4b44      	ldr	r3, [pc, #272]	; (4193dc <cpicker_init+0x278>)
  4192cc:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  4192ce:	4b40      	ldr	r3, [pc, #256]	; (4193d0 <cpicker_init+0x26c>)
  4192d0:	681c      	ldr	r4, [r3, #0]
  4192d2:	3440      	adds	r4, #64	; 0x40
  4192d4:	2000      	movs	r0, #0
  4192d6:	4b40      	ldr	r3, [pc, #256]	; (4193d8 <cpicker_init+0x274>)
  4192d8:	4798      	blx	r3
  4192da:	eb00 0340 	add.w	r3, r0, r0, lsl #1
  4192de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
  4192e2:	3050      	adds	r0, #80	; 0x50
  4192e4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4192e8:	da61      	bge.n	4193ae <cpicker_init+0x24a>
  4192ea:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4192ec:	2111      	movs	r1, #17
  4192ee:	4620      	mov	r0, r4
  4192f0:	4b3a      	ldr	r3, [pc, #232]	; (4193dc <cpicker_init+0x278>)
  4192f2:	4798      	blx	r3
  4192f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_scale_width(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(30));
  4192f6:	2000      	movs	r0, #0
  4192f8:	4b37      	ldr	r3, [pc, #220]	; (4193d8 <cpicker_init+0x274>)
  4192fa:	4798      	blx	r3
  4192fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  419300:	0040      	lsls	r0, r0, #1
  419302:	3050      	adds	r0, #80	; 0x50
  419304:	4b3a      	ldr	r3, [pc, #232]	; (4193f0 <cpicker_init+0x28c>)
  419306:	fb83 2300 	smull	r2, r3, r3, r0
  41930a:	17c2      	asrs	r2, r0, #31
  41930c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419310:	b212      	sxth	r2, r2
  419312:	e73b      	b.n	41918c <cpicker_init+0x28>
  419314:	2302      	movs	r3, #2
  419316:	f04f 0200 	mov.w	r2, #0
  41931a:	f363 0202 	bfi	r2, r3, #0, #3
  41931e:	2108      	movs	r1, #8
  419320:	f361 02c7 	bfi	r2, r1, #3, #5
  419324:	210b      	movs	r1, #11
  419326:	f361 220c 	bfi	r2, r1, #8, #5
  41932a:	f363 324f 	bfi	r2, r3, #13, #3
  41932e:	e74b      	b.n	4191c8 <cpicker_init+0x64>
    lv_style_set_pad_inner(&styles->cpicker_bg, LV_STATE_DEFAULT, LV_DPX(20));
  419330:	2000      	movs	r0, #0
  419332:	4b29      	ldr	r3, [pc, #164]	; (4193d8 <cpicker_init+0x274>)
  419334:	4798      	blx	r3
  419336:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41933a:	0080      	lsls	r0, r0, #2
  41933c:	3050      	adds	r0, #80	; 0x50
  41933e:	4b2c      	ldr	r3, [pc, #176]	; (4193f0 <cpicker_init+0x28c>)
  419340:	fb83 2300 	smull	r2, r3, r3, r0
  419344:	17c2      	asrs	r2, r0, #31
  419346:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41934a:	b212      	sxth	r2, r2
  41934c:	e74e      	b.n	4191ec <cpicker_init+0x88>
    lv_style_set_pad_left(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41934e:	2000      	movs	r0, #0
  419350:	4b21      	ldr	r3, [pc, #132]	; (4193d8 <cpicker_init+0x274>)
  419352:	4798      	blx	r3
  419354:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419358:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41935c:	3050      	adds	r0, #80	; 0x50
  41935e:	4b24      	ldr	r3, [pc, #144]	; (4193f0 <cpicker_init+0x28c>)
  419360:	fb83 2300 	smull	r2, r3, r3, r0
  419364:	17c2      	asrs	r2, r0, #31
  419366:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41936a:	b212      	sxth	r2, r2
  41936c:	e785      	b.n	41927a <cpicker_init+0x116>
    lv_style_set_pad_right(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41936e:	2000      	movs	r0, #0
  419370:	4b19      	ldr	r3, [pc, #100]	; (4193d8 <cpicker_init+0x274>)
  419372:	4798      	blx	r3
  419374:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419378:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41937c:	3050      	adds	r0, #80	; 0x50
  41937e:	4b1c      	ldr	r3, [pc, #112]	; (4193f0 <cpicker_init+0x28c>)
  419380:	fb83 2300 	smull	r2, r3, r3, r0
  419384:	17c2      	asrs	r2, r0, #31
  419386:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41938a:	b212      	sxth	r2, r2
  41938c:	e788      	b.n	4192a0 <cpicker_init+0x13c>
    lv_style_set_pad_top(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  41938e:	2000      	movs	r0, #0
  419390:	4b11      	ldr	r3, [pc, #68]	; (4193d8 <cpicker_init+0x274>)
  419392:	4798      	blx	r3
  419394:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  419398:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  41939c:	3050      	adds	r0, #80	; 0x50
  41939e:	4b14      	ldr	r3, [pc, #80]	; (4193f0 <cpicker_init+0x28c>)
  4193a0:	fb83 2300 	smull	r2, r3, r3, r0
  4193a4:	17c2      	asrs	r2, r0, #31
  4193a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4193aa:	b212      	sxth	r2, r2
  4193ac:	e78b      	b.n	4192c6 <cpicker_init+0x162>
    lv_style_set_pad_bottom(&styles->cpicker_indic, LV_STATE_DEFAULT, LV_DPX(13));
  4193ae:	2000      	movs	r0, #0
  4193b0:	4b09      	ldr	r3, [pc, #36]	; (4193d8 <cpicker_init+0x274>)
  4193b2:	4798      	blx	r3
  4193b4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  4193b8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
  4193bc:	3050      	adds	r0, #80	; 0x50
  4193be:	4b0c      	ldr	r3, [pc, #48]	; (4193f0 <cpicker_init+0x28c>)
  4193c0:	fb83 2300 	smull	r2, r3, r3, r0
  4193c4:	17c2      	asrs	r2, r0, #31
  4193c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4193ca:	b212      	sxth	r2, r2
  4193cc:	e78e      	b.n	4192ec <cpicker_init+0x188>
  4193ce:	bf00      	nop
  4193d0:	204147a8 	.word	0x204147a8
  4193d4:	00417885 	.word	0x00417885
  4193d8:	0041468d 	.word	0x0041468d
  4193dc:	00409c81 	.word	0x00409c81
  4193e0:	00409fa1 	.word	0x00409fa1
  4193e4:	204147ac 	.word	0x204147ac
  4193e8:	00409e11 	.word	0x00409e11
  4193ec:	004297c8 	.word	0x004297c8
  4193f0:	66666667 	.word	0x66666667

004193f4 <checkbox_init>:
{
  4193f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->cb_bg);
  4193f6:	4cb5      	ldr	r4, [pc, #724]	; (4196cc <checkbox_init+0x2d8>)
  4193f8:	6820      	ldr	r0, [r4, #0]
  4193fa:	3050      	adds	r0, #80	; 0x50
  4193fc:	4bb4      	ldr	r3, [pc, #720]	; (4196d0 <checkbox_init+0x2dc>)
  4193fe:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  419400:	6824      	ldr	r4, [r4, #0]
  419402:	3450      	adds	r4, #80	; 0x50
  419404:	2000      	movs	r0, #0
  419406:	4bb3      	ldr	r3, [pc, #716]	; (4196d4 <checkbox_init+0x2e0>)
  419408:	4798      	blx	r3
  41940a:	3014      	adds	r0, #20
  41940c:	0080      	lsls	r0, r0, #2
  41940e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419412:	f280 80e1 	bge.w	4195d8 <checkbox_init+0x1e4>
  419416:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419418:	2101      	movs	r1, #1
  41941a:	4620      	mov	r0, r4
  41941c:	4bae      	ldr	r3, [pc, #696]	; (4196d8 <checkbox_init+0x2e4>)
  41941e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419420:	4baa      	ldr	r3, [pc, #680]	; (4196cc <checkbox_init+0x2d8>)
  419422:	681c      	ldr	r4, [r3, #0]
  419424:	3450      	adds	r4, #80	; 0x50
  419426:	2000      	movs	r0, #0
  419428:	4baa      	ldr	r3, [pc, #680]	; (4196d4 <checkbox_init+0x2e0>)
  41942a:	4798      	blx	r3
  41942c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419430:	0043      	lsls	r3, r0, #1
  419432:	3350      	adds	r3, #80	; 0x50
  419434:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  419438:	f280 80db 	bge.w	4195f2 <checkbox_init+0x1fe>
  41943c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41943e:	2114      	movs	r1, #20
  419440:	4620      	mov	r0, r4
  419442:	4ba5      	ldr	r3, [pc, #660]	; (4196d8 <checkbox_init+0x2e4>)
  419444:	4798      	blx	r3
    lv_style_set_outline_color(&styles->cb_bg, LV_STATE_DEFAULT, theme.color_primary);
  419446:	4ca1      	ldr	r4, [pc, #644]	; (4196cc <checkbox_init+0x2d8>)
  419448:	6820      	ldr	r0, [r4, #0]
  41944a:	4ea4      	ldr	r6, [pc, #656]	; (4196dc <checkbox_init+0x2e8>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41944c:	89b2      	ldrh	r2, [r6, #12]
  41944e:	2149      	movs	r1, #73	; 0x49
  419450:	3050      	adds	r0, #80	; 0x50
  419452:	4ba3      	ldr	r3, [pc, #652]	; (4196e0 <checkbox_init+0x2ec>)
  419454:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  419456:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  419458:	2200      	movs	r2, #0
  41945a:	214c      	movs	r1, #76	; 0x4c
  41945c:	3050      	adds	r0, #80	; 0x50
  41945e:	4da1      	ldr	r5, [pc, #644]	; (4196e4 <checkbox_init+0x2f0>)
  419460:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->cb_bg, LV_STATE_FOCUSED, LV_OPA_50);
  419462:	6820      	ldr	r0, [r4, #0]
  419464:	227f      	movs	r2, #127	; 0x7f
  419466:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41946a:	3050      	adds	r0, #80	; 0x50
  41946c:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41946e:	6824      	ldr	r4, [r4, #0]
  419470:	3450      	adds	r4, #80	; 0x50
  419472:	6a33      	ldr	r3, [r6, #32]
  419474:	f013 0f20 	tst.w	r3, #32
  419478:	f000 80ca 	beq.w	419610 <checkbox_init+0x21c>
  41947c:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41947e:	2140      	movs	r1, #64	; 0x40
  419480:	4620      	mov	r0, r4
  419482:	4b95      	ldr	r3, [pc, #596]	; (4196d8 <checkbox_init+0x2e4>)
  419484:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  419486:	4b91      	ldr	r3, [pc, #580]	; (4196cc <checkbox_init+0x2d8>)
  419488:	681c      	ldr	r4, [r3, #0]
  41948a:	3450      	adds	r4, #80	; 0x50
  41948c:	2000      	movs	r0, #0
  41948e:	4b91      	ldr	r3, [pc, #580]	; (4196d4 <checkbox_init+0x2e0>)
  419490:	4798      	blx	r3
  419492:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419496:	0043      	lsls	r3, r0, #1
  419498:	3350      	adds	r3, #80	; 0x50
  41949a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
  41949e:	f280 80ce 	bge.w	41963e <checkbox_init+0x24a>
  4194a2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  4194a4:	2141      	movs	r1, #65	; 0x41
  4194a6:	4620      	mov	r0, r4
  4194a8:	4d8b      	ldr	r5, [pc, #556]	; (4196d8 <checkbox_init+0x2e4>)
  4194aa:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->cb_bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  4194ac:	4c87      	ldr	r4, [pc, #540]	; (4196cc <checkbox_init+0x2d8>)
  4194ae:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  4194b0:	2200      	movs	r2, #0
  4194b2:	21b0      	movs	r1, #176	; 0xb0
  4194b4:	3050      	adds	r0, #80	; 0x50
  4194b6:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->cb_bg, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  4194b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  4194ba:	224c      	movs	r2, #76	; 0x4c
  4194bc:	21b7      	movs	r1, #183	; 0xb7
  4194be:	3050      	adds	r0, #80	; 0x50
  4194c0:	47a8      	blx	r5
    style_init_reset(&styles->cb_bullet);
  4194c2:	6820      	ldr	r0, [r4, #0]
  4194c4:	3054      	adds	r0, #84	; 0x54
  4194c6:	4b82      	ldr	r3, [pc, #520]	; (4196d0 <checkbox_init+0x2dc>)
  4194c8:	4798      	blx	r3
    lv_style_set_outline_opa(&styles->cb_bullet, LV_STATE_FOCUSED, LV_OPA_TRANSP);
  4194ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  4194cc:	2200      	movs	r2, #0
  4194ce:	f44f 7113 	mov.w	r1, #588	; 0x24c
  4194d2:	3054      	adds	r0, #84	; 0x54
  4194d4:	4b83      	ldr	r3, [pc, #524]	; (4196e4 <checkbox_init+0x2f0>)
  4194d6:	4798      	blx	r3
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  4194d8:	6824      	ldr	r4, [r4, #0]
  4194da:	3454      	adds	r4, #84	; 0x54
  4194dc:	2000      	movs	r0, #0
  4194de:	4b7d      	ldr	r3, [pc, #500]	; (4196d4 <checkbox_init+0x2e0>)
  4194e0:	4798      	blx	r3
  4194e2:	3014      	adds	r0, #20
  4194e4:	0080      	lsls	r0, r0, #2
  4194e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4194ea:	f280 80b7 	bge.w	41965c <checkbox_init+0x268>
  4194ee:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  4194f0:	2101      	movs	r1, #1
  4194f2:	4620      	mov	r0, r4
  4194f4:	4e78      	ldr	r6, [pc, #480]	; (4196d8 <checkbox_init+0x2e4>)
  4194f6:	47b0      	blx	r6
    lv_style_set_pattern_image(&styles->cb_bullet, LV_STATE_CHECKED, LV_SYMBOL_OK);
  4194f8:	4c74      	ldr	r4, [pc, #464]	; (4196cc <checkbox_init+0x2d8>)
  4194fa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
  4194fc:	4a7a      	ldr	r2, [pc, #488]	; (4196e8 <checkbox_init+0x2f4>)
  4194fe:	f44f 71b7 	mov.w	r1, #366	; 0x16e
  419502:	3054      	adds	r0, #84	; 0x54
  419504:	4d79      	ldr	r5, [pc, #484]	; (4196ec <checkbox_init+0x2f8>)
  419506:	47a8      	blx	r5
    lv_style_set_pattern_recolor(&styles->cb_bullet, LV_STATE_CHECKED, LV_COLOR_WHITE);
  419508:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_RECOLOR, pattern_recolor, lv_color_t, _color, nonscalar)
  41950a:	4b79      	ldr	r3, [pc, #484]	; (4196f0 <checkbox_init+0x2fc>)
  41950c:	881a      	ldrh	r2, [r3, #0]
  41950e:	f240 1169 	movw	r1, #361	; 0x169
  419512:	3054      	adds	r0, #84	; 0x54
  419514:	4b72      	ldr	r3, [pc, #456]	; (4196e0 <checkbox_init+0x2ec>)
  419516:	4798      	blx	r3
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_DEFAULT, LV_OPA_TRANSP);
  419518:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_OPA, pattern_opa, lv_opa_t, _opa, scalar)
  41951a:	2200      	movs	r2, #0
  41951c:	216c      	movs	r1, #108	; 0x6c
  41951e:	3054      	adds	r0, #84	; 0x54
  419520:	4f70      	ldr	r7, [pc, #448]	; (4196e4 <checkbox_init+0x2f0>)
  419522:	47b8      	blx	r7
    lv_style_set_pattern_opa(&styles->cb_bullet, LV_STATE_CHECKED, LV_OPA_COVER);
  419524:	6820      	ldr	r0, [r4, #0]
  419526:	22ff      	movs	r2, #255	; 0xff
  419528:	f44f 71b6 	mov.w	r1, #364	; 0x16c
  41952c:	3054      	adds	r0, #84	; 0x54
  41952e:	47b8      	blx	r7
    lv_style_set_transition_prop_3(&styles->cb_bullet, LV_STATE_DEFAULT, LV_STYLE_PATTERN_OPA);
  419530:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_3, transition_prop_3, lv_style_int_t, _int, scalar)
  419532:	226c      	movs	r2, #108	; 0x6c
  419534:	21b4      	movs	r1, #180	; 0xb4
  419536:	3054      	adds	r0, #84	; 0x54
  419538:	47b0      	blx	r6
    lv_style_set_text_font(&styles->cb_bullet, LV_STATE_CHECKED, theme.font_small);
  41953a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41953c:	4b67      	ldr	r3, [pc, #412]	; (4196dc <checkbox_init+0x2e8>)
  41953e:	691a      	ldr	r2, [r3, #16]
  419540:	f248 118e 	movw	r1, #33166	; 0x818e
  419544:	3054      	adds	r0, #84	; 0x54
  419546:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419548:	6824      	ldr	r4, [r4, #0]
  41954a:	3454      	adds	r4, #84	; 0x54
  41954c:	2000      	movs	r0, #0
  41954e:	4b61      	ldr	r3, [pc, #388]	; (4196d4 <checkbox_init+0x2e0>)
  419550:	4798      	blx	r3
  419552:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419556:	3050      	adds	r0, #80	; 0x50
  419558:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41955c:	f280 808b 	bge.w	419676 <checkbox_init+0x282>
  419560:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419562:	2112      	movs	r1, #18
  419564:	4620      	mov	r0, r4
  419566:	4b5c      	ldr	r3, [pc, #368]	; (4196d8 <checkbox_init+0x2e4>)
  419568:	4798      	blx	r3
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41956a:	4b58      	ldr	r3, [pc, #352]	; (4196cc <checkbox_init+0x2d8>)
  41956c:	681c      	ldr	r4, [r3, #0]
  41956e:	3454      	adds	r4, #84	; 0x54
  419570:	2000      	movs	r0, #0
  419572:	4b58      	ldr	r3, [pc, #352]	; (4196d4 <checkbox_init+0x2e0>)
  419574:	4798      	blx	r3
  419576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41957a:	3050      	adds	r0, #80	; 0x50
  41957c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419580:	f280 8087 	bge.w	419692 <checkbox_init+0x29e>
  419584:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419586:	2113      	movs	r1, #19
  419588:	4620      	mov	r0, r4
  41958a:	4b53      	ldr	r3, [pc, #332]	; (4196d8 <checkbox_init+0x2e4>)
  41958c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  41958e:	4b4f      	ldr	r3, [pc, #316]	; (4196cc <checkbox_init+0x2d8>)
  419590:	681c      	ldr	r4, [r3, #0]
  419592:	3454      	adds	r4, #84	; 0x54
  419594:	2000      	movs	r0, #0
  419596:	4b4f      	ldr	r3, [pc, #316]	; (4196d4 <checkbox_init+0x2e0>)
  419598:	4798      	blx	r3
  41959a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41959e:	3050      	adds	r0, #80	; 0x50
  4195a0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4195a4:	f280 8083 	bge.w	4196ae <checkbox_init+0x2ba>
  4195a8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4195aa:	2110      	movs	r1, #16
  4195ac:	4620      	mov	r0, r4
  4195ae:	4b4a      	ldr	r3, [pc, #296]	; (4196d8 <checkbox_init+0x2e4>)
  4195b0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  4195b2:	4b46      	ldr	r3, [pc, #280]	; (4196cc <checkbox_init+0x2d8>)
  4195b4:	681c      	ldr	r4, [r3, #0]
  4195b6:	3454      	adds	r4, #84	; 0x54
  4195b8:	2000      	movs	r0, #0
  4195ba:	4b46      	ldr	r3, [pc, #280]	; (4196d4 <checkbox_init+0x2e0>)
  4195bc:	4798      	blx	r3
  4195be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4195c2:	3050      	adds	r0, #80	; 0x50
  4195c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4195c8:	f280 8096 	bge.w	4196f8 <checkbox_init+0x304>
  4195cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  4195ce:	2111      	movs	r1, #17
  4195d0:	4620      	mov	r0, r4
  4195d2:	4b41      	ldr	r3, [pc, #260]	; (4196d8 <checkbox_init+0x2e4>)
  4195d4:	4798      	blx	r3
  4195d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    lv_style_set_radius(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  4195d8:	2000      	movs	r0, #0
  4195da:	4b3e      	ldr	r3, [pc, #248]	; (4196d4 <checkbox_init+0x2e0>)
  4195dc:	4798      	blx	r3
  4195de:	3014      	adds	r0, #20
  4195e0:	0080      	lsls	r0, r0, #2
  4195e2:	4b44      	ldr	r3, [pc, #272]	; (4196f4 <checkbox_init+0x300>)
  4195e4:	fb83 2300 	smull	r2, r3, r3, r0
  4195e8:	17c2      	asrs	r2, r0, #31
  4195ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4195ee:	b212      	sxth	r2, r2
  4195f0:	e712      	b.n	419418 <checkbox_init+0x24>
    lv_style_set_pad_inner(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  4195f2:	2000      	movs	r0, #0
  4195f4:	4b37      	ldr	r3, [pc, #220]	; (4196d4 <checkbox_init+0x2e0>)
  4195f6:	4798      	blx	r3
  4195f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4195fc:	0043      	lsls	r3, r0, #1
  4195fe:	3350      	adds	r3, #80	; 0x50
  419600:	493c      	ldr	r1, [pc, #240]	; (4196f4 <checkbox_init+0x300>)
  419602:	fb81 2103 	smull	r2, r1, r1, r3
  419606:	17da      	asrs	r2, r3, #31
  419608:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  41960c:	b212      	sxth	r2, r2
  41960e:	e716      	b.n	41943e <checkbox_init+0x4a>
    lv_style_set_outline_width(&styles->cb_bg, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  419610:	2000      	movs	r0, #0
  419612:	4b30      	ldr	r3, [pc, #192]	; (4196d4 <checkbox_init+0x2e0>)
  419614:	4798      	blx	r3
  419616:	3028      	adds	r0, #40	; 0x28
  419618:	0040      	lsls	r0, r0, #1
  41961a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41961e:	da01      	bge.n	419624 <checkbox_init+0x230>
  419620:	2201      	movs	r2, #1
  419622:	e72c      	b.n	41947e <checkbox_init+0x8a>
  419624:	2000      	movs	r0, #0
  419626:	4b2b      	ldr	r3, [pc, #172]	; (4196d4 <checkbox_init+0x2e0>)
  419628:	4798      	blx	r3
  41962a:	3028      	adds	r0, #40	; 0x28
  41962c:	0040      	lsls	r0, r0, #1
  41962e:	4b31      	ldr	r3, [pc, #196]	; (4196f4 <checkbox_init+0x300>)
  419630:	fb83 2300 	smull	r2, r3, r3, r0
  419634:	17c2      	asrs	r2, r0, #31
  419636:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41963a:	b212      	sxth	r2, r2
  41963c:	e71f      	b.n	41947e <checkbox_init+0x8a>
    lv_style_set_outline_pad(&styles->cb_bg, LV_STATE_DEFAULT, LV_DPX(10));
  41963e:	2000      	movs	r0, #0
  419640:	4b24      	ldr	r3, [pc, #144]	; (4196d4 <checkbox_init+0x2e0>)
  419642:	4798      	blx	r3
  419644:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419648:	0043      	lsls	r3, r0, #1
  41964a:	3350      	adds	r3, #80	; 0x50
  41964c:	4929      	ldr	r1, [pc, #164]	; (4196f4 <checkbox_init+0x300>)
  41964e:	fb81 2103 	smull	r2, r1, r1, r3
  419652:	17da      	asrs	r2, r3, #31
  419654:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
  419658:	b212      	sxth	r2, r2
  41965a:	e723      	b.n	4194a4 <checkbox_init+0xb0>
    lv_style_set_radius(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(4));
  41965c:	2000      	movs	r0, #0
  41965e:	4b1d      	ldr	r3, [pc, #116]	; (4196d4 <checkbox_init+0x2e0>)
  419660:	4798      	blx	r3
  419662:	3014      	adds	r0, #20
  419664:	0080      	lsls	r0, r0, #2
  419666:	4b23      	ldr	r3, [pc, #140]	; (4196f4 <checkbox_init+0x300>)
  419668:	fb83 2300 	smull	r2, r3, r3, r0
  41966c:	17c2      	asrs	r2, r0, #31
  41966e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419672:	b212      	sxth	r2, r2
  419674:	e73c      	b.n	4194f0 <checkbox_init+0xfc>
    lv_style_set_pad_left(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419676:	2000      	movs	r0, #0
  419678:	4b16      	ldr	r3, [pc, #88]	; (4196d4 <checkbox_init+0x2e0>)
  41967a:	4798      	blx	r3
  41967c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419680:	3050      	adds	r0, #80	; 0x50
  419682:	4b1c      	ldr	r3, [pc, #112]	; (4196f4 <checkbox_init+0x300>)
  419684:	fb83 2300 	smull	r2, r3, r3, r0
  419688:	17c2      	asrs	r2, r0, #31
  41968a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41968e:	b212      	sxth	r2, r2
  419690:	e767      	b.n	419562 <checkbox_init+0x16e>
    lv_style_set_pad_right(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  419692:	2000      	movs	r0, #0
  419694:	4b0f      	ldr	r3, [pc, #60]	; (4196d4 <checkbox_init+0x2e0>)
  419696:	4798      	blx	r3
  419698:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  41969c:	3050      	adds	r0, #80	; 0x50
  41969e:	4b15      	ldr	r3, [pc, #84]	; (4196f4 <checkbox_init+0x300>)
  4196a0:	fb83 2300 	smull	r2, r3, r3, r0
  4196a4:	17c2      	asrs	r2, r0, #31
  4196a6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4196aa:	b212      	sxth	r2, r2
  4196ac:	e76b      	b.n	419586 <checkbox_init+0x192>
    lv_style_set_pad_top(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  4196ae:	2000      	movs	r0, #0
  4196b0:	4b08      	ldr	r3, [pc, #32]	; (4196d4 <checkbox_init+0x2e0>)
  4196b2:	4798      	blx	r3
  4196b4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4196b8:	3050      	adds	r0, #80	; 0x50
  4196ba:	4b0e      	ldr	r3, [pc, #56]	; (4196f4 <checkbox_init+0x300>)
  4196bc:	fb83 2300 	smull	r2, r3, r3, r0
  4196c0:	17c2      	asrs	r2, r0, #31
  4196c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4196c6:	b212      	sxth	r2, r2
  4196c8:	e76f      	b.n	4195aa <checkbox_init+0x1b6>
  4196ca:	bf00      	nop
  4196cc:	204147a8 	.word	0x204147a8
  4196d0:	00417885 	.word	0x00417885
  4196d4:	0041468d 	.word	0x0041468d
  4196d8:	00409c81 	.word	0x00409c81
  4196dc:	204147ac 	.word	0x204147ac
  4196e0:	00409e11 	.word	0x00409e11
  4196e4:	00409fa1 	.word	0x00409fa1
  4196e8:	004297d4 	.word	0x004297d4
  4196ec:	0040a131 	.word	0x0040a131
  4196f0:	004297c8 	.word	0x004297c8
  4196f4:	66666667 	.word	0x66666667
    lv_style_set_pad_bottom(&styles->cb_bullet, LV_STATE_DEFAULT, LV_DPX(3));
  4196f8:	2000      	movs	r0, #0
  4196fa:	4b06      	ldr	r3, [pc, #24]	; (419714 <checkbox_init+0x320>)
  4196fc:	4798      	blx	r3
  4196fe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419702:	3050      	adds	r0, #80	; 0x50
  419704:	4b04      	ldr	r3, [pc, #16]	; (419718 <checkbox_init+0x324>)
  419706:	fb83 2300 	smull	r2, r3, r3, r0
  41970a:	17c2      	asrs	r2, r0, #31
  41970c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419710:	b212      	sxth	r2, r2
  419712:	e75c      	b.n	4195ce <checkbox_init+0x1da>
  419714:	0041468d 	.word	0x0041468d
  419718:	66666667 	.word	0x66666667

0041971c <keyboard_init>:
{
  41971c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->kb_bg);
  41971e:	4c76      	ldr	r4, [pc, #472]	; (4198f8 <keyboard_init+0x1dc>)
  419720:	6820      	ldr	r0, [r4, #0]
  419722:	306c      	adds	r0, #108	; 0x6c
  419724:	4b75      	ldr	r3, [pc, #468]	; (4198fc <keyboard_init+0x1e0>)
  419726:	4798      	blx	r3
    lv_style_set_radius(&styles->kb_bg, LV_STATE_DEFAULT, 0);
  419728:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41972a:	2200      	movs	r2, #0
  41972c:	2101      	movs	r1, #1
  41972e:	306c      	adds	r0, #108	; 0x6c
  419730:	4b73      	ldr	r3, [pc, #460]	; (419900 <keyboard_init+0x1e4>)
  419732:	4798      	blx	r3
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  419734:	6824      	ldr	r4, [r4, #0]
  419736:	346c      	adds	r4, #108	; 0x6c
  419738:	2000      	movs	r0, #0
  41973a:	4b72      	ldr	r3, [pc, #456]	; (419904 <keyboard_init+0x1e8>)
  41973c:	4798      	blx	r3
  41973e:	3014      	adds	r0, #20
  419740:	0080      	lsls	r0, r0, #2
  419742:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419746:	f280 8081 	bge.w	41984c <keyboard_init+0x130>
  41974a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41974c:	2130      	movs	r1, #48	; 0x30
  41974e:	4620      	mov	r0, r4
  419750:	4d6b      	ldr	r5, [pc, #428]	; (419900 <keyboard_init+0x1e4>)
  419752:	47a8      	blx	r5
    lv_style_set_border_side(&styles->kb_bg, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP);
  419754:	4c68      	ldr	r4, [pc, #416]	; (4198f8 <keyboard_init+0x1dc>)
  419756:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419758:	2202      	movs	r2, #2
  41975a:	2131      	movs	r1, #49	; 0x31
  41975c:	306c      	adds	r0, #108	; 0x6c
  41975e:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  419760:	6820      	ldr	r0, [r4, #0]
  419762:	306c      	adds	r0, #108	; 0x6c
  419764:	4b68      	ldr	r3, [pc, #416]	; (419908 <keyboard_init+0x1ec>)
  419766:	6a1b      	ldr	r3, [r3, #32]
  419768:	f013 0f02 	tst.w	r3, #2
  41976c:	d07b      	beq.n	419866 <keyboard_init+0x14a>
  41976e:	f04f 0200 	mov.w	r2, #0
  419772:	2301      	movs	r3, #1
  419774:	f363 0202 	bfi	r2, r3, #0, #3
  419778:	2307      	movs	r3, #7
  41977a:	f363 02c7 	bfi	r2, r3, #3, #5
  41977e:	2308      	movs	r3, #8
  419780:	f363 220c 	bfi	r2, r3, #8, #5
  419784:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419788:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41978c:	2139      	movs	r1, #57	; 0x39
  41978e:	4d5f      	ldr	r5, [pc, #380]	; (41990c <keyboard_init+0x1f0>)
  419790:	47a8      	blx	r5
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_EDITED, theme.color_secondary);
  419792:	4c59      	ldr	r4, [pc, #356]	; (4198f8 <keyboard_init+0x1dc>)
  419794:	6820      	ldr	r0, [r4, #0]
  419796:	4b5c      	ldr	r3, [pc, #368]	; (419908 <keyboard_init+0x1ec>)
  419798:	89da      	ldrh	r2, [r3, #14]
  41979a:	f240 4139 	movw	r1, #1081	; 0x439
  41979e:	306c      	adds	r0, #108	; 0x6c
  4197a0:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  4197a2:	6824      	ldr	r4, [r4, #0]
  4197a4:	346c      	adds	r4, #108	; 0x6c
  4197a6:	2000      	movs	r0, #0
  4197a8:	4b56      	ldr	r3, [pc, #344]	; (419904 <keyboard_init+0x1e8>)
  4197aa:	4798      	blx	r3
  4197ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197b0:	3050      	adds	r0, #80	; 0x50
  4197b2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197b6:	da59      	bge.n	41986c <keyboard_init+0x150>
  4197b8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  4197ba:	2112      	movs	r1, #18
  4197bc:	4620      	mov	r0, r4
  4197be:	4b50      	ldr	r3, [pc, #320]	; (419900 <keyboard_init+0x1e4>)
  4197c0:	4798      	blx	r3
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  4197c2:	4b4d      	ldr	r3, [pc, #308]	; (4198f8 <keyboard_init+0x1dc>)
  4197c4:	681c      	ldr	r4, [r3, #0]
  4197c6:	346c      	adds	r4, #108	; 0x6c
  4197c8:	2000      	movs	r0, #0
  4197ca:	4b4e      	ldr	r3, [pc, #312]	; (419904 <keyboard_init+0x1e8>)
  4197cc:	4798      	blx	r3
  4197ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197d2:	3050      	adds	r0, #80	; 0x50
  4197d4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197d8:	da56      	bge.n	419888 <keyboard_init+0x16c>
  4197da:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  4197dc:	2113      	movs	r1, #19
  4197de:	4620      	mov	r0, r4
  4197e0:	4b47      	ldr	r3, [pc, #284]	; (419900 <keyboard_init+0x1e4>)
  4197e2:	4798      	blx	r3
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  4197e4:	4b44      	ldr	r3, [pc, #272]	; (4198f8 <keyboard_init+0x1dc>)
  4197e6:	681c      	ldr	r4, [r3, #0]
  4197e8:	346c      	adds	r4, #108	; 0x6c
  4197ea:	2000      	movs	r0, #0
  4197ec:	4b45      	ldr	r3, [pc, #276]	; (419904 <keyboard_init+0x1e8>)
  4197ee:	4798      	blx	r3
  4197f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4197f4:	3050      	adds	r0, #80	; 0x50
  4197f6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  4197fa:	da53      	bge.n	4198a4 <keyboard_init+0x188>
  4197fc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  4197fe:	2110      	movs	r1, #16
  419800:	4620      	mov	r0, r4
  419802:	4b3f      	ldr	r3, [pc, #252]	; (419900 <keyboard_init+0x1e4>)
  419804:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419806:	4b3c      	ldr	r3, [pc, #240]	; (4198f8 <keyboard_init+0x1dc>)
  419808:	681c      	ldr	r4, [r3, #0]
  41980a:	346c      	adds	r4, #108	; 0x6c
  41980c:	2000      	movs	r0, #0
  41980e:	4b3d      	ldr	r3, [pc, #244]	; (419904 <keyboard_init+0x1e8>)
  419810:	4798      	blx	r3
  419812:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419816:	3050      	adds	r0, #80	; 0x50
  419818:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41981c:	da50      	bge.n	4198c0 <keyboard_init+0x1a4>
  41981e:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419820:	2111      	movs	r1, #17
  419822:	4620      	mov	r0, r4
  419824:	4b36      	ldr	r3, [pc, #216]	; (419900 <keyboard_init+0x1e4>)
  419826:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  419828:	4b33      	ldr	r3, [pc, #204]	; (4198f8 <keyboard_init+0x1dc>)
  41982a:	681c      	ldr	r4, [r3, #0]
  41982c:	346c      	adds	r4, #108	; 0x6c
  41982e:	2000      	movs	r0, #0
  419830:	4b34      	ldr	r3, [pc, #208]	; (419904 <keyboard_init+0x1e8>)
  419832:	4798      	blx	r3
  419834:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  419838:	3050      	adds	r0, #80	; 0x50
  41983a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41983e:	da4d      	bge.n	4198dc <keyboard_init+0x1c0>
  419840:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419842:	2114      	movs	r1, #20
  419844:	4620      	mov	r0, r4
  419846:	4b2e      	ldr	r3, [pc, #184]	; (419900 <keyboard_init+0x1e4>)
  419848:	4798      	blx	r3
  41984a:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_border_width(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(4));
  41984c:	2000      	movs	r0, #0
  41984e:	4b2d      	ldr	r3, [pc, #180]	; (419904 <keyboard_init+0x1e8>)
  419850:	4798      	blx	r3
  419852:	3014      	adds	r0, #20
  419854:	0080      	lsls	r0, r0, #2
  419856:	4b2e      	ldr	r3, [pc, #184]	; (419910 <keyboard_init+0x1f4>)
  419858:	fb83 2300 	smull	r2, r3, r3, r0
  41985c:	17c2      	asrs	r2, r0, #31
  41985e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419862:	b212      	sxth	r2, r2
  419864:	e772      	b.n	41974c <keyboard_init+0x30>
    lv_style_set_border_color(&styles->kb_bg, LV_STATE_DEFAULT, IS_LIGHT ? COLOR_BG_TEXT : LV_COLOR_BLACK);
  419866:	f04f 0200 	mov.w	r2, #0
  41986a:	e78f      	b.n	41978c <keyboard_init+0x70>
    lv_style_set_pad_left(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  41986c:	2000      	movs	r0, #0
  41986e:	4b25      	ldr	r3, [pc, #148]	; (419904 <keyboard_init+0x1e8>)
  419870:	4798      	blx	r3
  419872:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419876:	3050      	adds	r0, #80	; 0x50
  419878:	4b25      	ldr	r3, [pc, #148]	; (419910 <keyboard_init+0x1f4>)
  41987a:	fb83 2300 	smull	r2, r3, r3, r0
  41987e:	17c2      	asrs	r2, r0, #31
  419880:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419884:	b212      	sxth	r2, r2
  419886:	e798      	b.n	4197ba <keyboard_init+0x9e>
    lv_style_set_pad_right(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  419888:	2000      	movs	r0, #0
  41988a:	4b1e      	ldr	r3, [pc, #120]	; (419904 <keyboard_init+0x1e8>)
  41988c:	4798      	blx	r3
  41988e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  419892:	3050      	adds	r0, #80	; 0x50
  419894:	4b1e      	ldr	r3, [pc, #120]	; (419910 <keyboard_init+0x1f4>)
  419896:	fb83 2300 	smull	r2, r3, r3, r0
  41989a:	17c2      	asrs	r2, r0, #31
  41989c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198a0:	b212      	sxth	r2, r2
  4198a2:	e79b      	b.n	4197dc <keyboard_init+0xc0>
    lv_style_set_pad_top(&styles->kb_bg, LV_STATE_DEFAULT,  LV_DPX(5));
  4198a4:	2000      	movs	r0, #0
  4198a6:	4b17      	ldr	r3, [pc, #92]	; (419904 <keyboard_init+0x1e8>)
  4198a8:	4798      	blx	r3
  4198aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198ae:	3050      	adds	r0, #80	; 0x50
  4198b0:	4b17      	ldr	r3, [pc, #92]	; (419910 <keyboard_init+0x1f4>)
  4198b2:	fb83 2300 	smull	r2, r3, r3, r0
  4198b6:	17c2      	asrs	r2, r0, #31
  4198b8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198bc:	b212      	sxth	r2, r2
  4198be:	e79e      	b.n	4197fe <keyboard_init+0xe2>
    lv_style_set_pad_bottom(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(5));
  4198c0:	2000      	movs	r0, #0
  4198c2:	4b10      	ldr	r3, [pc, #64]	; (419904 <keyboard_init+0x1e8>)
  4198c4:	4798      	blx	r3
  4198c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4198ca:	3050      	adds	r0, #80	; 0x50
  4198cc:	4b10      	ldr	r3, [pc, #64]	; (419910 <keyboard_init+0x1f4>)
  4198ce:	fb83 2300 	smull	r2, r3, r3, r0
  4198d2:	17c2      	asrs	r2, r0, #31
  4198d4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198d8:	b212      	sxth	r2, r2
  4198da:	e7a1      	b.n	419820 <keyboard_init+0x104>
    lv_style_set_pad_inner(&styles->kb_bg, LV_STATE_DEFAULT, LV_DPX(3));
  4198dc:	2000      	movs	r0, #0
  4198de:	4b09      	ldr	r3, [pc, #36]	; (419904 <keyboard_init+0x1e8>)
  4198e0:	4798      	blx	r3
  4198e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  4198e6:	3050      	adds	r0, #80	; 0x50
  4198e8:	4b09      	ldr	r3, [pc, #36]	; (419910 <keyboard_init+0x1f4>)
  4198ea:	fb83 2300 	smull	r2, r3, r3, r0
  4198ee:	17c2      	asrs	r2, r0, #31
  4198f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  4198f4:	b212      	sxth	r2, r2
  4198f6:	e7a4      	b.n	419842 <keyboard_init+0x126>
  4198f8:	204147a8 	.word	0x204147a8
  4198fc:	00417885 	.word	0x00417885
  419900:	00409c81 	.word	0x00409c81
  419904:	0041468d 	.word	0x0041468d
  419908:	204147ac 	.word	0x204147ac
  41990c:	00409e11 	.word	0x00409e11
  419910:	66666667 	.word	0x66666667

00419914 <msgbox_init>:
{
  419914:	b510      	push	{r4, lr}
    style_init_reset(&styles->mbox_bg);
  419916:	4c20      	ldr	r4, [pc, #128]	; (419998 <msgbox_init+0x84>)
  419918:	6820      	ldr	r0, [r4, #0]
  41991a:	3080      	adds	r0, #128	; 0x80
  41991c:	4b1f      	ldr	r3, [pc, #124]	; (41999c <msgbox_init+0x88>)
  41991e:	4798      	blx	r3
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  419920:	6824      	ldr	r4, [r4, #0]
  419922:	3480      	adds	r4, #128	; 0x80
  419924:	2000      	movs	r0, #0
  419926:	4b1e      	ldr	r3, [pc, #120]	; (4199a0 <msgbox_init+0x8c>)
  419928:	4798      	blx	r3
  41992a:	2332      	movs	r3, #50	; 0x32
  41992c:	fb03 f000 	mul.w	r0, r3, r0
  419930:	3050      	adds	r0, #80	; 0x50
  419932:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419936:	da1d      	bge.n	419974 <msgbox_init+0x60>
  419938:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41993a:	2150      	movs	r1, #80	; 0x50
  41993c:	4620      	mov	r0, r4
  41993e:	4b19      	ldr	r3, [pc, #100]	; (4199a4 <msgbox_init+0x90>)
  419940:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  419942:	4b15      	ldr	r3, [pc, #84]	; (419998 <msgbox_init+0x84>)
  419944:	6818      	ldr	r0, [r3, #0]
  419946:	3080      	adds	r0, #128	; 0x80
  419948:	4b17      	ldr	r3, [pc, #92]	; (4199a8 <msgbox_init+0x94>)
  41994a:	6a1b      	ldr	r3, [r3, #32]
  41994c:	f013 0f02 	tst.w	r3, #2
  419950:	d11f      	bne.n	419992 <msgbox_init+0x7e>
  419952:	f04f 0200 	mov.w	r2, #0
  419956:	2304      	movs	r3, #4
  419958:	f363 0202 	bfi	r2, r3, #0, #3
  41995c:	2313      	movs	r3, #19
  41995e:	f363 02c7 	bfi	r2, r3, #3, #5
  419962:	f363 220c 	bfi	r2, r3, #8, #5
  419966:	2306      	movs	r3, #6
  419968:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41996c:	2159      	movs	r1, #89	; 0x59
  41996e:	4b0f      	ldr	r3, [pc, #60]	; (4199ac <msgbox_init+0x98>)
  419970:	4798      	blx	r3
  419972:	bd10      	pop	{r4, pc}
    lv_style_set_shadow_width(&styles->mbox_bg, LV_STATE_DEFAULT, LV_DPX(50));
  419974:	2000      	movs	r0, #0
  419976:	4b0a      	ldr	r3, [pc, #40]	; (4199a0 <msgbox_init+0x8c>)
  419978:	4798      	blx	r3
  41997a:	2232      	movs	r2, #50	; 0x32
  41997c:	fb02 f000 	mul.w	r0, r2, r0
  419980:	3050      	adds	r0, #80	; 0x50
  419982:	4b0b      	ldr	r3, [pc, #44]	; (4199b0 <msgbox_init+0x9c>)
  419984:	fb83 2300 	smull	r2, r3, r3, r0
  419988:	17c2      	asrs	r2, r0, #31
  41998a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41998e:	b212      	sxth	r2, r2
  419990:	e7d3      	b.n	41993a <msgbox_init+0x26>
    lv_style_set_shadow_color(&styles->mbox_bg, LV_STATE_DEFAULT, IS_LIGHT ? LV_COLOR_SILVER : lv_color_hex3(0x999));
  419992:	4b08      	ldr	r3, [pc, #32]	; (4199b4 <msgbox_init+0xa0>)
  419994:	891a      	ldrh	r2, [r3, #8]
  419996:	e7e9      	b.n	41996c <msgbox_init+0x58>
  419998:	204147a8 	.word	0x204147a8
  41999c:	00417885 	.word	0x00417885
  4199a0:	0041468d 	.word	0x0041468d
  4199a4:	00409c81 	.word	0x00409c81
  4199a8:	204147ac 	.word	0x204147ac
  4199ac:	00409e11 	.word	0x00409e11
  4199b0:	66666667 	.word	0x66666667
  4199b4:	004297c8 	.word	0x004297c8

004199b8 <page_init>:
{
  4199b8:	b510      	push	{r4, lr}
    style_init_reset(&styles->sb);
  4199ba:	4c5a      	ldr	r4, [pc, #360]	; (419b24 <page_init+0x16c>)
  4199bc:	6820      	ldr	r0, [r4, #0]
  4199be:	3084      	adds	r0, #132	; 0x84
  4199c0:	4b59      	ldr	r3, [pc, #356]	; (419b28 <page_init+0x170>)
  4199c2:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->sb, LV_STATE_DEFAULT, LV_OPA_COVER);
  4199c4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  4199c6:	22ff      	movs	r2, #255	; 0xff
  4199c8:	212c      	movs	r1, #44	; 0x2c
  4199ca:	3084      	adds	r0, #132	; 0x84
  4199cc:	4b57      	ldr	r3, [pc, #348]	; (419b2c <page_init+0x174>)
  4199ce:	4798      	blx	r3
    lv_style_set_bg_color(&styles->sb, LV_STATE_DEFAULT, (IS_LIGHT ? lv_color_hex(0xcccfd1) : lv_color_hex(0x777f85)));
  4199d0:	6820      	ldr	r0, [r4, #0]
  4199d2:	3084      	adds	r0, #132	; 0x84
  4199d4:	4b56      	ldr	r3, [pc, #344]	; (419b30 <page_init+0x178>)
  4199d6:	6a1b      	ldr	r3, [r3, #32]
  4199d8:	f013 0f02 	tst.w	r3, #2
  4199dc:	d068      	beq.n	419ab0 <page_init+0xf8>
  4199de:	f04f 0200 	mov.w	r2, #0
  4199e2:	2306      	movs	r3, #6
  4199e4:	f363 0202 	bfi	r2, r3, #0, #3
  4199e8:	2319      	movs	r3, #25
  4199ea:	f363 02c7 	bfi	r2, r3, #3, #5
  4199ee:	231a      	movs	r3, #26
  4199f0:	f363 220c 	bfi	r2, r3, #8, #5
  4199f4:	2303      	movs	r3, #3
  4199f6:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  4199fa:	2129      	movs	r1, #41	; 0x29
  4199fc:	4b4d      	ldr	r3, [pc, #308]	; (419b34 <page_init+0x17c>)
  4199fe:	4798      	blx	r3
    lv_style_set_radius(&styles->sb, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  419a00:	4c48      	ldr	r4, [pc, #288]	; (419b24 <page_init+0x16c>)
  419a02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  419a04:	f647 72ff 	movw	r2, #32767	; 0x7fff
  419a08:	2101      	movs	r1, #1
  419a0a:	3084      	adds	r0, #132	; 0x84
  419a0c:	4b4a      	ldr	r3, [pc, #296]	; (419b38 <page_init+0x180>)
  419a0e:	4798      	blx	r3
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  419a10:	6824      	ldr	r4, [r4, #0]
  419a12:	3484      	adds	r4, #132	; 0x84
  419a14:	2000      	movs	r0, #0
  419a16:	4b49      	ldr	r3, [pc, #292]	; (419b3c <page_init+0x184>)
  419a18:	4798      	blx	r3
  419a1a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419a1e:	3050      	adds	r0, #80	; 0x50
  419a20:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a24:	da54      	bge.n	419ad0 <page_init+0x118>
  419a26:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  419a28:	2103      	movs	r1, #3
  419a2a:	4620      	mov	r0, r4
  419a2c:	4b42      	ldr	r3, [pc, #264]	; (419b38 <page_init+0x180>)
  419a2e:	4798      	blx	r3
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  419a30:	4b3c      	ldr	r3, [pc, #240]	; (419b24 <page_init+0x16c>)
  419a32:	681c      	ldr	r4, [r3, #0]
  419a34:	3484      	adds	r4, #132	; 0x84
  419a36:	2000      	movs	r0, #0
  419a38:	4b40      	ldr	r3, [pc, #256]	; (419b3c <page_init+0x184>)
  419a3a:	4798      	blx	r3
  419a3c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419a40:	3050      	adds	r0, #80	; 0x50
  419a42:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a46:	da51      	bge.n	419aec <page_init+0x134>
  419a48:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419a4a:	2113      	movs	r1, #19
  419a4c:	4620      	mov	r0, r4
  419a4e:	4b3a      	ldr	r3, [pc, #232]	; (419b38 <page_init+0x180>)
  419a50:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  419a52:	4b34      	ldr	r3, [pc, #208]	; (419b24 <page_init+0x16c>)
  419a54:	681c      	ldr	r4, [r3, #0]
  419a56:	3484      	adds	r4, #132	; 0x84
  419a58:	2000      	movs	r0, #0
  419a5a:	4b38      	ldr	r3, [pc, #224]	; (419b3c <page_init+0x184>)
  419a5c:	4798      	blx	r3
  419a5e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419a62:	3050      	adds	r0, #80	; 0x50
  419a64:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419a68:	da4e      	bge.n	419b08 <page_init+0x150>
  419a6a:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419a6c:	2111      	movs	r1, #17
  419a6e:	4620      	mov	r0, r4
  419a70:	4b31      	ldr	r3, [pc, #196]	; (419b38 <page_init+0x180>)
  419a72:	4798      	blx	r3
    style_init_reset(&styles->edge_flash);
  419a74:	4c2b      	ldr	r4, [pc, #172]	; (419b24 <page_init+0x16c>)
  419a76:	6820      	ldr	r0, [r4, #0]
  419a78:	3088      	adds	r0, #136	; 0x88
  419a7a:	4b2b      	ldr	r3, [pc, #172]	; (419b28 <page_init+0x170>)
  419a7c:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->edge_flash, LV_STATE_DEFAULT, LV_OPA_COVER);
  419a7e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419a80:	22ff      	movs	r2, #255	; 0xff
  419a82:	212c      	movs	r1, #44	; 0x2c
  419a84:	3088      	adds	r0, #136	; 0x88
  419a86:	4b29      	ldr	r3, [pc, #164]	; (419b2c <page_init+0x174>)
  419a88:	4798      	blx	r3
    lv_style_set_bg_color(&styles->edge_flash, LV_STATE_DEFAULT,  lv_color_hex3(0x888));
  419a8a:	6820      	ldr	r0, [r4, #0]
  419a8c:	f04f 0200 	mov.w	r2, #0
  419a90:	2304      	movs	r3, #4
  419a92:	f363 0202 	bfi	r2, r3, #0, #3
  419a96:	2311      	movs	r3, #17
  419a98:	f363 02c7 	bfi	r2, r3, #3, #5
  419a9c:	f363 220c 	bfi	r2, r3, #8, #5
  419aa0:	2302      	movs	r3, #2
  419aa2:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419aa6:	2129      	movs	r1, #41	; 0x29
  419aa8:	3088      	adds	r0, #136	; 0x88
  419aaa:	4b22      	ldr	r3, [pc, #136]	; (419b34 <page_init+0x17c>)
  419aac:	4798      	blx	r3
  419aae:	bd10      	pop	{r4, pc}
  419ab0:	f04f 0200 	mov.w	r2, #0
  419ab4:	2303      	movs	r3, #3
  419ab6:	f363 0202 	bfi	r2, r3, #0, #3
  419aba:	230e      	movs	r3, #14
  419abc:	f363 02c7 	bfi	r2, r3, #3, #5
  419ac0:	2310      	movs	r3, #16
  419ac2:	f363 220c 	bfi	r2, r3, #8, #5
  419ac6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419aca:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  419ace:	e794      	b.n	4199fa <page_init+0x42>
    lv_style_set_size(&styles->sb, LV_STATE_DEFAULT, LV_DPX(7));
  419ad0:	2000      	movs	r0, #0
  419ad2:	4b1a      	ldr	r3, [pc, #104]	; (419b3c <page_init+0x184>)
  419ad4:	4798      	blx	r3
  419ad6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419ada:	3050      	adds	r0, #80	; 0x50
  419adc:	4b18      	ldr	r3, [pc, #96]	; (419b40 <page_init+0x188>)
  419ade:	fb83 2300 	smull	r2, r3, r3, r0
  419ae2:	17c2      	asrs	r2, r0, #31
  419ae4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419ae8:	b212      	sxth	r2, r2
  419aea:	e79d      	b.n	419a28 <page_init+0x70>
    lv_style_set_pad_right(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  419aec:	2000      	movs	r0, #0
  419aee:	4b13      	ldr	r3, [pc, #76]	; (419b3c <page_init+0x184>)
  419af0:	4798      	blx	r3
  419af2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419af6:	3050      	adds	r0, #80	; 0x50
  419af8:	4b11      	ldr	r3, [pc, #68]	; (419b40 <page_init+0x188>)
  419afa:	fb83 2300 	smull	r2, r3, r3, r0
  419afe:	17c2      	asrs	r2, r0, #31
  419b00:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b04:	b212      	sxth	r2, r2
  419b06:	e7a0      	b.n	419a4a <page_init+0x92>
    lv_style_set_pad_bottom(&styles->sb, LV_STATE_DEFAULT,  LV_DPX(7));
  419b08:	2000      	movs	r0, #0
  419b0a:	4b0c      	ldr	r3, [pc, #48]	; (419b3c <page_init+0x184>)
  419b0c:	4798      	blx	r3
  419b0e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  419b12:	3050      	adds	r0, #80	; 0x50
  419b14:	4b0a      	ldr	r3, [pc, #40]	; (419b40 <page_init+0x188>)
  419b16:	fb83 2300 	smull	r2, r3, r3, r0
  419b1a:	17c2      	asrs	r2, r0, #31
  419b1c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419b20:	b212      	sxth	r2, r2
  419b22:	e7a3      	b.n	419a6c <page_init+0xb4>
  419b24:	204147a8 	.word	0x204147a8
  419b28:	00417885 	.word	0x00417885
  419b2c:	00409fa1 	.word	0x00409fa1
  419b30:	204147ac 	.word	0x204147ac
  419b34:	00409e11 	.word	0x00409e11
  419b38:	00409c81 	.word	0x00409c81
  419b3c:	0041468d 	.word	0x0041468d
  419b40:	66666667 	.word	0x66666667

00419b44 <textarea_init>:
{
  419b44:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ta_cursor);
  419b46:	4c4a      	ldr	r4, [pc, #296]	; (419c70 <textarea_init+0x12c>)
  419b48:	6820      	ldr	r0, [r4, #0]
  419b4a:	30b8      	adds	r0, #184	; 0xb8
  419b4c:	4b49      	ldr	r3, [pc, #292]	; (419c74 <textarea_init+0x130>)
  419b4e:	4798      	blx	r3
    lv_style_set_border_color(&styles->ta_cursor, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  419b50:	6820      	ldr	r0, [r4, #0]
  419b52:	30b8      	adds	r0, #184	; 0xb8
  419b54:	4b48      	ldr	r3, [pc, #288]	; (419c78 <textarea_init+0x134>)
  419b56:	6a1b      	ldr	r3, [r3, #32]
  419b58:	f013 0f02 	tst.w	r3, #2
  419b5c:	d052      	beq.n	419c04 <textarea_init+0xc0>
  419b5e:	f04f 0200 	mov.w	r2, #0
  419b62:	2302      	movs	r3, #2
  419b64:	f363 0202 	bfi	r2, r3, #0, #3
  419b68:	2306      	movs	r3, #6
  419b6a:	f363 02c7 	bfi	r2, r3, #3, #5
  419b6e:	2309      	movs	r3, #9
  419b70:	f363 220c 	bfi	r2, r3, #8, #5
  419b74:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419b78:	2139      	movs	r1, #57	; 0x39
  419b7a:	4b40      	ldr	r3, [pc, #256]	; (419c7c <textarea_init+0x138>)
  419b7c:	4798      	blx	r3
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  419b7e:	4b3c      	ldr	r3, [pc, #240]	; (419c70 <textarea_init+0x12c>)
  419b80:	681c      	ldr	r4, [r3, #0]
  419b82:	34b8      	adds	r4, #184	; 0xb8
  419b84:	2000      	movs	r0, #0
  419b86:	4b3e      	ldr	r3, [pc, #248]	; (419c80 <textarea_init+0x13c>)
  419b88:	4798      	blx	r3
  419b8a:	3028      	adds	r0, #40	; 0x28
  419b8c:	0040      	lsls	r0, r0, #1
  419b8e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419b92:	da46      	bge.n	419c22 <textarea_init+0xde>
  419b94:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419b96:	2130      	movs	r1, #48	; 0x30
  419b98:	4620      	mov	r0, r4
  419b9a:	4b3a      	ldr	r3, [pc, #232]	; (419c84 <textarea_init+0x140>)
  419b9c:	4798      	blx	r3
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  419b9e:	4b34      	ldr	r3, [pc, #208]	; (419c70 <textarea_init+0x12c>)
  419ba0:	681c      	ldr	r4, [r3, #0]
  419ba2:	34b8      	adds	r4, #184	; 0xb8
  419ba4:	2000      	movs	r0, #0
  419ba6:	4b36      	ldr	r3, [pc, #216]	; (419c80 <textarea_init+0x13c>)
  419ba8:	4798      	blx	r3
  419baa:	3050      	adds	r0, #80	; 0x50
  419bac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419bb0:	da44      	bge.n	419c3c <textarea_init+0xf8>
  419bb2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419bb4:	2112      	movs	r1, #18
  419bb6:	4620      	mov	r0, r4
  419bb8:	4d32      	ldr	r5, [pc, #200]	; (419c84 <textarea_init+0x140>)
  419bba:	47a8      	blx	r5
    lv_style_set_border_side(&styles->ta_cursor, LV_STATE_DEFAULT, LV_BORDER_SIDE_LEFT);
  419bbc:	4c2c      	ldr	r4, [pc, #176]	; (419c70 <textarea_init+0x12c>)
  419bbe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419bc0:	2204      	movs	r2, #4
  419bc2:	2131      	movs	r1, #49	; 0x31
  419bc4:	30b8      	adds	r0, #184	; 0xb8
  419bc6:	47a8      	blx	r5
    style_init_reset(&styles->ta_placeholder);
  419bc8:	6820      	ldr	r0, [r4, #0]
  419bca:	30bc      	adds	r0, #188	; 0xbc
  419bcc:	4b29      	ldr	r3, [pc, #164]	; (419c74 <textarea_init+0x130>)
  419bce:	4798      	blx	r3
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  419bd0:	6820      	ldr	r0, [r4, #0]
  419bd2:	30bc      	adds	r0, #188	; 0xbc
                            IS_LIGHT ? COLOR_BG_TEXT_DIS : lv_color_hex(0xa1adbd));
  419bd4:	4b28      	ldr	r3, [pc, #160]	; (419c78 <textarea_init+0x134>)
  419bd6:	6a1b      	ldr	r3, [r3, #32]
    lv_style_set_text_color(&styles->ta_placeholder, LV_STATE_DEFAULT,
  419bd8:	f013 0f02 	tst.w	r3, #2
  419bdc:	d13a      	bne.n	419c54 <textarea_init+0x110>
  419bde:	f04f 0200 	mov.w	r2, #0
  419be2:	2305      	movs	r3, #5
  419be4:	f363 0202 	bfi	r2, r3, #0, #3
  419be8:	2314      	movs	r3, #20
  419bea:	f363 02c7 	bfi	r2, r3, #3, #5
  419bee:	2317      	movs	r3, #23
  419bf0:	f363 220c 	bfi	r2, r3, #8, #5
  419bf4:	2303      	movs	r3, #3
  419bf6:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419bfa:	f248 0189 	movw	r1, #32905	; 0x8089
  419bfe:	4b1f      	ldr	r3, [pc, #124]	; (419c7c <textarea_init+0x138>)
  419c00:	4798      	blx	r3
  419c02:	bd38      	pop	{r3, r4, r5, pc}
  419c04:	f04f 0200 	mov.w	r2, #0
  419c08:	2305      	movs	r3, #5
  419c0a:	f363 0202 	bfi	r2, r3, #0, #3
  419c0e:	2314      	movs	r3, #20
  419c10:	f363 02c7 	bfi	r2, r3, #3, #5
  419c14:	2315      	movs	r3, #21
  419c16:	f363 220c 	bfi	r2, r3, #8, #5
  419c1a:	2302      	movs	r3, #2
  419c1c:	f363 324f 	bfi	r2, r3, #13, #3
  419c20:	e7aa      	b.n	419b78 <textarea_init+0x34>
    lv_style_set_border_width(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(2));
  419c22:	2000      	movs	r0, #0
  419c24:	4b16      	ldr	r3, [pc, #88]	; (419c80 <textarea_init+0x13c>)
  419c26:	4798      	blx	r3
  419c28:	3028      	adds	r0, #40	; 0x28
  419c2a:	0040      	lsls	r0, r0, #1
  419c2c:	4b16      	ldr	r3, [pc, #88]	; (419c88 <textarea_init+0x144>)
  419c2e:	fb83 2300 	smull	r2, r3, r3, r0
  419c32:	17c2      	asrs	r2, r0, #31
  419c34:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c38:	b212      	sxth	r2, r2
  419c3a:	e7ac      	b.n	419b96 <textarea_init+0x52>
    lv_style_set_pad_left(&styles->ta_cursor, LV_STATE_DEFAULT, LV_DPX(1));
  419c3c:	2000      	movs	r0, #0
  419c3e:	4b10      	ldr	r3, [pc, #64]	; (419c80 <textarea_init+0x13c>)
  419c40:	4798      	blx	r3
  419c42:	3050      	adds	r0, #80	; 0x50
  419c44:	4b10      	ldr	r3, [pc, #64]	; (419c88 <textarea_init+0x144>)
  419c46:	fb83 2300 	smull	r2, r3, r3, r0
  419c4a:	17c2      	asrs	r2, r0, #31
  419c4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419c50:	b212      	sxth	r2, r2
  419c52:	e7af      	b.n	419bb4 <textarea_init+0x70>
  419c54:	f04f 0200 	mov.w	r2, #0
  419c58:	2305      	movs	r3, #5
  419c5a:	f363 0202 	bfi	r2, r3, #0, #3
  419c5e:	2315      	movs	r3, #21
  419c60:	f363 02c7 	bfi	r2, r3, #3, #5
  419c64:	f363 220c 	bfi	r2, r3, #8, #5
  419c68:	2302      	movs	r3, #2
  419c6a:	f363 324f 	bfi	r2, r3, #13, #3
  419c6e:	e7c4      	b.n	419bfa <textarea_init+0xb6>
  419c70:	204147a8 	.word	0x204147a8
  419c74:	00417885 	.word	0x00417885
  419c78:	204147ac 	.word	0x204147ac
  419c7c:	00409e11 	.word	0x00409e11
  419c80:	0041468d 	.word	0x0041468d
  419c84:	00409c81 	.word	0x00409c81
  419c88:	66666667 	.word	0x66666667

00419c8c <spinbox_init>:
{
  419c8c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->spinbox_cursor);
  419c8e:	4c2d      	ldr	r4, [pc, #180]	; (419d44 <spinbox_init+0xb8>)
  419c90:	6820      	ldr	r0, [r4, #0]
  419c92:	309c      	adds	r0, #156	; 0x9c
  419c94:	4b2c      	ldr	r3, [pc, #176]	; (419d48 <spinbox_init+0xbc>)
  419c96:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_OPA_COVER);
  419c98:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419c9a:	22ff      	movs	r2, #255	; 0xff
  419c9c:	212c      	movs	r1, #44	; 0x2c
  419c9e:	309c      	adds	r0, #156	; 0x9c
  419ca0:	4b2a      	ldr	r3, [pc, #168]	; (419d4c <spinbox_init+0xc0>)
  419ca2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, theme.color_primary);
  419ca4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419ca6:	4b2a      	ldr	r3, [pc, #168]	; (419d50 <spinbox_init+0xc4>)
  419ca8:	899a      	ldrh	r2, [r3, #12]
  419caa:	2129      	movs	r1, #41	; 0x29
  419cac:	309c      	adds	r0, #156	; 0x9c
  419cae:	4d29      	ldr	r5, [pc, #164]	; (419d54 <spinbox_init+0xc8>)
  419cb0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  419cb2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419cb4:	4b28      	ldr	r3, [pc, #160]	; (419d58 <spinbox_init+0xcc>)
  419cb6:	881a      	ldrh	r2, [r3, #0]
  419cb8:	f248 0189 	movw	r1, #32905	; 0x8089
  419cbc:	309c      	adds	r0, #156	; 0x9c
  419cbe:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419cc0:	6824      	ldr	r4, [r4, #0]
  419cc2:	349c      	adds	r4, #156	; 0x9c
  419cc4:	2000      	movs	r0, #0
  419cc6:	4b25      	ldr	r3, [pc, #148]	; (419d5c <spinbox_init+0xd0>)
  419cc8:	4798      	blx	r3
  419cca:	2364      	movs	r3, #100	; 0x64
  419ccc:	fb03 f000 	mul.w	r0, r3, r0
  419cd0:	3050      	adds	r0, #80	; 0x50
  419cd2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cd6:	da17      	bge.n	419d08 <spinbox_init+0x7c>
  419cd8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419cda:	2110      	movs	r1, #16
  419cdc:	4620      	mov	r0, r4
  419cde:	4b20      	ldr	r3, [pc, #128]	; (419d60 <spinbox_init+0xd4>)
  419ce0:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419ce2:	4b18      	ldr	r3, [pc, #96]	; (419d44 <spinbox_init+0xb8>)
  419ce4:	681c      	ldr	r4, [r3, #0]
  419ce6:	349c      	adds	r4, #156	; 0x9c
  419ce8:	2000      	movs	r0, #0
  419cea:	4b1c      	ldr	r3, [pc, #112]	; (419d5c <spinbox_init+0xd0>)
  419cec:	4798      	blx	r3
  419cee:	2364      	movs	r3, #100	; 0x64
  419cf0:	fb03 f000 	mul.w	r0, r3, r0
  419cf4:	3050      	adds	r0, #80	; 0x50
  419cf6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419cfa:	da14      	bge.n	419d26 <spinbox_init+0x9a>
  419cfc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419cfe:	2111      	movs	r1, #17
  419d00:	4620      	mov	r0, r4
  419d02:	4b17      	ldr	r3, [pc, #92]	; (419d60 <spinbox_init+0xd4>)
  419d04:	4798      	blx	r3
  419d06:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_pad_top(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419d08:	2000      	movs	r0, #0
  419d0a:	4b14      	ldr	r3, [pc, #80]	; (419d5c <spinbox_init+0xd0>)
  419d0c:	4798      	blx	r3
  419d0e:	2264      	movs	r2, #100	; 0x64
  419d10:	fb02 f000 	mul.w	r0, r2, r0
  419d14:	3050      	adds	r0, #80	; 0x50
  419d16:	4b13      	ldr	r3, [pc, #76]	; (419d64 <spinbox_init+0xd8>)
  419d18:	fb83 2300 	smull	r2, r3, r3, r0
  419d1c:	17c2      	asrs	r2, r0, #31
  419d1e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d22:	b212      	sxth	r2, r2
  419d24:	e7d9      	b.n	419cda <spinbox_init+0x4e>
    lv_style_set_pad_bottom(&styles->spinbox_cursor, LV_STATE_DEFAULT, LV_DPX(100));
  419d26:	2000      	movs	r0, #0
  419d28:	4b0c      	ldr	r3, [pc, #48]	; (419d5c <spinbox_init+0xd0>)
  419d2a:	4798      	blx	r3
  419d2c:	2264      	movs	r2, #100	; 0x64
  419d2e:	fb02 f000 	mul.w	r0, r2, r0
  419d32:	3050      	adds	r0, #80	; 0x50
  419d34:	4b0b      	ldr	r3, [pc, #44]	; (419d64 <spinbox_init+0xd8>)
  419d36:	fb83 2300 	smull	r2, r3, r3, r0
  419d3a:	17c2      	asrs	r2, r0, #31
  419d3c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  419d40:	b212      	sxth	r2, r2
  419d42:	e7dc      	b.n	419cfe <spinbox_init+0x72>
  419d44:	204147a8 	.word	0x204147a8
  419d48:	00417885 	.word	0x00417885
  419d4c:	00409fa1 	.word	0x00409fa1
  419d50:	204147ac 	.word	0x204147ac
  419d54:	00409e11 	.word	0x00409e11
  419d58:	004297c8 	.word	0x004297c8
  419d5c:	0041468d 	.word	0x0041468d
  419d60:	00409c81 	.word	0x00409c81
  419d64:	66666667 	.word	0x66666667

00419d68 <list_init>:
{
  419d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->list_bg);
  419d6a:	4cbf      	ldr	r4, [pc, #764]	; (41a068 <list_init+0x300>)
  419d6c:	6820      	ldr	r0, [r4, #0]
  419d6e:	3078      	adds	r0, #120	; 0x78
  419d70:	4ebe      	ldr	r6, [pc, #760]	; (41a06c <list_init+0x304>)
  419d72:	47b0      	blx	r6
    lv_style_set_clip_corner(&styles->list_bg, LV_STATE_DEFAULT, true);
  419d74:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  419d76:	2201      	movs	r2, #1
  419d78:	2102      	movs	r1, #2
  419d7a:	3078      	adds	r0, #120	; 0x78
  419d7c:	4dbc      	ldr	r5, [pc, #752]	; (41a070 <list_init+0x308>)
  419d7e:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419d80:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  419d82:	2200      	movs	r2, #0
  419d84:	2112      	movs	r1, #18
  419d86:	3078      	adds	r0, #120	; 0x78
  419d88:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419d8a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  419d8c:	2200      	movs	r2, #0
  419d8e:	2113      	movs	r1, #19
  419d90:	3078      	adds	r0, #120	; 0x78
  419d92:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419d94:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  419d96:	2200      	movs	r2, #0
  419d98:	2110      	movs	r1, #16
  419d9a:	3078      	adds	r0, #120	; 0x78
  419d9c:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419d9e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  419da0:	2200      	movs	r2, #0
  419da2:	2111      	movs	r1, #17
  419da4:	3078      	adds	r0, #120	; 0x78
  419da6:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->list_bg, LV_STATE_DEFAULT, 0);
  419da8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  419daa:	2200      	movs	r2, #0
  419dac:	2114      	movs	r1, #20
  419dae:	3078      	adds	r0, #120	; 0x78
  419db0:	47a8      	blx	r5
    style_init_reset(&styles->list_btn);
  419db2:	6820      	ldr	r0, [r4, #0]
  419db4:	307c      	adds	r0, #124	; 0x7c
  419db6:	47b0      	blx	r6
    lv_style_set_bg_opa(&styles->list_btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  419db8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  419dba:	22ff      	movs	r2, #255	; 0xff
  419dbc:	212c      	movs	r1, #44	; 0x2c
  419dbe:	307c      	adds	r0, #124	; 0x7c
  419dc0:	4bac      	ldr	r3, [pc, #688]	; (41a074 <list_init+0x30c>)
  419dc2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG);
  419dc4:	6820      	ldr	r0, [r4, #0]
  419dc6:	307c      	adds	r0, #124	; 0x7c
  419dc8:	4bab      	ldr	r3, [pc, #684]	; (41a078 <list_init+0x310>)
  419dca:	6a1b      	ldr	r3, [r3, #32]
  419dcc:	f013 0f02 	tst.w	r3, #2
  419dd0:	f000 8223 	beq.w	41a21a <list_init+0x4b2>
  419dd4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  419dd8:	2129      	movs	r1, #41	; 0x29
  419dda:	4ba8      	ldr	r3, [pc, #672]	; (41a07c <list_init+0x314>)
  419ddc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_PRESSED, COLOR_BG_PR);
  419dde:	4ba2      	ldr	r3, [pc, #648]	; (41a068 <list_init+0x300>)
  419de0:	6818      	ldr	r0, [r3, #0]
  419de2:	307c      	adds	r0, #124	; 0x7c
  419de4:	4ba4      	ldr	r3, [pc, #656]	; (41a078 <list_init+0x310>)
  419de6:	6a1b      	ldr	r3, [r3, #32]
  419de8:	f013 0f02 	tst.w	r3, #2
  419dec:	f000 8223 	beq.w	41a236 <list_init+0x4ce>
  419df0:	f04f 0207 	mov.w	r2, #7
  419df4:	231d      	movs	r3, #29
  419df6:	f363 02c7 	bfi	r2, r3, #3, #5
  419dfa:	f363 220c 	bfi	r2, r3, #8, #5
  419dfe:	2303      	movs	r3, #3
  419e00:	f363 324f 	bfi	r2, r3, #13, #3
  419e04:	f241 0129 	movw	r1, #4137	; 0x1029
  419e08:	4b9c      	ldr	r3, [pc, #624]	; (41a07c <list_init+0x314>)
  419e0a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_DIS);
  419e0c:	4b96      	ldr	r3, [pc, #600]	; (41a068 <list_init+0x300>)
  419e0e:	6818      	ldr	r0, [r3, #0]
  419e10:	307c      	adds	r0, #124	; 0x7c
  419e12:	4b99      	ldr	r3, [pc, #612]	; (41a078 <list_init+0x310>)
  419e14:	6a1b      	ldr	r3, [r3, #32]
  419e16:	f013 0f02 	tst.w	r3, #2
  419e1a:	f000 821b 	beq.w	41a254 <list_init+0x4ec>
  419e1e:	f04f 32ff 	mov.w	r2, #4294967295
  419e22:	f242 0129 	movw	r1, #8233	; 0x2029
  419e26:	4d95      	ldr	r5, [pc, #596]	; (41a07c <list_init+0x314>)
  419e28:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_CHK);
  419e2a:	4c8f      	ldr	r4, [pc, #572]	; (41a068 <list_init+0x300>)
  419e2c:	6820      	ldr	r0, [r4, #0]
  419e2e:	4f92      	ldr	r7, [pc, #584]	; (41a078 <list_init+0x310>)
  419e30:	89ba      	ldrh	r2, [r7, #12]
  419e32:	f240 1129 	movw	r1, #297	; 0x129
  419e36:	307c      	adds	r0, #124	; 0x7c
  419e38:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->list_btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BG_PR_CHK);
  419e3a:	6826      	ldr	r6, [r4, #0]
  419e3c:	367c      	adds	r6, #124	; 0x7c
  419e3e:	2133      	movs	r1, #51	; 0x33
  419e40:	89b8      	ldrh	r0, [r7, #12]
  419e42:	4b8f      	ldr	r3, [pc, #572]	; (41a080 <list_init+0x318>)
  419e44:	4798      	blx	r3
  419e46:	4602      	mov	r2, r0
  419e48:	f241 1129 	movw	r1, #4393	; 0x1129
  419e4c:	4630      	mov	r0, r6
  419e4e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419e50:	6820      	ldr	r0, [r4, #0]
  419e52:	307c      	adds	r0, #124	; 0x7c
  419e54:	6a3b      	ldr	r3, [r7, #32]
  419e56:	f013 0f02 	tst.w	r3, #2
  419e5a:	f000 8209 	beq.w	41a270 <list_init+0x508>
  419e5e:	f04f 0200 	mov.w	r2, #0
  419e62:	2301      	movs	r3, #1
  419e64:	f363 0202 	bfi	r2, r3, #0, #3
  419e68:	2307      	movs	r3, #7
  419e6a:	f363 02c7 	bfi	r2, r3, #3, #5
  419e6e:	2308      	movs	r3, #8
  419e70:	f363 220c 	bfi	r2, r3, #8, #5
  419e74:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419e78:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  419e7c:	f248 0189 	movw	r1, #32905	; 0x8089
  419e80:	4b7e      	ldr	r3, [pc, #504]	; (41a07c <list_init+0x314>)
  419e82:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  419e84:	4b78      	ldr	r3, [pc, #480]	; (41a068 <list_init+0x300>)
  419e86:	6818      	ldr	r0, [r3, #0]
  419e88:	307c      	adds	r0, #124	; 0x7c
  419e8a:	4b7b      	ldr	r3, [pc, #492]	; (41a078 <list_init+0x310>)
  419e8c:	6a1b      	ldr	r3, [r3, #32]
  419e8e:	f013 0f02 	tst.w	r3, #2
  419e92:	f000 81f0 	beq.w	41a276 <list_init+0x50e>
  419e96:	f04f 32ff 	mov.w	r2, #4294967295
  419e9a:	f248 1189 	movw	r1, #33161	; 0x8189
  419e9e:	4b77      	ldr	r3, [pc, #476]	; (41a07c <list_init+0x314>)
  419ea0:	4798      	blx	r3
    lv_style_set_text_color(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  419ea2:	4b71      	ldr	r3, [pc, #452]	; (41a068 <list_init+0x300>)
  419ea4:	6818      	ldr	r0, [r3, #0]
  419ea6:	307c      	adds	r0, #124	; 0x7c
  419ea8:	4b73      	ldr	r3, [pc, #460]	; (41a078 <list_init+0x310>)
  419eaa:	6a1b      	ldr	r3, [r3, #32]
  419eac:	f013 0f02 	tst.w	r3, #2
  419eb0:	f000 81e4 	beq.w	41a27c <list_init+0x514>
  419eb4:	f04f 0200 	mov.w	r2, #0
  419eb8:	2305      	movs	r3, #5
  419eba:	f363 0202 	bfi	r2, r3, #0, #3
  419ebe:	2315      	movs	r3, #21
  419ec0:	f363 02c7 	bfi	r2, r3, #3, #5
  419ec4:	f363 220c 	bfi	r2, r3, #8, #5
  419ec8:	2302      	movs	r3, #2
  419eca:	f363 324f 	bfi	r2, r3, #13, #3
  419ece:	f24a 0189 	movw	r1, #41097	; 0xa089
  419ed2:	4b6a      	ldr	r3, [pc, #424]	; (41a07c <list_init+0x314>)
  419ed4:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  419ed6:	4b64      	ldr	r3, [pc, #400]	; (41a068 <list_init+0x300>)
  419ed8:	6818      	ldr	r0, [r3, #0]
  419eda:	307c      	adds	r0, #124	; 0x7c
  419edc:	4b66      	ldr	r3, [pc, #408]	; (41a078 <list_init+0x310>)
  419ede:	6a1b      	ldr	r3, [r3, #32]
  419ee0:	f013 0f02 	tst.w	r3, #2
  419ee4:	f000 81d8 	beq.w	41a298 <list_init+0x530>
  419ee8:	f04f 0200 	mov.w	r2, #0
  419eec:	2301      	movs	r3, #1
  419eee:	f363 0202 	bfi	r2, r3, #0, #3
  419ef2:	2307      	movs	r3, #7
  419ef4:	f363 02c7 	bfi	r2, r3, #3, #5
  419ef8:	2308      	movs	r3, #8
  419efa:	f363 220c 	bfi	r2, r3, #8, #5
  419efe:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419f02:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  419f06:	f248 01a9 	movw	r1, #32937	; 0x80a9
  419f0a:	4b5c      	ldr	r3, [pc, #368]	; (41a07c <list_init+0x314>)
  419f0c:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  419f0e:	4b56      	ldr	r3, [pc, #344]	; (41a068 <list_init+0x300>)
  419f10:	6818      	ldr	r0, [r3, #0]
  419f12:	307c      	adds	r0, #124	; 0x7c
  419f14:	4b58      	ldr	r3, [pc, #352]	; (41a078 <list_init+0x310>)
  419f16:	6a1b      	ldr	r3, [r3, #32]
  419f18:	f013 0f02 	tst.w	r3, #2
  419f1c:	f000 81bf 	beq.w	41a29e <list_init+0x536>
  419f20:	f04f 32ff 	mov.w	r2, #4294967295
  419f24:	f248 11a9 	movw	r1, #33193	; 0x81a9
  419f28:	4b54      	ldr	r3, [pc, #336]	; (41a07c <list_init+0x314>)
  419f2a:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->list_btn, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  419f2c:	4b4e      	ldr	r3, [pc, #312]	; (41a068 <list_init+0x300>)
  419f2e:	6818      	ldr	r0, [r3, #0]
  419f30:	307c      	adds	r0, #124	; 0x7c
  419f32:	4b51      	ldr	r3, [pc, #324]	; (41a078 <list_init+0x310>)
  419f34:	6a1b      	ldr	r3, [r3, #32]
  419f36:	f013 0f02 	tst.w	r3, #2
  419f3a:	f000 81b3 	beq.w	41a2a4 <list_init+0x53c>
  419f3e:	f04f 0200 	mov.w	r2, #0
  419f42:	2305      	movs	r3, #5
  419f44:	f363 0202 	bfi	r2, r3, #0, #3
  419f48:	2315      	movs	r3, #21
  419f4a:	f363 02c7 	bfi	r2, r3, #3, #5
  419f4e:	f363 220c 	bfi	r2, r3, #8, #5
  419f52:	2302      	movs	r3, #2
  419f54:	f363 324f 	bfi	r2, r3, #13, #3
  419f58:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  419f5c:	4b47      	ldr	r3, [pc, #284]	; (41a07c <list_init+0x314>)
  419f5e:	4798      	blx	r3
    lv_style_set_border_side(&styles->list_btn, LV_STATE_DEFAULT, LV_BORDER_SIDE_BOTTOM);
  419f60:	4c41      	ldr	r4, [pc, #260]	; (41a068 <list_init+0x300>)
  419f62:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  419f64:	2201      	movs	r2, #1
  419f66:	2131      	movs	r1, #49	; 0x31
  419f68:	307c      	adds	r0, #124	; 0x7c
  419f6a:	4b41      	ldr	r3, [pc, #260]	; (41a070 <list_init+0x308>)
  419f6c:	4798      	blx	r3
    lv_style_set_border_color(&styles->list_btn, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  419f6e:	6820      	ldr	r0, [r4, #0]
  419f70:	307c      	adds	r0, #124	; 0x7c
  419f72:	4b41      	ldr	r3, [pc, #260]	; (41a078 <list_init+0x310>)
  419f74:	6a1b      	ldr	r3, [r3, #32]
  419f76:	f013 0f02 	tst.w	r3, #2
  419f7a:	f000 81a1 	beq.w	41a2c0 <list_init+0x558>
  419f7e:	f04f 0200 	mov.w	r2, #0
  419f82:	2306      	movs	r3, #6
  419f84:	f363 0202 	bfi	r2, r3, #0, #3
  419f88:	231a      	movs	r3, #26
  419f8a:	f363 02c7 	bfi	r2, r3, #3, #5
  419f8e:	231c      	movs	r3, #28
  419f90:	f363 220c 	bfi	r2, r3, #8, #5
  419f94:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  419f98:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  419f9c:	2139      	movs	r1, #57	; 0x39
  419f9e:	4d37      	ldr	r5, [pc, #220]	; (41a07c <list_init+0x314>)
  419fa0:	47a8      	blx	r5
    lv_style_set_border_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_primary);
  419fa2:	4c31      	ldr	r4, [pc, #196]	; (41a068 <list_init+0x300>)
  419fa4:	6820      	ldr	r0, [r4, #0]
  419fa6:	4e34      	ldr	r6, [pc, #208]	; (41a078 <list_init+0x310>)
  419fa8:	89b2      	ldrh	r2, [r6, #12]
  419faa:	f240 2139 	movw	r1, #569	; 0x239
  419fae:	307c      	adds	r0, #124	; 0x7c
  419fb0:	47a8      	blx	r5
    lv_style_set_border_width(&styles->list_btn, LV_STATE_DEFAULT, 1);
  419fb2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  419fb4:	2201      	movs	r2, #1
  419fb6:	2130      	movs	r1, #48	; 0x30
  419fb8:	307c      	adds	r0, #124	; 0x7c
  419fba:	4b2d      	ldr	r3, [pc, #180]	; (41a070 <list_init+0x308>)
  419fbc:	4798      	blx	r3
    lv_style_set_outline_color(&styles->list_btn, LV_STATE_FOCUSED, theme.color_secondary);
  419fbe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  419fc0:	89f2      	ldrh	r2, [r6, #14]
  419fc2:	f240 2149 	movw	r1, #585	; 0x249
  419fc6:	307c      	adds	r0, #124	; 0x7c
  419fc8:	47a8      	blx	r5
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  419fca:	6824      	ldr	r4, [r4, #0]
  419fcc:	347c      	adds	r4, #124	; 0x7c
  419fce:	6a33      	ldr	r3, [r6, #32]
  419fd0:	f013 0f20 	tst.w	r3, #32
  419fd4:	f000 8183 	beq.w	41a2de <list_init+0x576>
  419fd8:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  419fda:	f44f 7110 	mov.w	r1, #576	; 0x240
  419fde:	4620      	mov	r0, r4
  419fe0:	4b23      	ldr	r3, [pc, #140]	; (41a070 <list_init+0x308>)
  419fe2:	4798      	blx	r3
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  419fe4:	4b20      	ldr	r3, [pc, #128]	; (41a068 <list_init+0x300>)
  419fe6:	681c      	ldr	r4, [r3, #0]
  419fe8:	347c      	adds	r4, #124	; 0x7c
  419fea:	2000      	movs	r0, #0
  419fec:	4b25      	ldr	r3, [pc, #148]	; (41a084 <list_init+0x31c>)
  419fee:	4798      	blx	r3
  419ff0:	3028      	adds	r0, #40	; 0x28
  419ff2:	0040      	lsls	r0, r0, #1
  419ff4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  419ff8:	f280 8188 	bge.w	41a30c <list_init+0x5a4>
  419ffc:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
  41a000:	f240 2141 	movw	r1, #577	; 0x241
  41a004:	4620      	mov	r0, r4
  41a006:	4b1a      	ldr	r3, [pc, #104]	; (41a070 <list_init+0x308>)
  41a008:	4798      	blx	r3
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a00a:	4b17      	ldr	r3, [pc, #92]	; (41a068 <list_init+0x300>)
  41a00c:	681c      	ldr	r4, [r3, #0]
  41a00e:	347c      	adds	r4, #124	; 0x7c
  41a010:	2000      	movs	r0, #0
  41a012:	4b1d      	ldr	r3, [pc, #116]	; (41a088 <list_init+0x320>)
  41a014:	4798      	blx	r3
  41a016:	2801      	cmp	r0, #1
  41a018:	f240 8185 	bls.w	41a326 <list_init+0x5be>
  41a01c:	2000      	movs	r0, #0
  41a01e:	4b19      	ldr	r3, [pc, #100]	; (41a084 <list_init+0x31c>)
  41a020:	4798      	blx	r3
  41a022:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a026:	0040      	lsls	r0, r0, #1
  41a028:	3050      	adds	r0, #80	; 0x50
  41a02a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a02e:	f280 8193 	bge.w	41a358 <list_init+0x5f0>
  41a032:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a034:	2112      	movs	r1, #18
  41a036:	4620      	mov	r0, r4
  41a038:	4b0d      	ldr	r3, [pc, #52]	; (41a070 <list_init+0x308>)
  41a03a:	4798      	blx	r3
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a03c:	4b0a      	ldr	r3, [pc, #40]	; (41a068 <list_init+0x300>)
  41a03e:	681c      	ldr	r4, [r3, #0]
  41a040:	347c      	adds	r4, #124	; 0x7c
  41a042:	2000      	movs	r0, #0
  41a044:	4b10      	ldr	r3, [pc, #64]	; (41a088 <list_init+0x320>)
  41a046:	4798      	blx	r3
  41a048:	2801      	cmp	r0, #1
  41a04a:	f240 8194 	bls.w	41a376 <list_init+0x60e>
  41a04e:	2000      	movs	r0, #0
  41a050:	4b0c      	ldr	r3, [pc, #48]	; (41a084 <list_init+0x31c>)
  41a052:	4798      	blx	r3
  41a054:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a058:	0040      	lsls	r0, r0, #1
  41a05a:	3050      	adds	r0, #80	; 0x50
  41a05c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a060:	f280 81ac 	bge.w	41a3bc <list_init+0x654>
  41a064:	e012      	b.n	41a08c <list_init+0x324>
  41a066:	bf00      	nop
  41a068:	204147a8 	.word	0x204147a8
  41a06c:	00417885 	.word	0x00417885
  41a070:	00409c81 	.word	0x00409c81
  41a074:	00409fa1 	.word	0x00409fa1
  41a078:	204147ac 	.word	0x204147ac
  41a07c:	00409e11 	.word	0x00409e11
  41a080:	00415749 	.word	0x00415749
  41a084:	0041468d 	.word	0x0041468d
  41a088:	004146ad 	.word	0x004146ad
  41a08c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a08e:	2113      	movs	r1, #19
  41a090:	4620      	mov	r0, r4
  41a092:	4bc5      	ldr	r3, [pc, #788]	; (41a3a8 <list_init+0x640>)
  41a094:	4798      	blx	r3
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a096:	4bc5      	ldr	r3, [pc, #788]	; (41a3ac <list_init+0x644>)
  41a098:	681c      	ldr	r4, [r3, #0]
  41a09a:	347c      	adds	r4, #124	; 0x7c
  41a09c:	2000      	movs	r0, #0
  41a09e:	4bc4      	ldr	r3, [pc, #784]	; (41a3b0 <list_init+0x648>)
  41a0a0:	4798      	blx	r3
  41a0a2:	2801      	cmp	r0, #1
  41a0a4:	f240 8199 	bls.w	41a3da <list_init+0x672>
  41a0a8:	2000      	movs	r0, #0
  41a0aa:	4bc2      	ldr	r3, [pc, #776]	; (41a3b4 <list_init+0x64c>)
  41a0ac:	4798      	blx	r3
  41a0ae:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0b2:	0040      	lsls	r0, r0, #1
  41a0b4:	3050      	adds	r0, #80	; 0x50
  41a0b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0ba:	f280 81a7 	bge.w	41a40c <list_init+0x6a4>
  41a0be:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a0c0:	2110      	movs	r1, #16
  41a0c2:	4620      	mov	r0, r4
  41a0c4:	4bb8      	ldr	r3, [pc, #736]	; (41a3a8 <list_init+0x640>)
  41a0c6:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a0c8:	4bb8      	ldr	r3, [pc, #736]	; (41a3ac <list_init+0x644>)
  41a0ca:	681c      	ldr	r4, [r3, #0]
  41a0cc:	347c      	adds	r4, #124	; 0x7c
  41a0ce:	2000      	movs	r0, #0
  41a0d0:	4bb7      	ldr	r3, [pc, #732]	; (41a3b0 <list_init+0x648>)
  41a0d2:	4798      	blx	r3
  41a0d4:	2801      	cmp	r0, #1
  41a0d6:	f240 81a8 	bls.w	41a42a <list_init+0x6c2>
  41a0da:	2000      	movs	r0, #0
  41a0dc:	4bb5      	ldr	r3, [pc, #724]	; (41a3b4 <list_init+0x64c>)
  41a0de:	4798      	blx	r3
  41a0e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a0e4:	0040      	lsls	r0, r0, #1
  41a0e6:	3050      	adds	r0, #80	; 0x50
  41a0e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a0ec:	f280 81b6 	bge.w	41a45c <list_init+0x6f4>
  41a0f0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a0f2:	2111      	movs	r1, #17
  41a0f4:	4620      	mov	r0, r4
  41a0f6:	4bac      	ldr	r3, [pc, #688]	; (41a3a8 <list_init+0x640>)
  41a0f8:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a0fa:	4bac      	ldr	r3, [pc, #688]	; (41a3ac <list_init+0x644>)
  41a0fc:	681c      	ldr	r4, [r3, #0]
  41a0fe:	347c      	adds	r4, #124	; 0x7c
  41a100:	2000      	movs	r0, #0
  41a102:	4bab      	ldr	r3, [pc, #684]	; (41a3b0 <list_init+0x648>)
  41a104:	4798      	blx	r3
  41a106:	2801      	cmp	r0, #1
  41a108:	f240 81b7 	bls.w	41a47a <list_init+0x712>
  41a10c:	2000      	movs	r0, #0
  41a10e:	4ba9      	ldr	r3, [pc, #676]	; (41a3b4 <list_init+0x64c>)
  41a110:	4798      	blx	r3
  41a112:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a116:	0040      	lsls	r0, r0, #1
  41a118:	3050      	adds	r0, #80	; 0x50
  41a11a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a11e:	f280 81c5 	bge.w	41a4ac <list_init+0x744>
  41a122:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41a124:	2114      	movs	r1, #20
  41a126:	4620      	mov	r0, r4
  41a128:	4b9f      	ldr	r3, [pc, #636]	; (41a3a8 <list_init+0x640>)
  41a12a:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41a12c:	4b9f      	ldr	r3, [pc, #636]	; (41a3ac <list_init+0x644>)
  41a12e:	681c      	ldr	r4, [r3, #0]
  41a130:	347c      	adds	r4, #124	; 0x7c
  41a132:	2000      	movs	r0, #0
  41a134:	4b9e      	ldr	r3, [pc, #632]	; (41a3b0 <list_init+0x648>)
  41a136:	4798      	blx	r3
  41a138:	2801      	cmp	r0, #1
  41a13a:	f240 81c6 	bls.w	41a4ca <list_init+0x762>
  41a13e:	2000      	movs	r0, #0
  41a140:	4b9c      	ldr	r3, [pc, #624]	; (41a3b4 <list_init+0x64c>)
  41a142:	4798      	blx	r3
  41a144:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a148:	0040      	lsls	r0, r0, #1
  41a14a:	3050      	adds	r0, #80	; 0x50
  41a14c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a150:	f280 81d5 	bge.w	41a4fe <list_init+0x796>
  41a154:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41a158:	2104      	movs	r1, #4
  41a15a:	4620      	mov	r0, r4
  41a15c:	4b92      	ldr	r3, [pc, #584]	; (41a3a8 <list_init+0x640>)
  41a15e:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41a160:	4b92      	ldr	r3, [pc, #584]	; (41a3ac <list_init+0x644>)
  41a162:	681c      	ldr	r4, [r3, #0]
  41a164:	347c      	adds	r4, #124	; 0x7c
  41a166:	2000      	movs	r0, #0
  41a168:	4b92      	ldr	r3, [pc, #584]	; (41a3b4 <list_init+0x64c>)
  41a16a:	4798      	blx	r3
  41a16c:	3028      	adds	r0, #40	; 0x28
  41a16e:	0040      	lsls	r0, r0, #1
  41a170:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a174:	f280 81d2 	bge.w	41a51c <list_init+0x7b4>
  41a178:	f04f 32ff 	mov.w	r2, #4294967295
  41a17c:	f241 0104 	movw	r1, #4100	; 0x1004
  41a180:	4620      	mov	r0, r4
  41a182:	4b89      	ldr	r3, [pc, #548]	; (41a3a8 <list_init+0x640>)
  41a184:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41a186:	4b89      	ldr	r3, [pc, #548]	; (41a3ac <list_init+0x644>)
  41a188:	681c      	ldr	r4, [r3, #0]
  41a18a:	347c      	adds	r4, #124	; 0x7c
  41a18c:	2000      	movs	r0, #0
  41a18e:	4b89      	ldr	r3, [pc, #548]	; (41a3b4 <list_init+0x64c>)
  41a190:	4798      	blx	r3
  41a192:	3028      	adds	r0, #40	; 0x28
  41a194:	0040      	lsls	r0, r0, #1
  41a196:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a19a:	f280 81cc 	bge.w	41a536 <list_init+0x7ce>
  41a19e:	f04f 32ff 	mov.w	r2, #4294967295
  41a1a2:	f44f 7182 	mov.w	r1, #260	; 0x104
  41a1a6:	4620      	mov	r0, r4
  41a1a8:	4b7f      	ldr	r3, [pc, #508]	; (41a3a8 <list_init+0x640>)
  41a1aa:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41a1ac:	4b7f      	ldr	r3, [pc, #508]	; (41a3ac <list_init+0x644>)
  41a1ae:	681c      	ldr	r4, [r3, #0]
  41a1b0:	347c      	adds	r4, #124	; 0x7c
  41a1b2:	2000      	movs	r0, #0
  41a1b4:	4b7f      	ldr	r3, [pc, #508]	; (41a3b4 <list_init+0x64c>)
  41a1b6:	4798      	blx	r3
  41a1b8:	3028      	adds	r0, #40	; 0x28
  41a1ba:	0040      	lsls	r0, r0, #1
  41a1bc:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1c0:	f280 81c6 	bge.w	41a550 <list_init+0x7e8>
  41a1c4:	f04f 32ff 	mov.w	r2, #4294967295
  41a1c8:	f242 0104 	movw	r1, #8196	; 0x2004
  41a1cc:	4620      	mov	r0, r4
  41a1ce:	4b76      	ldr	r3, [pc, #472]	; (41a3a8 <list_init+0x640>)
  41a1d0:	4798      	blx	r3
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41a1d2:	4b76      	ldr	r3, [pc, #472]	; (41a3ac <list_init+0x644>)
  41a1d4:	681c      	ldr	r4, [r3, #0]
  41a1d6:	347c      	adds	r4, #124	; 0x7c
  41a1d8:	2000      	movs	r0, #0
  41a1da:	4b76      	ldr	r3, [pc, #472]	; (41a3b4 <list_init+0x64c>)
  41a1dc:	4798      	blx	r3
  41a1de:	3028      	adds	r0, #40	; 0x28
  41a1e0:	0040      	lsls	r0, r0, #1
  41a1e2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a1e6:	f280 81c0 	bge.w	41a56a <list_init+0x802>
  41a1ea:	f04f 32ff 	mov.w	r2, #4294967295
  41a1ee:	f44f 7101 	mov.w	r1, #516	; 0x204
  41a1f2:	4620      	mov	r0, r4
  41a1f4:	4c6c      	ldr	r4, [pc, #432]	; (41a3a8 <list_init+0x640>)
  41a1f6:	47a0      	blx	r4
    lv_style_set_transition_time(&styles->list_btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41a1f8:	4d6c      	ldr	r5, [pc, #432]	; (41a3ac <list_init+0x644>)
  41a1fa:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41a1fc:	2200      	movs	r2, #0
  41a1fe:	21b0      	movs	r1, #176	; 0xb0
  41a200:	307c      	adds	r0, #124	; 0x7c
  41a202:	47a0      	blx	r4
    lv_style_set_transition_prop_6(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41a204:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41a206:	2229      	movs	r2, #41	; 0x29
  41a208:	21b7      	movs	r1, #183	; 0xb7
  41a20a:	307c      	adds	r0, #124	; 0x7c
  41a20c:	47a0      	blx	r4
    lv_style_set_transition_prop_5(&styles->list_btn, LV_STATE_DEFAULT, LV_STYLE_TRANSFORM_WIDTH);
  41a20e:	6828      	ldr	r0, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41a210:	2204      	movs	r2, #4
  41a212:	21b6      	movs	r1, #182	; 0xb6
  41a214:	307c      	adds	r0, #124	; 0x7c
  41a216:	47a0      	blx	r4
  41a218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41a21a:	f04f 0200 	mov.w	r2, #0
  41a21e:	2303      	movs	r3, #3
  41a220:	f363 0202 	bfi	r2, r3, #0, #3
  41a224:	230b      	movs	r3, #11
  41a226:	f363 02c7 	bfi	r2, r3, #3, #5
  41a22a:	230e      	movs	r3, #14
  41a22c:	f363 220c 	bfi	r2, r3, #8, #5
  41a230:	f36f 324f 	bfc	r2, #13, #3
  41a234:	e5d0      	b.n	419dd8 <list_init+0x70>
  41a236:	f04f 0200 	mov.w	r2, #0
  41a23a:	2302      	movs	r3, #2
  41a23c:	f363 0202 	bfi	r2, r3, #0, #3
  41a240:	2309      	movs	r3, #9
  41a242:	f363 02c7 	bfi	r2, r3, #3, #5
  41a246:	230a      	movs	r3, #10
  41a248:	f363 220c 	bfi	r2, r3, #8, #5
  41a24c:	2303      	movs	r3, #3
  41a24e:	f363 324f 	bfi	r2, r3, #13, #3
  41a252:	e5d7      	b.n	419e04 <list_init+0x9c>
  41a254:	f04f 0200 	mov.w	r2, #0
  41a258:	2303      	movs	r3, #3
  41a25a:	f363 0202 	bfi	r2, r3, #0, #3
  41a25e:	230b      	movs	r3, #11
  41a260:	f363 02c7 	bfi	r2, r3, #3, #5
  41a264:	230e      	movs	r3, #14
  41a266:	f363 220c 	bfi	r2, r3, #8, #5
  41a26a:	f36f 324f 	bfc	r2, #13, #3
  41a26e:	e5d8      	b.n	419e22 <list_init+0xba>
  41a270:	f04f 32ff 	mov.w	r2, #4294967295
  41a274:	e602      	b.n	419e7c <list_init+0x114>
  41a276:	f04f 32ff 	mov.w	r2, #4294967295
  41a27a:	e60e      	b.n	419e9a <list_init+0x132>
  41a27c:	f04f 0200 	mov.w	r2, #0
  41a280:	2304      	movs	r3, #4
  41a282:	f363 0202 	bfi	r2, r3, #0, #3
  41a286:	2313      	movs	r3, #19
  41a288:	f363 02c7 	bfi	r2, r3, #3, #5
  41a28c:	f363 220c 	bfi	r2, r3, #8, #5
  41a290:	2306      	movs	r3, #6
  41a292:	f363 324f 	bfi	r2, r3, #13, #3
  41a296:	e61a      	b.n	419ece <list_init+0x166>
  41a298:	f04f 32ff 	mov.w	r2, #4294967295
  41a29c:	e633      	b.n	419f06 <list_init+0x19e>
  41a29e:	f04f 32ff 	mov.w	r2, #4294967295
  41a2a2:	e63f      	b.n	419f24 <list_init+0x1bc>
  41a2a4:	f04f 0200 	mov.w	r2, #0
  41a2a8:	2304      	movs	r3, #4
  41a2aa:	f363 0202 	bfi	r2, r3, #0, #3
  41a2ae:	2313      	movs	r3, #19
  41a2b0:	f363 02c7 	bfi	r2, r3, #3, #5
  41a2b4:	f363 220c 	bfi	r2, r3, #8, #5
  41a2b8:	2306      	movs	r3, #6
  41a2ba:	f363 324f 	bfi	r2, r3, #13, #3
  41a2be:	e64b      	b.n	419f58 <list_init+0x1f0>
  41a2c0:	f04f 0200 	mov.w	r2, #0
  41a2c4:	2304      	movs	r3, #4
  41a2c6:	f363 0202 	bfi	r2, r3, #0, #3
  41a2ca:	2310      	movs	r3, #16
  41a2cc:	f363 02c7 	bfi	r2, r3, #3, #5
  41a2d0:	2312      	movs	r3, #18
  41a2d2:	f363 220c 	bfi	r2, r3, #8, #5
  41a2d6:	2302      	movs	r3, #2
  41a2d8:	f363 324f 	bfi	r2, r3, #13, #3
  41a2dc:	e65e      	b.n	419f9c <list_init+0x234>
    lv_style_set_outline_width(&styles->list_btn, LV_STATE_FOCUSED, OUTLINE_WIDTH);
  41a2de:	2000      	movs	r0, #0
  41a2e0:	4b34      	ldr	r3, [pc, #208]	; (41a3b4 <list_init+0x64c>)
  41a2e2:	4798      	blx	r3
  41a2e4:	3028      	adds	r0, #40	; 0x28
  41a2e6:	0040      	lsls	r0, r0, #1
  41a2e8:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a2ec:	da01      	bge.n	41a2f2 <list_init+0x58a>
  41a2ee:	2201      	movs	r2, #1
  41a2f0:	e673      	b.n	419fda <list_init+0x272>
  41a2f2:	2000      	movs	r0, #0
  41a2f4:	4b2f      	ldr	r3, [pc, #188]	; (41a3b4 <list_init+0x64c>)
  41a2f6:	4798      	blx	r3
  41a2f8:	3028      	adds	r0, #40	; 0x28
  41a2fa:	0040      	lsls	r0, r0, #1
  41a2fc:	4b2e      	ldr	r3, [pc, #184]	; (41a3b8 <list_init+0x650>)
  41a2fe:	fb83 2300 	smull	r2, r3, r3, r0
  41a302:	17c2      	asrs	r2, r0, #31
  41a304:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a308:	b212      	sxth	r2, r2
  41a30a:	e666      	b.n	419fda <list_init+0x272>
    lv_style_set_outline_pad(&styles->list_btn, LV_STATE_FOCUSED, -BORDER_WIDTH);
  41a30c:	2000      	movs	r0, #0
  41a30e:	4b29      	ldr	r3, [pc, #164]	; (41a3b4 <list_init+0x64c>)
  41a310:	4798      	blx	r3
  41a312:	3028      	adds	r0, #40	; 0x28
  41a314:	0040      	lsls	r0, r0, #1
  41a316:	4b28      	ldr	r3, [pc, #160]	; (41a3b8 <list_init+0x650>)
  41a318:	fb83 2300 	smull	r2, r3, r3, r0
  41a31c:	17c2      	asrs	r2, r0, #31
  41a31e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a322:	b212      	sxth	r2, r2
  41a324:	e66c      	b.n	41a000 <list_init+0x298>
    lv_style_set_pad_left(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a326:	2000      	movs	r0, #0
  41a328:	4b22      	ldr	r3, [pc, #136]	; (41a3b4 <list_init+0x64c>)
  41a32a:	4798      	blx	r3
  41a32c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a330:	3050      	adds	r0, #80	; 0x50
  41a332:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a336:	da01      	bge.n	41a33c <list_init+0x5d4>
  41a338:	2201      	movs	r2, #1
  41a33a:	e67b      	b.n	41a034 <list_init+0x2cc>
  41a33c:	2000      	movs	r0, #0
  41a33e:	4b1d      	ldr	r3, [pc, #116]	; (41a3b4 <list_init+0x64c>)
  41a340:	4798      	blx	r3
  41a342:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a346:	3050      	adds	r0, #80	; 0x50
  41a348:	4b1b      	ldr	r3, [pc, #108]	; (41a3b8 <list_init+0x650>)
  41a34a:	fb83 2300 	smull	r2, r3, r3, r0
  41a34e:	17c2      	asrs	r2, r0, #31
  41a350:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a354:	b212      	sxth	r2, r2
  41a356:	e66d      	b.n	41a034 <list_init+0x2cc>
  41a358:	2000      	movs	r0, #0
  41a35a:	4b16      	ldr	r3, [pc, #88]	; (41a3b4 <list_init+0x64c>)
  41a35c:	4798      	blx	r3
  41a35e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a362:	0040      	lsls	r0, r0, #1
  41a364:	3050      	adds	r0, #80	; 0x50
  41a366:	4b14      	ldr	r3, [pc, #80]	; (41a3b8 <list_init+0x650>)
  41a368:	fb83 2300 	smull	r2, r3, r3, r0
  41a36c:	17c2      	asrs	r2, r0, #31
  41a36e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a372:	b212      	sxth	r2, r2
  41a374:	e65e      	b.n	41a034 <list_init+0x2cc>
    lv_style_set_pad_right(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a376:	2000      	movs	r0, #0
  41a378:	4b0e      	ldr	r3, [pc, #56]	; (41a3b4 <list_init+0x64c>)
  41a37a:	4798      	blx	r3
  41a37c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a380:	3050      	adds	r0, #80	; 0x50
  41a382:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a386:	da01      	bge.n	41a38c <list_init+0x624>
  41a388:	2201      	movs	r2, #1
  41a38a:	e680      	b.n	41a08e <list_init+0x326>
  41a38c:	2000      	movs	r0, #0
  41a38e:	4b09      	ldr	r3, [pc, #36]	; (41a3b4 <list_init+0x64c>)
  41a390:	4798      	blx	r3
  41a392:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a396:	3050      	adds	r0, #80	; 0x50
  41a398:	4b07      	ldr	r3, [pc, #28]	; (41a3b8 <list_init+0x650>)
  41a39a:	fb83 2300 	smull	r2, r3, r3, r0
  41a39e:	17c2      	asrs	r2, r0, #31
  41a3a0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a3a4:	b212      	sxth	r2, r2
  41a3a6:	e672      	b.n	41a08e <list_init+0x326>
  41a3a8:	00409c81 	.word	0x00409c81
  41a3ac:	204147a8 	.word	0x204147a8
  41a3b0:	004146ad 	.word	0x004146ad
  41a3b4:	0041468d 	.word	0x0041468d
  41a3b8:	66666667 	.word	0x66666667
  41a3bc:	2000      	movs	r0, #0
  41a3be:	4b71      	ldr	r3, [pc, #452]	; (41a584 <list_init+0x81c>)
  41a3c0:	4798      	blx	r3
  41a3c2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a3c6:	0040      	lsls	r0, r0, #1
  41a3c8:	3050      	adds	r0, #80	; 0x50
  41a3ca:	4b6f      	ldr	r3, [pc, #444]	; (41a588 <list_init+0x820>)
  41a3cc:	fb83 2300 	smull	r2, r3, r3, r0
  41a3d0:	17c2      	asrs	r2, r0, #31
  41a3d2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a3d6:	b212      	sxth	r2, r2
  41a3d8:	e659      	b.n	41a08e <list_init+0x326>
    lv_style_set_pad_top(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a3da:	2000      	movs	r0, #0
  41a3dc:	4b69      	ldr	r3, [pc, #420]	; (41a584 <list_init+0x81c>)
  41a3de:	4798      	blx	r3
  41a3e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a3e4:	3050      	adds	r0, #80	; 0x50
  41a3e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a3ea:	da01      	bge.n	41a3f0 <list_init+0x688>
  41a3ec:	2201      	movs	r2, #1
  41a3ee:	e667      	b.n	41a0c0 <list_init+0x358>
  41a3f0:	2000      	movs	r0, #0
  41a3f2:	4b64      	ldr	r3, [pc, #400]	; (41a584 <list_init+0x81c>)
  41a3f4:	4798      	blx	r3
  41a3f6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a3fa:	3050      	adds	r0, #80	; 0x50
  41a3fc:	4b62      	ldr	r3, [pc, #392]	; (41a588 <list_init+0x820>)
  41a3fe:	fb83 2300 	smull	r2, r3, r3, r0
  41a402:	17c2      	asrs	r2, r0, #31
  41a404:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a408:	b212      	sxth	r2, r2
  41a40a:	e659      	b.n	41a0c0 <list_init+0x358>
  41a40c:	2000      	movs	r0, #0
  41a40e:	4b5d      	ldr	r3, [pc, #372]	; (41a584 <list_init+0x81c>)
  41a410:	4798      	blx	r3
  41a412:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a416:	0040      	lsls	r0, r0, #1
  41a418:	3050      	adds	r0, #80	; 0x50
  41a41a:	4b5b      	ldr	r3, [pc, #364]	; (41a588 <list_init+0x820>)
  41a41c:	fb83 2300 	smull	r2, r3, r3, r0
  41a420:	17c2      	asrs	r2, r0, #31
  41a422:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a426:	b212      	sxth	r2, r2
  41a428:	e64a      	b.n	41a0c0 <list_init+0x358>
    lv_style_set_pad_bottom(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a42a:	2000      	movs	r0, #0
  41a42c:	4b55      	ldr	r3, [pc, #340]	; (41a584 <list_init+0x81c>)
  41a42e:	4798      	blx	r3
  41a430:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a434:	3050      	adds	r0, #80	; 0x50
  41a436:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a43a:	da01      	bge.n	41a440 <list_init+0x6d8>
  41a43c:	2201      	movs	r2, #1
  41a43e:	e658      	b.n	41a0f2 <list_init+0x38a>
  41a440:	2000      	movs	r0, #0
  41a442:	4b50      	ldr	r3, [pc, #320]	; (41a584 <list_init+0x81c>)
  41a444:	4798      	blx	r3
  41a446:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a44a:	3050      	adds	r0, #80	; 0x50
  41a44c:	4b4e      	ldr	r3, [pc, #312]	; (41a588 <list_init+0x820>)
  41a44e:	fb83 2300 	smull	r2, r3, r3, r0
  41a452:	17c2      	asrs	r2, r0, #31
  41a454:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a458:	b212      	sxth	r2, r2
  41a45a:	e64a      	b.n	41a0f2 <list_init+0x38a>
  41a45c:	2000      	movs	r0, #0
  41a45e:	4b49      	ldr	r3, [pc, #292]	; (41a584 <list_init+0x81c>)
  41a460:	4798      	blx	r3
  41a462:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a466:	0040      	lsls	r0, r0, #1
  41a468:	3050      	adds	r0, #80	; 0x50
  41a46a:	4b47      	ldr	r3, [pc, #284]	; (41a588 <list_init+0x820>)
  41a46c:	fb83 2300 	smull	r2, r3, r3, r0
  41a470:	17c2      	asrs	r2, r0, #31
  41a472:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a476:	b212      	sxth	r2, r2
  41a478:	e63b      	b.n	41a0f2 <list_init+0x38a>
    lv_style_set_pad_inner(&styles->list_btn, LV_STATE_DEFAULT, PAD_DEF);
  41a47a:	2000      	movs	r0, #0
  41a47c:	4b41      	ldr	r3, [pc, #260]	; (41a584 <list_init+0x81c>)
  41a47e:	4798      	blx	r3
  41a480:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a484:	3050      	adds	r0, #80	; 0x50
  41a486:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a48a:	da01      	bge.n	41a490 <list_init+0x728>
  41a48c:	2201      	movs	r2, #1
  41a48e:	e649      	b.n	41a124 <list_init+0x3bc>
  41a490:	2000      	movs	r0, #0
  41a492:	4b3c      	ldr	r3, [pc, #240]	; (41a584 <list_init+0x81c>)
  41a494:	4798      	blx	r3
  41a496:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a49a:	3050      	adds	r0, #80	; 0x50
  41a49c:	4b3a      	ldr	r3, [pc, #232]	; (41a588 <list_init+0x820>)
  41a49e:	fb83 2300 	smull	r2, r3, r3, r0
  41a4a2:	17c2      	asrs	r2, r0, #31
  41a4a4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4a8:	b212      	sxth	r2, r2
  41a4aa:	e63b      	b.n	41a124 <list_init+0x3bc>
  41a4ac:	2000      	movs	r0, #0
  41a4ae:	4b35      	ldr	r3, [pc, #212]	; (41a584 <list_init+0x81c>)
  41a4b0:	4798      	blx	r3
  41a4b2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4b6:	0040      	lsls	r0, r0, #1
  41a4b8:	3050      	adds	r0, #80	; 0x50
  41a4ba:	4b33      	ldr	r3, [pc, #204]	; (41a588 <list_init+0x820>)
  41a4bc:	fb83 2300 	smull	r2, r3, r3, r0
  41a4c0:	17c2      	asrs	r2, r0, #31
  41a4c2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a4c6:	b212      	sxth	r2, r2
  41a4c8:	e62c      	b.n	41a124 <list_init+0x3bc>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DEFAULT, - PAD_DEF);
  41a4ca:	2000      	movs	r0, #0
  41a4cc:	4b2d      	ldr	r3, [pc, #180]	; (41a584 <list_init+0x81c>)
  41a4ce:	4798      	blx	r3
  41a4d0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4d4:	3050      	adds	r0, #80	; 0x50
  41a4d6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a4da:	da02      	bge.n	41a4e2 <list_init+0x77a>
  41a4dc:	f04f 32ff 	mov.w	r2, #4294967295
  41a4e0:	e63a      	b.n	41a158 <list_init+0x3f0>
  41a4e2:	2000      	movs	r0, #0
  41a4e4:	4b27      	ldr	r3, [pc, #156]	; (41a584 <list_init+0x81c>)
  41a4e6:	4798      	blx	r3
  41a4e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a4ec:	3050      	adds	r0, #80	; 0x50
  41a4ee:	4b26      	ldr	r3, [pc, #152]	; (41a588 <list_init+0x820>)
  41a4f0:	fb83 2300 	smull	r2, r3, r3, r0
  41a4f4:	17c2      	asrs	r2, r0, #31
  41a4f6:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a4fa:	b212      	sxth	r2, r2
  41a4fc:	e62c      	b.n	41a158 <list_init+0x3f0>
  41a4fe:	2000      	movs	r0, #0
  41a500:	4b20      	ldr	r3, [pc, #128]	; (41a584 <list_init+0x81c>)
  41a502:	4798      	blx	r3
  41a504:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a508:	0040      	lsls	r0, r0, #1
  41a50a:	3050      	adds	r0, #80	; 0x50
  41a50c:	4b1e      	ldr	r3, [pc, #120]	; (41a588 <list_init+0x820>)
  41a50e:	fb83 2300 	smull	r2, r3, r3, r0
  41a512:	17c2      	asrs	r2, r0, #31
  41a514:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a518:	b212      	sxth	r2, r2
  41a51a:	e61d      	b.n	41a158 <list_init+0x3f0>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_PRESSED, -BORDER_WIDTH);
  41a51c:	2000      	movs	r0, #0
  41a51e:	4b19      	ldr	r3, [pc, #100]	; (41a584 <list_init+0x81c>)
  41a520:	4798      	blx	r3
  41a522:	3028      	adds	r0, #40	; 0x28
  41a524:	0040      	lsls	r0, r0, #1
  41a526:	4b18      	ldr	r3, [pc, #96]	; (41a588 <list_init+0x820>)
  41a528:	fb83 2300 	smull	r2, r3, r3, r0
  41a52c:	17c2      	asrs	r2, r0, #31
  41a52e:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a532:	b212      	sxth	r2, r2
  41a534:	e622      	b.n	41a17c <list_init+0x414>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_CHECKED, -BORDER_WIDTH);
  41a536:	2000      	movs	r0, #0
  41a538:	4b12      	ldr	r3, [pc, #72]	; (41a584 <list_init+0x81c>)
  41a53a:	4798      	blx	r3
  41a53c:	3028      	adds	r0, #40	; 0x28
  41a53e:	0040      	lsls	r0, r0, #1
  41a540:	4b11      	ldr	r3, [pc, #68]	; (41a588 <list_init+0x820>)
  41a542:	fb83 2300 	smull	r2, r3, r3, r0
  41a546:	17c2      	asrs	r2, r0, #31
  41a548:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a54c:	b212      	sxth	r2, r2
  41a54e:	e628      	b.n	41a1a2 <list_init+0x43a>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_DISABLED, -BORDER_WIDTH);
  41a550:	2000      	movs	r0, #0
  41a552:	4b0c      	ldr	r3, [pc, #48]	; (41a584 <list_init+0x81c>)
  41a554:	4798      	blx	r3
  41a556:	3028      	adds	r0, #40	; 0x28
  41a558:	0040      	lsls	r0, r0, #1
  41a55a:	4b0b      	ldr	r3, [pc, #44]	; (41a588 <list_init+0x820>)
  41a55c:	fb83 2300 	smull	r2, r3, r3, r0
  41a560:	17c2      	asrs	r2, r0, #31
  41a562:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a566:	b212      	sxth	r2, r2
  41a568:	e62e      	b.n	41a1c8 <list_init+0x460>
    lv_style_set_transform_width(&styles->list_btn, LV_STATE_FOCUSED, - BORDER_WIDTH);
  41a56a:	2000      	movs	r0, #0
  41a56c:	4b05      	ldr	r3, [pc, #20]	; (41a584 <list_init+0x81c>)
  41a56e:	4798      	blx	r3
  41a570:	3028      	adds	r0, #40	; 0x28
  41a572:	0040      	lsls	r0, r0, #1
  41a574:	4b04      	ldr	r3, [pc, #16]	; (41a588 <list_init+0x820>)
  41a576:	fb83 2300 	smull	r2, r3, r3, r0
  41a57a:	17c2      	asrs	r2, r0, #31
  41a57c:	eba2 12a3 	sub.w	r2, r2, r3, asr #6
  41a580:	b212      	sxth	r2, r2
  41a582:	e634      	b.n	41a1ee <list_init+0x486>
  41a584:	0041468d 	.word	0x0041468d
  41a588:	66666667 	.word	0x66666667

0041a58c <ddlist_init>:
{
  41a58c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->ddlist_page);
  41a58e:	4c48      	ldr	r4, [pc, #288]	; (41a6b0 <ddlist_init+0x124>)
  41a590:	6820      	ldr	r0, [r4, #0]
  41a592:	3058      	adds	r0, #88	; 0x58
  41a594:	4b47      	ldr	r3, [pc, #284]	; (41a6b4 <ddlist_init+0x128>)
  41a596:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41a598:	6824      	ldr	r4, [r4, #0]
  41a59a:	3458      	adds	r4, #88	; 0x58
  41a59c:	2000      	movs	r0, #0
  41a59e:	4b46      	ldr	r3, [pc, #280]	; (41a6b8 <ddlist_init+0x12c>)
  41a5a0:	4798      	blx	r3
  41a5a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a5a6:	0080      	lsls	r0, r0, #2
  41a5a8:	3050      	adds	r0, #80	; 0x50
  41a5aa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a5ae:	da4d      	bge.n	41a64c <ddlist_init+0xc0>
  41a5b0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41a5b2:	f248 0181 	movw	r1, #32897	; 0x8081
  41a5b6:	4620      	mov	r0, r4
  41a5b8:	4d40      	ldr	r5, [pc, #256]	; (41a6bc <ddlist_init+0x130>)
  41a5ba:	47a8      	blx	r5
    lv_style_set_clip_corner(&styles->ddlist_page, LV_STATE_DEFAULT, true);
  41a5bc:	4c3c      	ldr	r4, [pc, #240]	; (41a6b0 <ddlist_init+0x124>)
  41a5be:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41a5c0:	2201      	movs	r2, #1
  41a5c2:	2102      	movs	r1, #2
  41a5c4:	3058      	adds	r0, #88	; 0x58
  41a5c6:	47a8      	blx	r5
    style_init_reset(&styles->ddlist_sel);
  41a5c8:	6820      	ldr	r0, [r4, #0]
  41a5ca:	305c      	adds	r0, #92	; 0x5c
  41a5cc:	4b39      	ldr	r3, [pc, #228]	; (41a6b4 <ddlist_init+0x128>)
  41a5ce:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->ddlist_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a5d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a5d2:	22ff      	movs	r2, #255	; 0xff
  41a5d4:	212c      	movs	r1, #44	; 0x2c
  41a5d6:	305c      	adds	r0, #92	; 0x5c
  41a5d8:	4b39      	ldr	r3, [pc, #228]	; (41a6c0 <ddlist_init+0x134>)
  41a5da:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_DEFAULT, theme.color_primary);
  41a5dc:	6820      	ldr	r0, [r4, #0]
  41a5de:	4d39      	ldr	r5, [pc, #228]	; (41a6c4 <ddlist_init+0x138>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a5e0:	89aa      	ldrh	r2, [r5, #12]
  41a5e2:	2129      	movs	r1, #41	; 0x29
  41a5e4:	305c      	adds	r0, #92	; 0x5c
  41a5e6:	4b38      	ldr	r3, [pc, #224]	; (41a6c8 <ddlist_init+0x13c>)
  41a5e8:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex3(0xfff) : lv_color_hex3(0xfff));
  41a5ea:	6820      	ldr	r0, [r4, #0]
  41a5ec:	305c      	adds	r0, #92	; 0x5c
  41a5ee:	6a2b      	ldr	r3, [r5, #32]
  41a5f0:	f013 0f02 	tst.w	r3, #2
  41a5f4:	d039      	beq.n	41a66a <ddlist_init+0xde>
  41a5f6:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a5fa:	f248 0189 	movw	r1, #32905	; 0x8089
  41a5fe:	4b32      	ldr	r3, [pc, #200]	; (41a6c8 <ddlist_init+0x13c>)
  41a600:	4798      	blx	r3
    lv_style_set_bg_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_PR);
  41a602:	4b2b      	ldr	r3, [pc, #172]	; (41a6b0 <ddlist_init+0x124>)
  41a604:	6818      	ldr	r0, [r3, #0]
  41a606:	305c      	adds	r0, #92	; 0x5c
  41a608:	4b2e      	ldr	r3, [pc, #184]	; (41a6c4 <ddlist_init+0x138>)
  41a60a:	6a1b      	ldr	r3, [r3, #32]
  41a60c:	f013 0f02 	tst.w	r3, #2
  41a610:	d02e      	beq.n	41a670 <ddlist_init+0xe4>
  41a612:	f04f 0207 	mov.w	r2, #7
  41a616:	231d      	movs	r3, #29
  41a618:	f363 02c7 	bfi	r2, r3, #3, #5
  41a61c:	f363 220c 	bfi	r2, r3, #8, #5
  41a620:	2303      	movs	r3, #3
  41a622:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a626:	f241 0129 	movw	r1, #4137	; 0x1029
  41a62a:	4b27      	ldr	r3, [pc, #156]	; (41a6c8 <ddlist_init+0x13c>)
  41a62c:	4798      	blx	r3
    lv_style_set_text_color(&styles->ddlist_sel, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41a62e:	4b20      	ldr	r3, [pc, #128]	; (41a6b0 <ddlist_init+0x124>)
  41a630:	6818      	ldr	r0, [r3, #0]
  41a632:	305c      	adds	r0, #92	; 0x5c
  41a634:	4b23      	ldr	r3, [pc, #140]	; (41a6c4 <ddlist_init+0x138>)
  41a636:	6a1b      	ldr	r3, [r3, #32]
  41a638:	f013 0f02 	tst.w	r3, #2
  41a63c:	d127      	bne.n	41a68e <ddlist_init+0x102>
  41a63e:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a642:	f249 0189 	movw	r1, #37001	; 0x9089
  41a646:	4b20      	ldr	r3, [pc, #128]	; (41a6c8 <ddlist_init+0x13c>)
  41a648:	4798      	blx	r3
  41a64a:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->ddlist_page, LV_STATE_DEFAULT, LV_DPX(20));
  41a64c:	2000      	movs	r0, #0
  41a64e:	4b1a      	ldr	r3, [pc, #104]	; (41a6b8 <ddlist_init+0x12c>)
  41a650:	4798      	blx	r3
  41a652:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a656:	0080      	lsls	r0, r0, #2
  41a658:	3050      	adds	r0, #80	; 0x50
  41a65a:	4b1c      	ldr	r3, [pc, #112]	; (41a6cc <ddlist_init+0x140>)
  41a65c:	fb83 2300 	smull	r2, r3, r3, r0
  41a660:	17c2      	asrs	r2, r0, #31
  41a662:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a666:	b212      	sxth	r2, r2
  41a668:	e7a3      	b.n	41a5b2 <ddlist_init+0x26>
  41a66a:	f04f 32ff 	mov.w	r2, #4294967295
  41a66e:	e7c4      	b.n	41a5fa <ddlist_init+0x6e>
  41a670:	f04f 0200 	mov.w	r2, #0
  41a674:	2302      	movs	r3, #2
  41a676:	f363 0202 	bfi	r2, r3, #0, #3
  41a67a:	2309      	movs	r3, #9
  41a67c:	f363 02c7 	bfi	r2, r3, #3, #5
  41a680:	230a      	movs	r3, #10
  41a682:	f363 220c 	bfi	r2, r3, #8, #5
  41a686:	2303      	movs	r3, #3
  41a688:	f363 324f 	bfi	r2, r3, #13, #3
  41a68c:	e7cb      	b.n	41a626 <ddlist_init+0x9a>
  41a68e:	f04f 0200 	mov.w	r2, #0
  41a692:	2301      	movs	r3, #1
  41a694:	f363 0202 	bfi	r2, r3, #0, #3
  41a698:	2307      	movs	r3, #7
  41a69a:	f363 02c7 	bfi	r2, r3, #3, #5
  41a69e:	2308      	movs	r3, #8
  41a6a0:	f363 220c 	bfi	r2, r3, #8, #5
  41a6a4:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a6a8:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41a6ac:	e7c9      	b.n	41a642 <ddlist_init+0xb6>
  41a6ae:	bf00      	nop
  41a6b0:	204147a8 	.word	0x204147a8
  41a6b4:	00417885 	.word	0x00417885
  41a6b8:	0041468d 	.word	0x0041468d
  41a6bc:	00409c81 	.word	0x00409c81
  41a6c0:	00409fa1 	.word	0x00409fa1
  41a6c4:	204147ac 	.word	0x204147ac
  41a6c8:	00409e11 	.word	0x00409e11
  41a6cc:	66666667 	.word	0x66666667

0041a6d0 <roller_init>:
{
  41a6d0:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->roller_bg);
  41a6d2:	4c21      	ldr	r4, [pc, #132]	; (41a758 <roller_init+0x88>)
  41a6d4:	6820      	ldr	r0, [r4, #0]
  41a6d6:	308c      	adds	r0, #140	; 0x8c
  41a6d8:	4b20      	ldr	r3, [pc, #128]	; (41a75c <roller_init+0x8c>)
  41a6da:	4798      	blx	r3
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a6dc:	6824      	ldr	r4, [r4, #0]
  41a6de:	348c      	adds	r4, #140	; 0x8c
  41a6e0:	2000      	movs	r0, #0
  41a6e2:	4b1f      	ldr	r3, [pc, #124]	; (41a760 <roller_init+0x90>)
  41a6e4:	4798      	blx	r3
  41a6e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a6ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a6ee:	3050      	adds	r0, #80	; 0x50
  41a6f0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a6f4:	da1f      	bge.n	41a736 <roller_init+0x66>
  41a6f6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41a6f8:	f248 0181 	movw	r1, #32897	; 0x8081
  41a6fc:	4620      	mov	r0, r4
  41a6fe:	4b19      	ldr	r3, [pc, #100]	; (41a764 <roller_init+0x94>)
  41a700:	4798      	blx	r3
    style_init_reset(&styles->roller_sel);
  41a702:	4c15      	ldr	r4, [pc, #84]	; (41a758 <roller_init+0x88>)
  41a704:	6820      	ldr	r0, [r4, #0]
  41a706:	3090      	adds	r0, #144	; 0x90
  41a708:	4b14      	ldr	r3, [pc, #80]	; (41a75c <roller_init+0x8c>)
  41a70a:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->roller_sel, LV_STATE_DEFAULT, LV_OPA_COVER);
  41a70c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41a70e:	22ff      	movs	r2, #255	; 0xff
  41a710:	212c      	movs	r1, #44	; 0x2c
  41a712:	3090      	adds	r0, #144	; 0x90
  41a714:	4b14      	ldr	r3, [pc, #80]	; (41a768 <roller_init+0x98>)
  41a716:	4798      	blx	r3
    lv_style_set_bg_color(&styles->roller_sel, LV_STATE_DEFAULT, theme.color_primary);
  41a718:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41a71a:	4b14      	ldr	r3, [pc, #80]	; (41a76c <roller_init+0x9c>)
  41a71c:	899a      	ldrh	r2, [r3, #12]
  41a71e:	2129      	movs	r1, #41	; 0x29
  41a720:	3090      	adds	r0, #144	; 0x90
  41a722:	4d13      	ldr	r5, [pc, #76]	; (41a770 <roller_init+0xa0>)
  41a724:	47a8      	blx	r5
    lv_style_set_text_color(&styles->roller_sel, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  41a726:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41a728:	4b12      	ldr	r3, [pc, #72]	; (41a774 <roller_init+0xa4>)
  41a72a:	881a      	ldrh	r2, [r3, #0]
  41a72c:	f248 0189 	movw	r1, #32905	; 0x8089
  41a730:	3090      	adds	r0, #144	; 0x90
  41a732:	47a8      	blx	r5
  41a734:	bd38      	pop	{r3, r4, r5, pc}
    lv_style_set_text_line_space(&styles->roller_bg, LV_STATE_DEFAULT, LV_DPX(25));
  41a736:	2000      	movs	r0, #0
  41a738:	4b09      	ldr	r3, [pc, #36]	; (41a760 <roller_init+0x90>)
  41a73a:	4798      	blx	r3
  41a73c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41a744:	3050      	adds	r0, #80	; 0x50
  41a746:	4b0c      	ldr	r3, [pc, #48]	; (41a778 <roller_init+0xa8>)
  41a748:	fb83 2300 	smull	r2, r3, r3, r0
  41a74c:	17c2      	asrs	r2, r0, #31
  41a74e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a752:	b212      	sxth	r2, r2
  41a754:	e7d0      	b.n	41a6f8 <roller_init+0x28>
  41a756:	bf00      	nop
  41a758:	204147a8 	.word	0x204147a8
  41a75c:	00417885 	.word	0x00417885
  41a760:	0041468d 	.word	0x0041468d
  41a764:	00409c81 	.word	0x00409c81
  41a768:	00409fa1 	.word	0x00409fa1
  41a76c:	204147ac 	.word	0x204147ac
  41a770:	00409e11 	.word	0x00409e11
  41a774:	004297c8 	.word	0x004297c8
  41a778:	66666667 	.word	0x66666667

0041a77c <table_init>:
{
  41a77c:	b538      	push	{r3, r4, r5, lr}
    style_init_reset(&styles->table_cell);
  41a77e:	4c9d      	ldr	r4, [pc, #628]	; (41a9f4 <table_init+0x278>)
  41a780:	6820      	ldr	r0, [r4, #0]
  41a782:	30a4      	adds	r0, #164	; 0xa4
  41a784:	4b9c      	ldr	r3, [pc, #624]	; (41a9f8 <table_init+0x27c>)
  41a786:	4798      	blx	r3
    lv_style_set_border_color(&styles->table_cell, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41a788:	6820      	ldr	r0, [r4, #0]
  41a78a:	30a4      	adds	r0, #164	; 0xa4
  41a78c:	4b9b      	ldr	r3, [pc, #620]	; (41a9fc <table_init+0x280>)
  41a78e:	6a1b      	ldr	r3, [r3, #32]
  41a790:	f013 0f02 	tst.w	r3, #2
  41a794:	d07e      	beq.n	41a894 <table_init+0x118>
  41a796:	f04f 0200 	mov.w	r2, #0
  41a79a:	2306      	movs	r3, #6
  41a79c:	f363 0202 	bfi	r2, r3, #0, #3
  41a7a0:	231a      	movs	r3, #26
  41a7a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41a7a6:	231c      	movs	r3, #28
  41a7a8:	f363 220c 	bfi	r2, r3, #8, #5
  41a7ac:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41a7b0:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41a7b4:	2139      	movs	r1, #57	; 0x39
  41a7b6:	4b92      	ldr	r3, [pc, #584]	; (41aa00 <table_init+0x284>)
  41a7b8:	4798      	blx	r3
    lv_style_set_border_width(&styles->table_cell, LV_STATE_DEFAULT, 1);
  41a7ba:	4c8e      	ldr	r4, [pc, #568]	; (41a9f4 <table_init+0x278>)
  41a7bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41a7be:	2201      	movs	r2, #1
  41a7c0:	2130      	movs	r1, #48	; 0x30
  41a7c2:	30a4      	adds	r0, #164	; 0xa4
  41a7c4:	4d8f      	ldr	r5, [pc, #572]	; (41aa04 <table_init+0x288>)
  41a7c6:	47a8      	blx	r5
    lv_style_set_border_side(&styles->table_cell, LV_STATE_DEFAULT, LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM);
  41a7c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
  41a7ca:	2203      	movs	r2, #3
  41a7cc:	2131      	movs	r1, #49	; 0x31
  41a7ce:	30a4      	adds	r0, #164	; 0xa4
  41a7d0:	47a8      	blx	r5
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a7d2:	6824      	ldr	r4, [r4, #0]
  41a7d4:	34a4      	adds	r4, #164	; 0xa4
  41a7d6:	2000      	movs	r0, #0
  41a7d8:	4b8b      	ldr	r3, [pc, #556]	; (41aa08 <table_init+0x28c>)
  41a7da:	4798      	blx	r3
  41a7dc:	2801      	cmp	r0, #1
  41a7de:	d968      	bls.n	41a8b2 <table_init+0x136>
  41a7e0:	2000      	movs	r0, #0
  41a7e2:	4b8a      	ldr	r3, [pc, #552]	; (41aa0c <table_init+0x290>)
  41a7e4:	4798      	blx	r3
  41a7e6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a7ea:	0040      	lsls	r0, r0, #1
  41a7ec:	3050      	adds	r0, #80	; 0x50
  41a7ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a7f2:	da77      	bge.n	41a8e4 <table_init+0x168>
  41a7f4:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41a7f6:	2112      	movs	r1, #18
  41a7f8:	4620      	mov	r0, r4
  41a7fa:	4b82      	ldr	r3, [pc, #520]	; (41aa04 <table_init+0x288>)
  41a7fc:	4798      	blx	r3
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a7fe:	4b7d      	ldr	r3, [pc, #500]	; (41a9f4 <table_init+0x278>)
  41a800:	681c      	ldr	r4, [r3, #0]
  41a802:	34a4      	adds	r4, #164	; 0xa4
  41a804:	2000      	movs	r0, #0
  41a806:	4b80      	ldr	r3, [pc, #512]	; (41aa08 <table_init+0x28c>)
  41a808:	4798      	blx	r3
  41a80a:	2801      	cmp	r0, #1
  41a80c:	d979      	bls.n	41a902 <table_init+0x186>
  41a80e:	2000      	movs	r0, #0
  41a810:	4b7e      	ldr	r3, [pc, #504]	; (41aa0c <table_init+0x290>)
  41a812:	4798      	blx	r3
  41a814:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a818:	0040      	lsls	r0, r0, #1
  41a81a:	3050      	adds	r0, #80	; 0x50
  41a81c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a820:	f280 8088 	bge.w	41a934 <table_init+0x1b8>
  41a824:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41a826:	2113      	movs	r1, #19
  41a828:	4620      	mov	r0, r4
  41a82a:	4b76      	ldr	r3, [pc, #472]	; (41aa04 <table_init+0x288>)
  41a82c:	4798      	blx	r3
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a82e:	4b71      	ldr	r3, [pc, #452]	; (41a9f4 <table_init+0x278>)
  41a830:	681c      	ldr	r4, [r3, #0]
  41a832:	34a4      	adds	r4, #164	; 0xa4
  41a834:	2000      	movs	r0, #0
  41a836:	4b74      	ldr	r3, [pc, #464]	; (41aa08 <table_init+0x28c>)
  41a838:	4798      	blx	r3
  41a83a:	2801      	cmp	r0, #1
  41a83c:	f240 8089 	bls.w	41a952 <table_init+0x1d6>
  41a840:	2000      	movs	r0, #0
  41a842:	4b72      	ldr	r3, [pc, #456]	; (41aa0c <table_init+0x290>)
  41a844:	4798      	blx	r3
  41a846:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a84a:	0040      	lsls	r0, r0, #1
  41a84c:	3050      	adds	r0, #80	; 0x50
  41a84e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a852:	f280 8097 	bge.w	41a984 <table_init+0x208>
  41a856:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41a858:	2110      	movs	r1, #16
  41a85a:	4620      	mov	r0, r4
  41a85c:	4b69      	ldr	r3, [pc, #420]	; (41aa04 <table_init+0x288>)
  41a85e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a860:	4b64      	ldr	r3, [pc, #400]	; (41a9f4 <table_init+0x278>)
  41a862:	681c      	ldr	r4, [r3, #0]
  41a864:	34a4      	adds	r4, #164	; 0xa4
  41a866:	2000      	movs	r0, #0
  41a868:	4b67      	ldr	r3, [pc, #412]	; (41aa08 <table_init+0x28c>)
  41a86a:	4798      	blx	r3
  41a86c:	2801      	cmp	r0, #1
  41a86e:	f240 8098 	bls.w	41a9a2 <table_init+0x226>
  41a872:	2000      	movs	r0, #0
  41a874:	4b65      	ldr	r3, [pc, #404]	; (41aa0c <table_init+0x290>)
  41a876:	4798      	blx	r3
  41a878:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a87c:	0040      	lsls	r0, r0, #1
  41a87e:	3050      	adds	r0, #80	; 0x50
  41a880:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a884:	f280 80a6 	bge.w	41a9d4 <table_init+0x258>
  41a888:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41a88a:	2111      	movs	r1, #17
  41a88c:	4620      	mov	r0, r4
  41a88e:	4b5d      	ldr	r3, [pc, #372]	; (41aa04 <table_init+0x288>)
  41a890:	4798      	blx	r3
  41a892:	bd38      	pop	{r3, r4, r5, pc}
  41a894:	f04f 0200 	mov.w	r2, #0
  41a898:	2304      	movs	r3, #4
  41a89a:	f363 0202 	bfi	r2, r3, #0, #3
  41a89e:	2310      	movs	r3, #16
  41a8a0:	f363 02c7 	bfi	r2, r3, #3, #5
  41a8a4:	2312      	movs	r3, #18
  41a8a6:	f363 220c 	bfi	r2, r3, #8, #5
  41a8aa:	2302      	movs	r3, #2
  41a8ac:	f363 324f 	bfi	r2, r3, #13, #3
  41a8b0:	e780      	b.n	41a7b4 <table_init+0x38>
    lv_style_set_pad_left(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a8b2:	2000      	movs	r0, #0
  41a8b4:	4b55      	ldr	r3, [pc, #340]	; (41aa0c <table_init+0x290>)
  41a8b6:	4798      	blx	r3
  41a8b8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a8bc:	3050      	adds	r0, #80	; 0x50
  41a8be:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a8c2:	da01      	bge.n	41a8c8 <table_init+0x14c>
  41a8c4:	2201      	movs	r2, #1
  41a8c6:	e796      	b.n	41a7f6 <table_init+0x7a>
  41a8c8:	2000      	movs	r0, #0
  41a8ca:	4b50      	ldr	r3, [pc, #320]	; (41aa0c <table_init+0x290>)
  41a8cc:	4798      	blx	r3
  41a8ce:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a8d2:	3050      	adds	r0, #80	; 0x50
  41a8d4:	4b4e      	ldr	r3, [pc, #312]	; (41aa10 <table_init+0x294>)
  41a8d6:	fb83 2300 	smull	r2, r3, r3, r0
  41a8da:	17c2      	asrs	r2, r0, #31
  41a8dc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8e0:	b212      	sxth	r2, r2
  41a8e2:	e788      	b.n	41a7f6 <table_init+0x7a>
  41a8e4:	2000      	movs	r0, #0
  41a8e6:	4b49      	ldr	r3, [pc, #292]	; (41aa0c <table_init+0x290>)
  41a8e8:	4798      	blx	r3
  41a8ea:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a8ee:	0040      	lsls	r0, r0, #1
  41a8f0:	3050      	adds	r0, #80	; 0x50
  41a8f2:	4b47      	ldr	r3, [pc, #284]	; (41aa10 <table_init+0x294>)
  41a8f4:	fb83 2300 	smull	r2, r3, r3, r0
  41a8f8:	17c2      	asrs	r2, r0, #31
  41a8fa:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a8fe:	b212      	sxth	r2, r2
  41a900:	e779      	b.n	41a7f6 <table_init+0x7a>
    lv_style_set_pad_right(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a902:	2000      	movs	r0, #0
  41a904:	4b41      	ldr	r3, [pc, #260]	; (41aa0c <table_init+0x290>)
  41a906:	4798      	blx	r3
  41a908:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a90c:	3050      	adds	r0, #80	; 0x50
  41a90e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a912:	da01      	bge.n	41a918 <table_init+0x19c>
  41a914:	2201      	movs	r2, #1
  41a916:	e786      	b.n	41a826 <table_init+0xaa>
  41a918:	2000      	movs	r0, #0
  41a91a:	4b3c      	ldr	r3, [pc, #240]	; (41aa0c <table_init+0x290>)
  41a91c:	4798      	blx	r3
  41a91e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a922:	3050      	adds	r0, #80	; 0x50
  41a924:	4b3a      	ldr	r3, [pc, #232]	; (41aa10 <table_init+0x294>)
  41a926:	fb83 2300 	smull	r2, r3, r3, r0
  41a92a:	17c2      	asrs	r2, r0, #31
  41a92c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a930:	b212      	sxth	r2, r2
  41a932:	e778      	b.n	41a826 <table_init+0xaa>
  41a934:	2000      	movs	r0, #0
  41a936:	4b35      	ldr	r3, [pc, #212]	; (41aa0c <table_init+0x290>)
  41a938:	4798      	blx	r3
  41a93a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a93e:	0040      	lsls	r0, r0, #1
  41a940:	3050      	adds	r0, #80	; 0x50
  41a942:	4b33      	ldr	r3, [pc, #204]	; (41aa10 <table_init+0x294>)
  41a944:	fb83 2300 	smull	r2, r3, r3, r0
  41a948:	17c2      	asrs	r2, r0, #31
  41a94a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a94e:	b212      	sxth	r2, r2
  41a950:	e769      	b.n	41a826 <table_init+0xaa>
    lv_style_set_pad_top(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a952:	2000      	movs	r0, #0
  41a954:	4b2d      	ldr	r3, [pc, #180]	; (41aa0c <table_init+0x290>)
  41a956:	4798      	blx	r3
  41a958:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a95c:	3050      	adds	r0, #80	; 0x50
  41a95e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a962:	da01      	bge.n	41a968 <table_init+0x1ec>
  41a964:	2201      	movs	r2, #1
  41a966:	e777      	b.n	41a858 <table_init+0xdc>
  41a968:	2000      	movs	r0, #0
  41a96a:	4b28      	ldr	r3, [pc, #160]	; (41aa0c <table_init+0x290>)
  41a96c:	4798      	blx	r3
  41a96e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a972:	3050      	adds	r0, #80	; 0x50
  41a974:	4b26      	ldr	r3, [pc, #152]	; (41aa10 <table_init+0x294>)
  41a976:	fb83 2300 	smull	r2, r3, r3, r0
  41a97a:	17c2      	asrs	r2, r0, #31
  41a97c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a980:	b212      	sxth	r2, r2
  41a982:	e769      	b.n	41a858 <table_init+0xdc>
  41a984:	2000      	movs	r0, #0
  41a986:	4b21      	ldr	r3, [pc, #132]	; (41aa0c <table_init+0x290>)
  41a988:	4798      	blx	r3
  41a98a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a98e:	0040      	lsls	r0, r0, #1
  41a990:	3050      	adds	r0, #80	; 0x50
  41a992:	4b1f      	ldr	r3, [pc, #124]	; (41aa10 <table_init+0x294>)
  41a994:	fb83 2300 	smull	r2, r3, r3, r0
  41a998:	17c2      	asrs	r2, r0, #31
  41a99a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a99e:	b212      	sxth	r2, r2
  41a9a0:	e75a      	b.n	41a858 <table_init+0xdc>
    lv_style_set_pad_bottom(&styles->table_cell, LV_STATE_DEFAULT, PAD_DEF);
  41a9a2:	2000      	movs	r0, #0
  41a9a4:	4b19      	ldr	r3, [pc, #100]	; (41aa0c <table_init+0x290>)
  41a9a6:	4798      	blx	r3
  41a9a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a9ac:	3050      	adds	r0, #80	; 0x50
  41a9ae:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41a9b2:	da01      	bge.n	41a9b8 <table_init+0x23c>
  41a9b4:	2201      	movs	r2, #1
  41a9b6:	e768      	b.n	41a88a <table_init+0x10e>
  41a9b8:	2000      	movs	r0, #0
  41a9ba:	4b14      	ldr	r3, [pc, #80]	; (41aa0c <table_init+0x290>)
  41a9bc:	4798      	blx	r3
  41a9be:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a9c2:	3050      	adds	r0, #80	; 0x50
  41a9c4:	4b12      	ldr	r3, [pc, #72]	; (41aa10 <table_init+0x294>)
  41a9c6:	fb83 2300 	smull	r2, r3, r3, r0
  41a9ca:	17c2      	asrs	r2, r0, #31
  41a9cc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9d0:	b212      	sxth	r2, r2
  41a9d2:	e75a      	b.n	41a88a <table_init+0x10e>
  41a9d4:	2000      	movs	r0, #0
  41a9d6:	4b0d      	ldr	r3, [pc, #52]	; (41aa0c <table_init+0x290>)
  41a9d8:	4798      	blx	r3
  41a9da:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41a9de:	0040      	lsls	r0, r0, #1
  41a9e0:	3050      	adds	r0, #80	; 0x50
  41a9e2:	4b0b      	ldr	r3, [pc, #44]	; (41aa10 <table_init+0x294>)
  41a9e4:	fb83 2300 	smull	r2, r3, r3, r0
  41a9e8:	17c2      	asrs	r2, r0, #31
  41a9ea:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41a9ee:	b212      	sxth	r2, r2
  41a9f0:	e74b      	b.n	41a88a <table_init+0x10e>
  41a9f2:	bf00      	nop
  41a9f4:	204147a8 	.word	0x204147a8
  41a9f8:	00417885 	.word	0x00417885
  41a9fc:	204147ac 	.word	0x204147ac
  41aa00:	00409e11 	.word	0x00409e11
  41aa04:	00409c81 	.word	0x00409c81
  41aa08:	004146ad 	.word	0x004146ad
  41aa0c:	0041468d 	.word	0x0041468d
  41aa10:	66666667 	.word	0x66666667

0041aa14 <tabview_win_shared_init>:
{
  41aa14:	b570      	push	{r4, r5, r6, lr}
    style_init_reset(&styles->tabview_btns_bg);
  41aa16:	4cbe      	ldr	r4, [pc, #760]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41aa18:	6820      	ldr	r0, [r4, #0]
  41aa1a:	30ac      	adds	r0, #172	; 0xac
  41aa1c:	4bbd      	ldr	r3, [pc, #756]	; (41ad14 <tabview_win_shared_init+0x300>)
  41aa1e:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41aa20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41aa22:	22ff      	movs	r2, #255	; 0xff
  41aa24:	212c      	movs	r1, #44	; 0x2c
  41aa26:	30ac      	adds	r0, #172	; 0xac
  41aa28:	4bbb      	ldr	r3, [pc, #748]	; (41ad18 <tabview_win_shared_init+0x304>)
  41aa2a:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_BG);
  41aa2c:	6820      	ldr	r0, [r4, #0]
  41aa2e:	30ac      	adds	r0, #172	; 0xac
  41aa30:	4bba      	ldr	r3, [pc, #744]	; (41ad1c <tabview_win_shared_init+0x308>)
  41aa32:	6a1b      	ldr	r3, [r3, #32]
  41aa34:	f013 0f02 	tst.w	r3, #2
  41aa38:	f000 8198 	beq.w	41ad6c <tabview_win_shared_init+0x358>
  41aa3c:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41aa40:	2129      	movs	r1, #41	; 0x29
  41aa42:	4bb7      	ldr	r3, [pc, #732]	; (41ad20 <tabview_win_shared_init+0x30c>)
  41aa44:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns_bg, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41aa46:	4bb2      	ldr	r3, [pc, #712]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41aa48:	6818      	ldr	r0, [r3, #0]
  41aa4a:	30ac      	adds	r0, #172	; 0xac
  41aa4c:	4bb3      	ldr	r3, [pc, #716]	; (41ad1c <tabview_win_shared_init+0x308>)
  41aa4e:	6a1b      	ldr	r3, [r3, #32]
  41aa50:	f013 0f02 	tst.w	r3, #2
  41aa54:	f000 8198 	beq.w	41ad88 <tabview_win_shared_init+0x374>
  41aa58:	f04f 0200 	mov.w	r2, #0
  41aa5c:	2301      	movs	r3, #1
  41aa5e:	f363 0202 	bfi	r2, r3, #0, #3
  41aa62:	2307      	movs	r3, #7
  41aa64:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa68:	2308      	movs	r3, #8
  41aa6a:	f363 220c 	bfi	r2, r3, #8, #5
  41aa6e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41aa72:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41aa76:	f248 0189 	movw	r1, #32905	; 0x8089
  41aa7a:	4da9      	ldr	r5, [pc, #676]	; (41ad20 <tabview_win_shared_init+0x30c>)
  41aa7c:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->tabview_btns_bg, LV_STATE_DEFAULT, lv_color_hex(0x979a9f));
  41aa7e:	4ca4      	ldr	r4, [pc, #656]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41aa80:	6820      	ldr	r0, [r4, #0]
  41aa82:	f04f 0200 	mov.w	r2, #0
  41aa86:	2304      	movs	r3, #4
  41aa88:	f363 0202 	bfi	r2, r3, #0, #3
  41aa8c:	2312      	movs	r3, #18
  41aa8e:	f363 02c7 	bfi	r2, r3, #3, #5
  41aa92:	2313      	movs	r3, #19
  41aa94:	f363 220c 	bfi	r2, r3, #8, #5
  41aa98:	2306      	movs	r3, #6
  41aa9a:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41aa9e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41aaa2:	30ac      	adds	r0, #172	; 0xac
  41aaa4:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aaa6:	6824      	ldr	r4, [r4, #0]
  41aaa8:	34ac      	adds	r4, #172	; 0xac
  41aaaa:	2000      	movs	r0, #0
  41aaac:	4b9d      	ldr	r3, [pc, #628]	; (41ad24 <tabview_win_shared_init+0x310>)
  41aaae:	4798      	blx	r3
  41aab0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aab4:	3050      	adds	r0, #80	; 0x50
  41aab6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aaba:	f280 8171 	bge.w	41ada0 <tabview_win_shared_init+0x38c>
  41aabe:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41aac0:	2110      	movs	r1, #16
  41aac2:	4620      	mov	r0, r4
  41aac4:	4b98      	ldr	r3, [pc, #608]	; (41ad28 <tabview_win_shared_init+0x314>)
  41aac6:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aac8:	4b91      	ldr	r3, [pc, #580]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41aaca:	681c      	ldr	r4, [r3, #0]
  41aacc:	34ac      	adds	r4, #172	; 0xac
  41aace:	2000      	movs	r0, #0
  41aad0:	4b94      	ldr	r3, [pc, #592]	; (41ad24 <tabview_win_shared_init+0x310>)
  41aad2:	4798      	blx	r3
  41aad4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aad8:	3050      	adds	r0, #80	; 0x50
  41aada:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aade:	f280 816d 	bge.w	41adbc <tabview_win_shared_init+0x3a8>
  41aae2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41aae4:	2112      	movs	r1, #18
  41aae6:	4620      	mov	r0, r4
  41aae8:	4b8f      	ldr	r3, [pc, #572]	; (41ad28 <tabview_win_shared_init+0x314>)
  41aaea:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41aaec:	4b88      	ldr	r3, [pc, #544]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41aaee:	681c      	ldr	r4, [r3, #0]
  41aaf0:	34ac      	adds	r4, #172	; 0xac
  41aaf2:	2000      	movs	r0, #0
  41aaf4:	4b8b      	ldr	r3, [pc, #556]	; (41ad24 <tabview_win_shared_init+0x310>)
  41aaf6:	4798      	blx	r3
  41aaf8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41aafc:	3050      	adds	r0, #80	; 0x50
  41aafe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab02:	f280 8169 	bge.w	41add8 <tabview_win_shared_init+0x3c4>
  41ab06:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ab08:	2113      	movs	r1, #19
  41ab0a:	4620      	mov	r0, r4
  41ab0c:	4b86      	ldr	r3, [pc, #536]	; (41ad28 <tabview_win_shared_init+0x314>)
  41ab0e:	4798      	blx	r3
    style_init_reset(&styles->tabview_btns);
  41ab10:	4c7f      	ldr	r4, [pc, #508]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41ab12:	6820      	ldr	r0, [r4, #0]
  41ab14:	30a8      	adds	r0, #168	; 0xa8
  41ab16:	4b7f      	ldr	r3, [pc, #508]	; (41ad14 <tabview_win_shared_init+0x300>)
  41ab18:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_btns, LV_STATE_PRESSED, LV_OPA_50);
  41ab1a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41ab1c:	227f      	movs	r2, #127	; 0x7f
  41ab1e:	f241 012c 	movw	r1, #4140	; 0x102c
  41ab22:	30a8      	adds	r0, #168	; 0xa8
  41ab24:	4b7c      	ldr	r3, [pc, #496]	; (41ad18 <tabview_win_shared_init+0x304>)
  41ab26:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_btns, LV_STATE_PRESSED, lv_color_hex3(0x888));
  41ab28:	6820      	ldr	r0, [r4, #0]
  41ab2a:	f04f 0200 	mov.w	r2, #0
  41ab2e:	2304      	movs	r3, #4
  41ab30:	f363 0202 	bfi	r2, r3, #0, #3
  41ab34:	2311      	movs	r3, #17
  41ab36:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab3a:	f363 220c 	bfi	r2, r3, #8, #5
  41ab3e:	2302      	movs	r3, #2
  41ab40:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ab44:	f241 0129 	movw	r1, #4137	; 0x1029
  41ab48:	30a8      	adds	r0, #168	; 0xa8
  41ab4a:	4b75      	ldr	r3, [pc, #468]	; (41ad20 <tabview_win_shared_init+0x30c>)
  41ab4c:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_CHECKED, COLOR_SCR_TEXT);
  41ab4e:	6820      	ldr	r0, [r4, #0]
  41ab50:	30a8      	adds	r0, #168	; 0xa8
  41ab52:	4b72      	ldr	r3, [pc, #456]	; (41ad1c <tabview_win_shared_init+0x308>)
  41ab54:	6a1b      	ldr	r3, [r3, #32]
  41ab56:	f013 0f02 	tst.w	r3, #2
  41ab5a:	f000 814b 	beq.w	41adf4 <tabview_win_shared_init+0x3e0>
  41ab5e:	f04f 0200 	mov.w	r2, #0
  41ab62:	2301      	movs	r3, #1
  41ab64:	f363 0202 	bfi	r2, r3, #0, #3
  41ab68:	2307      	movs	r3, #7
  41ab6a:	f363 02c7 	bfi	r2, r3, #3, #5
  41ab6e:	2308      	movs	r3, #8
  41ab70:	f363 220c 	bfi	r2, r3, #8, #5
  41ab74:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41ab78:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41ab7c:	f248 1189 	movw	r1, #33161	; 0x8189
  41ab80:	4b67      	ldr	r3, [pc, #412]	; (41ad20 <tabview_win_shared_init+0x30c>)
  41ab82:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41ab84:	4b62      	ldr	r3, [pc, #392]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41ab86:	681c      	ldr	r4, [r3, #0]
  41ab88:	34a8      	adds	r4, #168	; 0xa8
  41ab8a:	2000      	movs	r0, #0
  41ab8c:	4b65      	ldr	r3, [pc, #404]	; (41ad24 <tabview_win_shared_init+0x310>)
  41ab8e:	4798      	blx	r3
  41ab90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ab94:	0080      	lsls	r0, r0, #2
  41ab96:	3050      	adds	r0, #80	; 0x50
  41ab98:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ab9c:	f280 8136 	bge.w	41ae0c <tabview_win_shared_init+0x3f8>
  41aba0:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41aba2:	2110      	movs	r1, #16
  41aba4:	4620      	mov	r0, r4
  41aba6:	4b60      	ldr	r3, [pc, #384]	; (41ad28 <tabview_win_shared_init+0x314>)
  41aba8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41abaa:	4b59      	ldr	r3, [pc, #356]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41abac:	681c      	ldr	r4, [r3, #0]
  41abae:	34a8      	adds	r4, #168	; 0xa8
  41abb0:	2000      	movs	r0, #0
  41abb2:	4b5c      	ldr	r3, [pc, #368]	; (41ad24 <tabview_win_shared_init+0x310>)
  41abb4:	4798      	blx	r3
  41abb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41abba:	0080      	lsls	r0, r0, #2
  41abbc:	3050      	adds	r0, #80	; 0x50
  41abbe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41abc2:	f280 8132 	bge.w	41ae2a <tabview_win_shared_init+0x416>
  41abc6:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41abc8:	2111      	movs	r1, #17
  41abca:	4620      	mov	r0, r4
  41abcc:	4b56      	ldr	r3, [pc, #344]	; (41ad28 <tabview_win_shared_init+0x314>)
  41abce:	4798      	blx	r3
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_FOCUSED, theme.color_primary);
  41abd0:	4c4f      	ldr	r4, [pc, #316]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41abd2:	6820      	ldr	r0, [r4, #0]
  41abd4:	4e51      	ldr	r6, [pc, #324]	; (41ad1c <tabview_win_shared_init+0x308>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41abd6:	89b2      	ldrh	r2, [r6, #12]
  41abd8:	f248 2189 	movw	r1, #33417	; 0x8289
  41abdc:	30a8      	adds	r0, #168	; 0xa8
  41abde:	4d50      	ldr	r5, [pc, #320]	; (41ad20 <tabview_win_shared_init+0x30c>)
  41abe0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->tabview_btns, LV_STATE_EDITED, theme.color_secondary);
  41abe2:	6820      	ldr	r0, [r4, #0]
  41abe4:	89f2      	ldrh	r2, [r6, #14]
  41abe6:	f248 4189 	movw	r1, #33929	; 0x8489
  41abea:	30a8      	adds	r0, #168	; 0xa8
  41abec:	47a8      	blx	r5
    style_init_reset(&styles->tabview_indic);
  41abee:	6820      	ldr	r0, [r4, #0]
  41abf0:	30b0      	adds	r0, #176	; 0xb0
  41abf2:	4b48      	ldr	r3, [pc, #288]	; (41ad14 <tabview_win_shared_init+0x300>)
  41abf4:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->tabview_indic, LV_STATE_DEFAULT, LV_OPA_COVER);
  41abf6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41abf8:	22ff      	movs	r2, #255	; 0xff
  41abfa:	212c      	movs	r1, #44	; 0x2c
  41abfc:	30b0      	adds	r0, #176	; 0xb0
  41abfe:	4b46      	ldr	r3, [pc, #280]	; (41ad18 <tabview_win_shared_init+0x304>)
  41ac00:	4798      	blx	r3
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_DEFAULT, theme.color_primary);
  41ac02:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41ac04:	89b2      	ldrh	r2, [r6, #12]
  41ac06:	2129      	movs	r1, #41	; 0x29
  41ac08:	30b0      	adds	r0, #176	; 0xb0
  41ac0a:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->tabview_indic, LV_STATE_EDITED, theme.color_secondary);
  41ac0c:	6820      	ldr	r0, [r4, #0]
  41ac0e:	89f2      	ldrh	r2, [r6, #14]
  41ac10:	f240 4129 	movw	r1, #1065	; 0x429
  41ac14:	30b0      	adds	r0, #176	; 0xb0
  41ac16:	47a8      	blx	r5
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41ac18:	6824      	ldr	r4, [r4, #0]
  41ac1a:	34b0      	adds	r4, #176	; 0xb0
  41ac1c:	2000      	movs	r0, #0
  41ac1e:	4b41      	ldr	r3, [pc, #260]	; (41ad24 <tabview_win_shared_init+0x310>)
  41ac20:	4798      	blx	r3
  41ac22:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ac26:	3050      	adds	r0, #80	; 0x50
  41ac28:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac2c:	f280 810c 	bge.w	41ae48 <tabview_win_shared_init+0x434>
  41ac30:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
  41ac32:	2103      	movs	r1, #3
  41ac34:	4620      	mov	r0, r4
  41ac36:	4d3c      	ldr	r5, [pc, #240]	; (41ad28 <tabview_win_shared_init+0x314>)
  41ac38:	47a8      	blx	r5
    lv_style_set_radius(&styles->tabview_indic, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41ac3a:	4c35      	ldr	r4, [pc, #212]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41ac3c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41ac3e:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41ac42:	2101      	movs	r1, #1
  41ac44:	30b0      	adds	r0, #176	; 0xb0
  41ac46:	47a8      	blx	r5
    style_init_reset(&styles->tabview_page_scrl);
  41ac48:	6820      	ldr	r0, [r4, #0]
  41ac4a:	30b4      	adds	r0, #180	; 0xb4
  41ac4c:	4b31      	ldr	r3, [pc, #196]	; (41ad14 <tabview_win_shared_init+0x300>)
  41ac4e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ac50:	6824      	ldr	r4, [r4, #0]
  41ac52:	34b4      	adds	r4, #180	; 0xb4
  41ac54:	2000      	movs	r0, #0
  41ac56:	4b35      	ldr	r3, [pc, #212]	; (41ad2c <tabview_win_shared_init+0x318>)
  41ac58:	4798      	blx	r3
  41ac5a:	2801      	cmp	r0, #1
  41ac5c:	f240 8102 	bls.w	41ae64 <tabview_win_shared_init+0x450>
  41ac60:	2000      	movs	r0, #0
  41ac62:	4b30      	ldr	r3, [pc, #192]	; (41ad24 <tabview_win_shared_init+0x310>)
  41ac64:	4798      	blx	r3
  41ac66:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac6a:	0040      	lsls	r0, r0, #1
  41ac6c:	3050      	adds	r0, #80	; 0x50
  41ac6e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ac72:	f280 8110 	bge.w	41ae96 <tabview_win_shared_init+0x482>
  41ac76:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ac78:	2110      	movs	r1, #16
  41ac7a:	4620      	mov	r0, r4
  41ac7c:	4b2a      	ldr	r3, [pc, #168]	; (41ad28 <tabview_win_shared_init+0x314>)
  41ac7e:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ac80:	4b23      	ldr	r3, [pc, #140]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41ac82:	681c      	ldr	r4, [r3, #0]
  41ac84:	34b4      	adds	r4, #180	; 0xb4
  41ac86:	2000      	movs	r0, #0
  41ac88:	4b28      	ldr	r3, [pc, #160]	; (41ad2c <tabview_win_shared_init+0x318>)
  41ac8a:	4798      	blx	r3
  41ac8c:	2801      	cmp	r0, #1
  41ac8e:	f240 8111 	bls.w	41aeb4 <tabview_win_shared_init+0x4a0>
  41ac92:	2000      	movs	r0, #0
  41ac94:	4b23      	ldr	r3, [pc, #140]	; (41ad24 <tabview_win_shared_init+0x310>)
  41ac96:	4798      	blx	r3
  41ac98:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ac9c:	0040      	lsls	r0, r0, #1
  41ac9e:	3050      	adds	r0, #80	; 0x50
  41aca0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aca4:	f280 811f 	bge.w	41aee6 <tabview_win_shared_init+0x4d2>
  41aca8:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41acaa:	2111      	movs	r1, #17
  41acac:	4620      	mov	r0, r4
  41acae:	4b1e      	ldr	r3, [pc, #120]	; (41ad28 <tabview_win_shared_init+0x314>)
  41acb0:	4798      	blx	r3
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41acb2:	4b17      	ldr	r3, [pc, #92]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41acb4:	681c      	ldr	r4, [r3, #0]
  41acb6:	34b4      	adds	r4, #180	; 0xb4
  41acb8:	2000      	movs	r0, #0
  41acba:	4b1c      	ldr	r3, [pc, #112]	; (41ad2c <tabview_win_shared_init+0x318>)
  41acbc:	4798      	blx	r3
  41acbe:	2801      	cmp	r0, #1
  41acc0:	f240 8120 	bls.w	41af04 <tabview_win_shared_init+0x4f0>
  41acc4:	2000      	movs	r0, #0
  41acc6:	4b17      	ldr	r3, [pc, #92]	; (41ad24 <tabview_win_shared_init+0x310>)
  41acc8:	4798      	blx	r3
  41acca:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41acce:	0040      	lsls	r0, r0, #1
  41acd0:	3050      	adds	r0, #80	; 0x50
  41acd2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41acd6:	f280 812e 	bge.w	41af36 <tabview_win_shared_init+0x522>
  41acda:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41acdc:	2112      	movs	r1, #18
  41acde:	4620      	mov	r0, r4
  41ace0:	4b11      	ldr	r3, [pc, #68]	; (41ad28 <tabview_win_shared_init+0x314>)
  41ace2:	4798      	blx	r3
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ace4:	4b0a      	ldr	r3, [pc, #40]	; (41ad10 <tabview_win_shared_init+0x2fc>)
  41ace6:	681c      	ldr	r4, [r3, #0]
  41ace8:	34b4      	adds	r4, #180	; 0xb4
  41acea:	2000      	movs	r0, #0
  41acec:	4b0f      	ldr	r3, [pc, #60]	; (41ad2c <tabview_win_shared_init+0x318>)
  41acee:	4798      	blx	r3
  41acf0:	2801      	cmp	r0, #1
  41acf2:	f240 812f 	bls.w	41af54 <tabview_win_shared_init+0x540>
  41acf6:	2000      	movs	r0, #0
  41acf8:	4b0a      	ldr	r3, [pc, #40]	; (41ad24 <tabview_win_shared_init+0x310>)
  41acfa:	4798      	blx	r3
  41acfc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad00:	0040      	lsls	r0, r0, #1
  41ad02:	3050      	adds	r0, #80	; 0x50
  41ad04:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad08:	f280 813d 	bge.w	41af86 <tabview_win_shared_init+0x572>
  41ad0c:	2201      	movs	r2, #1
  41ad0e:	e00f      	b.n	41ad30 <tabview_win_shared_init+0x31c>
  41ad10:	204147a8 	.word	0x204147a8
  41ad14:	00417885 	.word	0x00417885
  41ad18:	00409fa1 	.word	0x00409fa1
  41ad1c:	204147ac 	.word	0x204147ac
  41ad20:	00409e11 	.word	0x00409e11
  41ad24:	0041468d 	.word	0x0041468d
  41ad28:	00409c81 	.word	0x00409c81
  41ad2c:	004146ad 	.word	0x004146ad
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ad30:	2113      	movs	r1, #19
  41ad32:	4620      	mov	r0, r4
  41ad34:	4baf      	ldr	r3, [pc, #700]	; (41aff4 <tabview_win_shared_init+0x5e0>)
  41ad36:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ad38:	4baf      	ldr	r3, [pc, #700]	; (41aff8 <tabview_win_shared_init+0x5e4>)
  41ad3a:	681c      	ldr	r4, [r3, #0]
  41ad3c:	34b4      	adds	r4, #180	; 0xb4
  41ad3e:	2000      	movs	r0, #0
  41ad40:	4bae      	ldr	r3, [pc, #696]	; (41affc <tabview_win_shared_init+0x5e8>)
  41ad42:	4798      	blx	r3
  41ad44:	2801      	cmp	r0, #1
  41ad46:	f240 812d 	bls.w	41afa4 <tabview_win_shared_init+0x590>
  41ad4a:	2000      	movs	r0, #0
  41ad4c:	4bac      	ldr	r3, [pc, #688]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ad4e:	4798      	blx	r3
  41ad50:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ad54:	0040      	lsls	r0, r0, #1
  41ad56:	3050      	adds	r0, #80	; 0x50
  41ad58:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ad5c:	f280 813b 	bge.w	41afd6 <tabview_win_shared_init+0x5c2>
  41ad60:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ad62:	2114      	movs	r1, #20
  41ad64:	4620      	mov	r0, r4
  41ad66:	4ba3      	ldr	r3, [pc, #652]	; (41aff4 <tabview_win_shared_init+0x5e0>)
  41ad68:	4798      	blx	r3
  41ad6a:	bd70      	pop	{r4, r5, r6, pc}
  41ad6c:	f04f 0200 	mov.w	r2, #0
  41ad70:	2303      	movs	r3, #3
  41ad72:	f363 0202 	bfi	r2, r3, #0, #3
  41ad76:	230b      	movs	r3, #11
  41ad78:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad7c:	230e      	movs	r3, #14
  41ad7e:	f363 220c 	bfi	r2, r3, #8, #5
  41ad82:	f36f 324f 	bfc	r2, #13, #3
  41ad86:	e65b      	b.n	41aa40 <tabview_win_shared_init+0x2c>
  41ad88:	f04f 0207 	mov.w	r2, #7
  41ad8c:	231c      	movs	r3, #28
  41ad8e:	f363 02c7 	bfi	r2, r3, #3, #5
  41ad92:	231d      	movs	r3, #29
  41ad94:	f363 220c 	bfi	r2, r3, #8, #5
  41ad98:	2302      	movs	r3, #2
  41ad9a:	f363 324f 	bfi	r2, r3, #13, #3
  41ad9e:	e66a      	b.n	41aa76 <tabview_win_shared_init+0x62>
    lv_style_set_pad_top(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41ada0:	2000      	movs	r0, #0
  41ada2:	4b97      	ldr	r3, [pc, #604]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ada4:	4798      	blx	r3
  41ada6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41adaa:	3050      	adds	r0, #80	; 0x50
  41adac:	4b95      	ldr	r3, [pc, #596]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41adae:	fb83 2300 	smull	r2, r3, r3, r0
  41adb2:	17c2      	asrs	r2, r0, #31
  41adb4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41adb8:	b212      	sxth	r2, r2
  41adba:	e681      	b.n	41aac0 <tabview_win_shared_init+0xac>
    lv_style_set_pad_left(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41adbc:	2000      	movs	r0, #0
  41adbe:	4b90      	ldr	r3, [pc, #576]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41adc0:	4798      	blx	r3
  41adc2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41adc6:	3050      	adds	r0, #80	; 0x50
  41adc8:	4b8e      	ldr	r3, [pc, #568]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41adca:	fb83 2300 	smull	r2, r3, r3, r0
  41adce:	17c2      	asrs	r2, r0, #31
  41add0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41add4:	b212      	sxth	r2, r2
  41add6:	e685      	b.n	41aae4 <tabview_win_shared_init+0xd0>
    lv_style_set_pad_right(&styles->tabview_btns_bg, LV_STATE_DEFAULT, LV_DPX(7));
  41add8:	2000      	movs	r0, #0
  41adda:	4b89      	ldr	r3, [pc, #548]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41addc:	4798      	blx	r3
  41adde:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
  41ade2:	3050      	adds	r0, #80	; 0x50
  41ade4:	4b87      	ldr	r3, [pc, #540]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41ade6:	fb83 2300 	smull	r2, r3, r3, r0
  41adea:	17c2      	asrs	r2, r0, #31
  41adec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41adf0:	b212      	sxth	r2, r2
  41adf2:	e689      	b.n	41ab08 <tabview_win_shared_init+0xf4>
  41adf4:	f04f 0207 	mov.w	r2, #7
  41adf8:	231c      	movs	r3, #28
  41adfa:	f363 02c7 	bfi	r2, r3, #3, #5
  41adfe:	231d      	movs	r3, #29
  41ae00:	f363 220c 	bfi	r2, r3, #8, #5
  41ae04:	2302      	movs	r3, #2
  41ae06:	f363 324f 	bfi	r2, r3, #13, #3
  41ae0a:	e6b7      	b.n	41ab7c <tabview_win_shared_init+0x168>
    lv_style_set_pad_top(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41ae0c:	2000      	movs	r0, #0
  41ae0e:	4b7c      	ldr	r3, [pc, #496]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae10:	4798      	blx	r3
  41ae12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ae16:	0080      	lsls	r0, r0, #2
  41ae18:	3050      	adds	r0, #80	; 0x50
  41ae1a:	4b7a      	ldr	r3, [pc, #488]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41ae1c:	fb83 2300 	smull	r2, r3, r3, r0
  41ae20:	17c2      	asrs	r2, r0, #31
  41ae22:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae26:	b212      	sxth	r2, r2
  41ae28:	e6bb      	b.n	41aba2 <tabview_win_shared_init+0x18e>
    lv_style_set_pad_bottom(&styles->tabview_btns, LV_STATE_DEFAULT, LV_DPX(20));
  41ae2a:	2000      	movs	r0, #0
  41ae2c:	4b74      	ldr	r3, [pc, #464]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae2e:	4798      	blx	r3
  41ae30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ae34:	0080      	lsls	r0, r0, #2
  41ae36:	3050      	adds	r0, #80	; 0x50
  41ae38:	4b72      	ldr	r3, [pc, #456]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41ae3a:	fb83 2300 	smull	r2, r3, r3, r0
  41ae3e:	17c2      	asrs	r2, r0, #31
  41ae40:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae44:	b212      	sxth	r2, r2
  41ae46:	e6bf      	b.n	41abc8 <tabview_win_shared_init+0x1b4>
    lv_style_set_size(&styles->tabview_indic, LV_STATE_DEFAULT, LV_DPX(5));
  41ae48:	2000      	movs	r0, #0
  41ae4a:	4b6d      	ldr	r3, [pc, #436]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae4c:	4798      	blx	r3
  41ae4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41ae52:	3050      	adds	r0, #80	; 0x50
  41ae54:	4b6b      	ldr	r3, [pc, #428]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41ae56:	fb83 2300 	smull	r2, r3, r3, r0
  41ae5a:	17c2      	asrs	r2, r0, #31
  41ae5c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae60:	b212      	sxth	r2, r2
  41ae62:	e6e6      	b.n	41ac32 <tabview_win_shared_init+0x21e>
    lv_style_set_pad_top(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41ae64:	2000      	movs	r0, #0
  41ae66:	4b66      	ldr	r3, [pc, #408]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae68:	4798      	blx	r3
  41ae6a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae6e:	3050      	adds	r0, #80	; 0x50
  41ae70:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41ae74:	da01      	bge.n	41ae7a <tabview_win_shared_init+0x466>
  41ae76:	2201      	movs	r2, #1
  41ae78:	e6fe      	b.n	41ac78 <tabview_win_shared_init+0x264>
  41ae7a:	2000      	movs	r0, #0
  41ae7c:	4b60      	ldr	r3, [pc, #384]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae7e:	4798      	blx	r3
  41ae80:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41ae84:	3050      	adds	r0, #80	; 0x50
  41ae86:	4b5f      	ldr	r3, [pc, #380]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41ae88:	fb83 2300 	smull	r2, r3, r3, r0
  41ae8c:	17c2      	asrs	r2, r0, #31
  41ae8e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41ae92:	b212      	sxth	r2, r2
  41ae94:	e6f0      	b.n	41ac78 <tabview_win_shared_init+0x264>
  41ae96:	2000      	movs	r0, #0
  41ae98:	4b59      	ldr	r3, [pc, #356]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41ae9a:	4798      	blx	r3
  41ae9c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aea0:	0040      	lsls	r0, r0, #1
  41aea2:	3050      	adds	r0, #80	; 0x50
  41aea4:	4b57      	ldr	r3, [pc, #348]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41aea6:	fb83 2300 	smull	r2, r3, r3, r0
  41aeaa:	17c2      	asrs	r2, r0, #31
  41aeac:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aeb0:	b212      	sxth	r2, r2
  41aeb2:	e6e1      	b.n	41ac78 <tabview_win_shared_init+0x264>
    lv_style_set_pad_bottom(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41aeb4:	2000      	movs	r0, #0
  41aeb6:	4b52      	ldr	r3, [pc, #328]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41aeb8:	4798      	blx	r3
  41aeba:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aebe:	3050      	adds	r0, #80	; 0x50
  41aec0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41aec4:	da01      	bge.n	41aeca <tabview_win_shared_init+0x4b6>
  41aec6:	2201      	movs	r2, #1
  41aec8:	e6ef      	b.n	41acaa <tabview_win_shared_init+0x296>
  41aeca:	2000      	movs	r0, #0
  41aecc:	4b4c      	ldr	r3, [pc, #304]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41aece:	4798      	blx	r3
  41aed0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aed4:	3050      	adds	r0, #80	; 0x50
  41aed6:	4b4b      	ldr	r3, [pc, #300]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41aed8:	fb83 2300 	smull	r2, r3, r3, r0
  41aedc:	17c2      	asrs	r2, r0, #31
  41aede:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aee2:	b212      	sxth	r2, r2
  41aee4:	e6e1      	b.n	41acaa <tabview_win_shared_init+0x296>
  41aee6:	2000      	movs	r0, #0
  41aee8:	4b45      	ldr	r3, [pc, #276]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41aeea:	4798      	blx	r3
  41aeec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41aef0:	0040      	lsls	r0, r0, #1
  41aef2:	3050      	adds	r0, #80	; 0x50
  41aef4:	4b43      	ldr	r3, [pc, #268]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41aef6:	fb83 2300 	smull	r2, r3, r3, r0
  41aefa:	17c2      	asrs	r2, r0, #31
  41aefc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af00:	b212      	sxth	r2, r2
  41af02:	e6d2      	b.n	41acaa <tabview_win_shared_init+0x296>
    lv_style_set_pad_left(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41af04:	2000      	movs	r0, #0
  41af06:	4b3e      	ldr	r3, [pc, #248]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af08:	4798      	blx	r3
  41af0a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af0e:	3050      	adds	r0, #80	; 0x50
  41af10:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af14:	da01      	bge.n	41af1a <tabview_win_shared_init+0x506>
  41af16:	2201      	movs	r2, #1
  41af18:	e6e0      	b.n	41acdc <tabview_win_shared_init+0x2c8>
  41af1a:	2000      	movs	r0, #0
  41af1c:	4b38      	ldr	r3, [pc, #224]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af1e:	4798      	blx	r3
  41af20:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af24:	3050      	adds	r0, #80	; 0x50
  41af26:	4b37      	ldr	r3, [pc, #220]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41af28:	fb83 2300 	smull	r2, r3, r3, r0
  41af2c:	17c2      	asrs	r2, r0, #31
  41af2e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af32:	b212      	sxth	r2, r2
  41af34:	e6d2      	b.n	41acdc <tabview_win_shared_init+0x2c8>
  41af36:	2000      	movs	r0, #0
  41af38:	4b31      	ldr	r3, [pc, #196]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af3a:	4798      	blx	r3
  41af3c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af40:	0040      	lsls	r0, r0, #1
  41af42:	3050      	adds	r0, #80	; 0x50
  41af44:	4b2f      	ldr	r3, [pc, #188]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41af46:	fb83 2300 	smull	r2, r3, r3, r0
  41af4a:	17c2      	asrs	r2, r0, #31
  41af4c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af50:	b212      	sxth	r2, r2
  41af52:	e6c3      	b.n	41acdc <tabview_win_shared_init+0x2c8>
    lv_style_set_pad_right(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41af54:	2000      	movs	r0, #0
  41af56:	4b2a      	ldr	r3, [pc, #168]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af58:	4798      	blx	r3
  41af5a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af5e:	3050      	adds	r0, #80	; 0x50
  41af60:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41af64:	da01      	bge.n	41af6a <tabview_win_shared_init+0x556>
  41af66:	2201      	movs	r2, #1
  41af68:	e6e2      	b.n	41ad30 <tabview_win_shared_init+0x31c>
  41af6a:	2000      	movs	r0, #0
  41af6c:	4b24      	ldr	r3, [pc, #144]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af6e:	4798      	blx	r3
  41af70:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af74:	3050      	adds	r0, #80	; 0x50
  41af76:	4b23      	ldr	r3, [pc, #140]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41af78:	fb83 2300 	smull	r2, r3, r3, r0
  41af7c:	17c2      	asrs	r2, r0, #31
  41af7e:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41af82:	b212      	sxth	r2, r2
  41af84:	e6d4      	b.n	41ad30 <tabview_win_shared_init+0x31c>
  41af86:	2000      	movs	r0, #0
  41af88:	4b1d      	ldr	r3, [pc, #116]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41af8a:	4798      	blx	r3
  41af8c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41af90:	0040      	lsls	r0, r0, #1
  41af92:	3050      	adds	r0, #80	; 0x50
  41af94:	4b1b      	ldr	r3, [pc, #108]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41af96:	fb83 2300 	smull	r2, r3, r3, r0
  41af9a:	17c2      	asrs	r2, r0, #31
  41af9c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afa0:	b212      	sxth	r2, r2
  41afa2:	e6c5      	b.n	41ad30 <tabview_win_shared_init+0x31c>
    lv_style_set_pad_inner(&styles->tabview_page_scrl, LV_STATE_DEFAULT, PAD_DEF);
  41afa4:	2000      	movs	r0, #0
  41afa6:	4b16      	ldr	r3, [pc, #88]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41afa8:	4798      	blx	r3
  41afaa:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afae:	3050      	adds	r0, #80	; 0x50
  41afb0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41afb4:	da01      	bge.n	41afba <tabview_win_shared_init+0x5a6>
  41afb6:	2201      	movs	r2, #1
  41afb8:	e6d3      	b.n	41ad62 <tabview_win_shared_init+0x34e>
  41afba:	2000      	movs	r0, #0
  41afbc:	4b10      	ldr	r3, [pc, #64]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41afbe:	4798      	blx	r3
  41afc0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afc4:	3050      	adds	r0, #80	; 0x50
  41afc6:	4b0f      	ldr	r3, [pc, #60]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41afc8:	fb83 2300 	smull	r2, r3, r3, r0
  41afcc:	17c2      	asrs	r2, r0, #31
  41afce:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41afd2:	b212      	sxth	r2, r2
  41afd4:	e6c5      	b.n	41ad62 <tabview_win_shared_init+0x34e>
  41afd6:	2000      	movs	r0, #0
  41afd8:	4b09      	ldr	r3, [pc, #36]	; (41b000 <tabview_win_shared_init+0x5ec>)
  41afda:	4798      	blx	r3
  41afdc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41afe0:	0040      	lsls	r0, r0, #1
  41afe2:	3050      	adds	r0, #80	; 0x50
  41afe4:	4b07      	ldr	r3, [pc, #28]	; (41b004 <tabview_win_shared_init+0x5f0>)
  41afe6:	fb83 2300 	smull	r2, r3, r3, r0
  41afea:	17c2      	asrs	r2, r0, #31
  41afec:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41aff0:	b212      	sxth	r2, r2
  41aff2:	e6b6      	b.n	41ad62 <tabview_win_shared_init+0x34e>
  41aff4:	00409c81 	.word	0x00409c81
  41aff8:	204147a8 	.word	0x204147a8
  41affc:	004146ad 	.word	0x004146ad
  41b000:	0041468d 	.word	0x0041468d
  41b004:	66666667 	.word	0x66666667

0041b008 <led_init>:
{
  41b008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    style_init_reset(&styles->led);
  41b00c:	4c3a      	ldr	r4, [pc, #232]	; (41b0f8 <led_init+0xf0>)
  41b00e:	6820      	ldr	r0, [r4, #0]
  41b010:	3070      	adds	r0, #112	; 0x70
  41b012:	4b3a      	ldr	r3, [pc, #232]	; (41b0fc <led_init+0xf4>)
  41b014:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b016:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b018:	22ff      	movs	r2, #255	; 0xff
  41b01a:	212c      	movs	r1, #44	; 0x2c
  41b01c:	3070      	adds	r0, #112	; 0x70
  41b01e:	4d38      	ldr	r5, [pc, #224]	; (41b100 <led_init+0xf8>)
  41b020:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41b022:	6820      	ldr	r0, [r4, #0]
  41b024:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 41b114 <led_init+0x10c>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b028:	f8b8 200c 	ldrh.w	r2, [r8, #12]
  41b02c:	2129      	movs	r1, #41	; 0x29
  41b02e:	3070      	adds	r0, #112	; 0x70
  41b030:	4f34      	ldr	r7, [pc, #208]	; (41b104 <led_init+0xfc>)
  41b032:	47b8      	blx	r7
    lv_style_set_border_width(&styles->led, LV_STATE_DEFAULT, 2);
  41b034:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b036:	2202      	movs	r2, #2
  41b038:	2130      	movs	r1, #48	; 0x30
  41b03a:	3070      	adds	r0, #112	; 0x70
  41b03c:	4e32      	ldr	r6, [pc, #200]	; (41b108 <led_init+0x100>)
  41b03e:	47b0      	blx	r6
    lv_style_set_border_opa(&styles->led, LV_STATE_DEFAULT, LV_OPA_50);
  41b040:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41b042:	227f      	movs	r2, #127	; 0x7f
  41b044:	213c      	movs	r1, #60	; 0x3c
  41b046:	3070      	adds	r0, #112	; 0x70
  41b048:	47a8      	blx	r5
    lv_style_set_border_color(&styles->led, LV_STATE_DEFAULT, lv_color_lighten(theme.color_primary, LV_OPA_30));
  41b04a:	6825      	ldr	r5, [r4, #0]
  41b04c:	3570      	adds	r5, #112	; 0x70
  41b04e:	214c      	movs	r1, #76	; 0x4c
  41b050:	f8b8 000c 	ldrh.w	r0, [r8, #12]
  41b054:	4b2d      	ldr	r3, [pc, #180]	; (41b10c <led_init+0x104>)
  41b056:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b058:	4602      	mov	r2, r0
  41b05a:	2139      	movs	r1, #57	; 0x39
  41b05c:	4628      	mov	r0, r5
  41b05e:	47b8      	blx	r7
    lv_style_set_radius(&styles->led, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b060:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b062:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b066:	2101      	movs	r1, #1
  41b068:	3070      	adds	r0, #112	; 0x70
  41b06a:	47b0      	blx	r6
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41b06c:	6824      	ldr	r4, [r4, #0]
  41b06e:	3470      	adds	r4, #112	; 0x70
  41b070:	2000      	movs	r0, #0
  41b072:	4b27      	ldr	r3, [pc, #156]	; (41b110 <led_init+0x108>)
  41b074:	4798      	blx	r3
  41b076:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b07a:	3050      	adds	r0, #80	; 0x50
  41b07c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b080:	da1e      	bge.n	41b0c0 <led_init+0xb8>
  41b082:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
  41b084:	2150      	movs	r1, #80	; 0x50
  41b086:	4620      	mov	r0, r4
  41b088:	4b1f      	ldr	r3, [pc, #124]	; (41b108 <led_init+0x100>)
  41b08a:	4798      	blx	r3
    lv_style_set_shadow_color(&styles->led, LV_STATE_DEFAULT, theme.color_primary);
  41b08c:	4c1a      	ldr	r4, [pc, #104]	; (41b0f8 <led_init+0xf0>)
  41b08e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_COLOR, shadow_color, lv_color_t, _color, nonscalar)
  41b090:	4b20      	ldr	r3, [pc, #128]	; (41b114 <led_init+0x10c>)
  41b092:	899a      	ldrh	r2, [r3, #12]
  41b094:	2159      	movs	r1, #89	; 0x59
  41b096:	3070      	adds	r0, #112	; 0x70
  41b098:	4b1a      	ldr	r3, [pc, #104]	; (41b104 <led_init+0xfc>)
  41b09a:	4798      	blx	r3
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41b09c:	6824      	ldr	r4, [r4, #0]
  41b09e:	3470      	adds	r4, #112	; 0x70
  41b0a0:	2000      	movs	r0, #0
  41b0a2:	4b1b      	ldr	r3, [pc, #108]	; (41b110 <led_init+0x108>)
  41b0a4:	4798      	blx	r3
  41b0a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b0aa:	3050      	adds	r0, #80	; 0x50
  41b0ac:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b0b0:	da14      	bge.n	41b0dc <led_init+0xd4>
  41b0b2:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
  41b0b4:	2153      	movs	r1, #83	; 0x53
  41b0b6:	4620      	mov	r0, r4
  41b0b8:	4b13      	ldr	r3, [pc, #76]	; (41b108 <led_init+0x100>)
  41b0ba:	4798      	blx	r3
  41b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    lv_style_set_shadow_width(&styles->led, LV_STATE_DEFAULT, LV_DPX(15));
  41b0c0:	2000      	movs	r0, #0
  41b0c2:	4b13      	ldr	r3, [pc, #76]	; (41b110 <led_init+0x108>)
  41b0c4:	4798      	blx	r3
  41b0c6:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b0ca:	3050      	adds	r0, #80	; 0x50
  41b0cc:	4b12      	ldr	r3, [pc, #72]	; (41b118 <led_init+0x110>)
  41b0ce:	fb83 2300 	smull	r2, r3, r3, r0
  41b0d2:	17c2      	asrs	r2, r0, #31
  41b0d4:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0d8:	b212      	sxth	r2, r2
  41b0da:	e7d3      	b.n	41b084 <led_init+0x7c>
    lv_style_set_shadow_spread(&styles->led, LV_STATE_DEFAULT, LV_DPX(5));
  41b0dc:	2000      	movs	r0, #0
  41b0de:	4b0c      	ldr	r3, [pc, #48]	; (41b110 <led_init+0x108>)
  41b0e0:	4798      	blx	r3
  41b0e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41b0e6:	3050      	adds	r0, #80	; 0x50
  41b0e8:	4b0b      	ldr	r3, [pc, #44]	; (41b118 <led_init+0x110>)
  41b0ea:	fb83 2300 	smull	r2, r3, r3, r0
  41b0ee:	17c2      	asrs	r2, r0, #31
  41b0f0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41b0f4:	b212      	sxth	r2, r2
  41b0f6:	e7dd      	b.n	41b0b4 <led_init+0xac>
  41b0f8:	204147a8 	.word	0x204147a8
  41b0fc:	00417885 	.word	0x00417885
  41b100:	00409fa1 	.word	0x00409fa1
  41b104:	00409e11 	.word	0x00409e11
  41b108:	00409c81 	.word	0x00409c81
  41b10c:	004156b1 	.word	0x004156b1
  41b110:	0041468d 	.word	0x0041468d
  41b114:	204147ac 	.word	0x204147ac
  41b118:	66666667 	.word	0x66666667

0041b11c <basic_init>:
{
  41b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    style_init_reset(&styles->scr);
  41b11e:	4cc2      	ldr	r4, [pc, #776]	; (41b428 <basic_init+0x30c>)
  41b120:	6820      	ldr	r0, [r4, #0]
  41b122:	4bc2      	ldr	r3, [pc, #776]	; (41b42c <basic_init+0x310>)
  41b124:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b126:	22ff      	movs	r2, #255	; 0xff
  41b128:	212c      	movs	r1, #44	; 0x2c
  41b12a:	6820      	ldr	r0, [r4, #0]
  41b12c:	4bc0      	ldr	r3, [pc, #768]	; (41b430 <basic_init+0x314>)
  41b12e:	4798      	blx	r3
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR);
  41b130:	6820      	ldr	r0, [r4, #0]
  41b132:	4bc0      	ldr	r3, [pc, #768]	; (41b434 <basic_init+0x318>)
  41b134:	6a1b      	ldr	r3, [r3, #32]
  41b136:	f013 0f02 	tst.w	r3, #2
  41b13a:	f000 8742 	beq.w	41bfc2 <basic_init+0xea6>
  41b13e:	f04f 0207 	mov.w	r2, #7
  41b142:	231d      	movs	r3, #29
  41b144:	f363 02c7 	bfi	r2, r3, #3, #5
  41b148:	231e      	movs	r3, #30
  41b14a:	f363 220c 	bfi	r2, r3, #8, #5
  41b14e:	2303      	movs	r3, #3
  41b150:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b154:	2129      	movs	r1, #41	; 0x29
  41b156:	4bb8      	ldr	r3, [pc, #736]	; (41b438 <basic_init+0x31c>)
  41b158:	4798      	blx	r3
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41b15a:	4bb3      	ldr	r3, [pc, #716]	; (41b428 <basic_init+0x30c>)
  41b15c:	6818      	ldr	r0, [r3, #0]
  41b15e:	4bb5      	ldr	r3, [pc, #724]	; (41b434 <basic_init+0x318>)
  41b160:	6a1b      	ldr	r3, [r3, #32]
  41b162:	f013 0f02 	tst.w	r3, #2
  41b166:	f000 873b 	beq.w	41bfe0 <basic_init+0xec4>
  41b16a:	f04f 0200 	mov.w	r2, #0
  41b16e:	2301      	movs	r3, #1
  41b170:	f363 0202 	bfi	r2, r3, #0, #3
  41b174:	2307      	movs	r3, #7
  41b176:	f363 02c7 	bfi	r2, r3, #3, #5
  41b17a:	2308      	movs	r3, #8
  41b17c:	f363 220c 	bfi	r2, r3, #8, #5
  41b180:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b184:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b188:	f248 0189 	movw	r1, #32905	; 0x8089
  41b18c:	4baa      	ldr	r3, [pc, #680]	; (41b438 <basic_init+0x31c>)
  41b18e:	4798      	blx	r3
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41b190:	4ba5      	ldr	r3, [pc, #660]	; (41b428 <basic_init+0x30c>)
  41b192:	6818      	ldr	r0, [r3, #0]
  41b194:	4ba7      	ldr	r3, [pc, #668]	; (41b434 <basic_init+0x318>)
  41b196:	6a1b      	ldr	r3, [r3, #32]
  41b198:	f013 0f02 	tst.w	r3, #2
  41b19c:	f000 872d 	beq.w	41bffa <basic_init+0xede>
  41b1a0:	f04f 0200 	mov.w	r2, #0
  41b1a4:	2301      	movs	r3, #1
  41b1a6:	f363 0202 	bfi	r2, r3, #0, #3
  41b1aa:	2307      	movs	r3, #7
  41b1ac:	f363 02c7 	bfi	r2, r3, #3, #5
  41b1b0:	2308      	movs	r3, #8
  41b1b2:	f363 220c 	bfi	r2, r3, #8, #5
  41b1b6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b1ba:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b1be:	2179      	movs	r1, #121	; 0x79
  41b1c0:	4b9d      	ldr	r3, [pc, #628]	; (41b438 <basic_init+0x31c>)
  41b1c2:	4798      	blx	r3
    lv_style_set_text_sel_color(&styles->scr, LV_STATE_DEFAULT, COLOR_SCR_TEXT);
  41b1c4:	4b98      	ldr	r3, [pc, #608]	; (41b428 <basic_init+0x30c>)
  41b1c6:	6818      	ldr	r0, [r3, #0]
  41b1c8:	4b9a      	ldr	r3, [pc, #616]	; (41b434 <basic_init+0x318>)
  41b1ca:	6a1b      	ldr	r3, [r3, #32]
  41b1cc:	f013 0f02 	tst.w	r3, #2
  41b1d0:	f000 8720 	beq.w	41c014 <basic_init+0xef8>
  41b1d4:	f04f 0200 	mov.w	r2, #0
  41b1d8:	2301      	movs	r3, #1
  41b1da:	f363 0202 	bfi	r2, r3, #0, #3
  41b1de:	2307      	movs	r3, #7
  41b1e0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b1e4:	2308      	movs	r3, #8
  41b1e6:	f363 220c 	bfi	r2, r3, #8, #5
  41b1ea:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b1ee:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
  41b1f2:	f248 018a 	movw	r1, #32906	; 0x808a
  41b1f6:	4e90      	ldr	r6, [pc, #576]	; (41b438 <basic_init+0x31c>)
  41b1f8:	47b0      	blx	r6
    lv_style_set_text_sel_bg_color(&styles->scr, LV_STATE_DEFAULT, theme.color_primary);
  41b1fa:	4c8b      	ldr	r4, [pc, #556]	; (41b428 <basic_init+0x30c>)
  41b1fc:	4d8d      	ldr	r5, [pc, #564]	; (41b434 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_BG_COLOR, text_sel_bg_color, lv_color_t, _color, nonscalar)
  41b1fe:	89aa      	ldrh	r2, [r5, #12]
  41b200:	f248 018b 	movw	r1, #32907	; 0x808b
  41b204:	6820      	ldr	r0, [r4, #0]
  41b206:	47b0      	blx	r6
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41b208:	696a      	ldr	r2, [r5, #20]
  41b20a:	217e      	movs	r1, #126	; 0x7e
  41b20c:	6820      	ldr	r0, [r4, #0]
  41b20e:	4b8b      	ldr	r3, [pc, #556]	; (41b43c <basic_init+0x320>)
  41b210:	4798      	blx	r3
    style_init_reset(&styles->bg);
  41b212:	6820      	ldr	r0, [r4, #0]
  41b214:	3004      	adds	r0, #4
  41b216:	4b85      	ldr	r3, [pc, #532]	; (41b42c <basic_init+0x310>)
  41b218:	4798      	blx	r3
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41b21a:	6824      	ldr	r4, [r4, #0]
  41b21c:	3404      	adds	r4, #4
  41b21e:	2000      	movs	r0, #0
  41b220:	4b87      	ldr	r3, [pc, #540]	; (41b440 <basic_init+0x324>)
  41b222:	4798      	blx	r3
  41b224:	300a      	adds	r0, #10
  41b226:	00c0      	lsls	r0, r0, #3
  41b228:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b22c:	f280 86ff 	bge.w	41c02e <basic_init+0xf12>
  41b230:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b232:	2101      	movs	r1, #1
  41b234:	4620      	mov	r0, r4
  41b236:	4b83      	ldr	r3, [pc, #524]	; (41b444 <basic_init+0x328>)
  41b238:	4798      	blx	r3
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b23a:	4c7b      	ldr	r4, [pc, #492]	; (41b428 <basic_init+0x30c>)
  41b23c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b23e:	22ff      	movs	r2, #255	; 0xff
  41b240:	212c      	movs	r1, #44	; 0x2c
  41b242:	3004      	adds	r0, #4
  41b244:	4b7a      	ldr	r3, [pc, #488]	; (41b430 <basic_init+0x314>)
  41b246:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG);
  41b248:	6820      	ldr	r0, [r4, #0]
  41b24a:	3004      	adds	r0, #4
  41b24c:	4b79      	ldr	r3, [pc, #484]	; (41b434 <basic_init+0x318>)
  41b24e:	6a1b      	ldr	r3, [r3, #32]
  41b250:	f013 0f02 	tst.w	r3, #2
  41b254:	f000 86f9 	beq.w	41c04a <basic_init+0xf2e>
  41b258:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b25c:	2129      	movs	r1, #41	; 0x29
  41b25e:	4b76      	ldr	r3, [pc, #472]	; (41b438 <basic_init+0x31c>)
  41b260:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_BORDER);
  41b262:	4b71      	ldr	r3, [pc, #452]	; (41b428 <basic_init+0x30c>)
  41b264:	6818      	ldr	r0, [r3, #0]
  41b266:	3004      	adds	r0, #4
  41b268:	4b72      	ldr	r3, [pc, #456]	; (41b434 <basic_init+0x318>)
  41b26a:	6a1b      	ldr	r3, [r3, #32]
  41b26c:	f013 0f02 	tst.w	r3, #2
  41b270:	f000 86fa 	beq.w	41c068 <basic_init+0xf4c>
  41b274:	f04f 0200 	mov.w	r2, #0
  41b278:	2306      	movs	r3, #6
  41b27a:	f363 0202 	bfi	r2, r3, #0, #3
  41b27e:	231a      	movs	r3, #26
  41b280:	f363 02c7 	bfi	r2, r3, #3, #5
  41b284:	231c      	movs	r3, #28
  41b286:	f363 220c 	bfi	r2, r3, #8, #5
  41b28a:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b28e:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b292:	2139      	movs	r1, #57	; 0x39
  41b294:	4b68      	ldr	r3, [pc, #416]	; (41b438 <basic_init+0x31c>)
  41b296:	4798      	blx	r3
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41b298:	4b66      	ldr	r3, [pc, #408]	; (41b434 <basic_init+0x318>)
  41b29a:	6a1b      	ldr	r3, [r3, #32]
  41b29c:	f013 0f20 	tst.w	r3, #32
  41b2a0:	f000 86f2 	beq.w	41c088 <basic_init+0xf6c>
    lv_style_set_border_color(&styles->bg, LV_STATE_EDITED, theme.color_secondary);
  41b2a4:	4c60      	ldr	r4, [pc, #384]	; (41b428 <basic_init+0x30c>)
  41b2a6:	6820      	ldr	r0, [r4, #0]
  41b2a8:	4b62      	ldr	r3, [pc, #392]	; (41b434 <basic_init+0x318>)
  41b2aa:	89da      	ldrh	r2, [r3, #14]
  41b2ac:	f240 4139 	movw	r1, #1081	; 0x439
  41b2b0:	3004      	adds	r0, #4
  41b2b2:	4b61      	ldr	r3, [pc, #388]	; (41b438 <basic_init+0x31c>)
  41b2b4:	4798      	blx	r3
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41b2b6:	6824      	ldr	r4, [r4, #0]
  41b2b8:	3404      	adds	r4, #4
  41b2ba:	2000      	movs	r0, #0
  41b2bc:	4b60      	ldr	r3, [pc, #384]	; (41b440 <basic_init+0x324>)
  41b2be:	4798      	blx	r3
  41b2c0:	3028      	adds	r0, #40	; 0x28
  41b2c2:	0040      	lsls	r0, r0, #1
  41b2c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b2c8:	f280 86e9 	bge.w	41c09e <basic_init+0xf82>
  41b2cc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b2ce:	2130      	movs	r1, #48	; 0x30
  41b2d0:	4620      	mov	r0, r4
  41b2d2:	4d5c      	ldr	r5, [pc, #368]	; (41b444 <basic_init+0x328>)
  41b2d4:	47a8      	blx	r5
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
  41b2d6:	4c54      	ldr	r4, [pc, #336]	; (41b428 <basic_init+0x30c>)
  41b2d8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41b2da:	2201      	movs	r2, #1
  41b2dc:	2133      	movs	r1, #51	; 0x33
  41b2de:	3004      	adds	r0, #4
  41b2e0:	47a8      	blx	r5
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b2e2:	6820      	ldr	r0, [r4, #0]
  41b2e4:	3004      	adds	r0, #4
  41b2e6:	4b53      	ldr	r3, [pc, #332]	; (41b434 <basic_init+0x318>)
  41b2e8:	6a1b      	ldr	r3, [r3, #32]
  41b2ea:	f013 0f02 	tst.w	r3, #2
  41b2ee:	f000 86e4 	beq.w	41c0ba <basic_init+0xf9e>
  41b2f2:	f04f 0200 	mov.w	r2, #0
  41b2f6:	2301      	movs	r3, #1
  41b2f8:	f363 0202 	bfi	r2, r3, #0, #3
  41b2fc:	2307      	movs	r3, #7
  41b2fe:	f363 02c7 	bfi	r2, r3, #3, #5
  41b302:	2308      	movs	r3, #8
  41b304:	f363 220c 	bfi	r2, r3, #8, #5
  41b308:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b30c:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b310:	f248 0189 	movw	r1, #32905	; 0x8089
  41b314:	4b48      	ldr	r3, [pc, #288]	; (41b438 <basic_init+0x31c>)
  41b316:	4798      	blx	r3
    lv_style_set_value_font(&styles->bg, LV_STATE_DEFAULT, theme.font_normal);
  41b318:	4d43      	ldr	r5, [pc, #268]	; (41b428 <basic_init+0x30c>)
  41b31a:	6828      	ldr	r0, [r5, #0]
  41b31c:	4c45      	ldr	r4, [pc, #276]	; (41b434 <basic_init+0x318>)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
  41b31e:	6962      	ldr	r2, [r4, #20]
  41b320:	217e      	movs	r1, #126	; 0x7e
  41b322:	3004      	adds	r0, #4
  41b324:	4b45      	ldr	r3, [pc, #276]	; (41b43c <basic_init+0x320>)
  41b326:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b328:	6828      	ldr	r0, [r5, #0]
  41b32a:	3004      	adds	r0, #4
  41b32c:	6a23      	ldr	r3, [r4, #32]
  41b32e:	f013 0f02 	tst.w	r3, #2
  41b332:	f000 86c6 	beq.w	41c0c2 <basic_init+0xfa6>
  41b336:	f04f 0200 	mov.w	r2, #0
  41b33a:	2301      	movs	r3, #1
  41b33c:	f363 0202 	bfi	r2, r3, #0, #3
  41b340:	2307      	movs	r3, #7
  41b342:	f363 02c7 	bfi	r2, r3, #3, #5
  41b346:	2308      	movs	r3, #8
  41b348:	f363 220c 	bfi	r2, r3, #8, #5
  41b34c:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b350:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b354:	2179      	movs	r1, #121	; 0x79
  41b356:	4b38      	ldr	r3, [pc, #224]	; (41b438 <basic_init+0x31c>)
  41b358:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b35a:	4b33      	ldr	r3, [pc, #204]	; (41b428 <basic_init+0x30c>)
  41b35c:	6818      	ldr	r0, [r3, #0]
  41b35e:	3004      	adds	r0, #4
  41b360:	4b34      	ldr	r3, [pc, #208]	; (41b434 <basic_init+0x318>)
  41b362:	6a1b      	ldr	r3, [r3, #32]
  41b364:	f013 0f02 	tst.w	r3, #2
  41b368:	f000 86af 	beq.w	41c0ca <basic_init+0xfae>
  41b36c:	f04f 0200 	mov.w	r2, #0
  41b370:	2301      	movs	r3, #1
  41b372:	f363 0202 	bfi	r2, r3, #0, #3
  41b376:	2307      	movs	r3, #7
  41b378:	f363 02c7 	bfi	r2, r3, #3, #5
  41b37c:	2308      	movs	r3, #8
  41b37e:	f363 220c 	bfi	r2, r3, #8, #5
  41b382:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b386:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b38a:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b38e:	4b2a      	ldr	r3, [pc, #168]	; (41b438 <basic_init+0x31c>)
  41b390:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, COLOR_BG_TEXT);
  41b392:	4b25      	ldr	r3, [pc, #148]	; (41b428 <basic_init+0x30c>)
  41b394:	6818      	ldr	r0, [r3, #0]
  41b396:	3004      	adds	r0, #4
  41b398:	4b26      	ldr	r3, [pc, #152]	; (41b434 <basic_init+0x318>)
  41b39a:	6a1b      	ldr	r3, [r3, #32]
  41b39c:	f013 0f02 	tst.w	r3, #2
  41b3a0:	f000 8697 	beq.w	41c0d2 <basic_init+0xfb6>
  41b3a4:	f04f 0200 	mov.w	r2, #0
  41b3a8:	2301      	movs	r3, #1
  41b3aa:	f363 0202 	bfi	r2, r3, #0, #3
  41b3ae:	2307      	movs	r3, #7
  41b3b0:	f363 02c7 	bfi	r2, r3, #3, #5
  41b3b4:	2308      	movs	r3, #8
  41b3b6:	f363 220c 	bfi	r2, r3, #8, #5
  41b3ba:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b3be:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41b3c2:	2199      	movs	r1, #153	; 0x99
  41b3c4:	4b1c      	ldr	r3, [pc, #112]	; (41b438 <basic_init+0x31c>)
  41b3c6:	4798      	blx	r3
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, 1);
  41b3c8:	4c17      	ldr	r4, [pc, #92]	; (41b428 <basic_init+0x30c>)
  41b3ca:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
  41b3cc:	2201      	movs	r2, #1
  41b3ce:	2190      	movs	r1, #144	; 0x90
  41b3d0:	3004      	adds	r0, #4
  41b3d2:	4b1c      	ldr	r3, [pc, #112]	; (41b444 <basic_init+0x328>)
  41b3d4:	4798      	blx	r3
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b3d6:	6825      	ldr	r5, [r4, #0]
  41b3d8:	3504      	adds	r5, #4
  41b3da:	2000      	movs	r0, #0
  41b3dc:	4b1a      	ldr	r3, [pc, #104]	; (41b448 <basic_init+0x32c>)
  41b3de:	4798      	blx	r3
  41b3e0:	2801      	cmp	r0, #1
  41b3e2:	f240 867a 	bls.w	41c0da <basic_init+0xfbe>
  41b3e6:	2000      	movs	r0, #0
  41b3e8:	4b15      	ldr	r3, [pc, #84]	; (41b440 <basic_init+0x324>)
  41b3ea:	4798      	blx	r3
  41b3ec:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b3f0:	0040      	lsls	r0, r0, #1
  41b3f2:	3050      	adds	r0, #80	; 0x50
  41b3f4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b3f8:	f280 868a 	bge.w	41c110 <basic_init+0xff4>
  41b3fc:	2401      	movs	r4, #1
  41b3fe:	2000      	movs	r0, #0
  41b400:	4b0f      	ldr	r3, [pc, #60]	; (41b440 <basic_init+0x324>)
  41b402:	4798      	blx	r3
  41b404:	3028      	adds	r0, #40	; 0x28
  41b406:	0040      	lsls	r0, r0, #1
  41b408:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b40c:	f280 86a2 	bge.w	41c154 <basic_init+0x1038>
  41b410:	2201      	movs	r2, #1
  41b412:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41b414:	b212      	sxth	r2, r2
  41b416:	2112      	movs	r1, #18
  41b418:	4628      	mov	r0, r5
  41b41a:	4b0a      	ldr	r3, [pc, #40]	; (41b444 <basic_init+0x328>)
  41b41c:	4798      	blx	r3
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b41e:	4b02      	ldr	r3, [pc, #8]	; (41b428 <basic_init+0x30c>)
  41b420:	681d      	ldr	r5, [r3, #0]
  41b422:	3504      	adds	r5, #4
  41b424:	e012      	b.n	41b44c <basic_init+0x330>
  41b426:	bf00      	nop
  41b428:	204147a8 	.word	0x204147a8
  41b42c:	00417885 	.word	0x00417885
  41b430:	00409fa1 	.word	0x00409fa1
  41b434:	204147ac 	.word	0x204147ac
  41b438:	00409e11 	.word	0x00409e11
  41b43c:	0040a131 	.word	0x0040a131
  41b440:	0041468d 	.word	0x0041468d
  41b444:	00409c81 	.word	0x00409c81
  41b448:	004146ad 	.word	0x004146ad
  41b44c:	2000      	movs	r0, #0
  41b44e:	4bc2      	ldr	r3, [pc, #776]	; (41b758 <basic_init+0x63c>)
  41b450:	4798      	blx	r3
  41b452:	2801      	cmp	r0, #1
  41b454:	f240 868c 	bls.w	41c170 <basic_init+0x1054>
  41b458:	2000      	movs	r0, #0
  41b45a:	4bc0      	ldr	r3, [pc, #768]	; (41b75c <basic_init+0x640>)
  41b45c:	4798      	blx	r3
  41b45e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b462:	0040      	lsls	r0, r0, #1
  41b464:	3050      	adds	r0, #80	; 0x50
  41b466:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b46a:	f280 869c 	bge.w	41c1a6 <basic_init+0x108a>
  41b46e:	2401      	movs	r4, #1
  41b470:	2000      	movs	r0, #0
  41b472:	4bba      	ldr	r3, [pc, #744]	; (41b75c <basic_init+0x640>)
  41b474:	4798      	blx	r3
  41b476:	3028      	adds	r0, #40	; 0x28
  41b478:	0040      	lsls	r0, r0, #1
  41b47a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b47e:	f280 86a2 	bge.w	41c1c6 <basic_init+0x10aa>
  41b482:	2201      	movs	r2, #1
  41b484:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41b486:	b212      	sxth	r2, r2
  41b488:	2113      	movs	r1, #19
  41b48a:	4628      	mov	r0, r5
  41b48c:	4bb4      	ldr	r3, [pc, #720]	; (41b760 <basic_init+0x644>)
  41b48e:	4798      	blx	r3
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b490:	4bb4      	ldr	r3, [pc, #720]	; (41b764 <basic_init+0x648>)
  41b492:	681d      	ldr	r5, [r3, #0]
  41b494:	3504      	adds	r5, #4
  41b496:	2000      	movs	r0, #0
  41b498:	4baf      	ldr	r3, [pc, #700]	; (41b758 <basic_init+0x63c>)
  41b49a:	4798      	blx	r3
  41b49c:	2801      	cmp	r0, #1
  41b49e:	f240 86a0 	bls.w	41c1e2 <basic_init+0x10c6>
  41b4a2:	2000      	movs	r0, #0
  41b4a4:	4bad      	ldr	r3, [pc, #692]	; (41b75c <basic_init+0x640>)
  41b4a6:	4798      	blx	r3
  41b4a8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4ac:	0040      	lsls	r0, r0, #1
  41b4ae:	3050      	adds	r0, #80	; 0x50
  41b4b0:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4b4:	f280 86b0 	bge.w	41c218 <basic_init+0x10fc>
  41b4b8:	2401      	movs	r4, #1
  41b4ba:	2000      	movs	r0, #0
  41b4bc:	4ba7      	ldr	r3, [pc, #668]	; (41b75c <basic_init+0x640>)
  41b4be:	4798      	blx	r3
  41b4c0:	3028      	adds	r0, #40	; 0x28
  41b4c2:	0040      	lsls	r0, r0, #1
  41b4c4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4c8:	f280 86b6 	bge.w	41c238 <basic_init+0x111c>
  41b4cc:	2201      	movs	r2, #1
  41b4ce:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41b4d0:	b212      	sxth	r2, r2
  41b4d2:	2110      	movs	r1, #16
  41b4d4:	4628      	mov	r0, r5
  41b4d6:	4ba2      	ldr	r3, [pc, #648]	; (41b760 <basic_init+0x644>)
  41b4d8:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41b4da:	4ba2      	ldr	r3, [pc, #648]	; (41b764 <basic_init+0x648>)
  41b4dc:	681d      	ldr	r5, [r3, #0]
  41b4de:	3504      	adds	r5, #4
  41b4e0:	2000      	movs	r0, #0
  41b4e2:	4b9d      	ldr	r3, [pc, #628]	; (41b758 <basic_init+0x63c>)
  41b4e4:	4798      	blx	r3
  41b4e6:	2801      	cmp	r0, #1
  41b4e8:	f240 86b4 	bls.w	41c254 <basic_init+0x1138>
  41b4ec:	2000      	movs	r0, #0
  41b4ee:	4b9b      	ldr	r3, [pc, #620]	; (41b75c <basic_init+0x640>)
  41b4f0:	4798      	blx	r3
  41b4f2:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b4f6:	0040      	lsls	r0, r0, #1
  41b4f8:	3050      	adds	r0, #80	; 0x50
  41b4fa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b4fe:	f280 86c4 	bge.w	41c28a <basic_init+0x116e>
  41b502:	2401      	movs	r4, #1
  41b504:	2000      	movs	r0, #0
  41b506:	4b95      	ldr	r3, [pc, #596]	; (41b75c <basic_init+0x640>)
  41b508:	4798      	blx	r3
  41b50a:	3028      	adds	r0, #40	; 0x28
  41b50c:	0040      	lsls	r0, r0, #1
  41b50e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b512:	f280 86ca 	bge.w	41c2aa <basic_init+0x118e>
  41b516:	2201      	movs	r2, #1
  41b518:	4422      	add	r2, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41b51a:	b212      	sxth	r2, r2
  41b51c:	2111      	movs	r1, #17
  41b51e:	4628      	mov	r0, r5
  41b520:	4b8f      	ldr	r3, [pc, #572]	; (41b760 <basic_init+0x644>)
  41b522:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41b524:	4b8f      	ldr	r3, [pc, #572]	; (41b764 <basic_init+0x648>)
  41b526:	681c      	ldr	r4, [r3, #0]
  41b528:	3404      	adds	r4, #4
  41b52a:	2000      	movs	r0, #0
  41b52c:	4b8a      	ldr	r3, [pc, #552]	; (41b758 <basic_init+0x63c>)
  41b52e:	4798      	blx	r3
  41b530:	2801      	cmp	r0, #1
  41b532:	f240 86c8 	bls.w	41c2c6 <basic_init+0x11aa>
  41b536:	2000      	movs	r0, #0
  41b538:	4b88      	ldr	r3, [pc, #544]	; (41b75c <basic_init+0x640>)
  41b53a:	4798      	blx	r3
  41b53c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41b540:	0040      	lsls	r0, r0, #1
  41b542:	3050      	adds	r0, #80	; 0x50
  41b544:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41b548:	f280 86d8 	bge.w	41c2fc <basic_init+0x11e0>
  41b54c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41b54e:	2114      	movs	r1, #20
  41b550:	4620      	mov	r0, r4
  41b552:	4d83      	ldr	r5, [pc, #524]	; (41b760 <basic_init+0x644>)
  41b554:	47a8      	blx	r5
    lv_style_set_transition_time(&styles->bg, LV_STATE_DEFAULT, TRANSITION_TIME);
  41b556:	4c83      	ldr	r4, [pc, #524]	; (41b764 <basic_init+0x648>)
  41b558:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41b55a:	2200      	movs	r2, #0
  41b55c:	21b0      	movs	r1, #176	; 0xb0
  41b55e:	3004      	adds	r0, #4
  41b560:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->bg, LV_STATE_DEFAULT, LV_STYLE_BORDER_COLOR);
  41b562:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41b564:	2239      	movs	r2, #57	; 0x39
  41b566:	21b7      	movs	r1, #183	; 0xb7
  41b568:	3004      	adds	r0, #4
  41b56a:	47a8      	blx	r5
    style_init_reset(&styles->bg_sec);
  41b56c:	6820      	ldr	r0, [r4, #0]
  41b56e:	300c      	adds	r0, #12
  41b570:	4b7d      	ldr	r3, [pc, #500]	; (41b768 <basic_init+0x64c>)
  41b572:	4798      	blx	r3
    lv_style_copy(&styles->bg_sec, &styles->bg);
  41b574:	6820      	ldr	r0, [r4, #0]
  41b576:	1d01      	adds	r1, r0, #4
  41b578:	300c      	adds	r0, #12
  41b57a:	4b7c      	ldr	r3, [pc, #496]	; (41b76c <basic_init+0x650>)
  41b57c:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC);
  41b57e:	6820      	ldr	r0, [r4, #0]
  41b580:	300c      	adds	r0, #12
  41b582:	4b7b      	ldr	r3, [pc, #492]	; (41b770 <basic_init+0x654>)
  41b584:	6a1b      	ldr	r3, [r3, #32]
  41b586:	f013 0f02 	tst.w	r3, #2
  41b58a:	f000 86c7 	beq.w	41c31c <basic_init+0x1200>
  41b58e:	f04f 0200 	mov.w	r2, #0
  41b592:	2306      	movs	r3, #6
  41b594:	f363 0202 	bfi	r2, r3, #0, #3
  41b598:	231a      	movs	r3, #26
  41b59a:	f363 02c7 	bfi	r2, r3, #3, #5
  41b59e:	231b      	movs	r3, #27
  41b5a0:	f363 220c 	bfi	r2, r3, #8, #5
  41b5a4:	2305      	movs	r3, #5
  41b5a6:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b5aa:	2129      	movs	r1, #41	; 0x29
  41b5ac:	4b71      	ldr	r3, [pc, #452]	; (41b774 <basic_init+0x658>)
  41b5ae:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_BORDER);
  41b5b0:	4b6c      	ldr	r3, [pc, #432]	; (41b764 <basic_init+0x648>)
  41b5b2:	6818      	ldr	r0, [r3, #0]
  41b5b4:	300c      	adds	r0, #12
  41b5b6:	4b6e      	ldr	r3, [pc, #440]	; (41b770 <basic_init+0x654>)
  41b5b8:	6a1b      	ldr	r3, [r3, #32]
  41b5ba:	f013 0f02 	tst.w	r3, #2
  41b5be:	f000 86bc 	beq.w	41c33a <basic_init+0x121e>
  41b5c2:	f04f 0207 	mov.w	r2, #7
  41b5c6:	231b      	movs	r3, #27
  41b5c8:	f363 02c7 	bfi	r2, r3, #3, #5
  41b5cc:	231d      	movs	r3, #29
  41b5ce:	f363 220c 	bfi	r2, r3, #8, #5
  41b5d2:	2301      	movs	r3, #1
  41b5d4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b5d8:	2139      	movs	r1, #57	; 0x39
  41b5da:	4b66      	ldr	r3, [pc, #408]	; (41b774 <basic_init+0x658>)
  41b5dc:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b5de:	4b61      	ldr	r3, [pc, #388]	; (41b764 <basic_init+0x648>)
  41b5e0:	6818      	ldr	r0, [r3, #0]
  41b5e2:	300c      	adds	r0, #12
  41b5e4:	4b62      	ldr	r3, [pc, #392]	; (41b770 <basic_init+0x654>)
  41b5e6:	6a1b      	ldr	r3, [r3, #32]
  41b5e8:	f013 0f02 	tst.w	r3, #2
  41b5ec:	f000 86b3 	beq.w	41c356 <basic_init+0x123a>
  41b5f0:	f04f 0200 	mov.w	r2, #0
  41b5f4:	2302      	movs	r3, #2
  41b5f6:	f363 0202 	bfi	r2, r3, #0, #3
  41b5fa:	2306      	movs	r3, #6
  41b5fc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b600:	2309      	movs	r3, #9
  41b602:	f363 220c 	bfi	r2, r3, #8, #5
  41b606:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b60a:	f248 0189 	movw	r1, #32905	; 0x8089
  41b60e:	4b59      	ldr	r3, [pc, #356]	; (41b774 <basic_init+0x658>)
  41b610:	4798      	blx	r3
    lv_style_set_value_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b612:	4b54      	ldr	r3, [pc, #336]	; (41b764 <basic_init+0x648>)
  41b614:	6818      	ldr	r0, [r3, #0]
  41b616:	300c      	adds	r0, #12
  41b618:	4b55      	ldr	r3, [pc, #340]	; (41b770 <basic_init+0x654>)
  41b61a:	6a1b      	ldr	r3, [r3, #32]
  41b61c:	f013 0f02 	tst.w	r3, #2
  41b620:	f000 86a9 	beq.w	41c376 <basic_init+0x125a>
  41b624:	f04f 0200 	mov.w	r2, #0
  41b628:	2302      	movs	r3, #2
  41b62a:	f363 0202 	bfi	r2, r3, #0, #3
  41b62e:	2306      	movs	r3, #6
  41b630:	f363 02c7 	bfi	r2, r3, #3, #5
  41b634:	2309      	movs	r3, #9
  41b636:	f363 220c 	bfi	r2, r3, #8, #5
  41b63a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41b63e:	2179      	movs	r1, #121	; 0x79
  41b640:	4b4c      	ldr	r3, [pc, #304]	; (41b774 <basic_init+0x658>)
  41b642:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b644:	4b47      	ldr	r3, [pc, #284]	; (41b764 <basic_init+0x648>)
  41b646:	6818      	ldr	r0, [r3, #0]
  41b648:	300c      	adds	r0, #12
  41b64a:	4b49      	ldr	r3, [pc, #292]	; (41b770 <basic_init+0x654>)
  41b64c:	6a1b      	ldr	r3, [r3, #32]
  41b64e:	f013 0f02 	tst.w	r3, #2
  41b652:	f000 86a0 	beq.w	41c396 <basic_init+0x127a>
  41b656:	f04f 0200 	mov.w	r2, #0
  41b65a:	2302      	movs	r3, #2
  41b65c:	f363 0202 	bfi	r2, r3, #0, #3
  41b660:	2306      	movs	r3, #6
  41b662:	f363 02c7 	bfi	r2, r3, #3, #5
  41b666:	2309      	movs	r3, #9
  41b668:	f363 220c 	bfi	r2, r3, #8, #5
  41b66c:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b670:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41b674:	4b3f      	ldr	r3, [pc, #252]	; (41b774 <basic_init+0x658>)
  41b676:	4798      	blx	r3
    lv_style_set_line_color(&styles->bg_sec, LV_STATE_DEFAULT, COLOR_BG_SEC_TEXT);
  41b678:	4b3a      	ldr	r3, [pc, #232]	; (41b764 <basic_init+0x648>)
  41b67a:	6818      	ldr	r0, [r3, #0]
  41b67c:	300c      	adds	r0, #12
  41b67e:	4b3c      	ldr	r3, [pc, #240]	; (41b770 <basic_init+0x654>)
  41b680:	6a1b      	ldr	r3, [r3, #32]
  41b682:	f013 0f02 	tst.w	r3, #2
  41b686:	f000 8696 	beq.w	41c3b6 <basic_init+0x129a>
  41b68a:	f04f 0200 	mov.w	r2, #0
  41b68e:	2302      	movs	r3, #2
  41b690:	f363 0202 	bfi	r2, r3, #0, #3
  41b694:	2306      	movs	r3, #6
  41b696:	f363 02c7 	bfi	r2, r3, #3, #5
  41b69a:	2309      	movs	r3, #9
  41b69c:	f363 220c 	bfi	r2, r3, #8, #5
  41b6a0:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
  41b6a4:	2199      	movs	r1, #153	; 0x99
  41b6a6:	4b33      	ldr	r3, [pc, #204]	; (41b774 <basic_init+0x658>)
  41b6a8:	4798      	blx	r3
    style_init_reset(&styles->bg_click);
  41b6aa:	4c2e      	ldr	r4, [pc, #184]	; (41b764 <basic_init+0x648>)
  41b6ac:	6820      	ldr	r0, [r4, #0]
  41b6ae:	3008      	adds	r0, #8
  41b6b0:	4b2d      	ldr	r3, [pc, #180]	; (41b768 <basic_init+0x64c>)
  41b6b2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_PR);
  41b6b4:	6820      	ldr	r0, [r4, #0]
  41b6b6:	3008      	adds	r0, #8
  41b6b8:	4b2d      	ldr	r3, [pc, #180]	; (41b770 <basic_init+0x654>)
  41b6ba:	6a1b      	ldr	r3, [r3, #32]
  41b6bc:	f013 0f02 	tst.w	r3, #2
  41b6c0:	f000 8689 	beq.w	41c3d6 <basic_init+0x12ba>
  41b6c4:	f04f 0207 	mov.w	r2, #7
  41b6c8:	231d      	movs	r3, #29
  41b6ca:	f363 02c7 	bfi	r2, r3, #3, #5
  41b6ce:	f363 220c 	bfi	r2, r3, #8, #5
  41b6d2:	2303      	movs	r3, #3
  41b6d4:	f363 324f 	bfi	r2, r3, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b6d8:	f241 0129 	movw	r1, #4137	; 0x1029
  41b6dc:	4d25      	ldr	r5, [pc, #148]	; (41b774 <basic_init+0x658>)
  41b6de:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_CHK);
  41b6e0:	4c20      	ldr	r4, [pc, #128]	; (41b764 <basic_init+0x648>)
  41b6e2:	6820      	ldr	r0, [r4, #0]
  41b6e4:	4f22      	ldr	r7, [pc, #136]	; (41b770 <basic_init+0x654>)
  41b6e6:	89ba      	ldrh	r2, [r7, #12]
  41b6e8:	f240 1129 	movw	r1, #297	; 0x129
  41b6ec:	3008      	adds	r0, #8
  41b6ee:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_PR_CHK);
  41b6f0:	6826      	ldr	r6, [r4, #0]
  41b6f2:	3608      	adds	r6, #8
  41b6f4:	2133      	movs	r1, #51	; 0x33
  41b6f6:	89b8      	ldrh	r0, [r7, #12]
  41b6f8:	4b1f      	ldr	r3, [pc, #124]	; (41b778 <basic_init+0x65c>)
  41b6fa:	4798      	blx	r3
  41b6fc:	4602      	mov	r2, r0
  41b6fe:	f241 1129 	movw	r1, #4393	; 0x1129
  41b702:	4630      	mov	r0, r6
  41b704:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_DIS);
  41b706:	6820      	ldr	r0, [r4, #0]
  41b708:	3008      	adds	r0, #8
  41b70a:	6a3b      	ldr	r3, [r7, #32]
  41b70c:	f013 0f02 	tst.w	r3, #2
  41b710:	f000 8671 	beq.w	41c3f6 <basic_init+0x12da>
  41b714:	f04f 32ff 	mov.w	r2, #4294967295
  41b718:	f242 0129 	movw	r1, #8233	; 0x2029
  41b71c:	4f15      	ldr	r7, [pc, #84]	; (41b774 <basic_init+0x658>)
  41b71e:	47b8      	blx	r7
    lv_style_set_border_width(&styles->bg_click, LV_STATE_CHECKED, 0);
  41b720:	4c10      	ldr	r4, [pc, #64]	; (41b764 <basic_init+0x648>)
  41b722:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41b724:	2200      	movs	r2, #0
  41b726:	f44f 7198 	mov.w	r1, #304	; 0x130
  41b72a:	3008      	adds	r0, #8
  41b72c:	4b0c      	ldr	r3, [pc, #48]	; (41b760 <basic_init+0x644>)
  41b72e:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_FOCUSED | LV_STATE_PRESSED, lv_color_darken(theme.color_primary,
  41b730:	6825      	ldr	r5, [r4, #0]
  41b732:	3508      	adds	r5, #8
  41b734:	4e0e      	ldr	r6, [pc, #56]	; (41b770 <basic_init+0x654>)
  41b736:	2133      	movs	r1, #51	; 0x33
  41b738:	89b0      	ldrh	r0, [r6, #12]
  41b73a:	4b0f      	ldr	r3, [pc, #60]	; (41b778 <basic_init+0x65c>)
  41b73c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41b73e:	4602      	mov	r2, r0
  41b740:	f241 2139 	movw	r1, #4665	; 0x1239
  41b744:	4628      	mov	r0, r5
  41b746:	47b8      	blx	r7
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_BORDER_PR);
  41b748:	6820      	ldr	r0, [r4, #0]
  41b74a:	3008      	adds	r0, #8
  41b74c:	6a33      	ldr	r3, [r6, #32]
  41b74e:	f013 0f02 	tst.w	r3, #2
  41b752:	f000 865f 	beq.w	41c414 <basic_init+0x12f8>
  41b756:	e011      	b.n	41b77c <basic_init+0x660>
  41b758:	004146ad 	.word	0x004146ad
  41b75c:	0041468d 	.word	0x0041468d
  41b760:	00409c81 	.word	0x00409c81
  41b764:	204147a8 	.word	0x204147a8
  41b768:	00417885 	.word	0x00417885
  41b76c:	00409b1d 	.word	0x00409b1d
  41b770:	204147ac 	.word	0x204147ac
  41b774:	00409e11 	.word	0x00409e11
  41b778:	00415749 	.word	0x00415749
  41b77c:	f04f 0200 	mov.w	r2, #0
  41b780:	2306      	movs	r3, #6
  41b782:	f363 0202 	bfi	r2, r3, #0, #3
  41b786:	2319      	movs	r3, #25
  41b788:	f363 02c7 	bfi	r2, r3, #3, #5
  41b78c:	f363 220c 	bfi	r2, r3, #8, #5
  41b790:	2303      	movs	r3, #3
  41b792:	f363 324f 	bfi	r2, r3, #13, #3
  41b796:	f241 0139 	movw	r1, #4153	; 0x1039
  41b79a:	4bc9      	ldr	r3, [pc, #804]	; (41bac0 <basic_init+0x9a4>)
  41b79c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_BORDER_CHK);
  41b79e:	4bc9      	ldr	r3, [pc, #804]	; (41bac4 <basic_init+0x9a8>)
  41b7a0:	6818      	ldr	r0, [r3, #0]
  41b7a2:	3008      	adds	r0, #8
  41b7a4:	4bc8      	ldr	r3, [pc, #800]	; (41bac8 <basic_init+0x9ac>)
  41b7a6:	6a1b      	ldr	r3, [r3, #32]
  41b7a8:	f013 0f02 	tst.w	r3, #2
  41b7ac:	f000 8642 	beq.w	41c434 <basic_init+0x1318>
  41b7b0:	f04f 0200 	mov.w	r2, #0
  41b7b4:	2301      	movs	r3, #1
  41b7b6:	f363 0202 	bfi	r2, r3, #0, #3
  41b7ba:	2307      	movs	r3, #7
  41b7bc:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7c0:	2308      	movs	r3, #8
  41b7c2:	f363 220c 	bfi	r2, r3, #8, #5
  41b7c6:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b7ca:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b7ce:	f240 1139 	movw	r1, #313	; 0x139
  41b7d2:	4bbb      	ldr	r3, [pc, #748]	; (41bac0 <basic_init+0x9a4>)
  41b7d4:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_BORDER_CHK_PR);
  41b7d6:	4bbb      	ldr	r3, [pc, #748]	; (41bac4 <basic_init+0x9a8>)
  41b7d8:	6818      	ldr	r0, [r3, #0]
  41b7da:	3008      	adds	r0, #8
  41b7dc:	4bba      	ldr	r3, [pc, #744]	; (41bac8 <basic_init+0x9ac>)
  41b7de:	6a1b      	ldr	r3, [r3, #32]
  41b7e0:	f013 0f02 	tst.w	r3, #2
  41b7e4:	f000 8636 	beq.w	41c454 <basic_init+0x1338>
  41b7e8:	f04f 0200 	mov.w	r2, #0
  41b7ec:	2301      	movs	r3, #1
  41b7ee:	f363 0202 	bfi	r2, r3, #0, #3
  41b7f2:	2307      	movs	r3, #7
  41b7f4:	f363 02c7 	bfi	r2, r3, #3, #5
  41b7f8:	2308      	movs	r3, #8
  41b7fa:	f363 220c 	bfi	r2, r3, #8, #5
  41b7fe:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b802:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b806:	f241 1139 	movw	r1, #4409	; 0x1139
  41b80a:	4bad      	ldr	r3, [pc, #692]	; (41bac0 <basic_init+0x9a4>)
  41b80c:	4798      	blx	r3
    lv_style_set_border_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_BORDER_DIS);
  41b80e:	4bad      	ldr	r3, [pc, #692]	; (41bac4 <basic_init+0x9a8>)
  41b810:	6818      	ldr	r0, [r3, #0]
  41b812:	3008      	adds	r0, #8
  41b814:	4bac      	ldr	r3, [pc, #688]	; (41bac8 <basic_init+0x9ac>)
  41b816:	6a1b      	ldr	r3, [r3, #32]
  41b818:	f013 0f02 	tst.w	r3, #2
  41b81c:	f000 862a 	beq.w	41c474 <basic_init+0x1358>
  41b820:	f04f 0200 	mov.w	r2, #0
  41b824:	2306      	movs	r3, #6
  41b826:	f363 0202 	bfi	r2, r3, #0, #3
  41b82a:	231a      	movs	r3, #26
  41b82c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b830:	231c      	movs	r3, #28
  41b832:	f363 220c 	bfi	r2, r3, #8, #5
  41b836:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b83a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
  41b83e:	f242 0139 	movw	r1, #8249	; 0x2039
  41b842:	4b9f      	ldr	r3, [pc, #636]	; (41bac0 <basic_init+0x9a4>)
  41b844:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b846:	4b9f      	ldr	r3, [pc, #636]	; (41bac4 <basic_init+0x9a8>)
  41b848:	6818      	ldr	r0, [r3, #0]
  41b84a:	3008      	adds	r0, #8
  41b84c:	4b9e      	ldr	r3, [pc, #632]	; (41bac8 <basic_init+0x9ac>)
  41b84e:	6a1b      	ldr	r3, [r3, #32]
  41b850:	f013 0f02 	tst.w	r3, #2
  41b854:	f000 861e 	beq.w	41c494 <basic_init+0x1378>
  41b858:	f04f 0200 	mov.w	r2, #0
  41b85c:	2301      	movs	r3, #1
  41b85e:	f363 0202 	bfi	r2, r3, #0, #3
  41b862:	2307      	movs	r3, #7
  41b864:	f363 02c7 	bfi	r2, r3, #3, #5
  41b868:	2308      	movs	r3, #8
  41b86a:	f363 220c 	bfi	r2, r3, #8, #5
  41b86e:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b872:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41b876:	f249 0189 	movw	r1, #37001	; 0x9089
  41b87a:	4b91      	ldr	r3, [pc, #580]	; (41bac0 <basic_init+0x9a4>)
  41b87c:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b87e:	4b91      	ldr	r3, [pc, #580]	; (41bac4 <basic_init+0x9a8>)
  41b880:	6818      	ldr	r0, [r3, #0]
  41b882:	3008      	adds	r0, #8
  41b884:	4b90      	ldr	r3, [pc, #576]	; (41bac8 <basic_init+0x9ac>)
  41b886:	6a1b      	ldr	r3, [r3, #32]
  41b888:	f013 0f02 	tst.w	r3, #2
  41b88c:	f000 8606 	beq.w	41c49c <basic_init+0x1380>
  41b890:	f04f 32ff 	mov.w	r2, #4294967295
  41b894:	f248 1189 	movw	r1, #33161	; 0x8189
  41b898:	4b89      	ldr	r3, [pc, #548]	; (41bac0 <basic_init+0x9a4>)
  41b89a:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b89c:	4b89      	ldr	r3, [pc, #548]	; (41bac4 <basic_init+0x9a8>)
  41b89e:	6818      	ldr	r0, [r3, #0]
  41b8a0:	3008      	adds	r0, #8
  41b8a2:	4b89      	ldr	r3, [pc, #548]	; (41bac8 <basic_init+0x9ac>)
  41b8a4:	6a1b      	ldr	r3, [r3, #32]
  41b8a6:	f013 0f02 	tst.w	r3, #2
  41b8aa:	f000 85fb 	beq.w	41c4a4 <basic_init+0x1388>
  41b8ae:	f04f 32ff 	mov.w	r2, #4294967295
  41b8b2:	f249 1189 	movw	r1, #37257	; 0x9189
  41b8b6:	4b82      	ldr	r3, [pc, #520]	; (41bac0 <basic_init+0x9a4>)
  41b8b8:	4798      	blx	r3
    lv_style_set_text_color(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b8ba:	4b82      	ldr	r3, [pc, #520]	; (41bac4 <basic_init+0x9a8>)
  41b8bc:	6818      	ldr	r0, [r3, #0]
  41b8be:	3008      	adds	r0, #8
  41b8c0:	4b81      	ldr	r3, [pc, #516]	; (41bac8 <basic_init+0x9ac>)
  41b8c2:	6a1b      	ldr	r3, [r3, #32]
  41b8c4:	f013 0f02 	tst.w	r3, #2
  41b8c8:	f000 85f0 	beq.w	41c4ac <basic_init+0x1390>
  41b8cc:	f04f 0200 	mov.w	r2, #0
  41b8d0:	2305      	movs	r3, #5
  41b8d2:	f363 0202 	bfi	r2, r3, #0, #3
  41b8d6:	2315      	movs	r3, #21
  41b8d8:	f363 02c7 	bfi	r2, r3, #3, #5
  41b8dc:	f363 220c 	bfi	r2, r3, #8, #5
  41b8e0:	2302      	movs	r3, #2
  41b8e2:	f363 324f 	bfi	r2, r3, #13, #3
  41b8e6:	f24a 0189 	movw	r1, #41097	; 0xa089
  41b8ea:	4b75      	ldr	r3, [pc, #468]	; (41bac0 <basic_init+0x9a4>)
  41b8ec:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED, COLOR_BG_TEXT_PR);
  41b8ee:	4b75      	ldr	r3, [pc, #468]	; (41bac4 <basic_init+0x9a8>)
  41b8f0:	6818      	ldr	r0, [r3, #0]
  41b8f2:	3008      	adds	r0, #8
  41b8f4:	4b74      	ldr	r3, [pc, #464]	; (41bac8 <basic_init+0x9ac>)
  41b8f6:	6a1b      	ldr	r3, [r3, #32]
  41b8f8:	f013 0f02 	tst.w	r3, #2
  41b8fc:	f000 85e5 	beq.w	41c4ca <basic_init+0x13ae>
  41b900:	f04f 0200 	mov.w	r2, #0
  41b904:	2301      	movs	r3, #1
  41b906:	f363 0202 	bfi	r2, r3, #0, #3
  41b90a:	2307      	movs	r3, #7
  41b90c:	f363 02c7 	bfi	r2, r3, #3, #5
  41b910:	2308      	movs	r3, #8
  41b912:	f363 220c 	bfi	r2, r3, #8, #5
  41b916:	ea6f 42c2 	mvn.w	r2, r2, lsl #19
  41b91a:	ea6f 42d2 	mvn.w	r2, r2, lsr #19
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41b91e:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41b922:	4b67      	ldr	r3, [pc, #412]	; (41bac0 <basic_init+0x9a4>)
  41b924:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_CHECKED, COLOR_BG_TEXT_CHK);
  41b926:	4b67      	ldr	r3, [pc, #412]	; (41bac4 <basic_init+0x9a8>)
  41b928:	6818      	ldr	r0, [r3, #0]
  41b92a:	3008      	adds	r0, #8
  41b92c:	4b66      	ldr	r3, [pc, #408]	; (41bac8 <basic_init+0x9ac>)
  41b92e:	6a1b      	ldr	r3, [r3, #32]
  41b930:	f013 0f02 	tst.w	r3, #2
  41b934:	f000 85d2 	beq.w	41c4dc <basic_init+0x13c0>
  41b938:	f04f 32ff 	mov.w	r2, #4294967295
  41b93c:	f248 11a9 	movw	r1, #33193	; 0x81a9
  41b940:	4b5f      	ldr	r3, [pc, #380]	; (41bac0 <basic_init+0x9a4>)
  41b942:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_PRESSED | LV_STATE_CHECKED, COLOR_BG_TEXT_CHK_PR);
  41b944:	4b5f      	ldr	r3, [pc, #380]	; (41bac4 <basic_init+0x9a8>)
  41b946:	6818      	ldr	r0, [r3, #0]
  41b948:	3008      	adds	r0, #8
  41b94a:	4b5f      	ldr	r3, [pc, #380]	; (41bac8 <basic_init+0x9ac>)
  41b94c:	6a1b      	ldr	r3, [r3, #32]
  41b94e:	f013 0f02 	tst.w	r3, #2
  41b952:	f000 85c7 	beq.w	41c4e4 <basic_init+0x13c8>
  41b956:	f04f 32ff 	mov.w	r2, #4294967295
  41b95a:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41b95e:	4b58      	ldr	r3, [pc, #352]	; (41bac0 <basic_init+0x9a4>)
  41b960:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->bg_click, LV_STATE_DISABLED, COLOR_BG_TEXT_DIS);
  41b962:	4b58      	ldr	r3, [pc, #352]	; (41bac4 <basic_init+0x9a8>)
  41b964:	6818      	ldr	r0, [r3, #0]
  41b966:	3008      	adds	r0, #8
  41b968:	4b57      	ldr	r3, [pc, #348]	; (41bac8 <basic_init+0x9ac>)
  41b96a:	6a1b      	ldr	r3, [r3, #32]
  41b96c:	f013 0f02 	tst.w	r3, #2
  41b970:	f000 85bc 	beq.w	41c4ec <basic_init+0x13d0>
  41b974:	f04f 0200 	mov.w	r2, #0
  41b978:	2305      	movs	r3, #5
  41b97a:	f363 0202 	bfi	r2, r3, #0, #3
  41b97e:	2315      	movs	r3, #21
  41b980:	f363 02c7 	bfi	r2, r3, #3, #5
  41b984:	f363 220c 	bfi	r2, r3, #8, #5
  41b988:	2302      	movs	r3, #2
  41b98a:	f363 324f 	bfi	r2, r3, #13, #3
  41b98e:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41b992:	4b4b      	ldr	r3, [pc, #300]	; (41bac0 <basic_init+0x9a4>)
  41b994:	4798      	blx	r3
    lv_style_set_transition_prop_5(&styles->bg_click, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41b996:	4c4b      	ldr	r4, [pc, #300]	; (41bac4 <basic_init+0x9a8>)
  41b998:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41b99a:	2229      	movs	r2, #41	; 0x29
  41b99c:	21b6      	movs	r1, #182	; 0xb6
  41b99e:	3008      	adds	r0, #8
  41b9a0:	4d4a      	ldr	r5, [pc, #296]	; (41bacc <basic_init+0x9b0>)
  41b9a2:	47a8      	blx	r5
    style_init_reset(&styles->btn);
  41b9a4:	6820      	ldr	r0, [r4, #0]
  41b9a6:	3010      	adds	r0, #16
  41b9a8:	4b49      	ldr	r3, [pc, #292]	; (41bad0 <basic_init+0x9b4>)
  41b9aa:	4798      	blx	r3
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
  41b9ac:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41b9ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
  41b9b2:	2101      	movs	r1, #1
  41b9b4:	3010      	adds	r0, #16
  41b9b6:	47a8      	blx	r5
    lv_style_set_bg_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_COVER);
  41b9b8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
  41b9ba:	22ff      	movs	r2, #255	; 0xff
  41b9bc:	212c      	movs	r1, #44	; 0x2c
  41b9be:	3010      	adds	r0, #16
  41b9c0:	4b44      	ldr	r3, [pc, #272]	; (41bad4 <basic_init+0x9b8>)
  41b9c2:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN);
  41b9c4:	6820      	ldr	r0, [r4, #0]
  41b9c6:	3010      	adds	r0, #16
  41b9c8:	4b3f      	ldr	r3, [pc, #252]	; (41bac8 <basic_init+0x9ac>)
  41b9ca:	6a1b      	ldr	r3, [r3, #32]
  41b9cc:	f013 0f02 	tst.w	r3, #2
  41b9d0:	f000 859b 	beq.w	41c50a <basic_init+0x13ee>
  41b9d4:	f04f 32ff 	mov.w	r2, #4294967295
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  41b9d8:	2129      	movs	r1, #41	; 0x29
  41b9da:	4b39      	ldr	r3, [pc, #228]	; (41bac0 <basic_init+0x9a4>)
  41b9dc:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_PR);
  41b9de:	4b39      	ldr	r3, [pc, #228]	; (41bac4 <basic_init+0x9a8>)
  41b9e0:	6818      	ldr	r0, [r3, #0]
  41b9e2:	3010      	adds	r0, #16
  41b9e4:	4b38      	ldr	r3, [pc, #224]	; (41bac8 <basic_init+0x9ac>)
  41b9e6:	6a1b      	ldr	r3, [r3, #32]
  41b9e8:	f013 0f02 	tst.w	r3, #2
  41b9ec:	f000 859c 	beq.w	41c528 <basic_init+0x140c>
  41b9f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41b9f4:	4a34      	ldr	r2, [pc, #208]	; (41bac8 <basic_init+0x9ac>)
  41b9f6:	8994      	ldrh	r4, [r2, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41b9f8:	f3c4 02c4 	ubfx	r2, r4, #3, #5
  41b9fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  41ba00:	eb02 1102 	add.w	r1, r2, r2, lsl #4
  41ba04:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41ba08:	25cc      	movs	r5, #204	; 0xcc
  41ba0a:	fb05 1202 	mla	r2, r5, r2, r1
  41ba0e:	3280      	adds	r2, #128	; 0x80
  41ba10:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41ba14:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41ba18:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41ba1c:	f04f 0200 	mov.w	r2, #0
  41ba20:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41ba24:	f004 0607 	and.w	r6, r4, #7
  41ba28:	f3c4 3142 	ubfx	r1, r4, #13, #3
  41ba2c:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
  41ba30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  41ba34:	eb01 1601 	add.w	r6, r1, r1, lsl #4
  41ba38:	f003 0707 	and.w	r7, r3, #7
  41ba3c:	0b59      	lsrs	r1, r3, #13
  41ba3e:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41ba42:	fb05 6101 	mla	r1, r5, r1, r6
  41ba46:	3180      	adds	r1, #128	; 0x80
  41ba48:	eb01 2601 	add.w	r6, r1, r1, lsl #8
  41ba4c:	eb01 11c6 	add.w	r1, r1, r6, lsl #7
  41ba50:	f3c1 6682 	ubfx	r6, r1, #26, #3
  41ba54:	f366 0202 	bfi	r2, r6, #0, #3
  41ba58:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41ba5c:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41ba60:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41ba64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  41ba68:	eb04 1404 	add.w	r4, r4, r4, lsl #4
  41ba6c:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41ba70:	fb05 4303 	mla	r3, r5, r3, r4
  41ba74:	3380      	adds	r3, #128	; 0x80
  41ba76:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41ba7a:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41ba7e:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41ba82:	f363 220c 	bfi	r2, r3, #8, #5
  41ba86:	f241 0129 	movw	r1, #4137	; 0x1029
  41ba8a:	4d0d      	ldr	r5, [pc, #52]	; (41bac0 <basic_init+0x9a4>)
  41ba8c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, COLOR_BTN_CHK);
  41ba8e:	4c0d      	ldr	r4, [pc, #52]	; (41bac4 <basic_init+0x9a8>)
  41ba90:	6820      	ldr	r0, [r4, #0]
  41ba92:	4f0d      	ldr	r7, [pc, #52]	; (41bac8 <basic_init+0x9ac>)
  41ba94:	89ba      	ldrh	r2, [r7, #12]
  41ba96:	f240 1129 	movw	r1, #297	; 0x129
  41ba9a:	3010      	adds	r0, #16
  41ba9c:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, COLOR_BTN_CHK_PR);
  41ba9e:	6826      	ldr	r6, [r4, #0]
  41baa0:	3610      	adds	r6, #16
  41baa2:	214c      	movs	r1, #76	; 0x4c
  41baa4:	89b8      	ldrh	r0, [r7, #12]
  41baa6:	4b0c      	ldr	r3, [pc, #48]	; (41bad8 <basic_init+0x9bc>)
  41baa8:	4798      	blx	r3
  41baaa:	4602      	mov	r2, r0
  41baac:	f241 1129 	movw	r1, #4393	; 0x1129
  41bab0:	4630      	mov	r0, r6
  41bab2:	47a8      	blx	r5
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN);
  41bab4:	6820      	ldr	r0, [r4, #0]
  41bab6:	3010      	adds	r0, #16
  41bab8:	6a3b      	ldr	r3, [r7, #32]
  41baba:	f013 0f02 	tst.w	r3, #2
  41babe:	e00d      	b.n	41badc <basic_init+0x9c0>
  41bac0:	00409e11 	.word	0x00409e11
  41bac4:	204147a8 	.word	0x204147a8
  41bac8:	204147ac 	.word	0x204147ac
  41bacc:	00409c81 	.word	0x00409c81
  41bad0:	00417885 	.word	0x00417885
  41bad4:	00409fa1 	.word	0x00409fa1
  41bad8:	00415749 	.word	0x00415749
  41badc:	f000 8575 	beq.w	41c5ca <basic_init+0x14ae>
  41bae0:	f04f 32ff 	mov.w	r2, #4294967295
  41bae4:	f242 0129 	movw	r1, #8233	; 0x2029
  41bae8:	4bc7      	ldr	r3, [pc, #796]	; (41be08 <basic_init+0xcec>)
  41baea:	4798      	blx	r3
    lv_style_set_bg_color(&styles->btn, LV_STATE_DISABLED | LV_STATE_CHECKED, COLOR_BTN_DIS);
  41baec:	4bc7      	ldr	r3, [pc, #796]	; (41be0c <basic_init+0xcf0>)
  41baee:	6818      	ldr	r0, [r3, #0]
  41baf0:	3010      	adds	r0, #16
  41baf2:	4bc7      	ldr	r3, [pc, #796]	; (41be10 <basic_init+0xcf4>)
  41baf4:	6a1b      	ldr	r3, [r3, #32]
  41baf6:	f013 0f02 	tst.w	r3, #2
  41bafa:	f000 8575 	beq.w	41c5e8 <basic_init+0x14cc>
    return LV_COLOR_MAKE(r, g, b);
  41bafe:	f04f 0200 	mov.w	r2, #0
  41bb02:	2306      	movs	r3, #6
  41bb04:	f363 0202 	bfi	r2, r3, #0, #3
  41bb08:	2319      	movs	r3, #25
  41bb0a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb0e:	f363 220c 	bfi	r2, r3, #8, #5
  41bb12:	2303      	movs	r3, #3
  41bb14:	f363 324f 	bfi	r2, r3, #13, #3
  41bb18:	f242 1129 	movw	r1, #8489	; 0x2129
  41bb1c:	4eba      	ldr	r6, [pc, #744]	; (41be08 <basic_init+0xcec>)
  41bb1e:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, COLOR_BTN_BORDER);
  41bb20:	4dba      	ldr	r5, [pc, #744]	; (41be0c <basic_init+0xcf0>)
  41bb22:	6828      	ldr	r0, [r5, #0]
  41bb24:	4cba      	ldr	r4, [pc, #744]	; (41be10 <basic_init+0xcf4>)
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41bb26:	89a2      	ldrh	r2, [r4, #12]
  41bb28:	2139      	movs	r1, #57	; 0x39
  41bb2a:	3010      	adds	r0, #16
  41bb2c:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_PRESSED, COLOR_BTN_BORDER_PR);
  41bb2e:	6828      	ldr	r0, [r5, #0]
  41bb30:	89a2      	ldrh	r2, [r4, #12]
  41bb32:	f241 0139 	movw	r1, #4153	; 0x1039
  41bb36:	3010      	adds	r0, #16
  41bb38:	47b0      	blx	r6
    lv_style_set_border_color(&styles->btn, LV_STATE_DISABLED, COLOR_BTN_BORDER_INA);
  41bb3a:	6828      	ldr	r0, [r5, #0]
  41bb3c:	3010      	adds	r0, #16
  41bb3e:	6a23      	ldr	r3, [r4, #32]
  41bb40:	f013 0f02 	tst.w	r3, #2
  41bb44:	f000 855f 	beq.w	41c606 <basic_init+0x14ea>
  41bb48:	f04f 0200 	mov.w	r2, #0
  41bb4c:	2304      	movs	r3, #4
  41bb4e:	f363 0202 	bfi	r2, r3, #0, #3
  41bb52:	2311      	movs	r3, #17
  41bb54:	f363 02c7 	bfi	r2, r3, #3, #5
  41bb58:	f363 220c 	bfi	r2, r3, #8, #5
  41bb5c:	2302      	movs	r3, #2
  41bb5e:	f363 324f 	bfi	r2, r3, #13, #3
  41bb62:	f242 0139 	movw	r1, #8249	; 0x2039
  41bb66:	4ba8      	ldr	r3, [pc, #672]	; (41be08 <basic_init+0xcec>)
  41bb68:	4798      	blx	r3
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41bb6a:	4ba8      	ldr	r3, [pc, #672]	; (41be0c <basic_init+0xcf0>)
  41bb6c:	681c      	ldr	r4, [r3, #0]
  41bb6e:	3410      	adds	r4, #16
  41bb70:	2000      	movs	r0, #0
  41bb72:	4ba8      	ldr	r3, [pc, #672]	; (41be14 <basic_init+0xcf8>)
  41bb74:	4798      	blx	r3
  41bb76:	3028      	adds	r0, #40	; 0x28
  41bb78:	0040      	lsls	r0, r0, #1
  41bb7a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bb7e:	f280 8550 	bge.w	41c622 <basic_init+0x1506>
  41bb82:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  41bb84:	2130      	movs	r1, #48	; 0x30
  41bb86:	4620      	mov	r0, r4
  41bb88:	4ba3      	ldr	r3, [pc, #652]	; (41be18 <basic_init+0xcfc>)
  41bb8a:	4798      	blx	r3
    lv_style_set_border_opa(&styles->btn, LV_STATE_CHECKED, LV_OPA_TRANSP);
  41bb8c:	4c9f      	ldr	r4, [pc, #636]	; (41be0c <basic_init+0xcf0>)
  41bb8e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
  41bb90:	2200      	movs	r2, #0
  41bb92:	f44f 719e 	mov.w	r1, #316	; 0x13c
  41bb96:	3010      	adds	r0, #16
  41bb98:	4ba0      	ldr	r3, [pc, #640]	; (41be1c <basic_init+0xd00>)
  41bb9a:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bb9c:	6820      	ldr	r0, [r4, #0]
  41bb9e:	3010      	adds	r0, #16
  41bba0:	4b9b      	ldr	r3, [pc, #620]	; (41be10 <basic_init+0xcf4>)
  41bba2:	6a1b      	ldr	r3, [r3, #32]
  41bba4:	f013 0f02 	tst.w	r3, #2
  41bba8:	f000 8549 	beq.w	41c63e <basic_init+0x1522>
  41bbac:	f04f 0200 	mov.w	r2, #0
  41bbb0:	2302      	movs	r3, #2
  41bbb2:	f363 0202 	bfi	r2, r3, #0, #3
  41bbb6:	2306      	movs	r3, #6
  41bbb8:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbbc:	2309      	movs	r3, #9
  41bbbe:	f363 220c 	bfi	r2, r3, #8, #5
  41bbc2:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
  41bbc6:	f248 0189 	movw	r1, #32905	; 0x8089
  41bbca:	4b8f      	ldr	r3, [pc, #572]	; (41be08 <basic_init+0xcec>)
  41bbcc:	4798      	blx	r3
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bbce:	4b8f      	ldr	r3, [pc, #572]	; (41be0c <basic_init+0xcf0>)
  41bbd0:	6818      	ldr	r0, [r3, #0]
  41bbd2:	3010      	adds	r0, #16
  41bbd4:	4b8e      	ldr	r3, [pc, #568]	; (41be10 <basic_init+0xcf4>)
  41bbd6:	6a1b      	ldr	r3, [r3, #32]
  41bbd8:	f013 0f02 	tst.w	r3, #2
  41bbdc:	f000 8533 	beq.w	41c646 <basic_init+0x152a>
  41bbe0:	f04f 0200 	mov.w	r2, #0
  41bbe4:	2302      	movs	r3, #2
  41bbe6:	f363 0202 	bfi	r2, r3, #0, #3
  41bbea:	2306      	movs	r3, #6
  41bbec:	f363 02c7 	bfi	r2, r3, #3, #5
  41bbf0:	2309      	movs	r3, #9
  41bbf2:	f363 220c 	bfi	r2, r3, #8, #5
  41bbf6:	f36f 324f 	bfc	r2, #13, #3
  41bbfa:	f249 0189 	movw	r1, #37001	; 0x9089
  41bbfe:	4d82      	ldr	r5, [pc, #520]	; (41be08 <basic_init+0xcec>)
  41bc00:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41bc02:	4c82      	ldr	r4, [pc, #520]	; (41be0c <basic_init+0xcf0>)
  41bc04:	6820      	ldr	r0, [r4, #0]
  41bc06:	f04f 32ff 	mov.w	r2, #4294967295
  41bc0a:	f248 1189 	movw	r1, #33161	; 0x8189
  41bc0e:	3010      	adds	r0, #16
  41bc10:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41bc12:	6820      	ldr	r0, [r4, #0]
  41bc14:	f04f 32ff 	mov.w	r2, #4294967295
  41bc18:	f249 1189 	movw	r1, #37257	; 0x9189
  41bc1c:	3010      	adds	r0, #16
  41bc1e:	47a8      	blx	r5
    lv_style_set_text_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41bc20:	6820      	ldr	r0, [r4, #0]
  41bc22:	3010      	adds	r0, #16
  41bc24:	4b7a      	ldr	r3, [pc, #488]	; (41be10 <basic_init+0xcf4>)
  41bc26:	6a1b      	ldr	r3, [r3, #32]
  41bc28:	f013 0f02 	tst.w	r3, #2
  41bc2c:	f000 850f 	beq.w	41c64e <basic_init+0x1532>
  41bc30:	f04f 0200 	mov.w	r2, #0
  41bc34:	2304      	movs	r3, #4
  41bc36:	f363 0202 	bfi	r2, r3, #0, #3
  41bc3a:	2311      	movs	r3, #17
  41bc3c:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc40:	f363 220c 	bfi	r2, r3, #8, #5
  41bc44:	2302      	movs	r3, #2
  41bc46:	f363 324f 	bfi	r2, r3, #13, #3
  41bc4a:	f24a 0189 	movw	r1, #41097	; 0xa089
  41bc4e:	4b6e      	ldr	r3, [pc, #440]	; (41be08 <basic_init+0xcec>)
  41bc50:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bc52:	4b6e      	ldr	r3, [pc, #440]	; (41be0c <basic_init+0xcf0>)
  41bc54:	6818      	ldr	r0, [r3, #0]
  41bc56:	3010      	adds	r0, #16
  41bc58:	4b6d      	ldr	r3, [pc, #436]	; (41be10 <basic_init+0xcf4>)
  41bc5a:	6a1b      	ldr	r3, [r3, #32]
  41bc5c:	f013 0f02 	tst.w	r3, #2
  41bc60:	f000 8504 	beq.w	41c66c <basic_init+0x1550>
  41bc64:	f04f 0200 	mov.w	r2, #0
  41bc68:	2302      	movs	r3, #2
  41bc6a:	f363 0202 	bfi	r2, r3, #0, #3
  41bc6e:	2306      	movs	r3, #6
  41bc70:	f363 02c7 	bfi	r2, r3, #3, #5
  41bc74:	2309      	movs	r3, #9
  41bc76:	f363 220c 	bfi	r2, r3, #8, #5
  41bc7a:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41bc7e:	f248 01a9 	movw	r1, #32937	; 0x80a9
  41bc82:	4b61      	ldr	r3, [pc, #388]	; (41be08 <basic_init+0xcec>)
  41bc84:	4798      	blx	r3
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bc86:	4b61      	ldr	r3, [pc, #388]	; (41be0c <basic_init+0xcf0>)
  41bc88:	6818      	ldr	r0, [r3, #0]
  41bc8a:	3010      	adds	r0, #16
  41bc8c:	4b60      	ldr	r3, [pc, #384]	; (41be10 <basic_init+0xcf4>)
  41bc8e:	6a1b      	ldr	r3, [r3, #32]
  41bc90:	f013 0f02 	tst.w	r3, #2
  41bc94:	f000 84ee 	beq.w	41c674 <basic_init+0x1558>
  41bc98:	f04f 0200 	mov.w	r2, #0
  41bc9c:	2302      	movs	r3, #2
  41bc9e:	f363 0202 	bfi	r2, r3, #0, #3
  41bca2:	2306      	movs	r3, #6
  41bca4:	f363 02c7 	bfi	r2, r3, #3, #5
  41bca8:	2309      	movs	r3, #9
  41bcaa:	f363 220c 	bfi	r2, r3, #8, #5
  41bcae:	f36f 324f 	bfc	r2, #13, #3
  41bcb2:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41bcb6:	4d54      	ldr	r5, [pc, #336]	; (41be08 <basic_init+0xcec>)
  41bcb8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41bcba:	4c54      	ldr	r4, [pc, #336]	; (41be0c <basic_init+0xcf0>)
  41bcbc:	6820      	ldr	r0, [r4, #0]
  41bcbe:	f04f 32ff 	mov.w	r2, #4294967295
  41bcc2:	f249 01a9 	movw	r1, #37033	; 0x90a9
  41bcc6:	3010      	adds	r0, #16
  41bcc8:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41bcca:	6820      	ldr	r0, [r4, #0]
  41bccc:	f04f 32ff 	mov.w	r2, #4294967295
  41bcd0:	f249 11a9 	movw	r1, #37289	; 0x91a9
  41bcd4:	3010      	adds	r0, #16
  41bcd6:	47a8      	blx	r5
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41bcd8:	6820      	ldr	r0, [r4, #0]
  41bcda:	3010      	adds	r0, #16
  41bcdc:	4b4c      	ldr	r3, [pc, #304]	; (41be10 <basic_init+0xcf4>)
  41bcde:	6a1b      	ldr	r3, [r3, #32]
  41bce0:	f013 0f02 	tst.w	r3, #2
  41bce4:	f000 84ca 	beq.w	41c67c <basic_init+0x1560>
  41bce8:	f04f 0200 	mov.w	r2, #0
  41bcec:	2304      	movs	r3, #4
  41bcee:	f363 0202 	bfi	r2, r3, #0, #3
  41bcf2:	2311      	movs	r3, #17
  41bcf4:	f363 02c7 	bfi	r2, r3, #3, #5
  41bcf8:	f363 220c 	bfi	r2, r3, #8, #5
  41bcfc:	2302      	movs	r3, #2
  41bcfe:	f363 324f 	bfi	r2, r3, #13, #3
  41bd02:	f24a 01a9 	movw	r1, #41129	; 0xa0a9
  41bd06:	4b40      	ldr	r3, [pc, #256]	; (41be08 <basic_init+0xcec>)
  41bd08:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bd0a:	4b40      	ldr	r3, [pc, #256]	; (41be0c <basic_init+0xcf0>)
  41bd0c:	6818      	ldr	r0, [r3, #0]
  41bd0e:	3010      	adds	r0, #16
  41bd10:	4b3f      	ldr	r3, [pc, #252]	; (41be10 <basic_init+0xcf4>)
  41bd12:	6a1b      	ldr	r3, [r3, #32]
  41bd14:	f013 0f02 	tst.w	r3, #2
  41bd18:	f000 84bf 	beq.w	41c69a <basic_init+0x157e>
  41bd1c:	f04f 0200 	mov.w	r2, #0
  41bd20:	2302      	movs	r3, #2
  41bd22:	f363 0202 	bfi	r2, r3, #0, #3
  41bd26:	2306      	movs	r3, #6
  41bd28:	f363 02c7 	bfi	r2, r3, #3, #5
  41bd2c:	2309      	movs	r3, #9
  41bd2e:	f363 220c 	bfi	r2, r3, #8, #5
  41bd32:	f36f 324f 	bfc	r2, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
  41bd36:	2179      	movs	r1, #121	; 0x79
  41bd38:	4b33      	ldr	r3, [pc, #204]	; (41be08 <basic_init+0xcec>)
  41bd3a:	4798      	blx	r3
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, IS_LIGHT ? lv_color_hex(0x31404f) : lv_color_hex(0xffffff));
  41bd3c:	4b33      	ldr	r3, [pc, #204]	; (41be0c <basic_init+0xcf0>)
  41bd3e:	6818      	ldr	r0, [r3, #0]
  41bd40:	3010      	adds	r0, #16
  41bd42:	4b33      	ldr	r3, [pc, #204]	; (41be10 <basic_init+0xcf4>)
  41bd44:	6a1b      	ldr	r3, [r3, #32]
  41bd46:	f013 0f02 	tst.w	r3, #2
  41bd4a:	f000 84aa 	beq.w	41c6a2 <basic_init+0x1586>
  41bd4e:	f04f 0200 	mov.w	r2, #0
  41bd52:	2302      	movs	r3, #2
  41bd54:	f363 0202 	bfi	r2, r3, #0, #3
  41bd58:	2306      	movs	r3, #6
  41bd5a:	f363 02c7 	bfi	r2, r3, #3, #5
  41bd5e:	2309      	movs	r3, #9
  41bd60:	f363 220c 	bfi	r2, r3, #8, #5
  41bd64:	f36f 324f 	bfc	r2, #13, #3
  41bd68:	f241 0179 	movw	r1, #4217	; 0x1079
  41bd6c:	4d26      	ldr	r5, [pc, #152]	; (41be08 <basic_init+0xcec>)
  41bd6e:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED,  lv_color_hex(0xffffff));
  41bd70:	4c26      	ldr	r4, [pc, #152]	; (41be0c <basic_init+0xcf0>)
  41bd72:	6820      	ldr	r0, [r4, #0]
  41bd74:	f04f 32ff 	mov.w	r2, #4294967295
  41bd78:	f240 1179 	movw	r1, #377	; 0x179
  41bd7c:	3010      	adds	r0, #16
  41bd7e:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, lv_color_hex(0xffffff));
  41bd80:	6820      	ldr	r0, [r4, #0]
  41bd82:	f04f 32ff 	mov.w	r2, #4294967295
  41bd86:	f241 1179 	movw	r1, #4473	; 0x1179
  41bd8a:	3010      	adds	r0, #16
  41bd8c:	47a8      	blx	r5
    lv_style_set_value_color(&styles->btn, LV_STATE_DISABLED, IS_LIGHT ? lv_color_hex(0x888888) : lv_color_hex(0x888888));
  41bd8e:	6820      	ldr	r0, [r4, #0]
  41bd90:	3010      	adds	r0, #16
  41bd92:	4b1f      	ldr	r3, [pc, #124]	; (41be10 <basic_init+0xcf4>)
  41bd94:	6a1b      	ldr	r3, [r3, #32]
  41bd96:	f013 0f02 	tst.w	r3, #2
  41bd9a:	f000 8486 	beq.w	41c6aa <basic_init+0x158e>
  41bd9e:	f04f 0200 	mov.w	r2, #0
  41bda2:	2304      	movs	r3, #4
  41bda4:	f363 0202 	bfi	r2, r3, #0, #3
  41bda8:	2311      	movs	r3, #17
  41bdaa:	f363 02c7 	bfi	r2, r3, #3, #5
  41bdae:	f363 220c 	bfi	r2, r3, #8, #5
  41bdb2:	2302      	movs	r3, #2
  41bdb4:	f363 324f 	bfi	r2, r3, #13, #3
  41bdb8:	f242 0179 	movw	r1, #8313	; 0x2079
  41bdbc:	4b12      	ldr	r3, [pc, #72]	; (41be08 <basic_init+0xcec>)
  41bdbe:	4798      	blx	r3
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41bdc0:	4b12      	ldr	r3, [pc, #72]	; (41be0c <basic_init+0xcf0>)
  41bdc2:	681c      	ldr	r4, [r3, #0]
  41bdc4:	3410      	adds	r4, #16
  41bdc6:	2000      	movs	r0, #0
  41bdc8:	4b12      	ldr	r3, [pc, #72]	; (41be14 <basic_init+0xcf8>)
  41bdca:	4798      	blx	r3
  41bdcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bdd0:	00c0      	lsls	r0, r0, #3
  41bdd2:	3050      	adds	r0, #80	; 0x50
  41bdd4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bdd8:	f280 8476 	bge.w	41c6c8 <basic_init+0x15ac>
  41bddc:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bdde:	2112      	movs	r1, #18
  41bde0:	4620      	mov	r0, r4
  41bde2:	4b0d      	ldr	r3, [pc, #52]	; (41be18 <basic_init+0xcfc>)
  41bde4:	4798      	blx	r3
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41bde6:	4b09      	ldr	r3, [pc, #36]	; (41be0c <basic_init+0xcf0>)
  41bde8:	681c      	ldr	r4, [r3, #0]
  41bdea:	3410      	adds	r4, #16
  41bdec:	2000      	movs	r0, #0
  41bdee:	4b09      	ldr	r3, [pc, #36]	; (41be14 <basic_init+0xcf8>)
  41bdf0:	4798      	blx	r3
  41bdf2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bdf6:	00c0      	lsls	r0, r0, #3
  41bdf8:	3050      	adds	r0, #80	; 0x50
  41bdfa:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bdfe:	f280 8473 	bge.w	41c6e8 <basic_init+0x15cc>
  41be02:	2201      	movs	r2, #1
  41be04:	e00c      	b.n	41be20 <basic_init+0xd04>
  41be06:	bf00      	nop
  41be08:	00409e11 	.word	0x00409e11
  41be0c:	204147a8 	.word	0x204147a8
  41be10:	204147ac 	.word	0x204147ac
  41be14:	0041468d 	.word	0x0041468d
  41be18:	00409c81 	.word	0x00409c81
  41be1c:	00409fa1 	.word	0x00409fa1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41be20:	2113      	movs	r1, #19
  41be22:	4620      	mov	r0, r4
  41be24:	4bc2      	ldr	r3, [pc, #776]	; (41c130 <basic_init+0x1014>)
  41be26:	4798      	blx	r3
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41be28:	4bc2      	ldr	r3, [pc, #776]	; (41c134 <basic_init+0x1018>)
  41be2a:	681c      	ldr	r4, [r3, #0]
  41be2c:	3410      	adds	r4, #16
  41be2e:	2000      	movs	r0, #0
  41be30:	4bc1      	ldr	r3, [pc, #772]	; (41c138 <basic_init+0x101c>)
  41be32:	4798      	blx	r3
  41be34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be38:	3050      	adds	r0, #80	; 0x50
  41be3a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be3e:	f280 8463 	bge.w	41c708 <basic_init+0x15ec>
  41be42:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41be44:	2110      	movs	r1, #16
  41be46:	4620      	mov	r0, r4
  41be48:	4bb9      	ldr	r3, [pc, #740]	; (41c130 <basic_init+0x1014>)
  41be4a:	4798      	blx	r3
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41be4c:	4bb9      	ldr	r3, [pc, #740]	; (41c134 <basic_init+0x1018>)
  41be4e:	681c      	ldr	r4, [r3, #0]
  41be50:	3410      	adds	r4, #16
  41be52:	2000      	movs	r0, #0
  41be54:	4bb8      	ldr	r3, [pc, #736]	; (41c138 <basic_init+0x101c>)
  41be56:	4798      	blx	r3
  41be58:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41be5c:	3050      	adds	r0, #80	; 0x50
  41be5e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be62:	f280 8460 	bge.w	41c726 <basic_init+0x160a>
  41be66:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41be68:	2111      	movs	r1, #17
  41be6a:	4620      	mov	r0, r4
  41be6c:	4bb0      	ldr	r3, [pc, #704]	; (41c130 <basic_init+0x1014>)
  41be6e:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41be70:	4bb0      	ldr	r3, [pc, #704]	; (41c134 <basic_init+0x1018>)
  41be72:	681c      	ldr	r4, [r3, #0]
  41be74:	3410      	adds	r4, #16
  41be76:	2000      	movs	r0, #0
  41be78:	4baf      	ldr	r3, [pc, #700]	; (41c138 <basic_init+0x101c>)
  41be7a:	4798      	blx	r3
  41be7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41be80:	0080      	lsls	r0, r0, #2
  41be82:	3050      	adds	r0, #80	; 0x50
  41be84:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41be88:	f280 845c 	bge.w	41c744 <basic_init+0x1628>
  41be8c:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41be8e:	2114      	movs	r1, #20
  41be90:	4620      	mov	r0, r4
  41be92:	4ba7      	ldr	r3, [pc, #668]	; (41c130 <basic_init+0x1014>)
  41be94:	4798      	blx	r3
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41be96:	4ba7      	ldr	r3, [pc, #668]	; (41c134 <basic_init+0x1018>)
  41be98:	681c      	ldr	r4, [r3, #0]
  41be9a:	3410      	adds	r4, #16
  41be9c:	4ba7      	ldr	r3, [pc, #668]	; (41c13c <basic_init+0x1020>)
  41be9e:	6a1b      	ldr	r3, [r3, #32]
  41bea0:	f013 0f20 	tst.w	r3, #32
  41bea4:	f000 845e 	beq.w	41c764 <basic_init+0x1648>
  41bea8:	2200      	movs	r2, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
  41beaa:	2140      	movs	r1, #64	; 0x40
  41beac:	4620      	mov	r0, r4
  41beae:	4da0      	ldr	r5, [pc, #640]	; (41c130 <basic_init+0x1014>)
  41beb0:	47a8      	blx	r5
    lv_style_set_outline_opa(&styles->btn, LV_STATE_DEFAULT, LV_OPA_0);
  41beb2:	4ca0      	ldr	r4, [pc, #640]	; (41c134 <basic_init+0x1018>)
  41beb4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
  41beb6:	2200      	movs	r2, #0
  41beb8:	214c      	movs	r1, #76	; 0x4c
  41beba:	3010      	adds	r0, #16
  41bebc:	4ea0      	ldr	r6, [pc, #640]	; (41c140 <basic_init+0x1024>)
  41bebe:	47b0      	blx	r6
    lv_style_set_outline_opa(&styles->btn, LV_STATE_FOCUSED, LV_OPA_50);
  41bec0:	6820      	ldr	r0, [r4, #0]
  41bec2:	227f      	movs	r2, #127	; 0x7f
  41bec4:	f44f 7113 	mov.w	r1, #588	; 0x24c
  41bec8:	3010      	adds	r0, #16
  41beca:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_DEFAULT, theme.color_primary);
  41becc:	6820      	ldr	r0, [r4, #0]
  41bece:	4f9b      	ldr	r7, [pc, #620]	; (41c13c <basic_init+0x1020>)
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_COLOR, outline_color, lv_color_t, _color, nonscalar)
  41bed0:	89ba      	ldrh	r2, [r7, #12]
  41bed2:	2149      	movs	r1, #73	; 0x49
  41bed4:	3010      	adds	r0, #16
  41bed6:	4e9b      	ldr	r6, [pc, #620]	; (41c144 <basic_init+0x1028>)
  41bed8:	47b0      	blx	r6
    lv_style_set_outline_color(&styles->btn, LV_STATE_EDITED, theme.color_secondary);
  41beda:	6820      	ldr	r0, [r4, #0]
  41bedc:	89fa      	ldrh	r2, [r7, #14]
  41bede:	f240 4149 	movw	r1, #1097	; 0x449
  41bee2:	3010      	adds	r0, #16
  41bee4:	47b0      	blx	r6
    lv_style_set_transition_time(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41bee6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_TIME, transition_time, lv_style_int_t, _int, scalar)
  41bee8:	2200      	movs	r2, #0
  41beea:	21b0      	movs	r1, #176	; 0xb0
  41beec:	3010      	adds	r0, #16
  41beee:	47a8      	blx	r5
    lv_style_set_transition_prop_4(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BORDER_OPA);
  41bef0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_4, transition_prop_4, lv_style_int_t, _int, scalar)
  41bef2:	223c      	movs	r2, #60	; 0x3c
  41bef4:	21b5      	movs	r1, #181	; 0xb5
  41bef6:	3010      	adds	r0, #16
  41bef8:	47a8      	blx	r5
    lv_style_set_transition_prop_5(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_BG_COLOR);
  41befa:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_5, transition_prop_5, lv_style_int_t, _int, scalar)
  41befc:	2229      	movs	r2, #41	; 0x29
  41befe:	21b6      	movs	r1, #182	; 0xb6
  41bf00:	3010      	adds	r0, #16
  41bf02:	47a8      	blx	r5
    lv_style_set_transition_prop_6(&styles->btn, LV_STATE_DEFAULT, LV_STYLE_OUTLINE_OPA);
  41bf04:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PROP_6, transition_prop_6, lv_style_int_t, _int, scalar)
  41bf06:	224c      	movs	r2, #76	; 0x4c
  41bf08:	21b7      	movs	r1, #183	; 0xb7
  41bf0a:	3010      	adds	r0, #16
  41bf0c:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_DEFAULT, TRANSITION_TIME);
  41bf0e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_DELAY, transition_delay, lv_style_int_t, _int, scalar)
  41bf10:	2200      	movs	r2, #0
  41bf12:	21b1      	movs	r1, #177	; 0xb1
  41bf14:	3010      	adds	r0, #16
  41bf16:	47a8      	blx	r5
    lv_style_set_transition_delay(&styles->btn, LV_STATE_PRESSED, 0);
  41bf18:	6820      	ldr	r0, [r4, #0]
  41bf1a:	2200      	movs	r2, #0
  41bf1c:	f241 01b1 	movw	r1, #4273	; 0x10b1
  41bf20:	3010      	adds	r0, #16
  41bf22:	47a8      	blx	r5
    style_init_reset(&styles->pad_inner);
  41bf24:	6820      	ldr	r0, [r4, #0]
  41bf26:	3014      	adds	r0, #20
  41bf28:	4b87      	ldr	r3, [pc, #540]	; (41c148 <basic_init+0x102c>)
  41bf2a:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bf2c:	6824      	ldr	r4, [r4, #0]
  41bf2e:	3414      	adds	r4, #20
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bf30:	2000      	movs	r0, #0
  41bf32:	4b86      	ldr	r3, [pc, #536]	; (41c14c <basic_init+0x1030>)
  41bf34:	4798      	blx	r3
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bf36:	2801      	cmp	r0, #1
  41bf38:	f240 842d 	bls.w	41c796 <basic_init+0x167a>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41bf3c:	2000      	movs	r0, #0
  41bf3e:	4b7e      	ldr	r3, [pc, #504]	; (41c138 <basic_init+0x101c>)
  41bf40:	4798      	blx	r3
  41bf42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf46:	00c0      	lsls	r0, r0, #3
  41bf48:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41bf4a:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf4e:	f280 843f 	bge.w	41c7d0 <basic_init+0x16b4>
  41bf52:	2201      	movs	r2, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bf54:	2114      	movs	r1, #20
  41bf56:	4620      	mov	r0, r4
  41bf58:	4b75      	ldr	r3, [pc, #468]	; (41c130 <basic_init+0x1014>)
  41bf5a:	4798      	blx	r3
    style_init_reset(&styles->pad_small);
  41bf5c:	4b75      	ldr	r3, [pc, #468]	; (41c134 <basic_init+0x1018>)
  41bf5e:	6818      	ldr	r0, [r3, #0]
  41bf60:	3018      	adds	r0, #24
  41bf62:	4b79      	ldr	r3, [pc, #484]	; (41c148 <basic_init+0x102c>)
  41bf64:	4798      	blx	r3
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41bf66:	2000      	movs	r0, #0
  41bf68:	4b78      	ldr	r3, [pc, #480]	; (41c14c <basic_init+0x1030>)
  41bf6a:	4798      	blx	r3
  41bf6c:	2801      	cmp	r0, #1
  41bf6e:	f240 843f 	bls.w	41c7f0 <basic_init+0x16d4>
  41bf72:	2000      	movs	r0, #0
  41bf74:	4b70      	ldr	r3, [pc, #448]	; (41c138 <basic_init+0x101c>)
  41bf76:	4798      	blx	r3
  41bf78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41bf7c:	0080      	lsls	r0, r0, #2
  41bf7e:	3050      	adds	r0, #80	; 0x50
  41bf80:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41bf84:	f280 8451 	bge.w	41c82a <basic_init+0x170e>
  41bf88:	2401      	movs	r4, #1
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41bf8a:	4e6a      	ldr	r6, [pc, #424]	; (41c134 <basic_init+0x1018>)
  41bf8c:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41bf8e:	4622      	mov	r2, r4
  41bf90:	2112      	movs	r1, #18
  41bf92:	3018      	adds	r0, #24
  41bf94:	4d66      	ldr	r5, [pc, #408]	; (41c130 <basic_init+0x1014>)
  41bf96:	47a8      	blx	r5
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bf98:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41bf9a:	4622      	mov	r2, r4
  41bf9c:	2113      	movs	r1, #19
  41bf9e:	3018      	adds	r0, #24
  41bfa0:	47a8      	blx	r5
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT,  pad_small_value);
  41bfa2:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41bfa4:	4622      	mov	r2, r4
  41bfa6:	2110      	movs	r1, #16
  41bfa8:	3018      	adds	r0, #24
  41bfaa:	47a8      	blx	r5
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bfac:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41bfae:	4622      	mov	r2, r4
  41bfb0:	2111      	movs	r1, #17
  41bfb2:	3018      	adds	r0, #24
  41bfb4:	47a8      	blx	r5
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, pad_small_value);
  41bfb6:	6830      	ldr	r0, [r6, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41bfb8:	4622      	mov	r2, r4
  41bfba:	2114      	movs	r1, #20
  41bfbc:	3018      	adds	r0, #24
  41bfbe:	47a8      	blx	r5
  41bfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41bfc2:	2302      	movs	r3, #2
  41bfc4:	f04f 0200 	mov.w	r2, #0
  41bfc8:	f363 0202 	bfi	r2, r3, #0, #3
  41bfcc:	2108      	movs	r1, #8
  41bfce:	f361 02c7 	bfi	r2, r1, #3, #5
  41bfd2:	210b      	movs	r1, #11
  41bfd4:	f361 220c 	bfi	r2, r1, #8, #5
  41bfd8:	f363 324f 	bfi	r2, r3, #13, #3
  41bfdc:	f7ff b8ba 	b.w	41b154 <basic_init+0x38>
  41bfe0:	f04f 0207 	mov.w	r2, #7
  41bfe4:	231c      	movs	r3, #28
  41bfe6:	f363 02c7 	bfi	r2, r3, #3, #5
  41bfea:	231d      	movs	r3, #29
  41bfec:	f363 220c 	bfi	r2, r3, #8, #5
  41bff0:	2302      	movs	r3, #2
  41bff2:	f363 324f 	bfi	r2, r3, #13, #3
  41bff6:	f7ff b8c7 	b.w	41b188 <basic_init+0x6c>
  41bffa:	f04f 0207 	mov.w	r2, #7
  41bffe:	231c      	movs	r3, #28
  41c000:	f363 02c7 	bfi	r2, r3, #3, #5
  41c004:	231d      	movs	r3, #29
  41c006:	f363 220c 	bfi	r2, r3, #8, #5
  41c00a:	2302      	movs	r3, #2
  41c00c:	f363 324f 	bfi	r2, r3, #13, #3
  41c010:	f7ff b8d5 	b.w	41b1be <basic_init+0xa2>
  41c014:	f04f 0207 	mov.w	r2, #7
  41c018:	231c      	movs	r3, #28
  41c01a:	f363 02c7 	bfi	r2, r3, #3, #5
  41c01e:	231d      	movs	r3, #29
  41c020:	f363 220c 	bfi	r2, r3, #8, #5
  41c024:	2302      	movs	r3, #2
  41c026:	f363 324f 	bfi	r2, r3, #13, #3
  41c02a:	f7ff b8e2 	b.w	41b1f2 <basic_init+0xd6>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, LV_DPX(8));
  41c02e:	2000      	movs	r0, #0
  41c030:	4b41      	ldr	r3, [pc, #260]	; (41c138 <basic_init+0x101c>)
  41c032:	4798      	blx	r3
  41c034:	300a      	adds	r0, #10
  41c036:	00c0      	lsls	r0, r0, #3
  41c038:	4b45      	ldr	r3, [pc, #276]	; (41c150 <basic_init+0x1034>)
  41c03a:	fb83 2300 	smull	r2, r3, r3, r0
  41c03e:	17c2      	asrs	r2, r0, #31
  41c040:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c044:	b212      	sxth	r2, r2
  41c046:	f7ff b8f4 	b.w	41b232 <basic_init+0x116>
  41c04a:	f04f 0200 	mov.w	r2, #0
  41c04e:	2303      	movs	r3, #3
  41c050:	f363 0202 	bfi	r2, r3, #0, #3
  41c054:	230b      	movs	r3, #11
  41c056:	f363 02c7 	bfi	r2, r3, #3, #5
  41c05a:	230e      	movs	r3, #14
  41c05c:	f363 220c 	bfi	r2, r3, #8, #5
  41c060:	f36f 324f 	bfc	r2, #13, #3
  41c064:	f7ff b8fa 	b.w	41b25c <basic_init+0x140>
  41c068:	f04f 0200 	mov.w	r2, #0
  41c06c:	2304      	movs	r3, #4
  41c06e:	f363 0202 	bfi	r2, r3, #0, #3
  41c072:	2310      	movs	r3, #16
  41c074:	f363 02c7 	bfi	r2, r3, #3, #5
  41c078:	2312      	movs	r3, #18
  41c07a:	f363 220c 	bfi	r2, r3, #8, #5
  41c07e:	2302      	movs	r3, #2
  41c080:	f363 324f 	bfi	r2, r3, #13, #3
  41c084:	f7ff b905 	b.w	41b292 <basic_init+0x176>
    if((theme.flags & LV_THEME_MATERIAL_FLAG_NO_FOCUS) == 0)lv_style_set_border_color(&styles->bg, LV_STATE_FOCUSED,
  41c088:	4b2a      	ldr	r3, [pc, #168]	; (41c134 <basic_init+0x1018>)
  41c08a:	6818      	ldr	r0, [r3, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  41c08c:	4b2b      	ldr	r3, [pc, #172]	; (41c13c <basic_init+0x1020>)
  41c08e:	899a      	ldrh	r2, [r3, #12]
  41c090:	f240 2139 	movw	r1, #569	; 0x239
  41c094:	3004      	adds	r0, #4
  41c096:	4b2b      	ldr	r3, [pc, #172]	; (41c144 <basic_init+0x1028>)
  41c098:	4798      	blx	r3
  41c09a:	f7ff b903 	b.w	41b2a4 <basic_init+0x188>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c09e:	2000      	movs	r0, #0
  41c0a0:	4b25      	ldr	r3, [pc, #148]	; (41c138 <basic_init+0x101c>)
  41c0a2:	4798      	blx	r3
  41c0a4:	3028      	adds	r0, #40	; 0x28
  41c0a6:	0040      	lsls	r0, r0, #1
  41c0a8:	4b29      	ldr	r3, [pc, #164]	; (41c150 <basic_init+0x1034>)
  41c0aa:	fb83 2300 	smull	r2, r3, r3, r0
  41c0ae:	17c2      	asrs	r2, r0, #31
  41c0b0:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c0b4:	b212      	sxth	r2, r2
  41c0b6:	f7ff b90a 	b.w	41b2ce <basic_init+0x1b2>
  41c0ba:	f04f 32ff 	mov.w	r2, #4294967295
  41c0be:	f7ff b927 	b.w	41b310 <basic_init+0x1f4>
  41c0c2:	f04f 32ff 	mov.w	r2, #4294967295
  41c0c6:	f7ff b945 	b.w	41b354 <basic_init+0x238>
  41c0ca:	f04f 32ff 	mov.w	r2, #4294967295
  41c0ce:	f7ff b95c 	b.w	41b38a <basic_init+0x26e>
  41c0d2:	f04f 32ff 	mov.w	r2, #4294967295
  41c0d6:	f7ff b974 	b.w	41b3c2 <basic_init+0x2a6>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c0da:	2000      	movs	r0, #0
  41c0dc:	4b16      	ldr	r3, [pc, #88]	; (41c138 <basic_init+0x101c>)
  41c0de:	4798      	blx	r3
  41c0e0:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0e4:	3050      	adds	r0, #80	; 0x50
  41c0e6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c0ea:	da02      	bge.n	41c0f2 <basic_init+0xfd6>
  41c0ec:	2401      	movs	r4, #1
  41c0ee:	f7ff b986 	b.w	41b3fe <basic_init+0x2e2>
  41c0f2:	2000      	movs	r0, #0
  41c0f4:	4b10      	ldr	r3, [pc, #64]	; (41c138 <basic_init+0x101c>)
  41c0f6:	4798      	blx	r3
  41c0f8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c0fc:	3050      	adds	r0, #80	; 0x50
  41c0fe:	4a14      	ldr	r2, [pc, #80]	; (41c150 <basic_init+0x1034>)
  41c100:	fb82 3200 	smull	r3, r2, r2, r0
  41c104:	17c4      	asrs	r4, r0, #31
  41c106:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c10a:	b2a4      	uxth	r4, r4
  41c10c:	f7ff b977 	b.w	41b3fe <basic_init+0x2e2>
  41c110:	2000      	movs	r0, #0
  41c112:	4b09      	ldr	r3, [pc, #36]	; (41c138 <basic_init+0x101c>)
  41c114:	4798      	blx	r3
  41c116:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c11a:	0040      	lsls	r0, r0, #1
  41c11c:	3050      	adds	r0, #80	; 0x50
  41c11e:	4a0c      	ldr	r2, [pc, #48]	; (41c150 <basic_init+0x1034>)
  41c120:	fb82 3200 	smull	r3, r2, r2, r0
  41c124:	17c4      	asrs	r4, r0, #31
  41c126:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c12a:	b2a4      	uxth	r4, r4
  41c12c:	f7ff b967 	b.w	41b3fe <basic_init+0x2e2>
  41c130:	00409c81 	.word	0x00409c81
  41c134:	204147a8 	.word	0x204147a8
  41c138:	0041468d 	.word	0x0041468d
  41c13c:	204147ac 	.word	0x204147ac
  41c140:	00409fa1 	.word	0x00409fa1
  41c144:	00409e11 	.word	0x00409e11
  41c148:	00417885 	.word	0x00417885
  41c14c:	004146ad 	.word	0x004146ad
  41c150:	66666667 	.word	0x66666667
  41c154:	2000      	movs	r0, #0
  41c156:	4bdf      	ldr	r3, [pc, #892]	; (41c4d4 <basic_init+0x13b8>)
  41c158:	4798      	blx	r3
  41c15a:	3028      	adds	r0, #40	; 0x28
  41c15c:	0040      	lsls	r0, r0, #1
  41c15e:	4bde      	ldr	r3, [pc, #888]	; (41c4d8 <basic_init+0x13bc>)
  41c160:	fb83 2300 	smull	r2, r3, r3, r0
  41c164:	17c2      	asrs	r2, r0, #31
  41c166:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c16a:	b292      	uxth	r2, r2
  41c16c:	f7ff b951 	b.w	41b412 <basic_init+0x2f6>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c170:	2000      	movs	r0, #0
  41c172:	4bd8      	ldr	r3, [pc, #864]	; (41c4d4 <basic_init+0x13b8>)
  41c174:	4798      	blx	r3
  41c176:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c17a:	3050      	adds	r0, #80	; 0x50
  41c17c:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c180:	da02      	bge.n	41c188 <basic_init+0x106c>
  41c182:	2401      	movs	r4, #1
  41c184:	f7ff b974 	b.w	41b470 <basic_init+0x354>
  41c188:	2000      	movs	r0, #0
  41c18a:	4bd2      	ldr	r3, [pc, #840]	; (41c4d4 <basic_init+0x13b8>)
  41c18c:	4798      	blx	r3
  41c18e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c192:	3050      	adds	r0, #80	; 0x50
  41c194:	4ad0      	ldr	r2, [pc, #832]	; (41c4d8 <basic_init+0x13bc>)
  41c196:	fb82 3200 	smull	r3, r2, r2, r0
  41c19a:	17c4      	asrs	r4, r0, #31
  41c19c:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c1a0:	b2a4      	uxth	r4, r4
  41c1a2:	f7ff b965 	b.w	41b470 <basic_init+0x354>
  41c1a6:	2000      	movs	r0, #0
  41c1a8:	4bca      	ldr	r3, [pc, #808]	; (41c4d4 <basic_init+0x13b8>)
  41c1aa:	4798      	blx	r3
  41c1ac:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1b0:	0040      	lsls	r0, r0, #1
  41c1b2:	3050      	adds	r0, #80	; 0x50
  41c1b4:	4ac8      	ldr	r2, [pc, #800]	; (41c4d8 <basic_init+0x13bc>)
  41c1b6:	fb82 3200 	smull	r3, r2, r2, r0
  41c1ba:	17c4      	asrs	r4, r0, #31
  41c1bc:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c1c0:	b2a4      	uxth	r4, r4
  41c1c2:	f7ff b955 	b.w	41b470 <basic_init+0x354>
  41c1c6:	2000      	movs	r0, #0
  41c1c8:	4bc2      	ldr	r3, [pc, #776]	; (41c4d4 <basic_init+0x13b8>)
  41c1ca:	4798      	blx	r3
  41c1cc:	3028      	adds	r0, #40	; 0x28
  41c1ce:	0040      	lsls	r0, r0, #1
  41c1d0:	4bc1      	ldr	r3, [pc, #772]	; (41c4d8 <basic_init+0x13bc>)
  41c1d2:	fb83 2300 	smull	r2, r3, r3, r0
  41c1d6:	17c2      	asrs	r2, r0, #31
  41c1d8:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c1dc:	b292      	uxth	r2, r2
  41c1de:	f7ff b951 	b.w	41b484 <basic_init+0x368>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c1e2:	2000      	movs	r0, #0
  41c1e4:	4bbb      	ldr	r3, [pc, #748]	; (41c4d4 <basic_init+0x13b8>)
  41c1e6:	4798      	blx	r3
  41c1e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c1ec:	3050      	adds	r0, #80	; 0x50
  41c1ee:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c1f2:	da02      	bge.n	41c1fa <basic_init+0x10de>
  41c1f4:	2401      	movs	r4, #1
  41c1f6:	f7ff b960 	b.w	41b4ba <basic_init+0x39e>
  41c1fa:	2000      	movs	r0, #0
  41c1fc:	4bb5      	ldr	r3, [pc, #724]	; (41c4d4 <basic_init+0x13b8>)
  41c1fe:	4798      	blx	r3
  41c200:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c204:	3050      	adds	r0, #80	; 0x50
  41c206:	4ab4      	ldr	r2, [pc, #720]	; (41c4d8 <basic_init+0x13bc>)
  41c208:	fb82 3200 	smull	r3, r2, r2, r0
  41c20c:	17c4      	asrs	r4, r0, #31
  41c20e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c212:	b2a4      	uxth	r4, r4
  41c214:	f7ff b951 	b.w	41b4ba <basic_init+0x39e>
  41c218:	2000      	movs	r0, #0
  41c21a:	4bae      	ldr	r3, [pc, #696]	; (41c4d4 <basic_init+0x13b8>)
  41c21c:	4798      	blx	r3
  41c21e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c222:	0040      	lsls	r0, r0, #1
  41c224:	3050      	adds	r0, #80	; 0x50
  41c226:	4aac      	ldr	r2, [pc, #688]	; (41c4d8 <basic_init+0x13bc>)
  41c228:	fb82 3200 	smull	r3, r2, r2, r0
  41c22c:	17c4      	asrs	r4, r0, #31
  41c22e:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c232:	b2a4      	uxth	r4, r4
  41c234:	f7ff b941 	b.w	41b4ba <basic_init+0x39e>
  41c238:	2000      	movs	r0, #0
  41c23a:	4ba6      	ldr	r3, [pc, #664]	; (41c4d4 <basic_init+0x13b8>)
  41c23c:	4798      	blx	r3
  41c23e:	3028      	adds	r0, #40	; 0x28
  41c240:	0040      	lsls	r0, r0, #1
  41c242:	4ba5      	ldr	r3, [pc, #660]	; (41c4d8 <basic_init+0x13bc>)
  41c244:	fb83 2300 	smull	r2, r3, r3, r0
  41c248:	17c2      	asrs	r2, r0, #31
  41c24a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c24e:	b292      	uxth	r2, r2
  41c250:	f7ff b93d 	b.w	41b4ce <basic_init+0x3b2>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, PAD_DEF + BORDER_WIDTH);
  41c254:	2000      	movs	r0, #0
  41c256:	4b9f      	ldr	r3, [pc, #636]	; (41c4d4 <basic_init+0x13b8>)
  41c258:	4798      	blx	r3
  41c25a:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c25e:	3050      	adds	r0, #80	; 0x50
  41c260:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c264:	da02      	bge.n	41c26c <basic_init+0x1150>
  41c266:	2401      	movs	r4, #1
  41c268:	f7ff b94c 	b.w	41b504 <basic_init+0x3e8>
  41c26c:	2000      	movs	r0, #0
  41c26e:	4b99      	ldr	r3, [pc, #612]	; (41c4d4 <basic_init+0x13b8>)
  41c270:	4798      	blx	r3
  41c272:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c276:	3050      	adds	r0, #80	; 0x50
  41c278:	4a97      	ldr	r2, [pc, #604]	; (41c4d8 <basic_init+0x13bc>)
  41c27a:	fb82 3200 	smull	r3, r2, r2, r0
  41c27e:	17c4      	asrs	r4, r0, #31
  41c280:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c284:	b2a4      	uxth	r4, r4
  41c286:	f7ff b93d 	b.w	41b504 <basic_init+0x3e8>
  41c28a:	2000      	movs	r0, #0
  41c28c:	4b91      	ldr	r3, [pc, #580]	; (41c4d4 <basic_init+0x13b8>)
  41c28e:	4798      	blx	r3
  41c290:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c294:	0040      	lsls	r0, r0, #1
  41c296:	3050      	adds	r0, #80	; 0x50
  41c298:	4a8f      	ldr	r2, [pc, #572]	; (41c4d8 <basic_init+0x13bc>)
  41c29a:	fb82 3200 	smull	r3, r2, r2, r0
  41c29e:	17c4      	asrs	r4, r0, #31
  41c2a0:	ebc4 14a2 	rsb	r4, r4, r2, asr #6
  41c2a4:	b2a4      	uxth	r4, r4
  41c2a6:	f7ff b92d 	b.w	41b504 <basic_init+0x3e8>
  41c2aa:	2000      	movs	r0, #0
  41c2ac:	4b89      	ldr	r3, [pc, #548]	; (41c4d4 <basic_init+0x13b8>)
  41c2ae:	4798      	blx	r3
  41c2b0:	3028      	adds	r0, #40	; 0x28
  41c2b2:	0040      	lsls	r0, r0, #1
  41c2b4:	4b88      	ldr	r3, [pc, #544]	; (41c4d8 <basic_init+0x13bc>)
  41c2b6:	fb83 2300 	smull	r2, r3, r3, r0
  41c2ba:	17c2      	asrs	r2, r0, #31
  41c2bc:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2c0:	b292      	uxth	r2, r2
  41c2c2:	f7ff b929 	b.w	41b518 <basic_init+0x3fc>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, PAD_DEF);
  41c2c6:	2000      	movs	r0, #0
  41c2c8:	4b82      	ldr	r3, [pc, #520]	; (41c4d4 <basic_init+0x13b8>)
  41c2ca:	4798      	blx	r3
  41c2cc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c2d0:	3050      	adds	r0, #80	; 0x50
  41c2d2:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c2d6:	da02      	bge.n	41c2de <basic_init+0x11c2>
  41c2d8:	2201      	movs	r2, #1
  41c2da:	f7ff b938 	b.w	41b54e <basic_init+0x432>
  41c2de:	2000      	movs	r0, #0
  41c2e0:	4b7c      	ldr	r3, [pc, #496]	; (41c4d4 <basic_init+0x13b8>)
  41c2e2:	4798      	blx	r3
  41c2e4:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c2e8:	3050      	adds	r0, #80	; 0x50
  41c2ea:	4b7b      	ldr	r3, [pc, #492]	; (41c4d8 <basic_init+0x13bc>)
  41c2ec:	fb83 2300 	smull	r2, r3, r3, r0
  41c2f0:	17c2      	asrs	r2, r0, #31
  41c2f2:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c2f6:	b212      	sxth	r2, r2
  41c2f8:	f7ff b929 	b.w	41b54e <basic_init+0x432>
  41c2fc:	2000      	movs	r0, #0
  41c2fe:	4b75      	ldr	r3, [pc, #468]	; (41c4d4 <basic_init+0x13b8>)
  41c300:	4798      	blx	r3
  41c302:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c306:	0040      	lsls	r0, r0, #1
  41c308:	3050      	adds	r0, #80	; 0x50
  41c30a:	4b73      	ldr	r3, [pc, #460]	; (41c4d8 <basic_init+0x13bc>)
  41c30c:	fb83 2300 	smull	r2, r3, r3, r0
  41c310:	17c2      	asrs	r2, r0, #31
  41c312:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c316:	b212      	sxth	r2, r2
  41c318:	f7ff b919 	b.w	41b54e <basic_init+0x432>
  41c31c:	2302      	movs	r3, #2
  41c31e:	f04f 0200 	mov.w	r2, #0
  41c322:	f363 0202 	bfi	r2, r3, #0, #3
  41c326:	2108      	movs	r1, #8
  41c328:	f361 02c7 	bfi	r2, r1, #3, #5
  41c32c:	2109      	movs	r1, #9
  41c32e:	f361 220c 	bfi	r2, r1, #8, #5
  41c332:	f363 324f 	bfi	r2, r3, #13, #3
  41c336:	f7ff b938 	b.w	41b5aa <basic_init+0x48e>
  41c33a:	f04f 0200 	mov.w	r2, #0
  41c33e:	2302      	movs	r3, #2
  41c340:	f363 0202 	bfi	r2, r3, #0, #3
  41c344:	2308      	movs	r3, #8
  41c346:	f363 02c7 	bfi	r2, r3, #3, #5
  41c34a:	f363 220c 	bfi	r2, r3, #8, #5
  41c34e:	f36f 324f 	bfc	r2, #13, #3
  41c352:	f7ff b941 	b.w	41b5d8 <basic_init+0x4bc>
  41c356:	f04f 0200 	mov.w	r2, #0
  41c35a:	2305      	movs	r3, #5
  41c35c:	f363 0202 	bfi	r2, r3, #0, #3
  41c360:	2314      	movs	r3, #20
  41c362:	f363 02c7 	bfi	r2, r3, #3, #5
  41c366:	2315      	movs	r3, #21
  41c368:	f363 220c 	bfi	r2, r3, #8, #5
  41c36c:	2302      	movs	r3, #2
  41c36e:	f363 324f 	bfi	r2, r3, #13, #3
  41c372:	f7ff b94a 	b.w	41b60a <basic_init+0x4ee>
  41c376:	f04f 0200 	mov.w	r2, #0
  41c37a:	2305      	movs	r3, #5
  41c37c:	f363 0202 	bfi	r2, r3, #0, #3
  41c380:	2314      	movs	r3, #20
  41c382:	f363 02c7 	bfi	r2, r3, #3, #5
  41c386:	2315      	movs	r3, #21
  41c388:	f363 220c 	bfi	r2, r3, #8, #5
  41c38c:	2302      	movs	r3, #2
  41c38e:	f363 324f 	bfi	r2, r3, #13, #3
  41c392:	f7ff b954 	b.w	41b63e <basic_init+0x522>
  41c396:	f04f 0200 	mov.w	r2, #0
  41c39a:	2305      	movs	r3, #5
  41c39c:	f363 0202 	bfi	r2, r3, #0, #3
  41c3a0:	2314      	movs	r3, #20
  41c3a2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c3a6:	2315      	movs	r3, #21
  41c3a8:	f363 220c 	bfi	r2, r3, #8, #5
  41c3ac:	2302      	movs	r3, #2
  41c3ae:	f363 324f 	bfi	r2, r3, #13, #3
  41c3b2:	f7ff b95d 	b.w	41b670 <basic_init+0x554>
  41c3b6:	f04f 0200 	mov.w	r2, #0
  41c3ba:	2305      	movs	r3, #5
  41c3bc:	f363 0202 	bfi	r2, r3, #0, #3
  41c3c0:	2314      	movs	r3, #20
  41c3c2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c3c6:	2315      	movs	r3, #21
  41c3c8:	f363 220c 	bfi	r2, r3, #8, #5
  41c3cc:	2302      	movs	r3, #2
  41c3ce:	f363 324f 	bfi	r2, r3, #13, #3
  41c3d2:	f7ff b967 	b.w	41b6a4 <basic_init+0x588>
  41c3d6:	f04f 0200 	mov.w	r2, #0
  41c3da:	2302      	movs	r3, #2
  41c3dc:	f363 0202 	bfi	r2, r3, #0, #3
  41c3e0:	2309      	movs	r3, #9
  41c3e2:	f363 02c7 	bfi	r2, r3, #3, #5
  41c3e6:	230a      	movs	r3, #10
  41c3e8:	f363 220c 	bfi	r2, r3, #8, #5
  41c3ec:	2303      	movs	r3, #3
  41c3ee:	f363 324f 	bfi	r2, r3, #13, #3
  41c3f2:	f7ff b971 	b.w	41b6d8 <basic_init+0x5bc>
  41c3f6:	f04f 0200 	mov.w	r2, #0
  41c3fa:	2303      	movs	r3, #3
  41c3fc:	f363 0202 	bfi	r2, r3, #0, #3
  41c400:	230b      	movs	r3, #11
  41c402:	f363 02c7 	bfi	r2, r3, #3, #5
  41c406:	230e      	movs	r3, #14
  41c408:	f363 220c 	bfi	r2, r3, #8, #5
  41c40c:	f36f 324f 	bfc	r2, #13, #3
  41c410:	f7ff b982 	b.w	41b718 <basic_init+0x5fc>
  41c414:	f04f 0200 	mov.w	r2, #0
  41c418:	2303      	movs	r3, #3
  41c41a:	f363 0202 	bfi	r2, r3, #0, #3
  41c41e:	230b      	movs	r3, #11
  41c420:	f363 02c7 	bfi	r2, r3, #3, #5
  41c424:	230d      	movs	r3, #13
  41c426:	f363 220c 	bfi	r2, r3, #8, #5
  41c42a:	2301      	movs	r3, #1
  41c42c:	f363 324f 	bfi	r2, r3, #13, #3
  41c430:	f7ff b9b1 	b.w	41b796 <basic_init+0x67a>
  41c434:	f04f 0200 	mov.w	r2, #0
  41c438:	2303      	movs	r3, #3
  41c43a:	f363 0202 	bfi	r2, r3, #0, #3
  41c43e:	230b      	movs	r3, #11
  41c440:	f363 02c7 	bfi	r2, r3, #3, #5
  41c444:	230d      	movs	r3, #13
  41c446:	f363 220c 	bfi	r2, r3, #8, #5
  41c44a:	2301      	movs	r3, #1
  41c44c:	f363 324f 	bfi	r2, r3, #13, #3
  41c450:	f7ff b9bd 	b.w	41b7ce <basic_init+0x6b2>
  41c454:	f04f 0200 	mov.w	r2, #0
  41c458:	2303      	movs	r3, #3
  41c45a:	f363 0202 	bfi	r2, r3, #0, #3
  41c45e:	230b      	movs	r3, #11
  41c460:	f363 02c7 	bfi	r2, r3, #3, #5
  41c464:	230d      	movs	r3, #13
  41c466:	f363 220c 	bfi	r2, r3, #8, #5
  41c46a:	2301      	movs	r3, #1
  41c46c:	f363 324f 	bfi	r2, r3, #13, #3
  41c470:	f7ff b9c9 	b.w	41b806 <basic_init+0x6ea>
  41c474:	f04f 0200 	mov.w	r2, #0
  41c478:	2303      	movs	r3, #3
  41c47a:	f363 0202 	bfi	r2, r3, #0, #3
  41c47e:	230b      	movs	r3, #11
  41c480:	f363 02c7 	bfi	r2, r3, #3, #5
  41c484:	230d      	movs	r3, #13
  41c486:	f363 220c 	bfi	r2, r3, #8, #5
  41c48a:	2301      	movs	r3, #1
  41c48c:	f363 324f 	bfi	r2, r3, #13, #3
  41c490:	f7ff b9d5 	b.w	41b83e <basic_init+0x722>
  41c494:	f04f 32ff 	mov.w	r2, #4294967295
  41c498:	f7ff b9ed 	b.w	41b876 <basic_init+0x75a>
  41c49c:	f04f 32ff 	mov.w	r2, #4294967295
  41c4a0:	f7ff b9f8 	b.w	41b894 <basic_init+0x778>
  41c4a4:	f04f 32ff 	mov.w	r2, #4294967295
  41c4a8:	f7ff ba03 	b.w	41b8b2 <basic_init+0x796>
  41c4ac:	f04f 0200 	mov.w	r2, #0
  41c4b0:	2304      	movs	r3, #4
  41c4b2:	f363 0202 	bfi	r2, r3, #0, #3
  41c4b6:	2313      	movs	r3, #19
  41c4b8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c4bc:	f363 220c 	bfi	r2, r3, #8, #5
  41c4c0:	2306      	movs	r3, #6
  41c4c2:	f363 324f 	bfi	r2, r3, #13, #3
  41c4c6:	f7ff ba0e 	b.w	41b8e6 <basic_init+0x7ca>
  41c4ca:	f04f 32ff 	mov.w	r2, #4294967295
  41c4ce:	f7ff ba26 	b.w	41b91e <basic_init+0x802>
  41c4d2:	bf00      	nop
  41c4d4:	0041468d 	.word	0x0041468d
  41c4d8:	66666667 	.word	0x66666667
  41c4dc:	f04f 32ff 	mov.w	r2, #4294967295
  41c4e0:	f7ff ba2c 	b.w	41b93c <basic_init+0x820>
  41c4e4:	f04f 32ff 	mov.w	r2, #4294967295
  41c4e8:	f7ff ba37 	b.w	41b95a <basic_init+0x83e>
  41c4ec:	f04f 0200 	mov.w	r2, #0
  41c4f0:	2304      	movs	r3, #4
  41c4f2:	f363 0202 	bfi	r2, r3, #0, #3
  41c4f6:	2313      	movs	r3, #19
  41c4f8:	f363 02c7 	bfi	r2, r3, #3, #5
  41c4fc:	f363 220c 	bfi	r2, r3, #8, #5
  41c500:	2306      	movs	r3, #6
  41c502:	f363 324f 	bfi	r2, r3, #13, #3
  41c506:	f7ff ba42 	b.w	41b98e <basic_init+0x872>
  41c50a:	f04f 0200 	mov.w	r2, #0
  41c50e:	2303      	movs	r3, #3
  41c510:	f363 0202 	bfi	r2, r3, #0, #3
  41c514:	230b      	movs	r3, #11
  41c516:	f363 02c7 	bfi	r2, r3, #3, #5
  41c51a:	230e      	movs	r3, #14
  41c51c:	f363 220c 	bfi	r2, r3, #8, #5
  41c520:	f36f 324f 	bfc	r2, #13, #3
  41c524:	f7ff ba58 	b.w	41b9d8 <basic_init+0x8bc>
  41c528:	f04f 0400 	mov.w	r4, #0
  41c52c:	2303      	movs	r3, #3
  41c52e:	f363 0402 	bfi	r4, r3, #0, #3
  41c532:	230b      	movs	r3, #11
  41c534:	f363 04c7 	bfi	r4, r3, #3, #5
  41c538:	230e      	movs	r3, #14
  41c53a:	f363 240c 	bfi	r4, r3, #8, #5
  41c53e:	f36f 344f 	bfc	r4, #13, #3
  41c542:	4bc2      	ldr	r3, [pc, #776]	; (41c84c <basic_init+0x1730>)
  41c544:	899b      	ldrh	r3, [r3, #12]
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
  41c546:	f3c3 02c4 	ubfx	r2, r3, #3, #5
  41c54a:	264c      	movs	r6, #76	; 0x4c
  41c54c:	f3c4 01c4 	ubfx	r1, r4, #3, #5
  41c550:	25b3      	movs	r5, #179	; 0xb3
  41c552:	fb05 f101 	mul.w	r1, r5, r1
  41c556:	fb06 1202 	mla	r2, r6, r2, r1
  41c55a:	3280      	adds	r2, #128	; 0x80
  41c55c:	eb02 2102 	add.w	r1, r2, r2, lsl #8
  41c560:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
  41c564:	f3c2 51c4 	ubfx	r1, r2, #23, #5
  41c568:	f04f 0200 	mov.w	r2, #0
  41c56c:	f361 02c7 	bfi	r2, r1, #3, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
  41c570:	f003 0707 	and.w	r7, r3, #7
  41c574:	f3c3 3142 	ubfx	r1, r3, #13, #3
  41c578:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
  41c57c:	f004 0707 	and.w	r7, r4, #7
  41c580:	00ff      	lsls	r7, r7, #3
  41c582:	fb05 f707 	mul.w	r7, r5, r7
  41c586:	fb06 7101 	mla	r1, r6, r1, r7
  41c58a:	3180      	adds	r1, #128	; 0x80
  41c58c:	eb01 2701 	add.w	r7, r1, r1, lsl #8
  41c590:	eb01 11c7 	add.w	r1, r1, r7, lsl #7
  41c594:	f3c1 6782 	ubfx	r7, r1, #26, #3
  41c598:	f367 0202 	bfi	r2, r7, #0, #3
  41c59c:	f3c1 51c2 	ubfx	r1, r1, #23, #3
  41c5a0:	f361 324f 	bfi	r2, r1, #13, #3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
  41c5a4:	f3c3 2304 	ubfx	r3, r3, #8, #5
  41c5a8:	f3c4 2404 	ubfx	r4, r4, #8, #5
  41c5ac:	fb05 f404 	mul.w	r4, r5, r4
  41c5b0:	fb06 4303 	mla	r3, r6, r3, r4
  41c5b4:	3380      	adds	r3, #128	; 0x80
  41c5b6:	eb03 2103 	add.w	r1, r3, r3, lsl #8
  41c5ba:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
  41c5be:	f3c3 53c4 	ubfx	r3, r3, #23, #5
  41c5c2:	f363 220c 	bfi	r2, r3, #8, #5
  41c5c6:	f7ff ba5e 	b.w	41ba86 <basic_init+0x96a>
    return LV_COLOR_MAKE(r, g, b);
  41c5ca:	f04f 0200 	mov.w	r2, #0
  41c5ce:	2303      	movs	r3, #3
  41c5d0:	f363 0202 	bfi	r2, r3, #0, #3
  41c5d4:	230b      	movs	r3, #11
  41c5d6:	f363 02c7 	bfi	r2, r3, #3, #5
  41c5da:	230e      	movs	r3, #14
  41c5dc:	f363 220c 	bfi	r2, r3, #8, #5
  41c5e0:	f36f 324f 	bfc	r2, #13, #3
  41c5e4:	f7ff ba7e 	b.w	41bae4 <basic_init+0x9c8>
  41c5e8:	f04f 0200 	mov.w	r2, #0
  41c5ec:	2304      	movs	r3, #4
  41c5ee:	f363 0202 	bfi	r2, r3, #0, #3
  41c5f2:	2311      	movs	r3, #17
  41c5f4:	f363 02c7 	bfi	r2, r3, #3, #5
  41c5f8:	f363 220c 	bfi	r2, r3, #8, #5
  41c5fc:	2302      	movs	r3, #2
  41c5fe:	f363 324f 	bfi	r2, r3, #13, #3
  41c602:	f7ff ba89 	b.w	41bb18 <basic_init+0x9fc>
  41c606:	f04f 0200 	mov.w	r2, #0
  41c60a:	2302      	movs	r3, #2
  41c60c:	f363 0202 	bfi	r2, r3, #0, #3
  41c610:	2308      	movs	r3, #8
  41c612:	f363 02c7 	bfi	r2, r3, #3, #5
  41c616:	f363 220c 	bfi	r2, r3, #8, #5
  41c61a:	f36f 324f 	bfc	r2, #13, #3
  41c61e:	f7ff baa0 	b.w	41bb62 <basic_init+0xa46>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
  41c622:	2000      	movs	r0, #0
  41c624:	4b8a      	ldr	r3, [pc, #552]	; (41c850 <basic_init+0x1734>)
  41c626:	4798      	blx	r3
  41c628:	3028      	adds	r0, #40	; 0x28
  41c62a:	0040      	lsls	r0, r0, #1
  41c62c:	4b89      	ldr	r3, [pc, #548]	; (41c854 <basic_init+0x1738>)
  41c62e:	fb83 2300 	smull	r2, r3, r3, r0
  41c632:	17c2      	asrs	r2, r0, #31
  41c634:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c638:	b212      	sxth	r2, r2
  41c63a:	f7ff baa3 	b.w	41bb84 <basic_init+0xa68>
  41c63e:	f04f 32ff 	mov.w	r2, #4294967295
  41c642:	f7ff bac0 	b.w	41bbc6 <basic_init+0xaaa>
  41c646:	f04f 32ff 	mov.w	r2, #4294967295
  41c64a:	f7ff bad6 	b.w	41bbfa <basic_init+0xade>
  41c64e:	f04f 0200 	mov.w	r2, #0
  41c652:	2304      	movs	r3, #4
  41c654:	f363 0202 	bfi	r2, r3, #0, #3
  41c658:	2311      	movs	r3, #17
  41c65a:	f363 02c7 	bfi	r2, r3, #3, #5
  41c65e:	f363 220c 	bfi	r2, r3, #8, #5
  41c662:	2302      	movs	r3, #2
  41c664:	f363 324f 	bfi	r2, r3, #13, #3
  41c668:	f7ff baef 	b.w	41bc4a <basic_init+0xb2e>
  41c66c:	f04f 32ff 	mov.w	r2, #4294967295
  41c670:	f7ff bb05 	b.w	41bc7e <basic_init+0xb62>
  41c674:	f04f 32ff 	mov.w	r2, #4294967295
  41c678:	f7ff bb1b 	b.w	41bcb2 <basic_init+0xb96>
  41c67c:	f04f 0200 	mov.w	r2, #0
  41c680:	2304      	movs	r3, #4
  41c682:	f363 0202 	bfi	r2, r3, #0, #3
  41c686:	2311      	movs	r3, #17
  41c688:	f363 02c7 	bfi	r2, r3, #3, #5
  41c68c:	f363 220c 	bfi	r2, r3, #8, #5
  41c690:	2302      	movs	r3, #2
  41c692:	f363 324f 	bfi	r2, r3, #13, #3
  41c696:	f7ff bb34 	b.w	41bd02 <basic_init+0xbe6>
  41c69a:	f04f 32ff 	mov.w	r2, #4294967295
  41c69e:	f7ff bb4a 	b.w	41bd36 <basic_init+0xc1a>
  41c6a2:	f04f 32ff 	mov.w	r2, #4294967295
  41c6a6:	f7ff bb5f 	b.w	41bd68 <basic_init+0xc4c>
  41c6aa:	f04f 0200 	mov.w	r2, #0
  41c6ae:	2304      	movs	r3, #4
  41c6b0:	f363 0202 	bfi	r2, r3, #0, #3
  41c6b4:	2311      	movs	r3, #17
  41c6b6:	f363 02c7 	bfi	r2, r3, #3, #5
  41c6ba:	f363 220c 	bfi	r2, r3, #8, #5
  41c6be:	2302      	movs	r3, #2
  41c6c0:	f363 324f 	bfi	r2, r3, #13, #3
  41c6c4:	f7ff bb78 	b.w	41bdb8 <basic_init+0xc9c>
    lv_style_set_pad_left(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41c6c8:	2000      	movs	r0, #0
  41c6ca:	4b61      	ldr	r3, [pc, #388]	; (41c850 <basic_init+0x1734>)
  41c6cc:	4798      	blx	r3
  41c6ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c6d2:	00c0      	lsls	r0, r0, #3
  41c6d4:	3050      	adds	r0, #80	; 0x50
  41c6d6:	4b5f      	ldr	r3, [pc, #380]	; (41c854 <basic_init+0x1738>)
  41c6d8:	fb83 2300 	smull	r2, r3, r3, r0
  41c6dc:	17c2      	asrs	r2, r0, #31
  41c6de:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c6e2:	b212      	sxth	r2, r2
  41c6e4:	f7ff bb7b 	b.w	41bdde <basic_init+0xcc2>
    lv_style_set_pad_right(&styles->btn, LV_STATE_DEFAULT, LV_DPX(40));
  41c6e8:	2000      	movs	r0, #0
  41c6ea:	4b59      	ldr	r3, [pc, #356]	; (41c850 <basic_init+0x1734>)
  41c6ec:	4798      	blx	r3
  41c6ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c6f2:	00c0      	lsls	r0, r0, #3
  41c6f4:	3050      	adds	r0, #80	; 0x50
  41c6f6:	4b57      	ldr	r3, [pc, #348]	; (41c854 <basic_init+0x1738>)
  41c6f8:	fb83 2300 	smull	r2, r3, r3, r0
  41c6fc:	17c2      	asrs	r2, r0, #31
  41c6fe:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c702:	b212      	sxth	r2, r2
  41c704:	f7ff bb8c 	b.w	41be20 <basic_init+0xd04>
    lv_style_set_pad_top(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41c708:	2000      	movs	r0, #0
  41c70a:	4b51      	ldr	r3, [pc, #324]	; (41c850 <basic_init+0x1734>)
  41c70c:	4798      	blx	r3
  41c70e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c712:	3050      	adds	r0, #80	; 0x50
  41c714:	4b4f      	ldr	r3, [pc, #316]	; (41c854 <basic_init+0x1738>)
  41c716:	fb83 2300 	smull	r2, r3, r3, r0
  41c71a:	17c2      	asrs	r2, r0, #31
  41c71c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c720:	b212      	sxth	r2, r2
  41c722:	f7ff bb8f 	b.w	41be44 <basic_init+0xd28>
    lv_style_set_pad_bottom(&styles->btn, LV_STATE_DEFAULT, LV_DPX(15));
  41c726:	2000      	movs	r0, #0
  41c728:	4b49      	ldr	r3, [pc, #292]	; (41c850 <basic_init+0x1734>)
  41c72a:	4798      	blx	r3
  41c72c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
  41c730:	3050      	adds	r0, #80	; 0x50
  41c732:	4b48      	ldr	r3, [pc, #288]	; (41c854 <basic_init+0x1738>)
  41c734:	fb83 2300 	smull	r2, r3, r3, r0
  41c738:	17c2      	asrs	r2, r0, #31
  41c73a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c73e:	b212      	sxth	r2, r2
  41c740:	f7ff bb92 	b.w	41be68 <basic_init+0xd4c>
    lv_style_set_pad_inner(&styles->btn, LV_STATE_DEFAULT, LV_DPX(20));
  41c744:	2000      	movs	r0, #0
  41c746:	4b42      	ldr	r3, [pc, #264]	; (41c850 <basic_init+0x1734>)
  41c748:	4798      	blx	r3
  41c74a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c74e:	0080      	lsls	r0, r0, #2
  41c750:	3050      	adds	r0, #80	; 0x50
  41c752:	4b40      	ldr	r3, [pc, #256]	; (41c854 <basic_init+0x1738>)
  41c754:	fb83 2300 	smull	r2, r3, r3, r0
  41c758:	17c2      	asrs	r2, r0, #31
  41c75a:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c75e:	b212      	sxth	r2, r2
  41c760:	f7ff bb95 	b.w	41be8e <basic_init+0xd72>
    lv_style_set_outline_width(&styles->btn, LV_STATE_DEFAULT, OUTLINE_WIDTH);
  41c764:	2000      	movs	r0, #0
  41c766:	4b3a      	ldr	r3, [pc, #232]	; (41c850 <basic_init+0x1734>)
  41c768:	4798      	blx	r3
  41c76a:	3028      	adds	r0, #40	; 0x28
  41c76c:	0040      	lsls	r0, r0, #1
  41c76e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c772:	da02      	bge.n	41c77a <basic_init+0x165e>
  41c774:	2201      	movs	r2, #1
  41c776:	f7ff bb98 	b.w	41beaa <basic_init+0xd8e>
  41c77a:	2000      	movs	r0, #0
  41c77c:	4b34      	ldr	r3, [pc, #208]	; (41c850 <basic_init+0x1734>)
  41c77e:	4798      	blx	r3
  41c780:	3028      	adds	r0, #40	; 0x28
  41c782:	0040      	lsls	r0, r0, #1
  41c784:	4b33      	ldr	r3, [pc, #204]	; (41c854 <basic_init+0x1738>)
  41c786:	fb83 2300 	smull	r2, r3, r3, r0
  41c78a:	17c2      	asrs	r2, r0, #31
  41c78c:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
  41c790:	b212      	sxth	r2, r2
  41c792:	f7ff bb8a 	b.w	41beaa <basic_init+0xd8e>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c796:	2000      	movs	r0, #0
  41c798:	4b2d      	ldr	r3, [pc, #180]	; (41c850 <basic_init+0x1734>)
  41c79a:	4798      	blx	r3
  41c79c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7a0:	0080      	lsls	r0, r0, #2
  41c7a2:	3050      	adds	r0, #80	; 0x50
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c7a4:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c7a8:	da02      	bge.n	41c7b0 <basic_init+0x1694>
  41c7aa:	2201      	movs	r2, #1
  41c7ac:	f7ff bbd2 	b.w	41bf54 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c7b0:	2000      	movs	r0, #0
  41c7b2:	4b27      	ldr	r3, [pc, #156]	; (41c850 <basic_init+0x1734>)
  41c7b4:	4798      	blx	r3
  41c7b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7ba:	0080      	lsls	r0, r0, #2
  41c7bc:	3050      	adds	r0, #80	; 0x50
  41c7be:	4b25      	ldr	r3, [pc, #148]	; (41c854 <basic_init+0x1738>)
  41c7c0:	fb83 2300 	smull	r2, r3, r3, r0
  41c7c4:	17c2      	asrs	r2, r0, #31
  41c7c6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c7ca:	b212      	sxth	r2, r2
  41c7cc:	f7ff bbc2 	b.w	41bf54 <basic_init+0xe38>
                           lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(20) : LV_DPX(40));
  41c7d0:	2000      	movs	r0, #0
  41c7d2:	4b1f      	ldr	r3, [pc, #124]	; (41c850 <basic_init+0x1734>)
  41c7d4:	4798      	blx	r3
  41c7d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7da:	00c0      	lsls	r0, r0, #3
  41c7dc:	3050      	adds	r0, #80	; 0x50
  41c7de:	4b1d      	ldr	r3, [pc, #116]	; (41c854 <basic_init+0x1738>)
  41c7e0:	fb83 2300 	smull	r2, r3, r3, r0
  41c7e4:	17c2      	asrs	r2, r0, #31
  41c7e6:	ebc2 12a3 	rsb	r2, r2, r3, asr #6
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT,
  41c7ea:	b212      	sxth	r2, r2
  41c7ec:	f7ff bbb2 	b.w	41bf54 <basic_init+0xe38>
    lv_style_int_t pad_small_value = lv_disp_get_size_category(NULL) <= LV_DISP_SIZE_MEDIUM ? LV_DPX(10) : LV_DPX(20);
  41c7f0:	2000      	movs	r0, #0
  41c7f2:	4b17      	ldr	r3, [pc, #92]	; (41c850 <basic_init+0x1734>)
  41c7f4:	4798      	blx	r3
  41c7f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c7fa:	0040      	lsls	r0, r0, #1
  41c7fc:	3050      	adds	r0, #80	; 0x50
  41c7fe:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
  41c802:	da02      	bge.n	41c80a <basic_init+0x16ee>
  41c804:	2401      	movs	r4, #1
  41c806:	f7ff bbc0 	b.w	41bf8a <basic_init+0xe6e>
  41c80a:	2000      	movs	r0, #0
  41c80c:	4b10      	ldr	r3, [pc, #64]	; (41c850 <basic_init+0x1734>)
  41c80e:	4798      	blx	r3
  41c810:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c814:	0040      	lsls	r0, r0, #1
  41c816:	3050      	adds	r0, #80	; 0x50
  41c818:	4b0e      	ldr	r3, [pc, #56]	; (41c854 <basic_init+0x1738>)
  41c81a:	fb83 2300 	smull	r2, r3, r3, r0
  41c81e:	17c4      	asrs	r4, r0, #31
  41c820:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41c824:	b224      	sxth	r4, r4
  41c826:	f7ff bbb0 	b.w	41bf8a <basic_init+0xe6e>
  41c82a:	2000      	movs	r0, #0
  41c82c:	4b08      	ldr	r3, [pc, #32]	; (41c850 <basic_init+0x1734>)
  41c82e:	4798      	blx	r3
  41c830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  41c834:	0080      	lsls	r0, r0, #2
  41c836:	3050      	adds	r0, #80	; 0x50
  41c838:	4b06      	ldr	r3, [pc, #24]	; (41c854 <basic_init+0x1738>)
  41c83a:	fb83 2300 	smull	r2, r3, r3, r0
  41c83e:	17c4      	asrs	r4, r0, #31
  41c840:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
  41c844:	b224      	sxth	r4, r4
  41c846:	f7ff bba0 	b.w	41bf8a <basic_init+0xe6e>
  41c84a:	bf00      	nop
  41c84c:	204147ac 	.word	0x204147ac
  41c850:	0041468d 	.word	0x0041468d
  41c854:	66666667 	.word	0x66666667

0041c858 <lv_theme_material_init>:
{
  41c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41c85c:	4680      	mov	r8, r0
  41c85e:	460f      	mov	r7, r1
  41c860:	4615      	mov	r5, r2
  41c862:	461e      	mov	r6, r3
    if(!inited) {
  41c864:	4b27      	ldr	r3, [pc, #156]	; (41c904 <lv_theme_material_init+0xac>)
  41c866:	781b      	ldrb	r3, [r3, #0]
  41c868:	2b00      	cmp	r3, #0
  41c86a:	d043      	beq.n	41c8f4 <lv_theme_material_init+0x9c>
    theme.color_primary = color_primary;
  41c86c:	4c26      	ldr	r4, [pc, #152]	; (41c908 <lv_theme_material_init+0xb0>)
  41c86e:	f8a4 800c 	strh.w	r8, [r4, #12]
    theme.color_secondary = color_secondary;
  41c872:	81e7      	strh	r7, [r4, #14]
    theme.font_small = font_small;
  41c874:	6126      	str	r6, [r4, #16]
    theme.font_normal = font_normal;
  41c876:	9b06      	ldr	r3, [sp, #24]
  41c878:	6163      	str	r3, [r4, #20]
    theme.font_subtitle = font_subtitle;
  41c87a:	9b07      	ldr	r3, [sp, #28]
  41c87c:	61a3      	str	r3, [r4, #24]
    theme.font_title = font_title;
  41c87e:	9b08      	ldr	r3, [sp, #32]
  41c880:	61e3      	str	r3, [r4, #28]
    theme.flags = flags;
  41c882:	6225      	str	r5, [r4, #32]
    basic_init();
  41c884:	4b21      	ldr	r3, [pc, #132]	; (41c90c <lv_theme_material_init+0xb4>)
  41c886:	4798      	blx	r3
    bar_init();
  41c888:	4b21      	ldr	r3, [pc, #132]	; (41c910 <lv_theme_material_init+0xb8>)
  41c88a:	4798      	blx	r3
    led_init();
  41c88c:	4b21      	ldr	r3, [pc, #132]	; (41c914 <lv_theme_material_init+0xbc>)
  41c88e:	4798      	blx	r3
    slider_init();
  41c890:	4b21      	ldr	r3, [pc, #132]	; (41c918 <lv_theme_material_init+0xc0>)
  41c892:	4798      	blx	r3
    switch_init();
  41c894:	4b21      	ldr	r3, [pc, #132]	; (41c91c <lv_theme_material_init+0xc4>)
  41c896:	4798      	blx	r3
    linemeter_init();
  41c898:	4b21      	ldr	r3, [pc, #132]	; (41c920 <lv_theme_material_init+0xc8>)
  41c89a:	4798      	blx	r3
    gauge_init();
  41c89c:	4b21      	ldr	r3, [pc, #132]	; (41c924 <lv_theme_material_init+0xcc>)
  41c89e:	4798      	blx	r3
    arc_init();
  41c8a0:	4b21      	ldr	r3, [pc, #132]	; (41c928 <lv_theme_material_init+0xd0>)
  41c8a2:	4798      	blx	r3
    chart_init();
  41c8a4:	4b21      	ldr	r3, [pc, #132]	; (41c92c <lv_theme_material_init+0xd4>)
  41c8a6:	4798      	blx	r3
    calendar_init();
  41c8a8:	4b21      	ldr	r3, [pc, #132]	; (41c930 <lv_theme_material_init+0xd8>)
  41c8aa:	4798      	blx	r3
    cpicker_init();
  41c8ac:	4b21      	ldr	r3, [pc, #132]	; (41c934 <lv_theme_material_init+0xdc>)
  41c8ae:	4798      	blx	r3
    checkbox_init();
  41c8b0:	4b21      	ldr	r3, [pc, #132]	; (41c938 <lv_theme_material_init+0xe0>)
  41c8b2:	4798      	blx	r3
    keyboard_init();
  41c8b4:	4b21      	ldr	r3, [pc, #132]	; (41c93c <lv_theme_material_init+0xe4>)
  41c8b6:	4798      	blx	r3
    msgbox_init();
  41c8b8:	4b21      	ldr	r3, [pc, #132]	; (41c940 <lv_theme_material_init+0xe8>)
  41c8ba:	4798      	blx	r3
    page_init();
  41c8bc:	4b21      	ldr	r3, [pc, #132]	; (41c944 <lv_theme_material_init+0xec>)
  41c8be:	4798      	blx	r3
    textarea_init();
  41c8c0:	4b21      	ldr	r3, [pc, #132]	; (41c948 <lv_theme_material_init+0xf0>)
  41c8c2:	4798      	blx	r3
    spinbox_init();
  41c8c4:	4b21      	ldr	r3, [pc, #132]	; (41c94c <lv_theme_material_init+0xf4>)
  41c8c6:	4798      	blx	r3
    list_init();
  41c8c8:	4b21      	ldr	r3, [pc, #132]	; (41c950 <lv_theme_material_init+0xf8>)
  41c8ca:	4798      	blx	r3
    ddlist_init();
  41c8cc:	4b21      	ldr	r3, [pc, #132]	; (41c954 <lv_theme_material_init+0xfc>)
  41c8ce:	4798      	blx	r3
    roller_init();
  41c8d0:	4b21      	ldr	r3, [pc, #132]	; (41c958 <lv_theme_material_init+0x100>)
  41c8d2:	4798      	blx	r3
    table_init();
  41c8d4:	4b21      	ldr	r3, [pc, #132]	; (41c95c <lv_theme_material_init+0x104>)
  41c8d6:	4798      	blx	r3
    tabview_win_shared_init();
  41c8d8:	4b21      	ldr	r3, [pc, #132]	; (41c960 <lv_theme_material_init+0x108>)
  41c8da:	4798      	blx	r3
    theme.apply_xcb = NULL;
  41c8dc:	2000      	movs	r0, #0
  41c8de:	6060      	str	r0, [r4, #4]
    theme.apply_cb = theme_apply;
  41c8e0:	4b20      	ldr	r3, [pc, #128]	; (41c964 <lv_theme_material_init+0x10c>)
  41c8e2:	6023      	str	r3, [r4, #0]
    inited = true;
  41c8e4:	2201      	movs	r2, #1
  41c8e6:	4b07      	ldr	r3, [pc, #28]	; (41c904 <lv_theme_material_init+0xac>)
  41c8e8:	701a      	strb	r2, [r3, #0]
    lv_obj_report_style_mod(NULL);
  41c8ea:	4b1f      	ldr	r3, [pc, #124]	; (41c968 <lv_theme_material_init+0x110>)
  41c8ec:	4798      	blx	r3
}
  41c8ee:	4620      	mov	r0, r4
  41c8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LV_GC_ROOT(_lv_theme_material_styles) = lv_mem_alloc(sizeof(theme_styles_t));
  41c8f4:	20c0      	movs	r0, #192	; 0xc0
  41c8f6:	4b1d      	ldr	r3, [pc, #116]	; (41c96c <lv_theme_material_init+0x114>)
  41c8f8:	4798      	blx	r3
  41c8fa:	4b1d      	ldr	r3, [pc, #116]	; (41c970 <lv_theme_material_init+0x118>)
  41c8fc:	6018      	str	r0, [r3, #0]
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_material_styles);
  41c8fe:	4b1d      	ldr	r3, [pc, #116]	; (41c974 <lv_theme_material_init+0x11c>)
  41c900:	6018      	str	r0, [r3, #0]
  41c902:	e7b3      	b.n	41c86c <lv_theme_material_init+0x14>
  41c904:	204147a4 	.word	0x204147a4
  41c908:	204147ac 	.word	0x204147ac
  41c90c:	0041b11d 	.word	0x0041b11d
  41c910:	004178a5 	.word	0x004178a5
  41c914:	0041b009 	.word	0x0041b009
  41c918:	00417a89 	.word	0x00417a89
  41c91c:	00417d3d 	.word	0x00417d3d
  41c920:	00417e81 	.word	0x00417e81
  41c924:	004180c9 	.word	0x004180c9
  41c928:	004185d9 	.word	0x004185d9
  41c92c:	00418745 	.word	0x00418745
  41c930:	004189cd 	.word	0x004189cd
  41c934:	00419165 	.word	0x00419165
  41c938:	004193f5 	.word	0x004193f5
  41c93c:	0041971d 	.word	0x0041971d
  41c940:	00419915 	.word	0x00419915
  41c944:	004199b9 	.word	0x004199b9
  41c948:	00419b45 	.word	0x00419b45
  41c94c:	00419c8d 	.word	0x00419c8d
  41c950:	00419d69 	.word	0x00419d69
  41c954:	0041a58d 	.word	0x0041a58d
  41c958:	0041a6d1 	.word	0x0041a6d1
  41c95c:	0041a77d 	.word	0x0041a77d
  41c960:	0041aa15 	.word	0x0041aa15
  41c964:	0041725d 	.word	0x0041725d
  41c968:	004075e9 	.word	0x004075e9
  41c96c:	00415ec1 	.word	0x00415ec1
  41c970:	2043a268 	.word	0x2043a268
  41c974:	204147a8 	.word	0x204147a8

0041c978 <lv_btn_design>:
 *             LV_DESIGN_DRAW: draw the object (always return 'true')
 *             LV_DESIGN_DRAW_POST: drawing after every children are drawn
 * @param return an element of `lv_design_res_t`
 */
static lv_design_res_t lv_btn_design(lv_obj_t * btn, const lv_area_t * clip_area, lv_design_mode_t mode)
{
  41c978:	b508      	push	{r3, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
  41c97a:	2a02      	cmp	r2, #2
  41c97c:	d004      	beq.n	41c988 <lv_btn_design+0x10>
        return ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41c97e:	b13a      	cbz	r2, 41c990 <lv_btn_design+0x18>
        ancestor_design(btn, clip_area, mode);
    }
    else if(mode == LV_DESIGN_DRAW_POST) {
  41c980:	2a01      	cmp	r2, #1
  41c982:	d00a      	beq.n	41c99a <lv_btn_design+0x22>
        ancestor_design(btn, clip_area, mode);
    }

    return LV_DESIGN_RES_OK;
  41c984:	2000      	movs	r0, #0
}
  41c986:	bd08      	pop	{r3, pc}
        return ancestor_design(btn, clip_area, mode);
  41c988:	4b06      	ldr	r3, [pc, #24]	; (41c9a4 <lv_btn_design+0x2c>)
  41c98a:	681b      	ldr	r3, [r3, #0]
  41c98c:	4798      	blx	r3
  41c98e:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41c990:	4b04      	ldr	r3, [pc, #16]	; (41c9a4 <lv_btn_design+0x2c>)
  41c992:	681b      	ldr	r3, [r3, #0]
  41c994:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41c996:	2000      	movs	r0, #0
  41c998:	bd08      	pop	{r3, pc}
        ancestor_design(btn, clip_area, mode);
  41c99a:	4b02      	ldr	r3, [pc, #8]	; (41c9a4 <lv_btn_design+0x2c>)
  41c99c:	681b      	ldr	r3, [r3, #0]
  41c99e:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41c9a0:	2000      	movs	r0, #0
  41c9a2:	bd08      	pop	{r3, pc}
  41c9a4:	204147d4 	.word	0x204147d4

0041c9a8 <lv_btn_create>:
{
  41c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41c9aa:	4607      	mov	r7, r0
  41c9ac:	460e      	mov	r6, r1
    btn = lv_cont_create(par, copy);
  41c9ae:	4b31      	ldr	r3, [pc, #196]	; (41ca74 <lv_btn_create+0xcc>)
  41c9b0:	4798      	blx	r3
  41c9b2:	4604      	mov	r4, r0
    LV_ASSERT_MEM(btn);
  41c9b4:	4b30      	ldr	r3, [pc, #192]	; (41ca78 <lv_btn_create+0xd0>)
  41c9b6:	4798      	blx	r3
  41c9b8:	b1a8      	cbz	r0, 41c9e6 <lv_btn_create+0x3e>
    if(btn == NULL) return NULL;
  41c9ba:	2c00      	cmp	r4, #0
  41c9bc:	d045      	beq.n	41ca4a <lv_btn_create+0xa2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41c9be:	4b2f      	ldr	r3, [pc, #188]	; (41ca7c <lv_btn_create+0xd4>)
  41c9c0:	681b      	ldr	r3, [r3, #0]
  41c9c2:	b1b3      	cbz	r3, 41c9f2 <lv_btn_create+0x4a>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41c9c4:	4b2e      	ldr	r3, [pc, #184]	; (41ca80 <lv_btn_create+0xd8>)
  41c9c6:	681b      	ldr	r3, [r3, #0]
  41c9c8:	b1cb      	cbz	r3, 41c9fe <lv_btn_create+0x56>
    lv_btn_ext_t * ext = lv_obj_allocate_ext_attr(btn, sizeof(lv_btn_ext_t));
  41c9ca:	2103      	movs	r1, #3
  41c9cc:	4620      	mov	r0, r4
  41c9ce:	4b2d      	ldr	r3, [pc, #180]	; (41ca84 <lv_btn_create+0xdc>)
  41c9d0:	4798      	blx	r3
  41c9d2:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41c9d4:	4b28      	ldr	r3, [pc, #160]	; (41ca78 <lv_btn_create+0xd0>)
  41c9d6:	4798      	blx	r3
  41c9d8:	b9b8      	cbnz	r0, 41ca0a <lv_btn_create+0x62>
  41c9da:	462a      	mov	r2, r5
  41c9dc:	2300      	movs	r3, #0
  41c9de:	482a      	ldr	r0, [pc, #168]	; (41ca88 <lv_btn_create+0xe0>)
  41c9e0:	492a      	ldr	r1, [pc, #168]	; (41ca8c <lv_btn_create+0xe4>)
  41c9e2:	4788      	blx	r1
  41c9e4:	e7fe      	b.n	41c9e4 <lv_btn_create+0x3c>
    LV_ASSERT_MEM(btn);
  41c9e6:	4622      	mov	r2, r4
  41c9e8:	2300      	movs	r3, #0
  41c9ea:	4827      	ldr	r0, [pc, #156]	; (41ca88 <lv_btn_create+0xe0>)
  41c9ec:	4927      	ldr	r1, [pc, #156]	; (41ca8c <lv_btn_create+0xe4>)
  41c9ee:	4788      	blx	r1
  41c9f0:	e7fe      	b.n	41c9f0 <lv_btn_create+0x48>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(btn);
  41c9f2:	4620      	mov	r0, r4
  41c9f4:	4b26      	ldr	r3, [pc, #152]	; (41ca90 <lv_btn_create+0xe8>)
  41c9f6:	4798      	blx	r3
  41c9f8:	4b20      	ldr	r3, [pc, #128]	; (41ca7c <lv_btn_create+0xd4>)
  41c9fa:	6018      	str	r0, [r3, #0]
  41c9fc:	e7e2      	b.n	41c9c4 <lv_btn_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(btn);
  41c9fe:	4620      	mov	r0, r4
  41ca00:	4b24      	ldr	r3, [pc, #144]	; (41ca94 <lv_btn_create+0xec>)
  41ca02:	4798      	blx	r3
  41ca04:	4b1e      	ldr	r3, [pc, #120]	; (41ca80 <lv_btn_create+0xd8>)
  41ca06:	6018      	str	r0, [r3, #0]
  41ca08:	e7df      	b.n	41c9ca <lv_btn_create+0x22>
    if(ext == NULL) {
  41ca0a:	b305      	cbz	r5, 41ca4e <lv_btn_create+0xa6>
    ext->checkable = 0;
  41ca0c:	78ab      	ldrb	r3, [r5, #2]
  41ca0e:	f36f 0300 	bfc	r3, #0, #1
  41ca12:	70ab      	strb	r3, [r5, #2]
    lv_obj_set_signal_cb(btn, lv_btn_signal);
  41ca14:	4920      	ldr	r1, [pc, #128]	; (41ca98 <lv_btn_create+0xf0>)
  41ca16:	4620      	mov	r0, r4
  41ca18:	4b20      	ldr	r3, [pc, #128]	; (41ca9c <lv_btn_create+0xf4>)
  41ca1a:	4798      	blx	r3
    lv_obj_set_design_cb(btn, lv_btn_design);
  41ca1c:	4920      	ldr	r1, [pc, #128]	; (41caa0 <lv_btn_create+0xf8>)
  41ca1e:	4620      	mov	r0, r4
  41ca20:	4b20      	ldr	r3, [pc, #128]	; (41caa4 <lv_btn_create+0xfc>)
  41ca22:	4798      	blx	r3
    if(copy == NULL) {
  41ca24:	b9c6      	cbnz	r6, 41ca58 <lv_btn_create+0xb0>
        if(par) {
  41ca26:	b147      	cbz	r7, 41ca3a <lv_btn_create+0x92>
            lv_obj_set_size(btn, LV_DPI, LV_DPI / 3);
  41ca28:	2231      	movs	r2, #49	; 0x31
  41ca2a:	2194      	movs	r1, #148	; 0x94
  41ca2c:	4620      	mov	r0, r4
  41ca2e:	4b1e      	ldr	r3, [pc, #120]	; (41caa8 <lv_btn_create+0x100>)
  41ca30:	4798      	blx	r3
 * @param btn pointer to a button object
 * @param layout a layout from 'lv_cont_layout_t'
 */
static inline void lv_btn_set_layout(lv_obj_t * btn, lv_layout_t layout)
{
    lv_cont_set_layout(btn, layout);
  41ca32:	2101      	movs	r1, #1
  41ca34:	4620      	mov	r0, r4
  41ca36:	4b1d      	ldr	r3, [pc, #116]	; (41caac <lv_btn_create+0x104>)
  41ca38:	4798      	blx	r3
        lv_obj_set_click(btn, true); /*Be sure the button is clickable*/
  41ca3a:	2101      	movs	r1, #1
  41ca3c:	4620      	mov	r0, r4
  41ca3e:	4b1c      	ldr	r3, [pc, #112]	; (41cab0 <lv_btn_create+0x108>)
  41ca40:	4798      	blx	r3
        lv_theme_apply(btn, LV_THEME_BTN);
  41ca42:	2105      	movs	r1, #5
  41ca44:	4620      	mov	r0, r4
  41ca46:	4b1b      	ldr	r3, [pc, #108]	; (41cab4 <lv_btn_create+0x10c>)
  41ca48:	4798      	blx	r3
}
  41ca4a:	4620      	mov	r0, r4
  41ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_del(btn);
  41ca4e:	4620      	mov	r0, r4
  41ca50:	4b19      	ldr	r3, [pc, #100]	; (41cab8 <lv_btn_create+0x110>)
  41ca52:	4798      	blx	r3
        return NULL;
  41ca54:	2400      	movs	r4, #0
  41ca56:	e7f8      	b.n	41ca4a <lv_btn_create+0xa2>
        lv_btn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41ca58:	4630      	mov	r0, r6
  41ca5a:	4b18      	ldr	r3, [pc, #96]	; (41cabc <lv_btn_create+0x114>)
  41ca5c:	4798      	blx	r3
        ext->checkable             = copy_ext->checkable;
  41ca5e:	7882      	ldrb	r2, [r0, #2]
  41ca60:	78ab      	ldrb	r3, [r5, #2]
  41ca62:	f362 0300 	bfi	r3, r2, #0, #1
  41ca66:	70ab      	strb	r3, [r5, #2]
        lv_obj_refresh_style(btn, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41ca68:	22ff      	movs	r2, #255	; 0xff
  41ca6a:	4611      	mov	r1, r2
  41ca6c:	4620      	mov	r0, r4
  41ca6e:	4b14      	ldr	r3, [pc, #80]	; (41cac0 <lv_btn_create+0x118>)
  41ca70:	4798      	blx	r3
  41ca72:	e7ea      	b.n	41ca4a <lv_btn_create+0xa2>
  41ca74:	0041d2cd 	.word	0x0041d2cd
  41ca78:	004157b9 	.word	0x004157b9
  41ca7c:	204147d8 	.word	0x204147d8
  41ca80:	204147d4 	.word	0x204147d4
  41ca84:	00405489 	.word	0x00405489
  41ca88:	004260b0 	.word	0x004260b0
  41ca8c:	004157c5 	.word	0x004157c5
  41ca90:	00407b0d 	.word	0x00407b0d
  41ca94:	00407b35 	.word	0x00407b35
  41ca98:	0041cb99 	.word	0x0041cb99
  41ca9c:	00405425 	.word	0x00405425
  41caa0:	0041c979 	.word	0x0041c979
  41caa4:	00405461 	.word	0x00405461
  41caa8:	00406781 	.word	0x00406781
  41caac:	0041d3fd 	.word	0x0041d3fd
  41cab0:	00405265 	.word	0x00405265
  41cab4:	0041722d 	.word	0x0041722d
  41cab8:	00407cbd 	.word	0x00407cbd
  41cabc:	00407b5d 	.word	0x00407b5d
  41cac0:	004073a9 	.word	0x004073a9

0041cac4 <lv_btn_set_state>:
{
  41cac4:	b538      	push	{r3, r4, r5, lr}
  41cac6:	4604      	mov	r4, r0
  41cac8:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41caca:	4b21      	ldr	r3, [pc, #132]	; (41cb50 <lv_btn_set_state+0x8c>)
  41cacc:	4798      	blx	r3
  41cace:	b130      	cbz	r0, 41cade <lv_btn_set_state+0x1a>
    switch(state) {
  41cad0:	2d05      	cmp	r5, #5
  41cad2:	d83b      	bhi.n	41cb4c <lv_btn_set_state+0x88>
  41cad4:	e8df f005 	tbb	[pc, r5]
  41cad8:	17290e09 	.word	0x17290e09
  41cadc:	3220      	.short	0x3220
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41cade:	4622      	mov	r2, r4
  41cae0:	2300      	movs	r3, #0
  41cae2:	481c      	ldr	r0, [pc, #112]	; (41cb54 <lv_btn_set_state+0x90>)
  41cae4:	491c      	ldr	r1, [pc, #112]	; (41cb58 <lv_btn_set_state+0x94>)
  41cae6:	4788      	blx	r1
  41cae8:	e7fe      	b.n	41cae8 <lv_btn_set_state+0x24>
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED | LV_STATE_DISABLED);
  41caea:	2131      	movs	r1, #49	; 0x31
  41caec:	4620      	mov	r0, r4
  41caee:	4b1b      	ldr	r3, [pc, #108]	; (41cb5c <lv_btn_set_state+0x98>)
  41caf0:	4798      	blx	r3
            break;
  41caf2:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_CHECKED | LV_STATE_DISABLED);
  41caf4:	2121      	movs	r1, #33	; 0x21
  41caf6:	4620      	mov	r0, r4
  41caf8:	4b18      	ldr	r3, [pc, #96]	; (41cb5c <lv_btn_set_state+0x98>)
  41cafa:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_PRESSED);
  41cafc:	2110      	movs	r1, #16
  41cafe:	4620      	mov	r0, r4
  41cb00:	4b17      	ldr	r3, [pc, #92]	; (41cb60 <lv_btn_set_state+0x9c>)
  41cb02:	4798      	blx	r3
            break;
  41cb04:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_CHECKED);
  41cb06:	2101      	movs	r1, #1
  41cb08:	4620      	mov	r0, r4
  41cb0a:	4b15      	ldr	r3, [pc, #84]	; (41cb60 <lv_btn_set_state+0x9c>)
  41cb0c:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_DISABLED);
  41cb0e:	2130      	movs	r1, #48	; 0x30
  41cb10:	4620      	mov	r0, r4
  41cb12:	4b12      	ldr	r3, [pc, #72]	; (41cb5c <lv_btn_set_state+0x98>)
  41cb14:	4798      	blx	r3
            break;
  41cb16:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_add_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41cb18:	2111      	movs	r1, #17
  41cb1a:	4620      	mov	r0, r4
  41cb1c:	4b10      	ldr	r3, [pc, #64]	; (41cb60 <lv_btn_set_state+0x9c>)
  41cb1e:	4798      	blx	r3
            lv_obj_clear_state(btn, LV_STATE_DISABLED);
  41cb20:	2120      	movs	r1, #32
  41cb22:	4620      	mov	r0, r4
  41cb24:	4b0d      	ldr	r3, [pc, #52]	; (41cb5c <lv_btn_set_state+0x98>)
  41cb26:	4798      	blx	r3
            break;
  41cb28:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED | LV_STATE_CHECKED);
  41cb2a:	2111      	movs	r1, #17
  41cb2c:	4620      	mov	r0, r4
  41cb2e:	4b0b      	ldr	r3, [pc, #44]	; (41cb5c <lv_btn_set_state+0x98>)
  41cb30:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED);
  41cb32:	2120      	movs	r1, #32
  41cb34:	4620      	mov	r0, r4
  41cb36:	4b0a      	ldr	r3, [pc, #40]	; (41cb60 <lv_btn_set_state+0x9c>)
  41cb38:	4798      	blx	r3
            break;
  41cb3a:	bd38      	pop	{r3, r4, r5, pc}
            lv_obj_clear_state(btn, LV_STATE_PRESSED);
  41cb3c:	2110      	movs	r1, #16
  41cb3e:	4620      	mov	r0, r4
  41cb40:	4b06      	ldr	r3, [pc, #24]	; (41cb5c <lv_btn_set_state+0x98>)
  41cb42:	4798      	blx	r3
            lv_obj_add_state(btn, LV_STATE_DISABLED | LV_STATE_CHECKED);
  41cb44:	2121      	movs	r1, #33	; 0x21
  41cb46:	4620      	mov	r0, r4
  41cb48:	4b05      	ldr	r3, [pc, #20]	; (41cb60 <lv_btn_set_state+0x9c>)
  41cb4a:	4798      	blx	r3
  41cb4c:	bd38      	pop	{r3, r4, r5, pc}
  41cb4e:	bf00      	nop
  41cb50:	004157b9 	.word	0x004157b9
  41cb54:	004260c4 	.word	0x004260c4
  41cb58:	004157c5 	.word	0x004157c5
  41cb5c:	00408ab5 	.word	0x00408ab5
  41cb60:	00408a79 	.word	0x00408a79

0041cb64 <lv_btn_get_checkable>:
{
  41cb64:	b510      	push	{r4, lr}
  41cb66:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(btn, LV_OBJX_NAME);
  41cb68:	4b07      	ldr	r3, [pc, #28]	; (41cb88 <lv_btn_get_checkable+0x24>)
  41cb6a:	4798      	blx	r3
  41cb6c:	b928      	cbnz	r0, 41cb7a <lv_btn_get_checkable+0x16>
  41cb6e:	4622      	mov	r2, r4
  41cb70:	2300      	movs	r3, #0
  41cb72:	4806      	ldr	r0, [pc, #24]	; (41cb8c <lv_btn_get_checkable+0x28>)
  41cb74:	4906      	ldr	r1, [pc, #24]	; (41cb90 <lv_btn_get_checkable+0x2c>)
  41cb76:	4788      	blx	r1
  41cb78:	e7fe      	b.n	41cb78 <lv_btn_get_checkable+0x14>
    lv_btn_ext_t * ext = lv_obj_get_ext_attr(btn);
  41cb7a:	4620      	mov	r0, r4
  41cb7c:	4b05      	ldr	r3, [pc, #20]	; (41cb94 <lv_btn_get_checkable+0x30>)
  41cb7e:	4798      	blx	r3
    return ext->checkable != 0 ? true : false;
  41cb80:	7880      	ldrb	r0, [r0, #2]
}
  41cb82:	f000 0001 	and.w	r0, r0, #1
  41cb86:	bd10      	pop	{r4, pc}
  41cb88:	004157b9 	.word	0x004157b9
  41cb8c:	004260c4 	.word	0x004260c4
  41cb90:	004157c5 	.word	0x004157c5
  41cb94:	00407b5d 	.word	0x00407b5d

0041cb98 <lv_btn_signal>:
 * @param sign a signal type from lv_signal_t enum
 * @param param pointer to a signal specific variable
 * @return LV_RES_OK: the object is not deleted in the function; LV_RES_INV: the object is deleted
 */
static lv_res_t lv_btn_signal(lv_obj_t * btn, lv_signal_t sign, void * param)
{
  41cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41cb9c:	b082      	sub	sp, #8
  41cb9e:	4606      	mov	r6, r0
  41cba0:	460d      	mov	r5, r1
  41cba2:	4617      	mov	r7, r2
    lv_res_t res;

    /* Include the ancient signal function */
    res = ancestor_signal(btn, sign, param);
  41cba4:	4b36      	ldr	r3, [pc, #216]	; (41cc80 <lv_btn_signal+0xe8>)
  41cba6:	681b      	ldr	r3, [r3, #0]
  41cba8:	4798      	blx	r3
  41cbaa:	4604      	mov	r4, r0
    if(res != LV_RES_OK) return res;
  41cbac:	2801      	cmp	r0, #1
  41cbae:	d003      	beq.n	41cbb8 <lv_btn_signal+0x20>
        }
#endif
    }

    return res;
}
  41cbb0:	4620      	mov	r0, r4
  41cbb2:	b002      	add	sp, #8
  41cbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41cbb8:	2d07      	cmp	r5, #7
  41cbba:	d023      	beq.n	41cc04 <lv_btn_signal+0x6c>
    bool tgl           = lv_btn_get_checkable(btn);
  41cbbc:	4630      	mov	r0, r6
  41cbbe:	4b31      	ldr	r3, [pc, #196]	; (41cc84 <lv_btn_signal+0xec>)
  41cbc0:	4798      	blx	r3
  41cbc2:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_RELEASED) {
  41cbc4:	2d0e      	cmp	r5, #14
  41cbc6:	d023      	beq.n	41cc10 <lv_btn_signal+0x78>
    else if(sign == LV_SIGNAL_CONTROL) {
  41cbc8:	2d18      	cmp	r5, #24
  41cbca:	d1f1      	bne.n	41cbb0 <lv_btn_signal+0x18>
        char c = *((char *)param);
  41cbcc:	783b      	ldrb	r3, [r7, #0]
        if(c == LV_KEY_RIGHT || c == LV_KEY_UP) {
  41cbce:	2b11      	cmp	r3, #17
  41cbd0:	bf18      	it	ne
  41cbd2:	2b13      	cmpne	r3, #19
  41cbd4:	d040      	beq.n	41cc58 <lv_btn_signal+0xc0>
        else if(c == LV_KEY_LEFT || c == LV_KEY_DOWN) {
  41cbd6:	2b12      	cmp	r3, #18
  41cbd8:	bf18      	it	ne
  41cbda:	2b14      	cmpne	r3, #20
  41cbdc:	d1e8      	bne.n	41cbb0 <lv_btn_signal+0x18>
            if(lv_btn_get_checkable(btn)) {
  41cbde:	4630      	mov	r0, r6
  41cbe0:	4b28      	ldr	r3, [pc, #160]	; (41cc84 <lv_btn_signal+0xec>)
  41cbe2:	4798      	blx	r3
  41cbe4:	2800      	cmp	r0, #0
  41cbe6:	d0e3      	beq.n	41cbb0 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41cbe8:	2100      	movs	r1, #0
  41cbea:	4630      	mov	r0, r6
  41cbec:	4b26      	ldr	r3, [pc, #152]	; (41cc88 <lv_btn_signal+0xf0>)
  41cbee:	4798      	blx	r3
                uint32_t state = 0;
  41cbf0:	aa02      	add	r2, sp, #8
  41cbf2:	2300      	movs	r3, #0
  41cbf4:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41cbf8:	2110      	movs	r1, #16
  41cbfa:	4630      	mov	r0, r6
  41cbfc:	4b23      	ldr	r3, [pc, #140]	; (41cc8c <lv_btn_signal+0xf4>)
  41cbfe:	4798      	blx	r3
  41cc00:	4604      	mov	r4, r0
  41cc02:	e7d5      	b.n	41cbb0 <lv_btn_signal+0x18>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41cc04:	4922      	ldr	r1, [pc, #136]	; (41cc90 <lv_btn_signal+0xf8>)
  41cc06:	4638      	mov	r0, r7
  41cc08:	4b22      	ldr	r3, [pc, #136]	; (41cc94 <lv_btn_signal+0xfc>)
  41cc0a:	4798      	blx	r3
  41cc0c:	4604      	mov	r4, r0
  41cc0e:	e7cf      	b.n	41cbb0 <lv_btn_signal+0x18>
        if(lv_indev_is_dragging(param) == false && tgl) {
  41cc10:	4638      	mov	r0, r7
  41cc12:	4b21      	ldr	r3, [pc, #132]	; (41cc98 <lv_btn_signal+0x100>)
  41cc14:	4798      	blx	r3
  41cc16:	2800      	cmp	r0, #0
  41cc18:	d1ca      	bne.n	41cbb0 <lv_btn_signal+0x18>
  41cc1a:	f1b8 0f00 	cmp.w	r8, #0
  41cc1e:	d0c7      	beq.n	41cbb0 <lv_btn_signal+0x18>
            uint32_t toggled = 0;
  41cc20:	2100      	movs	r1, #0
  41cc22:	9101      	str	r1, [sp, #4]
            if(lv_obj_get_state(btn, LV_BTN_PART_MAIN) & LV_STATE_CHECKED) {
  41cc24:	4630      	mov	r0, r6
  41cc26:	4b1d      	ldr	r3, [pc, #116]	; (41cc9c <lv_btn_signal+0x104>)
  41cc28:	4798      	blx	r3
  41cc2a:	f010 0f01 	tst.w	r0, #1
  41cc2e:	d00c      	beq.n	41cc4a <lv_btn_signal+0xb2>
                lv_btn_set_state(btn, LV_BTN_STATE_RELEASED);
  41cc30:	2100      	movs	r1, #0
  41cc32:	4630      	mov	r0, r6
  41cc34:	4b14      	ldr	r3, [pc, #80]	; (41cc88 <lv_btn_signal+0xf0>)
  41cc36:	4798      	blx	r3
                toggled = 0;
  41cc38:	2300      	movs	r3, #0
  41cc3a:	9301      	str	r3, [sp, #4]
            res = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &toggled);
  41cc3c:	aa01      	add	r2, sp, #4
  41cc3e:	2110      	movs	r1, #16
  41cc40:	4630      	mov	r0, r6
  41cc42:	4b12      	ldr	r3, [pc, #72]	; (41cc8c <lv_btn_signal+0xf4>)
  41cc44:	4798      	blx	r3
  41cc46:	4604      	mov	r4, r0
  41cc48:	e7b2      	b.n	41cbb0 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41cc4a:	2103      	movs	r1, #3
  41cc4c:	4630      	mov	r0, r6
  41cc4e:	4b0e      	ldr	r3, [pc, #56]	; (41cc88 <lv_btn_signal+0xf0>)
  41cc50:	4798      	blx	r3
                toggled = 1;
  41cc52:	2301      	movs	r3, #1
  41cc54:	9301      	str	r3, [sp, #4]
  41cc56:	e7f1      	b.n	41cc3c <lv_btn_signal+0xa4>
            if(lv_btn_get_checkable(btn)) {
  41cc58:	4630      	mov	r0, r6
  41cc5a:	4b0a      	ldr	r3, [pc, #40]	; (41cc84 <lv_btn_signal+0xec>)
  41cc5c:	4798      	blx	r3
  41cc5e:	2800      	cmp	r0, #0
  41cc60:	d0a6      	beq.n	41cbb0 <lv_btn_signal+0x18>
                lv_btn_set_state(btn, LV_BTN_STATE_CHECKED_RELEASED);
  41cc62:	2103      	movs	r1, #3
  41cc64:	4630      	mov	r0, r6
  41cc66:	4b08      	ldr	r3, [pc, #32]	; (41cc88 <lv_btn_signal+0xf0>)
  41cc68:	4798      	blx	r3
                uint32_t state = 1;
  41cc6a:	aa02      	add	r2, sp, #8
  41cc6c:	2301      	movs	r3, #1
  41cc6e:	f842 3d04 	str.w	r3, [r2, #-4]!
                res            = lv_event_send(btn, LV_EVENT_VALUE_CHANGED, &state);
  41cc72:	2110      	movs	r1, #16
  41cc74:	4630      	mov	r0, r6
  41cc76:	4b05      	ldr	r3, [pc, #20]	; (41cc8c <lv_btn_signal+0xf4>)
  41cc78:	4798      	blx	r3
  41cc7a:	4604      	mov	r4, r0
  41cc7c:	e798      	b.n	41cbb0 <lv_btn_signal+0x18>
  41cc7e:	bf00      	nop
  41cc80:	204147d8 	.word	0x204147d8
  41cc84:	0041cb65 	.word	0x0041cb65
  41cc88:	0041cac5 	.word	0x0041cac5
  41cc8c:	004053e5 	.word	0x004053e5
  41cc90:	004297d8 	.word	0x004297d8
  41cc94:	00407de9 	.word	0x00407de9
  41cc98:	00404889 	.word	0x00404889
  41cc9c:	00406929 	.word	0x00406929

0041cca0 <lv_cont_get_style>:
}

static lv_style_list_t * lv_cont_get_style(lv_obj_t * cont, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  41cca0:	b909      	cbnz	r1, 41cca6 <lv_cont_get_style+0x6>
        case LV_CONT_PART_MAIN:
            style_dsc_p = &cont->style_list;
  41cca2:	3028      	adds	r0, #40	; 0x28
            break;
  41cca4:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  41cca6:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  41cca8:	4770      	bx	lr
	...

0041ccac <lv_cont_layout_center>:
/**
 * Handle the center layout
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_center(lv_obj_t * cont)
{
  41ccac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41ccb0:	b083      	sub	sp, #12
  41ccb2:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41ccb4:	2214      	movs	r2, #20
  41ccb6:	2100      	movs	r1, #0
  41ccb8:	4b3c      	ldr	r3, [pc, #240]	; (41cdac <lv_cont_layout_center+0x100>)
  41ccba:	4798      	blx	r3
  41ccbc:	4607      	mov	r7, r0
    lv_obj_t * child;
    uint32_t obj_num         = 0;
    lv_coord_t h_tot         = 0;

    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    _LV_LL_READ(cont->child_ll, child) {
  41ccbe:	1d35      	adds	r5, r6, #4
  41ccc0:	4628      	mov	r0, r5
  41ccc2:	4b3b      	ldr	r3, [pc, #236]	; (41cdb0 <lv_cont_layout_center+0x104>)
  41ccc4:	4798      	blx	r3
  41ccc6:	4604      	mov	r4, r0
    lv_coord_t h_tot         = 0;
  41ccc8:	f04f 0800 	mov.w	r8, #0
    uint32_t obj_num         = 0;
  41cccc:	46c1      	mov	r9, r8
    _LV_LL_READ(cont->child_ll, child) {
  41ccce:	e004      	b.n	41ccda <lv_cont_layout_center+0x2e>
  41ccd0:	4621      	mov	r1, r4
  41ccd2:	4628      	mov	r0, r5
  41ccd4:	4b37      	ldr	r3, [pc, #220]	; (41cdb4 <lv_cont_layout_center+0x108>)
  41ccd6:	4798      	blx	r3
  41ccd8:	4604      	mov	r4, r0
  41ccda:	b1a4      	cbz	r4, 41cd06 <lv_cont_layout_center+0x5a>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41ccdc:	4620      	mov	r0, r4
  41ccde:	4b36      	ldr	r3, [pc, #216]	; (41cdb8 <lv_cont_layout_center+0x10c>)
  41cce0:	4798      	blx	r3
  41cce2:	2800      	cmp	r0, #0
  41cce4:	d1f4      	bne.n	41ccd0 <lv_cont_layout_center+0x24>
  41cce6:	2104      	movs	r1, #4
  41cce8:	4620      	mov	r0, r4
  41ccea:	4b34      	ldr	r3, [pc, #208]	; (41cdbc <lv_cont_layout_center+0x110>)
  41ccec:	4798      	blx	r3
  41ccee:	2800      	cmp	r0, #0
  41ccf0:	d1ee      	bne.n	41ccd0 <lv_cont_layout_center+0x24>
        h_tot += lv_obj_get_height(child) + inner;
  41ccf2:	4620      	mov	r0, r4
  41ccf4:	4b32      	ldr	r3, [pc, #200]	; (41cdc0 <lv_cont_layout_center+0x114>)
  41ccf6:	4798      	blx	r3
  41ccf8:	4438      	add	r0, r7
  41ccfa:	4480      	add	r8, r0
  41ccfc:	fa0f f888 	sxth.w	r8, r8
        obj_num++;
  41cd00:	f109 0901 	add.w	r9, r9, #1
  41cd04:	e7e4      	b.n	41ccd0 <lv_cont_layout_center+0x24>
    }

    if(obj_num == 0) return;
  41cd06:	f1b9 0f00 	cmp.w	r9, #0
  41cd0a:	d102      	bne.n	41cd12 <lv_cont_layout_center+0x66>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
        last_cord += lv_obj_get_height(child) + inner;
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
}
  41cd0c:	b003      	add	sp, #12
  41cd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    h_tot -= inner;
  41cd12:	eba8 0807 	sub.w	r8, r8, r7
  41cd16:	fa0f f888 	sxth.w	r8, r8
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41cd1a:	2101      	movs	r1, #1
  41cd1c:	4630      	mov	r0, r6
  41cd1e:	4b29      	ldr	r3, [pc, #164]	; (41cdc4 <lv_cont_layout_center+0x118>)
  41cd20:	4798      	blx	r3
    lv_coord_t last_cord = -(h_tot / 2);
  41cd22:	4643      	mov	r3, r8
  41cd24:	f1b8 0f00 	cmp.w	r8, #0
  41cd28:	db0a      	blt.n	41cd40 <lv_cont_layout_center+0x94>
  41cd2a:	ea4f 0863 	mov.w	r8, r3, asr #1
  41cd2e:	f1c8 0800 	rsb	r8, r8, #0
  41cd32:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41cd36:	4628      	mov	r0, r5
  41cd38:	4b23      	ldr	r3, [pc, #140]	; (41cdc8 <lv_cont_layout_center+0x11c>)
  41cd3a:	4798      	blx	r3
  41cd3c:	4604      	mov	r4, r0
  41cd3e:	e019      	b.n	41cd74 <lv_cont_layout_center+0xc8>
    lv_coord_t last_cord = -(h_tot / 2);
  41cd40:	f108 0301 	add.w	r3, r8, #1
  41cd44:	e7f1      	b.n	41cd2a <lv_cont_layout_center+0x7e>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41cd46:	eb08 0363 	add.w	r3, r8, r3, asr #1
  41cd4a:	b21b      	sxth	r3, r3
  41cd4c:	9300      	str	r3, [sp, #0]
  41cd4e:	2300      	movs	r3, #0
  41cd50:	461a      	mov	r2, r3
  41cd52:	4631      	mov	r1, r6
  41cd54:	4620      	mov	r0, r4
  41cd56:	f8df 907c 	ldr.w	r9, [pc, #124]	; 41cdd4 <lv_cont_layout_center+0x128>
  41cd5a:	47c8      	blx	r9
        last_cord += lv_obj_get_height(child) + inner;
  41cd5c:	4620      	mov	r0, r4
  41cd5e:	4b18      	ldr	r3, [pc, #96]	; (41cdc0 <lv_cont_layout_center+0x114>)
  41cd60:	4798      	blx	r3
  41cd62:	4438      	add	r0, r7
  41cd64:	4480      	add	r8, r0
  41cd66:	fa0f f888 	sxth.w	r8, r8
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41cd6a:	4621      	mov	r1, r4
  41cd6c:	4628      	mov	r0, r5
  41cd6e:	4b17      	ldr	r3, [pc, #92]	; (41cdcc <lv_cont_layout_center+0x120>)
  41cd70:	4798      	blx	r3
  41cd72:	4604      	mov	r4, r0
  41cd74:	b1a4      	cbz	r4, 41cda0 <lv_cont_layout_center+0xf4>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41cd76:	4620      	mov	r0, r4
  41cd78:	4b0f      	ldr	r3, [pc, #60]	; (41cdb8 <lv_cont_layout_center+0x10c>)
  41cd7a:	4798      	blx	r3
  41cd7c:	2800      	cmp	r0, #0
  41cd7e:	d1f4      	bne.n	41cd6a <lv_cont_layout_center+0xbe>
  41cd80:	2104      	movs	r1, #4
  41cd82:	4620      	mov	r0, r4
  41cd84:	4b0d      	ldr	r3, [pc, #52]	; (41cdbc <lv_cont_layout_center+0x110>)
  41cd86:	4798      	blx	r3
  41cd88:	2800      	cmp	r0, #0
  41cd8a:	d1ee      	bne.n	41cd6a <lv_cont_layout_center+0xbe>
        lv_obj_align(child, cont, LV_ALIGN_CENTER, 0, last_cord + lv_obj_get_height(child) / 2);
  41cd8c:	4620      	mov	r0, r4
  41cd8e:	4b0c      	ldr	r3, [pc, #48]	; (41cdc0 <lv_cont_layout_center+0x114>)
  41cd90:	4798      	blx	r3
  41cd92:	fa1f f888 	uxth.w	r8, r8
  41cd96:	4603      	mov	r3, r0
  41cd98:	2800      	cmp	r0, #0
  41cd9a:	dad4      	bge.n	41cd46 <lv_cont_layout_center+0x9a>
  41cd9c:	1c43      	adds	r3, r0, #1
  41cd9e:	e7d2      	b.n	41cd46 <lv_cont_layout_center+0x9a>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41cda0:	2101      	movs	r1, #1
  41cda2:	4630      	mov	r0, r6
  41cda4:	4b0a      	ldr	r3, [pc, #40]	; (41cdd0 <lv_cont_layout_center+0x124>)
  41cda6:	4798      	blx	r3
  41cda8:	e7b0      	b.n	41cd0c <lv_cont_layout_center+0x60>
  41cdaa:	bf00      	nop
  41cdac:	00406f8d 	.word	0x00406f8d
  41cdb0:	00415ac9 	.word	0x00415ac9
  41cdb4:	00415add 	.word	0x00415add
  41cdb8:	00405911 	.word	0x00405911
  41cdbc:	004068f5 	.word	0x004068f5
  41cdc0:	004056f9 	.word	0x004056f9
  41cdc4:	00405299 	.word	0x00405299
  41cdc8:	00415ad3 	.word	0x00415ad3
  41cdcc:	00415aeb 	.word	0x00415aeb
  41cdd0:	004052c9 	.word	0x004052c9
  41cdd4:	00405d49 	.word	0x00405d49

0041cdd8 <lv_cont_layout_grid>:
/**
 * Handle the grid layout. Align same-sized objects in a grid
 * @param cont pointer to an object which layout should be handled
 */
static void lv_cont_layout_grid(lv_obj_t * cont)
{
  41cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41cddc:	b083      	sub	sp, #12
  41cdde:	4680      	mov	r8, r0
    lv_coord_t w_fit         =  lv_obj_get_width_fit(cont);
  41cde0:	4b2d      	ldr	r3, [pc, #180]	; (41ce98 <lv_cont_layout_grid+0xc0>)
  41cde2:	4798      	blx	r3
  41cde4:	9000      	str	r0, [sp, #0]
  41cde6:	2214      	movs	r2, #20
  41cde8:	2100      	movs	r1, #0
  41cdea:	4640      	mov	r0, r8
  41cdec:	4c2b      	ldr	r4, [pc, #172]	; (41ce9c <lv_cont_layout_grid+0xc4>)
  41cdee:	47a0      	blx	r4
  41cdf0:	4681      	mov	r9, r0
    lv_coord_t inner = lv_obj_get_style_pad_inner(cont, LV_CONT_PART_MAIN);
    lv_coord_t y_ofs = inner + lv_obj_get_height(lv_obj_get_child(cont, NULL));
  41cdf2:	2100      	movs	r1, #0
  41cdf4:	4640      	mov	r0, r8
  41cdf6:	4b2a      	ldr	r3, [pc, #168]	; (41cea0 <lv_cont_layout_grid+0xc8>)
  41cdf8:	4798      	blx	r3
  41cdfa:	4b2a      	ldr	r3, [pc, #168]	; (41cea4 <lv_cont_layout_grid+0xcc>)
  41cdfc:	4798      	blx	r3
  41cdfe:	fa1f f989 	uxth.w	r9, r9
  41ce02:	fa19 f080 	uxtah	r0, r9, r0
  41ce06:	fa1f fb80 	uxth.w	fp, r0

    /* Disable child change action because the children will be moved a lot
     * an unnecessary child change signals could be sent*/
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41ce0a:	2101      	movs	r1, #1
  41ce0c:	4640      	mov	r0, r8
  41ce0e:	4b26      	ldr	r3, [pc, #152]	; (41cea8 <lv_cont_layout_grid+0xd0>)
  41ce10:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ce12:	2212      	movs	r2, #18
  41ce14:	2100      	movs	r1, #0
  41ce16:	4640      	mov	r0, r8
  41ce18:	47a0      	blx	r4
  41ce1a:	4606      	mov	r6, r0
  41ce1c:	9001      	str	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41ce1e:	2210      	movs	r2, #16
  41ce20:	2100      	movs	r1, #0
  41ce22:	4640      	mov	r0, r8
  41ce24:	47a0      	blx	r4
  41ce26:	4682      	mov	sl, r0
    /* Align the children */
    lv_coord_t left = lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
    lv_coord_t act_x = left;
    lv_coord_t act_y = lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
    lv_obj_t * child;
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41ce28:	f108 0504 	add.w	r5, r8, #4
  41ce2c:	4628      	mov	r0, r5
  41ce2e:	4b1f      	ldr	r3, [pc, #124]	; (41ceac <lv_cont_layout_grid+0xd4>)
  41ce30:	4798      	blx	r3
  41ce32:	4604      	mov	r4, r0
  41ce34:	e00d      	b.n	41ce52 <lv_cont_layout_grid+0x7a>
        if(act_x + obj_w > w_fit + left) {
            act_x = left;
            act_y += y_ofs;
        }

        lv_obj_set_pos(child, act_x, act_y);
  41ce36:	4652      	mov	r2, sl
  41ce38:	4631      	mov	r1, r6
  41ce3a:	4620      	mov	r0, r4
  41ce3c:	4b1c      	ldr	r3, [pc, #112]	; (41ceb0 <lv_cont_layout_grid+0xd8>)
  41ce3e:	4798      	blx	r3
        act_x += inner + obj_w;
  41ce40:	444f      	add	r7, r9
  41ce42:	fa16 f687 	uxtah	r6, r6, r7
  41ce46:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41ce48:	4621      	mov	r1, r4
  41ce4a:	4628      	mov	r0, r5
  41ce4c:	4b19      	ldr	r3, [pc, #100]	; (41ceb4 <lv_cont_layout_grid+0xdc>)
  41ce4e:	4798      	blx	r3
  41ce50:	4604      	mov	r4, r0
  41ce52:	b1cc      	cbz	r4, 41ce88 <lv_cont_layout_grid+0xb0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41ce54:	4620      	mov	r0, r4
  41ce56:	4b18      	ldr	r3, [pc, #96]	; (41ceb8 <lv_cont_layout_grid+0xe0>)
  41ce58:	4798      	blx	r3
  41ce5a:	2800      	cmp	r0, #0
  41ce5c:	d1f4      	bne.n	41ce48 <lv_cont_layout_grid+0x70>
  41ce5e:	2104      	movs	r1, #4
  41ce60:	4620      	mov	r0, r4
  41ce62:	4b16      	ldr	r3, [pc, #88]	; (41cebc <lv_cont_layout_grid+0xe4>)
  41ce64:	4798      	blx	r3
  41ce66:	2800      	cmp	r0, #0
  41ce68:	d1ee      	bne.n	41ce48 <lv_cont_layout_grid+0x70>
        lv_coord_t obj_w = lv_obj_get_width(child);
  41ce6a:	4620      	mov	r0, r4
  41ce6c:	4b14      	ldr	r3, [pc, #80]	; (41cec0 <lv_cont_layout_grid+0xe8>)
  41ce6e:	4798      	blx	r3
  41ce70:	4607      	mov	r7, r0
        if(act_x + obj_w > w_fit + left) {
  41ce72:	1832      	adds	r2, r6, r0
  41ce74:	9800      	ldr	r0, [sp, #0]
  41ce76:	9901      	ldr	r1, [sp, #4]
  41ce78:	1843      	adds	r3, r0, r1
  41ce7a:	429a      	cmp	r2, r3
  41ce7c:	dddb      	ble.n	41ce36 <lv_cont_layout_grid+0x5e>
            act_y += y_ofs;
  41ce7e:	44da      	add	sl, fp
  41ce80:	fa0f fa8a 	sxth.w	sl, sl
            act_x = left;
  41ce84:	460e      	mov	r6, r1
  41ce86:	e7d6      	b.n	41ce36 <lv_cont_layout_grid+0x5e>
    }

    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41ce88:	2101      	movs	r1, #1
  41ce8a:	4640      	mov	r0, r8
  41ce8c:	4b0d      	ldr	r3, [pc, #52]	; (41cec4 <lv_cont_layout_grid+0xec>)
  41ce8e:	4798      	blx	r3
}
  41ce90:	b003      	add	sp, #12
  41ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41ce96:	bf00      	nop
  41ce98:	004071c9 	.word	0x004071c9
  41ce9c:	00406f8d 	.word	0x00406f8d
  41cea0:	004055c9 	.word	0x004055c9
  41cea4:	004056f9 	.word	0x004056f9
  41cea8:	00405299 	.word	0x00405299
  41ceac:	00415ad3 	.word	0x00415ad3
  41ceb0:	00405b85 	.word	0x00405b85
  41ceb4:	00415aeb 	.word	0x00415aeb
  41ceb8:	00405911 	.word	0x00405911
  41cebc:	004068f5 	.word	0x004068f5
  41cec0:	004056c9 	.word	0x004056c9
  41cec4:	004052c9 	.word	0x004052c9

0041cec8 <lv_cont_refr_autofit>:
/**
 * Handle auto fit. Set the size of the object to involve all children.
 * @param cont pointer to an object which size will be modified
 */
static void lv_cont_refr_autofit(lv_obj_t * cont)
{
  41cec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41cecc:	b089      	sub	sp, #36	; 0x24
  41cece:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41ced0:	2101      	movs	r1, #1
  41ced2:	4bc2      	ldr	r3, [pc, #776]	; (41d1dc <lv_cont_refr_autofit+0x314>)
  41ced4:	4798      	blx	r3
  41ced6:	b110      	cbz	r0, 41cede <lv_cont_refr_autofit+0x16>
    else {
        LV_LOG_ERROR("LV_LAYOUT_MAX_RECURSION reached! You may have encountered issue #1539.");
    }

    recursion_level--;
}
  41ced8:	b009      	add	sp, #36	; 0x24
  41ceda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41cede:	4620      	mov	r0, r4
  41cee0:	4bbf      	ldr	r3, [pc, #764]	; (41d1e0 <lv_cont_refr_autofit+0x318>)
  41cee2:	4798      	blx	r3
  41cee4:	4605      	mov	r5, r0
    if(ext->fit_left == LV_FIT_NONE && ext->fit_right == LV_FIT_NONE && ext->fit_top == LV_FIT_NONE &&
  41cee6:	7803      	ldrb	r3, [r0, #0]
  41cee8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
  41ceec:	d103      	bne.n	41cef6 <lv_cont_refr_autofit+0x2e>
  41ceee:	7843      	ldrb	r3, [r0, #1]
  41cef0:	f013 0f0f 	tst.w	r3, #15
  41cef4:	d0f0      	beq.n	41ced8 <lv_cont_refr_autofit+0x10>
    recursion_level++;
  41cef6:	4abb      	ldr	r2, [pc, #748]	; (41d1e4 <lv_cont_refr_autofit+0x31c>)
  41cef8:	6813      	ldr	r3, [r2, #0]
  41cefa:	3301      	adds	r3, #1
  41cefc:	6013      	str	r3, [r2, #0]
    if(recursion_level <= LV_LAYOUT_MAX_RECURSION) {
  41cefe:	2b0a      	cmp	r3, #10
  41cf00:	dd04      	ble.n	41cf0c <lv_cont_refr_autofit+0x44>
    recursion_level--;
  41cf02:	4ab8      	ldr	r2, [pc, #736]	; (41d1e4 <lv_cont_refr_autofit+0x31c>)
  41cf04:	6813      	ldr	r3, [r2, #0]
  41cf06:	3b01      	subs	r3, #1
  41cf08:	6013      	str	r3, [r2, #0]
  41cf0a:	e7e5      	b.n	41ced8 <lv_cont_refr_autofit+0x10>
        lv_obj_t * par               = lv_obj_get_parent(cont);
  41cf0c:	4620      	mov	r0, r4
  41cf0e:	4bb6      	ldr	r3, [pc, #728]	; (41d1e8 <lv_cont_refr_autofit+0x320>)
  41cf10:	4798      	blx	r3
  41cf12:	4680      	mov	r8, r0
        lv_area_copy(&parent_area, &par->coords);
  41cf14:	f100 0110 	add.w	r1, r0, #16
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = (uint8_t *)dst;
  41cf18:	aa04      	add	r2, sp, #16
  41cf1a:	2308      	movs	r3, #8
  41cf1c:	e004      	b.n	41cf28 <lv_cont_refr_autofit+0x60>
    const uint8_t * s8 = (const uint8_t *)src;

    while(len) {
        *d8 = *s8;
  41cf1e:	f811 0b01 	ldrb.w	r0, [r1], #1
  41cf22:	f802 0b01 	strb.w	r0, [r2], #1
        d8++;
        s8++;
        len--;
  41cf26:	3b01      	subs	r3, #1
    while(len) {
  41cf28:	2b00      	cmp	r3, #0
  41cf2a:	d1f8      	bne.n	41cf1e <lv_cont_refr_autofit+0x56>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41cf2c:	2212      	movs	r2, #18
  41cf2e:	2100      	movs	r1, #0
  41cf30:	4640      	mov	r0, r8
  41cf32:	4eae      	ldr	r6, [pc, #696]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41cf34:	47b0      	blx	r6
        parent_area.x1 += lv_obj_get_style_pad_left(par, LV_OBJ_PART_MAIN);
  41cf36:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41cf3a:	fa13 f080 	uxtah	r0, r3, r0
  41cf3e:	f8ad 0010 	strh.w	r0, [sp, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41cf42:	2213      	movs	r2, #19
  41cf44:	2100      	movs	r1, #0
  41cf46:	4640      	mov	r0, r8
  41cf48:	47b0      	blx	r6
        parent_area.x2 -= lv_obj_get_style_pad_right(par, LV_OBJ_PART_MAIN);
  41cf4a:	b280      	uxth	r0, r0
  41cf4c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
  41cf50:	1a18      	subs	r0, r3, r0
  41cf52:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41cf56:	2210      	movs	r2, #16
  41cf58:	2100      	movs	r1, #0
  41cf5a:	4640      	mov	r0, r8
  41cf5c:	47b0      	blx	r6
        parent_area.y1 += lv_obj_get_style_pad_top(par, LV_OBJ_PART_MAIN);
  41cf5e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
  41cf62:	fa13 f080 	uxtah	r0, r3, r0
  41cf66:	f8ad 0012 	strh.w	r0, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41cf6a:	2211      	movs	r2, #17
  41cf6c:	2100      	movs	r1, #0
  41cf6e:	4640      	mov	r0, r8
  41cf70:	47b0      	blx	r6
        parent_area.y2 -= lv_obj_get_style_pad_bottom(par, LV_OBJ_PART_MAIN);
  41cf72:	b280      	uxth	r0, r0
  41cf74:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  41cf78:	1a18      	subs	r0, r3, r0
  41cf7a:	f8ad 0016 	strh.w	r0, [sp, #22]
        lv_obj_get_coords(cont, &ori);
  41cf7e:	a902      	add	r1, sp, #8
  41cf80:	4620      	mov	r0, r4
  41cf82:	4e9b      	ldr	r6, [pc, #620]	; (41d1f0 <lv_cont_refr_autofit+0x328>)
  41cf84:	47b0      	blx	r6
        lv_obj_get_coords(cont, &tight_area);
  41cf86:	4669      	mov	r1, sp
  41cf88:	4620      	mov	r0, r4
  41cf8a:	47b0      	blx	r6
        bool has_children = _lv_ll_is_empty(&cont->child_ll) ? false : true;
  41cf8c:	1d26      	adds	r6, r4, #4
  41cf8e:	4630      	mov	r0, r6
  41cf90:	4b98      	ldr	r3, [pc, #608]	; (41d1f4 <lv_cont_refr_autofit+0x32c>)
  41cf92:	4798      	blx	r3
  41cf94:	f080 0001 	eor.w	r0, r0, #1
        if(has_children) {
  41cf98:	f010 09ff 	ands.w	r9, r0, #255	; 0xff
  41cf9c:	d103      	bne.n	41cfa6 <lv_cont_refr_autofit+0xde>
        lv_area_copy(&parent_area, &par->coords);
  41cf9e:	a902      	add	r1, sp, #8
  41cfa0:	aa06      	add	r2, sp, #24
  41cfa2:	2308      	movs	r3, #8
  41cfa4:	e09c      	b.n	41d0e0 <lv_cont_refr_autofit+0x218>
            tight_area.x1 = LV_COORD_MAX;
  41cfa6:	f647 4318 	movw	r3, #31768	; 0x7c18
  41cfaa:	f8ad 3000 	strh.w	r3, [sp]
            tight_area.y1 = LV_COORD_MAX;
  41cfae:	f8ad 3002 	strh.w	r3, [sp, #2]
            tight_area.x2 = LV_COORD_MIN;
  41cfb2:	f248 33e8 	movw	r3, #33768	; 0x83e8
  41cfb6:	f8ad 3004 	strh.w	r3, [sp, #4]
            tight_area.y2 = LV_COORD_MIN;
  41cfba:	f8ad 3006 	strh.w	r3, [sp, #6]
            _LV_LL_READ(cont->child_ll, child_i) {
  41cfbe:	4630      	mov	r0, r6
  41cfc0:	4b8d      	ldr	r3, [pc, #564]	; (41d1f8 <lv_cont_refr_autofit+0x330>)
  41cfc2:	4798      	blx	r3
  41cfc4:	4607      	mov	r7, r0
  41cfc6:	e004      	b.n	41cfd2 <lv_cont_refr_autofit+0x10a>
  41cfc8:	4639      	mov	r1, r7
  41cfca:	4630      	mov	r0, r6
  41cfcc:	4b8b      	ldr	r3, [pc, #556]	; (41d1fc <lv_cont_refr_autofit+0x334>)
  41cfce:	4798      	blx	r3
  41cfd0:	4607      	mov	r7, r0
  41cfd2:	2f00      	cmp	r7, #0
  41cfd4:	d055      	beq.n	41d082 <lv_cont_refr_autofit+0x1ba>
                if(lv_obj_get_hidden(child_i) != false) continue;
  41cfd6:	4638      	mov	r0, r7
  41cfd8:	4b89      	ldr	r3, [pc, #548]	; (41d200 <lv_cont_refr_autofit+0x338>)
  41cfda:	4798      	blx	r3
  41cfdc:	2800      	cmp	r0, #0
  41cfde:	d1f3      	bne.n	41cfc8 <lv_cont_refr_autofit+0x100>
                if(ext->fit_left != LV_FIT_PARENT) {
  41cfe0:	782b      	ldrb	r3, [r5, #0]
  41cfe2:	f003 0330 	and.w	r3, r3, #48	; 0x30
  41cfe6:	2b20      	cmp	r3, #32
  41cfe8:	d00e      	beq.n	41d008 <lv_cont_refr_autofit+0x140>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41cfea:	2217      	movs	r2, #23
  41cfec:	2100      	movs	r1, #0
  41cfee:	4638      	mov	r0, r7
  41cff0:	4b7e      	ldr	r3, [pc, #504]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41cff2:	4798      	blx	r3
                    tight_area.x1 = LV_MATH_MIN(tight_area.x1, child_i->coords.x1 - mleft);
  41cff4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
  41cff8:	1a18      	subs	r0, r3, r0
  41cffa:	f9bd 3000 	ldrsh.w	r3, [sp]
  41cffe:	4298      	cmp	r0, r3
  41d000:	bfa8      	it	ge
  41d002:	4618      	movge	r0, r3
  41d004:	f8ad 0000 	strh.w	r0, [sp]
                if(ext->fit_right != LV_FIT_PARENT) {
  41d008:	782b      	ldrb	r3, [r5, #0]
  41d00a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  41d00e:	2b80      	cmp	r3, #128	; 0x80
  41d010:	d00e      	beq.n	41d030 <lv_cont_refr_autofit+0x168>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41d012:	2218      	movs	r2, #24
  41d014:	2100      	movs	r1, #0
  41d016:	4638      	mov	r0, r7
  41d018:	4b74      	ldr	r3, [pc, #464]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41d01a:	4798      	blx	r3
                    tight_area.x2 = LV_MATH_MAX(tight_area.x2, child_i->coords.x2 + mright);
  41d01c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  41d020:	4418      	add	r0, r3
  41d022:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  41d026:	4298      	cmp	r0, r3
  41d028:	bfb8      	it	lt
  41d02a:	4618      	movlt	r0, r3
  41d02c:	f8ad 0004 	strh.w	r0, [sp, #4]
                if(ext->fit_top != LV_FIT_PARENT) {
  41d030:	786b      	ldrb	r3, [r5, #1]
  41d032:	f003 0303 	and.w	r3, r3, #3
  41d036:	2b02      	cmp	r3, #2
  41d038:	d00e      	beq.n	41d058 <lv_cont_refr_autofit+0x190>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41d03a:	2215      	movs	r2, #21
  41d03c:	2100      	movs	r1, #0
  41d03e:	4638      	mov	r0, r7
  41d040:	4b6a      	ldr	r3, [pc, #424]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41d042:	4798      	blx	r3
                    tight_area.y1 = LV_MATH_MIN(tight_area.y1, child_i->coords.y1 - mtop);
  41d044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
  41d048:	1a18      	subs	r0, r3, r0
  41d04a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  41d04e:	4298      	cmp	r0, r3
  41d050:	bfa8      	it	ge
  41d052:	4618      	movge	r0, r3
  41d054:	f8ad 0002 	strh.w	r0, [sp, #2]
                if(ext->fit_bottom != LV_FIT_PARENT) {
  41d058:	786b      	ldrb	r3, [r5, #1]
  41d05a:	f003 030c 	and.w	r3, r3, #12
  41d05e:	2b08      	cmp	r3, #8
  41d060:	d0b2      	beq.n	41cfc8 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41d062:	2216      	movs	r2, #22
  41d064:	2100      	movs	r1, #0
  41d066:	4638      	mov	r0, r7
  41d068:	4b60      	ldr	r3, [pc, #384]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41d06a:	4798      	blx	r3
                    tight_area.y2 = LV_MATH_MAX(tight_area.y2, child_i->coords.y2 + mbottom);
  41d06c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  41d070:	4418      	add	r0, r3
  41d072:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  41d076:	4298      	cmp	r0, r3
  41d078:	bfb8      	it	lt
  41d07a:	4618      	movlt	r0, r3
  41d07c:	f8ad 0006 	strh.w	r0, [sp, #6]
  41d080:	e7a2      	b.n	41cfc8 <lv_cont_refr_autofit+0x100>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d082:	2212      	movs	r2, #18
  41d084:	2100      	movs	r1, #0
  41d086:	4620      	mov	r0, r4
  41d088:	4f58      	ldr	r7, [pc, #352]	; (41d1ec <lv_cont_refr_autofit+0x324>)
  41d08a:	47b8      	blx	r7
            tight_area.x1 -= lv_obj_get_style_pad_left(cont, LV_CONT_PART_MAIN);
  41d08c:	b280      	uxth	r0, r0
  41d08e:	f8bd 3000 	ldrh.w	r3, [sp]
  41d092:	1a18      	subs	r0, r3, r0
  41d094:	f8ad 0000 	strh.w	r0, [sp]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d098:	2213      	movs	r2, #19
  41d09a:	2100      	movs	r1, #0
  41d09c:	4620      	mov	r0, r4
  41d09e:	47b8      	blx	r7
            tight_area.x2 += lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  41d0a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  41d0a4:	fa13 f080 	uxtah	r0, r3, r0
  41d0a8:	f8ad 0004 	strh.w	r0, [sp, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d0ac:	2210      	movs	r2, #16
  41d0ae:	2100      	movs	r1, #0
  41d0b0:	4620      	mov	r0, r4
  41d0b2:	47b8      	blx	r7
            tight_area.y1 -= lv_obj_get_style_pad_top(cont, LV_CONT_PART_MAIN);
  41d0b4:	b280      	uxth	r0, r0
  41d0b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
  41d0ba:	1a18      	subs	r0, r3, r0
  41d0bc:	f8ad 0002 	strh.w	r0, [sp, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d0c0:	2211      	movs	r2, #17
  41d0c2:	2100      	movs	r1, #0
  41d0c4:	4620      	mov	r0, r4
  41d0c6:	47b8      	blx	r7
            tight_area.y2 += lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41d0c8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  41d0cc:	fa13 f080 	uxtah	r0, r3, r0
  41d0d0:	f8ad 0006 	strh.w	r0, [sp, #6]
  41d0d4:	e763      	b.n	41cf9e <lv_cont_refr_autofit+0xd6>
        *d8 = *s8;
  41d0d6:	f811 0b01 	ldrb.w	r0, [r1], #1
  41d0da:	f802 0b01 	strb.w	r0, [r2], #1
        len--;
  41d0de:	3b01      	subs	r3, #1
    while(len) {
  41d0e0:	2b00      	cmp	r3, #0
  41d0e2:	d1f8      	bne.n	41d0d6 <lv_cont_refr_autofit+0x20e>
        switch(ext->fit_left) {
  41d0e4:	782b      	ldrb	r3, [r5, #0]
  41d0e6:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41d0ea:	2b02      	cmp	r3, #2
  41d0ec:	d037      	beq.n	41d15e <lv_cont_refr_autofit+0x296>
  41d0ee:	d83b      	bhi.n	41d168 <lv_cont_refr_autofit+0x2a0>
  41d0f0:	2b01      	cmp	r3, #1
  41d0f2:	d103      	bne.n	41d0fc <lv_cont_refr_autofit+0x234>
                new_area.x1 = tight_area.x1;
  41d0f4:	f9bd 3000 	ldrsh.w	r3, [sp]
  41d0f8:	f8ad 3018 	strh.w	r3, [sp, #24]
        switch(ext->fit_right) {
  41d0fc:	782b      	ldrb	r3, [r5, #0]
  41d0fe:	099b      	lsrs	r3, r3, #6
  41d100:	2b02      	cmp	r3, #2
  41d102:	d041      	beq.n	41d188 <lv_cont_refr_autofit+0x2c0>
  41d104:	d845      	bhi.n	41d192 <lv_cont_refr_autofit+0x2ca>
  41d106:	2b01      	cmp	r3, #1
  41d108:	d103      	bne.n	41d112 <lv_cont_refr_autofit+0x24a>
                new_area.x2 = tight_area.x2;
  41d10a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
  41d10e:	f8ad 301c 	strh.w	r3, [sp, #28]
        switch(ext->fit_top) {
  41d112:	786b      	ldrb	r3, [r5, #1]
  41d114:	f003 0303 	and.w	r3, r3, #3
  41d118:	2b02      	cmp	r3, #2
  41d11a:	d04a      	beq.n	41d1b2 <lv_cont_refr_autofit+0x2ea>
  41d11c:	d84e      	bhi.n	41d1bc <lv_cont_refr_autofit+0x2f4>
  41d11e:	2b01      	cmp	r3, #1
  41d120:	d103      	bne.n	41d12a <lv_cont_refr_autofit+0x262>
                new_area.y1 = tight_area.y1;
  41d122:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
  41d126:	f8ad 301a 	strh.w	r3, [sp, #26]
        switch(ext->fit_bottom) {
  41d12a:	786b      	ldrb	r3, [r5, #1]
  41d12c:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41d130:	2b02      	cmp	r3, #2
  41d132:	d069      	beq.n	41d208 <lv_cont_refr_autofit+0x340>
  41d134:	d86d      	bhi.n	41d212 <lv_cont_refr_autofit+0x34a>
  41d136:	2b01      	cmp	r3, #1
  41d138:	d103      	bne.n	41d142 <lv_cont_refr_autofit+0x27a>
                new_area.y2 = tight_area.y2;
  41d13a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  41d13e:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41d142:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
  41d146:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  41d14a:	429a      	cmp	r2, r3
  41d14c:	d071      	beq.n	41d232 <lv_cont_refr_autofit+0x36a>
            lv_obj_invalidate(cont);
  41d14e:	4620      	mov	r0, r4
  41d150:	4b2c      	ldr	r3, [pc, #176]	; (41d204 <lv_cont_refr_autofit+0x33c>)
  41d152:	4798      	blx	r3
            lv_area_copy(&cont->coords, &new_area);
  41d154:	f104 0110 	add.w	r1, r4, #16
    const uint8_t * s8 = (const uint8_t *)src;
  41d158:	aa06      	add	r2, sp, #24
  41d15a:	2308      	movs	r3, #8
  41d15c:	e082      	b.n	41d264 <lv_cont_refr_autofit+0x39c>
                new_area.x1 = parent_area.x1;
  41d15e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41d162:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  41d166:	e7c9      	b.n	41d0fc <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  41d168:	f1b9 0f00 	cmp.w	r9, #0
  41d16c:	d009      	beq.n	41d182 <lv_cont_refr_autofit+0x2ba>
  41d16e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41d172:	f9bd 2000 	ldrsh.w	r2, [sp]
  41d176:	4293      	cmp	r3, r2
  41d178:	bfa8      	it	ge
  41d17a:	4613      	movge	r3, r2
  41d17c:	f8ad 3018 	strh.w	r3, [sp, #24]
                break;
  41d180:	e7bc      	b.n	41d0fc <lv_cont_refr_autofit+0x234>
                new_area.x1 = has_children ? LV_MATH_MIN(tight_area.x1, parent_area.x1) : parent_area.x1;
  41d182:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41d186:	e7f9      	b.n	41d17c <lv_cont_refr_autofit+0x2b4>
                new_area.x2 = parent_area.x2;
  41d188:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41d18c:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  41d190:	e7bf      	b.n	41d112 <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  41d192:	f1b9 0f00 	cmp.w	r9, #0
  41d196:	d009      	beq.n	41d1ac <lv_cont_refr_autofit+0x2e4>
  41d198:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41d19c:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  41d1a0:	4293      	cmp	r3, r2
  41d1a2:	bfb8      	it	lt
  41d1a4:	4613      	movlt	r3, r2
  41d1a6:	f8ad 301c 	strh.w	r3, [sp, #28]
                break;
  41d1aa:	e7b2      	b.n	41d112 <lv_cont_refr_autofit+0x24a>
                new_area.x2 = has_children ? LV_MATH_MAX(tight_area.x2, parent_area.x2) : parent_area.x2;
  41d1ac:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
  41d1b0:	e7f9      	b.n	41d1a6 <lv_cont_refr_autofit+0x2de>
                new_area.y1 = parent_area.y1;
  41d1b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41d1b6:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  41d1ba:	e7b6      	b.n	41d12a <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  41d1bc:	f1b9 0f00 	cmp.w	r9, #0
  41d1c0:	d009      	beq.n	41d1d6 <lv_cont_refr_autofit+0x30e>
  41d1c2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41d1c6:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
  41d1ca:	4293      	cmp	r3, r2
  41d1cc:	bfa8      	it	ge
  41d1ce:	4613      	movge	r3, r2
  41d1d0:	f8ad 301a 	strh.w	r3, [sp, #26]
                break;
  41d1d4:	e7a9      	b.n	41d12a <lv_cont_refr_autofit+0x262>
                new_area.y1 = has_children ? LV_MATH_MIN(tight_area.y1, parent_area.y1) : parent_area.y1;
  41d1d6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
  41d1da:	e7f9      	b.n	41d1d0 <lv_cont_refr_autofit+0x308>
  41d1dc:	004068f5 	.word	0x004068f5
  41d1e0:	00407b5d 	.word	0x00407b5d
  41d1e4:	204147e4 	.word	0x204147e4
  41d1e8:	004054f5 	.word	0x004054f5
  41d1ec:	00406f8d 	.word	0x00406f8d
  41d1f0:	00405609 	.word	0x00405609
  41d1f4:	00415d35 	.word	0x00415d35
  41d1f8:	00415ac9 	.word	0x00415ac9
  41d1fc:	00415add 	.word	0x00415add
  41d200:	00405911 	.word	0x00405911
  41d204:	00405aa1 	.word	0x00405aa1
                new_area.y2 = parent_area.y2;
  41d208:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41d20c:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  41d210:	e797      	b.n	41d142 <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  41d212:	f1b9 0f00 	cmp.w	r9, #0
  41d216:	d009      	beq.n	41d22c <lv_cont_refr_autofit+0x364>
  41d218:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41d21c:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
  41d220:	4293      	cmp	r3, r2
  41d222:	bfb8      	it	lt
  41d224:	4613      	movlt	r3, r2
  41d226:	f8ad 301e 	strh.w	r3, [sp, #30]
                break;
  41d22a:	e78a      	b.n	41d142 <lv_cont_refr_autofit+0x27a>
                new_area.y2 = has_children ? LV_MATH_MAX(tight_area.y2, parent_area.y2) : parent_area.y2;
  41d22c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
  41d230:	e7f9      	b.n	41d226 <lv_cont_refr_autofit+0x35e>
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41d232:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
  41d236:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
  41d23a:	429a      	cmp	r2, r3
  41d23c:	d187      	bne.n	41d14e <lv_cont_refr_autofit+0x286>
  41d23e:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
  41d242:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
  41d246:	429a      	cmp	r2, r3
  41d248:	d181      	bne.n	41d14e <lv_cont_refr_autofit+0x286>
           cont->coords.y2 != new_area.y2) {
  41d24a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
  41d24e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
        if(cont->coords.x1 != new_area.x1 || cont->coords.y1 != new_area.y1 || cont->coords.x2 != new_area.x2 ||
  41d252:	429a      	cmp	r2, r3
  41d254:	f47f af7b 	bne.w	41d14e <lv_cont_refr_autofit+0x286>
  41d258:	e653      	b.n	41cf02 <lv_cont_refr_autofit+0x3a>
        *d8 = *s8;
  41d25a:	f812 0b01 	ldrb.w	r0, [r2], #1
  41d25e:	f801 0b01 	strb.w	r0, [r1], #1
        len--;
  41d262:	3b01      	subs	r3, #1
    while(len) {
  41d264:	2b00      	cmp	r3, #0
  41d266:	d1f8      	bne.n	41d25a <lv_cont_refr_autofit+0x392>
            lv_obj_invalidate(cont);
  41d268:	4620      	mov	r0, r4
  41d26a:	4b13      	ldr	r3, [pc, #76]	; (41d2b8 <lv_cont_refr_autofit+0x3f0>)
  41d26c:	4798      	blx	r3
            cont->signal_cb(cont, LV_SIGNAL_COORD_CHG, &ori);
  41d26e:	69e3      	ldr	r3, [r4, #28]
  41d270:	aa02      	add	r2, sp, #8
  41d272:	2102      	movs	r1, #2
  41d274:	4620      	mov	r0, r4
  41d276:	4798      	blx	r3
            par->signal_cb(par, LV_SIGNAL_CHILD_CHG, cont);
  41d278:	f8d8 301c 	ldr.w	r3, [r8, #28]
  41d27c:	4622      	mov	r2, r4
  41d27e:	2101      	movs	r1, #1
  41d280:	4640      	mov	r0, r8
  41d282:	4798      	blx	r3
            if(lv_obj_get_auto_realign(cont)) {
  41d284:	4620      	mov	r0, r4
  41d286:	4b0d      	ldr	r3, [pc, #52]	; (41d2bc <lv_cont_refr_autofit+0x3f4>)
  41d288:	4798      	blx	r3
  41d28a:	b920      	cbnz	r0, 41d296 <lv_cont_refr_autofit+0x3ce>
            _LV_LL_READ(cont->child_ll, child_i) {
  41d28c:	4630      	mov	r0, r6
  41d28e:	4b0c      	ldr	r3, [pc, #48]	; (41d2c0 <lv_cont_refr_autofit+0x3f8>)
  41d290:	4798      	blx	r3
  41d292:	4604      	mov	r4, r0
  41d294:	e00d      	b.n	41d2b2 <lv_cont_refr_autofit+0x3ea>
                lv_obj_realign(cont);
  41d296:	4620      	mov	r0, r4
  41d298:	4b0a      	ldr	r3, [pc, #40]	; (41d2c4 <lv_cont_refr_autofit+0x3fc>)
  41d29a:	4798      	blx	r3
  41d29c:	e7f6      	b.n	41d28c <lv_cont_refr_autofit+0x3c4>
                child_i->signal_cb(child_i, LV_SIGNAL_PARENT_SIZE_CHG, &ori);
  41d29e:	69e3      	ldr	r3, [r4, #28]
  41d2a0:	aa02      	add	r2, sp, #8
  41d2a2:	2103      	movs	r1, #3
  41d2a4:	4620      	mov	r0, r4
  41d2a6:	4798      	blx	r3
            _LV_LL_READ(cont->child_ll, child_i) {
  41d2a8:	4621      	mov	r1, r4
  41d2aa:	4630      	mov	r0, r6
  41d2ac:	4b06      	ldr	r3, [pc, #24]	; (41d2c8 <lv_cont_refr_autofit+0x400>)
  41d2ae:	4798      	blx	r3
  41d2b0:	4604      	mov	r4, r0
  41d2b2:	2c00      	cmp	r4, #0
  41d2b4:	d1f3      	bne.n	41d29e <lv_cont_refr_autofit+0x3d6>
  41d2b6:	e624      	b.n	41cf02 <lv_cont_refr_autofit+0x3a>
  41d2b8:	00405aa1 	.word	0x00405aa1
  41d2bc:	00405729 	.word	0x00405729
  41d2c0:	00415ac9 	.word	0x00415ac9
  41d2c4:	004061bd 	.word	0x004061bd
  41d2c8:	00415add 	.word	0x00415add

0041d2cc <lv_cont_create>:
{
  41d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41d2ce:	4607      	mov	r7, r0
  41d2d0:	460e      	mov	r6, r1
    lv_obj_t * cont = lv_obj_create(par, copy);
  41d2d2:	4b3b      	ldr	r3, [pc, #236]	; (41d3c0 <lv_cont_create+0xf4>)
  41d2d4:	4798      	blx	r3
  41d2d6:	4605      	mov	r5, r0
    LV_ASSERT_MEM(cont);
  41d2d8:	4b3a      	ldr	r3, [pc, #232]	; (41d3c4 <lv_cont_create+0xf8>)
  41d2da:	4798      	blx	r3
  41d2dc:	b1c8      	cbz	r0, 41d312 <lv_cont_create+0x46>
    if(cont == NULL) return NULL;
  41d2de:	2d00      	cmp	r5, #0
  41d2e0:	d065      	beq.n	41d3ae <lv_cont_create+0xe2>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41d2e2:	4b39      	ldr	r3, [pc, #228]	; (41d3c8 <lv_cont_create+0xfc>)
  41d2e4:	681b      	ldr	r3, [r3, #0]
  41d2e6:	b1d3      	cbz	r3, 41d31e <lv_cont_create+0x52>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41d2e8:	4b38      	ldr	r3, [pc, #224]	; (41d3cc <lv_cont_create+0x100>)
  41d2ea:	681b      	ldr	r3, [r3, #0]
  41d2ec:	b1eb      	cbz	r3, 41d32a <lv_cont_create+0x5e>
    lv_obj_allocate_ext_attr(cont, sizeof(lv_cont_ext_t));
  41d2ee:	2102      	movs	r1, #2
  41d2f0:	4628      	mov	r0, r5
  41d2f2:	4b37      	ldr	r3, [pc, #220]	; (41d3d0 <lv_cont_create+0x104>)
  41d2f4:	4798      	blx	r3
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41d2f6:	4628      	mov	r0, r5
  41d2f8:	4b36      	ldr	r3, [pc, #216]	; (41d3d4 <lv_cont_create+0x108>)
  41d2fa:	4798      	blx	r3
    if(ext == NULL) {
  41d2fc:	4604      	mov	r4, r0
  41d2fe:	b1d0      	cbz	r0, 41d336 <lv_cont_create+0x6a>
    LV_ASSERT_MEM(ext);
  41d300:	4b30      	ldr	r3, [pc, #192]	; (41d3c4 <lv_cont_create+0xf8>)
  41d302:	4798      	blx	r3
  41d304:	b9e0      	cbnz	r0, 41d340 <lv_cont_create+0x74>
  41d306:	4622      	mov	r2, r4
  41d308:	2300      	movs	r3, #0
  41d30a:	4833      	ldr	r0, [pc, #204]	; (41d3d8 <lv_cont_create+0x10c>)
  41d30c:	4933      	ldr	r1, [pc, #204]	; (41d3dc <lv_cont_create+0x110>)
  41d30e:	4788      	blx	r1
  41d310:	e7fe      	b.n	41d310 <lv_cont_create+0x44>
    LV_ASSERT_MEM(cont);
  41d312:	462a      	mov	r2, r5
  41d314:	2300      	movs	r3, #0
  41d316:	4830      	ldr	r0, [pc, #192]	; (41d3d8 <lv_cont_create+0x10c>)
  41d318:	4930      	ldr	r1, [pc, #192]	; (41d3dc <lv_cont_create+0x110>)
  41d31a:	4788      	blx	r1
  41d31c:	e7fe      	b.n	41d31c <lv_cont_create+0x50>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(cont);
  41d31e:	4628      	mov	r0, r5
  41d320:	4b2f      	ldr	r3, [pc, #188]	; (41d3e0 <lv_cont_create+0x114>)
  41d322:	4798      	blx	r3
  41d324:	4b28      	ldr	r3, [pc, #160]	; (41d3c8 <lv_cont_create+0xfc>)
  41d326:	6018      	str	r0, [r3, #0]
  41d328:	e7de      	b.n	41d2e8 <lv_cont_create+0x1c>
    if(ancestor_design == NULL) ancestor_design = lv_obj_get_design_cb(cont);
  41d32a:	4628      	mov	r0, r5
  41d32c:	4b2d      	ldr	r3, [pc, #180]	; (41d3e4 <lv_cont_create+0x118>)
  41d32e:	4798      	blx	r3
  41d330:	4b26      	ldr	r3, [pc, #152]	; (41d3cc <lv_cont_create+0x100>)
  41d332:	6018      	str	r0, [r3, #0]
  41d334:	e7db      	b.n	41d2ee <lv_cont_create+0x22>
        lv_obj_del(cont);
  41d336:	4628      	mov	r0, r5
  41d338:	4b2b      	ldr	r3, [pc, #172]	; (41d3e8 <lv_cont_create+0x11c>)
  41d33a:	4798      	blx	r3
        return NULL;
  41d33c:	2500      	movs	r5, #0
  41d33e:	e036      	b.n	41d3ae <lv_cont_create+0xe2>
    ext->fit_left   = LV_FIT_NONE;
  41d340:	7823      	ldrb	r3, [r4, #0]
    ext->fit_top    = LV_FIT_NONE;
  41d342:	7862      	ldrb	r2, [r4, #1]
    ext->fit_bottom = LV_FIT_NONE;
  41d344:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
  41d348:	f36f 0283 	bfc	r2, #2, #2
  41d34c:	7062      	strb	r2, [r4, #1]
    ext->layout     = LV_LAYOUT_OFF;
  41d34e:	f003 030f 	and.w	r3, r3, #15
  41d352:	f36f 0303 	bfc	r3, #0, #4
  41d356:	7023      	strb	r3, [r4, #0]
    lv_obj_set_signal_cb(cont, lv_cont_signal);
  41d358:	4924      	ldr	r1, [pc, #144]	; (41d3ec <lv_cont_create+0x120>)
  41d35a:	4628      	mov	r0, r5
  41d35c:	4b24      	ldr	r3, [pc, #144]	; (41d3f0 <lv_cont_create+0x124>)
  41d35e:	4798      	blx	r3
    if(copy == NULL) {
  41d360:	b33e      	cbz	r6, 41d3b2 <lv_cont_create+0xe6>
        lv_cont_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41d362:	4630      	mov	r0, r6
  41d364:	4b1b      	ldr	r3, [pc, #108]	; (41d3d4 <lv_cont_create+0x108>)
  41d366:	4798      	blx	r3
        ext->fit_left            = copy_ext->fit_left;
  41d368:	7803      	ldrb	r3, [r0, #0]
  41d36a:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41d36e:	7822      	ldrb	r2, [r4, #0]
  41d370:	f363 1205 	bfi	r2, r3, #4, #2
  41d374:	7022      	strb	r2, [r4, #0]
        ext->fit_right           = copy_ext->fit_right;
  41d376:	7803      	ldrb	r3, [r0, #0]
  41d378:	099b      	lsrs	r3, r3, #6
  41d37a:	b2d2      	uxtb	r2, r2
  41d37c:	f363 1287 	bfi	r2, r3, #6, #2
  41d380:	7022      	strb	r2, [r4, #0]
        ext->fit_top             = copy_ext->fit_top;
  41d382:	7842      	ldrb	r2, [r0, #1]
  41d384:	7863      	ldrb	r3, [r4, #1]
  41d386:	f362 0301 	bfi	r3, r2, #0, #2
  41d38a:	7063      	strb	r3, [r4, #1]
        ext->fit_bottom          = copy_ext->fit_bottom;
  41d38c:	7843      	ldrb	r3, [r0, #1]
  41d38e:	f3c3 0381 	ubfx	r3, r3, #2, #2
  41d392:	7862      	ldrb	r2, [r4, #1]
  41d394:	f363 0283 	bfi	r2, r3, #2, #2
  41d398:	7062      	strb	r2, [r4, #1]
        ext->layout              = copy_ext->layout;
  41d39a:	7802      	ldrb	r2, [r0, #0]
  41d39c:	7823      	ldrb	r3, [r4, #0]
  41d39e:	f362 0303 	bfi	r3, r2, #0, #4
  41d3a2:	7023      	strb	r3, [r4, #0]
        lv_obj_refresh_style(cont, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41d3a4:	22ff      	movs	r2, #255	; 0xff
  41d3a6:	4611      	mov	r1, r2
  41d3a8:	4628      	mov	r0, r5
  41d3aa:	4b12      	ldr	r3, [pc, #72]	; (41d3f4 <lv_cont_create+0x128>)
  41d3ac:	4798      	blx	r3
}
  41d3ae:	4628      	mov	r0, r5
  41d3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(par != NULL) {
  41d3b2:	2f00      	cmp	r7, #0
  41d3b4:	d0fb      	beq.n	41d3ae <lv_cont_create+0xe2>
            lv_theme_apply(cont, LV_THEME_CONT);
  41d3b6:	210b      	movs	r1, #11
  41d3b8:	4628      	mov	r0, r5
  41d3ba:	4b0f      	ldr	r3, [pc, #60]	; (41d3f8 <lv_cont_create+0x12c>)
  41d3bc:	4798      	blx	r3
  41d3be:	e7f6      	b.n	41d3ae <lv_cont_create+0xe2>
  41d3c0:	0040635d 	.word	0x0040635d
  41d3c4:	004157b9 	.word	0x004157b9
  41d3c8:	204147e0 	.word	0x204147e0
  41d3cc:	204147dc 	.word	0x204147dc
  41d3d0:	00405489 	.word	0x00405489
  41d3d4:	00407b5d 	.word	0x00407b5d
  41d3d8:	004260b0 	.word	0x004260b0
  41d3dc:	004157c5 	.word	0x004157c5
  41d3e0:	00407b0d 	.word	0x00407b0d
  41d3e4:	00407b35 	.word	0x00407b35
  41d3e8:	00407cbd 	.word	0x00407cbd
  41d3ec:	0041daf5 	.word	0x0041daf5
  41d3f0:	00405425 	.word	0x00405425
  41d3f4:	004073a9 	.word	0x004073a9
  41d3f8:	0041722d 	.word	0x0041722d

0041d3fc <lv_cont_set_layout>:
{
  41d3fc:	b538      	push	{r3, r4, r5, lr}
  41d3fe:	4604      	mov	r4, r0
  41d400:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41d402:	4b0d      	ldr	r3, [pc, #52]	; (41d438 <lv_cont_set_layout+0x3c>)
  41d404:	4798      	blx	r3
  41d406:	b928      	cbnz	r0, 41d414 <lv_cont_set_layout+0x18>
  41d408:	4622      	mov	r2, r4
  41d40a:	2300      	movs	r3, #0
  41d40c:	480b      	ldr	r0, [pc, #44]	; (41d43c <lv_cont_set_layout+0x40>)
  41d40e:	490c      	ldr	r1, [pc, #48]	; (41d440 <lv_cont_set_layout+0x44>)
  41d410:	4788      	blx	r1
  41d412:	e7fe      	b.n	41d412 <lv_cont_set_layout+0x16>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41d414:	4620      	mov	r0, r4
  41d416:	4b0b      	ldr	r3, [pc, #44]	; (41d444 <lv_cont_set_layout+0x48>)
  41d418:	4798      	blx	r3
    if(ext->layout == layout) return;
  41d41a:	7803      	ldrb	r3, [r0, #0]
  41d41c:	f003 030f 	and.w	r3, r3, #15
  41d420:	42ab      	cmp	r3, r5
  41d422:	d008      	beq.n	41d436 <lv_cont_set_layout+0x3a>
    ext->layout = layout;
  41d424:	7803      	ldrb	r3, [r0, #0]
  41d426:	f365 0303 	bfi	r3, r5, #0, #4
  41d42a:	7003      	strb	r3, [r0, #0]
    cont->signal_cb(cont, LV_SIGNAL_CHILD_CHG, NULL);
  41d42c:	69e3      	ldr	r3, [r4, #28]
  41d42e:	2200      	movs	r2, #0
  41d430:	2101      	movs	r1, #1
  41d432:	4620      	mov	r0, r4
  41d434:	4798      	blx	r3
  41d436:	bd38      	pop	{r3, r4, r5, pc}
  41d438:	004157b9 	.word	0x004157b9
  41d43c:	004260c4 	.word	0x004260c4
  41d440:	004157c5 	.word	0x004157c5
  41d444:	00407b5d 	.word	0x00407b5d

0041d448 <lv_cont_get_layout>:
{
  41d448:	b510      	push	{r4, lr}
  41d44a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(cont, LV_OBJX_NAME);
  41d44c:	4b07      	ldr	r3, [pc, #28]	; (41d46c <lv_cont_get_layout+0x24>)
  41d44e:	4798      	blx	r3
  41d450:	b928      	cbnz	r0, 41d45e <lv_cont_get_layout+0x16>
  41d452:	4622      	mov	r2, r4
  41d454:	2300      	movs	r3, #0
  41d456:	4806      	ldr	r0, [pc, #24]	; (41d470 <lv_cont_get_layout+0x28>)
  41d458:	4906      	ldr	r1, [pc, #24]	; (41d474 <lv_cont_get_layout+0x2c>)
  41d45a:	4788      	blx	r1
  41d45c:	e7fe      	b.n	41d45c <lv_cont_get_layout+0x14>
    lv_cont_ext_t * ext = lv_obj_get_ext_attr(cont);
  41d45e:	4620      	mov	r0, r4
  41d460:	4b05      	ldr	r3, [pc, #20]	; (41d478 <lv_cont_get_layout+0x30>)
  41d462:	4798      	blx	r3
    return ext->layout;
  41d464:	7800      	ldrb	r0, [r0, #0]
}
  41d466:	f000 000f 	and.w	r0, r0, #15
  41d46a:	bd10      	pop	{r4, pc}
  41d46c:	004157b9 	.word	0x004157b9
  41d470:	004260c4 	.word	0x004260c4
  41d474:	004157c5 	.word	0x004157c5
  41d478:	00407b5d 	.word	0x00407b5d

0041d47c <lv_cont_layout_col>:
{
  41d47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41d480:	b085      	sub	sp, #20
  41d482:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d484:	2212      	movs	r2, #18
  41d486:	2100      	movs	r1, #0
  41d488:	4c3c      	ldr	r4, [pc, #240]	; (41d57c <lv_cont_layout_col+0x100>)
  41d48a:	47a0      	blx	r4
  41d48c:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d48e:	2213      	movs	r2, #19
  41d490:	2100      	movs	r1, #0
  41d492:	4648      	mov	r0, r9
  41d494:	47a0      	blx	r4
  41d496:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d498:	2210      	movs	r2, #16
  41d49a:	2100      	movs	r1, #0
  41d49c:	4648      	mov	r0, r9
  41d49e:	47a0      	blx	r4
  41d4a0:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d4a2:	2214      	movs	r2, #20
  41d4a4:	2100      	movs	r1, #0
  41d4a6:	4648      	mov	r0, r9
  41d4a8:	47a0      	blx	r4
  41d4aa:	9002      	str	r0, [sp, #8]
    lv_layout_t type = lv_cont_get_layout(cont);
  41d4ac:	4648      	mov	r0, r9
  41d4ae:	4b34      	ldr	r3, [pc, #208]	; (41d580 <lv_cont_layout_col+0x104>)
  41d4b0:	4798      	blx	r3
    switch(type) {
  41d4b2:	2803      	cmp	r0, #3
  41d4b4:	d01c      	beq.n	41d4f0 <lv_cont_layout_col+0x74>
  41d4b6:	2804      	cmp	r0, #4
  41d4b8:	d013      	beq.n	41d4e2 <lv_cont_layout_col+0x66>
  41d4ba:	2802      	cmp	r0, #2
  41d4bc:	d004      	beq.n	41d4c8 <lv_cont_layout_col+0x4c>
            hpad_corr = 0;
  41d4be:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_LEFT;
  41d4c2:	2301      	movs	r3, #1
  41d4c4:	9303      	str	r3, [sp, #12]
            break;
  41d4c6:	e001      	b.n	41d4cc <lv_cont_layout_col+0x50>
            align     = LV_ALIGN_IN_TOP_LEFT;
  41d4c8:	2301      	movs	r3, #1
  41d4ca:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41d4cc:	2101      	movs	r1, #1
  41d4ce:	4648      	mov	r0, r9
  41d4d0:	4b2c      	ldr	r3, [pc, #176]	; (41d584 <lv_cont_layout_col+0x108>)
  41d4d2:	4798      	blx	r3
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41d4d4:	f109 0804 	add.w	r8, r9, #4
  41d4d8:	4640      	mov	r0, r8
  41d4da:	4b2b      	ldr	r3, [pc, #172]	; (41d588 <lv_cont_layout_col+0x10c>)
  41d4dc:	4798      	blx	r3
  41d4de:	4604      	mov	r4, r0
  41d4e0:	e010      	b.n	41d504 <lv_cont_layout_col+0x88>
            hpad_corr = -right;
  41d4e2:	f1c6 0a00 	rsb	sl, r6, #0
  41d4e6:	fa0f fa8a 	sxth.w	sl, sl
            align     = LV_ALIGN_IN_TOP_RIGHT;
  41d4ea:	2303      	movs	r3, #3
  41d4ec:	9303      	str	r3, [sp, #12]
            break;
  41d4ee:	e7ed      	b.n	41d4cc <lv_cont_layout_col+0x50>
            hpad_corr = 0;
  41d4f0:	f04f 0a00 	mov.w	sl, #0
            align     = LV_ALIGN_IN_TOP_MID;
  41d4f4:	2302      	movs	r3, #2
  41d4f6:	9303      	str	r3, [sp, #12]
  41d4f8:	e7e8      	b.n	41d4cc <lv_cont_layout_col+0x50>
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41d4fa:	4621      	mov	r1, r4
  41d4fc:	4640      	mov	r0, r8
  41d4fe:	4b23      	ldr	r3, [pc, #140]	; (41d58c <lv_cont_layout_col+0x110>)
  41d500:	4798      	blx	r3
  41d502:	4604      	mov	r4, r0
  41d504:	2c00      	cmp	r4, #0
  41d506:	d031      	beq.n	41d56c <lv_cont_layout_col+0xf0>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41d508:	4620      	mov	r0, r4
  41d50a:	4b21      	ldr	r3, [pc, #132]	; (41d590 <lv_cont_layout_col+0x114>)
  41d50c:	4798      	blx	r3
  41d50e:	2800      	cmp	r0, #0
  41d510:	d1f3      	bne.n	41d4fa <lv_cont_layout_col+0x7e>
  41d512:	2104      	movs	r1, #4
  41d514:	4620      	mov	r0, r4
  41d516:	4b1f      	ldr	r3, [pc, #124]	; (41d594 <lv_cont_layout_col+0x118>)
  41d518:	4798      	blx	r3
  41d51a:	2800      	cmp	r0, #0
  41d51c:	d1ed      	bne.n	41d4fa <lv_cont_layout_col+0x7e>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41d51e:	2215      	movs	r2, #21
  41d520:	2100      	movs	r1, #0
  41d522:	4620      	mov	r0, r4
  41d524:	f8df b054 	ldr.w	fp, [pc, #84]	; 41d57c <lv_cont_layout_col+0x100>
  41d528:	47d8      	blx	fp
  41d52a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41d52c:	2216      	movs	r2, #22
  41d52e:	2100      	movs	r1, #0
  41d530:	4620      	mov	r0, r4
  41d532:	47d8      	blx	fp
  41d534:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41d536:	2217      	movs	r2, #23
  41d538:	2100      	movs	r1, #0
  41d53a:	4620      	mov	r0, r4
  41d53c:	47d8      	blx	fp
        lv_obj_align(child, cont, align, hpad_corr + mleft, last_cord + mtop);
  41d53e:	eb0a 0300 	add.w	r3, sl, r0
  41d542:	b2ad      	uxth	r5, r5
  41d544:	19aa      	adds	r2, r5, r6
  41d546:	b212      	sxth	r2, r2
  41d548:	9200      	str	r2, [sp, #0]
  41d54a:	b21b      	sxth	r3, r3
  41d54c:	9a03      	ldr	r2, [sp, #12]
  41d54e:	4649      	mov	r1, r9
  41d550:	4620      	mov	r0, r4
  41d552:	f8df b04c 	ldr.w	fp, [pc, #76]	; 41d5a0 <lv_cont_layout_col+0x124>
  41d556:	47d8      	blx	fp
        last_cord += lv_obj_get_height(child) + inner + mtop + mbottom;
  41d558:	4620      	mov	r0, r4
  41d55a:	4b0f      	ldr	r3, [pc, #60]	; (41d598 <lv_cont_layout_col+0x11c>)
  41d55c:	4798      	blx	r3
  41d55e:	9b02      	ldr	r3, [sp, #8]
  41d560:	4418      	add	r0, r3
  41d562:	4406      	add	r6, r0
  41d564:	443e      	add	r6, r7
  41d566:	4435      	add	r5, r6
  41d568:	b22d      	sxth	r5, r5
  41d56a:	e7c6      	b.n	41d4fa <lv_cont_layout_col+0x7e>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41d56c:	2101      	movs	r1, #1
  41d56e:	4648      	mov	r0, r9
  41d570:	4b0a      	ldr	r3, [pc, #40]	; (41d59c <lv_cont_layout_col+0x120>)
  41d572:	4798      	blx	r3
}
  41d574:	b005      	add	sp, #20
  41d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41d57a:	bf00      	nop
  41d57c:	00406f8d 	.word	0x00406f8d
  41d580:	0041d449 	.word	0x0041d449
  41d584:	00405299 	.word	0x00405299
  41d588:	00415ad3 	.word	0x00415ad3
  41d58c:	00415aeb 	.word	0x00415aeb
  41d590:	00405911 	.word	0x00405911
  41d594:	004068f5 	.word	0x004068f5
  41d598:	004056f9 	.word	0x004056f9
  41d59c:	004052c9 	.word	0x004052c9
  41d5a0:	00405d49 	.word	0x00405d49

0041d5a4 <lv_cont_layout_row>:
{
  41d5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41d5a8:	b085      	sub	sp, #20
  41d5aa:	4607      	mov	r7, r0
    lv_layout_t type = lv_cont_get_layout(cont);
  41d5ac:	4b4d      	ldr	r3, [pc, #308]	; (41d6e4 <lv_cont_layout_row+0x140>)
  41d5ae:	4798      	blx	r3
  41d5b0:	4604      	mov	r4, r0
    lv_bidi_dir_t base_dir = lv_obj_get_base_dir(cont);
  41d5b2:	4638      	mov	r0, r7
  41d5b4:	4b4c      	ldr	r3, [pc, #304]	; (41d6e8 <lv_cont_layout_row+0x144>)
  41d5b6:	4798      	blx	r3
  41d5b8:	4680      	mov	r8, r0
    switch(type) {
  41d5ba:	2c06      	cmp	r4, #6
  41d5bc:	d031      	beq.n	41d622 <lv_cont_layout_row+0x7e>
  41d5be:	2c07      	cmp	r4, #7
  41d5c0:	d03b      	beq.n	41d63a <lv_cont_layout_row+0x96>
  41d5c2:	2c05      	cmp	r4, #5
  41d5c4:	d006      	beq.n	41d5d4 <lv_cont_layout_row+0x30>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41d5c6:	2801      	cmp	r0, #1
  41d5c8:	d04b      	beq.n	41d662 <lv_cont_layout_row+0xbe>
            vpad_corr = 0;
  41d5ca:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41d5ce:	2301      	movs	r3, #1
  41d5d0:	9303      	str	r3, [sp, #12]
  41d5d2:	e00a      	b.n	41d5ea <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d5d4:	2210      	movs	r2, #16
  41d5d6:	2100      	movs	r1, #0
  41d5d8:	4638      	mov	r0, r7
  41d5da:	4b44      	ldr	r3, [pc, #272]	; (41d6ec <lv_cont_layout_row+0x148>)
  41d5dc:	4798      	blx	r3
  41d5de:	4681      	mov	r9, r0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41d5e0:	f1b8 0f01 	cmp.w	r8, #1
  41d5e4:	d01a      	beq.n	41d61c <lv_cont_layout_row+0x78>
  41d5e6:	2301      	movs	r3, #1
  41d5e8:	9303      	str	r3, [sp, #12]
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41d5ea:	2101      	movs	r1, #1
  41d5ec:	4638      	mov	r0, r7
  41d5ee:	4b40      	ldr	r3, [pc, #256]	; (41d6f0 <lv_cont_layout_row+0x14c>)
  41d5f0:	4798      	blx	r3
    if(base_dir == LV_BIDI_DIR_RTL) last_cord = lv_obj_get_style_pad_right(cont, LV_CONT_PART_MAIN);
  41d5f2:	f1b8 0f01 	cmp.w	r8, #1
  41d5f6:	d039      	beq.n	41d66c <lv_cont_layout_row+0xc8>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d5f8:	2212      	movs	r2, #18
  41d5fa:	2100      	movs	r1, #0
  41d5fc:	4638      	mov	r0, r7
  41d5fe:	4b3b      	ldr	r3, [pc, #236]	; (41d6ec <lv_cont_layout_row+0x148>)
  41d600:	4798      	blx	r3
  41d602:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d604:	2214      	movs	r2, #20
  41d606:	2100      	movs	r1, #0
  41d608:	4638      	mov	r0, r7
  41d60a:	4b38      	ldr	r3, [pc, #224]	; (41d6ec <lv_cont_layout_row+0x148>)
  41d60c:	4798      	blx	r3
  41d60e:	4682      	mov	sl, r0
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41d610:	1d3d      	adds	r5, r7, #4
  41d612:	4628      	mov	r0, r5
  41d614:	4b37      	ldr	r3, [pc, #220]	; (41d6f4 <lv_cont_layout_row+0x150>)
  41d616:	4798      	blx	r3
  41d618:	4604      	mov	r4, r0
  41d61a:	e043      	b.n	41d6a4 <lv_cont_layout_row+0x100>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41d61c:	2303      	movs	r3, #3
  41d61e:	9303      	str	r3, [sp, #12]
  41d620:	e7e3      	b.n	41d5ea <lv_cont_layout_row+0x46>
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41d622:	2801      	cmp	r0, #1
  41d624:	d004      	beq.n	41d630 <lv_cont_layout_row+0x8c>
            vpad_corr = 0;
  41d626:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41d62a:	2307      	movs	r3, #7
  41d62c:	9303      	str	r3, [sp, #12]
  41d62e:	e7dc      	b.n	41d5ea <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  41d630:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_RIGHT_MID : LV_ALIGN_IN_LEFT_MID;
  41d634:	2308      	movs	r3, #8
  41d636:	9303      	str	r3, [sp, #12]
  41d638:	e7d7      	b.n	41d5ea <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41d63a:	2211      	movs	r2, #17
  41d63c:	2100      	movs	r1, #0
  41d63e:	4638      	mov	r0, r7
  41d640:	4b2a      	ldr	r3, [pc, #168]	; (41d6ec <lv_cont_layout_row+0x148>)
  41d642:	4798      	blx	r3
            vpad_corr = -lv_obj_get_style_pad_bottom(cont, LV_CONT_PART_MAIN);
  41d644:	fa1f f980 	uxth.w	r9, r0
  41d648:	f1c9 0900 	rsb	r9, r9, #0
  41d64c:	fa0f f989 	sxth.w	r9, r9
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_BOTTOM_RIGHT : LV_ALIGN_IN_BOTTOM_LEFT;
  41d650:	f1b8 0f01 	cmp.w	r8, #1
  41d654:	d002      	beq.n	41d65c <lv_cont_layout_row+0xb8>
  41d656:	2304      	movs	r3, #4
  41d658:	9303      	str	r3, [sp, #12]
  41d65a:	e7c6      	b.n	41d5ea <lv_cont_layout_row+0x46>
  41d65c:	2306      	movs	r3, #6
  41d65e:	9303      	str	r3, [sp, #12]
  41d660:	e7c3      	b.n	41d5ea <lv_cont_layout_row+0x46>
            vpad_corr = 0;
  41d662:	f04f 0900 	mov.w	r9, #0
            align     = base_dir == LV_BIDI_DIR_RTL ? LV_ALIGN_IN_TOP_RIGHT : LV_ALIGN_IN_TOP_LEFT;
  41d666:	2303      	movs	r3, #3
  41d668:	9303      	str	r3, [sp, #12]
  41d66a:	e7be      	b.n	41d5ea <lv_cont_layout_row+0x46>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d66c:	2213      	movs	r2, #19
  41d66e:	2100      	movs	r1, #0
  41d670:	4638      	mov	r0, r7
  41d672:	4b1e      	ldr	r3, [pc, #120]	; (41d6ec <lv_cont_layout_row+0x148>)
  41d674:	4798      	blx	r3
  41d676:	4606      	mov	r6, r0
  41d678:	e7c4      	b.n	41d604 <lv_cont_layout_row+0x60>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41d67a:	4273      	negs	r3, r6
  41d67c:	f8cd 9000 	str.w	r9, [sp]
  41d680:	b21b      	sxth	r3, r3
  41d682:	9a03      	ldr	r2, [sp, #12]
  41d684:	4639      	mov	r1, r7
  41d686:	4620      	mov	r0, r4
  41d688:	f8df b080 	ldr.w	fp, [pc, #128]	; 41d70c <lv_cont_layout_row+0x168>
  41d68c:	47d8      	blx	fp
        last_cord += lv_obj_get_width(child) + inner;
  41d68e:	4620      	mov	r0, r4
  41d690:	4b19      	ldr	r3, [pc, #100]	; (41d6f8 <lv_cont_layout_row+0x154>)
  41d692:	4798      	blx	r3
  41d694:	4450      	add	r0, sl
  41d696:	4406      	add	r6, r0
  41d698:	b236      	sxth	r6, r6
    _LV_LL_READ_BACK(cont->child_ll, child) {
  41d69a:	4621      	mov	r1, r4
  41d69c:	4628      	mov	r0, r5
  41d69e:	4b17      	ldr	r3, [pc, #92]	; (41d6fc <lv_cont_layout_row+0x158>)
  41d6a0:	4798      	blx	r3
  41d6a2:	4604      	mov	r4, r0
  41d6a4:	b1bc      	cbz	r4, 41d6d6 <lv_cont_layout_row+0x132>
        if(lv_obj_get_hidden(child) != false || lv_obj_is_protected(child, LV_PROTECT_POS) != false) continue;
  41d6a6:	4620      	mov	r0, r4
  41d6a8:	4b15      	ldr	r3, [pc, #84]	; (41d700 <lv_cont_layout_row+0x15c>)
  41d6aa:	4798      	blx	r3
  41d6ac:	2800      	cmp	r0, #0
  41d6ae:	d1f4      	bne.n	41d69a <lv_cont_layout_row+0xf6>
  41d6b0:	2104      	movs	r1, #4
  41d6b2:	4620      	mov	r0, r4
  41d6b4:	4b13      	ldr	r3, [pc, #76]	; (41d704 <lv_cont_layout_row+0x160>)
  41d6b6:	4798      	blx	r3
  41d6b8:	2800      	cmp	r0, #0
  41d6ba:	d1ee      	bne.n	41d69a <lv_cont_layout_row+0xf6>
        if(base_dir == LV_BIDI_DIR_RTL) lv_obj_align(child, cont, align, -last_cord, vpad_corr);
  41d6bc:	f1b8 0f01 	cmp.w	r8, #1
  41d6c0:	d0db      	beq.n	41d67a <lv_cont_layout_row+0xd6>
        else lv_obj_align(child, cont, align, last_cord, vpad_corr);
  41d6c2:	f8cd 9000 	str.w	r9, [sp]
  41d6c6:	4633      	mov	r3, r6
  41d6c8:	9a03      	ldr	r2, [sp, #12]
  41d6ca:	4639      	mov	r1, r7
  41d6cc:	4620      	mov	r0, r4
  41d6ce:	f8df b03c 	ldr.w	fp, [pc, #60]	; 41d70c <lv_cont_layout_row+0x168>
  41d6d2:	47d8      	blx	fp
  41d6d4:	e7db      	b.n	41d68e <lv_cont_layout_row+0xea>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41d6d6:	2101      	movs	r1, #1
  41d6d8:	4638      	mov	r0, r7
  41d6da:	4b0b      	ldr	r3, [pc, #44]	; (41d708 <lv_cont_layout_row+0x164>)
  41d6dc:	4798      	blx	r3
}
  41d6de:	b005      	add	sp, #20
  41d6e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41d6e4:	0041d449 	.word	0x0041d449
  41d6e8:	00406335 	.word	0x00406335
  41d6ec:	00406f8d 	.word	0x00406f8d
  41d6f0:	00405299 	.word	0x00405299
  41d6f4:	00415ad3 	.word	0x00415ad3
  41d6f8:	004056c9 	.word	0x004056c9
  41d6fc:	00415aeb 	.word	0x00415aeb
  41d700:	00405911 	.word	0x00405911
  41d704:	004068f5 	.word	0x004068f5
  41d708:	004052c9 	.word	0x004052c9
  41d70c:	00405d49 	.word	0x00405d49

0041d710 <lv_cont_layout_pretty>:
{
  41d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41d714:	b08d      	sub	sp, #52	; 0x34
  41d716:	4604      	mov	r4, r0
  41d718:	9006      	str	r0, [sp, #24]
    lv_layout_t type = lv_cont_get_layout(cont);
  41d71a:	4bac      	ldr	r3, [pc, #688]	; (41d9cc <lv_cont_layout_pretty+0x2bc>)
  41d71c:	4798      	blx	r3
  41d71e:	900b      	str	r0, [sp, #44]	; 0x2c
    lv_coord_t w_obj         = lv_obj_get_width(cont);
  41d720:	4620      	mov	r0, r4
  41d722:	4bab      	ldr	r3, [pc, #684]	; (41d9d0 <lv_cont_layout_pretty+0x2c0>)
  41d724:	4798      	blx	r3
  41d726:	9003      	str	r0, [sp, #12]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41d728:	2210      	movs	r2, #16
  41d72a:	2100      	movs	r1, #0
  41d72c:	4620      	mov	r0, r4
  41d72e:	4ba9      	ldr	r3, [pc, #676]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d730:	4798      	blx	r3
  41d732:	9004      	str	r0, [sp, #16]
    child_rs = _lv_ll_get_tail(&cont->child_ll); /*Set the row starter child*/
  41d734:	4623      	mov	r3, r4
  41d736:	3304      	adds	r3, #4
  41d738:	9302      	str	r3, [sp, #8]
  41d73a:	4618      	mov	r0, r3
  41d73c:	4ba6      	ldr	r3, [pc, #664]	; (41d9d8 <lv_cont_layout_pretty+0x2c8>)
  41d73e:	4798      	blx	r3
    if(child_rs == NULL) return;                /*Return if no child*/
  41d740:	2800      	cmp	r0, #0
  41d742:	f000 8184 	beq.w	41da4e <lv_cont_layout_pretty+0x33e>
  41d746:	4625      	mov	r5, r4
  41d748:	4682      	mov	sl, r0
    lv_obj_add_protect(cont, LV_PROTECT_CHILD_CHG);
  41d74a:	2101      	movs	r1, #1
  41d74c:	4620      	mov	r0, r4
  41d74e:	4ba3      	ldr	r3, [pc, #652]	; (41d9dc <lv_cont_layout_pretty+0x2cc>)
  41d750:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41d752:	2212      	movs	r2, #18
  41d754:	2100      	movs	r1, #0
  41d756:	4620      	mov	r0, r4
  41d758:	4c9e      	ldr	r4, [pc, #632]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d75a:	47a0      	blx	r4
  41d75c:	9005      	str	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41d75e:	2213      	movs	r2, #19
  41d760:	2100      	movs	r1, #0
  41d762:	4628      	mov	r0, r5
  41d764:	47a0      	blx	r4
  41d766:	9007      	str	r0, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
  41d768:	2214      	movs	r2, #20
  41d76a:	2100      	movs	r1, #0
  41d76c:	4628      	mov	r0, r5
  41d76e:	47a0      	blx	r4
  41d770:	4683      	mov	fp, r0
    while(child_rs != NULL) {
  41d772:	e08a      	b.n	41d88a <lv_cont_layout_pretty+0x17a>
  41d774:	464d      	mov	r5, r9
                    if(child_rc != NULL && obj_num != 0) {
  41d776:	2c00      	cmp	r4, #0
  41d778:	bf18      	it	ne
  41d77a:	2f00      	cmpne	r7, #0
  41d77c:	d056      	beq.n	41d82c <lv_cont_layout_pretty+0x11c>
                        child_rc = _lv_ll_get_next(&cont->child_ll, child_rc);
  41d77e:	4621      	mov	r1, r4
  41d780:	9802      	ldr	r0, [sp, #8]
  41d782:	4b97      	ldr	r3, [pc, #604]	; (41d9e0 <lv_cont_layout_pretty+0x2d0>)
  41d784:	4798      	blx	r3
  41d786:	4604      	mov	r4, r0
  41d788:	e050      	b.n	41d82c <lv_cont_layout_pretty+0x11c>
            child_rc = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Load the next object*/
  41d78a:	4621      	mov	r1, r4
  41d78c:	9802      	ldr	r0, [sp, #8]
  41d78e:	4b95      	ldr	r3, [pc, #596]	; (41d9e4 <lv_cont_layout_pretty+0x2d4>)
  41d790:	4798      	blx	r3
  41d792:	4604      	mov	r4, r0
            if(obj_num == 0)
  41d794:	b907      	cbnz	r7, 41d798 <lv_cont_layout_pretty+0x88>
                child_rs = child_rc; /*If the first object was hidden (or too long) then set the
  41d796:	4682      	mov	sl, r0
        } while(child_rc != NULL);
  41d798:	2c00      	cmp	r4, #0
  41d79a:	d046      	beq.n	41d82a <lv_cont_layout_pretty+0x11a>
            if(lv_obj_get_hidden(child_rc) == false && lv_obj_is_protected(child_rc, LV_PROTECT_POS) == false) {
  41d79c:	4620      	mov	r0, r4
  41d79e:	4b92      	ldr	r3, [pc, #584]	; (41d9e8 <lv_cont_layout_pretty+0x2d8>)
  41d7a0:	4798      	blx	r3
  41d7a2:	2800      	cmp	r0, #0
  41d7a4:	d1f1      	bne.n	41d78a <lv_cont_layout_pretty+0x7a>
  41d7a6:	2104      	movs	r1, #4
  41d7a8:	4620      	mov	r0, r4
  41d7aa:	4b90      	ldr	r3, [pc, #576]	; (41d9ec <lv_cont_layout_pretty+0x2dc>)
  41d7ac:	4798      	blx	r3
  41d7ae:	2800      	cmp	r0, #0
  41d7b0:	d1eb      	bne.n	41d78a <lv_cont_layout_pretty+0x7a>
                lv_coord_t w = lv_obj_get_width(child_rc);
  41d7b2:	4620      	mov	r0, r4
  41d7b4:	4b86      	ldr	r3, [pc, #536]	; (41d9d0 <lv_cont_layout_pretty+0x2c0>)
  41d7b6:	4798      	blx	r3
  41d7b8:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41d7ba:	2217      	movs	r2, #23
  41d7bc:	2100      	movs	r1, #0
  41d7be:	4620      	mov	r0, r4
  41d7c0:	4d84      	ldr	r5, [pc, #528]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d7c2:	47a8      	blx	r5
                w += lv_obj_get_style_margin_left(child_rc, LV_OBJ_PART_MAIN);
  41d7c4:	fa16 f680 	uxtah	r6, r6, r0
  41d7c8:	b2b6      	uxth	r6, r6
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41d7ca:	2218      	movs	r2, #24
  41d7cc:	2100      	movs	r1, #0
  41d7ce:	4620      	mov	r0, r4
  41d7d0:	47a8      	blx	r5
                w += lv_obj_get_style_margin_right(child_rc, LV_OBJ_PART_MAIN);
  41d7d2:	fa16 f080 	uxtah	r0, r6, r0
  41d7d6:	b280      	uxth	r0, r0
                if(w_row + w > w_obj) {
  41d7d8:	fa09 f380 	sxtah	r3, r9, r0
  41d7dc:	9a03      	ldr	r2, [sp, #12]
  41d7de:	4293      	cmp	r3, r2
  41d7e0:	dcc8      	bgt.n	41d774 <lv_cont_layout_pretty+0x64>
                w_row += w + pinner; /*Add the object width + inner padding*/
  41d7e2:	4458      	add	r0, fp
  41d7e4:	fa19 f980 	uxtah	r9, r9, r0
  41d7e8:	fa0f f989 	sxth.w	r9, r9
                lv_coord_t h = lv_obj_get_height(child_rc);
  41d7ec:	4620      	mov	r0, r4
  41d7ee:	4b80      	ldr	r3, [pc, #512]	; (41d9f0 <lv_cont_layout_pretty+0x2e0>)
  41d7f0:	4798      	blx	r3
  41d7f2:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41d7f4:	2215      	movs	r2, #21
  41d7f6:	2100      	movs	r1, #0
  41d7f8:	4620      	mov	r0, r4
  41d7fa:	4e76      	ldr	r6, [pc, #472]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d7fc:	47b0      	blx	r6
                h += lv_obj_get_style_margin_top(child_rc, LV_OBJ_PART_MAIN);
  41d7fe:	fa15 f580 	uxtah	r5, r5, r0
  41d802:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41d804:	2216      	movs	r2, #22
  41d806:	2100      	movs	r1, #0
  41d808:	4620      	mov	r0, r4
  41d80a:	47b0      	blx	r6
                h += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41d80c:	fa15 f080 	uxtah	r0, r5, r0
  41d810:	b200      	sxth	r0, r0
                h_row = LV_MATH_MAX(h_row, h);         /*Search the highest object*/
  41d812:	4580      	cmp	r8, r0
  41d814:	bfb8      	it	lt
  41d816:	4680      	movlt	r8, r0
                obj_num++;
  41d818:	3701      	adds	r7, #1
                if(lv_obj_is_protected(child_rc, LV_PROTECT_FOLLOW))
  41d81a:	2108      	movs	r1, #8
  41d81c:	4620      	mov	r0, r4
  41d81e:	4b73      	ldr	r3, [pc, #460]	; (41d9ec <lv_cont_layout_pretty+0x2dc>)
  41d820:	4798      	blx	r3
  41d822:	2800      	cmp	r0, #0
  41d824:	d0b1      	beq.n	41d78a <lv_cont_layout_pretty+0x7a>
  41d826:	464d      	mov	r5, r9
  41d828:	e000      	b.n	41d82c <lv_cont_layout_pretty+0x11c>
  41d82a:	464d      	mov	r5, r9
        if(obj_num == 0) {
  41d82c:	2f00      	cmp	r7, #0
  41d82e:	d139      	bne.n	41d8a4 <lv_cont_layout_pretty+0x194>
            if(child_rc != NULL) {
  41d830:	b1e4      	cbz	r4, 41d86c <lv_cont_layout_pretty+0x15c>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41d832:	2215      	movs	r2, #21
  41d834:	2100      	movs	r1, #0
  41d836:	4620      	mov	r0, r4
  41d838:	4e66      	ldr	r6, [pc, #408]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d83a:	47b0      	blx	r6
                lv_obj_align(child_rc, cont, LV_ALIGN_IN_TOP_MID, 0, act_y + mtop);
  41d83c:	b285      	uxth	r5, r0
  41d83e:	9b04      	ldr	r3, [sp, #16]
  41d840:	18eb      	adds	r3, r5, r3
  41d842:	b21b      	sxth	r3, r3
  41d844:	9300      	str	r3, [sp, #0]
  41d846:	2300      	movs	r3, #0
  41d848:	2202      	movs	r2, #2
  41d84a:	9906      	ldr	r1, [sp, #24]
  41d84c:	4620      	mov	r0, r4
  41d84e:	4f69      	ldr	r7, [pc, #420]	; (41d9f4 <lv_cont_layout_pretty+0x2e4>)
  41d850:	47b8      	blx	r7
                h_row = lv_obj_get_height(child_rc); /*Not set previously because of the early break*/
  41d852:	4620      	mov	r0, r4
  41d854:	4b66      	ldr	r3, [pc, #408]	; (41d9f0 <lv_cont_layout_pretty+0x2e0>)
  41d856:	4798      	blx	r3
                h_row += mtop;
  41d858:	4405      	add	r5, r0
  41d85a:	b2ad      	uxth	r5, r5
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41d85c:	2216      	movs	r2, #22
  41d85e:	2100      	movs	r1, #0
  41d860:	4620      	mov	r0, r4
  41d862:	47b0      	blx	r6
                h_row += lv_obj_get_style_margin_bottom(child_rc, LV_OBJ_PART_MAIN);
  41d864:	fa15 f080 	uxtah	r0, r5, r0
  41d868:	fa0f f880 	sxth.w	r8, r0
        if(child_rc == NULL) break;
  41d86c:	2c00      	cmp	r4, #0
  41d86e:	f000 80ea 	beq.w	41da46 <lv_cont_layout_pretty+0x336>
        act_y += pinner + h_row;           /*y increment*/
  41d872:	44d8      	add	r8, fp
  41d874:	9b04      	ldr	r3, [sp, #16]
  41d876:	fa13 f888 	uxtah	r8, r3, r8
  41d87a:	fa0f f388 	sxth.w	r3, r8
  41d87e:	9304      	str	r3, [sp, #16]
        child_rs = _lv_ll_get_prev(&cont->child_ll, child_rc); /*Go to the next object*/
  41d880:	4621      	mov	r1, r4
  41d882:	9802      	ldr	r0, [sp, #8]
  41d884:	4b57      	ldr	r3, [pc, #348]	; (41d9e4 <lv_cont_layout_pretty+0x2d4>)
  41d886:	4798      	blx	r3
  41d888:	4682      	mov	sl, r0
    while(child_rs != NULL) {
  41d88a:	f1ba 0f00 	cmp.w	sl, #0
  41d88e:	f000 80da 	beq.w	41da46 <lv_cont_layout_pretty+0x336>
        lv_coord_t w_row = pleft + pright; /*The width is at least the left+right pad*/
  41d892:	9b05      	ldr	r3, [sp, #20]
  41d894:	9a07      	ldr	r2, [sp, #28]
  41d896:	189d      	adds	r5, r3, r2
  41d898:	b22d      	sxth	r5, r5
  41d89a:	4654      	mov	r4, sl
        uint32_t obj_num = 0;
  41d89c:	2700      	movs	r7, #0
        lv_coord_t h_row = 0;
  41d89e:	46b8      	mov	r8, r7
  41d8a0:	46a9      	mov	r9, r5
  41d8a2:	e77b      	b.n	41d79c <lv_cont_layout_pretty+0x8c>
        else if(obj_num == 1) {
  41d8a4:	2f01      	cmp	r7, #1
  41d8a6:	d015      	beq.n	41d8d4 <lv_cont_layout_pretty+0x1c4>
            w_row -= pinner * obj_num;
  41d8a8:	fb1b f307 	smulbb	r3, fp, r7
  41d8ac:	1aeb      	subs	r3, r5, r3
  41d8ae:	b21b      	sxth	r3, r3
            lv_coord_t new_pinner = (w_obj - w_row) / (obj_num - 1);
  41d8b0:	9a03      	ldr	r2, [sp, #12]
  41d8b2:	1ad3      	subs	r3, r2, r3
  41d8b4:	3f01      	subs	r7, #1
  41d8b6:	fbb3 f7f7 	udiv	r7, r3, r7
  41d8ba:	b23d      	sxth	r5, r7
            if(lv_obj_get_base_dir(cont) == LV_BIDI_DIR_RTL) {
  41d8bc:	9806      	ldr	r0, [sp, #24]
  41d8be:	4b4e      	ldr	r3, [pc, #312]	; (41d9f8 <lv_cont_layout_pretty+0x2e8>)
  41d8c0:	4798      	blx	r3
  41d8c2:	2801      	cmp	r0, #1
  41d8c4:	d017      	beq.n	41d8f6 <lv_cont_layout_pretty+0x1e6>
                inv = 1;
  41d8c6:	2301      	movs	r3, #1
  41d8c8:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_LEFT;
  41d8ca:	9309      	str	r3, [sp, #36]	; 0x24
                align = LV_ALIGN_IN_TOP_RIGHT;
  41d8cc:	f8dd 9014 	ldr.w	r9, [sp, #20]
  41d8d0:	4656      	mov	r6, sl
  41d8d2:	e03e      	b.n	41d952 <lv_cont_layout_pretty+0x242>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
  41d8d4:	2215      	movs	r2, #21
  41d8d6:	2100      	movs	r1, #0
  41d8d8:	4650      	mov	r0, sl
  41d8da:	4b3e      	ldr	r3, [pc, #248]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d8dc:	4798      	blx	r3
                         act_y + lv_obj_get_style_margin_top(child_rs, LV_OBJ_PART_MAIN));
  41d8de:	9b04      	ldr	r3, [sp, #16]
  41d8e0:	fa13 f380 	uxtah	r3, r3, r0
            lv_obj_align(child_rs, cont, LV_ALIGN_IN_TOP_MID,
  41d8e4:	b21b      	sxth	r3, r3
  41d8e6:	9300      	str	r3, [sp, #0]
  41d8e8:	2300      	movs	r3, #0
  41d8ea:	2202      	movs	r2, #2
  41d8ec:	9906      	ldr	r1, [sp, #24]
  41d8ee:	4650      	mov	r0, sl
  41d8f0:	4d40      	ldr	r5, [pc, #256]	; (41d9f4 <lv_cont_layout_pretty+0x2e4>)
  41d8f2:	47a8      	blx	r5
  41d8f4:	e7ba      	b.n	41d86c <lv_cont_layout_pretty+0x15c>
                inv = -1;
  41d8f6:	f04f 33ff 	mov.w	r3, #4294967295
  41d8fa:	930a      	str	r3, [sp, #40]	; 0x28
                align = LV_ALIGN_IN_TOP_RIGHT;
  41d8fc:	2303      	movs	r3, #3
  41d8fe:	9309      	str	r3, [sp, #36]	; 0x24
  41d900:	e7e4      	b.n	41d8cc <lv_cont_layout_pretty+0x1bc>
                                         inv * (act_x + mleft),
  41d902:	eb09 0a07 	add.w	sl, r9, r7
  41d906:	2215      	movs	r2, #21
  41d908:	2100      	movs	r1, #0
  41d90a:	4630      	mov	r0, r6
  41d90c:	4b31      	ldr	r3, [pc, #196]	; (41d9d4 <lv_cont_layout_pretty+0x2c4>)
  41d90e:	4798      	blx	r3
                                         act_y + lv_obj_get_style_margin_top(child_tmp, LV_OBJ_PART_MAIN));
  41d910:	9b04      	ldr	r3, [sp, #16]
  41d912:	fa13 f280 	uxtah	r2, r3, r0
                            lv_obj_align(child_tmp, cont, align,
  41d916:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  41d91a:	fb1a f303 	smulbb	r3, sl, r3
  41d91e:	b212      	sxth	r2, r2
  41d920:	9200      	str	r2, [sp, #0]
  41d922:	b21b      	sxth	r3, r3
  41d924:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41d926:	9906      	ldr	r1, [sp, #24]
  41d928:	4630      	mov	r0, r6
  41d92a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 41d9f4 <lv_cont_layout_pretty+0x2e4>
  41d92e:	47d0      	blx	sl
                    act_x += lv_obj_get_width(child_tmp) + new_pinner + mleft + mright;
  41d930:	4630      	mov	r0, r6
  41d932:	4b27      	ldr	r3, [pc, #156]	; (41d9d0 <lv_cont_layout_pretty+0x2c0>)
  41d934:	4798      	blx	r3
  41d936:	182b      	adds	r3, r5, r0
  41d938:	443b      	add	r3, r7
  41d93a:	9a08      	ldr	r2, [sp, #32]
  41d93c:	441a      	add	r2, r3
  41d93e:	4491      	add	r9, r2
  41d940:	fa0f f989 	sxth.w	r9, r9
                if(child_tmp == child_rc) break;
  41d944:	42b4      	cmp	r4, r6
  41d946:	d091      	beq.n	41d86c <lv_cont_layout_pretty+0x15c>
                child_tmp = _lv_ll_get_prev(&cont->child_ll, child_tmp);
  41d948:	4631      	mov	r1, r6
  41d94a:	9802      	ldr	r0, [sp, #8]
  41d94c:	4b25      	ldr	r3, [pc, #148]	; (41d9e4 <lv_cont_layout_pretty+0x2d4>)
  41d94e:	4798      	blx	r3
  41d950:	4606      	mov	r6, r0
            while(child_tmp != NULL) {
  41d952:	2e00      	cmp	r6, #0
  41d954:	d08a      	beq.n	41d86c <lv_cont_layout_pretty+0x15c>
                if(lv_obj_get_hidden(child_tmp) == false && lv_obj_is_protected(child_tmp, LV_PROTECT_POS) == false) {
  41d956:	4630      	mov	r0, r6
  41d958:	4b23      	ldr	r3, [pc, #140]	; (41d9e8 <lv_cont_layout_pretty+0x2d8>)
  41d95a:	4798      	blx	r3
  41d95c:	2800      	cmp	r0, #0
  41d95e:	d1f1      	bne.n	41d944 <lv_cont_layout_pretty+0x234>
  41d960:	2104      	movs	r1, #4
  41d962:	4630      	mov	r0, r6
  41d964:	4b21      	ldr	r3, [pc, #132]	; (41d9ec <lv_cont_layout_pretty+0x2dc>)
  41d966:	4798      	blx	r3
  41d968:	2800      	cmp	r0, #0
  41d96a:	d1eb      	bne.n	41d944 <lv_cont_layout_pretty+0x234>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
  41d96c:	2217      	movs	r2, #23
  41d96e:	2100      	movs	r1, #0
  41d970:	4630      	mov	r0, r6
  41d972:	f8df a060 	ldr.w	sl, [pc, #96]	; 41d9d4 <lv_cont_layout_pretty+0x2c4>
  41d976:	47d0      	blx	sl
  41d978:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
  41d97a:	2218      	movs	r2, #24
  41d97c:	2100      	movs	r1, #0
  41d97e:	4630      	mov	r0, r6
  41d980:	47d0      	blx	sl
  41d982:	9008      	str	r0, [sp, #32]
                    switch(type) {
  41d984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  41d986:	2b09      	cmp	r3, #9
  41d988:	d004      	beq.n	41d994 <lv_cont_layout_pretty+0x284>
  41d98a:	2b0a      	cmp	r3, #10
  41d98c:	d036      	beq.n	41d9fc <lv_cont_layout_pretty+0x2ec>
  41d98e:	2b08      	cmp	r3, #8
  41d990:	d1ce      	bne.n	41d930 <lv_cont_layout_pretty+0x220>
  41d992:	e7b6      	b.n	41d902 <lv_cont_layout_pretty+0x1f2>
                                         inv * (act_x + mleft),
  41d994:	eb09 0a07 	add.w	sl, r9, r7
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41d998:	4630      	mov	r0, r6
  41d99a:	4b15      	ldr	r3, [pc, #84]	; (41d9f0 <lv_cont_layout_pretty+0x2e0>)
  41d99c:	4798      	blx	r3
  41d99e:	ebb8 0000 	subs.w	r0, r8, r0
  41d9a2:	d410      	bmi.n	41d9c6 <lv_cont_layout_pretty+0x2b6>
  41d9a4:	9b04      	ldr	r3, [sp, #16]
  41d9a6:	eb03 0260 	add.w	r2, r3, r0, asr #1
                            lv_obj_align(child_tmp, cont, align,
  41d9aa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
  41d9ae:	fb1a f303 	smulbb	r3, sl, r3
  41d9b2:	b212      	sxth	r2, r2
  41d9b4:	9200      	str	r2, [sp, #0]
  41d9b6:	b21b      	sxth	r3, r3
  41d9b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41d9ba:	9906      	ldr	r1, [sp, #24]
  41d9bc:	4630      	mov	r0, r6
  41d9be:	f8df a034 	ldr.w	sl, [pc, #52]	; 41d9f4 <lv_cont_layout_pretty+0x2e4>
  41d9c2:	47d0      	blx	sl
                            break;
  41d9c4:	e7b4      	b.n	41d930 <lv_cont_layout_pretty+0x220>
                                         act_y + (h_row - lv_obj_get_height(child_tmp)) / 2);
  41d9c6:	3001      	adds	r0, #1
  41d9c8:	e7ec      	b.n	41d9a4 <lv_cont_layout_pretty+0x294>
  41d9ca:	bf00      	nop
  41d9cc:	0041d449 	.word	0x0041d449
  41d9d0:	004056c9 	.word	0x004056c9
  41d9d4:	00406f8d 	.word	0x00406f8d
  41d9d8:	00415ad3 	.word	0x00415ad3
  41d9dc:	00405299 	.word	0x00405299
  41d9e0:	00415add 	.word	0x00415add
  41d9e4:	00415aeb 	.word	0x00415aeb
  41d9e8:	00405911 	.word	0x00405911
  41d9ec:	004068f5 	.word	0x004068f5
  41d9f0:	004056f9 	.word	0x004056f9
  41d9f4:	00405d49 	.word	0x00405d49
  41d9f8:	00406335 	.word	0x00406335
                                         act_y + h_row - lv_obj_get_height(child_tmp) - lv_obj_get_style_margin_bottom(child_tmp, LV_OBJ_PART_MAIN));
  41d9fc:	9b04      	ldr	r3, [sp, #16]
  41d9fe:	eb03 0a08 	add.w	sl, r3, r8
  41da02:	fa1f fa8a 	uxth.w	sl, sl
  41da06:	4630      	mov	r0, r6
  41da08:	4b12      	ldr	r3, [pc, #72]	; (41da54 <lv_cont_layout_pretty+0x344>)
  41da0a:	4798      	blx	r3
  41da0c:	b280      	uxth	r0, r0
  41da0e:	ebaa 0a00 	sub.w	sl, sl, r0
  41da12:	fa1f fa8a 	uxth.w	sl, sl
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
  41da16:	2216      	movs	r2, #22
  41da18:	2100      	movs	r1, #0
  41da1a:	4630      	mov	r0, r6
  41da1c:	4b0e      	ldr	r3, [pc, #56]	; (41da58 <lv_cont_layout_pretty+0x348>)
  41da1e:	4798      	blx	r3
  41da20:	b282      	uxth	r2, r0
  41da22:	ebaa 0202 	sub.w	r2, sl, r2
                            lv_obj_align(child_tmp, cont, align,
  41da26:	eb09 0307 	add.w	r3, r9, r7
  41da2a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  41da2e:	fb13 f301 	smulbb	r3, r3, r1
  41da32:	b212      	sxth	r2, r2
  41da34:	9200      	str	r2, [sp, #0]
  41da36:	b21b      	sxth	r3, r3
  41da38:	9a09      	ldr	r2, [sp, #36]	; 0x24
  41da3a:	9906      	ldr	r1, [sp, #24]
  41da3c:	4630      	mov	r0, r6
  41da3e:	f8df a020 	ldr.w	sl, [pc, #32]	; 41da60 <lv_cont_layout_pretty+0x350>
  41da42:	47d0      	blx	sl
                            break;
  41da44:	e774      	b.n	41d930 <lv_cont_layout_pretty+0x220>
    lv_obj_clear_protect(cont, LV_PROTECT_CHILD_CHG);
  41da46:	2101      	movs	r1, #1
  41da48:	9806      	ldr	r0, [sp, #24]
  41da4a:	4b04      	ldr	r3, [pc, #16]	; (41da5c <lv_cont_layout_pretty+0x34c>)
  41da4c:	4798      	blx	r3
}
  41da4e:	b00d      	add	sp, #52	; 0x34
  41da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41da54:	004056f9 	.word	0x004056f9
  41da58:	00406f8d 	.word	0x00406f8d
  41da5c:	004052c9 	.word	0x004052c9
  41da60:	00405d49 	.word	0x00405d49

0041da64 <lv_cont_refr_layout>:
{
  41da64:	b538      	push	{r3, r4, r5, lr}
  41da66:	4604      	mov	r4, r0
    if(lv_obj_is_protected(cont, LV_PROTECT_CHILD_CHG)) return;
  41da68:	2101      	movs	r1, #1
  41da6a:	4b1a      	ldr	r3, [pc, #104]	; (41dad4 <lv_cont_refr_layout+0x70>)
  41da6c:	4798      	blx	r3
  41da6e:	b100      	cbz	r0, 41da72 <lv_cont_refr_layout+0xe>
  41da70:	bd38      	pop	{r3, r4, r5, pc}
    lv_layout_t type = lv_cont_get_layout(cont);
  41da72:	4620      	mov	r0, r4
  41da74:	4b18      	ldr	r3, [pc, #96]	; (41dad8 <lv_cont_refr_layout+0x74>)
  41da76:	4798      	blx	r3
  41da78:	4605      	mov	r5, r0
    if(lv_obj_get_child(cont, NULL) == NULL) return;
  41da7a:	2100      	movs	r1, #0
  41da7c:	4620      	mov	r0, r4
  41da7e:	4b17      	ldr	r3, [pc, #92]	; (41dadc <lv_cont_refr_layout+0x78>)
  41da80:	4798      	blx	r3
  41da82:	2800      	cmp	r0, #0
  41da84:	d0f4      	beq.n	41da70 <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_OFF) return;
  41da86:	2d00      	cmp	r5, #0
  41da88:	d0f2      	beq.n	41da70 <lv_cont_refr_layout+0xc>
    if(type == LV_LAYOUT_CENTER) {
  41da8a:	2d01      	cmp	r5, #1
  41da8c:	d012      	beq.n	41dab4 <lv_cont_refr_layout+0x50>
    else if(type == LV_LAYOUT_COLUMN_LEFT || type == LV_LAYOUT_COLUMN_MID || type == LV_LAYOUT_COLUMN_RIGHT) {
  41da8e:	1eab      	subs	r3, r5, #2
  41da90:	b2db      	uxtb	r3, r3
  41da92:	2b02      	cmp	r3, #2
  41da94:	d912      	bls.n	41dabc <lv_cont_refr_layout+0x58>
    else if(type == LV_LAYOUT_ROW_TOP || type == LV_LAYOUT_ROW_MID || type == LV_LAYOUT_ROW_BOTTOM) {
  41da96:	1f6b      	subs	r3, r5, #5
  41da98:	b2db      	uxtb	r3, r3
  41da9a:	2b02      	cmp	r3, #2
  41da9c:	d912      	bls.n	41dac4 <lv_cont_refr_layout+0x60>
    else if(type == LV_LAYOUT_PRETTY_MID || type == LV_LAYOUT_PRETTY_TOP || type == LV_LAYOUT_PRETTY_BOTTOM) {
  41da9e:	f1a5 0308 	sub.w	r3, r5, #8
  41daa2:	b2db      	uxtb	r3, r3
  41daa4:	2b02      	cmp	r3, #2
  41daa6:	d911      	bls.n	41dacc <lv_cont_refr_layout+0x68>
    else if(type == LV_LAYOUT_GRID) {
  41daa8:	2d0b      	cmp	r5, #11
  41daaa:	d1e1      	bne.n	41da70 <lv_cont_refr_layout+0xc>
        lv_cont_layout_grid(cont);
  41daac:	4620      	mov	r0, r4
  41daae:	4b0c      	ldr	r3, [pc, #48]	; (41dae0 <lv_cont_refr_layout+0x7c>)
  41dab0:	4798      	blx	r3
  41dab2:	e7dd      	b.n	41da70 <lv_cont_refr_layout+0xc>
        lv_cont_layout_center(cont);
  41dab4:	4620      	mov	r0, r4
  41dab6:	4b0b      	ldr	r3, [pc, #44]	; (41dae4 <lv_cont_refr_layout+0x80>)
  41dab8:	4798      	blx	r3
  41daba:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_col(cont);
  41dabc:	4620      	mov	r0, r4
  41dabe:	4b0a      	ldr	r3, [pc, #40]	; (41dae8 <lv_cont_refr_layout+0x84>)
  41dac0:	4798      	blx	r3
  41dac2:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_row(cont);
  41dac4:	4620      	mov	r0, r4
  41dac6:	4b09      	ldr	r3, [pc, #36]	; (41daec <lv_cont_refr_layout+0x88>)
  41dac8:	4798      	blx	r3
  41daca:	bd38      	pop	{r3, r4, r5, pc}
        lv_cont_layout_pretty(cont);
  41dacc:	4620      	mov	r0, r4
  41dace:	4b08      	ldr	r3, [pc, #32]	; (41daf0 <lv_cont_refr_layout+0x8c>)
  41dad0:	4798      	blx	r3
  41dad2:	bd38      	pop	{r3, r4, r5, pc}
  41dad4:	004068f5 	.word	0x004068f5
  41dad8:	0041d449 	.word	0x0041d449
  41dadc:	004055c9 	.word	0x004055c9
  41dae0:	0041cdd9 	.word	0x0041cdd9
  41dae4:	0041ccad 	.word	0x0041ccad
  41dae8:	0041d47d 	.word	0x0041d47d
  41daec:	0041d5a5 	.word	0x0041d5a5
  41daf0:	0041d711 	.word	0x0041d711

0041daf4 <lv_cont_signal>:
{
  41daf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41daf6:	4607      	mov	r7, r0
  41daf8:	460c      	mov	r4, r1
  41dafa:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41dafc:	2908      	cmp	r1, #8
  41dafe:	d013      	beq.n	41db28 <lv_cont_signal+0x34>
    res = ancestor_signal(cont, sign, param);
  41db00:	4b2a      	ldr	r3, [pc, #168]	; (41dbac <lv_cont_signal+0xb8>)
  41db02:	681b      	ldr	r3, [r3, #0]
  41db04:	4798      	blx	r3
  41db06:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41db08:	2801      	cmp	r0, #1
  41db0a:	d113      	bne.n	41db34 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41db0c:	2c07      	cmp	r4, #7
  41db0e:	d01b      	beq.n	41db48 <lv_cont_signal+0x54>
    if(sign == LV_SIGNAL_STYLE_CHG) { /*Recalculate the padding if the style changed*/
  41db10:	2c04      	cmp	r4, #4
  41db12:	d01f      	beq.n	41db54 <lv_cont_signal+0x60>
    else if(sign == LV_SIGNAL_CHILD_CHG) {
  41db14:	2c01      	cmp	r4, #1
  41db16:	d024      	beq.n	41db62 <lv_cont_signal+0x6e>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41db18:	2c02      	cmp	r4, #2
  41db1a:	d029      	beq.n	41db70 <lv_cont_signal+0x7c>
    else if(sign == LV_SIGNAL_PARENT_SIZE_CHG) {
  41db1c:	2c03      	cmp	r4, #3
  41db1e:	d109      	bne.n	41db34 <lv_cont_signal+0x40>
        lv_cont_refr_autofit(cont);
  41db20:	4638      	mov	r0, r7
  41db22:	4b23      	ldr	r3, [pc, #140]	; (41dbb0 <lv_cont_signal+0xbc>)
  41db24:	4798      	blx	r3
  41db26:	e005      	b.n	41db34 <lv_cont_signal+0x40>
        info->result = lv_cont_get_style(cont, info->part);
  41db28:	7811      	ldrb	r1, [r2, #0]
  41db2a:	4b22      	ldr	r3, [pc, #136]	; (41dbb4 <lv_cont_signal+0xc0>)
  41db2c:	4798      	blx	r3
  41db2e:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41db30:	b110      	cbz	r0, 41db38 <lv_cont_signal+0x44>
  41db32:	2601      	movs	r6, #1
}
  41db34:	4630      	mov	r0, r6
  41db36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        else return ancestor_signal(cont, sign, param);
  41db38:	4b1c      	ldr	r3, [pc, #112]	; (41dbac <lv_cont_signal+0xb8>)
  41db3a:	681b      	ldr	r3, [r3, #0]
  41db3c:	462a      	mov	r2, r5
  41db3e:	4621      	mov	r1, r4
  41db40:	4638      	mov	r0, r7
  41db42:	4798      	blx	r3
  41db44:	4606      	mov	r6, r0
  41db46:	e7f5      	b.n	41db34 <lv_cont_signal+0x40>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41db48:	491b      	ldr	r1, [pc, #108]	; (41dbb8 <lv_cont_signal+0xc4>)
  41db4a:	4628      	mov	r0, r5
  41db4c:	4b1b      	ldr	r3, [pc, #108]	; (41dbbc <lv_cont_signal+0xc8>)
  41db4e:	4798      	blx	r3
  41db50:	4606      	mov	r6, r0
  41db52:	e7ef      	b.n	41db34 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  41db54:	4638      	mov	r0, r7
  41db56:	4b1a      	ldr	r3, [pc, #104]	; (41dbc0 <lv_cont_signal+0xcc>)
  41db58:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41db5a:	4638      	mov	r0, r7
  41db5c:	4b14      	ldr	r3, [pc, #80]	; (41dbb0 <lv_cont_signal+0xbc>)
  41db5e:	4798      	blx	r3
  41db60:	e7e8      	b.n	41db34 <lv_cont_signal+0x40>
        lv_cont_refr_layout(cont);
  41db62:	4638      	mov	r0, r7
  41db64:	4b16      	ldr	r3, [pc, #88]	; (41dbc0 <lv_cont_signal+0xcc>)
  41db66:	4798      	blx	r3
        lv_cont_refr_autofit(cont);
  41db68:	4638      	mov	r0, r7
  41db6a:	4b11      	ldr	r3, [pc, #68]	; (41dbb0 <lv_cont_signal+0xbc>)
  41db6c:	4798      	blx	r3
  41db6e:	e7e1      	b.n	41db34 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41db70:	4638      	mov	r0, r7
  41db72:	4b14      	ldr	r3, [pc, #80]	; (41dbc4 <lv_cont_signal+0xd0>)
  41db74:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41db76:	88ab      	ldrh	r3, [r5, #4]
  41db78:	882a      	ldrh	r2, [r5, #0]
  41db7a:	1a9b      	subs	r3, r3, r2
  41db7c:	b29b      	uxth	r3, r3
  41db7e:	3301      	adds	r3, #1
  41db80:	b21b      	sxth	r3, r3
  41db82:	4298      	cmp	r0, r3
  41db84:	d006      	beq.n	41db94 <lv_cont_signal+0xa0>
            lv_cont_refr_layout(cont);
  41db86:	4638      	mov	r0, r7
  41db88:	4b0d      	ldr	r3, [pc, #52]	; (41dbc0 <lv_cont_signal+0xcc>)
  41db8a:	4798      	blx	r3
            lv_cont_refr_autofit(cont);
  41db8c:	4638      	mov	r0, r7
  41db8e:	4b08      	ldr	r3, [pc, #32]	; (41dbb0 <lv_cont_signal+0xbc>)
  41db90:	4798      	blx	r3
  41db92:	e7cf      	b.n	41db34 <lv_cont_signal+0x40>
        if(lv_obj_get_width(cont) != lv_area_get_width(param) || lv_obj_get_height(cont) != lv_area_get_height(param)) {
  41db94:	4638      	mov	r0, r7
  41db96:	4b0c      	ldr	r3, [pc, #48]	; (41dbc8 <lv_cont_signal+0xd4>)
  41db98:	4798      	blx	r3
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41db9a:	88eb      	ldrh	r3, [r5, #6]
  41db9c:	886a      	ldrh	r2, [r5, #2]
  41db9e:	1a9b      	subs	r3, r3, r2
  41dba0:	b29b      	uxth	r3, r3
  41dba2:	3301      	adds	r3, #1
  41dba4:	b21b      	sxth	r3, r3
  41dba6:	4298      	cmp	r0, r3
  41dba8:	d1ed      	bne.n	41db86 <lv_cont_signal+0x92>
  41dbaa:	e7c3      	b.n	41db34 <lv_cont_signal+0x40>
  41dbac:	204147e0 	.word	0x204147e0
  41dbb0:	0041cec9 	.word	0x0041cec9
  41dbb4:	0041cca1 	.word	0x0041cca1
  41dbb8:	004297e0 	.word	0x004297e0
  41dbbc:	00407de9 	.word	0x00407de9
  41dbc0:	0041da65 	.word	0x0041da65
  41dbc4:	004056c9 	.word	0x004056c9
  41dbc8:	004056f9 	.word	0x004056f9

0041dbcc <lv_img_get_style>:
}

static lv_style_list_t * lv_img_get_style(lv_obj_t * img, uint8_t type)
{
    lv_style_list_t * style_dsc_p;
    switch(type) {
  41dbcc:	b909      	cbnz	r1, 41dbd2 <lv_img_get_style+0x6>
        case LV_IMG_PART_MAIN:
            style_dsc_p = &img->style_list;
  41dbce:	3028      	adds	r0, #40	; 0x28
            break;
  41dbd0:	4770      	bx	lr
        default:
            style_dsc_p = NULL;
  41dbd2:	2000      	movs	r0, #0
    }

    return style_dsc_p;
}
  41dbd4:	4770      	bx	lr
	...

0041dbd8 <lv_img_design>:
{
  41dbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41dbdc:	b0af      	sub	sp, #188	; 0xbc
  41dbde:	4604      	mov	r4, r0
  41dbe0:	9103      	str	r1, [sp, #12]
  41dbe2:	4617      	mov	r7, r2
    lv_img_ext_t * ext       = lv_obj_get_ext_attr(img);
  41dbe4:	4ba2      	ldr	r3, [pc, #648]	; (41de70 <lv_img_design+0x298>)
  41dbe6:	4798      	blx	r3
  41dbe8:	4605      	mov	r5, r0
    if(mode == LV_DESIGN_COVER_CHK) {
  41dbea:	2f02      	cmp	r7, #2
  41dbec:	d00e      	beq.n	41dc0c <lv_img_design+0x34>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41dbee:	2f00      	cmp	r7, #0
  41dbf0:	f040 825d 	bne.w	41e0ae <lv_img_design+0x4d6>
        if(ext->h == 0 || ext->w == 0) return true;
  41dbf4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  41dbf8:	2b00      	cmp	r3, #0
  41dbfa:	f000 8256 	beq.w	41e0aa <lv_img_design+0x4d2>
  41dbfe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
  41dc02:	2b00      	cmp	r3, #0
  41dc04:	f040 8087 	bne.w	41dd16 <lv_img_design+0x13e>
  41dc08:	2001      	movs	r0, #1
  41dc0a:	e253      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41dc0c:	2202      	movs	r2, #2
  41dc0e:	2100      	movs	r1, #0
  41dc10:	4620      	mov	r0, r4
  41dc12:	4b98      	ldr	r3, [pc, #608]	; (41de74 <lv_img_design+0x29c>)
  41dc14:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_IMG_PART_MAIN)) return LV_DESIGN_RES_MASKED;
  41dc16:	b108      	cbz	r0, 41dc1c <lv_img_design+0x44>
  41dc18:	2003      	movs	r0, #3
  41dc1a:	e24b      	b.n	41e0b4 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41dc1c:	7d2a      	ldrb	r2, [r5, #20]
  41dc1e:	f002 0303 	and.w	r3, r2, #3
  41dc22:	3b02      	subs	r3, #2
  41dc24:	b2db      	uxtb	r3, r3
  41dc26:	2b01      	cmp	r3, #1
  41dc28:	f240 82f6 	bls.w	41e218 <lv_img_design+0x640>
        if(ext->cf != LV_IMG_CF_TRUE_COLOR && ext->cf != LV_IMG_CF_RAW) return LV_DESIGN_RES_NOT_COVER;
  41dc2c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  41dc30:	2a20      	cmp	r2, #32
  41dc32:	bf18      	it	ne
  41dc34:	2a08      	cmpne	r2, #8
  41dc36:	d001      	beq.n	41dc3c <lv_img_design+0x64>
  41dc38:	2002      	movs	r0, #2
  41dc3a:	e23b      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
  41dc3c:	f248 02ac 	movw	r2, #32940	; 0x80ac
  41dc40:	2100      	movs	r1, #0
  41dc42:	4620      	mov	r0, r4
  41dc44:	4b8c      	ldr	r3, [pc, #560]	; (41de78 <lv_img_design+0x2a0>)
  41dc46:	4798      	blx	r3
        if(lv_obj_get_style_image_opa(img, LV_IMG_PART_MAIN) != LV_OPA_COVER) return LV_DESIGN_RES_NOT_COVER;
  41dc48:	28ff      	cmp	r0, #255	; 0xff
  41dc4a:	d001      	beq.n	41dc50 <lv_img_design+0x78>
  41dc4c:	2002      	movs	r0, #2
  41dc4e:	e231      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41dc50:	2206      	movs	r2, #6
  41dc52:	2100      	movs	r1, #0
  41dc54:	4620      	mov	r0, r4
  41dc56:	4b87      	ldr	r3, [pc, #540]	; (41de74 <lv_img_design+0x29c>)
  41dc58:	4798      	blx	r3
        angle_final += ext->angle;
  41dc5a:	89ab      	ldrh	r3, [r5, #12]
        if(angle_final != 0) return LV_DESIGN_RES_NOT_COVER;
  41dc5c:	42d8      	cmn	r0, r3
  41dc5e:	d001      	beq.n	41dc64 <lv_img_design+0x8c>
  41dc60:	2002      	movs	r0, #2
  41dc62:	e227      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41dc64:	2207      	movs	r2, #7
  41dc66:	2100      	movs	r1, #0
  41dc68:	4620      	mov	r0, r4
  41dc6a:	4b82      	ldr	r3, [pc, #520]	; (41de74 <lv_img_design+0x29c>)
  41dc6c:	4798      	blx	r3
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41dc6e:	8a6b      	ldrh	r3, [r5, #18]
  41dc70:	fb03 f300 	mul.w	r3, r3, r0
  41dc74:	121f      	asrs	r7, r3, #8
        if(zoom_final == LV_IMG_ZOOM_NONE) {
  41dc76:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
  41dc7a:	d02e      	beq.n	41dcda <lv_img_design+0x102>
            _lv_img_buf_get_transformed_area(&a, lv_obj_get_width(img), lv_obj_get_height(img), 0, zoom_final, &ext->pivot);
  41dc7c:	4620      	mov	r0, r4
  41dc7e:	4b7f      	ldr	r3, [pc, #508]	; (41de7c <lv_img_design+0x2a4>)
  41dc80:	4798      	blx	r3
  41dc82:	4680      	mov	r8, r0
  41dc84:	4620      	mov	r0, r4
  41dc86:	4b7e      	ldr	r3, [pc, #504]	; (41de80 <lv_img_design+0x2a8>)
  41dc88:	4798      	blx	r3
  41dc8a:	350e      	adds	r5, #14
  41dc8c:	9501      	str	r5, [sp, #4]
  41dc8e:	b2bf      	uxth	r7, r7
  41dc90:	9700      	str	r7, [sp, #0]
  41dc92:	2300      	movs	r3, #0
  41dc94:	4602      	mov	r2, r0
  41dc96:	4641      	mov	r1, r8
  41dc98:	a819      	add	r0, sp, #100	; 0x64
  41dc9a:	4d7a      	ldr	r5, [pc, #488]	; (41de84 <lv_img_design+0x2ac>)
  41dc9c:	47a8      	blx	r5
            a.x1 += img->coords.x1;
  41dc9e:	8a22      	ldrh	r2, [r4, #16]
  41dca0:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41dca4:	4413      	add	r3, r2
  41dca6:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
            a.y1 += img->coords.y1;
  41dcaa:	8a63      	ldrh	r3, [r4, #18]
  41dcac:	f8bd 1066 	ldrh.w	r1, [sp, #102]	; 0x66
  41dcb0:	4419      	add	r1, r3
  41dcb2:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
            a.x2 += img->coords.x1;
  41dcb6:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
  41dcba:	440a      	add	r2, r1
  41dcbc:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            a.y2 += img->coords.y1;
  41dcc0:	f8bd 206a 	ldrh.w	r2, [sp, #106]	; 0x6a
  41dcc4:	4413      	add	r3, r2
  41dcc6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            if(_lv_area_is_in(clip_area, &a, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41dcca:	2200      	movs	r2, #0
  41dccc:	a919      	add	r1, sp, #100	; 0x64
  41dcce:	9803      	ldr	r0, [sp, #12]
  41dcd0:	4b6d      	ldr	r3, [pc, #436]	; (41de88 <lv_img_design+0x2b0>)
  41dcd2:	4798      	blx	r3
  41dcd4:	b950      	cbnz	r0, 41dcec <lv_img_design+0x114>
  41dcd6:	2002      	movs	r0, #2
  41dcd8:	e1ec      	b.n	41e0b4 <lv_img_design+0x4dc>
            if(_lv_area_is_in(clip_area, &img->coords, 0) == false) return LV_DESIGN_RES_NOT_COVER;
  41dcda:	2200      	movs	r2, #0
  41dcdc:	f104 0110 	add.w	r1, r4, #16
  41dce0:	9803      	ldr	r0, [sp, #12]
  41dce2:	4b69      	ldr	r3, [pc, #420]	; (41de88 <lv_img_design+0x2b0>)
  41dce4:	4798      	blx	r3
  41dce6:	b908      	cbnz	r0, 41dcec <lv_img_design+0x114>
  41dce8:	2002      	movs	r0, #2
  41dcea:	e1e3      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
  41dcec:	2220      	movs	r2, #32
  41dcee:	2100      	movs	r1, #0
  41dcf0:	4620      	mov	r0, r4
  41dcf2:	4b60      	ldr	r3, [pc, #384]	; (41de74 <lv_img_design+0x29c>)
  41dcf4:	4798      	blx	r3
  41dcf6:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41dcf8:	2800      	cmp	r0, #0
  41dcfa:	f040 828f 	bne.w	41e21c <lv_img_design+0x644>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
  41dcfe:	f248 02a0 	movw	r2, #32928	; 0x80a0
  41dd02:	2100      	movs	r1, #0
  41dd04:	4620      	mov	r0, r4
  41dd06:	4b5b      	ldr	r3, [pc, #364]	; (41de74 <lv_img_design+0x29c>)
  41dd08:	4798      	blx	r3
  41dd0a:	b2c0      	uxtb	r0, r0
        if(lv_obj_get_style_image_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41dd0c:	2800      	cmp	r0, #0
  41dd0e:	f000 8287 	beq.w	41e220 <lv_img_design+0x648>
  41dd12:	2002      	movs	r0, #2
  41dd14:	e1ce      	b.n	41e0b4 <lv_img_design+0x4dc>
        lv_draw_rect_dsc_init(&bg_dsc);
  41dd16:	a819      	add	r0, sp, #100	; 0x64
  41dd18:	4b5c      	ldr	r3, [pc, #368]	; (41de8c <lv_img_design+0x2b4>)
  41dd1a:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(img, LV_IMG_PART_MAIN, &bg_dsc);
  41dd1c:	aa19      	add	r2, sp, #100	; 0x64
  41dd1e:	2100      	movs	r1, #0
  41dd20:	4620      	mov	r0, r4
  41dd22:	4b5b      	ldr	r3, [pc, #364]	; (41de90 <lv_img_design+0x2b8>)
  41dd24:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41dd26:	2233      	movs	r2, #51	; 0x33
  41dd28:	2100      	movs	r1, #0
  41dd2a:	4620      	mov	r0, r4
  41dd2c:	4b51      	ldr	r3, [pc, #324]	; (41de74 <lv_img_design+0x29c>)
  41dd2e:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41dd30:	b110      	cbz	r0, 41dd38 <lv_img_design+0x160>
            bg_dsc.border_opa = LV_OPA_TRANSP;
  41dd32:	2300      	movs	r3, #0
  41dd34:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41dd38:	2207      	movs	r2, #7
  41dd3a:	2100      	movs	r1, #0
  41dd3c:	4620      	mov	r0, r4
  41dd3e:	4e4d      	ldr	r6, [pc, #308]	; (41de74 <lv_img_design+0x29c>)
  41dd40:	47b0      	blx	r6
        zoom_final = (zoom_final * ext->zoom) >> 8;
  41dd42:	8a6f      	ldrh	r7, [r5, #18]
  41dd44:	fb07 f700 	mul.w	r7, r7, r0
  41dd48:	123f      	asrs	r7, r7, #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41dd4a:	2206      	movs	r2, #6
  41dd4c:	2100      	movs	r1, #0
  41dd4e:	4620      	mov	r0, r4
  41dd50:	47b0      	blx	r6
        angle_final += ext->angle;
  41dd52:	89ab      	ldrh	r3, [r5, #12]
  41dd54:	18c3      	adds	r3, r0, r3
  41dd56:	9304      	str	r3, [sp, #16]
        lv_coord_t obj_w = lv_obj_get_width(img);
  41dd58:	4620      	mov	r0, r4
  41dd5a:	4b48      	ldr	r3, [pc, #288]	; (41de7c <lv_img_design+0x2a4>)
  41dd5c:	4798      	blx	r3
  41dd5e:	4680      	mov	r8, r0
  41dd60:	9005      	str	r0, [sp, #20]
        lv_coord_t obj_h = lv_obj_get_height(img);
  41dd62:	4620      	mov	r0, r4
  41dd64:	4b46      	ldr	r3, [pc, #280]	; (41de80 <lv_img_design+0x2a8>)
  41dd66:	4798      	blx	r3
  41dd68:	4602      	mov	r2, r0
  41dd6a:	9006      	str	r0, [sp, #24]
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41dd6c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
  41dd70:	9307      	str	r3, [sp, #28]
  41dd72:	fa1f f987 	uxth.w	r9, r7
                                         angle_final, zoom_final, &ext->pivot);
  41dd76:	f105 0a0e 	add.w	sl, r5, #14
        _lv_img_buf_get_transformed_area(&bg_coords, obj_w, obj_h,
  41dd7a:	f8cd a004 	str.w	sl, [sp, #4]
  41dd7e:	f8cd 9000 	str.w	r9, [sp]
  41dd82:	4641      	mov	r1, r8
  41dd84:	a808      	add	r0, sp, #32
  41dd86:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 41de84 <lv_img_design+0x2ac>
  41dd8a:	47d8      	blx	fp
        bg_coords.x1 += img->coords.x1;
  41dd8c:	8a22      	ldrh	r2, [r4, #16]
  41dd8e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41dd92:	4413      	add	r3, r2
  41dd94:	f8ad 3020 	strh.w	r3, [sp, #32]
        bg_coords.y1 += img->coords.y1;
  41dd98:	8a63      	ldrh	r3, [r4, #18]
  41dd9a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41dd9e:	4419      	add	r1, r3
  41dda0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
        bg_coords.x2 += img->coords.x1;
  41dda4:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
  41dda8:	440a      	add	r2, r1
  41ddaa:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
        bg_coords.y2 += img->coords.y1;
  41ddae:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
  41ddb2:	4413      	add	r3, r2
  41ddb4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41ddb8:	2212      	movs	r2, #18
  41ddba:	2100      	movs	r1, #0
  41ddbc:	4620      	mov	r0, r4
  41ddbe:	47b0      	blx	r6
        bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41ddc0:	b280      	uxth	r0, r0
  41ddc2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  41ddc6:	1a18      	subs	r0, r3, r0
  41ddc8:	f8ad 0020 	strh.w	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41ddcc:	2213      	movs	r2, #19
  41ddce:	2100      	movs	r1, #0
  41ddd0:	4620      	mov	r0, r4
  41ddd2:	47b0      	blx	r6
        bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41ddd4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41ddd8:	fa13 f080 	uxtah	r0, r3, r0
  41dddc:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41dde0:	2210      	movs	r2, #16
  41dde2:	2100      	movs	r1, #0
  41dde4:	4620      	mov	r0, r4
  41dde6:	47b0      	blx	r6
        bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41dde8:	b280      	uxth	r0, r0
  41ddea:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
  41ddee:	1a18      	subs	r0, r3, r0
  41ddf0:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41ddf4:	2211      	movs	r2, #17
  41ddf6:	2100      	movs	r1, #0
  41ddf8:	4620      	mov	r0, r4
  41ddfa:	47b0      	blx	r6
        bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41ddfc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41de00:	fa13 f080 	uxtah	r0, r3, r0
  41de04:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
        lv_draw_rect(&bg_coords, clip_area, &bg_dsc);
  41de08:	aa19      	add	r2, sp, #100	; 0x64
  41de0a:	9903      	ldr	r1, [sp, #12]
  41de0c:	a808      	add	r0, sp, #32
  41de0e:	4b21      	ldr	r3, [pc, #132]	; (41de94 <lv_img_design+0x2bc>)
  41de10:	4798      	blx	r3
        if(zoom_final == 0) return LV_DESIGN_RES_OK;
  41de12:	b90f      	cbnz	r7, 41de18 <lv_img_design+0x240>
  41de14:	2000      	movs	r0, #0
  41de16:	e14d      	b.n	41e0b4 <lv_img_design+0x4dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41de18:	2202      	movs	r2, #2
  41de1a:	2100      	movs	r1, #0
  41de1c:	4620      	mov	r0, r4
  41de1e:	47b0      	blx	r6
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41de20:	b980      	cbnz	r0, 41de44 <lv_img_design+0x26c>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_VARIABLE) {
  41de22:	7d2b      	ldrb	r3, [r5, #20]
  41de24:	f003 0303 	and.w	r3, r3, #3
  41de28:	2b01      	cmp	r3, #1
  41de2a:	d93d      	bls.n	41dea8 <lv_img_design+0x2d0>
        else if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41de2c:	2b02      	cmp	r3, #2
  41de2e:	f000 8122 	beq.w	41e076 <lv_img_design+0x49e>
            lv_draw_img(&img->coords, clip_area, NULL, NULL);
  41de32:	2300      	movs	r3, #0
  41de34:	461a      	mov	r2, r3
  41de36:	9903      	ldr	r1, [sp, #12]
  41de38:	f104 0010 	add.w	r0, r4, #16
  41de3c:	4c16      	ldr	r4, [pc, #88]	; (41de98 <lv_img_design+0x2c0>)
  41de3e:	47a0      	blx	r4
    return LV_DESIGN_RES_OK;
  41de40:	2000      	movs	r0, #0
  41de42:	e137      	b.n	41e0b4 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
  41de44:	201c      	movs	r0, #28
  41de46:	4b15      	ldr	r3, [pc, #84]	; (41de9c <lv_img_design+0x2c4>)
  41de48:	4798      	blx	r3
  41de4a:	4683      	mov	fp, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
  41de4c:	2201      	movs	r2, #1
  41de4e:	2100      	movs	r1, #0
  41de50:	4620      	mov	r0, r4
  41de52:	47b0      	blx	r6
            lv_draw_mask_radius_init(mp, &bg_coords, r, false);
  41de54:	2300      	movs	r3, #0
  41de56:	4602      	mov	r2, r0
  41de58:	a908      	add	r1, sp, #32
  41de5a:	4658      	mov	r0, fp
  41de5c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 41dea4 <lv_img_design+0x2cc>
  41de60:	47c0      	blx	r8
            lv_draw_mask_add(mp, img + 8);
  41de62:	f504 7118 	add.w	r1, r4, #608	; 0x260
  41de66:	4658      	mov	r0, fp
  41de68:	4b0d      	ldr	r3, [pc, #52]	; (41dea0 <lv_img_design+0x2c8>)
  41de6a:	4798      	blx	r3
  41de6c:	e7d9      	b.n	41de22 <lv_img_design+0x24a>
  41de6e:	bf00      	nop
  41de70:	00407b5d 	.word	0x00407b5d
  41de74:	00406f8d 	.word	0x00406f8d
  41de78:	00406a01 	.word	0x00406a01
  41de7c:	004056c9 	.word	0x004056c9
  41de80:	004056f9 	.word	0x004056f9
  41de84:	004121a9 	.word	0x004121a9
  41de88:	00415169 	.word	0x00415169
  41de8c:	00411d9d 	.word	0x00411d9d
  41de90:	00407e05 	.word	0x00407e05
  41de94:	00411de9 	.word	0x00411de9
  41de98:	0040d07d 	.word	0x0040d07d
  41de9c:	00416269 	.word	0x00416269
  41dea0:	0040f529 	.word	0x0040f529
  41dea4:	0040f7a5 	.word	0x0040f7a5
            lv_draw_img_dsc_init(&img_dsc);
  41dea8:	a810      	add	r0, sp, #64	; 0x40
  41deaa:	4b8e      	ldr	r3, [pc, #568]	; (41e0e4 <lv_img_design+0x50c>)
  41deac:	4798      	blx	r3
            lv_obj_init_draw_img_dsc(img, LV_IMG_PART_MAIN, &img_dsc);
  41deae:	aa10      	add	r2, sp, #64	; 0x40
  41deb0:	2100      	movs	r1, #0
  41deb2:	4620      	mov	r0, r4
  41deb4:	4b8c      	ldr	r3, [pc, #560]	; (41e0e8 <lv_img_design+0x510>)
  41deb6:	4798      	blx	r3
            img_dsc.zoom = zoom_final;
  41deb8:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41debc:	f1b9 0f00 	cmp.w	r9, #0
  41dec0:	f000 80d7 	beq.w	41e072 <lv_img_design+0x49a>
            img_dsc.angle = angle_final;
  41dec4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
  41dec8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            img_dsc.pivot.x = ext->pivot.x;
  41decc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
  41ded0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
            img_dsc.pivot.y = ext->pivot.y;
  41ded4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
  41ded8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            img_dsc.antialias = ext->antialias;
  41dedc:	7d6a      	ldrb	r2, [r5, #21]
  41dede:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
  41dee2:	f362 0300 	bfi	r3, r2, #0, #1
  41dee6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
            lv_coord_t zoomed_src_w = (int32_t)((int32_t)ext->w * zoom_final) >> 8;
  41deea:	f9b5 8008 	ldrsh.w	r8, [r5, #8]
  41deee:	fb08 f807 	mul.w	r8, r8, r7
  41def2:	ea4f 2828 	mov.w	r8, r8, asr #8
  41def6:	fa0f f388 	sxth.w	r3, r8
            if(zoomed_src_w <= 0) return LV_DESIGN_RES_OK;
  41defa:	2b00      	cmp	r3, #0
  41defc:	f340 80b9 	ble.w	41e072 <lv_img_design+0x49a>
            lv_coord_t zoomed_src_h = (int32_t)((int32_t)ext->h * zoom_final) >> 8;
  41df00:	f9b5 b00a 	ldrsh.w	fp, [r5, #10]
  41df04:	fb0b fb07 	mul.w	fp, fp, r7
  41df08:	ea4f 2b2b 	mov.w	fp, fp, asr #8
  41df0c:	fa0f f38b 	sxth.w	r3, fp
            if(zoomed_src_h <= 0) return LV_DESIGN_RES_OK;
  41df10:	2b00      	cmp	r3, #0
  41df12:	f340 80ae 	ble.w	41e072 <lv_img_design+0x49a>
            lv_obj_get_coords(img, &zoomed_coords);
  41df16:	a90a      	add	r1, sp, #40	; 0x28
  41df18:	4620      	mov	r0, r4
  41df1a:	4b74      	ldr	r3, [pc, #464]	; (41e0ec <lv_img_design+0x514>)
  41df1c:	4798      	blx	r3
            zoomed_coords.x1 += (int32_t)((int32_t)ext->offset.x * zoom_final) >> 8;
  41df1e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  41df22:	fb03 f307 	mul.w	r3, r3, r7
  41df26:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
  41df2a:	eb01 2123 	add.w	r1, r1, r3, asr #8
  41df2e:	b289      	uxth	r1, r1
  41df30:	fa0f fe81 	sxth.w	lr, r1
  41df34:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
            zoomed_coords.y1 += (int32_t)((int32_t)ext->offset.y * zoom_final) >> 8;
  41df38:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
  41df3c:	fb03 f307 	mul.w	r3, r3, r7
  41df40:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
  41df44:	eb02 2223 	add.w	r2, r2, r3, asr #8
  41df48:	b292      	uxth	r2, r2
  41df4a:	b210      	sxth	r0, r2
  41df4c:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
            zoomed_coords.x2 = zoomed_coords.x1 + ((int32_t)((int32_t)(obj_w - 1) * zoom_final) >> 8);
  41df50:	9b05      	ldr	r3, [sp, #20]
  41df52:	3b01      	subs	r3, #1
  41df54:	fb03 f307 	mul.w	r3, r3, r7
  41df58:	eb01 2323 	add.w	r3, r1, r3, asr #8
  41df5c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            zoomed_coords.y2 = zoomed_coords.y1 + ((int32_t)((int32_t)(obj_h - 1) * zoom_final) >> 8);
  41df60:	9b06      	ldr	r3, [sp, #24]
  41df62:	3b01      	subs	r3, #1
  41df64:	fb03 f307 	mul.w	r3, r3, r7
  41df68:	eb02 2323 	add.w	r3, r2, r3, asr #8
  41df6c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            if(zoomed_coords.x1 > img->coords.x1) zoomed_coords.x1 -= ext->w;
  41df70:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  41df74:	459e      	cmp	lr, r3
  41df76:	dd03      	ble.n	41df80 <lv_img_design+0x3a8>
  41df78:	892b      	ldrh	r3, [r5, #8]
  41df7a:	1ac9      	subs	r1, r1, r3
  41df7c:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
            if(zoomed_coords.y1 > img->coords.y1) zoomed_coords.y1 -= ext->h;
  41df80:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
  41df84:	4298      	cmp	r0, r3
  41df86:	dd03      	ble.n	41df90 <lv_img_design+0x3b8>
  41df88:	896b      	ldrh	r3, [r5, #10]
  41df8a:	1ad2      	subs	r2, r2, r3
  41df8c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
            _lv_img_buf_get_transformed_area(&clip_real, lv_obj_get_width(img), lv_obj_get_height(img), angle_final, zoom_final,
  41df90:	4620      	mov	r0, r4
  41df92:	4b57      	ldr	r3, [pc, #348]	; (41e0f0 <lv_img_design+0x518>)
  41df94:	4798      	blx	r3
  41df96:	4607      	mov	r7, r0
  41df98:	4620      	mov	r0, r4
  41df9a:	4b56      	ldr	r3, [pc, #344]	; (41e0f4 <lv_img_design+0x51c>)
  41df9c:	4798      	blx	r3
  41df9e:	f8cd a004 	str.w	sl, [sp, #4]
  41dfa2:	f8cd 9000 	str.w	r9, [sp]
  41dfa6:	9b07      	ldr	r3, [sp, #28]
  41dfa8:	4602      	mov	r2, r0
  41dfaa:	4639      	mov	r1, r7
  41dfac:	a80c      	add	r0, sp, #48	; 0x30
  41dfae:	4f52      	ldr	r7, [pc, #328]	; (41e0f8 <lv_img_design+0x520>)
  41dfb0:	47b8      	blx	r7
            clip_real.x1 += img->coords.x1;
  41dfb2:	8a23      	ldrh	r3, [r4, #16]
  41dfb4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41dfb8:	441a      	add	r2, r3
  41dfba:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
            clip_real.x2 += img->coords.x1;
  41dfbe:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
  41dfc2:	4413      	add	r3, r2
  41dfc4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
            clip_real.y1 += img->coords.y1;
  41dfc8:	8a63      	ldrh	r3, [r4, #18]
  41dfca:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
  41dfce:	441a      	add	r2, r3
  41dfd0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
            clip_real.y2 += img->coords.y1;
  41dfd4:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
  41dfd8:	4413      	add	r3, r2
  41dfda:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if(_lv_area_intersect(&clip_real, &clip_real, clip_area) == false) return LV_DESIGN_RES_OK;
  41dfde:	9a03      	ldr	r2, [sp, #12]
  41dfe0:	a90c      	add	r1, sp, #48	; 0x30
  41dfe2:	4608      	mov	r0, r1
  41dfe4:	4b45      	ldr	r3, [pc, #276]	; (41e0fc <lv_img_design+0x524>)
  41dfe6:	4798      	blx	r3
  41dfe8:	2800      	cmp	r0, #0
  41dfea:	d042      	beq.n	41e072 <lv_img_design+0x49a>
            coords_tmp.y1 = zoomed_coords.y1;
  41dfec:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
  41dff0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
            coords_tmp.y2 = zoomed_coords.y1 + ext->h - 1;
  41dff4:	896a      	ldrh	r2, [r5, #10]
  41dff6:	fa12 f383 	uxtah	r3, r2, r3
  41dffa:	b29b      	uxth	r3, r3
  41dffc:	3b01      	subs	r3, #1
  41dffe:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41e002:	e023      	b.n	41e04c <lv_img_design+0x474>
                    lv_draw_img(&coords_tmp, &clip_real, ext->src, &img_dsc);
  41e004:	ab10      	add	r3, sp, #64	; 0x40
  41e006:	682a      	ldr	r2, [r5, #0]
  41e008:	a90c      	add	r1, sp, #48	; 0x30
  41e00a:	a80e      	add	r0, sp, #56	; 0x38
  41e00c:	4c3c      	ldr	r4, [pc, #240]	; (41e100 <lv_img_design+0x528>)
  41e00e:	47a0      	blx	r4
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41e010:	fa1f f388 	uxth.w	r3, r8
  41e014:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
  41e018:	441a      	add	r2, r3
  41e01a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
  41e01e:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
  41e022:	4413      	add	r3, r2
  41e024:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  41e028:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
  41e02c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
  41e030:	429a      	cmp	r2, r3
  41e032:	dbe7      	blt.n	41e004 <lv_img_design+0x42c>
            for(; coords_tmp.y1 < zoomed_coords.y2; coords_tmp.y1 += zoomed_src_h, coords_tmp.y2 += zoomed_src_h) {
  41e034:	fa1f f38b 	uxth.w	r3, fp
  41e038:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
  41e03c:	441a      	add	r2, r3
  41e03e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
  41e042:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
  41e046:	4413      	add	r3, r2
  41e048:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  41e04c:	f9bd 203a 	ldrsh.w	r2, [sp, #58]	; 0x3a
  41e050:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
  41e054:	429a      	cmp	r2, r3
  41e056:	f6bf aef3 	bge.w	41de40 <lv_img_design+0x268>
                coords_tmp.x1 = zoomed_coords.x1;
  41e05a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
  41e05e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
                coords_tmp.x2 = zoomed_coords.x1 + ext->w - 1;
  41e062:	892a      	ldrh	r2, [r5, #8]
  41e064:	fa12 f383 	uxtah	r3, r2, r3
  41e068:	b29b      	uxth	r3, r3
  41e06a:	3b01      	subs	r3, #1
  41e06c:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
                for(; coords_tmp.x1 < zoomed_coords.x2; coords_tmp.x1 += zoomed_src_w, coords_tmp.x2 += zoomed_src_w) {
  41e070:	e7da      	b.n	41e028 <lv_img_design+0x450>
            if(img_dsc.zoom == 0) return LV_DESIGN_RES_OK;
  41e072:	2000      	movs	r0, #0
  41e074:	e01e      	b.n	41e0b4 <lv_img_design+0x4dc>
            lv_draw_label_dsc_init(&label_dsc);
  41e076:	a810      	add	r0, sp, #64	; 0x40
  41e078:	4b22      	ldr	r3, [pc, #136]	; (41e104 <lv_img_design+0x52c>)
  41e07a:	4798      	blx	r3
            lv_obj_init_draw_label_dsc(img, LV_IMG_PART_MAIN, &label_dsc);
  41e07c:	aa10      	add	r2, sp, #64	; 0x40
  41e07e:	2100      	movs	r1, #0
  41e080:	4620      	mov	r0, r4
  41e082:	4b21      	ldr	r3, [pc, #132]	; (41e108 <lv_img_design+0x530>)
  41e084:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
  41e086:	f248 02a9 	movw	r2, #32937	; 0x80a9
  41e08a:	2100      	movs	r1, #0
  41e08c:	4620      	mov	r0, r4
  41e08e:	4b1f      	ldr	r3, [pc, #124]	; (41e10c <lv_img_design+0x534>)
  41e090:	4798      	blx	r3
            label_dsc.color = lv_obj_get_style_image_recolor(img, LV_IMG_PART_MAIN);
  41e092:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
            lv_draw_label(&img->coords, clip_area, &label_dsc, ext->src, NULL);
  41e096:	682b      	ldr	r3, [r5, #0]
  41e098:	2200      	movs	r2, #0
  41e09a:	9200      	str	r2, [sp, #0]
  41e09c:	aa10      	add	r2, sp, #64	; 0x40
  41e09e:	9903      	ldr	r1, [sp, #12]
  41e0a0:	f104 0010 	add.w	r0, r4, #16
  41e0a4:	4c1a      	ldr	r4, [pc, #104]	; (41e110 <lv_img_design+0x538>)
  41e0a6:	47a0      	blx	r4
  41e0a8:	e6ca      	b.n	41de40 <lv_img_design+0x268>
        if(ext->h == 0 || ext->w == 0) return true;
  41e0aa:	2001      	movs	r0, #1
  41e0ac:	e002      	b.n	41e0b4 <lv_img_design+0x4dc>
    else if(mode == LV_DESIGN_DRAW_POST) {
  41e0ae:	2f01      	cmp	r7, #1
  41e0b0:	d003      	beq.n	41e0ba <lv_img_design+0x4e2>
    return LV_DESIGN_RES_OK;
  41e0b2:	2000      	movs	r0, #0
}
  41e0b4:	b02f      	add	sp, #188	; 0xbc
  41e0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
  41e0ba:	2202      	movs	r2, #2
  41e0bc:	2100      	movs	r1, #0
  41e0be:	4620      	mov	r0, r4
  41e0c0:	4b14      	ldr	r3, [pc, #80]	; (41e114 <lv_img_design+0x53c>)
  41e0c2:	4798      	blx	r3
        if(lv_obj_get_style_clip_corner(img, LV_OBJ_PART_MAIN)) {
  41e0c4:	b938      	cbnz	r0, 41e0d6 <lv_img_design+0x4fe>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
  41e0c6:	2233      	movs	r2, #51	; 0x33
  41e0c8:	2100      	movs	r1, #0
  41e0ca:	4620      	mov	r0, r4
  41e0cc:	4b11      	ldr	r3, [pc, #68]	; (41e114 <lv_img_design+0x53c>)
  41e0ce:	4798      	blx	r3
        if(lv_obj_get_style_border_post(img, LV_OBJ_PART_MAIN)) {
  41e0d0:	bb30      	cbnz	r0, 41e120 <lv_img_design+0x548>
    return LV_DESIGN_RES_OK;
  41e0d2:	2000      	movs	r0, #0
  41e0d4:	e7ee      	b.n	41e0b4 <lv_img_design+0x4dc>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(img + 8);
  41e0d6:	f504 7018 	add.w	r0, r4, #608	; 0x260
  41e0da:	4b0f      	ldr	r3, [pc, #60]	; (41e118 <lv_img_design+0x540>)
  41e0dc:	4798      	blx	r3
            _lv_mem_buf_release(param);
  41e0de:	4b0f      	ldr	r3, [pc, #60]	; (41e11c <lv_img_design+0x544>)
  41e0e0:	4798      	blx	r3
  41e0e2:	e7f0      	b.n	41e0c6 <lv_img_design+0x4ee>
  41e0e4:	0040cdd1 	.word	0x0040cdd1
  41e0e8:	004084fd 	.word	0x004084fd
  41e0ec:	00405609 	.word	0x00405609
  41e0f0:	004056c9 	.word	0x004056c9
  41e0f4:	004056f9 	.word	0x004056f9
  41e0f8:	004121a9 	.word	0x004121a9
  41e0fc:	00414ef3 	.word	0x00414ef3
  41e100:	0040d07d 	.word	0x0040d07d
  41e104:	0040d965 	.word	0x0040d965
  41e108:	00408435 	.word	0x00408435
  41e10c:	00406979 	.word	0x00406979
  41e110:	0040d9ad 	.word	0x0040d9ad
  41e114:	00406f8d 	.word	0x00406f8d
  41e118:	0040f5d1 	.word	0x0040f5d1
  41e11c:	00416019 	.word	0x00416019
            lv_draw_rect_dsc_init(&draw_dsc);
  41e120:	a819      	add	r0, sp, #100	; 0x64
  41e122:	4b40      	ldr	r3, [pc, #256]	; (41e224 <lv_img_design+0x64c>)
  41e124:	4798      	blx	r3
            draw_dsc.bg_opa = LV_OPA_TRANSP;
  41e126:	2700      	movs	r7, #0
  41e128:	f88d 7070 	strb.w	r7, [sp, #112]	; 0x70
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
  41e12c:	f88d 709a 	strb.w	r7, [sp, #154]	; 0x9a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
  41e130:	f88d 708e 	strb.w	r7, [sp, #142]	; 0x8e
            lv_obj_init_draw_rect_dsc(img, LV_OBJ_PART_MAIN, &draw_dsc);
  41e134:	aa19      	add	r2, sp, #100	; 0x64
  41e136:	4639      	mov	r1, r7
  41e138:	4620      	mov	r0, r4
  41e13a:	4b3b      	ldr	r3, [pc, #236]	; (41e228 <lv_img_design+0x650>)
  41e13c:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41e13e:	2207      	movs	r2, #7
  41e140:	4639      	mov	r1, r7
  41e142:	4620      	mov	r0, r4
  41e144:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 41e234 <lv_img_design+0x65c>
  41e148:	47c8      	blx	r9
            zoom_final = (zoom_final * ext->zoom) >> 8;
  41e14a:	f8b5 8012 	ldrh.w	r8, [r5, #18]
  41e14e:	fb08 f800 	mul.w	r8, r8, r0
  41e152:	ea4f 2828 	mov.w	r8, r8, asr #8
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41e156:	2206      	movs	r2, #6
  41e158:	4639      	mov	r1, r7
  41e15a:	4620      	mov	r0, r4
  41e15c:	47c8      	blx	r9
            angle_final += ext->angle;
  41e15e:	89ab      	ldrh	r3, [r5, #12]
  41e160:	4403      	add	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41e162:	8aa1      	ldrh	r1, [r4, #20]
  41e164:	8a22      	ldrh	r2, [r4, #16]
  41e166:	1a89      	subs	r1, r1, r2
  41e168:	b289      	uxth	r1, r1
  41e16a:	3101      	adds	r1, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41e16c:	8ae2      	ldrh	r2, [r4, #22]
  41e16e:	8a60      	ldrh	r0, [r4, #18]
  41e170:	1a12      	subs	r2, r2, r0
  41e172:	b292      	uxth	r2, r2
  41e174:	3201      	adds	r2, #1
                                             angle_final, zoom_final, &ext->pivot);
  41e176:	350e      	adds	r5, #14
            _lv_img_buf_get_transformed_area(&bg_coords, lv_area_get_width(&img->coords), lv_area_get_height(&img->coords),
  41e178:	9501      	str	r5, [sp, #4]
  41e17a:	fa1f f088 	uxth.w	r0, r8
  41e17e:	9000      	str	r0, [sp, #0]
  41e180:	b21b      	sxth	r3, r3
  41e182:	b212      	sxth	r2, r2
  41e184:	b209      	sxth	r1, r1
  41e186:	a810      	add	r0, sp, #64	; 0x40
  41e188:	4d28      	ldr	r5, [pc, #160]	; (41e22c <lv_img_design+0x654>)
  41e18a:	47a8      	blx	r5
            bg_coords.x1 += img->coords.x1;
  41e18c:	8a22      	ldrh	r2, [r4, #16]
  41e18e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41e192:	4413      	add	r3, r2
  41e194:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
            bg_coords.y1 += img->coords.y1;
  41e198:	8a63      	ldrh	r3, [r4, #18]
  41e19a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
  41e19e:	4419      	add	r1, r3
  41e1a0:	f8ad 1042 	strh.w	r1, [sp, #66]	; 0x42
            bg_coords.x2 += img->coords.x1;
  41e1a4:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
  41e1a8:	440a      	add	r2, r1
  41e1aa:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
            bg_coords.y2 += img->coords.y1;
  41e1ae:	f8bd 2046 	ldrh.w	r2, [sp, #70]	; 0x46
  41e1b2:	4413      	add	r3, r2
  41e1b4:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e1b8:	2212      	movs	r2, #18
  41e1ba:	4639      	mov	r1, r7
  41e1bc:	4620      	mov	r0, r4
  41e1be:	47c8      	blx	r9
            bg_coords.x1 -= lv_obj_get_style_pad_left(img, LV_IMG_PART_MAIN);
  41e1c0:	b280      	uxth	r0, r0
  41e1c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
  41e1c6:	1a18      	subs	r0, r3, r0
  41e1c8:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e1cc:	2213      	movs	r2, #19
  41e1ce:	4639      	mov	r1, r7
  41e1d0:	4620      	mov	r0, r4
  41e1d2:	47c8      	blx	r9
            bg_coords.x2 += lv_obj_get_style_pad_right(img, LV_IMG_PART_MAIN);
  41e1d4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
  41e1d8:	fa13 f080 	uxtah	r0, r3, r0
  41e1dc:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e1e0:	2210      	movs	r2, #16
  41e1e2:	4639      	mov	r1, r7
  41e1e4:	4620      	mov	r0, r4
  41e1e6:	47c8      	blx	r9
            bg_coords.y1 -= lv_obj_get_style_pad_top(img, LV_IMG_PART_MAIN);
  41e1e8:	b280      	uxth	r0, r0
  41e1ea:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
  41e1ee:	1a18      	subs	r0, r3, r0
  41e1f0:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e1f4:	2211      	movs	r2, #17
  41e1f6:	4639      	mov	r1, r7
  41e1f8:	4620      	mov	r0, r4
  41e1fa:	47c8      	blx	r9
            bg_coords.y2 += lv_obj_get_style_pad_bottom(img, LV_IMG_PART_MAIN);
  41e1fc:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
  41e200:	fa13 f080 	uxtah	r0, r3, r0
  41e204:	f8ad 0046 	strh.w	r0, [sp, #70]	; 0x46
            lv_draw_rect(&img->coords, clip_area, &draw_dsc);
  41e208:	aa19      	add	r2, sp, #100	; 0x64
  41e20a:	9903      	ldr	r1, [sp, #12]
  41e20c:	f104 0010 	add.w	r0, r4, #16
  41e210:	4b07      	ldr	r3, [pc, #28]	; (41e230 <lv_img_design+0x658>)
  41e212:	4798      	blx	r3
    return LV_DESIGN_RES_OK;
  41e214:	4638      	mov	r0, r7
  41e216:	e74d      	b.n	41e0b4 <lv_img_design+0x4dc>
        if(ext->src_type == LV_IMG_SRC_UNKNOWN || ext->src_type == LV_IMG_SRC_SYMBOL) return LV_DESIGN_RES_NOT_COVER;
  41e218:	2002      	movs	r0, #2
  41e21a:	e74b      	b.n	41e0b4 <lv_img_design+0x4dc>
        if(lv_obj_get_style_bg_blend_mode(img, LV_IMG_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
  41e21c:	2002      	movs	r0, #2
  41e21e:	e749      	b.n	41e0b4 <lv_img_design+0x4dc>
        return LV_DESIGN_RES_COVER;
  41e220:	2001      	movs	r0, #1
  41e222:	e747      	b.n	41e0b4 <lv_img_design+0x4dc>
  41e224:	00411d9d 	.word	0x00411d9d
  41e228:	00407e05 	.word	0x00407e05
  41e22c:	004121a9 	.word	0x004121a9
  41e230:	00411de9 	.word	0x00411de9
  41e234:	00406f8d 	.word	0x00406f8d

0041e238 <lv_img_get_auto_size>:
{
  41e238:	b510      	push	{r4, lr}
  41e23a:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41e23c:	4b07      	ldr	r3, [pc, #28]	; (41e25c <lv_img_get_auto_size+0x24>)
  41e23e:	4798      	blx	r3
  41e240:	b928      	cbnz	r0, 41e24e <lv_img_get_auto_size+0x16>
  41e242:	4622      	mov	r2, r4
  41e244:	2300      	movs	r3, #0
  41e246:	4806      	ldr	r0, [pc, #24]	; (41e260 <lv_img_get_auto_size+0x28>)
  41e248:	4906      	ldr	r1, [pc, #24]	; (41e264 <lv_img_get_auto_size+0x2c>)
  41e24a:	4788      	blx	r1
  41e24c:	e7fe      	b.n	41e24c <lv_img_get_auto_size+0x14>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41e24e:	4620      	mov	r0, r4
  41e250:	4b05      	ldr	r3, [pc, #20]	; (41e268 <lv_img_get_auto_size+0x30>)
  41e252:	4798      	blx	r3
    return ext->auto_size == 0 ? false : true;
  41e254:	7d00      	ldrb	r0, [r0, #20]
}
  41e256:	f3c0 0080 	ubfx	r0, r0, #2, #1
  41e25a:	bd10      	pop	{r4, pc}
  41e25c:	004157b9 	.word	0x004157b9
  41e260:	004260c4 	.word	0x004260c4
  41e264:	004157c5 	.word	0x004157c5
  41e268:	00407b5d 	.word	0x00407b5d

0041e26c <lv_img_set_src>:
{
  41e26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  41e270:	b086      	sub	sp, #24
  41e272:	4605      	mov	r5, r0
  41e274:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(img, LV_OBJX_NAME);
  41e276:	4b63      	ldr	r3, [pc, #396]	; (41e404 <lv_img_set_src+0x198>)
  41e278:	4798      	blx	r3
  41e27a:	b928      	cbnz	r0, 41e288 <lv_img_set_src+0x1c>
  41e27c:	462a      	mov	r2, r5
  41e27e:	2300      	movs	r3, #0
  41e280:	4861      	ldr	r0, [pc, #388]	; (41e408 <lv_img_set_src+0x19c>)
  41e282:	4962      	ldr	r1, [pc, #392]	; (41e40c <lv_img_set_src+0x1a0>)
  41e284:	4788      	blx	r1
  41e286:	e7fe      	b.n	41e286 <lv_img_set_src+0x1a>
    lv_img_src_t src_type = lv_img_src_get_type(src_img);
  41e288:	4630      	mov	r0, r6
  41e28a:	4b61      	ldr	r3, [pc, #388]	; (41e410 <lv_img_set_src+0x1a4>)
  41e28c:	4798      	blx	r3
  41e28e:	4607      	mov	r7, r0
    lv_img_ext_t * ext    = lv_obj_get_ext_attr(img);
  41e290:	4628      	mov	r0, r5
  41e292:	4b60      	ldr	r3, [pc, #384]	; (41e414 <lv_img_set_src+0x1a8>)
  41e294:	4798      	blx	r3
  41e296:	4604      	mov	r4, r0
    if(src_type == LV_IMG_SRC_UNKNOWN) {
  41e298:	2f03      	cmp	r7, #3
  41e29a:	d06e      	beq.n	41e37a <lv_img_set_src+0x10e>
    lv_img_decoder_get_info(src_img, &header);
  41e29c:	a905      	add	r1, sp, #20
  41e29e:	4630      	mov	r0, r6
  41e2a0:	4b5d      	ldr	r3, [pc, #372]	; (41e418 <lv_img_set_src+0x1ac>)
  41e2a2:	4798      	blx	r3
    if(src_type == LV_IMG_SRC_VARIABLE) {
  41e2a4:	2f00      	cmp	r7, #0
  41e2a6:	d17b      	bne.n	41e3a0 <lv_img_set_src+0x134>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41e2a8:	7d23      	ldrb	r3, [r4, #20]
  41e2aa:	f003 0303 	and.w	r3, r3, #3
  41e2ae:	3b01      	subs	r3, #1
  41e2b0:	b2db      	uxtb	r3, r3
  41e2b2:	2b01      	cmp	r3, #1
  41e2b4:	d802      	bhi.n	41e2bc <lv_img_set_src+0x50>
            lv_mem_free(ext->src);
  41e2b6:	6820      	ldr	r0, [r4, #0]
  41e2b8:	4b58      	ldr	r3, [pc, #352]	; (41e41c <lv_img_set_src+0x1b0>)
  41e2ba:	4798      	blx	r3
        ext->src = src_img;
  41e2bc:	6026      	str	r6, [r4, #0]
    if(src_type == LV_IMG_SRC_SYMBOL) {
  41e2be:	2f02      	cmp	r7, #2
  41e2c0:	d12c      	bne.n	41e31c <lv_img_set_src+0xb0>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41e2c2:	f248 028e 	movw	r2, #32910	; 0x808e
  41e2c6:	2100      	movs	r1, #0
  41e2c8:	4628      	mov	r0, r5
  41e2ca:	4b55      	ldr	r3, [pc, #340]	; (41e420 <lv_img_set_src+0x1b4>)
  41e2cc:	4798      	blx	r3
  41e2ce:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41e2d0:	f248 0280 	movw	r2, #32896	; 0x8080
  41e2d4:	2100      	movs	r1, #0
  41e2d6:	4628      	mov	r0, r5
  41e2d8:	f8df 816c 	ldr.w	r8, [pc, #364]	; 41e448 <lv_img_set_src+0x1dc>
  41e2dc:	47c0      	blx	r8
  41e2de:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41e2e0:	f248 0281 	movw	r2, #32897	; 0x8081
  41e2e4:	2100      	movs	r1, #0
  41e2e6:	4628      	mov	r0, r5
  41e2e8:	47c0      	blx	r8
        _lv_txt_get_size(&size, src_img, font, letter_space, line_space,
  41e2ea:	2300      	movs	r3, #0
  41e2ec:	9302      	str	r3, [sp, #8]
  41e2ee:	f647 4318 	movw	r3, #31768	; 0x7c18
  41e2f2:	9301      	str	r3, [sp, #4]
  41e2f4:	9000      	str	r0, [sp, #0]
  41e2f6:	4653      	mov	r3, sl
  41e2f8:	464a      	mov	r2, r9
  41e2fa:	4631      	mov	r1, r6
  41e2fc:	a804      	add	r0, sp, #16
  41e2fe:	4e49      	ldr	r6, [pc, #292]	; (41e424 <lv_img_set_src+0x1b8>)
  41e300:	47b0      	blx	r6
        header.w = size.x;
  41e302:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  41e306:	9b05      	ldr	r3, [sp, #20]
  41e308:	f362 2394 	bfi	r3, r2, #10, #11
  41e30c:	9305      	str	r3, [sp, #20]
        header.h = size.y;
  41e30e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
  41e312:	0c1b      	lsrs	r3, r3, #16
  41e314:	f362 134f 	bfi	r3, r2, #5, #11
  41e318:	f8ad 3016 	strh.w	r3, [sp, #22]
    ext->src_type = src_type;
  41e31c:	7d21      	ldrb	r1, [r4, #20]
  41e31e:	f367 0101 	bfi	r1, r7, #0, #2
    ext->w        = header.w;
  41e322:	9b05      	ldr	r3, [sp, #20]
  41e324:	f3c3 238a 	ubfx	r3, r3, #10, #11
  41e328:	8123      	strh	r3, [r4, #8]
    ext->h        = header.h;
  41e32a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
  41e32e:	f3c0 104a 	ubfx	r0, r0, #5, #11
  41e332:	b282      	uxth	r2, r0
  41e334:	8160      	strh	r0, [r4, #10]
    ext->cf       = header.cf;
  41e336:	f89d 0014 	ldrb.w	r0, [sp, #20]
  41e33a:	f360 01c7 	bfi	r1, r0, #3, #5
  41e33e:	7521      	strb	r1, [r4, #20]
    ext->pivot.x = header.w / 2;
  41e340:	f3c3 0349 	ubfx	r3, r3, #1, #10
  41e344:	81e3      	strh	r3, [r4, #14]
    ext->pivot.y = header.h / 2;
  41e346:	1053      	asrs	r3, r2, #1
  41e348:	8223      	strh	r3, [r4, #16]
    if(lv_img_get_auto_size(img) != false) {
  41e34a:	4628      	mov	r0, r5
  41e34c:	4b36      	ldr	r3, [pc, #216]	; (41e428 <lv_img_set_src+0x1bc>)
  41e34e:	4798      	blx	r3
  41e350:	b130      	cbz	r0, 41e360 <lv_img_set_src+0xf4>
        lv_obj_set_size(img, ext->w, ext->h);
  41e352:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
  41e356:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
  41e35a:	4628      	mov	r0, r5
  41e35c:	4b33      	ldr	r3, [pc, #204]	; (41e42c <lv_img_set_src+0x1c0>)
  41e35e:	4798      	blx	r3
    if(ext->angle || ext->zoom != LV_IMG_ZOOM_NONE) lv_obj_refresh_ext_draw_pad(img);
  41e360:	89a3      	ldrh	r3, [r4, #12]
  41e362:	b91b      	cbnz	r3, 41e36c <lv_img_set_src+0x100>
  41e364:	8a63      	ldrh	r3, [r4, #18]
  41e366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  41e36a:	d002      	beq.n	41e372 <lv_img_set_src+0x106>
  41e36c:	4628      	mov	r0, r5
  41e36e:	4b30      	ldr	r3, [pc, #192]	; (41e430 <lv_img_set_src+0x1c4>)
  41e370:	4798      	blx	r3
    lv_obj_invalidate(img);
  41e372:	4628      	mov	r0, r5
  41e374:	4b2f      	ldr	r3, [pc, #188]	; (41e434 <lv_img_set_src+0x1c8>)
  41e376:	4798      	blx	r3
  41e378:	e00f      	b.n	41e39a <lv_img_set_src+0x12e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL || ext->src_type == LV_IMG_SRC_FILE) {
  41e37a:	7d03      	ldrb	r3, [r0, #20]
  41e37c:	f003 0303 	and.w	r3, r3, #3
  41e380:	3b01      	subs	r3, #1
  41e382:	b2db      	uxtb	r3, r3
  41e384:	2b01      	cmp	r3, #1
  41e386:	d802      	bhi.n	41e38e <lv_img_set_src+0x122>
            lv_mem_free(ext->src);
  41e388:	6800      	ldr	r0, [r0, #0]
  41e38a:	4b24      	ldr	r3, [pc, #144]	; (41e41c <lv_img_set_src+0x1b0>)
  41e38c:	4798      	blx	r3
        ext->src      = NULL;
  41e38e:	2300      	movs	r3, #0
  41e390:	6023      	str	r3, [r4, #0]
        ext->src_type = LV_IMG_SRC_UNKNOWN;
  41e392:	7d23      	ldrb	r3, [r4, #20]
  41e394:	f043 0303 	orr.w	r3, r3, #3
  41e398:	7523      	strb	r3, [r4, #20]
}
  41e39a:	b006      	add	sp, #24
  41e39c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(src_type == LV_IMG_SRC_FILE || src_type == LV_IMG_SRC_SYMBOL) {
  41e3a0:	1e7b      	subs	r3, r7, #1
  41e3a2:	b2db      	uxtb	r3, r3
  41e3a4:	2b01      	cmp	r3, #1
  41e3a6:	d88a      	bhi.n	41e2be <lv_img_set_src+0x52>
        if(ext->src != src_img) {
  41e3a8:	f8d4 8000 	ldr.w	r8, [r4]
  41e3ac:	4546      	cmp	r6, r8
  41e3ae:	d086      	beq.n	41e2be <lv_img_set_src+0x52>
            if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41e3b0:	7d23      	ldrb	r3, [r4, #20]
  41e3b2:	f003 0303 	and.w	r3, r3, #3
  41e3b6:	3b01      	subs	r3, #1
  41e3b8:	b2db      	uxtb	r3, r3
  41e3ba:	2b01      	cmp	r3, #1
  41e3bc:	d901      	bls.n	41e3c2 <lv_img_set_src+0x156>
            const void * old_src = NULL;
  41e3be:	f04f 0800 	mov.w	r8, #0
            char * new_str = lv_mem_alloc(strlen(src_img) + 1);
  41e3c2:	4630      	mov	r0, r6
  41e3c4:	4b1c      	ldr	r3, [pc, #112]	; (41e438 <lv_img_set_src+0x1cc>)
  41e3c6:	4798      	blx	r3
  41e3c8:	3001      	adds	r0, #1
  41e3ca:	4b1c      	ldr	r3, [pc, #112]	; (41e43c <lv_img_set_src+0x1d0>)
  41e3cc:	4798      	blx	r3
  41e3ce:	4681      	mov	r9, r0
            LV_ASSERT_MEM(new_str);
  41e3d0:	4b0c      	ldr	r3, [pc, #48]	; (41e404 <lv_img_set_src+0x198>)
  41e3d2:	4798      	blx	r3
  41e3d4:	b928      	cbnz	r0, 41e3e2 <lv_img_set_src+0x176>
  41e3d6:	464a      	mov	r2, r9
  41e3d8:	2300      	movs	r3, #0
  41e3da:	4819      	ldr	r0, [pc, #100]	; (41e440 <lv_img_set_src+0x1d4>)
  41e3dc:	490b      	ldr	r1, [pc, #44]	; (41e40c <lv_img_set_src+0x1a0>)
  41e3de:	4788      	blx	r1
  41e3e0:	e7fe      	b.n	41e3e0 <lv_img_set_src+0x174>
            if(new_str == NULL) return;
  41e3e2:	f1b9 0f00 	cmp.w	r9, #0
  41e3e6:	d0d8      	beq.n	41e39a <lv_img_set_src+0x12e>
            strcpy(new_str, src_img);
  41e3e8:	4631      	mov	r1, r6
  41e3ea:	4648      	mov	r0, r9
  41e3ec:	4b15      	ldr	r3, [pc, #84]	; (41e444 <lv_img_set_src+0x1d8>)
  41e3ee:	4798      	blx	r3
            ext->src = new_str;
  41e3f0:	f8c4 9000 	str.w	r9, [r4]
            if(old_src) lv_mem_free(old_src);
  41e3f4:	f1b8 0f00 	cmp.w	r8, #0
  41e3f8:	f43f af61 	beq.w	41e2be <lv_img_set_src+0x52>
  41e3fc:	4640      	mov	r0, r8
  41e3fe:	4b07      	ldr	r3, [pc, #28]	; (41e41c <lv_img_set_src+0x1b0>)
  41e400:	4798      	blx	r3
  41e402:	e75c      	b.n	41e2be <lv_img_set_src+0x52>
  41e404:	004157b9 	.word	0x004157b9
  41e408:	004260c4 	.word	0x004260c4
  41e40c:	004157c5 	.word	0x004157c5
  41e410:	0040d0bd 	.word	0x0040d0bd
  41e414:	00407b5d 	.word	0x00407b5d
  41e418:	00413249 	.word	0x00413249
  41e41c:	00415f85 	.word	0x00415f85
  41e420:	00406e85 	.word	0x00406e85
  41e424:	00416e21 	.word	0x00416e21
  41e428:	0041e239 	.word	0x0041e239
  41e42c:	00406781 	.word	0x00406781
  41e430:	004054c5 	.word	0x004054c5
  41e434:	00405aa1 	.word	0x00405aa1
  41e438:	00422bc1 	.word	0x00422bc1
  41e43c:	00415ec1 	.word	0x00415ec1
  41e440:	004260b0 	.word	0x004260b0
  41e444:	00422add 	.word	0x00422add
  41e448:	00406f8d 	.word	0x00406f8d

0041e44c <lv_img_create>:
{
  41e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41e450:	4680      	mov	r8, r0
  41e452:	460f      	mov	r7, r1
    lv_obj_t * img = lv_obj_create(par, copy);
  41e454:	4b4c      	ldr	r3, [pc, #304]	; (41e588 <lv_img_create+0x13c>)
  41e456:	4798      	blx	r3
  41e458:	4605      	mov	r5, r0
    LV_ASSERT_MEM(img);
  41e45a:	4b4c      	ldr	r3, [pc, #304]	; (41e58c <lv_img_create+0x140>)
  41e45c:	4798      	blx	r3
  41e45e:	b190      	cbz	r0, 41e486 <lv_img_create+0x3a>
    if(img == NULL) return NULL;
  41e460:	2d00      	cmp	r5, #0
  41e462:	d070      	beq.n	41e546 <lv_img_create+0xfa>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41e464:	4b4a      	ldr	r3, [pc, #296]	; (41e590 <lv_img_create+0x144>)
  41e466:	681b      	ldr	r3, [r3, #0]
  41e468:	b19b      	cbz	r3, 41e492 <lv_img_create+0x46>
    lv_img_ext_t * ext = lv_obj_allocate_ext_attr(img, sizeof(lv_img_ext_t));
  41e46a:	2118      	movs	r1, #24
  41e46c:	4628      	mov	r0, r5
  41e46e:	4b49      	ldr	r3, [pc, #292]	; (41e594 <lv_img_create+0x148>)
  41e470:	4798      	blx	r3
  41e472:	4604      	mov	r4, r0
    LV_ASSERT_MEM(ext);
  41e474:	4b45      	ldr	r3, [pc, #276]	; (41e58c <lv_img_create+0x140>)
  41e476:	4798      	blx	r3
  41e478:	b988      	cbnz	r0, 41e49e <lv_img_create+0x52>
  41e47a:	4622      	mov	r2, r4
  41e47c:	2300      	movs	r3, #0
  41e47e:	4846      	ldr	r0, [pc, #280]	; (41e598 <lv_img_create+0x14c>)
  41e480:	4946      	ldr	r1, [pc, #280]	; (41e59c <lv_img_create+0x150>)
  41e482:	4788      	blx	r1
  41e484:	e7fe      	b.n	41e484 <lv_img_create+0x38>
    LV_ASSERT_MEM(img);
  41e486:	462a      	mov	r2, r5
  41e488:	2300      	movs	r3, #0
  41e48a:	4843      	ldr	r0, [pc, #268]	; (41e598 <lv_img_create+0x14c>)
  41e48c:	4943      	ldr	r1, [pc, #268]	; (41e59c <lv_img_create+0x150>)
  41e48e:	4788      	blx	r1
  41e490:	e7fe      	b.n	41e490 <lv_img_create+0x44>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(img);
  41e492:	4628      	mov	r0, r5
  41e494:	4b42      	ldr	r3, [pc, #264]	; (41e5a0 <lv_img_create+0x154>)
  41e496:	4798      	blx	r3
  41e498:	4b3d      	ldr	r3, [pc, #244]	; (41e590 <lv_img_create+0x144>)
  41e49a:	6018      	str	r0, [r3, #0]
  41e49c:	e7e5      	b.n	41e46a <lv_img_create+0x1e>
    if(ext == NULL) {
  41e49e:	2c00      	cmp	r4, #0
  41e4a0:	d054      	beq.n	41e54c <lv_img_create+0x100>
    ext->src       = NULL;
  41e4a2:	2600      	movs	r6, #0
  41e4a4:	6026      	str	r6, [r4, #0]
    ext->src_type  = LV_IMG_SRC_UNKNOWN;
  41e4a6:	7d23      	ldrb	r3, [r4, #20]
    ext->cf        = LV_IMG_CF_UNKNOWN;
  41e4a8:	f043 0303 	orr.w	r3, r3, #3
  41e4ac:	f366 03c7 	bfi	r3, r6, #3, #5
  41e4b0:	7523      	strb	r3, [r4, #20]
    ext->w         = lv_obj_get_width(img);
  41e4b2:	4628      	mov	r0, r5
  41e4b4:	4b3b      	ldr	r3, [pc, #236]	; (41e5a4 <lv_img_create+0x158>)
  41e4b6:	4798      	blx	r3
  41e4b8:	8120      	strh	r0, [r4, #8]
    ext->h         = lv_obj_get_height(img);
  41e4ba:	4628      	mov	r0, r5
  41e4bc:	4b3a      	ldr	r3, [pc, #232]	; (41e5a8 <lv_img_create+0x15c>)
  41e4be:	4798      	blx	r3
  41e4c0:	8160      	strh	r0, [r4, #10]
    ext->angle = 0;
  41e4c2:	81a6      	strh	r6, [r4, #12]
    ext->zoom = LV_IMG_ZOOM_NONE;
  41e4c4:	f44f 7380 	mov.w	r3, #256	; 0x100
  41e4c8:	8263      	strh	r3, [r4, #18]
    ext->antialias = LV_ANTIALIAS ? 1 : 0;
  41e4ca:	7d63      	ldrb	r3, [r4, #21]
  41e4cc:	f043 0301 	orr.w	r3, r3, #1
  41e4d0:	7563      	strb	r3, [r4, #21]
    ext->auto_size = 1;
  41e4d2:	7d23      	ldrb	r3, [r4, #20]
  41e4d4:	f043 0304 	orr.w	r3, r3, #4
  41e4d8:	7523      	strb	r3, [r4, #20]
    ext->offset.x  = 0;
  41e4da:	80a6      	strh	r6, [r4, #4]
    ext->offset.y  = 0;
  41e4dc:	80e6      	strh	r6, [r4, #6]
    ext->pivot.x = 0;
  41e4de:	81e6      	strh	r6, [r4, #14]
    ext->pivot.y = 0;
  41e4e0:	8226      	strh	r6, [r4, #16]
    lv_obj_set_signal_cb(img, lv_img_signal);
  41e4e2:	4932      	ldr	r1, [pc, #200]	; (41e5ac <lv_img_create+0x160>)
  41e4e4:	4628      	mov	r0, r5
  41e4e6:	4b32      	ldr	r3, [pc, #200]	; (41e5b0 <lv_img_create+0x164>)
  41e4e8:	4798      	blx	r3
    lv_obj_set_design_cb(img, lv_img_design);
  41e4ea:	4932      	ldr	r1, [pc, #200]	; (41e5b4 <lv_img_create+0x168>)
  41e4ec:	4628      	mov	r0, r5
  41e4ee:	4b32      	ldr	r3, [pc, #200]	; (41e5b8 <lv_img_create+0x16c>)
  41e4f0:	4798      	blx	r3
    if(copy == NULL) {
  41e4f2:	2f00      	cmp	r7, #0
  41e4f4:	d02f      	beq.n	41e556 <lv_img_create+0x10a>
        lv_img_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41e4f6:	4638      	mov	r0, r7
  41e4f8:	4b30      	ldr	r3, [pc, #192]	; (41e5bc <lv_img_create+0x170>)
  41e4fa:	4798      	blx	r3
        ext->auto_size     = copy_ext->auto_size;
  41e4fc:	7d03      	ldrb	r3, [r0, #20]
  41e4fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
  41e502:	7d22      	ldrb	r2, [r4, #20]
  41e504:	f363 0282 	bfi	r2, r3, #2, #1
  41e508:	7522      	strb	r2, [r4, #20]
        ext->zoom          = copy_ext->zoom;
  41e50a:	8a43      	ldrh	r3, [r0, #18]
  41e50c:	8263      	strh	r3, [r4, #18]
        ext->angle         = copy_ext->angle;
  41e50e:	8983      	ldrh	r3, [r0, #12]
  41e510:	81a3      	strh	r3, [r4, #12]
        ext->antialias     = copy_ext->antialias;
  41e512:	7d42      	ldrb	r2, [r0, #21]
  41e514:	7d63      	ldrb	r3, [r4, #21]
  41e516:	f362 0300 	bfi	r3, r2, #0, #1
  41e51a:	7563      	strb	r3, [r4, #21]
        ext->offset.x     = copy_ext->offset.x;
  41e51c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
  41e520:	80a3      	strh	r3, [r4, #4]
        ext->offset.y     = copy_ext->offset.y;
  41e522:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
  41e526:	80e3      	strh	r3, [r4, #6]
        ext->pivot.x     = copy_ext->pivot.x;
  41e528:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  41e52c:	81e3      	strh	r3, [r4, #14]
        ext->pivot.y     = copy_ext->pivot.y;
  41e52e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  41e532:	8223      	strh	r3, [r4, #16]
        lv_img_set_src(img, copy_ext->src);
  41e534:	6801      	ldr	r1, [r0, #0]
  41e536:	4628      	mov	r0, r5
  41e538:	4b21      	ldr	r3, [pc, #132]	; (41e5c0 <lv_img_create+0x174>)
  41e53a:	4798      	blx	r3
        lv_obj_refresh_style(img, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41e53c:	22ff      	movs	r2, #255	; 0xff
  41e53e:	4611      	mov	r1, r2
  41e540:	4628      	mov	r0, r5
  41e542:	4b20      	ldr	r3, [pc, #128]	; (41e5c4 <lv_img_create+0x178>)
  41e544:	4798      	blx	r3
}
  41e546:	4628      	mov	r0, r5
  41e548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(img);
  41e54c:	4628      	mov	r0, r5
  41e54e:	4b1e      	ldr	r3, [pc, #120]	; (41e5c8 <lv_img_create+0x17c>)
  41e550:	4798      	blx	r3
        return NULL;
  41e552:	2500      	movs	r5, #0
  41e554:	e7f7      	b.n	41e546 <lv_img_create+0xfa>
        lv_theme_apply(img, LV_THEME_IMAGE);
  41e556:	210f      	movs	r1, #15
  41e558:	4628      	mov	r0, r5
  41e55a:	4b1c      	ldr	r3, [pc, #112]	; (41e5cc <lv_img_create+0x180>)
  41e55c:	4798      	blx	r3
        lv_obj_set_click(img, false);
  41e55e:	4631      	mov	r1, r6
  41e560:	4628      	mov	r0, r5
  41e562:	4b1b      	ldr	r3, [pc, #108]	; (41e5d0 <lv_img_create+0x184>)
  41e564:	4798      	blx	r3
        lv_obj_set_adv_hittest(img, true); /*Images have fast hit-testing*/
  41e566:	2101      	movs	r1, #1
  41e568:	4628      	mov	r0, r5
  41e56a:	4b1a      	ldr	r3, [pc, #104]	; (41e5d4 <lv_img_create+0x188>)
  41e56c:	4798      	blx	r3
        if(par != NULL) {
  41e56e:	f1b8 0f00 	cmp.w	r8, #0
  41e572:	d004      	beq.n	41e57e <lv_img_create+0x132>
            ext->auto_size = 1;
  41e574:	7d23      	ldrb	r3, [r4, #20]
  41e576:	f043 0304 	orr.w	r3, r3, #4
  41e57a:	7523      	strb	r3, [r4, #20]
  41e57c:	e7e3      	b.n	41e546 <lv_img_create+0xfa>
            ext->auto_size = 0;
  41e57e:	7d23      	ldrb	r3, [r4, #20]
  41e580:	f36f 0382 	bfc	r3, #2, #1
  41e584:	7523      	strb	r3, [r4, #20]
  41e586:	e7de      	b.n	41e546 <lv_img_create+0xfa>
  41e588:	0040635d 	.word	0x0040635d
  41e58c:	004157b9 	.word	0x004157b9
  41e590:	204147e8 	.word	0x204147e8
  41e594:	00405489 	.word	0x00405489
  41e598:	004260b0 	.word	0x004260b0
  41e59c:	004157c5 	.word	0x004157c5
  41e5a0:	00407b0d 	.word	0x00407b0d
  41e5a4:	004056c9 	.word	0x004056c9
  41e5a8:	004056f9 	.word	0x004056f9
  41e5ac:	0041e5d9 	.word	0x0041e5d9
  41e5b0:	00405425 	.word	0x00405425
  41e5b4:	0041dbd9 	.word	0x0041dbd9
  41e5b8:	00405461 	.word	0x00405461
  41e5bc:	00407b5d 	.word	0x00407b5d
  41e5c0:	0041e26d 	.word	0x0041e26d
  41e5c4:	004073a9 	.word	0x004073a9
  41e5c8:	00407cbd 	.word	0x00407cbd
  41e5cc:	0041722d 	.word	0x0041722d
  41e5d0:	00405265 	.word	0x00405265
  41e5d4:	00405229 	.word	0x00405229

0041e5d8 <lv_img_signal>:
{
  41e5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41e5dc:	b085      	sub	sp, #20
  41e5de:	4607      	mov	r7, r0
  41e5e0:	460c      	mov	r4, r1
  41e5e2:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41e5e4:	2908      	cmp	r1, #8
  41e5e6:	d020      	beq.n	41e62a <lv_img_signal+0x52>
    res = ancestor_signal(img, sign, param);
  41e5e8:	4b98      	ldr	r3, [pc, #608]	; (41e84c <lv_img_signal+0x274>)
  41e5ea:	681b      	ldr	r3, [r3, #0]
  41e5ec:	4798      	blx	r3
  41e5ee:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41e5f0:	2801      	cmp	r0, #1
  41e5f2:	d120      	bne.n	41e636 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e5f4:	2c07      	cmp	r4, #7
  41e5f6:	d02a      	beq.n	41e64e <lv_img_signal+0x76>
    lv_img_ext_t * ext = lv_obj_get_ext_attr(img);
  41e5f8:	4638      	mov	r0, r7
  41e5fa:	4b95      	ldr	r3, [pc, #596]	; (41e850 <lv_img_signal+0x278>)
  41e5fc:	4798      	blx	r3
  41e5fe:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41e600:	bb5c      	cbnz	r4, 41e65a <lv_img_signal+0x82>
        if(ext->src_type == LV_IMG_SRC_FILE || ext->src_type == LV_IMG_SRC_SYMBOL) {
  41e602:	7d03      	ldrb	r3, [r0, #20]
  41e604:	f003 0303 	and.w	r3, r3, #3
  41e608:	3b01      	subs	r3, #1
  41e60a:	b2db      	uxtb	r3, r3
  41e60c:	2b01      	cmp	r3, #1
  41e60e:	d812      	bhi.n	41e636 <lv_img_signal+0x5e>
            lv_mem_free(ext->src);
  41e610:	6800      	ldr	r0, [r0, #0]
  41e612:	4b90      	ldr	r3, [pc, #576]	; (41e854 <lv_img_signal+0x27c>)
  41e614:	4798      	blx	r3
            ext->src      = NULL;
  41e616:	2300      	movs	r3, #0
  41e618:	f8c8 3000 	str.w	r3, [r8]
            ext->src_type = LV_IMG_SRC_UNKNOWN;
  41e61c:	f898 3014 	ldrb.w	r3, [r8, #20]
  41e620:	f043 0303 	orr.w	r3, r3, #3
  41e624:	f888 3014 	strb.w	r3, [r8, #20]
  41e628:	e005      	b.n	41e636 <lv_img_signal+0x5e>
        info->result = lv_img_get_style(img, info->part);
  41e62a:	7811      	ldrb	r1, [r2, #0]
  41e62c:	4b8a      	ldr	r3, [pc, #552]	; (41e858 <lv_img_signal+0x280>)
  41e62e:	4798      	blx	r3
  41e630:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41e632:	b120      	cbz	r0, 41e63e <lv_img_signal+0x66>
  41e634:	2601      	movs	r6, #1
}
  41e636:	4630      	mov	r0, r6
  41e638:	b005      	add	sp, #20
  41e63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else return ancestor_signal(img, sign, param);
  41e63e:	4b83      	ldr	r3, [pc, #524]	; (41e84c <lv_img_signal+0x274>)
  41e640:	681b      	ldr	r3, [r3, #0]
  41e642:	462a      	mov	r2, r5
  41e644:	4621      	mov	r1, r4
  41e646:	4638      	mov	r0, r7
  41e648:	4798      	blx	r3
  41e64a:	4606      	mov	r6, r0
  41e64c:	e7f3      	b.n	41e636 <lv_img_signal+0x5e>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41e64e:	4983      	ldr	r1, [pc, #524]	; (41e85c <lv_img_signal+0x284>)
  41e650:	4628      	mov	r0, r5
  41e652:	4b83      	ldr	r3, [pc, #524]	; (41e860 <lv_img_signal+0x288>)
  41e654:	4798      	blx	r3
  41e656:	4606      	mov	r6, r0
  41e658:	e7ed      	b.n	41e636 <lv_img_signal+0x5e>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41e65a:	2c04      	cmp	r4, #4
  41e65c:	d027      	beq.n	41e6ae <lv_img_signal+0xd6>
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
  41e65e:	2c06      	cmp	r4, #6
  41e660:	d02f      	beq.n	41e6c2 <lv_img_signal+0xea>
    else if(sign == LV_SIGNAL_HIT_TEST) {
  41e662:	2c0a      	cmp	r4, #10
  41e664:	d1e7      	bne.n	41e636 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41e666:	2207      	movs	r2, #7
  41e668:	2100      	movs	r1, #0
  41e66a:	4638      	mov	r0, r7
  41e66c:	f8df a200 	ldr.w	sl, [pc, #512]	; 41e870 <lv_img_signal+0x298>
  41e670:	47d0      	blx	sl
        zoom = (zoom * ext->zoom) >> 8;
  41e672:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41e676:	fb03 f300 	mul.w	r3, r3, r0
  41e67a:	121c      	asrs	r4, r3, #8
  41e67c:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41e680:	2206      	movs	r2, #6
  41e682:	2100      	movs	r1, #0
  41e684:	4638      	mov	r0, r7
  41e686:	47d0      	blx	sl
        angle += ext->angle;
  41e688:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41e68c:	4403      	add	r3, r0
  41e68e:	fa0f fa83 	sxth.w	sl, r3
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41e692:	f9b8 b008 	ldrsh.w	fp, [r8, #8]
  41e696:	4638      	mov	r0, r7
  41e698:	4b72      	ldr	r3, [pc, #456]	; (41e864 <lv_img_signal+0x28c>)
  41e69a:	4798      	blx	r3
  41e69c:	4583      	cmp	fp, r0
  41e69e:	f000 8086 	beq.w	41e7ae <lv_img_signal+0x1d6>
            info->result = lv_obj_is_point_on_coords(img, info->point);
  41e6a2:	6829      	ldr	r1, [r5, #0]
  41e6a4:	4638      	mov	r0, r7
  41e6a6:	4b70      	ldr	r3, [pc, #448]	; (41e868 <lv_img_signal+0x290>)
  41e6a8:	4798      	blx	r3
  41e6aa:	7128      	strb	r0, [r5, #4]
  41e6ac:	e7c3      	b.n	41e636 <lv_img_signal+0x5e>
        if(ext->src_type == LV_IMG_SRC_SYMBOL) {
  41e6ae:	7d03      	ldrb	r3, [r0, #20]
  41e6b0:	f003 0303 	and.w	r3, r3, #3
  41e6b4:	2b02      	cmp	r3, #2
  41e6b6:	d1be      	bne.n	41e636 <lv_img_signal+0x5e>
            lv_img_set_src(img, ext->src);
  41e6b8:	6801      	ldr	r1, [r0, #0]
  41e6ba:	4638      	mov	r0, r7
  41e6bc:	4b6b      	ldr	r3, [pc, #428]	; (41e86c <lv_img_signal+0x294>)
  41e6be:	4798      	blx	r3
  41e6c0:	e7b9      	b.n	41e636 <lv_img_signal+0x5e>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
  41e6c2:	2207      	movs	r2, #7
  41e6c4:	2100      	movs	r1, #0
  41e6c6:	4638      	mov	r0, r7
  41e6c8:	4d69      	ldr	r5, [pc, #420]	; (41e870 <lv_img_signal+0x298>)
  41e6ca:	47a8      	blx	r5
        transf_zoom = (transf_zoom * ext->zoom) >> 8;
  41e6cc:	f8b8 3012 	ldrh.w	r3, [r8, #18]
  41e6d0:	fb03 f300 	mul.w	r3, r3, r0
  41e6d4:	121c      	asrs	r4, r3, #8
  41e6d6:	fa0f f984 	sxth.w	r9, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
  41e6da:	2206      	movs	r2, #6
  41e6dc:	2100      	movs	r1, #0
  41e6de:	4638      	mov	r0, r7
  41e6e0:	47a8      	blx	r5
        transf_angle += ext->angle;
  41e6e2:	f8b8 300c 	ldrh.w	r3, [r8, #12]
  41e6e6:	4403      	add	r3, r0
  41e6e8:	b21d      	sxth	r5, r3
        if(transf_angle || transf_zoom != LV_IMG_ZOOM_NONE) {
  41e6ea:	f5b9 7f80 	cmp.w	r9, #256	; 0x100
  41e6ee:	bf08      	it	eq
  41e6f0:	2d00      	cmpeq	r5, #0
  41e6f2:	d126      	bne.n	41e742 <lv_img_signal+0x16a>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e6f4:	2212      	movs	r2, #18
  41e6f6:	2100      	movs	r1, #0
  41e6f8:	4638      	mov	r0, r7
  41e6fa:	4d5d      	ldr	r5, [pc, #372]	; (41e870 <lv_img_signal+0x298>)
  41e6fc:	47a8      	blx	r5
  41e6fe:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e700:	2213      	movs	r2, #19
  41e702:	2100      	movs	r1, #0
  41e704:	4638      	mov	r0, r7
  41e706:	47a8      	blx	r5
  41e708:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e70a:	2210      	movs	r2, #16
  41e70c:	2100      	movs	r1, #0
  41e70e:	4638      	mov	r0, r7
  41e710:	47a8      	blx	r5
  41e712:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e714:	2211      	movs	r2, #17
  41e716:	2100      	movs	r1, #0
  41e718:	4638      	mov	r0, r7
  41e71a:	47a8      	blx	r5
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, left);
  41e71c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
  41e720:	454b      	cmp	r3, r9
  41e722:	bfb8      	it	lt
  41e724:	464b      	movlt	r3, r9
  41e726:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, right);
  41e728:	4543      	cmp	r3, r8
  41e72a:	bfb8      	it	lt
  41e72c:	4643      	movlt	r3, r8
  41e72e:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, top);
  41e730:	42a3      	cmp	r3, r4
  41e732:	bfb8      	it	lt
  41e734:	4623      	movlt	r3, r4
  41e736:	b21b      	sxth	r3, r3
        img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, bottom);
  41e738:	4298      	cmp	r0, r3
  41e73a:	bfb8      	it	lt
  41e73c:	4618      	movlt	r0, r3
  41e73e:	8678      	strh	r0, [r7, #50]	; 0x32
  41e740:	e779      	b.n	41e636 <lv_img_signal+0x5e>
            lv_coord_t w = lv_obj_get_width(img);
  41e742:	4638      	mov	r0, r7
  41e744:	4b47      	ldr	r3, [pc, #284]	; (41e864 <lv_img_signal+0x28c>)
  41e746:	4798      	blx	r3
  41e748:	4682      	mov	sl, r0
            lv_coord_t h = lv_obj_get_height(img);
  41e74a:	4638      	mov	r0, r7
  41e74c:	4b49      	ldr	r3, [pc, #292]	; (41e874 <lv_img_signal+0x29c>)
  41e74e:	4798      	blx	r3
  41e750:	4681      	mov	r9, r0
            _lv_img_buf_get_transformed_area(&a, w, h, transf_angle, transf_zoom, &ext->pivot);
  41e752:	f108 030e 	add.w	r3, r8, #14
  41e756:	9301      	str	r3, [sp, #4]
  41e758:	b2a4      	uxth	r4, r4
  41e75a:	9400      	str	r4, [sp, #0]
  41e75c:	462b      	mov	r3, r5
  41e75e:	4602      	mov	r2, r0
  41e760:	4651      	mov	r1, sl
  41e762:	a802      	add	r0, sp, #8
  41e764:	4c44      	ldr	r4, [pc, #272]	; (41e878 <lv_img_signal+0x2a0>)
  41e766:	47a0      	blx	r4
            lv_coord_t pad_ori = img->ext_draw_pad;
  41e768:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.x1);
  41e76c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
  41e770:	1a9a      	subs	r2, r3, r2
  41e772:	429a      	cmp	r2, r3
  41e774:	bfb8      	it	lt
  41e776:	461a      	movlt	r2, r3
  41e778:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori - a.y1);
  41e77a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
  41e77e:	1a9a      	subs	r2, r3, r2
  41e780:	428a      	cmp	r2, r1
  41e782:	bfb8      	it	lt
  41e784:	460a      	movlt	r2, r1
  41e786:	b211      	sxth	r1, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.x2 - w);
  41e788:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
  41e78c:	441a      	add	r2, r3
  41e78e:	eba2 020a 	sub.w	r2, r2, sl
  41e792:	428a      	cmp	r2, r1
  41e794:	bfb8      	it	lt
  41e796:	460a      	movlt	r2, r1
  41e798:	b212      	sxth	r2, r2
            img->ext_draw_pad = LV_MATH_MAX(img->ext_draw_pad, pad_ori + a.y2 - h);
  41e79a:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
  41e79e:	440b      	add	r3, r1
  41e7a0:	eba3 0309 	sub.w	r3, r3, r9
  41e7a4:	4293      	cmp	r3, r2
  41e7a6:	bfb8      	it	lt
  41e7a8:	4613      	movlt	r3, r2
  41e7aa:	867b      	strh	r3, [r7, #50]	; 0x32
  41e7ac:	e7a2      	b.n	41e6f4 <lv_img_signal+0x11c>
        if(ext->w == lv_obj_get_width(img) && ext->h == lv_obj_get_height(img) &&
  41e7ae:	f9b8 b00a 	ldrsh.w	fp, [r8, #10]
  41e7b2:	4638      	mov	r0, r7
  41e7b4:	4b2f      	ldr	r3, [pc, #188]	; (41e874 <lv_img_signal+0x29c>)
  41e7b6:	4798      	blx	r3
  41e7b8:	4583      	cmp	fp, r0
  41e7ba:	f47f af72 	bne.w	41e6a2 <lv_img_signal+0xca>
  41e7be:	f1ba 0f00 	cmp.w	sl, #0
  41e7c2:	bf08      	it	eq
  41e7c4:	f5b9 7f80 	cmpeq.w	r9, #256	; 0x100
  41e7c8:	d108      	bne.n	41e7dc <lv_img_signal+0x204>
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41e7ca:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
  41e7ce:	f9b8 3008 	ldrsh.w	r3, [r8, #8]
  41e7d2:	2102      	movs	r1, #2
  41e7d4:	fb93 f3f1 	sdiv	r3, r3, r1
  41e7d8:	429a      	cmp	r2, r3
  41e7da:	d02e      	beq.n	41e83a <lv_img_signal+0x262>
            lv_coord_t w = lv_obj_get_width(img);
  41e7dc:	4638      	mov	r0, r7
  41e7de:	4b21      	ldr	r3, [pc, #132]	; (41e864 <lv_img_signal+0x28c>)
  41e7e0:	4798      	blx	r3
  41e7e2:	4681      	mov	r9, r0
            lv_coord_t h = lv_obj_get_height(img);
  41e7e4:	4638      	mov	r0, r7
  41e7e6:	4b23      	ldr	r3, [pc, #140]	; (41e874 <lv_img_signal+0x29c>)
  41e7e8:	4798      	blx	r3
            _lv_img_buf_get_transformed_area(&coords, w, h, angle, zoom, &ext->pivot);
  41e7ea:	f108 030e 	add.w	r3, r8, #14
  41e7ee:	9301      	str	r3, [sp, #4]
  41e7f0:	b2a4      	uxth	r4, r4
  41e7f2:	9400      	str	r4, [sp, #0]
  41e7f4:	4653      	mov	r3, sl
  41e7f6:	4602      	mov	r2, r0
  41e7f8:	4649      	mov	r1, r9
  41e7fa:	a802      	add	r0, sp, #8
  41e7fc:	4c1e      	ldr	r4, [pc, #120]	; (41e878 <lv_img_signal+0x2a0>)
  41e7fe:	47a0      	blx	r4
            coords.x1 += img->coords.x1;
  41e800:	8a3a      	ldrh	r2, [r7, #16]
  41e802:	f8bd 3008 	ldrh.w	r3, [sp, #8]
  41e806:	4413      	add	r3, r2
  41e808:	f8ad 3008 	strh.w	r3, [sp, #8]
            coords.y1 += img->coords.y1;
  41e80c:	8a7b      	ldrh	r3, [r7, #18]
  41e80e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
  41e812:	4419      	add	r1, r3
  41e814:	f8ad 100a 	strh.w	r1, [sp, #10]
            coords.x2 += img->coords.x1;
  41e818:	f8bd 100c 	ldrh.w	r1, [sp, #12]
  41e81c:	440a      	add	r2, r1
  41e81e:	f8ad 200c 	strh.w	r2, [sp, #12]
            coords.y2 += img->coords.y1;
  41e822:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  41e826:	4413      	add	r3, r2
  41e828:	f8ad 300e 	strh.w	r3, [sp, #14]
            info->result = _lv_area_is_point_on(&coords, info->point, 0);
  41e82c:	2200      	movs	r2, #0
  41e82e:	6829      	ldr	r1, [r5, #0]
  41e830:	a802      	add	r0, sp, #8
  41e832:	4b12      	ldr	r3, [pc, #72]	; (41e87c <lv_img_signal+0x2a4>)
  41e834:	4798      	blx	r3
  41e836:	7128      	strb	r0, [r5, #4]
           (zoom != LV_IMG_ZOOM_NONE || angle != 0 || ext->pivot.x != ext->w / 2 || ext->pivot.y != ext->h / 2)) {
  41e838:	e6fd      	b.n	41e636 <lv_img_signal+0x5e>
  41e83a:	f9b8 2010 	ldrsh.w	r2, [r8, #16]
  41e83e:	f9b8 300a 	ldrsh.w	r3, [r8, #10]
  41e842:	fb93 f3f1 	sdiv	r3, r3, r1
  41e846:	429a      	cmp	r2, r3
  41e848:	d1c8      	bne.n	41e7dc <lv_img_signal+0x204>
  41e84a:	e72a      	b.n	41e6a2 <lv_img_signal+0xca>
  41e84c:	204147e8 	.word	0x204147e8
  41e850:	00407b5d 	.word	0x00407b5d
  41e854:	00415f85 	.word	0x00415f85
  41e858:	0041dbcd 	.word	0x0041dbcd
  41e85c:	004297e8 	.word	0x004297e8
  41e860:	00407de9 	.word	0x00407de9
  41e864:	004056c9 	.word	0x004056c9
  41e868:	00407d79 	.word	0x00407d79
  41e86c:	0041e26d 	.word	0x0041e26d
  41e870:	00406f8d 	.word	0x00406f8d
  41e874:	004056f9 	.word	0x004056f9
  41e878:	004121a9 	.word	0x004121a9
  41e87c:	00414f95 	.word	0x00414f95

0041e880 <lv_label_get_dot_tmp>:
 * Get the stored dot_tmp characters
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
  41e880:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41e882:	4b05      	ldr	r3, [pc, #20]	; (41e898 <lv_label_get_dot_tmp+0x18>)
  41e884:	4798      	blx	r3
    if(ext->dot_tmp_alloc) {
  41e886:	7cc3      	ldrb	r3, [r0, #19]
  41e888:	f013 0f01 	tst.w	r3, #1
  41e88c:	d101      	bne.n	41e892 <lv_label_get_dot_tmp+0x12>
        return ext->dot.tmp_ptr;
    }
    else {
        return ext->dot.tmp;
  41e88e:	3004      	adds	r0, #4
    }
}
  41e890:	bd08      	pop	{r3, pc}
        return ext->dot.tmp_ptr;
  41e892:	6840      	ldr	r0, [r0, #4]
  41e894:	bd08      	pop	{r3, pc}
  41e896:	bf00      	nop
  41e898:	00407b5d 	.word	0x00407b5d

0041e89c <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
  41e89c:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41e89e:	4b09      	ldr	r3, [pc, #36]	; (41e8c4 <lv_label_dot_tmp_free+0x28>)
  41e8a0:	4798      	blx	r3
  41e8a2:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
  41e8a4:	7cc3      	ldrb	r3, [r0, #19]
  41e8a6:	f013 0f01 	tst.w	r3, #1
  41e8aa:	d003      	beq.n	41e8b4 <lv_label_dot_tmp_free+0x18>
  41e8ac:	6840      	ldr	r0, [r0, #4]
  41e8ae:	b108      	cbz	r0, 41e8b4 <lv_label_dot_tmp_free+0x18>
        lv_mem_free(ext->dot.tmp_ptr);
  41e8b0:	4b05      	ldr	r3, [pc, #20]	; (41e8c8 <lv_label_dot_tmp_free+0x2c>)
  41e8b2:	4798      	blx	r3
    }
    ext->dot_tmp_alloc = false;
  41e8b4:	7ce3      	ldrb	r3, [r4, #19]
  41e8b6:	f36f 0300 	bfc	r3, #0, #1
  41e8ba:	74e3      	strb	r3, [r4, #19]
    ext->dot.tmp_ptr   = NULL;
  41e8bc:	2300      	movs	r3, #0
  41e8be:	6063      	str	r3, [r4, #4]
  41e8c0:	bd10      	pop	{r4, pc}
  41e8c2:	bf00      	nop
  41e8c4:	00407b5d 	.word	0x00407b5d
  41e8c8:	00415f85 	.word	0x00415f85

0041e8cc <lv_label_revert_dots>:
{
  41e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e8ce:	4607      	mov	r7, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41e8d0:	4b16      	ldr	r3, [pc, #88]	; (41e92c <lv_label_revert_dots+0x60>)
  41e8d2:	4798      	blx	r3
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
  41e8d4:	7c83      	ldrb	r3, [r0, #18]
  41e8d6:	f003 0307 	and.w	r3, r3, #7
  41e8da:	2b02      	cmp	r3, #2
  41e8dc:	d000      	beq.n	41e8e0 <lv_label_revert_dots+0x14>
  41e8de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e8e0:	4604      	mov	r4, r0
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
  41e8e2:	6881      	ldr	r1, [r0, #8]
  41e8e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e8e8:	4299      	cmp	r1, r3
  41e8ea:	d0f8      	beq.n	41e8de <lv_label_revert_dots+0x12>
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
  41e8ec:	4b10      	ldr	r3, [pc, #64]	; (41e930 <lv_label_revert_dots+0x64>)
  41e8ee:	681b      	ldr	r3, [r3, #0]
  41e8f0:	3903      	subs	r1, #3
  41e8f2:	6800      	ldr	r0, [r0, #0]
  41e8f4:	4798      	blx	r3
  41e8f6:	4606      	mov	r6, r0
    char * dot_tmp = lv_label_get_dot_tmp(label);
  41e8f8:	4638      	mov	r0, r7
  41e8fa:	4b0e      	ldr	r3, [pc, #56]	; (41e934 <lv_label_revert_dots+0x68>)
  41e8fc:	4798      	blx	r3
    uint8_t i      = 0;
  41e8fe:	2300      	movs	r3, #0
    while(ext->text[byte_i + i] != '\0') {
  41e900:	e003      	b.n	41e90a <lv_label_revert_dots+0x3e>
        ext->text[byte_i + i] = dot_tmp[i];
  41e902:	5cc5      	ldrb	r5, [r0, r3]
  41e904:	548d      	strb	r5, [r1, r2]
        i++;
  41e906:	3301      	adds	r3, #1
  41e908:	b2db      	uxtb	r3, r3
    while(ext->text[byte_i + i] != '\0') {
  41e90a:	6821      	ldr	r1, [r4, #0]
  41e90c:	18f2      	adds	r2, r6, r3
  41e90e:	eb01 0e02 	add.w	lr, r1, r2
  41e912:	5c8d      	ldrb	r5, [r1, r2]
  41e914:	2d00      	cmp	r5, #0
  41e916:	d1f4      	bne.n	41e902 <lv_label_revert_dots+0x36>
    ext->text[byte_i + i] = dot_tmp[i];
  41e918:	5cc3      	ldrb	r3, [r0, r3]
  41e91a:	f88e 3000 	strb.w	r3, [lr]
    lv_label_dot_tmp_free(label);
  41e91e:	4638      	mov	r0, r7
  41e920:	4b05      	ldr	r3, [pc, #20]	; (41e938 <lv_label_revert_dots+0x6c>)
  41e922:	4798      	blx	r3
    ext->dot_end = LV_LABEL_DOT_END_INV;
  41e924:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41e928:	60a3      	str	r3, [r4, #8]
  41e92a:	e7d8      	b.n	41e8de <lv_label_revert_dots+0x12>
  41e92c:	00407b5d 	.word	0x00407b5d
  41e930:	20400050 	.word	0x20400050
  41e934:	0041e881 	.word	0x0041e881
  41e938:	0041e89d 	.word	0x0041e89d

0041e93c <get_txt_coords>:
}

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
  41e93c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  41e940:	4606      	mov	r6, r0
  41e942:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
  41e944:	4b12      	ldr	r3, [pc, #72]	; (41e990 <get_txt_coords+0x54>)
  41e946:	4798      	blx	r3
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41e948:	2212      	movs	r2, #18
  41e94a:	2100      	movs	r1, #0
  41e94c:	4630      	mov	r0, r6
  41e94e:	4d11      	ldr	r5, [pc, #68]	; (41e994 <get_txt_coords+0x58>)
  41e950:	47a8      	blx	r5
  41e952:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41e954:	2213      	movs	r2, #19
  41e956:	2100      	movs	r1, #0
  41e958:	4630      	mov	r0, r6
  41e95a:	47a8      	blx	r5
  41e95c:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41e95e:	2210      	movs	r2, #16
  41e960:	2100      	movs	r1, #0
  41e962:	4630      	mov	r0, r6
  41e964:	47a8      	blx	r5
  41e966:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41e968:	2211      	movs	r2, #17
  41e96a:	2100      	movs	r1, #0
  41e96c:	4630      	mov	r0, r6
  41e96e:	47a8      	blx	r5

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
  41e970:	8823      	ldrh	r3, [r4, #0]
  41e972:	4498      	add	r8, r3
  41e974:	f8a4 8000 	strh.w	r8, [r4]
    area->x2 -= right;
  41e978:	88a3      	ldrh	r3, [r4, #4]
  41e97a:	eba3 0309 	sub.w	r3, r3, r9
  41e97e:	80a3      	strh	r3, [r4, #4]
    area->y1 += top;
  41e980:	8863      	ldrh	r3, [r4, #2]
  41e982:	441f      	add	r7, r3
  41e984:	8067      	strh	r7, [r4, #2]
    area->y2 -= bottom;
  41e986:	88e3      	ldrh	r3, [r4, #6]
  41e988:	1a18      	subs	r0, r3, r0
  41e98a:	80e0      	strh	r0, [r4, #6]
  41e98c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  41e990:	00405609 	.word	0x00405609
  41e994:	00406f8d 	.word	0x00406f8d

0041e998 <lv_label_set_dot_tmp>:
{
  41e998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41e99a:	4606      	mov	r6, r0
  41e99c:	460f      	mov	r7, r1
  41e99e:	4615      	mov	r5, r2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41e9a0:	4b13      	ldr	r3, [pc, #76]	; (41e9f0 <lv_label_set_dot_tmp+0x58>)
  41e9a2:	4798      	blx	r3
  41e9a4:	4604      	mov	r4, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
  41e9a6:	4630      	mov	r0, r6
  41e9a8:	4b12      	ldr	r3, [pc, #72]	; (41e9f4 <lv_label_set_dot_tmp+0x5c>)
  41e9aa:	4798      	blx	r3
    if(len > sizeof(char *)) {
  41e9ac:	2d04      	cmp	r5, #4
  41e9ae:	d911      	bls.n	41e9d4 <lv_label_set_dot_tmp+0x3c>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
  41e9b0:	1c68      	adds	r0, r5, #1
  41e9b2:	4b11      	ldr	r3, [pc, #68]	; (41e9f8 <lv_label_set_dot_tmp+0x60>)
  41e9b4:	4798      	blx	r3
  41e9b6:	6060      	str	r0, [r4, #4]
        if(ext->dot.tmp_ptr == NULL) {
  41e9b8:	b1b8      	cbz	r0, 41e9ea <lv_label_set_dot_tmp+0x52>
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
  41e9ba:	462a      	mov	r2, r5
  41e9bc:	4639      	mov	r1, r7
  41e9be:	4b0f      	ldr	r3, [pc, #60]	; (41e9fc <lv_label_set_dot_tmp+0x64>)
  41e9c0:	4798      	blx	r3
        ext->dot.tmp_ptr[len] = '\0';
  41e9c2:	6863      	ldr	r3, [r4, #4]
  41e9c4:	2200      	movs	r2, #0
  41e9c6:	555a      	strb	r2, [r3, r5]
        ext->dot_tmp_alloc    = true;
  41e9c8:	7ce3      	ldrb	r3, [r4, #19]
  41e9ca:	f043 0301 	orr.w	r3, r3, #1
  41e9ce:	74e3      	strb	r3, [r4, #19]
    return true;
  41e9d0:	2001      	movs	r0, #1
  41e9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->dot_tmp_alloc = false;
  41e9d4:	7ce3      	ldrb	r3, [r4, #19]
  41e9d6:	f36f 0300 	bfc	r3, #0, #1
  41e9da:	74e3      	strb	r3, [r4, #19]
        _lv_memcpy(ext->dot.tmp, data, len);
  41e9dc:	462a      	mov	r2, r5
  41e9de:	4639      	mov	r1, r7
  41e9e0:	1d20      	adds	r0, r4, #4
  41e9e2:	4b06      	ldr	r3, [pc, #24]	; (41e9fc <lv_label_set_dot_tmp+0x64>)
  41e9e4:	4798      	blx	r3
    return true;
  41e9e6:	2001      	movs	r0, #1
  41e9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return false;
  41e9ea:	2000      	movs	r0, #0
}
  41e9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  41e9ee:	bf00      	nop
  41e9f0:	00407b5d 	.word	0x00407b5d
  41e9f4:	0041e89d 	.word	0x0041e89d
  41e9f8:	00415ec1 	.word	0x00415ec1
  41e9fc:	004160d1 	.word	0x004160d1

0041ea00 <lv_label_set_offset_y>:
{
  41ea00:	b538      	push	{r3, r4, r5, lr}
  41ea02:	4604      	mov	r4, r0
  41ea04:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ea06:	4b03      	ldr	r3, [pc, #12]	; (41ea14 <lv_label_set_offset_y+0x14>)
  41ea08:	4798      	blx	r3
    ext->offset.y        = y;
  41ea0a:	8205      	strh	r5, [r0, #16]
    lv_obj_invalidate(label);
  41ea0c:	4620      	mov	r0, r4
  41ea0e:	4b02      	ldr	r3, [pc, #8]	; (41ea18 <lv_label_set_offset_y+0x18>)
  41ea10:	4798      	blx	r3
  41ea12:	bd38      	pop	{r3, r4, r5, pc}
  41ea14:	00407b5d 	.word	0x00407b5d
  41ea18:	00405aa1 	.word	0x00405aa1

0041ea1c <lv_label_set_offset_x>:
{
  41ea1c:	b538      	push	{r3, r4, r5, lr}
  41ea1e:	4604      	mov	r4, r0
  41ea20:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ea22:	4b03      	ldr	r3, [pc, #12]	; (41ea30 <lv_label_set_offset_x+0x14>)
  41ea24:	4798      	blx	r3
    ext->offset.x        = x;
  41ea26:	81c5      	strh	r5, [r0, #14]
    lv_obj_invalidate(label);
  41ea28:	4620      	mov	r0, r4
  41ea2a:	4b02      	ldr	r3, [pc, #8]	; (41ea34 <lv_label_set_offset_x+0x18>)
  41ea2c:	4798      	blx	r3
  41ea2e:	bd38      	pop	{r3, r4, r5, pc}
  41ea30:	00407b5d 	.word	0x00407b5d
  41ea34:	00405aa1 	.word	0x00405aa1

0041ea38 <lv_label_set_align>:
{
  41ea38:	b538      	push	{r3, r4, r5, lr}
  41ea3a:	4604      	mov	r4, r0
  41ea3c:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41ea3e:	4b0c      	ldr	r3, [pc, #48]	; (41ea70 <lv_label_set_align+0x38>)
  41ea40:	4798      	blx	r3
  41ea42:	b928      	cbnz	r0, 41ea50 <lv_label_set_align+0x18>
  41ea44:	4622      	mov	r2, r4
  41ea46:	2300      	movs	r3, #0
  41ea48:	480a      	ldr	r0, [pc, #40]	; (41ea74 <lv_label_set_align+0x3c>)
  41ea4a:	490b      	ldr	r1, [pc, #44]	; (41ea78 <lv_label_set_align+0x40>)
  41ea4c:	4788      	blx	r1
  41ea4e:	e7fe      	b.n	41ea4e <lv_label_set_align+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ea50:	4620      	mov	r0, r4
  41ea52:	4b0a      	ldr	r3, [pc, #40]	; (41ea7c <lv_label_set_align+0x44>)
  41ea54:	4798      	blx	r3
    if(ext->align == align) return;
  41ea56:	7c83      	ldrb	r3, [r0, #18]
  41ea58:	f3c3 1301 	ubfx	r3, r3, #4, #2
  41ea5c:	42ab      	cmp	r3, r5
  41ea5e:	d006      	beq.n	41ea6e <lv_label_set_align+0x36>
    ext->align = align;
  41ea60:	7c83      	ldrb	r3, [r0, #18]
  41ea62:	f365 1305 	bfi	r3, r5, #4, #2
  41ea66:	7483      	strb	r3, [r0, #18]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
  41ea68:	4620      	mov	r0, r4
  41ea6a:	4b05      	ldr	r3, [pc, #20]	; (41ea80 <lv_label_set_align+0x48>)
  41ea6c:	4798      	blx	r3
  41ea6e:	bd38      	pop	{r3, r4, r5, pc}
  41ea70:	004157b9 	.word	0x004157b9
  41ea74:	004260c4 	.word	0x004260c4
  41ea78:	004157c5 	.word	0x004157c5
  41ea7c:	00407b5d 	.word	0x00407b5d
  41ea80:	00405aa1 	.word	0x00405aa1

0041ea84 <lv_label_get_text>:
{
  41ea84:	b510      	push	{r4, lr}
  41ea86:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41ea88:	4b06      	ldr	r3, [pc, #24]	; (41eaa4 <lv_label_get_text+0x20>)
  41ea8a:	4798      	blx	r3
  41ea8c:	b928      	cbnz	r0, 41ea9a <lv_label_get_text+0x16>
  41ea8e:	4622      	mov	r2, r4
  41ea90:	2300      	movs	r3, #0
  41ea92:	4805      	ldr	r0, [pc, #20]	; (41eaa8 <lv_label_get_text+0x24>)
  41ea94:	4905      	ldr	r1, [pc, #20]	; (41eaac <lv_label_get_text+0x28>)
  41ea96:	4788      	blx	r1
  41ea98:	e7fe      	b.n	41ea98 <lv_label_get_text+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ea9a:	4620      	mov	r0, r4
  41ea9c:	4b04      	ldr	r3, [pc, #16]	; (41eab0 <lv_label_get_text+0x2c>)
  41ea9e:	4798      	blx	r3
}
  41eaa0:	6800      	ldr	r0, [r0, #0]
  41eaa2:	bd10      	pop	{r4, pc}
  41eaa4:	004157b9 	.word	0x004157b9
  41eaa8:	004260c4 	.word	0x004260c4
  41eaac:	004157c5 	.word	0x004157c5
  41eab0:	00407b5d 	.word	0x00407b5d

0041eab4 <lv_label_get_long_mode>:
{
  41eab4:	b510      	push	{r4, lr}
  41eab6:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41eab8:	4b07      	ldr	r3, [pc, #28]	; (41ead8 <lv_label_get_long_mode+0x24>)
  41eaba:	4798      	blx	r3
  41eabc:	b928      	cbnz	r0, 41eaca <lv_label_get_long_mode+0x16>
  41eabe:	4622      	mov	r2, r4
  41eac0:	2300      	movs	r3, #0
  41eac2:	4806      	ldr	r0, [pc, #24]	; (41eadc <lv_label_get_long_mode+0x28>)
  41eac4:	4906      	ldr	r1, [pc, #24]	; (41eae0 <lv_label_get_long_mode+0x2c>)
  41eac6:	4788      	blx	r1
  41eac8:	e7fe      	b.n	41eac8 <lv_label_get_long_mode+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41eaca:	4620      	mov	r0, r4
  41eacc:	4b05      	ldr	r3, [pc, #20]	; (41eae4 <lv_label_get_long_mode+0x30>)
  41eace:	4798      	blx	r3
    return ext->long_mode;
  41ead0:	7c80      	ldrb	r0, [r0, #18]
}
  41ead2:	f000 0007 	and.w	r0, r0, #7
  41ead6:	bd10      	pop	{r4, pc}
  41ead8:	004157b9 	.word	0x004157b9
  41eadc:	004260c4 	.word	0x004260c4
  41eae0:	004157c5 	.word	0x004157c5
  41eae4:	00407b5d 	.word	0x00407b5d

0041eae8 <lv_label_get_align>:
{
  41eae8:	b510      	push	{r4, lr}
  41eaea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41eaec:	4b09      	ldr	r3, [pc, #36]	; (41eb14 <lv_label_get_align+0x2c>)
  41eaee:	4798      	blx	r3
  41eaf0:	b928      	cbnz	r0, 41eafe <lv_label_get_align+0x16>
  41eaf2:	4622      	mov	r2, r4
  41eaf4:	2300      	movs	r3, #0
  41eaf6:	4808      	ldr	r0, [pc, #32]	; (41eb18 <lv_label_get_align+0x30>)
  41eaf8:	4908      	ldr	r1, [pc, #32]	; (41eb1c <lv_label_get_align+0x34>)
  41eafa:	4788      	blx	r1
  41eafc:	e7fe      	b.n	41eafc <lv_label_get_align+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41eafe:	4620      	mov	r0, r4
  41eb00:	4b07      	ldr	r3, [pc, #28]	; (41eb20 <lv_label_get_align+0x38>)
  41eb02:	4798      	blx	r3
    lv_label_align_t align = ext->align;
  41eb04:	7c80      	ldrb	r0, [r0, #18]
  41eb06:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
  41eb0a:	2803      	cmp	r0, #3
  41eb0c:	d000      	beq.n	41eb10 <lv_label_get_align+0x28>
}
  41eb0e:	bd10      	pop	{r4, pc}
        align = LV_LABEL_ALIGN_LEFT;
  41eb10:	2000      	movs	r0, #0
  41eb12:	e7fc      	b.n	41eb0e <lv_label_get_align+0x26>
  41eb14:	004157b9 	.word	0x004157b9
  41eb18:	004260c4 	.word	0x004260c4
  41eb1c:	004157c5 	.word	0x004157c5
  41eb20:	00407b5d 	.word	0x00407b5d

0041eb24 <lv_label_get_recolor>:
{
  41eb24:	b510      	push	{r4, lr}
  41eb26:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41eb28:	4b07      	ldr	r3, [pc, #28]	; (41eb48 <lv_label_get_recolor+0x24>)
  41eb2a:	4798      	blx	r3
  41eb2c:	b928      	cbnz	r0, 41eb3a <lv_label_get_recolor+0x16>
  41eb2e:	4622      	mov	r2, r4
  41eb30:	2300      	movs	r3, #0
  41eb32:	4806      	ldr	r0, [pc, #24]	; (41eb4c <lv_label_get_recolor+0x28>)
  41eb34:	4906      	ldr	r1, [pc, #24]	; (41eb50 <lv_label_get_recolor+0x2c>)
  41eb36:	4788      	blx	r1
  41eb38:	e7fe      	b.n	41eb38 <lv_label_get_recolor+0x14>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41eb3a:	4620      	mov	r0, r4
  41eb3c:	4b05      	ldr	r3, [pc, #20]	; (41eb54 <lv_label_get_recolor+0x30>)
  41eb3e:	4798      	blx	r3
    return ext->recolor == 0 ? false : true;
  41eb40:	7c80      	ldrb	r0, [r0, #18]
}
  41eb42:	f3c0 1080 	ubfx	r0, r0, #6, #1
  41eb46:	bd10      	pop	{r4, pc}
  41eb48:	004157b9 	.word	0x004157b9
  41eb4c:	004260c4 	.word	0x004260c4
  41eb50:	004157c5 	.word	0x004157c5
  41eb54:	00407b5d 	.word	0x00407b5d

0041eb58 <lv_label_get_letter_on>:
{
  41eb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41eb5c:	b08f      	sub	sp, #60	; 0x3c
  41eb5e:	4604      	mov	r4, r0
  41eb60:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41eb62:	4b91      	ldr	r3, [pc, #580]	; (41eda8 <lv_label_get_letter_on+0x250>)
  41eb64:	4798      	blx	r3
  41eb66:	b928      	cbnz	r0, 41eb74 <lv_label_get_letter_on+0x1c>
  41eb68:	4622      	mov	r2, r4
  41eb6a:	2300      	movs	r3, #0
  41eb6c:	488f      	ldr	r0, [pc, #572]	; (41edac <lv_label_get_letter_on+0x254>)
  41eb6e:	4990      	ldr	r1, [pc, #576]	; (41edb0 <lv_label_get_letter_on+0x258>)
  41eb70:	4788      	blx	r1
  41eb72:	e7fe      	b.n	41eb72 <lv_label_get_letter_on+0x1a>
    LV_ASSERT_NULL(pos_in);
  41eb74:	4628      	mov	r0, r5
  41eb76:	4b8c      	ldr	r3, [pc, #560]	; (41eda8 <lv_label_get_letter_on+0x250>)
  41eb78:	4798      	blx	r3
  41eb7a:	b928      	cbnz	r0, 41eb88 <lv_label_get_letter_on+0x30>
  41eb7c:	462a      	mov	r2, r5
  41eb7e:	2300      	movs	r3, #0
  41eb80:	488a      	ldr	r0, [pc, #552]	; (41edac <lv_label_get_letter_on+0x254>)
  41eb82:	498b      	ldr	r1, [pc, #556]	; (41edb0 <lv_label_get_letter_on+0x258>)
  41eb84:	4788      	blx	r1
  41eb86:	e7fe      	b.n	41eb86 <lv_label_get_letter_on+0x2e>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
  41eb88:	882f      	ldrh	r7, [r5, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41eb8a:	2212      	movs	r2, #18
  41eb8c:	2100      	movs	r1, #0
  41eb8e:	4620      	mov	r0, r4
  41eb90:	4e88      	ldr	r6, [pc, #544]	; (41edb4 <lv_label_get_letter_on+0x25c>)
  41eb92:	47b0      	blx	r6
  41eb94:	b280      	uxth	r0, r0
  41eb96:	1a3f      	subs	r7, r7, r0
  41eb98:	b23b      	sxth	r3, r7
  41eb9a:	9304      	str	r3, [sp, #16]
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
  41eb9c:	886d      	ldrh	r5, [r5, #2]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41eb9e:	2210      	movs	r2, #16
  41eba0:	2100      	movs	r1, #0
  41eba2:	4620      	mov	r0, r4
  41eba4:	47b0      	blx	r6
  41eba6:	b280      	uxth	r0, r0
  41eba8:	1a2d      	subs	r5, r5, r0
  41ebaa:	b22b      	sxth	r3, r5
  41ebac:	9305      	str	r3, [sp, #20]
    get_txt_coords(label, &txt_coords);
  41ebae:	a90c      	add	r1, sp, #48	; 0x30
  41ebb0:	4620      	mov	r0, r4
  41ebb2:	4b81      	ldr	r3, [pc, #516]	; (41edb8 <lv_label_get_letter_on+0x260>)
  41ebb4:	4798      	blx	r3
    const char * txt         = lv_label_get_text(label);
  41ebb6:	4620      	mov	r0, r4
  41ebb8:	4b80      	ldr	r3, [pc, #512]	; (41edbc <lv_label_get_letter_on+0x264>)
  41ebba:	4798      	blx	r3
  41ebbc:	4680      	mov	r8, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
  41ebbe:	4620      	mov	r0, r4
  41ebc0:	4b7f      	ldr	r3, [pc, #508]	; (41edc0 <lv_label_get_letter_on+0x268>)
  41ebc2:	4798      	blx	r3
  41ebc4:	4605      	mov	r5, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41ebc6:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41ebca:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41ebce:	1a9b      	subs	r3, r3, r2
  41ebd0:	b29b      	uxth	r3, r3
  41ebd2:	3301      	adds	r3, #1
  41ebd4:	b21b      	sxth	r3, r3
  41ebd6:	9307      	str	r3, [sp, #28]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41ebd8:	f248 028e 	movw	r2, #32910	; 0x808e
  41ebdc:	2100      	movs	r1, #0
  41ebde:	4620      	mov	r0, r4
  41ebe0:	4b78      	ldr	r3, [pc, #480]	; (41edc4 <lv_label_get_letter_on+0x26c>)
  41ebe2:	4798      	blx	r3
  41ebe4:	4607      	mov	r7, r0
  41ebe6:	9002      	str	r0, [sp, #8]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41ebe8:	f248 0281 	movw	r2, #32897	; 0x8081
  41ebec:	2100      	movs	r1, #0
  41ebee:	4620      	mov	r0, r4
  41ebf0:	47b0      	blx	r6
  41ebf2:	9006      	str	r0, [sp, #24]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41ebf4:	f248 0280 	movw	r2, #32896	; 0x8080
  41ebf8:	2100      	movs	r1, #0
  41ebfa:	4620      	mov	r0, r4
  41ebfc:	47b0      	blx	r6
  41ebfe:	9003      	str	r0, [sp, #12]
 * @param font_p pointer to a font
 * @return the height of a font
 */
static inline lv_coord_t lv_font_get_line_height(const lv_font_t * font_p)
{
    return font_p->line_height;
  41ec00:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41ec04:	7cab      	ldrb	r3, [r5, #18]
  41ec06:	f013 0f40 	tst.w	r3, #64	; 0x40
  41ec0a:	d133      	bne.n	41ec74 <lv_label_get_letter_on+0x11c>
    lv_txt_flag_t flag       = LV_TXT_FLAG_NONE;
  41ec0c:	2500      	movs	r5, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41ec0e:	f013 0f80 	tst.w	r3, #128	; 0x80
  41ec12:	d001      	beq.n	41ec18 <lv_label_get_letter_on+0xc0>
  41ec14:	f045 0502 	orr.w	r5, r5, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41ec18:	f013 0f07 	tst.w	r3, #7
  41ec1c:	d101      	bne.n	41ec22 <lv_label_get_letter_on+0xca>
  41ec1e:	f045 0510 	orr.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
  41ec22:	4620      	mov	r0, r4
  41ec24:	4b68      	ldr	r3, [pc, #416]	; (41edc8 <lv_label_get_letter_on+0x270>)
  41ec26:	4798      	blx	r3
  41ec28:	4681      	mov	r9, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41ec2a:	2801      	cmp	r0, #1
  41ec2c:	d101      	bne.n	41ec32 <lv_label_get_letter_on+0xda>
  41ec2e:	f045 0504 	orr.w	r5, r5, #4
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41ec32:	f1b9 0f02 	cmp.w	r9, #2
  41ec36:	d101      	bne.n	41ec3c <lv_label_get_letter_on+0xe4>
  41ec38:	f045 0508 	orr.w	r5, r5, #8
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41ec3c:	2400      	movs	r4, #0
  41ec3e:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
  41ec40:	eb08 0b06 	add.w	fp, r8, r6
  41ec44:	f818 3006 	ldrb.w	r3, [r8, r6]
  41ec48:	2b00      	cmp	r3, #0
  41ec4a:	d055      	beq.n	41ecf8 <lv_label_get_letter_on+0x1a0>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
  41ec4c:	9500      	str	r5, [sp, #0]
  41ec4e:	9b07      	ldr	r3, [sp, #28]
  41ec50:	9a03      	ldr	r2, [sp, #12]
  41ec52:	9902      	ldr	r1, [sp, #8]
  41ec54:	4658      	mov	r0, fp
  41ec56:	4f5d      	ldr	r7, [pc, #372]	; (41edcc <lv_label_get_letter_on+0x274>)
  41ec58:	47b8      	blx	r7
  41ec5a:	4430      	add	r0, r6
        if(pos.y <= y + letter_height) {
  41ec5c:	eb04 030a 	add.w	r3, r4, sl
  41ec60:	9a05      	ldr	r2, [sp, #20]
  41ec62:	429a      	cmp	r2, r3
  41ec64:	dd08      	ble.n	41ec78 <lv_label_get_letter_on+0x120>
        y += letter_height + line_space;
  41ec66:	9b06      	ldr	r3, [sp, #24]
  41ec68:	4453      	add	r3, sl
  41ec6a:	fa14 f383 	uxtah	r3, r4, r3
  41ec6e:	b21c      	sxth	r4, r3
        line_start = new_line_start;
  41ec70:	4606      	mov	r6, r0
  41ec72:	e7e5      	b.n	41ec40 <lv_label_get_letter_on+0xe8>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41ec74:	2501      	movs	r5, #1
  41ec76:	e7ca      	b.n	41ec0e <lv_label_get_letter_on+0xb6>
  41ec78:	4607      	mov	r7, r0
            uint32_t tmp = new_line_start;
  41ec7a:	a90e      	add	r1, sp, #56	; 0x38
  41ec7c:	f841 0d14 	str.w	r0, [r1, #-20]!
            letter = _lv_txt_encoded_prev(txt, &tmp);
  41ec80:	4b53      	ldr	r3, [pc, #332]	; (41edd0 <lv_label_get_letter_on+0x278>)
  41ec82:	681b      	ldr	r3, [r3, #0]
  41ec84:	4640      	mov	r0, r8
  41ec86:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
  41ec88:	280a      	cmp	r0, #10
  41ec8a:	d003      	beq.n	41ec94 <lv_label_get_letter_on+0x13c>
  41ec8c:	f818 3007 	ldrb.w	r3, [r8, r7]
  41ec90:	b903      	cbnz	r3, 41ec94 <lv_label_get_letter_on+0x13c>
  41ec92:	3701      	adds	r7, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
  41ec94:	f1b9 0f01 	cmp.w	r9, #1
  41ec98:	d130      	bne.n	41ecfc <lv_label_get_letter_on+0x1a4>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41ec9a:	9500      	str	r5, [sp, #0]
  41ec9c:	9b03      	ldr	r3, [sp, #12]
  41ec9e:	9a02      	ldr	r2, [sp, #8]
  41eca0:	1bb9      	subs	r1, r7, r6
  41eca2:	4658      	mov	r0, fp
  41eca4:	4c4b      	ldr	r4, [pc, #300]	; (41edd4 <lv_label_get_letter_on+0x27c>)
  41eca6:	47a0      	blx	r4
  41eca8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41ecac:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41ecb0:	1a9b      	subs	r3, r3, r2
  41ecb2:	b29b      	uxth	r3, r3
  41ecb4:	3301      	adds	r3, #1
  41ecb6:	b21b      	sxth	r3, r3
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
  41ecb8:	2b00      	cmp	r3, #0
  41ecba:	da00      	bge.n	41ecbe <lv_label_get_letter_on+0x166>
  41ecbc:	3301      	adds	r3, #1
  41ecbe:	105c      	asrs	r4, r3, #1
  41ecc0:	4603      	mov	r3, r0
  41ecc2:	2800      	cmp	r0, #0
  41ecc4:	da00      	bge.n	41ecc8 <lv_label_get_letter_on+0x170>
  41ecc6:	1c43      	adds	r3, r0, #1
  41ecc8:	f343 034f 	sbfx	r3, r3, #1, #16
  41eccc:	1ae4      	subs	r4, r4, r3
  41ecce:	b224      	sxth	r4, r4
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
  41ecd0:	2300      	movs	r3, #0
  41ecd2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint32_t i = 0;
  41ecd6:	930a      	str	r3, [sp, #40]	; 0x28
    if(new_line_start > 0) {
  41ecd8:	2f00      	cmp	r7, #0
  41ecda:	d162      	bne.n	41eda2 <lv_label_get_letter_on+0x24a>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
  41ecdc:	4c3e      	ldr	r4, [pc, #248]	; (41edd8 <lv_label_get_letter_on+0x280>)
  41ecde:	6823      	ldr	r3, [r4, #0]
  41ece0:	990a      	ldr	r1, [sp, #40]	; 0x28
  41ece2:	4658      	mov	r0, fp
  41ece4:	4798      	blx	r3
  41ece6:	4605      	mov	r5, r0
    return logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
  41ece8:	6823      	ldr	r3, [r4, #0]
  41ecea:	4631      	mov	r1, r6
  41ecec:	4640      	mov	r0, r8
  41ecee:	4798      	blx	r3
}
  41ecf0:	4428      	add	r0, r5
  41ecf2:	b00f      	add	sp, #60	; 0x3c
  41ecf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  41ecf8:	4637      	mov	r7, r6
  41ecfa:	e7cb      	b.n	41ec94 <lv_label_get_letter_on+0x13c>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
  41ecfc:	f1b9 0f02 	cmp.w	r9, #2
  41ed00:	d111      	bne.n	41ed26 <lv_label_get_letter_on+0x1ce>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
  41ed02:	9500      	str	r5, [sp, #0]
  41ed04:	9b03      	ldr	r3, [sp, #12]
  41ed06:	9a02      	ldr	r2, [sp, #8]
  41ed08:	1bb9      	subs	r1, r7, r6
  41ed0a:	4658      	mov	r0, fp
  41ed0c:	4c31      	ldr	r4, [pc, #196]	; (41edd4 <lv_label_get_letter_on+0x27c>)
  41ed0e:	47a0      	blx	r4
  41ed10:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
  41ed14:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
  41ed18:	1a9b      	subs	r3, r3, r2
  41ed1a:	b29b      	uxth	r3, r3
  41ed1c:	3301      	adds	r3, #1
  41ed1e:	b29b      	uxth	r3, r3
        x += lv_area_get_width(&txt_coords) - line_w;
  41ed20:	1a1b      	subs	r3, r3, r0
  41ed22:	b21c      	sxth	r4, r3
  41ed24:	e7d4      	b.n	41ecd0 <lv_label_get_letter_on+0x178>
    lv_coord_t x = 0;
  41ed26:	2400      	movs	r4, #0
  41ed28:	e7d2      	b.n	41ecd0 <lv_label_get_letter_on+0x178>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
  41ed2a:	4652      	mov	r2, sl
  41ed2c:	9905      	ldr	r1, [sp, #20]
  41ed2e:	9802      	ldr	r0, [sp, #8]
  41ed30:	4b2a      	ldr	r3, [pc, #168]	; (41eddc <lv_label_get_letter_on+0x284>)
  41ed32:	4798      	blx	r3
            if(pos.x < x + gw || i + line_start == new_line_start || txt[i_act + line_start] == '\0') {
  41ed34:	fa04 f380 	sxtah	r3, r4, r0
  41ed38:	9a04      	ldr	r2, [sp, #16]
  41ed3a:	429a      	cmp	r2, r3
  41ed3c:	db2e      	blt.n	41ed9c <lv_label_get_letter_on+0x244>
  41ed3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ed40:	18f2      	adds	r2, r6, r3
  41ed42:	4297      	cmp	r7, r2
  41ed44:	d02a      	beq.n	41ed9c <lv_label_get_letter_on+0x244>
  41ed46:	eb06 0209 	add.w	r2, r6, r9
  41ed4a:	f818 2002 	ldrb.w	r2, [r8, r2]
  41ed4e:	b32a      	cbz	r2, 41ed9c <lv_label_get_letter_on+0x244>
            x += gw;
  41ed50:	4404      	add	r4, r0
            x += letter_space;
  41ed52:	9a03      	ldr	r2, [sp, #12]
  41ed54:	fa12 f484 	uxtah	r4, r2, r4
  41ed58:	b224      	sxth	r4, r4
            i_act = i;
  41ed5a:	4699      	mov	r9, r3
        while(i + line_start < new_line_start) {
  41ed5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ed5e:	4433      	add	r3, r6
  41ed60:	429f      	cmp	r7, r3
  41ed62:	d9bb      	bls.n	41ecdc <lv_label_get_letter_on+0x184>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
  41ed64:	f8df a07c 	ldr.w	sl, [pc, #124]	; 41ede4 <lv_label_get_letter_on+0x28c>
  41ed68:	f8da 3000 	ldr.w	r3, [sl]
  41ed6c:	a90a      	add	r1, sp, #40	; 0x28
  41ed6e:	4658      	mov	r0, fp
  41ed70:	4798      	blx	r3
  41ed72:	9005      	str	r0, [sp, #20]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
  41ed74:	f8da 3000 	ldr.w	r3, [sl]
  41ed78:	2100      	movs	r1, #0
  41ed7a:	980a      	ldr	r0, [sp, #40]	; 0x28
  41ed7c:	4458      	add	r0, fp
  41ed7e:	4798      	blx	r3
  41ed80:	4682      	mov	sl, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
  41ed82:	f015 0f01 	tst.w	r5, #1
  41ed86:	d0d0      	beq.n	41ed2a <lv_label_get_letter_on+0x1d2>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
  41ed88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  41ed8a:	f81b 1003 	ldrb.w	r1, [fp, r3]
  41ed8e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
  41ed92:	4b13      	ldr	r3, [pc, #76]	; (41ede0 <lv_label_get_letter_on+0x288>)
  41ed94:	4798      	blx	r3
  41ed96:	2800      	cmp	r0, #0
  41ed98:	d1e0      	bne.n	41ed5c <lv_label_get_letter_on+0x204>
  41ed9a:	e7c6      	b.n	41ed2a <lv_label_get_letter_on+0x1d2>
                i = i_act;
  41ed9c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
                break;
  41eda0:	e79c      	b.n	41ecdc <lv_label_get_letter_on+0x184>
  41eda2:	f04f 0900 	mov.w	r9, #0
  41eda6:	e7d9      	b.n	41ed5c <lv_label_get_letter_on+0x204>
  41eda8:	004157b9 	.word	0x004157b9
  41edac:	004260c4 	.word	0x004260c4
  41edb0:	004157c5 	.word	0x004157c5
  41edb4:	00406f8d 	.word	0x00406f8d
  41edb8:	0041e93d 	.word	0x0041e93d
  41edbc:	0041ea85 	.word	0x0041ea85
  41edc0:	00407b5d 	.word	0x00407b5d
  41edc4:	00406e85 	.word	0x00406e85
  41edc8:	0041eae9 	.word	0x0041eae9
  41edcc:	00416c95 	.word	0x00416c95
  41edd0:	2040005c 	.word	0x2040005c
  41edd4:	00416d75 	.word	0x00416d75
  41edd8:	20400054 	.word	0x20400054
  41eddc:	0041347d 	.word	0x0041347d
  41ede0:	00416ae1 	.word	0x00416ae1
  41ede4:	20400058 	.word	0x20400058

0041ede8 <lv_label_get_text_sel_start>:
{
  41ede8:	b510      	push	{r4, lr}
  41edea:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41edec:	4b05      	ldr	r3, [pc, #20]	; (41ee04 <lv_label_get_text_sel_start+0x1c>)
  41edee:	4798      	blx	r3
  41edf0:	b110      	cbz	r0, 41edf8 <lv_label_get_text_sel_start+0x10>
}
  41edf2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41edf6:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41edf8:	4622      	mov	r2, r4
  41edfa:	2300      	movs	r3, #0
  41edfc:	4802      	ldr	r0, [pc, #8]	; (41ee08 <lv_label_get_text_sel_start+0x20>)
  41edfe:	4903      	ldr	r1, [pc, #12]	; (41ee0c <lv_label_get_text_sel_start+0x24>)
  41ee00:	4788      	blx	r1
  41ee02:	e7fe      	b.n	41ee02 <lv_label_get_text_sel_start+0x1a>
  41ee04:	004157b9 	.word	0x004157b9
  41ee08:	004260c4 	.word	0x004260c4
  41ee0c:	004157c5 	.word	0x004157c5

0041ee10 <lv_label_get_text_sel_end>:
{
  41ee10:	b510      	push	{r4, lr}
  41ee12:	4604      	mov	r4, r0
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41ee14:	4b05      	ldr	r3, [pc, #20]	; (41ee2c <lv_label_get_text_sel_end+0x1c>)
  41ee16:	4798      	blx	r3
  41ee18:	b110      	cbz	r0, 41ee20 <lv_label_get_text_sel_end+0x10>
}
  41ee1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
  41ee1e:	bd10      	pop	{r4, pc}
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41ee20:	4622      	mov	r2, r4
  41ee22:	2300      	movs	r3, #0
  41ee24:	4802      	ldr	r0, [pc, #8]	; (41ee30 <lv_label_get_text_sel_end+0x20>)
  41ee26:	4903      	ldr	r1, [pc, #12]	; (41ee34 <lv_label_get_text_sel_end+0x24>)
  41ee28:	4788      	blx	r1
  41ee2a:	e7fe      	b.n	41ee2a <lv_label_get_text_sel_end+0x1a>
  41ee2c:	004157b9 	.word	0x004157b9
  41ee30:	004260c4 	.word	0x004260c4
  41ee34:	004157c5 	.word	0x004157c5

0041ee38 <lv_label_design>:
    if(mode == LV_DESIGN_COVER_CHK)
  41ee38:	2a02      	cmp	r2, #2
  41ee3a:	f000 812a 	beq.w	41f092 <lv_label_design+0x25a>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
  41ee3e:	b10a      	cbz	r2, 41ee44 <lv_label_design+0xc>
    return LV_DESIGN_RES_OK;
  41ee40:	2000      	movs	r0, #0
  41ee42:	4770      	bx	lr
{
  41ee44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  41ee48:	b0ab      	sub	sp, #172	; 0xac
  41ee4a:	460f      	mov	r7, r1
  41ee4c:	4606      	mov	r6, r0
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41ee4e:	4b92      	ldr	r3, [pc, #584]	; (41f098 <lv_label_design+0x260>)
  41ee50:	4798      	blx	r3
  41ee52:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
  41ee54:	2204      	movs	r2, #4
  41ee56:	2100      	movs	r1, #0
  41ee58:	4630      	mov	r0, r6
  41ee5a:	4c90      	ldr	r4, [pc, #576]	; (41f09c <lv_label_design+0x264>)
  41ee5c:	47a0      	blx	r4
  41ee5e:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
  41ee60:	2205      	movs	r2, #5
  41ee62:	2100      	movs	r1, #0
  41ee64:	4630      	mov	r0, r6
  41ee66:	47a0      	blx	r4
        lv_area_copy(&bg_coords, &label->coords);
  41ee68:	f106 0410 	add.w	r4, r6, #16
    uint8_t * d8 = (uint8_t *)dst;
  41ee6c:	aa06      	add	r2, sp, #24
  41ee6e:	2308      	movs	r3, #8
  41ee70:	e004      	b.n	41ee7c <lv_label_design+0x44>
        *d8 = *s8;
  41ee72:	f814 5b01 	ldrb.w	r5, [r4], #1
  41ee76:	f802 5b01 	strb.w	r5, [r2], #1
        len--;
  41ee7a:	3b01      	subs	r3, #1
    while(len) {
  41ee7c:	2b00      	cmp	r3, #0
  41ee7e:	d1f8      	bne.n	41ee72 <lv_label_design+0x3a>
        bg_coords.x1 -= w;
  41ee80:	fa1f f989 	uxth.w	r9, r9
  41ee84:	f8bd 3018 	ldrh.w	r3, [sp, #24]
  41ee88:	eba3 0309 	sub.w	r3, r3, r9
  41ee8c:	f8ad 3018 	strh.w	r3, [sp, #24]
        bg_coords.x2 += w;
  41ee90:	f8bd 301c 	ldrh.w	r3, [sp, #28]
  41ee94:	4499      	add	r9, r3
  41ee96:	f8ad 901c 	strh.w	r9, [sp, #28]
        bg_coords.y1 -= h;
  41ee9a:	b280      	uxth	r0, r0
  41ee9c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
  41eea0:	1a1b      	subs	r3, r3, r0
  41eea2:	f8ad 301a 	strh.w	r3, [sp, #26]
        bg_coords.y2 += h;
  41eea6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
  41eeaa:	4418      	add	r0, r3
  41eeac:	f8ad 001e 	strh.w	r0, [sp, #30]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
  41eeb0:	a815      	add	r0, sp, #84	; 0x54
  41eeb2:	4b7b      	ldr	r3, [pc, #492]	; (41f0a0 <lv_label_design+0x268>)
  41eeb4:	4798      	blx	r3
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
  41eeb6:	aa15      	add	r2, sp, #84	; 0x54
  41eeb8:	2100      	movs	r1, #0
  41eeba:	4630      	mov	r0, r6
  41eebc:	4b79      	ldr	r3, [pc, #484]	; (41f0a4 <lv_label_design+0x26c>)
  41eebe:	4798      	blx	r3
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
  41eec0:	aa15      	add	r2, sp, #84	; 0x54
  41eec2:	4639      	mov	r1, r7
  41eec4:	a806      	add	r0, sp, #24
  41eec6:	4b78      	ldr	r3, [pc, #480]	; (41f0a8 <lv_label_design+0x270>)
  41eec8:	4798      	blx	r3
        get_txt_coords(label, &txt_coords);
  41eeca:	a908      	add	r1, sp, #32
  41eecc:	4630      	mov	r0, r6
  41eece:	4b77      	ldr	r3, [pc, #476]	; (41f0ac <lv_label_design+0x274>)
  41eed0:	4798      	blx	r3
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
  41eed2:	aa08      	add	r2, sp, #32
  41eed4:	4639      	mov	r1, r7
  41eed6:	a80a      	add	r0, sp, #40	; 0x28
  41eed8:	4b75      	ldr	r3, [pc, #468]	; (41f0b0 <lv_label_design+0x278>)
  41eeda:	4798      	blx	r3
        if(!is_common) return LV_DESIGN_RES_OK;
  41eedc:	b910      	cbnz	r0, 41eee4 <lv_label_design+0xac>
}
  41eede:	b02b      	add	sp, #172	; 0xac
  41eee0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        lv_label_align_t align = lv_label_get_align(label);
  41eee4:	4630      	mov	r0, r6
  41eee6:	4b73      	ldr	r3, [pc, #460]	; (41f0b4 <lv_label_design+0x27c>)
  41eee8:	4798      	blx	r3
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41eeea:	f898 3012 	ldrb.w	r3, [r8, #18]
  41eeee:	f013 0f40 	tst.w	r3, #64	; 0x40
  41eef2:	d13f      	bne.n	41ef74 <lv_label_design+0x13c>
        lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41eef4:	2400      	movs	r4, #0
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41eef6:	f013 0f80 	tst.w	r3, #128	; 0x80
  41eefa:	d13d      	bne.n	41ef78 <lv_label_design+0x140>
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41eefc:	f013 0f07 	tst.w	r3, #7
  41ef00:	d101      	bne.n	41ef06 <lv_label_design+0xce>
  41ef02:	f044 0410 	orr.w	r4, r4, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41ef06:	2801      	cmp	r0, #1
  41ef08:	d039      	beq.n	41ef7e <lv_label_design+0x146>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41ef0a:	2802      	cmp	r0, #2
  41ef0c:	d03a      	beq.n	41ef84 <lv_label_design+0x14c>
        lv_draw_label_dsc_init(&label_draw_dsc);
  41ef0e:	a80c      	add	r0, sp, #48	; 0x30
  41ef10:	4b69      	ldr	r3, [pc, #420]	; (41f0b8 <lv_label_design+0x280>)
  41ef12:	4798      	blx	r3
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
  41ef14:	4630      	mov	r0, r6
  41ef16:	4b69      	ldr	r3, [pc, #420]	; (41f0bc <lv_label_design+0x284>)
  41ef18:	4798      	blx	r3
  41ef1a:	9011      	str	r0, [sp, #68]	; 0x44
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
  41ef1c:	4630      	mov	r0, r6
  41ef1e:	4b68      	ldr	r3, [pc, #416]	; (41f0c0 <lv_label_design+0x288>)
  41ef20:	4798      	blx	r3
  41ef22:	9012      	str	r0, [sp, #72]	; 0x48
        label_draw_dsc.ofs_x = ext->offset.x;
  41ef24:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41ef28:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
        label_draw_dsc.ofs_y = ext->offset.y;
  41ef2c:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41ef30:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        label_draw_dsc.flag = flag;
  41ef34:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
  41ef38:	aa0c      	add	r2, sp, #48	; 0x30
  41ef3a:	2100      	movs	r1, #0
  41ef3c:	4630      	mov	r0, r6
  41ef3e:	4b61      	ldr	r3, [pc, #388]	; (41f0c4 <lv_label_design+0x28c>)
  41ef40:	4798      	blx	r3
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41ef42:	f898 2012 	ldrb.w	r2, [r8, #18]
  41ef46:	f002 0307 	and.w	r3, r2, #7
  41ef4a:	3b03      	subs	r3, #3
  41ef4c:	b2db      	uxtb	r3, r3
  41ef4e:	2b01      	cmp	r3, #1
  41ef50:	d91b      	bls.n	41ef8a <lv_label_design+0x152>
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41ef52:	f8d8 3000 	ldr.w	r3, [r8]
  41ef56:	2200      	movs	r2, #0
  41ef58:	9200      	str	r2, [sp, #0]
  41ef5a:	aa0c      	add	r2, sp, #48	; 0x30
  41ef5c:	a90a      	add	r1, sp, #40	; 0x28
  41ef5e:	a808      	add	r0, sp, #32
  41ef60:	4d59      	ldr	r5, [pc, #356]	; (41f0c8 <lv_label_design+0x290>)
  41ef62:	47a8      	blx	r5
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41ef64:	f898 3012 	ldrb.w	r3, [r8, #18]
  41ef68:	f003 0307 	and.w	r3, r3, #7
  41ef6c:	2b04      	cmp	r3, #4
  41ef6e:	d034      	beq.n	41efda <lv_label_design+0x1a2>
    return LV_DESIGN_RES_OK;
  41ef70:	2000      	movs	r0, #0
  41ef72:	e7b4      	b.n	41eede <lv_label_design+0xa6>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41ef74:	2401      	movs	r4, #1
  41ef76:	e7be      	b.n	41eef6 <lv_label_design+0xbe>
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41ef78:	f044 0402 	orr.w	r4, r4, #2
  41ef7c:	e7be      	b.n	41eefc <lv_label_design+0xc4>
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
  41ef7e:	f044 0404 	orr.w	r4, r4, #4
  41ef82:	e7c2      	b.n	41ef0a <lv_label_design+0xd2>
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
  41ef84:	f044 0408 	orr.w	r4, r4, #8
  41ef88:	e7c1      	b.n	41ef0e <lv_label_design+0xd6>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
  41ef8a:	f002 0230 	and.w	r2, r2, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
  41ef8e:	2a20      	cmp	r2, #32
  41ef90:	bf18      	it	ne
  41ef92:	2a10      	cmpne	r2, #16
  41ef94:	d1dd      	bne.n	41ef52 <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41ef96:	f8d8 1000 	ldr.w	r1, [r8]
  41ef9a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41ef9e:	9402      	str	r4, [sp, #8]
  41efa0:	f647 4218 	movw	r2, #31768	; 0x7c18
  41efa4:	9201      	str	r2, [sp, #4]
  41efa6:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41efaa:	9200      	str	r2, [sp, #0]
  41efac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41efae:	a805      	add	r0, sp, #20
  41efb0:	4d46      	ldr	r5, [pc, #280]	; (41f0cc <lv_label_design+0x294>)
  41efb2:	47a8      	blx	r5
            if(size.x > lv_area_get_width(&txt_coords)) {
  41efb4:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41efb8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41efbc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  41efc0:	1a5b      	subs	r3, r3, r1
  41efc2:	b29b      	uxth	r3, r3
  41efc4:	3301      	adds	r3, #1
  41efc6:	b21b      	sxth	r3, r3
  41efc8:	429a      	cmp	r2, r3
  41efca:	ddc2      	ble.n	41ef52 <lv_label_design+0x11a>
                label_draw_dsc.flag &= ~LV_TXT_FLAG_RIGHT;
  41efcc:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
  41efd0:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
  41efd4:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  41efd8:	e7bb      	b.n	41ef52 <lv_label_design+0x11a>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
  41efda:	f8d8 1000 	ldr.w	r1, [r8]
  41efde:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
  41efe2:	9402      	str	r4, [sp, #8]
  41efe4:	f647 4218 	movw	r2, #31768	; 0x7c18
  41efe8:	9201      	str	r2, [sp, #4]
  41efea:	f9bd 203e 	ldrsh.w	r2, [sp, #62]	; 0x3e
  41efee:	9200      	str	r2, [sp, #0]
  41eff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41eff2:	a805      	add	r0, sp, #20
  41eff4:	4c35      	ldr	r4, [pc, #212]	; (41f0cc <lv_label_design+0x294>)
  41eff6:	47a0      	blx	r4
            if(size.x > lv_area_get_width(&txt_coords)) {
  41eff8:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
  41effc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  41f000:	f8bd 1020 	ldrh.w	r1, [sp, #32]
  41f004:	1a5b      	subs	r3, r3, r1
  41f006:	b29b      	uxth	r3, r3
  41f008:	3301      	adds	r3, #1
  41f00a:	b21b      	sxth	r3, r3
  41f00c:	429a      	cmp	r2, r3
  41f00e:	dc23      	bgt.n	41f058 <lv_label_design+0x220>
            if(size.y > lv_area_get_height(&txt_coords)) {
  41f010:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f014:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
  41f018:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
  41f01c:	1a5b      	subs	r3, r3, r1
  41f01e:	b29b      	uxth	r3, r3
  41f020:	3301      	adds	r3, #1
  41f022:	b21b      	sxth	r3, r3
  41f024:	429a      	cmp	r2, r3
  41f026:	dda3      	ble.n	41ef70 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x;
  41f028:	f9b8 300e 	ldrsh.w	r3, [r8, #14]
  41f02c:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
  41f030:	f8b8 3010 	ldrh.w	r3, [r8, #16]
  41f034:	fa13 f382 	uxtah	r3, r3, r2
  41f038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f03a:	8912      	ldrh	r2, [r2, #8]
  41f03c:	fa12 f383 	uxtah	r3, r2, r3
  41f040:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41f044:	f8d8 3000 	ldr.w	r3, [r8]
  41f048:	2200      	movs	r2, #0
  41f04a:	9200      	str	r2, [sp, #0]
  41f04c:	aa0c      	add	r2, sp, #48	; 0x30
  41f04e:	a90a      	add	r1, sp, #40	; 0x28
  41f050:	a808      	add	r0, sp, #32
  41f052:	4c1d      	ldr	r4, [pc, #116]	; (41f0c8 <lv_label_design+0x290>)
  41f054:	47a0      	blx	r4
  41f056:	e78b      	b.n	41ef70 <lv_label_design+0x138>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41f058:	f8b8 400e 	ldrh.w	r4, [r8, #14]
  41f05c:	fa14 f282 	uxtah	r2, r4, r2
  41f060:	b294      	uxth	r4, r2
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
  41f062:	2220      	movs	r2, #32
  41f064:	4611      	mov	r1, r2
  41f066:	980e      	ldr	r0, [sp, #56]	; 0x38
  41f068:	4b19      	ldr	r3, [pc, #100]	; (41f0d0 <lv_label_design+0x298>)
  41f06a:	4798      	blx	r3
  41f06c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
  41f070:	fa14 f480 	uxtah	r4, r4, r0
  41f074:	f8ad 404c 	strh.w	r4, [sp, #76]	; 0x4c
                label_draw_dsc.ofs_y = ext->offset.y;
  41f078:	f9b8 3010 	ldrsh.w	r3, [r8, #16]
  41f07c:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
  41f080:	f8d8 3000 	ldr.w	r3, [r8]
  41f084:	2200      	movs	r2, #0
  41f086:	9200      	str	r2, [sp, #0]
  41f088:	aa0c      	add	r2, sp, #48	; 0x30
  41f08a:	a90a      	add	r1, sp, #40	; 0x28
  41f08c:	a808      	add	r0, sp, #32
  41f08e:	47a8      	blx	r5
  41f090:	e7be      	b.n	41f010 <lv_label_design+0x1d8>
        return LV_DESIGN_RES_NOT_COVER;
  41f092:	2002      	movs	r0, #2
  41f094:	4770      	bx	lr
  41f096:	bf00      	nop
  41f098:	00407b5d 	.word	0x00407b5d
  41f09c:	00406f8d 	.word	0x00406f8d
  41f0a0:	00411d9d 	.word	0x00411d9d
  41f0a4:	00407e05 	.word	0x00407e05
  41f0a8:	00411de9 	.word	0x00411de9
  41f0ac:	0041e93d 	.word	0x0041e93d
  41f0b0:	00414ef3 	.word	0x00414ef3
  41f0b4:	0041eae9 	.word	0x0041eae9
  41f0b8:	0040d965 	.word	0x0040d965
  41f0bc:	0041ede9 	.word	0x0041ede9
  41f0c0:	0041ee11 	.word	0x0041ee11
  41f0c4:	00408435 	.word	0x00408435
  41f0c8:	0040d9ad 	.word	0x0040d9ad
  41f0cc:	00416e21 	.word	0x00416e21
  41f0d0:	0041347d 	.word	0x0041347d

0041f0d4 <lv_label_get_style>:
    switch(type) {
  41f0d4:	b909      	cbnz	r1, 41f0da <lv_label_get_style+0x6>
            style_dsc_p = &label->style_list;
  41f0d6:	3028      	adds	r0, #40	; 0x28
            break;
  41f0d8:	4770      	bx	lr
            style_dsc_p = NULL;
  41f0da:	2000      	movs	r0, #0
}
  41f0dc:	4770      	bx	lr
	...

0041f0e0 <lv_label_refr_text>:
{
  41f0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  41f0e4:	b09b      	sub	sp, #108	; 0x6c
  41f0e6:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f0e8:	4b95      	ldr	r3, [pc, #596]	; (41f340 <lv_label_refr_text+0x260>)
  41f0ea:	4798      	blx	r3
    if(ext->text == NULL) return;
  41f0ec:	6803      	ldr	r3, [r0, #0]
  41f0ee:	2b00      	cmp	r3, #0
  41f0f0:	d049      	beq.n	41f186 <lv_label_refr_text+0xa6>
  41f0f2:	4606      	mov	r6, r0
    get_txt_coords(label, &txt_coords);
  41f0f4:	a918      	add	r1, sp, #96	; 0x60
  41f0f6:	4628      	mov	r0, r5
  41f0f8:	4b92      	ldr	r3, [pc, #584]	; (41f344 <lv_label_refr_text+0x264>)
  41f0fa:	4798      	blx	r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f0fc:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  41f100:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41f104:	1ae4      	subs	r4, r4, r3
  41f106:	b2a4      	uxth	r4, r4
  41f108:	3401      	adds	r4, #1
  41f10a:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
  41f10c:	f248 028e 	movw	r2, #32910	; 0x808e
  41f110:	2100      	movs	r1, #0
  41f112:	4628      	mov	r0, r5
  41f114:	4b8c      	ldr	r3, [pc, #560]	; (41f348 <lv_label_refr_text+0x268>)
  41f116:	4798      	blx	r3
  41f118:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
  41f11a:	f248 0281 	movw	r2, #32897	; 0x8081
  41f11e:	2100      	movs	r1, #0
  41f120:	4628      	mov	r0, r5
  41f122:	4f8a      	ldr	r7, [pc, #552]	; (41f34c <lv_label_refr_text+0x26c>)
  41f124:	47b8      	blx	r7
  41f126:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
  41f128:	f248 0280 	movw	r2, #32896	; 0x8080
  41f12c:	2100      	movs	r1, #0
  41f12e:	4628      	mov	r0, r5
  41f130:	47b8      	blx	r7
  41f132:	4607      	mov	r7, r0
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f134:	7cb3      	ldrb	r3, [r6, #18]
  41f136:	f013 0f40 	tst.w	r3, #64	; 0x40
  41f13a:	d127      	bne.n	41f18c <lv_label_refr_text+0xac>
    lv_txt_flag_t flag = LV_TXT_FLAG_NONE;
  41f13c:	2200      	movs	r2, #0
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f13e:	f013 0f80 	tst.w	r3, #128	; 0x80
  41f142:	d125      	bne.n	41f190 <lv_label_refr_text+0xb0>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
  41f144:	f013 0f07 	tst.w	r3, #7
  41f148:	d101      	bne.n	41f14e <lv_label_refr_text+0x6e>
  41f14a:	f042 0210 	orr.w	r2, r2, #16
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
  41f14e:	6831      	ldr	r1, [r6, #0]
  41f150:	9202      	str	r2, [sp, #8]
  41f152:	9401      	str	r4, [sp, #4]
  41f154:	f8cd 9000 	str.w	r9, [sp]
  41f158:	463b      	mov	r3, r7
  41f15a:	4642      	mov	r2, r8
  41f15c:	a817      	add	r0, sp, #92	; 0x5c
  41f15e:	4c7c      	ldr	r4, [pc, #496]	; (41f350 <lv_label_refr_text+0x270>)
  41f160:	47a0      	blx	r4
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
  41f162:	7cb3      	ldrb	r3, [r6, #18]
  41f164:	f013 0307 	ands.w	r3, r3, #7
  41f168:	d015      	beq.n	41f196 <lv_label_refr_text+0xb6>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
  41f16a:	2b03      	cmp	r3, #3
  41f16c:	d039      	beq.n	41f1e2 <lv_label_refr_text+0x102>
    else if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
  41f16e:	2b04      	cmp	r3, #4
  41f170:	f000 8104 	beq.w	41f37c <lv_label_refr_text+0x29c>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
  41f174:	2b02      	cmp	r3, #2
  41f176:	f000 8180 	beq.w	41f47a <lv_label_refr_text+0x39a>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
  41f17a:	2b01      	cmp	r3, #1
  41f17c:	f000 821c 	beq.w	41f5b8 <lv_label_refr_text+0x4d8>
    lv_obj_invalidate(label);
  41f180:	4628      	mov	r0, r5
  41f182:	4b74      	ldr	r3, [pc, #464]	; (41f354 <lv_label_refr_text+0x274>)
  41f184:	4798      	blx	r3
}
  41f186:	b01b      	add	sp, #108	; 0x6c
  41f188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
  41f18c:	2201      	movs	r2, #1
  41f18e:	e7d6      	b.n	41f13e <lv_label_refr_text+0x5e>
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
  41f190:	f042 0202 	orr.w	r2, r2, #2
  41f194:	e7d6      	b.n	41f144 <lv_label_refr_text+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
  41f196:	2212      	movs	r2, #18
  41f198:	2100      	movs	r1, #0
  41f19a:	4628      	mov	r0, r5
  41f19c:	4e6b      	ldr	r6, [pc, #428]	; (41f34c <lv_label_refr_text+0x26c>)
  41f19e:	47b0      	blx	r6
  41f1a0:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
  41f1a2:	2213      	movs	r2, #19
  41f1a4:	2100      	movs	r1, #0
  41f1a6:	4628      	mov	r0, r5
  41f1a8:	47b0      	blx	r6
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
  41f1aa:	4420      	add	r0, r4
  41f1ac:	f8bd 405c 	ldrh.w	r4, [sp, #92]	; 0x5c
  41f1b0:	4420      	add	r0, r4
  41f1b2:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f1b6:	2210      	movs	r2, #16
  41f1b8:	2100      	movs	r1, #0
  41f1ba:	4628      	mov	r0, r5
  41f1bc:	47b0      	blx	r6
  41f1be:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f1c0:	2211      	movs	r2, #17
  41f1c2:	2100      	movs	r1, #0
  41f1c4:	4628      	mov	r0, r5
  41f1c6:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  41f1c8:	1822      	adds	r2, r4, r0
  41f1ca:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  41f1ce:	4402      	add	r2, r0
  41f1d0:	b212      	sxth	r2, r2
  41f1d2:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
        lv_obj_set_size(label, size.x, size.y);
  41f1d6:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
  41f1da:	4628      	mov	r0, r5
  41f1dc:	4b5e      	ldr	r3, [pc, #376]	; (41f358 <lv_label_refr_text+0x278>)
  41f1de:	4798      	blx	r3
  41f1e0:	e7ce      	b.n	41f180 <lv_label_refr_text+0xa0>
        lv_anim_init(&a);
  41f1e2:	a806      	add	r0, sp, #24
  41f1e4:	4b5d      	ldr	r3, [pc, #372]	; (41f35c <lv_label_refr_text+0x27c>)
  41f1e6:	4798      	blx	r3
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param var pointer to a variable to animate
 */
static inline void lv_anim_set_var(lv_anim_t * a, void * var)
{
    a->var     = var;
  41f1e8:	9506      	str	r5, [sp, #24]
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param cnt repeat count or `LV_ANIM_REPEAT_INFINITE` for infinite repetition. 0: to disable repetition.
 */
static inline void lv_anim_set_repeat_count(lv_anim_t * a, uint16_t cnt)
{
    a->repeat_cnt       = cnt;
  41f1ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f1ee:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41f1f2:	2220      	movs	r2, #32
  41f1f4:	4611      	mov	r1, r2
  41f1f6:	4640      	mov	r0, r8
  41f1f8:	4b59      	ldr	r3, [pc, #356]	; (41f360 <lv_label_refr_text+0x280>)
  41f1fa:	4798      	blx	r3
  41f1fc:	4438      	add	r0, r7
  41f1fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  41f202:	fb03 f300 	mul.w	r3, r3, r0
                                        ext->anim_speed) *
  41f206:	89b0      	ldrh	r0, [r6, #12]
        lv_anim_set_playback_delay(&a, (((lv_font_get_glyph_width(font, ' ', ' ') + letter_space) * 1000) /
  41f208:	fb93 f3f0 	sdiv	r3, r3, r0
  41f20c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  41f210:	b29b      	uxth	r3, r3
    a->playback_delay = delay;
  41f212:	9311      	str	r3, [sp, #68]	; 0x44
 * @param a pointer to an initialized `lv_anim_t` variable
 * @param delay delay in milliseconds before repeating the animation.
 */
static inline void lv_anim_set_repeat_delay(lv_anim_t * a, uint16_t delay)
{
    a->repeat_delay = delay;
  41f214:	9313      	str	r3, [sp, #76]	; 0x4c
        if(size.x > lv_area_get_width(&txt_coords)) {
  41f216:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
  41f21a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41f21e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  41f222:	1a5b      	subs	r3, r3, r1
  41f224:	b29b      	uxth	r3, r3
  41f226:	3301      	adds	r3, #1
  41f228:	b29b      	uxth	r3, r3
  41f22a:	b219      	sxth	r1, r3
  41f22c:	428a      	cmp	r2, r1
  41f22e:	dd49      	ble.n	41f2c4 <lv_label_refr_text+0x1e4>
            lv_anim_set_values(&a, 0, lv_area_get_width(&txt_coords) - size.x);
  41f230:	b292      	uxth	r2, r2
  41f232:	1a9b      	subs	r3, r3, r2
  41f234:	b21a      	sxth	r2, r3
    a->start = start;
  41f236:	2100      	movs	r1, #0
  41f238:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41f23a:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41f23c:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41f23e:	4c49      	ldr	r4, [pc, #292]	; (41f364 <lv_label_refr_text+0x284>)
  41f240:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41f242:	89b0      	ldrh	r0, [r6, #12]
  41f244:	4b48      	ldr	r3, [pc, #288]	; (41f368 <lv_label_refr_text+0x288>)
  41f246:	4798      	blx	r3
    a->time     = duration;
  41f248:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  41f24a:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f24c:	4621      	mov	r1, r4
  41f24e:	4628      	mov	r0, r5
  41f250:	4b46      	ldr	r3, [pc, #280]	; (41f36c <lv_label_refr_text+0x28c>)
  41f252:	4798      	blx	r3
            if(anim_cur) {
  41f254:	2800      	cmp	r0, #0
  41f256:	d032      	beq.n	41f2be <lv_label_refr_text+0x1de>
                act_time = anim_cur->act_time;
  41f258:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41f25a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  41f25e:	f003 0301 	and.w	r3, r3, #1
            if(act_time < a.time) {
  41f262:	990f      	ldr	r1, [sp, #60]	; 0x3c
  41f264:	428a      	cmp	r2, r1
  41f266:	da11      	bge.n	41f28c <lv_label_refr_text+0x1ac>
                a.act_time = act_time;      /*To keep the old position*/
  41f268:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41f26a:	f89d 2052 	ldrb.w	r2, [sp, #82]	; 0x52
  41f26e:	f36f 0200 	bfc	r2, #0, #1
  41f272:	f88d 2052 	strb.w	r2, [sp, #82]	; 0x52
                if(playback_now) {
  41f276:	b14b      	cbz	r3, 41f28c <lv_label_refr_text+0x1ac>
                    a.playback_now = 1;
  41f278:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41f27c:	f043 0301 	orr.w	r3, r3, #1
  41f280:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41f284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41f286:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f288:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41f28a:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41f28c:	a806      	add	r0, sp, #24
  41f28e:	4b38      	ldr	r3, [pc, #224]	; (41f370 <lv_label_refr_text+0x290>)
  41f290:	4798      	blx	r3
            hor_anim = true;
  41f292:	2401      	movs	r4, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41f294:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f298:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41f29c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  41f2a0:	1a5b      	subs	r3, r3, r1
  41f2a2:	b29b      	uxth	r3, r3
  41f2a4:	3301      	adds	r3, #1
  41f2a6:	b29b      	uxth	r3, r3
  41f2a8:	b219      	sxth	r1, r3
  41f2aa:	428a      	cmp	r2, r1
  41f2ac:	dd00      	ble.n	41f2b0 <lv_label_refr_text+0x1d0>
  41f2ae:	b184      	cbz	r4, 41f2d2 <lv_label_refr_text+0x1f2>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41f2b0:	4930      	ldr	r1, [pc, #192]	; (41f374 <lv_label_refr_text+0x294>)
  41f2b2:	4628      	mov	r0, r5
  41f2b4:	4b30      	ldr	r3, [pc, #192]	; (41f378 <lv_label_refr_text+0x298>)
  41f2b6:	4798      	blx	r3
            ext->offset.y = 0;
  41f2b8:	2300      	movs	r3, #0
  41f2ba:	8233      	strh	r3, [r6, #16]
  41f2bc:	e760      	b.n	41f180 <lv_label_refr_text+0xa0>
            bool playback_now = false;
  41f2be:	2300      	movs	r3, #0
            int32_t act_time = 0;
  41f2c0:	461a      	mov	r2, r3
  41f2c2:	e7ce      	b.n	41f262 <lv_label_refr_text+0x182>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f2c4:	4927      	ldr	r1, [pc, #156]	; (41f364 <lv_label_refr_text+0x284>)
  41f2c6:	4628      	mov	r0, r5
  41f2c8:	4b2b      	ldr	r3, [pc, #172]	; (41f378 <lv_label_refr_text+0x298>)
  41f2ca:	4798      	blx	r3
            ext->offset.x = 0;
  41f2cc:	2400      	movs	r4, #0
  41f2ce:	81f4      	strh	r4, [r6, #14]
  41f2d0:	e7e0      	b.n	41f294 <lv_label_refr_text+0x1b4>
            lv_anim_set_values(&a, 0, lv_area_get_height(&txt_coords) - size.y - (lv_font_get_line_height(font)));
  41f2d2:	b292      	uxth	r2, r2
  41f2d4:	1a9a      	subs	r2, r3, r2
  41f2d6:	b292      	uxth	r2, r2
  41f2d8:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  41f2dc:	1ad2      	subs	r2, r2, r3
  41f2de:	b212      	sxth	r2, r2
    a->start = start;
  41f2e0:	2100      	movs	r1, #0
  41f2e2:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41f2e4:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41f2e6:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41f2e8:	4f22      	ldr	r7, [pc, #136]	; (41f374 <lv_label_refr_text+0x294>)
  41f2ea:	9707      	str	r7, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41f2ec:	89b0      	ldrh	r0, [r6, #12]
  41f2ee:	4b1e      	ldr	r3, [pc, #120]	; (41f368 <lv_label_refr_text+0x288>)
  41f2f0:	4798      	blx	r3
    a->time     = duration;
  41f2f2:	900f      	str	r0, [sp, #60]	; 0x3c
    a->playback_time = time;
  41f2f4:	9012      	str	r0, [sp, #72]	; 0x48
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41f2f6:	4639      	mov	r1, r7
  41f2f8:	4628      	mov	r0, r5
  41f2fa:	4b1c      	ldr	r3, [pc, #112]	; (41f36c <lv_label_refr_text+0x28c>)
  41f2fc:	4798      	blx	r3
            if(anim_cur) {
  41f2fe:	b1e8      	cbz	r0, 41f33c <lv_label_refr_text+0x25c>
                act_time = anim_cur->act_time;
  41f300:	6a82      	ldr	r2, [r0, #40]	; 0x28
                playback_now = anim_cur->playback_now;
  41f302:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
  41f306:	f004 0401 	and.w	r4, r4, #1
            if(act_time < a.time) {
  41f30a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  41f30c:	429a      	cmp	r2, r3
  41f30e:	da11      	bge.n	41f334 <lv_label_refr_text+0x254>
                a.act_time = act_time;      /*To keep the old position*/
  41f310:	9210      	str	r2, [sp, #64]	; 0x40
                a.early_apply = 0;
  41f312:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41f316:	f36f 0300 	bfc	r3, #0, #1
  41f31a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
                if(playback_now) {
  41f31e:	b14c      	cbz	r4, 41f334 <lv_label_refr_text+0x254>
                    a.playback_now = 1;
  41f320:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  41f324:	f043 0301 	orr.w	r3, r3, #1
  41f328:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                    tmp      = a.start;
  41f32c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                    a.start = a.end;
  41f32e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  41f330:	920c      	str	r2, [sp, #48]	; 0x30
                    a.end   = tmp;
  41f332:	930e      	str	r3, [sp, #56]	; 0x38
            lv_anim_start(&a);
  41f334:	a806      	add	r0, sp, #24
  41f336:	4b0e      	ldr	r3, [pc, #56]	; (41f370 <lv_label_refr_text+0x290>)
  41f338:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41f33a:	e721      	b.n	41f180 <lv_label_refr_text+0xa0>
            int32_t act_time = 0;
  41f33c:	2200      	movs	r2, #0
  41f33e:	e7e4      	b.n	41f30a <lv_label_refr_text+0x22a>
  41f340:	00407b5d 	.word	0x00407b5d
  41f344:	0041e93d 	.word	0x0041e93d
  41f348:	00406e85 	.word	0x00406e85
  41f34c:	00406f8d 	.word	0x00406f8d
  41f350:	00416e21 	.word	0x00416e21
  41f354:	00405aa1 	.word	0x00405aa1
  41f358:	00406781 	.word	0x00406781
  41f35c:	00414ccd 	.word	0x00414ccd
  41f360:	0041347d 	.word	0x0041347d
  41f364:	0041ea1d 	.word	0x0041ea1d
  41f368:	00414e51 	.word	0x00414e51
  41f36c:	00414e1d 	.word	0x00414e1d
  41f370:	00414d85 	.word	0x00414d85
  41f374:	0041ea01 	.word	0x0041ea01
  41f378:	00414d19 	.word	0x00414d19
        lv_anim_init(&a);
  41f37c:	a806      	add	r0, sp, #24
  41f37e:	4b99      	ldr	r3, [pc, #612]	; (41f5e4 <lv_label_refr_text+0x504>)
  41f380:	4798      	blx	r3
    a->var     = var;
  41f382:	9506      	str	r5, [sp, #24]
    a->repeat_cnt       = cnt;
  41f384:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f388:	f8ad 3050 	strh.w	r3, [sp, #80]	; 0x50
        if(size.x > lv_area_get_width(&txt_coords)) {
  41f38c:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f390:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
  41f394:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
  41f398:	1a5b      	subs	r3, r3, r1
  41f39a:	b29b      	uxth	r3, r3
  41f39c:	3301      	adds	r3, #1
  41f39e:	b21b      	sxth	r3, r3
  41f3a0:	429a      	cmp	r2, r3
  41f3a2:	dd3e      	ble.n	41f422 <lv_label_refr_text+0x342>
            lv_anim_set_values(&a, 0, -size.x - lv_font_get_glyph_width(font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT);
  41f3a4:	2220      	movs	r2, #32
  41f3a6:	4611      	mov	r1, r2
  41f3a8:	4640      	mov	r0, r8
  41f3aa:	4b8f      	ldr	r3, [pc, #572]	; (41f5e8 <lv_label_refr_text+0x508>)
  41f3ac:	4798      	blx	r3
  41f3ae:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
  41f3b2:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  41f3b6:	1a82      	subs	r2, r0, r2
  41f3b8:	b212      	sxth	r2, r2
    a->start = start;
  41f3ba:	2100      	movs	r1, #0
  41f3bc:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41f3be:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41f3c0:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41f3c2:	4c8a      	ldr	r4, [pc, #552]	; (41f5ec <lv_label_refr_text+0x50c>)
  41f3c4:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41f3c6:	89b0      	ldrh	r0, [r6, #12]
  41f3c8:	4b89      	ldr	r3, [pc, #548]	; (41f5f0 <lv_label_refr_text+0x510>)
  41f3ca:	4798      	blx	r3
    a->time     = duration;
  41f3cc:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f3ce:	4621      	mov	r1, r4
  41f3d0:	4628      	mov	r0, r5
  41f3d2:	4b88      	ldr	r3, [pc, #544]	; (41f5f4 <lv_label_refr_text+0x514>)
  41f3d4:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41f3d6:	b310      	cbz	r0, 41f41e <lv_label_refr_text+0x33e>
  41f3d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  41f3da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41f3dc:	4293      	cmp	r3, r2
  41f3de:	da06      	bge.n	41f3ee <lv_label_refr_text+0x30e>
                a.act_time = act_time;      /*To keep the old position*/
  41f3e0:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  41f3e2:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41f3e6:	f36f 0300 	bfc	r3, #0, #1
  41f3ea:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  41f3ee:	a806      	add	r0, sp, #24
  41f3f0:	4b81      	ldr	r3, [pc, #516]	; (41f5f8 <lv_label_refr_text+0x518>)
  41f3f2:	4798      	blx	r3
            hor_anim = true;
  41f3f4:	2101      	movs	r1, #1
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41f3f6:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f3fa:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41f3fe:	f8bd 0062 	ldrh.w	r0, [sp, #98]	; 0x62
  41f402:	1a1b      	subs	r3, r3, r0
  41f404:	b29b      	uxth	r3, r3
  41f406:	3301      	adds	r3, #1
  41f408:	b21b      	sxth	r3, r3
  41f40a:	429a      	cmp	r2, r3
  41f40c:	dd00      	ble.n	41f410 <lv_label_refr_text+0x330>
  41f40e:	b179      	cbz	r1, 41f430 <lv_label_refr_text+0x350>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41f410:	497a      	ldr	r1, [pc, #488]	; (41f5fc <lv_label_refr_text+0x51c>)
  41f412:	4628      	mov	r0, r5
  41f414:	4b7a      	ldr	r3, [pc, #488]	; (41f600 <lv_label_refr_text+0x520>)
  41f416:	4798      	blx	r3
            ext->offset.y = 0;
  41f418:	2300      	movs	r3, #0
  41f41a:	8233      	strh	r3, [r6, #16]
  41f41c:	e6b0      	b.n	41f180 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41f41e:	2300      	movs	r3, #0
  41f420:	e7db      	b.n	41f3da <lv_label_refr_text+0x2fa>
            lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f422:	4972      	ldr	r1, [pc, #456]	; (41f5ec <lv_label_refr_text+0x50c>)
  41f424:	4628      	mov	r0, r5
  41f426:	4b76      	ldr	r3, [pc, #472]	; (41f600 <lv_label_refr_text+0x520>)
  41f428:	4798      	blx	r3
            ext->offset.x = 0;
  41f42a:	2100      	movs	r1, #0
  41f42c:	81f1      	strh	r1, [r6, #14]
  41f42e:	e7e2      	b.n	41f3f6 <lv_label_refr_text+0x316>
            lv_anim_set_values(&a, 0, -size.y - (lv_font_get_line_height(font)));
  41f430:	b292      	uxth	r2, r2
  41f432:	f8b8 3008 	ldrh.w	r3, [r8, #8]
  41f436:	4252      	negs	r2, r2
  41f438:	1ad2      	subs	r2, r2, r3
  41f43a:	b212      	sxth	r2, r2
    a->start = start;
  41f43c:	910c      	str	r1, [sp, #48]	; 0x30
    a->current = start;
  41f43e:	910d      	str	r1, [sp, #52]	; 0x34
    a->end   = end;
  41f440:	920e      	str	r2, [sp, #56]	; 0x38
    a->exec_cb = exec_cb;
  41f442:	4c6e      	ldr	r4, [pc, #440]	; (41f5fc <lv_label_refr_text+0x51c>)
  41f444:	9407      	str	r4, [sp, #28]
            lv_anim_set_time(&a, lv_anim_speed_to_time(ext->anim_speed, a.start, a.end));
  41f446:	89b0      	ldrh	r0, [r6, #12]
  41f448:	4b69      	ldr	r3, [pc, #420]	; (41f5f0 <lv_label_refr_text+0x510>)
  41f44a:	4798      	blx	r3
    a->time     = duration;
  41f44c:	900f      	str	r0, [sp, #60]	; 0x3c
            lv_anim_t * anim_cur = lv_anim_get(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41f44e:	4621      	mov	r1, r4
  41f450:	4628      	mov	r0, r5
  41f452:	4b68      	ldr	r3, [pc, #416]	; (41f5f4 <lv_label_refr_text+0x514>)
  41f454:	4798      	blx	r3
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41f456:	b170      	cbz	r0, 41f476 <lv_label_refr_text+0x396>
  41f458:	6a83      	ldr	r3, [r0, #40]	; 0x28
            if(act_time < a.time) {
  41f45a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  41f45c:	4293      	cmp	r3, r2
  41f45e:	da06      	bge.n	41f46e <lv_label_refr_text+0x38e>
                a.act_time = act_time;      /*To keep the old position*/
  41f460:	9310      	str	r3, [sp, #64]	; 0x40
                a.early_apply = 0;
  41f462:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
  41f466:	f36f 0300 	bfc	r3, #0, #1
  41f46a:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
            lv_anim_start(&a);
  41f46e:	a806      	add	r0, sp, #24
  41f470:	4b61      	ldr	r3, [pc, #388]	; (41f5f8 <lv_label_refr_text+0x518>)
  41f472:	4798      	blx	r3
        if(size.y > lv_area_get_height(&txt_coords) && hor_anim == false) {
  41f474:	e684      	b.n	41f180 <lv_label_refr_text+0xa0>
            int32_t act_time = anim_cur ? anim_cur->act_time : 0;
  41f476:	2300      	movs	r3, #0
  41f478:	e7ef      	b.n	41f45a <lv_label_refr_text+0x37a>
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
  41f47a:	f9bd 205e 	ldrsh.w	r2, [sp, #94]	; 0x5e
  41f47e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41f482:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
  41f486:	1a5b      	subs	r3, r3, r1
  41f488:	b29b      	uxth	r3, r3
  41f48a:	3301      	adds	r3, #1
  41f48c:	b21b      	sxth	r3, r3
  41f48e:	429a      	cmp	r2, r3
  41f490:	dc03      	bgt.n	41f49a <lv_label_refr_text+0x3ba>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  41f492:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f496:	60b3      	str	r3, [r6, #8]
  41f498:	e672      	b.n	41f180 <lv_label_refr_text+0xa0>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
  41f49a:	4b5a      	ldr	r3, [pc, #360]	; (41f604 <lv_label_refr_text+0x524>)
  41f49c:	681b      	ldr	r3, [r3, #0]
  41f49e:	6830      	ldr	r0, [r6, #0]
  41f4a0:	4798      	blx	r3
  41f4a2:	2803      	cmp	r0, #3
  41f4a4:	d803      	bhi.n	41f4ae <lv_label_refr_text+0x3ce>
            ext->dot_end = LV_LABEL_DOT_END_INV;
  41f4a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f4aa:	60b3      	str	r3, [r6, #8]
  41f4ac:	e668      	b.n	41f180 <lv_label_refr_text+0xa0>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f4ae:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
  41f4b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
  41f4b6:	1ae4      	subs	r4, r4, r3
  41f4b8:	b2a4      	uxth	r4, r4
  41f4ba:	3401      	adds	r4, #1
  41f4bc:	b2a4      	uxth	r4, r4
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
  41f4be:	222e      	movs	r2, #46	; 0x2e
  41f4c0:	4611      	mov	r1, r2
  41f4c2:	4640      	mov	r0, r8
  41f4c4:	4b48      	ldr	r3, [pc, #288]	; (41f5e8 <lv_label_refr_text+0x508>)
  41f4c6:	4798      	blx	r3
  41f4c8:	4438      	add	r0, r7
            p.x = lv_area_get_width(&txt_coords) -
  41f4ca:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
  41f4ce:	4420      	add	r0, r4
  41f4d0:	f8ad 0014 	strh.w	r0, [sp, #20]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f4d4:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
  41f4d8:	f8bd 2062 	ldrh.w	r2, [sp, #98]	; 0x62
  41f4dc:	1a9b      	subs	r3, r3, r2
  41f4de:	b29b      	uxth	r3, r3
  41f4e0:	3301      	adds	r3, #1
  41f4e2:	b29b      	uxth	r3, r3
  41f4e4:	b218      	sxth	r0, r3
            p.y = lv_area_get_height(&txt_coords);
  41f4e6:	f8ad 0016 	strh.w	r0, [sp, #22]
  41f4ea:	f9b8 1008 	ldrsh.w	r1, [r8, #8]
                       (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
  41f4ee:	eb09 0401 	add.w	r4, r9, r1
            y_overed = p.y %
  41f4f2:	fb90 f2f4 	sdiv	r2, r0, r4
  41f4f6:	fb04 0212 	mls	r2, r4, r2, r0
  41f4fa:	b210      	sxth	r0, r2
            if(y_overed >= lv_font_get_line_height(font)) {
  41f4fc:	4288      	cmp	r0, r1
  41f4fe:	db16      	blt.n	41f52e <lv_label_refr_text+0x44e>
                p.y -= y_overed;
  41f500:	1a9b      	subs	r3, r3, r2
                p.y += lv_font_get_line_height(font);
  41f502:	b289      	uxth	r1, r1
  41f504:	fa11 f383 	uxtah	r3, r1, r3
  41f508:	f8ad 3016 	strh.w	r3, [sp, #22]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
  41f50c:	a905      	add	r1, sp, #20
  41f50e:	4628      	mov	r0, r5
  41f510:	4b3d      	ldr	r3, [pc, #244]	; (41f608 <lv_label_refr_text+0x528>)
  41f512:	4798      	blx	r3
  41f514:	4607      	mov	r7, r0
            size_t txt_len = strlen(ext->text);
  41f516:	6834      	ldr	r4, [r6, #0]
  41f518:	4620      	mov	r0, r4
  41f51a:	4b3c      	ldr	r3, [pc, #240]	; (41f60c <lv_label_refr_text+0x52c>)
  41f51c:	4798      	blx	r3
  41f51e:	4681      	mov	r9, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
  41f520:	4b3b      	ldr	r3, [pc, #236]	; (41f610 <lv_label_refr_text+0x530>)
  41f522:	681b      	ldr	r3, [r3, #0]
  41f524:	4639      	mov	r1, r7
  41f526:	4620      	mov	r0, r4
  41f528:	4798      	blx	r3
  41f52a:	9006      	str	r0, [sp, #24]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  41f52c:	e00c      	b.n	41f548 <lv_label_refr_text+0x468>
                p.y -= y_overed;
  41f52e:	1a9b      	subs	r3, r3, r2
  41f530:	b29b      	uxth	r3, r3
                p.y -= line_space;
  41f532:	eba3 0909 	sub.w	r9, r3, r9
  41f536:	f8ad 9016 	strh.w	r9, [sp, #22]
  41f53a:	e7e7      	b.n	41f50c <lv_label_refr_text+0x42c>
                _lv_txt_encoded_prev(ext->text, &byte_id);
  41f53c:	4b35      	ldr	r3, [pc, #212]	; (41f614 <lv_label_refr_text+0x534>)
  41f53e:	681b      	ldr	r3, [r3, #0]
  41f540:	a906      	add	r1, sp, #24
  41f542:	6830      	ldr	r0, [r6, #0]
  41f544:	4798      	blx	r3
                letter_id--;
  41f546:	3f01      	subs	r7, #1
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
  41f548:	9c06      	ldr	r4, [sp, #24]
  41f54a:	f104 0803 	add.w	r8, r4, #3
  41f54e:	45c1      	cmp	r9, r8
  41f550:	d3f4      	bcc.n	41f53c <lv_label_refr_text+0x45c>
  41f552:	f04f 0900 	mov.w	r9, #0
  41f556:	46cb      	mov	fp, r9
  41f558:	e012      	b.n	41f580 <lv_label_refr_text+0x4a0>
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
  41f55a:	6830      	ldr	r0, [r6, #0]
  41f55c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
  41f560:	f85a 2d50 	ldr.w	r2, [sl, #-80]!
  41f564:	4b2c      	ldr	r3, [pc, #176]	; (41f618 <lv_label_refr_text+0x538>)
  41f566:	681b      	ldr	r3, [r3, #0]
  41f568:	4410      	add	r0, r2
  41f56a:	4798      	blx	r3
  41f56c:	4481      	add	r9, r0
  41f56e:	fa5f f989 	uxtb.w	r9, r9
                _lv_txt_encoded_next(ext->text, &byte_id);
  41f572:	4b2a      	ldr	r3, [pc, #168]	; (41f61c <lv_label_refr_text+0x53c>)
  41f574:	681b      	ldr	r3, [r3, #0]
  41f576:	4651      	mov	r1, sl
  41f578:	6830      	ldr	r0, [r6, #0]
  41f57a:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
  41f57c:	f10b 0b01 	add.w	fp, fp, #1
  41f580:	f1bb 0f03 	cmp.w	fp, #3
  41f584:	d9e9      	bls.n	41f55a <lv_label_refr_text+0x47a>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
  41f586:	6831      	ldr	r1, [r6, #0]
  41f588:	464a      	mov	r2, r9
  41f58a:	4421      	add	r1, r4
  41f58c:	4628      	mov	r0, r5
  41f58e:	4b24      	ldr	r3, [pc, #144]	; (41f620 <lv_label_refr_text+0x540>)
  41f590:	4798      	blx	r3
  41f592:	2800      	cmp	r0, #0
  41f594:	f43f adf4 	beq.w	41f180 <lv_label_refr_text+0xa0>
  41f598:	2300      	movs	r3, #0
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  41f59a:	2b02      	cmp	r3, #2
  41f59c:	d805      	bhi.n	41f5aa <lv_label_refr_text+0x4ca>
                    ext->text[byte_id_ori + i] = '.';
  41f59e:	6831      	ldr	r1, [r6, #0]
  41f5a0:	191a      	adds	r2, r3, r4
  41f5a2:	202e      	movs	r0, #46	; 0x2e
  41f5a4:	5488      	strb	r0, [r1, r2]
                for(i = 0; i < LV_LABEL_DOT_NUM; i++) {
  41f5a6:	3301      	adds	r3, #1
  41f5a8:	e7f7      	b.n	41f59a <lv_label_refr_text+0x4ba>
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
  41f5aa:	6833      	ldr	r3, [r6, #0]
  41f5ac:	2200      	movs	r2, #0
  41f5ae:	f803 2008 	strb.w	r2, [r3, r8]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
  41f5b2:	3703      	adds	r7, #3
  41f5b4:	60b7      	str	r7, [r6, #8]
  41f5b6:	e5e3      	b.n	41f180 <lv_label_refr_text+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
  41f5b8:	2210      	movs	r2, #16
  41f5ba:	2100      	movs	r1, #0
  41f5bc:	4628      	mov	r0, r5
  41f5be:	4e19      	ldr	r6, [pc, #100]	; (41f624 <lv_label_refr_text+0x544>)
  41f5c0:	47b0      	blx	r6
  41f5c2:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
  41f5c4:	2211      	movs	r2, #17
  41f5c6:	2100      	movs	r1, #0
  41f5c8:	4628      	mov	r0, r5
  41f5ca:	47b0      	blx	r6
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
  41f5cc:	1821      	adds	r1, r4, r0
  41f5ce:	f8bd 005e 	ldrh.w	r0, [sp, #94]	; 0x5e
  41f5d2:	4401      	add	r1, r0
  41f5d4:	b209      	sxth	r1, r1
  41f5d6:	f8ad 105e 	strh.w	r1, [sp, #94]	; 0x5e
        lv_obj_set_height(label, size.y);
  41f5da:	4628      	mov	r0, r5
  41f5dc:	4b12      	ldr	r3, [pc, #72]	; (41f628 <lv_label_refr_text+0x548>)
  41f5de:	4798      	blx	r3
  41f5e0:	e5ce      	b.n	41f180 <lv_label_refr_text+0xa0>
  41f5e2:	bf00      	nop
  41f5e4:	00414ccd 	.word	0x00414ccd
  41f5e8:	0041347d 	.word	0x0041347d
  41f5ec:	0041ea1d 	.word	0x0041ea1d
  41f5f0:	00414e51 	.word	0x00414e51
  41f5f4:	00414e1d 	.word	0x00414e1d
  41f5f8:	00414d85 	.word	0x00414d85
  41f5fc:	0041ea01 	.word	0x0041ea01
  41f600:	00414d19 	.word	0x00414d19
  41f604:	20400064 	.word	0x20400064
  41f608:	0041eb59 	.word	0x0041eb59
  41f60c:	00422bc1 	.word	0x00422bc1
  41f610:	20400050 	.word	0x20400050
  41f614:	2040005c 	.word	0x2040005c
  41f618:	20400060 	.word	0x20400060
  41f61c:	20400058 	.word	0x20400058
  41f620:	0041e999 	.word	0x0041e999
  41f624:	00406f8d 	.word	0x00406f8d
  41f628:	004068b5 	.word	0x004068b5

0041f62c <lv_label_signal>:
{
  41f62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41f630:	4607      	mov	r7, r0
  41f632:	460c      	mov	r4, r1
  41f634:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
  41f636:	2908      	cmp	r1, #8
  41f638:	d014      	beq.n	41f664 <lv_label_signal+0x38>
    res = ancestor_signal(label, sign, param);
  41f63a:	4b31      	ldr	r3, [pc, #196]	; (41f700 <lv_label_signal+0xd4>)
  41f63c:	681b      	ldr	r3, [r3, #0]
  41f63e:	4798      	blx	r3
  41f640:	4606      	mov	r6, r0
    if(res != LV_RES_OK) return res;
  41f642:	2801      	cmp	r0, #1
  41f644:	d114      	bne.n	41f670 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41f646:	2c07      	cmp	r4, #7
  41f648:	d01d      	beq.n	41f686 <lv_label_signal+0x5a>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f64a:	4638      	mov	r0, r7
  41f64c:	4b2d      	ldr	r3, [pc, #180]	; (41f704 <lv_label_signal+0xd8>)
  41f64e:	4798      	blx	r3
  41f650:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
  41f652:	bb2c      	cbnz	r4, 41f6a0 <lv_label_signal+0x74>
        if(ext->static_txt == 0) {
  41f654:	7c83      	ldrb	r3, [r0, #18]
  41f656:	f013 0f08 	tst.w	r3, #8
  41f65a:	d01a      	beq.n	41f692 <lv_label_signal+0x66>
        lv_label_dot_tmp_free(label);
  41f65c:	4638      	mov	r0, r7
  41f65e:	4b2a      	ldr	r3, [pc, #168]	; (41f708 <lv_label_signal+0xdc>)
  41f660:	4798      	blx	r3
  41f662:	e005      	b.n	41f670 <lv_label_signal+0x44>
        info->result = lv_label_get_style(label, info->part);
  41f664:	7811      	ldrb	r1, [r2, #0]
  41f666:	4b29      	ldr	r3, [pc, #164]	; (41f70c <lv_label_signal+0xe0>)
  41f668:	4798      	blx	r3
  41f66a:	6068      	str	r0, [r5, #4]
        if(info->result != NULL) return LV_RES_OK;
  41f66c:	b118      	cbz	r0, 41f676 <lv_label_signal+0x4a>
  41f66e:	2601      	movs	r6, #1
}
  41f670:	4630      	mov	r0, r6
  41f672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else return ancestor_signal(label, sign, param);
  41f676:	4b22      	ldr	r3, [pc, #136]	; (41f700 <lv_label_signal+0xd4>)
  41f678:	681b      	ldr	r3, [r3, #0]
  41f67a:	462a      	mov	r2, r5
  41f67c:	4621      	mov	r1, r4
  41f67e:	4638      	mov	r0, r7
  41f680:	4798      	blx	r3
  41f682:	4606      	mov	r6, r0
  41f684:	e7f4      	b.n	41f670 <lv_label_signal+0x44>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
  41f686:	4922      	ldr	r1, [pc, #136]	; (41f710 <lv_label_signal+0xe4>)
  41f688:	4628      	mov	r0, r5
  41f68a:	4b22      	ldr	r3, [pc, #136]	; (41f714 <lv_label_signal+0xe8>)
  41f68c:	4798      	blx	r3
  41f68e:	4606      	mov	r6, r0
  41f690:	e7ee      	b.n	41f670 <lv_label_signal+0x44>
            lv_mem_free(ext->text);
  41f692:	6800      	ldr	r0, [r0, #0]
  41f694:	4b20      	ldr	r3, [pc, #128]	; (41f718 <lv_label_signal+0xec>)
  41f696:	4798      	blx	r3
            ext->text = NULL;
  41f698:	2300      	movs	r3, #0
  41f69a:	f8c8 3000 	str.w	r3, [r8]
  41f69e:	e7dd      	b.n	41f65c <lv_label_signal+0x30>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
  41f6a0:	2c04      	cmp	r4, #4
  41f6a2:	d016      	beq.n	41f6d2 <lv_label_signal+0xa6>
    else if(sign == LV_SIGNAL_COORD_CHG) {
  41f6a4:	2c02      	cmp	r4, #2
  41f6a6:	d1e3      	bne.n	41f670 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
  41f6a8:	8abb      	ldrh	r3, [r7, #20]
  41f6aa:	8a3a      	ldrh	r2, [r7, #16]
  41f6ac:	1a9b      	subs	r3, r3, r2
  41f6ae:	b29b      	uxth	r3, r3
  41f6b0:	3301      	adds	r3, #1
  41f6b2:	b29b      	uxth	r3, r3
  41f6b4:	88aa      	ldrh	r2, [r5, #4]
  41f6b6:	8829      	ldrh	r1, [r5, #0]
  41f6b8:	1a52      	subs	r2, r2, r1
  41f6ba:	b292      	uxth	r2, r2
  41f6bc:	3201      	adds	r2, #1
  41f6be:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  41f6c0:	429a      	cmp	r2, r3
  41f6c2:	d00d      	beq.n	41f6e0 <lv_label_signal+0xb4>
            lv_label_revert_dots(label);
  41f6c4:	4638      	mov	r0, r7
  41f6c6:	4b15      	ldr	r3, [pc, #84]	; (41f71c <lv_label_signal+0xf0>)
  41f6c8:	4798      	blx	r3
            lv_label_refr_text(label);
  41f6ca:	4638      	mov	r0, r7
  41f6cc:	4b14      	ldr	r3, [pc, #80]	; (41f720 <lv_label_signal+0xf4>)
  41f6ce:	4798      	blx	r3
  41f6d0:	e7ce      	b.n	41f670 <lv_label_signal+0x44>
        lv_label_revert_dots(label);
  41f6d2:	4638      	mov	r0, r7
  41f6d4:	4b11      	ldr	r3, [pc, #68]	; (41f71c <lv_label_signal+0xf0>)
  41f6d6:	4798      	blx	r3
        lv_label_refr_text(label);
  41f6d8:	4638      	mov	r0, r7
  41f6da:	4b11      	ldr	r3, [pc, #68]	; (41f720 <lv_label_signal+0xf4>)
  41f6dc:	4798      	blx	r3
  41f6de:	e7c7      	b.n	41f670 <lv_label_signal+0x44>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
  41f6e0:	8afb      	ldrh	r3, [r7, #22]
  41f6e2:	8a7a      	ldrh	r2, [r7, #18]
  41f6e4:	1a9b      	subs	r3, r3, r2
  41f6e6:	b29b      	uxth	r3, r3
  41f6e8:	3301      	adds	r3, #1
  41f6ea:	b29b      	uxth	r3, r3
  41f6ec:	88ea      	ldrh	r2, [r5, #6]
  41f6ee:	8869      	ldrh	r1, [r5, #2]
  41f6f0:	1a52      	subs	r2, r2, r1
  41f6f2:	b292      	uxth	r2, r2
  41f6f4:	3201      	adds	r2, #1
  41f6f6:	b292      	uxth	r2, r2
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
  41f6f8:	429a      	cmp	r2, r3
  41f6fa:	d1e3      	bne.n	41f6c4 <lv_label_signal+0x98>
  41f6fc:	e7b8      	b.n	41f670 <lv_label_signal+0x44>
  41f6fe:	bf00      	nop
  41f700:	204147ec 	.word	0x204147ec
  41f704:	00407b5d 	.word	0x00407b5d
  41f708:	0041e89d 	.word	0x0041e89d
  41f70c:	0041f0d5 	.word	0x0041f0d5
  41f710:	004297f8 	.word	0x004297f8
  41f714:	00407de9 	.word	0x00407de9
  41f718:	00415f85 	.word	0x00415f85
  41f71c:	0041e8cd 	.word	0x0041e8cd
  41f720:	0041f0e1 	.word	0x0041f0e1

0041f724 <lv_label_set_text>:
{
  41f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f726:	4607      	mov	r7, r0
  41f728:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f72a:	4b31      	ldr	r3, [pc, #196]	; (41f7f0 <lv_label_set_text+0xcc>)
  41f72c:	4798      	blx	r3
  41f72e:	b928      	cbnz	r0, 41f73c <lv_label_set_text+0x18>
  41f730:	463a      	mov	r2, r7
  41f732:	2300      	movs	r3, #0
  41f734:	482f      	ldr	r0, [pc, #188]	; (41f7f4 <lv_label_set_text+0xd0>)
  41f736:	4930      	ldr	r1, [pc, #192]	; (41f7f8 <lv_label_set_text+0xd4>)
  41f738:	4788      	blx	r1
  41f73a:	e7fe      	b.n	41f73a <lv_label_set_text+0x16>
    lv_obj_invalidate(label);
  41f73c:	4638      	mov	r0, r7
  41f73e:	4b2f      	ldr	r3, [pc, #188]	; (41f7fc <lv_label_set_text+0xd8>)
  41f740:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f742:	4638      	mov	r0, r7
  41f744:	4b2e      	ldr	r3, [pc, #184]	; (41f800 <lv_label_set_text+0xdc>)
  41f746:	4798      	blx	r3
  41f748:	4604      	mov	r4, r0
    if(text == NULL) text = ext->text;
  41f74a:	b31d      	cbz	r5, 41f794 <lv_label_set_text+0x70>
    LV_ASSERT_STR(text);
  41f74c:	4628      	mov	r0, r5
  41f74e:	4b28      	ldr	r3, [pc, #160]	; (41f7f0 <lv_label_set_text+0xcc>)
  41f750:	4798      	blx	r3
  41f752:	b308      	cbz	r0, 41f798 <lv_label_set_text+0x74>
    if(ext->text == text && ext->static_txt == 0) {
  41f754:	6826      	ldr	r6, [r4, #0]
  41f756:	42b5      	cmp	r5, r6
  41f758:	d024      	beq.n	41f7a4 <lv_label_set_text+0x80>
        if(ext->text != NULL && ext->static_txt == 0) {
  41f75a:	b11e      	cbz	r6, 41f764 <lv_label_set_text+0x40>
  41f75c:	7ca3      	ldrb	r3, [r4, #18]
  41f75e:	f013 0f08 	tst.w	r3, #8
  41f762:	d038      	beq.n	41f7d6 <lv_label_set_text+0xb2>
        size_t len = strlen(text) + 1;
  41f764:	4628      	mov	r0, r5
  41f766:	4b27      	ldr	r3, [pc, #156]	; (41f804 <lv_label_set_text+0xe0>)
  41f768:	4798      	blx	r3
        ext->text = lv_mem_alloc(len);
  41f76a:	3001      	adds	r0, #1
  41f76c:	4b26      	ldr	r3, [pc, #152]	; (41f808 <lv_label_set_text+0xe4>)
  41f76e:	4798      	blx	r3
  41f770:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  41f772:	4b1f      	ldr	r3, [pc, #124]	; (41f7f0 <lv_label_set_text+0xcc>)
  41f774:	4798      	blx	r3
  41f776:	2800      	cmp	r0, #0
  41f778:	d033      	beq.n	41f7e2 <lv_label_set_text+0xbe>
        if(ext->text == NULL) return;
  41f77a:	6820      	ldr	r0, [r4, #0]
  41f77c:	b148      	cbz	r0, 41f792 <lv_label_set_text+0x6e>
        strcpy(ext->text, text);
  41f77e:	4629      	mov	r1, r5
  41f780:	4b22      	ldr	r3, [pc, #136]	; (41f80c <lv_label_set_text+0xe8>)
  41f782:	4798      	blx	r3
        ext->static_txt = 0;
  41f784:	7ca3      	ldrb	r3, [r4, #18]
  41f786:	f36f 03c3 	bfc	r3, #3, #1
  41f78a:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  41f78c:	4638      	mov	r0, r7
  41f78e:	4b20      	ldr	r3, [pc, #128]	; (41f810 <lv_label_set_text+0xec>)
  41f790:	4798      	blx	r3
  41f792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(text == NULL) text = ext->text;
  41f794:	6805      	ldr	r5, [r0, #0]
  41f796:	e7d9      	b.n	41f74c <lv_label_set_text+0x28>
    LV_ASSERT_STR(text);
  41f798:	462a      	mov	r2, r5
  41f79a:	2300      	movs	r3, #0
  41f79c:	4815      	ldr	r0, [pc, #84]	; (41f7f4 <lv_label_set_text+0xd0>)
  41f79e:	4916      	ldr	r1, [pc, #88]	; (41f7f8 <lv_label_set_text+0xd4>)
  41f7a0:	4788      	blx	r1
  41f7a2:	e7fe      	b.n	41f7a2 <lv_label_set_text+0x7e>
    if(ext->text == text && ext->static_txt == 0) {
  41f7a4:	7ca3      	ldrb	r3, [r4, #18]
  41f7a6:	f013 0f08 	tst.w	r3, #8
  41f7aa:	d1d6      	bne.n	41f75a <lv_label_set_text+0x36>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
  41f7ac:	4630      	mov	r0, r6
  41f7ae:	4b15      	ldr	r3, [pc, #84]	; (41f804 <lv_label_set_text+0xe0>)
  41f7b0:	4798      	blx	r3
  41f7b2:	1c41      	adds	r1, r0, #1
  41f7b4:	4630      	mov	r0, r6
  41f7b6:	4b17      	ldr	r3, [pc, #92]	; (41f814 <lv_label_set_text+0xf0>)
  41f7b8:	4798      	blx	r3
  41f7ba:	6020      	str	r0, [r4, #0]
        LV_ASSERT_MEM(ext->text);
  41f7bc:	4b0c      	ldr	r3, [pc, #48]	; (41f7f0 <lv_label_set_text+0xcc>)
  41f7be:	4798      	blx	r3
  41f7c0:	b928      	cbnz	r0, 41f7ce <lv_label_set_text+0xaa>
  41f7c2:	6822      	ldr	r2, [r4, #0]
  41f7c4:	2300      	movs	r3, #0
  41f7c6:	4814      	ldr	r0, [pc, #80]	; (41f818 <lv_label_set_text+0xf4>)
  41f7c8:	490b      	ldr	r1, [pc, #44]	; (41f7f8 <lv_label_set_text+0xd4>)
  41f7ca:	4788      	blx	r1
  41f7cc:	e7fe      	b.n	41f7cc <lv_label_set_text+0xa8>
        if(ext->text == NULL) return;
  41f7ce:	6823      	ldr	r3, [r4, #0]
  41f7d0:	2b00      	cmp	r3, #0
  41f7d2:	d1db      	bne.n	41f78c <lv_label_set_text+0x68>
  41f7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lv_mem_free(ext->text);
  41f7d6:	4630      	mov	r0, r6
  41f7d8:	4b10      	ldr	r3, [pc, #64]	; (41f81c <lv_label_set_text+0xf8>)
  41f7da:	4798      	blx	r3
            ext->text = NULL;
  41f7dc:	2300      	movs	r3, #0
  41f7de:	6023      	str	r3, [r4, #0]
  41f7e0:	e7c0      	b.n	41f764 <lv_label_set_text+0x40>
        LV_ASSERT_MEM(ext->text);
  41f7e2:	6822      	ldr	r2, [r4, #0]
  41f7e4:	2300      	movs	r3, #0
  41f7e6:	480c      	ldr	r0, [pc, #48]	; (41f818 <lv_label_set_text+0xf4>)
  41f7e8:	4903      	ldr	r1, [pc, #12]	; (41f7f8 <lv_label_set_text+0xd4>)
  41f7ea:	4788      	blx	r1
  41f7ec:	e7fe      	b.n	41f7ec <lv_label_set_text+0xc8>
  41f7ee:	bf00      	nop
  41f7f0:	004157b9 	.word	0x004157b9
  41f7f4:	004260c4 	.word	0x004260c4
  41f7f8:	004157c5 	.word	0x004157c5
  41f7fc:	00405aa1 	.word	0x00405aa1
  41f800:	00407b5d 	.word	0x00407b5d
  41f804:	00422bc1 	.word	0x00422bc1
  41f808:	00415ec1 	.word	0x00415ec1
  41f80c:	00422add 	.word	0x00422add
  41f810:	0041f0e1 	.word	0x0041f0e1
  41f814:	004161f1 	.word	0x004161f1
  41f818:	004260b0 	.word	0x004260b0
  41f81c:	00415f85 	.word	0x00415f85

0041f820 <lv_label_set_text_static>:
{
  41f820:	b570      	push	{r4, r5, r6, lr}
  41f822:	4605      	mov	r5, r0
  41f824:	460e      	mov	r6, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f826:	4b10      	ldr	r3, [pc, #64]	; (41f868 <lv_label_set_text_static+0x48>)
  41f828:	4798      	blx	r3
  41f82a:	b928      	cbnz	r0, 41f838 <lv_label_set_text_static+0x18>
  41f82c:	462a      	mov	r2, r5
  41f82e:	2300      	movs	r3, #0
  41f830:	480e      	ldr	r0, [pc, #56]	; (41f86c <lv_label_set_text_static+0x4c>)
  41f832:	490f      	ldr	r1, [pc, #60]	; (41f870 <lv_label_set_text_static+0x50>)
  41f834:	4788      	blx	r1
  41f836:	e7fe      	b.n	41f836 <lv_label_set_text_static+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f838:	4628      	mov	r0, r5
  41f83a:	4b0e      	ldr	r3, [pc, #56]	; (41f874 <lv_label_set_text_static+0x54>)
  41f83c:	4798      	blx	r3
  41f83e:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
  41f840:	7c83      	ldrb	r3, [r0, #18]
  41f842:	f013 0f08 	tst.w	r3, #8
  41f846:	d105      	bne.n	41f854 <lv_label_set_text_static+0x34>
  41f848:	6800      	ldr	r0, [r0, #0]
  41f84a:	b118      	cbz	r0, 41f854 <lv_label_set_text_static+0x34>
        lv_mem_free(ext->text);
  41f84c:	4b0a      	ldr	r3, [pc, #40]	; (41f878 <lv_label_set_text_static+0x58>)
  41f84e:	4798      	blx	r3
        ext->text = NULL;
  41f850:	2300      	movs	r3, #0
  41f852:	6023      	str	r3, [r4, #0]
    if(text != NULL) {
  41f854:	b126      	cbz	r6, 41f860 <lv_label_set_text_static+0x40>
        ext->static_txt = 1;
  41f856:	7ca3      	ldrb	r3, [r4, #18]
  41f858:	f043 0308 	orr.w	r3, r3, #8
  41f85c:	74a3      	strb	r3, [r4, #18]
        ext->text       = (char *)text;
  41f85e:	6026      	str	r6, [r4, #0]
    lv_label_refr_text(label);
  41f860:	4628      	mov	r0, r5
  41f862:	4b06      	ldr	r3, [pc, #24]	; (41f87c <lv_label_set_text_static+0x5c>)
  41f864:	4798      	blx	r3
  41f866:	bd70      	pop	{r4, r5, r6, pc}
  41f868:	004157b9 	.word	0x004157b9
  41f86c:	004260c4 	.word	0x004260c4
  41f870:	004157c5 	.word	0x004157c5
  41f874:	00407b5d 	.word	0x00407b5d
  41f878:	00415f85 	.word	0x00415f85
  41f87c:	0041f0e1 	.word	0x0041f0e1

0041f880 <lv_label_set_long_mode>:
{
  41f880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41f882:	4605      	mov	r5, r0
  41f884:	460f      	mov	r7, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f886:	4b20      	ldr	r3, [pc, #128]	; (41f908 <lv_label_set_long_mode+0x88>)
  41f888:	4798      	blx	r3
  41f88a:	b928      	cbnz	r0, 41f898 <lv_label_set_long_mode+0x18>
  41f88c:	462a      	mov	r2, r5
  41f88e:	2300      	movs	r3, #0
  41f890:	481e      	ldr	r0, [pc, #120]	; (41f90c <lv_label_set_long_mode+0x8c>)
  41f892:	491f      	ldr	r1, [pc, #124]	; (41f910 <lv_label_set_long_mode+0x90>)
  41f894:	4788      	blx	r1
  41f896:	e7fe      	b.n	41f896 <lv_label_set_long_mode+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f898:	4628      	mov	r0, r5
  41f89a:	4b1e      	ldr	r3, [pc, #120]	; (41f914 <lv_label_set_long_mode+0x94>)
  41f89c:	4798      	blx	r3
  41f89e:	4604      	mov	r4, r0
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_x);
  41f8a0:	491d      	ldr	r1, [pc, #116]	; (41f918 <lv_label_set_long_mode+0x98>)
  41f8a2:	4628      	mov	r0, r5
  41f8a4:	4e1d      	ldr	r6, [pc, #116]	; (41f91c <lv_label_set_long_mode+0x9c>)
  41f8a6:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_obj_set_y);
  41f8a8:	491d      	ldr	r1, [pc, #116]	; (41f920 <lv_label_set_long_mode+0xa0>)
  41f8aa:	4628      	mov	r0, r5
  41f8ac:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_x);
  41f8ae:	491d      	ldr	r1, [pc, #116]	; (41f924 <lv_label_set_long_mode+0xa4>)
  41f8b0:	4628      	mov	r0, r5
  41f8b2:	47b0      	blx	r6
    lv_anim_del(label, (lv_anim_exec_xcb_t)lv_label_set_offset_y);
  41f8b4:	491c      	ldr	r1, [pc, #112]	; (41f928 <lv_label_set_long_mode+0xa8>)
  41f8b6:	4628      	mov	r0, r5
  41f8b8:	47b0      	blx	r6
    ext->offset.x = 0;
  41f8ba:	2300      	movs	r3, #0
  41f8bc:	81e3      	strh	r3, [r4, #14]
    ext->offset.y = 0;
  41f8be:	8223      	strh	r3, [r4, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
  41f8c0:	1efb      	subs	r3, r7, #3
  41f8c2:	b2db      	uxtb	r3, r3
  41f8c4:	2b02      	cmp	r3, #2
  41f8c6:	d810      	bhi.n	41f8ea <lv_label_set_long_mode+0x6a>
        ext->expand = 1;
  41f8c8:	7ca3      	ldrb	r3, [r4, #18]
  41f8ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  41f8ce:	74a3      	strb	r3, [r4, #18]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  41f8d0:	7ca3      	ldrb	r3, [r4, #18]
  41f8d2:	f003 0307 	and.w	r3, r3, #7
  41f8d6:	2b02      	cmp	r3, #2
  41f8d8:	d00c      	beq.n	41f8f4 <lv_label_set_long_mode+0x74>
    ext->long_mode = long_mode;
  41f8da:	7ca3      	ldrb	r3, [r4, #18]
  41f8dc:	f367 0302 	bfi	r3, r7, #0, #3
  41f8e0:	74a3      	strb	r3, [r4, #18]
    lv_label_refr_text(label);
  41f8e2:	4628      	mov	r0, r5
  41f8e4:	4b11      	ldr	r3, [pc, #68]	; (41f92c <lv_label_set_long_mode+0xac>)
  41f8e6:	4798      	blx	r3
  41f8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->expand = 0;
  41f8ea:	7ca3      	ldrb	r3, [r4, #18]
  41f8ec:	f36f 13c7 	bfc	r3, #7, #1
  41f8f0:	74a3      	strb	r3, [r4, #18]
  41f8f2:	e7ed      	b.n	41f8d0 <lv_label_set_long_mode+0x50>
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
  41f8f4:	68a2      	ldr	r2, [r4, #8]
  41f8f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  41f8fa:	429a      	cmp	r2, r3
  41f8fc:	d0ed      	beq.n	41f8da <lv_label_set_long_mode+0x5a>
        lv_label_revert_dots(label);
  41f8fe:	4628      	mov	r0, r5
  41f900:	4b0b      	ldr	r3, [pc, #44]	; (41f930 <lv_label_set_long_mode+0xb0>)
  41f902:	4798      	blx	r3
  41f904:	e7e9      	b.n	41f8da <lv_label_set_long_mode+0x5a>
  41f906:	bf00      	nop
  41f908:	004157b9 	.word	0x004157b9
  41f90c:	004260c4 	.word	0x004260c4
  41f910:	004157c5 	.word	0x004157c5
  41f914:	00407b5d 	.word	0x00407b5d
  41f918:	00405c3d 	.word	0x00405c3d
  41f91c:	00414d19 	.word	0x00414d19
  41f920:	00405c7d 	.word	0x00405c7d
  41f924:	0041ea1d 	.word	0x0041ea1d
  41f928:	0041ea01 	.word	0x0041ea01
  41f92c:	0041f0e1 	.word	0x0041f0e1
  41f930:	0041e8cd 	.word	0x0041e8cd

0041f934 <lv_label_set_recolor>:
{
  41f934:	b538      	push	{r3, r4, r5, lr}
  41f936:	4604      	mov	r4, r0
  41f938:	460d      	mov	r5, r1
    LV_ASSERT_OBJ(label, LV_OBJX_NAME);
  41f93a:	4b0e      	ldr	r3, [pc, #56]	; (41f974 <lv_label_set_recolor+0x40>)
  41f93c:	4798      	blx	r3
  41f93e:	b928      	cbnz	r0, 41f94c <lv_label_set_recolor+0x18>
  41f940:	4622      	mov	r2, r4
  41f942:	2300      	movs	r3, #0
  41f944:	480c      	ldr	r0, [pc, #48]	; (41f978 <lv_label_set_recolor+0x44>)
  41f946:	490d      	ldr	r1, [pc, #52]	; (41f97c <lv_label_set_recolor+0x48>)
  41f948:	4788      	blx	r1
  41f94a:	e7fe      	b.n	41f94a <lv_label_set_recolor+0x16>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
  41f94c:	4620      	mov	r0, r4
  41f94e:	4b0c      	ldr	r3, [pc, #48]	; (41f980 <lv_label_set_recolor+0x4c>)
  41f950:	4798      	blx	r3
    if(ext->recolor == en) return;
  41f952:	7c83      	ldrb	r3, [r0, #18]
  41f954:	f3c3 1380 	ubfx	r3, r3, #6, #1
  41f958:	42ab      	cmp	r3, r5
  41f95a:	d008      	beq.n	41f96e <lv_label_set_recolor+0x3a>
    ext->recolor = en == false ? 0 : 1;
  41f95c:	b945      	cbnz	r5, 41f970 <lv_label_set_recolor+0x3c>
  41f95e:	2200      	movs	r2, #0
  41f960:	7c83      	ldrb	r3, [r0, #18]
  41f962:	f362 1386 	bfi	r3, r2, #6, #1
  41f966:	7483      	strb	r3, [r0, #18]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
  41f968:	4620      	mov	r0, r4
  41f96a:	4b06      	ldr	r3, [pc, #24]	; (41f984 <lv_label_set_recolor+0x50>)
  41f96c:	4798      	blx	r3
  41f96e:	bd38      	pop	{r3, r4, r5, pc}
    ext->recolor = en == false ? 0 : 1;
  41f970:	2201      	movs	r2, #1
  41f972:	e7f5      	b.n	41f960 <lv_label_set_recolor+0x2c>
  41f974:	004157b9 	.word	0x004157b9
  41f978:	004260c4 	.word	0x004260c4
  41f97c:	004157c5 	.word	0x004157c5
  41f980:	00407b5d 	.word	0x00407b5d
  41f984:	0041f0e1 	.word	0x0041f0e1

0041f988 <lv_label_create>:
{
  41f988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41f98c:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
  41f98e:	4b6b      	ldr	r3, [pc, #428]	; (41fb3c <lv_label_create+0x1b4>)
  41f990:	4798      	blx	r3
  41f992:	4604      	mov	r4, r0
    LV_ASSERT_MEM(new_label);
  41f994:	4b6a      	ldr	r3, [pc, #424]	; (41fb40 <lv_label_create+0x1b8>)
  41f996:	4798      	blx	r3
  41f998:	b1b0      	cbz	r0, 41f9c8 <lv_label_create+0x40>
    if(new_label == NULL) return NULL;
  41f99a:	2c00      	cmp	r4, #0
  41f99c:	f000 8085 	beq.w	41faaa <lv_label_create+0x122>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  41f9a0:	4b68      	ldr	r3, [pc, #416]	; (41fb44 <lv_label_create+0x1bc>)
  41f9a2:	681b      	ldr	r3, [r3, #0]
  41f9a4:	b1b3      	cbz	r3, 41f9d4 <lv_label_create+0x4c>
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
  41f9a6:	2114      	movs	r1, #20
  41f9a8:	4620      	mov	r0, r4
  41f9aa:	4b67      	ldr	r3, [pc, #412]	; (41fb48 <lv_label_create+0x1c0>)
  41f9ac:	4798      	blx	r3
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
  41f9ae:	4620      	mov	r0, r4
  41f9b0:	4b66      	ldr	r3, [pc, #408]	; (41fb4c <lv_label_create+0x1c4>)
  41f9b2:	4798      	blx	r3
  41f9b4:	4605      	mov	r5, r0
    LV_ASSERT_MEM(ext);
  41f9b6:	4b62      	ldr	r3, [pc, #392]	; (41fb40 <lv_label_create+0x1b8>)
  41f9b8:	4798      	blx	r3
  41f9ba:	b988      	cbnz	r0, 41f9e0 <lv_label_create+0x58>
  41f9bc:	462a      	mov	r2, r5
  41f9be:	2300      	movs	r3, #0
  41f9c0:	4863      	ldr	r0, [pc, #396]	; (41fb50 <lv_label_create+0x1c8>)
  41f9c2:	4964      	ldr	r1, [pc, #400]	; (41fb54 <lv_label_create+0x1cc>)
  41f9c4:	4788      	blx	r1
  41f9c6:	e7fe      	b.n	41f9c6 <lv_label_create+0x3e>
    LV_ASSERT_MEM(new_label);
  41f9c8:	4622      	mov	r2, r4
  41f9ca:	2300      	movs	r3, #0
  41f9cc:	4860      	ldr	r0, [pc, #384]	; (41fb50 <lv_label_create+0x1c8>)
  41f9ce:	4961      	ldr	r1, [pc, #388]	; (41fb54 <lv_label_create+0x1cc>)
  41f9d0:	4788      	blx	r1
  41f9d2:	e7fe      	b.n	41f9d2 <lv_label_create+0x4a>
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
  41f9d4:	4620      	mov	r0, r4
  41f9d6:	4b60      	ldr	r3, [pc, #384]	; (41fb58 <lv_label_create+0x1d0>)
  41f9d8:	4798      	blx	r3
  41f9da:	4b5a      	ldr	r3, [pc, #360]	; (41fb44 <lv_label_create+0x1bc>)
  41f9dc:	6018      	str	r0, [r3, #0]
  41f9de:	e7e2      	b.n	41f9a6 <lv_label_create+0x1e>
    if(ext == NULL) {
  41f9e0:	2d00      	cmp	r5, #0
  41f9e2:	d065      	beq.n	41fab0 <lv_label_create+0x128>
    ext->text       = NULL;
  41f9e4:	2300      	movs	r3, #0
  41f9e6:	602b      	str	r3, [r5, #0]
    ext->static_txt = 0;
  41f9e8:	7caa      	ldrb	r2, [r5, #18]
    ext->align      = LV_LABEL_ALIGN_AUTO;
  41f9ea:	f002 02b7 	and.w	r2, r2, #183	; 0xb7
    ext->dot_end    = LV_LABEL_DOT_END_INV;
  41f9ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
  41f9f2:	60a9      	str	r1, [r5, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
  41f9f4:	f042 0230 	orr.w	r2, r2, #48	; 0x30
  41f9f8:	f363 0202 	bfi	r2, r3, #0, #3
  41f9fc:	74aa      	strb	r2, [r5, #18]
    ext->anim_speed = LV_LABEL_DEF_SCROLL_SPEED;
  41f9fe:	2219      	movs	r2, #25
  41fa00:	81aa      	strh	r2, [r5, #12]
    ext->offset.x = 0;
  41fa02:	81eb      	strh	r3, [r5, #14]
    ext->offset.y = 0;
  41fa04:	822b      	strh	r3, [r5, #16]
    ext->dot.tmp_ptr   = NULL;
  41fa06:	606b      	str	r3, [r5, #4]
    ext->dot_tmp_alloc = 0;
  41fa08:	7cea      	ldrb	r2, [r5, #19]
  41fa0a:	f363 0200 	bfi	r2, r3, #0, #1
  41fa0e:	74ea      	strb	r2, [r5, #19]
    lv_obj_set_design_cb(new_label, lv_label_design);
  41fa10:	4952      	ldr	r1, [pc, #328]	; (41fb5c <lv_label_create+0x1d4>)
  41fa12:	4620      	mov	r0, r4
  41fa14:	4b52      	ldr	r3, [pc, #328]	; (41fb60 <lv_label_create+0x1d8>)
  41fa16:	4798      	blx	r3
    lv_obj_set_signal_cb(new_label, lv_label_signal);
  41fa18:	4952      	ldr	r1, [pc, #328]	; (41fb64 <lv_label_create+0x1dc>)
  41fa1a:	4620      	mov	r0, r4
  41fa1c:	4b52      	ldr	r3, [pc, #328]	; (41fb68 <lv_label_create+0x1e0>)
  41fa1e:	4798      	blx	r3
    if(copy == NULL) {
  41fa20:	2f00      	cmp	r7, #0
  41fa22:	d04a      	beq.n	41faba <lv_label_create+0x132>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
  41fa24:	4638      	mov	r0, r7
  41fa26:	4b49      	ldr	r3, [pc, #292]	; (41fb4c <lv_label_create+0x1c4>)
  41fa28:	4798      	blx	r3
  41fa2a:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
  41fa2c:	4638      	mov	r0, r7
  41fa2e:	4b4f      	ldr	r3, [pc, #316]	; (41fb6c <lv_label_create+0x1e4>)
  41fa30:	4798      	blx	r3
  41fa32:	4601      	mov	r1, r0
  41fa34:	4620      	mov	r0, r4
  41fa36:	4b4e      	ldr	r3, [pc, #312]	; (41fb70 <lv_label_create+0x1e8>)
  41fa38:	4798      	blx	r3
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
  41fa3a:	4638      	mov	r0, r7
  41fa3c:	4b4d      	ldr	r3, [pc, #308]	; (41fb74 <lv_label_create+0x1ec>)
  41fa3e:	4798      	blx	r3
  41fa40:	4601      	mov	r1, r0
  41fa42:	4620      	mov	r0, r4
  41fa44:	4b4c      	ldr	r3, [pc, #304]	; (41fb78 <lv_label_create+0x1f0>)
  41fa46:	4798      	blx	r3
        lv_label_set_align(new_label, lv_label_get_align(copy));
  41fa48:	4638      	mov	r0, r7
  41fa4a:	4b4c      	ldr	r3, [pc, #304]	; (41fb7c <lv_label_create+0x1f4>)
  41fa4c:	4798      	blx	r3
  41fa4e:	4601      	mov	r1, r0
  41fa50:	4620      	mov	r0, r4
  41fa52:	4b4b      	ldr	r3, [pc, #300]	; (41fb80 <lv_label_create+0x1f8>)
  41fa54:	4798      	blx	r3
        if(copy_ext->static_txt == 0)
  41fa56:	7cb3      	ldrb	r3, [r6, #18]
  41fa58:	f013 0f08 	tst.w	r3, #8
  41fa5c:	d13e      	bne.n	41fadc <lv_label_create+0x154>
            lv_label_set_text(new_label, lv_label_get_text(copy));
  41fa5e:	4638      	mov	r0, r7
  41fa60:	4b48      	ldr	r3, [pc, #288]	; (41fb84 <lv_label_create+0x1fc>)
  41fa62:	4798      	blx	r3
  41fa64:	4601      	mov	r1, r0
  41fa66:	4620      	mov	r0, r4
  41fa68:	4b47      	ldr	r3, [pc, #284]	; (41fb88 <lv_label_create+0x200>)
  41fa6a:	4798      	blx	r3
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
  41fa6c:	7cb3      	ldrb	r3, [r6, #18]
  41fa6e:	f003 0307 	and.w	r3, r3, #7
  41fa72:	2b02      	cmp	r3, #2
  41fa74:	d03a      	beq.n	41faec <lv_label_create+0x164>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
  41fa76:	7cf3      	ldrb	r3, [r6, #19]
  41fa78:	f013 0f01 	tst.w	r3, #1
  41fa7c:	d055      	beq.n	41fb2a <lv_label_create+0x1a2>
  41fa7e:	6870      	ldr	r0, [r6, #4]
  41fa80:	2800      	cmp	r0, #0
  41fa82:	d052      	beq.n	41fb2a <lv_label_create+0x1a2>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
  41fa84:	4b41      	ldr	r3, [pc, #260]	; (41fb8c <lv_label_create+0x204>)
  41fa86:	4798      	blx	r3
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
  41fa88:	4602      	mov	r2, r0
  41fa8a:	6869      	ldr	r1, [r5, #4]
  41fa8c:	4620      	mov	r0, r4
  41fa8e:	4b40      	ldr	r3, [pc, #256]	; (41fb90 <lv_label_create+0x208>)
  41fa90:	4798      	blx	r3
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
  41fa92:	7cf2      	ldrb	r2, [r6, #19]
  41fa94:	7ceb      	ldrb	r3, [r5, #19]
  41fa96:	f362 0300 	bfi	r3, r2, #0, #1
  41fa9a:	74eb      	strb	r3, [r5, #19]
        ext->dot_end       = copy_ext->dot_end;
  41fa9c:	68b3      	ldr	r3, [r6, #8]
  41fa9e:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
  41faa0:	22ff      	movs	r2, #255	; 0xff
  41faa2:	4611      	mov	r1, r2
  41faa4:	4620      	mov	r0, r4
  41faa6:	4b3b      	ldr	r3, [pc, #236]	; (41fb94 <lv_label_create+0x20c>)
  41faa8:	4798      	blx	r3
}
  41faaa:	4620      	mov	r0, r4
  41faac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lv_obj_del(new_label);
  41fab0:	4620      	mov	r0, r4
  41fab2:	4b39      	ldr	r3, [pc, #228]	; (41fb98 <lv_label_create+0x210>)
  41fab4:	4798      	blx	r3
        return NULL;
  41fab6:	2400      	movs	r4, #0
  41fab8:	e7f7      	b.n	41faaa <lv_label_create+0x122>
        lv_theme_apply(new_label, LV_THEME_LABEL);
  41faba:	2112      	movs	r1, #18
  41fabc:	4620      	mov	r0, r4
  41fabe:	4b37      	ldr	r3, [pc, #220]	; (41fb9c <lv_label_create+0x214>)
  41fac0:	4798      	blx	r3
        lv_obj_set_click(new_label, false);
  41fac2:	2100      	movs	r1, #0
  41fac4:	4620      	mov	r0, r4
  41fac6:	4b36      	ldr	r3, [pc, #216]	; (41fba0 <lv_label_create+0x218>)
  41fac8:	4798      	blx	r3
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
  41faca:	2100      	movs	r1, #0
  41facc:	4620      	mov	r0, r4
  41face:	4b28      	ldr	r3, [pc, #160]	; (41fb70 <lv_label_create+0x1e8>)
  41fad0:	4798      	blx	r3
        lv_label_set_text(new_label, "Text");
  41fad2:	4934      	ldr	r1, [pc, #208]	; (41fba4 <lv_label_create+0x21c>)
  41fad4:	4620      	mov	r0, r4
  41fad6:	4b2c      	ldr	r3, [pc, #176]	; (41fb88 <lv_label_create+0x200>)
  41fad8:	4798      	blx	r3
  41fada:	e7e6      	b.n	41faaa <lv_label_create+0x122>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
  41fadc:	4638      	mov	r0, r7
  41fade:	4b29      	ldr	r3, [pc, #164]	; (41fb84 <lv_label_create+0x1fc>)
  41fae0:	4798      	blx	r3
  41fae2:	4601      	mov	r1, r0
  41fae4:	4620      	mov	r0, r4
  41fae6:	4b30      	ldr	r3, [pc, #192]	; (41fba8 <lv_label_create+0x220>)
  41fae8:	4798      	blx	r3
  41faea:	e7bf      	b.n	41fa6c <lv_label_create+0xe4>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
  41faec:	682f      	ldr	r7, [r5, #0]
  41faee:	6830      	ldr	r0, [r6, #0]
  41faf0:	4b2e      	ldr	r3, [pc, #184]	; (41fbac <lv_label_create+0x224>)
  41faf2:	4798      	blx	r3
  41faf4:	4601      	mov	r1, r0
  41faf6:	4638      	mov	r0, r7
  41faf8:	4b2d      	ldr	r3, [pc, #180]	; (41fbb0 <lv_label_create+0x228>)
  41fafa:	4798      	blx	r3
  41fafc:	6028      	str	r0, [r5, #0]
            LV_ASSERT_MEM(ext->text);
  41fafe:	4b10      	ldr	r3, [pc, #64]	; (41fb40 <lv_label_create+0x1b8>)
  41fb00:	4798      	blx	r3
  41fb02:	b928      	cbnz	r0, 41fb10 <lv_label_create+0x188>
  41fb04:	682a      	ldr	r2, [r5, #0]
  41fb06:	2300      	movs	r3, #0
  41fb08:	4811      	ldr	r0, [pc, #68]	; (41fb50 <lv_label_create+0x1c8>)
  41fb0a:	4912      	ldr	r1, [pc, #72]	; (41fb54 <lv_label_create+0x1cc>)
  41fb0c:	4788      	blx	r1
  41fb0e:	e7fe      	b.n	41fb0e <lv_label_create+0x186>
            if(ext->text == NULL) return NULL;
  41fb10:	682f      	ldr	r7, [r5, #0]
  41fb12:	b187      	cbz	r7, 41fb36 <lv_label_create+0x1ae>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
  41fb14:	f8d6 8000 	ldr.w	r8, [r6]
  41fb18:	4640      	mov	r0, r8
  41fb1a:	4b24      	ldr	r3, [pc, #144]	; (41fbac <lv_label_create+0x224>)
  41fb1c:	4798      	blx	r3
  41fb1e:	4602      	mov	r2, r0
  41fb20:	4641      	mov	r1, r8
  41fb22:	4638      	mov	r0, r7
  41fb24:	4b23      	ldr	r3, [pc, #140]	; (41fbb4 <lv_label_create+0x22c>)
  41fb26:	4798      	blx	r3
  41fb28:	e7a5      	b.n	41fa76 <lv_label_create+0xee>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
  41fb2a:	2204      	movs	r2, #4
  41fb2c:	18b1      	adds	r1, r6, r2
  41fb2e:	18a8      	adds	r0, r5, r2
  41fb30:	4b20      	ldr	r3, [pc, #128]	; (41fbb4 <lv_label_create+0x22c>)
  41fb32:	4798      	blx	r3
  41fb34:	e7ad      	b.n	41fa92 <lv_label_create+0x10a>
            if(ext->text == NULL) return NULL;
  41fb36:	2400      	movs	r4, #0
  41fb38:	e7b7      	b.n	41faaa <lv_label_create+0x122>
  41fb3a:	bf00      	nop
  41fb3c:	0040635d 	.word	0x0040635d
  41fb40:	004157b9 	.word	0x004157b9
  41fb44:	204147ec 	.word	0x204147ec
  41fb48:	00405489 	.word	0x00405489
  41fb4c:	00407b5d 	.word	0x00407b5d
  41fb50:	004260b0 	.word	0x004260b0
  41fb54:	004157c5 	.word	0x004157c5
  41fb58:	00407b0d 	.word	0x00407b0d
  41fb5c:	0041ee39 	.word	0x0041ee39
  41fb60:	00405461 	.word	0x00405461
  41fb64:	0041f62d 	.word	0x0041f62d
  41fb68:	00405425 	.word	0x00405425
  41fb6c:	0041eab5 	.word	0x0041eab5
  41fb70:	0041f881 	.word	0x0041f881
  41fb74:	0041eb25 	.word	0x0041eb25
  41fb78:	0041f935 	.word	0x0041f935
  41fb7c:	0041eae9 	.word	0x0041eae9
  41fb80:	0041ea39 	.word	0x0041ea39
  41fb84:	0041ea85 	.word	0x0041ea85
  41fb88:	0041f725 	.word	0x0041f725
  41fb8c:	00422bc1 	.word	0x00422bc1
  41fb90:	0041e999 	.word	0x0041e999
  41fb94:	004073a9 	.word	0x004073a9
  41fb98:	00407cbd 	.word	0x00407cbd
  41fb9c:	0041722d 	.word	0x0041722d
  41fba0:	00405265 	.word	0x00405265
  41fba4:	004297f0 	.word	0x004297f0
  41fba8:	0041f821 	.word	0x0041f821
  41fbac:	00415ff9 	.word	0x00415ff9
  41fbb0:	004161f1 	.word	0x004161f1
  41fbb4:	004160d1 	.word	0x004160d1

0041fbb8 <sysclk_init>:
  41fbb8:	b508      	push	{r3, lr}
  41fbba:	4810      	ldr	r0, [pc, #64]	; (41fbfc <sysclk_init+0x44>)
  41fbbc:	4b10      	ldr	r3, [pc, #64]	; (41fc00 <sysclk_init+0x48>)
  41fbbe:	4798      	blx	r3
  41fbc0:	213e      	movs	r1, #62	; 0x3e
  41fbc2:	2000      	movs	r0, #0
  41fbc4:	4b0f      	ldr	r3, [pc, #60]	; (41fc04 <sysclk_init+0x4c>)
  41fbc6:	4798      	blx	r3
  41fbc8:	4b0f      	ldr	r3, [pc, #60]	; (41fc08 <sysclk_init+0x50>)
  41fbca:	4798      	blx	r3
  41fbcc:	2800      	cmp	r0, #0
  41fbce:	d0fb      	beq.n	41fbc8 <sysclk_init+0x10>
  41fbd0:	4b0e      	ldr	r3, [pc, #56]	; (41fc0c <sysclk_init+0x54>)
  41fbd2:	4798      	blx	r3
  41fbd4:	4a0e      	ldr	r2, [pc, #56]	; (41fc10 <sysclk_init+0x58>)
  41fbd6:	4b0f      	ldr	r3, [pc, #60]	; (41fc14 <sysclk_init+0x5c>)
  41fbd8:	629a      	str	r2, [r3, #40]	; 0x28
  41fbda:	4b0f      	ldr	r3, [pc, #60]	; (41fc18 <sysclk_init+0x60>)
  41fbdc:	4798      	blx	r3
  41fbde:	2800      	cmp	r0, #0
  41fbe0:	d0fb      	beq.n	41fbda <sysclk_init+0x22>
  41fbe2:	2002      	movs	r0, #2
  41fbe4:	4b0d      	ldr	r3, [pc, #52]	; (41fc1c <sysclk_init+0x64>)
  41fbe6:	4798      	blx	r3
  41fbe8:	2000      	movs	r0, #0
  41fbea:	4b0d      	ldr	r3, [pc, #52]	; (41fc20 <sysclk_init+0x68>)
  41fbec:	4798      	blx	r3
  41fbee:	4b0d      	ldr	r3, [pc, #52]	; (41fc24 <sysclk_init+0x6c>)
  41fbf0:	4798      	blx	r3
  41fbf2:	480d      	ldr	r0, [pc, #52]	; (41fc28 <sysclk_init+0x70>)
  41fbf4:	4b02      	ldr	r3, [pc, #8]	; (41fc00 <sysclk_init+0x48>)
  41fbf6:	4798      	blx	r3
  41fbf8:	bd08      	pop	{r3, pc}
  41fbfa:	bf00      	nop
  41fbfc:	07270e00 	.word	0x07270e00
  41fc00:	004209f1 	.word	0x004209f1
  41fc04:	004204b1 	.word	0x004204b1
  41fc08:	00420505 	.word	0x00420505
  41fc0c:	00420515 	.word	0x00420515
  41fc10:	20183f01 	.word	0x20183f01
  41fc14:	400e0600 	.word	0x400e0600
  41fc18:	00420525 	.word	0x00420525
  41fc1c:	00420421 	.word	0x00420421
  41fc20:	0042045d 	.word	0x0042045d
  41fc24:	004208e1 	.word	0x004208e1
  41fc28:	11e1a300 	.word	0x11e1a300

0041fc2c <spi_master_init>:
  41fc2c:	b510      	push	{r4, lr}
  41fc2e:	4604      	mov	r4, r0
  41fc30:	4b10      	ldr	r3, [pc, #64]	; (41fc74 <spi_master_init+0x48>)
  41fc32:	4798      	blx	r3
  41fc34:	2380      	movs	r3, #128	; 0x80
  41fc36:	6023      	str	r3, [r4, #0]
  41fc38:	6863      	ldr	r3, [r4, #4]
  41fc3a:	f043 0301 	orr.w	r3, r3, #1
  41fc3e:	6063      	str	r3, [r4, #4]
  41fc40:	6863      	ldr	r3, [r4, #4]
  41fc42:	f043 0310 	orr.w	r3, r3, #16
  41fc46:	6063      	str	r3, [r4, #4]
  41fc48:	6863      	ldr	r3, [r4, #4]
  41fc4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  41fc4e:	6063      	str	r3, [r4, #4]
  41fc50:	2100      	movs	r1, #0
  41fc52:	4620      	mov	r0, r4
  41fc54:	4b08      	ldr	r3, [pc, #32]	; (41fc78 <spi_master_init+0x4c>)
  41fc56:	4798      	blx	r3
  41fc58:	6863      	ldr	r3, [r4, #4]
  41fc5a:	f023 0302 	bic.w	r3, r3, #2
  41fc5e:	6063      	str	r3, [r4, #4]
  41fc60:	6863      	ldr	r3, [r4, #4]
  41fc62:	f023 0304 	bic.w	r3, r3, #4
  41fc66:	6063      	str	r3, [r4, #4]
  41fc68:	2100      	movs	r1, #0
  41fc6a:	4620      	mov	r0, r4
  41fc6c:	4b03      	ldr	r3, [pc, #12]	; (41fc7c <spi_master_init+0x50>)
  41fc6e:	4798      	blx	r3
  41fc70:	bd10      	pop	{r4, pc}
  41fc72:	bf00      	nop
  41fc74:	00420555 	.word	0x00420555
  41fc78:	00420581 	.word	0x00420581
  41fc7c:	00420597 	.word	0x00420597

0041fc80 <spi_master_setup_device>:
  41fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41fc84:	4604      	mov	r4, r0
  41fc86:	460d      	mov	r5, r1
  41fc88:	4616      	mov	r6, r2
  41fc8a:	4915      	ldr	r1, [pc, #84]	; (41fce0 <spi_master_setup_device+0x60>)
  41fc8c:	4618      	mov	r0, r3
  41fc8e:	4b15      	ldr	r3, [pc, #84]	; (41fce4 <spi_master_setup_device+0x64>)
  41fc90:	4798      	blx	r3
  41fc92:	4607      	mov	r7, r0
  41fc94:	2300      	movs	r3, #0
  41fc96:	461a      	mov	r2, r3
  41fc98:	6829      	ldr	r1, [r5, #0]
  41fc9a:	4620      	mov	r0, r4
  41fc9c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 41fcfc <spi_master_setup_device+0x7c>
  41fca0:	47c0      	blx	r8
  41fca2:	2208      	movs	r2, #8
  41fca4:	6829      	ldr	r1, [r5, #0]
  41fca6:	4620      	mov	r0, r4
  41fca8:	4b0f      	ldr	r3, [pc, #60]	; (41fce8 <spi_master_setup_device+0x68>)
  41fcaa:	4798      	blx	r3
  41fcac:	b2fa      	uxtb	r2, r7
  41fcae:	6829      	ldr	r1, [r5, #0]
  41fcb0:	4620      	mov	r0, r4
  41fcb2:	4b0e      	ldr	r3, [pc, #56]	; (41fcec <spi_master_setup_device+0x6c>)
  41fcb4:	4798      	blx	r3
  41fcb6:	2208      	movs	r2, #8
  41fcb8:	6829      	ldr	r1, [r5, #0]
  41fcba:	4620      	mov	r0, r4
  41fcbc:	4b0c      	ldr	r3, [pc, #48]	; (41fcf0 <spi_master_setup_device+0x70>)
  41fcbe:	4798      	blx	r3
  41fcc0:	0872      	lsrs	r2, r6, #1
  41fcc2:	6829      	ldr	r1, [r5, #0]
  41fcc4:	4620      	mov	r0, r4
  41fcc6:	4b0b      	ldr	r3, [pc, #44]	; (41fcf4 <spi_master_setup_device+0x74>)
  41fcc8:	4798      	blx	r3
  41fcca:	f086 0201 	eor.w	r2, r6, #1
  41fcce:	f002 0201 	and.w	r2, r2, #1
  41fcd2:	6829      	ldr	r1, [r5, #0]
  41fcd4:	4620      	mov	r0, r4
  41fcd6:	4b08      	ldr	r3, [pc, #32]	; (41fcf8 <spi_master_setup_device+0x78>)
  41fcd8:	4798      	blx	r3
  41fcda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  41fcde:	bf00      	nop
  41fce0:	08f0d180 	.word	0x08f0d180
  41fce4:	0042065b 	.word	0x0042065b
  41fce8:	00420641 	.word	0x00420641
  41fcec:	00420673 	.word	0x00420673
  41fcf0:	004205ed 	.word	0x004205ed
  41fcf4:	004205a9 	.word	0x004205a9
  41fcf8:	004205cb 	.word	0x004205cb
  41fcfc:	004206a1 	.word	0x004206a1

0041fd00 <spi_select_device>:
  41fd00:	b508      	push	{r3, lr}
  41fd02:	6843      	ldr	r3, [r0, #4]
  41fd04:	f013 0f04 	tst.w	r3, #4
  41fd08:	d005      	beq.n	41fd16 <spi_select_device+0x16>
  41fd0a:	2301      	movs	r3, #1
  41fd0c:	b143      	cbz	r3, 41fd20 <spi_select_device+0x20>
  41fd0e:	6809      	ldr	r1, [r1, #0]
  41fd10:	290f      	cmp	r1, #15
  41fd12:	d902      	bls.n	41fd1a <spi_select_device+0x1a>
  41fd14:	bd08      	pop	{r3, pc}
  41fd16:	2300      	movs	r3, #0
  41fd18:	e7f8      	b.n	41fd0c <spi_select_device+0xc>
  41fd1a:	4b06      	ldr	r3, [pc, #24]	; (41fd34 <spi_select_device+0x34>)
  41fd1c:	4798      	blx	r3
  41fd1e:	bd08      	pop	{r3, pc}
  41fd20:	6809      	ldr	r1, [r1, #0]
  41fd22:	2903      	cmp	r1, #3
  41fd24:	d8f6      	bhi.n	41fd14 <spi_select_device+0x14>
  41fd26:	2301      	movs	r3, #1
  41fd28:	fa03 f101 	lsl.w	r1, r3, r1
  41fd2c:	43c9      	mvns	r1, r1
  41fd2e:	4b01      	ldr	r3, [pc, #4]	; (41fd34 <spi_select_device+0x34>)
  41fd30:	4798      	blx	r3
  41fd32:	e7ef      	b.n	41fd14 <spi_select_device+0x14>
  41fd34:	00420581 	.word	0x00420581

0041fd38 <_read>:
  41fd38:	b570      	push	{r4, r5, r6, lr}
  41fd3a:	460d      	mov	r5, r1
  41fd3c:	4614      	mov	r4, r2
  41fd3e:	4606      	mov	r6, r0
  41fd40:	b158      	cbz	r0, 41fd5a <_read+0x22>
  41fd42:	f04f 36ff 	mov.w	r6, #4294967295
  41fd46:	e00a      	b.n	41fd5e <_read+0x26>
  41fd48:	4b06      	ldr	r3, [pc, #24]	; (41fd64 <_read+0x2c>)
  41fd4a:	6818      	ldr	r0, [r3, #0]
  41fd4c:	4b06      	ldr	r3, [pc, #24]	; (41fd68 <_read+0x30>)
  41fd4e:	681b      	ldr	r3, [r3, #0]
  41fd50:	4629      	mov	r1, r5
  41fd52:	4798      	blx	r3
  41fd54:	3501      	adds	r5, #1
  41fd56:	3601      	adds	r6, #1
  41fd58:	3c01      	subs	r4, #1
  41fd5a:	2c00      	cmp	r4, #0
  41fd5c:	dcf4      	bgt.n	41fd48 <_read+0x10>
  41fd5e:	4630      	mov	r0, r6
  41fd60:	bd70      	pop	{r4, r5, r6, pc}
  41fd62:	bf00      	nop
  41fd64:	2043a32c 	.word	0x2043a32c
  41fd68:	2043a324 	.word	0x2043a324

0041fd6c <_write>:
  41fd6c:	b570      	push	{r4, r5, r6, lr}
  41fd6e:	3801      	subs	r0, #1
  41fd70:	2802      	cmp	r0, #2
  41fd72:	d80f      	bhi.n	41fd94 <_write+0x28>
  41fd74:	4614      	mov	r4, r2
  41fd76:	2500      	movs	r5, #0
  41fd78:	b18c      	cbz	r4, 41fd9e <_write+0x32>
  41fd7a:	4b0a      	ldr	r3, [pc, #40]	; (41fda4 <_write+0x38>)
  41fd7c:	6818      	ldr	r0, [r3, #0]
  41fd7e:	1c4e      	adds	r6, r1, #1
  41fd80:	4b09      	ldr	r3, [pc, #36]	; (41fda8 <_write+0x3c>)
  41fd82:	681b      	ldr	r3, [r3, #0]
  41fd84:	7809      	ldrb	r1, [r1, #0]
  41fd86:	4798      	blx	r3
  41fd88:	2800      	cmp	r0, #0
  41fd8a:	db06      	blt.n	41fd9a <_write+0x2e>
  41fd8c:	3501      	adds	r5, #1
  41fd8e:	3c01      	subs	r4, #1
  41fd90:	4631      	mov	r1, r6
  41fd92:	e7f1      	b.n	41fd78 <_write+0xc>
  41fd94:	f04f 35ff 	mov.w	r5, #4294967295
  41fd98:	e001      	b.n	41fd9e <_write+0x32>
  41fd9a:	f04f 35ff 	mov.w	r5, #4294967295
  41fd9e:	4628      	mov	r0, r5
  41fda0:	bd70      	pop	{r4, r5, r6, pc}
  41fda2:	bf00      	nop
  41fda4:	2043a32c 	.word	0x2043a32c
  41fda8:	2043a328 	.word	0x2043a328

0041fdac <board_init>:
  41fdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  41fdb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  41fdb4:	4b9a      	ldr	r3, [pc, #616]	; (420020 <board_init+0x274>)
  41fdb6:	605a      	str	r2, [r3, #4]
  41fdb8:	f3bf 8f4f 	dsb	sy
  41fdbc:	f3bf 8f6f 	isb	sy
  41fdc0:	4b98      	ldr	r3, [pc, #608]	; (420024 <board_init+0x278>)
  41fdc2:	2200      	movs	r2, #0
  41fdc4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  41fdc8:	695a      	ldr	r2, [r3, #20]
  41fdca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  41fdce:	615a      	str	r2, [r3, #20]
  41fdd0:	f3bf 8f4f 	dsb	sy
  41fdd4:	f3bf 8f6f 	isb	sy
  41fdd8:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
  41fddc:	f3c6 304e 	ubfx	r0, r6, #13, #15
  41fde0:	f006 0507 	and.w	r5, r6, #7
  41fde4:	3504      	adds	r5, #4
  41fde6:	f3c6 06c9 	ubfx	r6, r6, #3, #10
  41fdea:	fab6 f486 	clz	r4, r6
  41fdee:	f004 041f 	and.w	r4, r4, #31
  41fdf2:	f3bf 8f4f 	dsb	sy
  41fdf6:	e00e      	b.n	41fe16 <board_init+0x6a>
  41fdf8:	4613      	mov	r3, r2
  41fdfa:	fa03 f204 	lsl.w	r2, r3, r4
  41fdfe:	fa00 f105 	lsl.w	r1, r0, r5
  41fe02:	430a      	orrs	r2, r1
  41fe04:	4987      	ldr	r1, [pc, #540]	; (420024 <board_init+0x278>)
  41fe06:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
  41fe0a:	1e5a      	subs	r2, r3, #1
  41fe0c:	2b00      	cmp	r3, #0
  41fe0e:	d1f3      	bne.n	41fdf8 <board_init+0x4c>
  41fe10:	1e43      	subs	r3, r0, #1
  41fe12:	b110      	cbz	r0, 41fe1a <board_init+0x6e>
  41fe14:	4618      	mov	r0, r3
  41fe16:	4633      	mov	r3, r6
  41fe18:	e7ef      	b.n	41fdfa <board_init+0x4e>
  41fe1a:	f3bf 8f4f 	dsb	sy
  41fe1e:	460b      	mov	r3, r1
  41fe20:	694a      	ldr	r2, [r1, #20]
  41fe22:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  41fe26:	614a      	str	r2, [r1, #20]
  41fe28:	f3bf 8f4f 	dsb	sy
  41fe2c:	f3bf 8f6f 	isb	sy
  41fe30:	4a7d      	ldr	r2, [pc, #500]	; (420028 <board_init+0x27c>)
  41fe32:	497e      	ldr	r1, [pc, #504]	; (42002c <board_init+0x280>)
  41fe34:	6051      	str	r1, [r2, #4]
  41fe36:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  41fe3a:	6051      	str	r1, [r2, #4]
  41fe3c:	f3bf 8f4f 	dsb	sy
  41fe40:	f3bf 8f6f 	isb	sy
  41fe44:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  41fe48:	f022 0201 	bic.w	r2, r2, #1
  41fe4c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  41fe50:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  41fe54:	f022 0201 	bic.w	r2, r2, #1
  41fe58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  41fe5c:	f3bf 8f4f 	dsb	sy
  41fe60:	f3bf 8f6f 	isb	sy
  41fe64:	200a      	movs	r0, #10
  41fe66:	4c72      	ldr	r4, [pc, #456]	; (420030 <board_init+0x284>)
  41fe68:	47a0      	blx	r4
  41fe6a:	200b      	movs	r0, #11
  41fe6c:	47a0      	blx	r4
  41fe6e:	200c      	movs	r0, #12
  41fe70:	47a0      	blx	r4
  41fe72:	2010      	movs	r0, #16
  41fe74:	47a0      	blx	r4
  41fe76:	2011      	movs	r0, #17
  41fe78:	47a0      	blx	r4
  41fe7a:	4e6e      	ldr	r6, [pc, #440]	; (420034 <board_init+0x288>)
  41fe7c:	f44f 7880 	mov.w	r8, #256	; 0x100
  41fe80:	f8c6 8010 	str.w	r8, [r6, #16]
  41fe84:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
  41fe88:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
  41fe8c:	4c6a      	ldr	r4, [pc, #424]	; (420038 <board_init+0x28c>)
  41fe8e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  41fe92:	6165      	str	r5, [r4, #20]
  41fe94:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
  41fe98:	6665      	str	r5, [r4, #100]	; 0x64
  41fe9a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  41fe9e:	6565      	str	r5, [r4, #84]	; 0x54
  41fea0:	6225      	str	r5, [r4, #32]
  41fea2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  41fea6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  41fea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41feac:	6723      	str	r3, [r4, #112]	; 0x70
  41feae:	6f63      	ldr	r3, [r4, #116]	; 0x74
  41feb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  41feb4:	6763      	str	r3, [r4, #116]	; 0x74
  41feb6:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
  41feba:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
  41febe:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  41fec2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  41fec6:	6623      	str	r3, [r4, #96]	; 0x60
  41fec8:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  41fecc:	6563      	str	r3, [r4, #84]	; 0x54
  41fece:	6263      	str	r3, [r4, #36]	; 0x24
  41fed0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  41fed4:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41fed6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41feda:	6722      	str	r2, [r4, #112]	; 0x70
  41fedc:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41fede:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  41fee2:	6762      	str	r2, [r4, #116]	; 0x74
  41fee4:	6063      	str	r3, [r4, #4]
  41fee6:	4a55      	ldr	r2, [pc, #340]	; (42003c <board_init+0x290>)
  41fee8:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  41feec:	f043 0310 	orr.w	r3, r3, #16
  41fef0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  41fef4:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  41fef8:	2310      	movs	r3, #16
  41fefa:	6613      	str	r3, [r2, #96]	; 0x60
  41fefc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  41ff00:	6553      	str	r3, [r2, #84]	; 0x54
  41ff02:	6253      	str	r3, [r2, #36]	; 0x24
  41ff04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  41ff08:	6f11      	ldr	r1, [r2, #112]	; 0x70
  41ff0a:	4319      	orrs	r1, r3
  41ff0c:	6711      	str	r1, [r2, #112]	; 0x70
  41ff0e:	6f51      	ldr	r1, [r2, #116]	; 0x74
  41ff10:	4319      	orrs	r1, r3
  41ff12:	6751      	str	r1, [r2, #116]	; 0x74
  41ff14:	6053      	str	r3, [r2, #4]
  41ff16:	2208      	movs	r2, #8
  41ff18:	6622      	str	r2, [r4, #96]	; 0x60
  41ff1a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
  41ff1e:	6562      	str	r2, [r4, #84]	; 0x54
  41ff20:	6262      	str	r2, [r4, #36]	; 0x24
  41ff22:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  41ff26:	6f21      	ldr	r1, [r4, #112]	; 0x70
  41ff28:	f021 0108 	bic.w	r1, r1, #8
  41ff2c:	6721      	str	r1, [r4, #112]	; 0x70
  41ff2e:	6f61      	ldr	r1, [r4, #116]	; 0x74
  41ff30:	f021 0108 	bic.w	r1, r1, #8
  41ff34:	6761      	str	r1, [r4, #116]	; 0x74
  41ff36:	6062      	str	r2, [r4, #4]
  41ff38:	6623      	str	r3, [r4, #96]	; 0x60
  41ff3a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  41ff3e:	6563      	str	r3, [r4, #84]	; 0x54
  41ff40:	6263      	str	r3, [r4, #36]	; 0x24
  41ff42:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  41ff46:	6f22      	ldr	r2, [r4, #112]	; 0x70
  41ff48:	f022 0210 	bic.w	r2, r2, #16
  41ff4c:	6722      	str	r2, [r4, #112]	; 0x70
  41ff4e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  41ff50:	f022 0210 	bic.w	r2, r2, #16
  41ff54:	6762      	str	r2, [r4, #116]	; 0x74
  41ff56:	6063      	str	r3, [r4, #4]
  41ff58:	2300      	movs	r3, #0
  41ff5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  41ff5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41ff62:	4630      	mov	r0, r6
  41ff64:	4f36      	ldr	r7, [pc, #216]	; (420040 <board_init+0x294>)
  41ff66:	47b8      	blx	r7
  41ff68:	2300      	movs	r3, #0
  41ff6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  41ff6e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  41ff72:	4630      	mov	r0, r6
  41ff74:	47b8      	blx	r7
  41ff76:	2301      	movs	r3, #1
  41ff78:	22ff      	movs	r2, #255	; 0xff
  41ff7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ff7e:	4630      	mov	r0, r6
  41ff80:	47b8      	blx	r7
  41ff82:	2301      	movs	r3, #1
  41ff84:	223f      	movs	r2, #63	; 0x3f
  41ff86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ff8a:	482e      	ldr	r0, [pc, #184]	; (420044 <board_init+0x298>)
  41ff8c:	47b8      	blx	r7
  41ff8e:	2301      	movs	r3, #1
  41ff90:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  41ff94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ff98:	4620      	mov	r0, r4
  41ff9a:	47b8      	blx	r7
  41ff9c:	2301      	movs	r3, #1
  41ff9e:	4642      	mov	r2, r8
  41ffa0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ffa4:	4630      	mov	r0, r6
  41ffa6:	47b8      	blx	r7
  41ffa8:	2301      	movs	r3, #1
  41ffaa:	462a      	mov	r2, r5
  41ffac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ffb0:	4630      	mov	r0, r6
  41ffb2:	47b8      	blx	r7
  41ffb4:	2301      	movs	r3, #1
  41ffb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  41ffba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  41ffbe:	4822      	ldr	r0, [pc, #136]	; (420048 <board_init+0x29c>)
  41ffc0:	47b8      	blx	r7
  41ffc2:	2300      	movs	r3, #0
  41ffc4:	f44f 7200 	mov.w	r2, #512	; 0x200
  41ffc8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41ffcc:	4630      	mov	r0, r6
  41ffce:	47b8      	blx	r7
  41ffd0:	f44f 7100 	mov.w	r1, #512	; 0x200
  41ffd4:	4630      	mov	r0, r6
  41ffd6:	4b1d      	ldr	r3, [pc, #116]	; (42004c <board_init+0x2a0>)
  41ffd8:	4798      	blx	r3
  41ffda:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41ffde:	2074      	movs	r0, #116	; 0x74
  41ffe0:	4c1b      	ldr	r4, [pc, #108]	; (420050 <board_init+0x2a4>)
  41ffe2:	47a0      	blx	r4
  41ffe4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41ffe8:	2075      	movs	r0, #117	; 0x75
  41ffea:	47a0      	blx	r4
  41ffec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41fff0:	2076      	movs	r0, #118	; 0x76
  41fff2:	47a0      	blx	r4
  41fff4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  41fff8:	207b      	movs	r0, #123	; 0x7b
  41fffa:	47a0      	blx	r4
  41fffc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420000:	2018      	movs	r0, #24
  420002:	47a0      	blx	r4
  420004:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420008:	2006      	movs	r0, #6
  42000a:	47a0      	blx	r4
  42000c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420010:	2053      	movs	r0, #83	; 0x53
  420012:	47a0      	blx	r4
  420014:	2053      	movs	r0, #83	; 0x53
  420016:	4b0f      	ldr	r3, [pc, #60]	; (420054 <board_init+0x2a8>)
  420018:	4798      	blx	r3
  42001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  42001e:	bf00      	nop
  420020:	400e1850 	.word	0x400e1850
  420024:	e000ed00 	.word	0xe000ed00
  420028:	400e0c00 	.word	0x400e0c00
  42002c:	5a00080c 	.word	0x5a00080c
  420030:	00420535 	.word	0x00420535
  420034:	400e1200 	.word	0x400e1200
  420038:	400e0e00 	.word	0x400e0e00
  42003c:	40088000 	.word	0x40088000
  420040:	0042017d 	.word	0x0042017d
  420044:	400e1600 	.word	0x400e1600
  420048:	400e1400 	.word	0x400e1400
  42004c:	00420063 	.word	0x00420063
  420050:	0042023d 	.word	0x0042023d
  420054:	00420225 	.word	0x00420225

00420058 <pio_pull_up>:
  420058:	b90a      	cbnz	r2, 42005e <pio_pull_up+0x6>
  42005a:	6601      	str	r1, [r0, #96]	; 0x60
  42005c:	4770      	bx	lr
  42005e:	6641      	str	r1, [r0, #100]	; 0x64
  420060:	4770      	bx	lr

00420062 <pio_set>:
  420062:	6301      	str	r1, [r0, #48]	; 0x30
  420064:	4770      	bx	lr

00420066 <pio_set_peripheral>:
  420066:	6442      	str	r2, [r0, #68]	; 0x44
  420068:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  42006c:	d039      	beq.n	4200e2 <pio_set_peripheral+0x7c>
  42006e:	d813      	bhi.n	420098 <pio_set_peripheral+0x32>
  420070:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  420074:	d025      	beq.n	4200c2 <pio_set_peripheral+0x5c>
  420076:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  42007a:	d10a      	bne.n	420092 <pio_set_peripheral+0x2c>
  42007c:	6f03      	ldr	r3, [r0, #112]	; 0x70
  42007e:	4313      	orrs	r3, r2
  420080:	6703      	str	r3, [r0, #112]	; 0x70
  420082:	6f41      	ldr	r1, [r0, #116]	; 0x74
  420084:	6f43      	ldr	r3, [r0, #116]	; 0x74
  420086:	ea21 0102 	bic.w	r1, r1, r2
  42008a:	400b      	ands	r3, r1
  42008c:	6743      	str	r3, [r0, #116]	; 0x74
  42008e:	6042      	str	r2, [r0, #4]
  420090:	4770      	bx	lr
  420092:	2900      	cmp	r1, #0
  420094:	d1fb      	bne.n	42008e <pio_set_peripheral+0x28>
  420096:	4770      	bx	lr
  420098:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  42009c:	d020      	beq.n	4200e0 <pio_set_peripheral+0x7a>
  42009e:	d809      	bhi.n	4200b4 <pio_set_peripheral+0x4e>
  4200a0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4200a4:	d1f3      	bne.n	42008e <pio_set_peripheral+0x28>
  4200a6:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4200a8:	4313      	orrs	r3, r2
  4200aa:	6703      	str	r3, [r0, #112]	; 0x70
  4200ac:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4200ae:	4313      	orrs	r3, r2
  4200b0:	6743      	str	r3, [r0, #116]	; 0x74
  4200b2:	e7ec      	b.n	42008e <pio_set_peripheral+0x28>
  4200b4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4200b8:	d012      	beq.n	4200e0 <pio_set_peripheral+0x7a>
  4200ba:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4200be:	d00f      	beq.n	4200e0 <pio_set_peripheral+0x7a>
  4200c0:	e7e5      	b.n	42008e <pio_set_peripheral+0x28>
  4200c2:	b410      	push	{r4}
  4200c4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4200c6:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4200c8:	43d3      	mvns	r3, r2
  4200ca:	401c      	ands	r4, r3
  4200cc:	4021      	ands	r1, r4
  4200ce:	6701      	str	r1, [r0, #112]	; 0x70
  4200d0:	6f44      	ldr	r4, [r0, #116]	; 0x74
  4200d2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4200d4:	4023      	ands	r3, r4
  4200d6:	400b      	ands	r3, r1
  4200d8:	6743      	str	r3, [r0, #116]	; 0x74
  4200da:	6042      	str	r2, [r0, #4]
  4200dc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4200e0:	4770      	bx	lr
  4200e2:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4200e4:	6f03      	ldr	r3, [r0, #112]	; 0x70
  4200e6:	ea21 0102 	bic.w	r1, r1, r2
  4200ea:	400b      	ands	r3, r1
  4200ec:	6703      	str	r3, [r0, #112]	; 0x70
  4200ee:	6f43      	ldr	r3, [r0, #116]	; 0x74
  4200f0:	4313      	orrs	r3, r2
  4200f2:	6743      	str	r3, [r0, #116]	; 0x74
  4200f4:	e7cb      	b.n	42008e <pio_set_peripheral+0x28>

004200f6 <pio_disable_interrupt>:
  4200f6:	6441      	str	r1, [r0, #68]	; 0x44
  4200f8:	4770      	bx	lr
	...

004200fc <pio_set_input>:
  4200fc:	b570      	push	{r4, r5, r6, lr}
  4200fe:	4604      	mov	r4, r0
  420100:	460d      	mov	r5, r1
  420102:	4616      	mov	r6, r2
  420104:	4b0d      	ldr	r3, [pc, #52]	; (42013c <pio_set_input+0x40>)
  420106:	4798      	blx	r3
  420108:	f006 0201 	and.w	r2, r6, #1
  42010c:	4629      	mov	r1, r5
  42010e:	4620      	mov	r0, r4
  420110:	4b0b      	ldr	r3, [pc, #44]	; (420140 <pio_set_input+0x44>)
  420112:	4798      	blx	r3
  420114:	f016 0f0a 	tst.w	r6, #10
  420118:	d009      	beq.n	42012e <pio_set_input+0x32>
  42011a:	6225      	str	r5, [r4, #32]
  42011c:	f016 0f02 	tst.w	r6, #2
  420120:	d107      	bne.n	420132 <pio_set_input+0x36>
  420122:	f016 0f08 	tst.w	r6, #8
  420126:	d006      	beq.n	420136 <pio_set_input+0x3a>
  420128:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  42012c:	e003      	b.n	420136 <pio_set_input+0x3a>
  42012e:	6265      	str	r5, [r4, #36]	; 0x24
  420130:	e7f4      	b.n	42011c <pio_set_input+0x20>
  420132:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  420136:	6165      	str	r5, [r4, #20]
  420138:	6025      	str	r5, [r4, #0]
  42013a:	bd70      	pop	{r4, r5, r6, pc}
  42013c:	004200f7 	.word	0x004200f7
  420140:	00420059 	.word	0x00420059

00420144 <pio_set_output>:
  420144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420146:	4604      	mov	r4, r0
  420148:	460d      	mov	r5, r1
  42014a:	4616      	mov	r6, r2
  42014c:	461f      	mov	r7, r3
  42014e:	4b09      	ldr	r3, [pc, #36]	; (420174 <pio_set_output+0x30>)
  420150:	4798      	blx	r3
  420152:	9a06      	ldr	r2, [sp, #24]
  420154:	4629      	mov	r1, r5
  420156:	4620      	mov	r0, r4
  420158:	4b07      	ldr	r3, [pc, #28]	; (420178 <pio_set_output+0x34>)
  42015a:	4798      	blx	r3
  42015c:	b12f      	cbz	r7, 42016a <pio_set_output+0x26>
  42015e:	6525      	str	r5, [r4, #80]	; 0x50
  420160:	b92e      	cbnz	r6, 42016e <pio_set_output+0x2a>
  420162:	6365      	str	r5, [r4, #52]	; 0x34
  420164:	6125      	str	r5, [r4, #16]
  420166:	6025      	str	r5, [r4, #0]
  420168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  42016a:	6565      	str	r5, [r4, #84]	; 0x54
  42016c:	e7f8      	b.n	420160 <pio_set_output+0x1c>
  42016e:	6325      	str	r5, [r4, #48]	; 0x30
  420170:	e7f8      	b.n	420164 <pio_set_output+0x20>
  420172:	bf00      	nop
  420174:	004200f7 	.word	0x004200f7
  420178:	00420059 	.word	0x00420059

0042017c <pio_configure>:
  42017c:	b570      	push	{r4, r5, r6, lr}
  42017e:	b082      	sub	sp, #8
  420180:	4604      	mov	r4, r0
  420182:	4615      	mov	r5, r2
  420184:	461e      	mov	r6, r3
  420186:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  42018a:	d014      	beq.n	4201b6 <pio_configure+0x3a>
  42018c:	d90a      	bls.n	4201a4 <pio_configure+0x28>
  42018e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  420192:	d023      	beq.n	4201dc <pio_configure+0x60>
  420194:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  420198:	d020      	beq.n	4201dc <pio_configure+0x60>
  42019a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  42019e:	d017      	beq.n	4201d0 <pio_configure+0x54>
  4201a0:	2000      	movs	r0, #0
  4201a2:	e013      	b.n	4201cc <pio_configure+0x50>
  4201a4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4201a8:	d005      	beq.n	4201b6 <pio_configure+0x3a>
  4201aa:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4201ae:	d002      	beq.n	4201b6 <pio_configure+0x3a>
  4201b0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4201b4:	d1f4      	bne.n	4201a0 <pio_configure+0x24>
  4201b6:	462a      	mov	r2, r5
  4201b8:	4620      	mov	r0, r4
  4201ba:	4b10      	ldr	r3, [pc, #64]	; (4201fc <pio_configure+0x80>)
  4201bc:	4798      	blx	r3
  4201be:	f006 0201 	and.w	r2, r6, #1
  4201c2:	4629      	mov	r1, r5
  4201c4:	4620      	mov	r0, r4
  4201c6:	4b0e      	ldr	r3, [pc, #56]	; (420200 <pio_configure+0x84>)
  4201c8:	4798      	blx	r3
  4201ca:	2001      	movs	r0, #1
  4201cc:	b002      	add	sp, #8
  4201ce:	bd70      	pop	{r4, r5, r6, pc}
  4201d0:	461a      	mov	r2, r3
  4201d2:	4629      	mov	r1, r5
  4201d4:	4b0b      	ldr	r3, [pc, #44]	; (420204 <pio_configure+0x88>)
  4201d6:	4798      	blx	r3
  4201d8:	2001      	movs	r0, #1
  4201da:	e7f7      	b.n	4201cc <pio_configure+0x50>
  4201dc:	f006 0301 	and.w	r3, r6, #1
  4201e0:	9300      	str	r3, [sp, #0]
  4201e2:	f3c6 0380 	ubfx	r3, r6, #2, #1
  4201e6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4201ea:	bf14      	ite	ne
  4201ec:	2200      	movne	r2, #0
  4201ee:	2201      	moveq	r2, #1
  4201f0:	4629      	mov	r1, r5
  4201f2:	4620      	mov	r0, r4
  4201f4:	4c04      	ldr	r4, [pc, #16]	; (420208 <pio_configure+0x8c>)
  4201f6:	47a0      	blx	r4
  4201f8:	2001      	movs	r0, #1
  4201fa:	e7e7      	b.n	4201cc <pio_configure+0x50>
  4201fc:	00420067 	.word	0x00420067
  420200:	00420059 	.word	0x00420059
  420204:	004200fd 	.word	0x004200fd
  420208:	00420145 	.word	0x00420145

0042020c <pio_get_interrupt_status>:
  42020c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  42020e:	4770      	bx	lr

00420210 <pio_get_interrupt_mask>:
  420210:	6c80      	ldr	r0, [r0, #72]	; 0x48
  420212:	4770      	bx	lr

00420214 <pio_get_pin_group>:
  420214:	4b02      	ldr	r3, [pc, #8]	; (420220 <pio_get_pin_group+0xc>)
  420216:	eb03 1050 	add.w	r0, r3, r0, lsr #5
  42021a:	0240      	lsls	r0, r0, #9
  42021c:	4770      	bx	lr
  42021e:	bf00      	nop
  420220:	00200707 	.word	0x00200707

00420224 <pio_set_pin_high>:
  420224:	b510      	push	{r4, lr}
  420226:	4604      	mov	r4, r0
  420228:	4b03      	ldr	r3, [pc, #12]	; (420238 <pio_set_pin_high+0x14>)
  42022a:	4798      	blx	r3
  42022c:	f004 041f 	and.w	r4, r4, #31
  420230:	2301      	movs	r3, #1
  420232:	40a3      	lsls	r3, r4
  420234:	6303      	str	r3, [r0, #48]	; 0x30
  420236:	bd10      	pop	{r4, pc}
  420238:	00420215 	.word	0x00420215

0042023c <pio_configure_pin>:
  42023c:	b5f0      	push	{r4, r5, r6, r7, lr}
  42023e:	b083      	sub	sp, #12
  420240:	4604      	mov	r4, r0
  420242:	460d      	mov	r5, r1
  420244:	4b42      	ldr	r3, [pc, #264]	; (420350 <pio_configure_pin+0x114>)
  420246:	4798      	blx	r3
  420248:	4606      	mov	r6, r0
  42024a:	f005 43f0 	and.w	r3, r5, #2013265920	; 0x78000000
  42024e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  420252:	d055      	beq.n	420300 <pio_configure_pin+0xc4>
  420254:	d80a      	bhi.n	42026c <pio_configure_pin+0x30>
  420256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  42025a:	d02d      	beq.n	4202b8 <pio_configure_pin+0x7c>
  42025c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  420260:	d03c      	beq.n	4202dc <pio_configure_pin+0xa0>
  420262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  420266:	d014      	beq.n	420292 <pio_configure_pin+0x56>
  420268:	2000      	movs	r0, #0
  42026a:	e023      	b.n	4202b4 <pio_configure_pin+0x78>
  42026c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  420270:	d058      	beq.n	420324 <pio_configure_pin+0xe8>
  420272:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  420276:	d055      	beq.n	420324 <pio_configure_pin+0xe8>
  420278:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  42027c:	d1f4      	bne.n	420268 <pio_configure_pin+0x2c>
  42027e:	f004 011f 	and.w	r1, r4, #31
  420282:	2401      	movs	r4, #1
  420284:	462a      	mov	r2, r5
  420286:	fa04 f101 	lsl.w	r1, r4, r1
  42028a:	4b32      	ldr	r3, [pc, #200]	; (420354 <pio_configure_pin+0x118>)
  42028c:	4798      	blx	r3
  42028e:	4620      	mov	r0, r4
  420290:	e010      	b.n	4202b4 <pio_configure_pin+0x78>
  420292:	f004 041f 	and.w	r4, r4, #31
  420296:	2701      	movs	r7, #1
  420298:	fa07 f404 	lsl.w	r4, r7, r4
  42029c:	4622      	mov	r2, r4
  42029e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4202a2:	4b2d      	ldr	r3, [pc, #180]	; (420358 <pio_configure_pin+0x11c>)
  4202a4:	4798      	blx	r3
  4202a6:	ea05 0207 	and.w	r2, r5, r7
  4202aa:	4621      	mov	r1, r4
  4202ac:	4630      	mov	r0, r6
  4202ae:	4b2b      	ldr	r3, [pc, #172]	; (42035c <pio_configure_pin+0x120>)
  4202b0:	4798      	blx	r3
  4202b2:	4638      	mov	r0, r7
  4202b4:	b003      	add	sp, #12
  4202b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4202b8:	f004 041f 	and.w	r4, r4, #31
  4202bc:	2701      	movs	r7, #1
  4202be:	fa07 f404 	lsl.w	r4, r7, r4
  4202c2:	4622      	mov	r2, r4
  4202c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4202c8:	4b23      	ldr	r3, [pc, #140]	; (420358 <pio_configure_pin+0x11c>)
  4202ca:	4798      	blx	r3
  4202cc:	ea05 0207 	and.w	r2, r5, r7
  4202d0:	4621      	mov	r1, r4
  4202d2:	4630      	mov	r0, r6
  4202d4:	4b21      	ldr	r3, [pc, #132]	; (42035c <pio_configure_pin+0x120>)
  4202d6:	4798      	blx	r3
  4202d8:	4638      	mov	r0, r7
  4202da:	e7eb      	b.n	4202b4 <pio_configure_pin+0x78>
  4202dc:	f004 041f 	and.w	r4, r4, #31
  4202e0:	2701      	movs	r7, #1
  4202e2:	fa07 f404 	lsl.w	r4, r7, r4
  4202e6:	4622      	mov	r2, r4
  4202e8:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4202ec:	4b1a      	ldr	r3, [pc, #104]	; (420358 <pio_configure_pin+0x11c>)
  4202ee:	4798      	blx	r3
  4202f0:	ea05 0207 	and.w	r2, r5, r7
  4202f4:	4621      	mov	r1, r4
  4202f6:	4630      	mov	r0, r6
  4202f8:	4b18      	ldr	r3, [pc, #96]	; (42035c <pio_configure_pin+0x120>)
  4202fa:	4798      	blx	r3
  4202fc:	4638      	mov	r0, r7
  4202fe:	e7d9      	b.n	4202b4 <pio_configure_pin+0x78>
  420300:	f004 041f 	and.w	r4, r4, #31
  420304:	2701      	movs	r7, #1
  420306:	fa07 f404 	lsl.w	r4, r7, r4
  42030a:	4622      	mov	r2, r4
  42030c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  420310:	4b11      	ldr	r3, [pc, #68]	; (420358 <pio_configure_pin+0x11c>)
  420312:	4798      	blx	r3
  420314:	ea05 0207 	and.w	r2, r5, r7
  420318:	4621      	mov	r1, r4
  42031a:	4630      	mov	r0, r6
  42031c:	4b0f      	ldr	r3, [pc, #60]	; (42035c <pio_configure_pin+0x120>)
  42031e:	4798      	blx	r3
  420320:	4638      	mov	r0, r7
  420322:	e7c7      	b.n	4202b4 <pio_configure_pin+0x78>
  420324:	f004 011f 	and.w	r1, r4, #31
  420328:	2401      	movs	r4, #1
  42032a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  42032e:	ea05 0304 	and.w	r3, r5, r4
  420332:	9300      	str	r3, [sp, #0]
  420334:	f3c5 0380 	ubfx	r3, r5, #2, #1
  420338:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  42033c:	bf14      	ite	ne
  42033e:	2200      	movne	r2, #0
  420340:	2201      	moveq	r2, #1
  420342:	fa04 f101 	lsl.w	r1, r4, r1
  420346:	4630      	mov	r0, r6
  420348:	4d05      	ldr	r5, [pc, #20]	; (420360 <pio_configure_pin+0x124>)
  42034a:	47a8      	blx	r5
  42034c:	4620      	mov	r0, r4
  42034e:	e7b1      	b.n	4202b4 <pio_configure_pin+0x78>
  420350:	00420215 	.word	0x00420215
  420354:	004200fd 	.word	0x004200fd
  420358:	00420067 	.word	0x00420067
  42035c:	00420059 	.word	0x00420059
  420360:	00420145 	.word	0x00420145

00420364 <pio_handler_process>:
  420364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  420366:	4604      	mov	r4, r0
  420368:	460e      	mov	r6, r1
  42036a:	4b11      	ldr	r3, [pc, #68]	; (4203b0 <pio_handler_process+0x4c>)
  42036c:	4798      	blx	r3
  42036e:	4605      	mov	r5, r0
  420370:	4620      	mov	r0, r4
  420372:	4b10      	ldr	r3, [pc, #64]	; (4203b4 <pio_handler_process+0x50>)
  420374:	4798      	blx	r3
  420376:	4005      	ands	r5, r0
  420378:	d001      	beq.n	42037e <pio_handler_process+0x1a>
  42037a:	2400      	movs	r4, #0
  42037c:	e003      	b.n	420386 <pio_handler_process+0x22>
  42037e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  420380:	3401      	adds	r4, #1
  420382:	2c06      	cmp	r4, #6
  420384:	d811      	bhi.n	4203aa <pio_handler_process+0x46>
  420386:	b18d      	cbz	r5, 4203ac <pio_handler_process+0x48>
  420388:	0123      	lsls	r3, r4, #4
  42038a:	4a0b      	ldr	r2, [pc, #44]	; (4203b8 <pio_handler_process+0x54>)
  42038c:	58d0      	ldr	r0, [r2, r3]
  42038e:	42b0      	cmp	r0, r6
  420390:	d1f6      	bne.n	420380 <pio_handler_process+0x1c>
  420392:	eb02 1304 	add.w	r3, r2, r4, lsl #4
  420396:	6859      	ldr	r1, [r3, #4]
  420398:	420d      	tst	r5, r1
  42039a:	d0f1      	beq.n	420380 <pio_handler_process+0x1c>
  42039c:	461f      	mov	r7, r3
  42039e:	68db      	ldr	r3, [r3, #12]
  4203a0:	4798      	blx	r3
  4203a2:	687b      	ldr	r3, [r7, #4]
  4203a4:	ea25 0503 	bic.w	r5, r5, r3
  4203a8:	e7ea      	b.n	420380 <pio_handler_process+0x1c>
  4203aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4203ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4203ae:	bf00      	nop
  4203b0:	0042020d 	.word	0x0042020d
  4203b4:	00420211 	.word	0x00420211
  4203b8:	204147f0 	.word	0x204147f0

004203bc <PIOA_Handler>:
  4203bc:	b508      	push	{r3, lr}
  4203be:	210a      	movs	r1, #10
  4203c0:	4801      	ldr	r0, [pc, #4]	; (4203c8 <PIOA_Handler+0xc>)
  4203c2:	4b02      	ldr	r3, [pc, #8]	; (4203cc <PIOA_Handler+0x10>)
  4203c4:	4798      	blx	r3
  4203c6:	bd08      	pop	{r3, pc}
  4203c8:	400e0e00 	.word	0x400e0e00
  4203cc:	00420365 	.word	0x00420365

004203d0 <PIOB_Handler>:
  4203d0:	b508      	push	{r3, lr}
  4203d2:	210b      	movs	r1, #11
  4203d4:	4801      	ldr	r0, [pc, #4]	; (4203dc <PIOB_Handler+0xc>)
  4203d6:	4b02      	ldr	r3, [pc, #8]	; (4203e0 <PIOB_Handler+0x10>)
  4203d8:	4798      	blx	r3
  4203da:	bd08      	pop	{r3, pc}
  4203dc:	400e1000 	.word	0x400e1000
  4203e0:	00420365 	.word	0x00420365

004203e4 <PIOC_Handler>:
  4203e4:	b508      	push	{r3, lr}
  4203e6:	210c      	movs	r1, #12
  4203e8:	4801      	ldr	r0, [pc, #4]	; (4203f0 <PIOC_Handler+0xc>)
  4203ea:	4b02      	ldr	r3, [pc, #8]	; (4203f4 <PIOC_Handler+0x10>)
  4203ec:	4798      	blx	r3
  4203ee:	bd08      	pop	{r3, pc}
  4203f0:	400e1200 	.word	0x400e1200
  4203f4:	00420365 	.word	0x00420365

004203f8 <PIOD_Handler>:
  4203f8:	b508      	push	{r3, lr}
  4203fa:	2110      	movs	r1, #16
  4203fc:	4801      	ldr	r0, [pc, #4]	; (420404 <PIOD_Handler+0xc>)
  4203fe:	4b02      	ldr	r3, [pc, #8]	; (420408 <PIOD_Handler+0x10>)
  420400:	4798      	blx	r3
  420402:	bd08      	pop	{r3, pc}
  420404:	400e1400 	.word	0x400e1400
  420408:	00420365 	.word	0x00420365

0042040c <PIOE_Handler>:
  42040c:	b508      	push	{r3, lr}
  42040e:	2111      	movs	r1, #17
  420410:	4801      	ldr	r0, [pc, #4]	; (420418 <PIOE_Handler+0xc>)
  420412:	4b02      	ldr	r3, [pc, #8]	; (42041c <PIOE_Handler+0x10>)
  420414:	4798      	blx	r3
  420416:	bd08      	pop	{r3, pc}
  420418:	400e1600 	.word	0x400e1600
  42041c:	00420365 	.word	0x00420365

00420420 <pmc_mck_set_division>:
  420420:	2803      	cmp	r0, #3
  420422:	d010      	beq.n	420446 <pmc_mck_set_division+0x26>
  420424:	2804      	cmp	r0, #4
  420426:	d011      	beq.n	42044c <pmc_mck_set_division+0x2c>
  420428:	2802      	cmp	r0, #2
  42042a:	d012      	beq.n	420452 <pmc_mck_set_division+0x32>
  42042c:	2300      	movs	r3, #0
  42042e:	490a      	ldr	r1, [pc, #40]	; (420458 <pmc_mck_set_division+0x38>)
  420430:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  420432:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  420436:	4313      	orrs	r3, r2
  420438:	630b      	str	r3, [r1, #48]	; 0x30
  42043a:	4b07      	ldr	r3, [pc, #28]	; (420458 <pmc_mck_set_division+0x38>)
  42043c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  42043e:	f013 0f08 	tst.w	r3, #8
  420442:	d0fa      	beq.n	42043a <pmc_mck_set_division+0x1a>
  420444:	4770      	bx	lr
  420446:	f44f 7340 	mov.w	r3, #768	; 0x300
  42044a:	e7f0      	b.n	42042e <pmc_mck_set_division+0xe>
  42044c:	f44f 7300 	mov.w	r3, #512	; 0x200
  420450:	e7ed      	b.n	42042e <pmc_mck_set_division+0xe>
  420452:	f44f 7380 	mov.w	r3, #256	; 0x100
  420456:	e7ea      	b.n	42042e <pmc_mck_set_division+0xe>
  420458:	400e0600 	.word	0x400e0600

0042045c <pmc_switch_mck_to_pllack>:
  42045c:	4a13      	ldr	r2, [pc, #76]	; (4204ac <pmc_switch_mck_to_pllack+0x50>)
  42045e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  420460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  420464:	4318      	orrs	r0, r3
  420466:	6310      	str	r0, [r2, #48]	; 0x30
  420468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  42046c:	4a0f      	ldr	r2, [pc, #60]	; (4204ac <pmc_switch_mck_to_pllack+0x50>)
  42046e:	6e92      	ldr	r2, [r2, #104]	; 0x68
  420470:	f012 0f08 	tst.w	r2, #8
  420474:	d102      	bne.n	42047c <pmc_switch_mck_to_pllack+0x20>
  420476:	b1a3      	cbz	r3, 4204a2 <pmc_switch_mck_to_pllack+0x46>
  420478:	3b01      	subs	r3, #1
  42047a:	e7f7      	b.n	42046c <pmc_switch_mck_to_pllack+0x10>
  42047c:	4a0b      	ldr	r2, [pc, #44]	; (4204ac <pmc_switch_mck_to_pllack+0x50>)
  42047e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  420480:	f023 0303 	bic.w	r3, r3, #3
  420484:	f043 0302 	orr.w	r3, r3, #2
  420488:	6313      	str	r3, [r2, #48]	; 0x30
  42048a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  42048e:	4a07      	ldr	r2, [pc, #28]	; (4204ac <pmc_switch_mck_to_pllack+0x50>)
  420490:	6e92      	ldr	r2, [r2, #104]	; 0x68
  420492:	f012 0f08 	tst.w	r2, #8
  420496:	d102      	bne.n	42049e <pmc_switch_mck_to_pllack+0x42>
  420498:	b12b      	cbz	r3, 4204a6 <pmc_switch_mck_to_pllack+0x4a>
  42049a:	3b01      	subs	r3, #1
  42049c:	e7f7      	b.n	42048e <pmc_switch_mck_to_pllack+0x32>
  42049e:	2000      	movs	r0, #0
  4204a0:	4770      	bx	lr
  4204a2:	2001      	movs	r0, #1
  4204a4:	4770      	bx	lr
  4204a6:	2001      	movs	r0, #1
  4204a8:	4770      	bx	lr
  4204aa:	bf00      	nop
  4204ac:	400e0600 	.word	0x400e0600

004204b0 <pmc_switch_mainck_to_xtal>:
  4204b0:	b9a0      	cbnz	r0, 4204dc <pmc_switch_mainck_to_xtal+0x2c>
  4204b2:	4a0e      	ldr	r2, [pc, #56]	; (4204ec <pmc_switch_mainck_to_xtal+0x3c>)
  4204b4:	6a10      	ldr	r0, [r2, #32]
  4204b6:	4b0e      	ldr	r3, [pc, #56]	; (4204f0 <pmc_switch_mainck_to_xtal+0x40>)
  4204b8:	4003      	ands	r3, r0
  4204ba:	0209      	lsls	r1, r1, #8
  4204bc:	b289      	uxth	r1, r1
  4204be:	4319      	orrs	r1, r3
  4204c0:	4b0c      	ldr	r3, [pc, #48]	; (4204f4 <pmc_switch_mainck_to_xtal+0x44>)
  4204c2:	430b      	orrs	r3, r1
  4204c4:	6213      	str	r3, [r2, #32]
  4204c6:	4b09      	ldr	r3, [pc, #36]	; (4204ec <pmc_switch_mainck_to_xtal+0x3c>)
  4204c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4204ca:	f013 0f01 	tst.w	r3, #1
  4204ce:	d0fa      	beq.n	4204c6 <pmc_switch_mainck_to_xtal+0x16>
  4204d0:	4a06      	ldr	r2, [pc, #24]	; (4204ec <pmc_switch_mainck_to_xtal+0x3c>)
  4204d2:	6a11      	ldr	r1, [r2, #32]
  4204d4:	4b08      	ldr	r3, [pc, #32]	; (4204f8 <pmc_switch_mainck_to_xtal+0x48>)
  4204d6:	430b      	orrs	r3, r1
  4204d8:	6213      	str	r3, [r2, #32]
  4204da:	4770      	bx	lr
  4204dc:	4903      	ldr	r1, [pc, #12]	; (4204ec <pmc_switch_mainck_to_xtal+0x3c>)
  4204de:	6a0b      	ldr	r3, [r1, #32]
  4204e0:	4a06      	ldr	r2, [pc, #24]	; (4204fc <pmc_switch_mainck_to_xtal+0x4c>)
  4204e2:	401a      	ands	r2, r3
  4204e4:	4b06      	ldr	r3, [pc, #24]	; (420500 <pmc_switch_mainck_to_xtal+0x50>)
  4204e6:	4313      	orrs	r3, r2
  4204e8:	620b      	str	r3, [r1, #32]
  4204ea:	4770      	bx	lr
  4204ec:	400e0600 	.word	0x400e0600
  4204f0:	ffc8fffc 	.word	0xffc8fffc
  4204f4:	00370001 	.word	0x00370001
  4204f8:	01370000 	.word	0x01370000
  4204fc:	fec8fffc 	.word	0xfec8fffc
  420500:	01370002 	.word	0x01370002

00420504 <pmc_osc_is_ready_mainck>:
  420504:	4b02      	ldr	r3, [pc, #8]	; (420510 <pmc_osc_is_ready_mainck+0xc>)
  420506:	6e98      	ldr	r0, [r3, #104]	; 0x68
  420508:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  42050c:	4770      	bx	lr
  42050e:	bf00      	nop
  420510:	400e0600 	.word	0x400e0600

00420514 <pmc_disable_pllack>:
  420514:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  420518:	4b01      	ldr	r3, [pc, #4]	; (420520 <pmc_disable_pllack+0xc>)
  42051a:	629a      	str	r2, [r3, #40]	; 0x28
  42051c:	4770      	bx	lr
  42051e:	bf00      	nop
  420520:	400e0600 	.word	0x400e0600

00420524 <pmc_is_locked_pllack>:
  420524:	4b02      	ldr	r3, [pc, #8]	; (420530 <pmc_is_locked_pllack+0xc>)
  420526:	6e98      	ldr	r0, [r3, #104]	; 0x68
  420528:	f000 0002 	and.w	r0, r0, #2
  42052c:	4770      	bx	lr
  42052e:	bf00      	nop
  420530:	400e0600 	.word	0x400e0600

00420534 <pmc_enable_periph_clk>:
  420534:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  420538:	4b05      	ldr	r3, [pc, #20]	; (420550 <pmc_enable_periph_clk+0x1c>)
  42053a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  42053e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  420542:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
  420546:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  42054a:	2000      	movs	r0, #0
  42054c:	4770      	bx	lr
  42054e:	bf00      	nop
  420550:	400e0600 	.word	0x400e0600

00420554 <spi_enable_clock>:
  420554:	b508      	push	{r3, lr}
  420556:	4b07      	ldr	r3, [pc, #28]	; (420574 <spi_enable_clock+0x20>)
  420558:	4298      	cmp	r0, r3
  42055a:	d003      	beq.n	420564 <spi_enable_clock+0x10>
  42055c:	4b06      	ldr	r3, [pc, #24]	; (420578 <spi_enable_clock+0x24>)
  42055e:	4298      	cmp	r0, r3
  420560:	d004      	beq.n	42056c <spi_enable_clock+0x18>
  420562:	bd08      	pop	{r3, pc}
  420564:	2015      	movs	r0, #21
  420566:	4b05      	ldr	r3, [pc, #20]	; (42057c <spi_enable_clock+0x28>)
  420568:	4798      	blx	r3
  42056a:	bd08      	pop	{r3, pc}
  42056c:	202a      	movs	r0, #42	; 0x2a
  42056e:	4b03      	ldr	r3, [pc, #12]	; (42057c <spi_enable_clock+0x28>)
  420570:	4798      	blx	r3
  420572:	e7f6      	b.n	420562 <spi_enable_clock+0xe>
  420574:	40008000 	.word	0x40008000
  420578:	40058000 	.word	0x40058000
  42057c:	00420535 	.word	0x00420535

00420580 <spi_set_peripheral_chip_select_value>:
  420580:	6843      	ldr	r3, [r0, #4]
  420582:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  420586:	6043      	str	r3, [r0, #4]
  420588:	6843      	ldr	r3, [r0, #4]
  42058a:	0409      	lsls	r1, r1, #16
  42058c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  420590:	430b      	orrs	r3, r1
  420592:	6043      	str	r3, [r0, #4]
  420594:	4770      	bx	lr

00420596 <spi_set_delay_between_chip_select>:
  420596:	6843      	ldr	r3, [r0, #4]
  420598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  42059c:	6043      	str	r3, [r0, #4]
  42059e:	6843      	ldr	r3, [r0, #4]
  4205a0:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  4205a4:	6041      	str	r1, [r0, #4]
  4205a6:	4770      	bx	lr

004205a8 <spi_set_clock_polarity>:
  4205a8:	b93a      	cbnz	r2, 4205ba <spi_set_clock_polarity+0x12>
  4205aa:	310c      	adds	r1, #12
  4205ac:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4205b0:	f023 0301 	bic.w	r3, r3, #1
  4205b4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4205b8:	4770      	bx	lr
  4205ba:	310c      	adds	r1, #12
  4205bc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4205c0:	f043 0301 	orr.w	r3, r3, #1
  4205c4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4205c8:	4770      	bx	lr

004205ca <spi_set_clock_phase>:
  4205ca:	b93a      	cbnz	r2, 4205dc <spi_set_clock_phase+0x12>
  4205cc:	310c      	adds	r1, #12
  4205ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4205d2:	f023 0302 	bic.w	r3, r3, #2
  4205d6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4205da:	4770      	bx	lr
  4205dc:	310c      	adds	r1, #12
  4205de:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4205e2:	f043 0302 	orr.w	r3, r3, #2
  4205e6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  4205ea:	4770      	bx	lr

004205ec <spi_configure_cs_behavior>:
  4205ec:	2a04      	cmp	r2, #4
  4205ee:	d003      	beq.n	4205f8 <spi_configure_cs_behavior+0xc>
  4205f0:	b182      	cbz	r2, 420614 <spi_configure_cs_behavior+0x28>
  4205f2:	2a08      	cmp	r2, #8
  4205f4:	d01c      	beq.n	420630 <spi_configure_cs_behavior+0x44>
  4205f6:	4770      	bx	lr
  4205f8:	310c      	adds	r1, #12
  4205fa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  4205fe:	f023 0308 	bic.w	r3, r3, #8
  420602:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  420606:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42060a:	f043 0304 	orr.w	r3, r3, #4
  42060e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  420612:	4770      	bx	lr
  420614:	310c      	adds	r1, #12
  420616:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42061a:	f023 0308 	bic.w	r3, r3, #8
  42061e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  420622:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  420626:	f023 0304 	bic.w	r3, r3, #4
  42062a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42062e:	4770      	bx	lr
  420630:	310c      	adds	r1, #12
  420632:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  420636:	f043 0308 	orr.w	r3, r3, #8
  42063a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42063e:	e7da      	b.n	4205f6 <spi_configure_cs_behavior+0xa>

00420640 <spi_set_bits_per_transfer>:
  420640:	310c      	adds	r1, #12
  420642:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  420646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  42064a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  42064e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  420652:	431a      	orrs	r2, r3
  420654:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  420658:	4770      	bx	lr

0042065a <spi_calc_baudrate_div>:
  42065a:	4401      	add	r1, r0
  42065c:	3901      	subs	r1, #1
  42065e:	fbb1 f0f0 	udiv	r0, r1, r0
  420662:	1e43      	subs	r3, r0, #1
  420664:	2bfe      	cmp	r3, #254	; 0xfe
  420666:	d801      	bhi.n	42066c <spi_calc_baudrate_div+0x12>
  420668:	b200      	sxth	r0, r0
  42066a:	4770      	bx	lr
  42066c:	f04f 30ff 	mov.w	r0, #4294967295
  420670:	4770      	bx	lr

00420672 <spi_set_baudrate_div>:
  420672:	b192      	cbz	r2, 42069a <spi_set_baudrate_div+0x28>
  420674:	b410      	push	{r4}
  420676:	4614      	mov	r4, r2
  420678:	310c      	adds	r1, #12
  42067a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
  42067e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  420682:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  420686:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
  42068a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  42068e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  420692:	2000      	movs	r0, #0
  420694:	f85d 4b04 	ldr.w	r4, [sp], #4
  420698:	4770      	bx	lr
  42069a:	f04f 30ff 	mov.w	r0, #4294967295
  42069e:	4770      	bx	lr

004206a0 <spi_set_transfer_delay>:
  4206a0:	b410      	push	{r4}
  4206a2:	310c      	adds	r1, #12
  4206a4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  4206a8:	b2a4      	uxth	r4, r4
  4206aa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  4206ae:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  4206b2:	061b      	lsls	r3, r3, #24
  4206b4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
  4206b8:	4314      	orrs	r4, r2
  4206ba:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  4206be:	f85d 4b04 	ldr.w	r4, [sp], #4
  4206c2:	4770      	bx	lr

004206c4 <uart_write>:
  4206c4:	6943      	ldr	r3, [r0, #20]
  4206c6:	f013 0f02 	tst.w	r3, #2
  4206ca:	d002      	beq.n	4206d2 <uart_write+0xe>
  4206cc:	61c1      	str	r1, [r0, #28]
  4206ce:	2000      	movs	r0, #0
  4206d0:	4770      	bx	lr
  4206d2:	2001      	movs	r0, #1
  4206d4:	4770      	bx	lr

004206d6 <uart_read>:
  4206d6:	6943      	ldr	r3, [r0, #20]
  4206d8:	f013 0f01 	tst.w	r3, #1
  4206dc:	d003      	beq.n	4206e6 <uart_read+0x10>
  4206de:	6983      	ldr	r3, [r0, #24]
  4206e0:	700b      	strb	r3, [r1, #0]
  4206e2:	2000      	movs	r0, #0
  4206e4:	4770      	bx	lr
  4206e6:	2001      	movs	r0, #1
  4206e8:	4770      	bx	lr

004206ea <usart_set_async_baudrate>:
  4206ea:	b430      	push	{r4, r5}
  4206ec:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
  4206f0:	d317      	bcc.n	420722 <usart_set_async_baudrate+0x38>
  4206f2:	2410      	movs	r4, #16
  4206f4:	fb01 f104 	mul.w	r1, r1, r4
  4206f8:	084b      	lsrs	r3, r1, #1
  4206fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4206fe:	fbb2 f2f1 	udiv	r2, r2, r1
  420702:	08d3      	lsrs	r3, r2, #3
  420704:	1e5d      	subs	r5, r3, #1
  420706:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  42070a:	428d      	cmp	r5, r1
  42070c:	d810      	bhi.n	420730 <usart_set_async_baudrate+0x46>
  42070e:	2c08      	cmp	r4, #8
  420710:	d009      	beq.n	420726 <usart_set_async_baudrate+0x3c>
  420712:	0412      	lsls	r2, r2, #16
  420714:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  420718:	431a      	orrs	r2, r3
  42071a:	6202      	str	r2, [r0, #32]
  42071c:	2000      	movs	r0, #0
  42071e:	bc30      	pop	{r4, r5}
  420720:	4770      	bx	lr
  420722:	2408      	movs	r4, #8
  420724:	e7e6      	b.n	4206f4 <usart_set_async_baudrate+0xa>
  420726:	6841      	ldr	r1, [r0, #4]
  420728:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  42072c:	6041      	str	r1, [r0, #4]
  42072e:	e7f0      	b.n	420712 <usart_set_async_baudrate+0x28>
  420730:	2001      	movs	r0, #1
  420732:	e7f4      	b.n	42071e <usart_set_async_baudrate+0x34>

00420734 <usart_enable_tx>:
  420734:	2340      	movs	r3, #64	; 0x40
  420736:	6003      	str	r3, [r0, #0]
  420738:	4770      	bx	lr

0042073a <usart_reset_tx>:
  42073a:	2388      	movs	r3, #136	; 0x88
  42073c:	6003      	str	r3, [r0, #0]
  42073e:	4770      	bx	lr

00420740 <usart_enable_rx>:
  420740:	2310      	movs	r3, #16
  420742:	6003      	str	r3, [r0, #0]
  420744:	4770      	bx	lr

00420746 <usart_reset_rx>:
  420746:	2324      	movs	r3, #36	; 0x24
  420748:	6003      	str	r3, [r0, #0]
  42074a:	4770      	bx	lr

0042074c <usart_reset_status>:
  42074c:	f44f 7380 	mov.w	r3, #256	; 0x100
  420750:	6003      	str	r3, [r0, #0]
  420752:	4770      	bx	lr

00420754 <usart_drive_RTS_pin_high>:
  420754:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  420758:	6003      	str	r3, [r0, #0]
  42075a:	4770      	bx	lr

0042075c <usart_write>:
  42075c:	6943      	ldr	r3, [r0, #20]
  42075e:	f013 0f02 	tst.w	r3, #2
  420762:	d004      	beq.n	42076e <usart_write+0x12>
  420764:	f3c1 0108 	ubfx	r1, r1, #0, #9
  420768:	61c1      	str	r1, [r0, #28]
  42076a:	2000      	movs	r0, #0
  42076c:	4770      	bx	lr
  42076e:	2001      	movs	r0, #1
  420770:	4770      	bx	lr

00420772 <usart_read>:
  420772:	6943      	ldr	r3, [r0, #20]
  420774:	f013 0f01 	tst.w	r3, #1
  420778:	d005      	beq.n	420786 <usart_read+0x14>
  42077a:	6983      	ldr	r3, [r0, #24]
  42077c:	f3c3 0308 	ubfx	r3, r3, #0, #9
  420780:	600b      	str	r3, [r1, #0]
  420782:	2000      	movs	r0, #0
  420784:	4770      	bx	lr
  420786:	2001      	movs	r0, #1
  420788:	4770      	bx	lr
	...

0042078c <usart_disable_writeprotect>:
  42078c:	4b01      	ldr	r3, [pc, #4]	; (420794 <usart_disable_writeprotect+0x8>)
  42078e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
  420792:	4770      	bx	lr
  420794:	55534100 	.word	0x55534100

00420798 <usart_reset>:
  420798:	b510      	push	{r4, lr}
  42079a:	4604      	mov	r4, r0
  42079c:	4b09      	ldr	r3, [pc, #36]	; (4207c4 <usart_reset+0x2c>)
  42079e:	4798      	blx	r3
  4207a0:	2300      	movs	r3, #0
  4207a2:	6063      	str	r3, [r4, #4]
  4207a4:	6263      	str	r3, [r4, #36]	; 0x24
  4207a6:	62a3      	str	r3, [r4, #40]	; 0x28
  4207a8:	4620      	mov	r0, r4
  4207aa:	4b07      	ldr	r3, [pc, #28]	; (4207c8 <usart_reset+0x30>)
  4207ac:	4798      	blx	r3
  4207ae:	4620      	mov	r0, r4
  4207b0:	4b06      	ldr	r3, [pc, #24]	; (4207cc <usart_reset+0x34>)
  4207b2:	4798      	blx	r3
  4207b4:	4620      	mov	r0, r4
  4207b6:	4b06      	ldr	r3, [pc, #24]	; (4207d0 <usart_reset+0x38>)
  4207b8:	4798      	blx	r3
  4207ba:	4620      	mov	r0, r4
  4207bc:	4b05      	ldr	r3, [pc, #20]	; (4207d4 <usart_reset+0x3c>)
  4207be:	4798      	blx	r3
  4207c0:	bd10      	pop	{r4, pc}
  4207c2:	bf00      	nop
  4207c4:	0042078d 	.word	0x0042078d
  4207c8:	0042073b 	.word	0x0042073b
  4207cc:	00420747 	.word	0x00420747
  4207d0:	0042074d 	.word	0x0042074d
  4207d4:	00420755 	.word	0x00420755

004207d8 <usart_init_rs232>:
  4207d8:	b570      	push	{r4, r5, r6, lr}
  4207da:	4605      	mov	r5, r0
  4207dc:	460c      	mov	r4, r1
  4207de:	4616      	mov	r6, r2
  4207e0:	4b10      	ldr	r3, [pc, #64]	; (420824 <usart_init_rs232+0x4c>)
  4207e2:	4798      	blx	r3
  4207e4:	2200      	movs	r2, #0
  4207e6:	4b10      	ldr	r3, [pc, #64]	; (420828 <usart_init_rs232+0x50>)
  4207e8:	601a      	str	r2, [r3, #0]
  4207ea:	b1b4      	cbz	r4, 42081a <usart_init_rs232+0x42>
  4207ec:	4632      	mov	r2, r6
  4207ee:	6821      	ldr	r1, [r4, #0]
  4207f0:	4628      	mov	r0, r5
  4207f2:	4b0e      	ldr	r3, [pc, #56]	; (42082c <usart_init_rs232+0x54>)
  4207f4:	4798      	blx	r3
  4207f6:	4602      	mov	r2, r0
  4207f8:	b988      	cbnz	r0, 42081e <usart_init_rs232+0x46>
  4207fa:	6863      	ldr	r3, [r4, #4]
  4207fc:	68a1      	ldr	r1, [r4, #8]
  4207fe:	430b      	orrs	r3, r1
  420800:	6921      	ldr	r1, [r4, #16]
  420802:	430b      	orrs	r3, r1
  420804:	68e1      	ldr	r1, [r4, #12]
  420806:	430b      	orrs	r3, r1
  420808:	4907      	ldr	r1, [pc, #28]	; (420828 <usart_init_rs232+0x50>)
  42080a:	6808      	ldr	r0, [r1, #0]
  42080c:	4303      	orrs	r3, r0
  42080e:	600b      	str	r3, [r1, #0]
  420810:	6869      	ldr	r1, [r5, #4]
  420812:	430b      	orrs	r3, r1
  420814:	606b      	str	r3, [r5, #4]
  420816:	4610      	mov	r0, r2
  420818:	bd70      	pop	{r4, r5, r6, pc}
  42081a:	2201      	movs	r2, #1
  42081c:	e7fb      	b.n	420816 <usart_init_rs232+0x3e>
  42081e:	2201      	movs	r2, #1
  420820:	e7f9      	b.n	420816 <usart_init_rs232+0x3e>
  420822:	bf00      	nop
  420824:	00420799 	.word	0x00420799
  420828:	20414860 	.word	0x20414860
  42082c:	004206eb 	.word	0x004206eb

00420830 <Dummy_Handler>:
  420830:	e7fe      	b.n	420830 <Dummy_Handler>
	...

00420834 <Reset_Handler>:
  420834:	b500      	push	{lr}
  420836:	b083      	sub	sp, #12
  420838:	4b1e      	ldr	r3, [pc, #120]	; (4208b4 <Reset_Handler+0x80>)
  42083a:	4a1f      	ldr	r2, [pc, #124]	; (4208b8 <Reset_Handler+0x84>)
  42083c:	429a      	cmp	r2, r3
  42083e:	d009      	beq.n	420854 <Reset_Handler+0x20>
  420840:	4b1c      	ldr	r3, [pc, #112]	; (4208b4 <Reset_Handler+0x80>)
  420842:	4a1d      	ldr	r2, [pc, #116]	; (4208b8 <Reset_Handler+0x84>)
  420844:	e003      	b.n	42084e <Reset_Handler+0x1a>
  420846:	6811      	ldr	r1, [r2, #0]
  420848:	6019      	str	r1, [r3, #0]
  42084a:	3304      	adds	r3, #4
  42084c:	3204      	adds	r2, #4
  42084e:	491b      	ldr	r1, [pc, #108]	; (4208bc <Reset_Handler+0x88>)
  420850:	428b      	cmp	r3, r1
  420852:	d3f8      	bcc.n	420846 <Reset_Handler+0x12>
  420854:	4b1a      	ldr	r3, [pc, #104]	; (4208c0 <Reset_Handler+0x8c>)
  420856:	e002      	b.n	42085e <Reset_Handler+0x2a>
  420858:	2200      	movs	r2, #0
  42085a:	601a      	str	r2, [r3, #0]
  42085c:	3304      	adds	r3, #4
  42085e:	4a19      	ldr	r2, [pc, #100]	; (4208c4 <Reset_Handler+0x90>)
  420860:	4293      	cmp	r3, r2
  420862:	d3f9      	bcc.n	420858 <Reset_Handler+0x24>
  420864:	4a18      	ldr	r2, [pc, #96]	; (4208c8 <Reset_Handler+0x94>)
  420866:	4b19      	ldr	r3, [pc, #100]	; (4208cc <Reset_Handler+0x98>)
  420868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  42086c:	6093      	str	r3, [r2, #8]
  42086e:	f3ef 8310 	mrs	r3, PRIMASK
  420872:	fab3 f383 	clz	r3, r3
  420876:	095b      	lsrs	r3, r3, #5
  420878:	9301      	str	r3, [sp, #4]
  42087a:	b672      	cpsid	i
  42087c:	f3bf 8f5f 	dmb	sy
  420880:	2200      	movs	r2, #0
  420882:	4b13      	ldr	r3, [pc, #76]	; (4208d0 <Reset_Handler+0x9c>)
  420884:	701a      	strb	r2, [r3, #0]
  420886:	9901      	ldr	r1, [sp, #4]
  420888:	4a12      	ldr	r2, [pc, #72]	; (4208d4 <Reset_Handler+0xa0>)
  42088a:	6813      	ldr	r3, [r2, #0]
  42088c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  420890:	6013      	str	r3, [r2, #0]
  420892:	f3bf 8f4f 	dsb	sy
  420896:	f3bf 8f6f 	isb	sy
  42089a:	b129      	cbz	r1, 4208a8 <Reset_Handler+0x74>
  42089c:	2201      	movs	r2, #1
  42089e:	4b0c      	ldr	r3, [pc, #48]	; (4208d0 <Reset_Handler+0x9c>)
  4208a0:	701a      	strb	r2, [r3, #0]
  4208a2:	f3bf 8f5f 	dmb	sy
  4208a6:	b662      	cpsie	i
  4208a8:	4b0b      	ldr	r3, [pc, #44]	; (4208d8 <Reset_Handler+0xa4>)
  4208aa:	4798      	blx	r3
  4208ac:	4b0b      	ldr	r3, [pc, #44]	; (4208dc <Reset_Handler+0xa8>)
  4208ae:	4798      	blx	r3
  4208b0:	e7fe      	b.n	4208b0 <Reset_Handler+0x7c>
  4208b2:	bf00      	nop
  4208b4:	20400000 	.word	0x20400000
  4208b8:	0042b94c 	.word	0x0042b94c
  4208bc:	20400a20 	.word	0x20400a20
  4208c0:	20400a20 	.word	0x20400a20
  4208c4:	2043a360 	.word	0x2043a360
  4208c8:	e000ed00 	.word	0xe000ed00
  4208cc:	00400000 	.word	0x00400000
  4208d0:	20400068 	.word	0x20400068
  4208d4:	e000ed88 	.word	0xe000ed88
  4208d8:	00421db1 	.word	0x00421db1
  4208dc:	0042105d 	.word	0x0042105d

004208e0 <SystemCoreClockUpdate>:
  4208e0:	4b3c      	ldr	r3, [pc, #240]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  4208e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4208e4:	f003 0303 	and.w	r3, r3, #3
  4208e8:	2b01      	cmp	r3, #1
  4208ea:	d020      	beq.n	42092e <SystemCoreClockUpdate+0x4e>
  4208ec:	b183      	cbz	r3, 420910 <SystemCoreClockUpdate+0x30>
  4208ee:	2b02      	cmp	r3, #2
  4208f0:	d039      	beq.n	420966 <SystemCoreClockUpdate+0x86>
  4208f2:	4b38      	ldr	r3, [pc, #224]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  4208f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4208f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4208fa:	2b70      	cmp	r3, #112	; 0x70
  4208fc:	d062      	beq.n	4209c4 <SystemCoreClockUpdate+0xe4>
  4208fe:	4b35      	ldr	r3, [pc, #212]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  420902:	f3c2 1202 	ubfx	r2, r2, #4, #3
  420906:	4934      	ldr	r1, [pc, #208]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  420908:	680b      	ldr	r3, [r1, #0]
  42090a:	40d3      	lsrs	r3, r2
  42090c:	600b      	str	r3, [r1, #0]
  42090e:	4770      	bx	lr
  420910:	4b32      	ldr	r3, [pc, #200]	; (4209dc <SystemCoreClockUpdate+0xfc>)
  420912:	695b      	ldr	r3, [r3, #20]
  420914:	f013 0f80 	tst.w	r3, #128	; 0x80
  420918:	d004      	beq.n	420924 <SystemCoreClockUpdate+0x44>
  42091a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  42091e:	4b2e      	ldr	r3, [pc, #184]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  420920:	601a      	str	r2, [r3, #0]
  420922:	e7e6      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  420924:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  420928:	4b2b      	ldr	r3, [pc, #172]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  42092a:	601a      	str	r2, [r3, #0]
  42092c:	e7e1      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  42092e:	4b29      	ldr	r3, [pc, #164]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420930:	6a1b      	ldr	r3, [r3, #32]
  420932:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  420936:	d003      	beq.n	420940 <SystemCoreClockUpdate+0x60>
  420938:	4a29      	ldr	r2, [pc, #164]	; (4209e0 <SystemCoreClockUpdate+0x100>)
  42093a:	4b27      	ldr	r3, [pc, #156]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  42093c:	601a      	str	r2, [r3, #0]
  42093e:	e7d8      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  420940:	4a28      	ldr	r2, [pc, #160]	; (4209e4 <SystemCoreClockUpdate+0x104>)
  420942:	4b25      	ldr	r3, [pc, #148]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  420944:	601a      	str	r2, [r3, #0]
  420946:	4b23      	ldr	r3, [pc, #140]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420948:	6a1b      	ldr	r3, [r3, #32]
  42094a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  42094e:	2b10      	cmp	r3, #16
  420950:	d005      	beq.n	42095e <SystemCoreClockUpdate+0x7e>
  420952:	2b20      	cmp	r3, #32
  420954:	d1cd      	bne.n	4208f2 <SystemCoreClockUpdate+0x12>
  420956:	4a22      	ldr	r2, [pc, #136]	; (4209e0 <SystemCoreClockUpdate+0x100>)
  420958:	4b1f      	ldr	r3, [pc, #124]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  42095a:	601a      	str	r2, [r3, #0]
  42095c:	e7c9      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  42095e:	4a22      	ldr	r2, [pc, #136]	; (4209e8 <SystemCoreClockUpdate+0x108>)
  420960:	4b1d      	ldr	r3, [pc, #116]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  420962:	601a      	str	r2, [r3, #0]
  420964:	e7c5      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  420966:	4b1b      	ldr	r3, [pc, #108]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420968:	6a1b      	ldr	r3, [r3, #32]
  42096a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  42096e:	d016      	beq.n	42099e <SystemCoreClockUpdate+0xbe>
  420970:	4a1b      	ldr	r2, [pc, #108]	; (4209e0 <SystemCoreClockUpdate+0x100>)
  420972:	4b19      	ldr	r3, [pc, #100]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  420974:	601a      	str	r2, [r3, #0]
  420976:	4b17      	ldr	r3, [pc, #92]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  42097a:	f003 0303 	and.w	r3, r3, #3
  42097e:	2b02      	cmp	r3, #2
  420980:	d1b7      	bne.n	4208f2 <SystemCoreClockUpdate+0x12>
  420982:	4814      	ldr	r0, [pc, #80]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  420984:	6a82      	ldr	r2, [r0, #40]	; 0x28
  420986:	f3c2 420a 	ubfx	r2, r2, #16, #11
  42098a:	4913      	ldr	r1, [pc, #76]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  42098c:	680b      	ldr	r3, [r1, #0]
  42098e:	fb02 3303 	mla	r3, r2, r3, r3
  420992:	6a82      	ldr	r2, [r0, #40]	; 0x28
  420994:	b2d2      	uxtb	r2, r2
  420996:	fbb3 f3f2 	udiv	r3, r3, r2
  42099a:	600b      	str	r3, [r1, #0]
  42099c:	e7a9      	b.n	4208f2 <SystemCoreClockUpdate+0x12>
  42099e:	4a11      	ldr	r2, [pc, #68]	; (4209e4 <SystemCoreClockUpdate+0x104>)
  4209a0:	4b0d      	ldr	r3, [pc, #52]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  4209a2:	601a      	str	r2, [r3, #0]
  4209a4:	4b0b      	ldr	r3, [pc, #44]	; (4209d4 <SystemCoreClockUpdate+0xf4>)
  4209a6:	6a1b      	ldr	r3, [r3, #32]
  4209a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4209ac:	2b10      	cmp	r3, #16
  4209ae:	d005      	beq.n	4209bc <SystemCoreClockUpdate+0xdc>
  4209b0:	2b20      	cmp	r3, #32
  4209b2:	d1e0      	bne.n	420976 <SystemCoreClockUpdate+0x96>
  4209b4:	4a0a      	ldr	r2, [pc, #40]	; (4209e0 <SystemCoreClockUpdate+0x100>)
  4209b6:	4b08      	ldr	r3, [pc, #32]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  4209b8:	601a      	str	r2, [r3, #0]
  4209ba:	e7dc      	b.n	420976 <SystemCoreClockUpdate+0x96>
  4209bc:	4a0a      	ldr	r2, [pc, #40]	; (4209e8 <SystemCoreClockUpdate+0x108>)
  4209be:	4b06      	ldr	r3, [pc, #24]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  4209c0:	601a      	str	r2, [r3, #0]
  4209c2:	e7d8      	b.n	420976 <SystemCoreClockUpdate+0x96>
  4209c4:	4a04      	ldr	r2, [pc, #16]	; (4209d8 <SystemCoreClockUpdate+0xf8>)
  4209c6:	6813      	ldr	r3, [r2, #0]
  4209c8:	4908      	ldr	r1, [pc, #32]	; (4209ec <SystemCoreClockUpdate+0x10c>)
  4209ca:	fba1 1303 	umull	r1, r3, r1, r3
  4209ce:	085b      	lsrs	r3, r3, #1
  4209d0:	6013      	str	r3, [r2, #0]
  4209d2:	4770      	bx	lr
  4209d4:	400e0600 	.word	0x400e0600
  4209d8:	2040006c 	.word	0x2040006c
  4209dc:	400e1810 	.word	0x400e1810
  4209e0:	00b71b00 	.word	0x00b71b00
  4209e4:	003d0900 	.word	0x003d0900
  4209e8:	007a1200 	.word	0x007a1200
  4209ec:	aaaaaaab 	.word	0xaaaaaaab

004209f0 <system_init_flash>:
  4209f0:	4b17      	ldr	r3, [pc, #92]	; (420a50 <system_init_flash+0x60>)
  4209f2:	4298      	cmp	r0, r3
  4209f4:	d912      	bls.n	420a1c <system_init_flash+0x2c>
  4209f6:	4b17      	ldr	r3, [pc, #92]	; (420a54 <system_init_flash+0x64>)
  4209f8:	4298      	cmp	r0, r3
  4209fa:	d914      	bls.n	420a26 <system_init_flash+0x36>
  4209fc:	4b16      	ldr	r3, [pc, #88]	; (420a58 <system_init_flash+0x68>)
  4209fe:	4298      	cmp	r0, r3
  420a00:	d915      	bls.n	420a2e <system_init_flash+0x3e>
  420a02:	4b16      	ldr	r3, [pc, #88]	; (420a5c <system_init_flash+0x6c>)
  420a04:	4298      	cmp	r0, r3
  420a06:	d916      	bls.n	420a36 <system_init_flash+0x46>
  420a08:	4b15      	ldr	r3, [pc, #84]	; (420a60 <system_init_flash+0x70>)
  420a0a:	4298      	cmp	r0, r3
  420a0c:	d917      	bls.n	420a3e <system_init_flash+0x4e>
  420a0e:	4b15      	ldr	r3, [pc, #84]	; (420a64 <system_init_flash+0x74>)
  420a10:	4298      	cmp	r0, r3
  420a12:	d919      	bls.n	420a48 <system_init_flash+0x58>
  420a14:	4a14      	ldr	r2, [pc, #80]	; (420a68 <system_init_flash+0x78>)
  420a16:	4b15      	ldr	r3, [pc, #84]	; (420a6c <system_init_flash+0x7c>)
  420a18:	601a      	str	r2, [r3, #0]
  420a1a:	4770      	bx	lr
  420a1c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  420a20:	4b12      	ldr	r3, [pc, #72]	; (420a6c <system_init_flash+0x7c>)
  420a22:	601a      	str	r2, [r3, #0]
  420a24:	4770      	bx	lr
  420a26:	4a12      	ldr	r2, [pc, #72]	; (420a70 <system_init_flash+0x80>)
  420a28:	4b10      	ldr	r3, [pc, #64]	; (420a6c <system_init_flash+0x7c>)
  420a2a:	601a      	str	r2, [r3, #0]
  420a2c:	4770      	bx	lr
  420a2e:	4a11      	ldr	r2, [pc, #68]	; (420a74 <system_init_flash+0x84>)
  420a30:	4b0e      	ldr	r3, [pc, #56]	; (420a6c <system_init_flash+0x7c>)
  420a32:	601a      	str	r2, [r3, #0]
  420a34:	4770      	bx	lr
  420a36:	4a10      	ldr	r2, [pc, #64]	; (420a78 <system_init_flash+0x88>)
  420a38:	4b0c      	ldr	r3, [pc, #48]	; (420a6c <system_init_flash+0x7c>)
  420a3a:	601a      	str	r2, [r3, #0]
  420a3c:	4770      	bx	lr
  420a3e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  420a42:	4b0a      	ldr	r3, [pc, #40]	; (420a6c <system_init_flash+0x7c>)
  420a44:	601a      	str	r2, [r3, #0]
  420a46:	4770      	bx	lr
  420a48:	4a0c      	ldr	r2, [pc, #48]	; (420a7c <system_init_flash+0x8c>)
  420a4a:	4b08      	ldr	r3, [pc, #32]	; (420a6c <system_init_flash+0x7c>)
  420a4c:	601a      	str	r2, [r3, #0]
  420a4e:	4770      	bx	lr
  420a50:	015ef3bf 	.word	0x015ef3bf
  420a54:	02bde77f 	.word	0x02bde77f
  420a58:	041cdb3f 	.word	0x041cdb3f
  420a5c:	057bceff 	.word	0x057bceff
  420a60:	06dac2bf 	.word	0x06dac2bf
  420a64:	0839b67f 	.word	0x0839b67f
  420a68:	04000600 	.word	0x04000600
  420a6c:	400e0c00 	.word	0x400e0c00
  420a70:	04000100 	.word	0x04000100
  420a74:	04000200 	.word	0x04000200
  420a78:	04000300 	.word	0x04000300
  420a7c:	04000500 	.word	0x04000500

00420a80 <_sbrk>:
  420a80:	4b0a      	ldr	r3, [pc, #40]	; (420aac <_sbrk+0x2c>)
  420a82:	681b      	ldr	r3, [r3, #0]
  420a84:	b153      	cbz	r3, 420a9c <_sbrk+0x1c>
  420a86:	4b09      	ldr	r3, [pc, #36]	; (420aac <_sbrk+0x2c>)
  420a88:	681b      	ldr	r3, [r3, #0]
  420a8a:	181a      	adds	r2, r3, r0
  420a8c:	4908      	ldr	r1, [pc, #32]	; (420ab0 <_sbrk+0x30>)
  420a8e:	4291      	cmp	r1, r2
  420a90:	db08      	blt.n	420aa4 <_sbrk+0x24>
  420a92:	4610      	mov	r0, r2
  420a94:	4a05      	ldr	r2, [pc, #20]	; (420aac <_sbrk+0x2c>)
  420a96:	6010      	str	r0, [r2, #0]
  420a98:	4618      	mov	r0, r3
  420a9a:	4770      	bx	lr
  420a9c:	4a05      	ldr	r2, [pc, #20]	; (420ab4 <_sbrk+0x34>)
  420a9e:	4b03      	ldr	r3, [pc, #12]	; (420aac <_sbrk+0x2c>)
  420aa0:	601a      	str	r2, [r3, #0]
  420aa2:	e7f0      	b.n	420a86 <_sbrk+0x6>
  420aa4:	f04f 30ff 	mov.w	r0, #4294967295
  420aa8:	4770      	bx	lr
  420aaa:	bf00      	nop
  420aac:	20414864 	.word	0x20414864
  420ab0:	2045fffc 	.word	0x2045fffc
  420ab4:	2043c560 	.word	0x2043c560

00420ab8 <_close>:
  420ab8:	f04f 30ff 	mov.w	r0, #4294967295
  420abc:	4770      	bx	lr

00420abe <_fstat>:
  420abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  420ac2:	604b      	str	r3, [r1, #4]
  420ac4:	2000      	movs	r0, #0
  420ac6:	4770      	bx	lr

00420ac8 <_isatty>:
  420ac8:	2001      	movs	r0, #1
  420aca:	4770      	bx	lr

00420acc <_lseek>:
  420acc:	2000      	movs	r0, #0
  420ace:	4770      	bx	lr

00420ad0 <power_handler>:
	else if(event == LV_EVENT_VALUE_CHANGED) {
		printf("Toggled\n");
	}
}

static void power_handler(lv_obj_t * obj, lv_event_t event) {
  420ad0:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  420ad2:	2906      	cmp	r1, #6
  420ad4:	d002      	beq.n	420adc <power_handler+0xc>
		printf("Clicked\n");
	}
	else if(event == LV_EVENT_VALUE_CHANGED) {
  420ad6:	2910      	cmp	r1, #16
  420ad8:	d004      	beq.n	420ae4 <power_handler+0x14>
  420ada:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  420adc:	4803      	ldr	r0, [pc, #12]	; (420aec <power_handler+0x1c>)
  420ade:	4b04      	ldr	r3, [pc, #16]	; (420af0 <power_handler+0x20>)
  420ae0:	4798      	blx	r3
  420ae2:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  420ae4:	4803      	ldr	r0, [pc, #12]	; (420af4 <power_handler+0x24>)
  420ae6:	4b02      	ldr	r3, [pc, #8]	; (420af0 <power_handler+0x20>)
  420ae8:	4798      	blx	r3
	}
}
  420aea:	e7f6      	b.n	420ada <power_handler+0xa>
  420aec:	0042af78 	.word	0x0042af78
  420af0:	00421e01 	.word	0x00421e01
  420af4:	0042af84 	.word	0x0042af84

00420af8 <menu_handler>:
static void menu_handler(lv_obj_t * obj, lv_event_t event) {
  420af8:	b508      	push	{r3, lr}
	if(event == LV_EVENT_CLICKED) {
  420afa:	2906      	cmp	r1, #6
  420afc:	d002      	beq.n	420b04 <menu_handler+0xc>
	else if(event == LV_EVENT_VALUE_CHANGED) {
  420afe:	2910      	cmp	r1, #16
  420b00:	d004      	beq.n	420b0c <menu_handler+0x14>
  420b02:	bd08      	pop	{r3, pc}
		printf("Clicked\n");
  420b04:	4803      	ldr	r0, [pc, #12]	; (420b14 <menu_handler+0x1c>)
  420b06:	4b04      	ldr	r3, [pc, #16]	; (420b18 <menu_handler+0x20>)
  420b08:	4798      	blx	r3
  420b0a:	bd08      	pop	{r3, pc}
		printf("Toggled\n");
  420b0c:	4803      	ldr	r0, [pc, #12]	; (420b1c <menu_handler+0x24>)
  420b0e:	4b02      	ldr	r3, [pc, #8]	; (420b18 <menu_handler+0x20>)
  420b10:	4798      	blx	r3
}
  420b12:	e7f6      	b.n	420b02 <menu_handler+0xa>
  420b14:	0042af78 	.word	0x0042af78
  420b18:	00421e01 	.word	0x00421e01
  420b1c:	0042af84 	.word	0x0042af84

00420b20 <my_flush_cb>:

/************************************************************************/
/* port lvgl                                                            */
/************************************************************************/

void my_flush_cb(lv_disp_drv_t * disp_drv, const lv_area_t * area, lv_color_t * color_p) {
  420b20:	b570      	push	{r4, r5, r6, lr}
  420b22:	4605      	mov	r5, r0
  420b24:	460c      	mov	r4, r1
  420b26:	4616      	mov	r6, r2
	ili9341_set_top_left_limit(area->x1, area->y1);   ili9341_set_bottom_right_limit(area->x2, area->y2);
  420b28:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
  420b2c:	f9b4 0000 	ldrsh.w	r0, [r4]
  420b30:	4b0d      	ldr	r3, [pc, #52]	; (420b68 <my_flush_cb+0x48>)
  420b32:	4798      	blx	r3
  420b34:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  420b38:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
  420b3c:	4b0b      	ldr	r3, [pc, #44]	; (420b6c <my_flush_cb+0x4c>)
  420b3e:	4798      	blx	r3
	ili9341_copy_pixels_to_screen(color_p,  (area->x2 - area->x1) * (area->y2 - area->y1));
  420b40:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
  420b44:	f9b4 1000 	ldrsh.w	r1, [r4]
  420b48:	1a5b      	subs	r3, r3, r1
  420b4a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
  420b4e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
  420b52:	1a89      	subs	r1, r1, r2
  420b54:	fb01 f103 	mul.w	r1, r1, r3
  420b58:	4630      	mov	r0, r6
  420b5a:	4b05      	ldr	r3, [pc, #20]	; (420b70 <my_flush_cb+0x50>)
  420b5c:	4798      	blx	r3
	
	/* IMPORTANT!!!
	* Inform the graphics library that you are ready with the flushing*/
	lv_disp_flush_ready(disp_drv);
  420b5e:	4628      	mov	r0, r5
  420b60:	4b04      	ldr	r3, [pc, #16]	; (420b74 <my_flush_cb+0x54>)
  420b62:	4798      	blx	r3
  420b64:	bd70      	pop	{r4, r5, r6, pc}
  420b66:	bf00      	nop
  420b68:	00400c55 	.word	0x00400c55
  420b6c:	00400c75 	.word	0x00400c75
  420b70:	00400cc5 	.word	0x00400cc5
  420b74:	00414705 	.word	0x00414705

00420b78 <my_input_read>:
}

bool my_input_read(lv_indev_drv_t * drv, lv_indev_data_t*data) {
  420b78:	b510      	push	{r4, lr}
  420b7a:	b082      	sub	sp, #8
  420b7c:	460c      	mov	r4, r1
	int px, py, pressed;
	
	if (readPoint(&px, &py)) {
  420b7e:	4669      	mov	r1, sp
  420b80:	a801      	add	r0, sp, #4
  420b82:	4b07      	ldr	r3, [pc, #28]	; (420ba0 <my_input_read+0x28>)
  420b84:	4798      	blx	r3
  420b86:	b940      	cbnz	r0, 420b9a <my_input_read+0x22>
		data->state = LV_INDEV_STATE_PR;
	}
	else {
		data->state = LV_INDEV_STATE_REL;
  420b88:	2300      	movs	r3, #0
  420b8a:	73a3      	strb	r3, [r4, #14]
	}
	
	data->point.x = px;
  420b8c:	9b01      	ldr	r3, [sp, #4]
  420b8e:	8023      	strh	r3, [r4, #0]
	data->point.y = py;
  420b90:	9b00      	ldr	r3, [sp, #0]
  420b92:	8063      	strh	r3, [r4, #2]
	return false; /*No buffering now so no more data read*/
}
  420b94:	2000      	movs	r0, #0
  420b96:	b002      	add	sp, #8
  420b98:	bd10      	pop	{r4, pc}
		data->state = LV_INDEV_STATE_PR;
  420b9a:	2301      	movs	r3, #1
  420b9c:	73a3      	strb	r3, [r4, #14]
  420b9e:	e7f5      	b.n	420b8c <my_input_read+0x14>
  420ba0:	004009b1 	.word	0x004009b1

00420ba4 <task_main>:
static void task_main(void *pvParameters) {
  420ba4:	b500      	push	{lr}
  420ba6:	b083      	sub	sp, #12
  420ba8:	e002      	b.n	420bb0 <task_main+0xc>
		vTaskDelay(25);
  420baa:	2019      	movs	r0, #25
  420bac:	4b08      	ldr	r3, [pc, #32]	; (420bd0 <task_main+0x2c>)
  420bae:	4798      	blx	r3
		if ( xQueueReceive( xQueueOx, &ox, 0 )) {
  420bb0:	2300      	movs	r3, #0
  420bb2:	461a      	mov	r2, r3
  420bb4:	f10d 0107 	add.w	r1, sp, #7
  420bb8:	4806      	ldr	r0, [pc, #24]	; (420bd4 <task_main+0x30>)
  420bba:	6800      	ldr	r0, [r0, #0]
  420bbc:	4c06      	ldr	r4, [pc, #24]	; (420bd8 <task_main+0x34>)
  420bbe:	47a0      	blx	r4
  420bc0:	2800      	cmp	r0, #0
  420bc2:	d0f2      	beq.n	420baa <task_main+0x6>
			printf("ox: %d \n", ox);
  420bc4:	f89d 1007 	ldrb.w	r1, [sp, #7]
  420bc8:	4804      	ldr	r0, [pc, #16]	; (420bdc <task_main+0x38>)
  420bca:	4b05      	ldr	r3, [pc, #20]	; (420be0 <task_main+0x3c>)
  420bcc:	4798      	blx	r3
  420bce:	e7ec      	b.n	420baa <task_main+0x6>
  420bd0:	004026b5 	.word	0x004026b5
  420bd4:	2043a334 	.word	0x2043a334
  420bd8:	00401e6d 	.word	0x00401e6d
  420bdc:	0042af90 	.word	0x0042af90
  420be0:	00421e01 	.word	0x00421e01

00420be4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  420be4:	b530      	push	{r4, r5, lr}
  420be6:	b083      	sub	sp, #12
  420be8:	4604      	mov	r4, r0
  420bea:	460d      	mov	r5, r1
	uint32_t val = 0;
  420bec:	2300      	movs	r3, #0
  420bee:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  420bf0:	4b28      	ldr	r3, [pc, #160]	; (420c94 <usart_serial_getchar+0xb0>)
  420bf2:	4298      	cmp	r0, r3
  420bf4:	d013      	beq.n	420c1e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  420bf6:	4b28      	ldr	r3, [pc, #160]	; (420c98 <usart_serial_getchar+0xb4>)
  420bf8:	429c      	cmp	r4, r3
  420bfa:	d017      	beq.n	420c2c <usart_serial_getchar+0x48>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  420bfc:	4b27      	ldr	r3, [pc, #156]	; (420c9c <usart_serial_getchar+0xb8>)
  420bfe:	429c      	cmp	r4, r3
  420c00:	d01b      	beq.n	420c3a <usart_serial_getchar+0x56>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  420c02:	4b27      	ldr	r3, [pc, #156]	; (420ca0 <usart_serial_getchar+0xbc>)
  420c04:	429c      	cmp	r4, r3
  420c06:	d01f      	beq.n	420c48 <usart_serial_getchar+0x64>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  420c08:	4b26      	ldr	r3, [pc, #152]	; (420ca4 <usart_serial_getchar+0xc0>)
  420c0a:	429c      	cmp	r4, r3
  420c0c:	d023      	beq.n	420c56 <usart_serial_getchar+0x72>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  420c0e:	4b26      	ldr	r3, [pc, #152]	; (420ca8 <usart_serial_getchar+0xc4>)
  420c10:	429c      	cmp	r4, r3
  420c12:	d02a      	beq.n	420c6a <usart_serial_getchar+0x86>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  420c14:	4b25      	ldr	r3, [pc, #148]	; (420cac <usart_serial_getchar+0xc8>)
  420c16:	429c      	cmp	r4, r3
  420c18:	d031      	beq.n	420c7e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  420c1a:	b003      	add	sp, #12
  420c1c:	bd30      	pop	{r4, r5, pc}
		while (uart_read((Uart*)p_usart, data));
  420c1e:	4629      	mov	r1, r5
  420c20:	4620      	mov	r0, r4
  420c22:	4b23      	ldr	r3, [pc, #140]	; (420cb0 <usart_serial_getchar+0xcc>)
  420c24:	4798      	blx	r3
  420c26:	2800      	cmp	r0, #0
  420c28:	d1f9      	bne.n	420c1e <usart_serial_getchar+0x3a>
  420c2a:	e7e4      	b.n	420bf6 <usart_serial_getchar+0x12>
		while (uart_read((Uart*)p_usart, data));
  420c2c:	4629      	mov	r1, r5
  420c2e:	4620      	mov	r0, r4
  420c30:	4b1f      	ldr	r3, [pc, #124]	; (420cb0 <usart_serial_getchar+0xcc>)
  420c32:	4798      	blx	r3
  420c34:	2800      	cmp	r0, #0
  420c36:	d1f9      	bne.n	420c2c <usart_serial_getchar+0x48>
  420c38:	e7e0      	b.n	420bfc <usart_serial_getchar+0x18>
		while (uart_read((Uart*)p_usart, data));
  420c3a:	4629      	mov	r1, r5
  420c3c:	4620      	mov	r0, r4
  420c3e:	4b1c      	ldr	r3, [pc, #112]	; (420cb0 <usart_serial_getchar+0xcc>)
  420c40:	4798      	blx	r3
  420c42:	2800      	cmp	r0, #0
  420c44:	d1f9      	bne.n	420c3a <usart_serial_getchar+0x56>
  420c46:	e7dc      	b.n	420c02 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  420c48:	4629      	mov	r1, r5
  420c4a:	4620      	mov	r0, r4
  420c4c:	4b18      	ldr	r3, [pc, #96]	; (420cb0 <usart_serial_getchar+0xcc>)
  420c4e:	4798      	blx	r3
  420c50:	2800      	cmp	r0, #0
  420c52:	d1f9      	bne.n	420c48 <usart_serial_getchar+0x64>
  420c54:	e7d8      	b.n	420c08 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
  420c56:	a901      	add	r1, sp, #4
  420c58:	4620      	mov	r0, r4
  420c5a:	4b16      	ldr	r3, [pc, #88]	; (420cb4 <usart_serial_getchar+0xd0>)
  420c5c:	4798      	blx	r3
  420c5e:	2800      	cmp	r0, #0
  420c60:	d1f9      	bne.n	420c56 <usart_serial_getchar+0x72>
		*data = (uint8_t)(val & 0xFF);
  420c62:	f89d 3004 	ldrb.w	r3, [sp, #4]
  420c66:	702b      	strb	r3, [r5, #0]
  420c68:	e7d1      	b.n	420c0e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
  420c6a:	a901      	add	r1, sp, #4
  420c6c:	4620      	mov	r0, r4
  420c6e:	4b11      	ldr	r3, [pc, #68]	; (420cb4 <usart_serial_getchar+0xd0>)
  420c70:	4798      	blx	r3
  420c72:	2800      	cmp	r0, #0
  420c74:	d1f9      	bne.n	420c6a <usart_serial_getchar+0x86>
		*data = (uint8_t)(val & 0xFF);
  420c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
  420c7a:	702b      	strb	r3, [r5, #0]
  420c7c:	e7ca      	b.n	420c14 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  420c7e:	a901      	add	r1, sp, #4
  420c80:	4620      	mov	r0, r4
  420c82:	4b0c      	ldr	r3, [pc, #48]	; (420cb4 <usart_serial_getchar+0xd0>)
  420c84:	4798      	blx	r3
  420c86:	2800      	cmp	r0, #0
  420c88:	d1f9      	bne.n	420c7e <usart_serial_getchar+0x9a>
		*data = (uint8_t)(val & 0xFF);
  420c8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  420c8e:	702b      	strb	r3, [r5, #0]
}
  420c90:	e7c3      	b.n	420c1a <usart_serial_getchar+0x36>
  420c92:	bf00      	nop
  420c94:	400e0800 	.word	0x400e0800
  420c98:	400e0a00 	.word	0x400e0a00
  420c9c:	400e1a00 	.word	0x400e1a00
  420ca0:	400e1c00 	.word	0x400e1c00
  420ca4:	40024000 	.word	0x40024000
  420ca8:	40028000 	.word	0x40028000
  420cac:	4002c000 	.word	0x4002c000
  420cb0:	004206d7 	.word	0x004206d7
  420cb4:	00420773 	.word	0x00420773

00420cb8 <usart_serial_putchar>:
{
  420cb8:	b538      	push	{r3, r4, r5, lr}
  420cba:	4604      	mov	r4, r0
  420cbc:	460d      	mov	r5, r1
	if (UART0 == (Uart*)p_usart) {
  420cbe:	4b27      	ldr	r3, [pc, #156]	; (420d5c <usart_serial_putchar+0xa4>)
  420cc0:	4298      	cmp	r0, r3
  420cc2:	d013      	beq.n	420cec <usart_serial_putchar+0x34>
	if (UART1 == (Uart*)p_usart) {
  420cc4:	4b26      	ldr	r3, [pc, #152]	; (420d60 <usart_serial_putchar+0xa8>)
  420cc6:	4298      	cmp	r0, r3
  420cc8:	d018      	beq.n	420cfc <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  420cca:	4b26      	ldr	r3, [pc, #152]	; (420d64 <usart_serial_putchar+0xac>)
  420ccc:	4298      	cmp	r0, r3
  420cce:	d01d      	beq.n	420d0c <usart_serial_putchar+0x54>
	if (UART3 == (Uart*)p_usart) {
  420cd0:	4b25      	ldr	r3, [pc, #148]	; (420d68 <usart_serial_putchar+0xb0>)
  420cd2:	4298      	cmp	r0, r3
  420cd4:	d022      	beq.n	420d1c <usart_serial_putchar+0x64>
	if (USART0 == p_usart) {
  420cd6:	4b25      	ldr	r3, [pc, #148]	; (420d6c <usart_serial_putchar+0xb4>)
  420cd8:	4298      	cmp	r0, r3
  420cda:	d027      	beq.n	420d2c <usart_serial_putchar+0x74>
	if (USART1 == p_usart) {
  420cdc:	4b24      	ldr	r3, [pc, #144]	; (420d70 <usart_serial_putchar+0xb8>)
  420cde:	4298      	cmp	r0, r3
  420ce0:	d02c      	beq.n	420d3c <usart_serial_putchar+0x84>
	if (USART2 == p_usart) {
  420ce2:	4b24      	ldr	r3, [pc, #144]	; (420d74 <usart_serial_putchar+0xbc>)
  420ce4:	4298      	cmp	r0, r3
  420ce6:	d031      	beq.n	420d4c <usart_serial_putchar+0x94>
	return 0;
  420ce8:	2000      	movs	r0, #0
}
  420cea:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  420cec:	4629      	mov	r1, r5
  420cee:	4620      	mov	r0, r4
  420cf0:	4b21      	ldr	r3, [pc, #132]	; (420d78 <usart_serial_putchar+0xc0>)
  420cf2:	4798      	blx	r3
  420cf4:	2800      	cmp	r0, #0
  420cf6:	d1f9      	bne.n	420cec <usart_serial_putchar+0x34>
		return 1;
  420cf8:	2001      	movs	r0, #1
  420cfa:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  420cfc:	4629      	mov	r1, r5
  420cfe:	4620      	mov	r0, r4
  420d00:	4b1d      	ldr	r3, [pc, #116]	; (420d78 <usart_serial_putchar+0xc0>)
  420d02:	4798      	blx	r3
  420d04:	2800      	cmp	r0, #0
  420d06:	d1f9      	bne.n	420cfc <usart_serial_putchar+0x44>
		return 1;
  420d08:	2001      	movs	r0, #1
  420d0a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  420d0c:	4629      	mov	r1, r5
  420d0e:	4620      	mov	r0, r4
  420d10:	4b19      	ldr	r3, [pc, #100]	; (420d78 <usart_serial_putchar+0xc0>)
  420d12:	4798      	blx	r3
  420d14:	2800      	cmp	r0, #0
  420d16:	d1f9      	bne.n	420d0c <usart_serial_putchar+0x54>
		return 1;
  420d18:	2001      	movs	r0, #1
  420d1a:	bd38      	pop	{r3, r4, r5, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  420d1c:	4629      	mov	r1, r5
  420d1e:	4620      	mov	r0, r4
  420d20:	4b15      	ldr	r3, [pc, #84]	; (420d78 <usart_serial_putchar+0xc0>)
  420d22:	4798      	blx	r3
  420d24:	2800      	cmp	r0, #0
  420d26:	d1f9      	bne.n	420d1c <usart_serial_putchar+0x64>
		return 1;
  420d28:	2001      	movs	r0, #1
  420d2a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  420d2c:	4629      	mov	r1, r5
  420d2e:	4620      	mov	r0, r4
  420d30:	4b12      	ldr	r3, [pc, #72]	; (420d7c <usart_serial_putchar+0xc4>)
  420d32:	4798      	blx	r3
  420d34:	2800      	cmp	r0, #0
  420d36:	d1f9      	bne.n	420d2c <usart_serial_putchar+0x74>
		return 1;
  420d38:	2001      	movs	r0, #1
  420d3a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  420d3c:	4629      	mov	r1, r5
  420d3e:	4620      	mov	r0, r4
  420d40:	4b0e      	ldr	r3, [pc, #56]	; (420d7c <usart_serial_putchar+0xc4>)
  420d42:	4798      	blx	r3
  420d44:	2800      	cmp	r0, #0
  420d46:	d1f9      	bne.n	420d3c <usart_serial_putchar+0x84>
		return 1;
  420d48:	2001      	movs	r0, #1
  420d4a:	bd38      	pop	{r3, r4, r5, pc}
		while (usart_write(p_usart, c)!=0);
  420d4c:	4629      	mov	r1, r5
  420d4e:	4620      	mov	r0, r4
  420d50:	4b0a      	ldr	r3, [pc, #40]	; (420d7c <usart_serial_putchar+0xc4>)
  420d52:	4798      	blx	r3
  420d54:	2800      	cmp	r0, #0
  420d56:	d1f9      	bne.n	420d4c <usart_serial_putchar+0x94>
		return 1;
  420d58:	2001      	movs	r0, #1
  420d5a:	bd38      	pop	{r3, r4, r5, pc}
  420d5c:	400e0800 	.word	0x400e0800
  420d60:	400e0a00 	.word	0x400e0a00
  420d64:	400e1a00 	.word	0x400e1a00
  420d68:	400e1c00 	.word	0x400e1c00
  420d6c:	40024000 	.word	0x40024000
  420d70:	40028000 	.word	0x40028000
  420d74:	4002c000 	.word	0x4002c000
  420d78:	004206c5 	.word	0x004206c5
  420d7c:	0042075d 	.word	0x0042075d

00420d80 <configure_lcd>:
static void configure_lcd(void) {
  420d80:	b510      	push	{r4, lr}
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);  //
  420d82:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d86:	2074      	movs	r0, #116	; 0x74
  420d88:	4c0b      	ldr	r4, [pc, #44]	; (420db8 <configure_lcd+0x38>)
  420d8a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  420d8c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d90:	2075      	movs	r0, #117	; 0x75
  420d92:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  420d94:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420d98:	2076      	movs	r0, #118	; 0x76
  420d9a:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  420d9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  420da0:	207b      	movs	r0, #123	; 0x7b
  420da2:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  420da4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420da8:	2018      	movs	r0, #24
  420daa:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  420dac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  420db0:	2006      	movs	r0, #6
  420db2:	47a0      	blx	r4
  420db4:	bd10      	pop	{r4, pc}
  420db6:	bf00      	nop
  420db8:	0042023d 	.word	0x0042023d

00420dbc <configure_console>:
static void configure_console(void) {
  420dbc:	b570      	push	{r4, r5, r6, lr}
  420dbe:	b08a      	sub	sp, #40	; 0x28
	const usart_serial_options_t uart_serial_options = {
  420dc0:	4b1a      	ldr	r3, [pc, #104]	; (420e2c <configure_console+0x70>)
  420dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  420dc4:	ac0a      	add	r4, sp, #40	; 0x28
  420dc6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  420dca:	4d19      	ldr	r5, [pc, #100]	; (420e30 <configure_console+0x74>)
  420dcc:	4b19      	ldr	r3, [pc, #100]	; (420e34 <configure_console+0x78>)
  420dce:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  420dd0:	4a19      	ldr	r2, [pc, #100]	; (420e38 <configure_console+0x7c>)
  420dd2:	4b1a      	ldr	r3, [pc, #104]	; (420e3c <configure_console+0x80>)
  420dd4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  420dd6:	4a1a      	ldr	r2, [pc, #104]	; (420e40 <configure_console+0x84>)
  420dd8:	4b1a      	ldr	r3, [pc, #104]	; (420e44 <configure_console+0x88>)
  420dda:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  420ddc:	9b06      	ldr	r3, [sp, #24]
  420dde:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
  420de0:	9b07      	ldr	r3, [sp, #28]
  420de2:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
  420de4:	9b08      	ldr	r3, [sp, #32]
  420de6:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
  420de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  420dea:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  420dec:	2400      	movs	r4, #0
  420dee:	9404      	str	r4, [sp, #16]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  420df0:	200e      	movs	r0, #14
  420df2:	4b15      	ldr	r3, [pc, #84]	; (420e48 <configure_console+0x8c>)
  420df4:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  420df6:	4a15      	ldr	r2, [pc, #84]	; (420e4c <configure_console+0x90>)
  420df8:	4669      	mov	r1, sp
  420dfa:	4628      	mov	r0, r5
  420dfc:	4b14      	ldr	r3, [pc, #80]	; (420e50 <configure_console+0x94>)
  420dfe:	4798      	blx	r3
		usart_enable_tx(p_usart);
  420e00:	4628      	mov	r0, r5
  420e02:	4b14      	ldr	r3, [pc, #80]	; (420e54 <configure_console+0x98>)
  420e04:	4798      	blx	r3
		usart_enable_rx(p_usart);
  420e06:	4628      	mov	r0, r5
  420e08:	4b13      	ldr	r3, [pc, #76]	; (420e58 <configure_console+0x9c>)
  420e0a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  420e0c:	4e13      	ldr	r6, [pc, #76]	; (420e5c <configure_console+0xa0>)
  420e0e:	6833      	ldr	r3, [r6, #0]
  420e10:	4621      	mov	r1, r4
  420e12:	6898      	ldr	r0, [r3, #8]
  420e14:	4d12      	ldr	r5, [pc, #72]	; (420e60 <configure_console+0xa4>)
  420e16:	47a8      	blx	r5
	setbuf(stdin, NULL);
  420e18:	6833      	ldr	r3, [r6, #0]
  420e1a:	4621      	mov	r1, r4
  420e1c:	6858      	ldr	r0, [r3, #4]
  420e1e:	47a8      	blx	r5
	setbuf(stdout, NULL);
  420e20:	6833      	ldr	r3, [r6, #0]
  420e22:	4621      	mov	r1, r4
  420e24:	6898      	ldr	r0, [r3, #8]
  420e26:	47a8      	blx	r5
}
  420e28:	b00a      	add	sp, #40	; 0x28
  420e2a:	bd70      	pop	{r4, r5, r6, pc}
  420e2c:	00429804 	.word	0x00429804
  420e30:	40028000 	.word	0x40028000
  420e34:	2043a32c 	.word	0x2043a32c
  420e38:	00420cb9 	.word	0x00420cb9
  420e3c:	2043a328 	.word	0x2043a328
  420e40:	00420be5 	.word	0x00420be5
  420e44:	2043a324 	.word	0x2043a324
  420e48:	00420535 	.word	0x00420535
  420e4c:	08f0d180 	.word	0x08f0d180
  420e50:	004207d9 	.word	0x004207d9
  420e54:	00420735 	.word	0x00420735
  420e58:	00420741 	.word	0x00420741
  420e5c:	20400070 	.word	0x20400070
  420e60:	00422645 	.word	0x00422645

00420e64 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  420e64:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  420e66:	460a      	mov	r2, r1
  420e68:	4601      	mov	r1, r0
  420e6a:	4802      	ldr	r0, [pc, #8]	; (420e74 <vApplicationStackOverflowHook+0x10>)
  420e6c:	4b02      	ldr	r3, [pc, #8]	; (420e78 <vApplicationStackOverflowHook+0x14>)
  420e6e:	4798      	blx	r3
  420e70:	e7fe      	b.n	420e70 <vApplicationStackOverflowHook+0xc>
  420e72:	bf00      	nop
  420e74:	0042af9c 	.word	0x0042af9c
  420e78:	00421e01 	.word	0x00421e01

00420e7c <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  420e7c:	4770      	bx	lr

00420e7e <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  420e7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  420e82:	b672      	cpsid	i
  420e84:	f383 8811 	msr	BASEPRI, r3
  420e88:	f3bf 8f6f 	isb	sy
  420e8c:	f3bf 8f4f 	dsb	sy
  420e90:	b662      	cpsie	i
  420e92:	e7fe      	b.n	420e92 <vApplicationMallocFailedHook+0x14>

00420e94 <lv_oxi>:
lv_oxi(void) {
  420e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  420e98:	b085      	sub	sp, #20
 * Get the active screen of the default display
 * @return pointer to the active screen
 */
static inline lv_obj_t * lv_scr_act(void)
{
    return lv_disp_get_scr_act(lv_disp_get_default());
  420e9a:	4f50      	ldr	r7, [pc, #320]	; (420fdc <lv_oxi+0x148>)
  420e9c:	47b8      	blx	r7
  420e9e:	4e50      	ldr	r6, [pc, #320]	; (420fe0 <lv_oxi+0x14c>)
  420ea0:	47b0      	blx	r6
	lv_obj_set_style_local_bg_color(lv_scr_act(), LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_WHITE);
  420ea2:	4b50      	ldr	r3, [pc, #320]	; (420fe4 <lv_oxi+0x150>)
  420ea4:	8a1b      	ldrh	r3, [r3, #16]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  420ea6:	f8ad 300e 	strh.w	r3, [sp, #14]
  420eaa:	2229      	movs	r2, #41	; 0x29
  420eac:	2100      	movs	r1, #0
  420eae:	4d4e      	ldr	r5, [pc, #312]	; (420fe8 <lv_oxi+0x154>)
  420eb0:	47a8      	blx	r5
  420eb2:	47b8      	blx	r7
  420eb4:	47b0      	blx	r6
	lv_obj_t * img1 = lv_img_create(lv_scr_act(), NULL);
  420eb6:	2100      	movs	r1, #0
  420eb8:	4b4c      	ldr	r3, [pc, #304]	; (420fec <lv_oxi+0x158>)
  420eba:	4798      	blx	r3
  420ebc:	4604      	mov	r4, r0
	lv_img_set_src(img1, &logo);
  420ebe:	494c      	ldr	r1, [pc, #304]	; (420ff0 <lv_oxi+0x15c>)
  420ec0:	4b4c      	ldr	r3, [pc, #304]	; (420ff4 <lv_oxi+0x160>)
  420ec2:	4798      	blx	r3
	lv_obj_align(img1, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 20);
  420ec4:	2214      	movs	r2, #20
  420ec6:	9200      	str	r2, [sp, #0]
  420ec8:	2300      	movs	r3, #0
  420eca:	2201      	movs	r2, #1
  420ecc:	4619      	mov	r1, r3
  420ece:	4620      	mov	r0, r4
  420ed0:	f8df a14c 	ldr.w	sl, [pc, #332]	; 421020 <lv_oxi+0x18c>
  420ed4:	47d0      	blx	sl
  420ed6:	47b8      	blx	r7
  420ed8:	47b0      	blx	r6
	lv_obj_t * btnMenu = lv_btn_create(lv_scr_act(), NULL);
  420eda:	2100      	movs	r1, #0
  420edc:	4b46      	ldr	r3, [pc, #280]	; (420ff8 <lv_oxi+0x164>)
  420ede:	4798      	blx	r3
  420ee0:	4680      	mov	r8, r0
	lv_obj_set_event_cb(btnMenu, menu_handler);
  420ee2:	4946      	ldr	r1, [pc, #280]	; (420ffc <lv_oxi+0x168>)
  420ee4:	4b46      	ldr	r3, [pc, #280]	; (421000 <lv_oxi+0x16c>)
  420ee6:	4798      	blx	r3
	lv_obj_set_width(btnMenu, 60);  lv_obj_set_height(btnMenu, 60);
  420ee8:	213c      	movs	r1, #60	; 0x3c
  420eea:	4640      	mov	r0, r8
  420eec:	4b45      	ldr	r3, [pc, #276]	; (421004 <lv_oxi+0x170>)
  420eee:	4798      	blx	r3
  420ef0:	213c      	movs	r1, #60	; 0x3c
  420ef2:	4640      	mov	r0, r8
  420ef4:	4b44      	ldr	r3, [pc, #272]	; (421008 <lv_oxi+0x174>)
  420ef6:	4798      	blx	r3
	lv_obj_align(btnMenu, NULL, LV_ALIGN_IN_BOTTOM_RIGHT, 0, 0);
  420ef8:	2400      	movs	r4, #0
  420efa:	9400      	str	r4, [sp, #0]
  420efc:	4623      	mov	r3, r4
  420efe:	2206      	movs	r2, #6
  420f00:	4621      	mov	r1, r4
  420f02:	4640      	mov	r0, r8
  420f04:	47d0      	blx	sl
	lv_obj_set_style_local_bg_color(btnMenu, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_BLUE );
  420f06:	f04f 0300 	mov.w	r3, #0
  420f0a:	f364 0302 	bfi	r3, r4, #0, #3
  420f0e:	f364 03c7 	bfi	r3, r4, #3, #5
  420f12:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
  420f16:	f364 334f 	bfi	r3, r4, #13, #3
  420f1a:	2229      	movs	r2, #41	; 0x29
  420f1c:	4621      	mov	r1, r4
  420f1e:	4640      	mov	r0, r8
  420f20:	47a8      	blx	r5
	lv_obj_set_style_local_border_color(btnMenu, LV_OBJ_PART_MAIN, LV_STATE_DEFAULT, LV_COLOR_BLUE );
  420f22:	f04f 0300 	mov.w	r3, #0
  420f26:	f364 0302 	bfi	r3, r4, #0, #3
  420f2a:	f364 03c7 	bfi	r3, r4, #3, #5
  420f2e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
  420f32:	f364 334f 	bfi	r3, r4, #13, #3
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  420f36:	2239      	movs	r2, #57	; 0x39
  420f38:	4621      	mov	r1, r4
  420f3a:	4640      	mov	r0, r8
  420f3c:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  420f3e:	4623      	mov	r3, r4
  420f40:	2230      	movs	r2, #48	; 0x30
  420f42:	4621      	mov	r1, r4
  420f44:	4640      	mov	r0, r8
  420f46:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 421024 <lv_oxi+0x190>
  420f4a:	47d8      	blx	fp
	labelMenu = lv_label_create(btnMenu, NULL);
  420f4c:	4621      	mov	r1, r4
  420f4e:	4640      	mov	r0, r8
  420f50:	4b2e      	ldr	r3, [pc, #184]	; (42100c <lv_oxi+0x178>)
  420f52:	4798      	blx	r3
  420f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 421028 <lv_oxi+0x194>
  420f58:	f8c8 0000 	str.w	r0, [r8]
	lv_label_set_recolor(labelMenu, true);
  420f5c:	2101      	movs	r1, #1
  420f5e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 42102c <lv_oxi+0x198>
  420f62:	47c8      	blx	r9
	lv_label_set_text(labelMenu, "#ffffff   MARCO  #");
  420f64:	492a      	ldr	r1, [pc, #168]	; (421010 <lv_oxi+0x17c>)
  420f66:	f8d8 0000 	ldr.w	r0, [r8]
  420f6a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 421030 <lv_oxi+0x19c>
  420f6e:	47c0      	blx	r8
  420f70:	47b8      	blx	r7
  420f72:	47b0      	blx	r6
	lv_obj_t * btnPower = lv_btn_create(lv_scr_act(), NULL);
  420f74:	4621      	mov	r1, r4
  420f76:	4b20      	ldr	r3, [pc, #128]	; (420ff8 <lv_oxi+0x164>)
  420f78:	4798      	blx	r3
  420f7a:	4606      	mov	r6, r0
	lv_obj_set_event_cb(btnPower, power_handler);
  420f7c:	4925      	ldr	r1, [pc, #148]	; (421014 <lv_oxi+0x180>)
  420f7e:	4b20      	ldr	r3, [pc, #128]	; (421000 <lv_oxi+0x16c>)
  420f80:	4798      	blx	r3
	lv_obj_set_width(btnPower, 20);  lv_obj_set_height(btnPower, 20);
  420f82:	2114      	movs	r1, #20
  420f84:	4630      	mov	r0, r6
  420f86:	4b1f      	ldr	r3, [pc, #124]	; (421004 <lv_oxi+0x170>)
  420f88:	4798      	blx	r3
  420f8a:	2114      	movs	r1, #20
  420f8c:	4630      	mov	r0, r6
  420f8e:	4b1e      	ldr	r3, [pc, #120]	; (421008 <lv_oxi+0x174>)
  420f90:	4798      	blx	r3
	lv_obj_align(btnPower, NULL, LV_ALIGN_IN_TOP_LEFT, 10, 10);
  420f92:	230a      	movs	r3, #10
  420f94:	9300      	str	r3, [sp, #0]
  420f96:	2201      	movs	r2, #1
  420f98:	4621      	mov	r1, r4
  420f9a:	4630      	mov	r0, r6
  420f9c:	47d0      	blx	sl
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
  420f9e:	f8bd 700e 	ldrh.w	r7, [sp, #14]
  420fa2:	463b      	mov	r3, r7
  420fa4:	2229      	movs	r2, #41	; 0x29
  420fa6:	4621      	mov	r1, r4
  420fa8:	4630      	mov	r0, r6
  420faa:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
  420fac:	463b      	mov	r3, r7
  420fae:	2239      	movs	r2, #57	; 0x39
  420fb0:	4621      	mov	r1, r4
  420fb2:	4630      	mov	r0, r6
  420fb4:	47a8      	blx	r5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
  420fb6:	4623      	mov	r3, r4
  420fb8:	2230      	movs	r2, #48	; 0x30
  420fba:	4621      	mov	r1, r4
  420fbc:	4630      	mov	r0, r6
  420fbe:	47d8      	blx	fp
	labelPower = lv_label_create(btnPower, NULL);
  420fc0:	4621      	mov	r1, r4
  420fc2:	4630      	mov	r0, r6
  420fc4:	4b11      	ldr	r3, [pc, #68]	; (42100c <lv_oxi+0x178>)
  420fc6:	4798      	blx	r3
  420fc8:	4c13      	ldr	r4, [pc, #76]	; (421018 <lv_oxi+0x184>)
  420fca:	6020      	str	r0, [r4, #0]
	lv_label_set_recolor(labelPower, true);
  420fcc:	2101      	movs	r1, #1
  420fce:	47c8      	blx	r9
	lv_label_set_text(labelPower, "#00000 [  " LV_SYMBOL_POWER "  |#");
  420fd0:	4912      	ldr	r1, [pc, #72]	; (42101c <lv_oxi+0x188>)
  420fd2:	6820      	ldr	r0, [r4, #0]
  420fd4:	47c0      	blx	r8
}
  420fd6:	b005      	add	sp, #20
  420fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  420fdc:	00414625 	.word	0x00414625
  420fe0:	004031f9 	.word	0x004031f9
  420fe4:	00429804 	.word	0x00429804
  420fe8:	00407509 	.word	0x00407509
  420fec:	0041e44d 	.word	0x0041e44d
  420ff0:	00424e8c 	.word	0x00424e8c
  420ff4:	0041e26d 	.word	0x0041e26d
  420ff8:	0041c9a9 	.word	0x0041c9a9
  420ffc:	00420af9 	.word	0x00420af9
  421000:	004052fd 	.word	0x004052fd
  421004:	00406875 	.word	0x00406875
  421008:	004068b5 	.word	0x004068b5
  42100c:	0041f989 	.word	0x0041f989
  421010:	0042aee4 	.word	0x0042aee4
  421014:	00420ad1 	.word	0x00420ad1
  421018:	2043a09c 	.word	0x2043a09c
  42101c:	0042aef8 	.word	0x0042aef8
  421020:	00405d49 	.word	0x00405d49
  421024:	004074c9 	.word	0x004074c9
  421028:	2043a098 	.word	0x2043a098
  42102c:	0041f935 	.word	0x0041f935
  421030:	0041f725 	.word	0x0041f725

00421034 <task_lcd>:
static void task_lcd(void *pvParameters) {
  421034:	b508      	push	{r3, lr}
	lv_oxi();
  421036:	4b05      	ldr	r3, [pc, #20]	; (42104c <task_lcd+0x18>)
  421038:	4798      	blx	r3
		lv_tick_inc(50);
  42103a:	2032      	movs	r0, #50	; 0x32
  42103c:	4b04      	ldr	r3, [pc, #16]	; (421050 <task_lcd+0x1c>)
  42103e:	4798      	blx	r3
		lv_task_handler();
  421040:	4b04      	ldr	r3, [pc, #16]	; (421054 <task_lcd+0x20>)
  421042:	4798      	blx	r3
		vTaskDelay(50);
  421044:	2032      	movs	r0, #50	; 0x32
  421046:	4b04      	ldr	r3, [pc, #16]	; (421058 <task_lcd+0x24>)
  421048:	4798      	blx	r3
  42104a:	e7f6      	b.n	42103a <task_lcd+0x6>
  42104c:	00420e95 	.word	0x00420e95
  421050:	00414a25 	.word	0x00414a25
  421054:	0041665d 	.word	0x0041665d
  421058:	004026b5 	.word	0x004026b5

0042105c <main>:

/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  42105c:	b530      	push	{r4, r5, lr}
  42105e:	b099      	sub	sp, #100	; 0x64
	/* board and sys init */
	board_init();
  421060:	4b33      	ldr	r3, [pc, #204]	; (421130 <main+0xd4>)
  421062:	4798      	blx	r3
	sysclk_init();
  421064:	4b33      	ldr	r3, [pc, #204]	; (421134 <main+0xd8>)
  421066:	4798      	blx	r3
	configure_console();
  421068:	4b33      	ldr	r3, [pc, #204]	; (421138 <main+0xdc>)
  42106a:	4798      	blx	r3

	/* LCd int */
	configure_lcd();
  42106c:	4b33      	ldr	r3, [pc, #204]	; (42113c <main+0xe0>)
  42106e:	4798      	blx	r3
	ili9341_init();
  421070:	4b33      	ldr	r3, [pc, #204]	; (421140 <main+0xe4>)
  421072:	4798      	blx	r3
	configure_touch();
  421074:	4b33      	ldr	r3, [pc, #204]	; (421144 <main+0xe8>)
  421076:	4798      	blx	r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  421078:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  42107c:	4b32      	ldr	r3, [pc, #200]	; (421148 <main+0xec>)
  42107e:	631a      	str	r2, [r3, #48]	; 0x30
	ili9341_backlight_on();
	
	/*LittlevGL init*/
	lv_init();
  421080:	4b32      	ldr	r3, [pc, #200]	; (42114c <main+0xf0>)
  421082:	4798      	blx	r3
	lv_disp_drv_t disp_drv;                 /*A variable to hold the drivers. Can be local variable*/
	lv_disp_drv_init(&disp_drv);            /*Basic initialization*/
  421084:	a80b      	add	r0, sp, #44	; 0x2c
  421086:	4b32      	ldr	r3, [pc, #200]	; (421150 <main+0xf4>)
  421088:	4798      	blx	r3
	lv_disp_buf_init(&disp_buf, buf_1, NULL, LV_HOR_RES_MAX * LV_VER_RES_MAX);  /*Initialize `disp_buf` with the buffer(s) */
  42108a:	4c32      	ldr	r4, [pc, #200]	; (421154 <main+0xf8>)
  42108c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
  421090:	2200      	movs	r2, #0
  421092:	4931      	ldr	r1, [pc, #196]	; (421158 <main+0xfc>)
  421094:	4620      	mov	r0, r4
  421096:	4d31      	ldr	r5, [pc, #196]	; (42115c <main+0x100>)
  421098:	47a8      	blx	r5
	disp_drv.buffer = &disp_buf;            /*Set an initialized buffer*/
  42109a:	940c      	str	r4, [sp, #48]	; 0x30
	disp_drv.flush_cb = my_flush_cb;        /*Set a flush callback to draw to the display*/
  42109c:	4b30      	ldr	r3, [pc, #192]	; (421160 <main+0x104>)
  42109e:	930e      	str	r3, [sp, #56]	; 0x38
	lv_disp_t * disp;
	disp = lv_disp_drv_register(&disp_drv); /*Register the driver and save the created display objects*/
  4210a0:	a80b      	add	r0, sp, #44	; 0x2c
  4210a2:	4b30      	ldr	r3, [pc, #192]	; (421164 <main+0x108>)
  4210a4:	4798      	blx	r3
	
	/* Init input on LVGL */
	lv_indev_drv_t indev_drv;
	lv_indev_drv_init(&indev_drv);      /*Basic initialization*/
  4210a6:	a804      	add	r0, sp, #16
  4210a8:	4b2f      	ldr	r3, [pc, #188]	; (421168 <main+0x10c>)
  4210aa:	4798      	blx	r3
	indev_drv.type = LV_INDEV_TYPE_POINTER;
  4210ac:	2401      	movs	r4, #1
  4210ae:	f88d 4010 	strb.w	r4, [sp, #16]
	indev_drv.read_cb = my_input_read;
  4210b2:	4b2e      	ldr	r3, [pc, #184]	; (42116c <main+0x110>)
  4210b4:	9305      	str	r3, [sp, #20]
	/*Register the driver in LVGL and save the created input device object*/
	lv_indev_t * my_indev = lv_indev_drv_register(&indev_drv);
  4210b6:	a804      	add	r0, sp, #16
  4210b8:	4b2d      	ldr	r3, [pc, #180]	; (421170 <main+0x114>)
  4210ba:	4798      	blx	r3
	
	xQueueOx = xQueueCreate(32, sizeof(char));
  4210bc:	2200      	movs	r2, #0
  4210be:	4621      	mov	r1, r4
  4210c0:	2020      	movs	r0, #32
  4210c2:	4b2c      	ldr	r3, [pc, #176]	; (421174 <main+0x118>)
  4210c4:	4798      	blx	r3
  4210c6:	4b2c      	ldr	r3, [pc, #176]	; (421178 <main+0x11c>)
  4210c8:	6018      	str	r0, [r3, #0]

	if (xTaskCreate(task_lcd, "LCD", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_PRIORITY, NULL) != pdPASS) {
  4210ca:	2300      	movs	r3, #0
  4210cc:	9303      	str	r3, [sp, #12]
  4210ce:	9302      	str	r3, [sp, #8]
  4210d0:	9301      	str	r3, [sp, #4]
  4210d2:	9300      	str	r3, [sp, #0]
  4210d4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4210d8:	4928      	ldr	r1, [pc, #160]	; (42117c <main+0x120>)
  4210da:	4829      	ldr	r0, [pc, #164]	; (421180 <main+0x124>)
  4210dc:	4c29      	ldr	r4, [pc, #164]	; (421184 <main+0x128>)
  4210de:	47a0      	blx	r4
  4210e0:	2801      	cmp	r0, #1
  4210e2:	d002      	beq.n	4210ea <main+0x8e>
		printf("Failed to create lcd task\r\n");
  4210e4:	4828      	ldr	r0, [pc, #160]	; (421188 <main+0x12c>)
  4210e6:	4b29      	ldr	r3, [pc, #164]	; (42118c <main+0x130>)
  4210e8:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_aps2, "APS2", TASK_APS2_STACK_SIZE, NULL, TASK_APS2_PRIORITY, NULL) != pdPASS) {
  4210ea:	2300      	movs	r3, #0
  4210ec:	9303      	str	r3, [sp, #12]
  4210ee:	9302      	str	r3, [sp, #8]
  4210f0:	9301      	str	r3, [sp, #4]
  4210f2:	9300      	str	r3, [sp, #0]
  4210f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4210f8:	4925      	ldr	r1, [pc, #148]	; (421190 <main+0x134>)
  4210fa:	4826      	ldr	r0, [pc, #152]	; (421194 <main+0x138>)
  4210fc:	4c21      	ldr	r4, [pc, #132]	; (421184 <main+0x128>)
  4210fe:	47a0      	blx	r4
  421100:	2801      	cmp	r0, #1
  421102:	d002      	beq.n	42110a <main+0xae>
		printf("Failed to create APS task\r\n");
  421104:	4824      	ldr	r0, [pc, #144]	; (421198 <main+0x13c>)
  421106:	4b21      	ldr	r3, [pc, #132]	; (42118c <main+0x130>)
  421108:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_main, "main", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL) != pdPASS) {
  42110a:	2300      	movs	r3, #0
  42110c:	9303      	str	r3, [sp, #12]
  42110e:	9302      	str	r3, [sp, #8]
  421110:	9301      	str	r3, [sp, #4]
  421112:	9300      	str	r3, [sp, #0]
  421114:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  421118:	4920      	ldr	r1, [pc, #128]	; (42119c <main+0x140>)
  42111a:	4821      	ldr	r0, [pc, #132]	; (4211a0 <main+0x144>)
  42111c:	4c19      	ldr	r4, [pc, #100]	; (421184 <main+0x128>)
  42111e:	47a0      	blx	r4
  421120:	2801      	cmp	r0, #1
  421122:	d002      	beq.n	42112a <main+0xce>
		printf("Failed to create Main task\r\n");
  421124:	481f      	ldr	r0, [pc, #124]	; (4211a4 <main+0x148>)
  421126:	4b19      	ldr	r3, [pc, #100]	; (42118c <main+0x130>)
  421128:	4798      	blx	r3
	}
	
	/* Start the scheduler. */
	vTaskStartScheduler();
  42112a:	4b1f      	ldr	r3, [pc, #124]	; (4211a8 <main+0x14c>)
  42112c:	4798      	blx	r3
  42112e:	e7fe      	b.n	42112e <main+0xd2>
  421130:	0041fdad 	.word	0x0041fdad
  421134:	0041fbb9 	.word	0x0041fbb9
  421138:	00420dbd 	.word	0x00420dbd
  42113c:	00420d81 	.word	0x00420d81
  421140:	00401179 	.word	0x00401179
  421144:	00400665 	.word	0x00400665
  421148:	400e1200 	.word	0x400e1200
  42114c:	00405159 	.word	0x00405159
  421150:	004145ad 	.word	0x004145ad
  421154:	2043a068 	.word	0x2043a068
  421158:	20414868 	.word	0x20414868
  42115c:	00414605 	.word	0x00414605
  421160:	00420b21 	.word	0x00420b21
  421164:	004147b5 	.word	0x004147b5
  421168:	004148ed 	.word	0x004148ed
  42116c:	00420b79 	.word	0x00420b79
  421170:	00414919 	.word	0x00414919
  421174:	00401af9 	.word	0x00401af9
  421178:	2043a334 	.word	0x2043a334
  42117c:	0042af0c 	.word	0x0042af0c
  421180:	00421035 	.word	0x00421035
  421184:	0040225d 	.word	0x0040225d
  421188:	0042af10 	.word	0x0042af10
  42118c:	00421e01 	.word	0x00421e01
  421190:	0042af2c 	.word	0x0042af2c
  421194:	00400389 	.word	0x00400389
  421198:	0042af34 	.word	0x0042af34
  42119c:	0042af50 	.word	0x0042af50
  4211a0:	00420ba5 	.word	0x00420ba5
  4211a4:	0042af58 	.word	0x0042af58
  4211a8:	004023b5 	.word	0x004023b5

004211ac <arm_sin_f32>:
  4211ac:	ee06 0a90 	vmov	s13, r0
  4211b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 421220 <arm_sin_f32+0x74>
  4211b4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
  4211b8:	ee26 7a87 	vmul.f32	s14, s13, s14
  4211bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  4211c0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
  4211c4:	d504      	bpl.n	4211d0 <arm_sin_f32+0x24>
  4211c6:	ee17 3a90 	vmov	r3, s15
  4211ca:	3b01      	subs	r3, #1
  4211cc:	ee07 3a90 	vmov	s15, r3
  4211d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  4211d4:	eddf 6a13 	vldr	s13, [pc, #76]	; 421224 <arm_sin_f32+0x78>
  4211d8:	ee77 7a67 	vsub.f32	s15, s14, s15
  4211dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
  4211e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
  4211e4:	ee17 3a10 	vmov	r3, s14
  4211e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4211ec:	ee07 3a10 	vmov	s14, r3
  4211f0:	eef8 6a47 	vcvt.f32.u32	s13, s14
  4211f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
  4211f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
  4211fc:	4a0a      	ldr	r2, [pc, #40]	; (421228 <arm_sin_f32+0x7c>)
  4211fe:	ee37 7a67 	vsub.f32	s14, s14, s15
  421202:	eb02 0183 	add.w	r1, r2, r3, lsl #2
  421206:	ed91 6a00 	vldr	s12, [r1]
  42120a:	edd1 6a01 	vldr	s13, [r1, #4]
  42120e:	ee27 7a06 	vmul.f32	s14, s14, s12
  421212:	ee67 7aa6 	vmul.f32	s15, s15, s13
  421216:	ee77 7a27 	vadd.f32	s15, s14, s15
  42121a:	ee17 0a90 	vmov	r0, s15
  42121e:	4770      	bx	lr
  421220:	3e22f983 	.word	0x3e22f983
  421224:	44000000 	.word	0x44000000
  421228:	0042afb4 	.word	0x0042afb4

0042122c <__aeabi_drsub>:
  42122c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  421230:	e002      	b.n	421238 <__adddf3>
  421232:	bf00      	nop

00421234 <__aeabi_dsub>:
  421234:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00421238 <__adddf3>:
  421238:	b530      	push	{r4, r5, lr}
  42123a:	ea4f 0441 	mov.w	r4, r1, lsl #1
  42123e:	ea4f 0543 	mov.w	r5, r3, lsl #1
  421242:	ea94 0f05 	teq	r4, r5
  421246:	bf08      	it	eq
  421248:	ea90 0f02 	teqeq	r0, r2
  42124c:	bf1f      	itttt	ne
  42124e:	ea54 0c00 	orrsne.w	ip, r4, r0
  421252:	ea55 0c02 	orrsne.w	ip, r5, r2
  421256:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  42125a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  42125e:	f000 80e2 	beq.w	421426 <__adddf3+0x1ee>
  421262:	ea4f 5454 	mov.w	r4, r4, lsr #21
  421266:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  42126a:	bfb8      	it	lt
  42126c:	426d      	neglt	r5, r5
  42126e:	dd0c      	ble.n	42128a <__adddf3+0x52>
  421270:	442c      	add	r4, r5
  421272:	ea80 0202 	eor.w	r2, r0, r2
  421276:	ea81 0303 	eor.w	r3, r1, r3
  42127a:	ea82 0000 	eor.w	r0, r2, r0
  42127e:	ea83 0101 	eor.w	r1, r3, r1
  421282:	ea80 0202 	eor.w	r2, r0, r2
  421286:	ea81 0303 	eor.w	r3, r1, r3
  42128a:	2d36      	cmp	r5, #54	; 0x36
  42128c:	bf88      	it	hi
  42128e:	bd30      	pophi	{r4, r5, pc}
  421290:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  421294:	ea4f 3101 	mov.w	r1, r1, lsl #12
  421298:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  42129c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4212a0:	d002      	beq.n	4212a8 <__adddf3+0x70>
  4212a2:	4240      	negs	r0, r0
  4212a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4212a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  4212ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4212b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4212b4:	d002      	beq.n	4212bc <__adddf3+0x84>
  4212b6:	4252      	negs	r2, r2
  4212b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4212bc:	ea94 0f05 	teq	r4, r5
  4212c0:	f000 80a7 	beq.w	421412 <__adddf3+0x1da>
  4212c4:	f1a4 0401 	sub.w	r4, r4, #1
  4212c8:	f1d5 0e20 	rsbs	lr, r5, #32
  4212cc:	db0d      	blt.n	4212ea <__adddf3+0xb2>
  4212ce:	fa02 fc0e 	lsl.w	ip, r2, lr
  4212d2:	fa22 f205 	lsr.w	r2, r2, r5
  4212d6:	1880      	adds	r0, r0, r2
  4212d8:	f141 0100 	adc.w	r1, r1, #0
  4212dc:	fa03 f20e 	lsl.w	r2, r3, lr
  4212e0:	1880      	adds	r0, r0, r2
  4212e2:	fa43 f305 	asr.w	r3, r3, r5
  4212e6:	4159      	adcs	r1, r3
  4212e8:	e00e      	b.n	421308 <__adddf3+0xd0>
  4212ea:	f1a5 0520 	sub.w	r5, r5, #32
  4212ee:	f10e 0e20 	add.w	lr, lr, #32
  4212f2:	2a01      	cmp	r2, #1
  4212f4:	fa03 fc0e 	lsl.w	ip, r3, lr
  4212f8:	bf28      	it	cs
  4212fa:	f04c 0c02 	orrcs.w	ip, ip, #2
  4212fe:	fa43 f305 	asr.w	r3, r3, r5
  421302:	18c0      	adds	r0, r0, r3
  421304:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  421308:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  42130c:	d507      	bpl.n	42131e <__adddf3+0xe6>
  42130e:	f04f 0e00 	mov.w	lr, #0
  421312:	f1dc 0c00 	rsbs	ip, ip, #0
  421316:	eb7e 0000 	sbcs.w	r0, lr, r0
  42131a:	eb6e 0101 	sbc.w	r1, lr, r1
  42131e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  421322:	d31b      	bcc.n	42135c <__adddf3+0x124>
  421324:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  421328:	d30c      	bcc.n	421344 <__adddf3+0x10c>
  42132a:	0849      	lsrs	r1, r1, #1
  42132c:	ea5f 0030 	movs.w	r0, r0, rrx
  421330:	ea4f 0c3c 	mov.w	ip, ip, rrx
  421334:	f104 0401 	add.w	r4, r4, #1
  421338:	ea4f 5244 	mov.w	r2, r4, lsl #21
  42133c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  421340:	f080 809a 	bcs.w	421478 <__adddf3+0x240>
  421344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  421348:	bf08      	it	eq
  42134a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  42134e:	f150 0000 	adcs.w	r0, r0, #0
  421352:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  421356:	ea41 0105 	orr.w	r1, r1, r5
  42135a:	bd30      	pop	{r4, r5, pc}
  42135c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  421360:	4140      	adcs	r0, r0
  421362:	eb41 0101 	adc.w	r1, r1, r1
  421366:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42136a:	f1a4 0401 	sub.w	r4, r4, #1
  42136e:	d1e9      	bne.n	421344 <__adddf3+0x10c>
  421370:	f091 0f00 	teq	r1, #0
  421374:	bf04      	itt	eq
  421376:	4601      	moveq	r1, r0
  421378:	2000      	moveq	r0, #0
  42137a:	fab1 f381 	clz	r3, r1
  42137e:	bf08      	it	eq
  421380:	3320      	addeq	r3, #32
  421382:	f1a3 030b 	sub.w	r3, r3, #11
  421386:	f1b3 0220 	subs.w	r2, r3, #32
  42138a:	da0c      	bge.n	4213a6 <__adddf3+0x16e>
  42138c:	320c      	adds	r2, #12
  42138e:	dd08      	ble.n	4213a2 <__adddf3+0x16a>
  421390:	f102 0c14 	add.w	ip, r2, #20
  421394:	f1c2 020c 	rsb	r2, r2, #12
  421398:	fa01 f00c 	lsl.w	r0, r1, ip
  42139c:	fa21 f102 	lsr.w	r1, r1, r2
  4213a0:	e00c      	b.n	4213bc <__adddf3+0x184>
  4213a2:	f102 0214 	add.w	r2, r2, #20
  4213a6:	bfd8      	it	le
  4213a8:	f1c2 0c20 	rsble	ip, r2, #32
  4213ac:	fa01 f102 	lsl.w	r1, r1, r2
  4213b0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4213b4:	bfdc      	itt	le
  4213b6:	ea41 010c 	orrle.w	r1, r1, ip
  4213ba:	4090      	lslle	r0, r2
  4213bc:	1ae4      	subs	r4, r4, r3
  4213be:	bfa2      	ittt	ge
  4213c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4213c4:	4329      	orrge	r1, r5
  4213c6:	bd30      	popge	{r4, r5, pc}
  4213c8:	ea6f 0404 	mvn.w	r4, r4
  4213cc:	3c1f      	subs	r4, #31
  4213ce:	da1c      	bge.n	42140a <__adddf3+0x1d2>
  4213d0:	340c      	adds	r4, #12
  4213d2:	dc0e      	bgt.n	4213f2 <__adddf3+0x1ba>
  4213d4:	f104 0414 	add.w	r4, r4, #20
  4213d8:	f1c4 0220 	rsb	r2, r4, #32
  4213dc:	fa20 f004 	lsr.w	r0, r0, r4
  4213e0:	fa01 f302 	lsl.w	r3, r1, r2
  4213e4:	ea40 0003 	orr.w	r0, r0, r3
  4213e8:	fa21 f304 	lsr.w	r3, r1, r4
  4213ec:	ea45 0103 	orr.w	r1, r5, r3
  4213f0:	bd30      	pop	{r4, r5, pc}
  4213f2:	f1c4 040c 	rsb	r4, r4, #12
  4213f6:	f1c4 0220 	rsb	r2, r4, #32
  4213fa:	fa20 f002 	lsr.w	r0, r0, r2
  4213fe:	fa01 f304 	lsl.w	r3, r1, r4
  421402:	ea40 0003 	orr.w	r0, r0, r3
  421406:	4629      	mov	r1, r5
  421408:	bd30      	pop	{r4, r5, pc}
  42140a:	fa21 f004 	lsr.w	r0, r1, r4
  42140e:	4629      	mov	r1, r5
  421410:	bd30      	pop	{r4, r5, pc}
  421412:	f094 0f00 	teq	r4, #0
  421416:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  42141a:	bf06      	itte	eq
  42141c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  421420:	3401      	addeq	r4, #1
  421422:	3d01      	subne	r5, #1
  421424:	e74e      	b.n	4212c4 <__adddf3+0x8c>
  421426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42142a:	bf18      	it	ne
  42142c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  421430:	d029      	beq.n	421486 <__adddf3+0x24e>
  421432:	ea94 0f05 	teq	r4, r5
  421436:	bf08      	it	eq
  421438:	ea90 0f02 	teqeq	r0, r2
  42143c:	d005      	beq.n	42144a <__adddf3+0x212>
  42143e:	ea54 0c00 	orrs.w	ip, r4, r0
  421442:	bf04      	itt	eq
  421444:	4619      	moveq	r1, r3
  421446:	4610      	moveq	r0, r2
  421448:	bd30      	pop	{r4, r5, pc}
  42144a:	ea91 0f03 	teq	r1, r3
  42144e:	bf1e      	ittt	ne
  421450:	2100      	movne	r1, #0
  421452:	2000      	movne	r0, #0
  421454:	bd30      	popne	{r4, r5, pc}
  421456:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  42145a:	d105      	bne.n	421468 <__adddf3+0x230>
  42145c:	0040      	lsls	r0, r0, #1
  42145e:	4149      	adcs	r1, r1
  421460:	bf28      	it	cs
  421462:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  421466:	bd30      	pop	{r4, r5, pc}
  421468:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  42146c:	bf3c      	itt	cc
  42146e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  421472:	bd30      	popcc	{r4, r5, pc}
  421474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  421478:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  42147c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  421480:	f04f 0000 	mov.w	r0, #0
  421484:	bd30      	pop	{r4, r5, pc}
  421486:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  42148a:	bf1a      	itte	ne
  42148c:	4619      	movne	r1, r3
  42148e:	4610      	movne	r0, r2
  421490:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  421494:	bf1c      	itt	ne
  421496:	460b      	movne	r3, r1
  421498:	4602      	movne	r2, r0
  42149a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  42149e:	bf06      	itte	eq
  4214a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4214a4:	ea91 0f03 	teqeq	r1, r3
  4214a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  4214ac:	bd30      	pop	{r4, r5, pc}
  4214ae:	bf00      	nop

004214b0 <__aeabi_ui2d>:
  4214b0:	f090 0f00 	teq	r0, #0
  4214b4:	bf04      	itt	eq
  4214b6:	2100      	moveq	r1, #0
  4214b8:	4770      	bxeq	lr
  4214ba:	b530      	push	{r4, r5, lr}
  4214bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4214c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4214c4:	f04f 0500 	mov.w	r5, #0
  4214c8:	f04f 0100 	mov.w	r1, #0
  4214cc:	e750      	b.n	421370 <__adddf3+0x138>
  4214ce:	bf00      	nop

004214d0 <__aeabi_i2d>:
  4214d0:	f090 0f00 	teq	r0, #0
  4214d4:	bf04      	itt	eq
  4214d6:	2100      	moveq	r1, #0
  4214d8:	4770      	bxeq	lr
  4214da:	b530      	push	{r4, r5, lr}
  4214dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4214e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4214e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4214e8:	bf48      	it	mi
  4214ea:	4240      	negmi	r0, r0
  4214ec:	f04f 0100 	mov.w	r1, #0
  4214f0:	e73e      	b.n	421370 <__adddf3+0x138>
  4214f2:	bf00      	nop

004214f4 <__aeabi_f2d>:
  4214f4:	0042      	lsls	r2, r0, #1
  4214f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4214fa:	ea4f 0131 	mov.w	r1, r1, rrx
  4214fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
  421502:	bf1f      	itttt	ne
  421504:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  421508:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42150c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  421510:	4770      	bxne	lr
  421512:	f092 0f00 	teq	r2, #0
  421516:	bf14      	ite	ne
  421518:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  42151c:	4770      	bxeq	lr
  42151e:	b530      	push	{r4, r5, lr}
  421520:	f44f 7460 	mov.w	r4, #896	; 0x380
  421524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  421528:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  42152c:	e720      	b.n	421370 <__adddf3+0x138>
  42152e:	bf00      	nop

00421530 <__aeabi_ul2d>:
  421530:	ea50 0201 	orrs.w	r2, r0, r1
  421534:	bf08      	it	eq
  421536:	4770      	bxeq	lr
  421538:	b530      	push	{r4, r5, lr}
  42153a:	f04f 0500 	mov.w	r5, #0
  42153e:	e00a      	b.n	421556 <__aeabi_l2d+0x16>

00421540 <__aeabi_l2d>:
  421540:	ea50 0201 	orrs.w	r2, r0, r1
  421544:	bf08      	it	eq
  421546:	4770      	bxeq	lr
  421548:	b530      	push	{r4, r5, lr}
  42154a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  42154e:	d502      	bpl.n	421556 <__aeabi_l2d+0x16>
  421550:	4240      	negs	r0, r0
  421552:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  421556:	f44f 6480 	mov.w	r4, #1024	; 0x400
  42155a:	f104 0432 	add.w	r4, r4, #50	; 0x32
  42155e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  421562:	f43f aedc 	beq.w	42131e <__adddf3+0xe6>
  421566:	f04f 0203 	mov.w	r2, #3
  42156a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  42156e:	bf18      	it	ne
  421570:	3203      	addne	r2, #3
  421572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  421576:	bf18      	it	ne
  421578:	3203      	addne	r2, #3
  42157a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  42157e:	f1c2 0320 	rsb	r3, r2, #32
  421582:	fa00 fc03 	lsl.w	ip, r0, r3
  421586:	fa20 f002 	lsr.w	r0, r0, r2
  42158a:	fa01 fe03 	lsl.w	lr, r1, r3
  42158e:	ea40 000e 	orr.w	r0, r0, lr
  421592:	fa21 f102 	lsr.w	r1, r1, r2
  421596:	4414      	add	r4, r2
  421598:	e6c1      	b.n	42131e <__adddf3+0xe6>
  42159a:	bf00      	nop

0042159c <__aeabi_dmul>:
  42159c:	b570      	push	{r4, r5, r6, lr}
  42159e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4215a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4215a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4215aa:	bf1d      	ittte	ne
  4215ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4215b0:	ea94 0f0c 	teqne	r4, ip
  4215b4:	ea95 0f0c 	teqne	r5, ip
  4215b8:	f000 f8de 	bleq	421778 <__aeabi_dmul+0x1dc>
  4215bc:	442c      	add	r4, r5
  4215be:	ea81 0603 	eor.w	r6, r1, r3
  4215c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4215c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4215ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4215ce:	bf18      	it	ne
  4215d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4215d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4215d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4215dc:	d038      	beq.n	421650 <__aeabi_dmul+0xb4>
  4215de:	fba0 ce02 	umull	ip, lr, r0, r2
  4215e2:	f04f 0500 	mov.w	r5, #0
  4215e6:	fbe1 e502 	umlal	lr, r5, r1, r2
  4215ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4215ee:	fbe0 e503 	umlal	lr, r5, r0, r3
  4215f2:	f04f 0600 	mov.w	r6, #0
  4215f6:	fbe1 5603 	umlal	r5, r6, r1, r3
  4215fa:	f09c 0f00 	teq	ip, #0
  4215fe:	bf18      	it	ne
  421600:	f04e 0e01 	orrne.w	lr, lr, #1
  421604:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  421608:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  42160c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  421610:	d204      	bcs.n	42161c <__aeabi_dmul+0x80>
  421612:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  421616:	416d      	adcs	r5, r5
  421618:	eb46 0606 	adc.w	r6, r6, r6
  42161c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  421620:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  421624:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  421628:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  42162c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  421630:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  421634:	bf88      	it	hi
  421636:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  42163a:	d81e      	bhi.n	42167a <__aeabi_dmul+0xde>
  42163c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  421640:	bf08      	it	eq
  421642:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  421646:	f150 0000 	adcs.w	r0, r0, #0
  42164a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  42164e:	bd70      	pop	{r4, r5, r6, pc}
  421650:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  421654:	ea46 0101 	orr.w	r1, r6, r1
  421658:	ea40 0002 	orr.w	r0, r0, r2
  42165c:	ea81 0103 	eor.w	r1, r1, r3
  421660:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  421664:	bfc2      	ittt	gt
  421666:	ebd4 050c 	rsbsgt	r5, r4, ip
  42166a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  42166e:	bd70      	popgt	{r4, r5, r6, pc}
  421670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  421674:	f04f 0e00 	mov.w	lr, #0
  421678:	3c01      	subs	r4, #1
  42167a:	f300 80ab 	bgt.w	4217d4 <__aeabi_dmul+0x238>
  42167e:	f114 0f36 	cmn.w	r4, #54	; 0x36
  421682:	bfde      	ittt	le
  421684:	2000      	movle	r0, #0
  421686:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  42168a:	bd70      	pople	{r4, r5, r6, pc}
  42168c:	f1c4 0400 	rsb	r4, r4, #0
  421690:	3c20      	subs	r4, #32
  421692:	da35      	bge.n	421700 <__aeabi_dmul+0x164>
  421694:	340c      	adds	r4, #12
  421696:	dc1b      	bgt.n	4216d0 <__aeabi_dmul+0x134>
  421698:	f104 0414 	add.w	r4, r4, #20
  42169c:	f1c4 0520 	rsb	r5, r4, #32
  4216a0:	fa00 f305 	lsl.w	r3, r0, r5
  4216a4:	fa20 f004 	lsr.w	r0, r0, r4
  4216a8:	fa01 f205 	lsl.w	r2, r1, r5
  4216ac:	ea40 0002 	orr.w	r0, r0, r2
  4216b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4216b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4216b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4216bc:	fa21 f604 	lsr.w	r6, r1, r4
  4216c0:	eb42 0106 	adc.w	r1, r2, r6
  4216c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4216c8:	bf08      	it	eq
  4216ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4216ce:	bd70      	pop	{r4, r5, r6, pc}
  4216d0:	f1c4 040c 	rsb	r4, r4, #12
  4216d4:	f1c4 0520 	rsb	r5, r4, #32
  4216d8:	fa00 f304 	lsl.w	r3, r0, r4
  4216dc:	fa20 f005 	lsr.w	r0, r0, r5
  4216e0:	fa01 f204 	lsl.w	r2, r1, r4
  4216e4:	ea40 0002 	orr.w	r0, r0, r2
  4216e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4216ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4216f0:	f141 0100 	adc.w	r1, r1, #0
  4216f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4216f8:	bf08      	it	eq
  4216fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4216fe:	bd70      	pop	{r4, r5, r6, pc}
  421700:	f1c4 0520 	rsb	r5, r4, #32
  421704:	fa00 f205 	lsl.w	r2, r0, r5
  421708:	ea4e 0e02 	orr.w	lr, lr, r2
  42170c:	fa20 f304 	lsr.w	r3, r0, r4
  421710:	fa01 f205 	lsl.w	r2, r1, r5
  421714:	ea43 0302 	orr.w	r3, r3, r2
  421718:	fa21 f004 	lsr.w	r0, r1, r4
  42171c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  421720:	fa21 f204 	lsr.w	r2, r1, r4
  421724:	ea20 0002 	bic.w	r0, r0, r2
  421728:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  42172c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  421730:	bf08      	it	eq
  421732:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  421736:	bd70      	pop	{r4, r5, r6, pc}
  421738:	f094 0f00 	teq	r4, #0
  42173c:	d10f      	bne.n	42175e <__aeabi_dmul+0x1c2>
  42173e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  421742:	0040      	lsls	r0, r0, #1
  421744:	eb41 0101 	adc.w	r1, r1, r1
  421748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  42174c:	bf08      	it	eq
  42174e:	3c01      	subeq	r4, #1
  421750:	d0f7      	beq.n	421742 <__aeabi_dmul+0x1a6>
  421752:	ea41 0106 	orr.w	r1, r1, r6
  421756:	f095 0f00 	teq	r5, #0
  42175a:	bf18      	it	ne
  42175c:	4770      	bxne	lr
  42175e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  421762:	0052      	lsls	r2, r2, #1
  421764:	eb43 0303 	adc.w	r3, r3, r3
  421768:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  42176c:	bf08      	it	eq
  42176e:	3d01      	subeq	r5, #1
  421770:	d0f7      	beq.n	421762 <__aeabi_dmul+0x1c6>
  421772:	ea43 0306 	orr.w	r3, r3, r6
  421776:	4770      	bx	lr
  421778:	ea94 0f0c 	teq	r4, ip
  42177c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  421780:	bf18      	it	ne
  421782:	ea95 0f0c 	teqne	r5, ip
  421786:	d00c      	beq.n	4217a2 <__aeabi_dmul+0x206>
  421788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  42178c:	bf18      	it	ne
  42178e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  421792:	d1d1      	bne.n	421738 <__aeabi_dmul+0x19c>
  421794:	ea81 0103 	eor.w	r1, r1, r3
  421798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  42179c:	f04f 0000 	mov.w	r0, #0
  4217a0:	bd70      	pop	{r4, r5, r6, pc}
  4217a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4217a6:	bf06      	itte	eq
  4217a8:	4610      	moveq	r0, r2
  4217aa:	4619      	moveq	r1, r3
  4217ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4217b0:	d019      	beq.n	4217e6 <__aeabi_dmul+0x24a>
  4217b2:	ea94 0f0c 	teq	r4, ip
  4217b6:	d102      	bne.n	4217be <__aeabi_dmul+0x222>
  4217b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4217bc:	d113      	bne.n	4217e6 <__aeabi_dmul+0x24a>
  4217be:	ea95 0f0c 	teq	r5, ip
  4217c2:	d105      	bne.n	4217d0 <__aeabi_dmul+0x234>
  4217c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4217c8:	bf1c      	itt	ne
  4217ca:	4610      	movne	r0, r2
  4217cc:	4619      	movne	r1, r3
  4217ce:	d10a      	bne.n	4217e6 <__aeabi_dmul+0x24a>
  4217d0:	ea81 0103 	eor.w	r1, r1, r3
  4217d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4217d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4217dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4217e0:	f04f 0000 	mov.w	r0, #0
  4217e4:	bd70      	pop	{r4, r5, r6, pc}
  4217e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4217ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4217ee:	bd70      	pop	{r4, r5, r6, pc}

004217f0 <__aeabi_ddiv>:
  4217f0:	b570      	push	{r4, r5, r6, lr}
  4217f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4217f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4217fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4217fe:	bf1d      	ittte	ne
  421800:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  421804:	ea94 0f0c 	teqne	r4, ip
  421808:	ea95 0f0c 	teqne	r5, ip
  42180c:	f000 f8a7 	bleq	42195e <__aeabi_ddiv+0x16e>
  421810:	eba4 0405 	sub.w	r4, r4, r5
  421814:	ea81 0e03 	eor.w	lr, r1, r3
  421818:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  42181c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  421820:	f000 8088 	beq.w	421934 <__aeabi_ddiv+0x144>
  421824:	ea4f 3303 	mov.w	r3, r3, lsl #12
  421828:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  42182c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  421830:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  421834:	ea4f 2202 	mov.w	r2, r2, lsl #8
  421838:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  42183c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  421840:	ea4f 2600 	mov.w	r6, r0, lsl #8
  421844:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  421848:	429d      	cmp	r5, r3
  42184a:	bf08      	it	eq
  42184c:	4296      	cmpeq	r6, r2
  42184e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  421852:	f504 7440 	add.w	r4, r4, #768	; 0x300
  421856:	d202      	bcs.n	42185e <__aeabi_ddiv+0x6e>
  421858:	085b      	lsrs	r3, r3, #1
  42185a:	ea4f 0232 	mov.w	r2, r2, rrx
  42185e:	1ab6      	subs	r6, r6, r2
  421860:	eb65 0503 	sbc.w	r5, r5, r3
  421864:	085b      	lsrs	r3, r3, #1
  421866:	ea4f 0232 	mov.w	r2, r2, rrx
  42186a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  42186e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  421872:	ebb6 0e02 	subs.w	lr, r6, r2
  421876:	eb75 0e03 	sbcs.w	lr, r5, r3
  42187a:	bf22      	ittt	cs
  42187c:	1ab6      	subcs	r6, r6, r2
  42187e:	4675      	movcs	r5, lr
  421880:	ea40 000c 	orrcs.w	r0, r0, ip
  421884:	085b      	lsrs	r3, r3, #1
  421886:	ea4f 0232 	mov.w	r2, r2, rrx
  42188a:	ebb6 0e02 	subs.w	lr, r6, r2
  42188e:	eb75 0e03 	sbcs.w	lr, r5, r3
  421892:	bf22      	ittt	cs
  421894:	1ab6      	subcs	r6, r6, r2
  421896:	4675      	movcs	r5, lr
  421898:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  42189c:	085b      	lsrs	r3, r3, #1
  42189e:	ea4f 0232 	mov.w	r2, r2, rrx
  4218a2:	ebb6 0e02 	subs.w	lr, r6, r2
  4218a6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4218aa:	bf22      	ittt	cs
  4218ac:	1ab6      	subcs	r6, r6, r2
  4218ae:	4675      	movcs	r5, lr
  4218b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  4218b4:	085b      	lsrs	r3, r3, #1
  4218b6:	ea4f 0232 	mov.w	r2, r2, rrx
  4218ba:	ebb6 0e02 	subs.w	lr, r6, r2
  4218be:	eb75 0e03 	sbcs.w	lr, r5, r3
  4218c2:	bf22      	ittt	cs
  4218c4:	1ab6      	subcs	r6, r6, r2
  4218c6:	4675      	movcs	r5, lr
  4218c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4218cc:	ea55 0e06 	orrs.w	lr, r5, r6
  4218d0:	d018      	beq.n	421904 <__aeabi_ddiv+0x114>
  4218d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4218d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4218da:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4218de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4218e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4218e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4218ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4218ee:	d1c0      	bne.n	421872 <__aeabi_ddiv+0x82>
  4218f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4218f4:	d10b      	bne.n	42190e <__aeabi_ddiv+0x11e>
  4218f6:	ea41 0100 	orr.w	r1, r1, r0
  4218fa:	f04f 0000 	mov.w	r0, #0
  4218fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  421902:	e7b6      	b.n	421872 <__aeabi_ddiv+0x82>
  421904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  421908:	bf04      	itt	eq
  42190a:	4301      	orreq	r1, r0
  42190c:	2000      	moveq	r0, #0
  42190e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  421912:	bf88      	it	hi
  421914:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  421918:	f63f aeaf 	bhi.w	42167a <__aeabi_dmul+0xde>
  42191c:	ebb5 0c03 	subs.w	ip, r5, r3
  421920:	bf04      	itt	eq
  421922:	ebb6 0c02 	subseq.w	ip, r6, r2
  421926:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  42192a:	f150 0000 	adcs.w	r0, r0, #0
  42192e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  421932:	bd70      	pop	{r4, r5, r6, pc}
  421934:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  421938:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  42193c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  421940:	bfc2      	ittt	gt
  421942:	ebd4 050c 	rsbsgt	r5, r4, ip
  421946:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  42194a:	bd70      	popgt	{r4, r5, r6, pc}
  42194c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  421950:	f04f 0e00 	mov.w	lr, #0
  421954:	3c01      	subs	r4, #1
  421956:	e690      	b.n	42167a <__aeabi_dmul+0xde>
  421958:	ea45 0e06 	orr.w	lr, r5, r6
  42195c:	e68d      	b.n	42167a <__aeabi_dmul+0xde>
  42195e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  421962:	ea94 0f0c 	teq	r4, ip
  421966:	bf08      	it	eq
  421968:	ea95 0f0c 	teqeq	r5, ip
  42196c:	f43f af3b 	beq.w	4217e6 <__aeabi_dmul+0x24a>
  421970:	ea94 0f0c 	teq	r4, ip
  421974:	d10a      	bne.n	42198c <__aeabi_ddiv+0x19c>
  421976:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  42197a:	f47f af34 	bne.w	4217e6 <__aeabi_dmul+0x24a>
  42197e:	ea95 0f0c 	teq	r5, ip
  421982:	f47f af25 	bne.w	4217d0 <__aeabi_dmul+0x234>
  421986:	4610      	mov	r0, r2
  421988:	4619      	mov	r1, r3
  42198a:	e72c      	b.n	4217e6 <__aeabi_dmul+0x24a>
  42198c:	ea95 0f0c 	teq	r5, ip
  421990:	d106      	bne.n	4219a0 <__aeabi_ddiv+0x1b0>
  421992:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  421996:	f43f aefd 	beq.w	421794 <__aeabi_dmul+0x1f8>
  42199a:	4610      	mov	r0, r2
  42199c:	4619      	mov	r1, r3
  42199e:	e722      	b.n	4217e6 <__aeabi_dmul+0x24a>
  4219a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4219a4:	bf18      	it	ne
  4219a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4219aa:	f47f aec5 	bne.w	421738 <__aeabi_dmul+0x19c>
  4219ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  4219b2:	f47f af0d 	bne.w	4217d0 <__aeabi_dmul+0x234>
  4219b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  4219ba:	f47f aeeb 	bne.w	421794 <__aeabi_dmul+0x1f8>
  4219be:	e712      	b.n	4217e6 <__aeabi_dmul+0x24a>

004219c0 <__aeabi_d2uiz>:
  4219c0:	004a      	lsls	r2, r1, #1
  4219c2:	d211      	bcs.n	4219e8 <__aeabi_d2uiz+0x28>
  4219c4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4219c8:	d211      	bcs.n	4219ee <__aeabi_d2uiz+0x2e>
  4219ca:	d50d      	bpl.n	4219e8 <__aeabi_d2uiz+0x28>
  4219cc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4219d0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4219d4:	d40e      	bmi.n	4219f4 <__aeabi_d2uiz+0x34>
  4219d6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4219da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4219de:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4219e2:	fa23 f002 	lsr.w	r0, r3, r2
  4219e6:	4770      	bx	lr
  4219e8:	f04f 0000 	mov.w	r0, #0
  4219ec:	4770      	bx	lr
  4219ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  4219f2:	d102      	bne.n	4219fa <__aeabi_d2uiz+0x3a>
  4219f4:	f04f 30ff 	mov.w	r0, #4294967295
  4219f8:	4770      	bx	lr
  4219fa:	f04f 0000 	mov.w	r0, #0
  4219fe:	4770      	bx	lr

00421a00 <__aeabi_d2f>:
  421a00:	ea4f 0241 	mov.w	r2, r1, lsl #1
  421a04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
  421a08:	bf24      	itt	cs
  421a0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
  421a0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
  421a12:	d90d      	bls.n	421a30 <__aeabi_d2f+0x30>
  421a14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
  421a18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
  421a1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
  421a20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
  421a24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
  421a28:	bf08      	it	eq
  421a2a:	f020 0001 	biceq.w	r0, r0, #1
  421a2e:	4770      	bx	lr
  421a30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
  421a34:	d121      	bne.n	421a7a <__aeabi_d2f+0x7a>
  421a36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
  421a3a:	bfbc      	itt	lt
  421a3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
  421a40:	4770      	bxlt	lr
  421a42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  421a46:	ea4f 5252 	mov.w	r2, r2, lsr #21
  421a4a:	f1c2 0218 	rsb	r2, r2, #24
  421a4e:	f1c2 0c20 	rsb	ip, r2, #32
  421a52:	fa10 f30c 	lsls.w	r3, r0, ip
  421a56:	fa20 f002 	lsr.w	r0, r0, r2
  421a5a:	bf18      	it	ne
  421a5c:	f040 0001 	orrne.w	r0, r0, #1
  421a60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  421a64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
  421a68:	fa03 fc0c 	lsl.w	ip, r3, ip
  421a6c:	ea40 000c 	orr.w	r0, r0, ip
  421a70:	fa23 f302 	lsr.w	r3, r3, r2
  421a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
  421a78:	e7cc      	b.n	421a14 <__aeabi_d2f+0x14>
  421a7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
  421a7e:	d107      	bne.n	421a90 <__aeabi_d2f+0x90>
  421a80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
  421a84:	bf1e      	ittt	ne
  421a86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
  421a8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
  421a8e:	4770      	bxne	lr
  421a90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  421a94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
  421a98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
  421a9c:	4770      	bx	lr
  421a9e:	bf00      	nop

00421aa0 <__aeabi_uldivmod>:
  421aa0:	b953      	cbnz	r3, 421ab8 <__aeabi_uldivmod+0x18>
  421aa2:	b94a      	cbnz	r2, 421ab8 <__aeabi_uldivmod+0x18>
  421aa4:	2900      	cmp	r1, #0
  421aa6:	bf08      	it	eq
  421aa8:	2800      	cmpeq	r0, #0
  421aaa:	bf1c      	itt	ne
  421aac:	f04f 31ff 	movne.w	r1, #4294967295
  421ab0:	f04f 30ff 	movne.w	r0, #4294967295
  421ab4:	f000 b97a 	b.w	421dac <__aeabi_idiv0>
  421ab8:	f1ad 0c08 	sub.w	ip, sp, #8
  421abc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  421ac0:	f000 f806 	bl	421ad0 <__udivmoddi4>
  421ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
  421ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  421acc:	b004      	add	sp, #16
  421ace:	4770      	bx	lr

00421ad0 <__udivmoddi4>:
  421ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  421ad4:	468c      	mov	ip, r1
  421ad6:	460d      	mov	r5, r1
  421ad8:	4604      	mov	r4, r0
  421ada:	9e08      	ldr	r6, [sp, #32]
  421adc:	2b00      	cmp	r3, #0
  421ade:	d151      	bne.n	421b84 <__udivmoddi4+0xb4>
  421ae0:	428a      	cmp	r2, r1
  421ae2:	4617      	mov	r7, r2
  421ae4:	d96d      	bls.n	421bc2 <__udivmoddi4+0xf2>
  421ae6:	fab2 fe82 	clz	lr, r2
  421aea:	f1be 0f00 	cmp.w	lr, #0
  421aee:	d00b      	beq.n	421b08 <__udivmoddi4+0x38>
  421af0:	f1ce 0c20 	rsb	ip, lr, #32
  421af4:	fa01 f50e 	lsl.w	r5, r1, lr
  421af8:	fa20 fc0c 	lsr.w	ip, r0, ip
  421afc:	fa02 f70e 	lsl.w	r7, r2, lr
  421b00:	ea4c 0c05 	orr.w	ip, ip, r5
  421b04:	fa00 f40e 	lsl.w	r4, r0, lr
  421b08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  421b0c:	0c25      	lsrs	r5, r4, #16
  421b0e:	fbbc f8fa 	udiv	r8, ip, sl
  421b12:	fa1f f987 	uxth.w	r9, r7
  421b16:	fb0a cc18 	mls	ip, sl, r8, ip
  421b1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  421b1e:	fb08 f309 	mul.w	r3, r8, r9
  421b22:	42ab      	cmp	r3, r5
  421b24:	d90a      	bls.n	421b3c <__udivmoddi4+0x6c>
  421b26:	19ed      	adds	r5, r5, r7
  421b28:	f108 32ff 	add.w	r2, r8, #4294967295
  421b2c:	f080 8123 	bcs.w	421d76 <__udivmoddi4+0x2a6>
  421b30:	42ab      	cmp	r3, r5
  421b32:	f240 8120 	bls.w	421d76 <__udivmoddi4+0x2a6>
  421b36:	f1a8 0802 	sub.w	r8, r8, #2
  421b3a:	443d      	add	r5, r7
  421b3c:	1aed      	subs	r5, r5, r3
  421b3e:	b2a4      	uxth	r4, r4
  421b40:	fbb5 f0fa 	udiv	r0, r5, sl
  421b44:	fb0a 5510 	mls	r5, sl, r0, r5
  421b48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  421b4c:	fb00 f909 	mul.w	r9, r0, r9
  421b50:	45a1      	cmp	r9, r4
  421b52:	d909      	bls.n	421b68 <__udivmoddi4+0x98>
  421b54:	19e4      	adds	r4, r4, r7
  421b56:	f100 33ff 	add.w	r3, r0, #4294967295
  421b5a:	f080 810a 	bcs.w	421d72 <__udivmoddi4+0x2a2>
  421b5e:	45a1      	cmp	r9, r4
  421b60:	f240 8107 	bls.w	421d72 <__udivmoddi4+0x2a2>
  421b64:	3802      	subs	r0, #2
  421b66:	443c      	add	r4, r7
  421b68:	eba4 0409 	sub.w	r4, r4, r9
  421b6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  421b70:	2100      	movs	r1, #0
  421b72:	2e00      	cmp	r6, #0
  421b74:	d061      	beq.n	421c3a <__udivmoddi4+0x16a>
  421b76:	fa24 f40e 	lsr.w	r4, r4, lr
  421b7a:	2300      	movs	r3, #0
  421b7c:	6034      	str	r4, [r6, #0]
  421b7e:	6073      	str	r3, [r6, #4]
  421b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421b84:	428b      	cmp	r3, r1
  421b86:	d907      	bls.n	421b98 <__udivmoddi4+0xc8>
  421b88:	2e00      	cmp	r6, #0
  421b8a:	d054      	beq.n	421c36 <__udivmoddi4+0x166>
  421b8c:	2100      	movs	r1, #0
  421b8e:	e886 0021 	stmia.w	r6, {r0, r5}
  421b92:	4608      	mov	r0, r1
  421b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421b98:	fab3 f183 	clz	r1, r3
  421b9c:	2900      	cmp	r1, #0
  421b9e:	f040 808e 	bne.w	421cbe <__udivmoddi4+0x1ee>
  421ba2:	42ab      	cmp	r3, r5
  421ba4:	d302      	bcc.n	421bac <__udivmoddi4+0xdc>
  421ba6:	4282      	cmp	r2, r0
  421ba8:	f200 80fa 	bhi.w	421da0 <__udivmoddi4+0x2d0>
  421bac:	1a84      	subs	r4, r0, r2
  421bae:	eb65 0503 	sbc.w	r5, r5, r3
  421bb2:	2001      	movs	r0, #1
  421bb4:	46ac      	mov	ip, r5
  421bb6:	2e00      	cmp	r6, #0
  421bb8:	d03f      	beq.n	421c3a <__udivmoddi4+0x16a>
  421bba:	e886 1010 	stmia.w	r6, {r4, ip}
  421bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421bc2:	b912      	cbnz	r2, 421bca <__udivmoddi4+0xfa>
  421bc4:	2701      	movs	r7, #1
  421bc6:	fbb7 f7f2 	udiv	r7, r7, r2
  421bca:	fab7 fe87 	clz	lr, r7
  421bce:	f1be 0f00 	cmp.w	lr, #0
  421bd2:	d134      	bne.n	421c3e <__udivmoddi4+0x16e>
  421bd4:	1beb      	subs	r3, r5, r7
  421bd6:	0c3a      	lsrs	r2, r7, #16
  421bd8:	fa1f fc87 	uxth.w	ip, r7
  421bdc:	2101      	movs	r1, #1
  421bde:	fbb3 f8f2 	udiv	r8, r3, r2
  421be2:	0c25      	lsrs	r5, r4, #16
  421be4:	fb02 3318 	mls	r3, r2, r8, r3
  421be8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  421bec:	fb0c f308 	mul.w	r3, ip, r8
  421bf0:	42ab      	cmp	r3, r5
  421bf2:	d907      	bls.n	421c04 <__udivmoddi4+0x134>
  421bf4:	19ed      	adds	r5, r5, r7
  421bf6:	f108 30ff 	add.w	r0, r8, #4294967295
  421bfa:	d202      	bcs.n	421c02 <__udivmoddi4+0x132>
  421bfc:	42ab      	cmp	r3, r5
  421bfe:	f200 80d1 	bhi.w	421da4 <__udivmoddi4+0x2d4>
  421c02:	4680      	mov	r8, r0
  421c04:	1aed      	subs	r5, r5, r3
  421c06:	b2a3      	uxth	r3, r4
  421c08:	fbb5 f0f2 	udiv	r0, r5, r2
  421c0c:	fb02 5510 	mls	r5, r2, r0, r5
  421c10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  421c14:	fb0c fc00 	mul.w	ip, ip, r0
  421c18:	45a4      	cmp	ip, r4
  421c1a:	d907      	bls.n	421c2c <__udivmoddi4+0x15c>
  421c1c:	19e4      	adds	r4, r4, r7
  421c1e:	f100 33ff 	add.w	r3, r0, #4294967295
  421c22:	d202      	bcs.n	421c2a <__udivmoddi4+0x15a>
  421c24:	45a4      	cmp	ip, r4
  421c26:	f200 80b8 	bhi.w	421d9a <__udivmoddi4+0x2ca>
  421c2a:	4618      	mov	r0, r3
  421c2c:	eba4 040c 	sub.w	r4, r4, ip
  421c30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  421c34:	e79d      	b.n	421b72 <__udivmoddi4+0xa2>
  421c36:	4631      	mov	r1, r6
  421c38:	4630      	mov	r0, r6
  421c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421c3e:	f1ce 0420 	rsb	r4, lr, #32
  421c42:	fa05 f30e 	lsl.w	r3, r5, lr
  421c46:	fa07 f70e 	lsl.w	r7, r7, lr
  421c4a:	fa20 f804 	lsr.w	r8, r0, r4
  421c4e:	0c3a      	lsrs	r2, r7, #16
  421c50:	fa25 f404 	lsr.w	r4, r5, r4
  421c54:	ea48 0803 	orr.w	r8, r8, r3
  421c58:	fbb4 f1f2 	udiv	r1, r4, r2
  421c5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
  421c60:	fb02 4411 	mls	r4, r2, r1, r4
  421c64:	fa1f fc87 	uxth.w	ip, r7
  421c68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  421c6c:	fb01 f30c 	mul.w	r3, r1, ip
  421c70:	42ab      	cmp	r3, r5
  421c72:	fa00 f40e 	lsl.w	r4, r0, lr
  421c76:	d909      	bls.n	421c8c <__udivmoddi4+0x1bc>
  421c78:	19ed      	adds	r5, r5, r7
  421c7a:	f101 30ff 	add.w	r0, r1, #4294967295
  421c7e:	f080 808a 	bcs.w	421d96 <__udivmoddi4+0x2c6>
  421c82:	42ab      	cmp	r3, r5
  421c84:	f240 8087 	bls.w	421d96 <__udivmoddi4+0x2c6>
  421c88:	3902      	subs	r1, #2
  421c8a:	443d      	add	r5, r7
  421c8c:	1aeb      	subs	r3, r5, r3
  421c8e:	fa1f f588 	uxth.w	r5, r8
  421c92:	fbb3 f0f2 	udiv	r0, r3, r2
  421c96:	fb02 3310 	mls	r3, r2, r0, r3
  421c9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  421c9e:	fb00 f30c 	mul.w	r3, r0, ip
  421ca2:	42ab      	cmp	r3, r5
  421ca4:	d907      	bls.n	421cb6 <__udivmoddi4+0x1e6>
  421ca6:	19ed      	adds	r5, r5, r7
  421ca8:	f100 38ff 	add.w	r8, r0, #4294967295
  421cac:	d26f      	bcs.n	421d8e <__udivmoddi4+0x2be>
  421cae:	42ab      	cmp	r3, r5
  421cb0:	d96d      	bls.n	421d8e <__udivmoddi4+0x2be>
  421cb2:	3802      	subs	r0, #2
  421cb4:	443d      	add	r5, r7
  421cb6:	1aeb      	subs	r3, r5, r3
  421cb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  421cbc:	e78f      	b.n	421bde <__udivmoddi4+0x10e>
  421cbe:	f1c1 0720 	rsb	r7, r1, #32
  421cc2:	fa22 f807 	lsr.w	r8, r2, r7
  421cc6:	408b      	lsls	r3, r1
  421cc8:	fa05 f401 	lsl.w	r4, r5, r1
  421ccc:	ea48 0303 	orr.w	r3, r8, r3
  421cd0:	fa20 fe07 	lsr.w	lr, r0, r7
  421cd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  421cd8:	40fd      	lsrs	r5, r7
  421cda:	ea4e 0e04 	orr.w	lr, lr, r4
  421cde:	fbb5 f9fc 	udiv	r9, r5, ip
  421ce2:	ea4f 441e 	mov.w	r4, lr, lsr #16
  421ce6:	fb0c 5519 	mls	r5, ip, r9, r5
  421cea:	fa1f f883 	uxth.w	r8, r3
  421cee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  421cf2:	fb09 f408 	mul.w	r4, r9, r8
  421cf6:	42ac      	cmp	r4, r5
  421cf8:	fa02 f201 	lsl.w	r2, r2, r1
  421cfc:	fa00 fa01 	lsl.w	sl, r0, r1
  421d00:	d908      	bls.n	421d14 <__udivmoddi4+0x244>
  421d02:	18ed      	adds	r5, r5, r3
  421d04:	f109 30ff 	add.w	r0, r9, #4294967295
  421d08:	d243      	bcs.n	421d92 <__udivmoddi4+0x2c2>
  421d0a:	42ac      	cmp	r4, r5
  421d0c:	d941      	bls.n	421d92 <__udivmoddi4+0x2c2>
  421d0e:	f1a9 0902 	sub.w	r9, r9, #2
  421d12:	441d      	add	r5, r3
  421d14:	1b2d      	subs	r5, r5, r4
  421d16:	fa1f fe8e 	uxth.w	lr, lr
  421d1a:	fbb5 f0fc 	udiv	r0, r5, ip
  421d1e:	fb0c 5510 	mls	r5, ip, r0, r5
  421d22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  421d26:	fb00 f808 	mul.w	r8, r0, r8
  421d2a:	45a0      	cmp	r8, r4
  421d2c:	d907      	bls.n	421d3e <__udivmoddi4+0x26e>
  421d2e:	18e4      	adds	r4, r4, r3
  421d30:	f100 35ff 	add.w	r5, r0, #4294967295
  421d34:	d229      	bcs.n	421d8a <__udivmoddi4+0x2ba>
  421d36:	45a0      	cmp	r8, r4
  421d38:	d927      	bls.n	421d8a <__udivmoddi4+0x2ba>
  421d3a:	3802      	subs	r0, #2
  421d3c:	441c      	add	r4, r3
  421d3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  421d42:	eba4 0408 	sub.w	r4, r4, r8
  421d46:	fba0 8902 	umull	r8, r9, r0, r2
  421d4a:	454c      	cmp	r4, r9
  421d4c:	46c6      	mov	lr, r8
  421d4e:	464d      	mov	r5, r9
  421d50:	d315      	bcc.n	421d7e <__udivmoddi4+0x2ae>
  421d52:	d012      	beq.n	421d7a <__udivmoddi4+0x2aa>
  421d54:	b156      	cbz	r6, 421d6c <__udivmoddi4+0x29c>
  421d56:	ebba 030e 	subs.w	r3, sl, lr
  421d5a:	eb64 0405 	sbc.w	r4, r4, r5
  421d5e:	fa04 f707 	lsl.w	r7, r4, r7
  421d62:	40cb      	lsrs	r3, r1
  421d64:	431f      	orrs	r7, r3
  421d66:	40cc      	lsrs	r4, r1
  421d68:	6037      	str	r7, [r6, #0]
  421d6a:	6074      	str	r4, [r6, #4]
  421d6c:	2100      	movs	r1, #0
  421d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  421d72:	4618      	mov	r0, r3
  421d74:	e6f8      	b.n	421b68 <__udivmoddi4+0x98>
  421d76:	4690      	mov	r8, r2
  421d78:	e6e0      	b.n	421b3c <__udivmoddi4+0x6c>
  421d7a:	45c2      	cmp	sl, r8
  421d7c:	d2ea      	bcs.n	421d54 <__udivmoddi4+0x284>
  421d7e:	ebb8 0e02 	subs.w	lr, r8, r2
  421d82:	eb69 0503 	sbc.w	r5, r9, r3
  421d86:	3801      	subs	r0, #1
  421d88:	e7e4      	b.n	421d54 <__udivmoddi4+0x284>
  421d8a:	4628      	mov	r0, r5
  421d8c:	e7d7      	b.n	421d3e <__udivmoddi4+0x26e>
  421d8e:	4640      	mov	r0, r8
  421d90:	e791      	b.n	421cb6 <__udivmoddi4+0x1e6>
  421d92:	4681      	mov	r9, r0
  421d94:	e7be      	b.n	421d14 <__udivmoddi4+0x244>
  421d96:	4601      	mov	r1, r0
  421d98:	e778      	b.n	421c8c <__udivmoddi4+0x1bc>
  421d9a:	3802      	subs	r0, #2
  421d9c:	443c      	add	r4, r7
  421d9e:	e745      	b.n	421c2c <__udivmoddi4+0x15c>
  421da0:	4608      	mov	r0, r1
  421da2:	e708      	b.n	421bb6 <__udivmoddi4+0xe6>
  421da4:	f1a8 0802 	sub.w	r8, r8, #2
  421da8:	443d      	add	r5, r7
  421daa:	e72b      	b.n	421c04 <__udivmoddi4+0x134>

00421dac <__aeabi_idiv0>:
  421dac:	4770      	bx	lr
  421dae:	bf00      	nop

00421db0 <__libc_init_array>:
  421db0:	b570      	push	{r4, r5, r6, lr}
  421db2:	4e0f      	ldr	r6, [pc, #60]	; (421df0 <__libc_init_array+0x40>)
  421db4:	4d0f      	ldr	r5, [pc, #60]	; (421df4 <__libc_init_array+0x44>)
  421db6:	1b76      	subs	r6, r6, r5
  421db8:	10b6      	asrs	r6, r6, #2
  421dba:	bf18      	it	ne
  421dbc:	2400      	movne	r4, #0
  421dbe:	d005      	beq.n	421dcc <__libc_init_array+0x1c>
  421dc0:	3401      	adds	r4, #1
  421dc2:	f855 3b04 	ldr.w	r3, [r5], #4
  421dc6:	4798      	blx	r3
  421dc8:	42a6      	cmp	r6, r4
  421dca:	d1f9      	bne.n	421dc0 <__libc_init_array+0x10>
  421dcc:	4e0a      	ldr	r6, [pc, #40]	; (421df8 <__libc_init_array+0x48>)
  421dce:	4d0b      	ldr	r5, [pc, #44]	; (421dfc <__libc_init_array+0x4c>)
  421dd0:	1b76      	subs	r6, r6, r5
  421dd2:	f009 fda5 	bl	42b920 <_init>
  421dd6:	10b6      	asrs	r6, r6, #2
  421dd8:	bf18      	it	ne
  421dda:	2400      	movne	r4, #0
  421ddc:	d006      	beq.n	421dec <__libc_init_array+0x3c>
  421dde:	3401      	adds	r4, #1
  421de0:	f855 3b04 	ldr.w	r3, [r5], #4
  421de4:	4798      	blx	r3
  421de6:	42a6      	cmp	r6, r4
  421de8:	d1f9      	bne.n	421dde <__libc_init_array+0x2e>
  421dea:	bd70      	pop	{r4, r5, r6, pc}
  421dec:	bd70      	pop	{r4, r5, r6, pc}
  421dee:	bf00      	nop
  421df0:	0042b92c 	.word	0x0042b92c
  421df4:	0042b92c 	.word	0x0042b92c
  421df8:	0042b934 	.word	0x0042b934
  421dfc:	0042b92c 	.word	0x0042b92c

00421e00 <iprintf>:
  421e00:	b40f      	push	{r0, r1, r2, r3}
  421e02:	b500      	push	{lr}
  421e04:	4907      	ldr	r1, [pc, #28]	; (421e24 <iprintf+0x24>)
  421e06:	b083      	sub	sp, #12
  421e08:	ab04      	add	r3, sp, #16
  421e0a:	6808      	ldr	r0, [r1, #0]
  421e0c:	f853 2b04 	ldr.w	r2, [r3], #4
  421e10:	6881      	ldr	r1, [r0, #8]
  421e12:	9301      	str	r3, [sp, #4]
  421e14:	f000 ff82 	bl	422d1c <_vfiprintf_r>
  421e18:	b003      	add	sp, #12
  421e1a:	f85d eb04 	ldr.w	lr, [sp], #4
  421e1e:	b004      	add	sp, #16
  421e20:	4770      	bx	lr
  421e22:	bf00      	nop
  421e24:	20400070 	.word	0x20400070

00421e28 <malloc>:
  421e28:	4b02      	ldr	r3, [pc, #8]	; (421e34 <malloc+0xc>)
  421e2a:	4601      	mov	r1, r0
  421e2c:	6818      	ldr	r0, [r3, #0]
  421e2e:	f000 b803 	b.w	421e38 <_malloc_r>
  421e32:	bf00      	nop
  421e34:	20400070 	.word	0x20400070

00421e38 <_malloc_r>:
  421e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  421e3c:	f101 060b 	add.w	r6, r1, #11
  421e40:	2e16      	cmp	r6, #22
  421e42:	b083      	sub	sp, #12
  421e44:	4605      	mov	r5, r0
  421e46:	f240 809e 	bls.w	421f86 <_malloc_r+0x14e>
  421e4a:	f036 0607 	bics.w	r6, r6, #7
  421e4e:	f100 80bd 	bmi.w	421fcc <_malloc_r+0x194>
  421e52:	42b1      	cmp	r1, r6
  421e54:	f200 80ba 	bhi.w	421fcc <_malloc_r+0x194>
  421e58:	f000 fbb6 	bl	4225c8 <__malloc_lock>
  421e5c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  421e60:	f0c0 8293 	bcc.w	42238a <_malloc_r+0x552>
  421e64:	0a73      	lsrs	r3, r6, #9
  421e66:	f000 80b8 	beq.w	421fda <_malloc_r+0x1a2>
  421e6a:	2b04      	cmp	r3, #4
  421e6c:	f200 8179 	bhi.w	422162 <_malloc_r+0x32a>
  421e70:	09b3      	lsrs	r3, r6, #6
  421e72:	f103 0039 	add.w	r0, r3, #57	; 0x39
  421e76:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  421e7a:	00c3      	lsls	r3, r0, #3
  421e7c:	4fbf      	ldr	r7, [pc, #764]	; (42217c <_malloc_r+0x344>)
  421e7e:	443b      	add	r3, r7
  421e80:	f1a3 0108 	sub.w	r1, r3, #8
  421e84:	685c      	ldr	r4, [r3, #4]
  421e86:	42a1      	cmp	r1, r4
  421e88:	d106      	bne.n	421e98 <_malloc_r+0x60>
  421e8a:	e00c      	b.n	421ea6 <_malloc_r+0x6e>
  421e8c:	2a00      	cmp	r2, #0
  421e8e:	f280 80aa 	bge.w	421fe6 <_malloc_r+0x1ae>
  421e92:	68e4      	ldr	r4, [r4, #12]
  421e94:	42a1      	cmp	r1, r4
  421e96:	d006      	beq.n	421ea6 <_malloc_r+0x6e>
  421e98:	6863      	ldr	r3, [r4, #4]
  421e9a:	f023 0303 	bic.w	r3, r3, #3
  421e9e:	1b9a      	subs	r2, r3, r6
  421ea0:	2a0f      	cmp	r2, #15
  421ea2:	ddf3      	ble.n	421e8c <_malloc_r+0x54>
  421ea4:	4670      	mov	r0, lr
  421ea6:	693c      	ldr	r4, [r7, #16]
  421ea8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 422190 <_malloc_r+0x358>
  421eac:	4574      	cmp	r4, lr
  421eae:	f000 81ab 	beq.w	422208 <_malloc_r+0x3d0>
  421eb2:	6863      	ldr	r3, [r4, #4]
  421eb4:	f023 0303 	bic.w	r3, r3, #3
  421eb8:	1b9a      	subs	r2, r3, r6
  421eba:	2a0f      	cmp	r2, #15
  421ebc:	f300 8190 	bgt.w	4221e0 <_malloc_r+0x3a8>
  421ec0:	2a00      	cmp	r2, #0
  421ec2:	f8c7 e014 	str.w	lr, [r7, #20]
  421ec6:	f8c7 e010 	str.w	lr, [r7, #16]
  421eca:	f280 809d 	bge.w	422008 <_malloc_r+0x1d0>
  421ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  421ed2:	f080 8161 	bcs.w	422198 <_malloc_r+0x360>
  421ed6:	08db      	lsrs	r3, r3, #3
  421ed8:	f103 0c01 	add.w	ip, r3, #1
  421edc:	1099      	asrs	r1, r3, #2
  421ede:	687a      	ldr	r2, [r7, #4]
  421ee0:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  421ee4:	f8c4 8008 	str.w	r8, [r4, #8]
  421ee8:	2301      	movs	r3, #1
  421eea:	408b      	lsls	r3, r1
  421eec:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  421ef0:	4313      	orrs	r3, r2
  421ef2:	3908      	subs	r1, #8
  421ef4:	60e1      	str	r1, [r4, #12]
  421ef6:	607b      	str	r3, [r7, #4]
  421ef8:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  421efc:	f8c8 400c 	str.w	r4, [r8, #12]
  421f00:	1082      	asrs	r2, r0, #2
  421f02:	2401      	movs	r4, #1
  421f04:	4094      	lsls	r4, r2
  421f06:	429c      	cmp	r4, r3
  421f08:	f200 808b 	bhi.w	422022 <_malloc_r+0x1ea>
  421f0c:	421c      	tst	r4, r3
  421f0e:	d106      	bne.n	421f1e <_malloc_r+0xe6>
  421f10:	f020 0003 	bic.w	r0, r0, #3
  421f14:	0064      	lsls	r4, r4, #1
  421f16:	421c      	tst	r4, r3
  421f18:	f100 0004 	add.w	r0, r0, #4
  421f1c:	d0fa      	beq.n	421f14 <_malloc_r+0xdc>
  421f1e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  421f22:	46cc      	mov	ip, r9
  421f24:	4680      	mov	r8, r0
  421f26:	f8dc 300c 	ldr.w	r3, [ip, #12]
  421f2a:	459c      	cmp	ip, r3
  421f2c:	d107      	bne.n	421f3e <_malloc_r+0x106>
  421f2e:	e16d      	b.n	42220c <_malloc_r+0x3d4>
  421f30:	2a00      	cmp	r2, #0
  421f32:	f280 817b 	bge.w	42222c <_malloc_r+0x3f4>
  421f36:	68db      	ldr	r3, [r3, #12]
  421f38:	459c      	cmp	ip, r3
  421f3a:	f000 8167 	beq.w	42220c <_malloc_r+0x3d4>
  421f3e:	6859      	ldr	r1, [r3, #4]
  421f40:	f021 0103 	bic.w	r1, r1, #3
  421f44:	1b8a      	subs	r2, r1, r6
  421f46:	2a0f      	cmp	r2, #15
  421f48:	ddf2      	ble.n	421f30 <_malloc_r+0xf8>
  421f4a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  421f4e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  421f52:	9300      	str	r3, [sp, #0]
  421f54:	199c      	adds	r4, r3, r6
  421f56:	4628      	mov	r0, r5
  421f58:	f046 0601 	orr.w	r6, r6, #1
  421f5c:	f042 0501 	orr.w	r5, r2, #1
  421f60:	605e      	str	r6, [r3, #4]
  421f62:	f8c8 c00c 	str.w	ip, [r8, #12]
  421f66:	f8cc 8008 	str.w	r8, [ip, #8]
  421f6a:	617c      	str	r4, [r7, #20]
  421f6c:	613c      	str	r4, [r7, #16]
  421f6e:	f8c4 e00c 	str.w	lr, [r4, #12]
  421f72:	f8c4 e008 	str.w	lr, [r4, #8]
  421f76:	6065      	str	r5, [r4, #4]
  421f78:	505a      	str	r2, [r3, r1]
  421f7a:	f000 fb2b 	bl	4225d4 <__malloc_unlock>
  421f7e:	9b00      	ldr	r3, [sp, #0]
  421f80:	f103 0408 	add.w	r4, r3, #8
  421f84:	e01e      	b.n	421fc4 <_malloc_r+0x18c>
  421f86:	2910      	cmp	r1, #16
  421f88:	d820      	bhi.n	421fcc <_malloc_r+0x194>
  421f8a:	f000 fb1d 	bl	4225c8 <__malloc_lock>
  421f8e:	2610      	movs	r6, #16
  421f90:	2318      	movs	r3, #24
  421f92:	2002      	movs	r0, #2
  421f94:	4f79      	ldr	r7, [pc, #484]	; (42217c <_malloc_r+0x344>)
  421f96:	443b      	add	r3, r7
  421f98:	f1a3 0208 	sub.w	r2, r3, #8
  421f9c:	685c      	ldr	r4, [r3, #4]
  421f9e:	4294      	cmp	r4, r2
  421fa0:	f000 813d 	beq.w	42221e <_malloc_r+0x3e6>
  421fa4:	6863      	ldr	r3, [r4, #4]
  421fa6:	68e1      	ldr	r1, [r4, #12]
  421fa8:	68a6      	ldr	r6, [r4, #8]
  421faa:	f023 0303 	bic.w	r3, r3, #3
  421fae:	4423      	add	r3, r4
  421fb0:	4628      	mov	r0, r5
  421fb2:	685a      	ldr	r2, [r3, #4]
  421fb4:	60f1      	str	r1, [r6, #12]
  421fb6:	f042 0201 	orr.w	r2, r2, #1
  421fba:	608e      	str	r6, [r1, #8]
  421fbc:	605a      	str	r2, [r3, #4]
  421fbe:	f000 fb09 	bl	4225d4 <__malloc_unlock>
  421fc2:	3408      	adds	r4, #8
  421fc4:	4620      	mov	r0, r4
  421fc6:	b003      	add	sp, #12
  421fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421fcc:	2400      	movs	r4, #0
  421fce:	230c      	movs	r3, #12
  421fd0:	4620      	mov	r0, r4
  421fd2:	602b      	str	r3, [r5, #0]
  421fd4:	b003      	add	sp, #12
  421fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  421fda:	2040      	movs	r0, #64	; 0x40
  421fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
  421fe0:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  421fe4:	e74a      	b.n	421e7c <_malloc_r+0x44>
  421fe6:	4423      	add	r3, r4
  421fe8:	68e1      	ldr	r1, [r4, #12]
  421fea:	685a      	ldr	r2, [r3, #4]
  421fec:	68a6      	ldr	r6, [r4, #8]
  421fee:	f042 0201 	orr.w	r2, r2, #1
  421ff2:	60f1      	str	r1, [r6, #12]
  421ff4:	4628      	mov	r0, r5
  421ff6:	608e      	str	r6, [r1, #8]
  421ff8:	605a      	str	r2, [r3, #4]
  421ffa:	f000 faeb 	bl	4225d4 <__malloc_unlock>
  421ffe:	3408      	adds	r4, #8
  422000:	4620      	mov	r0, r4
  422002:	b003      	add	sp, #12
  422004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422008:	4423      	add	r3, r4
  42200a:	4628      	mov	r0, r5
  42200c:	685a      	ldr	r2, [r3, #4]
  42200e:	f042 0201 	orr.w	r2, r2, #1
  422012:	605a      	str	r2, [r3, #4]
  422014:	f000 fade 	bl	4225d4 <__malloc_unlock>
  422018:	3408      	adds	r4, #8
  42201a:	4620      	mov	r0, r4
  42201c:	b003      	add	sp, #12
  42201e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422022:	68bc      	ldr	r4, [r7, #8]
  422024:	6863      	ldr	r3, [r4, #4]
  422026:	f023 0803 	bic.w	r8, r3, #3
  42202a:	45b0      	cmp	r8, r6
  42202c:	d304      	bcc.n	422038 <_malloc_r+0x200>
  42202e:	eba8 0306 	sub.w	r3, r8, r6
  422032:	2b0f      	cmp	r3, #15
  422034:	f300 8085 	bgt.w	422142 <_malloc_r+0x30a>
  422038:	f8df 9158 	ldr.w	r9, [pc, #344]	; 422194 <_malloc_r+0x35c>
  42203c:	4b50      	ldr	r3, [pc, #320]	; (422180 <_malloc_r+0x348>)
  42203e:	f8d9 2000 	ldr.w	r2, [r9]
  422042:	681b      	ldr	r3, [r3, #0]
  422044:	3201      	adds	r2, #1
  422046:	4433      	add	r3, r6
  422048:	eb04 0a08 	add.w	sl, r4, r8
  42204c:	f000 8155 	beq.w	4222fa <_malloc_r+0x4c2>
  422050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  422054:	330f      	adds	r3, #15
  422056:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  42205a:	f02b 0b0f 	bic.w	fp, fp, #15
  42205e:	4659      	mov	r1, fp
  422060:	4628      	mov	r0, r5
  422062:	f000 fadd 	bl	422620 <_sbrk_r>
  422066:	1c41      	adds	r1, r0, #1
  422068:	4602      	mov	r2, r0
  42206a:	f000 80fc 	beq.w	422266 <_malloc_r+0x42e>
  42206e:	4582      	cmp	sl, r0
  422070:	f200 80f7 	bhi.w	422262 <_malloc_r+0x42a>
  422074:	4b43      	ldr	r3, [pc, #268]	; (422184 <_malloc_r+0x34c>)
  422076:	6819      	ldr	r1, [r3, #0]
  422078:	4459      	add	r1, fp
  42207a:	6019      	str	r1, [r3, #0]
  42207c:	f000 814d 	beq.w	42231a <_malloc_r+0x4e2>
  422080:	f8d9 0000 	ldr.w	r0, [r9]
  422084:	3001      	adds	r0, #1
  422086:	bf1b      	ittet	ne
  422088:	eba2 0a0a 	subne.w	sl, r2, sl
  42208c:	4451      	addne	r1, sl
  42208e:	f8c9 2000 	streq.w	r2, [r9]
  422092:	6019      	strne	r1, [r3, #0]
  422094:	f012 0107 	ands.w	r1, r2, #7
  422098:	f000 8115 	beq.w	4222c6 <_malloc_r+0x48e>
  42209c:	f1c1 0008 	rsb	r0, r1, #8
  4220a0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4220a4:	4402      	add	r2, r0
  4220a6:	3108      	adds	r1, #8
  4220a8:	eb02 090b 	add.w	r9, r2, fp
  4220ac:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4220b0:	eba1 0909 	sub.w	r9, r1, r9
  4220b4:	4649      	mov	r1, r9
  4220b6:	4628      	mov	r0, r5
  4220b8:	9301      	str	r3, [sp, #4]
  4220ba:	9200      	str	r2, [sp, #0]
  4220bc:	f000 fab0 	bl	422620 <_sbrk_r>
  4220c0:	1c43      	adds	r3, r0, #1
  4220c2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4220c6:	f000 8143 	beq.w	422350 <_malloc_r+0x518>
  4220ca:	1a80      	subs	r0, r0, r2
  4220cc:	4448      	add	r0, r9
  4220ce:	f040 0001 	orr.w	r0, r0, #1
  4220d2:	6819      	ldr	r1, [r3, #0]
  4220d4:	60ba      	str	r2, [r7, #8]
  4220d6:	4449      	add	r1, r9
  4220d8:	42bc      	cmp	r4, r7
  4220da:	6050      	str	r0, [r2, #4]
  4220dc:	6019      	str	r1, [r3, #0]
  4220de:	d017      	beq.n	422110 <_malloc_r+0x2d8>
  4220e0:	f1b8 0f0f 	cmp.w	r8, #15
  4220e4:	f240 80fb 	bls.w	4222de <_malloc_r+0x4a6>
  4220e8:	6860      	ldr	r0, [r4, #4]
  4220ea:	f1a8 020c 	sub.w	r2, r8, #12
  4220ee:	f022 0207 	bic.w	r2, r2, #7
  4220f2:	eb04 0e02 	add.w	lr, r4, r2
  4220f6:	f000 0001 	and.w	r0, r0, #1
  4220fa:	f04f 0c05 	mov.w	ip, #5
  4220fe:	4310      	orrs	r0, r2
  422100:	2a0f      	cmp	r2, #15
  422102:	6060      	str	r0, [r4, #4]
  422104:	f8ce c004 	str.w	ip, [lr, #4]
  422108:	f8ce c008 	str.w	ip, [lr, #8]
  42210c:	f200 8117 	bhi.w	42233e <_malloc_r+0x506>
  422110:	4b1d      	ldr	r3, [pc, #116]	; (422188 <_malloc_r+0x350>)
  422112:	68bc      	ldr	r4, [r7, #8]
  422114:	681a      	ldr	r2, [r3, #0]
  422116:	4291      	cmp	r1, r2
  422118:	bf88      	it	hi
  42211a:	6019      	strhi	r1, [r3, #0]
  42211c:	4b1b      	ldr	r3, [pc, #108]	; (42218c <_malloc_r+0x354>)
  42211e:	681a      	ldr	r2, [r3, #0]
  422120:	4291      	cmp	r1, r2
  422122:	6862      	ldr	r2, [r4, #4]
  422124:	bf88      	it	hi
  422126:	6019      	strhi	r1, [r3, #0]
  422128:	f022 0203 	bic.w	r2, r2, #3
  42212c:	4296      	cmp	r6, r2
  42212e:	eba2 0306 	sub.w	r3, r2, r6
  422132:	d801      	bhi.n	422138 <_malloc_r+0x300>
  422134:	2b0f      	cmp	r3, #15
  422136:	dc04      	bgt.n	422142 <_malloc_r+0x30a>
  422138:	4628      	mov	r0, r5
  42213a:	f000 fa4b 	bl	4225d4 <__malloc_unlock>
  42213e:	2400      	movs	r4, #0
  422140:	e740      	b.n	421fc4 <_malloc_r+0x18c>
  422142:	19a2      	adds	r2, r4, r6
  422144:	f043 0301 	orr.w	r3, r3, #1
  422148:	f046 0601 	orr.w	r6, r6, #1
  42214c:	6066      	str	r6, [r4, #4]
  42214e:	4628      	mov	r0, r5
  422150:	60ba      	str	r2, [r7, #8]
  422152:	6053      	str	r3, [r2, #4]
  422154:	f000 fa3e 	bl	4225d4 <__malloc_unlock>
  422158:	3408      	adds	r4, #8
  42215a:	4620      	mov	r0, r4
  42215c:	b003      	add	sp, #12
  42215e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422162:	2b14      	cmp	r3, #20
  422164:	d971      	bls.n	42224a <_malloc_r+0x412>
  422166:	2b54      	cmp	r3, #84	; 0x54
  422168:	f200 80a3 	bhi.w	4222b2 <_malloc_r+0x47a>
  42216c:	0b33      	lsrs	r3, r6, #12
  42216e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  422172:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  422176:	00c3      	lsls	r3, r0, #3
  422178:	e680      	b.n	421e7c <_malloc_r+0x44>
  42217a:	bf00      	nop
  42217c:	204004a0 	.word	0x204004a0
  422180:	2043a0d0 	.word	0x2043a0d0
  422184:	2043a0a0 	.word	0x2043a0a0
  422188:	2043a0c8 	.word	0x2043a0c8
  42218c:	2043a0cc 	.word	0x2043a0cc
  422190:	204004a8 	.word	0x204004a8
  422194:	204008a8 	.word	0x204008a8
  422198:	0a5a      	lsrs	r2, r3, #9
  42219a:	2a04      	cmp	r2, #4
  42219c:	d95b      	bls.n	422256 <_malloc_r+0x41e>
  42219e:	2a14      	cmp	r2, #20
  4221a0:	f200 80ae 	bhi.w	422300 <_malloc_r+0x4c8>
  4221a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4221a8:	00c9      	lsls	r1, r1, #3
  4221aa:	325b      	adds	r2, #91	; 0x5b
  4221ac:	eb07 0c01 	add.w	ip, r7, r1
  4221b0:	5879      	ldr	r1, [r7, r1]
  4221b2:	f1ac 0c08 	sub.w	ip, ip, #8
  4221b6:	458c      	cmp	ip, r1
  4221b8:	f000 8088 	beq.w	4222cc <_malloc_r+0x494>
  4221bc:	684a      	ldr	r2, [r1, #4]
  4221be:	f022 0203 	bic.w	r2, r2, #3
  4221c2:	4293      	cmp	r3, r2
  4221c4:	d273      	bcs.n	4222ae <_malloc_r+0x476>
  4221c6:	6889      	ldr	r1, [r1, #8]
  4221c8:	458c      	cmp	ip, r1
  4221ca:	d1f7      	bne.n	4221bc <_malloc_r+0x384>
  4221cc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4221d0:	687b      	ldr	r3, [r7, #4]
  4221d2:	60e2      	str	r2, [r4, #12]
  4221d4:	f8c4 c008 	str.w	ip, [r4, #8]
  4221d8:	6094      	str	r4, [r2, #8]
  4221da:	f8cc 400c 	str.w	r4, [ip, #12]
  4221de:	e68f      	b.n	421f00 <_malloc_r+0xc8>
  4221e0:	19a1      	adds	r1, r4, r6
  4221e2:	f046 0c01 	orr.w	ip, r6, #1
  4221e6:	f042 0601 	orr.w	r6, r2, #1
  4221ea:	f8c4 c004 	str.w	ip, [r4, #4]
  4221ee:	4628      	mov	r0, r5
  4221f0:	6179      	str	r1, [r7, #20]
  4221f2:	6139      	str	r1, [r7, #16]
  4221f4:	f8c1 e00c 	str.w	lr, [r1, #12]
  4221f8:	f8c1 e008 	str.w	lr, [r1, #8]
  4221fc:	604e      	str	r6, [r1, #4]
  4221fe:	50e2      	str	r2, [r4, r3]
  422200:	f000 f9e8 	bl	4225d4 <__malloc_unlock>
  422204:	3408      	adds	r4, #8
  422206:	e6dd      	b.n	421fc4 <_malloc_r+0x18c>
  422208:	687b      	ldr	r3, [r7, #4]
  42220a:	e679      	b.n	421f00 <_malloc_r+0xc8>
  42220c:	f108 0801 	add.w	r8, r8, #1
  422210:	f018 0f03 	tst.w	r8, #3
  422214:	f10c 0c08 	add.w	ip, ip, #8
  422218:	f47f ae85 	bne.w	421f26 <_malloc_r+0xee>
  42221c:	e02d      	b.n	42227a <_malloc_r+0x442>
  42221e:	68dc      	ldr	r4, [r3, #12]
  422220:	42a3      	cmp	r3, r4
  422222:	bf08      	it	eq
  422224:	3002      	addeq	r0, #2
  422226:	f43f ae3e 	beq.w	421ea6 <_malloc_r+0x6e>
  42222a:	e6bb      	b.n	421fa4 <_malloc_r+0x16c>
  42222c:	4419      	add	r1, r3
  42222e:	461c      	mov	r4, r3
  422230:	684a      	ldr	r2, [r1, #4]
  422232:	68db      	ldr	r3, [r3, #12]
  422234:	f854 6f08 	ldr.w	r6, [r4, #8]!
  422238:	f042 0201 	orr.w	r2, r2, #1
  42223c:	604a      	str	r2, [r1, #4]
  42223e:	4628      	mov	r0, r5
  422240:	60f3      	str	r3, [r6, #12]
  422242:	609e      	str	r6, [r3, #8]
  422244:	f000 f9c6 	bl	4225d4 <__malloc_unlock>
  422248:	e6bc      	b.n	421fc4 <_malloc_r+0x18c>
  42224a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  42224e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  422252:	00c3      	lsls	r3, r0, #3
  422254:	e612      	b.n	421e7c <_malloc_r+0x44>
  422256:	099a      	lsrs	r2, r3, #6
  422258:	f102 0139 	add.w	r1, r2, #57	; 0x39
  42225c:	00c9      	lsls	r1, r1, #3
  42225e:	3238      	adds	r2, #56	; 0x38
  422260:	e7a4      	b.n	4221ac <_malloc_r+0x374>
  422262:	42bc      	cmp	r4, r7
  422264:	d054      	beq.n	422310 <_malloc_r+0x4d8>
  422266:	68bc      	ldr	r4, [r7, #8]
  422268:	6862      	ldr	r2, [r4, #4]
  42226a:	f022 0203 	bic.w	r2, r2, #3
  42226e:	e75d      	b.n	42212c <_malloc_r+0x2f4>
  422270:	f859 3908 	ldr.w	r3, [r9], #-8
  422274:	4599      	cmp	r9, r3
  422276:	f040 8086 	bne.w	422386 <_malloc_r+0x54e>
  42227a:	f010 0f03 	tst.w	r0, #3
  42227e:	f100 30ff 	add.w	r0, r0, #4294967295
  422282:	d1f5      	bne.n	422270 <_malloc_r+0x438>
  422284:	687b      	ldr	r3, [r7, #4]
  422286:	ea23 0304 	bic.w	r3, r3, r4
  42228a:	607b      	str	r3, [r7, #4]
  42228c:	0064      	lsls	r4, r4, #1
  42228e:	429c      	cmp	r4, r3
  422290:	f63f aec7 	bhi.w	422022 <_malloc_r+0x1ea>
  422294:	2c00      	cmp	r4, #0
  422296:	f43f aec4 	beq.w	422022 <_malloc_r+0x1ea>
  42229a:	421c      	tst	r4, r3
  42229c:	4640      	mov	r0, r8
  42229e:	f47f ae3e 	bne.w	421f1e <_malloc_r+0xe6>
  4222a2:	0064      	lsls	r4, r4, #1
  4222a4:	421c      	tst	r4, r3
  4222a6:	f100 0004 	add.w	r0, r0, #4
  4222aa:	d0fa      	beq.n	4222a2 <_malloc_r+0x46a>
  4222ac:	e637      	b.n	421f1e <_malloc_r+0xe6>
  4222ae:	468c      	mov	ip, r1
  4222b0:	e78c      	b.n	4221cc <_malloc_r+0x394>
  4222b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4222b6:	d815      	bhi.n	4222e4 <_malloc_r+0x4ac>
  4222b8:	0bf3      	lsrs	r3, r6, #15
  4222ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4222be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4222c2:	00c3      	lsls	r3, r0, #3
  4222c4:	e5da      	b.n	421e7c <_malloc_r+0x44>
  4222c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4222ca:	e6ed      	b.n	4220a8 <_malloc_r+0x270>
  4222cc:	687b      	ldr	r3, [r7, #4]
  4222ce:	1092      	asrs	r2, r2, #2
  4222d0:	2101      	movs	r1, #1
  4222d2:	fa01 f202 	lsl.w	r2, r1, r2
  4222d6:	4313      	orrs	r3, r2
  4222d8:	607b      	str	r3, [r7, #4]
  4222da:	4662      	mov	r2, ip
  4222dc:	e779      	b.n	4221d2 <_malloc_r+0x39a>
  4222de:	2301      	movs	r3, #1
  4222e0:	6053      	str	r3, [r2, #4]
  4222e2:	e729      	b.n	422138 <_malloc_r+0x300>
  4222e4:	f240 5254 	movw	r2, #1364	; 0x554
  4222e8:	4293      	cmp	r3, r2
  4222ea:	d822      	bhi.n	422332 <_malloc_r+0x4fa>
  4222ec:	0cb3      	lsrs	r3, r6, #18
  4222ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  4222f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  4222f6:	00c3      	lsls	r3, r0, #3
  4222f8:	e5c0      	b.n	421e7c <_malloc_r+0x44>
  4222fa:	f103 0b10 	add.w	fp, r3, #16
  4222fe:	e6ae      	b.n	42205e <_malloc_r+0x226>
  422300:	2a54      	cmp	r2, #84	; 0x54
  422302:	d829      	bhi.n	422358 <_malloc_r+0x520>
  422304:	0b1a      	lsrs	r2, r3, #12
  422306:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  42230a:	00c9      	lsls	r1, r1, #3
  42230c:	326e      	adds	r2, #110	; 0x6e
  42230e:	e74d      	b.n	4221ac <_malloc_r+0x374>
  422310:	4b20      	ldr	r3, [pc, #128]	; (422394 <_malloc_r+0x55c>)
  422312:	6819      	ldr	r1, [r3, #0]
  422314:	4459      	add	r1, fp
  422316:	6019      	str	r1, [r3, #0]
  422318:	e6b2      	b.n	422080 <_malloc_r+0x248>
  42231a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  42231e:	2800      	cmp	r0, #0
  422320:	f47f aeae 	bne.w	422080 <_malloc_r+0x248>
  422324:	eb08 030b 	add.w	r3, r8, fp
  422328:	68ba      	ldr	r2, [r7, #8]
  42232a:	f043 0301 	orr.w	r3, r3, #1
  42232e:	6053      	str	r3, [r2, #4]
  422330:	e6ee      	b.n	422110 <_malloc_r+0x2d8>
  422332:	207f      	movs	r0, #127	; 0x7f
  422334:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  422338:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  42233c:	e59e      	b.n	421e7c <_malloc_r+0x44>
  42233e:	f104 0108 	add.w	r1, r4, #8
  422342:	4628      	mov	r0, r5
  422344:	9300      	str	r3, [sp, #0]
  422346:	f001 fe05 	bl	423f54 <_free_r>
  42234a:	9b00      	ldr	r3, [sp, #0]
  42234c:	6819      	ldr	r1, [r3, #0]
  42234e:	e6df      	b.n	422110 <_malloc_r+0x2d8>
  422350:	2001      	movs	r0, #1
  422352:	f04f 0900 	mov.w	r9, #0
  422356:	e6bc      	b.n	4220d2 <_malloc_r+0x29a>
  422358:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  42235c:	d805      	bhi.n	42236a <_malloc_r+0x532>
  42235e:	0bda      	lsrs	r2, r3, #15
  422360:	f102 0178 	add.w	r1, r2, #120	; 0x78
  422364:	00c9      	lsls	r1, r1, #3
  422366:	3277      	adds	r2, #119	; 0x77
  422368:	e720      	b.n	4221ac <_malloc_r+0x374>
  42236a:	f240 5154 	movw	r1, #1364	; 0x554
  42236e:	428a      	cmp	r2, r1
  422370:	d805      	bhi.n	42237e <_malloc_r+0x546>
  422372:	0c9a      	lsrs	r2, r3, #18
  422374:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  422378:	00c9      	lsls	r1, r1, #3
  42237a:	327c      	adds	r2, #124	; 0x7c
  42237c:	e716      	b.n	4221ac <_malloc_r+0x374>
  42237e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  422382:	227e      	movs	r2, #126	; 0x7e
  422384:	e712      	b.n	4221ac <_malloc_r+0x374>
  422386:	687b      	ldr	r3, [r7, #4]
  422388:	e780      	b.n	42228c <_malloc_r+0x454>
  42238a:	08f0      	lsrs	r0, r6, #3
  42238c:	f106 0308 	add.w	r3, r6, #8
  422390:	e600      	b.n	421f94 <_malloc_r+0x15c>
  422392:	bf00      	nop
  422394:	2043a0a0 	.word	0x2043a0a0

00422398 <memcmp>:
  422398:	2a03      	cmp	r2, #3
  42239a:	b470      	push	{r4, r5, r6}
  42239c:	d922      	bls.n	4223e4 <memcmp+0x4c>
  42239e:	ea40 0301 	orr.w	r3, r0, r1
  4223a2:	079b      	lsls	r3, r3, #30
  4223a4:	d011      	beq.n	4223ca <memcmp+0x32>
  4223a6:	7803      	ldrb	r3, [r0, #0]
  4223a8:	780c      	ldrb	r4, [r1, #0]
  4223aa:	42a3      	cmp	r3, r4
  4223ac:	d11d      	bne.n	4223ea <memcmp+0x52>
  4223ae:	440a      	add	r2, r1
  4223b0:	3101      	adds	r1, #1
  4223b2:	e005      	b.n	4223c0 <memcmp+0x28>
  4223b4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
  4223b8:	f811 4b01 	ldrb.w	r4, [r1], #1
  4223bc:	42a3      	cmp	r3, r4
  4223be:	d114      	bne.n	4223ea <memcmp+0x52>
  4223c0:	4291      	cmp	r1, r2
  4223c2:	d1f7      	bne.n	4223b4 <memcmp+0x1c>
  4223c4:	2000      	movs	r0, #0
  4223c6:	bc70      	pop	{r4, r5, r6}
  4223c8:	4770      	bx	lr
  4223ca:	680d      	ldr	r5, [r1, #0]
  4223cc:	6806      	ldr	r6, [r0, #0]
  4223ce:	42ae      	cmp	r6, r5
  4223d0:	460c      	mov	r4, r1
  4223d2:	4603      	mov	r3, r0
  4223d4:	f101 0104 	add.w	r1, r1, #4
  4223d8:	f100 0004 	add.w	r0, r0, #4
  4223dc:	d108      	bne.n	4223f0 <memcmp+0x58>
  4223de:	3a04      	subs	r2, #4
  4223e0:	2a03      	cmp	r2, #3
  4223e2:	d8f2      	bhi.n	4223ca <memcmp+0x32>
  4223e4:	2a00      	cmp	r2, #0
  4223e6:	d1de      	bne.n	4223a6 <memcmp+0xe>
  4223e8:	e7ec      	b.n	4223c4 <memcmp+0x2c>
  4223ea:	1b18      	subs	r0, r3, r4
  4223ec:	bc70      	pop	{r4, r5, r6}
  4223ee:	4770      	bx	lr
  4223f0:	4621      	mov	r1, r4
  4223f2:	4618      	mov	r0, r3
  4223f4:	e7d7      	b.n	4223a6 <memcmp+0xe>
  4223f6:	bf00      	nop

004223f8 <memcpy>:
  4223f8:	4684      	mov	ip, r0
  4223fa:	ea41 0300 	orr.w	r3, r1, r0
  4223fe:	f013 0303 	ands.w	r3, r3, #3
  422402:	d16d      	bne.n	4224e0 <memcpy+0xe8>
  422404:	3a40      	subs	r2, #64	; 0x40
  422406:	d341      	bcc.n	42248c <memcpy+0x94>
  422408:	f851 3b04 	ldr.w	r3, [r1], #4
  42240c:	f840 3b04 	str.w	r3, [r0], #4
  422410:	f851 3b04 	ldr.w	r3, [r1], #4
  422414:	f840 3b04 	str.w	r3, [r0], #4
  422418:	f851 3b04 	ldr.w	r3, [r1], #4
  42241c:	f840 3b04 	str.w	r3, [r0], #4
  422420:	f851 3b04 	ldr.w	r3, [r1], #4
  422424:	f840 3b04 	str.w	r3, [r0], #4
  422428:	f851 3b04 	ldr.w	r3, [r1], #4
  42242c:	f840 3b04 	str.w	r3, [r0], #4
  422430:	f851 3b04 	ldr.w	r3, [r1], #4
  422434:	f840 3b04 	str.w	r3, [r0], #4
  422438:	f851 3b04 	ldr.w	r3, [r1], #4
  42243c:	f840 3b04 	str.w	r3, [r0], #4
  422440:	f851 3b04 	ldr.w	r3, [r1], #4
  422444:	f840 3b04 	str.w	r3, [r0], #4
  422448:	f851 3b04 	ldr.w	r3, [r1], #4
  42244c:	f840 3b04 	str.w	r3, [r0], #4
  422450:	f851 3b04 	ldr.w	r3, [r1], #4
  422454:	f840 3b04 	str.w	r3, [r0], #4
  422458:	f851 3b04 	ldr.w	r3, [r1], #4
  42245c:	f840 3b04 	str.w	r3, [r0], #4
  422460:	f851 3b04 	ldr.w	r3, [r1], #4
  422464:	f840 3b04 	str.w	r3, [r0], #4
  422468:	f851 3b04 	ldr.w	r3, [r1], #4
  42246c:	f840 3b04 	str.w	r3, [r0], #4
  422470:	f851 3b04 	ldr.w	r3, [r1], #4
  422474:	f840 3b04 	str.w	r3, [r0], #4
  422478:	f851 3b04 	ldr.w	r3, [r1], #4
  42247c:	f840 3b04 	str.w	r3, [r0], #4
  422480:	f851 3b04 	ldr.w	r3, [r1], #4
  422484:	f840 3b04 	str.w	r3, [r0], #4
  422488:	3a40      	subs	r2, #64	; 0x40
  42248a:	d2bd      	bcs.n	422408 <memcpy+0x10>
  42248c:	3230      	adds	r2, #48	; 0x30
  42248e:	d311      	bcc.n	4224b4 <memcpy+0xbc>
  422490:	f851 3b04 	ldr.w	r3, [r1], #4
  422494:	f840 3b04 	str.w	r3, [r0], #4
  422498:	f851 3b04 	ldr.w	r3, [r1], #4
  42249c:	f840 3b04 	str.w	r3, [r0], #4
  4224a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4224a4:	f840 3b04 	str.w	r3, [r0], #4
  4224a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4224ac:	f840 3b04 	str.w	r3, [r0], #4
  4224b0:	3a10      	subs	r2, #16
  4224b2:	d2ed      	bcs.n	422490 <memcpy+0x98>
  4224b4:	320c      	adds	r2, #12
  4224b6:	d305      	bcc.n	4224c4 <memcpy+0xcc>
  4224b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4224bc:	f840 3b04 	str.w	r3, [r0], #4
  4224c0:	3a04      	subs	r2, #4
  4224c2:	d2f9      	bcs.n	4224b8 <memcpy+0xc0>
  4224c4:	3204      	adds	r2, #4
  4224c6:	d008      	beq.n	4224da <memcpy+0xe2>
  4224c8:	07d2      	lsls	r2, r2, #31
  4224ca:	bf1c      	itt	ne
  4224cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4224d0:	f800 3b01 	strbne.w	r3, [r0], #1
  4224d4:	d301      	bcc.n	4224da <memcpy+0xe2>
  4224d6:	880b      	ldrh	r3, [r1, #0]
  4224d8:	8003      	strh	r3, [r0, #0]
  4224da:	4660      	mov	r0, ip
  4224dc:	4770      	bx	lr
  4224de:	bf00      	nop
  4224e0:	2a08      	cmp	r2, #8
  4224e2:	d313      	bcc.n	42250c <memcpy+0x114>
  4224e4:	078b      	lsls	r3, r1, #30
  4224e6:	d08d      	beq.n	422404 <memcpy+0xc>
  4224e8:	f010 0303 	ands.w	r3, r0, #3
  4224ec:	d08a      	beq.n	422404 <memcpy+0xc>
  4224ee:	f1c3 0304 	rsb	r3, r3, #4
  4224f2:	1ad2      	subs	r2, r2, r3
  4224f4:	07db      	lsls	r3, r3, #31
  4224f6:	bf1c      	itt	ne
  4224f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4224fc:	f800 3b01 	strbne.w	r3, [r0], #1
  422500:	d380      	bcc.n	422404 <memcpy+0xc>
  422502:	f831 3b02 	ldrh.w	r3, [r1], #2
  422506:	f820 3b02 	strh.w	r3, [r0], #2
  42250a:	e77b      	b.n	422404 <memcpy+0xc>
  42250c:	3a04      	subs	r2, #4
  42250e:	d3d9      	bcc.n	4224c4 <memcpy+0xcc>
  422510:	3a01      	subs	r2, #1
  422512:	f811 3b01 	ldrb.w	r3, [r1], #1
  422516:	f800 3b01 	strb.w	r3, [r0], #1
  42251a:	d2f9      	bcs.n	422510 <memcpy+0x118>
  42251c:	780b      	ldrb	r3, [r1, #0]
  42251e:	7003      	strb	r3, [r0, #0]
  422520:	784b      	ldrb	r3, [r1, #1]
  422522:	7043      	strb	r3, [r0, #1]
  422524:	788b      	ldrb	r3, [r1, #2]
  422526:	7083      	strb	r3, [r0, #2]
  422528:	4660      	mov	r0, ip
  42252a:	4770      	bx	lr

0042252c <memset>:
  42252c:	b470      	push	{r4, r5, r6}
  42252e:	0786      	lsls	r6, r0, #30
  422530:	d046      	beq.n	4225c0 <memset+0x94>
  422532:	1e54      	subs	r4, r2, #1
  422534:	2a00      	cmp	r2, #0
  422536:	d041      	beq.n	4225bc <memset+0x90>
  422538:	b2ca      	uxtb	r2, r1
  42253a:	4603      	mov	r3, r0
  42253c:	e002      	b.n	422544 <memset+0x18>
  42253e:	f114 34ff 	adds.w	r4, r4, #4294967295
  422542:	d33b      	bcc.n	4225bc <memset+0x90>
  422544:	f803 2b01 	strb.w	r2, [r3], #1
  422548:	079d      	lsls	r5, r3, #30
  42254a:	d1f8      	bne.n	42253e <memset+0x12>
  42254c:	2c03      	cmp	r4, #3
  42254e:	d92e      	bls.n	4225ae <memset+0x82>
  422550:	b2cd      	uxtb	r5, r1
  422552:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  422556:	2c0f      	cmp	r4, #15
  422558:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  42255c:	d919      	bls.n	422592 <memset+0x66>
  42255e:	f103 0210 	add.w	r2, r3, #16
  422562:	4626      	mov	r6, r4
  422564:	3e10      	subs	r6, #16
  422566:	2e0f      	cmp	r6, #15
  422568:	f842 5c10 	str.w	r5, [r2, #-16]
  42256c:	f842 5c0c 	str.w	r5, [r2, #-12]
  422570:	f842 5c08 	str.w	r5, [r2, #-8]
  422574:	f842 5c04 	str.w	r5, [r2, #-4]
  422578:	f102 0210 	add.w	r2, r2, #16
  42257c:	d8f2      	bhi.n	422564 <memset+0x38>
  42257e:	f1a4 0210 	sub.w	r2, r4, #16
  422582:	f022 020f 	bic.w	r2, r2, #15
  422586:	f004 040f 	and.w	r4, r4, #15
  42258a:	3210      	adds	r2, #16
  42258c:	2c03      	cmp	r4, #3
  42258e:	4413      	add	r3, r2
  422590:	d90d      	bls.n	4225ae <memset+0x82>
  422592:	461e      	mov	r6, r3
  422594:	4622      	mov	r2, r4
  422596:	3a04      	subs	r2, #4
  422598:	2a03      	cmp	r2, #3
  42259a:	f846 5b04 	str.w	r5, [r6], #4
  42259e:	d8fa      	bhi.n	422596 <memset+0x6a>
  4225a0:	1f22      	subs	r2, r4, #4
  4225a2:	f022 0203 	bic.w	r2, r2, #3
  4225a6:	3204      	adds	r2, #4
  4225a8:	4413      	add	r3, r2
  4225aa:	f004 0403 	and.w	r4, r4, #3
  4225ae:	b12c      	cbz	r4, 4225bc <memset+0x90>
  4225b0:	b2c9      	uxtb	r1, r1
  4225b2:	441c      	add	r4, r3
  4225b4:	f803 1b01 	strb.w	r1, [r3], #1
  4225b8:	429c      	cmp	r4, r3
  4225ba:	d1fb      	bne.n	4225b4 <memset+0x88>
  4225bc:	bc70      	pop	{r4, r5, r6}
  4225be:	4770      	bx	lr
  4225c0:	4614      	mov	r4, r2
  4225c2:	4603      	mov	r3, r0
  4225c4:	e7c2      	b.n	42254c <memset+0x20>
  4225c6:	bf00      	nop

004225c8 <__malloc_lock>:
  4225c8:	4801      	ldr	r0, [pc, #4]	; (4225d0 <__malloc_lock+0x8>)
  4225ca:	f001 bf5d 	b.w	424488 <__retarget_lock_acquire_recursive>
  4225ce:	bf00      	nop
  4225d0:	2043a348 	.word	0x2043a348

004225d4 <__malloc_unlock>:
  4225d4:	4801      	ldr	r0, [pc, #4]	; (4225dc <__malloc_unlock+0x8>)
  4225d6:	f001 bf59 	b.w	42448c <__retarget_lock_release_recursive>
  4225da:	bf00      	nop
  4225dc:	2043a348 	.word	0x2043a348

004225e0 <rand>:
  4225e0:	b410      	push	{r4}
  4225e2:	4b0c      	ldr	r3, [pc, #48]	; (422614 <rand+0x34>)
  4225e4:	480c      	ldr	r0, [pc, #48]	; (422618 <rand+0x38>)
  4225e6:	6819      	ldr	r1, [r3, #0]
  4225e8:	4c0c      	ldr	r4, [pc, #48]	; (42261c <rand+0x3c>)
  4225ea:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
  4225ee:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
  4225f2:	fb00 f002 	mul.w	r0, r0, r2
  4225f6:	fb04 0003 	mla	r0, r4, r3, r0
  4225fa:	fba2 2304 	umull	r2, r3, r2, r4
  4225fe:	4403      	add	r3, r0
  422600:	3201      	adds	r2, #1
  422602:	f143 0300 	adc.w	r3, r3, #0
  422606:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
  42260a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
  42260e:	bc10      	pop	{r4}
  422610:	4770      	bx	lr
  422612:	bf00      	nop
  422614:	20400070 	.word	0x20400070
  422618:	5851f42d 	.word	0x5851f42d
  42261c:	4c957f2d 	.word	0x4c957f2d

00422620 <_sbrk_r>:
  422620:	b538      	push	{r3, r4, r5, lr}
  422622:	4c07      	ldr	r4, [pc, #28]	; (422640 <_sbrk_r+0x20>)
  422624:	2300      	movs	r3, #0
  422626:	4605      	mov	r5, r0
  422628:	4608      	mov	r0, r1
  42262a:	6023      	str	r3, [r4, #0]
  42262c:	f7fe fa28 	bl	420a80 <_sbrk>
  422630:	1c43      	adds	r3, r0, #1
  422632:	d000      	beq.n	422636 <_sbrk_r+0x16>
  422634:	bd38      	pop	{r3, r4, r5, pc}
  422636:	6823      	ldr	r3, [r4, #0]
  422638:	2b00      	cmp	r3, #0
  42263a:	d0fb      	beq.n	422634 <_sbrk_r+0x14>
  42263c:	602b      	str	r3, [r5, #0]
  42263e:	bd38      	pop	{r3, r4, r5, pc}
  422640:	2043a35c 	.word	0x2043a35c

00422644 <setbuf>:
  422644:	2900      	cmp	r1, #0
  422646:	bf0c      	ite	eq
  422648:	2202      	moveq	r2, #2
  42264a:	2200      	movne	r2, #0
  42264c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  422650:	f000 b800 	b.w	422654 <setvbuf>

00422654 <setvbuf>:
  422654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  422658:	4c61      	ldr	r4, [pc, #388]	; (4227e0 <setvbuf+0x18c>)
  42265a:	6825      	ldr	r5, [r4, #0]
  42265c:	b083      	sub	sp, #12
  42265e:	4604      	mov	r4, r0
  422660:	460f      	mov	r7, r1
  422662:	4690      	mov	r8, r2
  422664:	461e      	mov	r6, r3
  422666:	b115      	cbz	r5, 42266e <setvbuf+0x1a>
  422668:	6bab      	ldr	r3, [r5, #56]	; 0x38
  42266a:	2b00      	cmp	r3, #0
  42266c:	d064      	beq.n	422738 <setvbuf+0xe4>
  42266e:	f1b8 0f02 	cmp.w	r8, #2
  422672:	d006      	beq.n	422682 <setvbuf+0x2e>
  422674:	f1b8 0f01 	cmp.w	r8, #1
  422678:	f200 809f 	bhi.w	4227ba <setvbuf+0x166>
  42267c:	2e00      	cmp	r6, #0
  42267e:	f2c0 809c 	blt.w	4227ba <setvbuf+0x166>
  422682:	6e63      	ldr	r3, [r4, #100]	; 0x64
  422684:	07d8      	lsls	r0, r3, #31
  422686:	d534      	bpl.n	4226f2 <setvbuf+0x9e>
  422688:	4621      	mov	r1, r4
  42268a:	4628      	mov	r0, r5
  42268c:	f001 fae4 	bl	423c58 <_fflush_r>
  422690:	6b21      	ldr	r1, [r4, #48]	; 0x30
  422692:	b141      	cbz	r1, 4226a6 <setvbuf+0x52>
  422694:	f104 0340 	add.w	r3, r4, #64	; 0x40
  422698:	4299      	cmp	r1, r3
  42269a:	d002      	beq.n	4226a2 <setvbuf+0x4e>
  42269c:	4628      	mov	r0, r5
  42269e:	f001 fc59 	bl	423f54 <_free_r>
  4226a2:	2300      	movs	r3, #0
  4226a4:	6323      	str	r3, [r4, #48]	; 0x30
  4226a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4226aa:	2200      	movs	r2, #0
  4226ac:	61a2      	str	r2, [r4, #24]
  4226ae:	6062      	str	r2, [r4, #4]
  4226b0:	061a      	lsls	r2, r3, #24
  4226b2:	d43a      	bmi.n	42272a <setvbuf+0xd6>
  4226b4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4226b8:	f023 0303 	bic.w	r3, r3, #3
  4226bc:	f1b8 0f02 	cmp.w	r8, #2
  4226c0:	81a3      	strh	r3, [r4, #12]
  4226c2:	d01d      	beq.n	422700 <setvbuf+0xac>
  4226c4:	ab01      	add	r3, sp, #4
  4226c6:	466a      	mov	r2, sp
  4226c8:	4621      	mov	r1, r4
  4226ca:	4628      	mov	r0, r5
  4226cc:	f001 fee0 	bl	424490 <__swhatbuf_r>
  4226d0:	89a3      	ldrh	r3, [r4, #12]
  4226d2:	4318      	orrs	r0, r3
  4226d4:	81a0      	strh	r0, [r4, #12]
  4226d6:	2e00      	cmp	r6, #0
  4226d8:	d132      	bne.n	422740 <setvbuf+0xec>
  4226da:	9e00      	ldr	r6, [sp, #0]
  4226dc:	4630      	mov	r0, r6
  4226de:	f7ff fba3 	bl	421e28 <malloc>
  4226e2:	4607      	mov	r7, r0
  4226e4:	2800      	cmp	r0, #0
  4226e6:	d06b      	beq.n	4227c0 <setvbuf+0x16c>
  4226e8:	89a3      	ldrh	r3, [r4, #12]
  4226ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4226ee:	81a3      	strh	r3, [r4, #12]
  4226f0:	e028      	b.n	422744 <setvbuf+0xf0>
  4226f2:	89a3      	ldrh	r3, [r4, #12]
  4226f4:	0599      	lsls	r1, r3, #22
  4226f6:	d4c7      	bmi.n	422688 <setvbuf+0x34>
  4226f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4226fa:	f001 fec5 	bl	424488 <__retarget_lock_acquire_recursive>
  4226fe:	e7c3      	b.n	422688 <setvbuf+0x34>
  422700:	2500      	movs	r5, #0
  422702:	6e61      	ldr	r1, [r4, #100]	; 0x64
  422704:	2600      	movs	r6, #0
  422706:	f104 0243 	add.w	r2, r4, #67	; 0x43
  42270a:	f043 0302 	orr.w	r3, r3, #2
  42270e:	2001      	movs	r0, #1
  422710:	60a6      	str	r6, [r4, #8]
  422712:	07ce      	lsls	r6, r1, #31
  422714:	81a3      	strh	r3, [r4, #12]
  422716:	6022      	str	r2, [r4, #0]
  422718:	6122      	str	r2, [r4, #16]
  42271a:	6160      	str	r0, [r4, #20]
  42271c:	d401      	bmi.n	422722 <setvbuf+0xce>
  42271e:	0598      	lsls	r0, r3, #22
  422720:	d53e      	bpl.n	4227a0 <setvbuf+0x14c>
  422722:	4628      	mov	r0, r5
  422724:	b003      	add	sp, #12
  422726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  42272a:	6921      	ldr	r1, [r4, #16]
  42272c:	4628      	mov	r0, r5
  42272e:	f001 fc11 	bl	423f54 <_free_r>
  422732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  422736:	e7bd      	b.n	4226b4 <setvbuf+0x60>
  422738:	4628      	mov	r0, r5
  42273a:	f001 fae5 	bl	423d08 <__sinit>
  42273e:	e796      	b.n	42266e <setvbuf+0x1a>
  422740:	2f00      	cmp	r7, #0
  422742:	d0cb      	beq.n	4226dc <setvbuf+0x88>
  422744:	6bab      	ldr	r3, [r5, #56]	; 0x38
  422746:	2b00      	cmp	r3, #0
  422748:	d033      	beq.n	4227b2 <setvbuf+0x15e>
  42274a:	9b00      	ldr	r3, [sp, #0]
  42274c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  422750:	6027      	str	r7, [r4, #0]
  422752:	429e      	cmp	r6, r3
  422754:	bf1c      	itt	ne
  422756:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  42275a:	81a2      	strhne	r2, [r4, #12]
  42275c:	f1b8 0f01 	cmp.w	r8, #1
  422760:	bf04      	itt	eq
  422762:	f042 0201 	orreq.w	r2, r2, #1
  422766:	81a2      	strheq	r2, [r4, #12]
  422768:	b292      	uxth	r2, r2
  42276a:	f012 0308 	ands.w	r3, r2, #8
  42276e:	6127      	str	r7, [r4, #16]
  422770:	6166      	str	r6, [r4, #20]
  422772:	d00e      	beq.n	422792 <setvbuf+0x13e>
  422774:	07d1      	lsls	r1, r2, #31
  422776:	d51a      	bpl.n	4227ae <setvbuf+0x15a>
  422778:	6e65      	ldr	r5, [r4, #100]	; 0x64
  42277a:	4276      	negs	r6, r6
  42277c:	2300      	movs	r3, #0
  42277e:	f015 0501 	ands.w	r5, r5, #1
  422782:	61a6      	str	r6, [r4, #24]
  422784:	60a3      	str	r3, [r4, #8]
  422786:	d009      	beq.n	42279c <setvbuf+0x148>
  422788:	2500      	movs	r5, #0
  42278a:	4628      	mov	r0, r5
  42278c:	b003      	add	sp, #12
  42278e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  422792:	60a3      	str	r3, [r4, #8]
  422794:	6e65      	ldr	r5, [r4, #100]	; 0x64
  422796:	f015 0501 	ands.w	r5, r5, #1
  42279a:	d1f5      	bne.n	422788 <setvbuf+0x134>
  42279c:	0593      	lsls	r3, r2, #22
  42279e:	d4c0      	bmi.n	422722 <setvbuf+0xce>
  4227a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4227a2:	f001 fe73 	bl	42448c <__retarget_lock_release_recursive>
  4227a6:	4628      	mov	r0, r5
  4227a8:	b003      	add	sp, #12
  4227aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4227ae:	60a6      	str	r6, [r4, #8]
  4227b0:	e7f0      	b.n	422794 <setvbuf+0x140>
  4227b2:	4628      	mov	r0, r5
  4227b4:	f001 faa8 	bl	423d08 <__sinit>
  4227b8:	e7c7      	b.n	42274a <setvbuf+0xf6>
  4227ba:	f04f 35ff 	mov.w	r5, #4294967295
  4227be:	e7b0      	b.n	422722 <setvbuf+0xce>
  4227c0:	f8dd 9000 	ldr.w	r9, [sp]
  4227c4:	45b1      	cmp	r9, r6
  4227c6:	d004      	beq.n	4227d2 <setvbuf+0x17e>
  4227c8:	4648      	mov	r0, r9
  4227ca:	f7ff fb2d 	bl	421e28 <malloc>
  4227ce:	4607      	mov	r7, r0
  4227d0:	b920      	cbnz	r0, 4227dc <setvbuf+0x188>
  4227d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4227d6:	f04f 35ff 	mov.w	r5, #4294967295
  4227da:	e792      	b.n	422702 <setvbuf+0xae>
  4227dc:	464e      	mov	r6, r9
  4227de:	e783      	b.n	4226e8 <setvbuf+0x94>
  4227e0:	20400070 	.word	0x20400070
	...
  422800:	eba2 0003 	sub.w	r0, r2, r3
  422804:	4770      	bx	lr
  422806:	bf00      	nop

00422808 <strcmp>:
  422808:	7802      	ldrb	r2, [r0, #0]
  42280a:	780b      	ldrb	r3, [r1, #0]
  42280c:	2a01      	cmp	r2, #1
  42280e:	bf28      	it	cs
  422810:	429a      	cmpcs	r2, r3
  422812:	d1f5      	bne.n	422800 <setvbuf+0x1ac>
  422814:	e96d 4504 	strd	r4, r5, [sp, #-16]!
  422818:	ea40 0401 	orr.w	r4, r0, r1
  42281c:	e9cd 6702 	strd	r6, r7, [sp, #8]
  422820:	f06f 0c00 	mvn.w	ip, #0
  422824:	ea4f 7244 	mov.w	r2, r4, lsl #29
  422828:	b312      	cbz	r2, 422870 <strcmp+0x68>
  42282a:	ea80 0401 	eor.w	r4, r0, r1
  42282e:	f014 0f07 	tst.w	r4, #7
  422832:	d16a      	bne.n	42290a <strcmp+0x102>
  422834:	f000 0407 	and.w	r4, r0, #7
  422838:	f020 0007 	bic.w	r0, r0, #7
  42283c:	f004 0503 	and.w	r5, r4, #3
  422840:	f021 0107 	bic.w	r1, r1, #7
  422844:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  422848:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  42284c:	f014 0f04 	tst.w	r4, #4
  422850:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  422854:	fa0c f405 	lsl.w	r4, ip, r5
  422858:	ea62 0204 	orn	r2, r2, r4
  42285c:	ea66 0604 	orn	r6, r6, r4
  422860:	d00a      	beq.n	422878 <strcmp+0x70>
  422862:	ea63 0304 	orn	r3, r3, r4
  422866:	4662      	mov	r2, ip
  422868:	ea67 0704 	orn	r7, r7, r4
  42286c:	4666      	mov	r6, ip
  42286e:	e003      	b.n	422878 <strcmp+0x70>
  422870:	e8f0 2304 	ldrd	r2, r3, [r0], #16
  422874:	e8f1 6704 	ldrd	r6, r7, [r1], #16
  422878:	fa82 f54c 	uadd8	r5, r2, ip
  42287c:	ea82 0406 	eor.w	r4, r2, r6
  422880:	faa4 f48c 	sel	r4, r4, ip
  422884:	bb6c      	cbnz	r4, 4228e2 <strcmp+0xda>
  422886:	fa83 f54c 	uadd8	r5, r3, ip
  42288a:	ea83 0507 	eor.w	r5, r3, r7
  42288e:	faa5 f58c 	sel	r5, r5, ip
  422892:	b995      	cbnz	r5, 4228ba <strcmp+0xb2>
  422894:	e950 2302 	ldrd	r2, r3, [r0, #-8]
  422898:	e951 6702 	ldrd	r6, r7, [r1, #-8]
  42289c:	fa82 f54c 	uadd8	r5, r2, ip
  4228a0:	ea82 0406 	eor.w	r4, r2, r6
  4228a4:	faa4 f48c 	sel	r4, r4, ip
  4228a8:	fa83 f54c 	uadd8	r5, r3, ip
  4228ac:	ea83 0507 	eor.w	r5, r3, r7
  4228b0:	faa5 f58c 	sel	r5, r5, ip
  4228b4:	4325      	orrs	r5, r4
  4228b6:	d0db      	beq.n	422870 <strcmp+0x68>
  4228b8:	b99c      	cbnz	r4, 4228e2 <strcmp+0xda>
  4228ba:	ba2d      	rev	r5, r5
  4228bc:	fab5 f485 	clz	r4, r5
  4228c0:	f024 0407 	bic.w	r4, r4, #7
  4228c4:	fa27 f104 	lsr.w	r1, r7, r4
  4228c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4228cc:	fa23 f304 	lsr.w	r3, r3, r4
  4228d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  4228d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4228d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  4228dc:	eba0 0001 	sub.w	r0, r0, r1
  4228e0:	4770      	bx	lr
  4228e2:	ba24      	rev	r4, r4
  4228e4:	fab4 f484 	clz	r4, r4
  4228e8:	f024 0407 	bic.w	r4, r4, #7
  4228ec:	fa26 f104 	lsr.w	r1, r6, r4
  4228f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
  4228f4:	fa22 f204 	lsr.w	r2, r2, r4
  4228f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  4228fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  422900:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  422904:	eba0 0001 	sub.w	r0, r0, r1
  422908:	4770      	bx	lr
  42290a:	f014 0f03 	tst.w	r4, #3
  42290e:	d13c      	bne.n	42298a <strcmp+0x182>
  422910:	f010 0403 	ands.w	r4, r0, #3
  422914:	d128      	bne.n	422968 <strcmp+0x160>
  422916:	f850 2b08 	ldr.w	r2, [r0], #8
  42291a:	f851 3b08 	ldr.w	r3, [r1], #8
  42291e:	fa82 f54c 	uadd8	r5, r2, ip
  422922:	ea82 0503 	eor.w	r5, r2, r3
  422926:	faa5 f58c 	sel	r5, r5, ip
  42292a:	b95d      	cbnz	r5, 422944 <strcmp+0x13c>
  42292c:	f850 2c04 	ldr.w	r2, [r0, #-4]
  422930:	f851 3c04 	ldr.w	r3, [r1, #-4]
  422934:	fa82 f54c 	uadd8	r5, r2, ip
  422938:	ea82 0503 	eor.w	r5, r2, r3
  42293c:	faa5 f58c 	sel	r5, r5, ip
  422940:	2d00      	cmp	r5, #0
  422942:	d0e8      	beq.n	422916 <strcmp+0x10e>
  422944:	ba2d      	rev	r5, r5
  422946:	fab5 f485 	clz	r4, r5
  42294a:	f024 0407 	bic.w	r4, r4, #7
  42294e:	fa23 f104 	lsr.w	r1, r3, r4
  422952:	fa22 f204 	lsr.w	r2, r2, r4
  422956:	f002 00ff 	and.w	r0, r2, #255	; 0xff
  42295a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42295e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  422962:	eba0 0001 	sub.w	r0, r0, r1
  422966:	4770      	bx	lr
  422968:	ea4f 04c4 	mov.w	r4, r4, lsl #3
  42296c:	f020 0003 	bic.w	r0, r0, #3
  422970:	f850 2b08 	ldr.w	r2, [r0], #8
  422974:	f021 0103 	bic.w	r1, r1, #3
  422978:	f851 3b08 	ldr.w	r3, [r1], #8
  42297c:	fa0c f404 	lsl.w	r4, ip, r4
  422980:	ea62 0204 	orn	r2, r2, r4
  422984:	ea63 0304 	orn	r3, r3, r4
  422988:	e7c9      	b.n	42291e <strcmp+0x116>
  42298a:	f010 0403 	ands.w	r4, r0, #3
  42298e:	d01a      	beq.n	4229c6 <strcmp+0x1be>
  422990:	eba1 0104 	sub.w	r1, r1, r4
  422994:	f020 0003 	bic.w	r0, r0, #3
  422998:	07e4      	lsls	r4, r4, #31
  42299a:	f850 2b04 	ldr.w	r2, [r0], #4
  42299e:	d006      	beq.n	4229ae <strcmp+0x1a6>
  4229a0:	d20f      	bcs.n	4229c2 <strcmp+0x1ba>
  4229a2:	788b      	ldrb	r3, [r1, #2]
  4229a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
  4229a8:	1ae4      	subs	r4, r4, r3
  4229aa:	d106      	bne.n	4229ba <strcmp+0x1b2>
  4229ac:	b12b      	cbz	r3, 4229ba <strcmp+0x1b2>
  4229ae:	78cb      	ldrb	r3, [r1, #3]
  4229b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
  4229b4:	1ae4      	subs	r4, r4, r3
  4229b6:	d100      	bne.n	4229ba <strcmp+0x1b2>
  4229b8:	b91b      	cbnz	r3, 4229c2 <strcmp+0x1ba>
  4229ba:	4620      	mov	r0, r4
  4229bc:	f85d 4b10 	ldr.w	r4, [sp], #16
  4229c0:	4770      	bx	lr
  4229c2:	f101 0104 	add.w	r1, r1, #4
  4229c6:	f850 2b04 	ldr.w	r2, [r0], #4
  4229ca:	07cc      	lsls	r4, r1, #31
  4229cc:	f021 0103 	bic.w	r1, r1, #3
  4229d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4229d4:	d848      	bhi.n	422a68 <strcmp+0x260>
  4229d6:	d224      	bcs.n	422a22 <strcmp+0x21a>
  4229d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
  4229dc:	fa82 f54c 	uadd8	r5, r2, ip
  4229e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
  4229e4:	faa5 f58c 	sel	r5, r5, ip
  4229e8:	d10a      	bne.n	422a00 <strcmp+0x1f8>
  4229ea:	b965      	cbnz	r5, 422a06 <strcmp+0x1fe>
  4229ec:	f851 3b04 	ldr.w	r3, [r1], #4
  4229f0:	ea84 0402 	eor.w	r4, r4, r2
  4229f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
  4229f8:	d10e      	bne.n	422a18 <strcmp+0x210>
  4229fa:	f850 2b04 	ldr.w	r2, [r0], #4
  4229fe:	e7eb      	b.n	4229d8 <strcmp+0x1d0>
  422a00:	ea4f 2313 	mov.w	r3, r3, lsr #8
  422a04:	e055      	b.n	422ab2 <strcmp+0x2aa>
  422a06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
  422a0a:	d14d      	bne.n	422aa8 <strcmp+0x2a0>
  422a0c:	7808      	ldrb	r0, [r1, #0]
  422a0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  422a12:	f1c0 0000 	rsb	r0, r0, #0
  422a16:	4770      	bx	lr
  422a18:	ea4f 6212 	mov.w	r2, r2, lsr #24
  422a1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
  422a20:	e047      	b.n	422ab2 <strcmp+0x2aa>
  422a22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
  422a26:	fa82 f54c 	uadd8	r5, r2, ip
  422a2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
  422a2e:	faa5 f58c 	sel	r5, r5, ip
  422a32:	d10a      	bne.n	422a4a <strcmp+0x242>
  422a34:	b965      	cbnz	r5, 422a50 <strcmp+0x248>
  422a36:	f851 3b04 	ldr.w	r3, [r1], #4
  422a3a:	ea84 0402 	eor.w	r4, r4, r2
  422a3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
  422a42:	d10c      	bne.n	422a5e <strcmp+0x256>
  422a44:	f850 2b04 	ldr.w	r2, [r0], #4
  422a48:	e7eb      	b.n	422a22 <strcmp+0x21a>
  422a4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
  422a4e:	e030      	b.n	422ab2 <strcmp+0x2aa>
  422a50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
  422a54:	d128      	bne.n	422aa8 <strcmp+0x2a0>
  422a56:	880b      	ldrh	r3, [r1, #0]
  422a58:	ea4f 4212 	mov.w	r2, r2, lsr #16
  422a5c:	e029      	b.n	422ab2 <strcmp+0x2aa>
  422a5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
  422a62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
  422a66:	e024      	b.n	422ab2 <strcmp+0x2aa>
  422a68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
  422a6c:	fa82 f54c 	uadd8	r5, r2, ip
  422a70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
  422a74:	faa5 f58c 	sel	r5, r5, ip
  422a78:	d10a      	bne.n	422a90 <strcmp+0x288>
  422a7a:	b965      	cbnz	r5, 422a96 <strcmp+0x28e>
  422a7c:	f851 3b04 	ldr.w	r3, [r1], #4
  422a80:	ea84 0402 	eor.w	r4, r4, r2
  422a84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
  422a88:	d109      	bne.n	422a9e <strcmp+0x296>
  422a8a:	f850 2b04 	ldr.w	r2, [r0], #4
  422a8e:	e7eb      	b.n	422a68 <strcmp+0x260>
  422a90:	ea4f 6313 	mov.w	r3, r3, lsr #24
  422a94:	e00d      	b.n	422ab2 <strcmp+0x2aa>
  422a96:	f015 0fff 	tst.w	r5, #255	; 0xff
  422a9a:	d105      	bne.n	422aa8 <strcmp+0x2a0>
  422a9c:	680b      	ldr	r3, [r1, #0]
  422a9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
  422aa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  422aa6:	e004      	b.n	422ab2 <strcmp+0x2aa>
  422aa8:	f04f 0000 	mov.w	r0, #0
  422aac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  422ab0:	4770      	bx	lr
  422ab2:	ba12      	rev	r2, r2
  422ab4:	ba1b      	rev	r3, r3
  422ab6:	fa82 f44c 	uadd8	r4, r2, ip
  422aba:	ea82 0403 	eor.w	r4, r2, r3
  422abe:	faa4 f58c 	sel	r5, r4, ip
  422ac2:	fab5 f485 	clz	r4, r5
  422ac6:	fa02 f204 	lsl.w	r2, r2, r4
  422aca:	fa03 f304 	lsl.w	r3, r3, r4
  422ace:	ea4f 6012 	mov.w	r0, r2, lsr #24
  422ad2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
  422ad6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
  422ada:	4770      	bx	lr

00422adc <strcpy>:
  422adc:	ea80 0201 	eor.w	r2, r0, r1
  422ae0:	4684      	mov	ip, r0
  422ae2:	f012 0f03 	tst.w	r2, #3
  422ae6:	d14f      	bne.n	422b88 <strcpy+0xac>
  422ae8:	f011 0f03 	tst.w	r1, #3
  422aec:	d132      	bne.n	422b54 <strcpy+0x78>
  422aee:	f84d 4d04 	str.w	r4, [sp, #-4]!
  422af2:	f011 0f04 	tst.w	r1, #4
  422af6:	f851 3b04 	ldr.w	r3, [r1], #4
  422afa:	d00b      	beq.n	422b14 <strcpy+0x38>
  422afc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  422b00:	439a      	bics	r2, r3
  422b02:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  422b06:	bf04      	itt	eq
  422b08:	f84c 3b04 	streq.w	r3, [ip], #4
  422b0c:	f851 3b04 	ldreq.w	r3, [r1], #4
  422b10:	d116      	bne.n	422b40 <strcpy+0x64>
  422b12:	bf00      	nop
  422b14:	f851 4b04 	ldr.w	r4, [r1], #4
  422b18:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  422b1c:	439a      	bics	r2, r3
  422b1e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  422b22:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  422b26:	d10b      	bne.n	422b40 <strcpy+0x64>
  422b28:	f84c 3b04 	str.w	r3, [ip], #4
  422b2c:	43a2      	bics	r2, r4
  422b2e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  422b32:	bf04      	itt	eq
  422b34:	f851 3b04 	ldreq.w	r3, [r1], #4
  422b38:	f84c 4b04 	streq.w	r4, [ip], #4
  422b3c:	d0ea      	beq.n	422b14 <strcpy+0x38>
  422b3e:	4623      	mov	r3, r4
  422b40:	f80c 3b01 	strb.w	r3, [ip], #1
  422b44:	f013 0fff 	tst.w	r3, #255	; 0xff
  422b48:	ea4f 2333 	mov.w	r3, r3, ror #8
  422b4c:	d1f8      	bne.n	422b40 <strcpy+0x64>
  422b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  422b52:	4770      	bx	lr
  422b54:	f011 0f01 	tst.w	r1, #1
  422b58:	d006      	beq.n	422b68 <strcpy+0x8c>
  422b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
  422b5e:	f80c 2b01 	strb.w	r2, [ip], #1
  422b62:	2a00      	cmp	r2, #0
  422b64:	bf08      	it	eq
  422b66:	4770      	bxeq	lr
  422b68:	f011 0f02 	tst.w	r1, #2
  422b6c:	d0bf      	beq.n	422aee <strcpy+0x12>
  422b6e:	f831 2b02 	ldrh.w	r2, [r1], #2
  422b72:	f012 0fff 	tst.w	r2, #255	; 0xff
  422b76:	bf16      	itet	ne
  422b78:	f82c 2b02 	strhne.w	r2, [ip], #2
  422b7c:	f88c 2000 	strbeq.w	r2, [ip]
  422b80:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  422b84:	d1b3      	bne.n	422aee <strcpy+0x12>
  422b86:	4770      	bx	lr
  422b88:	f811 2b01 	ldrb.w	r2, [r1], #1
  422b8c:	f80c 2b01 	strb.w	r2, [ip], #1
  422b90:	2a00      	cmp	r2, #0
  422b92:	d1f9      	bne.n	422b88 <strcpy+0xac>
  422b94:	4770      	bx	lr
  422b96:	bf00      	nop
	...

00422bc0 <strlen>:
  422bc0:	f890 f000 	pld	[r0]
  422bc4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  422bc8:	f020 0107 	bic.w	r1, r0, #7
  422bcc:	f06f 0c00 	mvn.w	ip, #0
  422bd0:	f010 0407 	ands.w	r4, r0, #7
  422bd4:	f891 f020 	pld	[r1, #32]
  422bd8:	f040 8049 	bne.w	422c6e <strlen+0xae>
  422bdc:	f04f 0400 	mov.w	r4, #0
  422be0:	f06f 0007 	mvn.w	r0, #7
  422be4:	e9d1 2300 	ldrd	r2, r3, [r1]
  422be8:	f891 f040 	pld	[r1, #64]	; 0x40
  422bec:	f100 0008 	add.w	r0, r0, #8
  422bf0:	fa82 f24c 	uadd8	r2, r2, ip
  422bf4:	faa4 f28c 	sel	r2, r4, ip
  422bf8:	fa83 f34c 	uadd8	r3, r3, ip
  422bfc:	faa2 f38c 	sel	r3, r2, ip
  422c00:	bb4b      	cbnz	r3, 422c56 <strlen+0x96>
  422c02:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  422c06:	fa82 f24c 	uadd8	r2, r2, ip
  422c0a:	f100 0008 	add.w	r0, r0, #8
  422c0e:	faa4 f28c 	sel	r2, r4, ip
  422c12:	fa83 f34c 	uadd8	r3, r3, ip
  422c16:	faa2 f38c 	sel	r3, r2, ip
  422c1a:	b9e3      	cbnz	r3, 422c56 <strlen+0x96>
  422c1c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  422c20:	fa82 f24c 	uadd8	r2, r2, ip
  422c24:	f100 0008 	add.w	r0, r0, #8
  422c28:	faa4 f28c 	sel	r2, r4, ip
  422c2c:	fa83 f34c 	uadd8	r3, r3, ip
  422c30:	faa2 f38c 	sel	r3, r2, ip
  422c34:	b97b      	cbnz	r3, 422c56 <strlen+0x96>
  422c36:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  422c3a:	f101 0120 	add.w	r1, r1, #32
  422c3e:	fa82 f24c 	uadd8	r2, r2, ip
  422c42:	f100 0008 	add.w	r0, r0, #8
  422c46:	faa4 f28c 	sel	r2, r4, ip
  422c4a:	fa83 f34c 	uadd8	r3, r3, ip
  422c4e:	faa2 f38c 	sel	r3, r2, ip
  422c52:	2b00      	cmp	r3, #0
  422c54:	d0c6      	beq.n	422be4 <strlen+0x24>
  422c56:	2a00      	cmp	r2, #0
  422c58:	bf04      	itt	eq
  422c5a:	3004      	addeq	r0, #4
  422c5c:	461a      	moveq	r2, r3
  422c5e:	ba12      	rev	r2, r2
  422c60:	fab2 f282 	clz	r2, r2
  422c64:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  422c68:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  422c6c:	4770      	bx	lr
  422c6e:	e9d1 2300 	ldrd	r2, r3, [r1]
  422c72:	f004 0503 	and.w	r5, r4, #3
  422c76:	f1c4 0000 	rsb	r0, r4, #0
  422c7a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  422c7e:	f014 0f04 	tst.w	r4, #4
  422c82:	f891 f040 	pld	[r1, #64]	; 0x40
  422c86:	fa0c f505 	lsl.w	r5, ip, r5
  422c8a:	ea62 0205 	orn	r2, r2, r5
  422c8e:	bf1c      	itt	ne
  422c90:	ea63 0305 	ornne	r3, r3, r5
  422c94:	4662      	movne	r2, ip
  422c96:	f04f 0400 	mov.w	r4, #0
  422c9a:	e7a9      	b.n	422bf0 <strlen+0x30>

00422c9c <__sprint_r.part.0>:
  422c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422ca0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  422ca2:	049c      	lsls	r4, r3, #18
  422ca4:	4693      	mov	fp, r2
  422ca6:	d52f      	bpl.n	422d08 <__sprint_r.part.0+0x6c>
  422ca8:	6893      	ldr	r3, [r2, #8]
  422caa:	6812      	ldr	r2, [r2, #0]
  422cac:	b353      	cbz	r3, 422d04 <__sprint_r.part.0+0x68>
  422cae:	460e      	mov	r6, r1
  422cb0:	4607      	mov	r7, r0
  422cb2:	f102 0908 	add.w	r9, r2, #8
  422cb6:	e919 0420 	ldmdb	r9, {r5, sl}
  422cba:	ea5f 089a 	movs.w	r8, sl, lsr #2
  422cbe:	d017      	beq.n	422cf0 <__sprint_r.part.0+0x54>
  422cc0:	3d04      	subs	r5, #4
  422cc2:	2400      	movs	r4, #0
  422cc4:	e001      	b.n	422cca <__sprint_r.part.0+0x2e>
  422cc6:	45a0      	cmp	r8, r4
  422cc8:	d010      	beq.n	422cec <__sprint_r.part.0+0x50>
  422cca:	4632      	mov	r2, r6
  422ccc:	f855 1f04 	ldr.w	r1, [r5, #4]!
  422cd0:	4638      	mov	r0, r7
  422cd2:	f001 f8bb 	bl	423e4c <_fputwc_r>
  422cd6:	1c43      	adds	r3, r0, #1
  422cd8:	f104 0401 	add.w	r4, r4, #1
  422cdc:	d1f3      	bne.n	422cc6 <__sprint_r.part.0+0x2a>
  422cde:	2300      	movs	r3, #0
  422ce0:	f8cb 3008 	str.w	r3, [fp, #8]
  422ce4:	f8cb 3004 	str.w	r3, [fp, #4]
  422ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422cec:	f8db 3008 	ldr.w	r3, [fp, #8]
  422cf0:	f02a 0a03 	bic.w	sl, sl, #3
  422cf4:	eba3 030a 	sub.w	r3, r3, sl
  422cf8:	f8cb 3008 	str.w	r3, [fp, #8]
  422cfc:	f109 0908 	add.w	r9, r9, #8
  422d00:	2b00      	cmp	r3, #0
  422d02:	d1d8      	bne.n	422cb6 <__sprint_r.part.0+0x1a>
  422d04:	2000      	movs	r0, #0
  422d06:	e7ea      	b.n	422cde <__sprint_r.part.0+0x42>
  422d08:	f001 fa0a 	bl	424120 <__sfvwrite_r>
  422d0c:	2300      	movs	r3, #0
  422d0e:	f8cb 3008 	str.w	r3, [fp, #8]
  422d12:	f8cb 3004 	str.w	r3, [fp, #4]
  422d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422d1a:	bf00      	nop

00422d1c <_vfiprintf_r>:
  422d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  422d20:	b0ad      	sub	sp, #180	; 0xb4
  422d22:	461d      	mov	r5, r3
  422d24:	468b      	mov	fp, r1
  422d26:	4690      	mov	r8, r2
  422d28:	9307      	str	r3, [sp, #28]
  422d2a:	9006      	str	r0, [sp, #24]
  422d2c:	b118      	cbz	r0, 422d36 <_vfiprintf_r+0x1a>
  422d2e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  422d30:	2b00      	cmp	r3, #0
  422d32:	f000 80f3 	beq.w	422f1c <_vfiprintf_r+0x200>
  422d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  422d3a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  422d3e:	07df      	lsls	r7, r3, #31
  422d40:	b281      	uxth	r1, r0
  422d42:	d402      	bmi.n	422d4a <_vfiprintf_r+0x2e>
  422d44:	058e      	lsls	r6, r1, #22
  422d46:	f140 80fc 	bpl.w	422f42 <_vfiprintf_r+0x226>
  422d4a:	048c      	lsls	r4, r1, #18
  422d4c:	d40a      	bmi.n	422d64 <_vfiprintf_r+0x48>
  422d4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  422d52:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  422d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  422d5a:	f8ab 100c 	strh.w	r1, [fp, #12]
  422d5e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  422d62:	b289      	uxth	r1, r1
  422d64:	0708      	lsls	r0, r1, #28
  422d66:	f140 80b3 	bpl.w	422ed0 <_vfiprintf_r+0x1b4>
  422d6a:	f8db 3010 	ldr.w	r3, [fp, #16]
  422d6e:	2b00      	cmp	r3, #0
  422d70:	f000 80ae 	beq.w	422ed0 <_vfiprintf_r+0x1b4>
  422d74:	f001 031a 	and.w	r3, r1, #26
  422d78:	2b0a      	cmp	r3, #10
  422d7a:	f000 80b5 	beq.w	422ee8 <_vfiprintf_r+0x1cc>
  422d7e:	2300      	movs	r3, #0
  422d80:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  422d84:	930b      	str	r3, [sp, #44]	; 0x2c
  422d86:	9311      	str	r3, [sp, #68]	; 0x44
  422d88:	9310      	str	r3, [sp, #64]	; 0x40
  422d8a:	9303      	str	r3, [sp, #12]
  422d8c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  422d90:	46ca      	mov	sl, r9
  422d92:	f8cd b010 	str.w	fp, [sp, #16]
  422d96:	f898 3000 	ldrb.w	r3, [r8]
  422d9a:	4644      	mov	r4, r8
  422d9c:	b1fb      	cbz	r3, 422dde <_vfiprintf_r+0xc2>
  422d9e:	2b25      	cmp	r3, #37	; 0x25
  422da0:	d102      	bne.n	422da8 <_vfiprintf_r+0x8c>
  422da2:	e01c      	b.n	422dde <_vfiprintf_r+0xc2>
  422da4:	2b25      	cmp	r3, #37	; 0x25
  422da6:	d003      	beq.n	422db0 <_vfiprintf_r+0x94>
  422da8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  422dac:	2b00      	cmp	r3, #0
  422dae:	d1f9      	bne.n	422da4 <_vfiprintf_r+0x88>
  422db0:	eba4 0508 	sub.w	r5, r4, r8
  422db4:	b19d      	cbz	r5, 422dde <_vfiprintf_r+0xc2>
  422db6:	9b10      	ldr	r3, [sp, #64]	; 0x40
  422db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  422dba:	f8ca 8000 	str.w	r8, [sl]
  422dbe:	3301      	adds	r3, #1
  422dc0:	442a      	add	r2, r5
  422dc2:	2b07      	cmp	r3, #7
  422dc4:	f8ca 5004 	str.w	r5, [sl, #4]
  422dc8:	9211      	str	r2, [sp, #68]	; 0x44
  422dca:	9310      	str	r3, [sp, #64]	; 0x40
  422dcc:	dd7a      	ble.n	422ec4 <_vfiprintf_r+0x1a8>
  422dce:	2a00      	cmp	r2, #0
  422dd0:	f040 84b0 	bne.w	423734 <_vfiprintf_r+0xa18>
  422dd4:	9b03      	ldr	r3, [sp, #12]
  422dd6:	9210      	str	r2, [sp, #64]	; 0x40
  422dd8:	442b      	add	r3, r5
  422dda:	46ca      	mov	sl, r9
  422ddc:	9303      	str	r3, [sp, #12]
  422dde:	7823      	ldrb	r3, [r4, #0]
  422de0:	2b00      	cmp	r3, #0
  422de2:	f000 83e0 	beq.w	4235a6 <_vfiprintf_r+0x88a>
  422de6:	2000      	movs	r0, #0
  422de8:	f04f 0300 	mov.w	r3, #0
  422dec:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  422df0:	f104 0801 	add.w	r8, r4, #1
  422df4:	7862      	ldrb	r2, [r4, #1]
  422df6:	4605      	mov	r5, r0
  422df8:	4606      	mov	r6, r0
  422dfa:	4603      	mov	r3, r0
  422dfc:	f04f 34ff 	mov.w	r4, #4294967295
  422e00:	f108 0801 	add.w	r8, r8, #1
  422e04:	f1a2 0120 	sub.w	r1, r2, #32
  422e08:	2958      	cmp	r1, #88	; 0x58
  422e0a:	f200 82de 	bhi.w	4233ca <_vfiprintf_r+0x6ae>
  422e0e:	e8df f011 	tbh	[pc, r1, lsl #1]
  422e12:	0221      	.short	0x0221
  422e14:	02dc02dc 	.word	0x02dc02dc
  422e18:	02dc0229 	.word	0x02dc0229
  422e1c:	02dc02dc 	.word	0x02dc02dc
  422e20:	02dc02dc 	.word	0x02dc02dc
  422e24:	028902dc 	.word	0x028902dc
  422e28:	02dc0295 	.word	0x02dc0295
  422e2c:	02bd00a2 	.word	0x02bd00a2
  422e30:	019f02dc 	.word	0x019f02dc
  422e34:	01a401a4 	.word	0x01a401a4
  422e38:	01a401a4 	.word	0x01a401a4
  422e3c:	01a401a4 	.word	0x01a401a4
  422e40:	01a401a4 	.word	0x01a401a4
  422e44:	02dc01a4 	.word	0x02dc01a4
  422e48:	02dc02dc 	.word	0x02dc02dc
  422e4c:	02dc02dc 	.word	0x02dc02dc
  422e50:	02dc02dc 	.word	0x02dc02dc
  422e54:	02dc02dc 	.word	0x02dc02dc
  422e58:	01b202dc 	.word	0x01b202dc
  422e5c:	02dc02dc 	.word	0x02dc02dc
  422e60:	02dc02dc 	.word	0x02dc02dc
  422e64:	02dc02dc 	.word	0x02dc02dc
  422e68:	02dc02dc 	.word	0x02dc02dc
  422e6c:	02dc02dc 	.word	0x02dc02dc
  422e70:	02dc0197 	.word	0x02dc0197
  422e74:	02dc02dc 	.word	0x02dc02dc
  422e78:	02dc02dc 	.word	0x02dc02dc
  422e7c:	02dc019b 	.word	0x02dc019b
  422e80:	025302dc 	.word	0x025302dc
  422e84:	02dc02dc 	.word	0x02dc02dc
  422e88:	02dc02dc 	.word	0x02dc02dc
  422e8c:	02dc02dc 	.word	0x02dc02dc
  422e90:	02dc02dc 	.word	0x02dc02dc
  422e94:	02dc02dc 	.word	0x02dc02dc
  422e98:	021b025a 	.word	0x021b025a
  422e9c:	02dc02dc 	.word	0x02dc02dc
  422ea0:	026e02dc 	.word	0x026e02dc
  422ea4:	02dc021b 	.word	0x02dc021b
  422ea8:	027302dc 	.word	0x027302dc
  422eac:	01f502dc 	.word	0x01f502dc
  422eb0:	02090182 	.word	0x02090182
  422eb4:	02dc02d7 	.word	0x02dc02d7
  422eb8:	02dc029a 	.word	0x02dc029a
  422ebc:	02dc00a7 	.word	0x02dc00a7
  422ec0:	022e02dc 	.word	0x022e02dc
  422ec4:	f10a 0a08 	add.w	sl, sl, #8
  422ec8:	9b03      	ldr	r3, [sp, #12]
  422eca:	442b      	add	r3, r5
  422ecc:	9303      	str	r3, [sp, #12]
  422ece:	e786      	b.n	422dde <_vfiprintf_r+0xc2>
  422ed0:	4659      	mov	r1, fp
  422ed2:	9806      	ldr	r0, [sp, #24]
  422ed4:	f000 fdac 	bl	423a30 <__swsetup_r>
  422ed8:	bb18      	cbnz	r0, 422f22 <_vfiprintf_r+0x206>
  422eda:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  422ede:	f001 031a 	and.w	r3, r1, #26
  422ee2:	2b0a      	cmp	r3, #10
  422ee4:	f47f af4b 	bne.w	422d7e <_vfiprintf_r+0x62>
  422ee8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  422eec:	2b00      	cmp	r3, #0
  422eee:	f6ff af46 	blt.w	422d7e <_vfiprintf_r+0x62>
  422ef2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  422ef6:	07db      	lsls	r3, r3, #31
  422ef8:	d405      	bmi.n	422f06 <_vfiprintf_r+0x1ea>
  422efa:	058f      	lsls	r7, r1, #22
  422efc:	d403      	bmi.n	422f06 <_vfiprintf_r+0x1ea>
  422efe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  422f02:	f001 fac3 	bl	42448c <__retarget_lock_release_recursive>
  422f06:	462b      	mov	r3, r5
  422f08:	4642      	mov	r2, r8
  422f0a:	4659      	mov	r1, fp
  422f0c:	9806      	ldr	r0, [sp, #24]
  422f0e:	f000 fd4d 	bl	4239ac <__sbprintf>
  422f12:	9003      	str	r0, [sp, #12]
  422f14:	9803      	ldr	r0, [sp, #12]
  422f16:	b02d      	add	sp, #180	; 0xb4
  422f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422f1c:	f000 fef4 	bl	423d08 <__sinit>
  422f20:	e709      	b.n	422d36 <_vfiprintf_r+0x1a>
  422f22:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  422f26:	07d9      	lsls	r1, r3, #31
  422f28:	d404      	bmi.n	422f34 <_vfiprintf_r+0x218>
  422f2a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  422f2e:	059a      	lsls	r2, r3, #22
  422f30:	f140 84aa 	bpl.w	423888 <_vfiprintf_r+0xb6c>
  422f34:	f04f 33ff 	mov.w	r3, #4294967295
  422f38:	9303      	str	r3, [sp, #12]
  422f3a:	9803      	ldr	r0, [sp, #12]
  422f3c:	b02d      	add	sp, #180	; 0xb4
  422f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  422f42:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  422f46:	f001 fa9f 	bl	424488 <__retarget_lock_acquire_recursive>
  422f4a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  422f4e:	b281      	uxth	r1, r0
  422f50:	e6fb      	b.n	422d4a <_vfiprintf_r+0x2e>
  422f52:	4276      	negs	r6, r6
  422f54:	9207      	str	r2, [sp, #28]
  422f56:	f043 0304 	orr.w	r3, r3, #4
  422f5a:	f898 2000 	ldrb.w	r2, [r8]
  422f5e:	e74f      	b.n	422e00 <_vfiprintf_r+0xe4>
  422f60:	9608      	str	r6, [sp, #32]
  422f62:	069e      	lsls	r6, r3, #26
  422f64:	f100 8450 	bmi.w	423808 <_vfiprintf_r+0xaec>
  422f68:	9907      	ldr	r1, [sp, #28]
  422f6a:	06dd      	lsls	r5, r3, #27
  422f6c:	460a      	mov	r2, r1
  422f6e:	f100 83ef 	bmi.w	423750 <_vfiprintf_r+0xa34>
  422f72:	0658      	lsls	r0, r3, #25
  422f74:	f140 83ec 	bpl.w	423750 <_vfiprintf_r+0xa34>
  422f78:	880e      	ldrh	r6, [r1, #0]
  422f7a:	3104      	adds	r1, #4
  422f7c:	2700      	movs	r7, #0
  422f7e:	2201      	movs	r2, #1
  422f80:	9107      	str	r1, [sp, #28]
  422f82:	f04f 0100 	mov.w	r1, #0
  422f86:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  422f8a:	2500      	movs	r5, #0
  422f8c:	1c61      	adds	r1, r4, #1
  422f8e:	f000 8116 	beq.w	4231be <_vfiprintf_r+0x4a2>
  422f92:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  422f96:	9102      	str	r1, [sp, #8]
  422f98:	ea56 0107 	orrs.w	r1, r6, r7
  422f9c:	f040 8114 	bne.w	4231c8 <_vfiprintf_r+0x4ac>
  422fa0:	2c00      	cmp	r4, #0
  422fa2:	f040 835c 	bne.w	42365e <_vfiprintf_r+0x942>
  422fa6:	2a00      	cmp	r2, #0
  422fa8:	f040 83b7 	bne.w	42371a <_vfiprintf_r+0x9fe>
  422fac:	f013 0301 	ands.w	r3, r3, #1
  422fb0:	9305      	str	r3, [sp, #20]
  422fb2:	f000 8457 	beq.w	423864 <_vfiprintf_r+0xb48>
  422fb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  422fba:	2330      	movs	r3, #48	; 0x30
  422fbc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  422fc0:	9b05      	ldr	r3, [sp, #20]
  422fc2:	42a3      	cmp	r3, r4
  422fc4:	bfb8      	it	lt
  422fc6:	4623      	movlt	r3, r4
  422fc8:	9301      	str	r3, [sp, #4]
  422fca:	b10d      	cbz	r5, 422fd0 <_vfiprintf_r+0x2b4>
  422fcc:	3301      	adds	r3, #1
  422fce:	9301      	str	r3, [sp, #4]
  422fd0:	9b02      	ldr	r3, [sp, #8]
  422fd2:	f013 0302 	ands.w	r3, r3, #2
  422fd6:	9309      	str	r3, [sp, #36]	; 0x24
  422fd8:	d002      	beq.n	422fe0 <_vfiprintf_r+0x2c4>
  422fda:	9b01      	ldr	r3, [sp, #4]
  422fdc:	3302      	adds	r3, #2
  422fde:	9301      	str	r3, [sp, #4]
  422fe0:	9b02      	ldr	r3, [sp, #8]
  422fe2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  422fe6:	930a      	str	r3, [sp, #40]	; 0x28
  422fe8:	f040 8217 	bne.w	42341a <_vfiprintf_r+0x6fe>
  422fec:	9b08      	ldr	r3, [sp, #32]
  422fee:	9a01      	ldr	r2, [sp, #4]
  422ff0:	1a9d      	subs	r5, r3, r2
  422ff2:	2d00      	cmp	r5, #0
  422ff4:	f340 8211 	ble.w	42341a <_vfiprintf_r+0x6fe>
  422ff8:	2d10      	cmp	r5, #16
  422ffa:	f340 8490 	ble.w	42391e <_vfiprintf_r+0xc02>
  422ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  423000:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423002:	4ec4      	ldr	r6, [pc, #784]	; (423314 <_vfiprintf_r+0x5f8>)
  423004:	46d6      	mov	lr, sl
  423006:	2710      	movs	r7, #16
  423008:	46a2      	mov	sl, r4
  42300a:	4619      	mov	r1, r3
  42300c:	9c06      	ldr	r4, [sp, #24]
  42300e:	e007      	b.n	423020 <_vfiprintf_r+0x304>
  423010:	f101 0c02 	add.w	ip, r1, #2
  423014:	f10e 0e08 	add.w	lr, lr, #8
  423018:	4601      	mov	r1, r0
  42301a:	3d10      	subs	r5, #16
  42301c:	2d10      	cmp	r5, #16
  42301e:	dd11      	ble.n	423044 <_vfiprintf_r+0x328>
  423020:	1c48      	adds	r0, r1, #1
  423022:	3210      	adds	r2, #16
  423024:	2807      	cmp	r0, #7
  423026:	9211      	str	r2, [sp, #68]	; 0x44
  423028:	e88e 00c0 	stmia.w	lr, {r6, r7}
  42302c:	9010      	str	r0, [sp, #64]	; 0x40
  42302e:	ddef      	ble.n	423010 <_vfiprintf_r+0x2f4>
  423030:	2a00      	cmp	r2, #0
  423032:	f040 81e4 	bne.w	4233fe <_vfiprintf_r+0x6e2>
  423036:	3d10      	subs	r5, #16
  423038:	2d10      	cmp	r5, #16
  42303a:	4611      	mov	r1, r2
  42303c:	f04f 0c01 	mov.w	ip, #1
  423040:	46ce      	mov	lr, r9
  423042:	dced      	bgt.n	423020 <_vfiprintf_r+0x304>
  423044:	4654      	mov	r4, sl
  423046:	4661      	mov	r1, ip
  423048:	46f2      	mov	sl, lr
  42304a:	442a      	add	r2, r5
  42304c:	2907      	cmp	r1, #7
  42304e:	9211      	str	r2, [sp, #68]	; 0x44
  423050:	f8ca 6000 	str.w	r6, [sl]
  423054:	f8ca 5004 	str.w	r5, [sl, #4]
  423058:	9110      	str	r1, [sp, #64]	; 0x40
  42305a:	f300 82ec 	bgt.w	423636 <_vfiprintf_r+0x91a>
  42305e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423062:	f10a 0a08 	add.w	sl, sl, #8
  423066:	1c48      	adds	r0, r1, #1
  423068:	2d00      	cmp	r5, #0
  42306a:	f040 81de 	bne.w	42342a <_vfiprintf_r+0x70e>
  42306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  423070:	2b00      	cmp	r3, #0
  423072:	f000 81f8 	beq.w	423466 <_vfiprintf_r+0x74a>
  423076:	3202      	adds	r2, #2
  423078:	a90e      	add	r1, sp, #56	; 0x38
  42307a:	2302      	movs	r3, #2
  42307c:	2807      	cmp	r0, #7
  42307e:	9211      	str	r2, [sp, #68]	; 0x44
  423080:	9010      	str	r0, [sp, #64]	; 0x40
  423082:	e88a 000a 	stmia.w	sl, {r1, r3}
  423086:	f340 81ea 	ble.w	42345e <_vfiprintf_r+0x742>
  42308a:	2a00      	cmp	r2, #0
  42308c:	f040 838c 	bne.w	4237a8 <_vfiprintf_r+0xa8c>
  423090:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  423092:	2b80      	cmp	r3, #128	; 0x80
  423094:	f04f 0001 	mov.w	r0, #1
  423098:	4611      	mov	r1, r2
  42309a:	46ca      	mov	sl, r9
  42309c:	f040 81e7 	bne.w	42346e <_vfiprintf_r+0x752>
  4230a0:	9b08      	ldr	r3, [sp, #32]
  4230a2:	9d01      	ldr	r5, [sp, #4]
  4230a4:	1b5e      	subs	r6, r3, r5
  4230a6:	2e00      	cmp	r6, #0
  4230a8:	f340 81e1 	ble.w	42346e <_vfiprintf_r+0x752>
  4230ac:	2e10      	cmp	r6, #16
  4230ae:	4d9a      	ldr	r5, [pc, #616]	; (423318 <_vfiprintf_r+0x5fc>)
  4230b0:	f340 8450 	ble.w	423954 <_vfiprintf_r+0xc38>
  4230b4:	46d4      	mov	ip, sl
  4230b6:	2710      	movs	r7, #16
  4230b8:	46a2      	mov	sl, r4
  4230ba:	9c06      	ldr	r4, [sp, #24]
  4230bc:	e007      	b.n	4230ce <_vfiprintf_r+0x3b2>
  4230be:	f101 0e02 	add.w	lr, r1, #2
  4230c2:	f10c 0c08 	add.w	ip, ip, #8
  4230c6:	4601      	mov	r1, r0
  4230c8:	3e10      	subs	r6, #16
  4230ca:	2e10      	cmp	r6, #16
  4230cc:	dd11      	ble.n	4230f2 <_vfiprintf_r+0x3d6>
  4230ce:	1c48      	adds	r0, r1, #1
  4230d0:	3210      	adds	r2, #16
  4230d2:	2807      	cmp	r0, #7
  4230d4:	9211      	str	r2, [sp, #68]	; 0x44
  4230d6:	e88c 00a0 	stmia.w	ip, {r5, r7}
  4230da:	9010      	str	r0, [sp, #64]	; 0x40
  4230dc:	ddef      	ble.n	4230be <_vfiprintf_r+0x3a2>
  4230de:	2a00      	cmp	r2, #0
  4230e0:	f040 829d 	bne.w	42361e <_vfiprintf_r+0x902>
  4230e4:	3e10      	subs	r6, #16
  4230e6:	2e10      	cmp	r6, #16
  4230e8:	f04f 0e01 	mov.w	lr, #1
  4230ec:	4611      	mov	r1, r2
  4230ee:	46cc      	mov	ip, r9
  4230f0:	dced      	bgt.n	4230ce <_vfiprintf_r+0x3b2>
  4230f2:	4654      	mov	r4, sl
  4230f4:	46e2      	mov	sl, ip
  4230f6:	4432      	add	r2, r6
  4230f8:	f1be 0f07 	cmp.w	lr, #7
  4230fc:	9211      	str	r2, [sp, #68]	; 0x44
  4230fe:	e88a 0060 	stmia.w	sl, {r5, r6}
  423102:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  423106:	f300 8369 	bgt.w	4237dc <_vfiprintf_r+0xac0>
  42310a:	f10a 0a08 	add.w	sl, sl, #8
  42310e:	f10e 0001 	add.w	r0, lr, #1
  423112:	4671      	mov	r1, lr
  423114:	e1ab      	b.n	42346e <_vfiprintf_r+0x752>
  423116:	9608      	str	r6, [sp, #32]
  423118:	f013 0220 	ands.w	r2, r3, #32
  42311c:	f040 838c 	bne.w	423838 <_vfiprintf_r+0xb1c>
  423120:	f013 0110 	ands.w	r1, r3, #16
  423124:	f040 831a 	bne.w	42375c <_vfiprintf_r+0xa40>
  423128:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  42312c:	f000 8316 	beq.w	42375c <_vfiprintf_r+0xa40>
  423130:	9807      	ldr	r0, [sp, #28]
  423132:	460a      	mov	r2, r1
  423134:	4601      	mov	r1, r0
  423136:	3104      	adds	r1, #4
  423138:	8806      	ldrh	r6, [r0, #0]
  42313a:	9107      	str	r1, [sp, #28]
  42313c:	2700      	movs	r7, #0
  42313e:	e720      	b.n	422f82 <_vfiprintf_r+0x266>
  423140:	9608      	str	r6, [sp, #32]
  423142:	f043 0310 	orr.w	r3, r3, #16
  423146:	e7e7      	b.n	423118 <_vfiprintf_r+0x3fc>
  423148:	9608      	str	r6, [sp, #32]
  42314a:	f043 0310 	orr.w	r3, r3, #16
  42314e:	e708      	b.n	422f62 <_vfiprintf_r+0x246>
  423150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  423154:	f898 2000 	ldrb.w	r2, [r8]
  423158:	e652      	b.n	422e00 <_vfiprintf_r+0xe4>
  42315a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42315e:	2600      	movs	r6, #0
  423160:	f818 2b01 	ldrb.w	r2, [r8], #1
  423164:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  423168:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  42316c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  423170:	2909      	cmp	r1, #9
  423172:	d9f5      	bls.n	423160 <_vfiprintf_r+0x444>
  423174:	e646      	b.n	422e04 <_vfiprintf_r+0xe8>
  423176:	9608      	str	r6, [sp, #32]
  423178:	2800      	cmp	r0, #0
  42317a:	f040 8408 	bne.w	42398e <_vfiprintf_r+0xc72>
  42317e:	f043 0310 	orr.w	r3, r3, #16
  423182:	069e      	lsls	r6, r3, #26
  423184:	f100 834c 	bmi.w	423820 <_vfiprintf_r+0xb04>
  423188:	06dd      	lsls	r5, r3, #27
  42318a:	f100 82f3 	bmi.w	423774 <_vfiprintf_r+0xa58>
  42318e:	0658      	lsls	r0, r3, #25
  423190:	f140 82f0 	bpl.w	423774 <_vfiprintf_r+0xa58>
  423194:	9d07      	ldr	r5, [sp, #28]
  423196:	f9b5 6000 	ldrsh.w	r6, [r5]
  42319a:	462a      	mov	r2, r5
  42319c:	17f7      	asrs	r7, r6, #31
  42319e:	3204      	adds	r2, #4
  4231a0:	4630      	mov	r0, r6
  4231a2:	4639      	mov	r1, r7
  4231a4:	9207      	str	r2, [sp, #28]
  4231a6:	2800      	cmp	r0, #0
  4231a8:	f171 0200 	sbcs.w	r2, r1, #0
  4231ac:	f2c0 835d 	blt.w	42386a <_vfiprintf_r+0xb4e>
  4231b0:	1c61      	adds	r1, r4, #1
  4231b2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4231b6:	f04f 0201 	mov.w	r2, #1
  4231ba:	f47f aeea 	bne.w	422f92 <_vfiprintf_r+0x276>
  4231be:	ea56 0107 	orrs.w	r1, r6, r7
  4231c2:	f000 824d 	beq.w	423660 <_vfiprintf_r+0x944>
  4231c6:	9302      	str	r3, [sp, #8]
  4231c8:	2a01      	cmp	r2, #1
  4231ca:	f000 828c 	beq.w	4236e6 <_vfiprintf_r+0x9ca>
  4231ce:	2a02      	cmp	r2, #2
  4231d0:	f040 825c 	bne.w	42368c <_vfiprintf_r+0x970>
  4231d4:	980b      	ldr	r0, [sp, #44]	; 0x2c
  4231d6:	46cb      	mov	fp, r9
  4231d8:	0933      	lsrs	r3, r6, #4
  4231da:	f006 010f 	and.w	r1, r6, #15
  4231de:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4231e2:	093a      	lsrs	r2, r7, #4
  4231e4:	461e      	mov	r6, r3
  4231e6:	4617      	mov	r7, r2
  4231e8:	5c43      	ldrb	r3, [r0, r1]
  4231ea:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4231ee:	ea56 0307 	orrs.w	r3, r6, r7
  4231f2:	d1f1      	bne.n	4231d8 <_vfiprintf_r+0x4bc>
  4231f4:	eba9 030b 	sub.w	r3, r9, fp
  4231f8:	9305      	str	r3, [sp, #20]
  4231fa:	e6e1      	b.n	422fc0 <_vfiprintf_r+0x2a4>
  4231fc:	2800      	cmp	r0, #0
  4231fe:	f040 83c0 	bne.w	423982 <_vfiprintf_r+0xc66>
  423202:	0699      	lsls	r1, r3, #26
  423204:	f100 8367 	bmi.w	4238d6 <_vfiprintf_r+0xbba>
  423208:	06da      	lsls	r2, r3, #27
  42320a:	f100 80f1 	bmi.w	4233f0 <_vfiprintf_r+0x6d4>
  42320e:	065b      	lsls	r3, r3, #25
  423210:	f140 80ee 	bpl.w	4233f0 <_vfiprintf_r+0x6d4>
  423214:	9a07      	ldr	r2, [sp, #28]
  423216:	6813      	ldr	r3, [r2, #0]
  423218:	3204      	adds	r2, #4
  42321a:	9207      	str	r2, [sp, #28]
  42321c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  423220:	801a      	strh	r2, [r3, #0]
  423222:	e5b8      	b.n	422d96 <_vfiprintf_r+0x7a>
  423224:	9807      	ldr	r0, [sp, #28]
  423226:	4a3d      	ldr	r2, [pc, #244]	; (42331c <_vfiprintf_r+0x600>)
  423228:	9608      	str	r6, [sp, #32]
  42322a:	920b      	str	r2, [sp, #44]	; 0x2c
  42322c:	6806      	ldr	r6, [r0, #0]
  42322e:	2278      	movs	r2, #120	; 0x78
  423230:	2130      	movs	r1, #48	; 0x30
  423232:	3004      	adds	r0, #4
  423234:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  423238:	f043 0302 	orr.w	r3, r3, #2
  42323c:	9007      	str	r0, [sp, #28]
  42323e:	2700      	movs	r7, #0
  423240:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  423244:	2202      	movs	r2, #2
  423246:	e69c      	b.n	422f82 <_vfiprintf_r+0x266>
  423248:	9608      	str	r6, [sp, #32]
  42324a:	2800      	cmp	r0, #0
  42324c:	d099      	beq.n	423182 <_vfiprintf_r+0x466>
  42324e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  423252:	e796      	b.n	423182 <_vfiprintf_r+0x466>
  423254:	f898 2000 	ldrb.w	r2, [r8]
  423258:	2d00      	cmp	r5, #0
  42325a:	f47f add1 	bne.w	422e00 <_vfiprintf_r+0xe4>
  42325e:	2001      	movs	r0, #1
  423260:	2520      	movs	r5, #32
  423262:	e5cd      	b.n	422e00 <_vfiprintf_r+0xe4>
  423264:	f043 0301 	orr.w	r3, r3, #1
  423268:	f898 2000 	ldrb.w	r2, [r8]
  42326c:	e5c8      	b.n	422e00 <_vfiprintf_r+0xe4>
  42326e:	9608      	str	r6, [sp, #32]
  423270:	2800      	cmp	r0, #0
  423272:	f040 8393 	bne.w	42399c <_vfiprintf_r+0xc80>
  423276:	4929      	ldr	r1, [pc, #164]	; (42331c <_vfiprintf_r+0x600>)
  423278:	910b      	str	r1, [sp, #44]	; 0x2c
  42327a:	069f      	lsls	r7, r3, #26
  42327c:	f100 82e8 	bmi.w	423850 <_vfiprintf_r+0xb34>
  423280:	9807      	ldr	r0, [sp, #28]
  423282:	06de      	lsls	r6, r3, #27
  423284:	4601      	mov	r1, r0
  423286:	f100 8270 	bmi.w	42376a <_vfiprintf_r+0xa4e>
  42328a:	065d      	lsls	r5, r3, #25
  42328c:	f140 826d 	bpl.w	42376a <_vfiprintf_r+0xa4e>
  423290:	3104      	adds	r1, #4
  423292:	8806      	ldrh	r6, [r0, #0]
  423294:	9107      	str	r1, [sp, #28]
  423296:	2700      	movs	r7, #0
  423298:	07d8      	lsls	r0, r3, #31
  42329a:	f140 8222 	bpl.w	4236e2 <_vfiprintf_r+0x9c6>
  42329e:	ea56 0107 	orrs.w	r1, r6, r7
  4232a2:	f000 821e 	beq.w	4236e2 <_vfiprintf_r+0x9c6>
  4232a6:	2130      	movs	r1, #48	; 0x30
  4232a8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4232ac:	f043 0302 	orr.w	r3, r3, #2
  4232b0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4232b4:	2202      	movs	r2, #2
  4232b6:	e664      	b.n	422f82 <_vfiprintf_r+0x266>
  4232b8:	9608      	str	r6, [sp, #32]
  4232ba:	2800      	cmp	r0, #0
  4232bc:	f040 836b 	bne.w	423996 <_vfiprintf_r+0xc7a>
  4232c0:	4917      	ldr	r1, [pc, #92]	; (423320 <_vfiprintf_r+0x604>)
  4232c2:	910b      	str	r1, [sp, #44]	; 0x2c
  4232c4:	e7d9      	b.n	42327a <_vfiprintf_r+0x55e>
  4232c6:	9907      	ldr	r1, [sp, #28]
  4232c8:	9608      	str	r6, [sp, #32]
  4232ca:	680a      	ldr	r2, [r1, #0]
  4232cc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4232d0:	f04f 0000 	mov.w	r0, #0
  4232d4:	460a      	mov	r2, r1
  4232d6:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  4232da:	3204      	adds	r2, #4
  4232dc:	2001      	movs	r0, #1
  4232de:	9001      	str	r0, [sp, #4]
  4232e0:	9207      	str	r2, [sp, #28]
  4232e2:	9005      	str	r0, [sp, #20]
  4232e4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4232e8:	9302      	str	r3, [sp, #8]
  4232ea:	2400      	movs	r4, #0
  4232ec:	e670      	b.n	422fd0 <_vfiprintf_r+0x2b4>
  4232ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4232f2:	f898 2000 	ldrb.w	r2, [r8]
  4232f6:	e583      	b.n	422e00 <_vfiprintf_r+0xe4>
  4232f8:	f898 2000 	ldrb.w	r2, [r8]
  4232fc:	2a6c      	cmp	r2, #108	; 0x6c
  4232fe:	bf03      	ittte	eq
  423300:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  423304:	f043 0320 	orreq.w	r3, r3, #32
  423308:	f108 0801 	addeq.w	r8, r8, #1
  42330c:	f043 0310 	orrne.w	r3, r3, #16
  423310:	e576      	b.n	422e00 <_vfiprintf_r+0xe4>
  423312:	bf00      	nop
  423314:	0042b7ec 	.word	0x0042b7ec
  423318:	0042b7fc 	.word	0x0042b7fc
  42331c:	0042b7d0 	.word	0x0042b7d0
  423320:	0042b7bc 	.word	0x0042b7bc
  423324:	9907      	ldr	r1, [sp, #28]
  423326:	680e      	ldr	r6, [r1, #0]
  423328:	460a      	mov	r2, r1
  42332a:	2e00      	cmp	r6, #0
  42332c:	f102 0204 	add.w	r2, r2, #4
  423330:	f6ff ae0f 	blt.w	422f52 <_vfiprintf_r+0x236>
  423334:	9207      	str	r2, [sp, #28]
  423336:	f898 2000 	ldrb.w	r2, [r8]
  42333a:	e561      	b.n	422e00 <_vfiprintf_r+0xe4>
  42333c:	f898 2000 	ldrb.w	r2, [r8]
  423340:	2001      	movs	r0, #1
  423342:	252b      	movs	r5, #43	; 0x2b
  423344:	e55c      	b.n	422e00 <_vfiprintf_r+0xe4>
  423346:	9907      	ldr	r1, [sp, #28]
  423348:	9608      	str	r6, [sp, #32]
  42334a:	f8d1 b000 	ldr.w	fp, [r1]
  42334e:	f04f 0200 	mov.w	r2, #0
  423352:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  423356:	1d0e      	adds	r6, r1, #4
  423358:	f1bb 0f00 	cmp.w	fp, #0
  42335c:	f000 82e5 	beq.w	42392a <_vfiprintf_r+0xc0e>
  423360:	1c67      	adds	r7, r4, #1
  423362:	f000 82c4 	beq.w	4238ee <_vfiprintf_r+0xbd2>
  423366:	4622      	mov	r2, r4
  423368:	2100      	movs	r1, #0
  42336a:	4658      	mov	r0, fp
  42336c:	9301      	str	r3, [sp, #4]
  42336e:	f001 f91f 	bl	4245b0 <memchr>
  423372:	9b01      	ldr	r3, [sp, #4]
  423374:	2800      	cmp	r0, #0
  423376:	f000 82e5 	beq.w	423944 <_vfiprintf_r+0xc28>
  42337a:	eba0 020b 	sub.w	r2, r0, fp
  42337e:	9205      	str	r2, [sp, #20]
  423380:	9607      	str	r6, [sp, #28]
  423382:	9302      	str	r3, [sp, #8]
  423384:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423388:	2400      	movs	r4, #0
  42338a:	e619      	b.n	422fc0 <_vfiprintf_r+0x2a4>
  42338c:	f898 2000 	ldrb.w	r2, [r8]
  423390:	2a2a      	cmp	r2, #42	; 0x2a
  423392:	f108 0701 	add.w	r7, r8, #1
  423396:	f000 82e9 	beq.w	42396c <_vfiprintf_r+0xc50>
  42339a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  42339e:	2909      	cmp	r1, #9
  4233a0:	46b8      	mov	r8, r7
  4233a2:	f04f 0400 	mov.w	r4, #0
  4233a6:	f63f ad2d 	bhi.w	422e04 <_vfiprintf_r+0xe8>
  4233aa:	f818 2b01 	ldrb.w	r2, [r8], #1
  4233ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4233b2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  4233b6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4233ba:	2909      	cmp	r1, #9
  4233bc:	d9f5      	bls.n	4233aa <_vfiprintf_r+0x68e>
  4233be:	e521      	b.n	422e04 <_vfiprintf_r+0xe8>
  4233c0:	f043 0320 	orr.w	r3, r3, #32
  4233c4:	f898 2000 	ldrb.w	r2, [r8]
  4233c8:	e51a      	b.n	422e00 <_vfiprintf_r+0xe4>
  4233ca:	9608      	str	r6, [sp, #32]
  4233cc:	2800      	cmp	r0, #0
  4233ce:	f040 82db 	bne.w	423988 <_vfiprintf_r+0xc6c>
  4233d2:	2a00      	cmp	r2, #0
  4233d4:	f000 80e7 	beq.w	4235a6 <_vfiprintf_r+0x88a>
  4233d8:	2101      	movs	r1, #1
  4233da:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  4233de:	f04f 0200 	mov.w	r2, #0
  4233e2:	9101      	str	r1, [sp, #4]
  4233e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4233e8:	9105      	str	r1, [sp, #20]
  4233ea:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4233ee:	e77b      	b.n	4232e8 <_vfiprintf_r+0x5cc>
  4233f0:	9a07      	ldr	r2, [sp, #28]
  4233f2:	6813      	ldr	r3, [r2, #0]
  4233f4:	3204      	adds	r2, #4
  4233f6:	9207      	str	r2, [sp, #28]
  4233f8:	9a03      	ldr	r2, [sp, #12]
  4233fa:	601a      	str	r2, [r3, #0]
  4233fc:	e4cb      	b.n	422d96 <_vfiprintf_r+0x7a>
  4233fe:	aa0f      	add	r2, sp, #60	; 0x3c
  423400:	9904      	ldr	r1, [sp, #16]
  423402:	4620      	mov	r0, r4
  423404:	f7ff fc4a 	bl	422c9c <__sprint_r.part.0>
  423408:	2800      	cmp	r0, #0
  42340a:	f040 8139 	bne.w	423680 <_vfiprintf_r+0x964>
  42340e:	9910      	ldr	r1, [sp, #64]	; 0x40
  423410:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423412:	f101 0c01 	add.w	ip, r1, #1
  423416:	46ce      	mov	lr, r9
  423418:	e5ff      	b.n	42301a <_vfiprintf_r+0x2fe>
  42341a:	9910      	ldr	r1, [sp, #64]	; 0x40
  42341c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42341e:	1c48      	adds	r0, r1, #1
  423420:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423424:	2d00      	cmp	r5, #0
  423426:	f43f ae22 	beq.w	42306e <_vfiprintf_r+0x352>
  42342a:	3201      	adds	r2, #1
  42342c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  423430:	2101      	movs	r1, #1
  423432:	2807      	cmp	r0, #7
  423434:	9211      	str	r2, [sp, #68]	; 0x44
  423436:	9010      	str	r0, [sp, #64]	; 0x40
  423438:	f8ca 5000 	str.w	r5, [sl]
  42343c:	f8ca 1004 	str.w	r1, [sl, #4]
  423440:	f340 8108 	ble.w	423654 <_vfiprintf_r+0x938>
  423444:	2a00      	cmp	r2, #0
  423446:	f040 81bc 	bne.w	4237c2 <_vfiprintf_r+0xaa6>
  42344a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42344c:	2b00      	cmp	r3, #0
  42344e:	f43f ae1f 	beq.w	423090 <_vfiprintf_r+0x374>
  423452:	ab0e      	add	r3, sp, #56	; 0x38
  423454:	2202      	movs	r2, #2
  423456:	4608      	mov	r0, r1
  423458:	931c      	str	r3, [sp, #112]	; 0x70
  42345a:	921d      	str	r2, [sp, #116]	; 0x74
  42345c:	46ca      	mov	sl, r9
  42345e:	4601      	mov	r1, r0
  423460:	f10a 0a08 	add.w	sl, sl, #8
  423464:	3001      	adds	r0, #1
  423466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  423468:	2b80      	cmp	r3, #128	; 0x80
  42346a:	f43f ae19 	beq.w	4230a0 <_vfiprintf_r+0x384>
  42346e:	9b05      	ldr	r3, [sp, #20]
  423470:	1ae4      	subs	r4, r4, r3
  423472:	2c00      	cmp	r4, #0
  423474:	dd2e      	ble.n	4234d4 <_vfiprintf_r+0x7b8>
  423476:	2c10      	cmp	r4, #16
  423478:	4db3      	ldr	r5, [pc, #716]	; (423748 <_vfiprintf_r+0xa2c>)
  42347a:	dd1e      	ble.n	4234ba <_vfiprintf_r+0x79e>
  42347c:	46d6      	mov	lr, sl
  42347e:	2610      	movs	r6, #16
  423480:	9f06      	ldr	r7, [sp, #24]
  423482:	f8dd a010 	ldr.w	sl, [sp, #16]
  423486:	e006      	b.n	423496 <_vfiprintf_r+0x77a>
  423488:	1c88      	adds	r0, r1, #2
  42348a:	f10e 0e08 	add.w	lr, lr, #8
  42348e:	4619      	mov	r1, r3
  423490:	3c10      	subs	r4, #16
  423492:	2c10      	cmp	r4, #16
  423494:	dd10      	ble.n	4234b8 <_vfiprintf_r+0x79c>
  423496:	1c4b      	adds	r3, r1, #1
  423498:	3210      	adds	r2, #16
  42349a:	2b07      	cmp	r3, #7
  42349c:	9211      	str	r2, [sp, #68]	; 0x44
  42349e:	e88e 0060 	stmia.w	lr, {r5, r6}
  4234a2:	9310      	str	r3, [sp, #64]	; 0x40
  4234a4:	ddf0      	ble.n	423488 <_vfiprintf_r+0x76c>
  4234a6:	2a00      	cmp	r2, #0
  4234a8:	d165      	bne.n	423576 <_vfiprintf_r+0x85a>
  4234aa:	3c10      	subs	r4, #16
  4234ac:	2c10      	cmp	r4, #16
  4234ae:	f04f 0001 	mov.w	r0, #1
  4234b2:	4611      	mov	r1, r2
  4234b4:	46ce      	mov	lr, r9
  4234b6:	dcee      	bgt.n	423496 <_vfiprintf_r+0x77a>
  4234b8:	46f2      	mov	sl, lr
  4234ba:	4422      	add	r2, r4
  4234bc:	2807      	cmp	r0, #7
  4234be:	9211      	str	r2, [sp, #68]	; 0x44
  4234c0:	f8ca 5000 	str.w	r5, [sl]
  4234c4:	f8ca 4004 	str.w	r4, [sl, #4]
  4234c8:	9010      	str	r0, [sp, #64]	; 0x40
  4234ca:	f300 8085 	bgt.w	4235d8 <_vfiprintf_r+0x8bc>
  4234ce:	f10a 0a08 	add.w	sl, sl, #8
  4234d2:	3001      	adds	r0, #1
  4234d4:	9905      	ldr	r1, [sp, #20]
  4234d6:	f8ca b000 	str.w	fp, [sl]
  4234da:	440a      	add	r2, r1
  4234dc:	2807      	cmp	r0, #7
  4234de:	9211      	str	r2, [sp, #68]	; 0x44
  4234e0:	f8ca 1004 	str.w	r1, [sl, #4]
  4234e4:	9010      	str	r0, [sp, #64]	; 0x40
  4234e6:	f340 8082 	ble.w	4235ee <_vfiprintf_r+0x8d2>
  4234ea:	2a00      	cmp	r2, #0
  4234ec:	f040 8118 	bne.w	423720 <_vfiprintf_r+0xa04>
  4234f0:	9b02      	ldr	r3, [sp, #8]
  4234f2:	9210      	str	r2, [sp, #64]	; 0x40
  4234f4:	0758      	lsls	r0, r3, #29
  4234f6:	d535      	bpl.n	423564 <_vfiprintf_r+0x848>
  4234f8:	9b08      	ldr	r3, [sp, #32]
  4234fa:	9901      	ldr	r1, [sp, #4]
  4234fc:	1a5c      	subs	r4, r3, r1
  4234fe:	2c00      	cmp	r4, #0
  423500:	f340 80e7 	ble.w	4236d2 <_vfiprintf_r+0x9b6>
  423504:	46ca      	mov	sl, r9
  423506:	2c10      	cmp	r4, #16
  423508:	f340 8218 	ble.w	42393c <_vfiprintf_r+0xc20>
  42350c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42350e:	4e8f      	ldr	r6, [pc, #572]	; (42374c <_vfiprintf_r+0xa30>)
  423510:	9f06      	ldr	r7, [sp, #24]
  423512:	f8dd b010 	ldr.w	fp, [sp, #16]
  423516:	2510      	movs	r5, #16
  423518:	e006      	b.n	423528 <_vfiprintf_r+0x80c>
  42351a:	1c88      	adds	r0, r1, #2
  42351c:	f10a 0a08 	add.w	sl, sl, #8
  423520:	4619      	mov	r1, r3
  423522:	3c10      	subs	r4, #16
  423524:	2c10      	cmp	r4, #16
  423526:	dd11      	ble.n	42354c <_vfiprintf_r+0x830>
  423528:	1c4b      	adds	r3, r1, #1
  42352a:	3210      	adds	r2, #16
  42352c:	2b07      	cmp	r3, #7
  42352e:	9211      	str	r2, [sp, #68]	; 0x44
  423530:	f8ca 6000 	str.w	r6, [sl]
  423534:	f8ca 5004 	str.w	r5, [sl, #4]
  423538:	9310      	str	r3, [sp, #64]	; 0x40
  42353a:	ddee      	ble.n	42351a <_vfiprintf_r+0x7fe>
  42353c:	bb42      	cbnz	r2, 423590 <_vfiprintf_r+0x874>
  42353e:	3c10      	subs	r4, #16
  423540:	2c10      	cmp	r4, #16
  423542:	f04f 0001 	mov.w	r0, #1
  423546:	4611      	mov	r1, r2
  423548:	46ca      	mov	sl, r9
  42354a:	dced      	bgt.n	423528 <_vfiprintf_r+0x80c>
  42354c:	4422      	add	r2, r4
  42354e:	2807      	cmp	r0, #7
  423550:	9211      	str	r2, [sp, #68]	; 0x44
  423552:	f8ca 6000 	str.w	r6, [sl]
  423556:	f8ca 4004 	str.w	r4, [sl, #4]
  42355a:	9010      	str	r0, [sp, #64]	; 0x40
  42355c:	dd51      	ble.n	423602 <_vfiprintf_r+0x8e6>
  42355e:	2a00      	cmp	r2, #0
  423560:	f040 819b 	bne.w	42389a <_vfiprintf_r+0xb7e>
  423564:	9b03      	ldr	r3, [sp, #12]
  423566:	9a08      	ldr	r2, [sp, #32]
  423568:	9901      	ldr	r1, [sp, #4]
  42356a:	428a      	cmp	r2, r1
  42356c:	bfac      	ite	ge
  42356e:	189b      	addge	r3, r3, r2
  423570:	185b      	addlt	r3, r3, r1
  423572:	9303      	str	r3, [sp, #12]
  423574:	e04e      	b.n	423614 <_vfiprintf_r+0x8f8>
  423576:	aa0f      	add	r2, sp, #60	; 0x3c
  423578:	4651      	mov	r1, sl
  42357a:	4638      	mov	r0, r7
  42357c:	f7ff fb8e 	bl	422c9c <__sprint_r.part.0>
  423580:	2800      	cmp	r0, #0
  423582:	f040 813f 	bne.w	423804 <_vfiprintf_r+0xae8>
  423586:	9910      	ldr	r1, [sp, #64]	; 0x40
  423588:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42358a:	1c48      	adds	r0, r1, #1
  42358c:	46ce      	mov	lr, r9
  42358e:	e77f      	b.n	423490 <_vfiprintf_r+0x774>
  423590:	aa0f      	add	r2, sp, #60	; 0x3c
  423592:	4659      	mov	r1, fp
  423594:	4638      	mov	r0, r7
  423596:	f7ff fb81 	bl	422c9c <__sprint_r.part.0>
  42359a:	b960      	cbnz	r0, 4235b6 <_vfiprintf_r+0x89a>
  42359c:	9910      	ldr	r1, [sp, #64]	; 0x40
  42359e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4235a0:	1c48      	adds	r0, r1, #1
  4235a2:	46ca      	mov	sl, r9
  4235a4:	e7bd      	b.n	423522 <_vfiprintf_r+0x806>
  4235a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4235a8:	f8dd b010 	ldr.w	fp, [sp, #16]
  4235ac:	2b00      	cmp	r3, #0
  4235ae:	f040 81d4 	bne.w	42395a <_vfiprintf_r+0xc3e>
  4235b2:	2300      	movs	r3, #0
  4235b4:	9310      	str	r3, [sp, #64]	; 0x40
  4235b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4235ba:	f013 0f01 	tst.w	r3, #1
  4235be:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4235c2:	d102      	bne.n	4235ca <_vfiprintf_r+0x8ae>
  4235c4:	059a      	lsls	r2, r3, #22
  4235c6:	f140 80de 	bpl.w	423786 <_vfiprintf_r+0xa6a>
  4235ca:	065b      	lsls	r3, r3, #25
  4235cc:	f53f acb2 	bmi.w	422f34 <_vfiprintf_r+0x218>
  4235d0:	9803      	ldr	r0, [sp, #12]
  4235d2:	b02d      	add	sp, #180	; 0xb4
  4235d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4235d8:	2a00      	cmp	r2, #0
  4235da:	f040 8106 	bne.w	4237ea <_vfiprintf_r+0xace>
  4235de:	9a05      	ldr	r2, [sp, #20]
  4235e0:	921d      	str	r2, [sp, #116]	; 0x74
  4235e2:	2301      	movs	r3, #1
  4235e4:	9211      	str	r2, [sp, #68]	; 0x44
  4235e6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4235ea:	9310      	str	r3, [sp, #64]	; 0x40
  4235ec:	46ca      	mov	sl, r9
  4235ee:	f10a 0a08 	add.w	sl, sl, #8
  4235f2:	9b02      	ldr	r3, [sp, #8]
  4235f4:	0759      	lsls	r1, r3, #29
  4235f6:	d504      	bpl.n	423602 <_vfiprintf_r+0x8e6>
  4235f8:	9b08      	ldr	r3, [sp, #32]
  4235fa:	9901      	ldr	r1, [sp, #4]
  4235fc:	1a5c      	subs	r4, r3, r1
  4235fe:	2c00      	cmp	r4, #0
  423600:	dc81      	bgt.n	423506 <_vfiprintf_r+0x7ea>
  423602:	9b03      	ldr	r3, [sp, #12]
  423604:	9908      	ldr	r1, [sp, #32]
  423606:	9801      	ldr	r0, [sp, #4]
  423608:	4281      	cmp	r1, r0
  42360a:	bfac      	ite	ge
  42360c:	185b      	addge	r3, r3, r1
  42360e:	181b      	addlt	r3, r3, r0
  423610:	9303      	str	r3, [sp, #12]
  423612:	bb72      	cbnz	r2, 423672 <_vfiprintf_r+0x956>
  423614:	2300      	movs	r3, #0
  423616:	9310      	str	r3, [sp, #64]	; 0x40
  423618:	46ca      	mov	sl, r9
  42361a:	f7ff bbbc 	b.w	422d96 <_vfiprintf_r+0x7a>
  42361e:	aa0f      	add	r2, sp, #60	; 0x3c
  423620:	9904      	ldr	r1, [sp, #16]
  423622:	4620      	mov	r0, r4
  423624:	f7ff fb3a 	bl	422c9c <__sprint_r.part.0>
  423628:	bb50      	cbnz	r0, 423680 <_vfiprintf_r+0x964>
  42362a:	9910      	ldr	r1, [sp, #64]	; 0x40
  42362c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  42362e:	f101 0e01 	add.w	lr, r1, #1
  423632:	46cc      	mov	ip, r9
  423634:	e548      	b.n	4230c8 <_vfiprintf_r+0x3ac>
  423636:	2a00      	cmp	r2, #0
  423638:	f040 8140 	bne.w	4238bc <_vfiprintf_r+0xba0>
  42363c:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  423640:	2900      	cmp	r1, #0
  423642:	f000 811b 	beq.w	42387c <_vfiprintf_r+0xb60>
  423646:	2201      	movs	r2, #1
  423648:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  42364c:	4610      	mov	r0, r2
  42364e:	921d      	str	r2, [sp, #116]	; 0x74
  423650:	911c      	str	r1, [sp, #112]	; 0x70
  423652:	46ca      	mov	sl, r9
  423654:	4601      	mov	r1, r0
  423656:	f10a 0a08 	add.w	sl, sl, #8
  42365a:	3001      	adds	r0, #1
  42365c:	e507      	b.n	42306e <_vfiprintf_r+0x352>
  42365e:	9b02      	ldr	r3, [sp, #8]
  423660:	2a01      	cmp	r2, #1
  423662:	f000 8098 	beq.w	423796 <_vfiprintf_r+0xa7a>
  423666:	2a02      	cmp	r2, #2
  423668:	d10d      	bne.n	423686 <_vfiprintf_r+0x96a>
  42366a:	9302      	str	r3, [sp, #8]
  42366c:	2600      	movs	r6, #0
  42366e:	2700      	movs	r7, #0
  423670:	e5b0      	b.n	4231d4 <_vfiprintf_r+0x4b8>
  423672:	aa0f      	add	r2, sp, #60	; 0x3c
  423674:	9904      	ldr	r1, [sp, #16]
  423676:	9806      	ldr	r0, [sp, #24]
  423678:	f7ff fb10 	bl	422c9c <__sprint_r.part.0>
  42367c:	2800      	cmp	r0, #0
  42367e:	d0c9      	beq.n	423614 <_vfiprintf_r+0x8f8>
  423680:	f8dd b010 	ldr.w	fp, [sp, #16]
  423684:	e797      	b.n	4235b6 <_vfiprintf_r+0x89a>
  423686:	9302      	str	r3, [sp, #8]
  423688:	2600      	movs	r6, #0
  42368a:	2700      	movs	r7, #0
  42368c:	4649      	mov	r1, r9
  42368e:	e000      	b.n	423692 <_vfiprintf_r+0x976>
  423690:	4659      	mov	r1, fp
  423692:	08f2      	lsrs	r2, r6, #3
  423694:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  423698:	08f8      	lsrs	r0, r7, #3
  42369a:	f006 0307 	and.w	r3, r6, #7
  42369e:	4607      	mov	r7, r0
  4236a0:	4616      	mov	r6, r2
  4236a2:	3330      	adds	r3, #48	; 0x30
  4236a4:	ea56 0207 	orrs.w	r2, r6, r7
  4236a8:	f801 3c01 	strb.w	r3, [r1, #-1]
  4236ac:	f101 3bff 	add.w	fp, r1, #4294967295
  4236b0:	d1ee      	bne.n	423690 <_vfiprintf_r+0x974>
  4236b2:	9a02      	ldr	r2, [sp, #8]
  4236b4:	07d6      	lsls	r6, r2, #31
  4236b6:	f57f ad9d 	bpl.w	4231f4 <_vfiprintf_r+0x4d8>
  4236ba:	2b30      	cmp	r3, #48	; 0x30
  4236bc:	f43f ad9a 	beq.w	4231f4 <_vfiprintf_r+0x4d8>
  4236c0:	3902      	subs	r1, #2
  4236c2:	2330      	movs	r3, #48	; 0x30
  4236c4:	f80b 3c01 	strb.w	r3, [fp, #-1]
  4236c8:	eba9 0301 	sub.w	r3, r9, r1
  4236cc:	9305      	str	r3, [sp, #20]
  4236ce:	468b      	mov	fp, r1
  4236d0:	e476      	b.n	422fc0 <_vfiprintf_r+0x2a4>
  4236d2:	9b03      	ldr	r3, [sp, #12]
  4236d4:	9a08      	ldr	r2, [sp, #32]
  4236d6:	428a      	cmp	r2, r1
  4236d8:	bfac      	ite	ge
  4236da:	189b      	addge	r3, r3, r2
  4236dc:	185b      	addlt	r3, r3, r1
  4236de:	9303      	str	r3, [sp, #12]
  4236e0:	e798      	b.n	423614 <_vfiprintf_r+0x8f8>
  4236e2:	2202      	movs	r2, #2
  4236e4:	e44d      	b.n	422f82 <_vfiprintf_r+0x266>
  4236e6:	2f00      	cmp	r7, #0
  4236e8:	bf08      	it	eq
  4236ea:	2e0a      	cmpeq	r6, #10
  4236ec:	d352      	bcc.n	423794 <_vfiprintf_r+0xa78>
  4236ee:	46cb      	mov	fp, r9
  4236f0:	4630      	mov	r0, r6
  4236f2:	4639      	mov	r1, r7
  4236f4:	220a      	movs	r2, #10
  4236f6:	2300      	movs	r3, #0
  4236f8:	f7fe f9d2 	bl	421aa0 <__aeabi_uldivmod>
  4236fc:	3230      	adds	r2, #48	; 0x30
  4236fe:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  423702:	4630      	mov	r0, r6
  423704:	4639      	mov	r1, r7
  423706:	2300      	movs	r3, #0
  423708:	220a      	movs	r2, #10
  42370a:	f7fe f9c9 	bl	421aa0 <__aeabi_uldivmod>
  42370e:	4606      	mov	r6, r0
  423710:	460f      	mov	r7, r1
  423712:	ea56 0307 	orrs.w	r3, r6, r7
  423716:	d1eb      	bne.n	4236f0 <_vfiprintf_r+0x9d4>
  423718:	e56c      	b.n	4231f4 <_vfiprintf_r+0x4d8>
  42371a:	9405      	str	r4, [sp, #20]
  42371c:	46cb      	mov	fp, r9
  42371e:	e44f      	b.n	422fc0 <_vfiprintf_r+0x2a4>
  423720:	aa0f      	add	r2, sp, #60	; 0x3c
  423722:	9904      	ldr	r1, [sp, #16]
  423724:	9806      	ldr	r0, [sp, #24]
  423726:	f7ff fab9 	bl	422c9c <__sprint_r.part.0>
  42372a:	2800      	cmp	r0, #0
  42372c:	d1a8      	bne.n	423680 <_vfiprintf_r+0x964>
  42372e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423730:	46ca      	mov	sl, r9
  423732:	e75e      	b.n	4235f2 <_vfiprintf_r+0x8d6>
  423734:	aa0f      	add	r2, sp, #60	; 0x3c
  423736:	9904      	ldr	r1, [sp, #16]
  423738:	9806      	ldr	r0, [sp, #24]
  42373a:	f7ff faaf 	bl	422c9c <__sprint_r.part.0>
  42373e:	2800      	cmp	r0, #0
  423740:	d19e      	bne.n	423680 <_vfiprintf_r+0x964>
  423742:	46ca      	mov	sl, r9
  423744:	f7ff bbc0 	b.w	422ec8 <_vfiprintf_r+0x1ac>
  423748:	0042b7fc 	.word	0x0042b7fc
  42374c:	0042b7ec 	.word	0x0042b7ec
  423750:	3104      	adds	r1, #4
  423752:	6816      	ldr	r6, [r2, #0]
  423754:	9107      	str	r1, [sp, #28]
  423756:	2201      	movs	r2, #1
  423758:	2700      	movs	r7, #0
  42375a:	e412      	b.n	422f82 <_vfiprintf_r+0x266>
  42375c:	9807      	ldr	r0, [sp, #28]
  42375e:	4601      	mov	r1, r0
  423760:	3104      	adds	r1, #4
  423762:	6806      	ldr	r6, [r0, #0]
  423764:	9107      	str	r1, [sp, #28]
  423766:	2700      	movs	r7, #0
  423768:	e40b      	b.n	422f82 <_vfiprintf_r+0x266>
  42376a:	680e      	ldr	r6, [r1, #0]
  42376c:	3104      	adds	r1, #4
  42376e:	9107      	str	r1, [sp, #28]
  423770:	2700      	movs	r7, #0
  423772:	e591      	b.n	423298 <_vfiprintf_r+0x57c>
  423774:	9907      	ldr	r1, [sp, #28]
  423776:	680e      	ldr	r6, [r1, #0]
  423778:	460a      	mov	r2, r1
  42377a:	17f7      	asrs	r7, r6, #31
  42377c:	3204      	adds	r2, #4
  42377e:	9207      	str	r2, [sp, #28]
  423780:	4630      	mov	r0, r6
  423782:	4639      	mov	r1, r7
  423784:	e50f      	b.n	4231a6 <_vfiprintf_r+0x48a>
  423786:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42378a:	f000 fe7f 	bl	42448c <__retarget_lock_release_recursive>
  42378e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  423792:	e71a      	b.n	4235ca <_vfiprintf_r+0x8ae>
  423794:	9b02      	ldr	r3, [sp, #8]
  423796:	9302      	str	r3, [sp, #8]
  423798:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  42379c:	3630      	adds	r6, #48	; 0x30
  42379e:	2301      	movs	r3, #1
  4237a0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  4237a4:	9305      	str	r3, [sp, #20]
  4237a6:	e40b      	b.n	422fc0 <_vfiprintf_r+0x2a4>
  4237a8:	aa0f      	add	r2, sp, #60	; 0x3c
  4237aa:	9904      	ldr	r1, [sp, #16]
  4237ac:	9806      	ldr	r0, [sp, #24]
  4237ae:	f7ff fa75 	bl	422c9c <__sprint_r.part.0>
  4237b2:	2800      	cmp	r0, #0
  4237b4:	f47f af64 	bne.w	423680 <_vfiprintf_r+0x964>
  4237b8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4237ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4237bc:	1c48      	adds	r0, r1, #1
  4237be:	46ca      	mov	sl, r9
  4237c0:	e651      	b.n	423466 <_vfiprintf_r+0x74a>
  4237c2:	aa0f      	add	r2, sp, #60	; 0x3c
  4237c4:	9904      	ldr	r1, [sp, #16]
  4237c6:	9806      	ldr	r0, [sp, #24]
  4237c8:	f7ff fa68 	bl	422c9c <__sprint_r.part.0>
  4237cc:	2800      	cmp	r0, #0
  4237ce:	f47f af57 	bne.w	423680 <_vfiprintf_r+0x964>
  4237d2:	9910      	ldr	r1, [sp, #64]	; 0x40
  4237d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4237d6:	1c48      	adds	r0, r1, #1
  4237d8:	46ca      	mov	sl, r9
  4237da:	e448      	b.n	42306e <_vfiprintf_r+0x352>
  4237dc:	2a00      	cmp	r2, #0
  4237de:	f040 8091 	bne.w	423904 <_vfiprintf_r+0xbe8>
  4237e2:	2001      	movs	r0, #1
  4237e4:	4611      	mov	r1, r2
  4237e6:	46ca      	mov	sl, r9
  4237e8:	e641      	b.n	42346e <_vfiprintf_r+0x752>
  4237ea:	aa0f      	add	r2, sp, #60	; 0x3c
  4237ec:	9904      	ldr	r1, [sp, #16]
  4237ee:	9806      	ldr	r0, [sp, #24]
  4237f0:	f7ff fa54 	bl	422c9c <__sprint_r.part.0>
  4237f4:	2800      	cmp	r0, #0
  4237f6:	f47f af43 	bne.w	423680 <_vfiprintf_r+0x964>
  4237fa:	9810      	ldr	r0, [sp, #64]	; 0x40
  4237fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4237fe:	3001      	adds	r0, #1
  423800:	46ca      	mov	sl, r9
  423802:	e667      	b.n	4234d4 <_vfiprintf_r+0x7b8>
  423804:	46d3      	mov	fp, sl
  423806:	e6d6      	b.n	4235b6 <_vfiprintf_r+0x89a>
  423808:	9e07      	ldr	r6, [sp, #28]
  42380a:	3607      	adds	r6, #7
  42380c:	f026 0207 	bic.w	r2, r6, #7
  423810:	f102 0108 	add.w	r1, r2, #8
  423814:	e9d2 6700 	ldrd	r6, r7, [r2]
  423818:	9107      	str	r1, [sp, #28]
  42381a:	2201      	movs	r2, #1
  42381c:	f7ff bbb1 	b.w	422f82 <_vfiprintf_r+0x266>
  423820:	9e07      	ldr	r6, [sp, #28]
  423822:	3607      	adds	r6, #7
  423824:	f026 0607 	bic.w	r6, r6, #7
  423828:	e9d6 0100 	ldrd	r0, r1, [r6]
  42382c:	f106 0208 	add.w	r2, r6, #8
  423830:	9207      	str	r2, [sp, #28]
  423832:	4606      	mov	r6, r0
  423834:	460f      	mov	r7, r1
  423836:	e4b6      	b.n	4231a6 <_vfiprintf_r+0x48a>
  423838:	9e07      	ldr	r6, [sp, #28]
  42383a:	3607      	adds	r6, #7
  42383c:	f026 0207 	bic.w	r2, r6, #7
  423840:	f102 0108 	add.w	r1, r2, #8
  423844:	e9d2 6700 	ldrd	r6, r7, [r2]
  423848:	9107      	str	r1, [sp, #28]
  42384a:	2200      	movs	r2, #0
  42384c:	f7ff bb99 	b.w	422f82 <_vfiprintf_r+0x266>
  423850:	9e07      	ldr	r6, [sp, #28]
  423852:	3607      	adds	r6, #7
  423854:	f026 0107 	bic.w	r1, r6, #7
  423858:	f101 0008 	add.w	r0, r1, #8
  42385c:	9007      	str	r0, [sp, #28]
  42385e:	e9d1 6700 	ldrd	r6, r7, [r1]
  423862:	e519      	b.n	423298 <_vfiprintf_r+0x57c>
  423864:	46cb      	mov	fp, r9
  423866:	f7ff bbab 	b.w	422fc0 <_vfiprintf_r+0x2a4>
  42386a:	252d      	movs	r5, #45	; 0x2d
  42386c:	4276      	negs	r6, r6
  42386e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  423872:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  423876:	2201      	movs	r2, #1
  423878:	f7ff bb88 	b.w	422f8c <_vfiprintf_r+0x270>
  42387c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  42387e:	b9b3      	cbnz	r3, 4238ae <_vfiprintf_r+0xb92>
  423880:	4611      	mov	r1, r2
  423882:	2001      	movs	r0, #1
  423884:	46ca      	mov	sl, r9
  423886:	e5f2      	b.n	42346e <_vfiprintf_r+0x752>
  423888:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  42388c:	f000 fdfe 	bl	42448c <__retarget_lock_release_recursive>
  423890:	f04f 33ff 	mov.w	r3, #4294967295
  423894:	9303      	str	r3, [sp, #12]
  423896:	f7ff bb50 	b.w	422f3a <_vfiprintf_r+0x21e>
  42389a:	aa0f      	add	r2, sp, #60	; 0x3c
  42389c:	9904      	ldr	r1, [sp, #16]
  42389e:	9806      	ldr	r0, [sp, #24]
  4238a0:	f7ff f9fc 	bl	422c9c <__sprint_r.part.0>
  4238a4:	2800      	cmp	r0, #0
  4238a6:	f47f aeeb 	bne.w	423680 <_vfiprintf_r+0x964>
  4238aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4238ac:	e6a9      	b.n	423602 <_vfiprintf_r+0x8e6>
  4238ae:	ab0e      	add	r3, sp, #56	; 0x38
  4238b0:	2202      	movs	r2, #2
  4238b2:	931c      	str	r3, [sp, #112]	; 0x70
  4238b4:	921d      	str	r2, [sp, #116]	; 0x74
  4238b6:	2001      	movs	r0, #1
  4238b8:	46ca      	mov	sl, r9
  4238ba:	e5d0      	b.n	42345e <_vfiprintf_r+0x742>
  4238bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4238be:	9904      	ldr	r1, [sp, #16]
  4238c0:	9806      	ldr	r0, [sp, #24]
  4238c2:	f7ff f9eb 	bl	422c9c <__sprint_r.part.0>
  4238c6:	2800      	cmp	r0, #0
  4238c8:	f47f aeda 	bne.w	423680 <_vfiprintf_r+0x964>
  4238cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4238ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4238d0:	1c48      	adds	r0, r1, #1
  4238d2:	46ca      	mov	sl, r9
  4238d4:	e5a4      	b.n	423420 <_vfiprintf_r+0x704>
  4238d6:	9a07      	ldr	r2, [sp, #28]
  4238d8:	9903      	ldr	r1, [sp, #12]
  4238da:	6813      	ldr	r3, [r2, #0]
  4238dc:	17cd      	asrs	r5, r1, #31
  4238de:	4608      	mov	r0, r1
  4238e0:	3204      	adds	r2, #4
  4238e2:	4629      	mov	r1, r5
  4238e4:	9207      	str	r2, [sp, #28]
  4238e6:	e9c3 0100 	strd	r0, r1, [r3]
  4238ea:	f7ff ba54 	b.w	422d96 <_vfiprintf_r+0x7a>
  4238ee:	4658      	mov	r0, fp
  4238f0:	9607      	str	r6, [sp, #28]
  4238f2:	9302      	str	r3, [sp, #8]
  4238f4:	f7ff f964 	bl	422bc0 <strlen>
  4238f8:	2400      	movs	r4, #0
  4238fa:	9005      	str	r0, [sp, #20]
  4238fc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  423900:	f7ff bb5e 	b.w	422fc0 <_vfiprintf_r+0x2a4>
  423904:	aa0f      	add	r2, sp, #60	; 0x3c
  423906:	9904      	ldr	r1, [sp, #16]
  423908:	9806      	ldr	r0, [sp, #24]
  42390a:	f7ff f9c7 	bl	422c9c <__sprint_r.part.0>
  42390e:	2800      	cmp	r0, #0
  423910:	f47f aeb6 	bne.w	423680 <_vfiprintf_r+0x964>
  423914:	9910      	ldr	r1, [sp, #64]	; 0x40
  423916:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423918:	1c48      	adds	r0, r1, #1
  42391a:	46ca      	mov	sl, r9
  42391c:	e5a7      	b.n	42346e <_vfiprintf_r+0x752>
  42391e:	9910      	ldr	r1, [sp, #64]	; 0x40
  423920:	9a11      	ldr	r2, [sp, #68]	; 0x44
  423922:	4e20      	ldr	r6, [pc, #128]	; (4239a4 <_vfiprintf_r+0xc88>)
  423924:	3101      	adds	r1, #1
  423926:	f7ff bb90 	b.w	42304a <_vfiprintf_r+0x32e>
  42392a:	2c06      	cmp	r4, #6
  42392c:	bf28      	it	cs
  42392e:	2406      	movcs	r4, #6
  423930:	9405      	str	r4, [sp, #20]
  423932:	9607      	str	r6, [sp, #28]
  423934:	9401      	str	r4, [sp, #4]
  423936:	f8df b070 	ldr.w	fp, [pc, #112]	; 4239a8 <_vfiprintf_r+0xc8c>
  42393a:	e4d5      	b.n	4232e8 <_vfiprintf_r+0x5cc>
  42393c:	9810      	ldr	r0, [sp, #64]	; 0x40
  42393e:	4e19      	ldr	r6, [pc, #100]	; (4239a4 <_vfiprintf_r+0xc88>)
  423940:	3001      	adds	r0, #1
  423942:	e603      	b.n	42354c <_vfiprintf_r+0x830>
  423944:	9405      	str	r4, [sp, #20]
  423946:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  42394a:	9607      	str	r6, [sp, #28]
  42394c:	9302      	str	r3, [sp, #8]
  42394e:	4604      	mov	r4, r0
  423950:	f7ff bb36 	b.w	422fc0 <_vfiprintf_r+0x2a4>
  423954:	4686      	mov	lr, r0
  423956:	f7ff bbce 	b.w	4230f6 <_vfiprintf_r+0x3da>
  42395a:	9806      	ldr	r0, [sp, #24]
  42395c:	aa0f      	add	r2, sp, #60	; 0x3c
  42395e:	4659      	mov	r1, fp
  423960:	f7ff f99c 	bl	422c9c <__sprint_r.part.0>
  423964:	2800      	cmp	r0, #0
  423966:	f43f ae24 	beq.w	4235b2 <_vfiprintf_r+0x896>
  42396a:	e624      	b.n	4235b6 <_vfiprintf_r+0x89a>
  42396c:	9907      	ldr	r1, [sp, #28]
  42396e:	f898 2001 	ldrb.w	r2, [r8, #1]
  423972:	680c      	ldr	r4, [r1, #0]
  423974:	3104      	adds	r1, #4
  423976:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  42397a:	46b8      	mov	r8, r7
  42397c:	9107      	str	r1, [sp, #28]
  42397e:	f7ff ba3f 	b.w	422e00 <_vfiprintf_r+0xe4>
  423982:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  423986:	e43c      	b.n	423202 <_vfiprintf_r+0x4e6>
  423988:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42398c:	e521      	b.n	4233d2 <_vfiprintf_r+0x6b6>
  42398e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  423992:	f7ff bbf4 	b.w	42317e <_vfiprintf_r+0x462>
  423996:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  42399a:	e491      	b.n	4232c0 <_vfiprintf_r+0x5a4>
  42399c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4239a0:	e469      	b.n	423276 <_vfiprintf_r+0x55a>
  4239a2:	bf00      	nop
  4239a4:	0042b7ec 	.word	0x0042b7ec
  4239a8:	0042b7e4 	.word	0x0042b7e4

004239ac <__sbprintf>:
  4239ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4239b0:	460c      	mov	r4, r1
  4239b2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  4239b6:	8989      	ldrh	r1, [r1, #12]
  4239b8:	6e66      	ldr	r6, [r4, #100]	; 0x64
  4239ba:	89e5      	ldrh	r5, [r4, #14]
  4239bc:	9619      	str	r6, [sp, #100]	; 0x64
  4239be:	f021 0102 	bic.w	r1, r1, #2
  4239c2:	4606      	mov	r6, r0
  4239c4:	69e0      	ldr	r0, [r4, #28]
  4239c6:	f8ad 100c 	strh.w	r1, [sp, #12]
  4239ca:	4617      	mov	r7, r2
  4239cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  4239d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
  4239d2:	f8ad 500e 	strh.w	r5, [sp, #14]
  4239d6:	4698      	mov	r8, r3
  4239d8:	ad1a      	add	r5, sp, #104	; 0x68
  4239da:	2300      	movs	r3, #0
  4239dc:	9007      	str	r0, [sp, #28]
  4239de:	a816      	add	r0, sp, #88	; 0x58
  4239e0:	9209      	str	r2, [sp, #36]	; 0x24
  4239e2:	9306      	str	r3, [sp, #24]
  4239e4:	9500      	str	r5, [sp, #0]
  4239e6:	9504      	str	r5, [sp, #16]
  4239e8:	9102      	str	r1, [sp, #8]
  4239ea:	9105      	str	r1, [sp, #20]
  4239ec:	f000 fd48 	bl	424480 <__retarget_lock_init_recursive>
  4239f0:	4643      	mov	r3, r8
  4239f2:	463a      	mov	r2, r7
  4239f4:	4669      	mov	r1, sp
  4239f6:	4630      	mov	r0, r6
  4239f8:	f7ff f990 	bl	422d1c <_vfiprintf_r>
  4239fc:	1e05      	subs	r5, r0, #0
  4239fe:	db07      	blt.n	423a10 <__sbprintf+0x64>
  423a00:	4630      	mov	r0, r6
  423a02:	4669      	mov	r1, sp
  423a04:	f000 f928 	bl	423c58 <_fflush_r>
  423a08:	2800      	cmp	r0, #0
  423a0a:	bf18      	it	ne
  423a0c:	f04f 35ff 	movne.w	r5, #4294967295
  423a10:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  423a14:	065b      	lsls	r3, r3, #25
  423a16:	d503      	bpl.n	423a20 <__sbprintf+0x74>
  423a18:	89a3      	ldrh	r3, [r4, #12]
  423a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423a1e:	81a3      	strh	r3, [r4, #12]
  423a20:	9816      	ldr	r0, [sp, #88]	; 0x58
  423a22:	f000 fd2f 	bl	424484 <__retarget_lock_close_recursive>
  423a26:	4628      	mov	r0, r5
  423a28:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  423a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00423a30 <__swsetup_r>:
  423a30:	b538      	push	{r3, r4, r5, lr}
  423a32:	4b30      	ldr	r3, [pc, #192]	; (423af4 <__swsetup_r+0xc4>)
  423a34:	681b      	ldr	r3, [r3, #0]
  423a36:	4605      	mov	r5, r0
  423a38:	460c      	mov	r4, r1
  423a3a:	b113      	cbz	r3, 423a42 <__swsetup_r+0x12>
  423a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  423a3e:	2a00      	cmp	r2, #0
  423a40:	d038      	beq.n	423ab4 <__swsetup_r+0x84>
  423a42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423a46:	b293      	uxth	r3, r2
  423a48:	0718      	lsls	r0, r3, #28
  423a4a:	d50c      	bpl.n	423a66 <__swsetup_r+0x36>
  423a4c:	6920      	ldr	r0, [r4, #16]
  423a4e:	b1a8      	cbz	r0, 423a7c <__swsetup_r+0x4c>
  423a50:	f013 0201 	ands.w	r2, r3, #1
  423a54:	d01e      	beq.n	423a94 <__swsetup_r+0x64>
  423a56:	6963      	ldr	r3, [r4, #20]
  423a58:	2200      	movs	r2, #0
  423a5a:	425b      	negs	r3, r3
  423a5c:	61a3      	str	r3, [r4, #24]
  423a5e:	60a2      	str	r2, [r4, #8]
  423a60:	b1f0      	cbz	r0, 423aa0 <__swsetup_r+0x70>
  423a62:	2000      	movs	r0, #0
  423a64:	bd38      	pop	{r3, r4, r5, pc}
  423a66:	06d9      	lsls	r1, r3, #27
  423a68:	d53c      	bpl.n	423ae4 <__swsetup_r+0xb4>
  423a6a:	0758      	lsls	r0, r3, #29
  423a6c:	d426      	bmi.n	423abc <__swsetup_r+0x8c>
  423a6e:	6920      	ldr	r0, [r4, #16]
  423a70:	f042 0308 	orr.w	r3, r2, #8
  423a74:	81a3      	strh	r3, [r4, #12]
  423a76:	b29b      	uxth	r3, r3
  423a78:	2800      	cmp	r0, #0
  423a7a:	d1e9      	bne.n	423a50 <__swsetup_r+0x20>
  423a7c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  423a80:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  423a84:	d0e4      	beq.n	423a50 <__swsetup_r+0x20>
  423a86:	4628      	mov	r0, r5
  423a88:	4621      	mov	r1, r4
  423a8a:	f000 fd2f 	bl	4244ec <__smakebuf_r>
  423a8e:	89a3      	ldrh	r3, [r4, #12]
  423a90:	6920      	ldr	r0, [r4, #16]
  423a92:	e7dd      	b.n	423a50 <__swsetup_r+0x20>
  423a94:	0799      	lsls	r1, r3, #30
  423a96:	bf58      	it	pl
  423a98:	6962      	ldrpl	r2, [r4, #20]
  423a9a:	60a2      	str	r2, [r4, #8]
  423a9c:	2800      	cmp	r0, #0
  423a9e:	d1e0      	bne.n	423a62 <__swsetup_r+0x32>
  423aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423aa4:	061a      	lsls	r2, r3, #24
  423aa6:	d5dd      	bpl.n	423a64 <__swsetup_r+0x34>
  423aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423aac:	81a3      	strh	r3, [r4, #12]
  423aae:	f04f 30ff 	mov.w	r0, #4294967295
  423ab2:	bd38      	pop	{r3, r4, r5, pc}
  423ab4:	4618      	mov	r0, r3
  423ab6:	f000 f927 	bl	423d08 <__sinit>
  423aba:	e7c2      	b.n	423a42 <__swsetup_r+0x12>
  423abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  423abe:	b151      	cbz	r1, 423ad6 <__swsetup_r+0xa6>
  423ac0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  423ac4:	4299      	cmp	r1, r3
  423ac6:	d004      	beq.n	423ad2 <__swsetup_r+0xa2>
  423ac8:	4628      	mov	r0, r5
  423aca:	f000 fa43 	bl	423f54 <_free_r>
  423ace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  423ad2:	2300      	movs	r3, #0
  423ad4:	6323      	str	r3, [r4, #48]	; 0x30
  423ad6:	2300      	movs	r3, #0
  423ad8:	6920      	ldr	r0, [r4, #16]
  423ada:	6063      	str	r3, [r4, #4]
  423adc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  423ae0:	6020      	str	r0, [r4, #0]
  423ae2:	e7c5      	b.n	423a70 <__swsetup_r+0x40>
  423ae4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  423ae8:	2309      	movs	r3, #9
  423aea:	602b      	str	r3, [r5, #0]
  423aec:	f04f 30ff 	mov.w	r0, #4294967295
  423af0:	81a2      	strh	r2, [r4, #12]
  423af2:	bd38      	pop	{r3, r4, r5, pc}
  423af4:	20400070 	.word	0x20400070

00423af8 <register_fini>:
  423af8:	4b02      	ldr	r3, [pc, #8]	; (423b04 <register_fini+0xc>)
  423afa:	b113      	cbz	r3, 423b02 <register_fini+0xa>
  423afc:	4802      	ldr	r0, [pc, #8]	; (423b08 <register_fini+0x10>)
  423afe:	f000 b805 	b.w	423b0c <atexit>
  423b02:	4770      	bx	lr
  423b04:	00000000 	.word	0x00000000
  423b08:	00423d79 	.word	0x00423d79

00423b0c <atexit>:
  423b0c:	2300      	movs	r3, #0
  423b0e:	4601      	mov	r1, r0
  423b10:	461a      	mov	r2, r3
  423b12:	4618      	mov	r0, r3
  423b14:	f001 b890 	b.w	424c38 <__register_exitproc>

00423b18 <__sflush_r>:
  423b18:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  423b1c:	b29a      	uxth	r2, r3
  423b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423b22:	460d      	mov	r5, r1
  423b24:	0711      	lsls	r1, r2, #28
  423b26:	4680      	mov	r8, r0
  423b28:	d43a      	bmi.n	423ba0 <__sflush_r+0x88>
  423b2a:	686a      	ldr	r2, [r5, #4]
  423b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  423b30:	2a00      	cmp	r2, #0
  423b32:	81ab      	strh	r3, [r5, #12]
  423b34:	dd6f      	ble.n	423c16 <__sflush_r+0xfe>
  423b36:	6aac      	ldr	r4, [r5, #40]	; 0x28
  423b38:	2c00      	cmp	r4, #0
  423b3a:	d049      	beq.n	423bd0 <__sflush_r+0xb8>
  423b3c:	2200      	movs	r2, #0
  423b3e:	b29b      	uxth	r3, r3
  423b40:	f8d8 6000 	ldr.w	r6, [r8]
  423b44:	f8c8 2000 	str.w	r2, [r8]
  423b48:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  423b4c:	d067      	beq.n	423c1e <__sflush_r+0x106>
  423b4e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  423b50:	075f      	lsls	r7, r3, #29
  423b52:	d505      	bpl.n	423b60 <__sflush_r+0x48>
  423b54:	6869      	ldr	r1, [r5, #4]
  423b56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  423b58:	1a52      	subs	r2, r2, r1
  423b5a:	b10b      	cbz	r3, 423b60 <__sflush_r+0x48>
  423b5c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  423b5e:	1ad2      	subs	r2, r2, r3
  423b60:	2300      	movs	r3, #0
  423b62:	69e9      	ldr	r1, [r5, #28]
  423b64:	4640      	mov	r0, r8
  423b66:	47a0      	blx	r4
  423b68:	1c44      	adds	r4, r0, #1
  423b6a:	d03c      	beq.n	423be6 <__sflush_r+0xce>
  423b6c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  423b70:	692a      	ldr	r2, [r5, #16]
  423b72:	602a      	str	r2, [r5, #0]
  423b74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  423b78:	2200      	movs	r2, #0
  423b7a:	81ab      	strh	r3, [r5, #12]
  423b7c:	04db      	lsls	r3, r3, #19
  423b7e:	606a      	str	r2, [r5, #4]
  423b80:	d447      	bmi.n	423c12 <__sflush_r+0xfa>
  423b82:	6b29      	ldr	r1, [r5, #48]	; 0x30
  423b84:	f8c8 6000 	str.w	r6, [r8]
  423b88:	b311      	cbz	r1, 423bd0 <__sflush_r+0xb8>
  423b8a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  423b8e:	4299      	cmp	r1, r3
  423b90:	d002      	beq.n	423b98 <__sflush_r+0x80>
  423b92:	4640      	mov	r0, r8
  423b94:	f000 f9de 	bl	423f54 <_free_r>
  423b98:	2000      	movs	r0, #0
  423b9a:	6328      	str	r0, [r5, #48]	; 0x30
  423b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  423ba0:	692e      	ldr	r6, [r5, #16]
  423ba2:	b1ae      	cbz	r6, 423bd0 <__sflush_r+0xb8>
  423ba4:	682c      	ldr	r4, [r5, #0]
  423ba6:	602e      	str	r6, [r5, #0]
  423ba8:	0791      	lsls	r1, r2, #30
  423baa:	bf0c      	ite	eq
  423bac:	696b      	ldreq	r3, [r5, #20]
  423bae:	2300      	movne	r3, #0
  423bb0:	1ba4      	subs	r4, r4, r6
  423bb2:	60ab      	str	r3, [r5, #8]
  423bb4:	e00a      	b.n	423bcc <__sflush_r+0xb4>
  423bb6:	4623      	mov	r3, r4
  423bb8:	4632      	mov	r2, r6
  423bba:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  423bbc:	69e9      	ldr	r1, [r5, #28]
  423bbe:	4640      	mov	r0, r8
  423bc0:	47b8      	blx	r7
  423bc2:	2800      	cmp	r0, #0
  423bc4:	eba4 0400 	sub.w	r4, r4, r0
  423bc8:	4406      	add	r6, r0
  423bca:	dd04      	ble.n	423bd6 <__sflush_r+0xbe>
  423bcc:	2c00      	cmp	r4, #0
  423bce:	dcf2      	bgt.n	423bb6 <__sflush_r+0x9e>
  423bd0:	2000      	movs	r0, #0
  423bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  423bd6:	89ab      	ldrh	r3, [r5, #12]
  423bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423bdc:	81ab      	strh	r3, [r5, #12]
  423bde:	f04f 30ff 	mov.w	r0, #4294967295
  423be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  423be6:	f8d8 4000 	ldr.w	r4, [r8]
  423bea:	2c1d      	cmp	r4, #29
  423bec:	d8f3      	bhi.n	423bd6 <__sflush_r+0xbe>
  423bee:	4b19      	ldr	r3, [pc, #100]	; (423c54 <__sflush_r+0x13c>)
  423bf0:	40e3      	lsrs	r3, r4
  423bf2:	43db      	mvns	r3, r3
  423bf4:	f013 0301 	ands.w	r3, r3, #1
  423bf8:	d1ed      	bne.n	423bd6 <__sflush_r+0xbe>
  423bfa:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  423bfe:	606b      	str	r3, [r5, #4]
  423c00:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  423c04:	6929      	ldr	r1, [r5, #16]
  423c06:	81ab      	strh	r3, [r5, #12]
  423c08:	04da      	lsls	r2, r3, #19
  423c0a:	6029      	str	r1, [r5, #0]
  423c0c:	d5b9      	bpl.n	423b82 <__sflush_r+0x6a>
  423c0e:	2c00      	cmp	r4, #0
  423c10:	d1b7      	bne.n	423b82 <__sflush_r+0x6a>
  423c12:	6528      	str	r0, [r5, #80]	; 0x50
  423c14:	e7b5      	b.n	423b82 <__sflush_r+0x6a>
  423c16:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  423c18:	2a00      	cmp	r2, #0
  423c1a:	dc8c      	bgt.n	423b36 <__sflush_r+0x1e>
  423c1c:	e7d8      	b.n	423bd0 <__sflush_r+0xb8>
  423c1e:	2301      	movs	r3, #1
  423c20:	69e9      	ldr	r1, [r5, #28]
  423c22:	4640      	mov	r0, r8
  423c24:	47a0      	blx	r4
  423c26:	1c43      	adds	r3, r0, #1
  423c28:	4602      	mov	r2, r0
  423c2a:	d002      	beq.n	423c32 <__sflush_r+0x11a>
  423c2c:	89ab      	ldrh	r3, [r5, #12]
  423c2e:	6aac      	ldr	r4, [r5, #40]	; 0x28
  423c30:	e78e      	b.n	423b50 <__sflush_r+0x38>
  423c32:	f8d8 3000 	ldr.w	r3, [r8]
  423c36:	2b00      	cmp	r3, #0
  423c38:	d0f8      	beq.n	423c2c <__sflush_r+0x114>
  423c3a:	2b1d      	cmp	r3, #29
  423c3c:	d001      	beq.n	423c42 <__sflush_r+0x12a>
  423c3e:	2b16      	cmp	r3, #22
  423c40:	d102      	bne.n	423c48 <__sflush_r+0x130>
  423c42:	f8c8 6000 	str.w	r6, [r8]
  423c46:	e7c3      	b.n	423bd0 <__sflush_r+0xb8>
  423c48:	89ab      	ldrh	r3, [r5, #12]
  423c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423c4e:	81ab      	strh	r3, [r5, #12]
  423c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  423c54:	20400001 	.word	0x20400001

00423c58 <_fflush_r>:
  423c58:	b538      	push	{r3, r4, r5, lr}
  423c5a:	460d      	mov	r5, r1
  423c5c:	4604      	mov	r4, r0
  423c5e:	b108      	cbz	r0, 423c64 <_fflush_r+0xc>
  423c60:	6b83      	ldr	r3, [r0, #56]	; 0x38
  423c62:	b1bb      	cbz	r3, 423c94 <_fflush_r+0x3c>
  423c64:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  423c68:	b188      	cbz	r0, 423c8e <_fflush_r+0x36>
  423c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  423c6c:	07db      	lsls	r3, r3, #31
  423c6e:	d401      	bmi.n	423c74 <_fflush_r+0x1c>
  423c70:	0581      	lsls	r1, r0, #22
  423c72:	d517      	bpl.n	423ca4 <_fflush_r+0x4c>
  423c74:	4620      	mov	r0, r4
  423c76:	4629      	mov	r1, r5
  423c78:	f7ff ff4e 	bl	423b18 <__sflush_r>
  423c7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  423c7e:	07da      	lsls	r2, r3, #31
  423c80:	4604      	mov	r4, r0
  423c82:	d402      	bmi.n	423c8a <_fflush_r+0x32>
  423c84:	89ab      	ldrh	r3, [r5, #12]
  423c86:	059b      	lsls	r3, r3, #22
  423c88:	d507      	bpl.n	423c9a <_fflush_r+0x42>
  423c8a:	4620      	mov	r0, r4
  423c8c:	bd38      	pop	{r3, r4, r5, pc}
  423c8e:	4604      	mov	r4, r0
  423c90:	4620      	mov	r0, r4
  423c92:	bd38      	pop	{r3, r4, r5, pc}
  423c94:	f000 f838 	bl	423d08 <__sinit>
  423c98:	e7e4      	b.n	423c64 <_fflush_r+0xc>
  423c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  423c9c:	f000 fbf6 	bl	42448c <__retarget_lock_release_recursive>
  423ca0:	4620      	mov	r0, r4
  423ca2:	bd38      	pop	{r3, r4, r5, pc}
  423ca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
  423ca6:	f000 fbef 	bl	424488 <__retarget_lock_acquire_recursive>
  423caa:	e7e3      	b.n	423c74 <_fflush_r+0x1c>

00423cac <_cleanup_r>:
  423cac:	4901      	ldr	r1, [pc, #4]	; (423cb4 <_cleanup_r+0x8>)
  423cae:	f000 bbaf 	b.w	424410 <_fwalk_reent>
  423cb2:	bf00      	nop
  423cb4:	00424d21 	.word	0x00424d21

00423cb8 <std.isra.0>:
  423cb8:	b510      	push	{r4, lr}
  423cba:	2300      	movs	r3, #0
  423cbc:	4604      	mov	r4, r0
  423cbe:	8181      	strh	r1, [r0, #12]
  423cc0:	81c2      	strh	r2, [r0, #14]
  423cc2:	6003      	str	r3, [r0, #0]
  423cc4:	6043      	str	r3, [r0, #4]
  423cc6:	6083      	str	r3, [r0, #8]
  423cc8:	6643      	str	r3, [r0, #100]	; 0x64
  423cca:	6103      	str	r3, [r0, #16]
  423ccc:	6143      	str	r3, [r0, #20]
  423cce:	6183      	str	r3, [r0, #24]
  423cd0:	4619      	mov	r1, r3
  423cd2:	2208      	movs	r2, #8
  423cd4:	305c      	adds	r0, #92	; 0x5c
  423cd6:	f7fe fc29 	bl	42252c <memset>
  423cda:	4807      	ldr	r0, [pc, #28]	; (423cf8 <std.isra.0+0x40>)
  423cdc:	4907      	ldr	r1, [pc, #28]	; (423cfc <std.isra.0+0x44>)
  423cde:	4a08      	ldr	r2, [pc, #32]	; (423d00 <std.isra.0+0x48>)
  423ce0:	4b08      	ldr	r3, [pc, #32]	; (423d04 <std.isra.0+0x4c>)
  423ce2:	6220      	str	r0, [r4, #32]
  423ce4:	61e4      	str	r4, [r4, #28]
  423ce6:	6261      	str	r1, [r4, #36]	; 0x24
  423ce8:	62a2      	str	r2, [r4, #40]	; 0x28
  423cea:	62e3      	str	r3, [r4, #44]	; 0x2c
  423cec:	f104 0058 	add.w	r0, r4, #88	; 0x58
  423cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  423cf4:	f000 bbc4 	b.w	424480 <__retarget_lock_init_recursive>
  423cf8:	00424a65 	.word	0x00424a65
  423cfc:	00424a89 	.word	0x00424a89
  423d00:	00424ac5 	.word	0x00424ac5
  423d04:	00424ae5 	.word	0x00424ae5

00423d08 <__sinit>:
  423d08:	b510      	push	{r4, lr}
  423d0a:	4604      	mov	r4, r0
  423d0c:	4812      	ldr	r0, [pc, #72]	; (423d58 <__sinit+0x50>)
  423d0e:	f000 fbbb 	bl	424488 <__retarget_lock_acquire_recursive>
  423d12:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  423d14:	b9d2      	cbnz	r2, 423d4c <__sinit+0x44>
  423d16:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  423d1a:	4810      	ldr	r0, [pc, #64]	; (423d5c <__sinit+0x54>)
  423d1c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  423d20:	2103      	movs	r1, #3
  423d22:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  423d26:	63e0      	str	r0, [r4, #60]	; 0x3c
  423d28:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  423d2c:	6860      	ldr	r0, [r4, #4]
  423d2e:	2104      	movs	r1, #4
  423d30:	f7ff ffc2 	bl	423cb8 <std.isra.0>
  423d34:	2201      	movs	r2, #1
  423d36:	2109      	movs	r1, #9
  423d38:	68a0      	ldr	r0, [r4, #8]
  423d3a:	f7ff ffbd 	bl	423cb8 <std.isra.0>
  423d3e:	2202      	movs	r2, #2
  423d40:	2112      	movs	r1, #18
  423d42:	68e0      	ldr	r0, [r4, #12]
  423d44:	f7ff ffb8 	bl	423cb8 <std.isra.0>
  423d48:	2301      	movs	r3, #1
  423d4a:	63a3      	str	r3, [r4, #56]	; 0x38
  423d4c:	4802      	ldr	r0, [pc, #8]	; (423d58 <__sinit+0x50>)
  423d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  423d52:	f000 bb9b 	b.w	42448c <__retarget_lock_release_recursive>
  423d56:	bf00      	nop
  423d58:	2043a344 	.word	0x2043a344
  423d5c:	00423cad 	.word	0x00423cad

00423d60 <__sfp_lock_acquire>:
  423d60:	4801      	ldr	r0, [pc, #4]	; (423d68 <__sfp_lock_acquire+0x8>)
  423d62:	f000 bb91 	b.w	424488 <__retarget_lock_acquire_recursive>
  423d66:	bf00      	nop
  423d68:	2043a358 	.word	0x2043a358

00423d6c <__sfp_lock_release>:
  423d6c:	4801      	ldr	r0, [pc, #4]	; (423d74 <__sfp_lock_release+0x8>)
  423d6e:	f000 bb8d 	b.w	42448c <__retarget_lock_release_recursive>
  423d72:	bf00      	nop
  423d74:	2043a358 	.word	0x2043a358

00423d78 <__libc_fini_array>:
  423d78:	b538      	push	{r3, r4, r5, lr}
  423d7a:	4c0a      	ldr	r4, [pc, #40]	; (423da4 <__libc_fini_array+0x2c>)
  423d7c:	4d0a      	ldr	r5, [pc, #40]	; (423da8 <__libc_fini_array+0x30>)
  423d7e:	1b64      	subs	r4, r4, r5
  423d80:	10a4      	asrs	r4, r4, #2
  423d82:	d00a      	beq.n	423d9a <__libc_fini_array+0x22>
  423d84:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  423d88:	3b01      	subs	r3, #1
  423d8a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  423d8e:	3c01      	subs	r4, #1
  423d90:	f855 3904 	ldr.w	r3, [r5], #-4
  423d94:	4798      	blx	r3
  423d96:	2c00      	cmp	r4, #0
  423d98:	d1f9      	bne.n	423d8e <__libc_fini_array+0x16>
  423d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  423d9e:	f007 bdc9 	b.w	42b934 <_fini>
  423da2:	bf00      	nop
  423da4:	0042b944 	.word	0x0042b944
  423da8:	0042b940 	.word	0x0042b940

00423dac <__fputwc>:
  423dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  423db0:	b082      	sub	sp, #8
  423db2:	4680      	mov	r8, r0
  423db4:	4689      	mov	r9, r1
  423db6:	4614      	mov	r4, r2
  423db8:	f000 fb54 	bl	424464 <__locale_mb_cur_max>
  423dbc:	2801      	cmp	r0, #1
  423dbe:	d036      	beq.n	423e2e <__fputwc+0x82>
  423dc0:	464a      	mov	r2, r9
  423dc2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  423dc6:	a901      	add	r1, sp, #4
  423dc8:	4640      	mov	r0, r8
  423dca:	f000 fee7 	bl	424b9c <_wcrtomb_r>
  423dce:	1c42      	adds	r2, r0, #1
  423dd0:	4606      	mov	r6, r0
  423dd2:	d025      	beq.n	423e20 <__fputwc+0x74>
  423dd4:	b3a8      	cbz	r0, 423e42 <__fputwc+0x96>
  423dd6:	f89d e004 	ldrb.w	lr, [sp, #4]
  423dda:	2500      	movs	r5, #0
  423ddc:	f10d 0a04 	add.w	sl, sp, #4
  423de0:	e009      	b.n	423df6 <__fputwc+0x4a>
  423de2:	6823      	ldr	r3, [r4, #0]
  423de4:	1c5a      	adds	r2, r3, #1
  423de6:	6022      	str	r2, [r4, #0]
  423de8:	f883 e000 	strb.w	lr, [r3]
  423dec:	3501      	adds	r5, #1
  423dee:	42b5      	cmp	r5, r6
  423df0:	d227      	bcs.n	423e42 <__fputwc+0x96>
  423df2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  423df6:	68a3      	ldr	r3, [r4, #8]
  423df8:	3b01      	subs	r3, #1
  423dfa:	2b00      	cmp	r3, #0
  423dfc:	60a3      	str	r3, [r4, #8]
  423dfe:	daf0      	bge.n	423de2 <__fputwc+0x36>
  423e00:	69a7      	ldr	r7, [r4, #24]
  423e02:	42bb      	cmp	r3, r7
  423e04:	4671      	mov	r1, lr
  423e06:	4622      	mov	r2, r4
  423e08:	4640      	mov	r0, r8
  423e0a:	db02      	blt.n	423e12 <__fputwc+0x66>
  423e0c:	f1be 0f0a 	cmp.w	lr, #10
  423e10:	d1e7      	bne.n	423de2 <__fputwc+0x36>
  423e12:	f000 fe6b 	bl	424aec <__swbuf_r>
  423e16:	1c43      	adds	r3, r0, #1
  423e18:	d1e8      	bne.n	423dec <__fputwc+0x40>
  423e1a:	b002      	add	sp, #8
  423e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  423e20:	89a3      	ldrh	r3, [r4, #12]
  423e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  423e26:	81a3      	strh	r3, [r4, #12]
  423e28:	b002      	add	sp, #8
  423e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  423e2e:	f109 33ff 	add.w	r3, r9, #4294967295
  423e32:	2bfe      	cmp	r3, #254	; 0xfe
  423e34:	d8c4      	bhi.n	423dc0 <__fputwc+0x14>
  423e36:	fa5f fe89 	uxtb.w	lr, r9
  423e3a:	4606      	mov	r6, r0
  423e3c:	f88d e004 	strb.w	lr, [sp, #4]
  423e40:	e7cb      	b.n	423dda <__fputwc+0x2e>
  423e42:	4648      	mov	r0, r9
  423e44:	b002      	add	sp, #8
  423e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  423e4a:	bf00      	nop

00423e4c <_fputwc_r>:
  423e4c:	b530      	push	{r4, r5, lr}
  423e4e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  423e50:	f013 0f01 	tst.w	r3, #1
  423e54:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  423e58:	4614      	mov	r4, r2
  423e5a:	b083      	sub	sp, #12
  423e5c:	4605      	mov	r5, r0
  423e5e:	b29a      	uxth	r2, r3
  423e60:	d101      	bne.n	423e66 <_fputwc_r+0x1a>
  423e62:	0590      	lsls	r0, r2, #22
  423e64:	d51c      	bpl.n	423ea0 <_fputwc_r+0x54>
  423e66:	0490      	lsls	r0, r2, #18
  423e68:	d406      	bmi.n	423e78 <_fputwc_r+0x2c>
  423e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  423e6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  423e70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  423e74:	81a3      	strh	r3, [r4, #12]
  423e76:	6662      	str	r2, [r4, #100]	; 0x64
  423e78:	4628      	mov	r0, r5
  423e7a:	4622      	mov	r2, r4
  423e7c:	f7ff ff96 	bl	423dac <__fputwc>
  423e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
  423e82:	07da      	lsls	r2, r3, #31
  423e84:	4605      	mov	r5, r0
  423e86:	d402      	bmi.n	423e8e <_fputwc_r+0x42>
  423e88:	89a3      	ldrh	r3, [r4, #12]
  423e8a:	059b      	lsls	r3, r3, #22
  423e8c:	d502      	bpl.n	423e94 <_fputwc_r+0x48>
  423e8e:	4628      	mov	r0, r5
  423e90:	b003      	add	sp, #12
  423e92:	bd30      	pop	{r4, r5, pc}
  423e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
  423e96:	f000 faf9 	bl	42448c <__retarget_lock_release_recursive>
  423e9a:	4628      	mov	r0, r5
  423e9c:	b003      	add	sp, #12
  423e9e:	bd30      	pop	{r4, r5, pc}
  423ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  423ea2:	9101      	str	r1, [sp, #4]
  423ea4:	f000 faf0 	bl	424488 <__retarget_lock_acquire_recursive>
  423ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  423eac:	9901      	ldr	r1, [sp, #4]
  423eae:	b29a      	uxth	r2, r3
  423eb0:	e7d9      	b.n	423e66 <_fputwc_r+0x1a>
  423eb2:	bf00      	nop

00423eb4 <_malloc_trim_r>:
  423eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  423eb6:	4f24      	ldr	r7, [pc, #144]	; (423f48 <_malloc_trim_r+0x94>)
  423eb8:	460c      	mov	r4, r1
  423eba:	4606      	mov	r6, r0
  423ebc:	f7fe fb84 	bl	4225c8 <__malloc_lock>
  423ec0:	68bb      	ldr	r3, [r7, #8]
  423ec2:	685d      	ldr	r5, [r3, #4]
  423ec4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  423ec8:	310f      	adds	r1, #15
  423eca:	f025 0503 	bic.w	r5, r5, #3
  423ece:	4429      	add	r1, r5
  423ed0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  423ed4:	f021 010f 	bic.w	r1, r1, #15
  423ed8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  423edc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  423ee0:	db07      	blt.n	423ef2 <_malloc_trim_r+0x3e>
  423ee2:	2100      	movs	r1, #0
  423ee4:	4630      	mov	r0, r6
  423ee6:	f7fe fb9b 	bl	422620 <_sbrk_r>
  423eea:	68bb      	ldr	r3, [r7, #8]
  423eec:	442b      	add	r3, r5
  423eee:	4298      	cmp	r0, r3
  423ef0:	d004      	beq.n	423efc <_malloc_trim_r+0x48>
  423ef2:	4630      	mov	r0, r6
  423ef4:	f7fe fb6e 	bl	4225d4 <__malloc_unlock>
  423ef8:	2000      	movs	r0, #0
  423efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  423efc:	4261      	negs	r1, r4
  423efe:	4630      	mov	r0, r6
  423f00:	f7fe fb8e 	bl	422620 <_sbrk_r>
  423f04:	3001      	adds	r0, #1
  423f06:	d00d      	beq.n	423f24 <_malloc_trim_r+0x70>
  423f08:	4b10      	ldr	r3, [pc, #64]	; (423f4c <_malloc_trim_r+0x98>)
  423f0a:	68ba      	ldr	r2, [r7, #8]
  423f0c:	6819      	ldr	r1, [r3, #0]
  423f0e:	1b2d      	subs	r5, r5, r4
  423f10:	f045 0501 	orr.w	r5, r5, #1
  423f14:	4630      	mov	r0, r6
  423f16:	1b09      	subs	r1, r1, r4
  423f18:	6055      	str	r5, [r2, #4]
  423f1a:	6019      	str	r1, [r3, #0]
  423f1c:	f7fe fb5a 	bl	4225d4 <__malloc_unlock>
  423f20:	2001      	movs	r0, #1
  423f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  423f24:	2100      	movs	r1, #0
  423f26:	4630      	mov	r0, r6
  423f28:	f7fe fb7a 	bl	422620 <_sbrk_r>
  423f2c:	68ba      	ldr	r2, [r7, #8]
  423f2e:	1a83      	subs	r3, r0, r2
  423f30:	2b0f      	cmp	r3, #15
  423f32:	ddde      	ble.n	423ef2 <_malloc_trim_r+0x3e>
  423f34:	4c06      	ldr	r4, [pc, #24]	; (423f50 <_malloc_trim_r+0x9c>)
  423f36:	4905      	ldr	r1, [pc, #20]	; (423f4c <_malloc_trim_r+0x98>)
  423f38:	6824      	ldr	r4, [r4, #0]
  423f3a:	f043 0301 	orr.w	r3, r3, #1
  423f3e:	1b00      	subs	r0, r0, r4
  423f40:	6053      	str	r3, [r2, #4]
  423f42:	6008      	str	r0, [r1, #0]
  423f44:	e7d5      	b.n	423ef2 <_malloc_trim_r+0x3e>
  423f46:	bf00      	nop
  423f48:	204004a0 	.word	0x204004a0
  423f4c:	2043a0a0 	.word	0x2043a0a0
  423f50:	204008a8 	.word	0x204008a8

00423f54 <_free_r>:
  423f54:	2900      	cmp	r1, #0
  423f56:	d044      	beq.n	423fe2 <_free_r+0x8e>
  423f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  423f5c:	460d      	mov	r5, r1
  423f5e:	4680      	mov	r8, r0
  423f60:	f7fe fb32 	bl	4225c8 <__malloc_lock>
  423f64:	f855 7c04 	ldr.w	r7, [r5, #-4]
  423f68:	4969      	ldr	r1, [pc, #420]	; (424110 <_free_r+0x1bc>)
  423f6a:	f027 0301 	bic.w	r3, r7, #1
  423f6e:	f1a5 0408 	sub.w	r4, r5, #8
  423f72:	18e2      	adds	r2, r4, r3
  423f74:	688e      	ldr	r6, [r1, #8]
  423f76:	6850      	ldr	r0, [r2, #4]
  423f78:	42b2      	cmp	r2, r6
  423f7a:	f020 0003 	bic.w	r0, r0, #3
  423f7e:	d05e      	beq.n	42403e <_free_r+0xea>
  423f80:	07fe      	lsls	r6, r7, #31
  423f82:	6050      	str	r0, [r2, #4]
  423f84:	d40b      	bmi.n	423f9e <_free_r+0x4a>
  423f86:	f855 7c08 	ldr.w	r7, [r5, #-8]
  423f8a:	1be4      	subs	r4, r4, r7
  423f8c:	f101 0e08 	add.w	lr, r1, #8
  423f90:	68a5      	ldr	r5, [r4, #8]
  423f92:	4575      	cmp	r5, lr
  423f94:	443b      	add	r3, r7
  423f96:	d06d      	beq.n	424074 <_free_r+0x120>
  423f98:	68e7      	ldr	r7, [r4, #12]
  423f9a:	60ef      	str	r7, [r5, #12]
  423f9c:	60bd      	str	r5, [r7, #8]
  423f9e:	1815      	adds	r5, r2, r0
  423fa0:	686d      	ldr	r5, [r5, #4]
  423fa2:	07ed      	lsls	r5, r5, #31
  423fa4:	d53e      	bpl.n	424024 <_free_r+0xd0>
  423fa6:	f043 0201 	orr.w	r2, r3, #1
  423faa:	6062      	str	r2, [r4, #4]
  423fac:	50e3      	str	r3, [r4, r3]
  423fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  423fb2:	d217      	bcs.n	423fe4 <_free_r+0x90>
  423fb4:	08db      	lsrs	r3, r3, #3
  423fb6:	1c58      	adds	r0, r3, #1
  423fb8:	109a      	asrs	r2, r3, #2
  423fba:	684d      	ldr	r5, [r1, #4]
  423fbc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  423fc0:	60a7      	str	r7, [r4, #8]
  423fc2:	2301      	movs	r3, #1
  423fc4:	4093      	lsls	r3, r2
  423fc6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  423fca:	432b      	orrs	r3, r5
  423fcc:	3a08      	subs	r2, #8
  423fce:	60e2      	str	r2, [r4, #12]
  423fd0:	604b      	str	r3, [r1, #4]
  423fd2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  423fd6:	60fc      	str	r4, [r7, #12]
  423fd8:	4640      	mov	r0, r8
  423fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  423fde:	f7fe baf9 	b.w	4225d4 <__malloc_unlock>
  423fe2:	4770      	bx	lr
  423fe4:	0a5a      	lsrs	r2, r3, #9
  423fe6:	2a04      	cmp	r2, #4
  423fe8:	d852      	bhi.n	424090 <_free_r+0x13c>
  423fea:	099a      	lsrs	r2, r3, #6
  423fec:	f102 0739 	add.w	r7, r2, #57	; 0x39
  423ff0:	00ff      	lsls	r7, r7, #3
  423ff2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  423ff6:	19c8      	adds	r0, r1, r7
  423ff8:	59ca      	ldr	r2, [r1, r7]
  423ffa:	3808      	subs	r0, #8
  423ffc:	4290      	cmp	r0, r2
  423ffe:	d04f      	beq.n	4240a0 <_free_r+0x14c>
  424000:	6851      	ldr	r1, [r2, #4]
  424002:	f021 0103 	bic.w	r1, r1, #3
  424006:	428b      	cmp	r3, r1
  424008:	d232      	bcs.n	424070 <_free_r+0x11c>
  42400a:	6892      	ldr	r2, [r2, #8]
  42400c:	4290      	cmp	r0, r2
  42400e:	d1f7      	bne.n	424000 <_free_r+0xac>
  424010:	68c3      	ldr	r3, [r0, #12]
  424012:	60a0      	str	r0, [r4, #8]
  424014:	60e3      	str	r3, [r4, #12]
  424016:	609c      	str	r4, [r3, #8]
  424018:	60c4      	str	r4, [r0, #12]
  42401a:	4640      	mov	r0, r8
  42401c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424020:	f7fe bad8 	b.w	4225d4 <__malloc_unlock>
  424024:	6895      	ldr	r5, [r2, #8]
  424026:	4f3b      	ldr	r7, [pc, #236]	; (424114 <_free_r+0x1c0>)
  424028:	42bd      	cmp	r5, r7
  42402a:	4403      	add	r3, r0
  42402c:	d040      	beq.n	4240b0 <_free_r+0x15c>
  42402e:	68d0      	ldr	r0, [r2, #12]
  424030:	60e8      	str	r0, [r5, #12]
  424032:	f043 0201 	orr.w	r2, r3, #1
  424036:	6085      	str	r5, [r0, #8]
  424038:	6062      	str	r2, [r4, #4]
  42403a:	50e3      	str	r3, [r4, r3]
  42403c:	e7b7      	b.n	423fae <_free_r+0x5a>
  42403e:	07ff      	lsls	r7, r7, #31
  424040:	4403      	add	r3, r0
  424042:	d407      	bmi.n	424054 <_free_r+0x100>
  424044:	f855 2c08 	ldr.w	r2, [r5, #-8]
  424048:	1aa4      	subs	r4, r4, r2
  42404a:	4413      	add	r3, r2
  42404c:	68a0      	ldr	r0, [r4, #8]
  42404e:	68e2      	ldr	r2, [r4, #12]
  424050:	60c2      	str	r2, [r0, #12]
  424052:	6090      	str	r0, [r2, #8]
  424054:	4a30      	ldr	r2, [pc, #192]	; (424118 <_free_r+0x1c4>)
  424056:	6812      	ldr	r2, [r2, #0]
  424058:	f043 0001 	orr.w	r0, r3, #1
  42405c:	4293      	cmp	r3, r2
  42405e:	6060      	str	r0, [r4, #4]
  424060:	608c      	str	r4, [r1, #8]
  424062:	d3b9      	bcc.n	423fd8 <_free_r+0x84>
  424064:	4b2d      	ldr	r3, [pc, #180]	; (42411c <_free_r+0x1c8>)
  424066:	4640      	mov	r0, r8
  424068:	6819      	ldr	r1, [r3, #0]
  42406a:	f7ff ff23 	bl	423eb4 <_malloc_trim_r>
  42406e:	e7b3      	b.n	423fd8 <_free_r+0x84>
  424070:	4610      	mov	r0, r2
  424072:	e7cd      	b.n	424010 <_free_r+0xbc>
  424074:	1811      	adds	r1, r2, r0
  424076:	6849      	ldr	r1, [r1, #4]
  424078:	07c9      	lsls	r1, r1, #31
  42407a:	d444      	bmi.n	424106 <_free_r+0x1b2>
  42407c:	6891      	ldr	r1, [r2, #8]
  42407e:	68d2      	ldr	r2, [r2, #12]
  424080:	60ca      	str	r2, [r1, #12]
  424082:	4403      	add	r3, r0
  424084:	f043 0001 	orr.w	r0, r3, #1
  424088:	6091      	str	r1, [r2, #8]
  42408a:	6060      	str	r0, [r4, #4]
  42408c:	50e3      	str	r3, [r4, r3]
  42408e:	e7a3      	b.n	423fd8 <_free_r+0x84>
  424090:	2a14      	cmp	r2, #20
  424092:	d816      	bhi.n	4240c2 <_free_r+0x16e>
  424094:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  424098:	00ff      	lsls	r7, r7, #3
  42409a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  42409e:	e7aa      	b.n	423ff6 <_free_r+0xa2>
  4240a0:	10aa      	asrs	r2, r5, #2
  4240a2:	2301      	movs	r3, #1
  4240a4:	684d      	ldr	r5, [r1, #4]
  4240a6:	4093      	lsls	r3, r2
  4240a8:	432b      	orrs	r3, r5
  4240aa:	604b      	str	r3, [r1, #4]
  4240ac:	4603      	mov	r3, r0
  4240ae:	e7b0      	b.n	424012 <_free_r+0xbe>
  4240b0:	f043 0201 	orr.w	r2, r3, #1
  4240b4:	614c      	str	r4, [r1, #20]
  4240b6:	610c      	str	r4, [r1, #16]
  4240b8:	60e5      	str	r5, [r4, #12]
  4240ba:	60a5      	str	r5, [r4, #8]
  4240bc:	6062      	str	r2, [r4, #4]
  4240be:	50e3      	str	r3, [r4, r3]
  4240c0:	e78a      	b.n	423fd8 <_free_r+0x84>
  4240c2:	2a54      	cmp	r2, #84	; 0x54
  4240c4:	d806      	bhi.n	4240d4 <_free_r+0x180>
  4240c6:	0b1a      	lsrs	r2, r3, #12
  4240c8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  4240cc:	00ff      	lsls	r7, r7, #3
  4240ce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  4240d2:	e790      	b.n	423ff6 <_free_r+0xa2>
  4240d4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4240d8:	d806      	bhi.n	4240e8 <_free_r+0x194>
  4240da:	0bda      	lsrs	r2, r3, #15
  4240dc:	f102 0778 	add.w	r7, r2, #120	; 0x78
  4240e0:	00ff      	lsls	r7, r7, #3
  4240e2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  4240e6:	e786      	b.n	423ff6 <_free_r+0xa2>
  4240e8:	f240 5054 	movw	r0, #1364	; 0x554
  4240ec:	4282      	cmp	r2, r0
  4240ee:	d806      	bhi.n	4240fe <_free_r+0x1aa>
  4240f0:	0c9a      	lsrs	r2, r3, #18
  4240f2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  4240f6:	00ff      	lsls	r7, r7, #3
  4240f8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  4240fc:	e77b      	b.n	423ff6 <_free_r+0xa2>
  4240fe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  424102:	257e      	movs	r5, #126	; 0x7e
  424104:	e777      	b.n	423ff6 <_free_r+0xa2>
  424106:	f043 0101 	orr.w	r1, r3, #1
  42410a:	6061      	str	r1, [r4, #4]
  42410c:	6013      	str	r3, [r2, #0]
  42410e:	e763      	b.n	423fd8 <_free_r+0x84>
  424110:	204004a0 	.word	0x204004a0
  424114:	204004a8 	.word	0x204004a8
  424118:	204008ac 	.word	0x204008ac
  42411c:	2043a0d0 	.word	0x2043a0d0

00424120 <__sfvwrite_r>:
  424120:	6893      	ldr	r3, [r2, #8]
  424122:	2b00      	cmp	r3, #0
  424124:	d073      	beq.n	42420e <__sfvwrite_r+0xee>
  424126:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  42412a:	898b      	ldrh	r3, [r1, #12]
  42412c:	b083      	sub	sp, #12
  42412e:	460c      	mov	r4, r1
  424130:	0719      	lsls	r1, r3, #28
  424132:	9000      	str	r0, [sp, #0]
  424134:	4616      	mov	r6, r2
  424136:	d526      	bpl.n	424186 <__sfvwrite_r+0x66>
  424138:	6922      	ldr	r2, [r4, #16]
  42413a:	b322      	cbz	r2, 424186 <__sfvwrite_r+0x66>
  42413c:	f013 0002 	ands.w	r0, r3, #2
  424140:	6835      	ldr	r5, [r6, #0]
  424142:	d02c      	beq.n	42419e <__sfvwrite_r+0x7e>
  424144:	f04f 0900 	mov.w	r9, #0
  424148:	4fb0      	ldr	r7, [pc, #704]	; (42440c <__sfvwrite_r+0x2ec>)
  42414a:	46c8      	mov	r8, r9
  42414c:	46b2      	mov	sl, r6
  42414e:	45b8      	cmp	r8, r7
  424150:	4643      	mov	r3, r8
  424152:	464a      	mov	r2, r9
  424154:	bf28      	it	cs
  424156:	463b      	movcs	r3, r7
  424158:	9800      	ldr	r0, [sp, #0]
  42415a:	f1b8 0f00 	cmp.w	r8, #0
  42415e:	d050      	beq.n	424202 <__sfvwrite_r+0xe2>
  424160:	69e1      	ldr	r1, [r4, #28]
  424162:	6a66      	ldr	r6, [r4, #36]	; 0x24
  424164:	47b0      	blx	r6
  424166:	2800      	cmp	r0, #0
  424168:	dd58      	ble.n	42421c <__sfvwrite_r+0xfc>
  42416a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42416e:	1a1b      	subs	r3, r3, r0
  424170:	4481      	add	r9, r0
  424172:	eba8 0800 	sub.w	r8, r8, r0
  424176:	f8ca 3008 	str.w	r3, [sl, #8]
  42417a:	2b00      	cmp	r3, #0
  42417c:	d1e7      	bne.n	42414e <__sfvwrite_r+0x2e>
  42417e:	2000      	movs	r0, #0
  424180:	b003      	add	sp, #12
  424182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424186:	4621      	mov	r1, r4
  424188:	9800      	ldr	r0, [sp, #0]
  42418a:	f7ff fc51 	bl	423a30 <__swsetup_r>
  42418e:	2800      	cmp	r0, #0
  424190:	f040 8133 	bne.w	4243fa <__sfvwrite_r+0x2da>
  424194:	89a3      	ldrh	r3, [r4, #12]
  424196:	6835      	ldr	r5, [r6, #0]
  424198:	f013 0002 	ands.w	r0, r3, #2
  42419c:	d1d2      	bne.n	424144 <__sfvwrite_r+0x24>
  42419e:	f013 0901 	ands.w	r9, r3, #1
  4241a2:	d145      	bne.n	424230 <__sfvwrite_r+0x110>
  4241a4:	464f      	mov	r7, r9
  4241a6:	9601      	str	r6, [sp, #4]
  4241a8:	b337      	cbz	r7, 4241f8 <__sfvwrite_r+0xd8>
  4241aa:	059a      	lsls	r2, r3, #22
  4241ac:	f8d4 8008 	ldr.w	r8, [r4, #8]
  4241b0:	f140 8083 	bpl.w	4242ba <__sfvwrite_r+0x19a>
  4241b4:	4547      	cmp	r7, r8
  4241b6:	46c3      	mov	fp, r8
  4241b8:	f0c0 80ab 	bcc.w	424312 <__sfvwrite_r+0x1f2>
  4241bc:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4241c0:	f040 80ac 	bne.w	42431c <__sfvwrite_r+0x1fc>
  4241c4:	6820      	ldr	r0, [r4, #0]
  4241c6:	46ba      	mov	sl, r7
  4241c8:	465a      	mov	r2, fp
  4241ca:	4649      	mov	r1, r9
  4241cc:	f000 fa40 	bl	424650 <memmove>
  4241d0:	68a2      	ldr	r2, [r4, #8]
  4241d2:	6823      	ldr	r3, [r4, #0]
  4241d4:	eba2 0208 	sub.w	r2, r2, r8
  4241d8:	445b      	add	r3, fp
  4241da:	60a2      	str	r2, [r4, #8]
  4241dc:	6023      	str	r3, [r4, #0]
  4241de:	9a01      	ldr	r2, [sp, #4]
  4241e0:	6893      	ldr	r3, [r2, #8]
  4241e2:	eba3 030a 	sub.w	r3, r3, sl
  4241e6:	44d1      	add	r9, sl
  4241e8:	eba7 070a 	sub.w	r7, r7, sl
  4241ec:	6093      	str	r3, [r2, #8]
  4241ee:	2b00      	cmp	r3, #0
  4241f0:	d0c5      	beq.n	42417e <__sfvwrite_r+0x5e>
  4241f2:	89a3      	ldrh	r3, [r4, #12]
  4241f4:	2f00      	cmp	r7, #0
  4241f6:	d1d8      	bne.n	4241aa <__sfvwrite_r+0x8a>
  4241f8:	f8d5 9000 	ldr.w	r9, [r5]
  4241fc:	686f      	ldr	r7, [r5, #4]
  4241fe:	3508      	adds	r5, #8
  424200:	e7d2      	b.n	4241a8 <__sfvwrite_r+0x88>
  424202:	f8d5 9000 	ldr.w	r9, [r5]
  424206:	f8d5 8004 	ldr.w	r8, [r5, #4]
  42420a:	3508      	adds	r5, #8
  42420c:	e79f      	b.n	42414e <__sfvwrite_r+0x2e>
  42420e:	2000      	movs	r0, #0
  424210:	4770      	bx	lr
  424212:	4621      	mov	r1, r4
  424214:	9800      	ldr	r0, [sp, #0]
  424216:	f7ff fd1f 	bl	423c58 <_fflush_r>
  42421a:	b370      	cbz	r0, 42427a <__sfvwrite_r+0x15a>
  42421c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  424224:	f04f 30ff 	mov.w	r0, #4294967295
  424228:	81a3      	strh	r3, [r4, #12]
  42422a:	b003      	add	sp, #12
  42422c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424230:	4681      	mov	r9, r0
  424232:	4633      	mov	r3, r6
  424234:	464e      	mov	r6, r9
  424236:	46a8      	mov	r8, r5
  424238:	469a      	mov	sl, r3
  42423a:	464d      	mov	r5, r9
  42423c:	b34e      	cbz	r6, 424292 <__sfvwrite_r+0x172>
  42423e:	b380      	cbz	r0, 4242a2 <__sfvwrite_r+0x182>
  424240:	6820      	ldr	r0, [r4, #0]
  424242:	6923      	ldr	r3, [r4, #16]
  424244:	6962      	ldr	r2, [r4, #20]
  424246:	45b1      	cmp	r9, r6
  424248:	46cb      	mov	fp, r9
  42424a:	bf28      	it	cs
  42424c:	46b3      	movcs	fp, r6
  42424e:	4298      	cmp	r0, r3
  424250:	465f      	mov	r7, fp
  424252:	d904      	bls.n	42425e <__sfvwrite_r+0x13e>
  424254:	68a3      	ldr	r3, [r4, #8]
  424256:	4413      	add	r3, r2
  424258:	459b      	cmp	fp, r3
  42425a:	f300 80a6 	bgt.w	4243aa <__sfvwrite_r+0x28a>
  42425e:	4593      	cmp	fp, r2
  424260:	db4b      	blt.n	4242fa <__sfvwrite_r+0x1da>
  424262:	4613      	mov	r3, r2
  424264:	6a67      	ldr	r7, [r4, #36]	; 0x24
  424266:	69e1      	ldr	r1, [r4, #28]
  424268:	9800      	ldr	r0, [sp, #0]
  42426a:	462a      	mov	r2, r5
  42426c:	47b8      	blx	r7
  42426e:	1e07      	subs	r7, r0, #0
  424270:	ddd4      	ble.n	42421c <__sfvwrite_r+0xfc>
  424272:	ebb9 0907 	subs.w	r9, r9, r7
  424276:	d0cc      	beq.n	424212 <__sfvwrite_r+0xf2>
  424278:	2001      	movs	r0, #1
  42427a:	f8da 3008 	ldr.w	r3, [sl, #8]
  42427e:	1bdb      	subs	r3, r3, r7
  424280:	443d      	add	r5, r7
  424282:	1bf6      	subs	r6, r6, r7
  424284:	f8ca 3008 	str.w	r3, [sl, #8]
  424288:	2b00      	cmp	r3, #0
  42428a:	f43f af78 	beq.w	42417e <__sfvwrite_r+0x5e>
  42428e:	2e00      	cmp	r6, #0
  424290:	d1d5      	bne.n	42423e <__sfvwrite_r+0x11e>
  424292:	f108 0308 	add.w	r3, r8, #8
  424296:	e913 0060 	ldmdb	r3, {r5, r6}
  42429a:	4698      	mov	r8, r3
  42429c:	3308      	adds	r3, #8
  42429e:	2e00      	cmp	r6, #0
  4242a0:	d0f9      	beq.n	424296 <__sfvwrite_r+0x176>
  4242a2:	4632      	mov	r2, r6
  4242a4:	210a      	movs	r1, #10
  4242a6:	4628      	mov	r0, r5
  4242a8:	f000 f982 	bl	4245b0 <memchr>
  4242ac:	2800      	cmp	r0, #0
  4242ae:	f000 80a1 	beq.w	4243f4 <__sfvwrite_r+0x2d4>
  4242b2:	3001      	adds	r0, #1
  4242b4:	eba0 0905 	sub.w	r9, r0, r5
  4242b8:	e7c2      	b.n	424240 <__sfvwrite_r+0x120>
  4242ba:	6820      	ldr	r0, [r4, #0]
  4242bc:	6923      	ldr	r3, [r4, #16]
  4242be:	4298      	cmp	r0, r3
  4242c0:	d802      	bhi.n	4242c8 <__sfvwrite_r+0x1a8>
  4242c2:	6963      	ldr	r3, [r4, #20]
  4242c4:	429f      	cmp	r7, r3
  4242c6:	d25d      	bcs.n	424384 <__sfvwrite_r+0x264>
  4242c8:	45b8      	cmp	r8, r7
  4242ca:	bf28      	it	cs
  4242cc:	46b8      	movcs	r8, r7
  4242ce:	4642      	mov	r2, r8
  4242d0:	4649      	mov	r1, r9
  4242d2:	f000 f9bd 	bl	424650 <memmove>
  4242d6:	68a3      	ldr	r3, [r4, #8]
  4242d8:	6822      	ldr	r2, [r4, #0]
  4242da:	eba3 0308 	sub.w	r3, r3, r8
  4242de:	4442      	add	r2, r8
  4242e0:	60a3      	str	r3, [r4, #8]
  4242e2:	6022      	str	r2, [r4, #0]
  4242e4:	b10b      	cbz	r3, 4242ea <__sfvwrite_r+0x1ca>
  4242e6:	46c2      	mov	sl, r8
  4242e8:	e779      	b.n	4241de <__sfvwrite_r+0xbe>
  4242ea:	4621      	mov	r1, r4
  4242ec:	9800      	ldr	r0, [sp, #0]
  4242ee:	f7ff fcb3 	bl	423c58 <_fflush_r>
  4242f2:	2800      	cmp	r0, #0
  4242f4:	d192      	bne.n	42421c <__sfvwrite_r+0xfc>
  4242f6:	46c2      	mov	sl, r8
  4242f8:	e771      	b.n	4241de <__sfvwrite_r+0xbe>
  4242fa:	465a      	mov	r2, fp
  4242fc:	4629      	mov	r1, r5
  4242fe:	f000 f9a7 	bl	424650 <memmove>
  424302:	68a2      	ldr	r2, [r4, #8]
  424304:	6823      	ldr	r3, [r4, #0]
  424306:	eba2 020b 	sub.w	r2, r2, fp
  42430a:	445b      	add	r3, fp
  42430c:	60a2      	str	r2, [r4, #8]
  42430e:	6023      	str	r3, [r4, #0]
  424310:	e7af      	b.n	424272 <__sfvwrite_r+0x152>
  424312:	6820      	ldr	r0, [r4, #0]
  424314:	46b8      	mov	r8, r7
  424316:	46ba      	mov	sl, r7
  424318:	46bb      	mov	fp, r7
  42431a:	e755      	b.n	4241c8 <__sfvwrite_r+0xa8>
  42431c:	6962      	ldr	r2, [r4, #20]
  42431e:	6820      	ldr	r0, [r4, #0]
  424320:	6921      	ldr	r1, [r4, #16]
  424322:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  424326:	eba0 0a01 	sub.w	sl, r0, r1
  42432a:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  42432e:	f10a 0001 	add.w	r0, sl, #1
  424332:	ea4f 0868 	mov.w	r8, r8, asr #1
  424336:	4438      	add	r0, r7
  424338:	4540      	cmp	r0, r8
  42433a:	4642      	mov	r2, r8
  42433c:	bf84      	itt	hi
  42433e:	4680      	movhi	r8, r0
  424340:	4642      	movhi	r2, r8
  424342:	055b      	lsls	r3, r3, #21
  424344:	d544      	bpl.n	4243d0 <__sfvwrite_r+0x2b0>
  424346:	4611      	mov	r1, r2
  424348:	9800      	ldr	r0, [sp, #0]
  42434a:	f7fd fd75 	bl	421e38 <_malloc_r>
  42434e:	4683      	mov	fp, r0
  424350:	2800      	cmp	r0, #0
  424352:	d055      	beq.n	424400 <__sfvwrite_r+0x2e0>
  424354:	4652      	mov	r2, sl
  424356:	6921      	ldr	r1, [r4, #16]
  424358:	f7fe f84e 	bl	4223f8 <memcpy>
  42435c:	89a3      	ldrh	r3, [r4, #12]
  42435e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  424362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  424366:	81a3      	strh	r3, [r4, #12]
  424368:	eb0b 000a 	add.w	r0, fp, sl
  42436c:	eba8 030a 	sub.w	r3, r8, sl
  424370:	f8c4 b010 	str.w	fp, [r4, #16]
  424374:	f8c4 8014 	str.w	r8, [r4, #20]
  424378:	6020      	str	r0, [r4, #0]
  42437a:	60a3      	str	r3, [r4, #8]
  42437c:	46b8      	mov	r8, r7
  42437e:	46ba      	mov	sl, r7
  424380:	46bb      	mov	fp, r7
  424382:	e721      	b.n	4241c8 <__sfvwrite_r+0xa8>
  424384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  424388:	42b9      	cmp	r1, r7
  42438a:	bf28      	it	cs
  42438c:	4639      	movcs	r1, r7
  42438e:	464a      	mov	r2, r9
  424390:	fb91 f1f3 	sdiv	r1, r1, r3
  424394:	9800      	ldr	r0, [sp, #0]
  424396:	6a66      	ldr	r6, [r4, #36]	; 0x24
  424398:	fb03 f301 	mul.w	r3, r3, r1
  42439c:	69e1      	ldr	r1, [r4, #28]
  42439e:	47b0      	blx	r6
  4243a0:	f1b0 0a00 	subs.w	sl, r0, #0
  4243a4:	f73f af1b 	bgt.w	4241de <__sfvwrite_r+0xbe>
  4243a8:	e738      	b.n	42421c <__sfvwrite_r+0xfc>
  4243aa:	461a      	mov	r2, r3
  4243ac:	4629      	mov	r1, r5
  4243ae:	9301      	str	r3, [sp, #4]
  4243b0:	f000 f94e 	bl	424650 <memmove>
  4243b4:	6822      	ldr	r2, [r4, #0]
  4243b6:	9b01      	ldr	r3, [sp, #4]
  4243b8:	9800      	ldr	r0, [sp, #0]
  4243ba:	441a      	add	r2, r3
  4243bc:	6022      	str	r2, [r4, #0]
  4243be:	4621      	mov	r1, r4
  4243c0:	f7ff fc4a 	bl	423c58 <_fflush_r>
  4243c4:	9b01      	ldr	r3, [sp, #4]
  4243c6:	2800      	cmp	r0, #0
  4243c8:	f47f af28 	bne.w	42421c <__sfvwrite_r+0xfc>
  4243cc:	461f      	mov	r7, r3
  4243ce:	e750      	b.n	424272 <__sfvwrite_r+0x152>
  4243d0:	9800      	ldr	r0, [sp, #0]
  4243d2:	f000 f9a1 	bl	424718 <_realloc_r>
  4243d6:	4683      	mov	fp, r0
  4243d8:	2800      	cmp	r0, #0
  4243da:	d1c5      	bne.n	424368 <__sfvwrite_r+0x248>
  4243dc:	9d00      	ldr	r5, [sp, #0]
  4243de:	6921      	ldr	r1, [r4, #16]
  4243e0:	4628      	mov	r0, r5
  4243e2:	f7ff fdb7 	bl	423f54 <_free_r>
  4243e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4243ea:	220c      	movs	r2, #12
  4243ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4243f0:	602a      	str	r2, [r5, #0]
  4243f2:	e715      	b.n	424220 <__sfvwrite_r+0x100>
  4243f4:	f106 0901 	add.w	r9, r6, #1
  4243f8:	e722      	b.n	424240 <__sfvwrite_r+0x120>
  4243fa:	f04f 30ff 	mov.w	r0, #4294967295
  4243fe:	e6bf      	b.n	424180 <__sfvwrite_r+0x60>
  424400:	9a00      	ldr	r2, [sp, #0]
  424402:	230c      	movs	r3, #12
  424404:	6013      	str	r3, [r2, #0]
  424406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42440a:	e709      	b.n	424220 <__sfvwrite_r+0x100>
  42440c:	7ffffc00 	.word	0x7ffffc00

00424410 <_fwalk_reent>:
  424410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  424414:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  424418:	d01f      	beq.n	42445a <_fwalk_reent+0x4a>
  42441a:	4688      	mov	r8, r1
  42441c:	4606      	mov	r6, r0
  42441e:	f04f 0900 	mov.w	r9, #0
  424422:	687d      	ldr	r5, [r7, #4]
  424424:	68bc      	ldr	r4, [r7, #8]
  424426:	3d01      	subs	r5, #1
  424428:	d411      	bmi.n	42444e <_fwalk_reent+0x3e>
  42442a:	89a3      	ldrh	r3, [r4, #12]
  42442c:	2b01      	cmp	r3, #1
  42442e:	f105 35ff 	add.w	r5, r5, #4294967295
  424432:	d908      	bls.n	424446 <_fwalk_reent+0x36>
  424434:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  424438:	3301      	adds	r3, #1
  42443a:	4621      	mov	r1, r4
  42443c:	4630      	mov	r0, r6
  42443e:	d002      	beq.n	424446 <_fwalk_reent+0x36>
  424440:	47c0      	blx	r8
  424442:	ea49 0900 	orr.w	r9, r9, r0
  424446:	1c6b      	adds	r3, r5, #1
  424448:	f104 0468 	add.w	r4, r4, #104	; 0x68
  42444c:	d1ed      	bne.n	42442a <_fwalk_reent+0x1a>
  42444e:	683f      	ldr	r7, [r7, #0]
  424450:	2f00      	cmp	r7, #0
  424452:	d1e6      	bne.n	424422 <_fwalk_reent+0x12>
  424454:	4648      	mov	r0, r9
  424456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  42445a:	46b9      	mov	r9, r7
  42445c:	4648      	mov	r0, r9
  42445e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  424462:	bf00      	nop

00424464 <__locale_mb_cur_max>:
  424464:	4b04      	ldr	r3, [pc, #16]	; (424478 <__locale_mb_cur_max+0x14>)
  424466:	4a05      	ldr	r2, [pc, #20]	; (42447c <__locale_mb_cur_max+0x18>)
  424468:	681b      	ldr	r3, [r3, #0]
  42446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  42446c:	2b00      	cmp	r3, #0
  42446e:	bf08      	it	eq
  424470:	4613      	moveq	r3, r2
  424472:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  424476:	4770      	bx	lr
  424478:	20400070 	.word	0x20400070
  42447c:	204008b4 	.word	0x204008b4

00424480 <__retarget_lock_init_recursive>:
  424480:	4770      	bx	lr
  424482:	bf00      	nop

00424484 <__retarget_lock_close_recursive>:
  424484:	4770      	bx	lr
  424486:	bf00      	nop

00424488 <__retarget_lock_acquire_recursive>:
  424488:	4770      	bx	lr
  42448a:	bf00      	nop

0042448c <__retarget_lock_release_recursive>:
  42448c:	4770      	bx	lr
  42448e:	bf00      	nop

00424490 <__swhatbuf_r>:
  424490:	b570      	push	{r4, r5, r6, lr}
  424492:	460c      	mov	r4, r1
  424494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  424498:	2900      	cmp	r1, #0
  42449a:	b090      	sub	sp, #64	; 0x40
  42449c:	4615      	mov	r5, r2
  42449e:	461e      	mov	r6, r3
  4244a0:	db14      	blt.n	4244cc <__swhatbuf_r+0x3c>
  4244a2:	aa01      	add	r2, sp, #4
  4244a4:	f000 fc9e 	bl	424de4 <_fstat_r>
  4244a8:	2800      	cmp	r0, #0
  4244aa:	db0f      	blt.n	4244cc <__swhatbuf_r+0x3c>
  4244ac:	9a02      	ldr	r2, [sp, #8]
  4244ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4244b2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4244b6:	fab2 f282 	clz	r2, r2
  4244ba:	0952      	lsrs	r2, r2, #5
  4244bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4244c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4244c4:	6032      	str	r2, [r6, #0]
  4244c6:	602b      	str	r3, [r5, #0]
  4244c8:	b010      	add	sp, #64	; 0x40
  4244ca:	bd70      	pop	{r4, r5, r6, pc}
  4244cc:	89a2      	ldrh	r2, [r4, #12]
  4244ce:	2300      	movs	r3, #0
  4244d0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  4244d4:	6033      	str	r3, [r6, #0]
  4244d6:	d004      	beq.n	4244e2 <__swhatbuf_r+0x52>
  4244d8:	2240      	movs	r2, #64	; 0x40
  4244da:	4618      	mov	r0, r3
  4244dc:	602a      	str	r2, [r5, #0]
  4244de:	b010      	add	sp, #64	; 0x40
  4244e0:	bd70      	pop	{r4, r5, r6, pc}
  4244e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4244e6:	602b      	str	r3, [r5, #0]
  4244e8:	b010      	add	sp, #64	; 0x40
  4244ea:	bd70      	pop	{r4, r5, r6, pc}

004244ec <__smakebuf_r>:
  4244ec:	898a      	ldrh	r2, [r1, #12]
  4244ee:	0792      	lsls	r2, r2, #30
  4244f0:	460b      	mov	r3, r1
  4244f2:	d506      	bpl.n	424502 <__smakebuf_r+0x16>
  4244f4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4244f8:	2101      	movs	r1, #1
  4244fa:	601a      	str	r2, [r3, #0]
  4244fc:	611a      	str	r2, [r3, #16]
  4244fe:	6159      	str	r1, [r3, #20]
  424500:	4770      	bx	lr
  424502:	b5f0      	push	{r4, r5, r6, r7, lr}
  424504:	b083      	sub	sp, #12
  424506:	ab01      	add	r3, sp, #4
  424508:	466a      	mov	r2, sp
  42450a:	460c      	mov	r4, r1
  42450c:	4606      	mov	r6, r0
  42450e:	f7ff ffbf 	bl	424490 <__swhatbuf_r>
  424512:	9900      	ldr	r1, [sp, #0]
  424514:	4605      	mov	r5, r0
  424516:	4630      	mov	r0, r6
  424518:	f7fd fc8e 	bl	421e38 <_malloc_r>
  42451c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424520:	b1d8      	cbz	r0, 42455a <__smakebuf_r+0x6e>
  424522:	9a01      	ldr	r2, [sp, #4]
  424524:	4f15      	ldr	r7, [pc, #84]	; (42457c <__smakebuf_r+0x90>)
  424526:	9900      	ldr	r1, [sp, #0]
  424528:	63f7      	str	r7, [r6, #60]	; 0x3c
  42452a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  42452e:	81a3      	strh	r3, [r4, #12]
  424530:	6020      	str	r0, [r4, #0]
  424532:	6120      	str	r0, [r4, #16]
  424534:	6161      	str	r1, [r4, #20]
  424536:	b91a      	cbnz	r2, 424540 <__smakebuf_r+0x54>
  424538:	432b      	orrs	r3, r5
  42453a:	81a3      	strh	r3, [r4, #12]
  42453c:	b003      	add	sp, #12
  42453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  424540:	4630      	mov	r0, r6
  424542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  424546:	f000 fc61 	bl	424e0c <_isatty_r>
  42454a:	b1a0      	cbz	r0, 424576 <__smakebuf_r+0x8a>
  42454c:	89a3      	ldrh	r3, [r4, #12]
  42454e:	f023 0303 	bic.w	r3, r3, #3
  424552:	f043 0301 	orr.w	r3, r3, #1
  424556:	b21b      	sxth	r3, r3
  424558:	e7ee      	b.n	424538 <__smakebuf_r+0x4c>
  42455a:	059a      	lsls	r2, r3, #22
  42455c:	d4ee      	bmi.n	42453c <__smakebuf_r+0x50>
  42455e:	f023 0303 	bic.w	r3, r3, #3
  424562:	f104 0243 	add.w	r2, r4, #67	; 0x43
  424566:	f043 0302 	orr.w	r3, r3, #2
  42456a:	2101      	movs	r1, #1
  42456c:	81a3      	strh	r3, [r4, #12]
  42456e:	6022      	str	r2, [r4, #0]
  424570:	6122      	str	r2, [r4, #16]
  424572:	6161      	str	r1, [r4, #20]
  424574:	e7e2      	b.n	42453c <__smakebuf_r+0x50>
  424576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  42457a:	e7dd      	b.n	424538 <__smakebuf_r+0x4c>
  42457c:	00423cad 	.word	0x00423cad

00424580 <__ascii_mbtowc>:
  424580:	b082      	sub	sp, #8
  424582:	b149      	cbz	r1, 424598 <__ascii_mbtowc+0x18>
  424584:	b15a      	cbz	r2, 42459e <__ascii_mbtowc+0x1e>
  424586:	b16b      	cbz	r3, 4245a4 <__ascii_mbtowc+0x24>
  424588:	7813      	ldrb	r3, [r2, #0]
  42458a:	600b      	str	r3, [r1, #0]
  42458c:	7812      	ldrb	r2, [r2, #0]
  42458e:	1c10      	adds	r0, r2, #0
  424590:	bf18      	it	ne
  424592:	2001      	movne	r0, #1
  424594:	b002      	add	sp, #8
  424596:	4770      	bx	lr
  424598:	a901      	add	r1, sp, #4
  42459a:	2a00      	cmp	r2, #0
  42459c:	d1f3      	bne.n	424586 <__ascii_mbtowc+0x6>
  42459e:	4610      	mov	r0, r2
  4245a0:	b002      	add	sp, #8
  4245a2:	4770      	bx	lr
  4245a4:	f06f 0001 	mvn.w	r0, #1
  4245a8:	e7f4      	b.n	424594 <__ascii_mbtowc+0x14>
  4245aa:	bf00      	nop
  4245ac:	0000      	movs	r0, r0
	...

004245b0 <memchr>:
  4245b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4245b4:	2a10      	cmp	r2, #16
  4245b6:	db2b      	blt.n	424610 <memchr+0x60>
  4245b8:	f010 0f07 	tst.w	r0, #7
  4245bc:	d008      	beq.n	4245d0 <memchr+0x20>
  4245be:	f810 3b01 	ldrb.w	r3, [r0], #1
  4245c2:	3a01      	subs	r2, #1
  4245c4:	428b      	cmp	r3, r1
  4245c6:	d02d      	beq.n	424624 <memchr+0x74>
  4245c8:	f010 0f07 	tst.w	r0, #7
  4245cc:	b342      	cbz	r2, 424620 <memchr+0x70>
  4245ce:	d1f6      	bne.n	4245be <memchr+0xe>
  4245d0:	b4f0      	push	{r4, r5, r6, r7}
  4245d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4245d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4245da:	f022 0407 	bic.w	r4, r2, #7
  4245de:	f07f 0700 	mvns.w	r7, #0
  4245e2:	2300      	movs	r3, #0
  4245e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4245e8:	3c08      	subs	r4, #8
  4245ea:	ea85 0501 	eor.w	r5, r5, r1
  4245ee:	ea86 0601 	eor.w	r6, r6, r1
  4245f2:	fa85 f547 	uadd8	r5, r5, r7
  4245f6:	faa3 f587 	sel	r5, r3, r7
  4245fa:	fa86 f647 	uadd8	r6, r6, r7
  4245fe:	faa5 f687 	sel	r6, r5, r7
  424602:	b98e      	cbnz	r6, 424628 <memchr+0x78>
  424604:	d1ee      	bne.n	4245e4 <memchr+0x34>
  424606:	bcf0      	pop	{r4, r5, r6, r7}
  424608:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  42460c:	f002 0207 	and.w	r2, r2, #7
  424610:	b132      	cbz	r2, 424620 <memchr+0x70>
  424612:	f810 3b01 	ldrb.w	r3, [r0], #1
  424616:	3a01      	subs	r2, #1
  424618:	ea83 0301 	eor.w	r3, r3, r1
  42461c:	b113      	cbz	r3, 424624 <memchr+0x74>
  42461e:	d1f8      	bne.n	424612 <memchr+0x62>
  424620:	2000      	movs	r0, #0
  424622:	4770      	bx	lr
  424624:	3801      	subs	r0, #1
  424626:	4770      	bx	lr
  424628:	2d00      	cmp	r5, #0
  42462a:	bf06      	itte	eq
  42462c:	4635      	moveq	r5, r6
  42462e:	3803      	subeq	r0, #3
  424630:	3807      	subne	r0, #7
  424632:	f015 0f01 	tst.w	r5, #1
  424636:	d107      	bne.n	424648 <memchr+0x98>
  424638:	3001      	adds	r0, #1
  42463a:	f415 7f80 	tst.w	r5, #256	; 0x100
  42463e:	bf02      	ittt	eq
  424640:	3001      	addeq	r0, #1
  424642:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  424646:	3001      	addeq	r0, #1
  424648:	bcf0      	pop	{r4, r5, r6, r7}
  42464a:	3801      	subs	r0, #1
  42464c:	4770      	bx	lr
  42464e:	bf00      	nop

00424650 <memmove>:
  424650:	4288      	cmp	r0, r1
  424652:	b5f0      	push	{r4, r5, r6, r7, lr}
  424654:	d90d      	bls.n	424672 <memmove+0x22>
  424656:	188b      	adds	r3, r1, r2
  424658:	4298      	cmp	r0, r3
  42465a:	d20a      	bcs.n	424672 <memmove+0x22>
  42465c:	1884      	adds	r4, r0, r2
  42465e:	2a00      	cmp	r2, #0
  424660:	d051      	beq.n	424706 <memmove+0xb6>
  424662:	4622      	mov	r2, r4
  424664:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  424668:	f802 4d01 	strb.w	r4, [r2, #-1]!
  42466c:	4299      	cmp	r1, r3
  42466e:	d1f9      	bne.n	424664 <memmove+0x14>
  424670:	bdf0      	pop	{r4, r5, r6, r7, pc}
  424672:	2a0f      	cmp	r2, #15
  424674:	d948      	bls.n	424708 <memmove+0xb8>
  424676:	ea41 0300 	orr.w	r3, r1, r0
  42467a:	079b      	lsls	r3, r3, #30
  42467c:	d146      	bne.n	42470c <memmove+0xbc>
  42467e:	f100 0410 	add.w	r4, r0, #16
  424682:	f101 0310 	add.w	r3, r1, #16
  424686:	4615      	mov	r5, r2
  424688:	f853 6c10 	ldr.w	r6, [r3, #-16]
  42468c:	f844 6c10 	str.w	r6, [r4, #-16]
  424690:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  424694:	f844 6c0c 	str.w	r6, [r4, #-12]
  424698:	f853 6c08 	ldr.w	r6, [r3, #-8]
  42469c:	f844 6c08 	str.w	r6, [r4, #-8]
  4246a0:	3d10      	subs	r5, #16
  4246a2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4246a6:	f844 6c04 	str.w	r6, [r4, #-4]
  4246aa:	2d0f      	cmp	r5, #15
  4246ac:	f103 0310 	add.w	r3, r3, #16
  4246b0:	f104 0410 	add.w	r4, r4, #16
  4246b4:	d8e8      	bhi.n	424688 <memmove+0x38>
  4246b6:	f1a2 0310 	sub.w	r3, r2, #16
  4246ba:	f023 030f 	bic.w	r3, r3, #15
  4246be:	f002 0e0f 	and.w	lr, r2, #15
  4246c2:	3310      	adds	r3, #16
  4246c4:	f1be 0f03 	cmp.w	lr, #3
  4246c8:	4419      	add	r1, r3
  4246ca:	4403      	add	r3, r0
  4246cc:	d921      	bls.n	424712 <memmove+0xc2>
  4246ce:	1f1e      	subs	r6, r3, #4
  4246d0:	460d      	mov	r5, r1
  4246d2:	4674      	mov	r4, lr
  4246d4:	3c04      	subs	r4, #4
  4246d6:	f855 7b04 	ldr.w	r7, [r5], #4
  4246da:	f846 7f04 	str.w	r7, [r6, #4]!
  4246de:	2c03      	cmp	r4, #3
  4246e0:	d8f8      	bhi.n	4246d4 <memmove+0x84>
  4246e2:	f1ae 0404 	sub.w	r4, lr, #4
  4246e6:	f024 0403 	bic.w	r4, r4, #3
  4246ea:	3404      	adds	r4, #4
  4246ec:	4421      	add	r1, r4
  4246ee:	4423      	add	r3, r4
  4246f0:	f002 0203 	and.w	r2, r2, #3
  4246f4:	b162      	cbz	r2, 424710 <memmove+0xc0>
  4246f6:	3b01      	subs	r3, #1
  4246f8:	440a      	add	r2, r1
  4246fa:	f811 4b01 	ldrb.w	r4, [r1], #1
  4246fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  424702:	428a      	cmp	r2, r1
  424704:	d1f9      	bne.n	4246fa <memmove+0xaa>
  424706:	bdf0      	pop	{r4, r5, r6, r7, pc}
  424708:	4603      	mov	r3, r0
  42470a:	e7f3      	b.n	4246f4 <memmove+0xa4>
  42470c:	4603      	mov	r3, r0
  42470e:	e7f2      	b.n	4246f6 <memmove+0xa6>
  424710:	bdf0      	pop	{r4, r5, r6, r7, pc}
  424712:	4672      	mov	r2, lr
  424714:	e7ee      	b.n	4246f4 <memmove+0xa4>
  424716:	bf00      	nop

00424718 <_realloc_r>:
  424718:	2900      	cmp	r1, #0
  42471a:	f000 8095 	beq.w	424848 <_realloc_r+0x130>
  42471e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  424722:	460d      	mov	r5, r1
  424724:	4616      	mov	r6, r2
  424726:	b083      	sub	sp, #12
  424728:	4680      	mov	r8, r0
  42472a:	f106 070b 	add.w	r7, r6, #11
  42472e:	f7fd ff4b 	bl	4225c8 <__malloc_lock>
  424732:	f855 ec04 	ldr.w	lr, [r5, #-4]
  424736:	2f16      	cmp	r7, #22
  424738:	f02e 0403 	bic.w	r4, lr, #3
  42473c:	f1a5 0908 	sub.w	r9, r5, #8
  424740:	d83c      	bhi.n	4247bc <_realloc_r+0xa4>
  424742:	2210      	movs	r2, #16
  424744:	4617      	mov	r7, r2
  424746:	42be      	cmp	r6, r7
  424748:	d83d      	bhi.n	4247c6 <_realloc_r+0xae>
  42474a:	4294      	cmp	r4, r2
  42474c:	da43      	bge.n	4247d6 <_realloc_r+0xbe>
  42474e:	4bc4      	ldr	r3, [pc, #784]	; (424a60 <_realloc_r+0x348>)
  424750:	6899      	ldr	r1, [r3, #8]
  424752:	eb09 0004 	add.w	r0, r9, r4
  424756:	4288      	cmp	r0, r1
  424758:	f000 80b4 	beq.w	4248c4 <_realloc_r+0x1ac>
  42475c:	6843      	ldr	r3, [r0, #4]
  42475e:	f023 0101 	bic.w	r1, r3, #1
  424762:	4401      	add	r1, r0
  424764:	6849      	ldr	r1, [r1, #4]
  424766:	07c9      	lsls	r1, r1, #31
  424768:	d54c      	bpl.n	424804 <_realloc_r+0xec>
  42476a:	f01e 0f01 	tst.w	lr, #1
  42476e:	f000 809b 	beq.w	4248a8 <_realloc_r+0x190>
  424772:	4631      	mov	r1, r6
  424774:	4640      	mov	r0, r8
  424776:	f7fd fb5f 	bl	421e38 <_malloc_r>
  42477a:	4606      	mov	r6, r0
  42477c:	2800      	cmp	r0, #0
  42477e:	d03a      	beq.n	4247f6 <_realloc_r+0xde>
  424780:	f855 3c04 	ldr.w	r3, [r5, #-4]
  424784:	f023 0301 	bic.w	r3, r3, #1
  424788:	444b      	add	r3, r9
  42478a:	f1a0 0208 	sub.w	r2, r0, #8
  42478e:	429a      	cmp	r2, r3
  424790:	f000 8121 	beq.w	4249d6 <_realloc_r+0x2be>
  424794:	1f22      	subs	r2, r4, #4
  424796:	2a24      	cmp	r2, #36	; 0x24
  424798:	f200 8107 	bhi.w	4249aa <_realloc_r+0x292>
  42479c:	2a13      	cmp	r2, #19
  42479e:	f200 80db 	bhi.w	424958 <_realloc_r+0x240>
  4247a2:	4603      	mov	r3, r0
  4247a4:	462a      	mov	r2, r5
  4247a6:	6811      	ldr	r1, [r2, #0]
  4247a8:	6019      	str	r1, [r3, #0]
  4247aa:	6851      	ldr	r1, [r2, #4]
  4247ac:	6059      	str	r1, [r3, #4]
  4247ae:	6892      	ldr	r2, [r2, #8]
  4247b0:	609a      	str	r2, [r3, #8]
  4247b2:	4629      	mov	r1, r5
  4247b4:	4640      	mov	r0, r8
  4247b6:	f7ff fbcd 	bl	423f54 <_free_r>
  4247ba:	e01c      	b.n	4247f6 <_realloc_r+0xde>
  4247bc:	f027 0707 	bic.w	r7, r7, #7
  4247c0:	2f00      	cmp	r7, #0
  4247c2:	463a      	mov	r2, r7
  4247c4:	dabf      	bge.n	424746 <_realloc_r+0x2e>
  4247c6:	2600      	movs	r6, #0
  4247c8:	230c      	movs	r3, #12
  4247ca:	4630      	mov	r0, r6
  4247cc:	f8c8 3000 	str.w	r3, [r8]
  4247d0:	b003      	add	sp, #12
  4247d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4247d6:	462e      	mov	r6, r5
  4247d8:	1be3      	subs	r3, r4, r7
  4247da:	2b0f      	cmp	r3, #15
  4247dc:	d81e      	bhi.n	42481c <_realloc_r+0x104>
  4247de:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4247e2:	f003 0301 	and.w	r3, r3, #1
  4247e6:	4323      	orrs	r3, r4
  4247e8:	444c      	add	r4, r9
  4247ea:	f8c9 3004 	str.w	r3, [r9, #4]
  4247ee:	6863      	ldr	r3, [r4, #4]
  4247f0:	f043 0301 	orr.w	r3, r3, #1
  4247f4:	6063      	str	r3, [r4, #4]
  4247f6:	4640      	mov	r0, r8
  4247f8:	f7fd feec 	bl	4225d4 <__malloc_unlock>
  4247fc:	4630      	mov	r0, r6
  4247fe:	b003      	add	sp, #12
  424800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  424804:	f023 0303 	bic.w	r3, r3, #3
  424808:	18e1      	adds	r1, r4, r3
  42480a:	4291      	cmp	r1, r2
  42480c:	db1f      	blt.n	42484e <_realloc_r+0x136>
  42480e:	68c3      	ldr	r3, [r0, #12]
  424810:	6882      	ldr	r2, [r0, #8]
  424812:	462e      	mov	r6, r5
  424814:	60d3      	str	r3, [r2, #12]
  424816:	460c      	mov	r4, r1
  424818:	609a      	str	r2, [r3, #8]
  42481a:	e7dd      	b.n	4247d8 <_realloc_r+0xc0>
  42481c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  424820:	eb09 0107 	add.w	r1, r9, r7
  424824:	f002 0201 	and.w	r2, r2, #1
  424828:	444c      	add	r4, r9
  42482a:	f043 0301 	orr.w	r3, r3, #1
  42482e:	4317      	orrs	r7, r2
  424830:	f8c9 7004 	str.w	r7, [r9, #4]
  424834:	604b      	str	r3, [r1, #4]
  424836:	6863      	ldr	r3, [r4, #4]
  424838:	f043 0301 	orr.w	r3, r3, #1
  42483c:	3108      	adds	r1, #8
  42483e:	6063      	str	r3, [r4, #4]
  424840:	4640      	mov	r0, r8
  424842:	f7ff fb87 	bl	423f54 <_free_r>
  424846:	e7d6      	b.n	4247f6 <_realloc_r+0xde>
  424848:	4611      	mov	r1, r2
  42484a:	f7fd baf5 	b.w	421e38 <_malloc_r>
  42484e:	f01e 0f01 	tst.w	lr, #1
  424852:	d18e      	bne.n	424772 <_realloc_r+0x5a>
  424854:	f855 1c08 	ldr.w	r1, [r5, #-8]
  424858:	eba9 0a01 	sub.w	sl, r9, r1
  42485c:	f8da 1004 	ldr.w	r1, [sl, #4]
  424860:	f021 0103 	bic.w	r1, r1, #3
  424864:	440b      	add	r3, r1
  424866:	4423      	add	r3, r4
  424868:	4293      	cmp	r3, r2
  42486a:	db25      	blt.n	4248b8 <_realloc_r+0x1a0>
  42486c:	68c2      	ldr	r2, [r0, #12]
  42486e:	6881      	ldr	r1, [r0, #8]
  424870:	4656      	mov	r6, sl
  424872:	60ca      	str	r2, [r1, #12]
  424874:	6091      	str	r1, [r2, #8]
  424876:	f8da 100c 	ldr.w	r1, [sl, #12]
  42487a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  42487e:	1f22      	subs	r2, r4, #4
  424880:	2a24      	cmp	r2, #36	; 0x24
  424882:	60c1      	str	r1, [r0, #12]
  424884:	6088      	str	r0, [r1, #8]
  424886:	f200 8094 	bhi.w	4249b2 <_realloc_r+0x29a>
  42488a:	2a13      	cmp	r2, #19
  42488c:	d96f      	bls.n	42496e <_realloc_r+0x256>
  42488e:	6829      	ldr	r1, [r5, #0]
  424890:	f8ca 1008 	str.w	r1, [sl, #8]
  424894:	6869      	ldr	r1, [r5, #4]
  424896:	f8ca 100c 	str.w	r1, [sl, #12]
  42489a:	2a1b      	cmp	r2, #27
  42489c:	f200 80a2 	bhi.w	4249e4 <_realloc_r+0x2cc>
  4248a0:	3508      	adds	r5, #8
  4248a2:	f10a 0210 	add.w	r2, sl, #16
  4248a6:	e063      	b.n	424970 <_realloc_r+0x258>
  4248a8:	f855 3c08 	ldr.w	r3, [r5, #-8]
  4248ac:	eba9 0a03 	sub.w	sl, r9, r3
  4248b0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4248b4:	f021 0103 	bic.w	r1, r1, #3
  4248b8:	1863      	adds	r3, r4, r1
  4248ba:	4293      	cmp	r3, r2
  4248bc:	f6ff af59 	blt.w	424772 <_realloc_r+0x5a>
  4248c0:	4656      	mov	r6, sl
  4248c2:	e7d8      	b.n	424876 <_realloc_r+0x15e>
  4248c4:	6841      	ldr	r1, [r0, #4]
  4248c6:	f021 0b03 	bic.w	fp, r1, #3
  4248ca:	44a3      	add	fp, r4
  4248cc:	f107 0010 	add.w	r0, r7, #16
  4248d0:	4583      	cmp	fp, r0
  4248d2:	da56      	bge.n	424982 <_realloc_r+0x26a>
  4248d4:	f01e 0f01 	tst.w	lr, #1
  4248d8:	f47f af4b 	bne.w	424772 <_realloc_r+0x5a>
  4248dc:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4248e0:	eba9 0a01 	sub.w	sl, r9, r1
  4248e4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4248e8:	f021 0103 	bic.w	r1, r1, #3
  4248ec:	448b      	add	fp, r1
  4248ee:	4558      	cmp	r0, fp
  4248f0:	dce2      	bgt.n	4248b8 <_realloc_r+0x1a0>
  4248f2:	4656      	mov	r6, sl
  4248f4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4248f8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4248fc:	1f22      	subs	r2, r4, #4
  4248fe:	2a24      	cmp	r2, #36	; 0x24
  424900:	60c1      	str	r1, [r0, #12]
  424902:	6088      	str	r0, [r1, #8]
  424904:	f200 808f 	bhi.w	424a26 <_realloc_r+0x30e>
  424908:	2a13      	cmp	r2, #19
  42490a:	f240 808a 	bls.w	424a22 <_realloc_r+0x30a>
  42490e:	6829      	ldr	r1, [r5, #0]
  424910:	f8ca 1008 	str.w	r1, [sl, #8]
  424914:	6869      	ldr	r1, [r5, #4]
  424916:	f8ca 100c 	str.w	r1, [sl, #12]
  42491a:	2a1b      	cmp	r2, #27
  42491c:	f200 808a 	bhi.w	424a34 <_realloc_r+0x31c>
  424920:	3508      	adds	r5, #8
  424922:	f10a 0210 	add.w	r2, sl, #16
  424926:	6829      	ldr	r1, [r5, #0]
  424928:	6011      	str	r1, [r2, #0]
  42492a:	6869      	ldr	r1, [r5, #4]
  42492c:	6051      	str	r1, [r2, #4]
  42492e:	68a9      	ldr	r1, [r5, #8]
  424930:	6091      	str	r1, [r2, #8]
  424932:	eb0a 0107 	add.w	r1, sl, r7
  424936:	ebab 0207 	sub.w	r2, fp, r7
  42493a:	f042 0201 	orr.w	r2, r2, #1
  42493e:	6099      	str	r1, [r3, #8]
  424940:	604a      	str	r2, [r1, #4]
  424942:	f8da 3004 	ldr.w	r3, [sl, #4]
  424946:	f003 0301 	and.w	r3, r3, #1
  42494a:	431f      	orrs	r7, r3
  42494c:	4640      	mov	r0, r8
  42494e:	f8ca 7004 	str.w	r7, [sl, #4]
  424952:	f7fd fe3f 	bl	4225d4 <__malloc_unlock>
  424956:	e751      	b.n	4247fc <_realloc_r+0xe4>
  424958:	682b      	ldr	r3, [r5, #0]
  42495a:	6003      	str	r3, [r0, #0]
  42495c:	686b      	ldr	r3, [r5, #4]
  42495e:	6043      	str	r3, [r0, #4]
  424960:	2a1b      	cmp	r2, #27
  424962:	d82d      	bhi.n	4249c0 <_realloc_r+0x2a8>
  424964:	f100 0308 	add.w	r3, r0, #8
  424968:	f105 0208 	add.w	r2, r5, #8
  42496c:	e71b      	b.n	4247a6 <_realloc_r+0x8e>
  42496e:	4632      	mov	r2, r6
  424970:	6829      	ldr	r1, [r5, #0]
  424972:	6011      	str	r1, [r2, #0]
  424974:	6869      	ldr	r1, [r5, #4]
  424976:	6051      	str	r1, [r2, #4]
  424978:	68a9      	ldr	r1, [r5, #8]
  42497a:	6091      	str	r1, [r2, #8]
  42497c:	461c      	mov	r4, r3
  42497e:	46d1      	mov	r9, sl
  424980:	e72a      	b.n	4247d8 <_realloc_r+0xc0>
  424982:	eb09 0107 	add.w	r1, r9, r7
  424986:	ebab 0b07 	sub.w	fp, fp, r7
  42498a:	f04b 0201 	orr.w	r2, fp, #1
  42498e:	6099      	str	r1, [r3, #8]
  424990:	604a      	str	r2, [r1, #4]
  424992:	f855 3c04 	ldr.w	r3, [r5, #-4]
  424996:	f003 0301 	and.w	r3, r3, #1
  42499a:	431f      	orrs	r7, r3
  42499c:	4640      	mov	r0, r8
  42499e:	f845 7c04 	str.w	r7, [r5, #-4]
  4249a2:	f7fd fe17 	bl	4225d4 <__malloc_unlock>
  4249a6:	462e      	mov	r6, r5
  4249a8:	e728      	b.n	4247fc <_realloc_r+0xe4>
  4249aa:	4629      	mov	r1, r5
  4249ac:	f7ff fe50 	bl	424650 <memmove>
  4249b0:	e6ff      	b.n	4247b2 <_realloc_r+0x9a>
  4249b2:	4629      	mov	r1, r5
  4249b4:	4630      	mov	r0, r6
  4249b6:	461c      	mov	r4, r3
  4249b8:	46d1      	mov	r9, sl
  4249ba:	f7ff fe49 	bl	424650 <memmove>
  4249be:	e70b      	b.n	4247d8 <_realloc_r+0xc0>
  4249c0:	68ab      	ldr	r3, [r5, #8]
  4249c2:	6083      	str	r3, [r0, #8]
  4249c4:	68eb      	ldr	r3, [r5, #12]
  4249c6:	60c3      	str	r3, [r0, #12]
  4249c8:	2a24      	cmp	r2, #36	; 0x24
  4249ca:	d017      	beq.n	4249fc <_realloc_r+0x2e4>
  4249cc:	f100 0310 	add.w	r3, r0, #16
  4249d0:	f105 0210 	add.w	r2, r5, #16
  4249d4:	e6e7      	b.n	4247a6 <_realloc_r+0x8e>
  4249d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
  4249da:	f023 0303 	bic.w	r3, r3, #3
  4249de:	441c      	add	r4, r3
  4249e0:	462e      	mov	r6, r5
  4249e2:	e6f9      	b.n	4247d8 <_realloc_r+0xc0>
  4249e4:	68a9      	ldr	r1, [r5, #8]
  4249e6:	f8ca 1010 	str.w	r1, [sl, #16]
  4249ea:	68e9      	ldr	r1, [r5, #12]
  4249ec:	f8ca 1014 	str.w	r1, [sl, #20]
  4249f0:	2a24      	cmp	r2, #36	; 0x24
  4249f2:	d00c      	beq.n	424a0e <_realloc_r+0x2f6>
  4249f4:	3510      	adds	r5, #16
  4249f6:	f10a 0218 	add.w	r2, sl, #24
  4249fa:	e7b9      	b.n	424970 <_realloc_r+0x258>
  4249fc:	692b      	ldr	r3, [r5, #16]
  4249fe:	6103      	str	r3, [r0, #16]
  424a00:	696b      	ldr	r3, [r5, #20]
  424a02:	6143      	str	r3, [r0, #20]
  424a04:	f105 0218 	add.w	r2, r5, #24
  424a08:	f100 0318 	add.w	r3, r0, #24
  424a0c:	e6cb      	b.n	4247a6 <_realloc_r+0x8e>
  424a0e:	692a      	ldr	r2, [r5, #16]
  424a10:	f8ca 2018 	str.w	r2, [sl, #24]
  424a14:	696a      	ldr	r2, [r5, #20]
  424a16:	f8ca 201c 	str.w	r2, [sl, #28]
  424a1a:	3518      	adds	r5, #24
  424a1c:	f10a 0220 	add.w	r2, sl, #32
  424a20:	e7a6      	b.n	424970 <_realloc_r+0x258>
  424a22:	4632      	mov	r2, r6
  424a24:	e77f      	b.n	424926 <_realloc_r+0x20e>
  424a26:	4629      	mov	r1, r5
  424a28:	4630      	mov	r0, r6
  424a2a:	9301      	str	r3, [sp, #4]
  424a2c:	f7ff fe10 	bl	424650 <memmove>
  424a30:	9b01      	ldr	r3, [sp, #4]
  424a32:	e77e      	b.n	424932 <_realloc_r+0x21a>
  424a34:	68a9      	ldr	r1, [r5, #8]
  424a36:	f8ca 1010 	str.w	r1, [sl, #16]
  424a3a:	68e9      	ldr	r1, [r5, #12]
  424a3c:	f8ca 1014 	str.w	r1, [sl, #20]
  424a40:	2a24      	cmp	r2, #36	; 0x24
  424a42:	d003      	beq.n	424a4c <_realloc_r+0x334>
  424a44:	3510      	adds	r5, #16
  424a46:	f10a 0218 	add.w	r2, sl, #24
  424a4a:	e76c      	b.n	424926 <_realloc_r+0x20e>
  424a4c:	692a      	ldr	r2, [r5, #16]
  424a4e:	f8ca 2018 	str.w	r2, [sl, #24]
  424a52:	696a      	ldr	r2, [r5, #20]
  424a54:	f8ca 201c 	str.w	r2, [sl, #28]
  424a58:	3518      	adds	r5, #24
  424a5a:	f10a 0220 	add.w	r2, sl, #32
  424a5e:	e762      	b.n	424926 <_realloc_r+0x20e>
  424a60:	204004a0 	.word	0x204004a0

00424a64 <__sread>:
  424a64:	b510      	push	{r4, lr}
  424a66:	460c      	mov	r4, r1
  424a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  424a6c:	f000 f9f6 	bl	424e5c <_read_r>
  424a70:	2800      	cmp	r0, #0
  424a72:	db03      	blt.n	424a7c <__sread+0x18>
  424a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
  424a76:	4403      	add	r3, r0
  424a78:	6523      	str	r3, [r4, #80]	; 0x50
  424a7a:	bd10      	pop	{r4, pc}
  424a7c:	89a3      	ldrh	r3, [r4, #12]
  424a7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  424a82:	81a3      	strh	r3, [r4, #12]
  424a84:	bd10      	pop	{r4, pc}
  424a86:	bf00      	nop

00424a88 <__swrite>:
  424a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  424a8c:	4616      	mov	r6, r2
  424a8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  424a92:	461f      	mov	r7, r3
  424a94:	05d3      	lsls	r3, r2, #23
  424a96:	460c      	mov	r4, r1
  424a98:	4605      	mov	r5, r0
  424a9a:	d507      	bpl.n	424aac <__swrite+0x24>
  424a9c:	2200      	movs	r2, #0
  424a9e:	2302      	movs	r3, #2
  424aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  424aa4:	f000 f9c4 	bl	424e30 <_lseek_r>
  424aa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424aac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  424ab0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  424ab4:	81a2      	strh	r2, [r4, #12]
  424ab6:	463b      	mov	r3, r7
  424ab8:	4632      	mov	r2, r6
  424aba:	4628      	mov	r0, r5
  424abc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  424ac0:	f000 b8a4 	b.w	424c0c <_write_r>

00424ac4 <__sseek>:
  424ac4:	b510      	push	{r4, lr}
  424ac6:	460c      	mov	r4, r1
  424ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  424acc:	f000 f9b0 	bl	424e30 <_lseek_r>
  424ad0:	89a3      	ldrh	r3, [r4, #12]
  424ad2:	1c42      	adds	r2, r0, #1
  424ad4:	bf0e      	itee	eq
  424ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  424ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  424ade:	6520      	strne	r0, [r4, #80]	; 0x50
  424ae0:	81a3      	strh	r3, [r4, #12]
  424ae2:	bd10      	pop	{r4, pc}

00424ae4 <__sclose>:
  424ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  424ae8:	f000 b908 	b.w	424cfc <_close_r>

00424aec <__swbuf_r>:
  424aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  424aee:	460d      	mov	r5, r1
  424af0:	4614      	mov	r4, r2
  424af2:	4606      	mov	r6, r0
  424af4:	b110      	cbz	r0, 424afc <__swbuf_r+0x10>
  424af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  424af8:	2b00      	cmp	r3, #0
  424afa:	d04b      	beq.n	424b94 <__swbuf_r+0xa8>
  424afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424b00:	69a3      	ldr	r3, [r4, #24]
  424b02:	60a3      	str	r3, [r4, #8]
  424b04:	b291      	uxth	r1, r2
  424b06:	0708      	lsls	r0, r1, #28
  424b08:	d539      	bpl.n	424b7e <__swbuf_r+0x92>
  424b0a:	6923      	ldr	r3, [r4, #16]
  424b0c:	2b00      	cmp	r3, #0
  424b0e:	d036      	beq.n	424b7e <__swbuf_r+0x92>
  424b10:	b2ed      	uxtb	r5, r5
  424b12:	0489      	lsls	r1, r1, #18
  424b14:	462f      	mov	r7, r5
  424b16:	d515      	bpl.n	424b44 <__swbuf_r+0x58>
  424b18:	6822      	ldr	r2, [r4, #0]
  424b1a:	6961      	ldr	r1, [r4, #20]
  424b1c:	1ad3      	subs	r3, r2, r3
  424b1e:	428b      	cmp	r3, r1
  424b20:	da1c      	bge.n	424b5c <__swbuf_r+0x70>
  424b22:	3301      	adds	r3, #1
  424b24:	68a1      	ldr	r1, [r4, #8]
  424b26:	1c50      	adds	r0, r2, #1
  424b28:	3901      	subs	r1, #1
  424b2a:	60a1      	str	r1, [r4, #8]
  424b2c:	6020      	str	r0, [r4, #0]
  424b2e:	7015      	strb	r5, [r2, #0]
  424b30:	6962      	ldr	r2, [r4, #20]
  424b32:	429a      	cmp	r2, r3
  424b34:	d01a      	beq.n	424b6c <__swbuf_r+0x80>
  424b36:	89a3      	ldrh	r3, [r4, #12]
  424b38:	07db      	lsls	r3, r3, #31
  424b3a:	d501      	bpl.n	424b40 <__swbuf_r+0x54>
  424b3c:	2d0a      	cmp	r5, #10
  424b3e:	d015      	beq.n	424b6c <__swbuf_r+0x80>
  424b40:	4638      	mov	r0, r7
  424b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  424b44:	6e61      	ldr	r1, [r4, #100]	; 0x64
  424b46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  424b4a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  424b4e:	81a2      	strh	r2, [r4, #12]
  424b50:	6822      	ldr	r2, [r4, #0]
  424b52:	6661      	str	r1, [r4, #100]	; 0x64
  424b54:	6961      	ldr	r1, [r4, #20]
  424b56:	1ad3      	subs	r3, r2, r3
  424b58:	428b      	cmp	r3, r1
  424b5a:	dbe2      	blt.n	424b22 <__swbuf_r+0x36>
  424b5c:	4621      	mov	r1, r4
  424b5e:	4630      	mov	r0, r6
  424b60:	f7ff f87a 	bl	423c58 <_fflush_r>
  424b64:	b940      	cbnz	r0, 424b78 <__swbuf_r+0x8c>
  424b66:	6822      	ldr	r2, [r4, #0]
  424b68:	2301      	movs	r3, #1
  424b6a:	e7db      	b.n	424b24 <__swbuf_r+0x38>
  424b6c:	4621      	mov	r1, r4
  424b6e:	4630      	mov	r0, r6
  424b70:	f7ff f872 	bl	423c58 <_fflush_r>
  424b74:	2800      	cmp	r0, #0
  424b76:	d0e3      	beq.n	424b40 <__swbuf_r+0x54>
  424b78:	f04f 37ff 	mov.w	r7, #4294967295
  424b7c:	e7e0      	b.n	424b40 <__swbuf_r+0x54>
  424b7e:	4621      	mov	r1, r4
  424b80:	4630      	mov	r0, r6
  424b82:	f7fe ff55 	bl	423a30 <__swsetup_r>
  424b86:	2800      	cmp	r0, #0
  424b88:	d1f6      	bne.n	424b78 <__swbuf_r+0x8c>
  424b8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  424b8e:	6923      	ldr	r3, [r4, #16]
  424b90:	b291      	uxth	r1, r2
  424b92:	e7bd      	b.n	424b10 <__swbuf_r+0x24>
  424b94:	f7ff f8b8 	bl	423d08 <__sinit>
  424b98:	e7b0      	b.n	424afc <__swbuf_r+0x10>
  424b9a:	bf00      	nop

00424b9c <_wcrtomb_r>:
  424b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  424b9e:	4606      	mov	r6, r0
  424ba0:	b085      	sub	sp, #20
  424ba2:	461f      	mov	r7, r3
  424ba4:	b189      	cbz	r1, 424bca <_wcrtomb_r+0x2e>
  424ba6:	4c10      	ldr	r4, [pc, #64]	; (424be8 <_wcrtomb_r+0x4c>)
  424ba8:	4d10      	ldr	r5, [pc, #64]	; (424bec <_wcrtomb_r+0x50>)
  424baa:	6824      	ldr	r4, [r4, #0]
  424bac:	6b64      	ldr	r4, [r4, #52]	; 0x34
  424bae:	2c00      	cmp	r4, #0
  424bb0:	bf08      	it	eq
  424bb2:	462c      	moveq	r4, r5
  424bb4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  424bb8:	47a0      	blx	r4
  424bba:	1c43      	adds	r3, r0, #1
  424bbc:	d103      	bne.n	424bc6 <_wcrtomb_r+0x2a>
  424bbe:	2200      	movs	r2, #0
  424bc0:	238a      	movs	r3, #138	; 0x8a
  424bc2:	603a      	str	r2, [r7, #0]
  424bc4:	6033      	str	r3, [r6, #0]
  424bc6:	b005      	add	sp, #20
  424bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  424bca:	460c      	mov	r4, r1
  424bcc:	4906      	ldr	r1, [pc, #24]	; (424be8 <_wcrtomb_r+0x4c>)
  424bce:	4a07      	ldr	r2, [pc, #28]	; (424bec <_wcrtomb_r+0x50>)
  424bd0:	6809      	ldr	r1, [r1, #0]
  424bd2:	6b49      	ldr	r1, [r1, #52]	; 0x34
  424bd4:	2900      	cmp	r1, #0
  424bd6:	bf08      	it	eq
  424bd8:	4611      	moveq	r1, r2
  424bda:	4622      	mov	r2, r4
  424bdc:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  424be0:	a901      	add	r1, sp, #4
  424be2:	47a0      	blx	r4
  424be4:	e7e9      	b.n	424bba <_wcrtomb_r+0x1e>
  424be6:	bf00      	nop
  424be8:	20400070 	.word	0x20400070
  424bec:	204008b4 	.word	0x204008b4

00424bf0 <__ascii_wctomb>:
  424bf0:	b121      	cbz	r1, 424bfc <__ascii_wctomb+0xc>
  424bf2:	2aff      	cmp	r2, #255	; 0xff
  424bf4:	d804      	bhi.n	424c00 <__ascii_wctomb+0x10>
  424bf6:	700a      	strb	r2, [r1, #0]
  424bf8:	2001      	movs	r0, #1
  424bfa:	4770      	bx	lr
  424bfc:	4608      	mov	r0, r1
  424bfe:	4770      	bx	lr
  424c00:	238a      	movs	r3, #138	; 0x8a
  424c02:	6003      	str	r3, [r0, #0]
  424c04:	f04f 30ff 	mov.w	r0, #4294967295
  424c08:	4770      	bx	lr
  424c0a:	bf00      	nop

00424c0c <_write_r>:
  424c0c:	b570      	push	{r4, r5, r6, lr}
  424c0e:	460d      	mov	r5, r1
  424c10:	4c08      	ldr	r4, [pc, #32]	; (424c34 <_write_r+0x28>)
  424c12:	4611      	mov	r1, r2
  424c14:	4606      	mov	r6, r0
  424c16:	461a      	mov	r2, r3
  424c18:	4628      	mov	r0, r5
  424c1a:	2300      	movs	r3, #0
  424c1c:	6023      	str	r3, [r4, #0]
  424c1e:	f7fb f8a5 	bl	41fd6c <_write>
  424c22:	1c43      	adds	r3, r0, #1
  424c24:	d000      	beq.n	424c28 <_write_r+0x1c>
  424c26:	bd70      	pop	{r4, r5, r6, pc}
  424c28:	6823      	ldr	r3, [r4, #0]
  424c2a:	2b00      	cmp	r3, #0
  424c2c:	d0fb      	beq.n	424c26 <_write_r+0x1a>
  424c2e:	6033      	str	r3, [r6, #0]
  424c30:	bd70      	pop	{r4, r5, r6, pc}
  424c32:	bf00      	nop
  424c34:	2043a35c 	.word	0x2043a35c

00424c38 <__register_exitproc>:
  424c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  424c3c:	4d2c      	ldr	r5, [pc, #176]	; (424cf0 <__register_exitproc+0xb8>)
  424c3e:	4606      	mov	r6, r0
  424c40:	6828      	ldr	r0, [r5, #0]
  424c42:	4698      	mov	r8, r3
  424c44:	460f      	mov	r7, r1
  424c46:	4691      	mov	r9, r2
  424c48:	f7ff fc1e 	bl	424488 <__retarget_lock_acquire_recursive>
  424c4c:	4b29      	ldr	r3, [pc, #164]	; (424cf4 <__register_exitproc+0xbc>)
  424c4e:	681c      	ldr	r4, [r3, #0]
  424c50:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  424c54:	2b00      	cmp	r3, #0
  424c56:	d03e      	beq.n	424cd6 <__register_exitproc+0x9e>
  424c58:	685a      	ldr	r2, [r3, #4]
  424c5a:	2a1f      	cmp	r2, #31
  424c5c:	dc1c      	bgt.n	424c98 <__register_exitproc+0x60>
  424c5e:	f102 0e01 	add.w	lr, r2, #1
  424c62:	b176      	cbz	r6, 424c82 <__register_exitproc+0x4a>
  424c64:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  424c68:	2401      	movs	r4, #1
  424c6a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  424c6e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  424c72:	4094      	lsls	r4, r2
  424c74:	4320      	orrs	r0, r4
  424c76:	2e02      	cmp	r6, #2
  424c78:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  424c7c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  424c80:	d023      	beq.n	424cca <__register_exitproc+0x92>
  424c82:	3202      	adds	r2, #2
  424c84:	f8c3 e004 	str.w	lr, [r3, #4]
  424c88:	6828      	ldr	r0, [r5, #0]
  424c8a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  424c8e:	f7ff fbfd 	bl	42448c <__retarget_lock_release_recursive>
  424c92:	2000      	movs	r0, #0
  424c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  424c98:	4b17      	ldr	r3, [pc, #92]	; (424cf8 <__register_exitproc+0xc0>)
  424c9a:	b30b      	cbz	r3, 424ce0 <__register_exitproc+0xa8>
  424c9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  424ca0:	f7fd f8c2 	bl	421e28 <malloc>
  424ca4:	4603      	mov	r3, r0
  424ca6:	b1d8      	cbz	r0, 424ce0 <__register_exitproc+0xa8>
  424ca8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  424cac:	6002      	str	r2, [r0, #0]
  424cae:	2100      	movs	r1, #0
  424cb0:	6041      	str	r1, [r0, #4]
  424cb2:	460a      	mov	r2, r1
  424cb4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  424cb8:	f04f 0e01 	mov.w	lr, #1
  424cbc:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  424cc0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  424cc4:	2e00      	cmp	r6, #0
  424cc6:	d0dc      	beq.n	424c82 <__register_exitproc+0x4a>
  424cc8:	e7cc      	b.n	424c64 <__register_exitproc+0x2c>
  424cca:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  424cce:	430c      	orrs	r4, r1
  424cd0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  424cd4:	e7d5      	b.n	424c82 <__register_exitproc+0x4a>
  424cd6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  424cda:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  424cde:	e7bb      	b.n	424c58 <__register_exitproc+0x20>
  424ce0:	6828      	ldr	r0, [r5, #0]
  424ce2:	f7ff fbd3 	bl	42448c <__retarget_lock_release_recursive>
  424ce6:	f04f 30ff 	mov.w	r0, #4294967295
  424cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  424cee:	bf00      	nop
  424cf0:	204008b0 	.word	0x204008b0
  424cf4:	0042b7b8 	.word	0x0042b7b8
  424cf8:	00421e29 	.word	0x00421e29

00424cfc <_close_r>:
  424cfc:	b538      	push	{r3, r4, r5, lr}
  424cfe:	4c07      	ldr	r4, [pc, #28]	; (424d1c <_close_r+0x20>)
  424d00:	2300      	movs	r3, #0
  424d02:	4605      	mov	r5, r0
  424d04:	4608      	mov	r0, r1
  424d06:	6023      	str	r3, [r4, #0]
  424d08:	f7fb fed6 	bl	420ab8 <_close>
  424d0c:	1c43      	adds	r3, r0, #1
  424d0e:	d000      	beq.n	424d12 <_close_r+0x16>
  424d10:	bd38      	pop	{r3, r4, r5, pc}
  424d12:	6823      	ldr	r3, [r4, #0]
  424d14:	2b00      	cmp	r3, #0
  424d16:	d0fb      	beq.n	424d10 <_close_r+0x14>
  424d18:	602b      	str	r3, [r5, #0]
  424d1a:	bd38      	pop	{r3, r4, r5, pc}
  424d1c:	2043a35c 	.word	0x2043a35c

00424d20 <_fclose_r>:
  424d20:	b570      	push	{r4, r5, r6, lr}
  424d22:	b159      	cbz	r1, 424d3c <_fclose_r+0x1c>
  424d24:	4605      	mov	r5, r0
  424d26:	460c      	mov	r4, r1
  424d28:	b110      	cbz	r0, 424d30 <_fclose_r+0x10>
  424d2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  424d2c:	2b00      	cmp	r3, #0
  424d2e:	d03c      	beq.n	424daa <_fclose_r+0x8a>
  424d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
  424d32:	07d8      	lsls	r0, r3, #31
  424d34:	d505      	bpl.n	424d42 <_fclose_r+0x22>
  424d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424d3a:	b92b      	cbnz	r3, 424d48 <_fclose_r+0x28>
  424d3c:	2600      	movs	r6, #0
  424d3e:	4630      	mov	r0, r6
  424d40:	bd70      	pop	{r4, r5, r6, pc}
  424d42:	89a3      	ldrh	r3, [r4, #12]
  424d44:	0599      	lsls	r1, r3, #22
  424d46:	d53c      	bpl.n	424dc2 <_fclose_r+0xa2>
  424d48:	4621      	mov	r1, r4
  424d4a:	4628      	mov	r0, r5
  424d4c:	f7fe fee4 	bl	423b18 <__sflush_r>
  424d50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  424d52:	4606      	mov	r6, r0
  424d54:	b133      	cbz	r3, 424d64 <_fclose_r+0x44>
  424d56:	69e1      	ldr	r1, [r4, #28]
  424d58:	4628      	mov	r0, r5
  424d5a:	4798      	blx	r3
  424d5c:	2800      	cmp	r0, #0
  424d5e:	bfb8      	it	lt
  424d60:	f04f 36ff 	movlt.w	r6, #4294967295
  424d64:	89a3      	ldrh	r3, [r4, #12]
  424d66:	061a      	lsls	r2, r3, #24
  424d68:	d422      	bmi.n	424db0 <_fclose_r+0x90>
  424d6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  424d6c:	b141      	cbz	r1, 424d80 <_fclose_r+0x60>
  424d6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  424d72:	4299      	cmp	r1, r3
  424d74:	d002      	beq.n	424d7c <_fclose_r+0x5c>
  424d76:	4628      	mov	r0, r5
  424d78:	f7ff f8ec 	bl	423f54 <_free_r>
  424d7c:	2300      	movs	r3, #0
  424d7e:	6323      	str	r3, [r4, #48]	; 0x30
  424d80:	6c61      	ldr	r1, [r4, #68]	; 0x44
  424d82:	b121      	cbz	r1, 424d8e <_fclose_r+0x6e>
  424d84:	4628      	mov	r0, r5
  424d86:	f7ff f8e5 	bl	423f54 <_free_r>
  424d8a:	2300      	movs	r3, #0
  424d8c:	6463      	str	r3, [r4, #68]	; 0x44
  424d8e:	f7fe ffe7 	bl	423d60 <__sfp_lock_acquire>
  424d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
  424d94:	2200      	movs	r2, #0
  424d96:	07db      	lsls	r3, r3, #31
  424d98:	81a2      	strh	r2, [r4, #12]
  424d9a:	d50e      	bpl.n	424dba <_fclose_r+0x9a>
  424d9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424d9e:	f7ff fb71 	bl	424484 <__retarget_lock_close_recursive>
  424da2:	f7fe ffe3 	bl	423d6c <__sfp_lock_release>
  424da6:	4630      	mov	r0, r6
  424da8:	bd70      	pop	{r4, r5, r6, pc}
  424daa:	f7fe ffad 	bl	423d08 <__sinit>
  424dae:	e7bf      	b.n	424d30 <_fclose_r+0x10>
  424db0:	6921      	ldr	r1, [r4, #16]
  424db2:	4628      	mov	r0, r5
  424db4:	f7ff f8ce 	bl	423f54 <_free_r>
  424db8:	e7d7      	b.n	424d6a <_fclose_r+0x4a>
  424dba:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424dbc:	f7ff fb66 	bl	42448c <__retarget_lock_release_recursive>
  424dc0:	e7ec      	b.n	424d9c <_fclose_r+0x7c>
  424dc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424dc4:	f7ff fb60 	bl	424488 <__retarget_lock_acquire_recursive>
  424dc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  424dcc:	2b00      	cmp	r3, #0
  424dce:	d1bb      	bne.n	424d48 <_fclose_r+0x28>
  424dd0:	6e66      	ldr	r6, [r4, #100]	; 0x64
  424dd2:	f016 0601 	ands.w	r6, r6, #1
  424dd6:	d1b1      	bne.n	424d3c <_fclose_r+0x1c>
  424dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  424dda:	f7ff fb57 	bl	42448c <__retarget_lock_release_recursive>
  424dde:	4630      	mov	r0, r6
  424de0:	bd70      	pop	{r4, r5, r6, pc}
  424de2:	bf00      	nop

00424de4 <_fstat_r>:
  424de4:	b538      	push	{r3, r4, r5, lr}
  424de6:	460b      	mov	r3, r1
  424de8:	4c07      	ldr	r4, [pc, #28]	; (424e08 <_fstat_r+0x24>)
  424dea:	4605      	mov	r5, r0
  424dec:	4611      	mov	r1, r2
  424dee:	4618      	mov	r0, r3
  424df0:	2300      	movs	r3, #0
  424df2:	6023      	str	r3, [r4, #0]
  424df4:	f7fb fe63 	bl	420abe <_fstat>
  424df8:	1c43      	adds	r3, r0, #1
  424dfa:	d000      	beq.n	424dfe <_fstat_r+0x1a>
  424dfc:	bd38      	pop	{r3, r4, r5, pc}
  424dfe:	6823      	ldr	r3, [r4, #0]
  424e00:	2b00      	cmp	r3, #0
  424e02:	d0fb      	beq.n	424dfc <_fstat_r+0x18>
  424e04:	602b      	str	r3, [r5, #0]
  424e06:	bd38      	pop	{r3, r4, r5, pc}
  424e08:	2043a35c 	.word	0x2043a35c

00424e0c <_isatty_r>:
  424e0c:	b538      	push	{r3, r4, r5, lr}
  424e0e:	4c07      	ldr	r4, [pc, #28]	; (424e2c <_isatty_r+0x20>)
  424e10:	2300      	movs	r3, #0
  424e12:	4605      	mov	r5, r0
  424e14:	4608      	mov	r0, r1
  424e16:	6023      	str	r3, [r4, #0]
  424e18:	f7fb fe56 	bl	420ac8 <_isatty>
  424e1c:	1c43      	adds	r3, r0, #1
  424e1e:	d000      	beq.n	424e22 <_isatty_r+0x16>
  424e20:	bd38      	pop	{r3, r4, r5, pc}
  424e22:	6823      	ldr	r3, [r4, #0]
  424e24:	2b00      	cmp	r3, #0
  424e26:	d0fb      	beq.n	424e20 <_isatty_r+0x14>
  424e28:	602b      	str	r3, [r5, #0]
  424e2a:	bd38      	pop	{r3, r4, r5, pc}
  424e2c:	2043a35c 	.word	0x2043a35c

00424e30 <_lseek_r>:
  424e30:	b570      	push	{r4, r5, r6, lr}
  424e32:	460d      	mov	r5, r1
  424e34:	4c08      	ldr	r4, [pc, #32]	; (424e58 <_lseek_r+0x28>)
  424e36:	4611      	mov	r1, r2
  424e38:	4606      	mov	r6, r0
  424e3a:	461a      	mov	r2, r3
  424e3c:	4628      	mov	r0, r5
  424e3e:	2300      	movs	r3, #0
  424e40:	6023      	str	r3, [r4, #0]
  424e42:	f7fb fe43 	bl	420acc <_lseek>
  424e46:	1c43      	adds	r3, r0, #1
  424e48:	d000      	beq.n	424e4c <_lseek_r+0x1c>
  424e4a:	bd70      	pop	{r4, r5, r6, pc}
  424e4c:	6823      	ldr	r3, [r4, #0]
  424e4e:	2b00      	cmp	r3, #0
  424e50:	d0fb      	beq.n	424e4a <_lseek_r+0x1a>
  424e52:	6033      	str	r3, [r6, #0]
  424e54:	bd70      	pop	{r4, r5, r6, pc}
  424e56:	bf00      	nop
  424e58:	2043a35c 	.word	0x2043a35c

00424e5c <_read_r>:
  424e5c:	b570      	push	{r4, r5, r6, lr}
  424e5e:	460d      	mov	r5, r1
  424e60:	4c08      	ldr	r4, [pc, #32]	; (424e84 <_read_r+0x28>)
  424e62:	4611      	mov	r1, r2
  424e64:	4606      	mov	r6, r0
  424e66:	461a      	mov	r2, r3
  424e68:	4628      	mov	r0, r5
  424e6a:	2300      	movs	r3, #0
  424e6c:	6023      	str	r3, [r4, #0]
  424e6e:	f7fa ff63 	bl	41fd38 <_read>
  424e72:	1c43      	adds	r3, r0, #1
  424e74:	d000      	beq.n	424e78 <_read_r+0x1c>
  424e76:	bd70      	pop	{r4, r5, r6, pc}
  424e78:	6823      	ldr	r3, [r4, #0]
  424e7a:	2b00      	cmp	r3, #0
  424e7c:	d0fb      	beq.n	424e76 <_read_r+0x1a>
  424e7e:	6033      	str	r3, [r6, #0]
  424e80:	bd70      	pop	{r4, r5, r6, pc}
  424e82:	bf00      	nop
  424e84:	2043a35c 	.word	0x2043a35c
  424e88:	00474345 	.word	0x00474345

00424e8c <logo>:
  424e8c:	0600c004 00001200 00424e98              .........NB.

00424e98 <logo_map>:
  424e98:	ffffffff ffffffff ffffffff ffffffff     ................
  424ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  424eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  424ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  424ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  424ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  424ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  424f08:	ffffffff ffffffff ffffffff ffffffff     ................
  424f18:	ffffffff ffffffff ffffffff ffffffff     ................
  424f28:	ffffffff ffffffff ffffffff ffffffff     ................
  424f38:	ffffffff ffffffff ffffffff ffffffff     ................
  424f48:	ffffffff ffffffff ffffffff ffffffff     ................
  424f58:	ffffffff ffffffff ffffffff ffffffff     ................
  424f68:	ffffffff ffffffff ffffffff ffffffff     ................
  424f78:	ffffffff ffffffff ffffffff ffffffff     ................
  424f88:	ffffffff ffffffff ffffffff ffffffff     ................
  424f98:	ffffffff ffffffff ffffffff ffffffff     ................
  424fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  424fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  424fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  424fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  424fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  424ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  425008:	ffffffff ffffffff ffffffff ffffffff     ................
  425018:	ffffffff ffffffff ffffffff ffffffff     ................
  425028:	ffffffff ffffffff ffffffff ffffffff     ................
  425038:	ffffffff ffffffff ffffffff ffffffff     ................
  425048:	ffffffff ffffffff ffffffff ffffffff     ................
  425058:	ffffffff ffffffff ffffffff ffffffff     ................
  425068:	ffffffff ffffffff ffffffff ffffffff     ................
  425078:	ffffffff ffffffff ffffffff ffffffff     ................
  425088:	ffffffff ffffffff ffffffff ffffffff     ................
  425098:	ffffffff ffffffff ffffffff ffffffff     ................
  4250a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4250b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4250c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4250d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4250e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4250f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425108:	ffffffff ffffffff ffffffff ffffffff     ................
  425118:	ffffffff ffffffff ffffffff ffffffff     ................
  425128:	ffffffff ffffffff ffffffff ffffffff     ................
  425138:	ffffffff ffffffff ffffffff ffffffff     ................
  425148:	ffffffff ffffffff ffffffff ffffffff     ................
  425158:	ffffffff ffffffff ffffffff ffffffff     ................
  425168:	ffffffff ffffffff ffffffff ffffffff     ................
  425178:	ffffffff ffffffff ffffffff ffffffff     ................
  425188:	ffffffff ffffffff ffffffff ffffffff     ................
  425198:	ffffffff ffffffff ffffffff ffffffff     ................
  4251a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4251b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4251c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4251d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4251e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4251f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425208:	ffffffff ffffffff ffffffff ffffffff     ................
  425218:	ffffffff ffffffff ffffffff ffffffff     ................
  425228:	ffffffff ffffffff ffffffff ffffffff     ................
  425238:	ffffffff ffffffff ffffffff ffffffff     ................
  425248:	ffffffff ffffffff ffffffff ffffffff     ................
  425258:	ffffffff ffffffff ffffffff ffffffff     ................
  425268:	ffffffff ffffffff ffffffff ffffffff     ................
  425278:	ffffffff ffffffff ffffffff ffffffff     ................
  425288:	ffffffff ffffffff ffffffff ffffffff     ................
  425298:	ffffffff ffffffff ffffffff ffffffff     ................
  4252a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4252b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4252c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4252d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4252e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4252f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425308:	ffffffff ffffffff ffffffff ffffffff     ................
  425318:	ffffffff ffffffff ffffffff ffffffff     ................
  425328:	ffffffff ffffffff ffffffff ffffffff     ................
  425338:	ffffffff ffffffff ffffffff ffffffff     ................
  425348:	ffffffff ffffffff ffffffff ffffffff     ................
  425358:	ffffffff ffffffff ffffffff ffffffff     ................
  425368:	ffffffff ffffffff ffffffff ffffffff     ................
  425378:	ffffffff ffffffff ffffffff ffffffff     ................
  425388:	ffffffff ffffffff ffffffff ffffffff     ................
  425398:	ffffffff ffffffff ffffffff ffffffff     ................
  4253a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4253b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4253c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4253d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4253e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4253f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425408:	ffffffff e4a0e4a0 ffffffff ffffffff     ................
  425418:	ffffffff ffffffff ffffffff ffffffff     ................
  425428:	ffffffff ffffffff ffffffff ffffffff     ................
  425438:	ffffffff ffffffff ffffffff ffffffff     ................
  425448:	ffffffff ffffffff ffffffff ffffffff     ................
  425458:	ffffffff ffffffff ffffffff ffffffff     ................
  425468:	ffffffff e4a8e4a8 dfffb7e5 ffffffff     ................
  425478:	ffffffff ffffffff ffffffff ffffffff     ................
  425488:	ffffffff ffffffff ffffffff ffffffff     ................
  425498:	ffffffff ffffffff ffffffff ffffffff     ................
  4254a8:	ffffffff ffffffff 0df3ffff fffff0f3     ................
  4254b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4254c8:	ffffffff e4b0e4b0 8ed304b1 ffffffff     ................
  4254d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4254e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4254f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425508:	ffffffff ffffffff e4e0ffff 66e9e4e0     ...............f
  425518:	ffff18fe ffffffff ffffffff ffffffff     ................
  425528:	ffffffff e4c0e4c0 6ed325c9 ffffffff     .........%.n....
  425538:	ffffffff ffffffff ffffffff ffffffff     ................
  425548:	ffffffff ffffffff ffffffff ffffffff     ................
  425558:	ffffffff ffffffff ffffffff ffffffff     ................
  425568:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  425578:	ffff29e2 ffffffff ffffffff ffffffff     .)..............
  425588:	ffffffff e4d0e4d0 55cd14ed ffffffff     ...........U....
  425598:	ffffffff ffffffff ffffffff ffffffff     ................
  4255a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4255b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4255c8:	ffffffff ffffffff e4d8ffff e4d8e4d8     ................
  4255d8:	ffffe4d8 ffffffff ffffffff ffffffff     ................
  4255e8:	ffffffff 66e1e4e0 e478d7d5 ffffffff     .......f..x.....
  4255f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425608:	ffffffff ffffffff ffffffff ffffffff     ................
  425618:	ffffffff ffffffff ffffffff ffffffff     ................
  425628:	ffffffff ffffffff e4d0ffff e4d0e4d0     ................
  425638:	ffffe4d0 ffffffff ffffffff ffffffff     ................
  425648:	ffffffff 55f5a7e9 6270698a ffffffff     .......U.ipb....
  425658:	ffffffff ffffffff ffffffff ffffffff     ................
  425668:	ffffffff ffffffff ffffffff ffffffff     ................
  425678:	ffffffff ffffffff ffffffff ffffffff     ................
  425688:	ffffffff ffffffff e4c8ffff e4c8e4c8     ................
  425698:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  4256a8:	ffffffff 7df7ffff 82886260 ffffffff     .......}`b......
  4256b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4256c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4256d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4256e8:	ffffffff ffffffff e4c8ffff e4c0e4c8     ................
  4256f8:	29c2e4c0 8ec3ecc2 18e6b3d4 38e639e6     ...).........9.8
  425708:	96d538de 6260298a a3a06268 ffffffff     .8...)`bhb......
  425718:	ffffffff ffffffff ffffffff ffffffff     ................
  425728:	ffffffff ffffffff ffffffff ffffffff     ................
  425738:	ffffffff ffffffff ffffffff ffffffff     ................
  425748:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  425758:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  425768:	62688270 62606260 c4b06270 ffffffff     p.hb`b`bpb......
  425778:	ffffffff ffffffff ffffffff ffffffff     ................
  425788:	ffffffff ffffffff ffffffff ffffffff     ................
  425798:	ffffffff ffffffff ffffffff ffffffff     ................
  4257a8:	ffffffff ffffffff e4b8ffff e4c0e4c0     ................
  4257b8:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  4257c8:	62688270 62606260 e4c8a3a0 ffffffff     p.hb`b`b........
  4257d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4257e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4257f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425808:	ffffffff ffffffff e4c0ffff e4c0e4e0     ................
  425818:	e4b0e4c0 c4a0e4a8 a388c398 8278a378     ............x.x.
  425828:	62688270 62686260 e4c0e4c0 ffffffff     p.hb`bhb........
  425838:	ffffffff ffffffff ffffffff ffffffff     ................
  425848:	ffffffff ffffffff ffffffff ffffffff     ................
  425858:	ffffffff ffffffff ffffffff ffffffff     ................
  425868:	ffffffff ffffffff e4d8ffff cfe3e4e0     ................
  425878:	bfffdbfe dfffdfff 9effbfff 9aee9eff     ................
  425888:	d7d5d7d5 e4b8c4a8 e4b8e4b8 ffffffff     ................
  425898:	ffffffff ffffffff ffffffff ffffffff     ................
  4258a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4258b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4258c8:	ffffffff ffffffff 04e9ffff ffffe4e0     ................
  4258d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4258e8:	ffffffff e4b8e4b8 e4b8e4b8 ffffffff     ................
  4258f8:	ffffffff ffffffff ffffffff ffffffff     ................
  425908:	ffffffff ffffffff ffffffff ffffffff     ................
  425918:	ffffffff ffffffff ffffffff ffffffff     ................
  425928:	ffffffff ffffffff 04e9ffff 71d40deb     ...............q
  425938:	ffff0cbb ffffffff ffffffff ffffffff     ................
  425948:	ffffffff e4b0e4b0 e4b0e4b0 ffffffff     ................
  425958:	ffffffff ffffffff ffffffff ffffffff     ................
  425968:	ffffffff ffffffff ffffffff ffffffff     ................
  425978:	ffffffff ffffffff ffffffff ffffffff     ................
  425988:	ffffffff ffffffff 0debffff e4a89eff     ................
  425998:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  4259a8:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  4259b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4259c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4259d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4259e8:	ffffffff ffffffff bbfeffff e4a8f4dc     ................
  4259f8:	ffffe4a8 ffffffff ffffffff ffffffff     ................
  425a08:	ffffffff e4a8e4a8 e4a8e4a8 ffffffff     ................
  425a18:	ffffffff ffffffff ffffffff ffffffff     ................
  425a28:	ffffffff ffffffff ffffffff ffffffff     ................
  425a38:	ffffffff ffffffff ffffffff ffffffff     ................
  425a48:	ffffffff ffffffff efdbffff e4b8e4b8     ................
  425a58:	ffffe4b8 ffffffff ffffffff ffffffff     ................
  425a68:	ffffffff e4a0ccc2 e4a0e4a0 ffffffff     ................
  425a78:	ffffffff ffffffff ffffffff ffffffff     ................
  425a88:	ffffffff ffffffff ffffffff ffffffff     ................
  425a98:	ffffffff ffffffff ffffffff ffffffff     ................
  425aa8:	ffffffff ffffffff e4c0ffff e4c0e4c0     ................
  425ab8:	ffffe4c0 ffffffff ffffffff ffffffff     ................
  425ac8:	ffffffff 29b2ffff e4a0e4a0 ffffffff     .......)........
  425ad8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ae8:	ffffffff ffffffff ffffffff ffffffff     ................
  425af8:	ffffffff ffffffff ffffffff ffffffff     ................
  425b08:	ffffffff ffffffff 05d1ffff e4c8e4c8     ................
  425b18:	ffffe4c8 ffffffff ffffffff ffffffff     ................
  425b28:	ffffffff 3cf7ffff 86a1e8a9 ffffffff     .......<........
  425b38:	ffffffff ffffffff ffffffff ffffffff     ................
  425b48:	ffffffff ffffffff ffffffff ffffffff     ................
  425b58:	ffffffff ffffffff ffffffff ffffffff     ................
  425b68:	ffffffff ffffffff ffffffff 87e9ffff     ................
  425b78:	ffff46e9 ffffffff ffffffff ffffffff     .F..............
  425b88:	ffffffff ffffffff ffffffff ffffffff     ................
  425b98:	ffffffff ffffffff ffffffff ffffffff     ................
  425ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  425bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425bc8:	ffffffff ffffffff ffffffff 9afeffff     ................
  425bd8:	ffff96fd ffffffff ffffffff ffffffff     ................
  425be8:	ffffffff ffffffff ffffffff ffffffff     ................
  425bf8:	ffffffff ffffffff ffffffff ffffffff     ................
  425c08:	ffffffff ffffffff ffffffff ffffffff     ................
  425c18:	ffffffff ffffffff ffffffff ffffffff     ................
  425c28:	ffffffff ffffffff ffffffff ffffffff     ................
  425c38:	ffffffff ffffffff ffffffff ffffffff     ................
  425c48:	ffffffff ffffffff ffffffff ffffffff     ................
  425c58:	ffffffff ffffffff ffffffff ffffffff     ................
  425c68:	ffffffff ffffffff ffffffff ffffffff     ................
  425c78:	ffffffff ffffffff ffffffff ffffffff     ................
  425c88:	ffffffff ffffffff ffffffff ffffffff     ................
  425c98:	ffffffff ffffffff ffffffff ffffffff     ................
  425ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  425cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  425cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ce8:	ffffffff ffffffff ffffffff ffffffff     ................
  425cf8:	ffffffff ffffffff ffffffff ffffffff     ................
  425d08:	ffffffff ffffffff ffffffff ffffffff     ................
  425d18:	ffffffff ffffffff ffffffff ffffffff     ................
  425d28:	ffffffff ffffffff ffffffff ffffffff     ................
  425d38:	ffffffff ffffffff ffffffff ffffffff     ................
  425d48:	ffffffff ffffffff ffffffff ffffffff     ................
  425d58:	ffffffff ffffffff ffffffff ffffffff     ................
  425d68:	ffffffff ffffffff ffffffff ffffffff     ................
  425d78:	ffffffff ffffffff ffffffff ffffffff     ................
  425d88:	ffffffff ffffffff ffffffff ffffffff     ................
  425d98:	ffffffff ffffffff ffffffff ffffffff     ................
  425da8:	ffffffff ffffffff ffffffff ffffffff     ................
  425db8:	ffffffff ffffffff ffffffff ffffffff     ................
  425dc8:	ffffffff ffffffff ffffffff ffffffff     ................
  425dd8:	ffffffff ffffffff ffffffff ffffffff     ................
  425de8:	ffffffff ffffffff ffffffff ffffffff     ................
  425df8:	ffffffff ffffffff ffffffff ffffffff     ................
  425e08:	ffffffff ffffffff ffffffff ffffffff     ................
  425e18:	ffffffff ffffffff ffffffff ffffffff     ................
  425e28:	ffffffff ffffffff ffffffff ffffffff     ................
  425e38:	ffffffff ffffffff ffffffff ffffffff     ................
  425e48:	ffffffff ffffffff ffffffff ffffffff     ................
  425e58:	ffffffff ffffffff ffffffff ffffffff     ................
  425e68:	ffffffff ffffffff ffffffff ffffffff     ................
  425e78:	ffffffff ffffffff ffffffff ffffffff     ................
  425e88:	ffffffff ffffffff ffffffff ffffffff     ................
  425e98:	ffffffff ffffffff ffffffff ffffffff     ................
  425ea8:	ffffffff ffffffff ffffffff ffffffff     ................
  425eb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ec8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ed8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ef8:	ffffffff ffffffff ffffffff ffffffff     ................
  425f08:	ffffffff ffffffff ffffffff ffffffff     ................
  425f18:	ffffffff ffffffff ffffffff ffffffff     ................
  425f28:	ffffffff ffffffff ffffffff ffffffff     ................
  425f38:	ffffffff ffffffff ffffffff ffffffff     ................
  425f48:	ffffffff ffffffff ffffffff ffffffff     ................
  425f58:	ffffffff ffffffff ffffffff ffffffff     ................
  425f68:	ffffffff ffffffff ffffffff ffffffff     ................
  425f78:	ffffffff ffffffff ffffffff ffffffff     ................
  425f88:	ffffffff ffffffff ffffffff ffffffff     ................
  425f98:	ffffffff ffffffff ffffffff ffffffff     ................
  425fa8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fb8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fc8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fd8:	ffffffff ffffffff ffffffff ffffffff     ................
  425fe8:	ffffffff ffffffff ffffffff ffffffff     ................
  425ff8:	ffffffff ffffffff ffffffff ffffffff     ................
  426008:	ffffffff ffffffff ffffffff ffffffff     ................
  426018:	ffffffff ffffffff ffffffff ffffffff     ................
  426028:	ffffffff ffffffff ffffffff ffffffff     ................
  426038:	ffffffff ffffffff ffffffff ffffffff     ................
  426048:	ffffffff ffffffff ffffffff ffffffff     ................
  426058:	ffffffff ffffffff ffffffff ffffffff     ................
  426068:	ffffffff ffffffff ffffffff ffffffff     ................
  426078:	ffffffff ffffffff ffffffff ffffffff     ................
  426088:	ffffffff ffffffff ffffffff ffffffff     ................
  426098:	454c4449 00000000 51726d54 00000000     IDLE....TmrQ....
  4260a8:	20726d54 00637653 2074754f 6d20666f     Tmr Svc.Out of m
  4260b8:	726f6d65 00000079 0000ffff 4c4c554e     emory.......NULL
  4260c8:	696f7020 7265746e 00000000 6f5f766c      pointer....lv_o
  4260d8:	00006a62 0000ffff 640a6f4e 00617461     bj......No.data.

004260e8 <_lv_bpp1_opa_table>:
  4260e8:	0000ff00                                ....

004260ec <_lv_bpp2_opa_table>:
  4260ec:	ffaa5500                                .U..

004260f0 <_lv_bpp4_opa_table>:
  4260f0:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

00426100 <_lv_bpp8_opa_table>:
  426100:	03020100 07060504 0b0a0908 0f0e0d0c     ................
  426110:	13121110 17161514 1b1a1918 1f1e1d1c     ................
  426120:	23222120 27262524 2b2a2928 2f2e2d2c      !"#$%&'()*+,-./
  426130:	33323130 37363534 3b3a3938 3f3e3d3c     0123456789:;<=>?
  426140:	43424140 47464544 4b4a4948 4f4e4d4c     @ABCDEFGHIJKLMNO
  426150:	53525150 57565554 5b5a5958 5f5e5d5c     PQRSTUVWXYZ[\]^_
  426160:	63626160 67666564 6b6a6968 6f6e6d6c     `abcdefghijklmno
  426170:	73727170 77767574 7b7a7978 7f7e7d7c     pqrstuvwxyz{|}~.
  426180:	83828180 87868584 8b8a8988 8f8e8d8c     ................
  426190:	93929190 97969594 9b9a9998 9f9e9d9c     ................
  4261a0:	a3a2a1a0 a7a6a5a4 abaaa9a8 afaeadac     ................
  4261b0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
  4261c0:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
  4261d0:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
  4261e0:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
  4261f0:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

00426200 <wcorr.10557>:
  426200:	81808080 83828281 87868584 8d8c8a89     ................
  426210:	9593918f 9e9b9997 a7a5a2a0 b2afadaa     ................
  426220:	000000b5 0000ffff ffaa5500 33221100     .........U...."3
  426230:	77665544 bbaa9988 ffeeddcc ffaa5500     DUfw.........U..
  426240:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........
  426250:	006e6962                                bin.

00426254 <cmaps>:
  426254:	00000020 0001005f 00000000 00000000      ..._...........
  426264:	00020000 000000b0 0060f7f3 004295e8     ..........`...B.
  426274:	00000000 0003003b                       ....;...

0042627c <glyph_dsc>:
	...
  426284:	03c00000 00000000 03c00000 00000a03     ................
  426294:	0580000f 05000505 09d0001c 00000a0a     ................
  4262a4:	08b0004e fe000f09 0bd00092 00000a0c     N...............
  4262b4:	09a000ce ff000b0a 02f00105 05000503     ................
  4262c4:	04b0010d fd010e04 04c00129 fd000e04     ........).......
  4262d4:	05a00145 05000606 08200157 02000708     E.......W. .....
  4262e4:	03300173 fe000503 0560017b 03000305     s.0.....{.`.....
  4262f4:	03300183 00000303 04f00188 ffff0e07     ..0.............
  426304:	095001b9 00000a09 053001e6 00000a04     ..P.......0.....
  426314:	081001fa 00000a08 08000222 00000a08     ........".......
  426324:	0960024a 00000a0a 0810027c 00000a08     J.`.....|.......
  426334:	08a002a4 00000a09 086002d1 00000a08     ..........`.....
  426344:	090002f9 00000a09 08a00326 00000a08     ........&.......
  426354:	0330034e 00000803 0330035a fd000b03     N.0.....Z.0.....
  426364:	0820036b 01000808 0820038b 02000608     k. ....... .....
  426374:	082003a3 01000808 080003c3 00000a08     .. .............
  426384:	0e8003eb fd000d0e 0a400446 00ff0a0c     ........F.@.....
  426394:	0aa00482 00010a09 0a2004af 00000a0a     .......... .....
  4263a4:	0b9004e1 00010a0a 09600513 00010a08     ..........`.....
  4263b4:	08e0053b 00010a08 0ad00563 00000a0a     ;.......c.......
  4263c4:	0b600595 00010a09 045005c2 00010a02     ..`.......P.....
  4263d4:	073005cc 00ff0a07 0a1005ef 00010a0a     ..0.............
  4263e4:	08500621 00010a08 0d600649 00010a0b     !.P.....I.`.....
  4263f4:	0b600680 00010a09 0bc006ad 00000a0c     ..`.............
  426404:	0a2006e9 00010a09 0bc00716 fd000d0c     .. .............
  426414:	0a300764 00010a09 08b00791 00000a09     d.0.............
  426424:	083007be 00000a09 0b1007eb 00010a09     ..0.............
  426434:	09f00818 00ff0a0b 0fc0084f 00000a10     ........O.......
  426444:	0970089f 00000a0a 091008d1 00ff0a0b     ..p.............
  426454:	09300908 00000a09 04b00935 fd010e04     ..0.....5.......
  426464:	04f00951 ffff0e07 04b00982 fd000e04     Q...............
  426474:	0830099e 02010607 070009b3 ff000107     ..0.............
  426484:	086009b7 09010205 086009bc 00000808     ..`.......`.....
  426494:	099009dc 00010b08 08000a08 00000808     ................
  4264a4:	09900a28 00000b09 08900a5a 00000808     (.......Z.......
  4264b4:	04f00a7a 00000b06 09b00a9b fd000b09     z...............
  4264c4:	09900acd 00010b08 03e00af9 00010b02     ................
  4264d4:	04000b04 fdfe0e05 08a00b27 00010b08     ........'.......
  4264e4:	03e00b53 00010b02 0ed00b5e 0001080d     S.......^.......
  4264f4:	09900b92 00010808 08e00bb2 00000809     ................
  426504:	09900bd6 fd010b08 09900c02 fd000b09     ................
  426514:	05c00c34 00010805 07000c48 00000807     4.......H.......
  426524:	05d00c64 00000a06 09800c82 00010808     d...............
  426534:	07d00ca2 00ff0809 0c900cc6 0000080d     ................
  426544:	07c00cfa 00000808 07d00d1a fdff0b09     ................
  426554:	07500d4c 00000807 04f00d68 fd000e05     L.P.....h.......
  426564:	04300d8b fd010e02 04f00d99 fd000e05     ..0.............
  426574:	08200dbc 03000308 05e00dc8 06000506     .. .............
  426584:	04600dd7 03000304 0e000ddd feff0f0f     ..`.............
  426594:	0e000e4e 00000b0e 0e000e9b ff000d0e     N...............
  4265a4:	0e000ef6 00000b0e 09a00f43 00000b0a     ........C.......
  4265b4:	0e000f7a fe000f0e 0e000fe3 fe000f0e     z...............
  4265c4:	0fc0104c ff000d10 0e0010b4 fe000f0e     L...............
  4265d4:	0fc0111d 00000b10 0e001175 fe000f0e     ........u.......
  4265e4:	070011de ff000c07 0a801208 ff000c0b     ................
  4265f4:	0fc0124a fe000e10 0e0012ba 00000b0e     J...............
  426604:	0c401307 fe010e0a 0c40134d fe000f0d     ..@.....M.@.....
  426614:	0c4013af ff000d0d 0c401404 ff000d0d     ..@.......@.....
  426624:	0c401459 fe010e0a 0c40149f ffff0d0e     Y.@.......@.....
  426634:	08c014fa ff000d09 08c01535 ff000d09     ........5.......
  426644:	0c401570 ff000d0d 0c4015c5 0300040d     p.@.......@.....
  426654:	0fc015df 00000b10 11801637 fe000f12     ........7.......
  426664:	0fc016be feff0f11 0e00173e ff000d0e     ........>.......
  426674:	0c401799 0100080d 0c4017cd 0100080d     ..@.......@.....
  426684:	11801801 00000b12 0e001864 00000b0e     ........d.......
  426694:	0e0018b1 fe000f0e 0e00191a feff0f0f     ................
  4266a4:	0c40198b ff000d0d 0c4019e0 fe000f0d     ..@.......@.....
  4266b4:	0c401a42 ff000d0d 08c01a97 feff0f0a     B.@.............
  4266c4:	0c401ae2 fe000f0d 0c401b44 fe000f0d     ..@.....D.@.....
  4266d4:	0fc01ba6 00000b10 0e001bfe feff0f10     ................
  4266e4:	0a801c76 fe000f0b 11801cc9 ff000d12     v...............
  4266f4:	11801d3e 00000a12 11801d98 00000a12     >...............
  426704:	11801df2 00000a12 11801e4c 00000a12     ........L.......
  426714:	11801ea6 00000a12 11801f00 ff000c12     ................
  426724:	0c401f6c fe000f0c 0c401fc6 fe000f0d     l.@.......@.....
  426734:	0e002028 feff0f0f 11802099 00000b12     ( ....... ......
  426744:	0a8020fc fe000f0b 0e10214f 00000a0f     . ......O!......

00426754 <gylph_bitmap>:
  426754:	0dd9a00e 800cc890 11600ab7 1fd9800b     ..........`.....
  426764:	88f09109 f080081f 00000088 3c200d00     .............. <
  426774:	000f0000 ff2f0069 01f7ffff 10a6115c     ....i./.....\...
  426784:	c3006900 00880000 ff9f00d2 12f0ffff     .i..............
  426794:	20e223c5 c003d200 04f00000 000000b0     .#. ............
  4267a4:	00000070 0000000e 0000e000 30eaef19     p..............0
  4267b4:	a7e6d60c 000ef402 e0801f00 ef6f0000     ..............o.
  4267c4:	16000050 0000e5ff 01f00a0e 135fe000     P............._.
  4267d4:	b06e5ef8 91fecf05 000e0000 70000000     .^n............p
  4267e4:	dd080000 00a70030 04d0024b 007700c0     ....0...K.....w.
  4267f4:	00201dd0 a7d0034b dc070000 30ccc434     .. .K.......4..0
  426804:	2d1d0000 0000d022 b3003ba6 3ac00500     ...-"....;.....:
  426814:	1d00a300 d0000d20 0400a600 4d0040cc     .... ........@.M
  426824:	000030fc 00c018f7 d005f201 6ebb0000     .0.............n
  426834:	5f000040 070000f3 8003dbe6 ba1d302f     @.._......../0..
  426844:	01005fa0 b41f40df 03c0fe48 b240fcbf     ._...@..H.....@.
  426854:	00000000 f0011f00 00f0001f 0bf10300     ................
  426864:	4f400f90 9b007d00 aa00aa00 7d009b00     ..@O.}.........}
  426874:	0f004f00 03900b40 0e005ef1 04c00860     .O..@....^..`...
  426884:	00f301f0 00e600f5 01f500e6 08f004f3     ................
  426894:	5e600ec0 00930000 09c2a688 dd4d40fe     ..`^.........@M.
  4268a4:	509342b1 00005200 00005004 0000a008     .B.P.R...P......
  4268b4:	1f00a008 03f3ffff 0030b339 0000a008     ........9.0.....
  4268c4:	0100a008 601ef603 00002ce1 f9ff0300     .......`.,......
  4268d4:	00103303 402ef503 400e0000 00e00400     .3.....@...@....
  4268e4:	00009a00 0400400e 9a0000f0 400e0000     .....@.........@
  4268f4:	00f00300 00009a00 0300500e 9a0000f0     .........P......
  426904:	500e0000 00f00300 fe4c0000 b64f0070     ...P......L.p.O.
  426914:	b00d908f f4325f00 4fe70000 a40c0020     ....._2....O ...
  426924:	ca0000f2 0e00402f 0500db70 68fb04f2     ..../@..p......h
  426934:	cf0400f9 fbef00e7 ab00cb44 ab00ab00     ........D.......
  426944:	ab00ab00 ab00ab00 df07ab00 858e10ea     ................
  426954:	0001c07e 0000f106 0000f006 0000900d     ~...............
  426964:	1c0000cc db0100c0 e51d0000 ff7f4244     ............DB..
  426974:	ff7ff9ff 4424f0ff 0000905f 090000bc     ......$D_.......
  426984:	3f0000e1 040010d8 0000d06d 0010f402     ...?....m.......
  426994:	75bdf402 df19d07d 000010ea 0000a00d     ...u}...........
  4269a4:	0000ac00 00e10700 404f0000 f6020010     ..........O@....
  4269b4:	1d00f500 00f500a0 ffffff7f 333313f3     ..............33
  4269c4:	000030f7 0000f500 00f50000 f0ffff09     .0..............
  4269d4:	4044b40a 0000800c 0000700e 40fcff0f     ..D@.....p.....@
  4269e4:	f25c3403 f7000000 f7000010 f16c858e     .4\...........l.
  4269f4:	30fbdf08 d5ef2a00 57d63f00 00c00c40     ...0.*...?.W@...
  426a04:	00f40200 5b4f0000 fe04a1ff 3fd05d84     ......O[.....].?
  426a14:	303f0080 f20300e8 dc45f806 e9df0500     ..?0......E.....
  426a24:	ffff9f10 44449dfd 04009ce9 0b0000f2     ......DD........
  426a34:	2f0000b0 ad000040 f6010000 e0080000     .../@...........
  426a44:	800e0000 106f0000 fe9e0100 63be0091     ......o........c
  426a54:	600fc06e cc006f00 02c02b20 00e2ffef     n..`.o.. +......
  426a64:	d04c42dc 1f00205f 0200f255 35d50ef5     .BL._ ..U......5
  426a74:	ef1a00de bf0310ea a42f20ea 008ee14b     ......... /.K...
  426a84:	009de900 714fdd00 ff07ff29 02009efc     ......Oq).......
  426a94:	0000ac10 6507f602 ef0ab08f 532e00d7     .......e.......S
  426aa4:	000000f5 3f000000 532ee452 000000f5     .......?R..S....
  426ab4:	2e000000 210df652 000001d0 00310000     ....R..!......1.
  426ac4:	01f26c00 0f00d68e 0a0000c3 000040fb     .l...........@..
  426ad4:	0070ee17 00c30500 1f000000 03f3ffff     ..p.............
  426ae4:	00303333 00000000 1f000000 03f3ffff     330.............
  426af4:	04303333 0e000000 000010d7 0020f95c     330.........\. .
  426b04:	00f22a00 06b1af03 1c0082de 00000060     .*..........`...
  426b14:	07000000 9e10eadf 01c06e74 00f00600     ........tn......
  426b24:	00c00900 00208e00 0000f206 00007008     ...... ......p..
  426b34:	00000000 0000800b 0000900c daef6c00     .............l..
  426b44:	3d000040 d91610a4 09e50100 90ca98ee     @..=............
  426b54:	43bd800a 0fd3c0af 0c00f213 063c69c0     ...C.........i<.
  426b64:	c00700d0 d0064b3b 2cc00700 00f2033c     ....;K.....,<...
  426b74:	0f4ac00c 9e43bd10 800ac5e3 cf91ee09     ..J...C.........
  426b84:	00e50190 00000000 10a43d00 00000028     .........=..(...
  426b94:	d9ef7c00 00000010 0000f10c d73f0000     .|............?.
  426ba4:	00000000 00006eb9 0ef20200 09000050     .....n......P...
  426bb4:	00d007a0 00301f00 7f0000f4 00fbffff     ......0.........
  426bc4:	3333e700 f005204f 900c0000 0000900c     ..33O ..........
  426bd4:	ff8ff106 e308c4fe 8ef24b33 581f0000     ........3K.....X
  426be4:	f11800e0 f8ffff8f 3733e308 00008ef6     ..........37....
  426bf4:	00e0c809 338e9d00 ff787f34 0070fdff     .......34.x...p.
  426c04:	40fbcf07 6a96cf00 00e20af5 601f3000     ...@...j.....0.`
  426c14:	4f000000 00000020 0000204f 00601f00     ...O ...O ....`.
  426c24:	e20a0000 01300000 f56a96cf fbdf0700     ......0...j.....
  426c34:	feff8f40 448e00a4 8e70cf46 f3070000     @......DF.p.....
  426c44:	0000008e 00008eda 008e9d00 8e9d0000     ................
  426c54:	da000000 0700008e 46448ef3 ff8f70bf     ..........DF.p..
  426c64:	8f00a4fe 8ef6ffff 8e414444 8e000000     ........DDA.....
  426c74:	8f000000 8ec0ffff 8e203333 8e000000     ........33 .....
  426c84:	8e000000 8f424444 8ff9ffff 8ef6ffff     ....DDB.........
  426c94:	8e414444 8e000000 8e000000 8f000000     DDA.............
  426ca4:	8ec0ffff 8e203333 8e000000 8e000000     ....33 .........
  426cb4:	00000000 50fccf07 6a96cf00 00e20af6     .......P...j....
  426cc4:	601f2000 4f000000 00000020 0000204f     . .`...O ...O ..
  426cd4:	00601fb9 e30ab900 00b90000 f86a96cf     ..`...........j.
  426ce4:	fcdf0700 00008e60 00e0e808 008e8e00     ....`...........
  426cf4:	e0e80800 8f8e0000 e8ffffff 9e3333e3     .............33.
  426d04:	0800008e 0000e0e8 00008e8e 00e0e808     ................
  426d14:	8e8e8e00 8e8e8e8e 8e8e8e8e c0ffff02     ................
  426d24:	00bc4404 00c00900 00009c00 0000c009     .D..............
  426d34:	0900009c ba0020c0 608fb50e 8e80fe3c     ..... .....`<...
  426d44:	504f0000 f604008e 3f008e00 038e0070     ..OP.......?p...
  426d54:	8e0000f8 0000c02e 00f6ec8e 7fb08f00     ................
  426d64:	008e0030 8e00e10a 00cc0000 1e00008e     0...............
  426d74:	00008ea0 00008e00 00008e00 00008e00     ................
  426d84:	00008e00 00008e00 00008e00 00008e00     ................
  426d94:	44448e00 ffff8f40 00008ef2 f7e80800     ..DD@...........
  426da4:	fe020000 0000f18f a0dce8bf 8d9e4f00     .............O..
  426db4:	870d302f 069cd0e8 018d7ee0 e807e5e7     /0.......~......
  426dc4:	00fc06d0 0a008d7e d0e80720 7e000000     ....~... ......~
  426dd4:	0800108e 0000fce8 00f98f8e f6e6e808     ................
  426de4:	098e8e00 e0e808f3 8e8ee10c e8b81e00     ................
  426df4:	ee3f00e0 6f00008e 0000e0e8 cf0700ae     ..?....o........
  426e04:	000050eb f96b96cf 00e20a00 1f605f00     .P....k......_`.
  426e14:	0a000060 00204fd0 4ff00600 06000020     `....O ....O ...
  426e24:	00601ff0 0ad00a00 5f0000e2 96cf0060     ..`........_`...
  426e34:	0000fa6b 50ebdf07 fdff8f00 45e40870     k......P....p..E
  426e44:	008eb08f e0385f00 8ef50100 483f0000     ....._8.......?H
  426e54:	d04d01e0 b2ffff8f 1033e308 00008e00     ..M.......3.....
  426e64:	00e00800 07000000 0050ebcf 6b96cf00     ..........P....k
  426e74:	e20a00f9 605f0000 0000601f 204fd00a     ......_`.`....O 
  426e84:	f0060000 0000204f 601ff005 d00a0000     ....O .....`....
  426e94:	0000e20a df01605f 00fa5a85 fcdf0800     ...._`...Z......
  426ea4:	00000050 9421ec01 1b000000 0000c1ff     P.....!.........
  426eb4:	00120000 70fdff8f 8f45e408 00008eb0     .......p..E.....
  426ec4:	00e0385f 008ef501 e0383f00 8fd04d01     _8.......?8..M..
  426ed4:	08c2ffff 00da33e3 f602008e 0500e008     .....3..........
  426ee4:	fd9e01f3 64ce00a2 402f706b f8010000     .......dkp/@....
  426ef4:	06000000 000095fd 50ee6a01 9f000000     .........j.P....
  426f04:	05002000 47a53ff1 ef4b00eb ffff10e9     . ...?.G..K.....
  426f14:	4424ffff 004044bd 0000c009 00009c00     ..$D.D@.........
  426f24:	00c00900 009c0000 c0090000 9c000000     ................
  426f34:	09000000 000000c0 9c00009c a90b0000     ................
  426f44:	ba0000c0 0b00009c 0000c0a9 00009cba     ................
  426f54:	00c0a90b 008eba00 f4940d00 0cf50300     ................
  426f64:	00fd68f8 10e9ef09 0000b00c 205fc00a     .h............_ 
  426f74:	00f50100 8e0000e9 00f00800 1f00700e     .............p..
  426f84:	00f10560 c900ad00 f4030000 0000303f     `...........?0..
  426f94:	00c0ba0c f55f0000 00000000 6f0000ee     ......_........o
  426fa4:	b00d0010 1ff20200 f13f0060 0bd00800     ........`.?.....
  426fb4:	e68b00b0 06700d00 9be600f0 01202f00     ......p....../ .
  426fc4:	4ff103f5 00008d10 0eb009ca 0000d860     ...O........`...
  426fd4:	09600e6f 0000f3b2 04109f1f 0000d0f9     o.`.............
  426fe4:	0000fb0c 000080ef 0000f607 3f00309f     .............0.?
  426ff4:	a00d0050 9d00f208 04cc0000 2f0000f3     P............../
  427004:	0000709e 0000fc06 10fe0900 4d4f0000     .p............OM
  427014:	e80100b0 0b00f702 207f00d0 0b00207f     ........... . ..
  427024:	00b00cd0 2f009c00 302f0050 0c009e00     ......./P./0....
  427034:	e8000090 0000f105 00e6f305 fd0c0000     ................
  427044:	00000000 0000403f 00f30200 2f000000     ....?@........./
  427054:	00000030 0000f302 ffffff4f 4a444491     0.......O....DDJ
  427064:	030000f3 010000f6 000000ea 000000cc     ................
  427074:	0000109e 0000406f 0000703f 4444d41e     ....o@..?p....DD
  427084:	ffffff36 8df68ffc 8d008d31 8d008d00     6.......1.......
  427094:	8d008d00 8d008d00 8d008d00 8f318d00     ..............1.
  4270a4:	00005df6 0000f200 0000800b 0100006d     .]..........m...
  4270b4:	0b0000f2 6d000080 f2010000 700b0000     .......m.......p
  4270c4:	006d0000 00f20100 00700b00 00006d00     ..m.......p..m..
  4270d4:	f3bff201 f302f325 f302f302 f302f302     ....%...........
  4270e4:	f302f302 f302f302 f325f302 ad00f3bf     ..........%.....
  4270f4:	c41e0000 a0850800 100ee200 0b97005b     ............[...
  427104:	eee00250 0be0eeee b00900c0 10eacf04     P...............
  427114:	b05d740b f0040000 f2eece04 f214821f     .t].............
  427124:	f204104f f23d701f f2d7df04 000000ba     O....p=.........
  427134:	000000ba 000000ba 30fc8eba f34bd5bf     ...........0..K.
  427144:	ca0010be 7e0000ba 7e0000ba ca0010be     .......~...~....
  427154:	f35bd5bf 30fc8eb9 60fd7d00 f448f709     ..[....0.}.`..H.
  427164:	2000502f 0000005f 0000005f 2000502f     /P. _..._.../P. 
  427174:	f448f709 60fd7d00 1f000000 01000040     ..H..}.`....@...
  427184:	000000f4 ef08401f f70af4c4 f542ff48     .....@......H.B.
  427194:	5ff40700 452f0000 f40100f0 6f00502f     ..._../E..../P.o
  4271a4:	7e63ae40 fc8e00f4 8e00404f d50a40fc     @.c~....O@...@..
  4271b4:	202ff438 ee5f8c00 215fffee 702f1111     8./ .._..._!../p
  4271c4:	f8091000 7d00e446 9e0080fe 41f405e3     ....F..}.......A
  4271d4:	cf00c008 d329f0ff 00d00820 0800d008     ......). .......
  4271e4:	d00800d0 00d00800 0000d008 604efc7e     ............~.N`
  4271f4:	f67f74af 5f00502f 0000f065 00005ff6     .t../P._e...._..
  427204:	00f6620f f709f606 0750ff47 00f5c4ef     .b......G.P.....
  427214:	203f0000 b06e64cb 80fdae03 0000ba00     ..? .dn.........
  427224:	0000ba00 0000ba00 fb8eba00 6dc5bf20     ............ ..m
  427234:	0300bed0 0000baf2 0000baf4 0000baf5     ................
  427244:	0000baf5 0000baf5 00a8baf5 babababa     ................
  427254:	babababa 00b00a00 00000099 0a00ab00     ................
  427264:	00ab00b0 ab00b00a 00b00a00 b00a00ab     ................
  427274:	4e06aa00 baa0df71 ba000000 ba000000     ...Nq...........
  427284:	ba000000 bac01c00 ba00cc01 bb00d11c     ................
  427294:	bf0060cf bd00e1db ba00dc11 ba703f00     .`...........?p.
  4272a4:	baf30700 babababa babababa 9eb9baba     ................
  4272b4:	d4df15fa ed45fb0b bef24ae6 00f60600     ......E..J......
  4272c4:	00a07b0e c900204f f10300ba a09b0c00     .{..O ..........
  4272d4:	00103f00 0300bac9 9b0c00f1 103f00a0     .?............?.
  4272e4:	9eb9c900 b4bf20fb 00bed05d 00baf203     ..... ..].......
  4272f4:	00baf400 00baf500 00baf500 00baf500     ................
  427304:	7d00f500 9f0060fd 2f708f74 057f0050     ...}.`..t.p/P...
  427314:	f30100f0 2f00005f 0700f532 48f709f0     ...._../2......H
  427324:	df0700f7 8eb900d6 c4bf30fc 10bef33a     .........0..:...
  427334:	00baca00 00ba7e00 10be7e00 d5bfca00     .....~...~......
  427344:	7ebaf35b 00ba30fc 00ba0000 00ba0000     [..~.0..........
  427354:	8e000000 af403ffc 2ff48e74 457f0050     .....?@.t../P..E
  427364:	f40100f0 2f00005f 0700f542 48f70af4     ...._../B......H
  427374:	ef0840ff 0000f4c4 00401f00 00f40100     .@........@.....
  427384:	401f0000 fd4b8eb9 0b10be71 00ba00b0     ...@..K.q.......
  427394:	ba00a00b 00a00b00 13eadf05 6fa035f7     .............5.o
  4273a4:	ee010000 6a011096 000030ef 6f646cd9     .......j.0...ldo
  4273b4:	70fdae62 0800d008 ffcf00d0 20d329f0     b..p.........). 
  4273c4:	0800d008 d00800d0 00d00800 0051f505     ..............Q.
  4273d4:	00c8e39f 00c8f302 00c8f302 00c8f302     ................
  4273e4:	00c9f302 00abf303 835ff307 df06f37e     .........._.~...
  4273f4:	900df3c5 6ea00a00 00f30100 007d00f5     .......n......}.
  427404:	600ec009 f0243f00 b9c80000 ff060000     ...`.?$.........
  427414:	0f000030 00c800c0 0d00f106 cf00d056     0...........V...
  427424:	1ff00360 009c2f30 07b8009a 400ef1b2     `...0/.........@
  427434:	0cd6e005 0f00e074 997c006f a0af0000     ....t...o.|.....
  427444:	0040ff01 0b00f405 304f00e0 d009e107     ..@.......O0....
  427454:	d900402f 3f0000d9 4f0000d0 e70100e1     /@.....?...O....
  427464:	b00b00bb 107e701e 900df305 6fa00a00     .....p~........o
  427474:	00f30100 007d00f6 600dc009 f0342f00     ......}....`./4.
  427484:	a9c90000 ff050000 0e000020 000000c0     ........ .......
  427494:	940000e5 1b0000ad 000020fc a1ffff5f     ......... .._...
  4274a4:	00f43733 0000e701 8e0000cb 404f0010     37............O@
  4274b4:	33a31e00 fcffff26 0fa06e00 00f40192     ...3&....n......
  4274c4:	f401401f 3f303f00 306f00c0 1f00f401     .@...?0?..o0....
  4274d4:	00f40140 fa00401f 8bea0520 8b8b8b8b     @....@.. .......
  4274e4:	8b8b8b8b 8b8b8b8b 0250be8b f00500ae     ..........P.....
  4274f4:	05005f00 104f00f0 4f10df00 00f00550     ._....O....OP...
  427504:	f005005f 2a005f00 00e40be0 b440ec07     _...._.*......@.
  427514:	c0df251e 00000001 2b30cc04 0057c001     .%........0+..W.
  427524:	c0012b93 0630cc05 0bf60fa1 000000e2     .+....0.........
	...
  42753c:	fb7b0200 04000000 d0ffff9d ffaf0300     ..{.............
  42754c:	00fdffff ffffaf00 00d0dfff b6ffff0a     ................
  42755c:	0000ed10 000094af 0a00d00e 000000f1     ................
  42756c:	af0000ed 0e000010 f10a00d0 fd450000     ..............E.
  42757c:	10af0000 d0ffef01 00f19d17 0efcff5f     ............_...
  42758c:	0010ffff ff31fdaf 0000e0ff bd030001     ......1.........
  42759c:	000000a3 18500000 84888888 ddbffa05     ......P.........
  4275ac:	affddddd 00107fe4 e04eca00 0000104f     ..........N.O...
  4275bc:	effe0ec8 cf000010 ee3fe0ef 0ef8eeee     ..........?.....
  4275cc:	66768ff6 f86feb66 000010af 3fe08fcc     ..vff.o........?
  4275dc:	c8000010 65dffc0e cfee5555 ffff5fc2     .......eUU..._..
  4275ec:	572cf9ff 77770575 ffff7577 ffffff1f     ..,Wu.wwwu......
  4275fc:	2fffffff ffffffff ff0effef 01feffff     .../............
  42760c:	11110010 feef1011 ffffff0e 2ffffffe     .............../
  42761c:	ffffffff ff1fffff 68ffffff 88880787     ...........h....
  42762c:	87688688 88888807 1fffff86 ffffffff     ..h.............
  42763c:	ff2fffff dfffffff ffff0dfd 0000fdff     ../.............
  42764c:	01000000 00000050 f81d0000 00000000     ....P...........
  42765c:	00fddf01 1d000000 602de2ff fedf0100     ..........-`....
  42766c:	00f7df20 00e2ff1d df71ff8f 080020fe      .........q.. ..
  42767c:	e2fffeff 8f000000 0020feff ff080000     .......... .....
  42768c:	000000e2 207d0000 00000000 00000000     ......} ........
  42769c:	0b00607f 00f6efe2 ff4ff8bf 04d1ff6b     .`........O.k...
  4276ac:	10fdffff e1ff5f00 ffbf0000 ff0b00f6     ....._..........
  4276bc:	bf60ffdf f5ff14fd 4f00d1cf 001017f6     ..`........O....
  4276cc:	00006003 00001100 00000000 000000ff     .`..............
  4276dc:	ff216f00 0600f712 16ff61ff f91f60ff     .o!......a...`..
  4276ec:	9f10ff01 01e06ff1 f60e10ff ff0180af     .....o..........
  4276fc:	cffa0810 10ff0160 80affc06 0800aa00     ....`...........
  42770c:	00d07ffb f70d0000 0000f81f 07f18f00     ................
  42771c:	2a0091ff 9f0070ff f9ffeeff cf050000     ...*.p..........
  42772c:	0050fdff 44020000 00000020 00000000     ..P....D .......
  42773c:	00000000 00a0ff0a 0c000000 0000c0ff     ................
  42774c:	ffdfd603 0e306dfd ffffffff ff5fe0ff     .....m0......._.
  42775c:	ffffaaff f4ff1af5 a1ff4f00 00d0ff03     .........O......
  42776c:	0430ff0d 0f00f0ff ff4f40ff ffbf22fb     ..0......@O.."..
  42777c:	ffff2ff4 f2ffffff fffffe09 0090efff     ./..............
  42778c:	e5ff5e50 00000005 00c0ff0c 04000000     P^..............
  42779c:	00004077 03000000 00410310 9f000000     w@........A.....
  4277ac:	00f50df5 fd1b0000 00f58dff b1df0200     ................
  4277bc:	00f5ff2d 3ef84f00 00f5bfc2 ff55ff07     -....O.>......U.
  4277cc:	40fe39fe ff8fe39f f66ff5ff ffff2aac     .9.@......o..*..
  4277dc:	e673ffff ffff5f00 00f1ffff d7ff6f00     ..s.._.......o..
  4277ec:	00f2ff7f 90ff6f00 00f2ff0d 90ff6f00     .....o.......o..
  4277fc:	00f2ff0d 70ff4f00 00e1ff0b 33000000     .....O.p.......3
  42780c:	00000000 b0ff0b00 00000000 00c0ff0c     ................
  42781c:	0c000000 0000c0ff ff0c0000 000000c0     ................
  42782c:	c0ff0c00 8f000000 f8ffffff ff2e0000     ................
  42783c:	00e2ffff ffef0200 000020fe e2ff2d00     ......... ...-..
  42784c:	99790000 9928de82 fbffff97 ffffbf22     ..y...(....."...
  42785c:	ffffffff ffffffff faffffff ccaccfb3     ................
  42786c:	cccccccc bb0600ca 30babbbb ff4f0000     ...........0..O.
  42787c:	e1ffffff 30ef0000 fb060000 00f80900     .......0........
  42788c:	cf000000 00d04f50 2f000000 4284dfe1     ....PO...../...B
  42789c:	4b340000 fdfffff9 ffff0100 fffffffb     ..4K............
  4278ac:	ffff8b98 fffffffc ffffffff fffffffc     ................
  4278bc:	ffffffff ffff9ffb ffffffff 000000f6     ................
  4278cc:	33000000 ff8d0100 00ef00c6 ffffff4e     ...3........N...
  4278dc:	ff04dfe4 ff4c00b3 00f90eff ff8f0000     ......L.........
  4278ec:	0100c06f 8effffff de010050 0000edee     o.......P.......
  4278fc:	00000000 22222200 21000000 10ffffff     ....."""...!....
  42790c:	fff80800 0010bcfb fcfff41e df010010     ................
  42791c:	e8effec0 10fe8e44 ffff1afe fd00c1ff     ....D...........
  42792c:	94bb2800 00000000 02007002 ef0200ef     .(.......p......
  42793c:	fffffffd ffffffff ffffffff ffffffff     ................
  42794c:	4734ffff 0500f0ff 050000ff 000000c0     ..4G............
  42795c:	70020000 02000000 000000ef 00f0ef02     ...p............
  42796c:	ffffff0d ffff2002 1f8ef0ff 00ffffff     ..... ..........
  42797c:	ffffffe7 ff5f3ff0 9008ffff f0ff4734     .....?_.....4G..
  42798c:	05000000 000000ff 00c00500 00000000     ................
  42799c:	00000000 07000000 00000070 05007002     ........p....p..
  4279ac:	000000fa 8100f02e 0200604f dd01f0ef     ........O`......
  4279bc:	ffdff007 1e32f0ff fffff680 278ef0ff     ......2........'
  4279cc:	ffffb9e0 730ef0ff ffff9bf1 543ff0ff     .......s......?T
  4279dc:	ffff9af0 0a89f0ff 4734d8c0 7f00f0ff     ..........4G....
  4279ec:	0000f343 f602f05f 0000b00c 0000c005     C..._...........
  4279fc:	000010bf 09000000 000000e3 02000000     ................
  427a0c:	88370010 88888888 ffffef73 feffffff     ..7.....s.......
  427a1c:	ffdf32fe f9ffffff fdff7f00 10fdffff     .2..............
  427a2c:	7fa0ffcf ffffffff ff0700fa a05ff3ff     .............._.
  427a3c:	ffcf0000 00000330 00fccf00 00000000     ....0...........
  427a4c:	ccccffcf ffcccccc ffffffaf 04f9ffff     ................
  427a5c:	31000030 0600e01f 00e01ff9 e01ffa7f     0..1............
  427a6c:	1ffaff09 faffafe0 ffffeb1f ffff1ffa     ................
  427a7c:	ff1ffaff 1ffaffff faffffe6 ff5fe01f     .............._.
  427a8c:	04e01ffa e01ffaff 0ffa3e00 d70200d0     .........>......
  427a9c:	00000000 00000200 0c000000 000020fb     ............. ..
  427aac:	ffff0000 00000090 e6ffff0f ff000000     ................
  427abc:	30fcffff ffff0f00 0091ffff ffffffff     ...0............
  427acc:	ff0fe6ff ffffffff fffffff2 0ffdffff     ................
  427adc:	ffffffff ffff00f8 00b2ffff fdffff0f     ................
  427aec:	ff000040 0000f7ff a1ff0f00 00000000     @...............
  427afc:	0000406a 14000000 44012044 ffff0d42     j@......D .DB...
  427b0c:	f1ffdf10 0ff3ffff ff3fffff ffff40ff     ..........?..@..
  427b1c:	f4fffff4 4fffff0f ff40ffff fffff4ff     .......O..@.....
  427b2c:	ffff0ff4 40ffff4f fff4ffff ff0ff4ff     ....O..@........
  427b3c:	ffff4fff f4ffff40 0ff4ffff ff4fffff     .O..@.........O.
  427b4c:	ffff30ff c0ff9ff3 00fcff09 44444414     .0...........DDD
  427b5c:	ff0d4244 ffffffff fffffff1 3fffffff     DB.............?
  427b6c:	ffffffff fffff4ff ffffffff ffffff4f     ............O...
  427b7c:	fff4ffff ffffffff ffff4fff f4ffffff     .........O......
  427b8c:	ffffffff ff4fffff ffffffff fffffff4     ......O.........
  427b9c:	4fffffff ffffffff ff9ff3ff fcffffff     ...O............
  427bac:	00100200 e20f4200 0ffb0300 fb0430fe     .....B.......0..
  427bbc:	04f4ff0f ffff0ffb ff0ffb54 0ffbfaff     ........T.......
  427bcc:	fbffffff ffffff0f ffff0ffb ff0ffbd6     ................
  427bdc:	0ffb14fd fb04c1ff 0400fb0f 00a00cfb     ................
  427bec:	0000fa03 00000000 00120000 00000000     ................
  427bfc:	0060ff03 2e000000 0000f5ff ffef0100     ..`.............
  427c0c:	000040ff ffffff1d cf0000f3 feffffff     .@..............
  427c1c:	ffff0a20 e0ffffff ffffff0e 03f2ffff      ...............
  427c2c:	99999999 88055099 88888888 ffff0f70     .....P......p...
  427c3c:	f3ffffff ffffff0f 0bf4ffff ffffffff     ................
  427c4c:	0000d1ff 00000000 00903f00 00fc3f00     .........?...?..
  427c5c:	10fd3f00 10fd3f00 10fd3f00 10fd1f00     .?...?...?......
  427c6c:	f4cf0000 cf000000 000000f4 0000f4cf     ................
  427c7c:	00f4cf00 e0cf0000 a4000000 00000000     ................
  427c8c:	10cd0000 fd1f0000 3f000010 000010fd     ...........?....
  427c9c:	0010fd3f 10fd3f00 fd3f0000 ff080000     ?....?....?.....
  427cac:	ff080090 ff080090 ff080090 ff020090     ................
  427cbc:	07000090 00000080 50040000 00000000     ...........P....
  427ccc:	0060ff02 3f000000 000000f7 70ff0300     ..`....?.......p
  427cdc:	00000000 0000f73f ff9a9906 ff8099c9     ....?...........
  427cec:	ffffffff ffff3dff f2ffffff f73f1101     .....=........?.
  427cfc:	00001011 0070ff03 3f000000 000000f7     ......p....?....
  427d0c:	70ff0300 00000000 0000d30c 99996900     ...p.........i..
  427d1c:	0f989999 ffffffff ffdff3ff ffffffff     ................
  427d2c:	00000020 00000000 64560100 00000000      .........Vd....
  427d3c:	effebf03 000010f9 0310fa7f 0800e4df     ................
  427d4c:	b409a0ff 4f50ff1e ff0b20ff efe1ff26     ......PO. ..&...
  427d5c:	ffcf09ff bffaff63 ffff09ff 1ef6ff54     ....c.......T...
  427d6c:	fbdf51ff 03b0ff09 3004e2ef 0010fc5f     .Q.........0_...
  427d7c:	6a95ff2c 000090ff fddf4900 00000092     ,..j.....I......
	...
  427d94:	000020cd 00000000 00f58f00 00406614     . ...........f@.
  427da4:	ef040000 ffefffac 00000091 00a1ff1c     ................
  427db4:	0030fe4d f59f0000 f4ef31ab 05b10700     M.0......1......
  427dc4:	7fe1ffff fe0f10fe f5ff2d30 0c90ff4f     ........0-..O...
  427dd4:	af00e0ff 60ff5ff6 00f4ff02 fbefff06     ....._.`........
  427de4:	fd4f0000 ff3e0010 020000c0 0154e8df     ..O...>.......T.
  427df4:	0000e3bf ffae0500 60ff0760 00000000     ........`..`....
  427e04:	4e000000 000000f6 00000000 0000a101     ...N............
	...
  427e1c:	d03e0000 00000000 ff0c0000 00000080     ..>.............
  427e2c:	ff060000 000020ff ef000000 0000fbff     ..... ..........
  427e3c:	8f000000 00f4cffc 2f000000 d0ff00fb     .........../....
  427e4c:	0b000000 ff0fc0ff 04000070 ff01fdff     ........p.......
  427e5c:	000010ff 2fe0ffdf 0000faff 9bffff7f     ......./........
  427e6c:	00f3ffff b0ffff1f c0ffff0e feffff0a     ................
  427e7c:	ffffff24 ffffff60 ffffffff cccc06fa     $...`...........
  427e8c:	cccccccc 000030cb 36000000 00000000     .....0.....6....
  427e9c:	807f0000 0000dbdd fff8ef8d ff07b0ff     ................
  427eac:	6f55fdff aff86ff4 740500e2 207e90ff     ..Uo.o.....t..~ 
  427ebc:	fa3f0000 00000000 50b2ef02 2e01004a     ..?........PJ...
  427ecc:	8ff41dfd d1ffffb0 fbffff0b 0020feff     .............. .
  427edc:	12fbffcf 02000021 0000c09f 5b000000     ....!..........[
  427eec:	07000000 000000a0 b0ff0800 08000000     ................
  427efc:	00b0ffff 95ff0800 0800b0ff ff0590ff     ................
  427f0c:	90ff07b0 b0ff0500 0000909f 4000fd05     ...............@
  427f1c:	03000000 00204c10 0bb60000 000020fe     .....L ...... ..
  427f2c:	fe2ef0cf f4cf0020 20fe2e00 0000f4cf     .... ...... ....
  427f3c:	f4cffe2e 2e000000 0000f4ff f42e0000     ................
  427f4c:	00000000 00001300 30080000 00000000     ...........0....
  427f5c:	bf000000 bbbb08f3 0b0090bb ff39ffff     ..............9.
  427f6c:	00f1ffff f0cfcf8f f10a0000 942f3800     .............8/.
  427f7c:	0a000080 2f0000f1 00000090 0000f10a     ......./........
  427f8c:	0000902f 30f10a03 00902f00 f8cb1f00     /......0./......
  427f9c:	eb2f00f8 ff39bbbb 1f00e2ff b0ffffff     ../...9.........
  427fac:	0020fd9f 00000000 00d10800 00878837     .. .........7...
  427fbc:	ef000000 00a0ffff ffff0000 ccccfdff     ................
  427fcc:	ffffffb6 ffffffff ffffffff ffffffff     ................
  427fdc:	ffffffff ffffffff ffffffff ffffffff     ................
  427fec:	ffffffff ffffffff ffffffff ffffffff     ................
  427ffc:	ffafffff ffffffff 000000f9 00000000     ................
  42800c:	dd010000 00000010 d1ff1d00 01000000     ................
  42801c:	10fdffdf ff1d0000 00d1ffff ffff9f00     ................
  42802c:	0000f9ff c1ff1c01 00000010 00c0ff0c     ................
  42803c:	0c000000 0000c0ff ff0c0000 790000c0     ...............y
  42804c:	b3ff3b99 ffff9799 ff2b44b2 feffffff     .;.......D+.....
  42805c:	ffffefdd ffffffff accfb3fa cccccccc     ................
  42806c:	0000cacc 02000000 00000000 ff040000     ................
  42807c:	000000c7 ffaf0000 000000f0 fdff1f00     ................
  42808c:	00000000 c0ffff06 00000000 00f7ff08     ................
  42809c:	00000000 0030ff0c 04000000 0000c0ff     ......0.........
  4280ac:	ef010000 4a0000f3 f8df0230 fedf0500     .......J0.......
  4280bc:	00fbef15 ffffef00 0000faff ffffff0b     ................
  4280cc:	000000f7 a2ffff7f 02000000 000085ba     ................
  4280dc:	04000000 00000086 faff0610 d1df0200     ................
  4280ec:	01f13cef e00efadf fadf21af f6ef9f00     .<.......!......
  4280fc:	0000fadf fbffff8d 06000000 0000fdff     ................
  42810c:	ffef4800 6f0000f6 f6fffbff cff30e00     .H.....o........
  42811c:	00f6ff23 04f20aee fe09f6ff ff0400fc     #...............
  42812c:	10da08f1 00620200 00000000 00000000     ......b.........
  42813c:	87f9ff6f ff080000 08f798ff f9ff8fa6     o...............
  42814c:	a8ff9059 ccfcffff ff8ffa0f fff1ffff     Y...............
  42815c:	ffffffa8 8ffa1fff f1ffffff ffffa8ff     ................
  42816c:	fa1fffff ffffff8f ffa8fff1 1fffffff     ................
  42817c:	ffff7ffa e3fff0ff 21222212 ffffff0f     .........""!....
  42818c:	ac0000f9 50cbcccc 99490000 00959999     .......P..I.....
  42819c:	ffffff0e fd00f6ff 4f222222 00c00ff6     ........"""O....
  4281ac:	f3ff0100 000000fc c06fff1f ff020000     ..........o.....
  4281bc:	fffffff6 6fffffff ffdcffff fffff6ff     .......o........
  4281cc:	ffff05b0 00f6ff6f fff6ff0f ff06c0ff     ....o...........
  4281dc:	ffff6fff f6ffffed ffffff9f 0010fdff     .o..............
  4281ec:	00000000 f0ffff01 ffff0400 ff0600d0     ................
  4281fc:	080080ff 0030ffff aaffff0a ffff0ca6     ......0.........
  42820c:	ff0ef8ff 0be1ffff 60ffdfdd fd4f0000     ...........`..O.
  42821c:	7f000000 000000f3 0000a0bf 0010ff00     ................
  42822c:	00f80300 c0030000 00000000 00000020     ............ ...
  42823c:	b5ef5504 ff000052 b0ff1ffd ffff0f00     .U..R...........
  42824c:	0000fcff 3353ffff ff0f0020 57fbff97     ......S3 ......W
  42825c:	aff8ff00 0ff8c6ff fcff8aff f8ffa14a     ............J...
  42826c:	22e3ffaf ff8aff0f fff4ffff ffffaff8     ..."............
  42827c:	8aff4fff f4ffffff ffaf5235 0040ffff     .O......5R....@.
  42828c:	ffffff0a 7f0000f4 20feffff 10010000     ........... ....
  42829c:	00000000 0000af00 8f010000 000030fa     .............0..
  4282ac:	ffffef02 bf000050 10ffffff ffff1f00     ....P...........
  4282bc:	0300f5ff ffffffff ff5f0070 00f9ffff     ........p._.....
  4282cc:	ffffff08 df00c0ff ffffffff ffff9f20     ............ ...
  4282dc:	0efdffff ffffffff 2202f2ff 21222222     ...........""""!
  4282ec:	ff080000 000000c0 00a20900 bb5b0000     ..............[.
  4282fc:	bbbbbbbb ffffa3bb ffffffff 0cfcfbff     ................
  42830c:	0d1de130 0bfcfc11 0d1de030 fefffc10     0.......0.......
  42831c:	fefeefff f1fffcef a070085a f3fffc5f     ........Z.p._...
  42832c:	c292297b bffffc7f bfbbbbcb 0bfcfccb     {)..............
  42833c:	0d000020 cffffc00 cfcccccc ff9ffbcc      ...............
  42834c:	ffffffff 0000f6ff 00000000 00000002     ................
  42835c:	05000000 0000b0df ef070000 0000d0ff     ................
  42836c:	ffff1800 000070ff ffffff29 3b0000ff     .....p..)......;
  42837c:	ffffffff ff0a00f8 ffffffff ff0f00f1     ................
  42838c:	ffffffff 9a0400a0 ffffafaa 00000020     ............ ...
  42839c:	fbff0e00 00000000 f4ff0e00 00000000     ................
  4283ac:	c0ff0e00 00000000 50ff0e00 00000000     ...........P....
  4283bc:	00fd0d00 00000000 00b30400 55350000     ..............5U
  4283cc:	0f000255 f4f2ffff ffffff00 ff0ff42f     U.........../...
  4283dc:	f3fff2ff 32ffffff ffff1f22 fff7ffff     .......2".......
  4283ec:	ffffffff ffffff8f fffff8ff 8fffffff     ................
  4283fc:	ffffffff fffffff8 ff8fffff f8ffffff     ................
  42840c:	ffffffff ffff8fff 8af8ffff aaaaaaaa     ................
  42841c:	00000030 00315524 03000000 ffffffaf     0...$U1.........
  42842c:	020000c7 defeffbf 00f6ffff 10b5ff5f     ............_...
  42843c:	ff8e0300 00d3dfb0 00000000 0018f58f     ................
  42844c:	c8feae05 00600410 ffffdf02 0000f8ff     ......`.........
  42845c:	95ff0c00 40ff7d34 a2020000 77000000     ....4}.@.......w
  42846c:	00000000 00960200 00000000 ff0d0000     ................
  42847c:	00000050 0e000000 000060ff 00000000     P........`......
  42848c:	0000da05 bb5b0000 bbbbbbbb ff20babb     ......[....... .
  42849c:	ffffffff 90ffffff 222212fc 0f222222     ..........""""".
  4284ac:	ff5ffcf7 ffffffff 5ffcfa2c ffffffff     .._.....,.._....
  4284bc:	fcfa21ff ffffff5f fa27ffff 666626fc     .!.._.....'..&ff
  4284cc:	1f666666 bbbbfefa bbbbbbbb ffafb1bf     fff.............
  4284dc:	ffffffff 0050ffff 00000000 00000000     ......P.........
  4284ec:	bbbbbb5b babbbbbb ffffff20 ffffffff     [....... .......
  4284fc:	12fc90ff 21222222 fcf70f00 ffffff5f     ...."""!...._...
  42850c:	fa0c00f8 ffff5ffc 0100f8ff ff5ffcfa     ....._........_.
  42851c:	00f8ffff 26fcfa07 63666666 fefa0f00     .......&fffc....
  42852c:	bbbbbbbb b1bfbbbb ffffffaf ffffffff     ................
  42853c:	00000050 00000000 bb5b0000 bbbbbbbb     P.........[.....
  42854c:	ff20babb ffffffff 90ffffff 222212fc     .. ...........""
  42855c:	0f000010 ff5ffcf7 0000d0ff 5ffcfa0c     ......_........_
  42856c:	00d0ffff fcfa0100 d0ffff5f fa070000     ........_.......
  42857c:	666626fc 0f000050 bbbbfefa bbbbbbbb     .&ffP...........
  42858c:	ffafb1bf ffffffff 0050ffff 00000000     ..........P.....
  42859c:	00000000 bbbbbb5b babbbbbb ffffff20     ....[....... ...
  4285ac:	ffffffff 12fc90ff 00000022 fcf70f00     ........".......
  4285bc:	0030ff5f fa0c0000 30ff5ffc 01000000     _.0......_.0....
  4285cc:	ff5ffcfa 00000030 26fcfa07 00001066     .._.0......&f...
  4285dc:	fefa0f00 bbbbbbbb b1bfbbbb ffffffaf     ................
  4285ec:	ffffffff 00000050 00000000 bb5b0000     ....P.........[.
  4285fc:	bbbbbbbb ff20babb ffffffff 90ffffff     ...... .........
  42860c:	000000fc 0f000000 0000fcf7 00000000     ................
  42861c:	00fcfa0c 00000000 fcfa0100 00000000     ................
  42862c:	fa070000 000000fc 0f000000 bbbbfefa     ................
  42863c:	bbbbbbbb ffafb1bf ffffffff 0050ffff     ..............P.
	...
  428658:	0000b207 00000000 00fadf0a 00000000     ................
  428668:	f53da900 04000000 00e00240 00000010     ..=.....@.......
  428678:	600bf8af 6c000000 ffffff30 ffffffff     ...`...l0.......
  428688:	f9aff4ff 00500c00 05406d00 c0040050     ......P..m@.P...
  428698:	00100000 00000000 00e83ec4 00000000     .........>......
  4286a8:	faef2e00 00000000 4f000000 000000fa     ...........O....
	...
  4286c0:	10010000 07000000 00b3ffef 8ffdaf00     ................
  4286d0:	ff0420ff b0ff09fd 12fdfe0a f50ef0af     . ..............
  4286e0:	f30e2c5d 1233ff0f ff0ff59f f6ff07f3     ],....3.........
  4286f0:	06e2ff0f fe0ff6ff f57f1324 2c7df50d     ........$.....},
  428700:	ff0af30d f0bf11fd 0bfeff03 7f00a0ff     ................
  428710:	10febffe dcac0300 00000081 00004334     ............4C..
  428720:	ff7f6605 ff5066f9 ffffffff 666635ff     .f...fP......5ff
  428730:	50666666 cccccc1c ff02c4cc ffffffff     fffP............
  428740:	fbf32f60 02f66d7f f5b72fff f22f60df     `/...m.../...`/.
  428750:	f65d7ffb b72fff02 2f60dff5 5d7ffbf2     ..].../...`/...]
  428760:	2fff02f6 60dff5b7 7ffbf32f ff01f66d     .../...`/...m...
  428770:	ffffffff ccbc0750 0090cccc 00000000     ....P...........
  428780:	00200100 00000000 0050ff04 02000000     .. .......P.....
  428790:	0050ffff 39040000 0000feff 39ff0400     ..P....9.......9
  4287a0:	0000a0ff 39ffff04 040000b0 20ffffff     .......9....... 
  4287b0:	ff040000 00b0ffff ffff0400 0000b0ff     ................
  4287c0:	ffffff04 040000b0 b0ffffff bf000000     ................
  4287d0:	00b0ffff ff0d0000 0000b0ff ffff0000     ................
  4287e0:	000000b0 60a80900 00000000 17000000     .......`........
  4287f0:	88888888 02004087 ffffffef 00f4ffff     .....@..........
  428800:	cfffff3e f7ffcfff f9ffef03 ff09f808     >...............
  428810:	ffff3ef8 2e4020fe ffdff8ff 01e1ffff     .>... @.........
  428820:	9ff8ffef 80ffffff f8ff8f00 f9ffff09     ................
  428830:	ff09c202 ff9f00f8 4efe4efe 0900f8ff     .........N.N....
  428840:	ffffffff 00f7ffff ffff8f00 c1ffffff     ................
  428850:	00000000 ef030000 03e2ffff bfcefbfb     ................
  428860:	031dffa4 f1fffaa1 af1f3ad0 ffffffff     .........:......
  428870:	fffffffa ffafffff faffffff ffffffff     ................
  428880:	ffffafff fffaffff ffffffff ffffffaf     ................
  428890:	fffffaff adffffff ffffffff aaaa29f8     .............)..
  4288a0:	0000a8aa 00000000 00000300 00000000     ................
  4288b0:	0800f104 01000020 f70b10ff 2f000000     .... ........../
  4288c0:	94ff0cf1 ff454444 ffffff1b f1ffffff     ....DDE.........
  4288d0:	ffffff8f 00fdffff 0000f77f 00000000     ................
  4288e0:	0000606f 00000000 00000030 00000000     o`......0.......

004288f0 <kern_class_values>:
  4288f0:	00000100 00000000 00000100 00000002     ................
  428900:	00000200 00000000 00000000 00000000     ................
  428910:	00010000 00000000 00000000 00000000     ................
  428920:	000a0100 0000fb06 f3f40000 04050b02     ................
  428930:	010b02f7 00070209 00000000 00000000     ................
  428940:	020d0000 000000fe 00000000 00000000     ................
  428950:	f9000400 00000000 0404fc00 00fe0000     ................
  428960:	fe0002fe fcfffe00 00000000 fd0000fe     ................
  428970:	fe0000fd 0000fc00 00000000 fe000000     ................
  428980:	00fd00fe 00e500fa 0400fc00 fc000007     ................
  428990:	04070202 000004fc 000000f3 00000000     ................
  4289a0:	00000000 000000f8 00000000 00000000     ................
  4289b0:	fa000000 f700f5fd 000000fe 00090000     ................
  4289c0:	01fffef9 0000fc00 0000effe 00000000     ................
  4289d0:	00000000 09feee00 00000000 00000000     ................
  4289e0:	00000000 000000f7 00000000 07000000     ................
  4289f0:	00000200 000000fc 00000000 00000000     ................
  428a00:	00000000 02090000 00000001 00000000     ................
	...
  428a30:	000000f8 00000000 00000000 00000000     ................
  428a40:	00000000 02000000 fe070204 fe040000     ................
  428a50:	0602e1f9 00fd0004 00070008 00eb0007     ................
  428a60:	070007fd 000204fe 00fe0100 0012fc00     ................
  428a70:	00070012 07040309 f8000000 00000000     ................
  428a80:	0200fe01 02fcfdfc 0000fe00 0000f700     ................
	...
  428a98:	0000f100 00000000 00000000 00000000     ................
  428aa8:	00f40100 000000f2 1600fe00 0202fdfd     ................
  428ab8:	02fd00fe 00f40000 00000000 00000000     ................
  428ac8:	00ea0000 00000002 00000000 00000000     ................
  428ad8:	0d00f200 00f80000 eaf10007 0007fcf1     ................
  428ae8:	0300f100 00fd00fb 00000000 00000000     ................
  428af8:	06000000 0000e507 00000000 00000000     ................
  428b08:	000b0000 00000002 02020000 ff00fcfd     ................
  428b18:	0000feff 000000fe 00fe00fc fa00fcfb     ................
  428b28:	00fcf9f9 00fc00fc fe000000 00020000     ................
  428b38:	0100fe02 02000000 000000fe ff0202fe     ................
  428b48:	fc000000 0000ff00 01000000 00fe0300     ................
  428b58:	00fc00fd 0700fe00 00fe0000 00000000     ................
  428b68:	fefe01ff 00fe0000 000000fe 00000000     ................
  428b78:	ffff0000 00fdfe00 00000000 fe000001     ................
  428b88:	fefefe00 00000000 00000000 0000ff00     ................
  428b98:	fdfe0000 f900fd00 0004f9fe 0402fc00     ................
  428ba8:	fffa0006 f5ff00fd f402fe02 01000002     ................
  428bb8:	fef400f4 f500feed 00060400 00000003     ................
  428bc8:	fc000000 00f900fd 00fe0000 00fe0000     ................
  428bd8:	00000000 ff00ffff 000000fd 00000000     ................
  428be8:	fe00fefe 0000fefd 000000fe 00000000     ................
  428bf8:	00000000 fd00fefe fc00fe00 fd000002     ................
  428c08:	00020201 00000000 0000fe00 02000000     ................
  428c18:	00fe0000 00fdfefe 00000000 00020000     ................
  428c28:	000000fe 00fdfe00 fe0700fc 0000f901     ................
  428c38:	f7f4f506 fe0002fc fc00fcf1 fc03fc00     ................
  428c48:	00fa00f2 02ff0100 000200fe f500f7f9     ................
  428c58:	f9fbfbfb fc00fafd 010001fa 0000fe00     ................
  428c68:	02000200 00000000 00000000 fe000000     ................
  428c78:	ff00ff00 fbfc00fe f900fffb 00000000     ................
  428c88:	00fe0000 01000000 000000ff 00000002     ................
  428c98:	00000000 00000b00 00000000 00000002     ................
  428ca8:	000000fe 00000000 00000000 000200fc     ................
	...
  428cc4:	000000fe 000000fc 00f9f500 f5fd0000     ................
  428cd4:	02fe0000 0000fa00 00000000 00000000     ................
  428ce4:	fc0000fc 00000000 00000000 00000000     ................
  428cf4:	00fc0002 03000000 fcfc0200 fdfefe00     ................
  428d04:	00000000 00f90000 fefd00fe f9fafb00     ................
  428d14:	00fc00fe 000000f9 00001200 fd000001     ................
  428d24:	f6000200 00000000 07fceb00 00f7fe07     ................
  428d34:	f500fd02 f002fdff 030003fe f9f8fdf8     ................
  428d44:	f30000f7 00000d00 000000ff fafeffff     ................
  428d54:	00eb00f9 00000000 00000000 00000001     ................
	...
  428d70:	ff00fe00 0000fdfe 00fe00fc 00000000     ................
	...
  428d88:	00ff0000 040000fc fb0003ff fafffe02     ................
  428d98:	fefd00fe fcfd00fe fffe0000 00fdfcfe     ................
  428da8:	0200fe00 00fb00fe 00fc0000 fcfc00fc     ................
  428db8:	00000002 00000000 0002fc00 fdfe00fd     ................
  428dc8:	fefefef9 fffdfeff 00000000 fefefe00     ................
  428dd8:	00000000 fe00fe03 fe000000 fdfefefd     ................
  428de8:	090200fe 00fa00ff fe0004fe 0003fdf7     ................
  428df8:	02fcf500 fe0002fc fd00f9fe fc000001     ................
  428e08:	02000000 00fcfc02 fefdfefc 01fc00fe     ................
  428e18:	0007fcfc 00000000 00000000 00000002     ................
	...
  428e3c:	000000fc 00000000 00000000 00000000     ................
	...
  428e68:	000000fe 00000000 00000000 00000000     ................
	...
  428e84:	fefe0000 00000000 00000000 00000000     ................
  428e94:	fd0000fd fefe0000 00000000 000000fe     ................
  428ea4:	0000ff00 fe000000 00000000 00fc00fd     ................
  428eb4:	00f90000 0004fb02 0000f5fe f700fefb     ................
  428ec4:	0000fafa f7f7fef6 00fa00f5 00fd0f02     ................
  428ed4:	fefffefb f8fcfafc 00fefbf7 0100fe00     ................
  428ee4:	fef00000 f8fb0507 00f90100 04fefef5     ................
  428ef4:	0001fdeb f4fdf100 0000f0fe 010d00f0     ................
  428f04:	0000fe00 feff0000 f100fef7 00000000     ................
  428f14:	00fe00f9 00f5faff f9fdff00 00fe00fe     ................
  428f24:	f6000000 fef9f9fe fcfefafc f9fefc00     ................
  428f34:	fcfd00fd 0100fcfe 00f9fe00 00fc0004     ................
  428f44:	03000000 09fc0200 fdfefe00 00000000     ................
  428f54:	00f90000 fefd00fe f9fafb00 02fc00fe     ................
  428f64:	00000009 00001200 fd000001 00000200     ................
	...
  428f80:	0000fcfe ff000000 fe000000 fc0000fe     ................
  428f90:	fc0000fe 00ff0400 00000000 00000100     ................
  428fa0:	04030000 f900fe02 f90700fc 09fcfcf9     ................
  428fb0:	feed0204 fe00fe04 00f8fe02 fefd02fe     ................
  428fc0:	0000fef9 fa000407 06fdf400 fd01f7fd     ................
  428fd0:	09fef9f9 00fd0002 070200fa faf7f8fb     ................
  428fe0:	f0010007 fefc02fe f8fb00fb 00fefdfd     ................
  428ff0:	fefbfb00 fe050700 fdf400f4 fff3f800     ................
  429000:	faf9fcf9 fd000006 00fefc00 0400fcfe     ................
  429010:	000002f9 fbfe00f4 faf9fefc f900fbf9     ................
  429020:	f9fcfbfe 010000fe f900fc0b fcfe00fe     ................
  429030:	f7fafafb 0004fcfd fdf500fd f8f90401     ................
  429040:	fe07f9fc 04fceb01 00f8fcfb fefdf7f9     ................
  429050:	f9fbfefe 070000ff 00f1fe06 f705fbf3     ................
  429060:	f7f8fcf1 0004f9f5 fd000000 fd020000     ................
  429070:	04fc0204 fff90000 0100ff00 0000fe01     ................
  429080:	00000000 000000fe 00070200 0000fd00     ................
  429090:	fefe0000 000000fd 00000201 00020000     ................
  4290a0:	000900fe fd010104 00000400 00000200     ................
	...
  4290b8:	06000700 00000000 00000000 00000000     ................
  4290c8:	00f30000 070004fe 03160000 0202fcfc     ................
  4290d8:	00f501fe 00f30b00 00000000 00000000     ................
  4290e8:	09f10000 0000001f 00000000 00000000     ................
  4290f8:	0000f300 00000000 00000000 00000000     ................
	...
  429114:	fc0000fc 000000fe 00000000 00000000     ................
	...
  42912c:	00fa00fe 00000100 fefc1d02 02fa0607     ................
  42913c:	02020000 000000fd 00000000 00000000     ................
  42914c:	000006e3 00000000 00000000 00000000     ................
  42915c:	fa000000 fa000000 00000000 0000fffb     ................
  42916c:	fd00fb00 0000f500 00000000 00000000     ................
  42917c:	0000f100 00010000 00000000 0000fe00     ................
  42918c:	00fd00fc 000000fa 00fd02fc fbfefa00     ................
  42919c:	00fa0000 00f500fe ee0000fe f8fef7fc     ................
  4291ac:	00f10000 0000fffa 00000000 fcfd0000     ................
  4291bc:	0000fcfe 00fb0000 04fe03fb fefbfe00     ................
  4291cc:	fd00fcfc fa02feff 000000ff 00fdfeec     ................
  4291dc:	f5fe00fb fe0000fe 000000fe fe000200     ................
  4291ec:	0004fefc 00000000 00000000 00000000     ................
	...
  429218:	00030000 00000000 fe00fb00 fc000000     ................
  429228:	00000002 00fcfefa fe00fa00 0000f500     ................
  429238:	00ea0000 00f5f8fc fe00f100 000000fd     ................
  429248:	00000000 fffdfe00 000001fd 0700fd04     ................
  429258:	f9fefe0b 05040b03 030903fa 00060506     ................
	...
  429270:	0b0e0000 fe00fefc 00120a12 00020000     ................
  429280:	00000800 000000fc 00000000 00fe0000     ................
  429290:	00000000 03000000 00000000 f7fefded     ................
  4292a0:	f10000f5 00000000 00000000 00000000     ................
  4292b0:	00000000 0000fc00 00000000 fe000000     ................
	...
  4292c8:	00000003 fefded00 0000f5f7 000000f7     ................
	...
  4292e8:	000000fe fe0002fb f9020402 02fe0000     ................
  4292f8:	00000200 00fa0000 00fcfefe 0e00f7fe     ................
  429308:	fefb00fe 00fcfe00 fdfcfafe fc000000     ................
	...
  429320:	0000fe00 00000000 00030000 ed000000     ................
  429330:	f5f7fefd 00f10000 00000000 00000b00     ................
	...
  429348:	fdf900fc fefe07fe 01ff01f7 0500fafe     ................
  429358:	02010200 00fdf7fb f7fafcf7 fcfc00f7     ................
  429368:	fefefdfd fe00fefd 030003ff 000700fe     ................
	...
  429380:	fe000000 0000fefe 00ff00fa 000000fc     ................
	...
  429398:	000000f3 00000000 00000000 fd00fefe     ................
  4293a8:	00000000 fc0000fe fc0002fe fa00fefc     ................
  4293b8:	fdfefbfe 0000fc00 00000000 00000000     ................
  4293c8:	0700f100 00fc0000 fd000000 0000fe00     ................
  4293d8:	fe0000ff 0000fb00 f9f9fd09 00020202     ................
  4293e8:	020302fa fe070207 f70000fa faf90000     ................
  4293f8:	00fc0000 fd00fcfd fe00fd00 f9fe0003     ................
  429408:	000008fe 00fc00fe 00fb0300 0002fe02     ................
  429418:	fe00f900 02fe00ff 000000fe 00fbfdf7     ................
  429428:	f50000f9 00fe0800 000100fc f9fe00fe     ................
  429438:	0002fe00 fe000000 fd020000 fd000001     ................
  429448:	00fd00fe 00000000 00000000 00000000     ................
  429458:	00000000 000500f2 0000fe00 00000000     ................
  429468:	0000fefe 05000400 00000000 01f3f200     ................
  429478:	f704070a 08000902 00000400 00000000     ................
  429488:	00000000 00000c00 00000000 00000000     ................
	...

004294a0 <kern_classes>:
  4294a0:	004288f0 004294b0 0042954c 0000313d     ..B...B.L.B.=1..

004294b0 <kern_left_class_mapping>:
  4294b0:	02010000 05040300 08070602 0a090a09     ................
  4294c0:	0d000c0b 11100f0e 140c1312 00000014     ................
  4294d0:	18171615 1b1a1619 1e1d1d1c 1d1d201f     ............. ..
  4294e0:	23222116 251e2403 28272625 002b2a29     .!"#.$.%%&'()*+.
  4294f0:	2e2d002c 3231302f 34342d33 2d2d3035     ,.-./0123-4450--
  429500:	37362e2e 3a333938 3c3a3b3a 09000029     ..67893::;:<)...
  429510:	0000093d 00000000 00000000 00000000     =...............
	...

0042954c <kern_right_class_mapping>:
  42954c:	02010000 05040300 08070602 0a090a09     ................
  42955c:	0e0d0c0b 0c11100f 15141312 00000015     ................
  42956c:	19181716 19191917 1a191917 19191919     ................
  42957c:	19171917 1d1c1b03 201f1e1d 00232221     ........... !"#.
  42958c:	26250024 00272727 29282627 2a2a2626     $.%&'''.'&()&&**
  42959c:	2a272a27 2e2d2c2b 302e2f2e 09230000     '*'*+,-../.0..#.
  4295ac:	00000931 00000000 00000000 00000000     1...............
	...

004295e8 <unicode_list_1>:
  4295e8:	1f720000 ef58ef51 ef5cef5b ef61ef5d     ..r.Q.X.[.\.].a.
  4295f8:	ef65ef63 ef6cef69 ef76ef71 ef78ef77     c.e.i.l.q.v.w.x.
  429608:	ef98ef8e ef9cef9b efa1ef9d efa3efa2     ................
  429618:	efb7efa4 efbeefb8 efc1efc0 efc7efc4     ................
  429628:	efc9efc8 efe3efcb f014efe5 f017f015     ................
  429638:	f03af037 f06cf043 f0abf074 f190f13b     7.:.C.l.t...;...
  429648:	f192f191 f194f193 f1e3f1d7 f254f23d     ............=.T.
  429658:	f712f4aa 0000f7f2 0000ffff              ............

00429664 <lv_anim_path_def>:
  429664:	00414a71 00000000 0000ffff              qJA.........

00429670 <hex.5775>:
  429670:	33323130 37363534 42413938 46454443     0123456789ABCDEF
  429680:	00000000                                ....

00429684 <sin0_90_table>:
  429684:	023c0000 06b30478 0b2808ee 0f990d61     ..<.x.....(.a...
  429694:	140611d0 186c163a 1ccb1a9d 21211ef7     ....:.l.......!!
  4296a4:	256c2348 29ac278e 2ddf2bc7 32032ff3     H#l%.'.).+.-./.2
  4296b4:	36183410 3a1c381c 3e0e3c17 41ec3fff     .4.6.8.:.<.>.?.A
  4296c4:	45b643d4 496a4793 4d084b3c 508d4ecd     .C.E.GjI<K.M.N.P
  4296d4:	53f95246 574b55a5 5a8258ea 5d9c5c13     FR.S.UKW.X.Z.\.]
  4296e4:	609a5f1f 6379620d 663964dd 68d9678d     ._.`.byc.d9f.g.h
  4296f4:	6b596a1d 6db76c8c 6ff36ed9 720c7104     .jYk.l.m.n.o.q.r
  429704:	7401730b 75d274ee 777f76ad 79067847     .s.t.t.u.v.wGx.y
  429714:	7a6779bb 7ba27b0a 7cb77c32 7da57d33     .ygz.{.{2|.|3}.}
  429724:	7e6c7e0d 7f0b7ec0 7f827f4b 7fd27faf     .~l~.~..K.......
  429734:	7ffa7feb 00007fff 2074754f 6d20666f     ........Out of m
  429744:	726f6d65 63202c79 74276e61 6c6c6120     emory, can't all
  429754:	7461636f 20612065 2077656e 66667562     ocate a new buff
  429764:	28207265 72636e69 65736165 756f7920     er (increase you
  429774:	564c2072 4d454d5f 5a49535f 65682f45     r LV_MEM_SIZE/he
  429784:	73207061 29657a69 00000000 66206f4e     ap size)....No f
  429794:	20656572 66667562 202e7265 72636e49     ree buffer. Incr
  4297a4:	65736165 5f564c20 5f4d454d 5f465542     ease LV_MEM_BUF_
  4297b4:	5f58414d 2e4d554e 00000000 3b2e2c20     MAX_NUM..... ,.;
  4297c4:	005f2d3a 0000ffff 00001084 000018c6     :-_.............
  4297d4:	008c80ef 625f766c 00006e74 635f766c     ....lv_btn..lv_c
  4297e4:	00746e6f 695f766c 0000676d 74786554     ont.lv_img..Text
  4297f4:	00000000 6c5f766c 6c656261 00000000     ....lv_label....
  429804:	0001c200 000000c0 00000800 00000000     ................
  429814:	0000ffff                                ....

00429818 <ecg>:
  429818:	0000050a 00000508 00000506 00000505     ................
  429828:	00000503 00000501 00000500 000004fe     ................
  429838:	000004fc 000004fb 000004f9 000004f8     ................
  429848:	000004f6 000004f5 000004f3 000004f2     ................
  429858:	000004f1 000004ef 000004ee 000004ed     ................
  429868:	000004eb 000004ea 000004e9 000004e7     ................
  429878:	000004e6 000004e5 000004e3 000004e2     ................
  429888:	000004e1 000004e0 000004df 000004de     ................
  429898:	000004dd 000004dc 000004db 000004da     ................
  4298a8:	000004d9 000004d8 000004d8 000004d7     ................
  4298b8:	000004d7 000004d6 000004d6 000004d5     ................
  4298c8:	000004d5 000004d5 000004d4 000004d4     ................
  4298d8:	000004d4 000004d4 000004d3 000004d3     ................
  4298e8:	000004d3 000004d3 000004d2 000004d2     ................
  4298f8:	000004d1 000004d1 000004d0 000004d0     ................
  429908:	000004cf 000004ce 000004cd 000004cc     ................
  429918:	000004cb 000004ca 000004c8 000004c7     ................
  429928:	000004c6 000004c4 000004c3 000004c2     ................
  429938:	000004c1 000004bf 000004be 000004bd     ................
  429948:	000004bc 000004bb 000004ba 000004b9     ................
  429958:	000004b8 000004b8 000004b7 000004b7     ................
  429968:	000004b6 000004b6 000004b6 000004b6     ................
  429978:	000004b6 000004b6 000004b6 000004b6     ................
  429988:	000004b6 000004b6 000004b6 000004b6     ................
  429998:	000004b6 000004b5 000004b5 000004b5     ................
  4299a8:	000004b5 000004b5 000004b4 000004b4     ................
  4299b8:	000004b3 000004b2 000004b2 000004b1     ................
  4299c8:	000004b0 000004af 000004ae 000004ad     ................
  4299d8:	000004ad 000004ab 000004aa 000004a9     ................
  4299e8:	000004a8 000004a7 000004a6 000004a5     ................
  4299f8:	000004a3 000004a2 000004a1 000004a0     ................
  429a08:	0000049f 0000049d 0000049c 0000049b     ................
  429a18:	0000049a 00000498 00000497 00000496     ................
  429a28:	00000495 00000493 00000492 00000491     ................
  429a38:	00000490 0000048e 0000048d 0000048c     ................
  429a48:	0000048b 0000048a 00000489 00000487     ................
  429a58:	00000486 00000485 00000484 00000483     ................
  429a68:	00000482 00000480 0000047f 0000047e     ............~...
  429a78:	0000047c 0000047b 00000479 00000478     |...{...y...x...
  429a88:	00000476 00000474 00000472 00000470     v...t...r...p...
  429a98:	0000046e 0000046c 00000469 00000467     n...l...i...g...
  429aa8:	00000464 00000462 0000045f 0000045c     d...b..._...\...
  429ab8:	00000459 00000456 00000453 00000450     Y...V...S...P...
  429ac8:	0000044d 00000449 00000446 00000443     M...I...F...C...
  429ad8:	0000043f 0000043c 00000438 00000435     ?...<...8...5...
  429ae8:	00000431 0000042e 0000042a 00000427     1.......*...'...
  429af8:	00000423 00000420 0000041c 00000418     #... ...........
  429b08:	00000415 00000411 0000040d 00000409     ................
  429b18:	00000405 00000401 000003fd 000003f9     ................
  429b28:	000003f5 000003f1 000003ec 000003e8     ................
  429b38:	000003e4 000003df 000003da 000003d6     ................
  429b48:	000003d1 000003cc 000003c7 000003c2     ................
  429b58:	000003bd 000003b8 000003b3 000003ad     ................
  429b68:	000003a8 000003a2 0000039d 00000397     ................
  429b78:	00000391 0000038b 00000385 0000037f     ................
  429b88:	00000379 00000373 0000036d 00000366     y...s...m...f...
  429b98:	00000360 00000359 00000353 0000034c     `...Y...S...L...
  429ba8:	00000346 0000033f 00000339 00000332     F...?...9...2...
  429bb8:	0000032b 00000325 0000031e 00000318     +...%...........
  429bc8:	00000311 0000030b 00000305 000002fe     ................
  429bd8:	000002f8 000002f2 000002ec 000002e6     ................
  429be8:	000002e1 000002db 000002d5 000002d0     ................
  429bf8:	000002ca 000002c5 000002bf 000002ba     ................
  429c08:	000002b5 000002af 000002aa 000002a5     ................
  429c18:	000002a0 0000029a 00000295 00000290     ................
  429c28:	0000028a 00000285 00000280 0000027a     ............z...
  429c38:	00000275 00000270 0000026a 00000265     u...p...j...e...
  429c48:	0000025f 0000025a 00000254 0000024e     _...Z...T...N...
  429c58:	00000249 00000243 0000023d 00000237     I...C...=...7...
  429c68:	00000232 0000022c 00000226 00000220     2...,...&... ...
  429c78:	0000021a 00000214 0000020e 00000208     ................
  429c88:	00000202 000001fc 000001f6 000001ef     ................
  429c98:	000001e9 000001e3 000001dd 000001d7     ................
  429ca8:	000001d0 000001ca 000001c4 000001be     ................
  429cb8:	000001b8 000001b2 000001ab 000001a5     ................
  429cc8:	0000019f 00000199 00000193 0000018d     ................
  429cd8:	00000187 00000182 0000017c 00000176     ........|...v...
  429ce8:	00000170 0000016b 00000165 00000160     p...k...e...`...
  429cf8:	0000015b 00000155 00000150 0000014b     [...U...P...K...
  429d08:	00000146 00000142 0000013d 00000138     F...B...=...8...
  429d18:	00000134 00000130 0000012c 00000128     4...0...,...(...
  429d28:	00000124 00000120 0000011c 00000119     $... ...........
  429d38:	00000115 00000112 0000010e 0000010a     ................
  429d48:	00000107 00000103 00000100 000000fc     ................
  429d58:	000000f8 000000f4 000000f0 000000ec     ................
  429d68:	000000e8 000000e3 000000df 000000da     ................
  429d78:	000000d5 000000d0 000000cb 000000c6     ................
  429d88:	000000c0 000000bb 000000b6 000000b0     ................
  429d98:	000000ab 000000a6 000000a1 0000009c     ................
  429da8:	00000097 00000093 0000008e 0000008a     ................
  429db8:	00000086 00000082 0000007e 0000007b     ........~...{...
  429dc8:	00000078 00000075 00000073 00000070     x...u...s...p...
  429dd8:	0000006e 0000006c 0000006a 00000068     n...l...j...h...
  429de8:	00000066 00000064 00000062 00000060     f...d...b...`...
  429df8:	0000005e 0000005d 0000005b 00000059     ^...]...[...Y...
  429e08:	00000057 00000055 00000052 00000050     W...U...R...P...
  429e18:	0000004e 0000004b 00000048 00000046     N...K...H...F...
  429e28:	00000043 00000040 0000003d 0000003b     C...@...=...;...
  429e38:	00000038 00000035 00000032 00000030     8...5...2...0...
  429e48:	0000002d 0000002b 00000029 00000026     -...+...)...&...
  429e58:	00000024 00000023 00000021 0000001f     $...#...!.......
  429e68:	0000001e 0000001d 0000001c 0000001b     ................
  429e78:	0000001a 00000019 00000019 00000018     ................
  429e88:	00000017 00000017 00000016 00000016     ................
  429e98:	00000015 00000015 00000014 00000013     ................
  429ea8:	00000012 00000012 00000011 0000000f     ................
  429eb8:	0000000e 0000000d 0000000c 0000000a     ................
  429ec8:	00000009 00000007 00000006 00000005     ................
  429ed8:	00000004 00000003 00000002 00000001     ................
	...
  429f00:	00000001 00000002 00000004 00000005     ................
  429f10:	00000007 00000009 0000000b 0000000e     ................
  429f20:	00000010 00000013 00000016 00000019     ................
  429f30:	0000001b 0000001e 00000021 00000024     ........!...$...
  429f40:	00000027 0000002a 0000002c 0000002f     '...*...,.../...
  429f50:	00000031 00000033 00000036 00000038     1...3...6...8...
  429f60:	00000039 0000003b 0000003d 0000003f     9...;...=...?...
  429f70:	00000040 00000042 00000043 00000045     @...B...C...E...
  429f80:	00000046 00000048 0000004a 0000004b     F...H...J...K...
  429f90:	0000004d 0000004f 00000051 00000053     M...O...Q...S...
  429fa0:	00000056 00000058 0000005b 0000005d     V...X...[...]...
  429fb0:	00000060 00000063 00000066 00000069     `...c...f...i...
  429fc0:	0000006c 00000070 00000073 00000076     l...p...s...v...
  429fd0:	00000079 0000007c 00000080 00000083     y...|...........
  429fe0:	00000086 00000089 0000008c 0000008f     ................
  429ff0:	00000091 00000094 00000097 00000099     ................
  42a000:	0000009b 0000009e 000000a0 000000a2     ................
  42a010:	000000a4 000000a6 000000a8 000000aa     ................
  42a020:	000000ac 000000ae 000000b0 000000b3     ................
  42a030:	000000b5 000000b7 000000ba 000000bc     ................
  42a040:	000000bf 000000c1 000000c4 000000c7     ................
  42a050:	000000ca 000000cd 000000d0 000000d3     ................
  42a060:	000000d7 000000da 000000dd 000000e1     ................
  42a070:	000000e4 000000e8 000000eb 000000ef     ................
  42a080:	000000f2 000000f6 000000f9 000000fc     ................
  42a090:	00000100 00000103 00000106 00000109     ................
  42a0a0:	0000010d 00000110 00000113 00000116     ................
  42a0b0:	00000119 0000011c 00000120 00000123     ........ ...#...
  42a0c0:	00000126 0000012a 0000012d 00000130     &...*...-...0...
  42a0d0:	00000134 00000138 0000013b 0000013f     4...8...;...?...
  42a0e0:	00000143 00000147 0000014b 0000014f     C...G...K...O...
  42a0f0:	00000154 00000158 0000015d 00000161     T...X...]...a...
  42a100:	00000166 0000016b 0000016f 00000174     f...k...o...t...
  42a110:	00000179 0000017d 00000182 00000187     y...}...........
  42a120:	0000018b 00000190 00000195 00000199     ................
  42a130:	0000019e 000001a2 000001a6 000001aa     ................
  42a140:	000001ae 000001b3 000001b7 000001bb     ................
  42a150:	000001bf 000001c3 000001c7 000001cb     ................
  42a160:	000001cf 000001d3 000001d7 000001db     ................
  42a170:	000001df 000001e3 000001e8 000001ec     ................
  42a180:	000001f0 000001f5 000001fa 000001ff     ................
  42a190:	00000203 00000208 0000020d 00000212     ................
  42a1a0:	00000217 0000021d 00000222 00000227     ........"...'...
  42a1b0:	0000022c 00000231 00000236 0000023c     ,...1...6...<...
  42a1c0:	00000241 00000246 0000024b 00000250     A...F...K...P...
  42a1d0:	00000254 00000259 0000025e 00000262     T...Y...^...b...
  42a1e0:	00000267 0000026b 00000270 00000274     g...k...p...t...
  42a1f0:	00000278 0000027d 00000281 00000285     x...}...........
  42a200:	00000289 0000028e 00000292 00000296     ................
  42a210:	0000029a 0000029f 000002a3 000002a7     ................
  42a220:	000002ac 000002b0 000002b5 000002b9     ................
  42a230:	000002be 000002c3 000002c7 000002cc     ................
  42a240:	000002d1 000002d6 000002db 000002e0     ................
  42a250:	000002e5 000002ea 000002ef 000002f4     ................
  42a260:	000002f9 000002fe 00000303 00000309     ................
  42a270:	0000030e 00000313 00000318 0000031d     ................
  42a280:	00000323 00000328 0000032d 00000333     #...(...-...3...
  42a290:	00000338 0000033d 00000343 00000348     8...=...C...H...
  42a2a0:	0000034d 00000353 00000358 0000035d     M...S...X...]...
  42a2b0:	00000363 00000368 0000036e 00000373     c...h...n...s...
  42a2c0:	00000379 0000037e 00000384 00000389     y...~...........
  42a2d0:	0000038f 00000394 0000039a 0000039f     ................
  42a2e0:	000003a5 000003aa 000003b0 000003b5     ................
  42a2f0:	000003bb 000003c0 000003c6 000003cb     ................
  42a300:	000003d1 000003d6 000003dc 000003e1     ................
  42a310:	000003e6 000003ec 000003f1 000003f7     ................
  42a320:	000003fc 00000401 00000407 0000040c     ................
  42a330:	00000411 00000416 0000041c 00000421     ............!...
  42a340:	00000426 0000042c 00000431 00000436     &...,...1...6...
  42a350:	0000043c 00000441 00000446 0000044c     <...A...F...L...
  42a360:	00000451 00000457 0000045c 00000462     Q...W...\...b...
  42a370:	00000467 0000046d 00000472 00000478     g...m...r...x...
  42a380:	0000047e 00000483 00000489 0000048f     ~...............
  42a390:	00000494 0000049a 000004a0 000004a6     ................
  42a3a0:	000004ab 000004b1 000004b7 000004bd     ................
  42a3b0:	000004c3 000004c8 000004ce 000004d4     ................
  42a3c0:	000004da 000004df 000004e5 000004eb     ................
  42a3d0:	000004f1 000004f7 000004fc 00000502     ................
  42a3e0:	00000508 0000050e 00000514 0000051a     ................
  42a3f0:	00000520 00000526 0000052c 00000532      ...&...,...2...
  42a400:	00000538 0000053e 00000544 0000054b     8...>...D...K...
  42a410:	00000551 00000557 0000055d 00000564     Q...W...]...d...
  42a420:	0000056a 00000571 00000577 0000057e     j...q...w...~...
  42a430:	00000584 0000058b 00000592 00000598     ................
  42a440:	0000059f 000005a6 000005ac 000005b3     ................
  42a450:	000005ba 000005c1 000005c8 000005cf     ................
  42a460:	000005d6 000005dd 000005e4 000005ec     ................
  42a470:	000005f3 000005fa 00000601 00000609     ................
  42a480:	00000610 00000617 0000061f 00000626     ............&...
  42a490:	0000062e 00000635 0000063d 00000644     ....5...=...D...
  42a4a0:	0000064c 00000653 0000065b 00000663     L...S...[...c...
  42a4b0:	0000066a 00000672 0000067a 00000681     j...r...z.......
  42a4c0:	00000689 00000691 00000699 000006a1     ................
  42a4d0:	000006a9 000006b1 000006b9 000006c1     ................
  42a4e0:	000006c9 000006d1 000006d9 000006e1     ................
  42a4f0:	000006ea 000006f2 000006fb 00000703     ................
  42a500:	0000070c 00000715 0000071d 00000726     ............&...
  42a510:	0000072f 00000738 00000740 00000749     /...8...@...I...
  42a520:	00000752 0000075b 00000764 0000076d     R...[...d...m...
  42a530:	00000775 0000077e 00000787 00000790     u...~...........
  42a540:	00000798 000007a1 000007aa 000007b2     ................
  42a550:	000007bb 000007c3 000007cc 000007d4     ................
  42a560:	000007dc 000007e5 000007ed 000007f6     ................
  42a570:	000007fe 00000806 0000080f 00000817     ................
  42a580:	00000820 00000829 00000831 0000083a      ...)...1...:...
  42a590:	00000843 0000084c 00000855 0000085e     C...L...U...^...
  42a5a0:	00000867 00000870 00000879 00000883     g...p...y.......
  42a5b0:	0000088c 00000895 0000089e 000008a7     ................
  42a5c0:	000008b0 000008b9 000008c2 000008cb     ................
  42a5d0:	000008d3 000008dc 000008e4 000008ec     ................
  42a5e0:	000008f4 000008fc 00000903 0000090a     ................
  42a5f0:	00000911 00000918 0000091f 00000925     ............%...
  42a600:	0000092b 00000931 00000937 0000093d     +...1...7...=...
  42a610:	00000943 00000949 0000094e 00000954     C...I...N...T...
  42a620:	00000959 0000095f 00000964 0000096a     Y..._...d...j...
  42a630:	0000096f 00000974 0000097a 0000097f     o...t...z.......
  42a640:	00000985 0000098b 00000990 00000996     ................
  42a650:	0000099b 000009a1 000009a6 000009ac     ................
  42a660:	000009b1 000009b7 000009bc 000009c1     ................
  42a670:	000009c6 000009cb 000009cf 000009d4     ................
  42a680:	000009d8 000009dc 000009e0 000009e4     ................
  42a690:	000009e8 000009eb 000009ee 000009f1     ................
  42a6a0:	000009f4 000009f7 000009f9 000009fb     ................
  42a6b0:	000009fe 00000a00 00000a02 00000a03     ................
  42a6c0:	00000a05 00000a07 00000a08 00000a0a     ................
  42a6d0:	00000a0b 00000a0c 00000a0d 00000a0e     ................
  42a6e0:	00000a0f 00000a10 00000a11 00000a12     ................
  42a6f0:	00000a13 00000a14 00000a14 00000a15     ................
  42a700:	00000a16 00000a16 00000a16 00000a17     ................
  42a710:	00000a17 00000a17 00000a17 00000a17     ................
  42a720:	00000a16 00000a16 00000a16 00000a15     ................
  42a730:	00000a15 00000a14 00000a13 00000a12     ................
  42a740:	00000a11 00000a10 00000a0f 00000a0e     ................
  42a750:	00000a0c 00000a0b 00000a09 00000a08     ................
  42a760:	00000a06 00000a04 00000a02 00000a01     ................
  42a770:	000009ff 000009fc 000009fa 000009f8     ................
  42a780:	000009f6 000009f4 000009f1 000009ef     ................
  42a790:	000009ec 000009ea 000009e7 000009e5     ................
  42a7a0:	000009e2 000009e0 000009dd 000009db     ................
  42a7b0:	000009d8 000009d6 000009d3 000009d1     ................
  42a7c0:	000009ce 000009cc 000009c9 000009c7     ................
  42a7d0:	000009c4 000009c2 000009c0 000009be     ................
  42a7e0:	000009bc 000009b9 000009b7 000009b5     ................
  42a7f0:	000009b3 000009b1 000009af 000009ad     ................
  42a800:	000009ab 000009a9 000009a7 000009a5     ................
  42a810:	000009a3 000009a1 0000099f 0000099d     ................
  42a820:	0000099b 00000999 00000997 00000995     ................
  42a830:	00000993 00000991 0000098f 0000098d     ................
  42a840:	0000098b 00000989 00000987 00000985     ................
  42a850:	00000983 00000981 0000097f 0000097d     ............}...
  42a860:	0000097b 00000979 00000977 00000975     {...y...w...u...
  42a870:	00000973 00000971 0000096f 0000096d     s...q...o...m...
  42a880:	0000096b 00000969 00000967 00000965     k...i...g...e...
  42a890:	00000963 00000961 0000095f 0000095d     c...a..._...]...
  42a8a0:	0000095c 0000095a 00000958 00000956     \...Z...X...V...
  42a8b0:	00000955 00000953 00000952 00000950     U...S...R...P...
  42a8c0:	0000094f 0000094d 0000094c 0000094a     O...M...L...J...
  42a8d0:	00000949 00000948 00000947 00000946     I...H...G...F...
  42a8e0:	00000945 00000943 00000942 00000941     E...C...B...A...
  42a8f0:	00000941 00000940 0000093f 0000093e     A...@...?...>...
  42a900:	0000093e 0000093d 0000093d 0000093c     >...=...=...<...
  42a910:	0000093c 0000093b 0000093b 0000093a     <...;...;...:...
  42a920:	00000939 00000938 00000937 00000936     9...8...7...6...
  42a930:	00000935 00000934 00000932 00000930     5...4...2...0...
  42a940:	0000092e 0000092c 00000929 00000927     ....,...)...'...
  42a950:	00000924 00000920 0000091d 00000919     $... ...........
  42a960:	00000915 00000910 0000090b 00000906     ................
  42a970:	00000901 000008fc 000008f6 000008f0     ................
  42a980:	000008ea 000008e4 000008de 000008d8     ................
  42a990:	000008d1 000008cb 000008c5 000008be     ................
  42a9a0:	000008b8 000008b2 000008ac 000008a6     ................
  42a9b0:	000008a0 0000089a 00000894 0000088f     ................
  42a9c0:	00000889 00000884 0000087e 00000879     ........~...y...
  42a9d0:	00000873 0000086d 00000868 00000862     s...m...h...b...
  42a9e0:	0000085c 00000856 00000850 0000084a     \...V...P...J...
  42a9f0:	00000844 0000083d 00000837 00000830     D...=...7...0...
  42aa00:	00000829 00000821 0000081a 00000812     )...!...........
  42aa10:	0000080a 00000802 000007fa 000007f2     ................
  42aa20:	000007eb 000007e4 000007dd 000007d7     ................
  42aa30:	000007d2 000007cd 000007c9 000007c6     ................
  42aa40:	000007c3 000007c2 000007c2 000007c3     ................
  42aa50:	000007c5 000007c8 000007cd 000007d3     ................
  42aa60:	000007da 000007e2 000007eb 000007f6     ................
  42aa70:	00000802 0000080f 0000081e 0000082e     ................
  42aa80:	0000083f 00000851 00000865 0000087a     ?...Q...e...z...
  42aa90:	00000890 000008a7 000008c0 000008da     ................
  42aaa0:	000008f4 00000910 0000092d 0000094c     ........-...L...
  42aab0:	0000096b 0000098b 000009ad 000009cf     k...............
  42aac0:	000009f3 00000a17 00000a3c 00000a63     ........<...c...
  42aad0:	00000a8a 00000ab2 00000adb 00000b05     ................
  42aae0:	00000b2f 00000b5b 00000b86 00000bb3     /...[...........
  42aaf0:	00000be0 00000c0d 00000c3b 00000c69     ........;...i...
  42ab00:	00000c97 00000cc6 00000cf5 00000d23     ............#...
  42ab10:	00000d51 00000d80 00000dad 00000ddb     Q...............
  42ab20:	00000e07 00000e33 00000e5e 00000e87     ....3...^.......
  42ab30:	00000eaf 00000ed5 00000ef9 00000f1c     ................
  42ab40:	00000f3c 00000f5a 00000f76 00000f8f     <...Z...v.......
  42ab50:	00000fa6 00000fbb 00000fcd 00000fdc     ................
  42ab60:	00000fe8 00000ff2 00000ff9 00000ffd     ................
  42ab70:	00000fff 00000ffd 00000ff9 00000ff1     ................
  42ab80:	00000fe8 00000fdb 00000fcb 00000fb9     ................
  42ab90:	00000fa4 00000f8d 00000f73 00000f57     ........s...W...
  42aba0:	00000f38 00000f17 00000ef3 00000ecd     8...............
  42abb0:	00000ea6 00000e7c 00000e50 00000e23     ....|...P...#...
  42abc0:	00000df3 00000dc3 00000d91 00000d5d     ............]...
  42abd0:	00000d29 00000cf4 00000cbd 00000c86     )...............
  42abe0:	00000c4e 00000c16 00000bdd 00000ba4     N...............
  42abf0:	00000b6b 00000b31 00000af8 00000ac0     k...1...........
  42ac00:	00000a87 00000a4f 00000a18 000009e1     ....O...........
  42ac10:	000009ab 00000976 00000942 0000090e     ....v...B.......
  42ac20:	000008dc 000008ac 0000087c 0000084e     ........|...N...
  42ac30:	00000821 000007f6 000007cc 000007a4     !...............
  42ac40:	0000077d 00000758 00000734 00000712     }...X...4.......
  42ac50:	000006f1 000006d2 000006b4 00000698     ................
  42ac60:	0000067e 00000664 0000064d 00000636     ~...d...M...6...
  42ac70:	00000621 0000060e 000005fb 000005ea     !...............
  42ac80:	000005da 000005cc 000005be 000005b2     ................
  42ac90:	000005a7 0000059e 00000595 0000058e     ................
  42aca0:	00000588 00000583 0000057e 0000057b     ........~...{...
  42acb0:	00000579 00000577 00000576 00000576     y...w...v...v...
  42acc0:	00000576 00000577 00000579 0000057b     v...w...y...{...
  42acd0:	0000057e 00000582 00000585 0000058a     ~...............
  42ace0:	0000058e 00000593 00000598 0000059e     ................
  42acf0:	000005a3 000005a9 000005af 000005b5     ................
  42ad00:	000005bb 000005c1 000005c7 000005cd     ................
  42ad10:	000005d3 000005d9 000005df 000005e5     ................
  42ad20:	000005eb 000005f0 000005f6 000005fb     ................
  42ad30:	00000600 00000604 00000609 0000060d     ................
  42ad40:	00000611 00000615 00000618 0000061c     ................
  42ad50:	0000061f 00000621 00000624 00000626     ....!...$...&...
  42ad60:	00000628 00000629 0000062b 0000062c     (...)...+...,...
  42ad70:	0000062d 0000062d 0000062e 0000062e     -...-...........
  42ad80:	0000062e 0000062e 0000062d 0000062c     ........-...,...
  42ad90:	0000062c 0000062b 0000062a 00000628     ,...+...*...(...
  42ada0:	00000627 00000625 00000623 00000621     '...%...#...!...
  42adb0:	0000061f 0000061d 0000061b 00000618     ................
  42adc0:	00000616 00000613 00000610 0000060d     ................
  42add0:	0000060a 00000606 00000603 000005ff     ................
  42ade0:	000005fc 000005f8 000005f4 000005f1     ................
  42adf0:	000005ed 000005e9 000005e5 000005e0     ................
  42ae00:	000005dc 000005d8 000005d4 000005d0     ................
  42ae10:	000005cb 000005c7 000005c3 000005be     ................
  42ae20:	000005ba 000005b5 000005b1 000005ad     ................
  42ae30:	000005a8 000005a4 0000059f 0000059b     ................
  42ae40:	00000597 00000592 0000058e 0000058a     ................
  42ae50:	00000586 00000582 0000057e 0000057a     ........~...z...
  42ae60:	00000576 00000572 0000056e 0000056a     v...r...n...j...
  42ae70:	00000567 00000563 0000055f 0000055c     g...c..._...\...
  42ae80:	00000558 00000555 00000551 0000054e     X...U...Q...N...
  42ae90:	0000054a 00000547 00000544 00000540     J...G...D...@...
  42aea0:	0000053d 0000053a 00000536 00000533     =...:...6...3...
  42aeb0:	0000052f 0000052c 00000529 00000525     /...,...)...%...
  42aec0:	00000522 0000051e 0000051b 00000517     "...............
  42aed0:	00000514 00000510 0000050d 00000509     ................

0042aee0 <g_ecgSize>:
  42aee0:	000005b2 66666623 20666666 414d2020     ....#ffffff   MA
  42aef0:	204f4352 00002320 30303023 5b203030     RCO  #..#00000 [
  42af00:	80ef2020 7c202091 00000023 0044434c       ...  |#...LCD.
  42af10:	6c696146 74206465 7263206f 65746165     Failed to create
  42af20:	64636c20 73617420 000a0d6b 32535041      lcd task...APS2
  42af30:	00000000 6c696146 74206465 7263206f     ....Failed to cr
  42af40:	65746165 53504120 73617420 000a0d6b     eate APS task...
  42af50:	6e69616d 00000000 6c696146 74206465     main....Failed t
  42af60:	7263206f 65746165 69614d20 6174206e     o create Main ta
  42af70:	0a0d6b73 00000000 63696c43 0a64656b     sk......Clicked.
  42af80:	00000000 67676f54 0a64656c 00000000     ....Toggled.....
  42af90:	203a786f 0a206425 00000000 63617473     ox: %d .....stac
  42afa0:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  42afb0:	00000a0d                                ....

0042afb4 <sinTable_f32>:
  42afb4:	00000000 3c490e92 3cc90ab1 3d16c32b     ......I<...<+..=
  42afc4:	3d48fb2e 3d7b2b75 3d96a904 3dafb680     ..H=u+{=...=...=
  42afd4:	3dc8bd36 3de1bc2f 3dfab273 3e09cf87     6..=/..=s..=...>
  42afe4:	3e164083 3e22abb5 3e2f10a2 3e3b6ecf     .@.>..">../>.n;>
  42aff4:	3e47c5c2 3e541501 3e605c13 3e6c9a7f     ..G>..T>.\`>..l>
  42b004:	3e78cfcc 3e827dc0 3e888e93 3e8e9a22     ..x>.}.>...>"..>
  42b014:	3e94a032 3e9aa086 3ea09ae5 3ea68f12     2..>...>...>...>
  42b024:	3eac7cd4 3eb263ef 3eb8442a 3ebe1d49     .|.>.c.>*D.>I..>
  42b034:	3ec3ef15 3ec9b953 3ecf7bca 3ed53641     ...>S..>.{.>A6.>
  42b044:	3edae880 3ee0924f 3ee63375 3eebcbbb     ...>O..>u3.>...>
  42b054:	3ef15aea 3ef6e0cb 3efc5d27 3f00e7e4     .Z.>...>'].>...?
  42b064:	3f039c3d 3f064b82 3f08f59b 3f0b9a6b     =..?.K.?...?k..?
  42b074:	3f0e39da 3f10d3cd 3f13682a 3f15f6d9     .9.?...?*h.?...?
  42b084:	3f187fc0 3f1b02c6 3f1d7fd1 3f1ff6cb     ...?...?...?...?
  42b094:	3f226799 3f24d225 3f273656 3f299415     .g"?%.$?V6'?..)?
  42b0a4:	3f2beb4a 3f2e3bde 3f3085bb 3f32c8c9     J.+?.;.?..0?..2?
  42b0b4:	3f3504f3 3f373a23 3f396842 3f3b8f3b     ..5?#:7?Bh9?;.;?
  42b0c4:	3f3daef9 3f3fc767 3f41d870 3f43e201     ..=?g.??p.A?..C?
  42b0d4:	3f45e403 3f47de65 3f49d112 3f4bbbf8     ..E?e.G?..I?..K?
  42b0e4:	3f4d9f02 3f4f7a20 3f514d3d 3f531849     ..M? zO?=MQ?I.S?
  42b0f4:	3f54db31 3f5695e5 3f584853 3f59f26a     1.T?..V?SHX?j.Y?
  42b104:	3f5b941a 3f5d2d53 3f5ebe05 3f604621     ..[?S-]?..^?!F`?
  42b114:	3f61c597 3f633c5a 3f64aa59 3f660f88     ..a?Z<c?Y.d?..f?
  42b124:	3f676bd8 3f68bf3c 3f6a09a7 3f6b4b0c     .kg?<.h?..j?.Kk?
  42b134:	3f6c835e 3f6db293 3f6ed89e 3f6ff573     ^.l?..m?..n?s.o?
  42b144:	3f710908 3f721352 3f731447 3f740bdd     ..q?R.r?G.s?..t?
  42b154:	3f74fa0b 3f75dec6 3f76ba07 3f778bc5     ..t?..u?..v?..w?
  42b164:	3f7853f8 3f791298 3f79c79d 3f7a7302     .Sx?..y?..y?.sz?
  42b174:	3f7b14be 3f7baccd 3f7c3b28 3f7cbfc9     ..{?..{?(;|?..|?
  42b184:	3f7d3aac 3f7dabcc 3f7e1323 3f7e70b0     .:}?..}?#.~?.p~?
  42b194:	3f7ec46d 3f7f0e58 3f7f4e6d 3f7f84ab     m.~?X..?mN.?...?
  42b1a4:	3f7fb10f 3f7fd397 3f7fec43 3f7ffb11     ...?...?C..?...?
  42b1b4:	3f800000 3f7ffb11 3f7fec43 3f7fd397     ...?...?C..?...?
  42b1c4:	3f7fb10f 3f7f84ab 3f7f4e6d 3f7f0e58     ...?...?mN.?X..?
  42b1d4:	3f7ec46d 3f7e70b0 3f7e1323 3f7dabcc     m.~?.p~?#.~?..}?
  42b1e4:	3f7d3aac 3f7cbfc9 3f7c3b28 3f7baccd     .:}?..|?(;|?..{?
  42b1f4:	3f7b14be 3f7a7302 3f79c79d 3f791298     ..{?.sz?..y?..y?
  42b204:	3f7853f8 3f778bc5 3f76ba07 3f75dec6     .Sx?..w?..v?..u?
  42b214:	3f74fa0b 3f740bdd 3f731447 3f721352     ..t?..t?G.s?R.r?
  42b224:	3f710908 3f6ff573 3f6ed89e 3f6db293     ..q?s.o?..n?..m?
  42b234:	3f6c835e 3f6b4b0c 3f6a09a7 3f68bf3c     ^.l?.Kk?..j?<.h?
  42b244:	3f676bd8 3f660f88 3f64aa59 3f633c5a     .kg?..f?Y.d?Z<c?
  42b254:	3f61c597 3f604621 3f5ebe05 3f5d2d53     ..a?!F`?..^?S-]?
  42b264:	3f5b941a 3f59f26a 3f584853 3f5695e5     ..[?j.Y?SHX?..V?
  42b274:	3f54db31 3f531849 3f514d3d 3f4f7a20     1.T?I.S?=MQ? zO?
  42b284:	3f4d9f02 3f4bbbf8 3f49d112 3f47de65     ..M?..K?..I?e.G?
  42b294:	3f45e403 3f43e201 3f41d870 3f3fc767     ..E?..C?p.A?g.??
  42b2a4:	3f3daef9 3f3b8f3b 3f396842 3f373a23     ..=?;.;?Bh9?#:7?
  42b2b4:	3f3504f3 3f32c8c9 3f3085bb 3f2e3bde     ..5?..2?..0?.;.?
  42b2c4:	3f2beb4a 3f299415 3f273656 3f24d225     J.+?..)?V6'?%.$?
  42b2d4:	3f226799 3f1ff6cb 3f1d7fd1 3f1b02c6     .g"?...?...?...?
  42b2e4:	3f187fc0 3f15f6d9 3f13682a 3f10d3cd     ...?...?*h.?...?
  42b2f4:	3f0e39da 3f0b9a6b 3f08f59b 3f064b82     .9.?k..?...?.K.?
  42b304:	3f039c3d 3f00e7e4 3efc5d27 3ef6e0cb     =..?...?'].>...>
  42b314:	3ef15aea 3eebcbbb 3ee63375 3ee0924f     .Z.>...>u3.>O..>
  42b324:	3edae880 3ed53641 3ecf7bca 3ec9b953     ...>A6.>.{.>S..>
  42b334:	3ec3ef15 3ebe1d49 3eb8442a 3eb263ef     ...>I..>*D.>.c.>
  42b344:	3eac7cd4 3ea68f12 3ea09ae5 3e9aa086     .|.>...>...>...>
  42b354:	3e94a032 3e8e9a22 3e888e93 3e827dc0     2..>"..>...>.}.>
  42b364:	3e78cfcc 3e6c9a7f 3e605c13 3e541501     ..x>..l>.\`>..T>
  42b374:	3e47c5c2 3e3b6ecf 3e2f10a2 3e22abb5     ..G>.n;>../>..">
  42b384:	3e164083 3e09cf87 3dfab273 3de1bc2f     .@.>...>s..=/..=
  42b394:	3dc8bd36 3dafb680 3d96a904 3d7b2b75     6..=...=...=u+{=
  42b3a4:	3d48fb2e 3d16c32b 3cc90ab1 3c490e92     ..H=+..=...<..I<
  42b3b4:	00000000 bc490e92 bcc90ab1 bd16c32b     ......I.....+...
  42b3c4:	bd48fb2e bd7b2b75 bd96a904 bdafb680     ..H.u+{.........
  42b3d4:	bdc8bd36 bde1bc2f bdfab273 be09cf87     6.../...s.......
  42b3e4:	be164083 be22abb5 be2f10a2 be3b6ecf     .@....".../..n;.
  42b3f4:	be47c5c2 be541501 be605c13 be6c9a7f     ..G...T..\`...l.
  42b404:	be78cfcc be827dc0 be888e93 be8e9a22     ..x..}......"...
  42b414:	be94a032 be9aa086 bea09ae5 bea68f12     2...............
  42b424:	beac7cd4 beb263ef beb8442a bebe1d49     .|...c..*D..I...
  42b434:	bec3ef15 bec9b953 becf7bca bed53641     ....S....{..A6..
  42b444:	bedae880 bee0924f bee63375 beebcbbb     ....O...u3......
  42b454:	bef15aea bef6e0cb befc5d27 bf00e7e4     .Z......']......
  42b464:	bf039c3d bf064b82 bf08f59b bf0b9a6b     =....K......k...
  42b474:	bf0e39da bf10d3cd bf13682a bf15f6d9     .9......*h......
  42b484:	bf187fc0 bf1b02c6 bf1d7fd1 bf1ff6cb     ................
  42b494:	bf226799 bf24d225 bf273656 bf299415     .g".%.$.V6'...).
  42b4a4:	bf2beb4a bf2e3bde bf3085bb bf32c8c9     J.+..;....0...2.
  42b4b4:	bf3504f3 bf373a23 bf396842 bf3b8f3b     ..5.#:7.Bh9.;.;.
  42b4c4:	bf3daef9 bf3fc767 bf41d870 bf43e201     ..=.g.?.p.A...C.
  42b4d4:	bf45e403 bf47de65 bf49d112 bf4bbbf8     ..E.e.G...I...K.
  42b4e4:	bf4d9f02 bf4f7a20 bf514d3d bf531849     ..M. zO.=MQ.I.S.
  42b4f4:	bf54db31 bf5695e5 bf584853 bf59f26a     1.T...V.SHX.j.Y.
  42b504:	bf5b941a bf5d2d53 bf5ebe05 bf604621     ..[.S-]...^.!F`.
  42b514:	bf61c597 bf633c5a bf64aa59 bf660f88     ..a.Z<c.Y.d...f.
  42b524:	bf676bd8 bf68bf3c bf6a09a7 bf6b4b0c     .kg.<.h...j..Kk.
  42b534:	bf6c835e bf6db293 bf6ed89e bf6ff573     ^.l...m...n.s.o.
  42b544:	bf710908 bf721352 bf731447 bf740bdd     ..q.R.r.G.s...t.
  42b554:	bf74fa0b bf75dec6 bf76ba07 bf778bc5     ..t...u...v...w.
  42b564:	bf7853f8 bf791298 bf79c79d bf7a7302     .Sx...y...y..sz.
  42b574:	bf7b14be bf7baccd bf7c3b28 bf7cbfc9     ..{...{.(;|...|.
  42b584:	bf7d3aac bf7dabcc bf7e1323 bf7e70b0     .:}...}.#.~..p~.
  42b594:	bf7ec46d bf7f0e58 bf7f4e6d bf7f84ab     m.~.X...mN......
  42b5a4:	bf7fb10f bf7fd397 bf7fec43 bf7ffb11     ........C.......
  42b5b4:	bf800000 bf7ffb11 bf7fec43 bf7fd397     ........C.......
  42b5c4:	bf7fb10f bf7f84ab bf7f4e6d bf7f0e58     ........mN..X...
  42b5d4:	bf7ec46d bf7e70b0 bf7e1323 bf7dabcc     m.~..p~.#.~...}.
  42b5e4:	bf7d3aac bf7cbfc9 bf7c3b28 bf7baccd     .:}...|.(;|...{.
  42b5f4:	bf7b14be bf7a7302 bf79c79d bf791298     ..{..sz...y...y.
  42b604:	bf7853f8 bf778bc5 bf76ba07 bf75dec6     .Sx...w...v...u.
  42b614:	bf74fa0b bf740bdd bf731447 bf721352     ..t...t.G.s.R.r.
  42b624:	bf710908 bf6ff573 bf6ed89e bf6db293     ..q.s.o...n...m.
  42b634:	bf6c835e bf6b4b0c bf6a09a7 bf68bf3c     ^.l..Kk...j.<.h.
  42b644:	bf676bd8 bf660f88 bf64aa59 bf633c5a     .kg...f.Y.d.Z<c.
  42b654:	bf61c597 bf604621 bf5ebe05 bf5d2d53     ..a.!F`...^.S-].
  42b664:	bf5b941a bf59f26a bf584853 bf5695e5     ..[.j.Y.SHX...V.
  42b674:	bf54db31 bf531849 bf514d3d bf4f7a20     1.T.I.S.=MQ. zO.
  42b684:	bf4d9f02 bf4bbbf8 bf49d112 bf47de65     ..M...K...I.e.G.
  42b694:	bf45e403 bf43e201 bf41d870 bf3fc767     ..E...C.p.A.g.?.
  42b6a4:	bf3daef9 bf3b8f3b bf396842 bf373a23     ..=.;.;.Bh9.#:7.
  42b6b4:	bf3504f3 bf32c8c9 bf3085bb bf2e3bde     ..5...2...0..;..
  42b6c4:	bf2beb4a bf299415 bf273656 bf24d225     J.+...).V6'.%.$.
  42b6d4:	bf226799 bf1ff6cb bf1d7fd1 bf1b02c6     .g".............
  42b6e4:	bf187fc0 bf15f6d9 bf13682a bf10d3cd     ........*h......
  42b6f4:	bf0e39da bf0b9a6b bf08f59b bf064b82     .9..k........K..
  42b704:	bf039c3d bf00e7e4 befc5d27 bef6e0cb     =.......']......
  42b714:	bef15aea beebcbbb bee63375 bee0924f     .Z......u3..O...
  42b724:	bedae880 bed53641 becf7bca bec9b953     ....A6...{..S...
  42b734:	bec3ef15 bebe1d49 beb8442a beb263ef     ....I...*D...c..
  42b744:	beac7cd4 bea68f12 bea09ae5 be9aa086     .|..............
  42b754:	be94a032 be8e9a22 be888e93 be827dc0     2..."........}..
  42b764:	be78cfcc be6c9a7f be605c13 be541501     ..x...l..\`...T.
  42b774:	be47c5c2 be3b6ecf be2f10a2 be22abb5     ..G..n;.../...".
  42b784:	be164083 be09cf87 bdfab273 bde1bc2f     .@......s.../...
  42b794:	bdc8bd36 bdafb680 bd96a904 bd7b2b75     6...........u+{.
  42b7a4:	bd48fb2e bd16c32b bcc90ab1 bc490e92     ..H.+.........I.
  42b7b4:	80000000                                ....

0042b7b8 <_global_impure_ptr>:
  42b7b8:	20400078 33323130 37363534 42413938     x.@ 0123456789AB
  42b7c8:	46454443 00000000 33323130 37363534     CDEF....01234567
  42b7d8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  42b7e8:	0000296c                                l)..

0042b7ec <blanks.7217>:
  42b7ec:	20202020 20202020 20202020 20202020                     

0042b7fc <zeroes.7218>:
  42b7fc:	30303030 30303030 30303030 30303030     0000000000000000
  42b80c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0042b81c <_ctype_>:
  42b81c:	20202000 20202020 28282020 20282828     .         ((((( 
  42b82c:	20202020 20202020 20202020 20202020                     
  42b83c:	10108820 10101010 10101010 10101010      ...............
  42b84c:	04040410 04040404 10040404 10101010     ................
  42b85c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  42b86c:	01010101 01010101 01010101 10101010     ................
  42b87c:	42421010 42424242 02020202 02020202     ..BBBBBB........
  42b88c:	02020202 02020202 02020202 10101010     ................
  42b89c:	00000020 00000000 00000000 00000000      ...............
	...

0042b920 <_init>:
  42b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42b922:	bf00      	nop
  42b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42b926:	bc08      	pop	{r3}
  42b928:	469e      	mov	lr, r3
  42b92a:	4770      	bx	lr

0042b92c <__init_array_start>:
  42b92c:	00423af9 	.word	0x00423af9

0042b930 <__frame_dummy_init_array_entry>:
  42b930:	0040018d                                ..@.

0042b934 <_fini>:
  42b934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  42b936:	bf00      	nop
  42b938:	bcf8      	pop	{r3, r4, r5, r6, r7}
  42b93a:	bc08      	pop	{r3}
  42b93c:	469e      	mov	lr, r3
  42b93e:	4770      	bx	lr

0042b940 <__fini_array_start>:
  42b940:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <uxCriticalNesting>:
2040000c:	aaaa aaaa                                   ....

20400010 <font_dsc>:
20400010:	6754 0042 627c 0042 6254 0042 94a0 0042     TgB.|bB.TbB...B.
20400020:	0010 2802 0000 0000 0000 0000               ...(........

2040002c <lv_font_montserrat_14>:
2040002c:	44f1 0041 43e5 0041 0010 0003 ff00 0001     .DA..CA.........
2040003c:	0010 2040                                   ..@ 

20400040 <mem_buf_small>:
20400040:	c760 2040 0010 0000 c770 2040 0010 0000     `.@ ....p.@ ....

20400050 <_lv_txt_encoded_get_byte_id>:
20400050:	6a5d 0041                                   ]jA.

20400054 <_lv_txt_encoded_get_char_id>:
20400054:	6a89 0041                                   .jA.

20400058 <_lv_txt_encoded_next>:
20400058:	6905 0041                                   .iA.

2040005c <_lv_txt_encoded_prev>:
2040005c:	6a05 0041                                   .jA.

20400060 <_lv_txt_encoded_size>:
20400060:	68d1 0041                                   .hA.

20400064 <_lv_txt_get_encoded_length>:
20400064:	6ab5 0041                                   .jA.

20400068 <g_interrupt_enabled>:
20400068:	0001 0000                                   ....

2040006c <SystemCoreClock>:
2040006c:	0900 003d                                   ..=.

20400070 <_impure_ptr>:
20400070:	0078 2040 0000 0000                         x.@ ....

20400078 <impure_data>:
20400078:	0000 0000 0364 2040 03cc 2040 0434 2040     ....d.@ ..@ 4.@ 
	...
20400120:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400130:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

204004a0 <__malloc_av_>:
	...
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 
20400848:	0840 2040 0840 2040 0848 2040 0848 2040     @.@ @.@ H.@ H.@ 
20400858:	0850 2040 0850 2040 0858 2040 0858 2040     P.@ P.@ X.@ X.@ 
20400868:	0860 2040 0860 2040 0868 2040 0868 2040     `.@ `.@ h.@ h.@ 
20400878:	0870 2040 0870 2040 0878 2040 0878 2040     p.@ p.@ x.@ x.@ 
20400888:	0880 2040 0880 2040 0888 2040 0888 2040     ..@ ..@ ..@ ..@ 
20400898:	0890 2040 0890 2040 0898 2040 0898 2040     ..@ ..@ ..@ ..@ 

204008a8 <__malloc_sbrk_base>:
204008a8:	ffff ffff                                   ....

204008ac <__malloc_trim_threshold>:
204008ac:	0000 0002                                   ....

204008b0 <__atexit_recursive_mutex>:
204008b0:	a338 2043                                   8.C 

204008b4 <__global_locale>:
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400954:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400974:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400994:	4bf1 0042 4581 0042 0000 0000 b81c 0042     .KB..EB.......B.
204009a4:	b818 0042 af74 0042 af74 0042 af74 0042     ..B.t.B.t.B.t.B.
204009b4:	af74 0042 af74 0042 af74 0042 af74 0042     t.B.t.B.t.B.t.B.
204009c4:	af74 0042 af74 0042 ffff ffff ffff ffff     t.B.t.B.........
204009d4:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009fc:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
